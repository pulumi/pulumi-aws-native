// Code generated by MockGen. DO NOT EDIT.
// Source: s3.go
//
// Generated by this command:
//
//	mockgen -package client -source s3.go -destination mock_s3.go S3Client,S3Api,S3PresignApi
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "go.uber.org/mock/gomock"
)

// MockS3Client is a mock of S3Client interface.
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
	isgomock struct{}
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client.
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance.
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// PresignPutObject mocks base method.
func (m *MockS3Client) PresignPutObject(ctx context.Context, bucket, key string, expiration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignPutObject", ctx, bucket, key, expiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignPutObject indicates an expected call of PresignPutObject.
func (mr *MockS3ClientMockRecorder) PresignPutObject(ctx, bucket, key, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignPutObject", reflect.TypeOf((*MockS3Client)(nil).PresignPutObject), ctx, bucket, key, expiration)
}

// WaitForObject mocks base method.
func (m *MockS3Client) WaitForObject(ctx context.Context, bucket, key string, timeout time.Duration) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForObject", ctx, bucket, key, timeout)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForObject indicates an expected call of WaitForObject.
func (mr *MockS3ClientMockRecorder) WaitForObject(ctx, bucket, key, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForObject", reflect.TypeOf((*MockS3Client)(nil).WaitForObject), ctx, bucket, key, timeout)
}

// MockS3Api is a mock of S3Api interface.
type MockS3Api struct {
	ctrl     *gomock.Controller
	recorder *MockS3ApiMockRecorder
	isgomock struct{}
}

// MockS3ApiMockRecorder is the mock recorder for MockS3Api.
type MockS3ApiMockRecorder struct {
	mock *MockS3Api
}

// NewMockS3Api creates a new mock instance.
func NewMockS3Api(ctrl *gomock.Controller) *MockS3Api {
	mock := &MockS3Api{ctrl: ctrl}
	mock.recorder = &MockS3ApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Api) EXPECT() *MockS3ApiMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockS3Api) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockS3ApiMockRecorder) GetObject(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3Api)(nil).GetObject), varargs...)
}

// HeadObject mocks base method.
func (m *MockS3Api) HeadObject(arg0 context.Context, arg1 *s3.HeadObjectInput, arg2 ...func(*s3.Options)) (*s3.HeadObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadObject", varargs...)
	ret0, _ := ret[0].(*s3.HeadObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject.
func (mr *MockS3ApiMockRecorder) HeadObject(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObject", reflect.TypeOf((*MockS3Api)(nil).HeadObject), varargs...)
}

// MockS3PresignApi is a mock of S3PresignApi interface.
type MockS3PresignApi struct {
	ctrl     *gomock.Controller
	recorder *MockS3PresignApiMockRecorder
	isgomock struct{}
}

// MockS3PresignApiMockRecorder is the mock recorder for MockS3PresignApi.
type MockS3PresignApiMockRecorder struct {
	mock *MockS3PresignApi
}

// NewMockS3PresignApi creates a new mock instance.
func NewMockS3PresignApi(ctrl *gomock.Controller) *MockS3PresignApi {
	mock := &MockS3PresignApi{ctrl: ctrl}
	mock.recorder = &MockS3PresignApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3PresignApi) EXPECT() *MockS3PresignApiMockRecorder {
	return m.recorder
}

// PresignPutObject mocks base method.
func (m *MockS3PresignApi) PresignPutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PresignPutObject", varargs...)
	ret0, _ := ret[0].(*v4.PresignedHTTPRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignPutObject indicates an expected call of PresignPutObject.
func (mr *MockS3PresignApiMockRecorder) PresignPutObject(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignPutObject", reflect.TypeOf((*MockS3PresignApi)(nil).PresignPutObject), varargs...)
}
