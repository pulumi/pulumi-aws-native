// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -package client -source client.go -destination mock_client.go CloudControlApiClient
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	jsonpatch "github.com/mattbaird/jsonpatch"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudControlClient is a mock of CloudControlClient interface.
type MockCloudControlClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudControlClientMockRecorder
	isgomock struct{}
}

// MockCloudControlClientMockRecorder is the mock recorder for MockCloudControlClient.
type MockCloudControlClientMockRecorder struct {
	mock *MockCloudControlClient
}

// NewMockCloudControlClient creates a new mock instance.
func NewMockCloudControlClient(ctrl *gomock.Controller) *MockCloudControlClient {
	mock := &MockCloudControlClient{ctrl: ctrl}
	mock.recorder = &MockCloudControlClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudControlClient) EXPECT() *MockCloudControlClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCloudControlClient) Create(ctx context.Context, typeName string, desiredState map[string]any) (*string, map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, typeName, desiredState)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(map[string]any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockCloudControlClientMockRecorder) Create(ctx, typeName, desiredState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCloudControlClient)(nil).Create), ctx, typeName, desiredState)
}

// Delete mocks base method.
func (m *MockCloudControlClient) Delete(ctx context.Context, typeName, identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, typeName, identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCloudControlClientMockRecorder) Delete(ctx, typeName, identifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCloudControlClient)(nil).Delete), ctx, typeName, identifier)
}

// Read mocks base method.
func (m *MockCloudControlClient) Read(ctx context.Context, typeName, identifier string) (map[string]any, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, typeName, identifier)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockCloudControlClientMockRecorder) Read(ctx, typeName, identifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCloudControlClient)(nil).Read), ctx, typeName, identifier)
}

// Update mocks base method.
func (m *MockCloudControlClient) Update(ctx context.Context, typeName, identifier string, patches []jsonpatch.JsonPatchOperation) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, typeName, identifier, patches)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCloudControlClientMockRecorder) Update(ctx, typeName, identifier, patches any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCloudControlClient)(nil).Update), ctx, typeName, identifier, patches)
}
