// Code generated by MockGen. DO NOT EDIT.
// Source: lambda.go
//
// Generated by this command:
//
//	mockgen -package client -source lambda.go -destination mock_lambda.go LambdaClient,LambdaApi
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	lambda "github.com/aws/aws-sdk-go-v2/service/lambda"
	gomock "go.uber.org/mock/gomock"
)

// MockLambdaClient is a mock of LambdaClient interface.
type MockLambdaClient struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaClientMockRecorder
	isgomock struct{}
}

// MockLambdaClientMockRecorder is the mock recorder for MockLambdaClient.
type MockLambdaClientMockRecorder struct {
	mock *MockLambdaClient
}

// NewMockLambdaClient creates a new mock instance.
func NewMockLambdaClient(ctrl *gomock.Controller) *MockLambdaClient {
	mock := &MockLambdaClient{ctrl: ctrl}
	mock.recorder = &MockLambdaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLambdaClient) EXPECT() *MockLambdaClientMockRecorder {
	return m.recorder
}

// InvokeAsync mocks base method.
func (m *MockLambdaClient) InvokeAsync(ctx context.Context, functionName string, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeAsync", ctx, functionName, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvokeAsync indicates an expected call of InvokeAsync.
func (mr *MockLambdaClientMockRecorder) InvokeAsync(ctx, functionName, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeAsync", reflect.TypeOf((*MockLambdaClient)(nil).InvokeAsync), ctx, functionName, payload)
}

// MockLambdaApi is a mock of LambdaApi interface.
type MockLambdaApi struct {
	ctrl     *gomock.Controller
	recorder *MockLambdaApiMockRecorder
	isgomock struct{}
}

// MockLambdaApiMockRecorder is the mock recorder for MockLambdaApi.
type MockLambdaApiMockRecorder struct {
	mock *MockLambdaApi
}

// NewMockLambdaApi creates a new mock instance.
func NewMockLambdaApi(ctrl *gomock.Controller) *MockLambdaApi {
	mock := &MockLambdaApi{ctrl: ctrl}
	mock.recorder = &MockLambdaApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLambdaApi) EXPECT() *MockLambdaApiMockRecorder {
	return m.recorder
}

// GetFunction mocks base method.
func (m *MockLambdaApi) GetFunction(arg0 context.Context, arg1 *lambda.GetFunctionInput, arg2 ...func(*lambda.Options)) (*lambda.GetFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFunction", varargs...)
	ret0, _ := ret[0].(*lambda.GetFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction.
func (mr *MockLambdaApiMockRecorder) GetFunction(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockLambdaApi)(nil).GetFunction), varargs...)
}

// Invoke mocks base method.
func (m *MockLambdaApi) Invoke(ctx context.Context, params *lambda.InvokeInput, optFns ...func(*lambda.Options)) (*lambda.InvokeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invoke", varargs...)
	ret0, _ := ret[0].(*lambda.InvokeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockLambdaApiMockRecorder) Invoke(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockLambdaApi)(nil).Invoke), varargs...)
}
