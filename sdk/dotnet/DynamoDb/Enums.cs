// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.DynamoDb
{
    /// <summary>
    /// Specifies the CloudWatch Contributor Insights mode for a global table. Valid values are `ACCESSED_AND_THROTTLED_KEYS` (tracks all access and throttled events) or `THROTTLED_KEYS` (tracks only throttled events). This setting determines what type of contributor insights data is collected for the global table.
    /// </summary>
    [EnumType]
    public readonly struct GlobalTableContributorInsightsSpecificationMode : IEquatable<GlobalTableContributorInsightsSpecificationMode>
    {
        private readonly string _value;

        private GlobalTableContributorInsightsSpecificationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GlobalTableContributorInsightsSpecificationMode AccessedAndThrottledKeys { get; } = new GlobalTableContributorInsightsSpecificationMode("ACCESSED_AND_THROTTLED_KEYS");
        public static GlobalTableContributorInsightsSpecificationMode ThrottledKeys { get; } = new GlobalTableContributorInsightsSpecificationMode("THROTTLED_KEYS");

        public static bool operator ==(GlobalTableContributorInsightsSpecificationMode left, GlobalTableContributorInsightsSpecificationMode right) => left.Equals(right);
        public static bool operator !=(GlobalTableContributorInsightsSpecificationMode left, GlobalTableContributorInsightsSpecificationMode right) => !left.Equals(right);

        public static explicit operator string(GlobalTableContributorInsightsSpecificationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GlobalTableContributorInsightsSpecificationMode other && Equals(other);
        public bool Equals(GlobalTableContributorInsightsSpecificationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The precision for the time and date that the stream was created.
    /// </summary>
    [EnumType]
    public readonly struct GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision : IEquatable<GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision>
    {
        private readonly string _value;

        private GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision Microsecond { get; } = new GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision("MICROSECOND");
        public static GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision Millisecond { get; } = new GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision("MILLISECOND");

        public static bool operator ==(GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision left, GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision right) => left.Equals(right);
        public static bool operator !=(GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision left, GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision right) => !left.Equals(right);

        public static explicit operator string(GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision other && Equals(other);
        public bool Equals(GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the consistency mode for a new global table.
    /// 
    /// You can specify one of the following consistency modes:
    /// 
    /// - `EVENTUAL` : Configures a new global table for multi-Region eventual consistency (MREC).
    /// - `STRONG` : Configures a new global table for multi-Region strong consistency (MRSC).
    /// 
    /// If you don't specify this field, the global table consistency mode defaults to `EVENTUAL` . For more information about global tables consistency modes, see [Consistency modes](https://docs.aws.amazon.com/V2globaltables_HowItWorks.html#V2globaltables_HowItWorks.consistency-modes) in DynamoDB developer guide.
    /// </summary>
    [EnumType]
    public readonly struct GlobalTableMultiRegionConsistency : IEquatable<GlobalTableMultiRegionConsistency>
    {
        private readonly string _value;

        private GlobalTableMultiRegionConsistency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GlobalTableMultiRegionConsistency Eventual { get; } = new GlobalTableMultiRegionConsistency("EVENTUAL");
        public static GlobalTableMultiRegionConsistency Strong { get; } = new GlobalTableMultiRegionConsistency("STRONG");

        public static bool operator ==(GlobalTableMultiRegionConsistency left, GlobalTableMultiRegionConsistency right) => left.Equals(right);
        public static bool operator !=(GlobalTableMultiRegionConsistency left, GlobalTableMultiRegionConsistency right) => !left.Equals(right);

        public static explicit operator string(GlobalTableMultiRegionConsistency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GlobalTableMultiRegionConsistency other && Equals(other);
        public bool Equals(GlobalTableMultiRegionConsistency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GlobalTableSettingsReplicationMode : IEquatable<GlobalTableSettingsReplicationMode>
    {
        private readonly string _value;

        private GlobalTableSettingsReplicationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GlobalTableSettingsReplicationMode Enabled { get; } = new GlobalTableSettingsReplicationMode("ENABLED");
        public static GlobalTableSettingsReplicationMode Disabled { get; } = new GlobalTableSettingsReplicationMode("DISABLED");

        public static bool operator ==(GlobalTableSettingsReplicationMode left, GlobalTableSettingsReplicationMode right) => left.Equals(right);
        public static bool operator !=(GlobalTableSettingsReplicationMode left, GlobalTableSettingsReplicationMode right) => !left.Equals(right);

        public static explicit operator string(GlobalTableSettingsReplicationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GlobalTableSettingsReplicationMode other && Equals(other);
        public bool Equals(GlobalTableSettingsReplicationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the CloudWatch Contributor Insights mode for a table. Valid values are ``ACCESSED_AND_THROTTLED_KEYS`` (tracks all access and throttled events) or ``THROTTLED_KEYS`` (tracks only throttled events). This setting determines what type of contributor insights data is collected for the table.
    /// </summary>
    [EnumType]
    public readonly struct TableContributorInsightsSpecificationMode : IEquatable<TableContributorInsightsSpecificationMode>
    {
        private readonly string _value;

        private TableContributorInsightsSpecificationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TableContributorInsightsSpecificationMode AccessedAndThrottledKeys { get; } = new TableContributorInsightsSpecificationMode("ACCESSED_AND_THROTTLED_KEYS");
        public static TableContributorInsightsSpecificationMode ThrottledKeys { get; } = new TableContributorInsightsSpecificationMode("THROTTLED_KEYS");

        public static bool operator ==(TableContributorInsightsSpecificationMode left, TableContributorInsightsSpecificationMode right) => left.Equals(right);
        public static bool operator !=(TableContributorInsightsSpecificationMode left, TableContributorInsightsSpecificationMode right) => !left.Equals(right);

        public static explicit operator string(TableContributorInsightsSpecificationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TableContributorInsightsSpecificationMode other && Equals(other);
        public bool Equals(TableContributorInsightsSpecificationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TableGlobalTableSettingsReplicationMode : IEquatable<TableGlobalTableSettingsReplicationMode>
    {
        private readonly string _value;

        private TableGlobalTableSettingsReplicationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TableGlobalTableSettingsReplicationMode Enabled { get; } = new TableGlobalTableSettingsReplicationMode("ENABLED");
        public static TableGlobalTableSettingsReplicationMode Disabled { get; } = new TableGlobalTableSettingsReplicationMode("DISABLED");

        public static bool operator ==(TableGlobalTableSettingsReplicationMode left, TableGlobalTableSettingsReplicationMode right) => left.Equals(right);
        public static bool operator !=(TableGlobalTableSettingsReplicationMode left, TableGlobalTableSettingsReplicationMode right) => !left.Equals(right);

        public static explicit operator string(TableGlobalTableSettingsReplicationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TableGlobalTableSettingsReplicationMode other && Equals(other);
        public bool Equals(TableGlobalTableSettingsReplicationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The precision for the time and date that the stream was created.
    /// </summary>
    [EnumType]
    public readonly struct TableKinesisStreamSpecificationApproximateCreationDateTimePrecision : IEquatable<TableKinesisStreamSpecificationApproximateCreationDateTimePrecision>
    {
        private readonly string _value;

        private TableKinesisStreamSpecificationApproximateCreationDateTimePrecision(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TableKinesisStreamSpecificationApproximateCreationDateTimePrecision Microsecond { get; } = new TableKinesisStreamSpecificationApproximateCreationDateTimePrecision("MICROSECOND");
        public static TableKinesisStreamSpecificationApproximateCreationDateTimePrecision Millisecond { get; } = new TableKinesisStreamSpecificationApproximateCreationDateTimePrecision("MILLISECOND");

        public static bool operator ==(TableKinesisStreamSpecificationApproximateCreationDateTimePrecision left, TableKinesisStreamSpecificationApproximateCreationDateTimePrecision right) => left.Equals(right);
        public static bool operator !=(TableKinesisStreamSpecificationApproximateCreationDateTimePrecision left, TableKinesisStreamSpecificationApproximateCreationDateTimePrecision right) => !left.Equals(right);

        public static explicit operator string(TableKinesisStreamSpecificationApproximateCreationDateTimePrecision value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TableKinesisStreamSpecificationApproximateCreationDateTimePrecision other && Equals(other);
        public bool Equals(TableKinesisStreamSpecificationApproximateCreationDateTimePrecision other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
