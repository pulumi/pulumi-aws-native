// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.DynamoDb.Inputs
{

    public sealed class GlobalTableReplicaSpecificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The settings used to enable or disable CloudWatch Contributor Insights for the specified replica. When not specified, defaults to contributor insights disabled for the replica.
        /// </summary>
        [Input("contributorInsightsSpecification")]
        public Input<Inputs.GlobalTableContributorInsightsSpecificationArgs>? ContributorInsightsSpecification { get; set; }

        /// <summary>
        /// Determines if a replica is protected from deletion. When enabled, the table cannot be deleted by any user or process. This setting is disabled by default. For more information, see [Using deletion protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection) in the *Amazon DynamoDB Developer Guide* .
        /// </summary>
        [Input("deletionProtectionEnabled")]
        public Input<bool>? DeletionProtectionEnabled { get; set; }

        [Input("globalSecondaryIndexes")]
        private InputList<Inputs.GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs>? _globalSecondaryIndexes;

        /// <summary>
        /// Defines additional settings for the global secondary indexes of this replica.
        /// </summary>
        public InputList<Inputs.GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs> GlobalSecondaryIndexes
        {
            get => _globalSecondaryIndexes ?? (_globalSecondaryIndexes = new InputList<Inputs.GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs>());
            set => _globalSecondaryIndexes = value;
        }

        /// <summary>
        /// Defines the Kinesis Data Streams configuration for the specified replica.
        /// </summary>
        [Input("kinesisStreamSpecification")]
        public Input<Inputs.GlobalTableKinesisStreamSpecificationArgs>? KinesisStreamSpecification { get; set; }

        /// <summary>
        /// The settings used to enable point in time recovery. When not specified, defaults to point in time recovery disabled for the replica.
        /// </summary>
        [Input("pointInTimeRecoverySpecification")]
        public Input<Inputs.GlobalTablePointInTimeRecoverySpecificationArgs>? PointInTimeRecoverySpecification { get; set; }

        /// <summary>
        /// Sets read request settings for the replica table.
        /// </summary>
        [Input("readOnDemandThroughputSettings")]
        public Input<Inputs.GlobalTableReadOnDemandThroughputSettingsArgs>? ReadOnDemandThroughputSettings { get; set; }

        /// <summary>
        /// Defines read capacity settings for the replica table.
        /// </summary>
        [Input("readProvisionedThroughputSettings")]
        public Input<Inputs.GlobalTableReadProvisionedThroughputSettingsArgs>? ReadProvisionedThroughputSettings { get; set; }

        /// <summary>
        /// The region in which this replica exists.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Represents the DynamoDB Streams configuration for a global table replica.
        /// </summary>
        [Input("replicaStreamSpecification")]
        public Input<Inputs.GlobalTableReplicaStreamSpecificationArgs>? ReplicaStreamSpecification { get; set; }

        /// <summary>
        /// A resource-based policy document that contains permissions to add to the specified replica of a DynamoDB global table. Resource-based policies let you define access permissions by specifying who has access to each resource, and the actions they are allowed to perform on each resource.
        /// 
        /// In a CloudFormation template, you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to DynamoDB . For more information about resource-based policies, see [Using resource-based policies for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html) .
        /// </summary>
        [Input("resourcePolicy")]
        public Input<Inputs.GlobalTableResourcePolicyArgs>? ResourcePolicy { get; set; }

        /// <summary>
        /// Allows you to specify a customer-managed key for the replica. When using customer-managed keys for server-side encryption, this property must have a value in all replicas.
        /// </summary>
        [Input("sseSpecification")]
        public Input<Inputs.GlobalTableReplicaSseSpecificationArgs>? SseSpecification { get; set; }

        /// <summary>
        /// The table class of the specified table. Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS` .
        /// </summary>
        [Input("tableClass")]
        public Input<string>? TableClass { get; set; }

        [Input("tags")]
        private InputList<Inputs.GlobalTableTagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this replica.
        /// 
        /// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
        /// </summary>
        public InputList<Inputs.GlobalTableTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GlobalTableTagArgs>());
            set => _tags = value;
        }

        public GlobalTableReplicaSpecificationArgs()
        {
        }
        public static new GlobalTableReplicaSpecificationArgs Empty => new GlobalTableReplicaSpecificationArgs();
    }
}
