// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.DynamoDb.Inputs
{

    public sealed class GlobalTableGlobalSecondaryIndexArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the global secondary index. The name must be unique among all other indexes on this table.
        /// </summary>
        [Input("indexName", required: true)]
        public Input<string> IndexName { get; set; } = null!;

        [Input("keySchema", required: true)]
        private InputList<Inputs.GlobalTableKeySchemaArgs>? _keySchema;

        /// <summary>
        /// The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
        /// 
        /// - `HASH` - partition key
        /// - `RANGE` - sort key
        /// 
        /// &gt; The partition key of an item is also known as its *hash attribute* . The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
        /// &gt; 
        /// &gt; The sort key of an item is also known as its *range attribute* . The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
        /// </summary>
        public InputList<Inputs.GlobalTableKeySchemaArgs> KeySchema
        {
            get => _keySchema ?? (_keySchema = new InputList<Inputs.GlobalTableKeySchemaArgs>());
            set => _keySchema = value;
        }

        /// <summary>
        /// Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
        /// </summary>
        [Input("projection", required: true)]
        public Input<Inputs.GlobalTableProjectionArgs> Projection { get; set; } = null!;

        /// <summary>
        /// Represents the warm throughput value (in read units per second and write units per second) for the specified secondary index. If you use this parameter, you must specify `ReadUnitsPerSecond` , `WriteUnitsPerSecond` , or both.
        /// </summary>
        [Input("warmThroughput")]
        public Input<Inputs.GlobalTableWarmThroughputArgs>? WarmThroughput { get; set; }

        /// <summary>
        /// Sets the write request settings for a global table or a global secondary index. You can only specify this setting if your resource uses the `PAY_PER_REQUEST` `BillingMode` .
        /// </summary>
        [Input("writeOnDemandThroughputSettings")]
        public Input<Inputs.GlobalTableWriteOnDemandThroughputSettingsArgs>? WriteOnDemandThroughputSettings { get; set; }

        /// <summary>
        /// Defines write capacity settings for the global secondary index. You must specify a value for this property if the table's `BillingMode` is `PROVISIONED` . All replicas will have the same write capacity settings for this global secondary index.
        /// </summary>
        [Input("writeProvisionedThroughputSettings")]
        public Input<Inputs.GlobalTableWriteProvisionedThroughputSettingsArgs>? WriteProvisionedThroughputSettings { get; set; }

        public GlobalTableGlobalSecondaryIndexArgs()
        {
        }
        public static new GlobalTableGlobalSecondaryIndexArgs Empty => new GlobalTableGlobalSecondaryIndexArgs();
    }
}
