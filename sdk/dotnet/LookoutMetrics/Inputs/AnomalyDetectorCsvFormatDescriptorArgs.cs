// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.LookoutMetrics.Inputs
{

    public sealed class AnomalyDetectorCsvFormatDescriptorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The character set in which the source CSV file is written.
        /// </summary>
        [Input("charset")]
        public Input<string>? Charset { get; set; }

        /// <summary>
        /// Whether or not the source CSV file contains a header.
        /// </summary>
        [Input("containsHeader")]
        public Input<bool>? ContainsHeader { get; set; }

        /// <summary>
        /// The character used to delimit the source CSV file.
        /// </summary>
        [Input("delimiter")]
        public Input<string>? Delimiter { get; set; }

        /// <summary>
        /// The level of compression of the source CSV file.
        /// </summary>
        [Input("fileCompression")]
        public Input<Pulumi.AwsNative.LookoutMetrics.AnomalyDetectorCsvFormatDescriptorFileCompression>? FileCompression { get; set; }

        [Input("headerList")]
        private InputList<string>? _headerList;

        /// <summary>
        /// A list of the source CSV file's headers, if any.
        /// </summary>
        public InputList<string> HeaderList
        {
            get => _headerList ?? (_headerList = new InputList<string>());
            set => _headerList = value;
        }

        /// <summary>
        /// The character used as a quote character.
        /// </summary>
        [Input("quoteSymbol")]
        public Input<string>? QuoteSymbol { get; set; }

        public AnomalyDetectorCsvFormatDescriptorArgs()
        {
        }
        public static new AnomalyDetectorCsvFormatDescriptorArgs Empty => new AnomalyDetectorCsvFormatDescriptorArgs();
    }
}
