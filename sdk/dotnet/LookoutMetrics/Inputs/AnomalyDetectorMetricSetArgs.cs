// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.LookoutMetrics.Inputs
{

    public sealed class AnomalyDetectorMetricSetArgs : Pulumi.ResourceArgs
    {
        [Input("dimensionList")]
        private InputList<string>? _dimensionList;

        /// <summary>
        /// Dimensions for this MetricSet.
        /// </summary>
        public InputList<string> DimensionList
        {
            get => _dimensionList ?? (_dimensionList = new InputList<string>());
            set => _dimensionList = value;
        }

        [Input("metricList", required: true)]
        private InputList<Inputs.AnomalyDetectorMetricArgs>? _metricList;

        /// <summary>
        /// Metrics captured by this MetricSet.
        /// </summary>
        public InputList<Inputs.AnomalyDetectorMetricArgs> MetricList
        {
            get => _metricList ?? (_metricList = new InputList<Inputs.AnomalyDetectorMetricArgs>());
            set => _metricList = value;
        }

        /// <summary>
        /// A description for the MetricSet.
        /// </summary>
        [Input("metricSetDescription")]
        public Input<string>? MetricSetDescription { get; set; }

        /// <summary>
        /// A frequency period to aggregate the data
        /// </summary>
        [Input("metricSetFrequency")]
        public Input<Pulumi.AwsNative.LookoutMetrics.AnomalyDetectorMetricSetMetricSetFrequency>? MetricSetFrequency { get; set; }

        /// <summary>
        /// The name of the MetricSet.
        /// </summary>
        [Input("metricSetName", required: true)]
        public Input<string> MetricSetName { get; set; } = null!;

        [Input("metricSource", required: true)]
        public Input<Inputs.AnomalyDetectorMetricSourceArgs> MetricSource { get; set; } = null!;

        /// <summary>
        /// Offset, in seconds, between the frequency interval and the time at which the metrics are available.
        /// </summary>
        [Input("offset")]
        public Input<int>? Offset { get; set; }

        [Input("timestampColumn")]
        public Input<Inputs.AnomalyDetectorTimestampColumnArgs>? TimestampColumn { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public AnomalyDetectorMetricSetArgs()
        {
        }
    }
}
