// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Kinesis
{
    /// <summary>
    /// Resource Type definition for AWS::Kinesis::StreamConsumer
    /// </summary>
    [AwsNativeResourceType("aws-native:kinesis:StreamConsumer")]
    public partial class StreamConsumer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
        /// </summary>
        [Output("consumerArn")]
        public Output<string> ConsumerArn { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the consumer was created.
        /// </summary>
        [Output("consumerCreationTimestamp")]
        public Output<string> ConsumerCreationTimestamp { get; private set; } = null!;

        /// <summary>
        /// The name of the Kinesis Stream Consumer. For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
        /// </summary>
        [Output("consumerName")]
        public Output<string> ConsumerName { get; private set; } = null!;

        /// <summary>
        /// A consumer can't read data while in the CREATING or DELETING states. Valid Values: CREATING | DELETING | ACTIVE
        /// </summary>
        [Output("consumerStatus")]
        public Output<string> ConsumerStatus { get; private set; } = null!;

        /// <summary>
        /// The Amazon resource name (ARN) of the Kinesis data stream that you want to register the consumer with.
        /// </summary>
        [Output("streamArn")]
        public Output<string> StreamArn { get; private set; } = null!;

        /// <summary>
        /// An arbitrary set of tags (key–value pairs) to associate with the Kinesis consumer.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.CreateOnlyTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a StreamConsumer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamConsumer(string name, StreamConsumerArgs args, CustomResourceOptions? options = null)
            : base("aws-native:kinesis:StreamConsumer", name, args ?? new StreamConsumerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamConsumer(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:kinesis:StreamConsumer", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "consumerName",
                    "streamArn",
                    "tags[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamConsumer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamConsumer Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new StreamConsumer(name, id, options);
        }
    }

    public sealed class StreamConsumerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Kinesis Stream Consumer. For a given Kinesis data stream, each consumer must have a unique name. However, consumer names don't have to be unique across data streams.
        /// </summary>
        [Input("consumerName")]
        public Input<string>? ConsumerName { get; set; }

        /// <summary>
        /// The Amazon resource name (ARN) of the Kinesis data stream that you want to register the consumer with.
        /// </summary>
        [Input("streamArn", required: true)]
        public Input<string> StreamArn { get; set; } = null!;

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs>? _tags;

        /// <summary>
        /// An arbitrary set of tags (key–value pairs) to associate with the Kinesis consumer.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs>());
            set => _tags = value;
        }

        public StreamConsumerArgs()
        {
        }
        public static new StreamConsumerArgs Empty => new StreamConsumerArgs();
    }
}
