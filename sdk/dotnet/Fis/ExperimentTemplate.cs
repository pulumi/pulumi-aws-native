// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Fis
{
    /// <summary>
    /// Resource schema for AWS::FIS::ExperimentTemplate
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fisRole = new AwsNative.Iam.Role("fisRole", new()
    ///     {
    ///         AssumeRolePolicyDocument = new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = "2012-10-17",
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = "fis.amazonaws.com",
    ///                     },
    ///                     ["action"] = "sts:AssumeRole",
    ///                 },
    ///             },
    ///         },
    ///         Policies = new[]
    ///         {
    ///             new AwsNative.Iam.Inputs.RolePolicyArgs
    ///             {
    ///                 PolicyName = "FISRoleEC2Actions",
    ///                 PolicyDocument = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["version"] = "2012-10-17",
    ///                     ["statement"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["effect"] = "Allow",
    ///                             ["action"] = new[]
    ///                             {
    ///                                 "ec2:RebootInstances",
    ///                                 "ec2:StopInstances",
    ///                                 "ec2:StartInstances",
    ///                                 "ec2:TerminateInstances",
    ///                             },
    ///                             ["resource"] = "arn:aws:ec2:*:*:instance/*",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var experimentTemplate = new AwsNative.Fis.ExperimentTemplate("experimentTemplate", new()
    ///     {
    ///         Description = "stop an instance based on a tag",
    ///         Actions = 
    ///         {
    ///             { "stopInstances", new AwsNative.Fis.Inputs.ExperimentTemplateActionArgs
    ///             {
    ///                 ActionId = "aws:ec2:stop-instances",
    ///                 Parameters = 
    ///                 {
    ///                     { "startInstancesAfterDuration", "PT2M" },
    ///                 },
    ///                 Targets = 
    ///                 {
    ///                     { "instances", "oneRandomInstance" },
    ///                 },
    ///             } },
    ///         },
    ///         Targets = 
    ///         {
    ///             { "oneRandomInstance", new AwsNative.Fis.Inputs.ExperimentTemplateTargetArgs
    ///             {
    ///                 ResourceTags = 
    ///                 {
    ///                     { "env", "prod" },
    ///                 },
    ///                 ResourceType = "aws:ec2:instance",
    ///                 SelectionMode = "COUNT(1)",
    ///             } },
    ///         },
    ///         StopConditions = new[]
    ///         {
    ///             new AwsNative.Fis.Inputs.ExperimentTemplateStopConditionArgs
    ///             {
    ///                 Source = "none",
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "name", "fisStopInstances" },
    ///         },
    ///         RoleArn = fisRole.Arn,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:fis:ExperimentTemplate")]
    public partial class ExperimentTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The actions for the experiment.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableDictionary<string, Outputs.ExperimentTemplateAction>?> Actions { get; private set; } = null!;

        /// <summary>
        /// The ID of the experiment template.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The description for the experiment template.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The experiment options for an experiment template.
        /// </summary>
        [Output("experimentOptions")]
        public Output<Outputs.ExperimentTemplateExperimentOptions?> ExperimentOptions { get; private set; } = null!;

        [Output("experimentReportConfiguration")]
        public Output<Outputs.ExperimentTemplateExperimentReportConfiguration?> ExperimentReportConfiguration { get; private set; } = null!;

        /// <summary>
        /// The configuration for experiment logging.
        /// </summary>
        [Output("logConfiguration")]
        public Output<Outputs.ExperimentTemplateLogConfiguration?> LogConfiguration { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of an IAM role.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// The stop conditions for the experiment.
        /// </summary>
        [Output("stopConditions")]
        public Output<ImmutableArray<Outputs.ExperimentTemplateStopCondition>> StopConditions { get; private set; } = null!;

        /// <summary>
        /// The tags for the experiment template.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The targets for the experiment.
        /// </summary>
        [Output("targets")]
        public Output<ImmutableDictionary<string, Outputs.ExperimentTemplateTarget>> Targets { get; private set; } = null!;


        /// <summary>
        /// Create a ExperimentTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExperimentTemplate(string name, ExperimentTemplateArgs args, CustomResourceOptions? options = null)
            : base("aws-native:fis:ExperimentTemplate", name, args ?? new ExperimentTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExperimentTemplate(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:fis:ExperimentTemplate", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "experimentOptions.accountTargeting",
                    "tags.*",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExperimentTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExperimentTemplate Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ExperimentTemplate(name, id, options);
        }
    }

    public sealed class ExperimentTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputMap<Inputs.ExperimentTemplateActionArgs>? _actions;

        /// <summary>
        /// The actions for the experiment.
        /// </summary>
        public InputMap<Inputs.ExperimentTemplateActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputMap<Inputs.ExperimentTemplateActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// The description for the experiment template.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The experiment options for an experiment template.
        /// </summary>
        [Input("experimentOptions")]
        public Input<Inputs.ExperimentTemplateExperimentOptionsArgs>? ExperimentOptions { get; set; }

        [Input("experimentReportConfiguration")]
        public Input<Inputs.ExperimentTemplateExperimentReportConfigurationArgs>? ExperimentReportConfiguration { get; set; }

        /// <summary>
        /// The configuration for experiment logging.
        /// </summary>
        [Input("logConfiguration")]
        public Input<Inputs.ExperimentTemplateLogConfigurationArgs>? LogConfiguration { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of an IAM role.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("stopConditions", required: true)]
        private InputList<Inputs.ExperimentTemplateStopConditionArgs>? _stopConditions;

        /// <summary>
        /// The stop conditions for the experiment.
        /// </summary>
        public InputList<Inputs.ExperimentTemplateStopConditionArgs> StopConditions
        {
            get => _stopConditions ?? (_stopConditions = new InputList<Inputs.ExperimentTemplateStopConditionArgs>());
            set => _stopConditions = value;
        }

        [Input("tags", required: true)]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags for the experiment template.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("targets", required: true)]
        private InputMap<Inputs.ExperimentTemplateTargetArgs>? _targets;

        /// <summary>
        /// The targets for the experiment.
        /// </summary>
        public InputMap<Inputs.ExperimentTemplateTargetArgs> Targets
        {
            get => _targets ?? (_targets = new InputMap<Inputs.ExperimentTemplateTargetArgs>());
            set => _targets = value;
        }

        public ExperimentTemplateArgs()
        {
        }
        public static new ExperimentTemplateArgs Empty => new ExperimentTemplateArgs();
    }
}
