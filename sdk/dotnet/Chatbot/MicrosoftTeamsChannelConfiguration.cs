// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Chatbot
{
    /// <summary>
    /// Resource schema for AWS::Chatbot::MicrosoftTeamsChannelConfiguration.
    /// </summary>
    [AwsNativeResourceType("aws-native:chatbot:MicrosoftTeamsChannelConfiguration")]
    public partial class MicrosoftTeamsChannelConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the configuration
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The name of the configuration
        /// </summary>
        [Output("configurationName")]
        public Output<string> ConfigurationName { get; private set; } = null!;

        /// <summary>
        /// The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is applied as a default if this is not set.
        /// </summary>
        [Output("guardrailPolicies")]
        public Output<ImmutableArray<string>> GuardrailPolicies { get; private set; } = null!;

        /// <summary>
        /// The ARN of the IAM role that defines the permissions for AWS Chatbot
        /// </summary>
        [Output("iamRoleArn")]
        public Output<string> IamRoleArn { get; private set; } = null!;

        /// <summary>
        /// Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs
        /// </summary>
        [Output("loggingLevel")]
        public Output<string?> LoggingLevel { get; private set; } = null!;

        /// <summary>
        /// ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
        /// </summary>
        [Output("snsTopicArns")]
        public Output<ImmutableArray<string>> SnsTopicArns { get; private set; } = null!;

        /// <summary>
        /// The id of the Microsoft Teams team
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// The id of the Microsoft Teams channel
        /// </summary>
        [Output("teamsChannelId")]
        public Output<string> TeamsChannelId { get; private set; } = null!;

        /// <summary>
        /// The id of the Microsoft Teams tenant
        /// </summary>
        [Output("teamsTenantId")]
        public Output<string> TeamsTenantId { get; private set; } = null!;

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration
        /// </summary>
        [Output("userRoleRequired")]
        public Output<bool?> UserRoleRequired { get; private set; } = null!;


        /// <summary>
        /// Create a MicrosoftTeamsChannelConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MicrosoftTeamsChannelConfiguration(string name, MicrosoftTeamsChannelConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:chatbot:MicrosoftTeamsChannelConfiguration", name, args ?? new MicrosoftTeamsChannelConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MicrosoftTeamsChannelConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:chatbot:MicrosoftTeamsChannelConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MicrosoftTeamsChannelConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MicrosoftTeamsChannelConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MicrosoftTeamsChannelConfiguration(name, id, options);
        }
    }

    public sealed class MicrosoftTeamsChannelConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the configuration
        /// </summary>
        [Input("configurationName", required: true)]
        public Input<string> ConfigurationName { get; set; } = null!;

        [Input("guardrailPolicies")]
        private InputList<string>? _guardrailPolicies;

        /// <summary>
        /// The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is applied as a default if this is not set.
        /// </summary>
        public InputList<string> GuardrailPolicies
        {
            get => _guardrailPolicies ?? (_guardrailPolicies = new InputList<string>());
            set => _guardrailPolicies = value;
        }

        /// <summary>
        /// The ARN of the IAM role that defines the permissions for AWS Chatbot
        /// </summary>
        [Input("iamRoleArn", required: true)]
        public Input<string> IamRoleArn { get; set; } = null!;

        /// <summary>
        /// Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs
        /// </summary>
        [Input("loggingLevel")]
        public Input<string>? LoggingLevel { get; set; }

        [Input("snsTopicArns")]
        private InputList<string>? _snsTopicArns;

        /// <summary>
        /// ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
        /// </summary>
        public InputList<string> SnsTopicArns
        {
            get => _snsTopicArns ?? (_snsTopicArns = new InputList<string>());
            set => _snsTopicArns = value;
        }

        /// <summary>
        /// The id of the Microsoft Teams team
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        /// <summary>
        /// The id of the Microsoft Teams channel
        /// </summary>
        [Input("teamsChannelId", required: true)]
        public Input<string> TeamsChannelId { get; set; } = null!;

        /// <summary>
        /// The id of the Microsoft Teams tenant
        /// </summary>
        [Input("teamsTenantId", required: true)]
        public Input<string> TeamsTenantId { get; set; } = null!;

        /// <summary>
        /// Enables use of a user role requirement in your chat configuration
        /// </summary>
        [Input("userRoleRequired")]
        public Input<bool>? UserRoleRequired { get; set; }

        public MicrosoftTeamsChannelConfigurationArgs()
        {
        }
        public static new MicrosoftTeamsChannelConfigurationArgs Empty => new MicrosoftTeamsChannelConfigurationArgs();
    }
}
