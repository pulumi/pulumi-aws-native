// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EntityResolution
{
    /// <summary>
    /// Policy Statement defined in AWS Entity Resolution Service
    /// </summary>
    [AwsNativeResourceType("aws-native:entityresolution:PolicyStatement")]
    public partial class PolicyStatement : global::Pulumi.CustomResource
    {
        [Output("action")]
        public Output<ImmutableArray<string>> Action { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("condition")]
        public Output<string?> Condition { get; private set; } = null!;

        [Output("effect")]
        public Output<Pulumi.AwsNative.EntityResolution.PolicyStatementStatementEffect?> Effect { get; private set; } = null!;

        [Output("principal")]
        public Output<ImmutableArray<string>> Principal { get; private set; } = null!;

        [Output("statementId")]
        public Output<string> StatementId { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyStatement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyStatement(string name, PolicyStatementArgs args, CustomResourceOptions? options = null)
            : base("aws-native:entityresolution:PolicyStatement", name, args ?? new PolicyStatementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyStatement(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:entityresolution:PolicyStatement", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "arn",
                    "statementId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyStatement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyStatement Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PolicyStatement(name, id, options);
        }
    }

    public sealed class PolicyStatementArgs : global::Pulumi.ResourceArgs
    {
        [Input("action")]
        private InputList<string>? _action;
        public InputList<string> Action
        {
            get => _action ?? (_action = new InputList<string>());
            set => _action = value;
        }

        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        [Input("condition")]
        public Input<string>? Condition { get; set; }

        [Input("effect")]
        public Input<Pulumi.AwsNative.EntityResolution.PolicyStatementStatementEffect>? Effect { get; set; }

        [Input("principal")]
        private InputList<string>? _principal;
        public InputList<string> Principal
        {
            get => _principal ?? (_principal = new InputList<string>());
            set => _principal = value;
        }

        [Input("statementId", required: true)]
        public Input<string> StatementId { get; set; } = null!;

        public PolicyStatementArgs()
        {
        }
        public static new PolicyStatementArgs Empty => new PolicyStatementArgs();
    }
}
