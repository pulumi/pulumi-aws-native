// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EntityResolution.Inputs
{

    public sealed class MatchingWorkflowRuleBasedPropertiesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the AttributeMatchingModel. When choosing `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` type. When choosing `ONE_TO_ONE` ,the system can only match if the sub-types are exact matches. For example, only when the value of the `Email` field of Profile A and the value of the `Email` field of Profile B matches, the two profiles are matched on the `Email` type.
        /// </summary>
        [Input("attributeMatchingModel", required: true)]
        public Input<Pulumi.AwsNative.EntityResolution.MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel> AttributeMatchingModel { get; set; } = null!;

        [Input("rules", required: true)]
        private InputList<Inputs.MatchingWorkflowRuleArgs>? _rules;

        /// <summary>
        /// A list of `Rule` objects, each of which have fields `RuleName` and `MatchingKeys` .
        /// </summary>
        public InputList<Inputs.MatchingWorkflowRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.MatchingWorkflowRuleArgs>());
            set => _rules = value;
        }

        public MatchingWorkflowRuleBasedPropertiesArgs()
        {
        }
        public static new MatchingWorkflowRuleBasedPropertiesArgs Empty => new MatchingWorkflowRuleBasedPropertiesArgs();
    }
}
