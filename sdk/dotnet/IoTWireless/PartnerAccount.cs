// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTWireless
{
    /// <summary>
    /// Create and manage partner account
    /// </summary>
    [Obsolete(@"PartnerAccount is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")]
    [AwsNativeResourceType("aws-native:iotwireless:PartnerAccount")]
    public partial class PartnerAccount : Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the partner account is linked to the AWS account.
        /// </summary>
        [Output("accountLinked")]
        public Output<bool?> AccountLinked { get; private set; } = null!;

        /// <summary>
        /// PartnerAccount arn. Returned after successful create.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The fingerprint of the Sidewalk application server private key.
        /// </summary>
        [Output("fingerprint")]
        public Output<string?> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The partner account ID to disassociate from the AWS account
        /// </summary>
        [Output("partnerAccountId")]
        public Output<string?> PartnerAccountId { get; private set; } = null!;

        /// <summary>
        /// The partner type
        /// </summary>
        [Output("partnerType")]
        public Output<Pulumi.AwsNative.IoTWireless.PartnerAccountPartnerType?> PartnerType { get; private set; } = null!;

        /// <summary>
        /// The Sidewalk account credentials.
        /// </summary>
        [Output("sidewalk")]
        public Output<Outputs.PartnerAccountSidewalkAccountInfo?> Sidewalk { get; private set; } = null!;

        /// <summary>
        /// The Sidewalk account credentials.
        /// </summary>
        [Output("sidewalkResponse")]
        public Output<Outputs.PartnerAccountSidewalkAccountInfoWithFingerprint> SidewalkResponse { get; private set; } = null!;

        /// <summary>
        /// The Sidewalk account credentials.
        /// </summary>
        [Output("sidewalkUpdate")]
        public Output<Outputs.PartnerAccountSidewalkUpdateAccount?> SidewalkUpdate { get; private set; } = null!;

        /// <summary>
        /// A list of key-value pairs that contain metadata for the destination.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.PartnerAccountTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a PartnerAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PartnerAccount(string name, PartnerAccountArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:iotwireless:PartnerAccount", name, args ?? new PartnerAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PartnerAccount(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:iotwireless:PartnerAccount", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PartnerAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PartnerAccount Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new PartnerAccount(name, id, options);
        }
    }

    public sealed class PartnerAccountArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the partner account is linked to the AWS account.
        /// </summary>
        [Input("accountLinked")]
        public Input<bool>? AccountLinked { get; set; }

        /// <summary>
        /// The fingerprint of the Sidewalk application server private key.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// The partner account ID to disassociate from the AWS account
        /// </summary>
        [Input("partnerAccountId")]
        public Input<string>? PartnerAccountId { get; set; }

        /// <summary>
        /// The partner type
        /// </summary>
        [Input("partnerType")]
        public Input<Pulumi.AwsNative.IoTWireless.PartnerAccountPartnerType>? PartnerType { get; set; }

        /// <summary>
        /// The Sidewalk account credentials.
        /// </summary>
        [Input("sidewalk")]
        public Input<Inputs.PartnerAccountSidewalkAccountInfoArgs>? Sidewalk { get; set; }

        /// <summary>
        /// The Sidewalk account credentials.
        /// </summary>
        [Input("sidewalkUpdate")]
        public Input<Inputs.PartnerAccountSidewalkUpdateAccountArgs>? SidewalkUpdate { get; set; }

        [Input("tags")]
        private InputList<Inputs.PartnerAccountTagArgs>? _tags;

        /// <summary>
        /// A list of key-value pairs that contain metadata for the destination.
        /// </summary>
        public InputList<Inputs.PartnerAccountTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PartnerAccountTagArgs>());
            set => _tags = value;
        }

        public PartnerAccountArgs()
        {
        }
    }
}
