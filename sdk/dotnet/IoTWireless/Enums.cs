// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.IoTWireless
{
    /// <summary>
    /// Must be RuleName
    /// </summary>
    [EnumType]
    public readonly struct DestinationExpressionType : IEquatable<DestinationExpressionType>
    {
        private readonly string _value;

        private DestinationExpressionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DestinationExpressionType RuleName { get; } = new DestinationExpressionType("RuleName");
        public static DestinationExpressionType MqttTopic { get; } = new DestinationExpressionType("MqttTopic");

        public static bool operator ==(DestinationExpressionType left, DestinationExpressionType right) => left.Equals(right);
        public static bool operator !=(DestinationExpressionType left, DestinationExpressionType right) => !left.Equals(right);

        public static explicit operator string(DestinationExpressionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DestinationExpressionType other && Equals(other);
        public bool Equals(DestinationExpressionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A filter to list only the wireless gateway task definitions that use this task definition type
    /// </summary>
    [EnumType]
    public readonly struct TaskDefinitionTaskDefinitionType : IEquatable<TaskDefinitionTaskDefinitionType>
    {
        private readonly string _value;

        private TaskDefinitionTaskDefinitionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TaskDefinitionTaskDefinitionType Update { get; } = new TaskDefinitionTaskDefinitionType("UPDATE");

        public static bool operator ==(TaskDefinitionTaskDefinitionType left, TaskDefinitionTaskDefinitionType right) => left.Equals(right);
        public static bool operator !=(TaskDefinitionTaskDefinitionType left, TaskDefinitionTaskDefinitionType right) => !left.Equals(right);

        public static explicit operator string(TaskDefinitionTaskDefinitionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TaskDefinitionTaskDefinitionType other && Equals(other);
        public bool Equals(TaskDefinitionTaskDefinitionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Wireless device type, currently only Sidewalk and LoRa
    /// </summary>
    [EnumType]
    public readonly struct WirelessDeviceType : IEquatable<WirelessDeviceType>
    {
        private readonly string _value;

        private WirelessDeviceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WirelessDeviceType Sidewalk { get; } = new WirelessDeviceType("Sidewalk");
        public static WirelessDeviceType LoRaWAN { get; } = new WirelessDeviceType("LoRaWAN");

        public static bool operator ==(WirelessDeviceType left, WirelessDeviceType right) => left.Equals(right);
        public static bool operator !=(WirelessDeviceType left, WirelessDeviceType right) => !left.Equals(right);

        public static explicit operator string(WirelessDeviceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WirelessDeviceType other && Equals(other);
        public bool Equals(WirelessDeviceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
