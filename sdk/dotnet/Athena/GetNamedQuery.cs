// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Athena
{
    public static class GetNamedQuery
    {
        /// <summary>
        /// Resource schema for AWS::Athena::NamedQuery
        /// </summary>
        public static Task<GetNamedQueryResult> InvokeAsync(GetNamedQueryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNamedQueryResult>("aws-native:athena:getNamedQuery", args ?? new GetNamedQueryArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::Athena::NamedQuery
        /// </summary>
        public static Output<GetNamedQueryResult> Invoke(GetNamedQueryInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNamedQueryResult>("aws-native:athena:getNamedQuery", args ?? new GetNamedQueryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamedQueryArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the query.
        /// </summary>
        [Input("namedQueryId", required: true)]
        public string NamedQueryId { get; set; } = null!;

        public GetNamedQueryArgs()
        {
        }
    }

    public sealed class GetNamedQueryInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the query.
        /// </summary>
        [Input("namedQueryId", required: true)]
        public Input<string> NamedQueryId { get; set; } = null!;

        public GetNamedQueryInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNamedQueryResult
    {
        /// <summary>
        /// The unique ID of the query.
        /// </summary>
        public readonly string? NamedQueryId;

        [OutputConstructor]
        private GetNamedQueryResult(string? namedQueryId)
        {
            NamedQueryId = namedQueryId;
        }
    }
}
