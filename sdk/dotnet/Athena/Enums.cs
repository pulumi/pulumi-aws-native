// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Athena
{
    [EnumType]
    public readonly struct CapacityReservationStatus : IEquatable<CapacityReservationStatus>
    {
        private readonly string _value;

        private CapacityReservationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CapacityReservationStatus Pending { get; } = new CapacityReservationStatus("PENDING");
        public static CapacityReservationStatus Active { get; } = new CapacityReservationStatus("ACTIVE");
        public static CapacityReservationStatus Cancelling { get; } = new CapacityReservationStatus("CANCELLING");
        public static CapacityReservationStatus Cancelled { get; } = new CapacityReservationStatus("CANCELLED");
        public static CapacityReservationStatus Failed { get; } = new CapacityReservationStatus("FAILED");
        public static CapacityReservationStatus UpdatePending { get; } = new CapacityReservationStatus("UPDATE_PENDING");

        public static bool operator ==(CapacityReservationStatus left, CapacityReservationStatus right) => left.Equals(right);
        public static bool operator !=(CapacityReservationStatus left, CapacityReservationStatus right) => !left.Equals(right);

        public static explicit operator string(CapacityReservationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CapacityReservationStatus other && Equals(other);
        public bool Equals(CapacityReservationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of data catalog to create: LAMBDA for a federated catalog, GLUE for AWS Glue Catalog, or HIVE for an external hive metastore. 
    /// </summary>
    [EnumType]
    public readonly struct DataCatalogType : IEquatable<DataCatalogType>
    {
        private readonly string _value;

        private DataCatalogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataCatalogType Lambda { get; } = new DataCatalogType("LAMBDA");
        public static DataCatalogType Glue { get; } = new DataCatalogType("GLUE");
        public static DataCatalogType Hive { get; } = new DataCatalogType("HIVE");

        public static bool operator ==(DataCatalogType left, DataCatalogType right) => left.Equals(right);
        public static bool operator !=(DataCatalogType left, DataCatalogType right) => !left.Equals(right);

        public static explicit operator string(DataCatalogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataCatalogType other && Equals(other);
        public bool Equals(DataCatalogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE-S3), server-side encryption with KMS-managed keys (SSE-KMS), or client-side encryption with KMS-managed keys (CSE-KMS) is used.
    /// </summary>
    [EnumType]
    public readonly struct WorkGroupEncryptionOption : IEquatable<WorkGroupEncryptionOption>
    {
        private readonly string _value;

        private WorkGroupEncryptionOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkGroupEncryptionOption SseS3 { get; } = new WorkGroupEncryptionOption("SSE_S3");
        public static WorkGroupEncryptionOption SseKms { get; } = new WorkGroupEncryptionOption("SSE_KMS");
        public static WorkGroupEncryptionOption CseKms { get; } = new WorkGroupEncryptionOption("CSE_KMS");

        public static bool operator ==(WorkGroupEncryptionOption left, WorkGroupEncryptionOption right) => left.Equals(right);
        public static bool operator !=(WorkGroupEncryptionOption left, WorkGroupEncryptionOption right) => !left.Equals(right);

        public static explicit operator string(WorkGroupEncryptionOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkGroupEncryptionOption other && Equals(other);
        public bool Equals(WorkGroupEncryptionOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is BUCKET_OWNER_FULL_CONTROL
    /// </summary>
    [EnumType]
    public readonly struct WorkGroupS3AclOption : IEquatable<WorkGroupS3AclOption>
    {
        private readonly string _value;

        private WorkGroupS3AclOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkGroupS3AclOption BucketOwnerFullControl { get; } = new WorkGroupS3AclOption("BUCKET_OWNER_FULL_CONTROL");

        public static bool operator ==(WorkGroupS3AclOption left, WorkGroupS3AclOption right) => left.Equals(right);
        public static bool operator !=(WorkGroupS3AclOption left, WorkGroupS3AclOption right) => !left.Equals(right);

        public static explicit operator string(WorkGroupS3AclOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkGroupS3AclOption other && Equals(other);
        public bool Equals(WorkGroupS3AclOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the workgroup: ENABLED or DISABLED.
    /// </summary>
    [EnumType]
    public readonly struct WorkGroupState : IEquatable<WorkGroupState>
    {
        private readonly string _value;

        private WorkGroupState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkGroupState Enabled { get; } = new WorkGroupState("ENABLED");
        public static WorkGroupState Disabled { get; } = new WorkGroupState("DISABLED");

        public static bool operator ==(WorkGroupState left, WorkGroupState right) => left.Equals(right);
        public static bool operator !=(WorkGroupState left, WorkGroupState right) => !left.Equals(right);

        public static explicit operator string(WorkGroupState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkGroupState other && Equals(other);
        public bool Equals(WorkGroupState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
