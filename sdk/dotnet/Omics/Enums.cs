// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Omics
{
    [EnumType]
    public readonly struct AnnotationStoreAnnotationType : IEquatable<AnnotationStoreAnnotationType>
    {
        private readonly string _value;

        private AnnotationStoreAnnotationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnnotationStoreAnnotationType Generic { get; } = new AnnotationStoreAnnotationType("GENERIC");
        public static AnnotationStoreAnnotationType ChrPos { get; } = new AnnotationStoreAnnotationType("CHR_POS");
        public static AnnotationStoreAnnotationType ChrPosRefAlt { get; } = new AnnotationStoreAnnotationType("CHR_POS_REF_ALT");
        public static AnnotationStoreAnnotationType ChrStartEndOneBase { get; } = new AnnotationStoreAnnotationType("CHR_START_END_ONE_BASE");
        public static AnnotationStoreAnnotationType ChrStartEndRefAltOneBase { get; } = new AnnotationStoreAnnotationType("CHR_START_END_REF_ALT_ONE_BASE");
        public static AnnotationStoreAnnotationType ChrStartEndZeroBase { get; } = new AnnotationStoreAnnotationType("CHR_START_END_ZERO_BASE");
        public static AnnotationStoreAnnotationType ChrStartEndRefAltZeroBase { get; } = new AnnotationStoreAnnotationType("CHR_START_END_REF_ALT_ZERO_BASE");

        public static bool operator ==(AnnotationStoreAnnotationType left, AnnotationStoreAnnotationType right) => left.Equals(right);
        public static bool operator !=(AnnotationStoreAnnotationType left, AnnotationStoreAnnotationType right) => !left.Equals(right);

        public static explicit operator string(AnnotationStoreAnnotationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnnotationStoreAnnotationType other && Equals(other);
        public bool Equals(AnnotationStoreAnnotationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnnotationStoreEncryptionType : IEquatable<AnnotationStoreEncryptionType>
    {
        private readonly string _value;

        private AnnotationStoreEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnnotationStoreEncryptionType Kms { get; } = new AnnotationStoreEncryptionType("KMS");

        public static bool operator ==(AnnotationStoreEncryptionType left, AnnotationStoreEncryptionType right) => left.Equals(right);
        public static bool operator !=(AnnotationStoreEncryptionType left, AnnotationStoreEncryptionType right) => !left.Equals(right);

        public static explicit operator string(AnnotationStoreEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnnotationStoreEncryptionType other && Equals(other);
        public bool Equals(AnnotationStoreEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnnotationStoreSchemaValueType : IEquatable<AnnotationStoreSchemaValueType>
    {
        private readonly string _value;

        private AnnotationStoreSchemaValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnnotationStoreSchemaValueType Long { get; } = new AnnotationStoreSchemaValueType("LONG");
        public static AnnotationStoreSchemaValueType Int { get; } = new AnnotationStoreSchemaValueType("INT");
        public static AnnotationStoreSchemaValueType String { get; } = new AnnotationStoreSchemaValueType("STRING");
        public static AnnotationStoreSchemaValueType Float { get; } = new AnnotationStoreSchemaValueType("FLOAT");
        public static AnnotationStoreSchemaValueType Double { get; } = new AnnotationStoreSchemaValueType("DOUBLE");
        public static AnnotationStoreSchemaValueType Boolean { get; } = new AnnotationStoreSchemaValueType("BOOLEAN");

        public static bool operator ==(AnnotationStoreSchemaValueType left, AnnotationStoreSchemaValueType right) => left.Equals(right);
        public static bool operator !=(AnnotationStoreSchemaValueType left, AnnotationStoreSchemaValueType right) => !left.Equals(right);

        public static explicit operator string(AnnotationStoreSchemaValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnnotationStoreSchemaValueType other && Equals(other);
        public bool Equals(AnnotationStoreSchemaValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnnotationStoreStoreFormat : IEquatable<AnnotationStoreStoreFormat>
    {
        private readonly string _value;

        private AnnotationStoreStoreFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnnotationStoreStoreFormat Gff { get; } = new AnnotationStoreStoreFormat("GFF");
        public static AnnotationStoreStoreFormat Tsv { get; } = new AnnotationStoreStoreFormat("TSV");
        public static AnnotationStoreStoreFormat Vcf { get; } = new AnnotationStoreStoreFormat("VCF");

        public static bool operator ==(AnnotationStoreStoreFormat left, AnnotationStoreStoreFormat right) => left.Equals(right);
        public static bool operator !=(AnnotationStoreStoreFormat left, AnnotationStoreStoreFormat right) => !left.Equals(right);

        public static explicit operator string(AnnotationStoreStoreFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnnotationStoreStoreFormat other && Equals(other);
        public bool Equals(AnnotationStoreStoreFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnnotationStoreStoreStatus : IEquatable<AnnotationStoreStoreStatus>
    {
        private readonly string _value;

        private AnnotationStoreStoreStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnnotationStoreStoreStatus Creating { get; } = new AnnotationStoreStoreStatus("CREATING");
        public static AnnotationStoreStoreStatus Updating { get; } = new AnnotationStoreStoreStatus("UPDATING");
        public static AnnotationStoreStoreStatus Deleting { get; } = new AnnotationStoreStoreStatus("DELETING");
        public static AnnotationStoreStoreStatus Active { get; } = new AnnotationStoreStoreStatus("ACTIVE");
        public static AnnotationStoreStoreStatus Failed { get; } = new AnnotationStoreStoreStatus("FAILED");

        public static bool operator ==(AnnotationStoreStoreStatus left, AnnotationStoreStoreStatus right) => left.Equals(right);
        public static bool operator !=(AnnotationStoreStoreStatus left, AnnotationStoreStoreStatus right) => !left.Equals(right);

        public static explicit operator string(AnnotationStoreStoreStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnnotationStoreStoreStatus other && Equals(other);
        public bool Equals(AnnotationStoreStoreStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ReferenceStoreEncryptionType : IEquatable<ReferenceStoreEncryptionType>
    {
        private readonly string _value;

        private ReferenceStoreEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReferenceStoreEncryptionType Kms { get; } = new ReferenceStoreEncryptionType("KMS");

        public static bool operator ==(ReferenceStoreEncryptionType left, ReferenceStoreEncryptionType right) => left.Equals(right);
        public static bool operator !=(ReferenceStoreEncryptionType left, ReferenceStoreEncryptionType right) => !left.Equals(right);

        public static explicit operator string(ReferenceStoreEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReferenceStoreEncryptionType other && Equals(other);
        public bool Equals(ReferenceStoreEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SequenceStoreEncryptionType : IEquatable<SequenceStoreEncryptionType>
    {
        private readonly string _value;

        private SequenceStoreEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SequenceStoreEncryptionType Kms { get; } = new SequenceStoreEncryptionType("KMS");

        public static bool operator ==(SequenceStoreEncryptionType left, SequenceStoreEncryptionType right) => left.Equals(right);
        public static bool operator !=(SequenceStoreEncryptionType left, SequenceStoreEncryptionType right) => !left.Equals(right);

        public static explicit operator string(SequenceStoreEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SequenceStoreEncryptionType other && Equals(other);
        public bool Equals(SequenceStoreEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct VariantStoreEncryptionType : IEquatable<VariantStoreEncryptionType>
    {
        private readonly string _value;

        private VariantStoreEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VariantStoreEncryptionType Kms { get; } = new VariantStoreEncryptionType("KMS");

        public static bool operator ==(VariantStoreEncryptionType left, VariantStoreEncryptionType right) => left.Equals(right);
        public static bool operator !=(VariantStoreEncryptionType left, VariantStoreEncryptionType right) => !left.Equals(right);

        public static explicit operator string(VariantStoreEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VariantStoreEncryptionType other && Equals(other);
        public bool Equals(VariantStoreEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct VariantStoreStoreStatus : IEquatable<VariantStoreStoreStatus>
    {
        private readonly string _value;

        private VariantStoreStoreStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VariantStoreStoreStatus Creating { get; } = new VariantStoreStoreStatus("CREATING");
        public static VariantStoreStoreStatus Updating { get; } = new VariantStoreStoreStatus("UPDATING");
        public static VariantStoreStoreStatus Deleting { get; } = new VariantStoreStoreStatus("DELETING");
        public static VariantStoreStoreStatus Active { get; } = new VariantStoreStoreStatus("ACTIVE");
        public static VariantStoreStoreStatus Failed { get; } = new VariantStoreStoreStatus("FAILED");

        public static bool operator ==(VariantStoreStoreStatus left, VariantStoreStoreStatus right) => left.Equals(right);
        public static bool operator !=(VariantStoreStoreStatus left, VariantStoreStoreStatus right) => !left.Equals(right);

        public static explicit operator string(VariantStoreStoreStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VariantStoreStoreStatus other && Equals(other);
        public bool Equals(VariantStoreStoreStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WorkflowAccelerators : IEquatable<WorkflowAccelerators>
    {
        private readonly string _value;

        private WorkflowAccelerators(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkflowAccelerators Gpu { get; } = new WorkflowAccelerators("GPU");

        public static bool operator ==(WorkflowAccelerators left, WorkflowAccelerators right) => left.Equals(right);
        public static bool operator !=(WorkflowAccelerators left, WorkflowAccelerators right) => !left.Equals(right);

        public static explicit operator string(WorkflowAccelerators value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkflowAccelerators other && Equals(other);
        public bool Equals(WorkflowAccelerators other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WorkflowEngine : IEquatable<WorkflowEngine>
    {
        private readonly string _value;

        private WorkflowEngine(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkflowEngine Wdl { get; } = new WorkflowEngine("WDL");
        public static WorkflowEngine Nextflow { get; } = new WorkflowEngine("NEXTFLOW");
        public static WorkflowEngine Cwl { get; } = new WorkflowEngine("CWL");

        public static bool operator ==(WorkflowEngine left, WorkflowEngine right) => left.Equals(right);
        public static bool operator !=(WorkflowEngine left, WorkflowEngine right) => !left.Equals(right);

        public static explicit operator string(WorkflowEngine value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkflowEngine other && Equals(other);
        public bool Equals(WorkflowEngine other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WorkflowStatus : IEquatable<WorkflowStatus>
    {
        private readonly string _value;

        private WorkflowStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkflowStatus Creating { get; } = new WorkflowStatus("CREATING");
        public static WorkflowStatus Active { get; } = new WorkflowStatus("ACTIVE");
        public static WorkflowStatus Updating { get; } = new WorkflowStatus("UPDATING");
        public static WorkflowStatus Deleted { get; } = new WorkflowStatus("DELETED");
        public static WorkflowStatus Failed { get; } = new WorkflowStatus("FAILED");

        public static bool operator ==(WorkflowStatus left, WorkflowStatus right) => left.Equals(right);
        public static bool operator !=(WorkflowStatus left, WorkflowStatus right) => !left.Equals(right);

        public static explicit operator string(WorkflowStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkflowStatus other && Equals(other);
        public bool Equals(WorkflowStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WorkflowType : IEquatable<WorkflowType>
    {
        private readonly string _value;

        private WorkflowType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkflowType Private { get; } = new WorkflowType("PRIVATE");

        public static bool operator ==(WorkflowType left, WorkflowType right) => left.Equals(right);
        public static bool operator !=(WorkflowType left, WorkflowType right) => !left.Equals(right);

        public static explicit operator string(WorkflowType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkflowType other && Equals(other);
        public bool Equals(WorkflowType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
