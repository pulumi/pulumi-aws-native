// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Panorama
{
    public static class GetPackage
    {
        /// <summary>
        /// Schema for Package CloudFormation Resource
        /// </summary>
        public static Task<GetPackageResult> InvokeAsync(GetPackageArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPackageResult>("aws-native:panorama:getPackage", args ?? new GetPackageArgs(), options.WithDefaults());

        /// <summary>
        /// Schema for Package CloudFormation Resource
        /// </summary>
        public static Output<GetPackageResult> Invoke(GetPackageInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPackageResult>("aws-native:panorama:getPackage", args ?? new GetPackageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPackageArgs : Pulumi.InvokeArgs
    {
        [Input("packageId", required: true)]
        public string PackageId { get; set; } = null!;

        public GetPackageArgs()
        {
        }
    }

    public sealed class GetPackageInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("packageId", required: true)]
        public Input<string> PackageId { get; set; } = null!;

        public GetPackageInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPackageResult
    {
        public readonly string? Arn;
        public readonly int? CreatedTime;
        public readonly string? PackageId;
        public readonly Outputs.PackageStorageLocation? StorageLocation;
        public readonly ImmutableArray<Outputs.PackageTag> Tags;

        [OutputConstructor]
        private GetPackageResult(
            string? arn,

            int? createdTime,

            string? packageId,

            Outputs.PackageStorageLocation? storageLocation,

            ImmutableArray<Outputs.PackageTag> tags)
        {
            Arn = arn;
            CreatedTime = createdTime;
            PackageId = packageId;
            StorageLocation = storageLocation;
            Tags = tags;
        }
    }
}
