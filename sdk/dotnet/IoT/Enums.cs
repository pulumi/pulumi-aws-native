// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.IoT
{
    [EnumType]
    public readonly struct AuthorizerStatus : IEquatable<AuthorizerStatus>
    {
        private readonly string _value;

        private AuthorizerStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AuthorizerStatus Active { get; } = new AuthorizerStatus("ACTIVE");
        public static AuthorizerStatus Inactive { get; } = new AuthorizerStatus("INACTIVE");

        public static bool operator ==(AuthorizerStatus left, AuthorizerStatus right) => left.Equals(right);
        public static bool operator !=(AuthorizerStatus left, AuthorizerStatus right) => !left.Equals(right);

        public static explicit operator string(AuthorizerStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AuthorizerStatus other && Equals(other);
        public bool Equals(AuthorizerStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CertificateCertificateMode : IEquatable<CertificateCertificateMode>
    {
        private readonly string _value;

        private CertificateCertificateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateCertificateMode Default { get; } = new CertificateCertificateMode("DEFAULT");
        public static CertificateCertificateMode SniOnly { get; } = new CertificateCertificateMode("SNI_ONLY");

        public static bool operator ==(CertificateCertificateMode left, CertificateCertificateMode right) => left.Equals(right);
        public static bool operator !=(CertificateCertificateMode left, CertificateCertificateMode right) => !left.Equals(right);

        public static explicit operator string(CertificateCertificateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateCertificateMode other && Equals(other);
        public bool Equals(CertificateCertificateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CertificateStatus : IEquatable<CertificateStatus>
    {
        private readonly string _value;

        private CertificateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateStatus Active { get; } = new CertificateStatus("ACTIVE");
        public static CertificateStatus Inactive { get; } = new CertificateStatus("INACTIVE");
        public static CertificateStatus Revoked { get; } = new CertificateStatus("REVOKED");
        public static CertificateStatus PendingTransfer { get; } = new CertificateStatus("PENDING_TRANSFER");
        public static CertificateStatus PendingActivation { get; } = new CertificateStatus("PENDING_ACTIVATION");

        public static bool operator ==(CertificateStatus left, CertificateStatus right) => left.Equals(right);
        public static bool operator !=(CertificateStatus left, CertificateStatus right) => !left.Equals(right);

        public static explicit operator string(CertificateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateStatus other && Equals(other);
        public bool Equals(CertificateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the custom metric. Types include string-list, ip-address-list, number-list, and number.
    /// </summary>
    [EnumType]
    public readonly struct CustomMetricMetricType : IEquatable<CustomMetricMetricType>
    {
        private readonly string _value;

        private CustomMetricMetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomMetricMetricType StringList { get; } = new CustomMetricMetricType("string-list");
        public static CustomMetricMetricType IpAddressList { get; } = new CustomMetricMetricType("ip-address-list");
        public static CustomMetricMetricType NumberList { get; } = new CustomMetricMetricType("number-list");
        public static CustomMetricMetricType Number { get; } = new CustomMetricMetricType("number");

        public static bool operator ==(CustomMetricMetricType left, CustomMetricMetricType right) => left.Equals(right);
        public static bool operator !=(CustomMetricMetricType left, CustomMetricMetricType right) => !left.Equals(right);

        public static explicit operator string(CustomMetricMetricType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomMetricMetricType other && Equals(other);
        public bool Equals(CustomMetricMetricType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of the dimension.
    /// </summary>
    [EnumType]
    public readonly struct DimensionType : IEquatable<DimensionType>
    {
        private readonly string _value;

        private DimensionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DimensionType TopicFilter { get; } = new DimensionType("TOPIC_FILTER");

        public static bool operator ==(DimensionType left, DimensionType right) => left.Equals(right);
        public static bool operator !=(DimensionType left, DimensionType right) => !left.Equals(right);

        public static explicit operator string(DimensionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DimensionType other && Equals(other);
        public bool Equals(DimensionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DomainConfigurationDomainConfigurationStatus : IEquatable<DomainConfigurationDomainConfigurationStatus>
    {
        private readonly string _value;

        private DomainConfigurationDomainConfigurationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainConfigurationDomainConfigurationStatus Enabled { get; } = new DomainConfigurationDomainConfigurationStatus("ENABLED");
        public static DomainConfigurationDomainConfigurationStatus Disabled { get; } = new DomainConfigurationDomainConfigurationStatus("DISABLED");

        public static bool operator ==(DomainConfigurationDomainConfigurationStatus left, DomainConfigurationDomainConfigurationStatus right) => left.Equals(right);
        public static bool operator !=(DomainConfigurationDomainConfigurationStatus left, DomainConfigurationDomainConfigurationStatus right) => !left.Equals(right);

        public static explicit operator string(DomainConfigurationDomainConfigurationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainConfigurationDomainConfigurationStatus other && Equals(other);
        public bool Equals(DomainConfigurationDomainConfigurationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DomainConfigurationDomainType : IEquatable<DomainConfigurationDomainType>
    {
        private readonly string _value;

        private DomainConfigurationDomainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainConfigurationDomainType Endpoint { get; } = new DomainConfigurationDomainType("ENDPOINT");
        public static DomainConfigurationDomainType AwsManaged { get; } = new DomainConfigurationDomainType("AWS_MANAGED");
        public static DomainConfigurationDomainType CustomerManaged { get; } = new DomainConfigurationDomainType("CUSTOMER_MANAGED");

        public static bool operator ==(DomainConfigurationDomainType left, DomainConfigurationDomainType right) => left.Equals(right);
        public static bool operator !=(DomainConfigurationDomainType left, DomainConfigurationDomainType right) => !left.Equals(right);

        public static explicit operator string(DomainConfigurationDomainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainConfigurationDomainType other && Equals(other);
        public bool Equals(DomainConfigurationDomainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DomainConfigurationServerCertificateSummaryServerCertificateStatus : IEquatable<DomainConfigurationServerCertificateSummaryServerCertificateStatus>
    {
        private readonly string _value;

        private DomainConfigurationServerCertificateSummaryServerCertificateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainConfigurationServerCertificateSummaryServerCertificateStatus Invalid { get; } = new DomainConfigurationServerCertificateSummaryServerCertificateStatus("INVALID");
        public static DomainConfigurationServerCertificateSummaryServerCertificateStatus Valid { get; } = new DomainConfigurationServerCertificateSummaryServerCertificateStatus("VALID");

        public static bool operator ==(DomainConfigurationServerCertificateSummaryServerCertificateStatus left, DomainConfigurationServerCertificateSummaryServerCertificateStatus right) => left.Equals(right);
        public static bool operator !=(DomainConfigurationServerCertificateSummaryServerCertificateStatus left, DomainConfigurationServerCertificateSummaryServerCertificateStatus right) => !left.Equals(right);

        public static explicit operator string(DomainConfigurationServerCertificateSummaryServerCertificateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainConfigurationServerCertificateSummaryServerCertificateStatus other && Equals(other);
        public bool Equals(DomainConfigurationServerCertificateSummaryServerCertificateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DomainConfigurationServiceType : IEquatable<DomainConfigurationServiceType>
    {
        private readonly string _value;

        private DomainConfigurationServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainConfigurationServiceType Data { get; } = new DomainConfigurationServiceType("DATA");
        public static DomainConfigurationServiceType CredentialProvider { get; } = new DomainConfigurationServiceType("CREDENTIAL_PROVIDER");
        public static DomainConfigurationServiceType Jobs { get; } = new DomainConfigurationServiceType("JOBS");

        public static bool operator ==(DomainConfigurationServiceType left, DomainConfigurationServiceType right) => left.Equals(right);
        public static bool operator !=(DomainConfigurationServiceType left, DomainConfigurationServiceType right) => !left.Equals(right);

        public static explicit operator string(DomainConfigurationServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainConfigurationServiceType other && Equals(other);
        public bool Equals(DomainConfigurationServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    ///  Specifies which types of information are logged.
    /// </summary>
    [EnumType]
    public readonly struct MitigationActionEnableIoTLoggingParamsLogLevel : IEquatable<MitigationActionEnableIoTLoggingParamsLogLevel>
    {
        private readonly string _value;

        private MitigationActionEnableIoTLoggingParamsLogLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MitigationActionEnableIoTLoggingParamsLogLevel Debug { get; } = new MitigationActionEnableIoTLoggingParamsLogLevel("DEBUG");
        public static MitigationActionEnableIoTLoggingParamsLogLevel Info { get; } = new MitigationActionEnableIoTLoggingParamsLogLevel("INFO");
        public static MitigationActionEnableIoTLoggingParamsLogLevel Error { get; } = new MitigationActionEnableIoTLoggingParamsLogLevel("ERROR");
        public static MitigationActionEnableIoTLoggingParamsLogLevel Warn { get; } = new MitigationActionEnableIoTLoggingParamsLogLevel("WARN");

        public static bool operator ==(MitigationActionEnableIoTLoggingParamsLogLevel left, MitigationActionEnableIoTLoggingParamsLogLevel right) => left.Equals(right);
        public static bool operator !=(MitigationActionEnableIoTLoggingParamsLogLevel left, MitigationActionEnableIoTLoggingParamsLogLevel right) => !left.Equals(right);

        public static explicit operator string(MitigationActionEnableIoTLoggingParamsLogLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MitigationActionEnableIoTLoggingParamsLogLevel other && Equals(other);
        public bool Equals(MitigationActionEnableIoTLoggingParamsLogLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MitigationActionReplaceDefaultPolicyVersionParamsTemplateName : IEquatable<MitigationActionReplaceDefaultPolicyVersionParamsTemplateName>
    {
        private readonly string _value;

        private MitigationActionReplaceDefaultPolicyVersionParamsTemplateName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MitigationActionReplaceDefaultPolicyVersionParamsTemplateName BlankPolicy { get; } = new MitigationActionReplaceDefaultPolicyVersionParamsTemplateName("BLANK_POLICY");

        public static bool operator ==(MitigationActionReplaceDefaultPolicyVersionParamsTemplateName left, MitigationActionReplaceDefaultPolicyVersionParamsTemplateName right) => left.Equals(right);
        public static bool operator !=(MitigationActionReplaceDefaultPolicyVersionParamsTemplateName left, MitigationActionReplaceDefaultPolicyVersionParamsTemplateName right) => !left.Equals(right);

        public static explicit operator string(MitigationActionReplaceDefaultPolicyVersionParamsTemplateName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MitigationActionReplaceDefaultPolicyVersionParamsTemplateName other && Equals(other);
        public bool Equals(MitigationActionReplaceDefaultPolicyVersionParamsTemplateName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MitigationActionUpdateCACertificateParamsAction : IEquatable<MitigationActionUpdateCACertificateParamsAction>
    {
        private readonly string _value;

        private MitigationActionUpdateCACertificateParamsAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MitigationActionUpdateCACertificateParamsAction Deactivate { get; } = new MitigationActionUpdateCACertificateParamsAction("DEACTIVATE");

        public static bool operator ==(MitigationActionUpdateCACertificateParamsAction left, MitigationActionUpdateCACertificateParamsAction right) => left.Equals(right);
        public static bool operator !=(MitigationActionUpdateCACertificateParamsAction left, MitigationActionUpdateCACertificateParamsAction right) => !left.Equals(right);

        public static explicit operator string(MitigationActionUpdateCACertificateParamsAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MitigationActionUpdateCACertificateParamsAction other && Equals(other);
        public bool Equals(MitigationActionUpdateCACertificateParamsAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MitigationActionUpdateDeviceCertificateParamsAction : IEquatable<MitigationActionUpdateDeviceCertificateParamsAction>
    {
        private readonly string _value;

        private MitigationActionUpdateDeviceCertificateParamsAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MitigationActionUpdateDeviceCertificateParamsAction Deactivate { get; } = new MitigationActionUpdateDeviceCertificateParamsAction("DEACTIVATE");

        public static bool operator ==(MitigationActionUpdateDeviceCertificateParamsAction left, MitigationActionUpdateDeviceCertificateParamsAction right) => left.Equals(right);
        public static bool operator !=(MitigationActionUpdateDeviceCertificateParamsAction left, MitigationActionUpdateDeviceCertificateParamsAction right) => !left.Equals(right);

        public static explicit operator string(MitigationActionUpdateDeviceCertificateParamsAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MitigationActionUpdateDeviceCertificateParamsAction other && Equals(other);
        public bool Equals(MitigationActionUpdateDeviceCertificateParamsAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The day of the week on which the scheduled audit takes place. Can be one of SUN, MON, TUE,WED, THU, FRI, or SAT. This field is required if the frequency parameter is set to WEEKLY or BIWEEKLY.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledAuditDayOfWeek : IEquatable<ScheduledAuditDayOfWeek>
    {
        private readonly string _value;

        private ScheduledAuditDayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduledAuditDayOfWeek Sun { get; } = new ScheduledAuditDayOfWeek("SUN");
        public static ScheduledAuditDayOfWeek Mon { get; } = new ScheduledAuditDayOfWeek("MON");
        public static ScheduledAuditDayOfWeek Tue { get; } = new ScheduledAuditDayOfWeek("TUE");
        public static ScheduledAuditDayOfWeek Wed { get; } = new ScheduledAuditDayOfWeek("WED");
        public static ScheduledAuditDayOfWeek Thu { get; } = new ScheduledAuditDayOfWeek("THU");
        public static ScheduledAuditDayOfWeek Fri { get; } = new ScheduledAuditDayOfWeek("FRI");
        public static ScheduledAuditDayOfWeek Sat { get; } = new ScheduledAuditDayOfWeek("SAT");

        public static bool operator ==(ScheduledAuditDayOfWeek left, ScheduledAuditDayOfWeek right) => left.Equals(right);
        public static bool operator !=(ScheduledAuditDayOfWeek left, ScheduledAuditDayOfWeek right) => !left.Equals(right);

        public static explicit operator string(ScheduledAuditDayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledAuditDayOfWeek other && Equals(other);
        public bool Equals(ScheduledAuditDayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How often the scheduled audit takes place. Can be one of DAILY, WEEKLY, BIWEEKLY, or MONTHLY.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledAuditFrequency : IEquatable<ScheduledAuditFrequency>
    {
        private readonly string _value;

        private ScheduledAuditFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduledAuditFrequency Daily { get; } = new ScheduledAuditFrequency("DAILY");
        public static ScheduledAuditFrequency Weekly { get; } = new ScheduledAuditFrequency("WEEKLY");
        public static ScheduledAuditFrequency Biweekly { get; } = new ScheduledAuditFrequency("BIWEEKLY");
        public static ScheduledAuditFrequency Monthly { get; } = new ScheduledAuditFrequency("MONTHLY");

        public static bool operator ==(ScheduledAuditFrequency left, ScheduledAuditFrequency right) => left.Equals(right);
        public static bool operator !=(ScheduledAuditFrequency left, ScheduledAuditFrequency right) => !left.Equals(right);

        public static explicit operator string(ScheduledAuditFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledAuditFrequency other && Equals(other);
        public bool Equals(ScheduledAuditFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold).
    /// </summary>
    [EnumType]
    public readonly struct SecurityProfileBehaviorCriteriaComparisonOperator : IEquatable<SecurityProfileBehaviorCriteriaComparisonOperator>
    {
        private readonly string _value;

        private SecurityProfileBehaviorCriteriaComparisonOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityProfileBehaviorCriteriaComparisonOperator LessThan { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("less-than");
        public static SecurityProfileBehaviorCriteriaComparisonOperator LessThanEquals { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("less-than-equals");
        public static SecurityProfileBehaviorCriteriaComparisonOperator GreaterThan { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("greater-than");
        public static SecurityProfileBehaviorCriteriaComparisonOperator GreaterThanEquals { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("greater-than-equals");
        public static SecurityProfileBehaviorCriteriaComparisonOperator InCidrSet { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("in-cidr-set");
        public static SecurityProfileBehaviorCriteriaComparisonOperator NotInCidrSet { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("not-in-cidr-set");
        public static SecurityProfileBehaviorCriteriaComparisonOperator InPortSet { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("in-port-set");
        public static SecurityProfileBehaviorCriteriaComparisonOperator NotInPortSet { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("not-in-port-set");
        public static SecurityProfileBehaviorCriteriaComparisonOperator InSet { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("in-set");
        public static SecurityProfileBehaviorCriteriaComparisonOperator NotInSet { get; } = new SecurityProfileBehaviorCriteriaComparisonOperator("not-in-set");

        public static bool operator ==(SecurityProfileBehaviorCriteriaComparisonOperator left, SecurityProfileBehaviorCriteriaComparisonOperator right) => left.Equals(right);
        public static bool operator !=(SecurityProfileBehaviorCriteriaComparisonOperator left, SecurityProfileBehaviorCriteriaComparisonOperator right) => !left.Equals(right);

        public static explicit operator string(SecurityProfileBehaviorCriteriaComparisonOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityProfileBehaviorCriteriaComparisonOperator other && Equals(other);
        public bool Equals(SecurityProfileBehaviorCriteriaComparisonOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The sensitivity of anomalous behavior evaluation. Can be Low, Medium, or High.
    /// </summary>
    [EnumType]
    public readonly struct SecurityProfileMachineLearningDetectionConfigConfidenceLevel : IEquatable<SecurityProfileMachineLearningDetectionConfigConfidenceLevel>
    {
        private readonly string _value;

        private SecurityProfileMachineLearningDetectionConfigConfidenceLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityProfileMachineLearningDetectionConfigConfidenceLevel Low { get; } = new SecurityProfileMachineLearningDetectionConfigConfidenceLevel("LOW");
        public static SecurityProfileMachineLearningDetectionConfigConfidenceLevel Medium { get; } = new SecurityProfileMachineLearningDetectionConfigConfidenceLevel("MEDIUM");
        public static SecurityProfileMachineLearningDetectionConfigConfidenceLevel High { get; } = new SecurityProfileMachineLearningDetectionConfigConfidenceLevel("HIGH");

        public static bool operator ==(SecurityProfileMachineLearningDetectionConfigConfidenceLevel left, SecurityProfileMachineLearningDetectionConfigConfidenceLevel right) => left.Equals(right);
        public static bool operator !=(SecurityProfileMachineLearningDetectionConfigConfidenceLevel left, SecurityProfileMachineLearningDetectionConfigConfidenceLevel right) => !left.Equals(right);

        public static explicit operator string(SecurityProfileMachineLearningDetectionConfigConfidenceLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityProfileMachineLearningDetectionConfigConfidenceLevel other && Equals(other);
        public bool Equals(SecurityProfileMachineLearningDetectionConfigConfidenceLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines how the dimensionValues of a dimension are interpreted.
    /// </summary>
    [EnumType]
    public readonly struct SecurityProfileMetricDimensionOperator : IEquatable<SecurityProfileMetricDimensionOperator>
    {
        private readonly string _value;

        private SecurityProfileMetricDimensionOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityProfileMetricDimensionOperator In { get; } = new SecurityProfileMetricDimensionOperator("IN");
        public static SecurityProfileMetricDimensionOperator NotIn { get; } = new SecurityProfileMetricDimensionOperator("NOT_IN");

        public static bool operator ==(SecurityProfileMetricDimensionOperator left, SecurityProfileMetricDimensionOperator right) => left.Equals(right);
        public static bool operator !=(SecurityProfileMetricDimensionOperator left, SecurityProfileMetricDimensionOperator right) => !left.Equals(right);

        public static explicit operator string(SecurityProfileMetricDimensionOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityProfileMetricDimensionOperator other && Equals(other);
        public bool Equals(SecurityProfileMetricDimensionOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The percentile which resolves to a threshold value by which compliance with a behavior is determined
    /// </summary>
    [EnumType]
    public readonly struct SecurityProfileStatisticalThresholdStatistic : IEquatable<SecurityProfileStatisticalThresholdStatistic>
    {
        private readonly string _value;

        private SecurityProfileStatisticalThresholdStatistic(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityProfileStatisticalThresholdStatistic Average { get; } = new SecurityProfileStatisticalThresholdStatistic("Average");
        public static SecurityProfileStatisticalThresholdStatistic P0 { get; } = new SecurityProfileStatisticalThresholdStatistic("p0");
        public static SecurityProfileStatisticalThresholdStatistic P01 { get; } = new SecurityProfileStatisticalThresholdStatistic("p0.1");
        public static SecurityProfileStatisticalThresholdStatistic P001 { get; } = new SecurityProfileStatisticalThresholdStatistic("p0.01");
        public static SecurityProfileStatisticalThresholdStatistic P1 { get; } = new SecurityProfileStatisticalThresholdStatistic("p1");
        public static SecurityProfileStatisticalThresholdStatistic P10 { get; } = new SecurityProfileStatisticalThresholdStatistic("p10");
        public static SecurityProfileStatisticalThresholdStatistic P50 { get; } = new SecurityProfileStatisticalThresholdStatistic("p50");
        public static SecurityProfileStatisticalThresholdStatistic P90 { get; } = new SecurityProfileStatisticalThresholdStatistic("p90");
        public static SecurityProfileStatisticalThresholdStatistic P99 { get; } = new SecurityProfileStatisticalThresholdStatistic("p99");
        public static SecurityProfileStatisticalThresholdStatistic P999 { get; } = new SecurityProfileStatisticalThresholdStatistic("p99.9");
        public static SecurityProfileStatisticalThresholdStatistic P9999 { get; } = new SecurityProfileStatisticalThresholdStatistic("p99.99");
        public static SecurityProfileStatisticalThresholdStatistic P100 { get; } = new SecurityProfileStatisticalThresholdStatistic("p100");

        public static bool operator ==(SecurityProfileStatisticalThresholdStatistic left, SecurityProfileStatisticalThresholdStatistic right) => left.Equals(right);
        public static bool operator !=(SecurityProfileStatisticalThresholdStatistic left, SecurityProfileStatisticalThresholdStatistic right) => !left.Equals(right);

        public static explicit operator string(SecurityProfileStatisticalThresholdStatistic value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityProfileStatisticalThresholdStatistic other && Equals(other);
        public bool Equals(SecurityProfileStatisticalThresholdStatistic other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicRuleCannedAccessControlList : IEquatable<TopicRuleCannedAccessControlList>
    {
        private readonly string _value;

        private TopicRuleCannedAccessControlList(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicRuleCannedAccessControlList Private { get; } = new TopicRuleCannedAccessControlList("private");
        public static TopicRuleCannedAccessControlList PublicRead { get; } = new TopicRuleCannedAccessControlList("public-read");
        public static TopicRuleCannedAccessControlList PublicReadWrite { get; } = new TopicRuleCannedAccessControlList("public-read-write");
        public static TopicRuleCannedAccessControlList AwsExecRead { get; } = new TopicRuleCannedAccessControlList("aws-exec-read");
        public static TopicRuleCannedAccessControlList AuthenticatedRead { get; } = new TopicRuleCannedAccessControlList("authenticated-read");
        public static TopicRuleCannedAccessControlList BucketOwnerRead { get; } = new TopicRuleCannedAccessControlList("bucket-owner-read");
        public static TopicRuleCannedAccessControlList BucketOwnerFullControl { get; } = new TopicRuleCannedAccessControlList("bucket-owner-full-control");
        public static TopicRuleCannedAccessControlList LogDeliveryWrite { get; } = new TopicRuleCannedAccessControlList("log-delivery-write");

        public static bool operator ==(TopicRuleCannedAccessControlList left, TopicRuleCannedAccessControlList right) => left.Equals(right);
        public static bool operator !=(TopicRuleCannedAccessControlList left, TopicRuleCannedAccessControlList right) => !left.Equals(right);

        public static explicit operator string(TopicRuleCannedAccessControlList value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicRuleCannedAccessControlList other && Equals(other);
        public bool Equals(TopicRuleCannedAccessControlList other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicRuleDestinationTopicRuleDestinationStatus : IEquatable<TopicRuleDestinationTopicRuleDestinationStatus>
    {
        private readonly string _value;

        private TopicRuleDestinationTopicRuleDestinationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicRuleDestinationTopicRuleDestinationStatus Enabled { get; } = new TopicRuleDestinationTopicRuleDestinationStatus("ENABLED");
        public static TopicRuleDestinationTopicRuleDestinationStatus InProgress { get; } = new TopicRuleDestinationTopicRuleDestinationStatus("IN_PROGRESS");
        public static TopicRuleDestinationTopicRuleDestinationStatus Disabled { get; } = new TopicRuleDestinationTopicRuleDestinationStatus("DISABLED");

        public static bool operator ==(TopicRuleDestinationTopicRuleDestinationStatus left, TopicRuleDestinationTopicRuleDestinationStatus right) => left.Equals(right);
        public static bool operator !=(TopicRuleDestinationTopicRuleDestinationStatus left, TopicRuleDestinationTopicRuleDestinationStatus right) => !left.Equals(right);

        public static explicit operator string(TopicRuleDestinationTopicRuleDestinationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicRuleDestinationTopicRuleDestinationStatus other && Equals(other);
        public bool Equals(TopicRuleDestinationTopicRuleDestinationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
