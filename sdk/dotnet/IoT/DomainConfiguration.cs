// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoT
{
    /// <summary>
    /// Create and manage a Domain Configuration
    /// </summary>
    [AwsNativeResourceType("aws-native:iot:DomainConfiguration")]
    public partial class DomainConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An enumerated string that speciﬁes the application-layer protocol.
        /// </summary>
        [Output("applicationProtocol")]
        public Output<Pulumi.AwsNative.IoT.DomainConfigurationApplicationProtocol?> ApplicationProtocol { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the domain configuration.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// An enumerated string that speciﬁes the authentication type.
        /// </summary>
        [Output("authenticationType")]
        public Output<Pulumi.AwsNative.IoT.DomainConfigurationAuthenticationType?> AuthenticationType { get; private set; } = null!;

        /// <summary>
        /// An object that specifies the authorization service for a domain.
        /// </summary>
        [Output("authorizerConfig")]
        public Output<Outputs.DomainConfigurationAuthorizerConfig?> AuthorizerConfig { get; private set; } = null!;

        /// <summary>
        /// An object that speciﬁes the client certificate conﬁguration for a domain.
        /// </summary>
        [Output("clientCertificateConfig")]
        public Output<Outputs.DomainConfigurationClientCertificateConfig?> ClientCertificateConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the domain configuration. This value must be unique to a region.
        /// </summary>
        [Output("domainConfigurationName")]
        public Output<string?> DomainConfigurationName { get; private set; } = null!;

        /// <summary>
        /// The status to which the domain configuration should be updated.
        /// 
        /// Valid values: `ENABLED` | `DISABLED`
        /// </summary>
        [Output("domainConfigurationStatus")]
        public Output<Pulumi.AwsNative.IoT.DomainConfigurationStatus?> DomainConfigurationStatus { get; private set; } = null!;

        /// <summary>
        /// The name of the domain.
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        /// <summary>
        /// The type of service delivered by the domain.
        /// </summary>
        [Output("domainType")]
        public Output<Pulumi.AwsNative.IoT.DomainConfigurationDomainType> DomainType { get; private set; } = null!;

        /// <summary>
        /// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
        /// </summary>
        [Output("serverCertificateArns")]
        public Output<ImmutableArray<string>> ServerCertificateArns { get; private set; } = null!;

        /// <summary>
        /// The server certificate configuration.
        /// 
        /// For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
        /// </summary>
        [Output("serverCertificateConfig")]
        public Output<Outputs.DomainConfigurationServerCertificateConfig?> ServerCertificateConfig { get; private set; } = null!;

        /// <summary>
        /// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
        /// </summary>
        [Output("serverCertificates")]
        public Output<ImmutableArray<Outputs.DomainConfigurationServerCertificateSummary>> ServerCertificates { get; private set; } = null!;

        /// <summary>
        /// The type of service delivered by the endpoint.
        /// 
        /// &gt; AWS IoT Core currently supports only the `DATA` service type.
        /// </summary>
        [Output("serviceType")]
        public Output<Pulumi.AwsNative.IoT.DomainConfigurationServiceType?> ServiceType { get; private set; } = null!;

        /// <summary>
        /// Metadata which can be used to manage the domain configuration.
        /// 
        /// &gt; For URI Request parameters use format: ...key1=value1&amp;key2=value2...
        /// &gt; 
        /// &gt; For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."
        /// &gt; 
        /// &gt; For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// An object that specifies the TLS configuration for a domain.
        /// </summary>
        [Output("tlsConfig")]
        public Output<Outputs.DomainConfigurationTlsConfig?> TlsConfig { get; private set; } = null!;

        /// <summary>
        /// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for AWS -managed domains.
        /// </summary>
        [Output("validationCertificateArn")]
        public Output<string?> ValidationCertificateArn { get; private set; } = null!;


        /// <summary>
        /// Create a DomainConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainConfiguration(string name, DomainConfigurationArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:iot:DomainConfiguration", name, args ?? new DomainConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:iot:DomainConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "domainConfigurationName",
                    "domainName",
                    "serverCertificateArns[*]",
                    "serviceType",
                    "validationCertificateArn",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DomainConfiguration(name, id, options);
        }
    }

    public sealed class DomainConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An enumerated string that speciﬁes the application-layer protocol.
        /// </summary>
        [Input("applicationProtocol")]
        public Input<Pulumi.AwsNative.IoT.DomainConfigurationApplicationProtocol>? ApplicationProtocol { get; set; }

        /// <summary>
        /// An enumerated string that speciﬁes the authentication type.
        /// </summary>
        [Input("authenticationType")]
        public Input<Pulumi.AwsNative.IoT.DomainConfigurationAuthenticationType>? AuthenticationType { get; set; }

        /// <summary>
        /// An object that specifies the authorization service for a domain.
        /// </summary>
        [Input("authorizerConfig")]
        public Input<Inputs.DomainConfigurationAuthorizerConfigArgs>? AuthorizerConfig { get; set; }

        /// <summary>
        /// An object that speciﬁes the client certificate conﬁguration for a domain.
        /// </summary>
        [Input("clientCertificateConfig")]
        public Input<Inputs.DomainConfigurationClientCertificateConfigArgs>? ClientCertificateConfig { get; set; }

        /// <summary>
        /// The name of the domain configuration. This value must be unique to a region.
        /// </summary>
        [Input("domainConfigurationName")]
        public Input<string>? DomainConfigurationName { get; set; }

        /// <summary>
        /// The status to which the domain configuration should be updated.
        /// 
        /// Valid values: `ENABLED` | `DISABLED`
        /// </summary>
        [Input("domainConfigurationStatus")]
        public Input<Pulumi.AwsNative.IoT.DomainConfigurationStatus>? DomainConfigurationStatus { get; set; }

        /// <summary>
        /// The name of the domain.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("serverCertificateArns")]
        private InputList<string>? _serverCertificateArns;

        /// <summary>
        /// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS -managed domains.
        /// </summary>
        public InputList<string> ServerCertificateArns
        {
            get => _serverCertificateArns ?? (_serverCertificateArns = new InputList<string>());
            set => _serverCertificateArns = value;
        }

        /// <summary>
        /// The server certificate configuration.
        /// 
        /// For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
        /// </summary>
        [Input("serverCertificateConfig")]
        public Input<Inputs.DomainConfigurationServerCertificateConfigArgs>? ServerCertificateConfig { get; set; }

        /// <summary>
        /// The type of service delivered by the endpoint.
        /// 
        /// &gt; AWS IoT Core currently supports only the `DATA` service type.
        /// </summary>
        [Input("serviceType")]
        public Input<Pulumi.AwsNative.IoT.DomainConfigurationServiceType>? ServiceType { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// Metadata which can be used to manage the domain configuration.
        /// 
        /// &gt; For URI Request parameters use format: ...key1=value1&amp;key2=value2...
        /// &gt; 
        /// &gt; For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."
        /// &gt; 
        /// &gt; For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// An object that specifies the TLS configuration for a domain.
        /// </summary>
        [Input("tlsConfig")]
        public Input<Inputs.DomainConfigurationTlsConfigArgs>? TlsConfig { get; set; }

        /// <summary>
        /// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for AWS -managed domains.
        /// </summary>
        [Input("validationCertificateArn")]
        public Input<string>? ValidationCertificateArn { get; set; }

        public DomainConfigurationArgs()
        {
        }
        public static new DomainConfigurationArgs Empty => new DomainConfigurationArgs();
    }
}
