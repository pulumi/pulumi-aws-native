// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoT
{
    public static class GetAuthorizer
    {
        /// <summary>
        /// Creates an authorizer.
        /// </summary>
        public static Task<GetAuthorizerResult> InvokeAsync(GetAuthorizerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthorizerResult>("aws-native:iot:getAuthorizer", args ?? new GetAuthorizerArgs(), options.WithDefaults());

        /// <summary>
        /// Creates an authorizer.
        /// </summary>
        public static Output<GetAuthorizerResult> Invoke(GetAuthorizerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizerResult>("aws-native:iot:getAuthorizer", args ?? new GetAuthorizerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Creates an authorizer.
        /// </summary>
        public static Output<GetAuthorizerResult> Invoke(GetAuthorizerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizerResult>("aws-native:iot:getAuthorizer", args ?? new GetAuthorizerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthorizerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The authorizer name.
        /// </summary>
        [Input("authorizerName", required: true)]
        public string AuthorizerName { get; set; } = null!;

        public GetAuthorizerArgs()
        {
        }
        public static new GetAuthorizerArgs Empty => new GetAuthorizerArgs();
    }

    public sealed class GetAuthorizerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The authorizer name.
        /// </summary>
        [Input("authorizerName", required: true)]
        public Input<string> AuthorizerName { get; set; } = null!;

        public GetAuthorizerInvokeArgs()
        {
        }
        public static new GetAuthorizerInvokeArgs Empty => new GetAuthorizerInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthorizerResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the authorizer.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The authorizer's Lambda function ARN.
        /// </summary>
        public readonly string? AuthorizerFunctionArn;
        /// <summary>
        /// When `true` , the result from the authorizer's Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in `refreshAfterInSeconds` . This value doesn't affect authorization of clients that use MQTT connections.
        /// </summary>
        public readonly bool? EnableCachingForHttp;
        /// <summary>
        /// The status of the authorizer.
        /// 
        /// Valid values: `ACTIVE` | `INACTIVE`
        /// </summary>
        public readonly Pulumi.AwsNative.IoT.AuthorizerStatus? Status;
        /// <summary>
        /// Metadata which can be used to manage the custom authorizer.
        /// 
        /// &gt; For URI Request parameters use format: ...key1=value1&amp;key2=value2...
        /// &gt; 
        /// &gt; For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."
        /// &gt; 
        /// &gt; For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;
        /// <summary>
        /// The key used to extract the token from the HTTP headers.
        /// </summary>
        public readonly string? TokenKeyName;
        /// <summary>
        /// The public keys used to validate the token signature returned by your custom authentication service.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? TokenSigningPublicKeys;

        [OutputConstructor]
        private GetAuthorizerResult(
            string? arn,

            string? authorizerFunctionArn,

            bool? enableCachingForHttp,

            Pulumi.AwsNative.IoT.AuthorizerStatus? status,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags,

            string? tokenKeyName,

            ImmutableDictionary<string, string>? tokenSigningPublicKeys)
        {
            Arn = arn;
            AuthorizerFunctionArn = authorizerFunctionArn;
            EnableCachingForHttp = enableCachingForHttp;
            Status = status;
            Tags = tags;
            TokenKeyName = tokenKeyName;
            TokenSigningPublicKeys = tokenSigningPublicKeys;
        }
    }
}
