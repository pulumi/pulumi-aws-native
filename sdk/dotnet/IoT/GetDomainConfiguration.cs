// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoT
{
    public static class GetDomainConfiguration
    {
        /// <summary>
        /// Create and manage a Domain Configuration
        /// </summary>
        public static Task<GetDomainConfigurationResult> InvokeAsync(GetDomainConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainConfigurationResult>("aws-native:iot:getDomainConfiguration", args ?? new GetDomainConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Create and manage a Domain Configuration
        /// </summary>
        public static Output<GetDomainConfigurationResult> Invoke(GetDomainConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainConfigurationResult>("aws-native:iot:getDomainConfiguration", args ?? new GetDomainConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the domain configuration. This value must be unique to a region.
        /// </summary>
        [Input("domainConfigurationName", required: true)]
        public string DomainConfigurationName { get; set; } = null!;

        public GetDomainConfigurationArgs()
        {
        }
        public static new GetDomainConfigurationArgs Empty => new GetDomainConfigurationArgs();
    }

    public sealed class GetDomainConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the domain configuration. This value must be unique to a region.
        /// </summary>
        [Input("domainConfigurationName", required: true)]
        public Input<string> DomainConfigurationName { get; set; } = null!;

        public GetDomainConfigurationInvokeArgs()
        {
        }
        public static new GetDomainConfigurationInvokeArgs Empty => new GetDomainConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainConfigurationResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the domain configuration.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// An object that specifies the authorization service for a domain.
        /// </summary>
        public readonly Outputs.DomainConfigurationAuthorizerConfig? AuthorizerConfig;
        /// <summary>
        /// The status to which the domain configuration should be updated.
        /// 
        /// Valid values: `ENABLED` | `DISABLED`
        /// </summary>
        public readonly Pulumi.AwsNative.IoT.DomainConfigurationStatus? DomainConfigurationStatus;
        /// <summary>
        /// The type of service delivered by the domain.
        /// </summary>
        public readonly Pulumi.AwsNative.IoT.DomainConfigurationDomainType? DomainType;
        /// <summary>
        /// The server certificate configuration.
        /// 
        /// For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
        /// </summary>
        public readonly Outputs.DomainConfigurationServerCertificateConfig? ServerCertificateConfig;
        /// <summary>
        /// An object that contains information about a server certificate.
        /// </summary>
        public readonly ImmutableArray<Outputs.DomainConfigurationServerCertificateSummary> ServerCertificates;
        /// <summary>
        /// A set of key/value pairs that are used to manage the resource.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;
        /// <summary>
        /// An object that specifies the TLS configuration for a domain.
        /// </summary>
        public readonly Outputs.DomainConfigurationTlsConfig? TlsConfig;

        [OutputConstructor]
        private GetDomainConfigurationResult(
            string? arn,

            Outputs.DomainConfigurationAuthorizerConfig? authorizerConfig,

            Pulumi.AwsNative.IoT.DomainConfigurationStatus? domainConfigurationStatus,

            Pulumi.AwsNative.IoT.DomainConfigurationDomainType? domainType,

            Outputs.DomainConfigurationServerCertificateConfig? serverCertificateConfig,

            ImmutableArray<Outputs.DomainConfigurationServerCertificateSummary> serverCertificates,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags,

            Outputs.DomainConfigurationTlsConfig? tlsConfig)
        {
            Arn = arn;
            AuthorizerConfig = authorizerConfig;
            DomainConfigurationStatus = domainConfigurationStatus;
            DomainType = domainType;
            ServerCertificateConfig = serverCertificateConfig;
            ServerCertificates = serverCertificates;
            Tags = tags;
            TlsConfig = tlsConfig;
        }
    }
}
