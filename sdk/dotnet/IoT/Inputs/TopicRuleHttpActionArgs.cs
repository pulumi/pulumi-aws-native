// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoT.Inputs
{

    public sealed class TopicRuleHttpActionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication method to use when sending data to an HTTPS endpoint.
        /// </summary>
        [Input("auth")]
        public Input<Inputs.TopicRuleHttpAuthorizationArgs>? Auth { get; set; }

        /// <summary>
        /// The URL to which AWS IoT sends a confirmation message. The value of the confirmation URL must be a prefix of the endpoint URL. If you do not specify a confirmation URL AWS IoT uses the endpoint URL as the confirmation URL. If you use substitution templates in the confirmationUrl, you must create and enable topic rule destinations that match each possible value of the substitution template before traffic is allowed to your endpoint URL.
        /// </summary>
        [Input("confirmationUrl")]
        public Input<string>? ConfirmationUrl { get; set; }

        [Input("headers")]
        private InputList<Inputs.TopicRuleHttpActionHeaderArgs>? _headers;

        /// <summary>
        /// The HTTP headers to send with the message data.
        /// </summary>
        public InputList<Inputs.TopicRuleHttpActionHeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.TopicRuleHttpActionHeaderArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// The endpoint URL. If substitution templates are used in the URL, you must also specify a `confirmationUrl` . If this is a new destination, a new `TopicRuleDestination` is created if possible.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public TopicRuleHttpActionArgs()
        {
        }
        public static new TopicRuleHttpActionArgs Empty => new TopicRuleHttpActionArgs();
    }
}
