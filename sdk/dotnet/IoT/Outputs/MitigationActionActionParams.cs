// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoT.Outputs
{

    /// <summary>
    /// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
    /// </summary>
    [OutputType]
    public sealed class MitigationActionActionParams
    {
        /// <summary>
        /// Parameters used when defining a mitigation action that move a set of things to a thing group.
        /// </summary>
        public readonly Outputs.MitigationActionAddThingsToThingGroupParams? AddThingsToThingGroupParams;
        /// <summary>
        /// Parameters used when defining a mitigation action that enable AWS IoT Core logging.
        /// </summary>
        public readonly Outputs.MitigationActionEnableIoTLoggingParams? EnableIoTLoggingParams;
        /// <summary>
        /// Parameters to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.
        /// </summary>
        public readonly Outputs.MitigationActionPublishFindingToSnsParams? PublishFindingToSnsParams;
        /// <summary>
        /// Parameters to define a mitigation action that adds a blank policy to restrict permissions.
        /// </summary>
        public readonly Outputs.MitigationActionReplaceDefaultPolicyVersionParams? ReplaceDefaultPolicyVersionParams;
        /// <summary>
        /// Parameters to define a mitigation action that changes the state of the CA certificate to inactive.
        /// </summary>
        public readonly Outputs.MitigationActionUpdateCaCertificateParams? UpdateCaCertificateParams;
        /// <summary>
        /// Parameters to define a mitigation action that changes the state of the device certificate to inactive.
        /// </summary>
        public readonly Outputs.MitigationActionUpdateDeviceCertificateParams? UpdateDeviceCertificateParams;

        [OutputConstructor]
        private MitigationActionActionParams(
            Outputs.MitigationActionAddThingsToThingGroupParams? addThingsToThingGroupParams,

            Outputs.MitigationActionEnableIoTLoggingParams? enableIoTLoggingParams,

            Outputs.MitigationActionPublishFindingToSnsParams? publishFindingToSnsParams,

            Outputs.MitigationActionReplaceDefaultPolicyVersionParams? replaceDefaultPolicyVersionParams,

            Outputs.MitigationActionUpdateCaCertificateParams? updateCaCertificateParams,

            Outputs.MitigationActionUpdateDeviceCertificateParams? updateDeviceCertificateParams)
        {
            AddThingsToThingGroupParams = addThingsToThingGroupParams;
            EnableIoTLoggingParams = enableIoTLoggingParams;
            PublishFindingToSnsParams = publishFindingToSnsParams;
            ReplaceDefaultPolicyVersionParams = replaceDefaultPolicyVersionParams;
            UpdateCaCertificateParams = updateCaCertificateParams;
            UpdateDeviceCertificateParams = updateDeviceCertificateParams;
        }
    }
}
