// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoT.Outputs
{

    [OutputType]
    public sealed class TopicRuleAction
    {
        /// <summary>
        /// Change the state of a CloudWatch alarm.
        /// </summary>
        public readonly Outputs.TopicRuleCloudwatchAlarmAction? CloudwatchAlarm;
        /// <summary>
        /// Sends data to CloudWatch.
        /// </summary>
        public readonly Outputs.TopicRuleCloudwatchLogsAction? CloudwatchLogs;
        /// <summary>
        /// Capture a CloudWatch metric.
        /// </summary>
        public readonly Outputs.TopicRuleCloudwatchMetricAction? CloudwatchMetric;
        /// <summary>
        /// Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.
        /// </summary>
        public readonly Outputs.TopicRuleDynamoDBv2Action? DynamoDBv2;
        /// <summary>
        /// Write to a DynamoDB table.
        /// </summary>
        public readonly Outputs.TopicRuleDynamoDbAction? DynamoDb;
        /// <summary>
        /// Write data to an Amazon OpenSearch Service domain.
        /// 
        /// &gt; The `Elasticsearch` action can only be used by existing rule actions. To create a new rule action or to update an existing rule action, use the `OpenSearch` rule action instead. For more information, see [OpenSearchAction](https://docs.aws.amazon.com//iot/latest/apireference/API_OpenSearchAction.html) .
        /// </summary>
        public readonly Outputs.TopicRuleElasticsearchAction? Elasticsearch;
        /// <summary>
        /// Write to an Amazon Kinesis Firehose stream.
        /// </summary>
        public readonly Outputs.TopicRuleFirehoseAction? Firehose;
        /// <summary>
        /// Send data to an HTTPS endpoint.
        /// </summary>
        public readonly Outputs.TopicRuleHttpAction? Http;
        /// <summary>
        /// Sends message data to an AWS IoT Analytics channel.
        /// </summary>
        public readonly Outputs.TopicRuleIotAnalyticsAction? IotAnalytics;
        /// <summary>
        /// Sends an input to an AWS IoT Events detector.
        /// </summary>
        public readonly Outputs.TopicRuleIotEventsAction? IotEvents;
        /// <summary>
        /// Sends data from the MQTT message that triggered the rule to AWS IoT SiteWise asset properties.
        /// </summary>
        public readonly Outputs.TopicRuleIotSiteWiseAction? IotSiteWise;
        /// <summary>
        /// Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.
        /// </summary>
        public readonly Outputs.TopicRuleKafkaAction? Kafka;
        /// <summary>
        /// Write data to an Amazon Kinesis stream.
        /// </summary>
        public readonly Outputs.TopicRuleKinesisAction? Kinesis;
        /// <summary>
        /// Invoke a Lambda function.
        /// </summary>
        public readonly Outputs.TopicRuleLambdaAction? Lambda;
        /// <summary>
        /// Sends device location data to [Amazon Location Service](https://docs.aws.amazon.com//location/latest/developerguide/welcome.html) .
        /// </summary>
        public readonly Outputs.TopicRuleLocationAction? Location;
        /// <summary>
        /// Write data to an Amazon OpenSearch Service domain.
        /// </summary>
        public readonly Outputs.TopicRuleOpenSearchAction? OpenSearch;
        /// <summary>
        /// Publish to another MQTT topic.
        /// </summary>
        public readonly Outputs.TopicRuleRepublishAction? Republish;
        /// <summary>
        /// Write to an Amazon S3 bucket.
        /// </summary>
        public readonly Outputs.TopicRuleS3Action? S3;
        /// <summary>
        /// Publish to an Amazon SNS topic.
        /// </summary>
        public readonly Outputs.TopicRuleSnsAction? Sns;
        /// <summary>
        /// Publish to an Amazon SQS queue.
        /// </summary>
        public readonly Outputs.TopicRuleSqsAction? Sqs;
        /// <summary>
        /// Starts execution of a Step Functions state machine.
        /// </summary>
        public readonly Outputs.TopicRuleStepFunctionsAction? StepFunctions;
        /// <summary>
        /// Writes attributes from an MQTT message.
        /// </summary>
        public readonly Outputs.TopicRuleTimestreamAction? Timestream;

        [OutputConstructor]
        private TopicRuleAction(
            Outputs.TopicRuleCloudwatchAlarmAction? cloudwatchAlarm,

            Outputs.TopicRuleCloudwatchLogsAction? cloudwatchLogs,

            Outputs.TopicRuleCloudwatchMetricAction? cloudwatchMetric,

            Outputs.TopicRuleDynamoDBv2Action? dynamoDBv2,

            Outputs.TopicRuleDynamoDbAction? dynamoDb,

            Outputs.TopicRuleElasticsearchAction? elasticsearch,

            Outputs.TopicRuleFirehoseAction? firehose,

            Outputs.TopicRuleHttpAction? http,

            Outputs.TopicRuleIotAnalyticsAction? iotAnalytics,

            Outputs.TopicRuleIotEventsAction? iotEvents,

            Outputs.TopicRuleIotSiteWiseAction? iotSiteWise,

            Outputs.TopicRuleKafkaAction? kafka,

            Outputs.TopicRuleKinesisAction? kinesis,

            Outputs.TopicRuleLambdaAction? lambda,

            Outputs.TopicRuleLocationAction? location,

            Outputs.TopicRuleOpenSearchAction? openSearch,

            Outputs.TopicRuleRepublishAction? republish,

            Outputs.TopicRuleS3Action? s3,

            Outputs.TopicRuleSnsAction? sns,

            Outputs.TopicRuleSqsAction? sqs,

            Outputs.TopicRuleStepFunctionsAction? stepFunctions,

            Outputs.TopicRuleTimestreamAction? timestream)
        {
            CloudwatchAlarm = cloudwatchAlarm;
            CloudwatchLogs = cloudwatchLogs;
            CloudwatchMetric = cloudwatchMetric;
            DynamoDBv2 = dynamoDBv2;
            DynamoDb = dynamoDb;
            Elasticsearch = elasticsearch;
            Firehose = firehose;
            Http = http;
            IotAnalytics = iotAnalytics;
            IotEvents = iotEvents;
            IotSiteWise = iotSiteWise;
            Kafka = kafka;
            Kinesis = kinesis;
            Lambda = lambda;
            Location = location;
            OpenSearch = openSearch;
            Republish = republish;
            S3 = s3;
            Sns = sns;
            Sqs = sqs;
            StepFunctions = stepFunctions;
            Timestream = timestream;
        }
    }
}
