// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoT
{
    /// <summary>
    /// Use the AWS::IoT::Certificate resource to declare an AWS IoT X.509 certificate.
    /// </summary>
    [AwsNativeResourceType("aws-native:iot:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Returns the Amazon Resource Name (ARN) for the certificate. For example:
        /// 
        /// `{ "Fn::GetAtt": ["MyCertificate", "Arn"] }`
        /// 
        /// A value similar to the following is returned:
        /// 
        /// `arn:aws:iot:ap-southeast-2:123456789012:cert/a1234567b89c012d3e4fg567hij8k9l01mno1p23q45678901rs234567890t1u2`
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The certificate ID.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The CA certificate used to sign the device certificate being registered, not available when CertificateMode is SNI_ONLY.
        /// </summary>
        [Output("caCertificatePem")]
        public Output<string?> CaCertificatePem { get; private set; } = null!;

        /// <summary>
        /// Specifies which mode of certificate registration to use with this resource. Valid options are DEFAULT with CaCertificatePem and CertificatePem, SNI_ONLY with CertificatePem, and Default with CertificateSigningRequest.
        /// 
        /// `DEFAULT` : A certificate in `DEFAULT` mode is either generated by AWS IoT Core or registered with an issuer certificate authority (CA). Devices with certificates in `DEFAULT` mode aren't required to send the Server Name Indication (SNI) extension when connecting to AWS IoT Core . However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to AWS IoT Core .
        /// 
        /// `SNI_ONLY` : A certificate in `SNI_ONLY` mode is registered without an issuer CA. Devices with certificates in `SNI_ONLY` mode must send the SNI extension when connecting to AWS IoT Core .
        /// </summary>
        [Output("certificateMode")]
        public Output<Pulumi.AwsNative.IoT.CertificateMode?> CertificateMode { get; private set; } = null!;

        /// <summary>
        /// The certificate data in PEM format. Requires SNI_ONLY for the certificate mode or the accompanying CACertificatePem for registration.
        /// </summary>
        [Output("certificatePem")]
        public Output<string?> CertificatePem { get; private set; } = null!;

        /// <summary>
        /// The certificate signing request (CSR).
        /// </summary>
        [Output("certificateSigningRequest")]
        public Output<string?> CertificateSigningRequest { get; private set; } = null!;

        /// <summary>
        /// The status of the certificate.
        /// 
        /// Valid values are ACTIVE, INACTIVE, REVOKED, PENDING_TRANSFER, and PENDING_ACTIVATION.
        /// 
        /// The status value REGISTER_INACTIVE is deprecated and should not be used.
        /// </summary>
        [Output("status")]
        public Output<Pulumi.AwsNative.IoT.CertificateStatus> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("aws-native:iot:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:iot:Certificate", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "caCertificatePem",
                    "certificateMode",
                    "certificatePem",
                    "certificateSigningRequest",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CA certificate used to sign the device certificate being registered, not available when CertificateMode is SNI_ONLY.
        /// </summary>
        [Input("caCertificatePem")]
        public Input<string>? CaCertificatePem { get; set; }

        /// <summary>
        /// Specifies which mode of certificate registration to use with this resource. Valid options are DEFAULT with CaCertificatePem and CertificatePem, SNI_ONLY with CertificatePem, and Default with CertificateSigningRequest.
        /// 
        /// `DEFAULT` : A certificate in `DEFAULT` mode is either generated by AWS IoT Core or registered with an issuer certificate authority (CA). Devices with certificates in `DEFAULT` mode aren't required to send the Server Name Indication (SNI) extension when connecting to AWS IoT Core . However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to AWS IoT Core .
        /// 
        /// `SNI_ONLY` : A certificate in `SNI_ONLY` mode is registered without an issuer CA. Devices with certificates in `SNI_ONLY` mode must send the SNI extension when connecting to AWS IoT Core .
        /// </summary>
        [Input("certificateMode")]
        public Input<Pulumi.AwsNative.IoT.CertificateMode>? CertificateMode { get; set; }

        /// <summary>
        /// The certificate data in PEM format. Requires SNI_ONLY for the certificate mode or the accompanying CACertificatePem for registration.
        /// </summary>
        [Input("certificatePem")]
        public Input<string>? CertificatePem { get; set; }

        /// <summary>
        /// The certificate signing request (CSR).
        /// </summary>
        [Input("certificateSigningRequest")]
        public Input<string>? CertificateSigningRequest { get; set; }

        /// <summary>
        /// The status of the certificate.
        /// 
        /// Valid values are ACTIVE, INACTIVE, REVOKED, PENDING_TRANSFER, and PENDING_ACTIVATION.
        /// 
        /// The status value REGISTER_INACTIVE is deprecated and should not be used.
        /// </summary>
        [Input("status", required: true)]
        public Input<Pulumi.AwsNative.IoT.CertificateStatus> Status { get; set; } = null!;

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }
}
