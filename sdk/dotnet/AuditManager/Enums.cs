// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.AuditManager
{
    /// <summary>
    /// The destination type, such as Amazon S3.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentAssessmentReportDestinationType : IEquatable<AssessmentAssessmentReportDestinationType>
    {
        private readonly string _value;

        private AssessmentAssessmentReportDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentAssessmentReportDestinationType S3 { get; } = new AssessmentAssessmentReportDestinationType("S3");

        public static bool operator ==(AssessmentAssessmentReportDestinationType left, AssessmentAssessmentReportDestinationType right) => left.Equals(right);
        public static bool operator !=(AssessmentAssessmentReportDestinationType left, AssessmentAssessmentReportDestinationType right) => !left.Equals(right);

        public static explicit operator string(AssessmentAssessmentReportDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentAssessmentReportDestinationType other && Equals(other);
        public bool Equals(AssessmentAssessmentReportDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the specified assessment. 
    /// </summary>
    [EnumType]
    public readonly struct AssessmentAssessmentStatus : IEquatable<AssessmentAssessmentStatus>
    {
        private readonly string _value;

        private AssessmentAssessmentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentAssessmentStatus Active { get; } = new AssessmentAssessmentStatus("ACTIVE");
        public static AssessmentAssessmentStatus Inactive { get; } = new AssessmentAssessmentStatus("INACTIVE");

        public static bool operator ==(AssessmentAssessmentStatus left, AssessmentAssessmentStatus right) => left.Equals(right);
        public static bool operator !=(AssessmentAssessmentStatus left, AssessmentAssessmentStatus right) => !left.Equals(right);

        public static explicit operator string(AssessmentAssessmentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentAssessmentStatus other && Equals(other);
        public bool Equals(AssessmentAssessmentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the delegation.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentDelegationStatus : IEquatable<AssessmentDelegationStatus>
    {
        private readonly string _value;

        private AssessmentDelegationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentDelegationStatus InProgress { get; } = new AssessmentDelegationStatus("IN_PROGRESS");
        public static AssessmentDelegationStatus UnderReview { get; } = new AssessmentDelegationStatus("UNDER_REVIEW");
        public static AssessmentDelegationStatus Complete { get; } = new AssessmentDelegationStatus("COMPLETE");

        public static bool operator ==(AssessmentDelegationStatus left, AssessmentDelegationStatus right) => left.Equals(right);
        public static bool operator !=(AssessmentDelegationStatus left, AssessmentDelegationStatus right) => !left.Equals(right);

        public static explicit operator string(AssessmentDelegationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentDelegationStatus other && Equals(other);
        public bool Equals(AssessmentDelegationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    ///  The IAM role type.
    /// </summary>
    [EnumType]
    public readonly struct AssessmentRoleType : IEquatable<AssessmentRoleType>
    {
        private readonly string _value;

        private AssessmentRoleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssessmentRoleType ProcessOwner { get; } = new AssessmentRoleType("PROCESS_OWNER");
        public static AssessmentRoleType ResourceOwner { get; } = new AssessmentRoleType("RESOURCE_OWNER");

        public static bool operator ==(AssessmentRoleType left, AssessmentRoleType right) => left.Equals(right);
        public static bool operator !=(AssessmentRoleType left, AssessmentRoleType right) => !left.Equals(right);

        public static explicit operator string(AssessmentRoleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssessmentRoleType other && Equals(other);
        public bool Equals(AssessmentRoleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
