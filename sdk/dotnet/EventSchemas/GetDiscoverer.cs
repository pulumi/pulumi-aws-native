// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EventSchemas
{
    public static class GetDiscoverer
    {
        /// <summary>
        /// Resource Type definition for AWS::EventSchemas::Discoverer
        /// </summary>
        public static Task<GetDiscovererResult> InvokeAsync(GetDiscovererArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiscovererResult>("aws-native:eventschemas:getDiscoverer", args ?? new GetDiscovererArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::EventSchemas::Discoverer
        /// </summary>
        public static Output<GetDiscovererResult> Invoke(GetDiscovererInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDiscovererResult>("aws-native:eventschemas:getDiscoverer", args ?? new GetDiscovererInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiscovererArgs : Pulumi.InvokeArgs
    {
        [Input("discovererId", required: true)]
        public string DiscovererId { get; set; } = null!;

        public GetDiscovererArgs()
        {
        }
    }

    public sealed class GetDiscovererInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("discovererId", required: true)]
        public Input<string> DiscovererId { get; set; } = null!;

        public GetDiscovererInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDiscovererResult
    {
        public readonly bool? CrossAccount;
        public readonly string? Description;
        public readonly string? DiscovererArn;
        public readonly string? DiscovererId;
        public readonly ImmutableArray<Outputs.DiscovererTagsEntry> Tags;

        [OutputConstructor]
        private GetDiscovererResult(
            bool? crossAccount,

            string? description,

            string? discovererArn,

            string? discovererId,

            ImmutableArray<Outputs.DiscovererTagsEntry> tags)
        {
            CrossAccount = crossAccount;
            Description = description;
            DiscovererArn = discovererArn;
            DiscovererId = discovererId;
            Tags = tags;
        }
    }
}
