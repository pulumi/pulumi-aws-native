// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Elasticsearch
{
    public static class GetDomain
    {
        /// <summary>
        /// Resource Type definition for AWS::Elasticsearch::Domain
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("aws-native:elasticsearch:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Elasticsearch::Domain
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainResult>("aws-native:elasticsearch:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetDomainArgs()
        {
        }
    }

    public sealed class GetDomainInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetDomainInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        public readonly object? AccessPolicies;
        public readonly object? AdvancedOptions;
        public readonly string? Arn;
        public readonly Outputs.DomainCognitoOptions? CognitoOptions;
        public readonly string? DomainArn;
        public readonly string? DomainEndpoint;
        public readonly Outputs.DomainEndpointOptions? DomainEndpointOptions;
        public readonly Outputs.DomainEBSOptions? EBSOptions;
        public readonly Outputs.DomainElasticsearchClusterConfig? ElasticsearchClusterConfig;
        public readonly string? ElasticsearchVersion;
        public readonly Outputs.DomainEncryptionAtRestOptions? EncryptionAtRestOptions;
        public readonly string? Id;
        public readonly object? LogPublishingOptions;
        public readonly Outputs.DomainNodeToNodeEncryptionOptions? NodeToNodeEncryptionOptions;
        public readonly Outputs.DomainSnapshotOptions? SnapshotOptions;
        public readonly ImmutableArray<Outputs.DomainTag> Tags;
        public readonly Outputs.DomainVPCOptions? VPCOptions;

        [OutputConstructor]
        private GetDomainResult(
            object? accessPolicies,

            object? advancedOptions,

            string? arn,

            Outputs.DomainCognitoOptions? cognitoOptions,

            string? domainArn,

            string? domainEndpoint,

            Outputs.DomainEndpointOptions? domainEndpointOptions,

            Outputs.DomainEBSOptions? eBSOptions,

            Outputs.DomainElasticsearchClusterConfig? elasticsearchClusterConfig,

            string? elasticsearchVersion,

            Outputs.DomainEncryptionAtRestOptions? encryptionAtRestOptions,

            string? id,

            object? logPublishingOptions,

            Outputs.DomainNodeToNodeEncryptionOptions? nodeToNodeEncryptionOptions,

            Outputs.DomainSnapshotOptions? snapshotOptions,

            ImmutableArray<Outputs.DomainTag> tags,

            Outputs.DomainVPCOptions? vPCOptions)
        {
            AccessPolicies = accessPolicies;
            AdvancedOptions = advancedOptions;
            Arn = arn;
            CognitoOptions = cognitoOptions;
            DomainArn = domainArn;
            DomainEndpoint = domainEndpoint;
            DomainEndpointOptions = domainEndpointOptions;
            EBSOptions = eBSOptions;
            ElasticsearchClusterConfig = elasticsearchClusterConfig;
            ElasticsearchVersion = elasticsearchVersion;
            EncryptionAtRestOptions = encryptionAtRestOptions;
            Id = id;
            LogPublishingOptions = logPublishingOptions;
            NodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions;
            SnapshotOptions = snapshotOptions;
            Tags = tags;
            VPCOptions = vPCOptions;
        }
    }
}
