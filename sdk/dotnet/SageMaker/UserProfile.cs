// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SageMaker
{
    /// <summary>
    /// Resource Type definition for AWS::SageMaker::UserProfile
    /// </summary>
    [AwsNativeResourceType("aws-native:sagemaker:UserProfile")]
    public partial class UserProfile : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the associated Domain.
        /// </summary>
        [Output("domainId")]
        public Output<string> DomainId { get; private set; } = null!;

        /// <summary>
        /// A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain's AuthMode is SSO, this field is required. If the Domain's AuthMode is not SSO, this field cannot be specified.
        /// </summary>
        [Output("singleSignOnUserIdentifier")]
        public Output<string?> SingleSignOnUserIdentifier { get; private set; } = null!;

        /// <summary>
        /// The username of the associated AWS Single Sign-On User for this UserProfile. If the Domain's AuthMode is SSO, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not SSO, this field cannot be specified.
        /// </summary>
        [Output("singleSignOnUserValue")]
        public Output<string?> SingleSignOnUserValue { get; private set; } = null!;

        /// <summary>
        /// A list of tags to apply to the user profile.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.UserProfileTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The user profile Amazon Resource Name (ARN).
        /// </summary>
        [Output("userProfileArn")]
        public Output<string> UserProfileArn { get; private set; } = null!;

        /// <summary>
        /// A name for the UserProfile.
        /// </summary>
        [Output("userProfileName")]
        public Output<string> UserProfileName { get; private set; } = null!;

        /// <summary>
        /// A collection of settings.
        /// </summary>
        [Output("userSettings")]
        public Output<Outputs.UserProfileUserSettings?> UserSettings { get; private set; } = null!;


        /// <summary>
        /// Create a UserProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserProfile(string name, UserProfileArgs args, CustomResourceOptions? options = null)
            : base("aws-native:sagemaker:UserProfile", name, args ?? new UserProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserProfile(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:sagemaker:UserProfile", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserProfile Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new UserProfile(name, id, options);
        }
    }

    public sealed class UserProfileArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the associated Domain.
        /// </summary>
        [Input("domainId", required: true)]
        public Input<string> DomainId { get; set; } = null!;

        /// <summary>
        /// A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain's AuthMode is SSO, this field is required. If the Domain's AuthMode is not SSO, this field cannot be specified.
        /// </summary>
        [Input("singleSignOnUserIdentifier")]
        public Input<string>? SingleSignOnUserIdentifier { get; set; }

        /// <summary>
        /// The username of the associated AWS Single Sign-On User for this UserProfile. If the Domain's AuthMode is SSO, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not SSO, this field cannot be specified.
        /// </summary>
        [Input("singleSignOnUserValue")]
        public Input<string>? SingleSignOnUserValue { get; set; }

        [Input("tags")]
        private InputList<Inputs.UserProfileTagArgs>? _tags;

        /// <summary>
        /// A list of tags to apply to the user profile.
        /// </summary>
        public InputList<Inputs.UserProfileTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.UserProfileTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// A name for the UserProfile.
        /// </summary>
        [Input("userProfileName", required: true)]
        public Input<string> UserProfileName { get; set; } = null!;

        /// <summary>
        /// A collection of settings.
        /// </summary>
        [Input("userSettings")]
        public Input<Inputs.UserProfileUserSettingsArgs>? UserSettings { get; set; }

        public UserProfileArgs()
        {
        }
    }
}
