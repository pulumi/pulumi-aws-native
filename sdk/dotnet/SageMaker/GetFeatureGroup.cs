// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SageMaker
{
    public static class GetFeatureGroup
    {
        /// <summary>
        /// Resource Type definition for AWS::SageMaker::FeatureGroup
        /// </summary>
        public static Task<GetFeatureGroupResult> InvokeAsync(GetFeatureGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFeatureGroupResult>("aws-native:sagemaker:getFeatureGroup", args ?? new GetFeatureGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::SageMaker::FeatureGroup
        /// </summary>
        public static Output<GetFeatureGroupResult> Invoke(GetFeatureGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFeatureGroupResult>("aws-native:sagemaker:getFeatureGroup", args ?? new GetFeatureGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFeatureGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of the FeatureGroup.
        /// </summary>
        [Input("featureGroupName", required: true)]
        public string FeatureGroupName { get; set; } = null!;

        public GetFeatureGroupArgs()
        {
        }
        public static new GetFeatureGroupArgs Empty => new GetFeatureGroupArgs();
    }

    public sealed class GetFeatureGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of the FeatureGroup.
        /// </summary>
        [Input("featureGroupName", required: true)]
        public Input<string> FeatureGroupName { get; set; } = null!;

        public GetFeatureGroupInvokeArgs()
        {
        }
        public static new GetFeatureGroupInvokeArgs Empty => new GetFeatureGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetFeatureGroupResult
    {
        /// <summary>
        /// A timestamp of FeatureGroup creation time.
        /// </summary>
        public readonly string? CreationTime;
        /// <summary>
        /// An Array of Feature Definition
        /// </summary>
        public readonly ImmutableArray<Outputs.FeatureGroupFeatureDefinition> FeatureDefinitions;
        /// <summary>
        /// The status of the feature group.
        /// </summary>
        public readonly string? FeatureGroupStatus;
        /// <summary>
        /// The configuration of an `OnlineStore` .
        /// </summary>
        public readonly Outputs.OnlineStoreConfigProperties? OnlineStoreConfig;
        /// <summary>
        /// Used to set feature group throughput configuration. There are two modes: `ON_DEMAND` and `PROVISIONED` . With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled.
        /// 
        /// Note: `PROVISIONED` throughput mode is supported only for feature groups that are offline-only, or use the [`Standard`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
        /// </summary>
        public readonly Outputs.FeatureGroupThroughputConfig? ThroughputConfig;

        [OutputConstructor]
        private GetFeatureGroupResult(
            string? creationTime,

            ImmutableArray<Outputs.FeatureGroupFeatureDefinition> featureDefinitions,

            string? featureGroupStatus,

            Outputs.OnlineStoreConfigProperties? onlineStoreConfig,

            Outputs.FeatureGroupThroughputConfig? throughputConfig)
        {
            CreationTime = creationTime;
            FeatureDefinitions = featureDefinitions;
            FeatureGroupStatus = featureGroupStatus;
            OnlineStoreConfig = onlineStoreConfig;
            ThroughputConfig = throughputConfig;
        }
    }
}
