// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SageMaker
{
    /// <summary>
    /// Resource Type definition for AWS::SageMaker::FeatureGroup
    /// </summary>
    [AwsNativeResourceType("aws-native:sagemaker:FeatureGroup")]
    public partial class FeatureGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A timestamp of FeatureGroup creation time.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Description about the FeatureGroup.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Event Time Feature Name.
        /// </summary>
        [Output("eventTimeFeatureName")]
        public Output<string> EventTimeFeatureName { get; private set; } = null!;

        /// <summary>
        /// An Array of Feature Definition
        /// </summary>
        [Output("featureDefinitions")]
        public Output<ImmutableArray<Outputs.FeatureGroupFeatureDefinition>> FeatureDefinitions { get; private set; } = null!;

        /// <summary>
        /// The Name of the FeatureGroup.
        /// </summary>
        [Output("featureGroupName")]
        public Output<string> FeatureGroupName { get; private set; } = null!;

        /// <summary>
        /// The status of the feature group.
        /// </summary>
        [Output("featureGroupStatus")]
        public Output<string> FeatureGroupStatus { get; private set; } = null!;

        /// <summary>
        /// The configuration of an `OfflineStore` .
        /// </summary>
        [Output("offlineStoreConfig")]
        public Output<Outputs.OfflineStoreConfigProperties?> OfflineStoreConfig { get; private set; } = null!;

        /// <summary>
        /// The configuration of an `OnlineStore` .
        /// </summary>
        [Output("onlineStoreConfig")]
        public Output<Outputs.OnlineStoreConfigProperties?> OnlineStoreConfig { get; private set; } = null!;

        /// <summary>
        /// The Record Identifier Feature Name.
        /// </summary>
        [Output("recordIdentifierFeatureName")]
        public Output<string> RecordIdentifierFeatureName { get; private set; } = null!;

        /// <summary>
        /// Role Arn
        /// </summary>
        [Output("roleArn")]
        public Output<string?> RoleArn { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pair to apply to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.CreateOnlyTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Used to set feature group throughput configuration. There are two modes: `ON_DEMAND` and `PROVISIONED` . With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled.
        /// 
        /// Note: `PROVISIONED` throughput mode is supported only for feature groups that are offline-only, or use the [`Standard`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
        /// </summary>
        [Output("throughputConfig")]
        public Output<Outputs.FeatureGroupThroughputConfig?> ThroughputConfig { get; private set; } = null!;


        /// <summary>
        /// Create a FeatureGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FeatureGroup(string name, FeatureGroupArgs args, CustomResourceOptions? options = null)
            : base("aws-native:sagemaker:FeatureGroup", name, args ?? new FeatureGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FeatureGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:sagemaker:FeatureGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "description",
                    "eventTimeFeatureName",
                    "featureGroupName",
                    "offlineStoreConfig",
                    "recordIdentifierFeatureName",
                    "roleArn",
                    "tags[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FeatureGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FeatureGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new FeatureGroup(name, id, options);
        }
    }

    public sealed class FeatureGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description about the FeatureGroup.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Event Time Feature Name.
        /// </summary>
        [Input("eventTimeFeatureName", required: true)]
        public Input<string> EventTimeFeatureName { get; set; } = null!;

        [Input("featureDefinitions", required: true)]
        private InputList<Inputs.FeatureGroupFeatureDefinitionArgs>? _featureDefinitions;

        /// <summary>
        /// An Array of Feature Definition
        /// </summary>
        public InputList<Inputs.FeatureGroupFeatureDefinitionArgs> FeatureDefinitions
        {
            get => _featureDefinitions ?? (_featureDefinitions = new InputList<Inputs.FeatureGroupFeatureDefinitionArgs>());
            set => _featureDefinitions = value;
        }

        /// <summary>
        /// The Name of the FeatureGroup.
        /// </summary>
        [Input("featureGroupName")]
        public Input<string>? FeatureGroupName { get; set; }

        /// <summary>
        /// The configuration of an `OfflineStore` .
        /// </summary>
        [Input("offlineStoreConfig")]
        public Input<Inputs.OfflineStoreConfigPropertiesArgs>? OfflineStoreConfig { get; set; }

        /// <summary>
        /// The configuration of an `OnlineStore` .
        /// </summary>
        [Input("onlineStoreConfig")]
        public Input<Inputs.OnlineStoreConfigPropertiesArgs>? OnlineStoreConfig { get; set; }

        /// <summary>
        /// The Record Identifier Feature Name.
        /// </summary>
        [Input("recordIdentifierFeatureName", required: true)]
        public Input<string> RecordIdentifierFeatureName { get; set; } = null!;

        /// <summary>
        /// Role Arn
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs>? _tags;

        /// <summary>
        /// An array of key-value pair to apply to this resource.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Used to set feature group throughput configuration. There are two modes: `ON_DEMAND` and `PROVISIONED` . With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled.
        /// 
        /// Note: `PROVISIONED` throughput mode is supported only for feature groups that are offline-only, or use the [`Standard`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
        /// </summary>
        [Input("throughputConfig")]
        public Input<Inputs.FeatureGroupThroughputConfigArgs>? ThroughputConfig { get; set; }

        public FeatureGroupArgs()
        {
        }
        public static new FeatureGroupArgs Empty => new FeatureGroupArgs();
    }
}
