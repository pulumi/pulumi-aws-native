// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SageMaker.Inputs
{

    /// <summary>
    /// Defines the input needed to run a transform job using the inference specification specified in the algorithm.
    /// </summary>
    public sealed class ModelPackageTransformJobDefinitionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A string that determines the number of records included in a single mini-batch.
        /// </summary>
        [Input("batchStrategy")]
        public Input<Pulumi.AwsNative.SageMaker.ModelPackageTransformJobDefinitionBatchStrategy>? BatchStrategy { get; set; }

        [Input("environment")]
        public Input<Inputs.ModelPackageEnvironmentArgs>? Environment { get; set; }

        /// <summary>
        /// The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
        /// </summary>
        [Input("maxConcurrentTransforms")]
        public Input<int>? MaxConcurrentTransforms { get; set; }

        /// <summary>
        /// The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
        /// </summary>
        [Input("maxPayloadInMB")]
        public Input<int>? MaxPayloadInMB { get; set; }

        [Input("transformInput", required: true)]
        public Input<Inputs.ModelPackageTransformInputArgs> TransformInput { get; set; } = null!;

        [Input("transformOutput", required: true)]
        public Input<Inputs.ModelPackageTransformOutputArgs> TransformOutput { get; set; } = null!;

        [Input("transformResources", required: true)]
        public Input<Inputs.ModelPackageTransformResourcesArgs> TransformResources { get; set; } = null!;

        public ModelPackageTransformJobDefinitionArgs()
        {
        }
    }
}
