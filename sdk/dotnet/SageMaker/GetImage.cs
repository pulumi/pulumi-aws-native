// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SageMaker
{
    public static class GetImage
    {
        /// <summary>
        /// Resource Type definition for AWS::SageMaker::Image
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("aws-native:sagemaker:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::SageMaker::Image
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetImageResult>("aws-native:sagemaker:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : Pulumi.InvokeArgs
    {
        [Input("imageArn")]
        public string? ImageArn { get; set; }

        public GetImageArgs()
        {
        }
    }

    public sealed class GetImageInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("imageArn")]
        public Input<string>? ImageArn { get; set; }

        public GetImageInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetImageResult
    {
        public readonly string? ImageArn;
        public readonly string? ImageDescription;
        public readonly string? ImageDisplayName;
        public readonly string? ImageRoleArn;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ImageTag> Tags;

        [OutputConstructor]
        private GetImageResult(
            string? imageArn,

            string? imageDescription,

            string? imageDisplayName,

            string? imageRoleArn,

            ImmutableArray<Outputs.ImageTag> tags)
        {
            ImageArn = imageArn;
            ImageDescription = imageDescription;
            ImageDisplayName = imageDisplayName;
            ImageRoleArn = imageRoleArn;
            Tags = tags;
        }
    }
}
