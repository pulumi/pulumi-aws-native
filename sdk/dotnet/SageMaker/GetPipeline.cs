// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SageMaker
{
    public static class GetPipeline
    {
        /// <summary>
        /// Resource Type definition for AWS::SageMaker::Pipeline
        /// </summary>
        public static Task<GetPipelineResult> InvokeAsync(GetPipelineArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPipelineResult>("aws-native:sagemaker:getPipeline", args ?? new GetPipelineArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::SageMaker::Pipeline
        /// </summary>
        public static Output<GetPipelineResult> Invoke(GetPipelineInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPipelineResult>("aws-native:sagemaker:getPipeline", args ?? new GetPipelineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPipelineArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Pipeline.
        /// </summary>
        [Input("pipelineName", required: true)]
        public string PipelineName { get; set; } = null!;

        public GetPipelineArgs()
        {
        }
    }

    public sealed class GetPipelineInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Pipeline.
        /// </summary>
        [Input("pipelineName", required: true)]
        public Input<string> PipelineName { get; set; } = null!;

        public GetPipelineInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPipelineResult
    {
        public readonly Outputs.ParallelismConfigurationProperties? ParallelismConfiguration;
        public readonly object? PipelineDefinition;
        /// <summary>
        /// The description of the Pipeline.
        /// </summary>
        public readonly string? PipelineDescription;
        /// <summary>
        /// The display name of the Pipeline.
        /// </summary>
        public readonly string? PipelineDisplayName;
        /// <summary>
        /// Role Arn
        /// </summary>
        public readonly string? RoleArn;
        public readonly ImmutableArray<Outputs.PipelineTag> Tags;

        [OutputConstructor]
        private GetPipelineResult(
            Outputs.ParallelismConfigurationProperties? parallelismConfiguration,

            object? pipelineDefinition,

            string? pipelineDescription,

            string? pipelineDisplayName,

            string? roleArn,

            ImmutableArray<Outputs.PipelineTag> tags)
        {
            ParallelismConfiguration = parallelismConfiguration;
            PipelineDefinition = pipelineDefinition;
            PipelineDescription = pipelineDescription;
            PipelineDisplayName = pipelineDisplayName;
            RoleArn = roleArn;
            Tags = tags;
        }
    }
}
