// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SageMaker.Outputs
{

    /// <summary>
    /// Defines the monitoring job.
    /// </summary>
    [OutputType]
    public sealed class MonitoringScheduleMonitoringJobDefinition
    {
        /// <summary>
        /// Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
        /// </summary>
        public readonly Outputs.MonitoringScheduleBaselineConfig? BaselineConfig;
        /// <summary>
        /// Sets the environment variables in the Docker container
        /// </summary>
        public readonly object? Environment;
        /// <summary>
        /// Container image configuration object for the monitoring job.
        /// </summary>
        public readonly Outputs.MonitoringScheduleMonitoringAppSpecification MonitoringAppSpecification;
        /// <summary>
        /// The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker Endpoint.
        /// </summary>
        public readonly ImmutableArray<Outputs.MonitoringScheduleMonitoringInput> MonitoringInputs;
        /// <summary>
        /// The output configuration for monitoring jobs.
        /// </summary>
        public readonly Outputs.MonitoringScheduleMonitoringOutputConfig MonitoringOutputConfig;
        /// <summary>
        /// Identifies the resources to deploy for a monitoring job.
        /// </summary>
        public readonly Outputs.MonitoringScheduleMonitoringResources MonitoringResources;
        /// <summary>
        /// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        /// </summary>
        public readonly Outputs.MonitoringScheduleNetworkConfig? NetworkConfig;
        /// <summary>
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        /// </summary>
        public readonly string RoleArn;
        /// <summary>
        /// Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
        /// 
        /// To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
        /// 
        /// The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
        /// 
        /// &gt; The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
        /// </summary>
        public readonly Outputs.MonitoringScheduleStoppingCondition? StoppingCondition;

        [OutputConstructor]
        private MonitoringScheduleMonitoringJobDefinition(
            Outputs.MonitoringScheduleBaselineConfig? baselineConfig,

            object? environment,

            Outputs.MonitoringScheduleMonitoringAppSpecification monitoringAppSpecification,

            ImmutableArray<Outputs.MonitoringScheduleMonitoringInput> monitoringInputs,

            Outputs.MonitoringScheduleMonitoringOutputConfig monitoringOutputConfig,

            Outputs.MonitoringScheduleMonitoringResources monitoringResources,

            Outputs.MonitoringScheduleNetworkConfig? networkConfig,

            string roleArn,

            Outputs.MonitoringScheduleStoppingCondition? stoppingCondition)
        {
            BaselineConfig = baselineConfig;
            Environment = environment;
            MonitoringAppSpecification = monitoringAppSpecification;
            MonitoringInputs = monitoringInputs;
            MonitoringOutputConfig = monitoringOutputConfig;
            MonitoringResources = monitoringResources;
            NetworkConfig = networkConfig;
            RoleArn = roleArn;
            StoppingCondition = stoppingCondition;
        }
    }
}
