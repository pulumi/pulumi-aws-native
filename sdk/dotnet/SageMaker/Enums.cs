// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.SageMaker
{
    /// <summary>
    /// The instance type that the image version runs on.
    /// </summary>
    [EnumType]
    public readonly struct AppResourceSpecInstanceType : IEquatable<AppResourceSpecInstanceType>
    {
        private readonly string _value;

        private AppResourceSpecInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppResourceSpecInstanceType System { get; } = new AppResourceSpecInstanceType("system");
        public static AppResourceSpecInstanceType MlT3Micro { get; } = new AppResourceSpecInstanceType("ml.t3.micro");
        public static AppResourceSpecInstanceType MlT3Small { get; } = new AppResourceSpecInstanceType("ml.t3.small");
        public static AppResourceSpecInstanceType MlT3Medium { get; } = new AppResourceSpecInstanceType("ml.t3.medium");
        public static AppResourceSpecInstanceType MlT3Large { get; } = new AppResourceSpecInstanceType("ml.t3.large");
        public static AppResourceSpecInstanceType MlT3Xlarge { get; } = new AppResourceSpecInstanceType("ml.t3.xlarge");
        public static AppResourceSpecInstanceType MlT32xlarge { get; } = new AppResourceSpecInstanceType("ml.t3.2xlarge");
        public static AppResourceSpecInstanceType MlM5Large { get; } = new AppResourceSpecInstanceType("ml.m5.large");
        public static AppResourceSpecInstanceType MlM5Xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.xlarge");
        public static AppResourceSpecInstanceType MlM52xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.2xlarge");
        public static AppResourceSpecInstanceType MlM54xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.4xlarge");
        public static AppResourceSpecInstanceType MlM58xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.8xlarge");
        public static AppResourceSpecInstanceType MlM512xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.12xlarge");
        public static AppResourceSpecInstanceType MlM516xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.16xlarge");
        public static AppResourceSpecInstanceType MlM524xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.24xlarge");
        public static AppResourceSpecInstanceType MlC5Large { get; } = new AppResourceSpecInstanceType("ml.c5.large");
        public static AppResourceSpecInstanceType MlC5Xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.xlarge");
        public static AppResourceSpecInstanceType MlC52xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.2xlarge");
        public static AppResourceSpecInstanceType MlC54xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.4xlarge");
        public static AppResourceSpecInstanceType MlC59xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.9xlarge");
        public static AppResourceSpecInstanceType MlC512xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.12xlarge");
        public static AppResourceSpecInstanceType MlC518xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.18xlarge");
        public static AppResourceSpecInstanceType MlC524xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.24xlarge");
        public static AppResourceSpecInstanceType MlP32xlarge { get; } = new AppResourceSpecInstanceType("ml.p3.2xlarge");
        public static AppResourceSpecInstanceType MlP38xlarge { get; } = new AppResourceSpecInstanceType("ml.p3.8xlarge");
        public static AppResourceSpecInstanceType MlP316xlarge { get; } = new AppResourceSpecInstanceType("ml.p3.16xlarge");
        public static AppResourceSpecInstanceType MlG4dnXlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.xlarge");
        public static AppResourceSpecInstanceType MlG4dn2xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.2xlarge");
        public static AppResourceSpecInstanceType MlG4dn4xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.4xlarge");
        public static AppResourceSpecInstanceType MlG4dn8xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.8xlarge");
        public static AppResourceSpecInstanceType MlG4dn12xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.12xlarge");
        public static AppResourceSpecInstanceType MlG4dn16xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.16xlarge");
        public static AppResourceSpecInstanceType MlR5Large { get; } = new AppResourceSpecInstanceType("ml.r5.large");
        public static AppResourceSpecInstanceType MlR5Xlarge { get; } = new AppResourceSpecInstanceType("ml.r5.xlarge");
        public static AppResourceSpecInstanceType MlR52xlarge { get; } = new AppResourceSpecInstanceType("ml.r5.2xlarge");
        public static AppResourceSpecInstanceType MlR54xlarge { get; } = new AppResourceSpecInstanceType("ml.r5.4xlarge");
        public static AppResourceSpecInstanceType MlR58xlarge { get; } = new AppResourceSpecInstanceType("ml.r5.8xlarge");
        public static AppResourceSpecInstanceType MlR512xlarge { get; } = new AppResourceSpecInstanceType("ml.r5.12xlarge");
        public static AppResourceSpecInstanceType MlR516xlarge { get; } = new AppResourceSpecInstanceType("ml.r5.16xlarge");
        public static AppResourceSpecInstanceType MlR524xlarge { get; } = new AppResourceSpecInstanceType("ml.r5.24xlarge");
        public static AppResourceSpecInstanceType MlP3dn24xlarge { get; } = new AppResourceSpecInstanceType("ml.p3dn.24xlarge");
        public static AppResourceSpecInstanceType MlM5dLarge { get; } = new AppResourceSpecInstanceType("ml.m5d.large");
        public static AppResourceSpecInstanceType MlM5dXlarge { get; } = new AppResourceSpecInstanceType("ml.m5d.xlarge");
        public static AppResourceSpecInstanceType MlM5d2xlarge { get; } = new AppResourceSpecInstanceType("ml.m5d.2xlarge");
        public static AppResourceSpecInstanceType MlM5d4xlarge { get; } = new AppResourceSpecInstanceType("ml.m5d.4xlarge");
        public static AppResourceSpecInstanceType MlM5d8xlarge { get; } = new AppResourceSpecInstanceType("ml.m5d.8xlarge");
        public static AppResourceSpecInstanceType MlM5d12xlarge { get; } = new AppResourceSpecInstanceType("ml.m5d.12xlarge");
        public static AppResourceSpecInstanceType MlM5d16xlarge { get; } = new AppResourceSpecInstanceType("ml.m5d.16xlarge");
        public static AppResourceSpecInstanceType MlM5d24xlarge { get; } = new AppResourceSpecInstanceType("ml.m5d.24xlarge");
        public static AppResourceSpecInstanceType MlG5Xlarge { get; } = new AppResourceSpecInstanceType("ml.g5.xlarge");
        public static AppResourceSpecInstanceType MlG52xlarge { get; } = new AppResourceSpecInstanceType("ml.g5.2xlarge");
        public static AppResourceSpecInstanceType MlG54xlarge { get; } = new AppResourceSpecInstanceType("ml.g5.4xlarge");
        public static AppResourceSpecInstanceType MlG58xlarge { get; } = new AppResourceSpecInstanceType("ml.g5.8xlarge");
        public static AppResourceSpecInstanceType MlG512xlarge { get; } = new AppResourceSpecInstanceType("ml.g5.12xlarge");
        public static AppResourceSpecInstanceType MlG516xlarge { get; } = new AppResourceSpecInstanceType("ml.g5.16xlarge");
        public static AppResourceSpecInstanceType MlG524xlarge { get; } = new AppResourceSpecInstanceType("ml.g5.24xlarge");
        public static AppResourceSpecInstanceType MlG548xlarge { get; } = new AppResourceSpecInstanceType("ml.g5.48xlarge");
        public static AppResourceSpecInstanceType MlP4d24xlarge { get; } = new AppResourceSpecInstanceType("ml.p4d.24xlarge");
        public static AppResourceSpecInstanceType MlP4de24xlarge { get; } = new AppResourceSpecInstanceType("ml.p4de.24xlarge");
        public static AppResourceSpecInstanceType MlGeospatialInteractive { get; } = new AppResourceSpecInstanceType("ml.geospatial.interactive");
        public static AppResourceSpecInstanceType MlTrn12xlarge { get; } = new AppResourceSpecInstanceType("ml.trn1.2xlarge");
        public static AppResourceSpecInstanceType MlTrn132xlarge { get; } = new AppResourceSpecInstanceType("ml.trn1.32xlarge");
        public static AppResourceSpecInstanceType MlTrn1n32xlarge { get; } = new AppResourceSpecInstanceType("ml.trn1n.32xlarge");

        public static bool operator ==(AppResourceSpecInstanceType left, AppResourceSpecInstanceType right) => left.Equals(right);
        public static bool operator !=(AppResourceSpecInstanceType left, AppResourceSpecInstanceType right) => !left.Equals(right);

        public static explicit operator string(AppResourceSpecInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppResourceSpecInstanceType other && Equals(other);
        public bool Equals(AppResourceSpecInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of app.
    /// </summary>
    [EnumType]
    public readonly struct AppType : IEquatable<AppType>
    {
        private readonly string _value;

        private AppType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppType JupyterServer { get; } = new AppType("JupyterServer");
        public static AppType KernelGateway { get; } = new AppType("KernelGateway");
        public static AppType RStudioServerPro { get; } = new AppType("RStudioServerPro");
        public static AppType RSessionGateway { get; } = new AppType("RSessionGateway");
        public static AppType Canvas { get; } = new AppType("Canvas");

        public static bool operator ==(AppType left, AppType right) => left.Equals(right);
        public static bool operator !=(AppType left, AppType right) => !left.Equals(right);

        public static explicit operator string(AppType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppType other && Equals(other);
        public bool Equals(AppType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct DataQualityJobDefinitionBatchTransformInputS3DataDistributionType : IEquatable<DataQualityJobDefinitionBatchTransformInputS3DataDistributionType>
    {
        private readonly string _value;

        private DataQualityJobDefinitionBatchTransformInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataQualityJobDefinitionBatchTransformInputS3DataDistributionType FullyReplicated { get; } = new DataQualityJobDefinitionBatchTransformInputS3DataDistributionType("FullyReplicated");
        public static DataQualityJobDefinitionBatchTransformInputS3DataDistributionType ShardedByS3Key { get; } = new DataQualityJobDefinitionBatchTransformInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(DataQualityJobDefinitionBatchTransformInputS3DataDistributionType left, DataQualityJobDefinitionBatchTransformInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(DataQualityJobDefinitionBatchTransformInputS3DataDistributionType left, DataQualityJobDefinitionBatchTransformInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(DataQualityJobDefinitionBatchTransformInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataQualityJobDefinitionBatchTransformInputS3DataDistributionType other && Equals(other);
        public bool Equals(DataQualityJobDefinitionBatchTransformInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct DataQualityJobDefinitionBatchTransformInputS3InputMode : IEquatable<DataQualityJobDefinitionBatchTransformInputS3InputMode>
    {
        private readonly string _value;

        private DataQualityJobDefinitionBatchTransformInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataQualityJobDefinitionBatchTransformInputS3InputMode Pipe { get; } = new DataQualityJobDefinitionBatchTransformInputS3InputMode("Pipe");
        public static DataQualityJobDefinitionBatchTransformInputS3InputMode File { get; } = new DataQualityJobDefinitionBatchTransformInputS3InputMode("File");

        public static bool operator ==(DataQualityJobDefinitionBatchTransformInputS3InputMode left, DataQualityJobDefinitionBatchTransformInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(DataQualityJobDefinitionBatchTransformInputS3InputMode left, DataQualityJobDefinitionBatchTransformInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(DataQualityJobDefinitionBatchTransformInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataQualityJobDefinitionBatchTransformInputS3InputMode other && Equals(other);
        public bool Equals(DataQualityJobDefinitionBatchTransformInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct DataQualityJobDefinitionEndpointInputS3DataDistributionType : IEquatable<DataQualityJobDefinitionEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private DataQualityJobDefinitionEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataQualityJobDefinitionEndpointInputS3DataDistributionType FullyReplicated { get; } = new DataQualityJobDefinitionEndpointInputS3DataDistributionType("FullyReplicated");
        public static DataQualityJobDefinitionEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new DataQualityJobDefinitionEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(DataQualityJobDefinitionEndpointInputS3DataDistributionType left, DataQualityJobDefinitionEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(DataQualityJobDefinitionEndpointInputS3DataDistributionType left, DataQualityJobDefinitionEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(DataQualityJobDefinitionEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataQualityJobDefinitionEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(DataQualityJobDefinitionEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct DataQualityJobDefinitionEndpointInputS3InputMode : IEquatable<DataQualityJobDefinitionEndpointInputS3InputMode>
    {
        private readonly string _value;

        private DataQualityJobDefinitionEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataQualityJobDefinitionEndpointInputS3InputMode Pipe { get; } = new DataQualityJobDefinitionEndpointInputS3InputMode("Pipe");
        public static DataQualityJobDefinitionEndpointInputS3InputMode File { get; } = new DataQualityJobDefinitionEndpointInputS3InputMode("File");

        public static bool operator ==(DataQualityJobDefinitionEndpointInputS3InputMode left, DataQualityJobDefinitionEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(DataQualityJobDefinitionEndpointInputS3InputMode left, DataQualityJobDefinitionEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(DataQualityJobDefinitionEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataQualityJobDefinitionEndpointInputS3InputMode other && Equals(other);
        public bool Equals(DataQualityJobDefinitionEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct DataQualityJobDefinitionS3OutputS3UploadMode : IEquatable<DataQualityJobDefinitionS3OutputS3UploadMode>
    {
        private readonly string _value;

        private DataQualityJobDefinitionS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataQualityJobDefinitionS3OutputS3UploadMode Continuous { get; } = new DataQualityJobDefinitionS3OutputS3UploadMode("Continuous");
        public static DataQualityJobDefinitionS3OutputS3UploadMode EndOfJob { get; } = new DataQualityJobDefinitionS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(DataQualityJobDefinitionS3OutputS3UploadMode left, DataQualityJobDefinitionS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(DataQualityJobDefinitionS3OutputS3UploadMode left, DataQualityJobDefinitionS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(DataQualityJobDefinitionS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataQualityJobDefinitionS3OutputS3UploadMode other && Equals(other);
        public bool Equals(DataQualityJobDefinitionS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
    /// </summary>
    [EnumType]
    public readonly struct DomainAppNetworkAccessType : IEquatable<DomainAppNetworkAccessType>
    {
        private readonly string _value;

        private DomainAppNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainAppNetworkAccessType PublicInternetOnly { get; } = new DomainAppNetworkAccessType("PublicInternetOnly");
        public static DomainAppNetworkAccessType VpcOnly { get; } = new DomainAppNetworkAccessType("VpcOnly");

        public static bool operator ==(DomainAppNetworkAccessType left, DomainAppNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(DomainAppNetworkAccessType left, DomainAppNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(DomainAppNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainAppNetworkAccessType other && Equals(other);
        public bool Equals(DomainAppNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required when CreateDomain.AppNetworkAccessType is VPCOnly and DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided.
    /// </summary>
    [EnumType]
    public readonly struct DomainAppSecurityGroupManagement : IEquatable<DomainAppSecurityGroupManagement>
    {
        private readonly string _value;

        private DomainAppSecurityGroupManagement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainAppSecurityGroupManagement Service { get; } = new DomainAppSecurityGroupManagement("Service");
        public static DomainAppSecurityGroupManagement Customer { get; } = new DomainAppSecurityGroupManagement("Customer");

        public static bool operator ==(DomainAppSecurityGroupManagement left, DomainAppSecurityGroupManagement right) => left.Equals(right);
        public static bool operator !=(DomainAppSecurityGroupManagement left, DomainAppSecurityGroupManagement right) => !left.Equals(right);

        public static explicit operator string(DomainAppSecurityGroupManagement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainAppSecurityGroupManagement other && Equals(other);
        public bool Equals(DomainAppSecurityGroupManagement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode of authentication that members use to access the domain.
    /// </summary>
    [EnumType]
    public readonly struct DomainAuthMode : IEquatable<DomainAuthMode>
    {
        private readonly string _value;

        private DomainAuthMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainAuthMode Sso { get; } = new DomainAuthMode("SSO");
        public static DomainAuthMode Iam { get; } = new DomainAuthMode("IAM");

        public static bool operator ==(DomainAuthMode left, DomainAuthMode right) => left.Equals(right);
        public static bool operator !=(DomainAuthMode left, DomainAuthMode right) => !left.Equals(right);

        public static explicit operator string(DomainAuthMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainAuthMode other && Equals(other);
        public bool Equals(DomainAuthMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the current user has access to the RStudioServerPro app.
    /// </summary>
    [EnumType]
    public readonly struct DomainRStudioServerProAppSettingsAccessStatus : IEquatable<DomainRStudioServerProAppSettingsAccessStatus>
    {
        private readonly string _value;

        private DomainRStudioServerProAppSettingsAccessStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainRStudioServerProAppSettingsAccessStatus Enabled { get; } = new DomainRStudioServerProAppSettingsAccessStatus("ENABLED");
        public static DomainRStudioServerProAppSettingsAccessStatus Disabled { get; } = new DomainRStudioServerProAppSettingsAccessStatus("DISABLED");

        public static bool operator ==(DomainRStudioServerProAppSettingsAccessStatus left, DomainRStudioServerProAppSettingsAccessStatus right) => left.Equals(right);
        public static bool operator !=(DomainRStudioServerProAppSettingsAccessStatus left, DomainRStudioServerProAppSettingsAccessStatus right) => !left.Equals(right);

        public static explicit operator string(DomainRStudioServerProAppSettingsAccessStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainRStudioServerProAppSettingsAccessStatus other && Equals(other);
        public bool Equals(DomainRStudioServerProAppSettingsAccessStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
    /// </summary>
    [EnumType]
    public readonly struct DomainRStudioServerProAppSettingsUserGroup : IEquatable<DomainRStudioServerProAppSettingsUserGroup>
    {
        private readonly string _value;

        private DomainRStudioServerProAppSettingsUserGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainRStudioServerProAppSettingsUserGroup RStudioAdmin { get; } = new DomainRStudioServerProAppSettingsUserGroup("R_STUDIO_ADMIN");
        public static DomainRStudioServerProAppSettingsUserGroup RStudioUser { get; } = new DomainRStudioServerProAppSettingsUserGroup("R_STUDIO_USER");

        public static bool operator ==(DomainRStudioServerProAppSettingsUserGroup left, DomainRStudioServerProAppSettingsUserGroup right) => left.Equals(right);
        public static bool operator !=(DomainRStudioServerProAppSettingsUserGroup left, DomainRStudioServerProAppSettingsUserGroup right) => !left.Equals(right);

        public static explicit operator string(DomainRStudioServerProAppSettingsUserGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainRStudioServerProAppSettingsUserGroup other && Equals(other);
        public bool Equals(DomainRStudioServerProAppSettingsUserGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type that the image version runs on.
    /// </summary>
    [EnumType]
    public readonly struct DomainResourceSpecInstanceType : IEquatable<DomainResourceSpecInstanceType>
    {
        private readonly string _value;

        private DomainResourceSpecInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainResourceSpecInstanceType System { get; } = new DomainResourceSpecInstanceType("system");
        public static DomainResourceSpecInstanceType MlT3Micro { get; } = new DomainResourceSpecInstanceType("ml.t3.micro");
        public static DomainResourceSpecInstanceType MlT3Small { get; } = new DomainResourceSpecInstanceType("ml.t3.small");
        public static DomainResourceSpecInstanceType MlT3Medium { get; } = new DomainResourceSpecInstanceType("ml.t3.medium");
        public static DomainResourceSpecInstanceType MlT3Large { get; } = new DomainResourceSpecInstanceType("ml.t3.large");
        public static DomainResourceSpecInstanceType MlT3Xlarge { get; } = new DomainResourceSpecInstanceType("ml.t3.xlarge");
        public static DomainResourceSpecInstanceType MlT32xlarge { get; } = new DomainResourceSpecInstanceType("ml.t3.2xlarge");
        public static DomainResourceSpecInstanceType MlM5Large { get; } = new DomainResourceSpecInstanceType("ml.m5.large");
        public static DomainResourceSpecInstanceType MlM5Xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.xlarge");
        public static DomainResourceSpecInstanceType MlM52xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.2xlarge");
        public static DomainResourceSpecInstanceType MlM54xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.4xlarge");
        public static DomainResourceSpecInstanceType MlM58xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.8xlarge");
        public static DomainResourceSpecInstanceType MlM512xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.12xlarge");
        public static DomainResourceSpecInstanceType MlM516xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.16xlarge");
        public static DomainResourceSpecInstanceType MlM524xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.24xlarge");
        public static DomainResourceSpecInstanceType MlC5Large { get; } = new DomainResourceSpecInstanceType("ml.c5.large");
        public static DomainResourceSpecInstanceType MlC5Xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.xlarge");
        public static DomainResourceSpecInstanceType MlC52xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.2xlarge");
        public static DomainResourceSpecInstanceType MlC54xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.4xlarge");
        public static DomainResourceSpecInstanceType MlC59xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.9xlarge");
        public static DomainResourceSpecInstanceType MlC512xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.12xlarge");
        public static DomainResourceSpecInstanceType MlC518xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.18xlarge");
        public static DomainResourceSpecInstanceType MlC524xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.24xlarge");
        public static DomainResourceSpecInstanceType MlP32xlarge { get; } = new DomainResourceSpecInstanceType("ml.p3.2xlarge");
        public static DomainResourceSpecInstanceType MlP38xlarge { get; } = new DomainResourceSpecInstanceType("ml.p3.8xlarge");
        public static DomainResourceSpecInstanceType MlP316xlarge { get; } = new DomainResourceSpecInstanceType("ml.p3.16xlarge");
        public static DomainResourceSpecInstanceType MlG4dnXlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.xlarge");
        public static DomainResourceSpecInstanceType MlG4dn2xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.2xlarge");
        public static DomainResourceSpecInstanceType MlG4dn4xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.4xlarge");
        public static DomainResourceSpecInstanceType MlG4dn8xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.8xlarge");
        public static DomainResourceSpecInstanceType MlG4dn12xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.12xlarge");
        public static DomainResourceSpecInstanceType MlG4dn16xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.16xlarge");
        public static DomainResourceSpecInstanceType MlR5Large { get; } = new DomainResourceSpecInstanceType("ml.r5.large");
        public static DomainResourceSpecInstanceType MlR5Xlarge { get; } = new DomainResourceSpecInstanceType("ml.r5.xlarge");
        public static DomainResourceSpecInstanceType MlR52xlarge { get; } = new DomainResourceSpecInstanceType("ml.r5.2xlarge");
        public static DomainResourceSpecInstanceType MlR54xlarge { get; } = new DomainResourceSpecInstanceType("ml.r5.4xlarge");
        public static DomainResourceSpecInstanceType MlR58xlarge { get; } = new DomainResourceSpecInstanceType("ml.r5.8xlarge");
        public static DomainResourceSpecInstanceType MlR512xlarge { get; } = new DomainResourceSpecInstanceType("ml.r5.12xlarge");
        public static DomainResourceSpecInstanceType MlR516xlarge { get; } = new DomainResourceSpecInstanceType("ml.r5.16xlarge");
        public static DomainResourceSpecInstanceType MlR524xlarge { get; } = new DomainResourceSpecInstanceType("ml.r5.24xlarge");
        public static DomainResourceSpecInstanceType MlP3dn24xlarge { get; } = new DomainResourceSpecInstanceType("ml.p3dn.24xlarge");
        public static DomainResourceSpecInstanceType MlM5dLarge { get; } = new DomainResourceSpecInstanceType("ml.m5d.large");
        public static DomainResourceSpecInstanceType MlM5dXlarge { get; } = new DomainResourceSpecInstanceType("ml.m5d.xlarge");
        public static DomainResourceSpecInstanceType MlM5d2xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5d.2xlarge");
        public static DomainResourceSpecInstanceType MlM5d4xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5d.4xlarge");
        public static DomainResourceSpecInstanceType MlM5d8xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5d.8xlarge");
        public static DomainResourceSpecInstanceType MlM5d12xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5d.12xlarge");
        public static DomainResourceSpecInstanceType MlM5d16xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5d.16xlarge");
        public static DomainResourceSpecInstanceType MlM5d24xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5d.24xlarge");
        public static DomainResourceSpecInstanceType MlG5Xlarge { get; } = new DomainResourceSpecInstanceType("ml.g5.xlarge");
        public static DomainResourceSpecInstanceType MlG52xlarge { get; } = new DomainResourceSpecInstanceType("ml.g5.2xlarge");
        public static DomainResourceSpecInstanceType MlG54xlarge { get; } = new DomainResourceSpecInstanceType("ml.g5.4xlarge");
        public static DomainResourceSpecInstanceType MlG58xlarge { get; } = new DomainResourceSpecInstanceType("ml.g5.8xlarge");
        public static DomainResourceSpecInstanceType MlG512xlarge { get; } = new DomainResourceSpecInstanceType("ml.g5.12xlarge");
        public static DomainResourceSpecInstanceType MlG516xlarge { get; } = new DomainResourceSpecInstanceType("ml.g5.16xlarge");
        public static DomainResourceSpecInstanceType MlG524xlarge { get; } = new DomainResourceSpecInstanceType("ml.g5.24xlarge");
        public static DomainResourceSpecInstanceType MlG548xlarge { get; } = new DomainResourceSpecInstanceType("ml.g5.48xlarge");
        public static DomainResourceSpecInstanceType MlP4d24xlarge { get; } = new DomainResourceSpecInstanceType("ml.p4d.24xlarge");
        public static DomainResourceSpecInstanceType MlP4de24xlarge { get; } = new DomainResourceSpecInstanceType("ml.p4de.24xlarge");
        public static DomainResourceSpecInstanceType MlGeospatialInteractive { get; } = new DomainResourceSpecInstanceType("ml.geospatial.interactive");
        public static DomainResourceSpecInstanceType MlTrn12xlarge { get; } = new DomainResourceSpecInstanceType("ml.trn1.2xlarge");
        public static DomainResourceSpecInstanceType MlTrn132xlarge { get; } = new DomainResourceSpecInstanceType("ml.trn1.32xlarge");
        public static DomainResourceSpecInstanceType MlTrn1n32xlarge { get; } = new DomainResourceSpecInstanceType("ml.trn1n.32xlarge");

        public static bool operator ==(DomainResourceSpecInstanceType left, DomainResourceSpecInstanceType right) => left.Equals(right);
        public static bool operator !=(DomainResourceSpecInstanceType left, DomainResourceSpecInstanceType right) => !left.Equals(right);

        public static explicit operator string(DomainResourceSpecInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainResourceSpecInstanceType other && Equals(other);
        public bool Equals(DomainResourceSpecInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
    /// </summary>
    [EnumType]
    public readonly struct DomainSharingSettingsNotebookOutputOption : IEquatable<DomainSharingSettingsNotebookOutputOption>
    {
        private readonly string _value;

        private DomainSharingSettingsNotebookOutputOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainSharingSettingsNotebookOutputOption Allowed { get; } = new DomainSharingSettingsNotebookOutputOption("Allowed");
        public static DomainSharingSettingsNotebookOutputOption Disabled { get; } = new DomainSharingSettingsNotebookOutputOption("Disabled");

        public static bool operator ==(DomainSharingSettingsNotebookOutputOption left, DomainSharingSettingsNotebookOutputOption right) => left.Equals(right);
        public static bool operator !=(DomainSharingSettingsNotebookOutputOption left, DomainSharingSettingsNotebookOutputOption right) => !left.Equals(right);

        public static explicit operator string(DomainSharingSettingsNotebookOutputOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainSharingSettingsNotebookOutputOption other && Equals(other);
        public bool Equals(DomainSharingSettingsNotebookOutputOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the Studio experience is available to users. If not, users cannot access Studio.
    /// </summary>
    [EnumType]
    public readonly struct DomainUserSettingsStudioWebPortal : IEquatable<DomainUserSettingsStudioWebPortal>
    {
        private readonly string _value;

        private DomainUserSettingsStudioWebPortal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainUserSettingsStudioWebPortal Enabled { get; } = new DomainUserSettingsStudioWebPortal("ENABLED");
        public static DomainUserSettingsStudioWebPortal Disabled { get; } = new DomainUserSettingsStudioWebPortal("DISABLED");

        public static bool operator ==(DomainUserSettingsStudioWebPortal left, DomainUserSettingsStudioWebPortal right) => left.Equals(right);
        public static bool operator !=(DomainUserSettingsStudioWebPortal left, DomainUserSettingsStudioWebPortal right) => !left.Equals(right);

        public static explicit operator string(DomainUserSettingsStudioWebPortal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainUserSettingsStudioWebPortal other && Equals(other);
        public bool Equals(DomainUserSettingsStudioWebPortal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FeatureGroupFeatureDefinitionFeatureType : IEquatable<FeatureGroupFeatureDefinitionFeatureType>
    {
        private readonly string _value;

        private FeatureGroupFeatureDefinitionFeatureType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FeatureGroupFeatureDefinitionFeatureType Integral { get; } = new FeatureGroupFeatureDefinitionFeatureType("Integral");
        public static FeatureGroupFeatureDefinitionFeatureType Fractional { get; } = new FeatureGroupFeatureDefinitionFeatureType("Fractional");
        public static FeatureGroupFeatureDefinitionFeatureType String { get; } = new FeatureGroupFeatureDefinitionFeatureType("String");

        public static bool operator ==(FeatureGroupFeatureDefinitionFeatureType left, FeatureGroupFeatureDefinitionFeatureType right) => left.Equals(right);
        public static bool operator !=(FeatureGroupFeatureDefinitionFeatureType left, FeatureGroupFeatureDefinitionFeatureType right) => !left.Equals(right);

        public static explicit operator string(FeatureGroupFeatureDefinitionFeatureType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeatureGroupFeatureDefinitionFeatureType other && Equals(other);
        public bool Equals(FeatureGroupFeatureDefinitionFeatureType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FeatureGroupStorageType : IEquatable<FeatureGroupStorageType>
    {
        private readonly string _value;

        private FeatureGroupStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FeatureGroupStorageType Standard { get; } = new FeatureGroupStorageType("Standard");
        public static FeatureGroupStorageType InMemory { get; } = new FeatureGroupStorageType("InMemory");

        public static bool operator ==(FeatureGroupStorageType left, FeatureGroupStorageType right) => left.Equals(right);
        public static bool operator !=(FeatureGroupStorageType left, FeatureGroupStorageType right) => !left.Equals(right);

        public static explicit operator string(FeatureGroupStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeatureGroupStorageType other && Equals(other);
        public bool Equals(FeatureGroupStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format for the offline store feature group. Iceberg is the optimal format for feature groups shared between offline and online stores.
    /// </summary>
    [EnumType]
    public readonly struct FeatureGroupTableFormat : IEquatable<FeatureGroupTableFormat>
    {
        private readonly string _value;

        private FeatureGroupTableFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FeatureGroupTableFormat Iceberg { get; } = new FeatureGroupTableFormat("Iceberg");
        public static FeatureGroupTableFormat Glue { get; } = new FeatureGroupTableFormat("Glue");

        public static bool operator ==(FeatureGroupTableFormat left, FeatureGroupTableFormat right) => left.Equals(right);
        public static bool operator !=(FeatureGroupTableFormat left, FeatureGroupTableFormat right) => !left.Equals(right);

        public static explicit operator string(FeatureGroupTableFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeatureGroupTableFormat other && Equals(other);
        public bool Equals(FeatureGroupTableFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Throughput mode configuration of the feature group
    /// </summary>
    [EnumType]
    public readonly struct FeatureGroupThroughputMode : IEquatable<FeatureGroupThroughputMode>
    {
        private readonly string _value;

        private FeatureGroupThroughputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FeatureGroupThroughputMode OnDemand { get; } = new FeatureGroupThroughputMode("OnDemand");
        public static FeatureGroupThroughputMode Provisioned { get; } = new FeatureGroupThroughputMode("Provisioned");

        public static bool operator ==(FeatureGroupThroughputMode left, FeatureGroupThroughputMode right) => left.Equals(right);
        public static bool operator !=(FeatureGroupThroughputMode left, FeatureGroupThroughputMode right) => !left.Equals(right);

        public static explicit operator string(FeatureGroupThroughputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeatureGroupThroughputMode other && Equals(other);
        public bool Equals(FeatureGroupThroughputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates SageMaker job type compatibility.
    /// </summary>
    [EnumType]
    public readonly struct ImageVersionJobType : IEquatable<ImageVersionJobType>
    {
        private readonly string _value;

        private ImageVersionJobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageVersionJobType Training { get; } = new ImageVersionJobType("TRAINING");
        public static ImageVersionJobType Inference { get; } = new ImageVersionJobType("INFERENCE");
        public static ImageVersionJobType NotebookKernel { get; } = new ImageVersionJobType("NOTEBOOK_KERNEL");

        public static bool operator ==(ImageVersionJobType left, ImageVersionJobType right) => left.Equals(right);
        public static bool operator !=(ImageVersionJobType left, ImageVersionJobType right) => !left.Equals(right);

        public static explicit operator string(ImageVersionJobType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageVersionJobType other && Equals(other);
        public bool Equals(ImageVersionJobType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates CPU or GPU compatibility.
    /// </summary>
    [EnumType]
    public readonly struct ImageVersionProcessor : IEquatable<ImageVersionProcessor>
    {
        private readonly string _value;

        private ImageVersionProcessor(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageVersionProcessor Cpu { get; } = new ImageVersionProcessor("CPU");
        public static ImageVersionProcessor Gpu { get; } = new ImageVersionProcessor("GPU");

        public static bool operator ==(ImageVersionProcessor left, ImageVersionProcessor right) => left.Equals(right);
        public static bool operator !=(ImageVersionProcessor left, ImageVersionProcessor right) => !left.Equals(right);

        public static explicit operator string(ImageVersionProcessor value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageVersionProcessor other && Equals(other);
        public bool Equals(ImageVersionProcessor other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The availability of the image version specified by the maintainer.
    /// </summary>
    [EnumType]
    public readonly struct ImageVersionVendorGuidance : IEquatable<ImageVersionVendorGuidance>
    {
        private readonly string _value;

        private ImageVersionVendorGuidance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ImageVersionVendorGuidance NotProvided { get; } = new ImageVersionVendorGuidance("NOT_PROVIDED");
        public static ImageVersionVendorGuidance Stable { get; } = new ImageVersionVendorGuidance("STABLE");
        public static ImageVersionVendorGuidance ToBeArchived { get; } = new ImageVersionVendorGuidance("TO_BE_ARCHIVED");
        public static ImageVersionVendorGuidance Archived { get; } = new ImageVersionVendorGuidance("ARCHIVED");

        public static bool operator ==(ImageVersionVendorGuidance left, ImageVersionVendorGuidance right) => left.Equals(right);
        public static bool operator !=(ImageVersionVendorGuidance left, ImageVersionVendorGuidance right) => !left.Equals(right);

        public static explicit operator string(ImageVersionVendorGuidance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ImageVersionVendorGuidance other && Equals(other);
        public bool Equals(ImageVersionVendorGuidance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct InferenceComponentStatus : IEquatable<InferenceComponentStatus>
    {
        private readonly string _value;

        private InferenceComponentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InferenceComponentStatus InService { get; } = new InferenceComponentStatus("InService");
        public static InferenceComponentStatus Creating { get; } = new InferenceComponentStatus("Creating");
        public static InferenceComponentStatus Updating { get; } = new InferenceComponentStatus("Updating");
        public static InferenceComponentStatus Failed { get; } = new InferenceComponentStatus("Failed");
        public static InferenceComponentStatus Deleting { get; } = new InferenceComponentStatus("Deleting");

        public static bool operator ==(InferenceComponentStatus left, InferenceComponentStatus right) => left.Equals(right);
        public static bool operator !=(InferenceComponentStatus left, InferenceComponentStatus right) => !left.Equals(right);

        public static explicit operator string(InferenceComponentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InferenceComponentStatus other && Equals(other);
        public bool Equals(InferenceComponentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The desired state of the experiment after starting or stopping operation.
    /// </summary>
    [EnumType]
    public readonly struct InferenceExperimentDesiredState : IEquatable<InferenceExperimentDesiredState>
    {
        private readonly string _value;

        private InferenceExperimentDesiredState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InferenceExperimentDesiredState Running { get; } = new InferenceExperimentDesiredState("Running");
        public static InferenceExperimentDesiredState Completed { get; } = new InferenceExperimentDesiredState("Completed");
        public static InferenceExperimentDesiredState Cancelled { get; } = new InferenceExperimentDesiredState("Cancelled");

        public static bool operator ==(InferenceExperimentDesiredState left, InferenceExperimentDesiredState right) => left.Equals(right);
        public static bool operator !=(InferenceExperimentDesiredState left, InferenceExperimentDesiredState right) => !left.Equals(right);

        public static explicit operator string(InferenceExperimentDesiredState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InferenceExperimentDesiredState other && Equals(other);
        public bool Equals(InferenceExperimentDesiredState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the endpoint. For possible values of the status of an endpoint.
    /// </summary>
    [EnumType]
    public readonly struct InferenceExperimentEndpointMetadataEndpointStatus : IEquatable<InferenceExperimentEndpointMetadataEndpointStatus>
    {
        private readonly string _value;

        private InferenceExperimentEndpointMetadataEndpointStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InferenceExperimentEndpointMetadataEndpointStatus Creating { get; } = new InferenceExperimentEndpointMetadataEndpointStatus("Creating");
        public static InferenceExperimentEndpointMetadataEndpointStatus Updating { get; } = new InferenceExperimentEndpointMetadataEndpointStatus("Updating");
        public static InferenceExperimentEndpointMetadataEndpointStatus SystemUpdating { get; } = new InferenceExperimentEndpointMetadataEndpointStatus("SystemUpdating");
        public static InferenceExperimentEndpointMetadataEndpointStatus RollingBack { get; } = new InferenceExperimentEndpointMetadataEndpointStatus("RollingBack");
        public static InferenceExperimentEndpointMetadataEndpointStatus InService { get; } = new InferenceExperimentEndpointMetadataEndpointStatus("InService");
        public static InferenceExperimentEndpointMetadataEndpointStatus OutOfService { get; } = new InferenceExperimentEndpointMetadataEndpointStatus("OutOfService");
        public static InferenceExperimentEndpointMetadataEndpointStatus Deleting { get; } = new InferenceExperimentEndpointMetadataEndpointStatus("Deleting");
        public static InferenceExperimentEndpointMetadataEndpointStatus Failed { get; } = new InferenceExperimentEndpointMetadataEndpointStatus("Failed");

        public static bool operator ==(InferenceExperimentEndpointMetadataEndpointStatus left, InferenceExperimentEndpointMetadataEndpointStatus right) => left.Equals(right);
        public static bool operator !=(InferenceExperimentEndpointMetadataEndpointStatus left, InferenceExperimentEndpointMetadataEndpointStatus right) => !left.Equals(right);

        public static explicit operator string(InferenceExperimentEndpointMetadataEndpointStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InferenceExperimentEndpointMetadataEndpointStatus other && Equals(other);
        public bool Equals(InferenceExperimentEndpointMetadataEndpointStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the inference experiment that you want to run.
    /// </summary>
    [EnumType]
    public readonly struct InferenceExperimentModelInfrastructureConfigInfrastructureType : IEquatable<InferenceExperimentModelInfrastructureConfigInfrastructureType>
    {
        private readonly string _value;

        private InferenceExperimentModelInfrastructureConfigInfrastructureType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InferenceExperimentModelInfrastructureConfigInfrastructureType RealTimeInference { get; } = new InferenceExperimentModelInfrastructureConfigInfrastructureType("RealTimeInference");

        public static bool operator ==(InferenceExperimentModelInfrastructureConfigInfrastructureType left, InferenceExperimentModelInfrastructureConfigInfrastructureType right) => left.Equals(right);
        public static bool operator !=(InferenceExperimentModelInfrastructureConfigInfrastructureType left, InferenceExperimentModelInfrastructureConfigInfrastructureType right) => !left.Equals(right);

        public static explicit operator string(InferenceExperimentModelInfrastructureConfigInfrastructureType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InferenceExperimentModelInfrastructureConfigInfrastructureType other && Equals(other);
        public bool Equals(InferenceExperimentModelInfrastructureConfigInfrastructureType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the inference experiment.
    /// </summary>
    [EnumType]
    public readonly struct InferenceExperimentStatus : IEquatable<InferenceExperimentStatus>
    {
        private readonly string _value;

        private InferenceExperimentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InferenceExperimentStatus Creating { get; } = new InferenceExperimentStatus("Creating");
        public static InferenceExperimentStatus Created { get; } = new InferenceExperimentStatus("Created");
        public static InferenceExperimentStatus Updating { get; } = new InferenceExperimentStatus("Updating");
        public static InferenceExperimentStatus Starting { get; } = new InferenceExperimentStatus("Starting");
        public static InferenceExperimentStatus Stopping { get; } = new InferenceExperimentStatus("Stopping");
        public static InferenceExperimentStatus Running { get; } = new InferenceExperimentStatus("Running");
        public static InferenceExperimentStatus Completed { get; } = new InferenceExperimentStatus("Completed");
        public static InferenceExperimentStatus Cancelled { get; } = new InferenceExperimentStatus("Cancelled");

        public static bool operator ==(InferenceExperimentStatus left, InferenceExperimentStatus right) => left.Equals(right);
        public static bool operator !=(InferenceExperimentStatus left, InferenceExperimentStatus right) => !left.Equals(right);

        public static explicit operator string(InferenceExperimentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InferenceExperimentStatus other && Equals(other);
        public bool Equals(InferenceExperimentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the inference experiment that you want to run.
    /// </summary>
    [EnumType]
    public readonly struct InferenceExperimentType : IEquatable<InferenceExperimentType>
    {
        private readonly string _value;

        private InferenceExperimentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InferenceExperimentType ShadowMode { get; } = new InferenceExperimentType("ShadowMode");

        public static bool operator ==(InferenceExperimentType left, InferenceExperimentType right) => left.Equals(right);
        public static bool operator !=(InferenceExperimentType left, InferenceExperimentType right) => !left.Equals(right);

        public static explicit operator string(InferenceExperimentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InferenceExperimentType other && Equals(other);
        public bool Equals(InferenceExperimentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType : IEquatable<ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType>
    {
        private readonly string _value;

        private ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType FullyReplicated { get; } = new ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType("FullyReplicated");
        public static ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType ShardedByS3Key { get; } = new ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType left, ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType left, ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType other && Equals(other);
        public bool Equals(ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct ModelBiasJobDefinitionBatchTransformInputS3InputMode : IEquatable<ModelBiasJobDefinitionBatchTransformInputS3InputMode>
    {
        private readonly string _value;

        private ModelBiasJobDefinitionBatchTransformInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelBiasJobDefinitionBatchTransformInputS3InputMode Pipe { get; } = new ModelBiasJobDefinitionBatchTransformInputS3InputMode("Pipe");
        public static ModelBiasJobDefinitionBatchTransformInputS3InputMode File { get; } = new ModelBiasJobDefinitionBatchTransformInputS3InputMode("File");

        public static bool operator ==(ModelBiasJobDefinitionBatchTransformInputS3InputMode left, ModelBiasJobDefinitionBatchTransformInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(ModelBiasJobDefinitionBatchTransformInputS3InputMode left, ModelBiasJobDefinitionBatchTransformInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(ModelBiasJobDefinitionBatchTransformInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelBiasJobDefinitionBatchTransformInputS3InputMode other && Equals(other);
        public bool Equals(ModelBiasJobDefinitionBatchTransformInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct ModelBiasJobDefinitionEndpointInputS3DataDistributionType : IEquatable<ModelBiasJobDefinitionEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private ModelBiasJobDefinitionEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelBiasJobDefinitionEndpointInputS3DataDistributionType FullyReplicated { get; } = new ModelBiasJobDefinitionEndpointInputS3DataDistributionType("FullyReplicated");
        public static ModelBiasJobDefinitionEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new ModelBiasJobDefinitionEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(ModelBiasJobDefinitionEndpointInputS3DataDistributionType left, ModelBiasJobDefinitionEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(ModelBiasJobDefinitionEndpointInputS3DataDistributionType left, ModelBiasJobDefinitionEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(ModelBiasJobDefinitionEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelBiasJobDefinitionEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(ModelBiasJobDefinitionEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct ModelBiasJobDefinitionEndpointInputS3InputMode : IEquatable<ModelBiasJobDefinitionEndpointInputS3InputMode>
    {
        private readonly string _value;

        private ModelBiasJobDefinitionEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelBiasJobDefinitionEndpointInputS3InputMode Pipe { get; } = new ModelBiasJobDefinitionEndpointInputS3InputMode("Pipe");
        public static ModelBiasJobDefinitionEndpointInputS3InputMode File { get; } = new ModelBiasJobDefinitionEndpointInputS3InputMode("File");

        public static bool operator ==(ModelBiasJobDefinitionEndpointInputS3InputMode left, ModelBiasJobDefinitionEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(ModelBiasJobDefinitionEndpointInputS3InputMode left, ModelBiasJobDefinitionEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(ModelBiasJobDefinitionEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelBiasJobDefinitionEndpointInputS3InputMode other && Equals(other);
        public bool Equals(ModelBiasJobDefinitionEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct ModelBiasJobDefinitionS3OutputS3UploadMode : IEquatable<ModelBiasJobDefinitionS3OutputS3UploadMode>
    {
        private readonly string _value;

        private ModelBiasJobDefinitionS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelBiasJobDefinitionS3OutputS3UploadMode Continuous { get; } = new ModelBiasJobDefinitionS3OutputS3UploadMode("Continuous");
        public static ModelBiasJobDefinitionS3OutputS3UploadMode EndOfJob { get; } = new ModelBiasJobDefinitionS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(ModelBiasJobDefinitionS3OutputS3UploadMode left, ModelBiasJobDefinitionS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(ModelBiasJobDefinitionS3OutputS3UploadMode left, ModelBiasJobDefinitionS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(ModelBiasJobDefinitionS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelBiasJobDefinitionS3OutputS3UploadMode other && Equals(other);
        public bool Equals(ModelBiasJobDefinitionS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ModelCardBarChartMetricType : IEquatable<ModelCardBarChartMetricType>
    {
        private readonly string _value;

        private ModelCardBarChartMetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardBarChartMetricType BarChart { get; } = new ModelCardBarChartMetricType("bar_chart");

        public static bool operator ==(ModelCardBarChartMetricType left, ModelCardBarChartMetricType right) => left.Equals(right);
        public static bool operator !=(ModelCardBarChartMetricType left, ModelCardBarChartMetricType right) => !left.Equals(right);

        public static explicit operator string(ModelCardBarChartMetricType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardBarChartMetricType other && Equals(other);
        public bool Equals(ModelCardBarChartMetricType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ModelCardLinearGraphMetricType : IEquatable<ModelCardLinearGraphMetricType>
    {
        private readonly string _value;

        private ModelCardLinearGraphMetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardLinearGraphMetricType LinearGraph { get; } = new ModelCardLinearGraphMetricType("linear_graph");

        public static bool operator ==(ModelCardLinearGraphMetricType left, ModelCardLinearGraphMetricType right) => left.Equals(right);
        public static bool operator !=(ModelCardLinearGraphMetricType left, ModelCardLinearGraphMetricType right) => !left.Equals(right);

        public static explicit operator string(ModelCardLinearGraphMetricType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardLinearGraphMetricType other && Equals(other);
        public bool Equals(ModelCardLinearGraphMetricType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ModelCardMatrixMetricType : IEquatable<ModelCardMatrixMetricType>
    {
        private readonly string _value;

        private ModelCardMatrixMetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardMatrixMetricType Matrix { get; } = new ModelCardMatrixMetricType("matrix");

        public static bool operator ==(ModelCardMatrixMetricType left, ModelCardMatrixMetricType right) => left.Equals(right);
        public static bool operator !=(ModelCardMatrixMetricType left, ModelCardMatrixMetricType right) => !left.Equals(right);

        public static explicit operator string(ModelCardMatrixMetricType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardMatrixMetricType other && Equals(other);
        public bool Equals(ModelCardMatrixMetricType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Current approval status of model package
    /// </summary>
    [EnumType]
    public readonly struct ModelCardModelPackageDetailsModelApprovalStatus : IEquatable<ModelCardModelPackageDetailsModelApprovalStatus>
    {
        private readonly string _value;

        private ModelCardModelPackageDetailsModelApprovalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardModelPackageDetailsModelApprovalStatus Approved { get; } = new ModelCardModelPackageDetailsModelApprovalStatus("Approved");
        public static ModelCardModelPackageDetailsModelApprovalStatus Rejected { get; } = new ModelCardModelPackageDetailsModelApprovalStatus("Rejected");
        public static ModelCardModelPackageDetailsModelApprovalStatus PendingManualApproval { get; } = new ModelCardModelPackageDetailsModelApprovalStatus("PendingManualApproval");

        public static bool operator ==(ModelCardModelPackageDetailsModelApprovalStatus left, ModelCardModelPackageDetailsModelApprovalStatus right) => left.Equals(right);
        public static bool operator !=(ModelCardModelPackageDetailsModelApprovalStatus left, ModelCardModelPackageDetailsModelApprovalStatus right) => !left.Equals(right);

        public static explicit operator string(ModelCardModelPackageDetailsModelApprovalStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardModelPackageDetailsModelApprovalStatus other && Equals(other);
        public bool Equals(ModelCardModelPackageDetailsModelApprovalStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Current status of model package
    /// </summary>
    [EnumType]
    public readonly struct ModelCardModelPackageDetailsModelPackageStatus : IEquatable<ModelCardModelPackageDetailsModelPackageStatus>
    {
        private readonly string _value;

        private ModelCardModelPackageDetailsModelPackageStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardModelPackageDetailsModelPackageStatus Pending { get; } = new ModelCardModelPackageDetailsModelPackageStatus("Pending");
        public static ModelCardModelPackageDetailsModelPackageStatus InProgress { get; } = new ModelCardModelPackageDetailsModelPackageStatus("InProgress");
        public static ModelCardModelPackageDetailsModelPackageStatus Completed { get; } = new ModelCardModelPackageDetailsModelPackageStatus("Completed");
        public static ModelCardModelPackageDetailsModelPackageStatus Failed { get; } = new ModelCardModelPackageDetailsModelPackageStatus("Failed");
        public static ModelCardModelPackageDetailsModelPackageStatus Deleting { get; } = new ModelCardModelPackageDetailsModelPackageStatus("Deleting");

        public static bool operator ==(ModelCardModelPackageDetailsModelPackageStatus left, ModelCardModelPackageDetailsModelPackageStatus right) => left.Equals(right);
        public static bool operator !=(ModelCardModelPackageDetailsModelPackageStatus left, ModelCardModelPackageDetailsModelPackageStatus right) => !left.Equals(right);

        public static explicit operator string(ModelCardModelPackageDetailsModelPackageStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardModelPackageDetailsModelPackageStatus other && Equals(other);
        public bool Equals(ModelCardModelPackageDetailsModelPackageStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ModelCardObjectiveFunctionFunctionPropertiesFunction : IEquatable<ModelCardObjectiveFunctionFunctionPropertiesFunction>
    {
        private readonly string _value;

        private ModelCardObjectiveFunctionFunctionPropertiesFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardObjectiveFunctionFunctionPropertiesFunction Maximize { get; } = new ModelCardObjectiveFunctionFunctionPropertiesFunction("Maximize");
        public static ModelCardObjectiveFunctionFunctionPropertiesFunction Minimize { get; } = new ModelCardObjectiveFunctionFunctionPropertiesFunction("Minimize");

        public static bool operator ==(ModelCardObjectiveFunctionFunctionPropertiesFunction left, ModelCardObjectiveFunctionFunctionPropertiesFunction right) => left.Equals(right);
        public static bool operator !=(ModelCardObjectiveFunctionFunctionPropertiesFunction left, ModelCardObjectiveFunctionFunctionPropertiesFunction right) => !left.Equals(right);

        public static explicit operator string(ModelCardObjectiveFunctionFunctionPropertiesFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardObjectiveFunctionFunctionPropertiesFunction other && Equals(other);
        public bool Equals(ModelCardObjectiveFunctionFunctionPropertiesFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The processing status of model card deletion. The ModelCardProcessingStatus updates throughout the different deletion steps.
    /// </summary>
    [EnumType]
    public readonly struct ModelCardProcessingStatus : IEquatable<ModelCardProcessingStatus>
    {
        private readonly string _value;

        private ModelCardProcessingStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardProcessingStatus UnsetValue { get; } = new ModelCardProcessingStatus("UnsetValue");
        public static ModelCardProcessingStatus DeleteInProgress { get; } = new ModelCardProcessingStatus("DeleteInProgress");
        public static ModelCardProcessingStatus DeletePending { get; } = new ModelCardProcessingStatus("DeletePending");
        public static ModelCardProcessingStatus ContentDeleted { get; } = new ModelCardProcessingStatus("ContentDeleted");
        public static ModelCardProcessingStatus ExportJobsDeleted { get; } = new ModelCardProcessingStatus("ExportJobsDeleted");
        public static ModelCardProcessingStatus DeleteCompleted { get; } = new ModelCardProcessingStatus("DeleteCompleted");
        public static ModelCardProcessingStatus DeleteFailed { get; } = new ModelCardProcessingStatus("DeleteFailed");

        public static bool operator ==(ModelCardProcessingStatus left, ModelCardProcessingStatus right) => left.Equals(right);
        public static bool operator !=(ModelCardProcessingStatus left, ModelCardProcessingStatus right) => !left.Equals(right);

        public static explicit operator string(ModelCardProcessingStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardProcessingStatus other && Equals(other);
        public bool Equals(ModelCardProcessingStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Risk rating of model.
    /// </summary>
    [EnumType]
    public readonly struct ModelCardRiskRating : IEquatable<ModelCardRiskRating>
    {
        private readonly string _value;

        private ModelCardRiskRating(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardRiskRating High { get; } = new ModelCardRiskRating("High");
        public static ModelCardRiskRating Medium { get; } = new ModelCardRiskRating("Medium");
        public static ModelCardRiskRating Low { get; } = new ModelCardRiskRating("Low");
        public static ModelCardRiskRating Unknown { get; } = new ModelCardRiskRating("Unknown");

        public static bool operator ==(ModelCardRiskRating left, ModelCardRiskRating right) => left.Equals(right);
        public static bool operator !=(ModelCardRiskRating left, ModelCardRiskRating right) => !left.Equals(right);

        public static explicit operator string(ModelCardRiskRating value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardRiskRating other && Equals(other);
        public bool Equals(ModelCardRiskRating other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ModelCardSimpleMetricType : IEquatable<ModelCardSimpleMetricType>
    {
        private readonly string _value;

        private ModelCardSimpleMetricType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardSimpleMetricType Number { get; } = new ModelCardSimpleMetricType("number");
        public static ModelCardSimpleMetricType String { get; } = new ModelCardSimpleMetricType("string");
        public static ModelCardSimpleMetricType Boolean { get; } = new ModelCardSimpleMetricType("boolean");

        public static bool operator ==(ModelCardSimpleMetricType left, ModelCardSimpleMetricType right) => left.Equals(right);
        public static bool operator !=(ModelCardSimpleMetricType left, ModelCardSimpleMetricType right) => !left.Equals(right);

        public static explicit operator string(ModelCardSimpleMetricType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardSimpleMetricType other && Equals(other);
        public bool Equals(ModelCardSimpleMetricType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.
    /// </summary>
    [EnumType]
    public readonly struct ModelCardStatus : IEquatable<ModelCardStatus>
    {
        private readonly string _value;

        private ModelCardStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelCardStatus Draft { get; } = new ModelCardStatus("Draft");
        public static ModelCardStatus PendingReview { get; } = new ModelCardStatus("PendingReview");
        public static ModelCardStatus Approved { get; } = new ModelCardStatus("Approved");
        public static ModelCardStatus Archived { get; } = new ModelCardStatus("Archived");

        public static bool operator ==(ModelCardStatus left, ModelCardStatus right) => left.Equals(right);
        public static bool operator !=(ModelCardStatus left, ModelCardStatus right) => !left.Equals(right);

        public static explicit operator string(ModelCardStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelCardStatus other && Equals(other);
        public bool Equals(ModelCardStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType : IEquatable<ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType>
    {
        private readonly string _value;

        private ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType FullyReplicated { get; } = new ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType("FullyReplicated");
        public static ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType ShardedByS3Key { get; } = new ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType left, ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType left, ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType other && Equals(other);
        public bool Equals(ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode : IEquatable<ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode>
    {
        private readonly string _value;

        private ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode Pipe { get; } = new ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode("Pipe");
        public static ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode File { get; } = new ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode("File");

        public static bool operator ==(ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode left, ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode left, ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode other && Equals(other);
        public bool Equals(ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType : IEquatable<ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType FullyReplicated { get; } = new ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType("FullyReplicated");
        public static ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType left, ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType left, ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct ModelExplainabilityJobDefinitionEndpointInputS3InputMode : IEquatable<ModelExplainabilityJobDefinitionEndpointInputS3InputMode>
    {
        private readonly string _value;

        private ModelExplainabilityJobDefinitionEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelExplainabilityJobDefinitionEndpointInputS3InputMode Pipe { get; } = new ModelExplainabilityJobDefinitionEndpointInputS3InputMode("Pipe");
        public static ModelExplainabilityJobDefinitionEndpointInputS3InputMode File { get; } = new ModelExplainabilityJobDefinitionEndpointInputS3InputMode("File");

        public static bool operator ==(ModelExplainabilityJobDefinitionEndpointInputS3InputMode left, ModelExplainabilityJobDefinitionEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(ModelExplainabilityJobDefinitionEndpointInputS3InputMode left, ModelExplainabilityJobDefinitionEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(ModelExplainabilityJobDefinitionEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelExplainabilityJobDefinitionEndpointInputS3InputMode other && Equals(other);
        public bool Equals(ModelExplainabilityJobDefinitionEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct ModelExplainabilityJobDefinitionS3OutputS3UploadMode : IEquatable<ModelExplainabilityJobDefinitionS3OutputS3UploadMode>
    {
        private readonly string _value;

        private ModelExplainabilityJobDefinitionS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelExplainabilityJobDefinitionS3OutputS3UploadMode Continuous { get; } = new ModelExplainabilityJobDefinitionS3OutputS3UploadMode("Continuous");
        public static ModelExplainabilityJobDefinitionS3OutputS3UploadMode EndOfJob { get; } = new ModelExplainabilityJobDefinitionS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(ModelExplainabilityJobDefinitionS3OutputS3UploadMode left, ModelExplainabilityJobDefinitionS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(ModelExplainabilityJobDefinitionS3OutputS3UploadMode left, ModelExplainabilityJobDefinitionS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(ModelExplainabilityJobDefinitionS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelExplainabilityJobDefinitionS3OutputS3UploadMode other && Equals(other);
        public bool Equals(ModelExplainabilityJobDefinitionS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of a modelpackage group job.
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageGroupStatus : IEquatable<ModelPackageGroupStatus>
    {
        private readonly string _value;

        private ModelPackageGroupStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageGroupStatus Pending { get; } = new ModelPackageGroupStatus("Pending");
        public static ModelPackageGroupStatus InProgress { get; } = new ModelPackageGroupStatus("InProgress");
        public static ModelPackageGroupStatus Completed { get; } = new ModelPackageGroupStatus("Completed");
        public static ModelPackageGroupStatus Failed { get; } = new ModelPackageGroupStatus("Failed");
        public static ModelPackageGroupStatus Deleting { get; } = new ModelPackageGroupStatus("Deleting");
        public static ModelPackageGroupStatus DeleteFailed { get; } = new ModelPackageGroupStatus("DeleteFailed");

        public static bool operator ==(ModelPackageGroupStatus left, ModelPackageGroupStatus right) => left.Equals(right);
        public static bool operator !=(ModelPackageGroupStatus left, ModelPackageGroupStatus right) => !left.Equals(right);

        public static explicit operator string(ModelPackageGroupStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageGroupStatus other && Equals(other);
        public bool Equals(ModelPackageGroupStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The approval status of the model package.
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageModelApprovalStatus : IEquatable<ModelPackageModelApprovalStatus>
    {
        private readonly string _value;

        private ModelPackageModelApprovalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageModelApprovalStatus Approved { get; } = new ModelPackageModelApprovalStatus("Approved");
        public static ModelPackageModelApprovalStatus Rejected { get; } = new ModelPackageModelApprovalStatus("Rejected");
        public static ModelPackageModelApprovalStatus PendingManualApproval { get; } = new ModelPackageModelApprovalStatus("PendingManualApproval");

        public static bool operator ==(ModelPackageModelApprovalStatus left, ModelPackageModelApprovalStatus right) => left.Equals(right);
        public static bool operator !=(ModelPackageModelApprovalStatus left, ModelPackageModelApprovalStatus right) => !left.Equals(right);

        public static explicit operator string(ModelPackageModelApprovalStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageModelApprovalStatus other && Equals(other);
        public bool Equals(ModelPackageModelApprovalStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The S3 Data Source Type
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageS3DataSourceS3DataType : IEquatable<ModelPackageS3DataSourceS3DataType>
    {
        private readonly string _value;

        private ModelPackageS3DataSourceS3DataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageS3DataSourceS3DataType ManifestFile { get; } = new ModelPackageS3DataSourceS3DataType("ManifestFile");
        public static ModelPackageS3DataSourceS3DataType S3Prefix { get; } = new ModelPackageS3DataSourceS3DataType("S3Prefix");
        public static ModelPackageS3DataSourceS3DataType AugmentedManifestFile { get; } = new ModelPackageS3DataSourceS3DataType("AugmentedManifestFile");

        public static bool operator ==(ModelPackageS3DataSourceS3DataType left, ModelPackageS3DataSourceS3DataType right) => left.Equals(right);
        public static bool operator !=(ModelPackageS3DataSourceS3DataType left, ModelPackageS3DataSourceS3DataType right) => !left.Equals(right);

        public static explicit operator string(ModelPackageS3DataSourceS3DataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageS3DataSourceS3DataType other && Equals(other);
        public bool Equals(ModelPackageS3DataSourceS3DataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if you want to skip model validation.
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageSkipModelValidation : IEquatable<ModelPackageSkipModelValidation>
    {
        private readonly string _value;

        private ModelPackageSkipModelValidation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageSkipModelValidation None { get; } = new ModelPackageSkipModelValidation("None");
        public static ModelPackageSkipModelValidation All { get; } = new ModelPackageSkipModelValidation("All");

        public static bool operator ==(ModelPackageSkipModelValidation left, ModelPackageSkipModelValidation right) => left.Equals(right);
        public static bool operator !=(ModelPackageSkipModelValidation left, ModelPackageSkipModelValidation right) => !left.Equals(right);

        public static explicit operator string(ModelPackageSkipModelValidation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageSkipModelValidation other && Equals(other);
        public bool Equals(ModelPackageSkipModelValidation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of the model package.
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageStatus : IEquatable<ModelPackageStatus>
    {
        private readonly string _value;

        private ModelPackageStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageStatus Pending { get; } = new ModelPackageStatus("Pending");
        public static ModelPackageStatus Deleting { get; } = new ModelPackageStatus("Deleting");
        public static ModelPackageStatus InProgress { get; } = new ModelPackageStatus("InProgress");
        public static ModelPackageStatus Completed { get; } = new ModelPackageStatus("Completed");
        public static ModelPackageStatus Failed { get; } = new ModelPackageStatus("Failed");

        public static bool operator ==(ModelPackageStatus left, ModelPackageStatus right) => left.Equals(right);
        public static bool operator !=(ModelPackageStatus left, ModelPackageStatus right) => !left.Equals(right);

        public static explicit operator string(ModelPackageStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageStatus other && Equals(other);
        public bool Equals(ModelPackageStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status.
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageStatusItemStatus : IEquatable<ModelPackageStatusItemStatus>
    {
        private readonly string _value;

        private ModelPackageStatusItemStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageStatusItemStatus NotStarted { get; } = new ModelPackageStatusItemStatus("NotStarted");
        public static ModelPackageStatusItemStatus Failed { get; } = new ModelPackageStatusItemStatus("Failed");
        public static ModelPackageStatusItemStatus InProgress { get; } = new ModelPackageStatusItemStatus("InProgress");
        public static ModelPackageStatusItemStatus Completed { get; } = new ModelPackageStatusItemStatus("Completed");

        public static bool operator ==(ModelPackageStatusItemStatus left, ModelPackageStatusItemStatus right) => left.Equals(right);
        public static bool operator !=(ModelPackageStatusItemStatus left, ModelPackageStatusItemStatus right) => !left.Equals(right);

        public static explicit operator string(ModelPackageStatusItemStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageStatusItemStatus other && Equals(other);
        public bool Equals(ModelPackageStatusItemStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageTransformInputCompressionType : IEquatable<ModelPackageTransformInputCompressionType>
    {
        private readonly string _value;

        private ModelPackageTransformInputCompressionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageTransformInputCompressionType None { get; } = new ModelPackageTransformInputCompressionType("None");
        public static ModelPackageTransformInputCompressionType Gzip { get; } = new ModelPackageTransformInputCompressionType("Gzip");

        public static bool operator ==(ModelPackageTransformInputCompressionType left, ModelPackageTransformInputCompressionType right) => left.Equals(right);
        public static bool operator !=(ModelPackageTransformInputCompressionType left, ModelPackageTransformInputCompressionType right) => !left.Equals(right);

        public static explicit operator string(ModelPackageTransformInputCompressionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageTransformInputCompressionType other && Equals(other);
        public bool Equals(ModelPackageTransformInputCompressionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The method to use to split the transform job's data files into smaller batches. 
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageTransformInputSplitType : IEquatable<ModelPackageTransformInputSplitType>
    {
        private readonly string _value;

        private ModelPackageTransformInputSplitType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageTransformInputSplitType None { get; } = new ModelPackageTransformInputSplitType("None");
        public static ModelPackageTransformInputSplitType TfRecord { get; } = new ModelPackageTransformInputSplitType("TFRecord");
        public static ModelPackageTransformInputSplitType Line { get; } = new ModelPackageTransformInputSplitType("Line");
        public static ModelPackageTransformInputSplitType RecordIo { get; } = new ModelPackageTransformInputSplitType("RecordIO");

        public static bool operator ==(ModelPackageTransformInputSplitType left, ModelPackageTransformInputSplitType right) => left.Equals(right);
        public static bool operator !=(ModelPackageTransformInputSplitType left, ModelPackageTransformInputSplitType right) => !left.Equals(right);

        public static explicit operator string(ModelPackageTransformInputSplitType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageTransformInputSplitType other && Equals(other);
        public bool Equals(ModelPackageTransformInputSplitType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A string that determines the number of records included in a single mini-batch.
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageTransformJobDefinitionBatchStrategy : IEquatable<ModelPackageTransformJobDefinitionBatchStrategy>
    {
        private readonly string _value;

        private ModelPackageTransformJobDefinitionBatchStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageTransformJobDefinitionBatchStrategy MultiRecord { get; } = new ModelPackageTransformJobDefinitionBatchStrategy("MultiRecord");
        public static ModelPackageTransformJobDefinitionBatchStrategy SingleRecord { get; } = new ModelPackageTransformJobDefinitionBatchStrategy("SingleRecord");

        public static bool operator ==(ModelPackageTransformJobDefinitionBatchStrategy left, ModelPackageTransformJobDefinitionBatchStrategy right) => left.Equals(right);
        public static bool operator !=(ModelPackageTransformJobDefinitionBatchStrategy left, ModelPackageTransformJobDefinitionBatchStrategy right) => !left.Equals(right);

        public static explicit operator string(ModelPackageTransformJobDefinitionBatchStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageTransformJobDefinitionBatchStrategy other && Equals(other);
        public bool Equals(ModelPackageTransformJobDefinitionBatchStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines how to assemble the results of the transform job as a single S3 object.
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageTransformOutputAssembleWith : IEquatable<ModelPackageTransformOutputAssembleWith>
    {
        private readonly string _value;

        private ModelPackageTransformOutputAssembleWith(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageTransformOutputAssembleWith None { get; } = new ModelPackageTransformOutputAssembleWith("None");
        public static ModelPackageTransformOutputAssembleWith Line { get; } = new ModelPackageTransformOutputAssembleWith("Line");

        public static bool operator ==(ModelPackageTransformOutputAssembleWith left, ModelPackageTransformOutputAssembleWith right) => left.Equals(right);
        public static bool operator !=(ModelPackageTransformOutputAssembleWith left, ModelPackageTransformOutputAssembleWith right) => !left.Equals(right);

        public static explicit operator string(ModelPackageTransformOutputAssembleWith value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageTransformOutputAssembleWith other && Equals(other);
        public bool Equals(ModelPackageTransformOutputAssembleWith other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType : IEquatable<ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType FullyReplicated { get; } = new ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType("FullyReplicated");
        public static ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType ShardedByS3Key { get; } = new ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType left, ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType left, ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionBatchTransformInputS3InputMode : IEquatable<ModelQualityJobDefinitionBatchTransformInputS3InputMode>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionBatchTransformInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionBatchTransformInputS3InputMode Pipe { get; } = new ModelQualityJobDefinitionBatchTransformInputS3InputMode("Pipe");
        public static ModelQualityJobDefinitionBatchTransformInputS3InputMode File { get; } = new ModelQualityJobDefinitionBatchTransformInputS3InputMode("File");

        public static bool operator ==(ModelQualityJobDefinitionBatchTransformInputS3InputMode left, ModelQualityJobDefinitionBatchTransformInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionBatchTransformInputS3InputMode left, ModelQualityJobDefinitionBatchTransformInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionBatchTransformInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionBatchTransformInputS3InputMode other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionBatchTransformInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionEndpointInputS3DataDistributionType : IEquatable<ModelQualityJobDefinitionEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionEndpointInputS3DataDistributionType FullyReplicated { get; } = new ModelQualityJobDefinitionEndpointInputS3DataDistributionType("FullyReplicated");
        public static ModelQualityJobDefinitionEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new ModelQualityJobDefinitionEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(ModelQualityJobDefinitionEndpointInputS3DataDistributionType left, ModelQualityJobDefinitionEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionEndpointInputS3DataDistributionType left, ModelQualityJobDefinitionEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionEndpointInputS3InputMode : IEquatable<ModelQualityJobDefinitionEndpointInputS3InputMode>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionEndpointInputS3InputMode Pipe { get; } = new ModelQualityJobDefinitionEndpointInputS3InputMode("Pipe");
        public static ModelQualityJobDefinitionEndpointInputS3InputMode File { get; } = new ModelQualityJobDefinitionEndpointInputS3InputMode("File");

        public static bool operator ==(ModelQualityJobDefinitionEndpointInputS3InputMode left, ModelQualityJobDefinitionEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionEndpointInputS3InputMode left, ModelQualityJobDefinitionEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionEndpointInputS3InputMode other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the monitoring job.
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionProblemType : IEquatable<ModelQualityJobDefinitionProblemType>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionProblemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionProblemType BinaryClassification { get; } = new ModelQualityJobDefinitionProblemType("BinaryClassification");
        public static ModelQualityJobDefinitionProblemType MulticlassClassification { get; } = new ModelQualityJobDefinitionProblemType("MulticlassClassification");
        public static ModelQualityJobDefinitionProblemType Regression { get; } = new ModelQualityJobDefinitionProblemType("Regression");

        public static bool operator ==(ModelQualityJobDefinitionProblemType left, ModelQualityJobDefinitionProblemType right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionProblemType left, ModelQualityJobDefinitionProblemType right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionProblemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionProblemType other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionProblemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionS3OutputS3UploadMode : IEquatable<ModelQualityJobDefinitionS3OutputS3UploadMode>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionS3OutputS3UploadMode Continuous { get; } = new ModelQualityJobDefinitionS3OutputS3UploadMode("Continuous");
        public static ModelQualityJobDefinitionS3OutputS3UploadMode EndOfJob { get; } = new ModelQualityJobDefinitionS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(ModelQualityJobDefinitionS3OutputS3UploadMode left, ModelQualityJobDefinitionS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionS3OutputS3UploadMode left, ModelQualityJobDefinitionS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionS3OutputS3UploadMode other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleBatchTransformInputS3DataDistributionType : IEquatable<MonitoringScheduleBatchTransformInputS3DataDistributionType>
    {
        private readonly string _value;

        private MonitoringScheduleBatchTransformInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleBatchTransformInputS3DataDistributionType FullyReplicated { get; } = new MonitoringScheduleBatchTransformInputS3DataDistributionType("FullyReplicated");
        public static MonitoringScheduleBatchTransformInputS3DataDistributionType ShardedByS3Key { get; } = new MonitoringScheduleBatchTransformInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(MonitoringScheduleBatchTransformInputS3DataDistributionType left, MonitoringScheduleBatchTransformInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleBatchTransformInputS3DataDistributionType left, MonitoringScheduleBatchTransformInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleBatchTransformInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleBatchTransformInputS3DataDistributionType other && Equals(other);
        public bool Equals(MonitoringScheduleBatchTransformInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleBatchTransformInputS3InputMode : IEquatable<MonitoringScheduleBatchTransformInputS3InputMode>
    {
        private readonly string _value;

        private MonitoringScheduleBatchTransformInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleBatchTransformInputS3InputMode Pipe { get; } = new MonitoringScheduleBatchTransformInputS3InputMode("Pipe");
        public static MonitoringScheduleBatchTransformInputS3InputMode File { get; } = new MonitoringScheduleBatchTransformInputS3InputMode("File");

        public static bool operator ==(MonitoringScheduleBatchTransformInputS3InputMode left, MonitoringScheduleBatchTransformInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleBatchTransformInputS3InputMode left, MonitoringScheduleBatchTransformInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleBatchTransformInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleBatchTransformInputS3InputMode other && Equals(other);
        public bool Equals(MonitoringScheduleBatchTransformInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleEndpointInputS3DataDistributionType : IEquatable<MonitoringScheduleEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private MonitoringScheduleEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleEndpointInputS3DataDistributionType FullyReplicated { get; } = new MonitoringScheduleEndpointInputS3DataDistributionType("FullyReplicated");
        public static MonitoringScheduleEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new MonitoringScheduleEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(MonitoringScheduleEndpointInputS3DataDistributionType left, MonitoringScheduleEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleEndpointInputS3DataDistributionType left, MonitoringScheduleEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(MonitoringScheduleEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleEndpointInputS3InputMode : IEquatable<MonitoringScheduleEndpointInputS3InputMode>
    {
        private readonly string _value;

        private MonitoringScheduleEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleEndpointInputS3InputMode Pipe { get; } = new MonitoringScheduleEndpointInputS3InputMode("Pipe");
        public static MonitoringScheduleEndpointInputS3InputMode File { get; } = new MonitoringScheduleEndpointInputS3InputMode("File");

        public static bool operator ==(MonitoringScheduleEndpointInputS3InputMode left, MonitoringScheduleEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleEndpointInputS3InputMode left, MonitoringScheduleEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleEndpointInputS3InputMode other && Equals(other);
        public bool Equals(MonitoringScheduleEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the monitoring job.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus : IEquatable<MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus>
    {
        private readonly string _value;

        private MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Pending { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Pending");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Completed { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Completed");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus CompletedWithViolations { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("CompletedWithViolations");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus InProgress { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("InProgress");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Failed { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Failed");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Stopping { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Stopping");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Stopped { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Stopped");

        public static bool operator ==(MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus left, MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus left, MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus other && Equals(other);
        public bool Equals(MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of monitoring job.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleMonitoringType : IEquatable<MonitoringScheduleMonitoringType>
    {
        private readonly string _value;

        private MonitoringScheduleMonitoringType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleMonitoringType DataQuality { get; } = new MonitoringScheduleMonitoringType("DataQuality");
        public static MonitoringScheduleMonitoringType ModelQuality { get; } = new MonitoringScheduleMonitoringType("ModelQuality");
        public static MonitoringScheduleMonitoringType ModelBias { get; } = new MonitoringScheduleMonitoringType("ModelBias");
        public static MonitoringScheduleMonitoringType ModelExplainability { get; } = new MonitoringScheduleMonitoringType("ModelExplainability");

        public static bool operator ==(MonitoringScheduleMonitoringType left, MonitoringScheduleMonitoringType right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleMonitoringType left, MonitoringScheduleMonitoringType right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleMonitoringType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleMonitoringType other && Equals(other);
        public bool Equals(MonitoringScheduleMonitoringType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleS3OutputS3UploadMode : IEquatable<MonitoringScheduleS3OutputS3UploadMode>
    {
        private readonly string _value;

        private MonitoringScheduleS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleS3OutputS3UploadMode Continuous { get; } = new MonitoringScheduleS3OutputS3UploadMode("Continuous");
        public static MonitoringScheduleS3OutputS3UploadMode EndOfJob { get; } = new MonitoringScheduleS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(MonitoringScheduleS3OutputS3UploadMode left, MonitoringScheduleS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleS3OutputS3UploadMode left, MonitoringScheduleS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleS3OutputS3UploadMode other && Equals(other);
        public bool Equals(MonitoringScheduleS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of a schedule job.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleStatus : IEquatable<MonitoringScheduleStatus>
    {
        private readonly string _value;

        private MonitoringScheduleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleStatus Pending { get; } = new MonitoringScheduleStatus("Pending");
        public static MonitoringScheduleStatus Failed { get; } = new MonitoringScheduleStatus("Failed");
        public static MonitoringScheduleStatus Scheduled { get; } = new MonitoringScheduleStatus("Scheduled");
        public static MonitoringScheduleStatus Stopped { get; } = new MonitoringScheduleStatus("Stopped");

        public static bool operator ==(MonitoringScheduleStatus left, MonitoringScheduleStatus right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleStatus left, MonitoringScheduleStatus right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleStatus other && Equals(other);
        public bool Equals(MonitoringScheduleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of a project.
    /// </summary>
    [EnumType]
    public readonly struct ProjectStatus : IEquatable<ProjectStatus>
    {
        private readonly string _value;

        private ProjectStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectStatus Pending { get; } = new ProjectStatus("Pending");
        public static ProjectStatus CreateInProgress { get; } = new ProjectStatus("CreateInProgress");
        public static ProjectStatus CreateCompleted { get; } = new ProjectStatus("CreateCompleted");
        public static ProjectStatus CreateFailed { get; } = new ProjectStatus("CreateFailed");
        public static ProjectStatus DeleteInProgress { get; } = new ProjectStatus("DeleteInProgress");
        public static ProjectStatus DeleteFailed { get; } = new ProjectStatus("DeleteFailed");
        public static ProjectStatus DeleteCompleted { get; } = new ProjectStatus("DeleteCompleted");

        public static bool operator ==(ProjectStatus left, ProjectStatus right) => left.Equals(right);
        public static bool operator !=(ProjectStatus left, ProjectStatus right) => !left.Equals(right);

        public static explicit operator string(ProjectStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectStatus other && Equals(other);
        public bool Equals(ProjectStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type that the image version runs on.
    /// </summary>
    [EnumType]
    public readonly struct SpaceResourceSpecInstanceType : IEquatable<SpaceResourceSpecInstanceType>
    {
        private readonly string _value;

        private SpaceResourceSpecInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpaceResourceSpecInstanceType System { get; } = new SpaceResourceSpecInstanceType("system");
        public static SpaceResourceSpecInstanceType MlT3Micro { get; } = new SpaceResourceSpecInstanceType("ml.t3.micro");
        public static SpaceResourceSpecInstanceType MlT3Small { get; } = new SpaceResourceSpecInstanceType("ml.t3.small");
        public static SpaceResourceSpecInstanceType MlT3Medium { get; } = new SpaceResourceSpecInstanceType("ml.t3.medium");
        public static SpaceResourceSpecInstanceType MlT3Large { get; } = new SpaceResourceSpecInstanceType("ml.t3.large");
        public static SpaceResourceSpecInstanceType MlT3Xlarge { get; } = new SpaceResourceSpecInstanceType("ml.t3.xlarge");
        public static SpaceResourceSpecInstanceType MlT32xlarge { get; } = new SpaceResourceSpecInstanceType("ml.t3.2xlarge");
        public static SpaceResourceSpecInstanceType MlM5Large { get; } = new SpaceResourceSpecInstanceType("ml.m5.large");
        public static SpaceResourceSpecInstanceType MlM5Xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5.xlarge");
        public static SpaceResourceSpecInstanceType MlM52xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5.2xlarge");
        public static SpaceResourceSpecInstanceType MlM54xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5.4xlarge");
        public static SpaceResourceSpecInstanceType MlM58xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5.8xlarge");
        public static SpaceResourceSpecInstanceType MlM512xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5.12xlarge");
        public static SpaceResourceSpecInstanceType MlM516xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5.16xlarge");
        public static SpaceResourceSpecInstanceType MlM524xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5.24xlarge");
        public static SpaceResourceSpecInstanceType MlC5Large { get; } = new SpaceResourceSpecInstanceType("ml.c5.large");
        public static SpaceResourceSpecInstanceType MlC5Xlarge { get; } = new SpaceResourceSpecInstanceType("ml.c5.xlarge");
        public static SpaceResourceSpecInstanceType MlC52xlarge { get; } = new SpaceResourceSpecInstanceType("ml.c5.2xlarge");
        public static SpaceResourceSpecInstanceType MlC54xlarge { get; } = new SpaceResourceSpecInstanceType("ml.c5.4xlarge");
        public static SpaceResourceSpecInstanceType MlC59xlarge { get; } = new SpaceResourceSpecInstanceType("ml.c5.9xlarge");
        public static SpaceResourceSpecInstanceType MlC512xlarge { get; } = new SpaceResourceSpecInstanceType("ml.c5.12xlarge");
        public static SpaceResourceSpecInstanceType MlC518xlarge { get; } = new SpaceResourceSpecInstanceType("ml.c5.18xlarge");
        public static SpaceResourceSpecInstanceType MlC524xlarge { get; } = new SpaceResourceSpecInstanceType("ml.c5.24xlarge");
        public static SpaceResourceSpecInstanceType MlP32xlarge { get; } = new SpaceResourceSpecInstanceType("ml.p3.2xlarge");
        public static SpaceResourceSpecInstanceType MlP38xlarge { get; } = new SpaceResourceSpecInstanceType("ml.p3.8xlarge");
        public static SpaceResourceSpecInstanceType MlP316xlarge { get; } = new SpaceResourceSpecInstanceType("ml.p3.16xlarge");
        public static SpaceResourceSpecInstanceType MlG4dnXlarge { get; } = new SpaceResourceSpecInstanceType("ml.g4dn.xlarge");
        public static SpaceResourceSpecInstanceType MlG4dn2xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g4dn.2xlarge");
        public static SpaceResourceSpecInstanceType MlG4dn4xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g4dn.4xlarge");
        public static SpaceResourceSpecInstanceType MlG4dn8xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g4dn.8xlarge");
        public static SpaceResourceSpecInstanceType MlG4dn12xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g4dn.12xlarge");
        public static SpaceResourceSpecInstanceType MlG4dn16xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g4dn.16xlarge");
        public static SpaceResourceSpecInstanceType MlR5Large { get; } = new SpaceResourceSpecInstanceType("ml.r5.large");
        public static SpaceResourceSpecInstanceType MlR5Xlarge { get; } = new SpaceResourceSpecInstanceType("ml.r5.xlarge");
        public static SpaceResourceSpecInstanceType MlR52xlarge { get; } = new SpaceResourceSpecInstanceType("ml.r5.2xlarge");
        public static SpaceResourceSpecInstanceType MlR54xlarge { get; } = new SpaceResourceSpecInstanceType("ml.r5.4xlarge");
        public static SpaceResourceSpecInstanceType MlR58xlarge { get; } = new SpaceResourceSpecInstanceType("ml.r5.8xlarge");
        public static SpaceResourceSpecInstanceType MlR512xlarge { get; } = new SpaceResourceSpecInstanceType("ml.r5.12xlarge");
        public static SpaceResourceSpecInstanceType MlR516xlarge { get; } = new SpaceResourceSpecInstanceType("ml.r5.16xlarge");
        public static SpaceResourceSpecInstanceType MlR524xlarge { get; } = new SpaceResourceSpecInstanceType("ml.r5.24xlarge");
        public static SpaceResourceSpecInstanceType MlP3dn24xlarge { get; } = new SpaceResourceSpecInstanceType("ml.p3dn.24xlarge");
        public static SpaceResourceSpecInstanceType MlM5dLarge { get; } = new SpaceResourceSpecInstanceType("ml.m5d.large");
        public static SpaceResourceSpecInstanceType MlM5dXlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5d.xlarge");
        public static SpaceResourceSpecInstanceType MlM5d2xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5d.2xlarge");
        public static SpaceResourceSpecInstanceType MlM5d4xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5d.4xlarge");
        public static SpaceResourceSpecInstanceType MlM5d8xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5d.8xlarge");
        public static SpaceResourceSpecInstanceType MlM5d12xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5d.12xlarge");
        public static SpaceResourceSpecInstanceType MlM5d16xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5d.16xlarge");
        public static SpaceResourceSpecInstanceType MlM5d24xlarge { get; } = new SpaceResourceSpecInstanceType("ml.m5d.24xlarge");
        public static SpaceResourceSpecInstanceType MlG5Xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g5.xlarge");
        public static SpaceResourceSpecInstanceType MlG52xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g5.2xlarge");
        public static SpaceResourceSpecInstanceType MlG54xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g5.4xlarge");
        public static SpaceResourceSpecInstanceType MlG58xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g5.8xlarge");
        public static SpaceResourceSpecInstanceType MlG512xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g5.12xlarge");
        public static SpaceResourceSpecInstanceType MlG516xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g5.16xlarge");
        public static SpaceResourceSpecInstanceType MlG524xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g5.24xlarge");
        public static SpaceResourceSpecInstanceType MlG548xlarge { get; } = new SpaceResourceSpecInstanceType("ml.g5.48xlarge");
        public static SpaceResourceSpecInstanceType MlP4d24xlarge { get; } = new SpaceResourceSpecInstanceType("ml.p4d.24xlarge");
        public static SpaceResourceSpecInstanceType MlP4de24xlarge { get; } = new SpaceResourceSpecInstanceType("ml.p4de.24xlarge");
        public static SpaceResourceSpecInstanceType MlGeospatialInteractive { get; } = new SpaceResourceSpecInstanceType("ml.geospatial.interactive");

        public static bool operator ==(SpaceResourceSpecInstanceType left, SpaceResourceSpecInstanceType right) => left.Equals(right);
        public static bool operator !=(SpaceResourceSpecInstanceType left, SpaceResourceSpecInstanceType right) => !left.Equals(right);

        public static explicit operator string(SpaceResourceSpecInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpaceResourceSpecInstanceType other && Equals(other);
        public bool Equals(SpaceResourceSpecInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the current user has access to the RStudioServerPro app.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileRStudioServerProAppSettingsAccessStatus : IEquatable<UserProfileRStudioServerProAppSettingsAccessStatus>
    {
        private readonly string _value;

        private UserProfileRStudioServerProAppSettingsAccessStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileRStudioServerProAppSettingsAccessStatus Enabled { get; } = new UserProfileRStudioServerProAppSettingsAccessStatus("ENABLED");
        public static UserProfileRStudioServerProAppSettingsAccessStatus Disabled { get; } = new UserProfileRStudioServerProAppSettingsAccessStatus("DISABLED");

        public static bool operator ==(UserProfileRStudioServerProAppSettingsAccessStatus left, UserProfileRStudioServerProAppSettingsAccessStatus right) => left.Equals(right);
        public static bool operator !=(UserProfileRStudioServerProAppSettingsAccessStatus left, UserProfileRStudioServerProAppSettingsAccessStatus right) => !left.Equals(right);

        public static explicit operator string(UserProfileRStudioServerProAppSettingsAccessStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileRStudioServerProAppSettingsAccessStatus other && Equals(other);
        public bool Equals(UserProfileRStudioServerProAppSettingsAccessStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileRStudioServerProAppSettingsUserGroup : IEquatable<UserProfileRStudioServerProAppSettingsUserGroup>
    {
        private readonly string _value;

        private UserProfileRStudioServerProAppSettingsUserGroup(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileRStudioServerProAppSettingsUserGroup RStudioAdmin { get; } = new UserProfileRStudioServerProAppSettingsUserGroup("R_STUDIO_ADMIN");
        public static UserProfileRStudioServerProAppSettingsUserGroup RStudioUser { get; } = new UserProfileRStudioServerProAppSettingsUserGroup("R_STUDIO_USER");

        public static bool operator ==(UserProfileRStudioServerProAppSettingsUserGroup left, UserProfileRStudioServerProAppSettingsUserGroup right) => left.Equals(right);
        public static bool operator !=(UserProfileRStudioServerProAppSettingsUserGroup left, UserProfileRStudioServerProAppSettingsUserGroup right) => !left.Equals(right);

        public static explicit operator string(UserProfileRStudioServerProAppSettingsUserGroup value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileRStudioServerProAppSettingsUserGroup other && Equals(other);
        public bool Equals(UserProfileRStudioServerProAppSettingsUserGroup other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type that the image version runs on.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileResourceSpecInstanceType : IEquatable<UserProfileResourceSpecInstanceType>
    {
        private readonly string _value;

        private UserProfileResourceSpecInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileResourceSpecInstanceType System { get; } = new UserProfileResourceSpecInstanceType("system");
        public static UserProfileResourceSpecInstanceType MlT3Micro { get; } = new UserProfileResourceSpecInstanceType("ml.t3.micro");
        public static UserProfileResourceSpecInstanceType MlT3Small { get; } = new UserProfileResourceSpecInstanceType("ml.t3.small");
        public static UserProfileResourceSpecInstanceType MlT3Medium { get; } = new UserProfileResourceSpecInstanceType("ml.t3.medium");
        public static UserProfileResourceSpecInstanceType MlT3Large { get; } = new UserProfileResourceSpecInstanceType("ml.t3.large");
        public static UserProfileResourceSpecInstanceType MlT3Xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.t3.xlarge");
        public static UserProfileResourceSpecInstanceType MlT32xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.t3.2xlarge");
        public static UserProfileResourceSpecInstanceType MlM5Large { get; } = new UserProfileResourceSpecInstanceType("ml.m5.large");
        public static UserProfileResourceSpecInstanceType MlM5Xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.xlarge");
        public static UserProfileResourceSpecInstanceType MlM52xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.2xlarge");
        public static UserProfileResourceSpecInstanceType MlM54xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.4xlarge");
        public static UserProfileResourceSpecInstanceType MlM58xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.8xlarge");
        public static UserProfileResourceSpecInstanceType MlM512xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.12xlarge");
        public static UserProfileResourceSpecInstanceType MlM516xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.16xlarge");
        public static UserProfileResourceSpecInstanceType MlM524xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.24xlarge");
        public static UserProfileResourceSpecInstanceType MlC5Large { get; } = new UserProfileResourceSpecInstanceType("ml.c5.large");
        public static UserProfileResourceSpecInstanceType MlC5Xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.xlarge");
        public static UserProfileResourceSpecInstanceType MlC52xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.2xlarge");
        public static UserProfileResourceSpecInstanceType MlC54xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.4xlarge");
        public static UserProfileResourceSpecInstanceType MlC59xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.9xlarge");
        public static UserProfileResourceSpecInstanceType MlC512xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.12xlarge");
        public static UserProfileResourceSpecInstanceType MlC518xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.18xlarge");
        public static UserProfileResourceSpecInstanceType MlC524xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.24xlarge");
        public static UserProfileResourceSpecInstanceType MlP32xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.p3.2xlarge");
        public static UserProfileResourceSpecInstanceType MlP38xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.p3.8xlarge");
        public static UserProfileResourceSpecInstanceType MlP316xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.p3.16xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dnXlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn2xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.2xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn4xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.4xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn8xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.8xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn12xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.12xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn16xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.16xlarge");
        public static UserProfileResourceSpecInstanceType MlR5Large { get; } = new UserProfileResourceSpecInstanceType("ml.r5.large");
        public static UserProfileResourceSpecInstanceType MlR5Xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.r5.xlarge");
        public static UserProfileResourceSpecInstanceType MlR52xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.r5.2xlarge");
        public static UserProfileResourceSpecInstanceType MlR54xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.r5.4xlarge");
        public static UserProfileResourceSpecInstanceType MlR58xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.r5.8xlarge");
        public static UserProfileResourceSpecInstanceType MlR512xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.r5.12xlarge");
        public static UserProfileResourceSpecInstanceType MlR516xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.r5.16xlarge");
        public static UserProfileResourceSpecInstanceType MlR524xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.r5.24xlarge");
        public static UserProfileResourceSpecInstanceType MlP3dn24xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.p3dn.24xlarge");
        public static UserProfileResourceSpecInstanceType MlM5dLarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5d.large");
        public static UserProfileResourceSpecInstanceType MlM5dXlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5d.xlarge");
        public static UserProfileResourceSpecInstanceType MlM5d2xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5d.2xlarge");
        public static UserProfileResourceSpecInstanceType MlM5d4xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5d.4xlarge");
        public static UserProfileResourceSpecInstanceType MlM5d8xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5d.8xlarge");
        public static UserProfileResourceSpecInstanceType MlM5d12xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5d.12xlarge");
        public static UserProfileResourceSpecInstanceType MlM5d16xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5d.16xlarge");
        public static UserProfileResourceSpecInstanceType MlM5d24xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5d.24xlarge");
        public static UserProfileResourceSpecInstanceType MlG5Xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g5.xlarge");
        public static UserProfileResourceSpecInstanceType MlG52xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g5.2xlarge");
        public static UserProfileResourceSpecInstanceType MlG54xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g5.4xlarge");
        public static UserProfileResourceSpecInstanceType MlG58xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g5.8xlarge");
        public static UserProfileResourceSpecInstanceType MlG512xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g5.12xlarge");
        public static UserProfileResourceSpecInstanceType MlG516xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g5.16xlarge");
        public static UserProfileResourceSpecInstanceType MlG524xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g5.24xlarge");
        public static UserProfileResourceSpecInstanceType MlG548xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g5.48xlarge");
        public static UserProfileResourceSpecInstanceType MlP4d24xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.p4d.24xlarge");
        public static UserProfileResourceSpecInstanceType MlP4de24xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.p4de.24xlarge");
        public static UserProfileResourceSpecInstanceType MlGeospatialInteractive { get; } = new UserProfileResourceSpecInstanceType("ml.geospatial.interactive");
        public static UserProfileResourceSpecInstanceType MlTrn12xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.trn1.2xlarge");
        public static UserProfileResourceSpecInstanceType MlTrn132xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.trn1.32xlarge");
        public static UserProfileResourceSpecInstanceType MlTrn1n32xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.trn1n.32xlarge");

        public static bool operator ==(UserProfileResourceSpecInstanceType left, UserProfileResourceSpecInstanceType right) => left.Equals(right);
        public static bool operator !=(UserProfileResourceSpecInstanceType left, UserProfileResourceSpecInstanceType right) => !left.Equals(right);

        public static explicit operator string(UserProfileResourceSpecInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileResourceSpecInstanceType other && Equals(other);
        public bool Equals(UserProfileResourceSpecInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileSharingSettingsNotebookOutputOption : IEquatable<UserProfileSharingSettingsNotebookOutputOption>
    {
        private readonly string _value;

        private UserProfileSharingSettingsNotebookOutputOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileSharingSettingsNotebookOutputOption Allowed { get; } = new UserProfileSharingSettingsNotebookOutputOption("Allowed");
        public static UserProfileSharingSettingsNotebookOutputOption Disabled { get; } = new UserProfileSharingSettingsNotebookOutputOption("Disabled");

        public static bool operator ==(UserProfileSharingSettingsNotebookOutputOption left, UserProfileSharingSettingsNotebookOutputOption right) => left.Equals(right);
        public static bool operator !=(UserProfileSharingSettingsNotebookOutputOption left, UserProfileSharingSettingsNotebookOutputOption right) => !left.Equals(right);

        public static explicit operator string(UserProfileSharingSettingsNotebookOutputOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileSharingSettingsNotebookOutputOption other && Equals(other);
        public bool Equals(UserProfileSharingSettingsNotebookOutputOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the Studio experience is available to users. If not, users cannot access Studio.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileUserSettingsStudioWebPortal : IEquatable<UserProfileUserSettingsStudioWebPortal>
    {
        private readonly string _value;

        private UserProfileUserSettingsStudioWebPortal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileUserSettingsStudioWebPortal Enabled { get; } = new UserProfileUserSettingsStudioWebPortal("ENABLED");
        public static UserProfileUserSettingsStudioWebPortal Disabled { get; } = new UserProfileUserSettingsStudioWebPortal("DISABLED");

        public static bool operator ==(UserProfileUserSettingsStudioWebPortal left, UserProfileUserSettingsStudioWebPortal right) => left.Equals(right);
        public static bool operator !=(UserProfileUserSettingsStudioWebPortal left, UserProfileUserSettingsStudioWebPortal right) => !left.Equals(right);

        public static explicit operator string(UserProfileUserSettingsStudioWebPortal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileUserSettingsStudioWebPortal other && Equals(other);
        public bool Equals(UserProfileUserSettingsStudioWebPortal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
