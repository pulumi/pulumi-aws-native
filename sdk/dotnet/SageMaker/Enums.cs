// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.SageMaker
{
    /// <summary>
    /// The instance type that the image version runs on.
    /// </summary>
    [EnumType]
    public readonly struct AppResourceSpecInstanceType : IEquatable<AppResourceSpecInstanceType>
    {
        private readonly string _value;

        private AppResourceSpecInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppResourceSpecInstanceType System { get; } = new AppResourceSpecInstanceType("system");
        public static AppResourceSpecInstanceType MlT3Micro { get; } = new AppResourceSpecInstanceType("ml.t3.micro");
        public static AppResourceSpecInstanceType MlT3Small { get; } = new AppResourceSpecInstanceType("ml.t3.small");
        public static AppResourceSpecInstanceType MlT3Medium { get; } = new AppResourceSpecInstanceType("ml.t3.medium");
        public static AppResourceSpecInstanceType MlT3Large { get; } = new AppResourceSpecInstanceType("ml.t3.large");
        public static AppResourceSpecInstanceType MlT3Xlarge { get; } = new AppResourceSpecInstanceType("ml.t3.xlarge");
        public static AppResourceSpecInstanceType MlT32xlarge { get; } = new AppResourceSpecInstanceType("ml.t3.2xlarge");
        public static AppResourceSpecInstanceType MlM5Large { get; } = new AppResourceSpecInstanceType("ml.m5.large");
        public static AppResourceSpecInstanceType MlM5Xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.xlarge");
        public static AppResourceSpecInstanceType MlM52xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.2xlarge");
        public static AppResourceSpecInstanceType MlM54xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.4xlarge");
        public static AppResourceSpecInstanceType MlM58xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.8xlarge");
        public static AppResourceSpecInstanceType MlM512xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.12xlarge");
        public static AppResourceSpecInstanceType MlM516xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.16xlarge");
        public static AppResourceSpecInstanceType MlM524xlarge { get; } = new AppResourceSpecInstanceType("ml.m5.24xlarge");
        public static AppResourceSpecInstanceType MlC5Large { get; } = new AppResourceSpecInstanceType("ml.c5.large");
        public static AppResourceSpecInstanceType MlC5Xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.xlarge");
        public static AppResourceSpecInstanceType MlC52xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.2xlarge");
        public static AppResourceSpecInstanceType MlC54xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.4xlarge");
        public static AppResourceSpecInstanceType MlC59xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.9xlarge");
        public static AppResourceSpecInstanceType MlC512xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.12xlarge");
        public static AppResourceSpecInstanceType MlC518xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.18xlarge");
        public static AppResourceSpecInstanceType MlC524xlarge { get; } = new AppResourceSpecInstanceType("ml.c5.24xlarge");
        public static AppResourceSpecInstanceType MlP32xlarge { get; } = new AppResourceSpecInstanceType("ml.p3.2xlarge");
        public static AppResourceSpecInstanceType MlP38xlarge { get; } = new AppResourceSpecInstanceType("ml.p3.8xlarge");
        public static AppResourceSpecInstanceType MlP316xlarge { get; } = new AppResourceSpecInstanceType("ml.p3.16xlarge");
        public static AppResourceSpecInstanceType MlG4dnXlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.xlarge");
        public static AppResourceSpecInstanceType MlG4dn2xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.2xlarge");
        public static AppResourceSpecInstanceType MlG4dn4xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.4xlarge");
        public static AppResourceSpecInstanceType MlG4dn8xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.8xlarge");
        public static AppResourceSpecInstanceType MlG4dn12xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.12xlarge");
        public static AppResourceSpecInstanceType MlG4dn16xlarge { get; } = new AppResourceSpecInstanceType("ml.g4dn.16xlarge");

        public static bool operator ==(AppResourceSpecInstanceType left, AppResourceSpecInstanceType right) => left.Equals(right);
        public static bool operator !=(AppResourceSpecInstanceType left, AppResourceSpecInstanceType right) => !left.Equals(right);

        public static explicit operator string(AppResourceSpecInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppResourceSpecInstanceType other && Equals(other);
        public bool Equals(AppResourceSpecInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of app.
    /// </summary>
    [EnumType]
    public readonly struct AppType : IEquatable<AppType>
    {
        private readonly string _value;

        private AppType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppType JupyterServer { get; } = new AppType("JupyterServer");
        public static AppType KernelGateway { get; } = new AppType("KernelGateway");

        public static bool operator ==(AppType left, AppType right) => left.Equals(right);
        public static bool operator !=(AppType left, AppType right) => !left.Equals(right);

        public static explicit operator string(AppType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppType other && Equals(other);
        public bool Equals(AppType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct DataQualityJobDefinitionEndpointInputS3DataDistributionType : IEquatable<DataQualityJobDefinitionEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private DataQualityJobDefinitionEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataQualityJobDefinitionEndpointInputS3DataDistributionType FullyReplicated { get; } = new DataQualityJobDefinitionEndpointInputS3DataDistributionType("FullyReplicated");
        public static DataQualityJobDefinitionEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new DataQualityJobDefinitionEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(DataQualityJobDefinitionEndpointInputS3DataDistributionType left, DataQualityJobDefinitionEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(DataQualityJobDefinitionEndpointInputS3DataDistributionType left, DataQualityJobDefinitionEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(DataQualityJobDefinitionEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataQualityJobDefinitionEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(DataQualityJobDefinitionEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct DataQualityJobDefinitionEndpointInputS3InputMode : IEquatable<DataQualityJobDefinitionEndpointInputS3InputMode>
    {
        private readonly string _value;

        private DataQualityJobDefinitionEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataQualityJobDefinitionEndpointInputS3InputMode Pipe { get; } = new DataQualityJobDefinitionEndpointInputS3InputMode("Pipe");
        public static DataQualityJobDefinitionEndpointInputS3InputMode File { get; } = new DataQualityJobDefinitionEndpointInputS3InputMode("File");

        public static bool operator ==(DataQualityJobDefinitionEndpointInputS3InputMode left, DataQualityJobDefinitionEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(DataQualityJobDefinitionEndpointInputS3InputMode left, DataQualityJobDefinitionEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(DataQualityJobDefinitionEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataQualityJobDefinitionEndpointInputS3InputMode other && Equals(other);
        public bool Equals(DataQualityJobDefinitionEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct DataQualityJobDefinitionS3OutputS3UploadMode : IEquatable<DataQualityJobDefinitionS3OutputS3UploadMode>
    {
        private readonly string _value;

        private DataQualityJobDefinitionS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataQualityJobDefinitionS3OutputS3UploadMode Continuous { get; } = new DataQualityJobDefinitionS3OutputS3UploadMode("Continuous");
        public static DataQualityJobDefinitionS3OutputS3UploadMode EndOfJob { get; } = new DataQualityJobDefinitionS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(DataQualityJobDefinitionS3OutputS3UploadMode left, DataQualityJobDefinitionS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(DataQualityJobDefinitionS3OutputS3UploadMode left, DataQualityJobDefinitionS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(DataQualityJobDefinitionS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataQualityJobDefinitionS3OutputS3UploadMode other && Equals(other);
        public bool Equals(DataQualityJobDefinitionS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
    /// </summary>
    [EnumType]
    public readonly struct DomainAppNetworkAccessType : IEquatable<DomainAppNetworkAccessType>
    {
        private readonly string _value;

        private DomainAppNetworkAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainAppNetworkAccessType PublicInternetOnly { get; } = new DomainAppNetworkAccessType("PublicInternetOnly");
        public static DomainAppNetworkAccessType VpcOnly { get; } = new DomainAppNetworkAccessType("VpcOnly");

        public static bool operator ==(DomainAppNetworkAccessType left, DomainAppNetworkAccessType right) => left.Equals(right);
        public static bool operator !=(DomainAppNetworkAccessType left, DomainAppNetworkAccessType right) => !left.Equals(right);

        public static explicit operator string(DomainAppNetworkAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainAppNetworkAccessType other && Equals(other);
        public bool Equals(DomainAppNetworkAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The mode of authentication that members use to access the domain.
    /// </summary>
    [EnumType]
    public readonly struct DomainAuthMode : IEquatable<DomainAuthMode>
    {
        private readonly string _value;

        private DomainAuthMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainAuthMode Sso { get; } = new DomainAuthMode("SSO");
        public static DomainAuthMode Iam { get; } = new DomainAuthMode("IAM");

        public static bool operator ==(DomainAuthMode left, DomainAuthMode right) => left.Equals(right);
        public static bool operator !=(DomainAuthMode left, DomainAuthMode right) => !left.Equals(right);

        public static explicit operator string(DomainAuthMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainAuthMode other && Equals(other);
        public bool Equals(DomainAuthMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type that the image version runs on.
    /// </summary>
    [EnumType]
    public readonly struct DomainResourceSpecInstanceType : IEquatable<DomainResourceSpecInstanceType>
    {
        private readonly string _value;

        private DomainResourceSpecInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainResourceSpecInstanceType System { get; } = new DomainResourceSpecInstanceType("system");
        public static DomainResourceSpecInstanceType MlT3Micro { get; } = new DomainResourceSpecInstanceType("ml.t3.micro");
        public static DomainResourceSpecInstanceType MlT3Small { get; } = new DomainResourceSpecInstanceType("ml.t3.small");
        public static DomainResourceSpecInstanceType MlT3Medium { get; } = new DomainResourceSpecInstanceType("ml.t3.medium");
        public static DomainResourceSpecInstanceType MlT3Large { get; } = new DomainResourceSpecInstanceType("ml.t3.large");
        public static DomainResourceSpecInstanceType MlT3Xlarge { get; } = new DomainResourceSpecInstanceType("ml.t3.xlarge");
        public static DomainResourceSpecInstanceType MlT32xlarge { get; } = new DomainResourceSpecInstanceType("ml.t3.2xlarge");
        public static DomainResourceSpecInstanceType MlM5Large { get; } = new DomainResourceSpecInstanceType("ml.m5.large");
        public static DomainResourceSpecInstanceType MlM5Xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.xlarge");
        public static DomainResourceSpecInstanceType MlM52xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.2xlarge");
        public static DomainResourceSpecInstanceType MlM54xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.4xlarge");
        public static DomainResourceSpecInstanceType MlM58xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.8xlarge");
        public static DomainResourceSpecInstanceType MlM512xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.12xlarge");
        public static DomainResourceSpecInstanceType MlM516xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.16xlarge");
        public static DomainResourceSpecInstanceType MlM524xlarge { get; } = new DomainResourceSpecInstanceType("ml.m5.24xlarge");
        public static DomainResourceSpecInstanceType MlC5Large { get; } = new DomainResourceSpecInstanceType("ml.c5.large");
        public static DomainResourceSpecInstanceType MlC5Xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.xlarge");
        public static DomainResourceSpecInstanceType MlC52xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.2xlarge");
        public static DomainResourceSpecInstanceType MlC54xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.4xlarge");
        public static DomainResourceSpecInstanceType MlC59xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.9xlarge");
        public static DomainResourceSpecInstanceType MlC512xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.12xlarge");
        public static DomainResourceSpecInstanceType MlC518xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.18xlarge");
        public static DomainResourceSpecInstanceType MlC524xlarge { get; } = new DomainResourceSpecInstanceType("ml.c5.24xlarge");
        public static DomainResourceSpecInstanceType MlP32xlarge { get; } = new DomainResourceSpecInstanceType("ml.p3.2xlarge");
        public static DomainResourceSpecInstanceType MlP38xlarge { get; } = new DomainResourceSpecInstanceType("ml.p3.8xlarge");
        public static DomainResourceSpecInstanceType MlP316xlarge { get; } = new DomainResourceSpecInstanceType("ml.p3.16xlarge");
        public static DomainResourceSpecInstanceType MlG4dnXlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.xlarge");
        public static DomainResourceSpecInstanceType MlG4dn2xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.2xlarge");
        public static DomainResourceSpecInstanceType MlG4dn4xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.4xlarge");
        public static DomainResourceSpecInstanceType MlG4dn8xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.8xlarge");
        public static DomainResourceSpecInstanceType MlG4dn12xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.12xlarge");
        public static DomainResourceSpecInstanceType MlG4dn16xlarge { get; } = new DomainResourceSpecInstanceType("ml.g4dn.16xlarge");

        public static bool operator ==(DomainResourceSpecInstanceType left, DomainResourceSpecInstanceType right) => left.Equals(right);
        public static bool operator !=(DomainResourceSpecInstanceType left, DomainResourceSpecInstanceType right) => !left.Equals(right);

        public static explicit operator string(DomainResourceSpecInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainResourceSpecInstanceType other && Equals(other);
        public bool Equals(DomainResourceSpecInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
    /// </summary>
    [EnumType]
    public readonly struct DomainSharingSettingsNotebookOutputOption : IEquatable<DomainSharingSettingsNotebookOutputOption>
    {
        private readonly string _value;

        private DomainSharingSettingsNotebookOutputOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainSharingSettingsNotebookOutputOption Allowed { get; } = new DomainSharingSettingsNotebookOutputOption("Allowed");
        public static DomainSharingSettingsNotebookOutputOption Disabled { get; } = new DomainSharingSettingsNotebookOutputOption("Disabled");

        public static bool operator ==(DomainSharingSettingsNotebookOutputOption left, DomainSharingSettingsNotebookOutputOption right) => left.Equals(right);
        public static bool operator !=(DomainSharingSettingsNotebookOutputOption left, DomainSharingSettingsNotebookOutputOption right) => !left.Equals(right);

        public static explicit operator string(DomainSharingSettingsNotebookOutputOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainSharingSettingsNotebookOutputOption other && Equals(other);
        public bool Equals(DomainSharingSettingsNotebookOutputOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FeatureGroupFeatureDefinitionFeatureType : IEquatable<FeatureGroupFeatureDefinitionFeatureType>
    {
        private readonly string _value;

        private FeatureGroupFeatureDefinitionFeatureType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FeatureGroupFeatureDefinitionFeatureType Integral { get; } = new FeatureGroupFeatureDefinitionFeatureType("Integral");
        public static FeatureGroupFeatureDefinitionFeatureType Fractional { get; } = new FeatureGroupFeatureDefinitionFeatureType("Fractional");
        public static FeatureGroupFeatureDefinitionFeatureType String { get; } = new FeatureGroupFeatureDefinitionFeatureType("String");

        public static bool operator ==(FeatureGroupFeatureDefinitionFeatureType left, FeatureGroupFeatureDefinitionFeatureType right) => left.Equals(right);
        public static bool operator !=(FeatureGroupFeatureDefinitionFeatureType left, FeatureGroupFeatureDefinitionFeatureType right) => !left.Equals(right);

        public static explicit operator string(FeatureGroupFeatureDefinitionFeatureType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FeatureGroupFeatureDefinitionFeatureType other && Equals(other);
        public bool Equals(FeatureGroupFeatureDefinitionFeatureType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct ModelBiasJobDefinitionEndpointInputS3DataDistributionType : IEquatable<ModelBiasJobDefinitionEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private ModelBiasJobDefinitionEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelBiasJobDefinitionEndpointInputS3DataDistributionType FullyReplicated { get; } = new ModelBiasJobDefinitionEndpointInputS3DataDistributionType("FullyReplicated");
        public static ModelBiasJobDefinitionEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new ModelBiasJobDefinitionEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(ModelBiasJobDefinitionEndpointInputS3DataDistributionType left, ModelBiasJobDefinitionEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(ModelBiasJobDefinitionEndpointInputS3DataDistributionType left, ModelBiasJobDefinitionEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(ModelBiasJobDefinitionEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelBiasJobDefinitionEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(ModelBiasJobDefinitionEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct ModelBiasJobDefinitionEndpointInputS3InputMode : IEquatable<ModelBiasJobDefinitionEndpointInputS3InputMode>
    {
        private readonly string _value;

        private ModelBiasJobDefinitionEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelBiasJobDefinitionEndpointInputS3InputMode Pipe { get; } = new ModelBiasJobDefinitionEndpointInputS3InputMode("Pipe");
        public static ModelBiasJobDefinitionEndpointInputS3InputMode File { get; } = new ModelBiasJobDefinitionEndpointInputS3InputMode("File");

        public static bool operator ==(ModelBiasJobDefinitionEndpointInputS3InputMode left, ModelBiasJobDefinitionEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(ModelBiasJobDefinitionEndpointInputS3InputMode left, ModelBiasJobDefinitionEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(ModelBiasJobDefinitionEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelBiasJobDefinitionEndpointInputS3InputMode other && Equals(other);
        public bool Equals(ModelBiasJobDefinitionEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct ModelBiasJobDefinitionS3OutputS3UploadMode : IEquatable<ModelBiasJobDefinitionS3OutputS3UploadMode>
    {
        private readonly string _value;

        private ModelBiasJobDefinitionS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelBiasJobDefinitionS3OutputS3UploadMode Continuous { get; } = new ModelBiasJobDefinitionS3OutputS3UploadMode("Continuous");
        public static ModelBiasJobDefinitionS3OutputS3UploadMode EndOfJob { get; } = new ModelBiasJobDefinitionS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(ModelBiasJobDefinitionS3OutputS3UploadMode left, ModelBiasJobDefinitionS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(ModelBiasJobDefinitionS3OutputS3UploadMode left, ModelBiasJobDefinitionS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(ModelBiasJobDefinitionS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelBiasJobDefinitionS3OutputS3UploadMode other && Equals(other);
        public bool Equals(ModelBiasJobDefinitionS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType : IEquatable<ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType FullyReplicated { get; } = new ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType("FullyReplicated");
        public static ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType left, ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType left, ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct ModelExplainabilityJobDefinitionEndpointInputS3InputMode : IEquatable<ModelExplainabilityJobDefinitionEndpointInputS3InputMode>
    {
        private readonly string _value;

        private ModelExplainabilityJobDefinitionEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelExplainabilityJobDefinitionEndpointInputS3InputMode Pipe { get; } = new ModelExplainabilityJobDefinitionEndpointInputS3InputMode("Pipe");
        public static ModelExplainabilityJobDefinitionEndpointInputS3InputMode File { get; } = new ModelExplainabilityJobDefinitionEndpointInputS3InputMode("File");

        public static bool operator ==(ModelExplainabilityJobDefinitionEndpointInputS3InputMode left, ModelExplainabilityJobDefinitionEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(ModelExplainabilityJobDefinitionEndpointInputS3InputMode left, ModelExplainabilityJobDefinitionEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(ModelExplainabilityJobDefinitionEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelExplainabilityJobDefinitionEndpointInputS3InputMode other && Equals(other);
        public bool Equals(ModelExplainabilityJobDefinitionEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct ModelExplainabilityJobDefinitionS3OutputS3UploadMode : IEquatable<ModelExplainabilityJobDefinitionS3OutputS3UploadMode>
    {
        private readonly string _value;

        private ModelExplainabilityJobDefinitionS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelExplainabilityJobDefinitionS3OutputS3UploadMode Continuous { get; } = new ModelExplainabilityJobDefinitionS3OutputS3UploadMode("Continuous");
        public static ModelExplainabilityJobDefinitionS3OutputS3UploadMode EndOfJob { get; } = new ModelExplainabilityJobDefinitionS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(ModelExplainabilityJobDefinitionS3OutputS3UploadMode left, ModelExplainabilityJobDefinitionS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(ModelExplainabilityJobDefinitionS3OutputS3UploadMode left, ModelExplainabilityJobDefinitionS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(ModelExplainabilityJobDefinitionS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelExplainabilityJobDefinitionS3OutputS3UploadMode other && Equals(other);
        public bool Equals(ModelExplainabilityJobDefinitionS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of a modelpackage group job.
    /// </summary>
    [EnumType]
    public readonly struct ModelPackageGroupStatus : IEquatable<ModelPackageGroupStatus>
    {
        private readonly string _value;

        private ModelPackageGroupStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelPackageGroupStatus Pending { get; } = new ModelPackageGroupStatus("Pending");
        public static ModelPackageGroupStatus InProgress { get; } = new ModelPackageGroupStatus("InProgress");
        public static ModelPackageGroupStatus Completed { get; } = new ModelPackageGroupStatus("Completed");
        public static ModelPackageGroupStatus Failed { get; } = new ModelPackageGroupStatus("Failed");
        public static ModelPackageGroupStatus Deleting { get; } = new ModelPackageGroupStatus("Deleting");
        public static ModelPackageGroupStatus DeleteFailed { get; } = new ModelPackageGroupStatus("DeleteFailed");

        public static bool operator ==(ModelPackageGroupStatus left, ModelPackageGroupStatus right) => left.Equals(right);
        public static bool operator !=(ModelPackageGroupStatus left, ModelPackageGroupStatus right) => !left.Equals(right);

        public static explicit operator string(ModelPackageGroupStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelPackageGroupStatus other && Equals(other);
        public bool Equals(ModelPackageGroupStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionEndpointInputS3DataDistributionType : IEquatable<ModelQualityJobDefinitionEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionEndpointInputS3DataDistributionType FullyReplicated { get; } = new ModelQualityJobDefinitionEndpointInputS3DataDistributionType("FullyReplicated");
        public static ModelQualityJobDefinitionEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new ModelQualityJobDefinitionEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(ModelQualityJobDefinitionEndpointInputS3DataDistributionType left, ModelQualityJobDefinitionEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionEndpointInputS3DataDistributionType left, ModelQualityJobDefinitionEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionEndpointInputS3InputMode : IEquatable<ModelQualityJobDefinitionEndpointInputS3InputMode>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionEndpointInputS3InputMode Pipe { get; } = new ModelQualityJobDefinitionEndpointInputS3InputMode("Pipe");
        public static ModelQualityJobDefinitionEndpointInputS3InputMode File { get; } = new ModelQualityJobDefinitionEndpointInputS3InputMode("File");

        public static bool operator ==(ModelQualityJobDefinitionEndpointInputS3InputMode left, ModelQualityJobDefinitionEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionEndpointInputS3InputMode left, ModelQualityJobDefinitionEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionEndpointInputS3InputMode other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the monitoring job.
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionProblemType : IEquatable<ModelQualityJobDefinitionProblemType>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionProblemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionProblemType BinaryClassification { get; } = new ModelQualityJobDefinitionProblemType("BinaryClassification");
        public static ModelQualityJobDefinitionProblemType MulticlassClassification { get; } = new ModelQualityJobDefinitionProblemType("MulticlassClassification");
        public static ModelQualityJobDefinitionProblemType Regression { get; } = new ModelQualityJobDefinitionProblemType("Regression");

        public static bool operator ==(ModelQualityJobDefinitionProblemType left, ModelQualityJobDefinitionProblemType right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionProblemType left, ModelQualityJobDefinitionProblemType right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionProblemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionProblemType other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionProblemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct ModelQualityJobDefinitionS3OutputS3UploadMode : IEquatable<ModelQualityJobDefinitionS3OutputS3UploadMode>
    {
        private readonly string _value;

        private ModelQualityJobDefinitionS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ModelQualityJobDefinitionS3OutputS3UploadMode Continuous { get; } = new ModelQualityJobDefinitionS3OutputS3UploadMode("Continuous");
        public static ModelQualityJobDefinitionS3OutputS3UploadMode EndOfJob { get; } = new ModelQualityJobDefinitionS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(ModelQualityJobDefinitionS3OutputS3UploadMode left, ModelQualityJobDefinitionS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(ModelQualityJobDefinitionS3OutputS3UploadMode left, ModelQualityJobDefinitionS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(ModelQualityJobDefinitionS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ModelQualityJobDefinitionS3OutputS3UploadMode other && Equals(other);
        public bool Equals(ModelQualityJobDefinitionS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleEndpointInputS3DataDistributionType : IEquatable<MonitoringScheduleEndpointInputS3DataDistributionType>
    {
        private readonly string _value;

        private MonitoringScheduleEndpointInputS3DataDistributionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleEndpointInputS3DataDistributionType FullyReplicated { get; } = new MonitoringScheduleEndpointInputS3DataDistributionType("FullyReplicated");
        public static MonitoringScheduleEndpointInputS3DataDistributionType ShardedByS3Key { get; } = new MonitoringScheduleEndpointInputS3DataDistributionType("ShardedByS3Key");

        public static bool operator ==(MonitoringScheduleEndpointInputS3DataDistributionType left, MonitoringScheduleEndpointInputS3DataDistributionType right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleEndpointInputS3DataDistributionType left, MonitoringScheduleEndpointInputS3DataDistributionType right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleEndpointInputS3DataDistributionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleEndpointInputS3DataDistributionType other && Equals(other);
        public bool Equals(MonitoringScheduleEndpointInputS3DataDistributionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleEndpointInputS3InputMode : IEquatable<MonitoringScheduleEndpointInputS3InputMode>
    {
        private readonly string _value;

        private MonitoringScheduleEndpointInputS3InputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleEndpointInputS3InputMode Pipe { get; } = new MonitoringScheduleEndpointInputS3InputMode("Pipe");
        public static MonitoringScheduleEndpointInputS3InputMode File { get; } = new MonitoringScheduleEndpointInputS3InputMode("File");

        public static bool operator ==(MonitoringScheduleEndpointInputS3InputMode left, MonitoringScheduleEndpointInputS3InputMode right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleEndpointInputS3InputMode left, MonitoringScheduleEndpointInputS3InputMode right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleEndpointInputS3InputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleEndpointInputS3InputMode other && Equals(other);
        public bool Equals(MonitoringScheduleEndpointInputS3InputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the monitoring job.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus : IEquatable<MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus>
    {
        private readonly string _value;

        private MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Pending { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Pending");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Completed { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Completed");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus CompletedWithViolations { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("CompletedWithViolations");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus InProgress { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("InProgress");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Failed { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Failed");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Stopping { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Stopping");
        public static MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus Stopped { get; } = new MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus("Stopped");

        public static bool operator ==(MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus left, MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus left, MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus other && Equals(other);
        public bool Equals(MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of monitoring job.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleMonitoringType : IEquatable<MonitoringScheduleMonitoringType>
    {
        private readonly string _value;

        private MonitoringScheduleMonitoringType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleMonitoringType DataQuality { get; } = new MonitoringScheduleMonitoringType("DataQuality");
        public static MonitoringScheduleMonitoringType ModelQuality { get; } = new MonitoringScheduleMonitoringType("ModelQuality");
        public static MonitoringScheduleMonitoringType ModelBias { get; } = new MonitoringScheduleMonitoringType("ModelBias");
        public static MonitoringScheduleMonitoringType ModelExplainability { get; } = new MonitoringScheduleMonitoringType("ModelExplainability");

        public static bool operator ==(MonitoringScheduleMonitoringType left, MonitoringScheduleMonitoringType right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleMonitoringType left, MonitoringScheduleMonitoringType right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleMonitoringType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleMonitoringType other && Equals(other);
        public bool Equals(MonitoringScheduleMonitoringType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to upload the results of the monitoring job continuously or after the job completes.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleS3OutputS3UploadMode : IEquatable<MonitoringScheduleS3OutputS3UploadMode>
    {
        private readonly string _value;

        private MonitoringScheduleS3OutputS3UploadMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleS3OutputS3UploadMode Continuous { get; } = new MonitoringScheduleS3OutputS3UploadMode("Continuous");
        public static MonitoringScheduleS3OutputS3UploadMode EndOfJob { get; } = new MonitoringScheduleS3OutputS3UploadMode("EndOfJob");

        public static bool operator ==(MonitoringScheduleS3OutputS3UploadMode left, MonitoringScheduleS3OutputS3UploadMode right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleS3OutputS3UploadMode left, MonitoringScheduleS3OutputS3UploadMode right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleS3OutputS3UploadMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleS3OutputS3UploadMode other && Equals(other);
        public bool Equals(MonitoringScheduleS3OutputS3UploadMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of a schedule job.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringScheduleStatus : IEquatable<MonitoringScheduleStatus>
    {
        private readonly string _value;

        private MonitoringScheduleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringScheduleStatus Pending { get; } = new MonitoringScheduleStatus("Pending");
        public static MonitoringScheduleStatus Failed { get; } = new MonitoringScheduleStatus("Failed");
        public static MonitoringScheduleStatus Scheduled { get; } = new MonitoringScheduleStatus("Scheduled");
        public static MonitoringScheduleStatus Stopped { get; } = new MonitoringScheduleStatus("Stopped");

        public static bool operator ==(MonitoringScheduleStatus left, MonitoringScheduleStatus right) => left.Equals(right);
        public static bool operator !=(MonitoringScheduleStatus left, MonitoringScheduleStatus right) => !left.Equals(right);

        public static explicit operator string(MonitoringScheduleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringScheduleStatus other && Equals(other);
        public bool Equals(MonitoringScheduleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of a project.
    /// </summary>
    [EnumType]
    public readonly struct ProjectStatus : IEquatable<ProjectStatus>
    {
        private readonly string _value;

        private ProjectStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectStatus Pending { get; } = new ProjectStatus("Pending");
        public static ProjectStatus CreateInProgress { get; } = new ProjectStatus("CreateInProgress");
        public static ProjectStatus CreateCompleted { get; } = new ProjectStatus("CreateCompleted");
        public static ProjectStatus CreateFailed { get; } = new ProjectStatus("CreateFailed");
        public static ProjectStatus DeleteInProgress { get; } = new ProjectStatus("DeleteInProgress");
        public static ProjectStatus DeleteFailed { get; } = new ProjectStatus("DeleteFailed");
        public static ProjectStatus DeleteCompleted { get; } = new ProjectStatus("DeleteCompleted");

        public static bool operator ==(ProjectStatus left, ProjectStatus right) => left.Equals(right);
        public static bool operator !=(ProjectStatus left, ProjectStatus right) => !left.Equals(right);

        public static explicit operator string(ProjectStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectStatus other && Equals(other);
        public bool Equals(ProjectStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type that the image version runs on.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileResourceSpecInstanceType : IEquatable<UserProfileResourceSpecInstanceType>
    {
        private readonly string _value;

        private UserProfileResourceSpecInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileResourceSpecInstanceType System { get; } = new UserProfileResourceSpecInstanceType("system");
        public static UserProfileResourceSpecInstanceType MlT3Micro { get; } = new UserProfileResourceSpecInstanceType("ml.t3.micro");
        public static UserProfileResourceSpecInstanceType MlT3Small { get; } = new UserProfileResourceSpecInstanceType("ml.t3.small");
        public static UserProfileResourceSpecInstanceType MlT3Medium { get; } = new UserProfileResourceSpecInstanceType("ml.t3.medium");
        public static UserProfileResourceSpecInstanceType MlT3Large { get; } = new UserProfileResourceSpecInstanceType("ml.t3.large");
        public static UserProfileResourceSpecInstanceType MlT3Xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.t3.xlarge");
        public static UserProfileResourceSpecInstanceType MlT32xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.t3.2xlarge");
        public static UserProfileResourceSpecInstanceType MlM5Large { get; } = new UserProfileResourceSpecInstanceType("ml.m5.large");
        public static UserProfileResourceSpecInstanceType MlM5Xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.xlarge");
        public static UserProfileResourceSpecInstanceType MlM52xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.2xlarge");
        public static UserProfileResourceSpecInstanceType MlM54xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.4xlarge");
        public static UserProfileResourceSpecInstanceType MlM58xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.8xlarge");
        public static UserProfileResourceSpecInstanceType MlM512xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.12xlarge");
        public static UserProfileResourceSpecInstanceType MlM516xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.16xlarge");
        public static UserProfileResourceSpecInstanceType MlM524xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.m5.24xlarge");
        public static UserProfileResourceSpecInstanceType MlC5Large { get; } = new UserProfileResourceSpecInstanceType("ml.c5.large");
        public static UserProfileResourceSpecInstanceType MlC5Xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.xlarge");
        public static UserProfileResourceSpecInstanceType MlC52xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.2xlarge");
        public static UserProfileResourceSpecInstanceType MlC54xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.4xlarge");
        public static UserProfileResourceSpecInstanceType MlC59xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.9xlarge");
        public static UserProfileResourceSpecInstanceType MlC512xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.12xlarge");
        public static UserProfileResourceSpecInstanceType MlC518xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.18xlarge");
        public static UserProfileResourceSpecInstanceType MlC524xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.c5.24xlarge");
        public static UserProfileResourceSpecInstanceType MlP32xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.p3.2xlarge");
        public static UserProfileResourceSpecInstanceType MlP38xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.p3.8xlarge");
        public static UserProfileResourceSpecInstanceType MlP316xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.p3.16xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dnXlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn2xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.2xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn4xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.4xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn8xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.8xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn12xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.12xlarge");
        public static UserProfileResourceSpecInstanceType MlG4dn16xlarge { get; } = new UserProfileResourceSpecInstanceType("ml.g4dn.16xlarge");

        public static bool operator ==(UserProfileResourceSpecInstanceType left, UserProfileResourceSpecInstanceType right) => left.Equals(right);
        public static bool operator !=(UserProfileResourceSpecInstanceType left, UserProfileResourceSpecInstanceType right) => !left.Equals(right);

        public static explicit operator string(UserProfileResourceSpecInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileResourceSpecInstanceType other && Equals(other);
        public bool Equals(UserProfileResourceSpecInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileSharingSettingsNotebookOutputOption : IEquatable<UserProfileSharingSettingsNotebookOutputOption>
    {
        private readonly string _value;

        private UserProfileSharingSettingsNotebookOutputOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileSharingSettingsNotebookOutputOption Allowed { get; } = new UserProfileSharingSettingsNotebookOutputOption("Allowed");
        public static UserProfileSharingSettingsNotebookOutputOption Disabled { get; } = new UserProfileSharingSettingsNotebookOutputOption("Disabled");

        public static bool operator ==(UserProfileSharingSettingsNotebookOutputOption left, UserProfileSharingSettingsNotebookOutputOption right) => left.Equals(right);
        public static bool operator !=(UserProfileSharingSettingsNotebookOutputOption left, UserProfileSharingSettingsNotebookOutputOption right) => !left.Equals(right);

        public static explicit operator string(UserProfileSharingSettingsNotebookOutputOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileSharingSettingsNotebookOutputOption other && Equals(other);
        public bool Equals(UserProfileSharingSettingsNotebookOutputOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
