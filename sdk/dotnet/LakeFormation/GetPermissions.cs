// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.LakeFormation
{
    public static class GetPermissions
    {
        /// <summary>
        /// Resource Type definition for AWS::LakeFormation::Permissions
        /// </summary>
        public static Task<GetPermissionsResult> InvokeAsync(GetPermissionsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPermissionsResult>("aws-native:lakeformation:getPermissions", args ?? new GetPermissionsArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::LakeFormation::Permissions
        /// </summary>
        public static Output<GetPermissionsResult> Invoke(GetPermissionsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPermissionsResult>("aws-native:lakeformation:getPermissions", args ?? new GetPermissionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPermissionsArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetPermissionsArgs()
        {
        }
    }

    public sealed class GetPermissionsInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetPermissionsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPermissionsResult
    {
        public readonly Outputs.PermissionsDataLakePrincipal? DataLakePrincipal;
        public readonly string? Id;
        public readonly ImmutableArray<string> PermissionsValue;
        public readonly ImmutableArray<string> PermissionsWithGrantOption;
        public readonly Outputs.PermissionsResource? Resource;

        [OutputConstructor]
        private GetPermissionsResult(
            Outputs.PermissionsDataLakePrincipal? dataLakePrincipal,

            string? id,

            ImmutableArray<string> permissions,

            ImmutableArray<string> permissionsWithGrantOption,

            Outputs.PermissionsResource? resource)
        {
            DataLakePrincipal = dataLakePrincipal;
            Id = id;
            PermissionsValue = permissions;
            PermissionsWithGrantOption = permissionsWithGrantOption;
            Resource = resource;
        }
    }
}
