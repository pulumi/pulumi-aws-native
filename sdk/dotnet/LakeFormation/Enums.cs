// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.LakeFormation
{
    [EnumType]
    public readonly struct PrincipalPermissionsPermission : IEquatable<PrincipalPermissionsPermission>
    {
        private readonly string _value;

        private PrincipalPermissionsPermission(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrincipalPermissionsPermission All { get; } = new PrincipalPermissionsPermission("ALL");
        public static PrincipalPermissionsPermission Select { get; } = new PrincipalPermissionsPermission("SELECT");
        public static PrincipalPermissionsPermission Alter { get; } = new PrincipalPermissionsPermission("ALTER");
        public static PrincipalPermissionsPermission Drop { get; } = new PrincipalPermissionsPermission("DROP");
        public static PrincipalPermissionsPermission Delete { get; } = new PrincipalPermissionsPermission("DELETE");
        public static PrincipalPermissionsPermission Insert { get; } = new PrincipalPermissionsPermission("INSERT");
        public static PrincipalPermissionsPermission Describe { get; } = new PrincipalPermissionsPermission("DESCRIBE");
        public static PrincipalPermissionsPermission CreateDatabase { get; } = new PrincipalPermissionsPermission("CREATE_DATABASE");
        public static PrincipalPermissionsPermission CreateTable { get; } = new PrincipalPermissionsPermission("CREATE_TABLE");
        public static PrincipalPermissionsPermission DataLocationAccess { get; } = new PrincipalPermissionsPermission("DATA_LOCATION_ACCESS");
        public static PrincipalPermissionsPermission CreateTag { get; } = new PrincipalPermissionsPermission("CREATE_TAG");
        public static PrincipalPermissionsPermission Associate { get; } = new PrincipalPermissionsPermission("ASSOCIATE");

        public static bool operator ==(PrincipalPermissionsPermission left, PrincipalPermissionsPermission right) => left.Equals(right);
        public static bool operator !=(PrincipalPermissionsPermission left, PrincipalPermissionsPermission right) => !left.Equals(right);

        public static explicit operator string(PrincipalPermissionsPermission value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalPermissionsPermission other && Equals(other);
        public bool Equals(PrincipalPermissionsPermission other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrincipalPermissionsResourceType : IEquatable<PrincipalPermissionsResourceType>
    {
        private readonly string _value;

        private PrincipalPermissionsResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrincipalPermissionsResourceType Database { get; } = new PrincipalPermissionsResourceType("DATABASE");
        public static PrincipalPermissionsResourceType Table { get; } = new PrincipalPermissionsResourceType("TABLE");

        public static bool operator ==(PrincipalPermissionsResourceType left, PrincipalPermissionsResourceType right) => left.Equals(right);
        public static bool operator !=(PrincipalPermissionsResourceType left, PrincipalPermissionsResourceType right) => !left.Equals(right);

        public static explicit operator string(PrincipalPermissionsResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrincipalPermissionsResourceType other && Equals(other);
        public bool Equals(PrincipalPermissionsResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
