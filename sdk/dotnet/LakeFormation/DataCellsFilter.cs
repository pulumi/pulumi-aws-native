// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.LakeFormation
{
    /// <summary>
    /// A resource schema representing a Lake Formation Data Cells Filter.
    /// </summary>
    [AwsNativeResourceType("aws-native:lakeformation:DataCellsFilter")]
    public partial class DataCellsFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of columns to be included in this Data Cells Filter.
        /// </summary>
        [Output("columnNames")]
        public Output<ImmutableArray<string>> ColumnNames { get; private set; } = null!;

        /// <summary>
        /// An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required
        /// </summary>
        [Output("columnWildcard")]
        public Output<Outputs.DataCellsFilterColumnWildcard?> ColumnWildcard { get; private set; } = null!;

        /// <summary>
        /// The name of the Database that the Table resides in.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The desired name of the Data Cells Filter.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required
        /// </summary>
        [Output("rowFilter")]
        public Output<Outputs.DataCellsFilterRowFilter?> RowFilter { get; private set; } = null!;

        /// <summary>
        /// The Catalog Id of the Table on which to create a Data Cells Filter.
        /// </summary>
        [Output("tableCatalogId")]
        public Output<string> TableCatalogId { get; private set; } = null!;

        /// <summary>
        /// The name of the Table to create a Data Cells Filter for.
        /// </summary>
        [Output("tableName")]
        public Output<string> TableName { get; private set; } = null!;


        /// <summary>
        /// Create a DataCellsFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataCellsFilter(string name, DataCellsFilterArgs args, CustomResourceOptions? options = null)
            : base("aws-native:lakeformation:DataCellsFilter", name, args ?? new DataCellsFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataCellsFilter(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:lakeformation:DataCellsFilter", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataCellsFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataCellsFilter Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DataCellsFilter(name, id, options);
        }
    }

    public sealed class DataCellsFilterArgs : global::Pulumi.ResourceArgs
    {
        [Input("columnNames")]
        private InputList<string>? _columnNames;

        /// <summary>
        /// A list of columns to be included in this Data Cells Filter.
        /// </summary>
        public InputList<string> ColumnNames
        {
            get => _columnNames ?? (_columnNames = new InputList<string>());
            set => _columnNames = value;
        }

        /// <summary>
        /// An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required
        /// </summary>
        [Input("columnWildcard")]
        public Input<Inputs.DataCellsFilterColumnWildcardArgs>? ColumnWildcard { get; set; }

        /// <summary>
        /// The name of the Database that the Table resides in.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The desired name of the Data Cells Filter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required
        /// </summary>
        [Input("rowFilter")]
        public Input<Inputs.DataCellsFilterRowFilterArgs>? RowFilter { get; set; }

        /// <summary>
        /// The Catalog Id of the Table on which to create a Data Cells Filter.
        /// </summary>
        [Input("tableCatalogId", required: true)]
        public Input<string> TableCatalogId { get; set; } = null!;

        /// <summary>
        /// The name of the Table to create a Data Cells Filter for.
        /// </summary>
        [Input("tableName", required: true)]
        public Input<string> TableName { get; set; } = null!;

        public DataCellsFilterArgs()
        {
        }
        public static new DataCellsFilterArgs Empty => new DataCellsFilterArgs();
    }
}
