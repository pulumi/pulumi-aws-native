// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.M2
{
    /// <summary>
    /// Represents a runtime environment that can run migrated mainframe applications.
    /// </summary>
    [AwsNativeResourceType("aws-native:m2:Environment")]
    public partial class Environment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the environment.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("engineType")]
        public Output<Pulumi.AwsNative.M2.EnvironmentEngineType> EngineType { get; private set; } = null!;

        /// <summary>
        /// The version of the runtime engine for the environment.
        /// </summary>
        [Output("engineVersion")]
        public Output<string?> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the runtime environment.
        /// </summary>
        [Output("environmentArn")]
        public Output<string> EnvironmentArn { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the environment.
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        [Output("highAvailabilityConfig")]
        public Output<Outputs.EnvironmentHighAvailabilityConfig?> HighAvailabilityConfig { get; private set; } = null!;

        /// <summary>
        /// The type of instance underlying the environment.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configures a desired maintenance window for the environment. If you do not provide a value, a random system-generated value will be assigned.
        /// </summary>
        [Output("preferredMaintenanceWindow")]
        public Output<string?> PreferredMaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the environment is publicly accessible.
        /// </summary>
        [Output("publiclyAccessible")]
        public Output<bool?> PubliclyAccessible { get; private set; } = null!;

        /// <summary>
        /// The list of security groups for the VPC associated with this environment.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// The storage configurations defined for the runtime environment.
        /// </summary>
        [Output("storageConfigurations")]
        public Output<ImmutableArray<Outputs.EnvironmentStorageConfiguration>> StorageConfigurations { get; private set; } = null!;

        /// <summary>
        /// The unique identifiers of the subnets assigned to this runtime environment.
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// Tags associated to this environment.
        /// </summary>
        [Output("tags")]
        public Output<Outputs.EnvironmentTagMap?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Environment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Environment(string name, EnvironmentArgs args, CustomResourceOptions? options = null)
            : base("aws-native:m2:Environment", name, args ?? new EnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Environment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:m2:Environment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Environment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Environment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Environment(name, id, options);
        }
    }

    public sealed class EnvironmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the environment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("engineType", required: true)]
        public Input<Pulumi.AwsNative.M2.EnvironmentEngineType> EngineType { get; set; } = null!;

        /// <summary>
        /// The version of the runtime engine for the environment.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("highAvailabilityConfig")]
        public Input<Inputs.EnvironmentHighAvailabilityConfigArgs>? HighAvailabilityConfig { get; set; }

        /// <summary>
        /// The type of instance underlying the environment.
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// The name of the environment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configures a desired maintenance window for the environment. If you do not provide a value, a random system-generated value will be assigned.
        /// </summary>
        [Input("preferredMaintenanceWindow")]
        public Input<string>? PreferredMaintenanceWindow { get; set; }

        /// <summary>
        /// Specifies whether the environment is publicly accessible.
        /// </summary>
        [Input("publiclyAccessible")]
        public Input<bool>? PubliclyAccessible { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The list of security groups for the VPC associated with this environment.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("storageConfigurations")]
        private InputList<Inputs.EnvironmentStorageConfigurationArgs>? _storageConfigurations;

        /// <summary>
        /// The storage configurations defined for the runtime environment.
        /// </summary>
        public InputList<Inputs.EnvironmentStorageConfigurationArgs> StorageConfigurations
        {
            get => _storageConfigurations ?? (_storageConfigurations = new InputList<Inputs.EnvironmentStorageConfigurationArgs>());
            set => _storageConfigurations = value;
        }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// The unique identifiers of the subnets assigned to this runtime environment.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        /// <summary>
        /// Tags associated to this environment.
        /// </summary>
        [Input("tags")]
        public Input<Inputs.EnvironmentTagMapArgs>? Tags { get; set; }

        public EnvironmentArgs()
        {
        }
        public static new EnvironmentArgs Empty => new EnvironmentArgs();
    }
}
