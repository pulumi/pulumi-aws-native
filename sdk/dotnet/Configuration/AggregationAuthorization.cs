// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Configuration
{
    /// <summary>
    /// Resource Type definition for AWS::Config::AggregationAuthorization
    /// </summary>
    [AwsNativeResourceType("aws-native:configuration:AggregationAuthorization")]
    public partial class AggregationAuthorization : Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the AggregationAuthorization.
        /// </summary>
        [Output("aggregationAuthorizationArn")]
        public Output<string> AggregationAuthorizationArn { get; private set; } = null!;

        /// <summary>
        /// The 12-digit account ID of the account authorized to aggregate data.
        /// </summary>
        [Output("authorizedAccountId")]
        public Output<string> AuthorizedAccountId { get; private set; } = null!;

        /// <summary>
        /// The region authorized to collect aggregated data.
        /// </summary>
        [Output("authorizedAwsRegion")]
        public Output<string> AuthorizedAwsRegion { get; private set; } = null!;

        /// <summary>
        /// The tags for the AggregationAuthorization.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.AggregationAuthorizationTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a AggregationAuthorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AggregationAuthorization(string name, AggregationAuthorizationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:configuration:AggregationAuthorization", name, args ?? new AggregationAuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AggregationAuthorization(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:configuration:AggregationAuthorization", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AggregationAuthorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AggregationAuthorization Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AggregationAuthorization(name, id, options);
        }
    }

    public sealed class AggregationAuthorizationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The 12-digit account ID of the account authorized to aggregate data.
        /// </summary>
        [Input("authorizedAccountId", required: true)]
        public Input<string> AuthorizedAccountId { get; set; } = null!;

        /// <summary>
        /// The region authorized to collect aggregated data.
        /// </summary>
        [Input("authorizedAwsRegion", required: true)]
        public Input<string> AuthorizedAwsRegion { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.AggregationAuthorizationTagArgs>? _tags;

        /// <summary>
        /// The tags for the AggregationAuthorization.
        /// </summary>
        public InputList<Inputs.AggregationAuthorizationTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AggregationAuthorizationTagArgs>());
            set => _tags = value;
        }

        public AggregationAuthorizationArgs()
        {
        }
    }
}
