// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Configuration
{
    public static class GetConfigRule
    {
        /// <summary>
        /// You must first create and start the CC configuration recorder in order to create CC managed rules with CFNlong. For more information, see [Managing the Configuration Recorder](https://docs.aws.amazon.com/config/latest/developerguide/stop-start-recorder.html).
        ///  Adds or updates an CC rule to evaluate if your AWS resources comply with your desired configurations. For information on how many CC rules you can have per account, see [Service Limits](https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html) in the *Developer Guide*.
        ///  There are two types of rules: *Managed Rules* and *Custom Rules*. You can use the ``ConfigRule`` resource to create both CC Managed Rules and CC Custom Rules.
        ///  CC Managed Rules are predefined, customizable rules created by CC. For a list of managed rules, see [List of Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html). If you are adding an CC managed rule, you must specify the rule's identifi
        /// </summary>
        public static Task<GetConfigRuleResult> InvokeAsync(GetConfigRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigRuleResult>("aws-native:configuration:getConfigRule", args ?? new GetConfigRuleArgs(), options.WithDefaults());

        /// <summary>
        /// You must first create and start the CC configuration recorder in order to create CC managed rules with CFNlong. For more information, see [Managing the Configuration Recorder](https://docs.aws.amazon.com/config/latest/developerguide/stop-start-recorder.html).
        ///  Adds or updates an CC rule to evaluate if your AWS resources comply with your desired configurations. For information on how many CC rules you can have per account, see [Service Limits](https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html) in the *Developer Guide*.
        ///  There are two types of rules: *Managed Rules* and *Custom Rules*. You can use the ``ConfigRule`` resource to create both CC Managed Rules and CC Custom Rules.
        ///  CC Managed Rules are predefined, customizable rules created by CC. For a list of managed rules, see [List of Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html). If you are adding an CC managed rule, you must specify the rule's identifi
        /// </summary>
        public static Output<GetConfigRuleResult> Invoke(GetConfigRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigRuleResult>("aws-native:configuration:getConfigRule", args ?? new GetConfigRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name for the CC rule. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the rule name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
        /// </summary>
        [Input("configRuleName", required: true)]
        public string ConfigRuleName { get; set; } = null!;

        public GetConfigRuleArgs()
        {
        }
        public static new GetConfigRuleArgs Empty => new GetConfigRuleArgs();
    }

    public sealed class GetConfigRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name for the CC rule. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the rule name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
        /// </summary>
        [Input("configRuleName", required: true)]
        public Input<string> ConfigRuleName { get; set; } = null!;

        public GetConfigRuleInvokeArgs()
        {
        }
        public static new GetConfigRuleInvokeArgs Empty => new GetConfigRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigRuleResult
    {
        public readonly string? Arn;
        /// <summary>
        /// Indicates whether an AWS resource or CC rule is compliant and provides the number of contributors that affect the compliance.
        /// </summary>
        public readonly Outputs.ComplianceProperties? Compliance;
        public readonly string? ConfigRuleId;
        /// <summary>
        /// The description that you provide for the CC rule.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The modes the CC rule can be evaluated in. The valid values are distinct objects. By default, the value is Detective evaluation mode only.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConfigRuleEvaluationModeConfiguration> EvaluationModes;
        /// <summary>
        /// A string, in JSON format, that is passed to the CC rule Lambda function.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Config::ConfigRule` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? InputParameters;
        /// <summary>
        /// The maximum frequency with which CC runs evaluations for a rule. You can specify a value for ``MaximumExecutionFrequency`` when:
        ///   +  You are using an AWS managed rule that is triggered at a periodic frequency.
        ///   +  Your custom rule is triggered when CC delivers the configuration snapshot. For more information, see [ConfigSnapshotDeliveryProperties](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html).
        ///   
        ///   By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the ``MaximumExecutionFrequency`` parameter.
        /// </summary>
        public readonly string? MaximumExecutionFrequency;
        /// <summary>
        /// Defines which resources can trigger an evaluation for the rule. The scope can include one or more resource types, a combination of one resource type and one resource ID, or a combination of a tag key and value. Specify a scope to constrain the resources that can trigger an evaluation for the rule. If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.
        ///   The scope can be empty.
        /// </summary>
        public readonly Outputs.ConfigRuleScope? Scope;
        /// <summary>
        /// Provides the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the notifications that cause the function to evaluate your AWS resources.
        /// </summary>
        public readonly Outputs.ConfigRuleSource? Source;

        [OutputConstructor]
        private GetConfigRuleResult(
            string? arn,

            Outputs.ComplianceProperties? compliance,

            string? configRuleId,

            string? description,

            ImmutableArray<Outputs.ConfigRuleEvaluationModeConfiguration> evaluationModes,

            object? inputParameters,

            string? maximumExecutionFrequency,

            Outputs.ConfigRuleScope? scope,

            Outputs.ConfigRuleSource? source)
        {
            Arn = arn;
            Compliance = compliance;
            ConfigRuleId = configRuleId;
            Description = description;
            EvaluationModes = evaluationModes;
            InputParameters = inputParameters;
            MaximumExecutionFrequency = maximumExecutionFrequency;
            Scope = scope;
            Source = source;
        }
    }
}
