// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Configuration
{
    public static class GetStoredQuery
    {
        /// <summary>
        /// Resource Type definition for AWS::Config::StoredQuery
        /// </summary>
        public static Task<GetStoredQueryResult> InvokeAsync(GetStoredQueryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStoredQueryResult>("aws-native:configuration:getStoredQuery", args ?? new GetStoredQueryArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Config::StoredQuery
        /// </summary>
        public static Output<GetStoredQueryResult> Invoke(GetStoredQueryInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetStoredQueryResult>("aws-native:configuration:getStoredQuery", args ?? new GetStoredQueryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStoredQueryArgs : Pulumi.InvokeArgs
    {
        [Input("queryName", required: true)]
        public string QueryName { get; set; } = null!;

        public GetStoredQueryArgs()
        {
        }
    }

    public sealed class GetStoredQueryInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("queryName", required: true)]
        public Input<string> QueryName { get; set; } = null!;

        public GetStoredQueryInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStoredQueryResult
    {
        public readonly string? QueryArn;
        public readonly string? QueryDescription;
        public readonly string? QueryExpression;
        public readonly string? QueryId;
        /// <summary>
        /// The tags for the stored query.
        /// </summary>
        public readonly ImmutableArray<Outputs.StoredQueryTag> Tags;

        [OutputConstructor]
        private GetStoredQueryResult(
            string? queryArn,

            string? queryDescription,

            string? queryExpression,

            string? queryId,

            ImmutableArray<Outputs.StoredQueryTag> tags)
        {
            QueryArn = queryArn;
            QueryDescription = queryDescription;
            QueryExpression = queryExpression;
            QueryId = queryId;
            Tags = tags;
        }
    }
}
