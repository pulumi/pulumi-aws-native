// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SecretsManager.Outputs
{

    [OutputType]
    public sealed class RotationScheduleHostedRotationLambda
    {
        /// <summary>
        /// A string of the characters that you don't want in the password.
        /// </summary>
        public readonly string? ExcludeCharacters;
        /// <summary>
        /// The ARN of the KMS key that Secrets Manager uses to encrypt the secret. If you don't specify this value, then Secrets Manager uses the key aws/secretsmanager. If aws/secretsmanager doesn't yet exist, then Secrets Manager creates it for you automatically the first time it encrypts the secret value.
        /// </summary>
        public readonly string? KmsKeyArn;
        /// <summary>
        /// The ARN of the secret that contains superuser credentials, if you use the alternating users rotation strategy. CloudFormation grants the execution role for the Lambda rotation function GetSecretValue permission to the secret in this property.
        /// </summary>
        public readonly string? MasterSecretArn;
        /// <summary>
        /// The ARN of the KMS key that Secrets Manager used to encrypt the superuser secret, if you use the alternating users strategy and the superuser secret is encrypted with a customer managed key. You don't need to specify this property if the superuser secret is encrypted using the key aws/secretsmanager. CloudFormation grants the execution role for the Lambda rotation function Decrypt, DescribeKey, and GenerateDataKey permission to the key in this property.
        /// </summary>
        public readonly string? MasterSecretKmsKeyArn;
        /// <summary>
        /// The name of the Lambda rotation function.
        /// </summary>
        public readonly string? RotationLambdaName;
        /// <summary>
        /// The type of rotation template to use
        /// </summary>
        public readonly string RotationType;
        /// <summary>
        /// The python runtime associated with the Lambda function
        /// </summary>
        public readonly string? Runtime;
        /// <summary>
        /// The ARN of the secret that contains superuser credentials, if you use the alternating users rotation strategy. CloudFormation grants the execution role for the Lambda rotation function GetSecretValue permission to the secret in this property.
        /// </summary>
        public readonly string? SuperuserSecretArn;
        /// <summary>
        /// The ARN of the KMS key that Secrets Manager used to encrypt the superuser secret, if you use the alternating users strategy and the superuser secret is encrypted with a customer managed key. You don't need to specify this property if the superuser secret is encrypted using the key aws/secretsmanager. CloudFormation grants the execution role for the Lambda rotation function Decrypt, DescribeKey, and GenerateDataKey permission to the key in this property.
        /// </summary>
        public readonly string? SuperuserSecretKmsKeyArn;
        /// <summary>
        /// A comma-separated list of security group IDs applied to the target database.
        /// </summary>
        public readonly string? VpcSecurityGroupIds;
        /// <summary>
        /// A comma separated list of VPC subnet IDs of the target database network. The Lambda rotation function is in the same subnet group.
        /// </summary>
        public readonly string? VpcSubnetIds;

        [OutputConstructor]
        private RotationScheduleHostedRotationLambda(
            string? excludeCharacters,

            string? kmsKeyArn,

            string? masterSecretArn,

            string? masterSecretKmsKeyArn,

            string? rotationLambdaName,

            string rotationType,

            string? runtime,

            string? superuserSecretArn,

            string? superuserSecretKmsKeyArn,

            string? vpcSecurityGroupIds,

            string? vpcSubnetIds)
        {
            ExcludeCharacters = excludeCharacters;
            KmsKeyArn = kmsKeyArn;
            MasterSecretArn = masterSecretArn;
            MasterSecretKmsKeyArn = masterSecretKmsKeyArn;
            RotationLambdaName = rotationLambdaName;
            RotationType = rotationType;
            Runtime = runtime;
            SuperuserSecretArn = superuserSecretArn;
            SuperuserSecretKmsKeyArn = superuserSecretKmsKeyArn;
            VpcSecurityGroupIds = vpcSecurityGroupIds;
            VpcSubnetIds = vpcSubnetIds;
        }
    }
}
