// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Grafana
{
    /// <summary>
    /// These enums represent valid account access types. Specifically these enums determine whether the workspace can access AWS resources in the AWS account only, or whether it can also access resources in other accounts in the same organization. If the value CURRENT_ACCOUNT is used, a workspace role ARN must be provided. If the value is ORGANIZATION, a list of organizational units must be provided.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceAccountAccessType : IEquatable<WorkspaceAccountAccessType>
    {
        private readonly string _value;

        private WorkspaceAccountAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceAccountAccessType CurrentAccount { get; } = new WorkspaceAccountAccessType("CURRENT_ACCOUNT");
        public static WorkspaceAccountAccessType Organization { get; } = new WorkspaceAccountAccessType("ORGANIZATION");

        public static bool operator ==(WorkspaceAccountAccessType left, WorkspaceAccountAccessType right) => left.Equals(right);
        public static bool operator !=(WorkspaceAccountAccessType left, WorkspaceAccountAccessType right) => !left.Equals(right);

        public static explicit operator string(WorkspaceAccountAccessType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceAccountAccessType other && Equals(other);
        public bool Equals(WorkspaceAccountAccessType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Valid workspace authentication providers.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceAuthenticationProviderTypes : IEquatable<WorkspaceAuthenticationProviderTypes>
    {
        private readonly string _value;

        private WorkspaceAuthenticationProviderTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceAuthenticationProviderTypes AwsSso { get; } = new WorkspaceAuthenticationProviderTypes("AWS_SSO");
        public static WorkspaceAuthenticationProviderTypes Saml { get; } = new WorkspaceAuthenticationProviderTypes("SAML");

        public static bool operator ==(WorkspaceAuthenticationProviderTypes left, WorkspaceAuthenticationProviderTypes right) => left.Equals(right);
        public static bool operator !=(WorkspaceAuthenticationProviderTypes left, WorkspaceAuthenticationProviderTypes right) => !left.Equals(right);

        public static explicit operator string(WorkspaceAuthenticationProviderTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceAuthenticationProviderTypes other && Equals(other);
        public bool Equals(WorkspaceAuthenticationProviderTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// These enums represent valid AWS data sources that can be queried via the Grafana workspace. These data sources are primarily used to help customers visualize which data sources have been added to a service managed workspace IAM role.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceDataSourceType : IEquatable<WorkspaceDataSourceType>
    {
        private readonly string _value;

        private WorkspaceDataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceDataSourceType AmazonOpensearchService { get; } = new WorkspaceDataSourceType("AMAZON_OPENSEARCH_SERVICE");
        public static WorkspaceDataSourceType Cloudwatch { get; } = new WorkspaceDataSourceType("CLOUDWATCH");
        public static WorkspaceDataSourceType Prometheus { get; } = new WorkspaceDataSourceType("PROMETHEUS");
        public static WorkspaceDataSourceType Xray { get; } = new WorkspaceDataSourceType("XRAY");
        public static WorkspaceDataSourceType Timestream { get; } = new WorkspaceDataSourceType("TIMESTREAM");
        public static WorkspaceDataSourceType Sitewise { get; } = new WorkspaceDataSourceType("SITEWISE");
        public static WorkspaceDataSourceType Athena { get; } = new WorkspaceDataSourceType("ATHENA");
        public static WorkspaceDataSourceType Redshift { get; } = new WorkspaceDataSourceType("REDSHIFT");

        public static bool operator ==(WorkspaceDataSourceType left, WorkspaceDataSourceType right) => left.Equals(right);
        public static bool operator !=(WorkspaceDataSourceType left, WorkspaceDataSourceType right) => !left.Equals(right);

        public static explicit operator string(WorkspaceDataSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceDataSourceType other && Equals(other);
        public bool Equals(WorkspaceDataSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// These enums represent valid AWS notification destinations that the Grafana workspace has permission to use. These notification destinations are primarily used to help customers visualize which destinations have been added to a service managed IAM role.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceNotificationDestinationType : IEquatable<WorkspaceNotificationDestinationType>
    {
        private readonly string _value;

        private WorkspaceNotificationDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceNotificationDestinationType Sns { get; } = new WorkspaceNotificationDestinationType("SNS");

        public static bool operator ==(WorkspaceNotificationDestinationType left, WorkspaceNotificationDestinationType right) => left.Equals(right);
        public static bool operator !=(WorkspaceNotificationDestinationType left, WorkspaceNotificationDestinationType right) => !left.Equals(right);

        public static explicit operator string(WorkspaceNotificationDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceNotificationDestinationType other && Equals(other);
        public bool Equals(WorkspaceNotificationDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// These enums represent valid permission types to use when creating or configuring a Grafana workspace. The SERVICE_MANAGED permission type means the Managed Grafana service will create a workspace IAM role on your behalf. The CUSTOMER_MANAGED permission type means that the customer is expected to provide an IAM role that the Grafana workspace can use to query data sources.
    /// </summary>
    [EnumType]
    public readonly struct WorkspacePermissionType : IEquatable<WorkspacePermissionType>
    {
        private readonly string _value;

        private WorkspacePermissionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspacePermissionType CustomerManaged { get; } = new WorkspacePermissionType("CUSTOMER_MANAGED");
        public static WorkspacePermissionType ServiceManaged { get; } = new WorkspacePermissionType("SERVICE_MANAGED");

        public static bool operator ==(WorkspacePermissionType left, WorkspacePermissionType right) => left.Equals(right);
        public static bool operator !=(WorkspacePermissionType left, WorkspacePermissionType right) => !left.Equals(right);

        public static explicit operator string(WorkspacePermissionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspacePermissionType other && Equals(other);
        public bool Equals(WorkspacePermissionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Valid SAML configuration statuses.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceSamlConfigurationStatus : IEquatable<WorkspaceSamlConfigurationStatus>
    {
        private readonly string _value;

        private WorkspaceSamlConfigurationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceSamlConfigurationStatus Configured { get; } = new WorkspaceSamlConfigurationStatus("CONFIGURED");
        public static WorkspaceSamlConfigurationStatus NotConfigured { get; } = new WorkspaceSamlConfigurationStatus("NOT_CONFIGURED");

        public static bool operator ==(WorkspaceSamlConfigurationStatus left, WorkspaceSamlConfigurationStatus right) => left.Equals(right);
        public static bool operator !=(WorkspaceSamlConfigurationStatus left, WorkspaceSamlConfigurationStatus right) => !left.Equals(right);

        public static explicit operator string(WorkspaceSamlConfigurationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceSamlConfigurationStatus other && Equals(other);
        public bool Equals(WorkspaceSamlConfigurationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// These enums represent the status of a workspace.
    /// </summary>
    [EnumType]
    public readonly struct WorkspaceStatus : IEquatable<WorkspaceStatus>
    {
        private readonly string _value;

        private WorkspaceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkspaceStatus Active { get; } = new WorkspaceStatus("ACTIVE");
        public static WorkspaceStatus Creating { get; } = new WorkspaceStatus("CREATING");
        public static WorkspaceStatus Deleting { get; } = new WorkspaceStatus("DELETING");
        public static WorkspaceStatus Failed { get; } = new WorkspaceStatus("FAILED");
        public static WorkspaceStatus Updating { get; } = new WorkspaceStatus("UPDATING");
        public static WorkspaceStatus Upgrading { get; } = new WorkspaceStatus("UPGRADING");
        public static WorkspaceStatus VersionUpdating { get; } = new WorkspaceStatus("VERSION_UPDATING");
        public static WorkspaceStatus DeletionFailed { get; } = new WorkspaceStatus("DELETION_FAILED");
        public static WorkspaceStatus CreationFailed { get; } = new WorkspaceStatus("CREATION_FAILED");
        public static WorkspaceStatus UpdateFailed { get; } = new WorkspaceStatus("UPDATE_FAILED");
        public static WorkspaceStatus UpgradeFailed { get; } = new WorkspaceStatus("UPGRADE_FAILED");
        public static WorkspaceStatus LicenseRemovalFailed { get; } = new WorkspaceStatus("LICENSE_REMOVAL_FAILED");
        public static WorkspaceStatus VersionUpdateFailed { get; } = new WorkspaceStatus("VERSION_UPDATE_FAILED");

        public static bool operator ==(WorkspaceStatus left, WorkspaceStatus right) => left.Equals(right);
        public static bool operator !=(WorkspaceStatus left, WorkspaceStatus right) => !left.Equals(right);

        public static explicit operator string(WorkspaceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkspaceStatus other && Equals(other);
        public bool Equals(WorkspaceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
