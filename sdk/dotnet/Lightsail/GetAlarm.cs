// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lightsail
{
    public static class GetAlarm
    {
        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Alarm
        /// </summary>
        public static Task<GetAlarmResult> InvokeAsync(GetAlarmArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAlarmResult>("aws-native:lightsail:getAlarm", args ?? new GetAlarmArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Alarm
        /// </summary>
        public static Output<GetAlarmResult> Invoke(GetAlarmInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAlarmResult>("aws-native:lightsail:getAlarm", args ?? new GetAlarmInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlarmArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
        /// </summary>
        [Input("alarmName", required: true)]
        public string AlarmName { get; set; } = null!;

        public GetAlarmArgs()
        {
        }
    }

    public sealed class GetAlarmInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name for the alarm. Specify the name of an existing alarm to update, and overwrite the previous configuration of the alarm.
        /// </summary>
        [Input("alarmName", required: true)]
        public Input<string> AlarmName { get; set; } = null!;

        public GetAlarmInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAlarmResult
    {
        public readonly string? AlarmArn;
        /// <summary>
        /// The arithmetic operation to use when comparing the specified statistic to the threshold. The specified statistic value is used as the first operand.
        /// </summary>
        public readonly string? ComparisonOperator;
        /// <summary>
        /// The contact protocols to use for the alarm, such as Email, SMS (text messaging), or both.
        /// </summary>
        public readonly ImmutableArray<string> ContactProtocols;
        /// <summary>
        /// The number of data points that must be not within the specified threshold to trigger the alarm. If you are setting an "M out of N" alarm, this value (datapointsToAlarm) is the M.
        /// </summary>
        public readonly int? DatapointsToAlarm;
        /// <summary>
        /// The number of most recent periods over which data is compared to the specified threshold. If you are setting an "M out of N" alarm, this value (evaluationPeriods) is the N.
        /// </summary>
        public readonly int? EvaluationPeriods;
        /// <summary>
        /// Indicates whether the alarm is enabled. Notifications are enabled by default if you don't specify this parameter.
        /// </summary>
        public readonly bool? NotificationEnabled;
        /// <summary>
        /// The alarm states that trigger a notification.
        /// </summary>
        public readonly ImmutableArray<string> NotificationTriggers;
        /// <summary>
        /// The current state of the alarm.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The value against which the specified statistic is compared.
        /// </summary>
        public readonly double? Threshold;
        /// <summary>
        /// Sets how this alarm will handle missing data points.
        /// </summary>
        public readonly string? TreatMissingData;

        [OutputConstructor]
        private GetAlarmResult(
            string? alarmArn,

            string? comparisonOperator,

            ImmutableArray<string> contactProtocols,

            int? datapointsToAlarm,

            int? evaluationPeriods,

            bool? notificationEnabled,

            ImmutableArray<string> notificationTriggers,

            string? state,

            double? threshold,

            string? treatMissingData)
        {
            AlarmArn = alarmArn;
            ComparisonOperator = comparisonOperator;
            ContactProtocols = contactProtocols;
            DatapointsToAlarm = datapointsToAlarm;
            EvaluationPeriods = evaluationPeriods;
            NotificationEnabled = notificationEnabled;
            NotificationTriggers = notificationTriggers;
            State = state;
            Threshold = threshold;
            TreatMissingData = treatMissingData;
        }
    }
}
