// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lightsail
{
    public static class GetStaticIp
    {
        /// <summary>
        /// Resource Type definition for AWS::Lightsail::StaticIp
        /// </summary>
        public static Task<GetStaticIpResult> InvokeAsync(GetStaticIpArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStaticIpResult>("aws-native:lightsail:getStaticIp", args ?? new GetStaticIpArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Lightsail::StaticIp
        /// </summary>
        public static Output<GetStaticIpResult> Invoke(GetStaticIpInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetStaticIpResult>("aws-native:lightsail:getStaticIp", args ?? new GetStaticIpInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStaticIpArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the static IP address.
        /// </summary>
        [Input("staticIpName", required: true)]
        public string StaticIpName { get; set; } = null!;

        public GetStaticIpArgs()
        {
        }
    }

    public sealed class GetStaticIpInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the static IP address.
        /// </summary>
        [Input("staticIpName", required: true)]
        public Input<string> StaticIpName { get; set; } = null!;

        public GetStaticIpInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStaticIpResult
    {
        /// <summary>
        /// The instance where the static IP is attached.
        /// </summary>
        public readonly string? AttachedTo;
        /// <summary>
        /// The static IP address.
        /// </summary>
        public readonly string? IpAddress;
        /// <summary>
        /// A Boolean value indicating whether the static IP is attached.
        /// </summary>
        public readonly bool? IsAttached;
        public readonly string? StaticIpArn;

        [OutputConstructor]
        private GetStaticIpResult(
            string? attachedTo,

            string? ipAddress,

            bool? isAttached,

            string? staticIpArn)
        {
            AttachedTo = attachedTo;
            IpAddress = ipAddress;
            IsAttached = isAttached;
            StaticIpArn = staticIpArn;
        }
    }
}
