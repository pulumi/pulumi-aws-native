// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lightsail
{
    public static class GetDisk
    {
        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Disk
        /// </summary>
        public static Task<GetDiskResult> InvokeAsync(GetDiskArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiskResult>("aws-native:lightsail:getDisk", args ?? new GetDiskArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Disk
        /// </summary>
        public static Output<GetDiskResult> Invoke(GetDiskInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDiskResult>("aws-native:lightsail:getDisk", args ?? new GetDiskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDiskArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The names to use for your new Lightsail disk.
        /// </summary>
        [Input("diskName", required: true)]
        public string DiskName { get; set; } = null!;

        public GetDiskArgs()
        {
        }
    }

    public sealed class GetDiskInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The names to use for your new Lightsail disk.
        /// </summary>
        [Input("diskName", required: true)]
        public Input<string> DiskName { get; set; } = null!;

        public GetDiskInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDiskResult
    {
        /// <summary>
        /// An array of objects representing the add-ons to enable for the new instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.DiskAddOn> AddOns;
        /// <summary>
        /// Name of the attached Lightsail Instance
        /// </summary>
        public readonly string? AttachedTo;
        /// <summary>
        /// Attachment State of the Lightsail disk
        /// </summary>
        public readonly string? AttachmentState;
        public readonly string? DiskArn;
        /// <summary>
        /// Iops of the Lightsail disk
        /// </summary>
        public readonly int? Iops;
        /// <summary>
        /// Check is Disk is attached state
        /// </summary>
        public readonly bool? IsAttached;
        public readonly Outputs.DiskLocation? Location;
        /// <summary>
        /// Path of the  attached Disk
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Resource type of Lightsail instance.
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// State of the Lightsail disk
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Support code to help identify any issues
        /// </summary>
        public readonly string? SupportCode;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.DiskTag> Tags;

        [OutputConstructor]
        private GetDiskResult(
            ImmutableArray<Outputs.DiskAddOn> addOns,

            string? attachedTo,

            string? attachmentState,

            string? diskArn,

            int? iops,

            bool? isAttached,

            Outputs.DiskLocation? location,

            string? path,

            string? resourceType,

            string? state,

            string? supportCode,

            ImmutableArray<Outputs.DiskTag> tags)
        {
            AddOns = addOns;
            AttachedTo = attachedTo;
            AttachmentState = attachmentState;
            DiskArn = diskArn;
            Iops = iops;
            IsAttached = isAttached;
            Location = location;
            Path = path;
            ResourceType = resourceType;
            State = state;
            SupportCode = supportCode;
            Tags = tags;
        }
    }
}
