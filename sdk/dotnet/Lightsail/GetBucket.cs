// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lightsail
{
    public static class GetBucket
    {
        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Bucket
        /// </summary>
        public static Task<GetBucketResult> InvokeAsync(GetBucketArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBucketResult>("aws-native:lightsail:getBucket", args ?? new GetBucketArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Bucket
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetBucketResult>("aws-native:lightsail:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name for the bucket.
        /// </summary>
        [Input("bucketName", required: true)]
        public string BucketName { get; set; } = null!;

        public GetBucketArgs()
        {
        }
    }

    public sealed class GetBucketInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name for the bucket.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        public GetBucketInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBucketResult
    {
        /// <summary>
        /// Indicates whether the bundle that is currently applied to a bucket can be changed to another bundle. You can update a bucket's bundle only one time within a monthly AWS billing cycle.
        /// </summary>
        public readonly bool? AbleToUpdateBundle;
        public readonly Outputs.BucketAccessRules? AccessRules;
        public readonly string? BucketArn;
        /// <summary>
        /// The ID of the bundle to use for the bucket.
        /// </summary>
        public readonly string? BundleId;
        /// <summary>
        /// Specifies whether to enable or disable versioning of objects in the bucket.
        /// </summary>
        public readonly bool? ObjectVersioning;
        /// <summary>
        /// An array of strings to specify the AWS account IDs that can access the bucket.
        /// </summary>
        public readonly ImmutableArray<string> ReadOnlyAccessAccounts;
        /// <summary>
        /// The names of the Lightsail resources for which to set bucket access.
        /// </summary>
        public readonly ImmutableArray<string> ResourcesReceivingAccess;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.BucketTag> Tags;
        /// <summary>
        /// The URL of the bucket.
        /// </summary>
        public readonly string? Url;

        [OutputConstructor]
        private GetBucketResult(
            bool? ableToUpdateBundle,

            Outputs.BucketAccessRules? accessRules,

            string? bucketArn,

            string? bundleId,

            bool? objectVersioning,

            ImmutableArray<string> readOnlyAccessAccounts,

            ImmutableArray<string> resourcesReceivingAccess,

            ImmutableArray<Outputs.BucketTag> tags,

            string? url)
        {
            AbleToUpdateBundle = ableToUpdateBundle;
            AccessRules = accessRules;
            BucketArn = bucketArn;
            BundleId = bundleId;
            ObjectVersioning = objectVersioning;
            ReadOnlyAccessAccounts = readOnlyAccessAccounts;
            ResourcesReceivingAccess = resourcesReceivingAccess;
            Tags = tags;
            Url = url;
        }
    }
}
