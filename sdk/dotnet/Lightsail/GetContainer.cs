// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lightsail
{
    public static class GetContainer
    {
        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Container
        /// </summary>
        public static Task<GetContainerResult> InvokeAsync(GetContainerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetContainerResult>("aws-native:lightsail:getContainer", args ?? new GetContainerArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Container
        /// </summary>
        public static Output<GetContainerResult> Invoke(GetContainerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetContainerResult>("aws-native:lightsail:getContainer", args ?? new GetContainerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name for the container service.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetContainerArgs()
        {
        }
    }

    public sealed class GetContainerInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name for the container service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetContainerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetContainerResult
    {
        public readonly string? ContainerArn;
        /// <summary>
        /// Describes a container deployment configuration of an Amazon Lightsail container service.
        /// </summary>
        public readonly Outputs.ContainerServiceDeployment? ContainerServiceDeployment;
        /// <summary>
        /// A Boolean value to indicate whether the container service is disabled.
        /// </summary>
        public readonly bool? IsDisabled;
        /// <summary>
        /// The power specification for the container service.
        /// </summary>
        public readonly string? Power;
        /// <summary>
        /// The public domain names to use with the container service, such as example.com and www.example.com.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerPublicDomainName> PublicDomainNames;
        /// <summary>
        /// The scale specification for the container service.
        /// </summary>
        public readonly int? Scale;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerTag> Tags;
        /// <summary>
        /// The publicly accessible URL of the container service.
        /// </summary>
        public readonly string? Url;

        [OutputConstructor]
        private GetContainerResult(
            string? containerArn,

            Outputs.ContainerServiceDeployment? containerServiceDeployment,

            bool? isDisabled,

            string? power,

            ImmutableArray<Outputs.ContainerPublicDomainName> publicDomainNames,

            int? scale,

            ImmutableArray<Outputs.ContainerTag> tags,

            string? url)
        {
            ContainerArn = containerArn;
            ContainerServiceDeployment = containerServiceDeployment;
            IsDisabled = isDisabled;
            Power = power;
            PublicDomainNames = publicDomainNames;
            Scale = scale;
            Tags = tags;
            Url = url;
        }
    }
}
