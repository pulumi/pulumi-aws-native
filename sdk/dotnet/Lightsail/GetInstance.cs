// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lightsail
{
    public static class GetInstance
    {
        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Instance
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("aws-native:lightsail:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Lightsail::Instance
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("aws-native:lightsail:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The names to use for your new Lightsail instance.
        /// </summary>
        [Input("instanceName", required: true)]
        public string InstanceName { get; set; } = null!;

        public GetInstanceArgs()
        {
        }
    }

    public sealed class GetInstanceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The names to use for your new Lightsail instance.
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        public GetInstanceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// An array of objects representing the add-ons to enable for the new instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstanceAddOn> AddOns;
        public readonly Outputs.InstanceHardware? Hardware;
        public readonly string? InstanceArn;
        /// <summary>
        /// Is the IP Address of the Instance is the static IP
        /// </summary>
        public readonly bool? IsStaticIp;
        /// <summary>
        /// The name of your key pair.
        /// </summary>
        public readonly string? KeyPairName;
        public readonly Outputs.InstanceLocation? Location;
        public readonly Outputs.InstanceNetworking? Networking;
        /// <summary>
        /// Private IP Address of the Instance
        /// </summary>
        public readonly string? PrivateIpAddress;
        /// <summary>
        /// Public IP Address of the Instance
        /// </summary>
        public readonly string? PublicIpAddress;
        /// <summary>
        /// Resource type of Lightsail instance.
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// SSH Key Name of the  Lightsail instance.
        /// </summary>
        public readonly string? SshKeyName;
        public readonly Outputs.InstanceState? State;
        /// <summary>
        /// Support code to help identify any issues
        /// </summary>
        public readonly string? SupportCode;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstanceTag> Tags;
        /// <summary>
        /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.
        /// </summary>
        public readonly string? UserData;
        /// <summary>
        /// Username of the  Lightsail instance.
        /// </summary>
        public readonly string? UserName;

        [OutputConstructor]
        private GetInstanceResult(
            ImmutableArray<Outputs.InstanceAddOn> addOns,

            Outputs.InstanceHardware? hardware,

            string? instanceArn,

            bool? isStaticIp,

            string? keyPairName,

            Outputs.InstanceLocation? location,

            Outputs.InstanceNetworking? networking,

            string? privateIpAddress,

            string? publicIpAddress,

            string? resourceType,

            string? sshKeyName,

            Outputs.InstanceState? state,

            string? supportCode,

            ImmutableArray<Outputs.InstanceTag> tags,

            string? userData,

            string? userName)
        {
            AddOns = addOns;
            Hardware = hardware;
            InstanceArn = instanceArn;
            IsStaticIp = isStaticIp;
            KeyPairName = keyPairName;
            Location = location;
            Networking = networking;
            PrivateIpAddress = privateIpAddress;
            PublicIpAddress = publicIpAddress;
            ResourceType = resourceType;
            SshKeyName = sshKeyName;
            State = state;
            SupportCode = supportCode;
            Tags = tags;
            UserData = userData;
            UserName = userName;
        }
    }
}
