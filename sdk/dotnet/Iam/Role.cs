// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Iam
{
    /// <summary>
    /// Creates a new role for your AWS-account.
    ///   For more information about roles, see [IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html) in the *IAM User Guide*. For information about quotas for role names and the number of roles you can create, see [IAM and quotas](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html) in the *IAM User Guide*.
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var iamRole = new AwsNative.Iam.Role("iamRole", new()
    ///     {
    ///         AssumeRolePolicyDocument = new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = "2012-10-17",
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = new[]
    ///                         {
    ///                             "cloudformation.amazonaws.com",
    ///                             "gamelift.amazonaws.com",
    ///                         },
    ///                     },
    ///                     ["action"] = "sts:AssumeRole",
    ///                 },
    ///             },
    ///         },
    ///         RoleName = "ScriptIAMRole",
    ///         Policies = new[]
    ///         {
    ///             new AwsNative.Iam.Inputs.RolePolicyArgs
    ///             {
    ///                 PolicyName = "ScriptResourceIAMPolicy",
    ///                 PolicyDocument = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["version"] = "2012-10-17",
    ///                     ["statement"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["effect"] = "Allow",
    ///                             ["action"] = new[]
    ///                             {
    ///                                 "s3:GetObject",
    ///                                 "s3:GetObjectVersion",
    ///                                 "s3:GetObjectMetadata",
    ///                                 "s3:*Object*",
    ///                             },
    ///                             ["resource"] = new[]
    ///                             {
    ///                                 "*",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var scriptResource = new AwsNative.GameLift.Script("scriptResource", new()
    ///     {
    ///         Name = "MyRealtimeScript",
    ///         Version = "v1.0",
    ///         StorageLocation = new AwsNative.GameLift.Inputs.ScriptS3LocationArgs
    ///         {
    ///             Bucket = "MyBucketName",
    ///             Key = "MyScriptFiles.zip",
    ///             RoleArn = iamRole.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var iamRole = new AwsNative.Iam.Role("iamRole", new()
    ///     {
    ///         AssumeRolePolicyDocument = new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = "2012-10-17",
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = new[]
    ///                         {
    ///                             "cloudformation.amazonaws.com",
    ///                             "gamelift.amazonaws.com",
    ///                         },
    ///                     },
    ///                     ["action"] = "sts:AssumeRole",
    ///                 },
    ///             },
    ///         },
    ///         RoleName = "ScriptIAMRole",
    ///         Policies = new[]
    ///         {
    ///             new AwsNative.Iam.Inputs.RolePolicyArgs
    ///             {
    ///                 PolicyName = "ScriptResourceIAMPolicy",
    ///                 PolicyDocument = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["version"] = "2012-10-17",
    ///                     ["statement"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["effect"] = "Allow",
    ///                             ["action"] = new[]
    ///                             {
    ///                                 "s3:GetObject",
    ///                                 "s3:GetObjectVersion",
    ///                                 "s3:GetObjectMetadata",
    ///                                 "s3:*Object*",
    ///                             },
    ///                             ["resource"] = new[]
    ///                             {
    ///                                 "*",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var scriptResource = new AwsNative.GameLift.Script("scriptResource", new()
    ///     {
    ///         Name = "MyRealtimeScript",
    ///         Version = "v1.0",
    ///         StorageLocation = new AwsNative.GameLift.Inputs.ScriptS3LocationArgs
    ///         {
    ///             Bucket = "MyBucketName",
    ///             Key = "MyScriptFiles.zip",
    ///             RoleArn = iamRole.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var amazonGrafanaWorkspaceIAMRole = new AwsNative.Iam.Role("amazonGrafanaWorkspaceIAMRole", new()
    ///     {
    ///         ManagedPolicyArns = new[]
    ///         {
    ///             "arn:aws:iam::aws:policy/service-role/AmazonGrafanaAthenaAccess",
    ///         },
    ///         AssumeRolePolicyDocument = new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = "2012-10-17",
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = new[]
    ///                         {
    ///                             "grafana.amazonaws.com",
    ///                         },
    ///                     },
    ///                     ["action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var amazonGrafanaWorkspace = new AwsNative.Grafana.Workspace("amazonGrafanaWorkspace", new()
    ///     {
    ///         AccountAccessType = AwsNative.Grafana.WorkspaceAccountAccessType.CurrentAccount,
    ///         Name = "AmazonGrafanaWorkspace",
    ///         Description = "Amazon Grafana Workspace",
    ///         AuthenticationProviders = new[]
    ///         {
    ///             AwsNative.Grafana.WorkspaceAuthenticationProviderTypes.Saml,
    ///         },
    ///         PermissionType = AwsNative.Grafana.WorkspacePermissionType.CustomerManaged,
    ///         GrafanaVersion = "9.4",
    ///         RoleArn = amazonGrafanaWorkspaceIAMRole.Arn,
    ///         SamlConfiguration = new AwsNative.Grafana.Inputs.WorkspaceSamlConfigurationArgs
    ///         {
    ///             IdpMetadata = new AwsNative.Grafana.Inputs.WorkspaceIdpMetadataArgs
    ///             {
    ///                 Xml = "&lt;md:EntityDescriptor xmlns:md='urn:oasis:names:tc:SAML:2.0:metadata' entityID='entityId'&gt;DATA&lt;/md:EntityDescriptor&gt;",
    ///             },
    ///             AssertionAttributes = new AwsNative.Grafana.Inputs.WorkspaceAssertionAttributesArgs
    ///             {
    ///                 Name = "displayName",
    ///                 Login = "login",
    ///                 Email = "email",
    ///                 Groups = "group",
    ///                 Role = "role",
    ///                 Org = "org",
    ///             },
    ///             RoleValues = new AwsNative.Grafana.Inputs.WorkspaceRoleValuesArgs
    ///             {
    ///                 Editor = new[]
    ///                 {
    ///                     "editor1",
    ///                 },
    ///                 Admin = new[]
    ///                 {
    ///                     "admin1",
    ///                 },
    ///             },
    ///             AllowedOrganizations = new[]
    ///             {
    ///                 "org1",
    ///             },
    ///             LoginValidityDuration = 60,
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["workspaceEndpoint"] = amazonGrafanaWorkspace.Endpoint,
    ///         ["workspaceStatus"] = amazonGrafanaWorkspace.Status,
    ///         ["workspaceId"] = amazonGrafanaWorkspace.Id,
    ///         ["grafanaVersion"] = amazonGrafanaWorkspace.GrafanaVersion,
    ///     };
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var amazonGrafanaWorkspaceIAMRole = new AwsNative.Iam.Role("amazonGrafanaWorkspaceIAMRole", new()
    ///     {
    ///         ManagedPolicyArns = new[]
    ///         {
    ///             "arn:aws:iam::aws:policy/service-role/AmazonGrafanaAthenaAccess",
    ///         },
    ///         AssumeRolePolicyDocument = new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = "2012-10-17",
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = new[]
    ///                         {
    ///                             "grafana.amazonaws.com",
    ///                         },
    ///                     },
    ///                     ["action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var amazonGrafanaWorkspace = new AwsNative.Grafana.Workspace("amazonGrafanaWorkspace", new()
    ///     {
    ///         AccountAccessType = AwsNative.Grafana.WorkspaceAccountAccessType.CurrentAccount,
    ///         Name = "AmazonGrafanaWorkspace",
    ///         Description = "Amazon Grafana Workspace",
    ///         AuthenticationProviders = new[]
    ///         {
    ///             AwsNative.Grafana.WorkspaceAuthenticationProviderTypes.Saml,
    ///         },
    ///         PermissionType = AwsNative.Grafana.WorkspacePermissionType.CustomerManaged,
    ///         GrafanaVersion = "9.4",
    ///         RoleArn = amazonGrafanaWorkspaceIAMRole.Arn,
    ///         SamlConfiguration = new AwsNative.Grafana.Inputs.WorkspaceSamlConfigurationArgs
    ///         {
    ///             IdpMetadata = new AwsNative.Grafana.Inputs.WorkspaceIdpMetadataArgs
    ///             {
    ///                 Xml = "&lt;md:EntityDescriptor xmlns:md='urn:oasis:names:tc:SAML:2.0:metadata' entityID='entityId'&gt;DATA&lt;/md:EntityDescriptor&gt;",
    ///             },
    ///             AssertionAttributes = new AwsNative.Grafana.Inputs.WorkspaceAssertionAttributesArgs
    ///             {
    ///                 Name = "displayName",
    ///                 Login = "login",
    ///                 Email = "email",
    ///                 Groups = "group",
    ///                 Role = "role",
    ///                 Org = "org",
    ///             },
    ///             RoleValues = new AwsNative.Grafana.Inputs.WorkspaceRoleValuesArgs
    ///             {
    ///                 Editor = new[]
    ///                 {
    ///                     "editor1",
    ///                 },
    ///                 Admin = new[]
    ///                 {
    ///                     "admin1",
    ///                 },
    ///             },
    ///             AllowedOrganizations = new[]
    ///             {
    ///                 "org1",
    ///             },
    ///             LoginValidityDuration = 60,
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["workspaceEndpoint"] = amazonGrafanaWorkspace.Endpoint,
    ///         ["workspaceStatus"] = amazonGrafanaWorkspace.Status,
    ///         ["workspaceId"] = amazonGrafanaWorkspace.Id,
    ///         ["grafanaVersion"] = amazonGrafanaWorkspace.GrafanaVersion,
    ///     };
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var rootRole = new AwsNative.Iam.Role("rootRole", new()
    ///     {
    ///         AssumeRolePolicyDocument = new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = "2012-10-17",
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = new[]
    ///                         {
    ///                             "ec2.amazonaws.com",
    ///                         },
    ///                     },
    ///                     ["action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Path = "/",
    ///         Policies = new[]
    ///         {
    ///             new AwsNative.Iam.Inputs.RolePolicyArgs
    ///             {
    ///                 PolicyName = "root",
    ///                 PolicyDocument = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["version"] = "2012-10-17",
    ///                     ["statement"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["effect"] = "Allow",
    ///                             ["action"] = "*",
    ///                             ["resource"] = "*",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var rootInstanceProfile = new AwsNative.Iam.InstanceProfile("rootInstanceProfile", new()
    ///     {
    ///         Path = "/",
    ///         Roles = new[]
    ///         {
    ///             rootRole.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var rootRole = new AwsNative.Iam.Role("rootRole", new()
    ///     {
    ///         AssumeRolePolicyDocument = new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = "2012-10-17",
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = new[]
    ///                         {
    ///                             "ec2.amazonaws.com",
    ///                         },
    ///                     },
    ///                     ["action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Path = "/",
    ///         Policies = new[]
    ///         {
    ///             new AwsNative.Iam.Inputs.RolePolicyArgs
    ///             {
    ///                 PolicyName = "root",
    ///                 PolicyDocument = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["version"] = "2012-10-17",
    ///                     ["statement"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["effect"] = "Allow",
    ///                             ["action"] = "*",
    ///                             ["resource"] = "*",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var rootInstanceProfile = new AwsNative.Iam.InstanceProfile("rootInstanceProfile", new()
    ///     {
    ///         Path = "/",
    ///         Roles = new[]
    ///         {
    ///             rootRole.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var automationExecutionRole = new AwsNative.Iam.Role("automationExecutionRole", new()
    ///     {
    ///         AssumeRolePolicyDocument = new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = "2012-10-17",
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = "ssm.amazonaws.com",
    ///                     },
    ///                     ["action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Path = "/",
    ///         ManagedPolicyArns = new[]
    ///         {
    ///             "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess",
    ///         },
    ///     });
    /// 
    ///     var automationAssociation = new AwsNative.Ssm.Association("automationAssociation", new()
    ///     {
    ///         Name = "AWS-StopEC2Instance",
    ///         Parameters = 
    ///         {
    ///             { "automationAssumeRole", new[]
    ///             {
    ///                 "AutomationExecutionRole.Arn",
    ///             } },
    ///         },
    ///         Targets = new[]
    ///         {
    ///             new AwsNative.Ssm.Inputs.AssociationTargetArgs
    ///             {
    ///                 Key = "ParameterValues",
    ///                 Values = new[]
    ///                 {
    ///                     "i-1234567890abcdef0",
    ///                 },
    ///             },
    ///         },
    ///         AutomationTargetParameterName = "InstanceId",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:iam:Role")]
    public partial class Role : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Returns the Amazon Resource Name (ARN) for the role. For example:
        /// 
        /// `{"Fn::GetAtt" : ["MyRole", "Arn"] }`
        /// 
        /// This will return a value such as `arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF` .
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The trust policy that is associated with this role. Trust policies define which entities can assume the role. You can associate only one trust policy with a role. For an example of a policy that can be used to assume a role, see [Template Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples). For more information about the elements that you can use in an IAM policy, see [Policy Elements Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html) in the *User Guide*.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::IAM::Role` for more information about the expected schema for this property.
        /// </summary>
        [Output("assumeRolePolicyDocument")]
        public Output<object> AssumeRolePolicyDocument { get; private set; } = null!;

        /// <summary>
        /// A description of the role that you provide.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
        ///  For more information about ARNs, see [Amazon Resource Names (ARNs) and Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
        /// </summary>
        [Output("managedPolicyArns")]
        public Output<ImmutableArray<string>> ManagedPolicyArns { get; private set; } = null!;

        /// <summary>
        /// The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default value of one hour is applied. This setting can have a value from 1 hour to 12 hours.
        ///  Anyone who assumes the role from the CLI or API can use the ``DurationSeconds`` API parameter or the ``duration-seconds`` CLI parameter to request a longer session. The ``MaxSessionDuration`` setting determines the maximum duration that can be requested using the ``DurationSeconds`` parameter. If users don't specify a value for the ``DurationSeconds`` parameter, their security credentials are valid for one hour by default. This applies when you use the ``AssumeRole*`` API operations or the ``assume-role*`` CLI operations but does not apply when you use those operations to create a console URL. For more information, see [Using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the *IAM User Guide*.
        /// </summary>
        [Output("maxSessionDuration")]
        public Output<int?> MaxSessionDuration { get; private set; } = null!;

        /// <summary>
        /// The path to the role. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
        ///  This parameter is optional. If it is not included, it defaults to a slash (/).
        ///  This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// The ARN of the policy used to set the permissions boundary for the role.
        ///  For more information about permissions boundaries, see [Permissions boundaries for IAM identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide*.
        /// </summary>
        [Output("permissionsBoundary")]
        public Output<string?> PermissionsBoundary { get; private set; } = null!;

        /// <summary>
        /// Adds or updates an inline policy document that is embedded in the specified IAM role.
        /// 
        /// When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role. You can update a role's trust policy later. For more information about IAM roles, go to [Using Roles to Delegate Permissions and Federate Identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html) .
        /// 
        /// A role can also have an attached managed policy. For information about policies, see [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *IAM User Guide* .
        /// 
        /// For information about limits on the number of inline policies that you can embed with a role, see [Limitations on IAM Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *IAM User Guide* .
        /// 
        /// &gt; If an external policy (such as `AWS::IAM::Policy` or `AWS::IAM::ManagedPolicy` ) has a `Ref` to a role and if a resource (such as `AWS::ECS::Service` ) also has a `Ref` to the same role, add a `DependsOn` attribute to the resource to make the resource depend on the external policy. This dependency ensures that the role's policy is available throughout the resource's lifecycle. For example, when you delete a stack with an `AWS::ECS::Service` resource, the `DependsOn` attribute ensures that AWS CloudFormation deletes the `AWS::ECS::Service` resource before deleting its role's policy.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<Outputs.RolePolicy>> Policies { get; private set; } = null!;

        /// <summary>
        /// Returns the stable and unique string identifying the role. For example, `AIDAJQABLZS4A3QDU576Q` .
        /// 
        /// For more information about IDs, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html) in the *IAM User Guide* .
        /// </summary>
        [Output("roleId")]
        public Output<string> RoleId { get; private set; } = null!;

        /// <summary>
        /// A name for the IAM role, up to 64 characters in length. For valid values, see the `RoleName` parameter for the [`CreateRole`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html) action in the *IAM User Guide* .
        /// 
        /// This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. The role name must be unique within the account. Role names are not distinguished by case. For example, you cannot create roles named both "Role1" and "role1".
        /// 
        /// If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the role name.
        /// 
        /// If you specify a name, you must specify the `CAPABILITY_NAMED_IAM` value to acknowledge your template's capabilities. For more information, see [Acknowledging IAM Resources in AWS CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities) .
        /// 
        /// &gt; Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To prevent this, we recommend using `Fn::Join` and `AWS::Region` to create a Region-specific name, as in the following example: `{"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "MyResourceName"}]]}` .
        /// </summary>
        [Output("roleName")]
        public Output<string?> RoleName { get; private set; } = null!;

        /// <summary>
        /// A list of tags that are attached to the role. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Role resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Role(string name, RoleArgs args, CustomResourceOptions? options = null)
            : base("aws-native:iam:Role", name, args ?? new RoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Role(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:iam:Role", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "path",
                    "roleName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Role resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Role Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Role(name, id, options);
        }
    }

    public sealed class RoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The trust policy that is associated with this role. Trust policies define which entities can assume the role. You can associate only one trust policy with a role. For an example of a policy that can be used to assume a role, see [Template Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples). For more information about the elements that you can use in an IAM policy, see [Policy Elements Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html) in the *User Guide*.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::IAM::Role` for more information about the expected schema for this property.
        /// </summary>
        [Input("assumeRolePolicyDocument", required: true)]
        public Input<object> AssumeRolePolicyDocument { get; set; } = null!;

        /// <summary>
        /// A description of the role that you provide.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("managedPolicyArns")]
        private InputList<string>? _managedPolicyArns;

        /// <summary>
        /// A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
        ///  For more information about ARNs, see [Amazon Resource Names (ARNs) and Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
        /// </summary>
        public InputList<string> ManagedPolicyArns
        {
            get => _managedPolicyArns ?? (_managedPolicyArns = new InputList<string>());
            set => _managedPolicyArns = value;
        }

        /// <summary>
        /// The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default value of one hour is applied. This setting can have a value from 1 hour to 12 hours.
        ///  Anyone who assumes the role from the CLI or API can use the ``DurationSeconds`` API parameter or the ``duration-seconds`` CLI parameter to request a longer session. The ``MaxSessionDuration`` setting determines the maximum duration that can be requested using the ``DurationSeconds`` parameter. If users don't specify a value for the ``DurationSeconds`` parameter, their security credentials are valid for one hour by default. This applies when you use the ``AssumeRole*`` API operations or the ``assume-role*`` CLI operations but does not apply when you use those operations to create a console URL. For more information, see [Using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the *IAM User Guide*.
        /// </summary>
        [Input("maxSessionDuration")]
        public Input<int>? MaxSessionDuration { get; set; }

        /// <summary>
        /// The path to the role. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
        ///  This parameter is optional. If it is not included, it defaults to a slash (/).
        ///  This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The ARN of the policy used to set the permissions boundary for the role.
        ///  For more information about permissions boundaries, see [Permissions boundaries for IAM identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide*.
        /// </summary>
        [Input("permissionsBoundary")]
        public Input<string>? PermissionsBoundary { get; set; }

        [Input("policies")]
        private InputList<Inputs.RolePolicyArgs>? _policies;

        /// <summary>
        /// Adds or updates an inline policy document that is embedded in the specified IAM role.
        /// 
        /// When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role. You can update a role's trust policy later. For more information about IAM roles, go to [Using Roles to Delegate Permissions and Federate Identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html) .
        /// 
        /// A role can also have an attached managed policy. For information about policies, see [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *IAM User Guide* .
        /// 
        /// For information about limits on the number of inline policies that you can embed with a role, see [Limitations on IAM Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *IAM User Guide* .
        /// 
        /// &gt; If an external policy (such as `AWS::IAM::Policy` or `AWS::IAM::ManagedPolicy` ) has a `Ref` to a role and if a resource (such as `AWS::ECS::Service` ) also has a `Ref` to the same role, add a `DependsOn` attribute to the resource to make the resource depend on the external policy. This dependency ensures that the role's policy is available throughout the resource's lifecycle. For example, when you delete a stack with an `AWS::ECS::Service` resource, the `DependsOn` attribute ensures that AWS CloudFormation deletes the `AWS::ECS::Service` resource before deleting its role's policy.
        /// </summary>
        public InputList<Inputs.RolePolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.RolePolicyArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// A name for the IAM role, up to 64 characters in length. For valid values, see the `RoleName` parameter for the [`CreateRole`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html) action in the *IAM User Guide* .
        /// 
        /// This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. The role name must be unique within the account. Role names are not distinguished by case. For example, you cannot create roles named both "Role1" and "role1".
        /// 
        /// If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the role name.
        /// 
        /// If you specify a name, you must specify the `CAPABILITY_NAMED_IAM` value to acknowledge your template's capabilities. For more information, see [Acknowledging IAM Resources in AWS CloudFormation Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities) .
        /// 
        /// &gt; Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To prevent this, we recommend using `Fn::Join` and `AWS::Region` to create a Region-specific name, as in the following example: `{"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "MyResourceName"}]]}` .
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// A list of tags that are attached to the role. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public RoleArgs()
        {
        }
        public static new RoleArgs Empty => new RoleArgs();
    }
}
