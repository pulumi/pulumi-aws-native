// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Iam
{
    public static class GetGroup
    {
        /// <summary>
        /// Resource Type definition for AWS::IAM::Group
        /// </summary>
        public static Task<GetGroupResult> InvokeAsync(GetGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupResult>("aws-native:iam:getGroup", args ?? new GetGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::IAM::Group
        /// </summary>
        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupResult>("aws-native:iam:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the group to create
        /// </summary>
        [Input("groupName", required: true)]
        public string GroupName { get; set; } = null!;

        public GetGroupArgs()
        {
        }
        public static new GetGroupArgs Empty => new GetGroupArgs();
    }

    public sealed class GetGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the group to create
        /// </summary>
        [Input("groupName", required: true)]
        public Input<string> GroupName { get; set; } = null!;

        public GetGroupInvokeArgs()
        {
        }
        public static new GetGroupInvokeArgs Empty => new GetGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupResult
    {
        /// <summary>
        /// The Arn of the group to create
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role. 
        /// </summary>
        public readonly ImmutableArray<string> ManagedPolicyArns;
        /// <summary>
        /// The path to the group
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Adds or updates an inline policy document that is embedded in the specified IAM group
        /// </summary>
        public readonly ImmutableArray<Outputs.GroupPolicy> Policies;

        [OutputConstructor]
        private GetGroupResult(
            string? arn,

            ImmutableArray<string> managedPolicyArns,

            string? path,

            ImmutableArray<Outputs.GroupPolicy> policies)
        {
            Arn = arn;
            ManagedPolicyArns = managedPolicyArns;
            Path = path;
            Policies = policies;
        }
    }
}
