// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Iam
{
    public static class GetRole
    {
        /// <summary>
        /// Resource Type definition for AWS::IAM::Role
        /// </summary>
        public static Task<GetRoleResult> InvokeAsync(GetRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleResult>("aws-native:iam:getRole", args ?? new GetRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::IAM::Role
        /// </summary>
        public static Output<GetRoleResult> Invoke(GetRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleResult>("aws-native:iam:getRole", args ?? new GetRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleArgs : global::Pulumi.InvokeArgs
    {
        [Input("roleId", required: true)]
        public string RoleId { get; set; } = null!;

        public GetRoleArgs()
        {
        }
        public static new GetRoleArgs Empty => new GetRoleArgs();
    }

    public sealed class GetRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("roleId", required: true)]
        public Input<string> RoleId { get; set; } = null!;

        public GetRoleInvokeArgs()
        {
        }
        public static new GetRoleInvokeArgs Empty => new GetRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleResult
    {
        public readonly string? Arn;
        public readonly object? AssumeRolePolicyDocument;
        public readonly string? Description;
        public readonly ImmutableArray<string> ManagedPolicyArns;
        public readonly int? MaxSessionDuration;
        public readonly string? PermissionsBoundary;
        public readonly ImmutableArray<Outputs.RolePolicy> Policies;
        public readonly string? RoleId;
        public readonly ImmutableArray<Outputs.RoleTag> Tags;

        [OutputConstructor]
        private GetRoleResult(
            string? arn,

            object? assumeRolePolicyDocument,

            string? description,

            ImmutableArray<string> managedPolicyArns,

            int? maxSessionDuration,

            string? permissionsBoundary,

            ImmutableArray<Outputs.RolePolicy> policies,

            string? roleId,

            ImmutableArray<Outputs.RoleTag> tags)
        {
            Arn = arn;
            AssumeRolePolicyDocument = assumeRolePolicyDocument;
            Description = description;
            ManagedPolicyArns = managedPolicyArns;
            MaxSessionDuration = maxSessionDuration;
            PermissionsBoundary = permissionsBoundary;
            Policies = policies;
            RoleId = roleId;
            Tags = tags;
        }
    }
}
