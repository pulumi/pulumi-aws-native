// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.CE
{
    /// <summary>
    /// The dimensions to evaluate
    /// </summary>
    [EnumType]
    public readonly struct AnomalyMonitorMonitorDimension : IEquatable<AnomalyMonitorMonitorDimension>
    {
        private readonly string _value;

        private AnomalyMonitorMonitorDimension(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnomalyMonitorMonitorDimension Service { get; } = new AnomalyMonitorMonitorDimension("SERVICE");

        public static bool operator ==(AnomalyMonitorMonitorDimension left, AnomalyMonitorMonitorDimension right) => left.Equals(right);
        public static bool operator !=(AnomalyMonitorMonitorDimension left, AnomalyMonitorMonitorDimension right) => !left.Equals(right);

        public static explicit operator string(AnomalyMonitorMonitorDimension value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnomalyMonitorMonitorDimension other && Equals(other);
        public bool Equals(AnomalyMonitorMonitorDimension other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnomalyMonitorMonitorType : IEquatable<AnomalyMonitorMonitorType>
    {
        private readonly string _value;

        private AnomalyMonitorMonitorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnomalyMonitorMonitorType Dimensional { get; } = new AnomalyMonitorMonitorType("DIMENSIONAL");
        public static AnomalyMonitorMonitorType Custom { get; } = new AnomalyMonitorMonitorType("CUSTOM");

        public static bool operator ==(AnomalyMonitorMonitorType left, AnomalyMonitorMonitorType right) => left.Equals(right);
        public static bool operator !=(AnomalyMonitorMonitorType left, AnomalyMonitorMonitorType right) => !left.Equals(right);

        public static explicit operator string(AnomalyMonitorMonitorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnomalyMonitorMonitorType other && Equals(other);
        public bool Equals(AnomalyMonitorMonitorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The frequency at which anomaly reports are sent over email. 
    /// </summary>
    [EnumType]
    public readonly struct AnomalySubscriptionFrequency : IEquatable<AnomalySubscriptionFrequency>
    {
        private readonly string _value;

        private AnomalySubscriptionFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnomalySubscriptionFrequency Daily { get; } = new AnomalySubscriptionFrequency("DAILY");
        public static AnomalySubscriptionFrequency Immediate { get; } = new AnomalySubscriptionFrequency("IMMEDIATE");
        public static AnomalySubscriptionFrequency Weekly { get; } = new AnomalySubscriptionFrequency("WEEKLY");

        public static bool operator ==(AnomalySubscriptionFrequency left, AnomalySubscriptionFrequency right) => left.Equals(right);
        public static bool operator !=(AnomalySubscriptionFrequency left, AnomalySubscriptionFrequency right) => !left.Equals(right);

        public static explicit operator string(AnomalySubscriptionFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnomalySubscriptionFrequency other && Equals(other);
        public bool Equals(AnomalySubscriptionFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnomalySubscriptionSubscriberStatus : IEquatable<AnomalySubscriptionSubscriberStatus>
    {
        private readonly string _value;

        private AnomalySubscriptionSubscriberStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnomalySubscriptionSubscriberStatus Confirmed { get; } = new AnomalySubscriptionSubscriberStatus("CONFIRMED");
        public static AnomalySubscriptionSubscriberStatus Declined { get; } = new AnomalySubscriptionSubscriberStatus("DECLINED");

        public static bool operator ==(AnomalySubscriptionSubscriberStatus left, AnomalySubscriptionSubscriberStatus right) => left.Equals(right);
        public static bool operator !=(AnomalySubscriptionSubscriberStatus left, AnomalySubscriptionSubscriberStatus right) => !left.Equals(right);

        public static explicit operator string(AnomalySubscriptionSubscriberStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnomalySubscriptionSubscriberStatus other && Equals(other);
        public bool Equals(AnomalySubscriptionSubscriberStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnomalySubscriptionSubscriberType : IEquatable<AnomalySubscriptionSubscriberType>
    {
        private readonly string _value;

        private AnomalySubscriptionSubscriberType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnomalySubscriptionSubscriberType Email { get; } = new AnomalySubscriptionSubscriberType("EMAIL");
        public static AnomalySubscriptionSubscriberType Sns { get; } = new AnomalySubscriptionSubscriberType("SNS");

        public static bool operator ==(AnomalySubscriptionSubscriberType left, AnomalySubscriptionSubscriberType right) => left.Equals(right);
        public static bool operator !=(AnomalySubscriptionSubscriberType left, AnomalySubscriptionSubscriberType right) => !left.Equals(right);

        public static explicit operator string(AnomalySubscriptionSubscriberType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnomalySubscriptionSubscriberType other && Equals(other);
        public bool Equals(AnomalySubscriptionSubscriberType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CostCategoryRuleVersion : IEquatable<CostCategoryRuleVersion>
    {
        private readonly string _value;

        private CostCategoryRuleVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CostCategoryRuleVersion CostCategoryExpressionV1 { get; } = new CostCategoryRuleVersion("CostCategoryExpression.v1");

        public static bool operator ==(CostCategoryRuleVersion left, CostCategoryRuleVersion right) => left.Equals(right);
        public static bool operator !=(CostCategoryRuleVersion left, CostCategoryRuleVersion right) => !left.Equals(right);

        public static explicit operator string(CostCategoryRuleVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CostCategoryRuleVersion other && Equals(other);
        public bool Equals(CostCategoryRuleVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
