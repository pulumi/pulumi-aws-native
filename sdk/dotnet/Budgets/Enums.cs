// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Budgets
{
    [EnumType]
    public readonly struct BudgetsActionActionThresholdType : IEquatable<BudgetsActionActionThresholdType>
    {
        private readonly string _value;

        private BudgetsActionActionThresholdType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BudgetsActionActionThresholdType Percentage { get; } = new BudgetsActionActionThresholdType("PERCENTAGE");
        public static BudgetsActionActionThresholdType AbsoluteValue { get; } = new BudgetsActionActionThresholdType("ABSOLUTE_VALUE");

        public static bool operator ==(BudgetsActionActionThresholdType left, BudgetsActionActionThresholdType right) => left.Equals(right);
        public static bool operator !=(BudgetsActionActionThresholdType left, BudgetsActionActionThresholdType right) => !left.Equals(right);

        public static explicit operator string(BudgetsActionActionThresholdType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BudgetsActionActionThresholdType other && Equals(other);
        public bool Equals(BudgetsActionActionThresholdType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BudgetsActionActionType : IEquatable<BudgetsActionActionType>
    {
        private readonly string _value;

        private BudgetsActionActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BudgetsActionActionType ApplyIamPolicy { get; } = new BudgetsActionActionType("APPLY_IAM_POLICY");
        public static BudgetsActionActionType ApplyScpPolicy { get; } = new BudgetsActionActionType("APPLY_SCP_POLICY");
        public static BudgetsActionActionType RunSsmDocuments { get; } = new BudgetsActionActionType("RUN_SSM_DOCUMENTS");

        public static bool operator ==(BudgetsActionActionType left, BudgetsActionActionType right) => left.Equals(right);
        public static bool operator !=(BudgetsActionActionType left, BudgetsActionActionType right) => !left.Equals(right);

        public static explicit operator string(BudgetsActionActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BudgetsActionActionType other && Equals(other);
        public bool Equals(BudgetsActionActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BudgetsActionApprovalModel : IEquatable<BudgetsActionApprovalModel>
    {
        private readonly string _value;

        private BudgetsActionApprovalModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BudgetsActionApprovalModel Automatic { get; } = new BudgetsActionApprovalModel("AUTOMATIC");
        public static BudgetsActionApprovalModel Manual { get; } = new BudgetsActionApprovalModel("MANUAL");

        public static bool operator ==(BudgetsActionApprovalModel left, BudgetsActionApprovalModel right) => left.Equals(right);
        public static bool operator !=(BudgetsActionApprovalModel left, BudgetsActionApprovalModel right) => !left.Equals(right);

        public static explicit operator string(BudgetsActionApprovalModel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BudgetsActionApprovalModel other && Equals(other);
        public bool Equals(BudgetsActionApprovalModel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BudgetsActionNotificationType : IEquatable<BudgetsActionNotificationType>
    {
        private readonly string _value;

        private BudgetsActionNotificationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BudgetsActionNotificationType Actual { get; } = new BudgetsActionNotificationType("ACTUAL");
        public static BudgetsActionNotificationType Forecasted { get; } = new BudgetsActionNotificationType("FORECASTED");

        public static bool operator ==(BudgetsActionNotificationType left, BudgetsActionNotificationType right) => left.Equals(right);
        public static bool operator !=(BudgetsActionNotificationType left, BudgetsActionNotificationType right) => !left.Equals(right);

        public static explicit operator string(BudgetsActionNotificationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BudgetsActionNotificationType other && Equals(other);
        public bool Equals(BudgetsActionNotificationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BudgetsActionSsmActionDefinitionSubtype : IEquatable<BudgetsActionSsmActionDefinitionSubtype>
    {
        private readonly string _value;

        private BudgetsActionSsmActionDefinitionSubtype(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BudgetsActionSsmActionDefinitionSubtype StopEc2Instances { get; } = new BudgetsActionSsmActionDefinitionSubtype("STOP_EC2_INSTANCES");
        public static BudgetsActionSsmActionDefinitionSubtype StopRdsInstances { get; } = new BudgetsActionSsmActionDefinitionSubtype("STOP_RDS_INSTANCES");

        public static bool operator ==(BudgetsActionSsmActionDefinitionSubtype left, BudgetsActionSsmActionDefinitionSubtype right) => left.Equals(right);
        public static bool operator !=(BudgetsActionSsmActionDefinitionSubtype left, BudgetsActionSsmActionDefinitionSubtype right) => !left.Equals(right);

        public static explicit operator string(BudgetsActionSsmActionDefinitionSubtype value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BudgetsActionSsmActionDefinitionSubtype other && Equals(other);
        public bool Equals(BudgetsActionSsmActionDefinitionSubtype other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BudgetsActionSubscriberType : IEquatable<BudgetsActionSubscriberType>
    {
        private readonly string _value;

        private BudgetsActionSubscriberType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BudgetsActionSubscriberType Sns { get; } = new BudgetsActionSubscriberType("SNS");
        public static BudgetsActionSubscriberType Email { get; } = new BudgetsActionSubscriberType("EMAIL");

        public static bool operator ==(BudgetsActionSubscriberType left, BudgetsActionSubscriberType right) => left.Equals(right);
        public static bool operator !=(BudgetsActionSubscriberType left, BudgetsActionSubscriberType right) => !left.Equals(right);

        public static explicit operator string(BudgetsActionSubscriberType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BudgetsActionSubscriberType other && Equals(other);
        public bool Equals(BudgetsActionSubscriberType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
