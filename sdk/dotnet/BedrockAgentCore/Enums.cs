// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.BedrockAgentCore
{
    /// <summary>
    /// Network modes supported by browser
    /// </summary>
    [EnumType]
    public readonly struct BrowserCustomBrowserNetworkMode : IEquatable<BrowserCustomBrowserNetworkMode>
    {
        private readonly string _value;

        private BrowserCustomBrowserNetworkMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrowserCustomBrowserNetworkMode Public { get; } = new BrowserCustomBrowserNetworkMode("PUBLIC");

        public static bool operator ==(BrowserCustomBrowserNetworkMode left, BrowserCustomBrowserNetworkMode right) => left.Equals(right);
        public static bool operator !=(BrowserCustomBrowserNetworkMode left, BrowserCustomBrowserNetworkMode right) => !left.Equals(right);

        public static explicit operator string(BrowserCustomBrowserNetworkMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrowserCustomBrowserNetworkMode other && Equals(other);
        public bool Equals(BrowserCustomBrowserNetworkMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of browser
    /// </summary>
    [EnumType]
    public readonly struct BrowserCustomBrowserStatus : IEquatable<BrowserCustomBrowserStatus>
    {
        private readonly string _value;

        private BrowserCustomBrowserStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrowserCustomBrowserStatus Creating { get; } = new BrowserCustomBrowserStatus("CREATING");
        public static BrowserCustomBrowserStatus CreateFailed { get; } = new BrowserCustomBrowserStatus("CREATE_FAILED");
        public static BrowserCustomBrowserStatus Ready { get; } = new BrowserCustomBrowserStatus("READY");
        public static BrowserCustomBrowserStatus Deleting { get; } = new BrowserCustomBrowserStatus("DELETING");
        public static BrowserCustomBrowserStatus DeleteFailed { get; } = new BrowserCustomBrowserStatus("DELETE_FAILED");
        public static BrowserCustomBrowserStatus Deleted { get; } = new BrowserCustomBrowserStatus("DELETED");

        public static bool operator ==(BrowserCustomBrowserStatus left, BrowserCustomBrowserStatus right) => left.Equals(right);
        public static bool operator !=(BrowserCustomBrowserStatus left, BrowserCustomBrowserStatus right) => !left.Equals(right);

        public static explicit operator string(BrowserCustomBrowserStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrowserCustomBrowserStatus other && Equals(other);
        public bool Equals(BrowserCustomBrowserStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network modes supported by code interpreter
    /// </summary>
    [EnumType]
    public readonly struct CodeInterpreterCustomCodeInterpreterNetworkMode : IEquatable<CodeInterpreterCustomCodeInterpreterNetworkMode>
    {
        private readonly string _value;

        private CodeInterpreterCustomCodeInterpreterNetworkMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CodeInterpreterCustomCodeInterpreterNetworkMode Public { get; } = new CodeInterpreterCustomCodeInterpreterNetworkMode("PUBLIC");
        public static CodeInterpreterCustomCodeInterpreterNetworkMode Sandbox { get; } = new CodeInterpreterCustomCodeInterpreterNetworkMode("SANDBOX");

        public static bool operator ==(CodeInterpreterCustomCodeInterpreterNetworkMode left, CodeInterpreterCustomCodeInterpreterNetworkMode right) => left.Equals(right);
        public static bool operator !=(CodeInterpreterCustomCodeInterpreterNetworkMode left, CodeInterpreterCustomCodeInterpreterNetworkMode right) => !left.Equals(right);

        public static explicit operator string(CodeInterpreterCustomCodeInterpreterNetworkMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CodeInterpreterCustomCodeInterpreterNetworkMode other && Equals(other);
        public bool Equals(CodeInterpreterCustomCodeInterpreterNetworkMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of Code interpreter
    /// </summary>
    [EnumType]
    public readonly struct CodeInterpreterCustomCodeInterpreterStatus : IEquatable<CodeInterpreterCustomCodeInterpreterStatus>
    {
        private readonly string _value;

        private CodeInterpreterCustomCodeInterpreterStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CodeInterpreterCustomCodeInterpreterStatus Creating { get; } = new CodeInterpreterCustomCodeInterpreterStatus("CREATING");
        public static CodeInterpreterCustomCodeInterpreterStatus CreateFailed { get; } = new CodeInterpreterCustomCodeInterpreterStatus("CREATE_FAILED");
        public static CodeInterpreterCustomCodeInterpreterStatus Ready { get; } = new CodeInterpreterCustomCodeInterpreterStatus("READY");
        public static CodeInterpreterCustomCodeInterpreterStatus Deleting { get; } = new CodeInterpreterCustomCodeInterpreterStatus("DELETING");
        public static CodeInterpreterCustomCodeInterpreterStatus DeleteFailed { get; } = new CodeInterpreterCustomCodeInterpreterStatus("DELETE_FAILED");
        public static CodeInterpreterCustomCodeInterpreterStatus Deleted { get; } = new CodeInterpreterCustomCodeInterpreterStatus("DELETED");

        public static bool operator ==(CodeInterpreterCustomCodeInterpreterStatus left, CodeInterpreterCustomCodeInterpreterStatus right) => left.Equals(right);
        public static bool operator !=(CodeInterpreterCustomCodeInterpreterStatus left, CodeInterpreterCustomCodeInterpreterStatus right) => !left.Equals(right);

        public static explicit operator string(CodeInterpreterCustomCodeInterpreterStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CodeInterpreterCustomCodeInterpreterStatus other && Equals(other);
        public bool Equals(CodeInterpreterCustomCodeInterpreterStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GatewayAuthorizerType : IEquatable<GatewayAuthorizerType>
    {
        private readonly string _value;

        private GatewayAuthorizerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayAuthorizerType CustomJwt { get; } = new GatewayAuthorizerType("CUSTOM_JWT");
        public static GatewayAuthorizerType AwsIam { get; } = new GatewayAuthorizerType("AWS_IAM");

        public static bool operator ==(GatewayAuthorizerType left, GatewayAuthorizerType right) => left.Equals(right);
        public static bool operator !=(GatewayAuthorizerType left, GatewayAuthorizerType right) => !left.Equals(right);

        public static explicit operator string(GatewayAuthorizerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayAuthorizerType other && Equals(other);
        public bool Equals(GatewayAuthorizerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GatewayExceptionLevel : IEquatable<GatewayExceptionLevel>
    {
        private readonly string _value;

        private GatewayExceptionLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayExceptionLevel Debug { get; } = new GatewayExceptionLevel("DEBUG");

        public static bool operator ==(GatewayExceptionLevel left, GatewayExceptionLevel right) => left.Equals(right);
        public static bool operator !=(GatewayExceptionLevel left, GatewayExceptionLevel right) => !left.Equals(right);

        public static explicit operator string(GatewayExceptionLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayExceptionLevel other && Equals(other);
        public bool Equals(GatewayExceptionLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GatewayProtocolType : IEquatable<GatewayProtocolType>
    {
        private readonly string _value;

        private GatewayProtocolType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayProtocolType Mcp { get; } = new GatewayProtocolType("MCP");

        public static bool operator ==(GatewayProtocolType left, GatewayProtocolType right) => left.Equals(right);
        public static bool operator !=(GatewayProtocolType left, GatewayProtocolType right) => !left.Equals(right);

        public static explicit operator string(GatewayProtocolType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayProtocolType other && Equals(other);
        public bool Equals(GatewayProtocolType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GatewaySearchType : IEquatable<GatewaySearchType>
    {
        private readonly string _value;

        private GatewaySearchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewaySearchType Semantic { get; } = new GatewaySearchType("SEMANTIC");

        public static bool operator ==(GatewaySearchType left, GatewaySearchType right) => left.Equals(right);
        public static bool operator !=(GatewaySearchType left, GatewaySearchType right) => !left.Equals(right);

        public static explicit operator string(GatewaySearchType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewaySearchType other && Equals(other);
        public bool Equals(GatewaySearchType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GatewayStatus : IEquatable<GatewayStatus>
    {
        private readonly string _value;

        private GatewayStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayStatus Creating { get; } = new GatewayStatus("CREATING");
        public static GatewayStatus Updating { get; } = new GatewayStatus("UPDATING");
        public static GatewayStatus UpdateUnsuccessful { get; } = new GatewayStatus("UPDATE_UNSUCCESSFUL");
        public static GatewayStatus Deleting { get; } = new GatewayStatus("DELETING");
        public static GatewayStatus Ready { get; } = new GatewayStatus("READY");
        public static GatewayStatus Failed { get; } = new GatewayStatus("FAILED");

        public static bool operator ==(GatewayStatus left, GatewayStatus right) => left.Equals(right);
        public static bool operator !=(GatewayStatus left, GatewayStatus right) => !left.Equals(right);

        public static explicit operator string(GatewayStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayStatus other && Equals(other);
        public bool Equals(GatewayStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GatewayTargetApiKeyCredentialLocation : IEquatable<GatewayTargetApiKeyCredentialLocation>
    {
        private readonly string _value;

        private GatewayTargetApiKeyCredentialLocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayTargetApiKeyCredentialLocation Header { get; } = new GatewayTargetApiKeyCredentialLocation("HEADER");
        public static GatewayTargetApiKeyCredentialLocation QueryParameter { get; } = new GatewayTargetApiKeyCredentialLocation("QUERY_PARAMETER");

        public static bool operator ==(GatewayTargetApiKeyCredentialLocation left, GatewayTargetApiKeyCredentialLocation right) => left.Equals(right);
        public static bool operator !=(GatewayTargetApiKeyCredentialLocation left, GatewayTargetApiKeyCredentialLocation right) => !left.Equals(right);

        public static explicit operator string(GatewayTargetApiKeyCredentialLocation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayTargetApiKeyCredentialLocation other && Equals(other);
        public bool Equals(GatewayTargetApiKeyCredentialLocation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GatewayTargetCredentialProviderType : IEquatable<GatewayTargetCredentialProviderType>
    {
        private readonly string _value;

        private GatewayTargetCredentialProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayTargetCredentialProviderType GatewayIamRole { get; } = new GatewayTargetCredentialProviderType("GATEWAY_IAM_ROLE");
        public static GatewayTargetCredentialProviderType Oauth { get; } = new GatewayTargetCredentialProviderType("OAUTH");
        public static GatewayTargetCredentialProviderType ApiKey { get; } = new GatewayTargetCredentialProviderType("API_KEY");

        public static bool operator ==(GatewayTargetCredentialProviderType left, GatewayTargetCredentialProviderType right) => left.Equals(right);
        public static bool operator !=(GatewayTargetCredentialProviderType left, GatewayTargetCredentialProviderType right) => !left.Equals(right);

        public static explicit operator string(GatewayTargetCredentialProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayTargetCredentialProviderType other && Equals(other);
        public bool Equals(GatewayTargetCredentialProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GatewayTargetSchemaType : IEquatable<GatewayTargetSchemaType>
    {
        private readonly string _value;

        private GatewayTargetSchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayTargetSchemaType String { get; } = new GatewayTargetSchemaType("string");
        public static GatewayTargetSchemaType Number { get; } = new GatewayTargetSchemaType("number");
        public static GatewayTargetSchemaType Object { get; } = new GatewayTargetSchemaType("object");
        public static GatewayTargetSchemaType Array { get; } = new GatewayTargetSchemaType("array");
        public static GatewayTargetSchemaType Boolean { get; } = new GatewayTargetSchemaType("boolean");
        public static GatewayTargetSchemaType Integer { get; } = new GatewayTargetSchemaType("integer");

        public static bool operator ==(GatewayTargetSchemaType left, GatewayTargetSchemaType right) => left.Equals(right);
        public static bool operator !=(GatewayTargetSchemaType left, GatewayTargetSchemaType right) => !left.Equals(right);

        public static explicit operator string(GatewayTargetSchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayTargetSchemaType other && Equals(other);
        public bool Equals(GatewayTargetSchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct GatewayTargetTargetStatus : IEquatable<GatewayTargetTargetStatus>
    {
        private readonly string _value;

        private GatewayTargetTargetStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GatewayTargetTargetStatus Creating { get; } = new GatewayTargetTargetStatus("CREATING");
        public static GatewayTargetTargetStatus Updating { get; } = new GatewayTargetTargetStatus("UPDATING");
        public static GatewayTargetTargetStatus UpdateUnsuccessful { get; } = new GatewayTargetTargetStatus("UPDATE_UNSUCCESSFUL");
        public static GatewayTargetTargetStatus Deleting { get; } = new GatewayTargetTargetStatus("DELETING");
        public static GatewayTargetTargetStatus Ready { get; } = new GatewayTargetTargetStatus("READY");
        public static GatewayTargetTargetStatus Failed { get; } = new GatewayTargetTargetStatus("FAILED");

        public static bool operator ==(GatewayTargetTargetStatus left, GatewayTargetTargetStatus right) => left.Equals(right);
        public static bool operator !=(GatewayTargetTargetStatus left, GatewayTargetTargetStatus right) => !left.Equals(right);

        public static explicit operator string(GatewayTargetTargetStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GatewayTargetTargetStatus other && Equals(other);
        public bool Equals(GatewayTargetTargetStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RuntimeAgentStatus : IEquatable<RuntimeAgentStatus>
    {
        private readonly string _value;

        private RuntimeAgentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuntimeAgentStatus Creating { get; } = new RuntimeAgentStatus("CREATING");
        public static RuntimeAgentStatus CreateFailed { get; } = new RuntimeAgentStatus("CREATE_FAILED");
        public static RuntimeAgentStatus Updating { get; } = new RuntimeAgentStatus("UPDATING");
        public static RuntimeAgentStatus UpdateFailed { get; } = new RuntimeAgentStatus("UPDATE_FAILED");
        public static RuntimeAgentStatus Ready { get; } = new RuntimeAgentStatus("READY");
        public static RuntimeAgentStatus Deleting { get; } = new RuntimeAgentStatus("DELETING");

        public static bool operator ==(RuntimeAgentStatus left, RuntimeAgentStatus right) => left.Equals(right);
        public static bool operator !=(RuntimeAgentStatus left, RuntimeAgentStatus right) => !left.Equals(right);

        public static explicit operator string(RuntimeAgentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuntimeAgentStatus other && Equals(other);
        public bool Equals(RuntimeAgentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RuntimeEndpointAgentRuntimeEndpointStatus : IEquatable<RuntimeEndpointAgentRuntimeEndpointStatus>
    {
        private readonly string _value;

        private RuntimeEndpointAgentRuntimeEndpointStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuntimeEndpointAgentRuntimeEndpointStatus Creating { get; } = new RuntimeEndpointAgentRuntimeEndpointStatus("CREATING");
        public static RuntimeEndpointAgentRuntimeEndpointStatus CreateFailed { get; } = new RuntimeEndpointAgentRuntimeEndpointStatus("CREATE_FAILED");
        public static RuntimeEndpointAgentRuntimeEndpointStatus Updating { get; } = new RuntimeEndpointAgentRuntimeEndpointStatus("UPDATING");
        public static RuntimeEndpointAgentRuntimeEndpointStatus UpdateFailed { get; } = new RuntimeEndpointAgentRuntimeEndpointStatus("UPDATE_FAILED");
        public static RuntimeEndpointAgentRuntimeEndpointStatus Ready { get; } = new RuntimeEndpointAgentRuntimeEndpointStatus("READY");
        public static RuntimeEndpointAgentRuntimeEndpointStatus Deleting { get; } = new RuntimeEndpointAgentRuntimeEndpointStatus("DELETING");

        public static bool operator ==(RuntimeEndpointAgentRuntimeEndpointStatus left, RuntimeEndpointAgentRuntimeEndpointStatus right) => left.Equals(right);
        public static bool operator !=(RuntimeEndpointAgentRuntimeEndpointStatus left, RuntimeEndpointAgentRuntimeEndpointStatus right) => !left.Equals(right);

        public static explicit operator string(RuntimeEndpointAgentRuntimeEndpointStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuntimeEndpointAgentRuntimeEndpointStatus other && Equals(other);
        public bool Equals(RuntimeEndpointAgentRuntimeEndpointStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network mode configuration type
    /// </summary>
    [EnumType]
    public readonly struct RuntimeNetworkMode : IEquatable<RuntimeNetworkMode>
    {
        private readonly string _value;

        private RuntimeNetworkMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuntimeNetworkMode Public { get; } = new RuntimeNetworkMode("PUBLIC");

        public static bool operator ==(RuntimeNetworkMode left, RuntimeNetworkMode right) => left.Equals(right);
        public static bool operator !=(RuntimeNetworkMode left, RuntimeNetworkMode right) => !left.Equals(right);

        public static explicit operator string(RuntimeNetworkMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuntimeNetworkMode other && Equals(other);
        public bool Equals(RuntimeNetworkMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RuntimeProtocolConfiguration : IEquatable<RuntimeProtocolConfiguration>
    {
        private readonly string _value;

        private RuntimeProtocolConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuntimeProtocolConfiguration Mcp { get; } = new RuntimeProtocolConfiguration("MCP");
        public static RuntimeProtocolConfiguration Http { get; } = new RuntimeProtocolConfiguration("HTTP");

        public static bool operator ==(RuntimeProtocolConfiguration left, RuntimeProtocolConfiguration right) => left.Equals(right);
        public static bool operator !=(RuntimeProtocolConfiguration left, RuntimeProtocolConfiguration right) => !left.Equals(right);

        public static explicit operator string(RuntimeProtocolConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuntimeProtocolConfiguration other && Equals(other);
        public bool Equals(RuntimeProtocolConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
