// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QuickSight.Inputs
{

    public sealed class DashboardComputationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The forecast computation configuration.
        /// </summary>
        [Input("forecast")]
        public Input<Inputs.DashboardForecastComputationArgs>? Forecast { get; set; }

        /// <summary>
        /// The growth rate computation configuration.
        /// </summary>
        [Input("growthRate")]
        public Input<Inputs.DashboardGrowthRateComputationArgs>? GrowthRate { get; set; }

        /// <summary>
        /// The maximum and minimum computation configuration.
        /// </summary>
        [Input("maximumMinimum")]
        public Input<Inputs.DashboardMaximumMinimumComputationArgs>? MaximumMinimum { get; set; }

        /// <summary>
        /// The metric comparison computation configuration.
        /// </summary>
        [Input("metricComparison")]
        public Input<Inputs.DashboardMetricComparisonComputationArgs>? MetricComparison { get; set; }

        /// <summary>
        /// The period over period computation configuration.
        /// </summary>
        [Input("periodOverPeriod")]
        public Input<Inputs.DashboardPeriodOverPeriodComputationArgs>? PeriodOverPeriod { get; set; }

        /// <summary>
        /// The period to `DataSetIdentifier` computation configuration.
        /// </summary>
        [Input("periodToDate")]
        public Input<Inputs.DashboardPeriodToDateComputationArgs>? PeriodToDate { get; set; }

        /// <summary>
        /// The top movers and bottom movers computation configuration.
        /// </summary>
        [Input("topBottomMovers")]
        public Input<Inputs.DashboardTopBottomMoversComputationArgs>? TopBottomMovers { get; set; }

        /// <summary>
        /// The top ranked and bottom ranked computation configuration.
        /// </summary>
        [Input("topBottomRanked")]
        public Input<Inputs.DashboardTopBottomRankedComputationArgs>? TopBottomRanked { get; set; }

        /// <summary>
        /// The total aggregation computation configuration.
        /// </summary>
        [Input("totalAggregation")]
        public Input<Inputs.DashboardTotalAggregationComputationArgs>? TotalAggregation { get; set; }

        /// <summary>
        /// The unique values computation configuration.
        /// </summary>
        [Input("uniqueValues")]
        public Input<Inputs.DashboardUniqueValuesComputationArgs>? UniqueValues { get; set; }

        public DashboardComputationArgs()
        {
        }
        public static new DashboardComputationArgs Empty => new DashboardComputationArgs();
    }
}
