// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QuickSight.Inputs
{

    public sealed class DashboardTopBottomMoversComputationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The dimension type field.
        /// </summary>
        [Input("category")]
        public Input<Inputs.DashboardDimensionFieldArgs>? Category { get; set; }

        /// <summary>
        /// The ID for a computation.
        /// </summary>
        [Input("computationId", required: true)]
        public Input<string> ComputationId { get; set; } = null!;

        /// <summary>
        /// The mover size setup of the top and bottom movers computation.
        /// </summary>
        [Input("moverSize")]
        public Input<double>? MoverSize { get; set; }

        /// <summary>
        /// The name of a computation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The sort order setup of the top and bottom movers computation.
        /// </summary>
        [Input("sortOrder")]
        public Input<Pulumi.AwsNative.QuickSight.DashboardTopBottomSortOrder>? SortOrder { get; set; }

        /// <summary>
        /// The dimension type field.
        /// </summary>
        [Input("time")]
        public Input<Inputs.DashboardDimensionFieldArgs>? Time { get; set; }

        /// <summary>
        /// The computation type. Choose from the following options:
        /// 
        /// - TOP: Top movers computation.
        /// - BOTTOM: Bottom movers computation.
        /// </summary>
        [Input("type", required: true)]
        public Input<Pulumi.AwsNative.QuickSight.DashboardTopBottomComputationType> Type { get; set; } = null!;

        /// <summary>
        /// The measure (metric) type field.
        /// </summary>
        [Input("value")]
        public Input<Inputs.DashboardMeasureFieldArgs>? Value { get; set; }

        public DashboardTopBottomMoversComputationArgs()
        {
        }
        public static new DashboardTopBottomMoversComputationArgs Empty => new DashboardTopBottomMoversComputationArgs();
    }
}
