// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QuickSight.Inputs
{

    public sealed class DashboardVersionDefinitionArgs : global::Pulumi.ResourceArgs
    {
        [Input("analysisDefaults")]
        public Input<Inputs.DashboardAnalysisDefaultsArgs>? AnalysisDefaults { get; set; }

        [Input("calculatedFields")]
        private InputList<Inputs.DashboardCalculatedFieldArgs>? _calculatedFields;

        /// <summary>
        /// An array of calculated field definitions for the dashboard.
        /// </summary>
        public InputList<Inputs.DashboardCalculatedFieldArgs> CalculatedFields
        {
            get => _calculatedFields ?? (_calculatedFields = new InputList<Inputs.DashboardCalculatedFieldArgs>());
            set => _calculatedFields = value;
        }

        [Input("columnConfigurations")]
        private InputList<Inputs.DashboardColumnConfigurationArgs>? _columnConfigurations;

        /// <summary>
        /// An array of dashboard-level column configurations. Column configurations are used to set the default formatting for a column that is used throughout a dashboard.
        /// </summary>
        public InputList<Inputs.DashboardColumnConfigurationArgs> ColumnConfigurations
        {
            get => _columnConfigurations ?? (_columnConfigurations = new InputList<Inputs.DashboardColumnConfigurationArgs>());
            set => _columnConfigurations = value;
        }

        [Input("dataSetIdentifierDeclarations", required: true)]
        private InputList<Inputs.DashboardDataSetIdentifierDeclarationArgs>? _dataSetIdentifierDeclarations;

        /// <summary>
        /// An array of dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures.
        /// </summary>
        public InputList<Inputs.DashboardDataSetIdentifierDeclarationArgs> DataSetIdentifierDeclarations
        {
            get => _dataSetIdentifierDeclarations ?? (_dataSetIdentifierDeclarations = new InputList<Inputs.DashboardDataSetIdentifierDeclarationArgs>());
            set => _dataSetIdentifierDeclarations = value;
        }

        [Input("filterGroups")]
        private InputList<Inputs.DashboardFilterGroupArgs>? _filterGroups;

        /// <summary>
        /// The filter definitions for a dashboard.
        /// 
        /// For more information, see [Filtering Data in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the *Amazon QuickSight User Guide* .
        /// </summary>
        public InputList<Inputs.DashboardFilterGroupArgs> FilterGroups
        {
            get => _filterGroups ?? (_filterGroups = new InputList<Inputs.DashboardFilterGroupArgs>());
            set => _filterGroups = value;
        }

        /// <summary>
        /// An array of option definitions for a dashboard.
        /// </summary>
        [Input("options")]
        public Input<Inputs.DashboardAssetOptionsArgs>? Options { get; set; }

        [Input("parameterDeclarations")]
        private InputList<Inputs.DashboardParameterDeclarationArgs>? _parameterDeclarations;

        /// <summary>
        /// The parameter declarations for a dashboard. Parameters are named variables that can transfer a value for use by an action or an object.
        /// 
        /// For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
        /// </summary>
        public InputList<Inputs.DashboardParameterDeclarationArgs> ParameterDeclarations
        {
            get => _parameterDeclarations ?? (_parameterDeclarations = new InputList<Inputs.DashboardParameterDeclarationArgs>());
            set => _parameterDeclarations = value;
        }

        [Input("sheets")]
        private InputList<Inputs.DashboardSheetDefinitionArgs>? _sheets;

        /// <summary>
        /// An array of sheet definitions for a dashboard.
        /// </summary>
        public InputList<Inputs.DashboardSheetDefinitionArgs> Sheets
        {
            get => _sheets ?? (_sheets = new InputList<Inputs.DashboardSheetDefinitionArgs>());
            set => _sheets = value;
        }

        public DashboardVersionDefinitionArgs()
        {
        }
        public static new DashboardVersionDefinitionArgs Empty => new DashboardVersionDefinitionArgs();
    }
}
