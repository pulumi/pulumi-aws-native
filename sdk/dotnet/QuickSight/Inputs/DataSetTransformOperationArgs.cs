// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QuickSight.Inputs
{

    /// <summary>
    /// &lt;p&gt;A data transformation on a logical table. This is a variant type structure. For this
    ///             structure to be valid, only one of the attributes can be non-null.&lt;/p&gt;
    /// </summary>
    public sealed class DataSetTransformOperationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A transform operation that casts a column to a different type.
        /// </summary>
        [Input("castColumnTypeOperation")]
        public Input<Inputs.DataSetCastColumnTypeOperationArgs>? CastColumnTypeOperation { get; set; }

        /// <summary>
        /// An operation that creates calculated columns. Columns created in one such operation form a lexical closure.
        /// </summary>
        [Input("createColumnsOperation")]
        public Input<Inputs.DataSetCreateColumnsOperationArgs>? CreateColumnsOperation { get; set; }

        /// <summary>
        /// An operation that filters rows based on some condition.
        /// </summary>
        [Input("filterOperation")]
        public Input<Inputs.DataSetFilterOperationArgs>? FilterOperation { get; set; }

        /// <summary>
        /// A transform operation that overrides the dataset parameter values that are defined in another dataset.
        /// </summary>
        [Input("overrideDatasetParameterOperation")]
        public Input<Inputs.DataSetOverrideDatasetParameterOperationArgs>? OverrideDatasetParameterOperation { get; set; }

        /// <summary>
        /// An operation that projects columns. Operations that come after a projection can only refer to projected columns.
        /// </summary>
        [Input("projectOperation")]
        public Input<Inputs.DataSetProjectOperationArgs>? ProjectOperation { get; set; }

        /// <summary>
        /// An operation that renames a column.
        /// </summary>
        [Input("renameColumnOperation")]
        public Input<Inputs.DataSetRenameColumnOperationArgs>? RenameColumnOperation { get; set; }

        /// <summary>
        /// An operation that tags a column with additional information.
        /// </summary>
        [Input("tagColumnOperation")]
        public Input<Inputs.DataSetTagColumnOperationArgs>? TagColumnOperation { get; set; }

        [Input("untagColumnOperation")]
        public Input<Inputs.DataSetUntagColumnOperationArgs>? UntagColumnOperation { get; set; }

        public DataSetTransformOperationArgs()
        {
        }
        public static new DataSetTransformOperationArgs Empty => new DataSetTransformOperationArgs();
    }
}
