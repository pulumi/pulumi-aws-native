// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QuickSight
{
    public static class GetTopic
    {
        /// <summary>
        /// Definition of the AWS::QuickSight::Topic Resource Type.
        /// </summary>
        public static Task<GetTopicResult> InvokeAsync(GetTopicArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTopicResult>("aws-native:quicksight:getTopic", args ?? new GetTopicArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of the AWS::QuickSight::Topic Resource Type.
        /// </summary>
        public static Output<GetTopicResult> Invoke(GetTopicInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTopicResult>("aws-native:quicksight:getTopic", args ?? new GetTopicInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTopicArgs : global::Pulumi.InvokeArgs
    {
        [Input("awsAccountId", required: true)]
        public string AwsAccountId { get; set; } = null!;

        [Input("topicId", required: true)]
        public string TopicId { get; set; } = null!;

        public GetTopicArgs()
        {
        }
        public static new GetTopicArgs Empty => new GetTopicArgs();
    }

    public sealed class GetTopicInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("awsAccountId", required: true)]
        public Input<string> AwsAccountId { get; set; } = null!;

        [Input("topicId", required: true)]
        public Input<string> TopicId { get; set; } = null!;

        public GetTopicInvokeArgs()
        {
        }
        public static new GetTopicInvokeArgs Empty => new GetTopicInvokeArgs();
    }


    [OutputType]
    public sealed class GetTopicResult
    {
        public readonly string? Arn;
        public readonly ImmutableArray<Outputs.TopicDatasetMetadata> DataSets;
        public readonly string? Description;
        public readonly string? Name;

        [OutputConstructor]
        private GetTopicResult(
            string? arn,

            ImmutableArray<Outputs.TopicDatasetMetadata> dataSets,

            string? description,

            string? name)
        {
            Arn = arn;
            DataSets = dataSets;
            Description = description;
            Name = name;
        }
    }
}
