// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QuickSight.Outputs
{

    [OutputType]
    public sealed class TemplateComputation
    {
        public readonly Outputs.TemplateForecastComputation? Forecast;
        public readonly Outputs.TemplateGrowthRateComputation? GrowthRate;
        public readonly Outputs.TemplateMaximumMinimumComputation? MaximumMinimum;
        public readonly Outputs.TemplateMetricComparisonComputation? MetricComparison;
        public readonly Outputs.TemplatePeriodOverPeriodComputation? PeriodOverPeriod;
        public readonly Outputs.TemplatePeriodToDateComputation? PeriodToDate;
        public readonly Outputs.TemplateTopBottomMoversComputation? TopBottomMovers;
        public readonly Outputs.TemplateTopBottomRankedComputation? TopBottomRanked;
        public readonly Outputs.TemplateTotalAggregationComputation? TotalAggregation;
        public readonly Outputs.TemplateUniqueValuesComputation? UniqueValues;

        [OutputConstructor]
        private TemplateComputation(
            Outputs.TemplateForecastComputation? forecast,

            Outputs.TemplateGrowthRateComputation? growthRate,

            Outputs.TemplateMaximumMinimumComputation? maximumMinimum,

            Outputs.TemplateMetricComparisonComputation? metricComparison,

            Outputs.TemplatePeriodOverPeriodComputation? periodOverPeriod,

            Outputs.TemplatePeriodToDateComputation? periodToDate,

            Outputs.TemplateTopBottomMoversComputation? topBottomMovers,

            Outputs.TemplateTopBottomRankedComputation? topBottomRanked,

            Outputs.TemplateTotalAggregationComputation? totalAggregation,

            Outputs.TemplateUniqueValuesComputation? uniqueValues)
        {
            Forecast = forecast;
            GrowthRate = growthRate;
            MaximumMinimum = maximumMinimum;
            MetricComparison = metricComparison;
            PeriodOverPeriod = periodOverPeriod;
            PeriodToDate = periodToDate;
            TopBottomMovers = topBottomMovers;
            TopBottomRanked = topBottomRanked;
            TotalAggregation = totalAggregation;
            UniqueValues = uniqueValues;
        }
    }
}
