// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QuickSight.Outputs
{

    [OutputType]
    public sealed class RefreshScheduleMap
    {
        /// <summary>
        /// The type of refresh that a dataset undergoes. Valid values are as follows:
        /// 
        /// - `FULL_REFRESH` : A complete refresh of a dataset.
        /// - `INCREMENTAL_REFRESH` : A partial refresh of some rows of a dataset, based on the time window specified.
        /// 
        /// For more information on full and incremental refreshes, see [Refreshing SPICE data](https://docs.aws.amazon.com/quicksight/latest/user/refreshing-imported-data.html) in the *Amazon QuickSight User Guide* .
        /// </summary>
        public readonly Pulumi.AwsNative.QuickSight.RefreshScheduleMapRefreshType? RefreshType;
        /// <summary>
        /// &lt;p&gt;Information about the schedule frequency.&lt;/p&gt;
        /// </summary>
        public readonly Outputs.RefreshScheduleMapScheduleFrequencyProperties? ScheduleFrequency;
        /// <summary>
        /// &lt;p&gt;An unique identifier for the refresh schedule.&lt;/p&gt;
        /// </summary>
        public readonly string? ScheduleId;
        /// <summary>
        /// &lt;p&gt;The date time after which refresh is to be scheduled&lt;/p&gt;
        /// </summary>
        public readonly string? StartAfterDateTime;

        [OutputConstructor]
        private RefreshScheduleMap(
            Pulumi.AwsNative.QuickSight.RefreshScheduleMapRefreshType? refreshType,

            Outputs.RefreshScheduleMapScheduleFrequencyProperties? scheduleFrequency,

            string? scheduleId,

            string? startAfterDateTime)
        {
            RefreshType = refreshType;
            ScheduleFrequency = scheduleFrequency;
            ScheduleId = scheduleId;
            StartAfterDateTime = startAfterDateTime;
        }
    }
}
