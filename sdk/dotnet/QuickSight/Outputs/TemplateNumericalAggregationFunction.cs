// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QuickSight.Outputs
{

    [OutputType]
    public sealed class TemplateNumericalAggregationFunction
    {
        /// <summary>
        /// An aggregation based on the percentile of values in a dimension or measure.
        /// </summary>
        public readonly Outputs.TemplatePercentileAggregation? PercentileAggregation;
        /// <summary>
        /// Built-in aggregation functions for numerical values.
        /// 
        /// - `SUM` : The sum of a dimension or measure.
        /// - `AVERAGE` : The average of a dimension or measure.
        /// - `MIN` : The minimum value of a dimension or measure.
        /// - `MAX` : The maximum value of a dimension or measure.
        /// - `COUNT` : The count of a dimension or measure.
        /// - `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
        /// - `VAR` : The variance of a dimension or measure.
        /// - `VARP` : The partitioned variance of a dimension or measure.
        /// - `STDEV` : The standard deviation of a dimension or measure.
        /// - `STDEVP` : The partitioned standard deviation of a dimension or measure.
        /// - `MEDIAN` : The median value of a dimension or measure.
        /// </summary>
        public readonly Pulumi.AwsNative.QuickSight.TemplateSimpleNumericalAggregationFunction? SimpleNumericalAggregation;

        [OutputConstructor]
        private TemplateNumericalAggregationFunction(
            Outputs.TemplatePercentileAggregation? percentileAggregation,

            Pulumi.AwsNative.QuickSight.TemplateSimpleNumericalAggregationFunction? simpleNumericalAggregation)
        {
            PercentileAggregation = percentileAggregation;
            SimpleNumericalAggregation = simpleNumericalAggregation;
        }
    }
}
