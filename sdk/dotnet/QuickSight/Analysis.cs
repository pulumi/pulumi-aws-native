// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QuickSight
{
    /// <summary>
    /// Definition of the AWS::QuickSight::Analysis Resource Type.
    /// </summary>
    [AwsNativeResourceType("aws-native:quicksight:Analysis")]
    public partial class Analysis : Pulumi.CustomResource
    {
        [Output("analysisId")]
        public Output<string> AnalysisId { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;The Amazon Resource Name (ARN) of the analysis.&lt;/p&gt;
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("awsAccountId")]
        public Output<string> AwsAccountId { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;The time that the analysis was created.&lt;/p&gt;
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;The ARNs of the datasets of the analysis.&lt;/p&gt;
        /// </summary>
        [Output("dataSetArns")]
        public Output<ImmutableArray<string>> DataSetArns { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;Errors associated with the analysis.&lt;/p&gt;
        /// </summary>
        [Output("errors")]
        public Output<ImmutableArray<Outputs.AnalysisAnalysisError>> Errors { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;The time that the analysis was last updated.&lt;/p&gt;
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;The descriptive name of the analysis.&lt;/p&gt;
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        [Output("parameters")]
        public Output<Outputs.AnalysisParameters?> Parameters { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;A structure that describes the principals and the resource-level permissions on an
        ///             analysis. You can use the &lt;code&gt;Permissions&lt;/code&gt; structure to grant permissions by
        ///             providing a list of AWS Identity and Access Management (IAM) action information for each
        ///             principal listed by Amazon Resource Name (ARN). &lt;/p&gt;
        /// 
        ///         &lt;p&gt;To specify no permissions, omit &lt;code&gt;Permissions&lt;/code&gt;.&lt;/p&gt;
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.AnalysisResourcePermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;A list of the associated sheets with the unique identifier and name of each sheet.&lt;/p&gt;
        /// </summary>
        [Output("sheets")]
        public Output<ImmutableArray<Outputs.AnalysisSheet>> Sheets { get; private set; } = null!;

        [Output("sourceEntity")]
        public Output<Outputs.AnalysisAnalysisSourceEntity?> SourceEntity { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the
        ///             analysis.&lt;/p&gt;
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.AnalysisTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// &lt;p&gt;The ARN of the theme of the analysis.&lt;/p&gt;
        /// </summary>
        [Output("themeArn")]
        public Output<string?> ThemeArn { get; private set; } = null!;


        /// <summary>
        /// Create a Analysis resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Analysis(string name, AnalysisArgs args, CustomResourceOptions? options = null)
            : base("aws-native:quicksight:Analysis", name, args ?? new AnalysisArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Analysis(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:quicksight:Analysis", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Analysis resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Analysis Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Analysis(name, id, options);
        }
    }

    public sealed class AnalysisArgs : Pulumi.ResourceArgs
    {
        [Input("analysisId", required: true)]
        public Input<string> AnalysisId { get; set; } = null!;

        [Input("awsAccountId", required: true)]
        public Input<string> AwsAccountId { get; set; } = null!;

        [Input("errors")]
        private InputList<Inputs.AnalysisAnalysisErrorArgs>? _errors;

        /// <summary>
        /// &lt;p&gt;Errors associated with the analysis.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.AnalysisAnalysisErrorArgs> Errors
        {
            get => _errors ?? (_errors = new InputList<Inputs.AnalysisAnalysisErrorArgs>());
            set => _errors = value;
        }

        /// <summary>
        /// &lt;p&gt;The descriptive name of the analysis.&lt;/p&gt;
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        public Input<Inputs.AnalysisParametersArgs>? Parameters { get; set; }

        [Input("permissions")]
        private InputList<Inputs.AnalysisResourcePermissionArgs>? _permissions;

        /// <summary>
        /// &lt;p&gt;A structure that describes the principals and the resource-level permissions on an
        ///             analysis. You can use the &lt;code&gt;Permissions&lt;/code&gt; structure to grant permissions by
        ///             providing a list of AWS Identity and Access Management (IAM) action information for each
        ///             principal listed by Amazon Resource Name (ARN). &lt;/p&gt;
        /// 
        ///         &lt;p&gt;To specify no permissions, omit &lt;code&gt;Permissions&lt;/code&gt;.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.AnalysisResourcePermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.AnalysisResourcePermissionArgs>());
            set => _permissions = value;
        }

        [Input("sourceEntity")]
        public Input<Inputs.AnalysisAnalysisSourceEntityArgs>? SourceEntity { get; set; }

        [Input("tags")]
        private InputList<Inputs.AnalysisTagArgs>? _tags;

        /// <summary>
        /// &lt;p&gt;Contains a map of the key-value pairs for the resource tag or tags assigned to the
        ///             analysis.&lt;/p&gt;
        /// </summary>
        public InputList<Inputs.AnalysisTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AnalysisTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// &lt;p&gt;The ARN of the theme of the analysis.&lt;/p&gt;
        /// </summary>
        [Input("themeArn")]
        public Input<string>? ThemeArn { get; set; }

        public AnalysisArgs()
        {
        }
    }
}
