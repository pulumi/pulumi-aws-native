// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.QuickSight
{
    [EnumType]
    public readonly struct AnalysisErrorType : IEquatable<AnalysisErrorType>
    {
        private readonly string _value;

        private AnalysisErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisErrorType AccessDenied { get; } = new AnalysisErrorType("ACCESS_DENIED");
        public static AnalysisErrorType SourceNotFound { get; } = new AnalysisErrorType("SOURCE_NOT_FOUND");
        public static AnalysisErrorType DataSetNotFound { get; } = new AnalysisErrorType("DATA_SET_NOT_FOUND");
        public static AnalysisErrorType InternalFailure { get; } = new AnalysisErrorType("INTERNAL_FAILURE");
        public static AnalysisErrorType ParameterValueIncompatible { get; } = new AnalysisErrorType("PARAMETER_VALUE_INCOMPATIBLE");
        public static AnalysisErrorType ParameterTypeInvalid { get; } = new AnalysisErrorType("PARAMETER_TYPE_INVALID");
        public static AnalysisErrorType ParameterNotFound { get; } = new AnalysisErrorType("PARAMETER_NOT_FOUND");
        public static AnalysisErrorType ColumnTypeMismatch { get; } = new AnalysisErrorType("COLUMN_TYPE_MISMATCH");
        public static AnalysisErrorType ColumnGeographicRoleMismatch { get; } = new AnalysisErrorType("COLUMN_GEOGRAPHIC_ROLE_MISMATCH");
        public static AnalysisErrorType ColumnReplacementMissing { get; } = new AnalysisErrorType("COLUMN_REPLACEMENT_MISSING");

        public static bool operator ==(AnalysisErrorType left, AnalysisErrorType right) => left.Equals(right);
        public static bool operator !=(AnalysisErrorType left, AnalysisErrorType right) => !left.Equals(right);

        public static explicit operator string(AnalysisErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisErrorType other && Equals(other);
        public bool Equals(AnalysisErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisResourceStatus : IEquatable<AnalysisResourceStatus>
    {
        private readonly string _value;

        private AnalysisResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisResourceStatus CreationInProgress { get; } = new AnalysisResourceStatus("CREATION_IN_PROGRESS");
        public static AnalysisResourceStatus CreationSuccessful { get; } = new AnalysisResourceStatus("CREATION_SUCCESSFUL");
        public static AnalysisResourceStatus CreationFailed { get; } = new AnalysisResourceStatus("CREATION_FAILED");
        public static AnalysisResourceStatus UpdateInProgress { get; } = new AnalysisResourceStatus("UPDATE_IN_PROGRESS");
        public static AnalysisResourceStatus UpdateSuccessful { get; } = new AnalysisResourceStatus("UPDATE_SUCCESSFUL");
        public static AnalysisResourceStatus UpdateFailed { get; } = new AnalysisResourceStatus("UPDATE_FAILED");
        public static AnalysisResourceStatus Deleted { get; } = new AnalysisResourceStatus("DELETED");

        public static bool operator ==(AnalysisResourceStatus left, AnalysisResourceStatus right) => left.Equals(right);
        public static bool operator !=(AnalysisResourceStatus left, AnalysisResourceStatus right) => !left.Equals(right);

        public static explicit operator string(AnalysisResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisResourceStatus other && Equals(other);
        public bool Equals(AnalysisResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardBehavior : IEquatable<DashboardBehavior>
    {
        private readonly string _value;

        private DashboardBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardBehavior Enabled { get; } = new DashboardBehavior("ENABLED");
        public static DashboardBehavior Disabled { get; } = new DashboardBehavior("DISABLED");

        public static bool operator ==(DashboardBehavior left, DashboardBehavior right) => left.Equals(right);
        public static bool operator !=(DashboardBehavior left, DashboardBehavior right) => !left.Equals(right);

        public static explicit operator string(DashboardBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardBehavior other && Equals(other);
        public bool Equals(DashboardBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardErrorType : IEquatable<DashboardErrorType>
    {
        private readonly string _value;

        private DashboardErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardErrorType AccessDenied { get; } = new DashboardErrorType("ACCESS_DENIED");
        public static DashboardErrorType SourceNotFound { get; } = new DashboardErrorType("SOURCE_NOT_FOUND");
        public static DashboardErrorType DataSetNotFound { get; } = new DashboardErrorType("DATA_SET_NOT_FOUND");
        public static DashboardErrorType InternalFailure { get; } = new DashboardErrorType("INTERNAL_FAILURE");
        public static DashboardErrorType ParameterValueIncompatible { get; } = new DashboardErrorType("PARAMETER_VALUE_INCOMPATIBLE");
        public static DashboardErrorType ParameterTypeInvalid { get; } = new DashboardErrorType("PARAMETER_TYPE_INVALID");
        public static DashboardErrorType ParameterNotFound { get; } = new DashboardErrorType("PARAMETER_NOT_FOUND");
        public static DashboardErrorType ColumnTypeMismatch { get; } = new DashboardErrorType("COLUMN_TYPE_MISMATCH");
        public static DashboardErrorType ColumnGeographicRoleMismatch { get; } = new DashboardErrorType("COLUMN_GEOGRAPHIC_ROLE_MISMATCH");
        public static DashboardErrorType ColumnReplacementMissing { get; } = new DashboardErrorType("COLUMN_REPLACEMENT_MISSING");

        public static bool operator ==(DashboardErrorType left, DashboardErrorType right) => left.Equals(right);
        public static bool operator !=(DashboardErrorType left, DashboardErrorType right) => !left.Equals(right);

        public static explicit operator string(DashboardErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardErrorType other && Equals(other);
        public bool Equals(DashboardErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardResourceStatus : IEquatable<DashboardResourceStatus>
    {
        private readonly string _value;

        private DashboardResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardResourceStatus CreationInProgress { get; } = new DashboardResourceStatus("CREATION_IN_PROGRESS");
        public static DashboardResourceStatus CreationSuccessful { get; } = new DashboardResourceStatus("CREATION_SUCCESSFUL");
        public static DashboardResourceStatus CreationFailed { get; } = new DashboardResourceStatus("CREATION_FAILED");
        public static DashboardResourceStatus UpdateInProgress { get; } = new DashboardResourceStatus("UPDATE_IN_PROGRESS");
        public static DashboardResourceStatus UpdateSuccessful { get; } = new DashboardResourceStatus("UPDATE_SUCCESSFUL");
        public static DashboardResourceStatus UpdateFailed { get; } = new DashboardResourceStatus("UPDATE_FAILED");
        public static DashboardResourceStatus Deleted { get; } = new DashboardResourceStatus("DELETED");

        public static bool operator ==(DashboardResourceStatus left, DashboardResourceStatus right) => left.Equals(right);
        public static bool operator !=(DashboardResourceStatus left, DashboardResourceStatus right) => !left.Equals(right);

        public static explicit operator string(DashboardResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardResourceStatus other && Equals(other);
        public bool Equals(DashboardResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardUIState : IEquatable<DashboardUIState>
    {
        private readonly string _value;

        private DashboardUIState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardUIState Expanded { get; } = new DashboardUIState("EXPANDED");
        public static DashboardUIState Collapsed { get; } = new DashboardUIState("COLLAPSED");

        public static bool operator ==(DashboardUIState left, DashboardUIState right) => left.Equals(right);
        public static bool operator !=(DashboardUIState left, DashboardUIState right) => !left.Equals(right);

        public static explicit operator string(DashboardUIState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardUIState other && Equals(other);
        public bool Equals(DashboardUIState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetColumnDataType : IEquatable<DataSetColumnDataType>
    {
        private readonly string _value;

        private DataSetColumnDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetColumnDataType String { get; } = new DataSetColumnDataType("STRING");
        public static DataSetColumnDataType Integer { get; } = new DataSetColumnDataType("INTEGER");
        public static DataSetColumnDataType Decimal { get; } = new DataSetColumnDataType("DECIMAL");
        public static DataSetColumnDataType Datetime { get; } = new DataSetColumnDataType("DATETIME");

        public static bool operator ==(DataSetColumnDataType left, DataSetColumnDataType right) => left.Equals(right);
        public static bool operator !=(DataSetColumnDataType left, DataSetColumnDataType right) => !left.Equals(right);

        public static explicit operator string(DataSetColumnDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetColumnDataType other && Equals(other);
        public bool Equals(DataSetColumnDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetGeoSpatialCountryCode : IEquatable<DataSetGeoSpatialCountryCode>
    {
        private readonly string _value;

        private DataSetGeoSpatialCountryCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetGeoSpatialCountryCode Us { get; } = new DataSetGeoSpatialCountryCode("US");

        public static bool operator ==(DataSetGeoSpatialCountryCode left, DataSetGeoSpatialCountryCode right) => left.Equals(right);
        public static bool operator !=(DataSetGeoSpatialCountryCode left, DataSetGeoSpatialCountryCode right) => !left.Equals(right);

        public static explicit operator string(DataSetGeoSpatialCountryCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetGeoSpatialCountryCode other && Equals(other);
        public bool Equals(DataSetGeoSpatialCountryCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetImportMode : IEquatable<DataSetImportMode>
    {
        private readonly string _value;

        private DataSetImportMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetImportMode Spice { get; } = new DataSetImportMode("SPICE");
        public static DataSetImportMode DirectQuery { get; } = new DataSetImportMode("DIRECT_QUERY");

        public static bool operator ==(DataSetImportMode left, DataSetImportMode right) => left.Equals(right);
        public static bool operator !=(DataSetImportMode left, DataSetImportMode right) => !left.Equals(right);

        public static explicit operator string(DataSetImportMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetImportMode other && Equals(other);
        public bool Equals(DataSetImportMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetRowLevelPermissionFormatVersion : IEquatable<DataSetRowLevelPermissionFormatVersion>
    {
        private readonly string _value;

        private DataSetRowLevelPermissionFormatVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetRowLevelPermissionFormatVersion Version1 { get; } = new DataSetRowLevelPermissionFormatVersion("VERSION_1");
        public static DataSetRowLevelPermissionFormatVersion Version2 { get; } = new DataSetRowLevelPermissionFormatVersion("VERSION_2");

        public static bool operator ==(DataSetRowLevelPermissionFormatVersion left, DataSetRowLevelPermissionFormatVersion right) => left.Equals(right);
        public static bool operator !=(DataSetRowLevelPermissionFormatVersion left, DataSetRowLevelPermissionFormatVersion right) => !left.Equals(right);

        public static explicit operator string(DataSetRowLevelPermissionFormatVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetRowLevelPermissionFormatVersion other && Equals(other);
        public bool Equals(DataSetRowLevelPermissionFormatVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetRowLevelPermissionPolicy : IEquatable<DataSetRowLevelPermissionPolicy>
    {
        private readonly string _value;

        private DataSetRowLevelPermissionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetRowLevelPermissionPolicy GrantAccess { get; } = new DataSetRowLevelPermissionPolicy("GRANT_ACCESS");
        public static DataSetRowLevelPermissionPolicy DenyAccess { get; } = new DataSetRowLevelPermissionPolicy("DENY_ACCESS");

        public static bool operator ==(DataSetRowLevelPermissionPolicy left, DataSetRowLevelPermissionPolicy right) => left.Equals(right);
        public static bool operator !=(DataSetRowLevelPermissionPolicy left, DataSetRowLevelPermissionPolicy right) => !left.Equals(right);

        public static explicit operator string(DataSetRowLevelPermissionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetRowLevelPermissionPolicy other && Equals(other);
        public bool Equals(DataSetRowLevelPermissionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceErrorInfoType : IEquatable<DataSourceErrorInfoType>
    {
        private readonly string _value;

        private DataSourceErrorInfoType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceErrorInfoType AccessDenied { get; } = new DataSourceErrorInfoType("ACCESS_DENIED");
        public static DataSourceErrorInfoType CopySourceNotFound { get; } = new DataSourceErrorInfoType("COPY_SOURCE_NOT_FOUND");
        public static DataSourceErrorInfoType Timeout { get; } = new DataSourceErrorInfoType("TIMEOUT");
        public static DataSourceErrorInfoType EngineVersionNotSupported { get; } = new DataSourceErrorInfoType("ENGINE_VERSION_NOT_SUPPORTED");
        public static DataSourceErrorInfoType UnknownHost { get; } = new DataSourceErrorInfoType("UNKNOWN_HOST");
        public static DataSourceErrorInfoType GenericSqlFailure { get; } = new DataSourceErrorInfoType("GENERIC_SQL_FAILURE");
        public static DataSourceErrorInfoType Conflict { get; } = new DataSourceErrorInfoType("CONFLICT");
        public static DataSourceErrorInfoType Unknown { get; } = new DataSourceErrorInfoType("UNKNOWN");

        public static bool operator ==(DataSourceErrorInfoType left, DataSourceErrorInfoType right) => left.Equals(right);
        public static bool operator !=(DataSourceErrorInfoType left, DataSourceErrorInfoType right) => !left.Equals(right);

        public static explicit operator string(DataSourceErrorInfoType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceErrorInfoType other && Equals(other);
        public bool Equals(DataSourceErrorInfoType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceResourceStatus : IEquatable<DataSourceResourceStatus>
    {
        private readonly string _value;

        private DataSourceResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceResourceStatus CreationInProgress { get; } = new DataSourceResourceStatus("CREATION_IN_PROGRESS");
        public static DataSourceResourceStatus CreationSuccessful { get; } = new DataSourceResourceStatus("CREATION_SUCCESSFUL");
        public static DataSourceResourceStatus CreationFailed { get; } = new DataSourceResourceStatus("CREATION_FAILED");
        public static DataSourceResourceStatus UpdateInProgress { get; } = new DataSourceResourceStatus("UPDATE_IN_PROGRESS");
        public static DataSourceResourceStatus UpdateSuccessful { get; } = new DataSourceResourceStatus("UPDATE_SUCCESSFUL");
        public static DataSourceResourceStatus UpdateFailed { get; } = new DataSourceResourceStatus("UPDATE_FAILED");
        public static DataSourceResourceStatus Deleted { get; } = new DataSourceResourceStatus("DELETED");

        public static bool operator ==(DataSourceResourceStatus left, DataSourceResourceStatus right) => left.Equals(right);
        public static bool operator !=(DataSourceResourceStatus left, DataSourceResourceStatus right) => !left.Equals(right);

        public static explicit operator string(DataSourceResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceResourceStatus other && Equals(other);
        public bool Equals(DataSourceResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceType : IEquatable<DataSourceType>
    {
        private readonly string _value;

        private DataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceType AdobeAnalytics { get; } = new DataSourceType("ADOBE_ANALYTICS");
        public static DataSourceType AmazonElasticsearch { get; } = new DataSourceType("AMAZON_ELASTICSEARCH");
        public static DataSourceType Athena { get; } = new DataSourceType("ATHENA");
        public static DataSourceType Aurora { get; } = new DataSourceType("AURORA");
        public static DataSourceType AuroraPostgresql { get; } = new DataSourceType("AURORA_POSTGRESQL");
        public static DataSourceType AwsIotAnalytics { get; } = new DataSourceType("AWS_IOT_ANALYTICS");
        public static DataSourceType Github { get; } = new DataSourceType("GITHUB");
        public static DataSourceType Jira { get; } = new DataSourceType("JIRA");
        public static DataSourceType Mariadb { get; } = new DataSourceType("MARIADB");
        public static DataSourceType Mysql { get; } = new DataSourceType("MYSQL");
        public static DataSourceType Oracle { get; } = new DataSourceType("ORACLE");
        public static DataSourceType Postgresql { get; } = new DataSourceType("POSTGRESQL");
        public static DataSourceType Presto { get; } = new DataSourceType("PRESTO");
        public static DataSourceType Redshift { get; } = new DataSourceType("REDSHIFT");
        public static DataSourceType S3 { get; } = new DataSourceType("S3");
        public static DataSourceType Salesforce { get; } = new DataSourceType("SALESFORCE");
        public static DataSourceType Servicenow { get; } = new DataSourceType("SERVICENOW");
        public static DataSourceType Snowflake { get; } = new DataSourceType("SNOWFLAKE");
        public static DataSourceType Spark { get; } = new DataSourceType("SPARK");
        public static DataSourceType Sqlserver { get; } = new DataSourceType("SQLSERVER");
        public static DataSourceType Teradata { get; } = new DataSourceType("TERADATA");
        public static DataSourceType Twitter { get; } = new DataSourceType("TWITTER");
        public static DataSourceType Timestream { get; } = new DataSourceType("TIMESTREAM");

        public static bool operator ==(DataSourceType left, DataSourceType right) => left.Equals(right);
        public static bool operator !=(DataSourceType left, DataSourceType right) => !left.Equals(right);

        public static explicit operator string(DataSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceType other && Equals(other);
        public bool Equals(DataSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateErrorType : IEquatable<TemplateErrorType>
    {
        private readonly string _value;

        private TemplateErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateErrorType SourceNotFound { get; } = new TemplateErrorType("SOURCE_NOT_FOUND");
        public static TemplateErrorType DataSetNotFound { get; } = new TemplateErrorType("DATA_SET_NOT_FOUND");
        public static TemplateErrorType InternalFailure { get; } = new TemplateErrorType("INTERNAL_FAILURE");
        public static TemplateErrorType AccessDenied { get; } = new TemplateErrorType("ACCESS_DENIED");

        public static bool operator ==(TemplateErrorType left, TemplateErrorType right) => left.Equals(right);
        public static bool operator !=(TemplateErrorType left, TemplateErrorType right) => !left.Equals(right);

        public static explicit operator string(TemplateErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateErrorType other && Equals(other);
        public bool Equals(TemplateErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateResourceStatus : IEquatable<TemplateResourceStatus>
    {
        private readonly string _value;

        private TemplateResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateResourceStatus CreationInProgress { get; } = new TemplateResourceStatus("CREATION_IN_PROGRESS");
        public static TemplateResourceStatus CreationSuccessful { get; } = new TemplateResourceStatus("CREATION_SUCCESSFUL");
        public static TemplateResourceStatus CreationFailed { get; } = new TemplateResourceStatus("CREATION_FAILED");
        public static TemplateResourceStatus UpdateInProgress { get; } = new TemplateResourceStatus("UPDATE_IN_PROGRESS");
        public static TemplateResourceStatus UpdateSuccessful { get; } = new TemplateResourceStatus("UPDATE_SUCCESSFUL");
        public static TemplateResourceStatus UpdateFailed { get; } = new TemplateResourceStatus("UPDATE_FAILED");
        public static TemplateResourceStatus Deleted { get; } = new TemplateResourceStatus("DELETED");

        public static bool operator ==(TemplateResourceStatus left, TemplateResourceStatus right) => left.Equals(right);
        public static bool operator !=(TemplateResourceStatus left, TemplateResourceStatus right) => !left.Equals(right);

        public static explicit operator string(TemplateResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateResourceStatus other && Equals(other);
        public bool Equals(TemplateResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThemeErrorType : IEquatable<ThemeErrorType>
    {
        private readonly string _value;

        private ThemeErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThemeErrorType InternalFailure { get; } = new ThemeErrorType("INTERNAL_FAILURE");

        public static bool operator ==(ThemeErrorType left, ThemeErrorType right) => left.Equals(right);
        public static bool operator !=(ThemeErrorType left, ThemeErrorType right) => !left.Equals(right);

        public static explicit operator string(ThemeErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThemeErrorType other && Equals(other);
        public bool Equals(ThemeErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThemeResourceStatus : IEquatable<ThemeResourceStatus>
    {
        private readonly string _value;

        private ThemeResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThemeResourceStatus CreationInProgress { get; } = new ThemeResourceStatus("CREATION_IN_PROGRESS");
        public static ThemeResourceStatus CreationSuccessful { get; } = new ThemeResourceStatus("CREATION_SUCCESSFUL");
        public static ThemeResourceStatus CreationFailed { get; } = new ThemeResourceStatus("CREATION_FAILED");
        public static ThemeResourceStatus UpdateInProgress { get; } = new ThemeResourceStatus("UPDATE_IN_PROGRESS");
        public static ThemeResourceStatus UpdateSuccessful { get; } = new ThemeResourceStatus("UPDATE_SUCCESSFUL");
        public static ThemeResourceStatus UpdateFailed { get; } = new ThemeResourceStatus("UPDATE_FAILED");
        public static ThemeResourceStatus Deleted { get; } = new ThemeResourceStatus("DELETED");

        public static bool operator ==(ThemeResourceStatus left, ThemeResourceStatus right) => left.Equals(right);
        public static bool operator !=(ThemeResourceStatus left, ThemeResourceStatus right) => !left.Equals(right);

        public static explicit operator string(ThemeResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThemeResourceStatus other && Equals(other);
        public bool Equals(ThemeResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThemeType : IEquatable<ThemeType>
    {
        private readonly string _value;

        private ThemeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThemeType Quicksight { get; } = new ThemeType("QUICKSIGHT");
        public static ThemeType Custom { get; } = new ThemeType("CUSTOM");
        public static ThemeType All { get; } = new ThemeType("ALL");

        public static bool operator ==(ThemeType left, ThemeType right) => left.Equals(right);
        public static bool operator !=(ThemeType left, ThemeType right) => !left.Equals(right);

        public static explicit operator string(ThemeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThemeType other && Equals(other);
        public bool Equals(ThemeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
