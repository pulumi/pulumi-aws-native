// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.QuickSight
{
    [EnumType]
    public readonly struct AnalysisAnchorOption : IEquatable<AnalysisAnchorOption>
    {
        private readonly string _value;

        private AnalysisAnchorOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisAnchorOption Now { get; } = new AnalysisAnchorOption("NOW");

        public static bool operator ==(AnalysisAnchorOption left, AnalysisAnchorOption right) => left.Equals(right);
        public static bool operator !=(AnalysisAnchorOption left, AnalysisAnchorOption right) => !left.Equals(right);

        public static explicit operator string(AnalysisAnchorOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisAnchorOption other && Equals(other);
        public bool Equals(AnalysisAnchorOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisArcThickness : IEquatable<AnalysisArcThickness>
    {
        private readonly string _value;

        private AnalysisArcThickness(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisArcThickness Small { get; } = new AnalysisArcThickness("SMALL");
        public static AnalysisArcThickness Medium { get; } = new AnalysisArcThickness("MEDIUM");
        public static AnalysisArcThickness Large { get; } = new AnalysisArcThickness("LARGE");
        public static AnalysisArcThickness Whole { get; } = new AnalysisArcThickness("WHOLE");

        public static bool operator ==(AnalysisArcThickness left, AnalysisArcThickness right) => left.Equals(right);
        public static bool operator !=(AnalysisArcThickness left, AnalysisArcThickness right) => !left.Equals(right);

        public static explicit operator string(AnalysisArcThickness value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisArcThickness other && Equals(other);
        public bool Equals(AnalysisArcThickness other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisArcThicknessOptions : IEquatable<AnalysisArcThicknessOptions>
    {
        private readonly string _value;

        private AnalysisArcThicknessOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisArcThicknessOptions Small { get; } = new AnalysisArcThicknessOptions("SMALL");
        public static AnalysisArcThicknessOptions Medium { get; } = new AnalysisArcThicknessOptions("MEDIUM");
        public static AnalysisArcThicknessOptions Large { get; } = new AnalysisArcThicknessOptions("LARGE");

        public static bool operator ==(AnalysisArcThicknessOptions left, AnalysisArcThicknessOptions right) => left.Equals(right);
        public static bool operator !=(AnalysisArcThicknessOptions left, AnalysisArcThicknessOptions right) => !left.Equals(right);

        public static explicit operator string(AnalysisArcThicknessOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisArcThicknessOptions other && Equals(other);
        public bool Equals(AnalysisArcThicknessOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisAxisBinding : IEquatable<AnalysisAxisBinding>
    {
        private readonly string _value;

        private AnalysisAxisBinding(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisAxisBinding PrimaryYaxis { get; } = new AnalysisAxisBinding("PRIMARY_YAXIS");
        public static AnalysisAxisBinding SecondaryYaxis { get; } = new AnalysisAxisBinding("SECONDARY_YAXIS");

        public static bool operator ==(AnalysisAxisBinding left, AnalysisAxisBinding right) => left.Equals(right);
        public static bool operator !=(AnalysisAxisBinding left, AnalysisAxisBinding right) => !left.Equals(right);

        public static explicit operator string(AnalysisAxisBinding value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisAxisBinding other && Equals(other);
        public bool Equals(AnalysisAxisBinding other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisBarChartOrientation : IEquatable<AnalysisBarChartOrientation>
    {
        private readonly string _value;

        private AnalysisBarChartOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisBarChartOrientation Horizontal { get; } = new AnalysisBarChartOrientation("HORIZONTAL");
        public static AnalysisBarChartOrientation Vertical { get; } = new AnalysisBarChartOrientation("VERTICAL");

        public static bool operator ==(AnalysisBarChartOrientation left, AnalysisBarChartOrientation right) => left.Equals(right);
        public static bool operator !=(AnalysisBarChartOrientation left, AnalysisBarChartOrientation right) => !left.Equals(right);

        public static explicit operator string(AnalysisBarChartOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisBarChartOrientation other && Equals(other);
        public bool Equals(AnalysisBarChartOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisBarsArrangement : IEquatable<AnalysisBarsArrangement>
    {
        private readonly string _value;

        private AnalysisBarsArrangement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisBarsArrangement Clustered { get; } = new AnalysisBarsArrangement("CLUSTERED");
        public static AnalysisBarsArrangement Stacked { get; } = new AnalysisBarsArrangement("STACKED");
        public static AnalysisBarsArrangement StackedPercent { get; } = new AnalysisBarsArrangement("STACKED_PERCENT");

        public static bool operator ==(AnalysisBarsArrangement left, AnalysisBarsArrangement right) => left.Equals(right);
        public static bool operator !=(AnalysisBarsArrangement left, AnalysisBarsArrangement right) => !left.Equals(right);

        public static explicit operator string(AnalysisBarsArrangement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisBarsArrangement other && Equals(other);
        public bool Equals(AnalysisBarsArrangement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisBaseMapStyleType : IEquatable<AnalysisBaseMapStyleType>
    {
        private readonly string _value;

        private AnalysisBaseMapStyleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisBaseMapStyleType LightGray { get; } = new AnalysisBaseMapStyleType("LIGHT_GRAY");
        public static AnalysisBaseMapStyleType DarkGray { get; } = new AnalysisBaseMapStyleType("DARK_GRAY");
        public static AnalysisBaseMapStyleType Street { get; } = new AnalysisBaseMapStyleType("STREET");
        public static AnalysisBaseMapStyleType Imagery { get; } = new AnalysisBaseMapStyleType("IMAGERY");

        public static bool operator ==(AnalysisBaseMapStyleType left, AnalysisBaseMapStyleType right) => left.Equals(right);
        public static bool operator !=(AnalysisBaseMapStyleType left, AnalysisBaseMapStyleType right) => !left.Equals(right);

        public static explicit operator string(AnalysisBaseMapStyleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisBaseMapStyleType other && Equals(other);
        public bool Equals(AnalysisBaseMapStyleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisBoxPlotFillStyle : IEquatable<AnalysisBoxPlotFillStyle>
    {
        private readonly string _value;

        private AnalysisBoxPlotFillStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisBoxPlotFillStyle Solid { get; } = new AnalysisBoxPlotFillStyle("SOLID");
        public static AnalysisBoxPlotFillStyle Transparent { get; } = new AnalysisBoxPlotFillStyle("TRANSPARENT");

        public static bool operator ==(AnalysisBoxPlotFillStyle left, AnalysisBoxPlotFillStyle right) => left.Equals(right);
        public static bool operator !=(AnalysisBoxPlotFillStyle left, AnalysisBoxPlotFillStyle right) => !left.Equals(right);

        public static explicit operator string(AnalysisBoxPlotFillStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisBoxPlotFillStyle other && Equals(other);
        public bool Equals(AnalysisBoxPlotFillStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisCategoricalAggregationFunction : IEquatable<AnalysisCategoricalAggregationFunction>
    {
        private readonly string _value;

        private AnalysisCategoricalAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisCategoricalAggregationFunction Count { get; } = new AnalysisCategoricalAggregationFunction("COUNT");
        public static AnalysisCategoricalAggregationFunction DistinctCount { get; } = new AnalysisCategoricalAggregationFunction("DISTINCT_COUNT");

        public static bool operator ==(AnalysisCategoricalAggregationFunction left, AnalysisCategoricalAggregationFunction right) => left.Equals(right);
        public static bool operator !=(AnalysisCategoricalAggregationFunction left, AnalysisCategoricalAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(AnalysisCategoricalAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisCategoricalAggregationFunction other && Equals(other);
        public bool Equals(AnalysisCategoricalAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisCategoryFilterMatchOperator : IEquatable<AnalysisCategoryFilterMatchOperator>
    {
        private readonly string _value;

        private AnalysisCategoryFilterMatchOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisCategoryFilterMatchOperator EqualsValue { get; } = new AnalysisCategoryFilterMatchOperator("EQUALS");
        public static AnalysisCategoryFilterMatchOperator DoesNotEqual { get; } = new AnalysisCategoryFilterMatchOperator("DOES_NOT_EQUAL");
        public static AnalysisCategoryFilterMatchOperator Contains { get; } = new AnalysisCategoryFilterMatchOperator("CONTAINS");
        public static AnalysisCategoryFilterMatchOperator DoesNotContain { get; } = new AnalysisCategoryFilterMatchOperator("DOES_NOT_CONTAIN");
        public static AnalysisCategoryFilterMatchOperator StartsWith { get; } = new AnalysisCategoryFilterMatchOperator("STARTS_WITH");
        public static AnalysisCategoryFilterMatchOperator EndsWith { get; } = new AnalysisCategoryFilterMatchOperator("ENDS_WITH");

        public static bool operator ==(AnalysisCategoryFilterMatchOperator left, AnalysisCategoryFilterMatchOperator right) => left.Equals(right);
        public static bool operator !=(AnalysisCategoryFilterMatchOperator left, AnalysisCategoryFilterMatchOperator right) => !left.Equals(right);

        public static explicit operator string(AnalysisCategoryFilterMatchOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisCategoryFilterMatchOperator other && Equals(other);
        public bool Equals(AnalysisCategoryFilterMatchOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisCategoryFilterSelectAllOptions : IEquatable<AnalysisCategoryFilterSelectAllOptions>
    {
        private readonly string _value;

        private AnalysisCategoryFilterSelectAllOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisCategoryFilterSelectAllOptions FilterAllValues { get; } = new AnalysisCategoryFilterSelectAllOptions("FILTER_ALL_VALUES");

        public static bool operator ==(AnalysisCategoryFilterSelectAllOptions left, AnalysisCategoryFilterSelectAllOptions right) => left.Equals(right);
        public static bool operator !=(AnalysisCategoryFilterSelectAllOptions left, AnalysisCategoryFilterSelectAllOptions right) => !left.Equals(right);

        public static explicit operator string(AnalysisCategoryFilterSelectAllOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisCategoryFilterSelectAllOptions other && Equals(other);
        public bool Equals(AnalysisCategoryFilterSelectAllOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisColorFillType : IEquatable<AnalysisColorFillType>
    {
        private readonly string _value;

        private AnalysisColorFillType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisColorFillType Discrete { get; } = new AnalysisColorFillType("DISCRETE");
        public static AnalysisColorFillType Gradient { get; } = new AnalysisColorFillType("GRADIENT");

        public static bool operator ==(AnalysisColorFillType left, AnalysisColorFillType right) => left.Equals(right);
        public static bool operator !=(AnalysisColorFillType left, AnalysisColorFillType right) => !left.Equals(right);

        public static explicit operator string(AnalysisColorFillType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisColorFillType other && Equals(other);
        public bool Equals(AnalysisColorFillType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisColumnRole : IEquatable<AnalysisColumnRole>
    {
        private readonly string _value;

        private AnalysisColumnRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisColumnRole Dimension { get; } = new AnalysisColumnRole("DIMENSION");
        public static AnalysisColumnRole Measure { get; } = new AnalysisColumnRole("MEASURE");

        public static bool operator ==(AnalysisColumnRole left, AnalysisColumnRole right) => left.Equals(right);
        public static bool operator !=(AnalysisColumnRole left, AnalysisColumnRole right) => !left.Equals(right);

        public static explicit operator string(AnalysisColumnRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisColumnRole other && Equals(other);
        public bool Equals(AnalysisColumnRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisComparisonMethod : IEquatable<AnalysisComparisonMethod>
    {
        private readonly string _value;

        private AnalysisComparisonMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisComparisonMethod Difference { get; } = new AnalysisComparisonMethod("DIFFERENCE");
        public static AnalysisComparisonMethod PercentDifference { get; } = new AnalysisComparisonMethod("PERCENT_DIFFERENCE");
        public static AnalysisComparisonMethod Percent { get; } = new AnalysisComparisonMethod("PERCENT");

        public static bool operator ==(AnalysisComparisonMethod left, AnalysisComparisonMethod right) => left.Equals(right);
        public static bool operator !=(AnalysisComparisonMethod left, AnalysisComparisonMethod right) => !left.Equals(right);

        public static explicit operator string(AnalysisComparisonMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisComparisonMethod other && Equals(other);
        public bool Equals(AnalysisComparisonMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisConditionalFormattingIconDisplayOption : IEquatable<AnalysisConditionalFormattingIconDisplayOption>
    {
        private readonly string _value;

        private AnalysisConditionalFormattingIconDisplayOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisConditionalFormattingIconDisplayOption IconOnly { get; } = new AnalysisConditionalFormattingIconDisplayOption("ICON_ONLY");

        public static bool operator ==(AnalysisConditionalFormattingIconDisplayOption left, AnalysisConditionalFormattingIconDisplayOption right) => left.Equals(right);
        public static bool operator !=(AnalysisConditionalFormattingIconDisplayOption left, AnalysisConditionalFormattingIconDisplayOption right) => !left.Equals(right);

        public static explicit operator string(AnalysisConditionalFormattingIconDisplayOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisConditionalFormattingIconDisplayOption other && Equals(other);
        public bool Equals(AnalysisConditionalFormattingIconDisplayOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisConditionalFormattingIconSetType : IEquatable<AnalysisConditionalFormattingIconSetType>
    {
        private readonly string _value;

        private AnalysisConditionalFormattingIconSetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisConditionalFormattingIconSetType PlusMinus { get; } = new AnalysisConditionalFormattingIconSetType("PLUS_MINUS");
        public static AnalysisConditionalFormattingIconSetType CheckX { get; } = new AnalysisConditionalFormattingIconSetType("CHECK_X");
        public static AnalysisConditionalFormattingIconSetType ThreeColorArrow { get; } = new AnalysisConditionalFormattingIconSetType("THREE_COLOR_ARROW");
        public static AnalysisConditionalFormattingIconSetType ThreeGrayArrow { get; } = new AnalysisConditionalFormattingIconSetType("THREE_GRAY_ARROW");
        public static AnalysisConditionalFormattingIconSetType CaretUpMinusDown { get; } = new AnalysisConditionalFormattingIconSetType("CARET_UP_MINUS_DOWN");
        public static AnalysisConditionalFormattingIconSetType ThreeShape { get; } = new AnalysisConditionalFormattingIconSetType("THREE_SHAPE");
        public static AnalysisConditionalFormattingIconSetType ThreeCircle { get; } = new AnalysisConditionalFormattingIconSetType("THREE_CIRCLE");
        public static AnalysisConditionalFormattingIconSetType Flags { get; } = new AnalysisConditionalFormattingIconSetType("FLAGS");
        public static AnalysisConditionalFormattingIconSetType Bars { get; } = new AnalysisConditionalFormattingIconSetType("BARS");
        public static AnalysisConditionalFormattingIconSetType FourColorArrow { get; } = new AnalysisConditionalFormattingIconSetType("FOUR_COLOR_ARROW");
        public static AnalysisConditionalFormattingIconSetType FourGrayArrow { get; } = new AnalysisConditionalFormattingIconSetType("FOUR_GRAY_ARROW");

        public static bool operator ==(AnalysisConditionalFormattingIconSetType left, AnalysisConditionalFormattingIconSetType right) => left.Equals(right);
        public static bool operator !=(AnalysisConditionalFormattingIconSetType left, AnalysisConditionalFormattingIconSetType right) => !left.Equals(right);

        public static explicit operator string(AnalysisConditionalFormattingIconSetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisConditionalFormattingIconSetType other && Equals(other);
        public bool Equals(AnalysisConditionalFormattingIconSetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisCrossDatasetTypes : IEquatable<AnalysisCrossDatasetTypes>
    {
        private readonly string _value;

        private AnalysisCrossDatasetTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisCrossDatasetTypes AllDatasets { get; } = new AnalysisCrossDatasetTypes("ALL_DATASETS");
        public static AnalysisCrossDatasetTypes SingleDataset { get; } = new AnalysisCrossDatasetTypes("SINGLE_DATASET");

        public static bool operator ==(AnalysisCrossDatasetTypes left, AnalysisCrossDatasetTypes right) => left.Equals(right);
        public static bool operator !=(AnalysisCrossDatasetTypes left, AnalysisCrossDatasetTypes right) => !left.Equals(right);

        public static explicit operator string(AnalysisCrossDatasetTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisCrossDatasetTypes other && Equals(other);
        public bool Equals(AnalysisCrossDatasetTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisCustomContentImageScalingConfiguration : IEquatable<AnalysisCustomContentImageScalingConfiguration>
    {
        private readonly string _value;

        private AnalysisCustomContentImageScalingConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisCustomContentImageScalingConfiguration FitToHeight { get; } = new AnalysisCustomContentImageScalingConfiguration("FIT_TO_HEIGHT");
        public static AnalysisCustomContentImageScalingConfiguration FitToWidth { get; } = new AnalysisCustomContentImageScalingConfiguration("FIT_TO_WIDTH");
        public static AnalysisCustomContentImageScalingConfiguration DoNotScale { get; } = new AnalysisCustomContentImageScalingConfiguration("DO_NOT_SCALE");
        public static AnalysisCustomContentImageScalingConfiguration ScaleToVisual { get; } = new AnalysisCustomContentImageScalingConfiguration("SCALE_TO_VISUAL");

        public static bool operator ==(AnalysisCustomContentImageScalingConfiguration left, AnalysisCustomContentImageScalingConfiguration right) => left.Equals(right);
        public static bool operator !=(AnalysisCustomContentImageScalingConfiguration left, AnalysisCustomContentImageScalingConfiguration right) => !left.Equals(right);

        public static explicit operator string(AnalysisCustomContentImageScalingConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisCustomContentImageScalingConfiguration other && Equals(other);
        public bool Equals(AnalysisCustomContentImageScalingConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisCustomContentType : IEquatable<AnalysisCustomContentType>
    {
        private readonly string _value;

        private AnalysisCustomContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisCustomContentType Image { get; } = new AnalysisCustomContentType("IMAGE");
        public static AnalysisCustomContentType OtherEmbeddedContent { get; } = new AnalysisCustomContentType("OTHER_EMBEDDED_CONTENT");

        public static bool operator ==(AnalysisCustomContentType left, AnalysisCustomContentType right) => left.Equals(right);
        public static bool operator !=(AnalysisCustomContentType left, AnalysisCustomContentType right) => !left.Equals(right);

        public static explicit operator string(AnalysisCustomContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisCustomContentType other && Equals(other);
        public bool Equals(AnalysisCustomContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisDataLabelContent : IEquatable<AnalysisDataLabelContent>
    {
        private readonly string _value;

        private AnalysisDataLabelContent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisDataLabelContent Value { get; } = new AnalysisDataLabelContent("VALUE");
        public static AnalysisDataLabelContent Percent { get; } = new AnalysisDataLabelContent("PERCENT");
        public static AnalysisDataLabelContent ValueAndPercent { get; } = new AnalysisDataLabelContent("VALUE_AND_PERCENT");

        public static bool operator ==(AnalysisDataLabelContent left, AnalysisDataLabelContent right) => left.Equals(right);
        public static bool operator !=(AnalysisDataLabelContent left, AnalysisDataLabelContent right) => !left.Equals(right);

        public static explicit operator string(AnalysisDataLabelContent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisDataLabelContent other && Equals(other);
        public bool Equals(AnalysisDataLabelContent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisDataLabelOverlap : IEquatable<AnalysisDataLabelOverlap>
    {
        private readonly string _value;

        private AnalysisDataLabelOverlap(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisDataLabelOverlap DisableOverlap { get; } = new AnalysisDataLabelOverlap("DISABLE_OVERLAP");
        public static AnalysisDataLabelOverlap EnableOverlap { get; } = new AnalysisDataLabelOverlap("ENABLE_OVERLAP");

        public static bool operator ==(AnalysisDataLabelOverlap left, AnalysisDataLabelOverlap right) => left.Equals(right);
        public static bool operator !=(AnalysisDataLabelOverlap left, AnalysisDataLabelOverlap right) => !left.Equals(right);

        public static explicit operator string(AnalysisDataLabelOverlap value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisDataLabelOverlap other && Equals(other);
        public bool Equals(AnalysisDataLabelOverlap other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisDataLabelPosition : IEquatable<AnalysisDataLabelPosition>
    {
        private readonly string _value;

        private AnalysisDataLabelPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisDataLabelPosition Inside { get; } = new AnalysisDataLabelPosition("INSIDE");
        public static AnalysisDataLabelPosition Outside { get; } = new AnalysisDataLabelPosition("OUTSIDE");
        public static AnalysisDataLabelPosition Left { get; } = new AnalysisDataLabelPosition("LEFT");
        public static AnalysisDataLabelPosition Top { get; } = new AnalysisDataLabelPosition("TOP");
        public static AnalysisDataLabelPosition Bottom { get; } = new AnalysisDataLabelPosition("BOTTOM");
        public static AnalysisDataLabelPosition Right { get; } = new AnalysisDataLabelPosition("RIGHT");

        public static bool operator ==(AnalysisDataLabelPosition left, AnalysisDataLabelPosition right) => left.Equals(right);
        public static bool operator !=(AnalysisDataLabelPosition left, AnalysisDataLabelPosition right) => !left.Equals(right);

        public static explicit operator string(AnalysisDataLabelPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisDataLabelPosition other && Equals(other);
        public bool Equals(AnalysisDataLabelPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisDateAggregationFunction : IEquatable<AnalysisDateAggregationFunction>
    {
        private readonly string _value;

        private AnalysisDateAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisDateAggregationFunction Count { get; } = new AnalysisDateAggregationFunction("COUNT");
        public static AnalysisDateAggregationFunction DistinctCount { get; } = new AnalysisDateAggregationFunction("DISTINCT_COUNT");
        public static AnalysisDateAggregationFunction Min { get; } = new AnalysisDateAggregationFunction("MIN");
        public static AnalysisDateAggregationFunction Max { get; } = new AnalysisDateAggregationFunction("MAX");

        public static bool operator ==(AnalysisDateAggregationFunction left, AnalysisDateAggregationFunction right) => left.Equals(right);
        public static bool operator !=(AnalysisDateAggregationFunction left, AnalysisDateAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(AnalysisDateAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisDateAggregationFunction other && Equals(other);
        public bool Equals(AnalysisDateAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisErrorType : IEquatable<AnalysisErrorType>
    {
        private readonly string _value;

        private AnalysisErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisErrorType AccessDenied { get; } = new AnalysisErrorType("ACCESS_DENIED");
        public static AnalysisErrorType SourceNotFound { get; } = new AnalysisErrorType("SOURCE_NOT_FOUND");
        public static AnalysisErrorType DataSetNotFound { get; } = new AnalysisErrorType("DATA_SET_NOT_FOUND");
        public static AnalysisErrorType InternalFailure { get; } = new AnalysisErrorType("INTERNAL_FAILURE");
        public static AnalysisErrorType ParameterValueIncompatible { get; } = new AnalysisErrorType("PARAMETER_VALUE_INCOMPATIBLE");
        public static AnalysisErrorType ParameterTypeInvalid { get; } = new AnalysisErrorType("PARAMETER_TYPE_INVALID");
        public static AnalysisErrorType ParameterNotFound { get; } = new AnalysisErrorType("PARAMETER_NOT_FOUND");
        public static AnalysisErrorType ColumnTypeMismatch { get; } = new AnalysisErrorType("COLUMN_TYPE_MISMATCH");
        public static AnalysisErrorType ColumnGeographicRoleMismatch { get; } = new AnalysisErrorType("COLUMN_GEOGRAPHIC_ROLE_MISMATCH");
        public static AnalysisErrorType ColumnReplacementMissing { get; } = new AnalysisErrorType("COLUMN_REPLACEMENT_MISSING");

        public static bool operator ==(AnalysisErrorType left, AnalysisErrorType right) => left.Equals(right);
        public static bool operator !=(AnalysisErrorType left, AnalysisErrorType right) => !left.Equals(right);

        public static explicit operator string(AnalysisErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisErrorType other && Equals(other);
        public bool Equals(AnalysisErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisFilterNullOption : IEquatable<AnalysisFilterNullOption>
    {
        private readonly string _value;

        private AnalysisFilterNullOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisFilterNullOption AllValues { get; } = new AnalysisFilterNullOption("ALL_VALUES");
        public static AnalysisFilterNullOption NullsOnly { get; } = new AnalysisFilterNullOption("NULLS_ONLY");
        public static AnalysisFilterNullOption NonNullsOnly { get; } = new AnalysisFilterNullOption("NON_NULLS_ONLY");

        public static bool operator ==(AnalysisFilterNullOption left, AnalysisFilterNullOption right) => left.Equals(right);
        public static bool operator !=(AnalysisFilterNullOption left, AnalysisFilterNullOption right) => !left.Equals(right);

        public static explicit operator string(AnalysisFilterNullOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisFilterNullOption other && Equals(other);
        public bool Equals(AnalysisFilterNullOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisFilterVisualScope : IEquatable<AnalysisFilterVisualScope>
    {
        private readonly string _value;

        private AnalysisFilterVisualScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisFilterVisualScope AllVisuals { get; } = new AnalysisFilterVisualScope("ALL_VISUALS");
        public static AnalysisFilterVisualScope SelectedVisuals { get; } = new AnalysisFilterVisualScope("SELECTED_VISUALS");

        public static bool operator ==(AnalysisFilterVisualScope left, AnalysisFilterVisualScope right) => left.Equals(right);
        public static bool operator !=(AnalysisFilterVisualScope left, AnalysisFilterVisualScope right) => !left.Equals(right);

        public static explicit operator string(AnalysisFilterVisualScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisFilterVisualScope other && Equals(other);
        public bool Equals(AnalysisFilterVisualScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisFontDecoration : IEquatable<AnalysisFontDecoration>
    {
        private readonly string _value;

        private AnalysisFontDecoration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisFontDecoration Underline { get; } = new AnalysisFontDecoration("UNDERLINE");
        public static AnalysisFontDecoration None { get; } = new AnalysisFontDecoration("NONE");

        public static bool operator ==(AnalysisFontDecoration left, AnalysisFontDecoration right) => left.Equals(right);
        public static bool operator !=(AnalysisFontDecoration left, AnalysisFontDecoration right) => !left.Equals(right);

        public static explicit operator string(AnalysisFontDecoration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisFontDecoration other && Equals(other);
        public bool Equals(AnalysisFontDecoration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisFontStyle : IEquatable<AnalysisFontStyle>
    {
        private readonly string _value;

        private AnalysisFontStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisFontStyle Normal { get; } = new AnalysisFontStyle("NORMAL");
        public static AnalysisFontStyle Italic { get; } = new AnalysisFontStyle("ITALIC");

        public static bool operator ==(AnalysisFontStyle left, AnalysisFontStyle right) => left.Equals(right);
        public static bool operator !=(AnalysisFontStyle left, AnalysisFontStyle right) => !left.Equals(right);

        public static explicit operator string(AnalysisFontStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisFontStyle other && Equals(other);
        public bool Equals(AnalysisFontStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisFontWeightName : IEquatable<AnalysisFontWeightName>
    {
        private readonly string _value;

        private AnalysisFontWeightName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisFontWeightName Normal { get; } = new AnalysisFontWeightName("NORMAL");
        public static AnalysisFontWeightName Bold { get; } = new AnalysisFontWeightName("BOLD");

        public static bool operator ==(AnalysisFontWeightName left, AnalysisFontWeightName right) => left.Equals(right);
        public static bool operator !=(AnalysisFontWeightName left, AnalysisFontWeightName right) => !left.Equals(right);

        public static explicit operator string(AnalysisFontWeightName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisFontWeightName other && Equals(other);
        public bool Equals(AnalysisFontWeightName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisForecastComputationSeasonality : IEquatable<AnalysisForecastComputationSeasonality>
    {
        private readonly string _value;

        private AnalysisForecastComputationSeasonality(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisForecastComputationSeasonality Automatic { get; } = new AnalysisForecastComputationSeasonality("AUTOMATIC");
        public static AnalysisForecastComputationSeasonality Custom { get; } = new AnalysisForecastComputationSeasonality("CUSTOM");

        public static bool operator ==(AnalysisForecastComputationSeasonality left, AnalysisForecastComputationSeasonality right) => left.Equals(right);
        public static bool operator !=(AnalysisForecastComputationSeasonality left, AnalysisForecastComputationSeasonality right) => !left.Equals(right);

        public static explicit operator string(AnalysisForecastComputationSeasonality value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisForecastComputationSeasonality other && Equals(other);
        public bool Equals(AnalysisForecastComputationSeasonality other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisFunnelChartMeasureDataLabelStyle : IEquatable<AnalysisFunnelChartMeasureDataLabelStyle>
    {
        private readonly string _value;

        private AnalysisFunnelChartMeasureDataLabelStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisFunnelChartMeasureDataLabelStyle ValueOnly { get; } = new AnalysisFunnelChartMeasureDataLabelStyle("VALUE_ONLY");
        public static AnalysisFunnelChartMeasureDataLabelStyle PercentageByFirstStage { get; } = new AnalysisFunnelChartMeasureDataLabelStyle("PERCENTAGE_BY_FIRST_STAGE");
        public static AnalysisFunnelChartMeasureDataLabelStyle PercentageByPreviousStage { get; } = new AnalysisFunnelChartMeasureDataLabelStyle("PERCENTAGE_BY_PREVIOUS_STAGE");
        public static AnalysisFunnelChartMeasureDataLabelStyle ValueAndPercentageByFirstStage { get; } = new AnalysisFunnelChartMeasureDataLabelStyle("VALUE_AND_PERCENTAGE_BY_FIRST_STAGE");
        public static AnalysisFunnelChartMeasureDataLabelStyle ValueAndPercentageByPreviousStage { get; } = new AnalysisFunnelChartMeasureDataLabelStyle("VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE");

        public static bool operator ==(AnalysisFunnelChartMeasureDataLabelStyle left, AnalysisFunnelChartMeasureDataLabelStyle right) => left.Equals(right);
        public static bool operator !=(AnalysisFunnelChartMeasureDataLabelStyle left, AnalysisFunnelChartMeasureDataLabelStyle right) => !left.Equals(right);

        public static explicit operator string(AnalysisFunnelChartMeasureDataLabelStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisFunnelChartMeasureDataLabelStyle other && Equals(other);
        public bool Equals(AnalysisFunnelChartMeasureDataLabelStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisGeospatialSelectedPointStyle : IEquatable<AnalysisGeospatialSelectedPointStyle>
    {
        private readonly string _value;

        private AnalysisGeospatialSelectedPointStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisGeospatialSelectedPointStyle Point { get; } = new AnalysisGeospatialSelectedPointStyle("POINT");
        public static AnalysisGeospatialSelectedPointStyle Cluster { get; } = new AnalysisGeospatialSelectedPointStyle("CLUSTER");
        public static AnalysisGeospatialSelectedPointStyle Heatmap { get; } = new AnalysisGeospatialSelectedPointStyle("HEATMAP");

        public static bool operator ==(AnalysisGeospatialSelectedPointStyle left, AnalysisGeospatialSelectedPointStyle right) => left.Equals(right);
        public static bool operator !=(AnalysisGeospatialSelectedPointStyle left, AnalysisGeospatialSelectedPointStyle right) => !left.Equals(right);

        public static explicit operator string(AnalysisGeospatialSelectedPointStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisGeospatialSelectedPointStyle other && Equals(other);
        public bool Equals(AnalysisGeospatialSelectedPointStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisHistogramBinType : IEquatable<AnalysisHistogramBinType>
    {
        private readonly string _value;

        private AnalysisHistogramBinType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisHistogramBinType BinCount { get; } = new AnalysisHistogramBinType("BIN_COUNT");
        public static AnalysisHistogramBinType BinWidth { get; } = new AnalysisHistogramBinType("BIN_WIDTH");

        public static bool operator ==(AnalysisHistogramBinType left, AnalysisHistogramBinType right) => left.Equals(right);
        public static bool operator !=(AnalysisHistogramBinType left, AnalysisHistogramBinType right) => !left.Equals(right);

        public static explicit operator string(AnalysisHistogramBinType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisHistogramBinType other && Equals(other);
        public bool Equals(AnalysisHistogramBinType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisHorizontalTextAlignment : IEquatable<AnalysisHorizontalTextAlignment>
    {
        private readonly string _value;

        private AnalysisHorizontalTextAlignment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisHorizontalTextAlignment Left { get; } = new AnalysisHorizontalTextAlignment("LEFT");
        public static AnalysisHorizontalTextAlignment Center { get; } = new AnalysisHorizontalTextAlignment("CENTER");
        public static AnalysisHorizontalTextAlignment Right { get; } = new AnalysisHorizontalTextAlignment("RIGHT");
        public static AnalysisHorizontalTextAlignment Auto { get; } = new AnalysisHorizontalTextAlignment("AUTO");

        public static bool operator ==(AnalysisHorizontalTextAlignment left, AnalysisHorizontalTextAlignment right) => left.Equals(right);
        public static bool operator !=(AnalysisHorizontalTextAlignment left, AnalysisHorizontalTextAlignment right) => !left.Equals(right);

        public static explicit operator string(AnalysisHorizontalTextAlignment value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisHorizontalTextAlignment other && Equals(other);
        public bool Equals(AnalysisHorizontalTextAlignment other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisIcon : IEquatable<AnalysisIcon>
    {
        private readonly string _value;

        private AnalysisIcon(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisIcon CaretUp { get; } = new AnalysisIcon("CARET_UP");
        public static AnalysisIcon CaretDown { get; } = new AnalysisIcon("CARET_DOWN");
        public static AnalysisIcon Plus { get; } = new AnalysisIcon("PLUS");
        public static AnalysisIcon Minus { get; } = new AnalysisIcon("MINUS");
        public static AnalysisIcon ArrowUp { get; } = new AnalysisIcon("ARROW_UP");
        public static AnalysisIcon ArrowDown { get; } = new AnalysisIcon("ARROW_DOWN");
        public static AnalysisIcon ArrowLeft { get; } = new AnalysisIcon("ARROW_LEFT");
        public static AnalysisIcon ArrowUpLeft { get; } = new AnalysisIcon("ARROW_UP_LEFT");
        public static AnalysisIcon ArrowDownLeft { get; } = new AnalysisIcon("ARROW_DOWN_LEFT");
        public static AnalysisIcon ArrowRight { get; } = new AnalysisIcon("ARROW_RIGHT");
        public static AnalysisIcon ArrowUpRight { get; } = new AnalysisIcon("ARROW_UP_RIGHT");
        public static AnalysisIcon ArrowDownRight { get; } = new AnalysisIcon("ARROW_DOWN_RIGHT");
        public static AnalysisIcon FaceUp { get; } = new AnalysisIcon("FACE_UP");
        public static AnalysisIcon FaceDown { get; } = new AnalysisIcon("FACE_DOWN");
        public static AnalysisIcon FaceFlat { get; } = new AnalysisIcon("FACE_FLAT");
        public static AnalysisIcon OneBar { get; } = new AnalysisIcon("ONE_BAR");
        public static AnalysisIcon TwoBar { get; } = new AnalysisIcon("TWO_BAR");
        public static AnalysisIcon ThreeBar { get; } = new AnalysisIcon("THREE_BAR");
        public static AnalysisIcon Circle { get; } = new AnalysisIcon("CIRCLE");
        public static AnalysisIcon Triangle { get; } = new AnalysisIcon("TRIANGLE");
        public static AnalysisIcon Square { get; } = new AnalysisIcon("SQUARE");
        public static AnalysisIcon Flag { get; } = new AnalysisIcon("FLAG");
        public static AnalysisIcon ThumbsUp { get; } = new AnalysisIcon("THUMBS_UP");
        public static AnalysisIcon ThumbsDown { get; } = new AnalysisIcon("THUMBS_DOWN");
        public static AnalysisIcon Checkmark { get; } = new AnalysisIcon("CHECKMARK");
        public static AnalysisIcon X { get; } = new AnalysisIcon("X");

        public static bool operator ==(AnalysisIcon left, AnalysisIcon right) => left.Equals(right);
        public static bool operator !=(AnalysisIcon left, AnalysisIcon right) => !left.Equals(right);

        public static explicit operator string(AnalysisIcon value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisIcon other && Equals(other);
        public bool Equals(AnalysisIcon other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisKpiSparklineType : IEquatable<AnalysisKpiSparklineType>
    {
        private readonly string _value;

        private AnalysisKpiSparklineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisKpiSparklineType Line { get; } = new AnalysisKpiSparklineType("LINE");
        public static AnalysisKpiSparklineType Area { get; } = new AnalysisKpiSparklineType("AREA");

        public static bool operator ==(AnalysisKpiSparklineType left, AnalysisKpiSparklineType right) => left.Equals(right);
        public static bool operator !=(AnalysisKpiSparklineType left, AnalysisKpiSparklineType right) => !left.Equals(right);

        public static explicit operator string(AnalysisKpiSparklineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisKpiSparklineType other && Equals(other);
        public bool Equals(AnalysisKpiSparklineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisKpiVisualStandardLayoutType : IEquatable<AnalysisKpiVisualStandardLayoutType>
    {
        private readonly string _value;

        private AnalysisKpiVisualStandardLayoutType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisKpiVisualStandardLayoutType Classic { get; } = new AnalysisKpiVisualStandardLayoutType("CLASSIC");
        public static AnalysisKpiVisualStandardLayoutType Vertical { get; } = new AnalysisKpiVisualStandardLayoutType("VERTICAL");

        public static bool operator ==(AnalysisKpiVisualStandardLayoutType left, AnalysisKpiVisualStandardLayoutType right) => left.Equals(right);
        public static bool operator !=(AnalysisKpiVisualStandardLayoutType left, AnalysisKpiVisualStandardLayoutType right) => !left.Equals(right);

        public static explicit operator string(AnalysisKpiVisualStandardLayoutType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisKpiVisualStandardLayoutType other && Equals(other);
        public bool Equals(AnalysisKpiVisualStandardLayoutType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisLayoutElementType : IEquatable<AnalysisLayoutElementType>
    {
        private readonly string _value;

        private AnalysisLayoutElementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisLayoutElementType Visual { get; } = new AnalysisLayoutElementType("VISUAL");
        public static AnalysisLayoutElementType FilterControl { get; } = new AnalysisLayoutElementType("FILTER_CONTROL");
        public static AnalysisLayoutElementType ParameterControl { get; } = new AnalysisLayoutElementType("PARAMETER_CONTROL");
        public static AnalysisLayoutElementType TextBox { get; } = new AnalysisLayoutElementType("TEXT_BOX");

        public static bool operator ==(AnalysisLayoutElementType left, AnalysisLayoutElementType right) => left.Equals(right);
        public static bool operator !=(AnalysisLayoutElementType left, AnalysisLayoutElementType right) => !left.Equals(right);

        public static explicit operator string(AnalysisLayoutElementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisLayoutElementType other && Equals(other);
        public bool Equals(AnalysisLayoutElementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisLegendPosition : IEquatable<AnalysisLegendPosition>
    {
        private readonly string _value;

        private AnalysisLegendPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisLegendPosition Auto { get; } = new AnalysisLegendPosition("AUTO");
        public static AnalysisLegendPosition Right { get; } = new AnalysisLegendPosition("RIGHT");
        public static AnalysisLegendPosition Bottom { get; } = new AnalysisLegendPosition("BOTTOM");
        public static AnalysisLegendPosition Top { get; } = new AnalysisLegendPosition("TOP");

        public static bool operator ==(AnalysisLegendPosition left, AnalysisLegendPosition right) => left.Equals(right);
        public static bool operator !=(AnalysisLegendPosition left, AnalysisLegendPosition right) => !left.Equals(right);

        public static explicit operator string(AnalysisLegendPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisLegendPosition other && Equals(other);
        public bool Equals(AnalysisLegendPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisLineChartLineStyle : IEquatable<AnalysisLineChartLineStyle>
    {
        private readonly string _value;

        private AnalysisLineChartLineStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisLineChartLineStyle Solid { get; } = new AnalysisLineChartLineStyle("SOLID");
        public static AnalysisLineChartLineStyle Dotted { get; } = new AnalysisLineChartLineStyle("DOTTED");
        public static AnalysisLineChartLineStyle Dashed { get; } = new AnalysisLineChartLineStyle("DASHED");

        public static bool operator ==(AnalysisLineChartLineStyle left, AnalysisLineChartLineStyle right) => left.Equals(right);
        public static bool operator !=(AnalysisLineChartLineStyle left, AnalysisLineChartLineStyle right) => !left.Equals(right);

        public static explicit operator string(AnalysisLineChartLineStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisLineChartLineStyle other && Equals(other);
        public bool Equals(AnalysisLineChartLineStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisLineChartMarkerShape : IEquatable<AnalysisLineChartMarkerShape>
    {
        private readonly string _value;

        private AnalysisLineChartMarkerShape(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisLineChartMarkerShape Circle { get; } = new AnalysisLineChartMarkerShape("CIRCLE");
        public static AnalysisLineChartMarkerShape Triangle { get; } = new AnalysisLineChartMarkerShape("TRIANGLE");
        public static AnalysisLineChartMarkerShape Square { get; } = new AnalysisLineChartMarkerShape("SQUARE");
        public static AnalysisLineChartMarkerShape Diamond { get; } = new AnalysisLineChartMarkerShape("DIAMOND");
        public static AnalysisLineChartMarkerShape RoundedSquare { get; } = new AnalysisLineChartMarkerShape("ROUNDED_SQUARE");

        public static bool operator ==(AnalysisLineChartMarkerShape left, AnalysisLineChartMarkerShape right) => left.Equals(right);
        public static bool operator !=(AnalysisLineChartMarkerShape left, AnalysisLineChartMarkerShape right) => !left.Equals(right);

        public static explicit operator string(AnalysisLineChartMarkerShape value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisLineChartMarkerShape other && Equals(other);
        public bool Equals(AnalysisLineChartMarkerShape other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisLineChartType : IEquatable<AnalysisLineChartType>
    {
        private readonly string _value;

        private AnalysisLineChartType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisLineChartType Line { get; } = new AnalysisLineChartType("LINE");
        public static AnalysisLineChartType Area { get; } = new AnalysisLineChartType("AREA");
        public static AnalysisLineChartType StackedArea { get; } = new AnalysisLineChartType("STACKED_AREA");

        public static bool operator ==(AnalysisLineChartType left, AnalysisLineChartType right) => left.Equals(right);
        public static bool operator !=(AnalysisLineChartType left, AnalysisLineChartType right) => !left.Equals(right);

        public static explicit operator string(AnalysisLineChartType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisLineChartType other && Equals(other);
        public bool Equals(AnalysisLineChartType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisLineInterpolation : IEquatable<AnalysisLineInterpolation>
    {
        private readonly string _value;

        private AnalysisLineInterpolation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisLineInterpolation Linear { get; } = new AnalysisLineInterpolation("LINEAR");
        public static AnalysisLineInterpolation Smooth { get; } = new AnalysisLineInterpolation("SMOOTH");
        public static AnalysisLineInterpolation Stepped { get; } = new AnalysisLineInterpolation("STEPPED");

        public static bool operator ==(AnalysisLineInterpolation left, AnalysisLineInterpolation right) => left.Equals(right);
        public static bool operator !=(AnalysisLineInterpolation left, AnalysisLineInterpolation right) => !left.Equals(right);

        public static explicit operator string(AnalysisLineInterpolation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisLineInterpolation other && Equals(other);
        public bool Equals(AnalysisLineInterpolation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisMapZoomMode : IEquatable<AnalysisMapZoomMode>
    {
        private readonly string _value;

        private AnalysisMapZoomMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisMapZoomMode Auto { get; } = new AnalysisMapZoomMode("AUTO");
        public static AnalysisMapZoomMode Manual { get; } = new AnalysisMapZoomMode("MANUAL");

        public static bool operator ==(AnalysisMapZoomMode left, AnalysisMapZoomMode right) => left.Equals(right);
        public static bool operator !=(AnalysisMapZoomMode left, AnalysisMapZoomMode right) => !left.Equals(right);

        public static explicit operator string(AnalysisMapZoomMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisMapZoomMode other && Equals(other);
        public bool Equals(AnalysisMapZoomMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisMaximumMinimumComputationType : IEquatable<AnalysisMaximumMinimumComputationType>
    {
        private readonly string _value;

        private AnalysisMaximumMinimumComputationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisMaximumMinimumComputationType Maximum { get; } = new AnalysisMaximumMinimumComputationType("MAXIMUM");
        public static AnalysisMaximumMinimumComputationType Minimum { get; } = new AnalysisMaximumMinimumComputationType("MINIMUM");

        public static bool operator ==(AnalysisMaximumMinimumComputationType left, AnalysisMaximumMinimumComputationType right) => left.Equals(right);
        public static bool operator !=(AnalysisMaximumMinimumComputationType left, AnalysisMaximumMinimumComputationType right) => !left.Equals(right);

        public static explicit operator string(AnalysisMaximumMinimumComputationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisMaximumMinimumComputationType other && Equals(other);
        public bool Equals(AnalysisMaximumMinimumComputationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisMissingDataTreatmentOption : IEquatable<AnalysisMissingDataTreatmentOption>
    {
        private readonly string _value;

        private AnalysisMissingDataTreatmentOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisMissingDataTreatmentOption Interpolate { get; } = new AnalysisMissingDataTreatmentOption("INTERPOLATE");
        public static AnalysisMissingDataTreatmentOption ShowAsZero { get; } = new AnalysisMissingDataTreatmentOption("SHOW_AS_ZERO");
        public static AnalysisMissingDataTreatmentOption ShowAsBlank { get; } = new AnalysisMissingDataTreatmentOption("SHOW_AS_BLANK");

        public static bool operator ==(AnalysisMissingDataTreatmentOption left, AnalysisMissingDataTreatmentOption right) => left.Equals(right);
        public static bool operator !=(AnalysisMissingDataTreatmentOption left, AnalysisMissingDataTreatmentOption right) => !left.Equals(right);

        public static explicit operator string(AnalysisMissingDataTreatmentOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisMissingDataTreatmentOption other && Equals(other);
        public bool Equals(AnalysisMissingDataTreatmentOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisNegativeValueDisplayMode : IEquatable<AnalysisNegativeValueDisplayMode>
    {
        private readonly string _value;

        private AnalysisNegativeValueDisplayMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisNegativeValueDisplayMode Positive { get; } = new AnalysisNegativeValueDisplayMode("POSITIVE");
        public static AnalysisNegativeValueDisplayMode Negative { get; } = new AnalysisNegativeValueDisplayMode("NEGATIVE");

        public static bool operator ==(AnalysisNegativeValueDisplayMode left, AnalysisNegativeValueDisplayMode right) => left.Equals(right);
        public static bool operator !=(AnalysisNegativeValueDisplayMode left, AnalysisNegativeValueDisplayMode right) => !left.Equals(right);

        public static explicit operator string(AnalysisNegativeValueDisplayMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisNegativeValueDisplayMode other && Equals(other);
        public bool Equals(AnalysisNegativeValueDisplayMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisNumberScale : IEquatable<AnalysisNumberScale>
    {
        private readonly string _value;

        private AnalysisNumberScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisNumberScale None { get; } = new AnalysisNumberScale("NONE");
        public static AnalysisNumberScale Auto { get; } = new AnalysisNumberScale("AUTO");
        public static AnalysisNumberScale Thousands { get; } = new AnalysisNumberScale("THOUSANDS");
        public static AnalysisNumberScale Millions { get; } = new AnalysisNumberScale("MILLIONS");
        public static AnalysisNumberScale Billions { get; } = new AnalysisNumberScale("BILLIONS");
        public static AnalysisNumberScale Trillions { get; } = new AnalysisNumberScale("TRILLIONS");

        public static bool operator ==(AnalysisNumberScale left, AnalysisNumberScale right) => left.Equals(right);
        public static bool operator !=(AnalysisNumberScale left, AnalysisNumberScale right) => !left.Equals(right);

        public static explicit operator string(AnalysisNumberScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisNumberScale other && Equals(other);
        public bool Equals(AnalysisNumberScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisNumericEqualityMatchOperator : IEquatable<AnalysisNumericEqualityMatchOperator>
    {
        private readonly string _value;

        private AnalysisNumericEqualityMatchOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisNumericEqualityMatchOperator EqualsValue { get; } = new AnalysisNumericEqualityMatchOperator("EQUALS");
        public static AnalysisNumericEqualityMatchOperator DoesNotEqual { get; } = new AnalysisNumericEqualityMatchOperator("DOES_NOT_EQUAL");

        public static bool operator ==(AnalysisNumericEqualityMatchOperator left, AnalysisNumericEqualityMatchOperator right) => left.Equals(right);
        public static bool operator !=(AnalysisNumericEqualityMatchOperator left, AnalysisNumericEqualityMatchOperator right) => !left.Equals(right);

        public static explicit operator string(AnalysisNumericEqualityMatchOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisNumericEqualityMatchOperator other && Equals(other);
        public bool Equals(AnalysisNumericEqualityMatchOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisNumericFilterSelectAllOptions : IEquatable<AnalysisNumericFilterSelectAllOptions>
    {
        private readonly string _value;

        private AnalysisNumericFilterSelectAllOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisNumericFilterSelectAllOptions FilterAllValues { get; } = new AnalysisNumericFilterSelectAllOptions("FILTER_ALL_VALUES");

        public static bool operator ==(AnalysisNumericFilterSelectAllOptions left, AnalysisNumericFilterSelectAllOptions right) => left.Equals(right);
        public static bool operator !=(AnalysisNumericFilterSelectAllOptions left, AnalysisNumericFilterSelectAllOptions right) => !left.Equals(right);

        public static explicit operator string(AnalysisNumericFilterSelectAllOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisNumericFilterSelectAllOptions other && Equals(other);
        public bool Equals(AnalysisNumericFilterSelectAllOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisNumericSeparatorSymbol : IEquatable<AnalysisNumericSeparatorSymbol>
    {
        private readonly string _value;

        private AnalysisNumericSeparatorSymbol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisNumericSeparatorSymbol Comma { get; } = new AnalysisNumericSeparatorSymbol("COMMA");
        public static AnalysisNumericSeparatorSymbol Dot { get; } = new AnalysisNumericSeparatorSymbol("DOT");
        public static AnalysisNumericSeparatorSymbol Space { get; } = new AnalysisNumericSeparatorSymbol("SPACE");

        public static bool operator ==(AnalysisNumericSeparatorSymbol left, AnalysisNumericSeparatorSymbol right) => left.Equals(right);
        public static bool operator !=(AnalysisNumericSeparatorSymbol left, AnalysisNumericSeparatorSymbol right) => !left.Equals(right);

        public static explicit operator string(AnalysisNumericSeparatorSymbol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisNumericSeparatorSymbol other && Equals(other);
        public bool Equals(AnalysisNumericSeparatorSymbol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisOtherCategories : IEquatable<AnalysisOtherCategories>
    {
        private readonly string _value;

        private AnalysisOtherCategories(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisOtherCategories Include { get; } = new AnalysisOtherCategories("INCLUDE");
        public static AnalysisOtherCategories Exclude { get; } = new AnalysisOtherCategories("EXCLUDE");

        public static bool operator ==(AnalysisOtherCategories left, AnalysisOtherCategories right) => left.Equals(right);
        public static bool operator !=(AnalysisOtherCategories left, AnalysisOtherCategories right) => !left.Equals(right);

        public static explicit operator string(AnalysisOtherCategories value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisOtherCategories other && Equals(other);
        public bool Equals(AnalysisOtherCategories other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisPanelBorderStyle : IEquatable<AnalysisPanelBorderStyle>
    {
        private readonly string _value;

        private AnalysisPanelBorderStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisPanelBorderStyle Solid { get; } = new AnalysisPanelBorderStyle("SOLID");
        public static AnalysisPanelBorderStyle Dashed { get; } = new AnalysisPanelBorderStyle("DASHED");
        public static AnalysisPanelBorderStyle Dotted { get; } = new AnalysisPanelBorderStyle("DOTTED");

        public static bool operator ==(AnalysisPanelBorderStyle left, AnalysisPanelBorderStyle right) => left.Equals(right);
        public static bool operator !=(AnalysisPanelBorderStyle left, AnalysisPanelBorderStyle right) => !left.Equals(right);

        public static explicit operator string(AnalysisPanelBorderStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisPanelBorderStyle other && Equals(other);
        public bool Equals(AnalysisPanelBorderStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisPaperOrientation : IEquatable<AnalysisPaperOrientation>
    {
        private readonly string _value;

        private AnalysisPaperOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisPaperOrientation Portrait { get; } = new AnalysisPaperOrientation("PORTRAIT");
        public static AnalysisPaperOrientation Landscape { get; } = new AnalysisPaperOrientation("LANDSCAPE");

        public static bool operator ==(AnalysisPaperOrientation left, AnalysisPaperOrientation right) => left.Equals(right);
        public static bool operator !=(AnalysisPaperOrientation left, AnalysisPaperOrientation right) => !left.Equals(right);

        public static explicit operator string(AnalysisPaperOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisPaperOrientation other && Equals(other);
        public bool Equals(AnalysisPaperOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisPaperSize : IEquatable<AnalysisPaperSize>
    {
        private readonly string _value;

        private AnalysisPaperSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisPaperSize UsLetter { get; } = new AnalysisPaperSize("US_LETTER");
        public static AnalysisPaperSize UsLegal { get; } = new AnalysisPaperSize("US_LEGAL");
        public static AnalysisPaperSize UsTabloidLedger { get; } = new AnalysisPaperSize("US_TABLOID_LEDGER");
        public static AnalysisPaperSize A0 { get; } = new AnalysisPaperSize("A0");
        public static AnalysisPaperSize A1 { get; } = new AnalysisPaperSize("A1");
        public static AnalysisPaperSize A2 { get; } = new AnalysisPaperSize("A2");
        public static AnalysisPaperSize A3 { get; } = new AnalysisPaperSize("A3");
        public static AnalysisPaperSize A4 { get; } = new AnalysisPaperSize("A4");
        public static AnalysisPaperSize A5 { get; } = new AnalysisPaperSize("A5");
        public static AnalysisPaperSize JisB4 { get; } = new AnalysisPaperSize("JIS_B4");
        public static AnalysisPaperSize JisB5 { get; } = new AnalysisPaperSize("JIS_B5");

        public static bool operator ==(AnalysisPaperSize left, AnalysisPaperSize right) => left.Equals(right);
        public static bool operator !=(AnalysisPaperSize left, AnalysisPaperSize right) => !left.Equals(right);

        public static explicit operator string(AnalysisPaperSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisPaperSize other && Equals(other);
        public bool Equals(AnalysisPaperSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisParameterValueType : IEquatable<AnalysisParameterValueType>
    {
        private readonly string _value;

        private AnalysisParameterValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisParameterValueType MultiValued { get; } = new AnalysisParameterValueType("MULTI_VALUED");
        public static AnalysisParameterValueType SingleValued { get; } = new AnalysisParameterValueType("SINGLE_VALUED");

        public static bool operator ==(AnalysisParameterValueType left, AnalysisParameterValueType right) => left.Equals(right);
        public static bool operator !=(AnalysisParameterValueType left, AnalysisParameterValueType right) => !left.Equals(right);

        public static explicit operator string(AnalysisParameterValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisParameterValueType other && Equals(other);
        public bool Equals(AnalysisParameterValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisPivotTableConditionalFormattingScopeRole : IEquatable<AnalysisPivotTableConditionalFormattingScopeRole>
    {
        private readonly string _value;

        private AnalysisPivotTableConditionalFormattingScopeRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisPivotTableConditionalFormattingScopeRole Field { get; } = new AnalysisPivotTableConditionalFormattingScopeRole("FIELD");
        public static AnalysisPivotTableConditionalFormattingScopeRole FieldTotal { get; } = new AnalysisPivotTableConditionalFormattingScopeRole("FIELD_TOTAL");
        public static AnalysisPivotTableConditionalFormattingScopeRole GrandTotal { get; } = new AnalysisPivotTableConditionalFormattingScopeRole("GRAND_TOTAL");

        public static bool operator ==(AnalysisPivotTableConditionalFormattingScopeRole left, AnalysisPivotTableConditionalFormattingScopeRole right) => left.Equals(right);
        public static bool operator !=(AnalysisPivotTableConditionalFormattingScopeRole left, AnalysisPivotTableConditionalFormattingScopeRole right) => !left.Equals(right);

        public static explicit operator string(AnalysisPivotTableConditionalFormattingScopeRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisPivotTableConditionalFormattingScopeRole other && Equals(other);
        public bool Equals(AnalysisPivotTableConditionalFormattingScopeRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisPivotTableFieldCollapseState : IEquatable<AnalysisPivotTableFieldCollapseState>
    {
        private readonly string _value;

        private AnalysisPivotTableFieldCollapseState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisPivotTableFieldCollapseState Collapsed { get; } = new AnalysisPivotTableFieldCollapseState("COLLAPSED");
        public static AnalysisPivotTableFieldCollapseState Expanded { get; } = new AnalysisPivotTableFieldCollapseState("EXPANDED");

        public static bool operator ==(AnalysisPivotTableFieldCollapseState left, AnalysisPivotTableFieldCollapseState right) => left.Equals(right);
        public static bool operator !=(AnalysisPivotTableFieldCollapseState left, AnalysisPivotTableFieldCollapseState right) => !left.Equals(right);

        public static explicit operator string(AnalysisPivotTableFieldCollapseState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisPivotTableFieldCollapseState other && Equals(other);
        public bool Equals(AnalysisPivotTableFieldCollapseState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisPivotTableMetricPlacement : IEquatable<AnalysisPivotTableMetricPlacement>
    {
        private readonly string _value;

        private AnalysisPivotTableMetricPlacement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisPivotTableMetricPlacement Row { get; } = new AnalysisPivotTableMetricPlacement("ROW");
        public static AnalysisPivotTableMetricPlacement Column { get; } = new AnalysisPivotTableMetricPlacement("COLUMN");

        public static bool operator ==(AnalysisPivotTableMetricPlacement left, AnalysisPivotTableMetricPlacement right) => left.Equals(right);
        public static bool operator !=(AnalysisPivotTableMetricPlacement left, AnalysisPivotTableMetricPlacement right) => !left.Equals(right);

        public static explicit operator string(AnalysisPivotTableMetricPlacement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisPivotTableMetricPlacement other && Equals(other);
        public bool Equals(AnalysisPivotTableMetricPlacement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisPivotTableRowsLayout : IEquatable<AnalysisPivotTableRowsLayout>
    {
        private readonly string _value;

        private AnalysisPivotTableRowsLayout(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisPivotTableRowsLayout Tabular { get; } = new AnalysisPivotTableRowsLayout("TABULAR");
        public static AnalysisPivotTableRowsLayout Hierarchy { get; } = new AnalysisPivotTableRowsLayout("HIERARCHY");

        public static bool operator ==(AnalysisPivotTableRowsLayout left, AnalysisPivotTableRowsLayout right) => left.Equals(right);
        public static bool operator !=(AnalysisPivotTableRowsLayout left, AnalysisPivotTableRowsLayout right) => !left.Equals(right);

        public static explicit operator string(AnalysisPivotTableRowsLayout value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisPivotTableRowsLayout other && Equals(other);
        public bool Equals(AnalysisPivotTableRowsLayout other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisPivotTableSubtotalLevel : IEquatable<AnalysisPivotTableSubtotalLevel>
    {
        private readonly string _value;

        private AnalysisPivotTableSubtotalLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisPivotTableSubtotalLevel All { get; } = new AnalysisPivotTableSubtotalLevel("ALL");
        public static AnalysisPivotTableSubtotalLevel Custom { get; } = new AnalysisPivotTableSubtotalLevel("CUSTOM");
        public static AnalysisPivotTableSubtotalLevel Last { get; } = new AnalysisPivotTableSubtotalLevel("LAST");

        public static bool operator ==(AnalysisPivotTableSubtotalLevel left, AnalysisPivotTableSubtotalLevel right) => left.Equals(right);
        public static bool operator !=(AnalysisPivotTableSubtotalLevel left, AnalysisPivotTableSubtotalLevel right) => !left.Equals(right);

        public static explicit operator string(AnalysisPivotTableSubtotalLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisPivotTableSubtotalLevel other && Equals(other);
        public bool Equals(AnalysisPivotTableSubtotalLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisPrimaryValueDisplayType : IEquatable<AnalysisPrimaryValueDisplayType>
    {
        private readonly string _value;

        private AnalysisPrimaryValueDisplayType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisPrimaryValueDisplayType Hidden { get; } = new AnalysisPrimaryValueDisplayType("HIDDEN");
        public static AnalysisPrimaryValueDisplayType Comparison { get; } = new AnalysisPrimaryValueDisplayType("COMPARISON");
        public static AnalysisPrimaryValueDisplayType Actual { get; } = new AnalysisPrimaryValueDisplayType("ACTUAL");

        public static bool operator ==(AnalysisPrimaryValueDisplayType left, AnalysisPrimaryValueDisplayType right) => left.Equals(right);
        public static bool operator !=(AnalysisPrimaryValueDisplayType left, AnalysisPrimaryValueDisplayType right) => !left.Equals(right);

        public static explicit operator string(AnalysisPrimaryValueDisplayType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisPrimaryValueDisplayType other && Equals(other);
        public bool Equals(AnalysisPrimaryValueDisplayType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisRadarChartAxesRangeScale : IEquatable<AnalysisRadarChartAxesRangeScale>
    {
        private readonly string _value;

        private AnalysisRadarChartAxesRangeScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisRadarChartAxesRangeScale Auto { get; } = new AnalysisRadarChartAxesRangeScale("AUTO");
        public static AnalysisRadarChartAxesRangeScale Independent { get; } = new AnalysisRadarChartAxesRangeScale("INDEPENDENT");
        public static AnalysisRadarChartAxesRangeScale Shared { get; } = new AnalysisRadarChartAxesRangeScale("SHARED");

        public static bool operator ==(AnalysisRadarChartAxesRangeScale left, AnalysisRadarChartAxesRangeScale right) => left.Equals(right);
        public static bool operator !=(AnalysisRadarChartAxesRangeScale left, AnalysisRadarChartAxesRangeScale right) => !left.Equals(right);

        public static explicit operator string(AnalysisRadarChartAxesRangeScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisRadarChartAxesRangeScale other && Equals(other);
        public bool Equals(AnalysisRadarChartAxesRangeScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisRadarChartShape : IEquatable<AnalysisRadarChartShape>
    {
        private readonly string _value;

        private AnalysisRadarChartShape(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisRadarChartShape Circle { get; } = new AnalysisRadarChartShape("CIRCLE");
        public static AnalysisRadarChartShape Polygon { get; } = new AnalysisRadarChartShape("POLYGON");

        public static bool operator ==(AnalysisRadarChartShape left, AnalysisRadarChartShape right) => left.Equals(right);
        public static bool operator !=(AnalysisRadarChartShape left, AnalysisRadarChartShape right) => !left.Equals(right);

        public static explicit operator string(AnalysisRadarChartShape value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisRadarChartShape other && Equals(other);
        public bool Equals(AnalysisRadarChartShape other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisReferenceLineLabelHorizontalPosition : IEquatable<AnalysisReferenceLineLabelHorizontalPosition>
    {
        private readonly string _value;

        private AnalysisReferenceLineLabelHorizontalPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisReferenceLineLabelHorizontalPosition Left { get; } = new AnalysisReferenceLineLabelHorizontalPosition("LEFT");
        public static AnalysisReferenceLineLabelHorizontalPosition Center { get; } = new AnalysisReferenceLineLabelHorizontalPosition("CENTER");
        public static AnalysisReferenceLineLabelHorizontalPosition Right { get; } = new AnalysisReferenceLineLabelHorizontalPosition("RIGHT");

        public static bool operator ==(AnalysisReferenceLineLabelHorizontalPosition left, AnalysisReferenceLineLabelHorizontalPosition right) => left.Equals(right);
        public static bool operator !=(AnalysisReferenceLineLabelHorizontalPosition left, AnalysisReferenceLineLabelHorizontalPosition right) => !left.Equals(right);

        public static explicit operator string(AnalysisReferenceLineLabelHorizontalPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisReferenceLineLabelHorizontalPosition other && Equals(other);
        public bool Equals(AnalysisReferenceLineLabelHorizontalPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisReferenceLineLabelVerticalPosition : IEquatable<AnalysisReferenceLineLabelVerticalPosition>
    {
        private readonly string _value;

        private AnalysisReferenceLineLabelVerticalPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisReferenceLineLabelVerticalPosition Above { get; } = new AnalysisReferenceLineLabelVerticalPosition("ABOVE");
        public static AnalysisReferenceLineLabelVerticalPosition Below { get; } = new AnalysisReferenceLineLabelVerticalPosition("BELOW");

        public static bool operator ==(AnalysisReferenceLineLabelVerticalPosition left, AnalysisReferenceLineLabelVerticalPosition right) => left.Equals(right);
        public static bool operator !=(AnalysisReferenceLineLabelVerticalPosition left, AnalysisReferenceLineLabelVerticalPosition right) => !left.Equals(right);

        public static explicit operator string(AnalysisReferenceLineLabelVerticalPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisReferenceLineLabelVerticalPosition other && Equals(other);
        public bool Equals(AnalysisReferenceLineLabelVerticalPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisReferenceLinePatternType : IEquatable<AnalysisReferenceLinePatternType>
    {
        private readonly string _value;

        private AnalysisReferenceLinePatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisReferenceLinePatternType Solid { get; } = new AnalysisReferenceLinePatternType("SOLID");
        public static AnalysisReferenceLinePatternType Dashed { get; } = new AnalysisReferenceLinePatternType("DASHED");
        public static AnalysisReferenceLinePatternType Dotted { get; } = new AnalysisReferenceLinePatternType("DOTTED");

        public static bool operator ==(AnalysisReferenceLinePatternType left, AnalysisReferenceLinePatternType right) => left.Equals(right);
        public static bool operator !=(AnalysisReferenceLinePatternType left, AnalysisReferenceLinePatternType right) => !left.Equals(right);

        public static explicit operator string(AnalysisReferenceLinePatternType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisReferenceLinePatternType other && Equals(other);
        public bool Equals(AnalysisReferenceLinePatternType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisReferenceLineValueLabelRelativePosition : IEquatable<AnalysisReferenceLineValueLabelRelativePosition>
    {
        private readonly string _value;

        private AnalysisReferenceLineValueLabelRelativePosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisReferenceLineValueLabelRelativePosition BeforeCustomLabel { get; } = new AnalysisReferenceLineValueLabelRelativePosition("BEFORE_CUSTOM_LABEL");
        public static AnalysisReferenceLineValueLabelRelativePosition AfterCustomLabel { get; } = new AnalysisReferenceLineValueLabelRelativePosition("AFTER_CUSTOM_LABEL");

        public static bool operator ==(AnalysisReferenceLineValueLabelRelativePosition left, AnalysisReferenceLineValueLabelRelativePosition right) => left.Equals(right);
        public static bool operator !=(AnalysisReferenceLineValueLabelRelativePosition left, AnalysisReferenceLineValueLabelRelativePosition right) => !left.Equals(right);

        public static explicit operator string(AnalysisReferenceLineValueLabelRelativePosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisReferenceLineValueLabelRelativePosition other && Equals(other);
        public bool Equals(AnalysisReferenceLineValueLabelRelativePosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisRelativeDateType : IEquatable<AnalysisRelativeDateType>
    {
        private readonly string _value;

        private AnalysisRelativeDateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisRelativeDateType Previous { get; } = new AnalysisRelativeDateType("PREVIOUS");
        public static AnalysisRelativeDateType This { get; } = new AnalysisRelativeDateType("THIS");
        public static AnalysisRelativeDateType Last { get; } = new AnalysisRelativeDateType("LAST");
        public static AnalysisRelativeDateType Now { get; } = new AnalysisRelativeDateType("NOW");
        public static AnalysisRelativeDateType Next { get; } = new AnalysisRelativeDateType("NEXT");

        public static bool operator ==(AnalysisRelativeDateType left, AnalysisRelativeDateType right) => left.Equals(right);
        public static bool operator !=(AnalysisRelativeDateType left, AnalysisRelativeDateType right) => !left.Equals(right);

        public static explicit operator string(AnalysisRelativeDateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisRelativeDateType other && Equals(other);
        public bool Equals(AnalysisRelativeDateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisRelativeFontSize : IEquatable<AnalysisRelativeFontSize>
    {
        private readonly string _value;

        private AnalysisRelativeFontSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisRelativeFontSize ExtraSmall { get; } = new AnalysisRelativeFontSize("EXTRA_SMALL");
        public static AnalysisRelativeFontSize Small { get; } = new AnalysisRelativeFontSize("SMALL");
        public static AnalysisRelativeFontSize Medium { get; } = new AnalysisRelativeFontSize("MEDIUM");
        public static AnalysisRelativeFontSize Large { get; } = new AnalysisRelativeFontSize("LARGE");
        public static AnalysisRelativeFontSize ExtraLarge { get; } = new AnalysisRelativeFontSize("EXTRA_LARGE");

        public static bool operator ==(AnalysisRelativeFontSize left, AnalysisRelativeFontSize right) => left.Equals(right);
        public static bool operator !=(AnalysisRelativeFontSize left, AnalysisRelativeFontSize right) => !left.Equals(right);

        public static explicit operator string(AnalysisRelativeFontSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisRelativeFontSize other && Equals(other);
        public bool Equals(AnalysisRelativeFontSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisResizeOption : IEquatable<AnalysisResizeOption>
    {
        private readonly string _value;

        private AnalysisResizeOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisResizeOption Fixed { get; } = new AnalysisResizeOption("FIXED");
        public static AnalysisResizeOption Responsive { get; } = new AnalysisResizeOption("RESPONSIVE");

        public static bool operator ==(AnalysisResizeOption left, AnalysisResizeOption right) => left.Equals(right);
        public static bool operator !=(AnalysisResizeOption left, AnalysisResizeOption right) => !left.Equals(right);

        public static explicit operator string(AnalysisResizeOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisResizeOption other && Equals(other);
        public bool Equals(AnalysisResizeOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisResourceStatus : IEquatable<AnalysisResourceStatus>
    {
        private readonly string _value;

        private AnalysisResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisResourceStatus CreationInProgress { get; } = new AnalysisResourceStatus("CREATION_IN_PROGRESS");
        public static AnalysisResourceStatus CreationSuccessful { get; } = new AnalysisResourceStatus("CREATION_SUCCESSFUL");
        public static AnalysisResourceStatus CreationFailed { get; } = new AnalysisResourceStatus("CREATION_FAILED");
        public static AnalysisResourceStatus UpdateInProgress { get; } = new AnalysisResourceStatus("UPDATE_IN_PROGRESS");
        public static AnalysisResourceStatus UpdateSuccessful { get; } = new AnalysisResourceStatus("UPDATE_SUCCESSFUL");
        public static AnalysisResourceStatus UpdateFailed { get; } = new AnalysisResourceStatus("UPDATE_FAILED");
        public static AnalysisResourceStatus Deleted { get; } = new AnalysisResourceStatus("DELETED");

        public static bool operator ==(AnalysisResourceStatus left, AnalysisResourceStatus right) => left.Equals(right);
        public static bool operator !=(AnalysisResourceStatus left, AnalysisResourceStatus right) => !left.Equals(right);

        public static explicit operator string(AnalysisResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisResourceStatus other && Equals(other);
        public bool Equals(AnalysisResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSectionPageBreakStatus : IEquatable<AnalysisSectionPageBreakStatus>
    {
        private readonly string _value;

        private AnalysisSectionPageBreakStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSectionPageBreakStatus Enabled { get; } = new AnalysisSectionPageBreakStatus("ENABLED");
        public static AnalysisSectionPageBreakStatus Disabled { get; } = new AnalysisSectionPageBreakStatus("DISABLED");

        public static bool operator ==(AnalysisSectionPageBreakStatus left, AnalysisSectionPageBreakStatus right) => left.Equals(right);
        public static bool operator !=(AnalysisSectionPageBreakStatus left, AnalysisSectionPageBreakStatus right) => !left.Equals(right);

        public static explicit operator string(AnalysisSectionPageBreakStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSectionPageBreakStatus other && Equals(other);
        public bool Equals(AnalysisSectionPageBreakStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSelectAllValueOptions : IEquatable<AnalysisSelectAllValueOptions>
    {
        private readonly string _value;

        private AnalysisSelectAllValueOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSelectAllValueOptions AllValues { get; } = new AnalysisSelectAllValueOptions("ALL_VALUES");

        public static bool operator ==(AnalysisSelectAllValueOptions left, AnalysisSelectAllValueOptions right) => left.Equals(right);
        public static bool operator !=(AnalysisSelectAllValueOptions left, AnalysisSelectAllValueOptions right) => !left.Equals(right);

        public static explicit operator string(AnalysisSelectAllValueOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSelectAllValueOptions other && Equals(other);
        public bool Equals(AnalysisSelectAllValueOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSelectedFieldOptions : IEquatable<AnalysisSelectedFieldOptions>
    {
        private readonly string _value;

        private AnalysisSelectedFieldOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSelectedFieldOptions AllFields { get; } = new AnalysisSelectedFieldOptions("ALL_FIELDS");

        public static bool operator ==(AnalysisSelectedFieldOptions left, AnalysisSelectedFieldOptions right) => left.Equals(right);
        public static bool operator !=(AnalysisSelectedFieldOptions left, AnalysisSelectedFieldOptions right) => !left.Equals(right);

        public static explicit operator string(AnalysisSelectedFieldOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSelectedFieldOptions other && Equals(other);
        public bool Equals(AnalysisSelectedFieldOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSelectedTooltipType : IEquatable<AnalysisSelectedTooltipType>
    {
        private readonly string _value;

        private AnalysisSelectedTooltipType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSelectedTooltipType Basic { get; } = new AnalysisSelectedTooltipType("BASIC");
        public static AnalysisSelectedTooltipType Detailed { get; } = new AnalysisSelectedTooltipType("DETAILED");

        public static bool operator ==(AnalysisSelectedTooltipType left, AnalysisSelectedTooltipType right) => left.Equals(right);
        public static bool operator !=(AnalysisSelectedTooltipType left, AnalysisSelectedTooltipType right) => !left.Equals(right);

        public static explicit operator string(AnalysisSelectedTooltipType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSelectedTooltipType other && Equals(other);
        public bool Equals(AnalysisSelectedTooltipType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSheetContentType : IEquatable<AnalysisSheetContentType>
    {
        private readonly string _value;

        private AnalysisSheetContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSheetContentType Paginated { get; } = new AnalysisSheetContentType("PAGINATED");
        public static AnalysisSheetContentType Interactive { get; } = new AnalysisSheetContentType("INTERACTIVE");

        public static bool operator ==(AnalysisSheetContentType left, AnalysisSheetContentType right) => left.Equals(right);
        public static bool operator !=(AnalysisSheetContentType left, AnalysisSheetContentType right) => !left.Equals(right);

        public static explicit operator string(AnalysisSheetContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSheetContentType other && Equals(other);
        public bool Equals(AnalysisSheetContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSheetControlDateTimePickerType : IEquatable<AnalysisSheetControlDateTimePickerType>
    {
        private readonly string _value;

        private AnalysisSheetControlDateTimePickerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSheetControlDateTimePickerType SingleValued { get; } = new AnalysisSheetControlDateTimePickerType("SINGLE_VALUED");
        public static AnalysisSheetControlDateTimePickerType DateRange { get; } = new AnalysisSheetControlDateTimePickerType("DATE_RANGE");

        public static bool operator ==(AnalysisSheetControlDateTimePickerType left, AnalysisSheetControlDateTimePickerType right) => left.Equals(right);
        public static bool operator !=(AnalysisSheetControlDateTimePickerType left, AnalysisSheetControlDateTimePickerType right) => !left.Equals(right);

        public static explicit operator string(AnalysisSheetControlDateTimePickerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSheetControlDateTimePickerType other && Equals(other);
        public bool Equals(AnalysisSheetControlDateTimePickerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSheetControlListType : IEquatable<AnalysisSheetControlListType>
    {
        private readonly string _value;

        private AnalysisSheetControlListType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSheetControlListType MultiSelect { get; } = new AnalysisSheetControlListType("MULTI_SELECT");
        public static AnalysisSheetControlListType SingleSelect { get; } = new AnalysisSheetControlListType("SINGLE_SELECT");

        public static bool operator ==(AnalysisSheetControlListType left, AnalysisSheetControlListType right) => left.Equals(right);
        public static bool operator !=(AnalysisSheetControlListType left, AnalysisSheetControlListType right) => !left.Equals(right);

        public static explicit operator string(AnalysisSheetControlListType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSheetControlListType other && Equals(other);
        public bool Equals(AnalysisSheetControlListType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSheetControlSliderType : IEquatable<AnalysisSheetControlSliderType>
    {
        private readonly string _value;

        private AnalysisSheetControlSliderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSheetControlSliderType SinglePoint { get; } = new AnalysisSheetControlSliderType("SINGLE_POINT");
        public static AnalysisSheetControlSliderType Range { get; } = new AnalysisSheetControlSliderType("RANGE");

        public static bool operator ==(AnalysisSheetControlSliderType left, AnalysisSheetControlSliderType right) => left.Equals(right);
        public static bool operator !=(AnalysisSheetControlSliderType left, AnalysisSheetControlSliderType right) => !left.Equals(right);

        public static explicit operator string(AnalysisSheetControlSliderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSheetControlSliderType other && Equals(other);
        public bool Equals(AnalysisSheetControlSliderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSimpleAttributeAggregationFunction : IEquatable<AnalysisSimpleAttributeAggregationFunction>
    {
        private readonly string _value;

        private AnalysisSimpleAttributeAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSimpleAttributeAggregationFunction UniqueValue { get; } = new AnalysisSimpleAttributeAggregationFunction("UNIQUE_VALUE");

        public static bool operator ==(AnalysisSimpleAttributeAggregationFunction left, AnalysisSimpleAttributeAggregationFunction right) => left.Equals(right);
        public static bool operator !=(AnalysisSimpleAttributeAggregationFunction left, AnalysisSimpleAttributeAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(AnalysisSimpleAttributeAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSimpleAttributeAggregationFunction other && Equals(other);
        public bool Equals(AnalysisSimpleAttributeAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSimpleNumericalAggregationFunction : IEquatable<AnalysisSimpleNumericalAggregationFunction>
    {
        private readonly string _value;

        private AnalysisSimpleNumericalAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSimpleNumericalAggregationFunction Sum { get; } = new AnalysisSimpleNumericalAggregationFunction("SUM");
        public static AnalysisSimpleNumericalAggregationFunction Average { get; } = new AnalysisSimpleNumericalAggregationFunction("AVERAGE");
        public static AnalysisSimpleNumericalAggregationFunction Min { get; } = new AnalysisSimpleNumericalAggregationFunction("MIN");
        public static AnalysisSimpleNumericalAggregationFunction Max { get; } = new AnalysisSimpleNumericalAggregationFunction("MAX");
        public static AnalysisSimpleNumericalAggregationFunction Count { get; } = new AnalysisSimpleNumericalAggregationFunction("COUNT");
        public static AnalysisSimpleNumericalAggregationFunction DistinctCount { get; } = new AnalysisSimpleNumericalAggregationFunction("DISTINCT_COUNT");
        public static AnalysisSimpleNumericalAggregationFunction Var { get; } = new AnalysisSimpleNumericalAggregationFunction("VAR");
        public static AnalysisSimpleNumericalAggregationFunction Varp { get; } = new AnalysisSimpleNumericalAggregationFunction("VARP");
        public static AnalysisSimpleNumericalAggregationFunction Stdev { get; } = new AnalysisSimpleNumericalAggregationFunction("STDEV");
        public static AnalysisSimpleNumericalAggregationFunction Stdevp { get; } = new AnalysisSimpleNumericalAggregationFunction("STDEVP");
        public static AnalysisSimpleNumericalAggregationFunction Median { get; } = new AnalysisSimpleNumericalAggregationFunction("MEDIAN");

        public static bool operator ==(AnalysisSimpleNumericalAggregationFunction left, AnalysisSimpleNumericalAggregationFunction right) => left.Equals(right);
        public static bool operator !=(AnalysisSimpleNumericalAggregationFunction left, AnalysisSimpleNumericalAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(AnalysisSimpleNumericalAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSimpleNumericalAggregationFunction other && Equals(other);
        public bool Equals(AnalysisSimpleNumericalAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSmallMultiplesAxisPlacement : IEquatable<AnalysisSmallMultiplesAxisPlacement>
    {
        private readonly string _value;

        private AnalysisSmallMultiplesAxisPlacement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSmallMultiplesAxisPlacement Outside { get; } = new AnalysisSmallMultiplesAxisPlacement("OUTSIDE");
        public static AnalysisSmallMultiplesAxisPlacement Inside { get; } = new AnalysisSmallMultiplesAxisPlacement("INSIDE");

        public static bool operator ==(AnalysisSmallMultiplesAxisPlacement left, AnalysisSmallMultiplesAxisPlacement right) => left.Equals(right);
        public static bool operator !=(AnalysisSmallMultiplesAxisPlacement left, AnalysisSmallMultiplesAxisPlacement right) => !left.Equals(right);

        public static explicit operator string(AnalysisSmallMultiplesAxisPlacement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSmallMultiplesAxisPlacement other && Equals(other);
        public bool Equals(AnalysisSmallMultiplesAxisPlacement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSmallMultiplesAxisScale : IEquatable<AnalysisSmallMultiplesAxisScale>
    {
        private readonly string _value;

        private AnalysisSmallMultiplesAxisScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSmallMultiplesAxisScale Shared { get; } = new AnalysisSmallMultiplesAxisScale("SHARED");
        public static AnalysisSmallMultiplesAxisScale Independent { get; } = new AnalysisSmallMultiplesAxisScale("INDEPENDENT");

        public static bool operator ==(AnalysisSmallMultiplesAxisScale left, AnalysisSmallMultiplesAxisScale right) => left.Equals(right);
        public static bool operator !=(AnalysisSmallMultiplesAxisScale left, AnalysisSmallMultiplesAxisScale right) => !left.Equals(right);

        public static explicit operator string(AnalysisSmallMultiplesAxisScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSmallMultiplesAxisScale other && Equals(other);
        public bool Equals(AnalysisSmallMultiplesAxisScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSortDirection : IEquatable<AnalysisSortDirection>
    {
        private readonly string _value;

        private AnalysisSortDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSortDirection Asc { get; } = new AnalysisSortDirection("ASC");
        public static AnalysisSortDirection Desc { get; } = new AnalysisSortDirection("DESC");

        public static bool operator ==(AnalysisSortDirection left, AnalysisSortDirection right) => left.Equals(right);
        public static bool operator !=(AnalysisSortDirection left, AnalysisSortDirection right) => !left.Equals(right);

        public static explicit operator string(AnalysisSortDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSortDirection other && Equals(other);
        public bool Equals(AnalysisSortDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisSpecialValue : IEquatable<AnalysisSpecialValue>
    {
        private readonly string _value;

        private AnalysisSpecialValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisSpecialValue Empty { get; } = new AnalysisSpecialValue("EMPTY");
        public static AnalysisSpecialValue Null { get; } = new AnalysisSpecialValue("NULL");
        public static AnalysisSpecialValue Other { get; } = new AnalysisSpecialValue("OTHER");

        public static bool operator ==(AnalysisSpecialValue left, AnalysisSpecialValue right) => left.Equals(right);
        public static bool operator !=(AnalysisSpecialValue left, AnalysisSpecialValue right) => !left.Equals(right);

        public static explicit operator string(AnalysisSpecialValue value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisSpecialValue other && Equals(other);
        public bool Equals(AnalysisSpecialValue other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisStyledCellType : IEquatable<AnalysisStyledCellType>
    {
        private readonly string _value;

        private AnalysisStyledCellType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisStyledCellType Total { get; } = new AnalysisStyledCellType("TOTAL");
        public static AnalysisStyledCellType MetricHeader { get; } = new AnalysisStyledCellType("METRIC_HEADER");
        public static AnalysisStyledCellType Value { get; } = new AnalysisStyledCellType("VALUE");

        public static bool operator ==(AnalysisStyledCellType left, AnalysisStyledCellType right) => left.Equals(right);
        public static bool operator !=(AnalysisStyledCellType left, AnalysisStyledCellType right) => !left.Equals(right);

        public static explicit operator string(AnalysisStyledCellType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisStyledCellType other && Equals(other);
        public bool Equals(AnalysisStyledCellType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTableBorderStyle : IEquatable<AnalysisTableBorderStyle>
    {
        private readonly string _value;

        private AnalysisTableBorderStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTableBorderStyle None { get; } = new AnalysisTableBorderStyle("NONE");
        public static AnalysisTableBorderStyle Solid { get; } = new AnalysisTableBorderStyle("SOLID");

        public static bool operator ==(AnalysisTableBorderStyle left, AnalysisTableBorderStyle right) => left.Equals(right);
        public static bool operator !=(AnalysisTableBorderStyle left, AnalysisTableBorderStyle right) => !left.Equals(right);

        public static explicit operator string(AnalysisTableBorderStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTableBorderStyle other && Equals(other);
        public bool Equals(AnalysisTableBorderStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTableCellImageScalingConfiguration : IEquatable<AnalysisTableCellImageScalingConfiguration>
    {
        private readonly string _value;

        private AnalysisTableCellImageScalingConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTableCellImageScalingConfiguration FitToCellHeight { get; } = new AnalysisTableCellImageScalingConfiguration("FIT_TO_CELL_HEIGHT");
        public static AnalysisTableCellImageScalingConfiguration FitToCellWidth { get; } = new AnalysisTableCellImageScalingConfiguration("FIT_TO_CELL_WIDTH");
        public static AnalysisTableCellImageScalingConfiguration DoNotScale { get; } = new AnalysisTableCellImageScalingConfiguration("DO_NOT_SCALE");

        public static bool operator ==(AnalysisTableCellImageScalingConfiguration left, AnalysisTableCellImageScalingConfiguration right) => left.Equals(right);
        public static bool operator !=(AnalysisTableCellImageScalingConfiguration left, AnalysisTableCellImageScalingConfiguration right) => !left.Equals(right);

        public static explicit operator string(AnalysisTableCellImageScalingConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTableCellImageScalingConfiguration other && Equals(other);
        public bool Equals(AnalysisTableCellImageScalingConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTableFieldIconSetType : IEquatable<AnalysisTableFieldIconSetType>
    {
        private readonly string _value;

        private AnalysisTableFieldIconSetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTableFieldIconSetType Link { get; } = new AnalysisTableFieldIconSetType("LINK");

        public static bool operator ==(AnalysisTableFieldIconSetType left, AnalysisTableFieldIconSetType right) => left.Equals(right);
        public static bool operator !=(AnalysisTableFieldIconSetType left, AnalysisTableFieldIconSetType right) => !left.Equals(right);

        public static explicit operator string(AnalysisTableFieldIconSetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTableFieldIconSetType other && Equals(other);
        public bool Equals(AnalysisTableFieldIconSetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTableOrientation : IEquatable<AnalysisTableOrientation>
    {
        private readonly string _value;

        private AnalysisTableOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTableOrientation Vertical { get; } = new AnalysisTableOrientation("VERTICAL");
        public static AnalysisTableOrientation Horizontal { get; } = new AnalysisTableOrientation("HORIZONTAL");

        public static bool operator ==(AnalysisTableOrientation left, AnalysisTableOrientation right) => left.Equals(right);
        public static bool operator !=(AnalysisTableOrientation left, AnalysisTableOrientation right) => !left.Equals(right);

        public static explicit operator string(AnalysisTableOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTableOrientation other && Equals(other);
        public bool Equals(AnalysisTableOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTableTotalsPlacement : IEquatable<AnalysisTableTotalsPlacement>
    {
        private readonly string _value;

        private AnalysisTableTotalsPlacement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTableTotalsPlacement Start { get; } = new AnalysisTableTotalsPlacement("START");
        public static AnalysisTableTotalsPlacement End { get; } = new AnalysisTableTotalsPlacement("END");

        public static bool operator ==(AnalysisTableTotalsPlacement left, AnalysisTableTotalsPlacement right) => left.Equals(right);
        public static bool operator !=(AnalysisTableTotalsPlacement left, AnalysisTableTotalsPlacement right) => !left.Equals(right);

        public static explicit operator string(AnalysisTableTotalsPlacement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTableTotalsPlacement other && Equals(other);
        public bool Equals(AnalysisTableTotalsPlacement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTableTotalsScrollStatus : IEquatable<AnalysisTableTotalsScrollStatus>
    {
        private readonly string _value;

        private AnalysisTableTotalsScrollStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTableTotalsScrollStatus Pinned { get; } = new AnalysisTableTotalsScrollStatus("PINNED");
        public static AnalysisTableTotalsScrollStatus Scrolled { get; } = new AnalysisTableTotalsScrollStatus("SCROLLED");

        public static bool operator ==(AnalysisTableTotalsScrollStatus left, AnalysisTableTotalsScrollStatus right) => left.Equals(right);
        public static bool operator !=(AnalysisTableTotalsScrollStatus left, AnalysisTableTotalsScrollStatus right) => !left.Equals(right);

        public static explicit operator string(AnalysisTableTotalsScrollStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTableTotalsScrollStatus other && Equals(other);
        public bool Equals(AnalysisTableTotalsScrollStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTargetVisualOptions : IEquatable<AnalysisTargetVisualOptions>
    {
        private readonly string _value;

        private AnalysisTargetVisualOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTargetVisualOptions AllVisuals { get; } = new AnalysisTargetVisualOptions("ALL_VISUALS");

        public static bool operator ==(AnalysisTargetVisualOptions left, AnalysisTargetVisualOptions right) => left.Equals(right);
        public static bool operator !=(AnalysisTargetVisualOptions left, AnalysisTargetVisualOptions right) => !left.Equals(right);

        public static explicit operator string(AnalysisTargetVisualOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTargetVisualOptions other && Equals(other);
        public bool Equals(AnalysisTargetVisualOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTextWrap : IEquatable<AnalysisTextWrap>
    {
        private readonly string _value;

        private AnalysisTextWrap(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTextWrap None { get; } = new AnalysisTextWrap("NONE");
        public static AnalysisTextWrap Wrap { get; } = new AnalysisTextWrap("WRAP");

        public static bool operator ==(AnalysisTextWrap left, AnalysisTextWrap right) => left.Equals(right);
        public static bool operator !=(AnalysisTextWrap left, AnalysisTextWrap right) => !left.Equals(right);

        public static explicit operator string(AnalysisTextWrap value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTextWrap other && Equals(other);
        public bool Equals(AnalysisTextWrap other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTimeGranularity : IEquatable<AnalysisTimeGranularity>
    {
        private readonly string _value;

        private AnalysisTimeGranularity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTimeGranularity Year { get; } = new AnalysisTimeGranularity("YEAR");
        public static AnalysisTimeGranularity Quarter { get; } = new AnalysisTimeGranularity("QUARTER");
        public static AnalysisTimeGranularity Month { get; } = new AnalysisTimeGranularity("MONTH");
        public static AnalysisTimeGranularity Week { get; } = new AnalysisTimeGranularity("WEEK");
        public static AnalysisTimeGranularity Day { get; } = new AnalysisTimeGranularity("DAY");
        public static AnalysisTimeGranularity Hour { get; } = new AnalysisTimeGranularity("HOUR");
        public static AnalysisTimeGranularity Minute { get; } = new AnalysisTimeGranularity("MINUTE");
        public static AnalysisTimeGranularity Second { get; } = new AnalysisTimeGranularity("SECOND");
        public static AnalysisTimeGranularity Millisecond { get; } = new AnalysisTimeGranularity("MILLISECOND");

        public static bool operator ==(AnalysisTimeGranularity left, AnalysisTimeGranularity right) => left.Equals(right);
        public static bool operator !=(AnalysisTimeGranularity left, AnalysisTimeGranularity right) => !left.Equals(right);

        public static explicit operator string(AnalysisTimeGranularity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTimeGranularity other && Equals(other);
        public bool Equals(AnalysisTimeGranularity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTooltipTitleType : IEquatable<AnalysisTooltipTitleType>
    {
        private readonly string _value;

        private AnalysisTooltipTitleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTooltipTitleType None { get; } = new AnalysisTooltipTitleType("NONE");
        public static AnalysisTooltipTitleType PrimaryValue { get; } = new AnalysisTooltipTitleType("PRIMARY_VALUE");

        public static bool operator ==(AnalysisTooltipTitleType left, AnalysisTooltipTitleType right) => left.Equals(right);
        public static bool operator !=(AnalysisTooltipTitleType left, AnalysisTooltipTitleType right) => !left.Equals(right);

        public static explicit operator string(AnalysisTooltipTitleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTooltipTitleType other && Equals(other);
        public bool Equals(AnalysisTooltipTitleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTopBottomComputationType : IEquatable<AnalysisTopBottomComputationType>
    {
        private readonly string _value;

        private AnalysisTopBottomComputationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTopBottomComputationType Top { get; } = new AnalysisTopBottomComputationType("TOP");
        public static AnalysisTopBottomComputationType Bottom { get; } = new AnalysisTopBottomComputationType("BOTTOM");

        public static bool operator ==(AnalysisTopBottomComputationType left, AnalysisTopBottomComputationType right) => left.Equals(right);
        public static bool operator !=(AnalysisTopBottomComputationType left, AnalysisTopBottomComputationType right) => !left.Equals(right);

        public static explicit operator string(AnalysisTopBottomComputationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTopBottomComputationType other && Equals(other);
        public bool Equals(AnalysisTopBottomComputationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisTopBottomSortOrder : IEquatable<AnalysisTopBottomSortOrder>
    {
        private readonly string _value;

        private AnalysisTopBottomSortOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTopBottomSortOrder PercentDifference { get; } = new AnalysisTopBottomSortOrder("PERCENT_DIFFERENCE");
        public static AnalysisTopBottomSortOrder AbsoluteDifference { get; } = new AnalysisTopBottomSortOrder("ABSOLUTE_DIFFERENCE");

        public static bool operator ==(AnalysisTopBottomSortOrder left, AnalysisTopBottomSortOrder right) => left.Equals(right);
        public static bool operator !=(AnalysisTopBottomSortOrder left, AnalysisTopBottomSortOrder right) => !left.Equals(right);

        public static explicit operator string(AnalysisTopBottomSortOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTopBottomSortOrder other && Equals(other);
        public bool Equals(AnalysisTopBottomSortOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisUrlTargetConfiguration : IEquatable<AnalysisUrlTargetConfiguration>
    {
        private readonly string _value;

        private AnalysisUrlTargetConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisUrlTargetConfiguration NewTab { get; } = new AnalysisUrlTargetConfiguration("NEW_TAB");
        public static AnalysisUrlTargetConfiguration NewWindow { get; } = new AnalysisUrlTargetConfiguration("NEW_WINDOW");
        public static AnalysisUrlTargetConfiguration SameTab { get; } = new AnalysisUrlTargetConfiguration("SAME_TAB");

        public static bool operator ==(AnalysisUrlTargetConfiguration left, AnalysisUrlTargetConfiguration right) => left.Equals(right);
        public static bool operator !=(AnalysisUrlTargetConfiguration left, AnalysisUrlTargetConfiguration right) => !left.Equals(right);

        public static explicit operator string(AnalysisUrlTargetConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisUrlTargetConfiguration other && Equals(other);
        public bool Equals(AnalysisUrlTargetConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisValueWhenUnsetOption : IEquatable<AnalysisValueWhenUnsetOption>
    {
        private readonly string _value;

        private AnalysisValueWhenUnsetOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisValueWhenUnsetOption RecommendedValue { get; } = new AnalysisValueWhenUnsetOption("RECOMMENDED_VALUE");
        public static AnalysisValueWhenUnsetOption Null { get; } = new AnalysisValueWhenUnsetOption("NULL");

        public static bool operator ==(AnalysisValueWhenUnsetOption left, AnalysisValueWhenUnsetOption right) => left.Equals(right);
        public static bool operator !=(AnalysisValueWhenUnsetOption left, AnalysisValueWhenUnsetOption right) => !left.Equals(right);

        public static explicit operator string(AnalysisValueWhenUnsetOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisValueWhenUnsetOption other && Equals(other);
        public bool Equals(AnalysisValueWhenUnsetOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisVerticalTextAlignment : IEquatable<AnalysisVerticalTextAlignment>
    {
        private readonly string _value;

        private AnalysisVerticalTextAlignment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisVerticalTextAlignment Top { get; } = new AnalysisVerticalTextAlignment("TOP");
        public static AnalysisVerticalTextAlignment Middle { get; } = new AnalysisVerticalTextAlignment("MIDDLE");
        public static AnalysisVerticalTextAlignment Bottom { get; } = new AnalysisVerticalTextAlignment("BOTTOM");
        public static AnalysisVerticalTextAlignment Auto { get; } = new AnalysisVerticalTextAlignment("AUTO");

        public static bool operator ==(AnalysisVerticalTextAlignment left, AnalysisVerticalTextAlignment right) => left.Equals(right);
        public static bool operator !=(AnalysisVerticalTextAlignment left, AnalysisVerticalTextAlignment right) => !left.Equals(right);

        public static explicit operator string(AnalysisVerticalTextAlignment value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisVerticalTextAlignment other && Equals(other);
        public bool Equals(AnalysisVerticalTextAlignment other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisVisibility : IEquatable<AnalysisVisibility>
    {
        private readonly string _value;

        private AnalysisVisibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisVisibility Hidden { get; } = new AnalysisVisibility("HIDDEN");
        public static AnalysisVisibility Visible { get; } = new AnalysisVisibility("VISIBLE");

        public static bool operator ==(AnalysisVisibility left, AnalysisVisibility right) => left.Equals(right);
        public static bool operator !=(AnalysisVisibility left, AnalysisVisibility right) => !left.Equals(right);

        public static explicit operator string(AnalysisVisibility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisVisibility other && Equals(other);
        public bool Equals(AnalysisVisibility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisVisualCustomActionTrigger : IEquatable<AnalysisVisualCustomActionTrigger>
    {
        private readonly string _value;

        private AnalysisVisualCustomActionTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisVisualCustomActionTrigger DataPointClick { get; } = new AnalysisVisualCustomActionTrigger("DATA_POINT_CLICK");
        public static AnalysisVisualCustomActionTrigger DataPointMenu { get; } = new AnalysisVisualCustomActionTrigger("DATA_POINT_MENU");

        public static bool operator ==(AnalysisVisualCustomActionTrigger left, AnalysisVisualCustomActionTrigger right) => left.Equals(right);
        public static bool operator !=(AnalysisVisualCustomActionTrigger left, AnalysisVisualCustomActionTrigger right) => !left.Equals(right);

        public static explicit operator string(AnalysisVisualCustomActionTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisVisualCustomActionTrigger other && Equals(other);
        public bool Equals(AnalysisVisualCustomActionTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisWidgetStatus : IEquatable<AnalysisWidgetStatus>
    {
        private readonly string _value;

        private AnalysisWidgetStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisWidgetStatus Enabled { get; } = new AnalysisWidgetStatus("ENABLED");
        public static AnalysisWidgetStatus Disabled { get; } = new AnalysisWidgetStatus("DISABLED");

        public static bool operator ==(AnalysisWidgetStatus left, AnalysisWidgetStatus right) => left.Equals(right);
        public static bool operator !=(AnalysisWidgetStatus left, AnalysisWidgetStatus right) => !left.Equals(right);

        public static explicit operator string(AnalysisWidgetStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisWidgetStatus other && Equals(other);
        public bool Equals(AnalysisWidgetStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisWordCloudCloudLayout : IEquatable<AnalysisWordCloudCloudLayout>
    {
        private readonly string _value;

        private AnalysisWordCloudCloudLayout(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisWordCloudCloudLayout Fluid { get; } = new AnalysisWordCloudCloudLayout("FLUID");
        public static AnalysisWordCloudCloudLayout Normal { get; } = new AnalysisWordCloudCloudLayout("NORMAL");

        public static bool operator ==(AnalysisWordCloudCloudLayout left, AnalysisWordCloudCloudLayout right) => left.Equals(right);
        public static bool operator !=(AnalysisWordCloudCloudLayout left, AnalysisWordCloudCloudLayout right) => !left.Equals(right);

        public static explicit operator string(AnalysisWordCloudCloudLayout value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisWordCloudCloudLayout other && Equals(other);
        public bool Equals(AnalysisWordCloudCloudLayout other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisWordCloudWordCasing : IEquatable<AnalysisWordCloudWordCasing>
    {
        private readonly string _value;

        private AnalysisWordCloudWordCasing(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisWordCloudWordCasing LowerCase { get; } = new AnalysisWordCloudWordCasing("LOWER_CASE");
        public static AnalysisWordCloudWordCasing ExistingCase { get; } = new AnalysisWordCloudWordCasing("EXISTING_CASE");

        public static bool operator ==(AnalysisWordCloudWordCasing left, AnalysisWordCloudWordCasing right) => left.Equals(right);
        public static bool operator !=(AnalysisWordCloudWordCasing left, AnalysisWordCloudWordCasing right) => !left.Equals(right);

        public static explicit operator string(AnalysisWordCloudWordCasing value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisWordCloudWordCasing other && Equals(other);
        public bool Equals(AnalysisWordCloudWordCasing other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisWordCloudWordOrientation : IEquatable<AnalysisWordCloudWordOrientation>
    {
        private readonly string _value;

        private AnalysisWordCloudWordOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisWordCloudWordOrientation Horizontal { get; } = new AnalysisWordCloudWordOrientation("HORIZONTAL");
        public static AnalysisWordCloudWordOrientation HorizontalAndVertical { get; } = new AnalysisWordCloudWordOrientation("HORIZONTAL_AND_VERTICAL");

        public static bool operator ==(AnalysisWordCloudWordOrientation left, AnalysisWordCloudWordOrientation right) => left.Equals(right);
        public static bool operator !=(AnalysisWordCloudWordOrientation left, AnalysisWordCloudWordOrientation right) => !left.Equals(right);

        public static explicit operator string(AnalysisWordCloudWordOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisWordCloudWordOrientation other && Equals(other);
        public bool Equals(AnalysisWordCloudWordOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisWordCloudWordPadding : IEquatable<AnalysisWordCloudWordPadding>
    {
        private readonly string _value;

        private AnalysisWordCloudWordPadding(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisWordCloudWordPadding None { get; } = new AnalysisWordCloudWordPadding("NONE");
        public static AnalysisWordCloudWordPadding Small { get; } = new AnalysisWordCloudWordPadding("SMALL");
        public static AnalysisWordCloudWordPadding Medium { get; } = new AnalysisWordCloudWordPadding("MEDIUM");
        public static AnalysisWordCloudWordPadding Large { get; } = new AnalysisWordCloudWordPadding("LARGE");

        public static bool operator ==(AnalysisWordCloudWordPadding left, AnalysisWordCloudWordPadding right) => left.Equals(right);
        public static bool operator !=(AnalysisWordCloudWordPadding left, AnalysisWordCloudWordPadding right) => !left.Equals(right);

        public static explicit operator string(AnalysisWordCloudWordPadding value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisWordCloudWordPadding other && Equals(other);
        public bool Equals(AnalysisWordCloudWordPadding other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisWordCloudWordScaling : IEquatable<AnalysisWordCloudWordScaling>
    {
        private readonly string _value;

        private AnalysisWordCloudWordScaling(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisWordCloudWordScaling Emphasize { get; } = new AnalysisWordCloudWordScaling("EMPHASIZE");
        public static AnalysisWordCloudWordScaling Normal { get; } = new AnalysisWordCloudWordScaling("NORMAL");

        public static bool operator ==(AnalysisWordCloudWordScaling left, AnalysisWordCloudWordScaling right) => left.Equals(right);
        public static bool operator !=(AnalysisWordCloudWordScaling left, AnalysisWordCloudWordScaling right) => !left.Equals(right);

        public static explicit operator string(AnalysisWordCloudWordScaling value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisWordCloudWordScaling other && Equals(other);
        public bool Equals(AnalysisWordCloudWordScaling other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardAnchorOption : IEquatable<DashboardAnchorOption>
    {
        private readonly string _value;

        private DashboardAnchorOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardAnchorOption Now { get; } = new DashboardAnchorOption("NOW");

        public static bool operator ==(DashboardAnchorOption left, DashboardAnchorOption right) => left.Equals(right);
        public static bool operator !=(DashboardAnchorOption left, DashboardAnchorOption right) => !left.Equals(right);

        public static explicit operator string(DashboardAnchorOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardAnchorOption other && Equals(other);
        public bool Equals(DashboardAnchorOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardArcThickness : IEquatable<DashboardArcThickness>
    {
        private readonly string _value;

        private DashboardArcThickness(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardArcThickness Small { get; } = new DashboardArcThickness("SMALL");
        public static DashboardArcThickness Medium { get; } = new DashboardArcThickness("MEDIUM");
        public static DashboardArcThickness Large { get; } = new DashboardArcThickness("LARGE");
        public static DashboardArcThickness Whole { get; } = new DashboardArcThickness("WHOLE");

        public static bool operator ==(DashboardArcThickness left, DashboardArcThickness right) => left.Equals(right);
        public static bool operator !=(DashboardArcThickness left, DashboardArcThickness right) => !left.Equals(right);

        public static explicit operator string(DashboardArcThickness value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardArcThickness other && Equals(other);
        public bool Equals(DashboardArcThickness other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardArcThicknessOptions : IEquatable<DashboardArcThicknessOptions>
    {
        private readonly string _value;

        private DashboardArcThicknessOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardArcThicknessOptions Small { get; } = new DashboardArcThicknessOptions("SMALL");
        public static DashboardArcThicknessOptions Medium { get; } = new DashboardArcThicknessOptions("MEDIUM");
        public static DashboardArcThicknessOptions Large { get; } = new DashboardArcThicknessOptions("LARGE");

        public static bool operator ==(DashboardArcThicknessOptions left, DashboardArcThicknessOptions right) => left.Equals(right);
        public static bool operator !=(DashboardArcThicknessOptions left, DashboardArcThicknessOptions right) => !left.Equals(right);

        public static explicit operator string(DashboardArcThicknessOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardArcThicknessOptions other && Equals(other);
        public bool Equals(DashboardArcThicknessOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardAxisBinding : IEquatable<DashboardAxisBinding>
    {
        private readonly string _value;

        private DashboardAxisBinding(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardAxisBinding PrimaryYaxis { get; } = new DashboardAxisBinding("PRIMARY_YAXIS");
        public static DashboardAxisBinding SecondaryYaxis { get; } = new DashboardAxisBinding("SECONDARY_YAXIS");

        public static bool operator ==(DashboardAxisBinding left, DashboardAxisBinding right) => left.Equals(right);
        public static bool operator !=(DashboardAxisBinding left, DashboardAxisBinding right) => !left.Equals(right);

        public static explicit operator string(DashboardAxisBinding value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardAxisBinding other && Equals(other);
        public bool Equals(DashboardAxisBinding other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardBarChartOrientation : IEquatable<DashboardBarChartOrientation>
    {
        private readonly string _value;

        private DashboardBarChartOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardBarChartOrientation Horizontal { get; } = new DashboardBarChartOrientation("HORIZONTAL");
        public static DashboardBarChartOrientation Vertical { get; } = new DashboardBarChartOrientation("VERTICAL");

        public static bool operator ==(DashboardBarChartOrientation left, DashboardBarChartOrientation right) => left.Equals(right);
        public static bool operator !=(DashboardBarChartOrientation left, DashboardBarChartOrientation right) => !left.Equals(right);

        public static explicit operator string(DashboardBarChartOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardBarChartOrientation other && Equals(other);
        public bool Equals(DashboardBarChartOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardBarsArrangement : IEquatable<DashboardBarsArrangement>
    {
        private readonly string _value;

        private DashboardBarsArrangement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardBarsArrangement Clustered { get; } = new DashboardBarsArrangement("CLUSTERED");
        public static DashboardBarsArrangement Stacked { get; } = new DashboardBarsArrangement("STACKED");
        public static DashboardBarsArrangement StackedPercent { get; } = new DashboardBarsArrangement("STACKED_PERCENT");

        public static bool operator ==(DashboardBarsArrangement left, DashboardBarsArrangement right) => left.Equals(right);
        public static bool operator !=(DashboardBarsArrangement left, DashboardBarsArrangement right) => !left.Equals(right);

        public static explicit operator string(DashboardBarsArrangement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardBarsArrangement other && Equals(other);
        public bool Equals(DashboardBarsArrangement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardBaseMapStyleType : IEquatable<DashboardBaseMapStyleType>
    {
        private readonly string _value;

        private DashboardBaseMapStyleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardBaseMapStyleType LightGray { get; } = new DashboardBaseMapStyleType("LIGHT_GRAY");
        public static DashboardBaseMapStyleType DarkGray { get; } = new DashboardBaseMapStyleType("DARK_GRAY");
        public static DashboardBaseMapStyleType Street { get; } = new DashboardBaseMapStyleType("STREET");
        public static DashboardBaseMapStyleType Imagery { get; } = new DashboardBaseMapStyleType("IMAGERY");

        public static bool operator ==(DashboardBaseMapStyleType left, DashboardBaseMapStyleType right) => left.Equals(right);
        public static bool operator !=(DashboardBaseMapStyleType left, DashboardBaseMapStyleType right) => !left.Equals(right);

        public static explicit operator string(DashboardBaseMapStyleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardBaseMapStyleType other && Equals(other);
        public bool Equals(DashboardBaseMapStyleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardBehavior : IEquatable<DashboardBehavior>
    {
        private readonly string _value;

        private DashboardBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardBehavior Enabled { get; } = new DashboardBehavior("ENABLED");
        public static DashboardBehavior Disabled { get; } = new DashboardBehavior("DISABLED");

        public static bool operator ==(DashboardBehavior left, DashboardBehavior right) => left.Equals(right);
        public static bool operator !=(DashboardBehavior left, DashboardBehavior right) => !left.Equals(right);

        public static explicit operator string(DashboardBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardBehavior other && Equals(other);
        public bool Equals(DashboardBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardBoxPlotFillStyle : IEquatable<DashboardBoxPlotFillStyle>
    {
        private readonly string _value;

        private DashboardBoxPlotFillStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardBoxPlotFillStyle Solid { get; } = new DashboardBoxPlotFillStyle("SOLID");
        public static DashboardBoxPlotFillStyle Transparent { get; } = new DashboardBoxPlotFillStyle("TRANSPARENT");

        public static bool operator ==(DashboardBoxPlotFillStyle left, DashboardBoxPlotFillStyle right) => left.Equals(right);
        public static bool operator !=(DashboardBoxPlotFillStyle left, DashboardBoxPlotFillStyle right) => !left.Equals(right);

        public static explicit operator string(DashboardBoxPlotFillStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardBoxPlotFillStyle other && Equals(other);
        public bool Equals(DashboardBoxPlotFillStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardCategoricalAggregationFunction : IEquatable<DashboardCategoricalAggregationFunction>
    {
        private readonly string _value;

        private DashboardCategoricalAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardCategoricalAggregationFunction Count { get; } = new DashboardCategoricalAggregationFunction("COUNT");
        public static DashboardCategoricalAggregationFunction DistinctCount { get; } = new DashboardCategoricalAggregationFunction("DISTINCT_COUNT");

        public static bool operator ==(DashboardCategoricalAggregationFunction left, DashboardCategoricalAggregationFunction right) => left.Equals(right);
        public static bool operator !=(DashboardCategoricalAggregationFunction left, DashboardCategoricalAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(DashboardCategoricalAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardCategoricalAggregationFunction other && Equals(other);
        public bool Equals(DashboardCategoricalAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardCategoryFilterMatchOperator : IEquatable<DashboardCategoryFilterMatchOperator>
    {
        private readonly string _value;

        private DashboardCategoryFilterMatchOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardCategoryFilterMatchOperator EqualsValue { get; } = new DashboardCategoryFilterMatchOperator("EQUALS");
        public static DashboardCategoryFilterMatchOperator DoesNotEqual { get; } = new DashboardCategoryFilterMatchOperator("DOES_NOT_EQUAL");
        public static DashboardCategoryFilterMatchOperator Contains { get; } = new DashboardCategoryFilterMatchOperator("CONTAINS");
        public static DashboardCategoryFilterMatchOperator DoesNotContain { get; } = new DashboardCategoryFilterMatchOperator("DOES_NOT_CONTAIN");
        public static DashboardCategoryFilterMatchOperator StartsWith { get; } = new DashboardCategoryFilterMatchOperator("STARTS_WITH");
        public static DashboardCategoryFilterMatchOperator EndsWith { get; } = new DashboardCategoryFilterMatchOperator("ENDS_WITH");

        public static bool operator ==(DashboardCategoryFilterMatchOperator left, DashboardCategoryFilterMatchOperator right) => left.Equals(right);
        public static bool operator !=(DashboardCategoryFilterMatchOperator left, DashboardCategoryFilterMatchOperator right) => !left.Equals(right);

        public static explicit operator string(DashboardCategoryFilterMatchOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardCategoryFilterMatchOperator other && Equals(other);
        public bool Equals(DashboardCategoryFilterMatchOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardCategoryFilterSelectAllOptions : IEquatable<DashboardCategoryFilterSelectAllOptions>
    {
        private readonly string _value;

        private DashboardCategoryFilterSelectAllOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardCategoryFilterSelectAllOptions FilterAllValues { get; } = new DashboardCategoryFilterSelectAllOptions("FILTER_ALL_VALUES");

        public static bool operator ==(DashboardCategoryFilterSelectAllOptions left, DashboardCategoryFilterSelectAllOptions right) => left.Equals(right);
        public static bool operator !=(DashboardCategoryFilterSelectAllOptions left, DashboardCategoryFilterSelectAllOptions right) => !left.Equals(right);

        public static explicit operator string(DashboardCategoryFilterSelectAllOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardCategoryFilterSelectAllOptions other && Equals(other);
        public bool Equals(DashboardCategoryFilterSelectAllOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardColorFillType : IEquatable<DashboardColorFillType>
    {
        private readonly string _value;

        private DashboardColorFillType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardColorFillType Discrete { get; } = new DashboardColorFillType("DISCRETE");
        public static DashboardColorFillType Gradient { get; } = new DashboardColorFillType("GRADIENT");

        public static bool operator ==(DashboardColorFillType left, DashboardColorFillType right) => left.Equals(right);
        public static bool operator !=(DashboardColorFillType left, DashboardColorFillType right) => !left.Equals(right);

        public static explicit operator string(DashboardColorFillType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardColorFillType other && Equals(other);
        public bool Equals(DashboardColorFillType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardColumnRole : IEquatable<DashboardColumnRole>
    {
        private readonly string _value;

        private DashboardColumnRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardColumnRole Dimension { get; } = new DashboardColumnRole("DIMENSION");
        public static DashboardColumnRole Measure { get; } = new DashboardColumnRole("MEASURE");

        public static bool operator ==(DashboardColumnRole left, DashboardColumnRole right) => left.Equals(right);
        public static bool operator !=(DashboardColumnRole left, DashboardColumnRole right) => !left.Equals(right);

        public static explicit operator string(DashboardColumnRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardColumnRole other && Equals(other);
        public bool Equals(DashboardColumnRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardComparisonMethod : IEquatable<DashboardComparisonMethod>
    {
        private readonly string _value;

        private DashboardComparisonMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardComparisonMethod Difference { get; } = new DashboardComparisonMethod("DIFFERENCE");
        public static DashboardComparisonMethod PercentDifference { get; } = new DashboardComparisonMethod("PERCENT_DIFFERENCE");
        public static DashboardComparisonMethod Percent { get; } = new DashboardComparisonMethod("PERCENT");

        public static bool operator ==(DashboardComparisonMethod left, DashboardComparisonMethod right) => left.Equals(right);
        public static bool operator !=(DashboardComparisonMethod left, DashboardComparisonMethod right) => !left.Equals(right);

        public static explicit operator string(DashboardComparisonMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardComparisonMethod other && Equals(other);
        public bool Equals(DashboardComparisonMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardConditionalFormattingIconDisplayOption : IEquatable<DashboardConditionalFormattingIconDisplayOption>
    {
        private readonly string _value;

        private DashboardConditionalFormattingIconDisplayOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardConditionalFormattingIconDisplayOption IconOnly { get; } = new DashboardConditionalFormattingIconDisplayOption("ICON_ONLY");

        public static bool operator ==(DashboardConditionalFormattingIconDisplayOption left, DashboardConditionalFormattingIconDisplayOption right) => left.Equals(right);
        public static bool operator !=(DashboardConditionalFormattingIconDisplayOption left, DashboardConditionalFormattingIconDisplayOption right) => !left.Equals(right);

        public static explicit operator string(DashboardConditionalFormattingIconDisplayOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardConditionalFormattingIconDisplayOption other && Equals(other);
        public bool Equals(DashboardConditionalFormattingIconDisplayOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardConditionalFormattingIconSetType : IEquatable<DashboardConditionalFormattingIconSetType>
    {
        private readonly string _value;

        private DashboardConditionalFormattingIconSetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardConditionalFormattingIconSetType PlusMinus { get; } = new DashboardConditionalFormattingIconSetType("PLUS_MINUS");
        public static DashboardConditionalFormattingIconSetType CheckX { get; } = new DashboardConditionalFormattingIconSetType("CHECK_X");
        public static DashboardConditionalFormattingIconSetType ThreeColorArrow { get; } = new DashboardConditionalFormattingIconSetType("THREE_COLOR_ARROW");
        public static DashboardConditionalFormattingIconSetType ThreeGrayArrow { get; } = new DashboardConditionalFormattingIconSetType("THREE_GRAY_ARROW");
        public static DashboardConditionalFormattingIconSetType CaretUpMinusDown { get; } = new DashboardConditionalFormattingIconSetType("CARET_UP_MINUS_DOWN");
        public static DashboardConditionalFormattingIconSetType ThreeShape { get; } = new DashboardConditionalFormattingIconSetType("THREE_SHAPE");
        public static DashboardConditionalFormattingIconSetType ThreeCircle { get; } = new DashboardConditionalFormattingIconSetType("THREE_CIRCLE");
        public static DashboardConditionalFormattingIconSetType Flags { get; } = new DashboardConditionalFormattingIconSetType("FLAGS");
        public static DashboardConditionalFormattingIconSetType Bars { get; } = new DashboardConditionalFormattingIconSetType("BARS");
        public static DashboardConditionalFormattingIconSetType FourColorArrow { get; } = new DashboardConditionalFormattingIconSetType("FOUR_COLOR_ARROW");
        public static DashboardConditionalFormattingIconSetType FourGrayArrow { get; } = new DashboardConditionalFormattingIconSetType("FOUR_GRAY_ARROW");

        public static bool operator ==(DashboardConditionalFormattingIconSetType left, DashboardConditionalFormattingIconSetType right) => left.Equals(right);
        public static bool operator !=(DashboardConditionalFormattingIconSetType left, DashboardConditionalFormattingIconSetType right) => !left.Equals(right);

        public static explicit operator string(DashboardConditionalFormattingIconSetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardConditionalFormattingIconSetType other && Equals(other);
        public bool Equals(DashboardConditionalFormattingIconSetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardCrossDatasetTypes : IEquatable<DashboardCrossDatasetTypes>
    {
        private readonly string _value;

        private DashboardCrossDatasetTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardCrossDatasetTypes AllDatasets { get; } = new DashboardCrossDatasetTypes("ALL_DATASETS");
        public static DashboardCrossDatasetTypes SingleDataset { get; } = new DashboardCrossDatasetTypes("SINGLE_DATASET");

        public static bool operator ==(DashboardCrossDatasetTypes left, DashboardCrossDatasetTypes right) => left.Equals(right);
        public static bool operator !=(DashboardCrossDatasetTypes left, DashboardCrossDatasetTypes right) => !left.Equals(right);

        public static explicit operator string(DashboardCrossDatasetTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardCrossDatasetTypes other && Equals(other);
        public bool Equals(DashboardCrossDatasetTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardCustomContentImageScalingConfiguration : IEquatable<DashboardCustomContentImageScalingConfiguration>
    {
        private readonly string _value;

        private DashboardCustomContentImageScalingConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardCustomContentImageScalingConfiguration FitToHeight { get; } = new DashboardCustomContentImageScalingConfiguration("FIT_TO_HEIGHT");
        public static DashboardCustomContentImageScalingConfiguration FitToWidth { get; } = new DashboardCustomContentImageScalingConfiguration("FIT_TO_WIDTH");
        public static DashboardCustomContentImageScalingConfiguration DoNotScale { get; } = new DashboardCustomContentImageScalingConfiguration("DO_NOT_SCALE");
        public static DashboardCustomContentImageScalingConfiguration ScaleToVisual { get; } = new DashboardCustomContentImageScalingConfiguration("SCALE_TO_VISUAL");

        public static bool operator ==(DashboardCustomContentImageScalingConfiguration left, DashboardCustomContentImageScalingConfiguration right) => left.Equals(right);
        public static bool operator !=(DashboardCustomContentImageScalingConfiguration left, DashboardCustomContentImageScalingConfiguration right) => !left.Equals(right);

        public static explicit operator string(DashboardCustomContentImageScalingConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardCustomContentImageScalingConfiguration other && Equals(other);
        public bool Equals(DashboardCustomContentImageScalingConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardCustomContentType : IEquatable<DashboardCustomContentType>
    {
        private readonly string _value;

        private DashboardCustomContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardCustomContentType Image { get; } = new DashboardCustomContentType("IMAGE");
        public static DashboardCustomContentType OtherEmbeddedContent { get; } = new DashboardCustomContentType("OTHER_EMBEDDED_CONTENT");

        public static bool operator ==(DashboardCustomContentType left, DashboardCustomContentType right) => left.Equals(right);
        public static bool operator !=(DashboardCustomContentType left, DashboardCustomContentType right) => !left.Equals(right);

        public static explicit operator string(DashboardCustomContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardCustomContentType other && Equals(other);
        public bool Equals(DashboardCustomContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardDataLabelContent : IEquatable<DashboardDataLabelContent>
    {
        private readonly string _value;

        private DashboardDataLabelContent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardDataLabelContent Value { get; } = new DashboardDataLabelContent("VALUE");
        public static DashboardDataLabelContent Percent { get; } = new DashboardDataLabelContent("PERCENT");
        public static DashboardDataLabelContent ValueAndPercent { get; } = new DashboardDataLabelContent("VALUE_AND_PERCENT");

        public static bool operator ==(DashboardDataLabelContent left, DashboardDataLabelContent right) => left.Equals(right);
        public static bool operator !=(DashboardDataLabelContent left, DashboardDataLabelContent right) => !left.Equals(right);

        public static explicit operator string(DashboardDataLabelContent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardDataLabelContent other && Equals(other);
        public bool Equals(DashboardDataLabelContent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardDataLabelOverlap : IEquatable<DashboardDataLabelOverlap>
    {
        private readonly string _value;

        private DashboardDataLabelOverlap(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardDataLabelOverlap DisableOverlap { get; } = new DashboardDataLabelOverlap("DISABLE_OVERLAP");
        public static DashboardDataLabelOverlap EnableOverlap { get; } = new DashboardDataLabelOverlap("ENABLE_OVERLAP");

        public static bool operator ==(DashboardDataLabelOverlap left, DashboardDataLabelOverlap right) => left.Equals(right);
        public static bool operator !=(DashboardDataLabelOverlap left, DashboardDataLabelOverlap right) => !left.Equals(right);

        public static explicit operator string(DashboardDataLabelOverlap value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardDataLabelOverlap other && Equals(other);
        public bool Equals(DashboardDataLabelOverlap other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardDataLabelPosition : IEquatable<DashboardDataLabelPosition>
    {
        private readonly string _value;

        private DashboardDataLabelPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardDataLabelPosition Inside { get; } = new DashboardDataLabelPosition("INSIDE");
        public static DashboardDataLabelPosition Outside { get; } = new DashboardDataLabelPosition("OUTSIDE");
        public static DashboardDataLabelPosition Left { get; } = new DashboardDataLabelPosition("LEFT");
        public static DashboardDataLabelPosition Top { get; } = new DashboardDataLabelPosition("TOP");
        public static DashboardDataLabelPosition Bottom { get; } = new DashboardDataLabelPosition("BOTTOM");
        public static DashboardDataLabelPosition Right { get; } = new DashboardDataLabelPosition("RIGHT");

        public static bool operator ==(DashboardDataLabelPosition left, DashboardDataLabelPosition right) => left.Equals(right);
        public static bool operator !=(DashboardDataLabelPosition left, DashboardDataLabelPosition right) => !left.Equals(right);

        public static explicit operator string(DashboardDataLabelPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardDataLabelPosition other && Equals(other);
        public bool Equals(DashboardDataLabelPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardDateAggregationFunction : IEquatable<DashboardDateAggregationFunction>
    {
        private readonly string _value;

        private DashboardDateAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardDateAggregationFunction Count { get; } = new DashboardDateAggregationFunction("COUNT");
        public static DashboardDateAggregationFunction DistinctCount { get; } = new DashboardDateAggregationFunction("DISTINCT_COUNT");
        public static DashboardDateAggregationFunction Min { get; } = new DashboardDateAggregationFunction("MIN");
        public static DashboardDateAggregationFunction Max { get; } = new DashboardDateAggregationFunction("MAX");

        public static bool operator ==(DashboardDateAggregationFunction left, DashboardDateAggregationFunction right) => left.Equals(right);
        public static bool operator !=(DashboardDateAggregationFunction left, DashboardDateAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(DashboardDateAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardDateAggregationFunction other && Equals(other);
        public bool Equals(DashboardDateAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardErrorType : IEquatable<DashboardErrorType>
    {
        private readonly string _value;

        private DashboardErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardErrorType AccessDenied { get; } = new DashboardErrorType("ACCESS_DENIED");
        public static DashboardErrorType SourceNotFound { get; } = new DashboardErrorType("SOURCE_NOT_FOUND");
        public static DashboardErrorType DataSetNotFound { get; } = new DashboardErrorType("DATA_SET_NOT_FOUND");
        public static DashboardErrorType InternalFailure { get; } = new DashboardErrorType("INTERNAL_FAILURE");
        public static DashboardErrorType ParameterValueIncompatible { get; } = new DashboardErrorType("PARAMETER_VALUE_INCOMPATIBLE");
        public static DashboardErrorType ParameterTypeInvalid { get; } = new DashboardErrorType("PARAMETER_TYPE_INVALID");
        public static DashboardErrorType ParameterNotFound { get; } = new DashboardErrorType("PARAMETER_NOT_FOUND");
        public static DashboardErrorType ColumnTypeMismatch { get; } = new DashboardErrorType("COLUMN_TYPE_MISMATCH");
        public static DashboardErrorType ColumnGeographicRoleMismatch { get; } = new DashboardErrorType("COLUMN_GEOGRAPHIC_ROLE_MISMATCH");
        public static DashboardErrorType ColumnReplacementMissing { get; } = new DashboardErrorType("COLUMN_REPLACEMENT_MISSING");

        public static bool operator ==(DashboardErrorType left, DashboardErrorType right) => left.Equals(right);
        public static bool operator !=(DashboardErrorType left, DashboardErrorType right) => !left.Equals(right);

        public static explicit operator string(DashboardErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardErrorType other && Equals(other);
        public bool Equals(DashboardErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardFilterNullOption : IEquatable<DashboardFilterNullOption>
    {
        private readonly string _value;

        private DashboardFilterNullOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardFilterNullOption AllValues { get; } = new DashboardFilterNullOption("ALL_VALUES");
        public static DashboardFilterNullOption NullsOnly { get; } = new DashboardFilterNullOption("NULLS_ONLY");
        public static DashboardFilterNullOption NonNullsOnly { get; } = new DashboardFilterNullOption("NON_NULLS_ONLY");

        public static bool operator ==(DashboardFilterNullOption left, DashboardFilterNullOption right) => left.Equals(right);
        public static bool operator !=(DashboardFilterNullOption left, DashboardFilterNullOption right) => !left.Equals(right);

        public static explicit operator string(DashboardFilterNullOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardFilterNullOption other && Equals(other);
        public bool Equals(DashboardFilterNullOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardFilterVisualScope : IEquatable<DashboardFilterVisualScope>
    {
        private readonly string _value;

        private DashboardFilterVisualScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardFilterVisualScope AllVisuals { get; } = new DashboardFilterVisualScope("ALL_VISUALS");
        public static DashboardFilterVisualScope SelectedVisuals { get; } = new DashboardFilterVisualScope("SELECTED_VISUALS");

        public static bool operator ==(DashboardFilterVisualScope left, DashboardFilterVisualScope right) => left.Equals(right);
        public static bool operator !=(DashboardFilterVisualScope left, DashboardFilterVisualScope right) => !left.Equals(right);

        public static explicit operator string(DashboardFilterVisualScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardFilterVisualScope other && Equals(other);
        public bool Equals(DashboardFilterVisualScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardFontDecoration : IEquatable<DashboardFontDecoration>
    {
        private readonly string _value;

        private DashboardFontDecoration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardFontDecoration Underline { get; } = new DashboardFontDecoration("UNDERLINE");
        public static DashboardFontDecoration None { get; } = new DashboardFontDecoration("NONE");

        public static bool operator ==(DashboardFontDecoration left, DashboardFontDecoration right) => left.Equals(right);
        public static bool operator !=(DashboardFontDecoration left, DashboardFontDecoration right) => !left.Equals(right);

        public static explicit operator string(DashboardFontDecoration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardFontDecoration other && Equals(other);
        public bool Equals(DashboardFontDecoration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardFontStyle : IEquatable<DashboardFontStyle>
    {
        private readonly string _value;

        private DashboardFontStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardFontStyle Normal { get; } = new DashboardFontStyle("NORMAL");
        public static DashboardFontStyle Italic { get; } = new DashboardFontStyle("ITALIC");

        public static bool operator ==(DashboardFontStyle left, DashboardFontStyle right) => left.Equals(right);
        public static bool operator !=(DashboardFontStyle left, DashboardFontStyle right) => !left.Equals(right);

        public static explicit operator string(DashboardFontStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardFontStyle other && Equals(other);
        public bool Equals(DashboardFontStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardFontWeightName : IEquatable<DashboardFontWeightName>
    {
        private readonly string _value;

        private DashboardFontWeightName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardFontWeightName Normal { get; } = new DashboardFontWeightName("NORMAL");
        public static DashboardFontWeightName Bold { get; } = new DashboardFontWeightName("BOLD");

        public static bool operator ==(DashboardFontWeightName left, DashboardFontWeightName right) => left.Equals(right);
        public static bool operator !=(DashboardFontWeightName left, DashboardFontWeightName right) => !left.Equals(right);

        public static explicit operator string(DashboardFontWeightName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardFontWeightName other && Equals(other);
        public bool Equals(DashboardFontWeightName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardForecastComputationSeasonality : IEquatable<DashboardForecastComputationSeasonality>
    {
        private readonly string _value;

        private DashboardForecastComputationSeasonality(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardForecastComputationSeasonality Automatic { get; } = new DashboardForecastComputationSeasonality("AUTOMATIC");
        public static DashboardForecastComputationSeasonality Custom { get; } = new DashboardForecastComputationSeasonality("CUSTOM");

        public static bool operator ==(DashboardForecastComputationSeasonality left, DashboardForecastComputationSeasonality right) => left.Equals(right);
        public static bool operator !=(DashboardForecastComputationSeasonality left, DashboardForecastComputationSeasonality right) => !left.Equals(right);

        public static explicit operator string(DashboardForecastComputationSeasonality value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardForecastComputationSeasonality other && Equals(other);
        public bool Equals(DashboardForecastComputationSeasonality other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardFunnelChartMeasureDataLabelStyle : IEquatable<DashboardFunnelChartMeasureDataLabelStyle>
    {
        private readonly string _value;

        private DashboardFunnelChartMeasureDataLabelStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardFunnelChartMeasureDataLabelStyle ValueOnly { get; } = new DashboardFunnelChartMeasureDataLabelStyle("VALUE_ONLY");
        public static DashboardFunnelChartMeasureDataLabelStyle PercentageByFirstStage { get; } = new DashboardFunnelChartMeasureDataLabelStyle("PERCENTAGE_BY_FIRST_STAGE");
        public static DashboardFunnelChartMeasureDataLabelStyle PercentageByPreviousStage { get; } = new DashboardFunnelChartMeasureDataLabelStyle("PERCENTAGE_BY_PREVIOUS_STAGE");
        public static DashboardFunnelChartMeasureDataLabelStyle ValueAndPercentageByFirstStage { get; } = new DashboardFunnelChartMeasureDataLabelStyle("VALUE_AND_PERCENTAGE_BY_FIRST_STAGE");
        public static DashboardFunnelChartMeasureDataLabelStyle ValueAndPercentageByPreviousStage { get; } = new DashboardFunnelChartMeasureDataLabelStyle("VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE");

        public static bool operator ==(DashboardFunnelChartMeasureDataLabelStyle left, DashboardFunnelChartMeasureDataLabelStyle right) => left.Equals(right);
        public static bool operator !=(DashboardFunnelChartMeasureDataLabelStyle left, DashboardFunnelChartMeasureDataLabelStyle right) => !left.Equals(right);

        public static explicit operator string(DashboardFunnelChartMeasureDataLabelStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardFunnelChartMeasureDataLabelStyle other && Equals(other);
        public bool Equals(DashboardFunnelChartMeasureDataLabelStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardGeospatialSelectedPointStyle : IEquatable<DashboardGeospatialSelectedPointStyle>
    {
        private readonly string _value;

        private DashboardGeospatialSelectedPointStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardGeospatialSelectedPointStyle Point { get; } = new DashboardGeospatialSelectedPointStyle("POINT");
        public static DashboardGeospatialSelectedPointStyle Cluster { get; } = new DashboardGeospatialSelectedPointStyle("CLUSTER");
        public static DashboardGeospatialSelectedPointStyle Heatmap { get; } = new DashboardGeospatialSelectedPointStyle("HEATMAP");

        public static bool operator ==(DashboardGeospatialSelectedPointStyle left, DashboardGeospatialSelectedPointStyle right) => left.Equals(right);
        public static bool operator !=(DashboardGeospatialSelectedPointStyle left, DashboardGeospatialSelectedPointStyle right) => !left.Equals(right);

        public static explicit operator string(DashboardGeospatialSelectedPointStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardGeospatialSelectedPointStyle other && Equals(other);
        public bool Equals(DashboardGeospatialSelectedPointStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardHistogramBinType : IEquatable<DashboardHistogramBinType>
    {
        private readonly string _value;

        private DashboardHistogramBinType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardHistogramBinType BinCount { get; } = new DashboardHistogramBinType("BIN_COUNT");
        public static DashboardHistogramBinType BinWidth { get; } = new DashboardHistogramBinType("BIN_WIDTH");

        public static bool operator ==(DashboardHistogramBinType left, DashboardHistogramBinType right) => left.Equals(right);
        public static bool operator !=(DashboardHistogramBinType left, DashboardHistogramBinType right) => !left.Equals(right);

        public static explicit operator string(DashboardHistogramBinType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardHistogramBinType other && Equals(other);
        public bool Equals(DashboardHistogramBinType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardHorizontalTextAlignment : IEquatable<DashboardHorizontalTextAlignment>
    {
        private readonly string _value;

        private DashboardHorizontalTextAlignment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardHorizontalTextAlignment Left { get; } = new DashboardHorizontalTextAlignment("LEFT");
        public static DashboardHorizontalTextAlignment Center { get; } = new DashboardHorizontalTextAlignment("CENTER");
        public static DashboardHorizontalTextAlignment Right { get; } = new DashboardHorizontalTextAlignment("RIGHT");
        public static DashboardHorizontalTextAlignment Auto { get; } = new DashboardHorizontalTextAlignment("AUTO");

        public static bool operator ==(DashboardHorizontalTextAlignment left, DashboardHorizontalTextAlignment right) => left.Equals(right);
        public static bool operator !=(DashboardHorizontalTextAlignment left, DashboardHorizontalTextAlignment right) => !left.Equals(right);

        public static explicit operator string(DashboardHorizontalTextAlignment value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardHorizontalTextAlignment other && Equals(other);
        public bool Equals(DashboardHorizontalTextAlignment other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardIcon : IEquatable<DashboardIcon>
    {
        private readonly string _value;

        private DashboardIcon(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardIcon CaretUp { get; } = new DashboardIcon("CARET_UP");
        public static DashboardIcon CaretDown { get; } = new DashboardIcon("CARET_DOWN");
        public static DashboardIcon Plus { get; } = new DashboardIcon("PLUS");
        public static DashboardIcon Minus { get; } = new DashboardIcon("MINUS");
        public static DashboardIcon ArrowUp { get; } = new DashboardIcon("ARROW_UP");
        public static DashboardIcon ArrowDown { get; } = new DashboardIcon("ARROW_DOWN");
        public static DashboardIcon ArrowLeft { get; } = new DashboardIcon("ARROW_LEFT");
        public static DashboardIcon ArrowUpLeft { get; } = new DashboardIcon("ARROW_UP_LEFT");
        public static DashboardIcon ArrowDownLeft { get; } = new DashboardIcon("ARROW_DOWN_LEFT");
        public static DashboardIcon ArrowRight { get; } = new DashboardIcon("ARROW_RIGHT");
        public static DashboardIcon ArrowUpRight { get; } = new DashboardIcon("ARROW_UP_RIGHT");
        public static DashboardIcon ArrowDownRight { get; } = new DashboardIcon("ARROW_DOWN_RIGHT");
        public static DashboardIcon FaceUp { get; } = new DashboardIcon("FACE_UP");
        public static DashboardIcon FaceDown { get; } = new DashboardIcon("FACE_DOWN");
        public static DashboardIcon FaceFlat { get; } = new DashboardIcon("FACE_FLAT");
        public static DashboardIcon OneBar { get; } = new DashboardIcon("ONE_BAR");
        public static DashboardIcon TwoBar { get; } = new DashboardIcon("TWO_BAR");
        public static DashboardIcon ThreeBar { get; } = new DashboardIcon("THREE_BAR");
        public static DashboardIcon Circle { get; } = new DashboardIcon("CIRCLE");
        public static DashboardIcon Triangle { get; } = new DashboardIcon("TRIANGLE");
        public static DashboardIcon Square { get; } = new DashboardIcon("SQUARE");
        public static DashboardIcon Flag { get; } = new DashboardIcon("FLAG");
        public static DashboardIcon ThumbsUp { get; } = new DashboardIcon("THUMBS_UP");
        public static DashboardIcon ThumbsDown { get; } = new DashboardIcon("THUMBS_DOWN");
        public static DashboardIcon Checkmark { get; } = new DashboardIcon("CHECKMARK");
        public static DashboardIcon X { get; } = new DashboardIcon("X");

        public static bool operator ==(DashboardIcon left, DashboardIcon right) => left.Equals(right);
        public static bool operator !=(DashboardIcon left, DashboardIcon right) => !left.Equals(right);

        public static explicit operator string(DashboardIcon value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardIcon other && Equals(other);
        public bool Equals(DashboardIcon other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardKpiSparklineType : IEquatable<DashboardKpiSparklineType>
    {
        private readonly string _value;

        private DashboardKpiSparklineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardKpiSparklineType Line { get; } = new DashboardKpiSparklineType("LINE");
        public static DashboardKpiSparklineType Area { get; } = new DashboardKpiSparklineType("AREA");

        public static bool operator ==(DashboardKpiSparklineType left, DashboardKpiSparklineType right) => left.Equals(right);
        public static bool operator !=(DashboardKpiSparklineType left, DashboardKpiSparklineType right) => !left.Equals(right);

        public static explicit operator string(DashboardKpiSparklineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardKpiSparklineType other && Equals(other);
        public bool Equals(DashboardKpiSparklineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardKpiVisualStandardLayoutType : IEquatable<DashboardKpiVisualStandardLayoutType>
    {
        private readonly string _value;

        private DashboardKpiVisualStandardLayoutType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardKpiVisualStandardLayoutType Classic { get; } = new DashboardKpiVisualStandardLayoutType("CLASSIC");
        public static DashboardKpiVisualStandardLayoutType Vertical { get; } = new DashboardKpiVisualStandardLayoutType("VERTICAL");

        public static bool operator ==(DashboardKpiVisualStandardLayoutType left, DashboardKpiVisualStandardLayoutType right) => left.Equals(right);
        public static bool operator !=(DashboardKpiVisualStandardLayoutType left, DashboardKpiVisualStandardLayoutType right) => !left.Equals(right);

        public static explicit operator string(DashboardKpiVisualStandardLayoutType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardKpiVisualStandardLayoutType other && Equals(other);
        public bool Equals(DashboardKpiVisualStandardLayoutType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardLayoutElementType : IEquatable<DashboardLayoutElementType>
    {
        private readonly string _value;

        private DashboardLayoutElementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardLayoutElementType Visual { get; } = new DashboardLayoutElementType("VISUAL");
        public static DashboardLayoutElementType FilterControl { get; } = new DashboardLayoutElementType("FILTER_CONTROL");
        public static DashboardLayoutElementType ParameterControl { get; } = new DashboardLayoutElementType("PARAMETER_CONTROL");
        public static DashboardLayoutElementType TextBox { get; } = new DashboardLayoutElementType("TEXT_BOX");

        public static bool operator ==(DashboardLayoutElementType left, DashboardLayoutElementType right) => left.Equals(right);
        public static bool operator !=(DashboardLayoutElementType left, DashboardLayoutElementType right) => !left.Equals(right);

        public static explicit operator string(DashboardLayoutElementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardLayoutElementType other && Equals(other);
        public bool Equals(DashboardLayoutElementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardLegendPosition : IEquatable<DashboardLegendPosition>
    {
        private readonly string _value;

        private DashboardLegendPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardLegendPosition Auto { get; } = new DashboardLegendPosition("AUTO");
        public static DashboardLegendPosition Right { get; } = new DashboardLegendPosition("RIGHT");
        public static DashboardLegendPosition Bottom { get; } = new DashboardLegendPosition("BOTTOM");
        public static DashboardLegendPosition Top { get; } = new DashboardLegendPosition("TOP");

        public static bool operator ==(DashboardLegendPosition left, DashboardLegendPosition right) => left.Equals(right);
        public static bool operator !=(DashboardLegendPosition left, DashboardLegendPosition right) => !left.Equals(right);

        public static explicit operator string(DashboardLegendPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardLegendPosition other && Equals(other);
        public bool Equals(DashboardLegendPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardLineChartLineStyle : IEquatable<DashboardLineChartLineStyle>
    {
        private readonly string _value;

        private DashboardLineChartLineStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardLineChartLineStyle Solid { get; } = new DashboardLineChartLineStyle("SOLID");
        public static DashboardLineChartLineStyle Dotted { get; } = new DashboardLineChartLineStyle("DOTTED");
        public static DashboardLineChartLineStyle Dashed { get; } = new DashboardLineChartLineStyle("DASHED");

        public static bool operator ==(DashboardLineChartLineStyle left, DashboardLineChartLineStyle right) => left.Equals(right);
        public static bool operator !=(DashboardLineChartLineStyle left, DashboardLineChartLineStyle right) => !left.Equals(right);

        public static explicit operator string(DashboardLineChartLineStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardLineChartLineStyle other && Equals(other);
        public bool Equals(DashboardLineChartLineStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardLineChartMarkerShape : IEquatable<DashboardLineChartMarkerShape>
    {
        private readonly string _value;

        private DashboardLineChartMarkerShape(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardLineChartMarkerShape Circle { get; } = new DashboardLineChartMarkerShape("CIRCLE");
        public static DashboardLineChartMarkerShape Triangle { get; } = new DashboardLineChartMarkerShape("TRIANGLE");
        public static DashboardLineChartMarkerShape Square { get; } = new DashboardLineChartMarkerShape("SQUARE");
        public static DashboardLineChartMarkerShape Diamond { get; } = new DashboardLineChartMarkerShape("DIAMOND");
        public static DashboardLineChartMarkerShape RoundedSquare { get; } = new DashboardLineChartMarkerShape("ROUNDED_SQUARE");

        public static bool operator ==(DashboardLineChartMarkerShape left, DashboardLineChartMarkerShape right) => left.Equals(right);
        public static bool operator !=(DashboardLineChartMarkerShape left, DashboardLineChartMarkerShape right) => !left.Equals(right);

        public static explicit operator string(DashboardLineChartMarkerShape value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardLineChartMarkerShape other && Equals(other);
        public bool Equals(DashboardLineChartMarkerShape other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardLineChartType : IEquatable<DashboardLineChartType>
    {
        private readonly string _value;

        private DashboardLineChartType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardLineChartType Line { get; } = new DashboardLineChartType("LINE");
        public static DashboardLineChartType Area { get; } = new DashboardLineChartType("AREA");
        public static DashboardLineChartType StackedArea { get; } = new DashboardLineChartType("STACKED_AREA");

        public static bool operator ==(DashboardLineChartType left, DashboardLineChartType right) => left.Equals(right);
        public static bool operator !=(DashboardLineChartType left, DashboardLineChartType right) => !left.Equals(right);

        public static explicit operator string(DashboardLineChartType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardLineChartType other && Equals(other);
        public bool Equals(DashboardLineChartType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardLineInterpolation : IEquatable<DashboardLineInterpolation>
    {
        private readonly string _value;

        private DashboardLineInterpolation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardLineInterpolation Linear { get; } = new DashboardLineInterpolation("LINEAR");
        public static DashboardLineInterpolation Smooth { get; } = new DashboardLineInterpolation("SMOOTH");
        public static DashboardLineInterpolation Stepped { get; } = new DashboardLineInterpolation("STEPPED");

        public static bool operator ==(DashboardLineInterpolation left, DashboardLineInterpolation right) => left.Equals(right);
        public static bool operator !=(DashboardLineInterpolation left, DashboardLineInterpolation right) => !left.Equals(right);

        public static explicit operator string(DashboardLineInterpolation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardLineInterpolation other && Equals(other);
        public bool Equals(DashboardLineInterpolation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardMapZoomMode : IEquatable<DashboardMapZoomMode>
    {
        private readonly string _value;

        private DashboardMapZoomMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardMapZoomMode Auto { get; } = new DashboardMapZoomMode("AUTO");
        public static DashboardMapZoomMode Manual { get; } = new DashboardMapZoomMode("MANUAL");

        public static bool operator ==(DashboardMapZoomMode left, DashboardMapZoomMode right) => left.Equals(right);
        public static bool operator !=(DashboardMapZoomMode left, DashboardMapZoomMode right) => !left.Equals(right);

        public static explicit operator string(DashboardMapZoomMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardMapZoomMode other && Equals(other);
        public bool Equals(DashboardMapZoomMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardMaximumMinimumComputationType : IEquatable<DashboardMaximumMinimumComputationType>
    {
        private readonly string _value;

        private DashboardMaximumMinimumComputationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardMaximumMinimumComputationType Maximum { get; } = new DashboardMaximumMinimumComputationType("MAXIMUM");
        public static DashboardMaximumMinimumComputationType Minimum { get; } = new DashboardMaximumMinimumComputationType("MINIMUM");

        public static bool operator ==(DashboardMaximumMinimumComputationType left, DashboardMaximumMinimumComputationType right) => left.Equals(right);
        public static bool operator !=(DashboardMaximumMinimumComputationType left, DashboardMaximumMinimumComputationType right) => !left.Equals(right);

        public static explicit operator string(DashboardMaximumMinimumComputationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardMaximumMinimumComputationType other && Equals(other);
        public bool Equals(DashboardMaximumMinimumComputationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardMissingDataTreatmentOption : IEquatable<DashboardMissingDataTreatmentOption>
    {
        private readonly string _value;

        private DashboardMissingDataTreatmentOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardMissingDataTreatmentOption Interpolate { get; } = new DashboardMissingDataTreatmentOption("INTERPOLATE");
        public static DashboardMissingDataTreatmentOption ShowAsZero { get; } = new DashboardMissingDataTreatmentOption("SHOW_AS_ZERO");
        public static DashboardMissingDataTreatmentOption ShowAsBlank { get; } = new DashboardMissingDataTreatmentOption("SHOW_AS_BLANK");

        public static bool operator ==(DashboardMissingDataTreatmentOption left, DashboardMissingDataTreatmentOption right) => left.Equals(right);
        public static bool operator !=(DashboardMissingDataTreatmentOption left, DashboardMissingDataTreatmentOption right) => !left.Equals(right);

        public static explicit operator string(DashboardMissingDataTreatmentOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardMissingDataTreatmentOption other && Equals(other);
        public bool Equals(DashboardMissingDataTreatmentOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardNegativeValueDisplayMode : IEquatable<DashboardNegativeValueDisplayMode>
    {
        private readonly string _value;

        private DashboardNegativeValueDisplayMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardNegativeValueDisplayMode Positive { get; } = new DashboardNegativeValueDisplayMode("POSITIVE");
        public static DashboardNegativeValueDisplayMode Negative { get; } = new DashboardNegativeValueDisplayMode("NEGATIVE");

        public static bool operator ==(DashboardNegativeValueDisplayMode left, DashboardNegativeValueDisplayMode right) => left.Equals(right);
        public static bool operator !=(DashboardNegativeValueDisplayMode left, DashboardNegativeValueDisplayMode right) => !left.Equals(right);

        public static explicit operator string(DashboardNegativeValueDisplayMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardNegativeValueDisplayMode other && Equals(other);
        public bool Equals(DashboardNegativeValueDisplayMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardNumberScale : IEquatable<DashboardNumberScale>
    {
        private readonly string _value;

        private DashboardNumberScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardNumberScale None { get; } = new DashboardNumberScale("NONE");
        public static DashboardNumberScale Auto { get; } = new DashboardNumberScale("AUTO");
        public static DashboardNumberScale Thousands { get; } = new DashboardNumberScale("THOUSANDS");
        public static DashboardNumberScale Millions { get; } = new DashboardNumberScale("MILLIONS");
        public static DashboardNumberScale Billions { get; } = new DashboardNumberScale("BILLIONS");
        public static DashboardNumberScale Trillions { get; } = new DashboardNumberScale("TRILLIONS");

        public static bool operator ==(DashboardNumberScale left, DashboardNumberScale right) => left.Equals(right);
        public static bool operator !=(DashboardNumberScale left, DashboardNumberScale right) => !left.Equals(right);

        public static explicit operator string(DashboardNumberScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardNumberScale other && Equals(other);
        public bool Equals(DashboardNumberScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardNumericEqualityMatchOperator : IEquatable<DashboardNumericEqualityMatchOperator>
    {
        private readonly string _value;

        private DashboardNumericEqualityMatchOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardNumericEqualityMatchOperator EqualsValue { get; } = new DashboardNumericEqualityMatchOperator("EQUALS");
        public static DashboardNumericEqualityMatchOperator DoesNotEqual { get; } = new DashboardNumericEqualityMatchOperator("DOES_NOT_EQUAL");

        public static bool operator ==(DashboardNumericEqualityMatchOperator left, DashboardNumericEqualityMatchOperator right) => left.Equals(right);
        public static bool operator !=(DashboardNumericEqualityMatchOperator left, DashboardNumericEqualityMatchOperator right) => !left.Equals(right);

        public static explicit operator string(DashboardNumericEqualityMatchOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardNumericEqualityMatchOperator other && Equals(other);
        public bool Equals(DashboardNumericEqualityMatchOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardNumericFilterSelectAllOptions : IEquatable<DashboardNumericFilterSelectAllOptions>
    {
        private readonly string _value;

        private DashboardNumericFilterSelectAllOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardNumericFilterSelectAllOptions FilterAllValues { get; } = new DashboardNumericFilterSelectAllOptions("FILTER_ALL_VALUES");

        public static bool operator ==(DashboardNumericFilterSelectAllOptions left, DashboardNumericFilterSelectAllOptions right) => left.Equals(right);
        public static bool operator !=(DashboardNumericFilterSelectAllOptions left, DashboardNumericFilterSelectAllOptions right) => !left.Equals(right);

        public static explicit operator string(DashboardNumericFilterSelectAllOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardNumericFilterSelectAllOptions other && Equals(other);
        public bool Equals(DashboardNumericFilterSelectAllOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardNumericSeparatorSymbol : IEquatable<DashboardNumericSeparatorSymbol>
    {
        private readonly string _value;

        private DashboardNumericSeparatorSymbol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardNumericSeparatorSymbol Comma { get; } = new DashboardNumericSeparatorSymbol("COMMA");
        public static DashboardNumericSeparatorSymbol Dot { get; } = new DashboardNumericSeparatorSymbol("DOT");
        public static DashboardNumericSeparatorSymbol Space { get; } = new DashboardNumericSeparatorSymbol("SPACE");

        public static bool operator ==(DashboardNumericSeparatorSymbol left, DashboardNumericSeparatorSymbol right) => left.Equals(right);
        public static bool operator !=(DashboardNumericSeparatorSymbol left, DashboardNumericSeparatorSymbol right) => !left.Equals(right);

        public static explicit operator string(DashboardNumericSeparatorSymbol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardNumericSeparatorSymbol other && Equals(other);
        public bool Equals(DashboardNumericSeparatorSymbol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardOtherCategories : IEquatable<DashboardOtherCategories>
    {
        private readonly string _value;

        private DashboardOtherCategories(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardOtherCategories Include { get; } = new DashboardOtherCategories("INCLUDE");
        public static DashboardOtherCategories Exclude { get; } = new DashboardOtherCategories("EXCLUDE");

        public static bool operator ==(DashboardOtherCategories left, DashboardOtherCategories right) => left.Equals(right);
        public static bool operator !=(DashboardOtherCategories left, DashboardOtherCategories right) => !left.Equals(right);

        public static explicit operator string(DashboardOtherCategories value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardOtherCategories other && Equals(other);
        public bool Equals(DashboardOtherCategories other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardPanelBorderStyle : IEquatable<DashboardPanelBorderStyle>
    {
        private readonly string _value;

        private DashboardPanelBorderStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardPanelBorderStyle Solid { get; } = new DashboardPanelBorderStyle("SOLID");
        public static DashboardPanelBorderStyle Dashed { get; } = new DashboardPanelBorderStyle("DASHED");
        public static DashboardPanelBorderStyle Dotted { get; } = new DashboardPanelBorderStyle("DOTTED");

        public static bool operator ==(DashboardPanelBorderStyle left, DashboardPanelBorderStyle right) => left.Equals(right);
        public static bool operator !=(DashboardPanelBorderStyle left, DashboardPanelBorderStyle right) => !left.Equals(right);

        public static explicit operator string(DashboardPanelBorderStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardPanelBorderStyle other && Equals(other);
        public bool Equals(DashboardPanelBorderStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardPaperOrientation : IEquatable<DashboardPaperOrientation>
    {
        private readonly string _value;

        private DashboardPaperOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardPaperOrientation Portrait { get; } = new DashboardPaperOrientation("PORTRAIT");
        public static DashboardPaperOrientation Landscape { get; } = new DashboardPaperOrientation("LANDSCAPE");

        public static bool operator ==(DashboardPaperOrientation left, DashboardPaperOrientation right) => left.Equals(right);
        public static bool operator !=(DashboardPaperOrientation left, DashboardPaperOrientation right) => !left.Equals(right);

        public static explicit operator string(DashboardPaperOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardPaperOrientation other && Equals(other);
        public bool Equals(DashboardPaperOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardPaperSize : IEquatable<DashboardPaperSize>
    {
        private readonly string _value;

        private DashboardPaperSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardPaperSize UsLetter { get; } = new DashboardPaperSize("US_LETTER");
        public static DashboardPaperSize UsLegal { get; } = new DashboardPaperSize("US_LEGAL");
        public static DashboardPaperSize UsTabloidLedger { get; } = new DashboardPaperSize("US_TABLOID_LEDGER");
        public static DashboardPaperSize A0 { get; } = new DashboardPaperSize("A0");
        public static DashboardPaperSize A1 { get; } = new DashboardPaperSize("A1");
        public static DashboardPaperSize A2 { get; } = new DashboardPaperSize("A2");
        public static DashboardPaperSize A3 { get; } = new DashboardPaperSize("A3");
        public static DashboardPaperSize A4 { get; } = new DashboardPaperSize("A4");
        public static DashboardPaperSize A5 { get; } = new DashboardPaperSize("A5");
        public static DashboardPaperSize JisB4 { get; } = new DashboardPaperSize("JIS_B4");
        public static DashboardPaperSize JisB5 { get; } = new DashboardPaperSize("JIS_B5");

        public static bool operator ==(DashboardPaperSize left, DashboardPaperSize right) => left.Equals(right);
        public static bool operator !=(DashboardPaperSize left, DashboardPaperSize right) => !left.Equals(right);

        public static explicit operator string(DashboardPaperSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardPaperSize other && Equals(other);
        public bool Equals(DashboardPaperSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardParameterValueType : IEquatable<DashboardParameterValueType>
    {
        private readonly string _value;

        private DashboardParameterValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardParameterValueType MultiValued { get; } = new DashboardParameterValueType("MULTI_VALUED");
        public static DashboardParameterValueType SingleValued { get; } = new DashboardParameterValueType("SINGLE_VALUED");

        public static bool operator ==(DashboardParameterValueType left, DashboardParameterValueType right) => left.Equals(right);
        public static bool operator !=(DashboardParameterValueType left, DashboardParameterValueType right) => !left.Equals(right);

        public static explicit operator string(DashboardParameterValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardParameterValueType other && Equals(other);
        public bool Equals(DashboardParameterValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardPivotTableConditionalFormattingScopeRole : IEquatable<DashboardPivotTableConditionalFormattingScopeRole>
    {
        private readonly string _value;

        private DashboardPivotTableConditionalFormattingScopeRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardPivotTableConditionalFormattingScopeRole Field { get; } = new DashboardPivotTableConditionalFormattingScopeRole("FIELD");
        public static DashboardPivotTableConditionalFormattingScopeRole FieldTotal { get; } = new DashboardPivotTableConditionalFormattingScopeRole("FIELD_TOTAL");
        public static DashboardPivotTableConditionalFormattingScopeRole GrandTotal { get; } = new DashboardPivotTableConditionalFormattingScopeRole("GRAND_TOTAL");

        public static bool operator ==(DashboardPivotTableConditionalFormattingScopeRole left, DashboardPivotTableConditionalFormattingScopeRole right) => left.Equals(right);
        public static bool operator !=(DashboardPivotTableConditionalFormattingScopeRole left, DashboardPivotTableConditionalFormattingScopeRole right) => !left.Equals(right);

        public static explicit operator string(DashboardPivotTableConditionalFormattingScopeRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardPivotTableConditionalFormattingScopeRole other && Equals(other);
        public bool Equals(DashboardPivotTableConditionalFormattingScopeRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardPivotTableFieldCollapseState : IEquatable<DashboardPivotTableFieldCollapseState>
    {
        private readonly string _value;

        private DashboardPivotTableFieldCollapseState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardPivotTableFieldCollapseState Collapsed { get; } = new DashboardPivotTableFieldCollapseState("COLLAPSED");
        public static DashboardPivotTableFieldCollapseState Expanded { get; } = new DashboardPivotTableFieldCollapseState("EXPANDED");

        public static bool operator ==(DashboardPivotTableFieldCollapseState left, DashboardPivotTableFieldCollapseState right) => left.Equals(right);
        public static bool operator !=(DashboardPivotTableFieldCollapseState left, DashboardPivotTableFieldCollapseState right) => !left.Equals(right);

        public static explicit operator string(DashboardPivotTableFieldCollapseState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardPivotTableFieldCollapseState other && Equals(other);
        public bool Equals(DashboardPivotTableFieldCollapseState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardPivotTableMetricPlacement : IEquatable<DashboardPivotTableMetricPlacement>
    {
        private readonly string _value;

        private DashboardPivotTableMetricPlacement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardPivotTableMetricPlacement Row { get; } = new DashboardPivotTableMetricPlacement("ROW");
        public static DashboardPivotTableMetricPlacement Column { get; } = new DashboardPivotTableMetricPlacement("COLUMN");

        public static bool operator ==(DashboardPivotTableMetricPlacement left, DashboardPivotTableMetricPlacement right) => left.Equals(right);
        public static bool operator !=(DashboardPivotTableMetricPlacement left, DashboardPivotTableMetricPlacement right) => !left.Equals(right);

        public static explicit operator string(DashboardPivotTableMetricPlacement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardPivotTableMetricPlacement other && Equals(other);
        public bool Equals(DashboardPivotTableMetricPlacement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardPivotTableRowsLayout : IEquatable<DashboardPivotTableRowsLayout>
    {
        private readonly string _value;

        private DashboardPivotTableRowsLayout(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardPivotTableRowsLayout Tabular { get; } = new DashboardPivotTableRowsLayout("TABULAR");
        public static DashboardPivotTableRowsLayout Hierarchy { get; } = new DashboardPivotTableRowsLayout("HIERARCHY");

        public static bool operator ==(DashboardPivotTableRowsLayout left, DashboardPivotTableRowsLayout right) => left.Equals(right);
        public static bool operator !=(DashboardPivotTableRowsLayout left, DashboardPivotTableRowsLayout right) => !left.Equals(right);

        public static explicit operator string(DashboardPivotTableRowsLayout value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardPivotTableRowsLayout other && Equals(other);
        public bool Equals(DashboardPivotTableRowsLayout other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardPivotTableSubtotalLevel : IEquatable<DashboardPivotTableSubtotalLevel>
    {
        private readonly string _value;

        private DashboardPivotTableSubtotalLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardPivotTableSubtotalLevel All { get; } = new DashboardPivotTableSubtotalLevel("ALL");
        public static DashboardPivotTableSubtotalLevel Custom { get; } = new DashboardPivotTableSubtotalLevel("CUSTOM");
        public static DashboardPivotTableSubtotalLevel Last { get; } = new DashboardPivotTableSubtotalLevel("LAST");

        public static bool operator ==(DashboardPivotTableSubtotalLevel left, DashboardPivotTableSubtotalLevel right) => left.Equals(right);
        public static bool operator !=(DashboardPivotTableSubtotalLevel left, DashboardPivotTableSubtotalLevel right) => !left.Equals(right);

        public static explicit operator string(DashboardPivotTableSubtotalLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardPivotTableSubtotalLevel other && Equals(other);
        public bool Equals(DashboardPivotTableSubtotalLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardPrimaryValueDisplayType : IEquatable<DashboardPrimaryValueDisplayType>
    {
        private readonly string _value;

        private DashboardPrimaryValueDisplayType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardPrimaryValueDisplayType Hidden { get; } = new DashboardPrimaryValueDisplayType("HIDDEN");
        public static DashboardPrimaryValueDisplayType Comparison { get; } = new DashboardPrimaryValueDisplayType("COMPARISON");
        public static DashboardPrimaryValueDisplayType Actual { get; } = new DashboardPrimaryValueDisplayType("ACTUAL");

        public static bool operator ==(DashboardPrimaryValueDisplayType left, DashboardPrimaryValueDisplayType right) => left.Equals(right);
        public static bool operator !=(DashboardPrimaryValueDisplayType left, DashboardPrimaryValueDisplayType right) => !left.Equals(right);

        public static explicit operator string(DashboardPrimaryValueDisplayType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardPrimaryValueDisplayType other && Equals(other);
        public bool Equals(DashboardPrimaryValueDisplayType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardRadarChartAxesRangeScale : IEquatable<DashboardRadarChartAxesRangeScale>
    {
        private readonly string _value;

        private DashboardRadarChartAxesRangeScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardRadarChartAxesRangeScale Auto { get; } = new DashboardRadarChartAxesRangeScale("AUTO");
        public static DashboardRadarChartAxesRangeScale Independent { get; } = new DashboardRadarChartAxesRangeScale("INDEPENDENT");
        public static DashboardRadarChartAxesRangeScale Shared { get; } = new DashboardRadarChartAxesRangeScale("SHARED");

        public static bool operator ==(DashboardRadarChartAxesRangeScale left, DashboardRadarChartAxesRangeScale right) => left.Equals(right);
        public static bool operator !=(DashboardRadarChartAxesRangeScale left, DashboardRadarChartAxesRangeScale right) => !left.Equals(right);

        public static explicit operator string(DashboardRadarChartAxesRangeScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardRadarChartAxesRangeScale other && Equals(other);
        public bool Equals(DashboardRadarChartAxesRangeScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardRadarChartShape : IEquatable<DashboardRadarChartShape>
    {
        private readonly string _value;

        private DashboardRadarChartShape(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardRadarChartShape Circle { get; } = new DashboardRadarChartShape("CIRCLE");
        public static DashboardRadarChartShape Polygon { get; } = new DashboardRadarChartShape("POLYGON");

        public static bool operator ==(DashboardRadarChartShape left, DashboardRadarChartShape right) => left.Equals(right);
        public static bool operator !=(DashboardRadarChartShape left, DashboardRadarChartShape right) => !left.Equals(right);

        public static explicit operator string(DashboardRadarChartShape value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardRadarChartShape other && Equals(other);
        public bool Equals(DashboardRadarChartShape other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardReferenceLineLabelHorizontalPosition : IEquatable<DashboardReferenceLineLabelHorizontalPosition>
    {
        private readonly string _value;

        private DashboardReferenceLineLabelHorizontalPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardReferenceLineLabelHorizontalPosition Left { get; } = new DashboardReferenceLineLabelHorizontalPosition("LEFT");
        public static DashboardReferenceLineLabelHorizontalPosition Center { get; } = new DashboardReferenceLineLabelHorizontalPosition("CENTER");
        public static DashboardReferenceLineLabelHorizontalPosition Right { get; } = new DashboardReferenceLineLabelHorizontalPosition("RIGHT");

        public static bool operator ==(DashboardReferenceLineLabelHorizontalPosition left, DashboardReferenceLineLabelHorizontalPosition right) => left.Equals(right);
        public static bool operator !=(DashboardReferenceLineLabelHorizontalPosition left, DashboardReferenceLineLabelHorizontalPosition right) => !left.Equals(right);

        public static explicit operator string(DashboardReferenceLineLabelHorizontalPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardReferenceLineLabelHorizontalPosition other && Equals(other);
        public bool Equals(DashboardReferenceLineLabelHorizontalPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardReferenceLineLabelVerticalPosition : IEquatable<DashboardReferenceLineLabelVerticalPosition>
    {
        private readonly string _value;

        private DashboardReferenceLineLabelVerticalPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardReferenceLineLabelVerticalPosition Above { get; } = new DashboardReferenceLineLabelVerticalPosition("ABOVE");
        public static DashboardReferenceLineLabelVerticalPosition Below { get; } = new DashboardReferenceLineLabelVerticalPosition("BELOW");

        public static bool operator ==(DashboardReferenceLineLabelVerticalPosition left, DashboardReferenceLineLabelVerticalPosition right) => left.Equals(right);
        public static bool operator !=(DashboardReferenceLineLabelVerticalPosition left, DashboardReferenceLineLabelVerticalPosition right) => !left.Equals(right);

        public static explicit operator string(DashboardReferenceLineLabelVerticalPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardReferenceLineLabelVerticalPosition other && Equals(other);
        public bool Equals(DashboardReferenceLineLabelVerticalPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardReferenceLinePatternType : IEquatable<DashboardReferenceLinePatternType>
    {
        private readonly string _value;

        private DashboardReferenceLinePatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardReferenceLinePatternType Solid { get; } = new DashboardReferenceLinePatternType("SOLID");
        public static DashboardReferenceLinePatternType Dashed { get; } = new DashboardReferenceLinePatternType("DASHED");
        public static DashboardReferenceLinePatternType Dotted { get; } = new DashboardReferenceLinePatternType("DOTTED");

        public static bool operator ==(DashboardReferenceLinePatternType left, DashboardReferenceLinePatternType right) => left.Equals(right);
        public static bool operator !=(DashboardReferenceLinePatternType left, DashboardReferenceLinePatternType right) => !left.Equals(right);

        public static explicit operator string(DashboardReferenceLinePatternType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardReferenceLinePatternType other && Equals(other);
        public bool Equals(DashboardReferenceLinePatternType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardReferenceLineValueLabelRelativePosition : IEquatable<DashboardReferenceLineValueLabelRelativePosition>
    {
        private readonly string _value;

        private DashboardReferenceLineValueLabelRelativePosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardReferenceLineValueLabelRelativePosition BeforeCustomLabel { get; } = new DashboardReferenceLineValueLabelRelativePosition("BEFORE_CUSTOM_LABEL");
        public static DashboardReferenceLineValueLabelRelativePosition AfterCustomLabel { get; } = new DashboardReferenceLineValueLabelRelativePosition("AFTER_CUSTOM_LABEL");

        public static bool operator ==(DashboardReferenceLineValueLabelRelativePosition left, DashboardReferenceLineValueLabelRelativePosition right) => left.Equals(right);
        public static bool operator !=(DashboardReferenceLineValueLabelRelativePosition left, DashboardReferenceLineValueLabelRelativePosition right) => !left.Equals(right);

        public static explicit operator string(DashboardReferenceLineValueLabelRelativePosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardReferenceLineValueLabelRelativePosition other && Equals(other);
        public bool Equals(DashboardReferenceLineValueLabelRelativePosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardRelativeDateType : IEquatable<DashboardRelativeDateType>
    {
        private readonly string _value;

        private DashboardRelativeDateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardRelativeDateType Previous { get; } = new DashboardRelativeDateType("PREVIOUS");
        public static DashboardRelativeDateType This { get; } = new DashboardRelativeDateType("THIS");
        public static DashboardRelativeDateType Last { get; } = new DashboardRelativeDateType("LAST");
        public static DashboardRelativeDateType Now { get; } = new DashboardRelativeDateType("NOW");
        public static DashboardRelativeDateType Next { get; } = new DashboardRelativeDateType("NEXT");

        public static bool operator ==(DashboardRelativeDateType left, DashboardRelativeDateType right) => left.Equals(right);
        public static bool operator !=(DashboardRelativeDateType left, DashboardRelativeDateType right) => !left.Equals(right);

        public static explicit operator string(DashboardRelativeDateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardRelativeDateType other && Equals(other);
        public bool Equals(DashboardRelativeDateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardRelativeFontSize : IEquatable<DashboardRelativeFontSize>
    {
        private readonly string _value;

        private DashboardRelativeFontSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardRelativeFontSize ExtraSmall { get; } = new DashboardRelativeFontSize("EXTRA_SMALL");
        public static DashboardRelativeFontSize Small { get; } = new DashboardRelativeFontSize("SMALL");
        public static DashboardRelativeFontSize Medium { get; } = new DashboardRelativeFontSize("MEDIUM");
        public static DashboardRelativeFontSize Large { get; } = new DashboardRelativeFontSize("LARGE");
        public static DashboardRelativeFontSize ExtraLarge { get; } = new DashboardRelativeFontSize("EXTRA_LARGE");

        public static bool operator ==(DashboardRelativeFontSize left, DashboardRelativeFontSize right) => left.Equals(right);
        public static bool operator !=(DashboardRelativeFontSize left, DashboardRelativeFontSize right) => !left.Equals(right);

        public static explicit operator string(DashboardRelativeFontSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardRelativeFontSize other && Equals(other);
        public bool Equals(DashboardRelativeFontSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardResizeOption : IEquatable<DashboardResizeOption>
    {
        private readonly string _value;

        private DashboardResizeOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardResizeOption Fixed { get; } = new DashboardResizeOption("FIXED");
        public static DashboardResizeOption Responsive { get; } = new DashboardResizeOption("RESPONSIVE");

        public static bool operator ==(DashboardResizeOption left, DashboardResizeOption right) => left.Equals(right);
        public static bool operator !=(DashboardResizeOption left, DashboardResizeOption right) => !left.Equals(right);

        public static explicit operator string(DashboardResizeOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardResizeOption other && Equals(other);
        public bool Equals(DashboardResizeOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardResourceStatus : IEquatable<DashboardResourceStatus>
    {
        private readonly string _value;

        private DashboardResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardResourceStatus CreationInProgress { get; } = new DashboardResourceStatus("CREATION_IN_PROGRESS");
        public static DashboardResourceStatus CreationSuccessful { get; } = new DashboardResourceStatus("CREATION_SUCCESSFUL");
        public static DashboardResourceStatus CreationFailed { get; } = new DashboardResourceStatus("CREATION_FAILED");
        public static DashboardResourceStatus UpdateInProgress { get; } = new DashboardResourceStatus("UPDATE_IN_PROGRESS");
        public static DashboardResourceStatus UpdateSuccessful { get; } = new DashboardResourceStatus("UPDATE_SUCCESSFUL");
        public static DashboardResourceStatus UpdateFailed { get; } = new DashboardResourceStatus("UPDATE_FAILED");
        public static DashboardResourceStatus Deleted { get; } = new DashboardResourceStatus("DELETED");

        public static bool operator ==(DashboardResourceStatus left, DashboardResourceStatus right) => left.Equals(right);
        public static bool operator !=(DashboardResourceStatus left, DashboardResourceStatus right) => !left.Equals(right);

        public static explicit operator string(DashboardResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardResourceStatus other && Equals(other);
        public bool Equals(DashboardResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSectionPageBreakStatus : IEquatable<DashboardSectionPageBreakStatus>
    {
        private readonly string _value;

        private DashboardSectionPageBreakStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSectionPageBreakStatus Enabled { get; } = new DashboardSectionPageBreakStatus("ENABLED");
        public static DashboardSectionPageBreakStatus Disabled { get; } = new DashboardSectionPageBreakStatus("DISABLED");

        public static bool operator ==(DashboardSectionPageBreakStatus left, DashboardSectionPageBreakStatus right) => left.Equals(right);
        public static bool operator !=(DashboardSectionPageBreakStatus left, DashboardSectionPageBreakStatus right) => !left.Equals(right);

        public static explicit operator string(DashboardSectionPageBreakStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSectionPageBreakStatus other && Equals(other);
        public bool Equals(DashboardSectionPageBreakStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSelectAllValueOptions : IEquatable<DashboardSelectAllValueOptions>
    {
        private readonly string _value;

        private DashboardSelectAllValueOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSelectAllValueOptions AllValues { get; } = new DashboardSelectAllValueOptions("ALL_VALUES");

        public static bool operator ==(DashboardSelectAllValueOptions left, DashboardSelectAllValueOptions right) => left.Equals(right);
        public static bool operator !=(DashboardSelectAllValueOptions left, DashboardSelectAllValueOptions right) => !left.Equals(right);

        public static explicit operator string(DashboardSelectAllValueOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSelectAllValueOptions other && Equals(other);
        public bool Equals(DashboardSelectAllValueOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSelectedFieldOptions : IEquatable<DashboardSelectedFieldOptions>
    {
        private readonly string _value;

        private DashboardSelectedFieldOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSelectedFieldOptions AllFields { get; } = new DashboardSelectedFieldOptions("ALL_FIELDS");

        public static bool operator ==(DashboardSelectedFieldOptions left, DashboardSelectedFieldOptions right) => left.Equals(right);
        public static bool operator !=(DashboardSelectedFieldOptions left, DashboardSelectedFieldOptions right) => !left.Equals(right);

        public static explicit operator string(DashboardSelectedFieldOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSelectedFieldOptions other && Equals(other);
        public bool Equals(DashboardSelectedFieldOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSelectedTooltipType : IEquatable<DashboardSelectedTooltipType>
    {
        private readonly string _value;

        private DashboardSelectedTooltipType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSelectedTooltipType Basic { get; } = new DashboardSelectedTooltipType("BASIC");
        public static DashboardSelectedTooltipType Detailed { get; } = new DashboardSelectedTooltipType("DETAILED");

        public static bool operator ==(DashboardSelectedTooltipType left, DashboardSelectedTooltipType right) => left.Equals(right);
        public static bool operator !=(DashboardSelectedTooltipType left, DashboardSelectedTooltipType right) => !left.Equals(right);

        public static explicit operator string(DashboardSelectedTooltipType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSelectedTooltipType other && Equals(other);
        public bool Equals(DashboardSelectedTooltipType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSheetContentType : IEquatable<DashboardSheetContentType>
    {
        private readonly string _value;

        private DashboardSheetContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSheetContentType Paginated { get; } = new DashboardSheetContentType("PAGINATED");
        public static DashboardSheetContentType Interactive { get; } = new DashboardSheetContentType("INTERACTIVE");

        public static bool operator ==(DashboardSheetContentType left, DashboardSheetContentType right) => left.Equals(right);
        public static bool operator !=(DashboardSheetContentType left, DashboardSheetContentType right) => !left.Equals(right);

        public static explicit operator string(DashboardSheetContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSheetContentType other && Equals(other);
        public bool Equals(DashboardSheetContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSheetControlDateTimePickerType : IEquatable<DashboardSheetControlDateTimePickerType>
    {
        private readonly string _value;

        private DashboardSheetControlDateTimePickerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSheetControlDateTimePickerType SingleValued { get; } = new DashboardSheetControlDateTimePickerType("SINGLE_VALUED");
        public static DashboardSheetControlDateTimePickerType DateRange { get; } = new DashboardSheetControlDateTimePickerType("DATE_RANGE");

        public static bool operator ==(DashboardSheetControlDateTimePickerType left, DashboardSheetControlDateTimePickerType right) => left.Equals(right);
        public static bool operator !=(DashboardSheetControlDateTimePickerType left, DashboardSheetControlDateTimePickerType right) => !left.Equals(right);

        public static explicit operator string(DashboardSheetControlDateTimePickerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSheetControlDateTimePickerType other && Equals(other);
        public bool Equals(DashboardSheetControlDateTimePickerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSheetControlListType : IEquatable<DashboardSheetControlListType>
    {
        private readonly string _value;

        private DashboardSheetControlListType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSheetControlListType MultiSelect { get; } = new DashboardSheetControlListType("MULTI_SELECT");
        public static DashboardSheetControlListType SingleSelect { get; } = new DashboardSheetControlListType("SINGLE_SELECT");

        public static bool operator ==(DashboardSheetControlListType left, DashboardSheetControlListType right) => left.Equals(right);
        public static bool operator !=(DashboardSheetControlListType left, DashboardSheetControlListType right) => !left.Equals(right);

        public static explicit operator string(DashboardSheetControlListType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSheetControlListType other && Equals(other);
        public bool Equals(DashboardSheetControlListType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSheetControlSliderType : IEquatable<DashboardSheetControlSliderType>
    {
        private readonly string _value;

        private DashboardSheetControlSliderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSheetControlSliderType SinglePoint { get; } = new DashboardSheetControlSliderType("SINGLE_POINT");
        public static DashboardSheetControlSliderType Range { get; } = new DashboardSheetControlSliderType("RANGE");

        public static bool operator ==(DashboardSheetControlSliderType left, DashboardSheetControlSliderType right) => left.Equals(right);
        public static bool operator !=(DashboardSheetControlSliderType left, DashboardSheetControlSliderType right) => !left.Equals(right);

        public static explicit operator string(DashboardSheetControlSliderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSheetControlSliderType other && Equals(other);
        public bool Equals(DashboardSheetControlSliderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSimpleAttributeAggregationFunction : IEquatable<DashboardSimpleAttributeAggregationFunction>
    {
        private readonly string _value;

        private DashboardSimpleAttributeAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSimpleAttributeAggregationFunction UniqueValue { get; } = new DashboardSimpleAttributeAggregationFunction("UNIQUE_VALUE");

        public static bool operator ==(DashboardSimpleAttributeAggregationFunction left, DashboardSimpleAttributeAggregationFunction right) => left.Equals(right);
        public static bool operator !=(DashboardSimpleAttributeAggregationFunction left, DashboardSimpleAttributeAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(DashboardSimpleAttributeAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSimpleAttributeAggregationFunction other && Equals(other);
        public bool Equals(DashboardSimpleAttributeAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSimpleNumericalAggregationFunction : IEquatable<DashboardSimpleNumericalAggregationFunction>
    {
        private readonly string _value;

        private DashboardSimpleNumericalAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSimpleNumericalAggregationFunction Sum { get; } = new DashboardSimpleNumericalAggregationFunction("SUM");
        public static DashboardSimpleNumericalAggregationFunction Average { get; } = new DashboardSimpleNumericalAggregationFunction("AVERAGE");
        public static DashboardSimpleNumericalAggregationFunction Min { get; } = new DashboardSimpleNumericalAggregationFunction("MIN");
        public static DashboardSimpleNumericalAggregationFunction Max { get; } = new DashboardSimpleNumericalAggregationFunction("MAX");
        public static DashboardSimpleNumericalAggregationFunction Count { get; } = new DashboardSimpleNumericalAggregationFunction("COUNT");
        public static DashboardSimpleNumericalAggregationFunction DistinctCount { get; } = new DashboardSimpleNumericalAggregationFunction("DISTINCT_COUNT");
        public static DashboardSimpleNumericalAggregationFunction Var { get; } = new DashboardSimpleNumericalAggregationFunction("VAR");
        public static DashboardSimpleNumericalAggregationFunction Varp { get; } = new DashboardSimpleNumericalAggregationFunction("VARP");
        public static DashboardSimpleNumericalAggregationFunction Stdev { get; } = new DashboardSimpleNumericalAggregationFunction("STDEV");
        public static DashboardSimpleNumericalAggregationFunction Stdevp { get; } = new DashboardSimpleNumericalAggregationFunction("STDEVP");
        public static DashboardSimpleNumericalAggregationFunction Median { get; } = new DashboardSimpleNumericalAggregationFunction("MEDIAN");

        public static bool operator ==(DashboardSimpleNumericalAggregationFunction left, DashboardSimpleNumericalAggregationFunction right) => left.Equals(right);
        public static bool operator !=(DashboardSimpleNumericalAggregationFunction left, DashboardSimpleNumericalAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(DashboardSimpleNumericalAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSimpleNumericalAggregationFunction other && Equals(other);
        public bool Equals(DashboardSimpleNumericalAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSmallMultiplesAxisPlacement : IEquatable<DashboardSmallMultiplesAxisPlacement>
    {
        private readonly string _value;

        private DashboardSmallMultiplesAxisPlacement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSmallMultiplesAxisPlacement Outside { get; } = new DashboardSmallMultiplesAxisPlacement("OUTSIDE");
        public static DashboardSmallMultiplesAxisPlacement Inside { get; } = new DashboardSmallMultiplesAxisPlacement("INSIDE");

        public static bool operator ==(DashboardSmallMultiplesAxisPlacement left, DashboardSmallMultiplesAxisPlacement right) => left.Equals(right);
        public static bool operator !=(DashboardSmallMultiplesAxisPlacement left, DashboardSmallMultiplesAxisPlacement right) => !left.Equals(right);

        public static explicit operator string(DashboardSmallMultiplesAxisPlacement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSmallMultiplesAxisPlacement other && Equals(other);
        public bool Equals(DashboardSmallMultiplesAxisPlacement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSmallMultiplesAxisScale : IEquatable<DashboardSmallMultiplesAxisScale>
    {
        private readonly string _value;

        private DashboardSmallMultiplesAxisScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSmallMultiplesAxisScale Shared { get; } = new DashboardSmallMultiplesAxisScale("SHARED");
        public static DashboardSmallMultiplesAxisScale Independent { get; } = new DashboardSmallMultiplesAxisScale("INDEPENDENT");

        public static bool operator ==(DashboardSmallMultiplesAxisScale left, DashboardSmallMultiplesAxisScale right) => left.Equals(right);
        public static bool operator !=(DashboardSmallMultiplesAxisScale left, DashboardSmallMultiplesAxisScale right) => !left.Equals(right);

        public static explicit operator string(DashboardSmallMultiplesAxisScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSmallMultiplesAxisScale other && Equals(other);
        public bool Equals(DashboardSmallMultiplesAxisScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSortDirection : IEquatable<DashboardSortDirection>
    {
        private readonly string _value;

        private DashboardSortDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSortDirection Asc { get; } = new DashboardSortDirection("ASC");
        public static DashboardSortDirection Desc { get; } = new DashboardSortDirection("DESC");

        public static bool operator ==(DashboardSortDirection left, DashboardSortDirection right) => left.Equals(right);
        public static bool operator !=(DashboardSortDirection left, DashboardSortDirection right) => !left.Equals(right);

        public static explicit operator string(DashboardSortDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSortDirection other && Equals(other);
        public bool Equals(DashboardSortDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardSpecialValue : IEquatable<DashboardSpecialValue>
    {
        private readonly string _value;

        private DashboardSpecialValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardSpecialValue Empty { get; } = new DashboardSpecialValue("EMPTY");
        public static DashboardSpecialValue Null { get; } = new DashboardSpecialValue("NULL");
        public static DashboardSpecialValue Other { get; } = new DashboardSpecialValue("OTHER");

        public static bool operator ==(DashboardSpecialValue left, DashboardSpecialValue right) => left.Equals(right);
        public static bool operator !=(DashboardSpecialValue left, DashboardSpecialValue right) => !left.Equals(right);

        public static explicit operator string(DashboardSpecialValue value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardSpecialValue other && Equals(other);
        public bool Equals(DashboardSpecialValue other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardStyledCellType : IEquatable<DashboardStyledCellType>
    {
        private readonly string _value;

        private DashboardStyledCellType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardStyledCellType Total { get; } = new DashboardStyledCellType("TOTAL");
        public static DashboardStyledCellType MetricHeader { get; } = new DashboardStyledCellType("METRIC_HEADER");
        public static DashboardStyledCellType Value { get; } = new DashboardStyledCellType("VALUE");

        public static bool operator ==(DashboardStyledCellType left, DashboardStyledCellType right) => left.Equals(right);
        public static bool operator !=(DashboardStyledCellType left, DashboardStyledCellType right) => !left.Equals(right);

        public static explicit operator string(DashboardStyledCellType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardStyledCellType other && Equals(other);
        public bool Equals(DashboardStyledCellType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTableBorderStyle : IEquatable<DashboardTableBorderStyle>
    {
        private readonly string _value;

        private DashboardTableBorderStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTableBorderStyle None { get; } = new DashboardTableBorderStyle("NONE");
        public static DashboardTableBorderStyle Solid { get; } = new DashboardTableBorderStyle("SOLID");

        public static bool operator ==(DashboardTableBorderStyle left, DashboardTableBorderStyle right) => left.Equals(right);
        public static bool operator !=(DashboardTableBorderStyle left, DashboardTableBorderStyle right) => !left.Equals(right);

        public static explicit operator string(DashboardTableBorderStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTableBorderStyle other && Equals(other);
        public bool Equals(DashboardTableBorderStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTableCellImageScalingConfiguration : IEquatable<DashboardTableCellImageScalingConfiguration>
    {
        private readonly string _value;

        private DashboardTableCellImageScalingConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTableCellImageScalingConfiguration FitToCellHeight { get; } = new DashboardTableCellImageScalingConfiguration("FIT_TO_CELL_HEIGHT");
        public static DashboardTableCellImageScalingConfiguration FitToCellWidth { get; } = new DashboardTableCellImageScalingConfiguration("FIT_TO_CELL_WIDTH");
        public static DashboardTableCellImageScalingConfiguration DoNotScale { get; } = new DashboardTableCellImageScalingConfiguration("DO_NOT_SCALE");

        public static bool operator ==(DashboardTableCellImageScalingConfiguration left, DashboardTableCellImageScalingConfiguration right) => left.Equals(right);
        public static bool operator !=(DashboardTableCellImageScalingConfiguration left, DashboardTableCellImageScalingConfiguration right) => !left.Equals(right);

        public static explicit operator string(DashboardTableCellImageScalingConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTableCellImageScalingConfiguration other && Equals(other);
        public bool Equals(DashboardTableCellImageScalingConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTableFieldIconSetType : IEquatable<DashboardTableFieldIconSetType>
    {
        private readonly string _value;

        private DashboardTableFieldIconSetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTableFieldIconSetType Link { get; } = new DashboardTableFieldIconSetType("LINK");

        public static bool operator ==(DashboardTableFieldIconSetType left, DashboardTableFieldIconSetType right) => left.Equals(right);
        public static bool operator !=(DashboardTableFieldIconSetType left, DashboardTableFieldIconSetType right) => !left.Equals(right);

        public static explicit operator string(DashboardTableFieldIconSetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTableFieldIconSetType other && Equals(other);
        public bool Equals(DashboardTableFieldIconSetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTableOrientation : IEquatable<DashboardTableOrientation>
    {
        private readonly string _value;

        private DashboardTableOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTableOrientation Vertical { get; } = new DashboardTableOrientation("VERTICAL");
        public static DashboardTableOrientation Horizontal { get; } = new DashboardTableOrientation("HORIZONTAL");

        public static bool operator ==(DashboardTableOrientation left, DashboardTableOrientation right) => left.Equals(right);
        public static bool operator !=(DashboardTableOrientation left, DashboardTableOrientation right) => !left.Equals(right);

        public static explicit operator string(DashboardTableOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTableOrientation other && Equals(other);
        public bool Equals(DashboardTableOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTableTotalsPlacement : IEquatable<DashboardTableTotalsPlacement>
    {
        private readonly string _value;

        private DashboardTableTotalsPlacement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTableTotalsPlacement Start { get; } = new DashboardTableTotalsPlacement("START");
        public static DashboardTableTotalsPlacement End { get; } = new DashboardTableTotalsPlacement("END");

        public static bool operator ==(DashboardTableTotalsPlacement left, DashboardTableTotalsPlacement right) => left.Equals(right);
        public static bool operator !=(DashboardTableTotalsPlacement left, DashboardTableTotalsPlacement right) => !left.Equals(right);

        public static explicit operator string(DashboardTableTotalsPlacement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTableTotalsPlacement other && Equals(other);
        public bool Equals(DashboardTableTotalsPlacement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTableTotalsScrollStatus : IEquatable<DashboardTableTotalsScrollStatus>
    {
        private readonly string _value;

        private DashboardTableTotalsScrollStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTableTotalsScrollStatus Pinned { get; } = new DashboardTableTotalsScrollStatus("PINNED");
        public static DashboardTableTotalsScrollStatus Scrolled { get; } = new DashboardTableTotalsScrollStatus("SCROLLED");

        public static bool operator ==(DashboardTableTotalsScrollStatus left, DashboardTableTotalsScrollStatus right) => left.Equals(right);
        public static bool operator !=(DashboardTableTotalsScrollStatus left, DashboardTableTotalsScrollStatus right) => !left.Equals(right);

        public static explicit operator string(DashboardTableTotalsScrollStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTableTotalsScrollStatus other && Equals(other);
        public bool Equals(DashboardTableTotalsScrollStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTargetVisualOptions : IEquatable<DashboardTargetVisualOptions>
    {
        private readonly string _value;

        private DashboardTargetVisualOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTargetVisualOptions AllVisuals { get; } = new DashboardTargetVisualOptions("ALL_VISUALS");

        public static bool operator ==(DashboardTargetVisualOptions left, DashboardTargetVisualOptions right) => left.Equals(right);
        public static bool operator !=(DashboardTargetVisualOptions left, DashboardTargetVisualOptions right) => !left.Equals(right);

        public static explicit operator string(DashboardTargetVisualOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTargetVisualOptions other && Equals(other);
        public bool Equals(DashboardTargetVisualOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTextWrap : IEquatable<DashboardTextWrap>
    {
        private readonly string _value;

        private DashboardTextWrap(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTextWrap None { get; } = new DashboardTextWrap("NONE");
        public static DashboardTextWrap Wrap { get; } = new DashboardTextWrap("WRAP");

        public static bool operator ==(DashboardTextWrap left, DashboardTextWrap right) => left.Equals(right);
        public static bool operator !=(DashboardTextWrap left, DashboardTextWrap right) => !left.Equals(right);

        public static explicit operator string(DashboardTextWrap value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTextWrap other && Equals(other);
        public bool Equals(DashboardTextWrap other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTimeGranularity : IEquatable<DashboardTimeGranularity>
    {
        private readonly string _value;

        private DashboardTimeGranularity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTimeGranularity Year { get; } = new DashboardTimeGranularity("YEAR");
        public static DashboardTimeGranularity Quarter { get; } = new DashboardTimeGranularity("QUARTER");
        public static DashboardTimeGranularity Month { get; } = new DashboardTimeGranularity("MONTH");
        public static DashboardTimeGranularity Week { get; } = new DashboardTimeGranularity("WEEK");
        public static DashboardTimeGranularity Day { get; } = new DashboardTimeGranularity("DAY");
        public static DashboardTimeGranularity Hour { get; } = new DashboardTimeGranularity("HOUR");
        public static DashboardTimeGranularity Minute { get; } = new DashboardTimeGranularity("MINUTE");
        public static DashboardTimeGranularity Second { get; } = new DashboardTimeGranularity("SECOND");
        public static DashboardTimeGranularity Millisecond { get; } = new DashboardTimeGranularity("MILLISECOND");

        public static bool operator ==(DashboardTimeGranularity left, DashboardTimeGranularity right) => left.Equals(right);
        public static bool operator !=(DashboardTimeGranularity left, DashboardTimeGranularity right) => !left.Equals(right);

        public static explicit operator string(DashboardTimeGranularity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTimeGranularity other && Equals(other);
        public bool Equals(DashboardTimeGranularity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTooltipTitleType : IEquatable<DashboardTooltipTitleType>
    {
        private readonly string _value;

        private DashboardTooltipTitleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTooltipTitleType None { get; } = new DashboardTooltipTitleType("NONE");
        public static DashboardTooltipTitleType PrimaryValue { get; } = new DashboardTooltipTitleType("PRIMARY_VALUE");

        public static bool operator ==(DashboardTooltipTitleType left, DashboardTooltipTitleType right) => left.Equals(right);
        public static bool operator !=(DashboardTooltipTitleType left, DashboardTooltipTitleType right) => !left.Equals(right);

        public static explicit operator string(DashboardTooltipTitleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTooltipTitleType other && Equals(other);
        public bool Equals(DashboardTooltipTitleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTopBottomComputationType : IEquatable<DashboardTopBottomComputationType>
    {
        private readonly string _value;

        private DashboardTopBottomComputationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTopBottomComputationType Top { get; } = new DashboardTopBottomComputationType("TOP");
        public static DashboardTopBottomComputationType Bottom { get; } = new DashboardTopBottomComputationType("BOTTOM");

        public static bool operator ==(DashboardTopBottomComputationType left, DashboardTopBottomComputationType right) => left.Equals(right);
        public static bool operator !=(DashboardTopBottomComputationType left, DashboardTopBottomComputationType right) => !left.Equals(right);

        public static explicit operator string(DashboardTopBottomComputationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTopBottomComputationType other && Equals(other);
        public bool Equals(DashboardTopBottomComputationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardTopBottomSortOrder : IEquatable<DashboardTopBottomSortOrder>
    {
        private readonly string _value;

        private DashboardTopBottomSortOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardTopBottomSortOrder PercentDifference { get; } = new DashboardTopBottomSortOrder("PERCENT_DIFFERENCE");
        public static DashboardTopBottomSortOrder AbsoluteDifference { get; } = new DashboardTopBottomSortOrder("ABSOLUTE_DIFFERENCE");

        public static bool operator ==(DashboardTopBottomSortOrder left, DashboardTopBottomSortOrder right) => left.Equals(right);
        public static bool operator !=(DashboardTopBottomSortOrder left, DashboardTopBottomSortOrder right) => !left.Equals(right);

        public static explicit operator string(DashboardTopBottomSortOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardTopBottomSortOrder other && Equals(other);
        public bool Equals(DashboardTopBottomSortOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardUiState : IEquatable<DashboardUiState>
    {
        private readonly string _value;

        private DashboardUiState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardUiState Expanded { get; } = new DashboardUiState("EXPANDED");
        public static DashboardUiState Collapsed { get; } = new DashboardUiState("COLLAPSED");

        public static bool operator ==(DashboardUiState left, DashboardUiState right) => left.Equals(right);
        public static bool operator !=(DashboardUiState left, DashboardUiState right) => !left.Equals(right);

        public static explicit operator string(DashboardUiState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardUiState other && Equals(other);
        public bool Equals(DashboardUiState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardUrlTargetConfiguration : IEquatable<DashboardUrlTargetConfiguration>
    {
        private readonly string _value;

        private DashboardUrlTargetConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardUrlTargetConfiguration NewTab { get; } = new DashboardUrlTargetConfiguration("NEW_TAB");
        public static DashboardUrlTargetConfiguration NewWindow { get; } = new DashboardUrlTargetConfiguration("NEW_WINDOW");
        public static DashboardUrlTargetConfiguration SameTab { get; } = new DashboardUrlTargetConfiguration("SAME_TAB");

        public static bool operator ==(DashboardUrlTargetConfiguration left, DashboardUrlTargetConfiguration right) => left.Equals(right);
        public static bool operator !=(DashboardUrlTargetConfiguration left, DashboardUrlTargetConfiguration right) => !left.Equals(right);

        public static explicit operator string(DashboardUrlTargetConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardUrlTargetConfiguration other && Equals(other);
        public bool Equals(DashboardUrlTargetConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardValueWhenUnsetOption : IEquatable<DashboardValueWhenUnsetOption>
    {
        private readonly string _value;

        private DashboardValueWhenUnsetOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardValueWhenUnsetOption RecommendedValue { get; } = new DashboardValueWhenUnsetOption("RECOMMENDED_VALUE");
        public static DashboardValueWhenUnsetOption Null { get; } = new DashboardValueWhenUnsetOption("NULL");

        public static bool operator ==(DashboardValueWhenUnsetOption left, DashboardValueWhenUnsetOption right) => left.Equals(right);
        public static bool operator !=(DashboardValueWhenUnsetOption left, DashboardValueWhenUnsetOption right) => !left.Equals(right);

        public static explicit operator string(DashboardValueWhenUnsetOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardValueWhenUnsetOption other && Equals(other);
        public bool Equals(DashboardValueWhenUnsetOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardVerticalTextAlignment : IEquatable<DashboardVerticalTextAlignment>
    {
        private readonly string _value;

        private DashboardVerticalTextAlignment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardVerticalTextAlignment Top { get; } = new DashboardVerticalTextAlignment("TOP");
        public static DashboardVerticalTextAlignment Middle { get; } = new DashboardVerticalTextAlignment("MIDDLE");
        public static DashboardVerticalTextAlignment Bottom { get; } = new DashboardVerticalTextAlignment("BOTTOM");
        public static DashboardVerticalTextAlignment Auto { get; } = new DashboardVerticalTextAlignment("AUTO");

        public static bool operator ==(DashboardVerticalTextAlignment left, DashboardVerticalTextAlignment right) => left.Equals(right);
        public static bool operator !=(DashboardVerticalTextAlignment left, DashboardVerticalTextAlignment right) => !left.Equals(right);

        public static explicit operator string(DashboardVerticalTextAlignment value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardVerticalTextAlignment other && Equals(other);
        public bool Equals(DashboardVerticalTextAlignment other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardVisibility : IEquatable<DashboardVisibility>
    {
        private readonly string _value;

        private DashboardVisibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardVisibility Hidden { get; } = new DashboardVisibility("HIDDEN");
        public static DashboardVisibility Visible { get; } = new DashboardVisibility("VISIBLE");

        public static bool operator ==(DashboardVisibility left, DashboardVisibility right) => left.Equals(right);
        public static bool operator !=(DashboardVisibility left, DashboardVisibility right) => !left.Equals(right);

        public static explicit operator string(DashboardVisibility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardVisibility other && Equals(other);
        public bool Equals(DashboardVisibility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardVisualCustomActionTrigger : IEquatable<DashboardVisualCustomActionTrigger>
    {
        private readonly string _value;

        private DashboardVisualCustomActionTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardVisualCustomActionTrigger DataPointClick { get; } = new DashboardVisualCustomActionTrigger("DATA_POINT_CLICK");
        public static DashboardVisualCustomActionTrigger DataPointMenu { get; } = new DashboardVisualCustomActionTrigger("DATA_POINT_MENU");

        public static bool operator ==(DashboardVisualCustomActionTrigger left, DashboardVisualCustomActionTrigger right) => left.Equals(right);
        public static bool operator !=(DashboardVisualCustomActionTrigger left, DashboardVisualCustomActionTrigger right) => !left.Equals(right);

        public static explicit operator string(DashboardVisualCustomActionTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardVisualCustomActionTrigger other && Equals(other);
        public bool Equals(DashboardVisualCustomActionTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardWidgetStatus : IEquatable<DashboardWidgetStatus>
    {
        private readonly string _value;

        private DashboardWidgetStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardWidgetStatus Enabled { get; } = new DashboardWidgetStatus("ENABLED");
        public static DashboardWidgetStatus Disabled { get; } = new DashboardWidgetStatus("DISABLED");

        public static bool operator ==(DashboardWidgetStatus left, DashboardWidgetStatus right) => left.Equals(right);
        public static bool operator !=(DashboardWidgetStatus left, DashboardWidgetStatus right) => !left.Equals(right);

        public static explicit operator string(DashboardWidgetStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardWidgetStatus other && Equals(other);
        public bool Equals(DashboardWidgetStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardWordCloudCloudLayout : IEquatable<DashboardWordCloudCloudLayout>
    {
        private readonly string _value;

        private DashboardWordCloudCloudLayout(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardWordCloudCloudLayout Fluid { get; } = new DashboardWordCloudCloudLayout("FLUID");
        public static DashboardWordCloudCloudLayout Normal { get; } = new DashboardWordCloudCloudLayout("NORMAL");

        public static bool operator ==(DashboardWordCloudCloudLayout left, DashboardWordCloudCloudLayout right) => left.Equals(right);
        public static bool operator !=(DashboardWordCloudCloudLayout left, DashboardWordCloudCloudLayout right) => !left.Equals(right);

        public static explicit operator string(DashboardWordCloudCloudLayout value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardWordCloudCloudLayout other && Equals(other);
        public bool Equals(DashboardWordCloudCloudLayout other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardWordCloudWordCasing : IEquatable<DashboardWordCloudWordCasing>
    {
        private readonly string _value;

        private DashboardWordCloudWordCasing(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardWordCloudWordCasing LowerCase { get; } = new DashboardWordCloudWordCasing("LOWER_CASE");
        public static DashboardWordCloudWordCasing ExistingCase { get; } = new DashboardWordCloudWordCasing("EXISTING_CASE");

        public static bool operator ==(DashboardWordCloudWordCasing left, DashboardWordCloudWordCasing right) => left.Equals(right);
        public static bool operator !=(DashboardWordCloudWordCasing left, DashboardWordCloudWordCasing right) => !left.Equals(right);

        public static explicit operator string(DashboardWordCloudWordCasing value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardWordCloudWordCasing other && Equals(other);
        public bool Equals(DashboardWordCloudWordCasing other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardWordCloudWordOrientation : IEquatable<DashboardWordCloudWordOrientation>
    {
        private readonly string _value;

        private DashboardWordCloudWordOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardWordCloudWordOrientation Horizontal { get; } = new DashboardWordCloudWordOrientation("HORIZONTAL");
        public static DashboardWordCloudWordOrientation HorizontalAndVertical { get; } = new DashboardWordCloudWordOrientation("HORIZONTAL_AND_VERTICAL");

        public static bool operator ==(DashboardWordCloudWordOrientation left, DashboardWordCloudWordOrientation right) => left.Equals(right);
        public static bool operator !=(DashboardWordCloudWordOrientation left, DashboardWordCloudWordOrientation right) => !left.Equals(right);

        public static explicit operator string(DashboardWordCloudWordOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardWordCloudWordOrientation other && Equals(other);
        public bool Equals(DashboardWordCloudWordOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardWordCloudWordPadding : IEquatable<DashboardWordCloudWordPadding>
    {
        private readonly string _value;

        private DashboardWordCloudWordPadding(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardWordCloudWordPadding None { get; } = new DashboardWordCloudWordPadding("NONE");
        public static DashboardWordCloudWordPadding Small { get; } = new DashboardWordCloudWordPadding("SMALL");
        public static DashboardWordCloudWordPadding Medium { get; } = new DashboardWordCloudWordPadding("MEDIUM");
        public static DashboardWordCloudWordPadding Large { get; } = new DashboardWordCloudWordPadding("LARGE");

        public static bool operator ==(DashboardWordCloudWordPadding left, DashboardWordCloudWordPadding right) => left.Equals(right);
        public static bool operator !=(DashboardWordCloudWordPadding left, DashboardWordCloudWordPadding right) => !left.Equals(right);

        public static explicit operator string(DashboardWordCloudWordPadding value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardWordCloudWordPadding other && Equals(other);
        public bool Equals(DashboardWordCloudWordPadding other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardWordCloudWordScaling : IEquatable<DashboardWordCloudWordScaling>
    {
        private readonly string _value;

        private DashboardWordCloudWordScaling(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardWordCloudWordScaling Emphasize { get; } = new DashboardWordCloudWordScaling("EMPHASIZE");
        public static DashboardWordCloudWordScaling Normal { get; } = new DashboardWordCloudWordScaling("NORMAL");

        public static bool operator ==(DashboardWordCloudWordScaling left, DashboardWordCloudWordScaling right) => left.Equals(right);
        public static bool operator !=(DashboardWordCloudWordScaling left, DashboardWordCloudWordScaling right) => !left.Equals(right);

        public static explicit operator string(DashboardWordCloudWordScaling value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardWordCloudWordScaling other && Equals(other);
        public bool Equals(DashboardWordCloudWordScaling other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetColumnDataType : IEquatable<DataSetColumnDataType>
    {
        private readonly string _value;

        private DataSetColumnDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetColumnDataType String { get; } = new DataSetColumnDataType("STRING");
        public static DataSetColumnDataType Integer { get; } = new DataSetColumnDataType("INTEGER");
        public static DataSetColumnDataType Decimal { get; } = new DataSetColumnDataType("DECIMAL");
        public static DataSetColumnDataType Datetime { get; } = new DataSetColumnDataType("DATETIME");

        public static bool operator ==(DataSetColumnDataType left, DataSetColumnDataType right) => left.Equals(right);
        public static bool operator !=(DataSetColumnDataType left, DataSetColumnDataType right) => !left.Equals(right);

        public static explicit operator string(DataSetColumnDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetColumnDataType other && Equals(other);
        public bool Equals(DataSetColumnDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// &lt;p&gt;Every parameter value could be either a single value or multi value which helps to validate before evaluation.&lt;/p&gt;
    /// </summary>
    [EnumType]
    public readonly struct DataSetDatasetParameterValueType : IEquatable<DataSetDatasetParameterValueType>
    {
        private readonly string _value;

        private DataSetDatasetParameterValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetDatasetParameterValueType MultiValued { get; } = new DataSetDatasetParameterValueType("MULTI_VALUED");
        public static DataSetDatasetParameterValueType SingleValued { get; } = new DataSetDatasetParameterValueType("SINGLE_VALUED");

        public static bool operator ==(DataSetDatasetParameterValueType left, DataSetDatasetParameterValueType right) => left.Equals(right);
        public static bool operator !=(DataSetDatasetParameterValueType left, DataSetDatasetParameterValueType right) => !left.Equals(right);

        public static explicit operator string(DataSetDatasetParameterValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetDatasetParameterValueType other && Equals(other);
        public bool Equals(DataSetDatasetParameterValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetGeoSpatialCountryCode : IEquatable<DataSetGeoSpatialCountryCode>
    {
        private readonly string _value;

        private DataSetGeoSpatialCountryCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetGeoSpatialCountryCode Us { get; } = new DataSetGeoSpatialCountryCode("US");

        public static bool operator ==(DataSetGeoSpatialCountryCode left, DataSetGeoSpatialCountryCode right) => left.Equals(right);
        public static bool operator !=(DataSetGeoSpatialCountryCode left, DataSetGeoSpatialCountryCode right) => !left.Equals(right);

        public static explicit operator string(DataSetGeoSpatialCountryCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetGeoSpatialCountryCode other && Equals(other);
        public bool Equals(DataSetGeoSpatialCountryCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetImportMode : IEquatable<DataSetImportMode>
    {
        private readonly string _value;

        private DataSetImportMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetImportMode Spice { get; } = new DataSetImportMode("SPICE");
        public static DataSetImportMode DirectQuery { get; } = new DataSetImportMode("DIRECT_QUERY");

        public static bool operator ==(DataSetImportMode left, DataSetImportMode right) => left.Equals(right);
        public static bool operator !=(DataSetImportMode left, DataSetImportMode right) => !left.Equals(right);

        public static explicit operator string(DataSetImportMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetImportMode other && Equals(other);
        public bool Equals(DataSetImportMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetRowLevelPermissionFormatVersion : IEquatable<DataSetRowLevelPermissionFormatVersion>
    {
        private readonly string _value;

        private DataSetRowLevelPermissionFormatVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetRowLevelPermissionFormatVersion Version1 { get; } = new DataSetRowLevelPermissionFormatVersion("VERSION_1");
        public static DataSetRowLevelPermissionFormatVersion Version2 { get; } = new DataSetRowLevelPermissionFormatVersion("VERSION_2");

        public static bool operator ==(DataSetRowLevelPermissionFormatVersion left, DataSetRowLevelPermissionFormatVersion right) => left.Equals(right);
        public static bool operator !=(DataSetRowLevelPermissionFormatVersion left, DataSetRowLevelPermissionFormatVersion right) => !left.Equals(right);

        public static explicit operator string(DataSetRowLevelPermissionFormatVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetRowLevelPermissionFormatVersion other && Equals(other);
        public bool Equals(DataSetRowLevelPermissionFormatVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetRowLevelPermissionPolicy : IEquatable<DataSetRowLevelPermissionPolicy>
    {
        private readonly string _value;

        private DataSetRowLevelPermissionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetRowLevelPermissionPolicy GrantAccess { get; } = new DataSetRowLevelPermissionPolicy("GRANT_ACCESS");
        public static DataSetRowLevelPermissionPolicy DenyAccess { get; } = new DataSetRowLevelPermissionPolicy("DENY_ACCESS");

        public static bool operator ==(DataSetRowLevelPermissionPolicy left, DataSetRowLevelPermissionPolicy right) => left.Equals(right);
        public static bool operator !=(DataSetRowLevelPermissionPolicy left, DataSetRowLevelPermissionPolicy right) => !left.Equals(right);

        public static explicit operator string(DataSetRowLevelPermissionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetRowLevelPermissionPolicy other && Equals(other);
        public bool Equals(DataSetRowLevelPermissionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetSizeUnit : IEquatable<DataSetSizeUnit>
    {
        private readonly string _value;

        private DataSetSizeUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetSizeUnit Hour { get; } = new DataSetSizeUnit("HOUR");
        public static DataSetSizeUnit Day { get; } = new DataSetSizeUnit("DAY");
        public static DataSetSizeUnit Week { get; } = new DataSetSizeUnit("WEEK");

        public static bool operator ==(DataSetSizeUnit left, DataSetSizeUnit right) => left.Equals(right);
        public static bool operator !=(DataSetSizeUnit left, DataSetSizeUnit right) => !left.Equals(right);

        public static explicit operator string(DataSetSizeUnit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetSizeUnit other && Equals(other);
        public bool Equals(DataSetSizeUnit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetStatus : IEquatable<DataSetStatus>
    {
        private readonly string _value;

        private DataSetStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetStatus Enabled { get; } = new DataSetStatus("ENABLED");
        public static DataSetStatus Disabled { get; } = new DataSetStatus("DISABLED");

        public static bool operator ==(DataSetStatus left, DataSetStatus right) => left.Equals(right);
        public static bool operator !=(DataSetStatus left, DataSetStatus right) => !left.Equals(right);

        public static explicit operator string(DataSetStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetStatus other && Equals(other);
        public bool Equals(DataSetStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetTimeGranularity : IEquatable<DataSetTimeGranularity>
    {
        private readonly string _value;

        private DataSetTimeGranularity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetTimeGranularity Year { get; } = new DataSetTimeGranularity("YEAR");
        public static DataSetTimeGranularity Quarter { get; } = new DataSetTimeGranularity("QUARTER");
        public static DataSetTimeGranularity Month { get; } = new DataSetTimeGranularity("MONTH");
        public static DataSetTimeGranularity Week { get; } = new DataSetTimeGranularity("WEEK");
        public static DataSetTimeGranularity Day { get; } = new DataSetTimeGranularity("DAY");
        public static DataSetTimeGranularity Hour { get; } = new DataSetTimeGranularity("HOUR");
        public static DataSetTimeGranularity Minute { get; } = new DataSetTimeGranularity("MINUTE");
        public static DataSetTimeGranularity Second { get; } = new DataSetTimeGranularity("SECOND");
        public static DataSetTimeGranularity Millisecond { get; } = new DataSetTimeGranularity("MILLISECOND");

        public static bool operator ==(DataSetTimeGranularity left, DataSetTimeGranularity right) => left.Equals(right);
        public static bool operator !=(DataSetTimeGranularity left, DataSetTimeGranularity right) => !left.Equals(right);

        public static explicit operator string(DataSetTimeGranularity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetTimeGranularity other && Equals(other);
        public bool Equals(DataSetTimeGranularity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceErrorInfoType : IEquatable<DataSourceErrorInfoType>
    {
        private readonly string _value;

        private DataSourceErrorInfoType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceErrorInfoType AccessDenied { get; } = new DataSourceErrorInfoType("ACCESS_DENIED");
        public static DataSourceErrorInfoType CopySourceNotFound { get; } = new DataSourceErrorInfoType("COPY_SOURCE_NOT_FOUND");
        public static DataSourceErrorInfoType Timeout { get; } = new DataSourceErrorInfoType("TIMEOUT");
        public static DataSourceErrorInfoType EngineVersionNotSupported { get; } = new DataSourceErrorInfoType("ENGINE_VERSION_NOT_SUPPORTED");
        public static DataSourceErrorInfoType UnknownHost { get; } = new DataSourceErrorInfoType("UNKNOWN_HOST");
        public static DataSourceErrorInfoType GenericSqlFailure { get; } = new DataSourceErrorInfoType("GENERIC_SQL_FAILURE");
        public static DataSourceErrorInfoType Conflict { get; } = new DataSourceErrorInfoType("CONFLICT");
        public static DataSourceErrorInfoType Unknown { get; } = new DataSourceErrorInfoType("UNKNOWN");

        public static bool operator ==(DataSourceErrorInfoType left, DataSourceErrorInfoType right) => left.Equals(right);
        public static bool operator !=(DataSourceErrorInfoType left, DataSourceErrorInfoType right) => !left.Equals(right);

        public static explicit operator string(DataSourceErrorInfoType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceErrorInfoType other && Equals(other);
        public bool Equals(DataSourceErrorInfoType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceResourceStatus : IEquatable<DataSourceResourceStatus>
    {
        private readonly string _value;

        private DataSourceResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceResourceStatus CreationInProgress { get; } = new DataSourceResourceStatus("CREATION_IN_PROGRESS");
        public static DataSourceResourceStatus CreationSuccessful { get; } = new DataSourceResourceStatus("CREATION_SUCCESSFUL");
        public static DataSourceResourceStatus CreationFailed { get; } = new DataSourceResourceStatus("CREATION_FAILED");
        public static DataSourceResourceStatus UpdateInProgress { get; } = new DataSourceResourceStatus("UPDATE_IN_PROGRESS");
        public static DataSourceResourceStatus UpdateSuccessful { get; } = new DataSourceResourceStatus("UPDATE_SUCCESSFUL");
        public static DataSourceResourceStatus UpdateFailed { get; } = new DataSourceResourceStatus("UPDATE_FAILED");
        public static DataSourceResourceStatus Deleted { get; } = new DataSourceResourceStatus("DELETED");

        public static bool operator ==(DataSourceResourceStatus left, DataSourceResourceStatus right) => left.Equals(right);
        public static bool operator !=(DataSourceResourceStatus left, DataSourceResourceStatus right) => !left.Equals(right);

        public static explicit operator string(DataSourceResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceResourceStatus other && Equals(other);
        public bool Equals(DataSourceResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceType : IEquatable<DataSourceType>
    {
        private readonly string _value;

        private DataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceType AdobeAnalytics { get; } = new DataSourceType("ADOBE_ANALYTICS");
        public static DataSourceType AmazonElasticsearch { get; } = new DataSourceType("AMAZON_ELASTICSEARCH");
        public static DataSourceType AmazonOpensearch { get; } = new DataSourceType("AMAZON_OPENSEARCH");
        public static DataSourceType Athena { get; } = new DataSourceType("ATHENA");
        public static DataSourceType Aurora { get; } = new DataSourceType("AURORA");
        public static DataSourceType AuroraPostgresql { get; } = new DataSourceType("AURORA_POSTGRESQL");
        public static DataSourceType AwsIotAnalytics { get; } = new DataSourceType("AWS_IOT_ANALYTICS");
        public static DataSourceType Databricks { get; } = new DataSourceType("DATABRICKS");
        public static DataSourceType Github { get; } = new DataSourceType("GITHUB");
        public static DataSourceType Jira { get; } = new DataSourceType("JIRA");
        public static DataSourceType Mariadb { get; } = new DataSourceType("MARIADB");
        public static DataSourceType Mysql { get; } = new DataSourceType("MYSQL");
        public static DataSourceType Oracle { get; } = new DataSourceType("ORACLE");
        public static DataSourceType Postgresql { get; } = new DataSourceType("POSTGRESQL");
        public static DataSourceType Presto { get; } = new DataSourceType("PRESTO");
        public static DataSourceType Redshift { get; } = new DataSourceType("REDSHIFT");
        public static DataSourceType S3 { get; } = new DataSourceType("S3");
        public static DataSourceType Salesforce { get; } = new DataSourceType("SALESFORCE");
        public static DataSourceType Servicenow { get; } = new DataSourceType("SERVICENOW");
        public static DataSourceType Snowflake { get; } = new DataSourceType("SNOWFLAKE");
        public static DataSourceType Spark { get; } = new DataSourceType("SPARK");
        public static DataSourceType Sqlserver { get; } = new DataSourceType("SQLSERVER");
        public static DataSourceType Teradata { get; } = new DataSourceType("TERADATA");
        public static DataSourceType Twitter { get; } = new DataSourceType("TWITTER");
        public static DataSourceType Timestream { get; } = new DataSourceType("TIMESTREAM");

        public static bool operator ==(DataSourceType left, DataSourceType right) => left.Equals(right);
        public static bool operator !=(DataSourceType left, DataSourceType right) => !left.Equals(right);

        public static explicit operator string(DataSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceType other && Equals(other);
        public bool Equals(DataSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RefreshScheduleMapRefreshType : IEquatable<RefreshScheduleMapRefreshType>
    {
        private readonly string _value;

        private RefreshScheduleMapRefreshType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RefreshScheduleMapRefreshType FullRefresh { get; } = new RefreshScheduleMapRefreshType("FULL_REFRESH");
        public static RefreshScheduleMapRefreshType IncrementalRefresh { get; } = new RefreshScheduleMapRefreshType("INCREMENTAL_REFRESH");

        public static bool operator ==(RefreshScheduleMapRefreshType left, RefreshScheduleMapRefreshType right) => left.Equals(right);
        public static bool operator !=(RefreshScheduleMapRefreshType left, RefreshScheduleMapRefreshType right) => !left.Equals(right);

        public static explicit operator string(RefreshScheduleMapRefreshType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RefreshScheduleMapRefreshType other && Equals(other);
        public bool Equals(RefreshScheduleMapRefreshType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RefreshScheduleMapScheduleFrequencyPropertiesInterval : IEquatable<RefreshScheduleMapScheduleFrequencyPropertiesInterval>
    {
        private readonly string _value;

        private RefreshScheduleMapScheduleFrequencyPropertiesInterval(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RefreshScheduleMapScheduleFrequencyPropertiesInterval Minute15 { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesInterval("MINUTE15");
        public static RefreshScheduleMapScheduleFrequencyPropertiesInterval Minute30 { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesInterval("MINUTE30");
        public static RefreshScheduleMapScheduleFrequencyPropertiesInterval Hourly { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesInterval("HOURLY");
        public static RefreshScheduleMapScheduleFrequencyPropertiesInterval Daily { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesInterval("DAILY");
        public static RefreshScheduleMapScheduleFrequencyPropertiesInterval Weekly { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesInterval("WEEKLY");
        public static RefreshScheduleMapScheduleFrequencyPropertiesInterval Monthly { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesInterval("MONTHLY");

        public static bool operator ==(RefreshScheduleMapScheduleFrequencyPropertiesInterval left, RefreshScheduleMapScheduleFrequencyPropertiesInterval right) => left.Equals(right);
        public static bool operator !=(RefreshScheduleMapScheduleFrequencyPropertiesInterval left, RefreshScheduleMapScheduleFrequencyPropertiesInterval right) => !left.Equals(right);

        public static explicit operator string(RefreshScheduleMapScheduleFrequencyPropertiesInterval value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RefreshScheduleMapScheduleFrequencyPropertiesInterval other && Equals(other);
        public bool Equals(RefreshScheduleMapScheduleFrequencyPropertiesInterval other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek : IEquatable<RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek>
    {
        private readonly string _value;

        private RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek Sunday { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek("SUNDAY");
        public static RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek Monday { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek("MONDAY");
        public static RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek Tuesday { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek("TUESDAY");
        public static RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek Wednesday { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek("WEDNESDAY");
        public static RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek Thursday { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek("THURSDAY");
        public static RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek Friday { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek("FRIDAY");
        public static RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek Saturday { get; } = new RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek("SATURDAY");

        public static bool operator ==(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek left, RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek right) => left.Equals(right);
        public static bool operator !=(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek left, RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek right) => !left.Equals(right);

        public static explicit operator string(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek other && Equals(other);
        public bool Equals(RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateAnchorOption : IEquatable<TemplateAnchorOption>
    {
        private readonly string _value;

        private TemplateAnchorOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateAnchorOption Now { get; } = new TemplateAnchorOption("NOW");

        public static bool operator ==(TemplateAnchorOption left, TemplateAnchorOption right) => left.Equals(right);
        public static bool operator !=(TemplateAnchorOption left, TemplateAnchorOption right) => !left.Equals(right);

        public static explicit operator string(TemplateAnchorOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateAnchorOption other && Equals(other);
        public bool Equals(TemplateAnchorOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateArcThickness : IEquatable<TemplateArcThickness>
    {
        private readonly string _value;

        private TemplateArcThickness(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateArcThickness Small { get; } = new TemplateArcThickness("SMALL");
        public static TemplateArcThickness Medium { get; } = new TemplateArcThickness("MEDIUM");
        public static TemplateArcThickness Large { get; } = new TemplateArcThickness("LARGE");
        public static TemplateArcThickness Whole { get; } = new TemplateArcThickness("WHOLE");

        public static bool operator ==(TemplateArcThickness left, TemplateArcThickness right) => left.Equals(right);
        public static bool operator !=(TemplateArcThickness left, TemplateArcThickness right) => !left.Equals(right);

        public static explicit operator string(TemplateArcThickness value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateArcThickness other && Equals(other);
        public bool Equals(TemplateArcThickness other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateArcThicknessOptions : IEquatable<TemplateArcThicknessOptions>
    {
        private readonly string _value;

        private TemplateArcThicknessOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateArcThicknessOptions Small { get; } = new TemplateArcThicknessOptions("SMALL");
        public static TemplateArcThicknessOptions Medium { get; } = new TemplateArcThicknessOptions("MEDIUM");
        public static TemplateArcThicknessOptions Large { get; } = new TemplateArcThicknessOptions("LARGE");

        public static bool operator ==(TemplateArcThicknessOptions left, TemplateArcThicknessOptions right) => left.Equals(right);
        public static bool operator !=(TemplateArcThicknessOptions left, TemplateArcThicknessOptions right) => !left.Equals(right);

        public static explicit operator string(TemplateArcThicknessOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateArcThicknessOptions other && Equals(other);
        public bool Equals(TemplateArcThicknessOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateAxisBinding : IEquatable<TemplateAxisBinding>
    {
        private readonly string _value;

        private TemplateAxisBinding(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateAxisBinding PrimaryYaxis { get; } = new TemplateAxisBinding("PRIMARY_YAXIS");
        public static TemplateAxisBinding SecondaryYaxis { get; } = new TemplateAxisBinding("SECONDARY_YAXIS");

        public static bool operator ==(TemplateAxisBinding left, TemplateAxisBinding right) => left.Equals(right);
        public static bool operator !=(TemplateAxisBinding left, TemplateAxisBinding right) => !left.Equals(right);

        public static explicit operator string(TemplateAxisBinding value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateAxisBinding other && Equals(other);
        public bool Equals(TemplateAxisBinding other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateBarChartOrientation : IEquatable<TemplateBarChartOrientation>
    {
        private readonly string _value;

        private TemplateBarChartOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateBarChartOrientation Horizontal { get; } = new TemplateBarChartOrientation("HORIZONTAL");
        public static TemplateBarChartOrientation Vertical { get; } = new TemplateBarChartOrientation("VERTICAL");

        public static bool operator ==(TemplateBarChartOrientation left, TemplateBarChartOrientation right) => left.Equals(right);
        public static bool operator !=(TemplateBarChartOrientation left, TemplateBarChartOrientation right) => !left.Equals(right);

        public static explicit operator string(TemplateBarChartOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateBarChartOrientation other && Equals(other);
        public bool Equals(TemplateBarChartOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateBarsArrangement : IEquatable<TemplateBarsArrangement>
    {
        private readonly string _value;

        private TemplateBarsArrangement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateBarsArrangement Clustered { get; } = new TemplateBarsArrangement("CLUSTERED");
        public static TemplateBarsArrangement Stacked { get; } = new TemplateBarsArrangement("STACKED");
        public static TemplateBarsArrangement StackedPercent { get; } = new TemplateBarsArrangement("STACKED_PERCENT");

        public static bool operator ==(TemplateBarsArrangement left, TemplateBarsArrangement right) => left.Equals(right);
        public static bool operator !=(TemplateBarsArrangement left, TemplateBarsArrangement right) => !left.Equals(right);

        public static explicit operator string(TemplateBarsArrangement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateBarsArrangement other && Equals(other);
        public bool Equals(TemplateBarsArrangement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateBaseMapStyleType : IEquatable<TemplateBaseMapStyleType>
    {
        private readonly string _value;

        private TemplateBaseMapStyleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateBaseMapStyleType LightGray { get; } = new TemplateBaseMapStyleType("LIGHT_GRAY");
        public static TemplateBaseMapStyleType DarkGray { get; } = new TemplateBaseMapStyleType("DARK_GRAY");
        public static TemplateBaseMapStyleType Street { get; } = new TemplateBaseMapStyleType("STREET");
        public static TemplateBaseMapStyleType Imagery { get; } = new TemplateBaseMapStyleType("IMAGERY");

        public static bool operator ==(TemplateBaseMapStyleType left, TemplateBaseMapStyleType right) => left.Equals(right);
        public static bool operator !=(TemplateBaseMapStyleType left, TemplateBaseMapStyleType right) => !left.Equals(right);

        public static explicit operator string(TemplateBaseMapStyleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateBaseMapStyleType other && Equals(other);
        public bool Equals(TemplateBaseMapStyleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateBoxPlotFillStyle : IEquatable<TemplateBoxPlotFillStyle>
    {
        private readonly string _value;

        private TemplateBoxPlotFillStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateBoxPlotFillStyle Solid { get; } = new TemplateBoxPlotFillStyle("SOLID");
        public static TemplateBoxPlotFillStyle Transparent { get; } = new TemplateBoxPlotFillStyle("TRANSPARENT");

        public static bool operator ==(TemplateBoxPlotFillStyle left, TemplateBoxPlotFillStyle right) => left.Equals(right);
        public static bool operator !=(TemplateBoxPlotFillStyle left, TemplateBoxPlotFillStyle right) => !left.Equals(right);

        public static explicit operator string(TemplateBoxPlotFillStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateBoxPlotFillStyle other && Equals(other);
        public bool Equals(TemplateBoxPlotFillStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateCategoricalAggregationFunction : IEquatable<TemplateCategoricalAggregationFunction>
    {
        private readonly string _value;

        private TemplateCategoricalAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateCategoricalAggregationFunction Count { get; } = new TemplateCategoricalAggregationFunction("COUNT");
        public static TemplateCategoricalAggregationFunction DistinctCount { get; } = new TemplateCategoricalAggregationFunction("DISTINCT_COUNT");

        public static bool operator ==(TemplateCategoricalAggregationFunction left, TemplateCategoricalAggregationFunction right) => left.Equals(right);
        public static bool operator !=(TemplateCategoricalAggregationFunction left, TemplateCategoricalAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(TemplateCategoricalAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateCategoricalAggregationFunction other && Equals(other);
        public bool Equals(TemplateCategoricalAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateCategoryFilterMatchOperator : IEquatable<TemplateCategoryFilterMatchOperator>
    {
        private readonly string _value;

        private TemplateCategoryFilterMatchOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateCategoryFilterMatchOperator EqualsValue { get; } = new TemplateCategoryFilterMatchOperator("EQUALS");
        public static TemplateCategoryFilterMatchOperator DoesNotEqual { get; } = new TemplateCategoryFilterMatchOperator("DOES_NOT_EQUAL");
        public static TemplateCategoryFilterMatchOperator Contains { get; } = new TemplateCategoryFilterMatchOperator("CONTAINS");
        public static TemplateCategoryFilterMatchOperator DoesNotContain { get; } = new TemplateCategoryFilterMatchOperator("DOES_NOT_CONTAIN");
        public static TemplateCategoryFilterMatchOperator StartsWith { get; } = new TemplateCategoryFilterMatchOperator("STARTS_WITH");
        public static TemplateCategoryFilterMatchOperator EndsWith { get; } = new TemplateCategoryFilterMatchOperator("ENDS_WITH");

        public static bool operator ==(TemplateCategoryFilterMatchOperator left, TemplateCategoryFilterMatchOperator right) => left.Equals(right);
        public static bool operator !=(TemplateCategoryFilterMatchOperator left, TemplateCategoryFilterMatchOperator right) => !left.Equals(right);

        public static explicit operator string(TemplateCategoryFilterMatchOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateCategoryFilterMatchOperator other && Equals(other);
        public bool Equals(TemplateCategoryFilterMatchOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateCategoryFilterSelectAllOptions : IEquatable<TemplateCategoryFilterSelectAllOptions>
    {
        private readonly string _value;

        private TemplateCategoryFilterSelectAllOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateCategoryFilterSelectAllOptions FilterAllValues { get; } = new TemplateCategoryFilterSelectAllOptions("FILTER_ALL_VALUES");

        public static bool operator ==(TemplateCategoryFilterSelectAllOptions left, TemplateCategoryFilterSelectAllOptions right) => left.Equals(right);
        public static bool operator !=(TemplateCategoryFilterSelectAllOptions left, TemplateCategoryFilterSelectAllOptions right) => !left.Equals(right);

        public static explicit operator string(TemplateCategoryFilterSelectAllOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateCategoryFilterSelectAllOptions other && Equals(other);
        public bool Equals(TemplateCategoryFilterSelectAllOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateColorFillType : IEquatable<TemplateColorFillType>
    {
        private readonly string _value;

        private TemplateColorFillType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateColorFillType Discrete { get; } = new TemplateColorFillType("DISCRETE");
        public static TemplateColorFillType Gradient { get; } = new TemplateColorFillType("GRADIENT");

        public static bool operator ==(TemplateColorFillType left, TemplateColorFillType right) => left.Equals(right);
        public static bool operator !=(TemplateColorFillType left, TemplateColorFillType right) => !left.Equals(right);

        public static explicit operator string(TemplateColorFillType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateColorFillType other && Equals(other);
        public bool Equals(TemplateColorFillType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateColumnRole : IEquatable<TemplateColumnRole>
    {
        private readonly string _value;

        private TemplateColumnRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateColumnRole Dimension { get; } = new TemplateColumnRole("DIMENSION");
        public static TemplateColumnRole Measure { get; } = new TemplateColumnRole("MEASURE");

        public static bool operator ==(TemplateColumnRole left, TemplateColumnRole right) => left.Equals(right);
        public static bool operator !=(TemplateColumnRole left, TemplateColumnRole right) => !left.Equals(right);

        public static explicit operator string(TemplateColumnRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateColumnRole other && Equals(other);
        public bool Equals(TemplateColumnRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateComparisonMethod : IEquatable<TemplateComparisonMethod>
    {
        private readonly string _value;

        private TemplateComparisonMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateComparisonMethod Difference { get; } = new TemplateComparisonMethod("DIFFERENCE");
        public static TemplateComparisonMethod PercentDifference { get; } = new TemplateComparisonMethod("PERCENT_DIFFERENCE");
        public static TemplateComparisonMethod Percent { get; } = new TemplateComparisonMethod("PERCENT");

        public static bool operator ==(TemplateComparisonMethod left, TemplateComparisonMethod right) => left.Equals(right);
        public static bool operator !=(TemplateComparisonMethod left, TemplateComparisonMethod right) => !left.Equals(right);

        public static explicit operator string(TemplateComparisonMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateComparisonMethod other && Equals(other);
        public bool Equals(TemplateComparisonMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateConditionalFormattingIconDisplayOption : IEquatable<TemplateConditionalFormattingIconDisplayOption>
    {
        private readonly string _value;

        private TemplateConditionalFormattingIconDisplayOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateConditionalFormattingIconDisplayOption IconOnly { get; } = new TemplateConditionalFormattingIconDisplayOption("ICON_ONLY");

        public static bool operator ==(TemplateConditionalFormattingIconDisplayOption left, TemplateConditionalFormattingIconDisplayOption right) => left.Equals(right);
        public static bool operator !=(TemplateConditionalFormattingIconDisplayOption left, TemplateConditionalFormattingIconDisplayOption right) => !left.Equals(right);

        public static explicit operator string(TemplateConditionalFormattingIconDisplayOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateConditionalFormattingIconDisplayOption other && Equals(other);
        public bool Equals(TemplateConditionalFormattingIconDisplayOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateConditionalFormattingIconSetType : IEquatable<TemplateConditionalFormattingIconSetType>
    {
        private readonly string _value;

        private TemplateConditionalFormattingIconSetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateConditionalFormattingIconSetType PlusMinus { get; } = new TemplateConditionalFormattingIconSetType("PLUS_MINUS");
        public static TemplateConditionalFormattingIconSetType CheckX { get; } = new TemplateConditionalFormattingIconSetType("CHECK_X");
        public static TemplateConditionalFormattingIconSetType ThreeColorArrow { get; } = new TemplateConditionalFormattingIconSetType("THREE_COLOR_ARROW");
        public static TemplateConditionalFormattingIconSetType ThreeGrayArrow { get; } = new TemplateConditionalFormattingIconSetType("THREE_GRAY_ARROW");
        public static TemplateConditionalFormattingIconSetType CaretUpMinusDown { get; } = new TemplateConditionalFormattingIconSetType("CARET_UP_MINUS_DOWN");
        public static TemplateConditionalFormattingIconSetType ThreeShape { get; } = new TemplateConditionalFormattingIconSetType("THREE_SHAPE");
        public static TemplateConditionalFormattingIconSetType ThreeCircle { get; } = new TemplateConditionalFormattingIconSetType("THREE_CIRCLE");
        public static TemplateConditionalFormattingIconSetType Flags { get; } = new TemplateConditionalFormattingIconSetType("FLAGS");
        public static TemplateConditionalFormattingIconSetType Bars { get; } = new TemplateConditionalFormattingIconSetType("BARS");
        public static TemplateConditionalFormattingIconSetType FourColorArrow { get; } = new TemplateConditionalFormattingIconSetType("FOUR_COLOR_ARROW");
        public static TemplateConditionalFormattingIconSetType FourGrayArrow { get; } = new TemplateConditionalFormattingIconSetType("FOUR_GRAY_ARROW");

        public static bool operator ==(TemplateConditionalFormattingIconSetType left, TemplateConditionalFormattingIconSetType right) => left.Equals(right);
        public static bool operator !=(TemplateConditionalFormattingIconSetType left, TemplateConditionalFormattingIconSetType right) => !left.Equals(right);

        public static explicit operator string(TemplateConditionalFormattingIconSetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateConditionalFormattingIconSetType other && Equals(other);
        public bool Equals(TemplateConditionalFormattingIconSetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateCrossDatasetTypes : IEquatable<TemplateCrossDatasetTypes>
    {
        private readonly string _value;

        private TemplateCrossDatasetTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateCrossDatasetTypes AllDatasets { get; } = new TemplateCrossDatasetTypes("ALL_DATASETS");
        public static TemplateCrossDatasetTypes SingleDataset { get; } = new TemplateCrossDatasetTypes("SINGLE_DATASET");

        public static bool operator ==(TemplateCrossDatasetTypes left, TemplateCrossDatasetTypes right) => left.Equals(right);
        public static bool operator !=(TemplateCrossDatasetTypes left, TemplateCrossDatasetTypes right) => !left.Equals(right);

        public static explicit operator string(TemplateCrossDatasetTypes value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateCrossDatasetTypes other && Equals(other);
        public bool Equals(TemplateCrossDatasetTypes other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateCustomContentImageScalingConfiguration : IEquatable<TemplateCustomContentImageScalingConfiguration>
    {
        private readonly string _value;

        private TemplateCustomContentImageScalingConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateCustomContentImageScalingConfiguration FitToHeight { get; } = new TemplateCustomContentImageScalingConfiguration("FIT_TO_HEIGHT");
        public static TemplateCustomContentImageScalingConfiguration FitToWidth { get; } = new TemplateCustomContentImageScalingConfiguration("FIT_TO_WIDTH");
        public static TemplateCustomContentImageScalingConfiguration DoNotScale { get; } = new TemplateCustomContentImageScalingConfiguration("DO_NOT_SCALE");
        public static TemplateCustomContentImageScalingConfiguration ScaleToVisual { get; } = new TemplateCustomContentImageScalingConfiguration("SCALE_TO_VISUAL");

        public static bool operator ==(TemplateCustomContentImageScalingConfiguration left, TemplateCustomContentImageScalingConfiguration right) => left.Equals(right);
        public static bool operator !=(TemplateCustomContentImageScalingConfiguration left, TemplateCustomContentImageScalingConfiguration right) => !left.Equals(right);

        public static explicit operator string(TemplateCustomContentImageScalingConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateCustomContentImageScalingConfiguration other && Equals(other);
        public bool Equals(TemplateCustomContentImageScalingConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateCustomContentType : IEquatable<TemplateCustomContentType>
    {
        private readonly string _value;

        private TemplateCustomContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateCustomContentType Image { get; } = new TemplateCustomContentType("IMAGE");
        public static TemplateCustomContentType OtherEmbeddedContent { get; } = new TemplateCustomContentType("OTHER_EMBEDDED_CONTENT");

        public static bool operator ==(TemplateCustomContentType left, TemplateCustomContentType right) => left.Equals(right);
        public static bool operator !=(TemplateCustomContentType left, TemplateCustomContentType right) => !left.Equals(right);

        public static explicit operator string(TemplateCustomContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateCustomContentType other && Equals(other);
        public bool Equals(TemplateCustomContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateDataLabelContent : IEquatable<TemplateDataLabelContent>
    {
        private readonly string _value;

        private TemplateDataLabelContent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateDataLabelContent Value { get; } = new TemplateDataLabelContent("VALUE");
        public static TemplateDataLabelContent Percent { get; } = new TemplateDataLabelContent("PERCENT");
        public static TemplateDataLabelContent ValueAndPercent { get; } = new TemplateDataLabelContent("VALUE_AND_PERCENT");

        public static bool operator ==(TemplateDataLabelContent left, TemplateDataLabelContent right) => left.Equals(right);
        public static bool operator !=(TemplateDataLabelContent left, TemplateDataLabelContent right) => !left.Equals(right);

        public static explicit operator string(TemplateDataLabelContent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateDataLabelContent other && Equals(other);
        public bool Equals(TemplateDataLabelContent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateDataLabelOverlap : IEquatable<TemplateDataLabelOverlap>
    {
        private readonly string _value;

        private TemplateDataLabelOverlap(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateDataLabelOverlap DisableOverlap { get; } = new TemplateDataLabelOverlap("DISABLE_OVERLAP");
        public static TemplateDataLabelOverlap EnableOverlap { get; } = new TemplateDataLabelOverlap("ENABLE_OVERLAP");

        public static bool operator ==(TemplateDataLabelOverlap left, TemplateDataLabelOverlap right) => left.Equals(right);
        public static bool operator !=(TemplateDataLabelOverlap left, TemplateDataLabelOverlap right) => !left.Equals(right);

        public static explicit operator string(TemplateDataLabelOverlap value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateDataLabelOverlap other && Equals(other);
        public bool Equals(TemplateDataLabelOverlap other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateDataLabelPosition : IEquatable<TemplateDataLabelPosition>
    {
        private readonly string _value;

        private TemplateDataLabelPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateDataLabelPosition Inside { get; } = new TemplateDataLabelPosition("INSIDE");
        public static TemplateDataLabelPosition Outside { get; } = new TemplateDataLabelPosition("OUTSIDE");
        public static TemplateDataLabelPosition Left { get; } = new TemplateDataLabelPosition("LEFT");
        public static TemplateDataLabelPosition Top { get; } = new TemplateDataLabelPosition("TOP");
        public static TemplateDataLabelPosition Bottom { get; } = new TemplateDataLabelPosition("BOTTOM");
        public static TemplateDataLabelPosition Right { get; } = new TemplateDataLabelPosition("RIGHT");

        public static bool operator ==(TemplateDataLabelPosition left, TemplateDataLabelPosition right) => left.Equals(right);
        public static bool operator !=(TemplateDataLabelPosition left, TemplateDataLabelPosition right) => !left.Equals(right);

        public static explicit operator string(TemplateDataLabelPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateDataLabelPosition other && Equals(other);
        public bool Equals(TemplateDataLabelPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateDateAggregationFunction : IEquatable<TemplateDateAggregationFunction>
    {
        private readonly string _value;

        private TemplateDateAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateDateAggregationFunction Count { get; } = new TemplateDateAggregationFunction("COUNT");
        public static TemplateDateAggregationFunction DistinctCount { get; } = new TemplateDateAggregationFunction("DISTINCT_COUNT");
        public static TemplateDateAggregationFunction Min { get; } = new TemplateDateAggregationFunction("MIN");
        public static TemplateDateAggregationFunction Max { get; } = new TemplateDateAggregationFunction("MAX");

        public static bool operator ==(TemplateDateAggregationFunction left, TemplateDateAggregationFunction right) => left.Equals(right);
        public static bool operator !=(TemplateDateAggregationFunction left, TemplateDateAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(TemplateDateAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateDateAggregationFunction other && Equals(other);
        public bool Equals(TemplateDateAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateErrorType : IEquatable<TemplateErrorType>
    {
        private readonly string _value;

        private TemplateErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateErrorType SourceNotFound { get; } = new TemplateErrorType("SOURCE_NOT_FOUND");
        public static TemplateErrorType DataSetNotFound { get; } = new TemplateErrorType("DATA_SET_NOT_FOUND");
        public static TemplateErrorType InternalFailure { get; } = new TemplateErrorType("INTERNAL_FAILURE");
        public static TemplateErrorType AccessDenied { get; } = new TemplateErrorType("ACCESS_DENIED");

        public static bool operator ==(TemplateErrorType left, TemplateErrorType right) => left.Equals(right);
        public static bool operator !=(TemplateErrorType left, TemplateErrorType right) => !left.Equals(right);

        public static explicit operator string(TemplateErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateErrorType other && Equals(other);
        public bool Equals(TemplateErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateFilterNullOption : IEquatable<TemplateFilterNullOption>
    {
        private readonly string _value;

        private TemplateFilterNullOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateFilterNullOption AllValues { get; } = new TemplateFilterNullOption("ALL_VALUES");
        public static TemplateFilterNullOption NullsOnly { get; } = new TemplateFilterNullOption("NULLS_ONLY");
        public static TemplateFilterNullOption NonNullsOnly { get; } = new TemplateFilterNullOption("NON_NULLS_ONLY");

        public static bool operator ==(TemplateFilterNullOption left, TemplateFilterNullOption right) => left.Equals(right);
        public static bool operator !=(TemplateFilterNullOption left, TemplateFilterNullOption right) => !left.Equals(right);

        public static explicit operator string(TemplateFilterNullOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateFilterNullOption other && Equals(other);
        public bool Equals(TemplateFilterNullOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateFilterVisualScope : IEquatable<TemplateFilterVisualScope>
    {
        private readonly string _value;

        private TemplateFilterVisualScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateFilterVisualScope AllVisuals { get; } = new TemplateFilterVisualScope("ALL_VISUALS");
        public static TemplateFilterVisualScope SelectedVisuals { get; } = new TemplateFilterVisualScope("SELECTED_VISUALS");

        public static bool operator ==(TemplateFilterVisualScope left, TemplateFilterVisualScope right) => left.Equals(right);
        public static bool operator !=(TemplateFilterVisualScope left, TemplateFilterVisualScope right) => !left.Equals(right);

        public static explicit operator string(TemplateFilterVisualScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateFilterVisualScope other && Equals(other);
        public bool Equals(TemplateFilterVisualScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateFontDecoration : IEquatable<TemplateFontDecoration>
    {
        private readonly string _value;

        private TemplateFontDecoration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateFontDecoration Underline { get; } = new TemplateFontDecoration("UNDERLINE");
        public static TemplateFontDecoration None { get; } = new TemplateFontDecoration("NONE");

        public static bool operator ==(TemplateFontDecoration left, TemplateFontDecoration right) => left.Equals(right);
        public static bool operator !=(TemplateFontDecoration left, TemplateFontDecoration right) => !left.Equals(right);

        public static explicit operator string(TemplateFontDecoration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateFontDecoration other && Equals(other);
        public bool Equals(TemplateFontDecoration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateFontStyle : IEquatable<TemplateFontStyle>
    {
        private readonly string _value;

        private TemplateFontStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateFontStyle Normal { get; } = new TemplateFontStyle("NORMAL");
        public static TemplateFontStyle Italic { get; } = new TemplateFontStyle("ITALIC");

        public static bool operator ==(TemplateFontStyle left, TemplateFontStyle right) => left.Equals(right);
        public static bool operator !=(TemplateFontStyle left, TemplateFontStyle right) => !left.Equals(right);

        public static explicit operator string(TemplateFontStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateFontStyle other && Equals(other);
        public bool Equals(TemplateFontStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateFontWeightName : IEquatable<TemplateFontWeightName>
    {
        private readonly string _value;

        private TemplateFontWeightName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateFontWeightName Normal { get; } = new TemplateFontWeightName("NORMAL");
        public static TemplateFontWeightName Bold { get; } = new TemplateFontWeightName("BOLD");

        public static bool operator ==(TemplateFontWeightName left, TemplateFontWeightName right) => left.Equals(right);
        public static bool operator !=(TemplateFontWeightName left, TemplateFontWeightName right) => !left.Equals(right);

        public static explicit operator string(TemplateFontWeightName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateFontWeightName other && Equals(other);
        public bool Equals(TemplateFontWeightName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateForecastComputationSeasonality : IEquatable<TemplateForecastComputationSeasonality>
    {
        private readonly string _value;

        private TemplateForecastComputationSeasonality(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateForecastComputationSeasonality Automatic { get; } = new TemplateForecastComputationSeasonality("AUTOMATIC");
        public static TemplateForecastComputationSeasonality Custom { get; } = new TemplateForecastComputationSeasonality("CUSTOM");

        public static bool operator ==(TemplateForecastComputationSeasonality left, TemplateForecastComputationSeasonality right) => left.Equals(right);
        public static bool operator !=(TemplateForecastComputationSeasonality left, TemplateForecastComputationSeasonality right) => !left.Equals(right);

        public static explicit operator string(TemplateForecastComputationSeasonality value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateForecastComputationSeasonality other && Equals(other);
        public bool Equals(TemplateForecastComputationSeasonality other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateFunnelChartMeasureDataLabelStyle : IEquatable<TemplateFunnelChartMeasureDataLabelStyle>
    {
        private readonly string _value;

        private TemplateFunnelChartMeasureDataLabelStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateFunnelChartMeasureDataLabelStyle ValueOnly { get; } = new TemplateFunnelChartMeasureDataLabelStyle("VALUE_ONLY");
        public static TemplateFunnelChartMeasureDataLabelStyle PercentageByFirstStage { get; } = new TemplateFunnelChartMeasureDataLabelStyle("PERCENTAGE_BY_FIRST_STAGE");
        public static TemplateFunnelChartMeasureDataLabelStyle PercentageByPreviousStage { get; } = new TemplateFunnelChartMeasureDataLabelStyle("PERCENTAGE_BY_PREVIOUS_STAGE");
        public static TemplateFunnelChartMeasureDataLabelStyle ValueAndPercentageByFirstStage { get; } = new TemplateFunnelChartMeasureDataLabelStyle("VALUE_AND_PERCENTAGE_BY_FIRST_STAGE");
        public static TemplateFunnelChartMeasureDataLabelStyle ValueAndPercentageByPreviousStage { get; } = new TemplateFunnelChartMeasureDataLabelStyle("VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE");

        public static bool operator ==(TemplateFunnelChartMeasureDataLabelStyle left, TemplateFunnelChartMeasureDataLabelStyle right) => left.Equals(right);
        public static bool operator !=(TemplateFunnelChartMeasureDataLabelStyle left, TemplateFunnelChartMeasureDataLabelStyle right) => !left.Equals(right);

        public static explicit operator string(TemplateFunnelChartMeasureDataLabelStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateFunnelChartMeasureDataLabelStyle other && Equals(other);
        public bool Equals(TemplateFunnelChartMeasureDataLabelStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateGeospatialSelectedPointStyle : IEquatable<TemplateGeospatialSelectedPointStyle>
    {
        private readonly string _value;

        private TemplateGeospatialSelectedPointStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateGeospatialSelectedPointStyle Point { get; } = new TemplateGeospatialSelectedPointStyle("POINT");
        public static TemplateGeospatialSelectedPointStyle Cluster { get; } = new TemplateGeospatialSelectedPointStyle("CLUSTER");
        public static TemplateGeospatialSelectedPointStyle Heatmap { get; } = new TemplateGeospatialSelectedPointStyle("HEATMAP");

        public static bool operator ==(TemplateGeospatialSelectedPointStyle left, TemplateGeospatialSelectedPointStyle right) => left.Equals(right);
        public static bool operator !=(TemplateGeospatialSelectedPointStyle left, TemplateGeospatialSelectedPointStyle right) => !left.Equals(right);

        public static explicit operator string(TemplateGeospatialSelectedPointStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateGeospatialSelectedPointStyle other && Equals(other);
        public bool Equals(TemplateGeospatialSelectedPointStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateHistogramBinType : IEquatable<TemplateHistogramBinType>
    {
        private readonly string _value;

        private TemplateHistogramBinType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateHistogramBinType BinCount { get; } = new TemplateHistogramBinType("BIN_COUNT");
        public static TemplateHistogramBinType BinWidth { get; } = new TemplateHistogramBinType("BIN_WIDTH");

        public static bool operator ==(TemplateHistogramBinType left, TemplateHistogramBinType right) => left.Equals(right);
        public static bool operator !=(TemplateHistogramBinType left, TemplateHistogramBinType right) => !left.Equals(right);

        public static explicit operator string(TemplateHistogramBinType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateHistogramBinType other && Equals(other);
        public bool Equals(TemplateHistogramBinType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateHorizontalTextAlignment : IEquatable<TemplateHorizontalTextAlignment>
    {
        private readonly string _value;

        private TemplateHorizontalTextAlignment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateHorizontalTextAlignment Left { get; } = new TemplateHorizontalTextAlignment("LEFT");
        public static TemplateHorizontalTextAlignment Center { get; } = new TemplateHorizontalTextAlignment("CENTER");
        public static TemplateHorizontalTextAlignment Right { get; } = new TemplateHorizontalTextAlignment("RIGHT");
        public static TemplateHorizontalTextAlignment Auto { get; } = new TemplateHorizontalTextAlignment("AUTO");

        public static bool operator ==(TemplateHorizontalTextAlignment left, TemplateHorizontalTextAlignment right) => left.Equals(right);
        public static bool operator !=(TemplateHorizontalTextAlignment left, TemplateHorizontalTextAlignment right) => !left.Equals(right);

        public static explicit operator string(TemplateHorizontalTextAlignment value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateHorizontalTextAlignment other && Equals(other);
        public bool Equals(TemplateHorizontalTextAlignment other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateIcon : IEquatable<TemplateIcon>
    {
        private readonly string _value;

        private TemplateIcon(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateIcon CaretUp { get; } = new TemplateIcon("CARET_UP");
        public static TemplateIcon CaretDown { get; } = new TemplateIcon("CARET_DOWN");
        public static TemplateIcon Plus { get; } = new TemplateIcon("PLUS");
        public static TemplateIcon Minus { get; } = new TemplateIcon("MINUS");
        public static TemplateIcon ArrowUp { get; } = new TemplateIcon("ARROW_UP");
        public static TemplateIcon ArrowDown { get; } = new TemplateIcon("ARROW_DOWN");
        public static TemplateIcon ArrowLeft { get; } = new TemplateIcon("ARROW_LEFT");
        public static TemplateIcon ArrowUpLeft { get; } = new TemplateIcon("ARROW_UP_LEFT");
        public static TemplateIcon ArrowDownLeft { get; } = new TemplateIcon("ARROW_DOWN_LEFT");
        public static TemplateIcon ArrowRight { get; } = new TemplateIcon("ARROW_RIGHT");
        public static TemplateIcon ArrowUpRight { get; } = new TemplateIcon("ARROW_UP_RIGHT");
        public static TemplateIcon ArrowDownRight { get; } = new TemplateIcon("ARROW_DOWN_RIGHT");
        public static TemplateIcon FaceUp { get; } = new TemplateIcon("FACE_UP");
        public static TemplateIcon FaceDown { get; } = new TemplateIcon("FACE_DOWN");
        public static TemplateIcon FaceFlat { get; } = new TemplateIcon("FACE_FLAT");
        public static TemplateIcon OneBar { get; } = new TemplateIcon("ONE_BAR");
        public static TemplateIcon TwoBar { get; } = new TemplateIcon("TWO_BAR");
        public static TemplateIcon ThreeBar { get; } = new TemplateIcon("THREE_BAR");
        public static TemplateIcon Circle { get; } = new TemplateIcon("CIRCLE");
        public static TemplateIcon Triangle { get; } = new TemplateIcon("TRIANGLE");
        public static TemplateIcon Square { get; } = new TemplateIcon("SQUARE");
        public static TemplateIcon Flag { get; } = new TemplateIcon("FLAG");
        public static TemplateIcon ThumbsUp { get; } = new TemplateIcon("THUMBS_UP");
        public static TemplateIcon ThumbsDown { get; } = new TemplateIcon("THUMBS_DOWN");
        public static TemplateIcon Checkmark { get; } = new TemplateIcon("CHECKMARK");
        public static TemplateIcon X { get; } = new TemplateIcon("X");

        public static bool operator ==(TemplateIcon left, TemplateIcon right) => left.Equals(right);
        public static bool operator !=(TemplateIcon left, TemplateIcon right) => !left.Equals(right);

        public static explicit operator string(TemplateIcon value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateIcon other && Equals(other);
        public bool Equals(TemplateIcon other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateKpiSparklineType : IEquatable<TemplateKpiSparklineType>
    {
        private readonly string _value;

        private TemplateKpiSparklineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateKpiSparklineType Line { get; } = new TemplateKpiSparklineType("LINE");
        public static TemplateKpiSparklineType Area { get; } = new TemplateKpiSparklineType("AREA");

        public static bool operator ==(TemplateKpiSparklineType left, TemplateKpiSparklineType right) => left.Equals(right);
        public static bool operator !=(TemplateKpiSparklineType left, TemplateKpiSparklineType right) => !left.Equals(right);

        public static explicit operator string(TemplateKpiSparklineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateKpiSparklineType other && Equals(other);
        public bool Equals(TemplateKpiSparklineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateKpiVisualStandardLayoutType : IEquatable<TemplateKpiVisualStandardLayoutType>
    {
        private readonly string _value;

        private TemplateKpiVisualStandardLayoutType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateKpiVisualStandardLayoutType Classic { get; } = new TemplateKpiVisualStandardLayoutType("CLASSIC");
        public static TemplateKpiVisualStandardLayoutType Vertical { get; } = new TemplateKpiVisualStandardLayoutType("VERTICAL");

        public static bool operator ==(TemplateKpiVisualStandardLayoutType left, TemplateKpiVisualStandardLayoutType right) => left.Equals(right);
        public static bool operator !=(TemplateKpiVisualStandardLayoutType left, TemplateKpiVisualStandardLayoutType right) => !left.Equals(right);

        public static explicit operator string(TemplateKpiVisualStandardLayoutType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateKpiVisualStandardLayoutType other && Equals(other);
        public bool Equals(TemplateKpiVisualStandardLayoutType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateLayoutElementType : IEquatable<TemplateLayoutElementType>
    {
        private readonly string _value;

        private TemplateLayoutElementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateLayoutElementType Visual { get; } = new TemplateLayoutElementType("VISUAL");
        public static TemplateLayoutElementType FilterControl { get; } = new TemplateLayoutElementType("FILTER_CONTROL");
        public static TemplateLayoutElementType ParameterControl { get; } = new TemplateLayoutElementType("PARAMETER_CONTROL");
        public static TemplateLayoutElementType TextBox { get; } = new TemplateLayoutElementType("TEXT_BOX");

        public static bool operator ==(TemplateLayoutElementType left, TemplateLayoutElementType right) => left.Equals(right);
        public static bool operator !=(TemplateLayoutElementType left, TemplateLayoutElementType right) => !left.Equals(right);

        public static explicit operator string(TemplateLayoutElementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateLayoutElementType other && Equals(other);
        public bool Equals(TemplateLayoutElementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateLegendPosition : IEquatable<TemplateLegendPosition>
    {
        private readonly string _value;

        private TemplateLegendPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateLegendPosition Auto { get; } = new TemplateLegendPosition("AUTO");
        public static TemplateLegendPosition Right { get; } = new TemplateLegendPosition("RIGHT");
        public static TemplateLegendPosition Bottom { get; } = new TemplateLegendPosition("BOTTOM");
        public static TemplateLegendPosition Top { get; } = new TemplateLegendPosition("TOP");

        public static bool operator ==(TemplateLegendPosition left, TemplateLegendPosition right) => left.Equals(right);
        public static bool operator !=(TemplateLegendPosition left, TemplateLegendPosition right) => !left.Equals(right);

        public static explicit operator string(TemplateLegendPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateLegendPosition other && Equals(other);
        public bool Equals(TemplateLegendPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateLineChartLineStyle : IEquatable<TemplateLineChartLineStyle>
    {
        private readonly string _value;

        private TemplateLineChartLineStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateLineChartLineStyle Solid { get; } = new TemplateLineChartLineStyle("SOLID");
        public static TemplateLineChartLineStyle Dotted { get; } = new TemplateLineChartLineStyle("DOTTED");
        public static TemplateLineChartLineStyle Dashed { get; } = new TemplateLineChartLineStyle("DASHED");

        public static bool operator ==(TemplateLineChartLineStyle left, TemplateLineChartLineStyle right) => left.Equals(right);
        public static bool operator !=(TemplateLineChartLineStyle left, TemplateLineChartLineStyle right) => !left.Equals(right);

        public static explicit operator string(TemplateLineChartLineStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateLineChartLineStyle other && Equals(other);
        public bool Equals(TemplateLineChartLineStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateLineChartMarkerShape : IEquatable<TemplateLineChartMarkerShape>
    {
        private readonly string _value;

        private TemplateLineChartMarkerShape(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateLineChartMarkerShape Circle { get; } = new TemplateLineChartMarkerShape("CIRCLE");
        public static TemplateLineChartMarkerShape Triangle { get; } = new TemplateLineChartMarkerShape("TRIANGLE");
        public static TemplateLineChartMarkerShape Square { get; } = new TemplateLineChartMarkerShape("SQUARE");
        public static TemplateLineChartMarkerShape Diamond { get; } = new TemplateLineChartMarkerShape("DIAMOND");
        public static TemplateLineChartMarkerShape RoundedSquare { get; } = new TemplateLineChartMarkerShape("ROUNDED_SQUARE");

        public static bool operator ==(TemplateLineChartMarkerShape left, TemplateLineChartMarkerShape right) => left.Equals(right);
        public static bool operator !=(TemplateLineChartMarkerShape left, TemplateLineChartMarkerShape right) => !left.Equals(right);

        public static explicit operator string(TemplateLineChartMarkerShape value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateLineChartMarkerShape other && Equals(other);
        public bool Equals(TemplateLineChartMarkerShape other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateLineChartType : IEquatable<TemplateLineChartType>
    {
        private readonly string _value;

        private TemplateLineChartType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateLineChartType Line { get; } = new TemplateLineChartType("LINE");
        public static TemplateLineChartType Area { get; } = new TemplateLineChartType("AREA");
        public static TemplateLineChartType StackedArea { get; } = new TemplateLineChartType("STACKED_AREA");

        public static bool operator ==(TemplateLineChartType left, TemplateLineChartType right) => left.Equals(right);
        public static bool operator !=(TemplateLineChartType left, TemplateLineChartType right) => !left.Equals(right);

        public static explicit operator string(TemplateLineChartType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateLineChartType other && Equals(other);
        public bool Equals(TemplateLineChartType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateLineInterpolation : IEquatable<TemplateLineInterpolation>
    {
        private readonly string _value;

        private TemplateLineInterpolation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateLineInterpolation Linear { get; } = new TemplateLineInterpolation("LINEAR");
        public static TemplateLineInterpolation Smooth { get; } = new TemplateLineInterpolation("SMOOTH");
        public static TemplateLineInterpolation Stepped { get; } = new TemplateLineInterpolation("STEPPED");

        public static bool operator ==(TemplateLineInterpolation left, TemplateLineInterpolation right) => left.Equals(right);
        public static bool operator !=(TemplateLineInterpolation left, TemplateLineInterpolation right) => !left.Equals(right);

        public static explicit operator string(TemplateLineInterpolation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateLineInterpolation other && Equals(other);
        public bool Equals(TemplateLineInterpolation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateMapZoomMode : IEquatable<TemplateMapZoomMode>
    {
        private readonly string _value;

        private TemplateMapZoomMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateMapZoomMode Auto { get; } = new TemplateMapZoomMode("AUTO");
        public static TemplateMapZoomMode Manual { get; } = new TemplateMapZoomMode("MANUAL");

        public static bool operator ==(TemplateMapZoomMode left, TemplateMapZoomMode right) => left.Equals(right);
        public static bool operator !=(TemplateMapZoomMode left, TemplateMapZoomMode right) => !left.Equals(right);

        public static explicit operator string(TemplateMapZoomMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateMapZoomMode other && Equals(other);
        public bool Equals(TemplateMapZoomMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateMaximumMinimumComputationType : IEquatable<TemplateMaximumMinimumComputationType>
    {
        private readonly string _value;

        private TemplateMaximumMinimumComputationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateMaximumMinimumComputationType Maximum { get; } = new TemplateMaximumMinimumComputationType("MAXIMUM");
        public static TemplateMaximumMinimumComputationType Minimum { get; } = new TemplateMaximumMinimumComputationType("MINIMUM");

        public static bool operator ==(TemplateMaximumMinimumComputationType left, TemplateMaximumMinimumComputationType right) => left.Equals(right);
        public static bool operator !=(TemplateMaximumMinimumComputationType left, TemplateMaximumMinimumComputationType right) => !left.Equals(right);

        public static explicit operator string(TemplateMaximumMinimumComputationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateMaximumMinimumComputationType other && Equals(other);
        public bool Equals(TemplateMaximumMinimumComputationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateMissingDataTreatmentOption : IEquatable<TemplateMissingDataTreatmentOption>
    {
        private readonly string _value;

        private TemplateMissingDataTreatmentOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateMissingDataTreatmentOption Interpolate { get; } = new TemplateMissingDataTreatmentOption("INTERPOLATE");
        public static TemplateMissingDataTreatmentOption ShowAsZero { get; } = new TemplateMissingDataTreatmentOption("SHOW_AS_ZERO");
        public static TemplateMissingDataTreatmentOption ShowAsBlank { get; } = new TemplateMissingDataTreatmentOption("SHOW_AS_BLANK");

        public static bool operator ==(TemplateMissingDataTreatmentOption left, TemplateMissingDataTreatmentOption right) => left.Equals(right);
        public static bool operator !=(TemplateMissingDataTreatmentOption left, TemplateMissingDataTreatmentOption right) => !left.Equals(right);

        public static explicit operator string(TemplateMissingDataTreatmentOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateMissingDataTreatmentOption other && Equals(other);
        public bool Equals(TemplateMissingDataTreatmentOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateNegativeValueDisplayMode : IEquatable<TemplateNegativeValueDisplayMode>
    {
        private readonly string _value;

        private TemplateNegativeValueDisplayMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateNegativeValueDisplayMode Positive { get; } = new TemplateNegativeValueDisplayMode("POSITIVE");
        public static TemplateNegativeValueDisplayMode Negative { get; } = new TemplateNegativeValueDisplayMode("NEGATIVE");

        public static bool operator ==(TemplateNegativeValueDisplayMode left, TemplateNegativeValueDisplayMode right) => left.Equals(right);
        public static bool operator !=(TemplateNegativeValueDisplayMode left, TemplateNegativeValueDisplayMode right) => !left.Equals(right);

        public static explicit operator string(TemplateNegativeValueDisplayMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateNegativeValueDisplayMode other && Equals(other);
        public bool Equals(TemplateNegativeValueDisplayMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateNumberScale : IEquatable<TemplateNumberScale>
    {
        private readonly string _value;

        private TemplateNumberScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateNumberScale None { get; } = new TemplateNumberScale("NONE");
        public static TemplateNumberScale Auto { get; } = new TemplateNumberScale("AUTO");
        public static TemplateNumberScale Thousands { get; } = new TemplateNumberScale("THOUSANDS");
        public static TemplateNumberScale Millions { get; } = new TemplateNumberScale("MILLIONS");
        public static TemplateNumberScale Billions { get; } = new TemplateNumberScale("BILLIONS");
        public static TemplateNumberScale Trillions { get; } = new TemplateNumberScale("TRILLIONS");

        public static bool operator ==(TemplateNumberScale left, TemplateNumberScale right) => left.Equals(right);
        public static bool operator !=(TemplateNumberScale left, TemplateNumberScale right) => !left.Equals(right);

        public static explicit operator string(TemplateNumberScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateNumberScale other && Equals(other);
        public bool Equals(TemplateNumberScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateNumericEqualityMatchOperator : IEquatable<TemplateNumericEqualityMatchOperator>
    {
        private readonly string _value;

        private TemplateNumericEqualityMatchOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateNumericEqualityMatchOperator EqualsValue { get; } = new TemplateNumericEqualityMatchOperator("EQUALS");
        public static TemplateNumericEqualityMatchOperator DoesNotEqual { get; } = new TemplateNumericEqualityMatchOperator("DOES_NOT_EQUAL");

        public static bool operator ==(TemplateNumericEqualityMatchOperator left, TemplateNumericEqualityMatchOperator right) => left.Equals(right);
        public static bool operator !=(TemplateNumericEqualityMatchOperator left, TemplateNumericEqualityMatchOperator right) => !left.Equals(right);

        public static explicit operator string(TemplateNumericEqualityMatchOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateNumericEqualityMatchOperator other && Equals(other);
        public bool Equals(TemplateNumericEqualityMatchOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateNumericFilterSelectAllOptions : IEquatable<TemplateNumericFilterSelectAllOptions>
    {
        private readonly string _value;

        private TemplateNumericFilterSelectAllOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateNumericFilterSelectAllOptions FilterAllValues { get; } = new TemplateNumericFilterSelectAllOptions("FILTER_ALL_VALUES");

        public static bool operator ==(TemplateNumericFilterSelectAllOptions left, TemplateNumericFilterSelectAllOptions right) => left.Equals(right);
        public static bool operator !=(TemplateNumericFilterSelectAllOptions left, TemplateNumericFilterSelectAllOptions right) => !left.Equals(right);

        public static explicit operator string(TemplateNumericFilterSelectAllOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateNumericFilterSelectAllOptions other && Equals(other);
        public bool Equals(TemplateNumericFilterSelectAllOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateNumericSeparatorSymbol : IEquatable<TemplateNumericSeparatorSymbol>
    {
        private readonly string _value;

        private TemplateNumericSeparatorSymbol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateNumericSeparatorSymbol Comma { get; } = new TemplateNumericSeparatorSymbol("COMMA");
        public static TemplateNumericSeparatorSymbol Dot { get; } = new TemplateNumericSeparatorSymbol("DOT");
        public static TemplateNumericSeparatorSymbol Space { get; } = new TemplateNumericSeparatorSymbol("SPACE");

        public static bool operator ==(TemplateNumericSeparatorSymbol left, TemplateNumericSeparatorSymbol right) => left.Equals(right);
        public static bool operator !=(TemplateNumericSeparatorSymbol left, TemplateNumericSeparatorSymbol right) => !left.Equals(right);

        public static explicit operator string(TemplateNumericSeparatorSymbol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateNumericSeparatorSymbol other && Equals(other);
        public bool Equals(TemplateNumericSeparatorSymbol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateOtherCategories : IEquatable<TemplateOtherCategories>
    {
        private readonly string _value;

        private TemplateOtherCategories(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateOtherCategories Include { get; } = new TemplateOtherCategories("INCLUDE");
        public static TemplateOtherCategories Exclude { get; } = new TemplateOtherCategories("EXCLUDE");

        public static bool operator ==(TemplateOtherCategories left, TemplateOtherCategories right) => left.Equals(right);
        public static bool operator !=(TemplateOtherCategories left, TemplateOtherCategories right) => !left.Equals(right);

        public static explicit operator string(TemplateOtherCategories value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateOtherCategories other && Equals(other);
        public bool Equals(TemplateOtherCategories other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePanelBorderStyle : IEquatable<TemplatePanelBorderStyle>
    {
        private readonly string _value;

        private TemplatePanelBorderStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePanelBorderStyle Solid { get; } = new TemplatePanelBorderStyle("SOLID");
        public static TemplatePanelBorderStyle Dashed { get; } = new TemplatePanelBorderStyle("DASHED");
        public static TemplatePanelBorderStyle Dotted { get; } = new TemplatePanelBorderStyle("DOTTED");

        public static bool operator ==(TemplatePanelBorderStyle left, TemplatePanelBorderStyle right) => left.Equals(right);
        public static bool operator !=(TemplatePanelBorderStyle left, TemplatePanelBorderStyle right) => !left.Equals(right);

        public static explicit operator string(TemplatePanelBorderStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePanelBorderStyle other && Equals(other);
        public bool Equals(TemplatePanelBorderStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePaperOrientation : IEquatable<TemplatePaperOrientation>
    {
        private readonly string _value;

        private TemplatePaperOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePaperOrientation Portrait { get; } = new TemplatePaperOrientation("PORTRAIT");
        public static TemplatePaperOrientation Landscape { get; } = new TemplatePaperOrientation("LANDSCAPE");

        public static bool operator ==(TemplatePaperOrientation left, TemplatePaperOrientation right) => left.Equals(right);
        public static bool operator !=(TemplatePaperOrientation left, TemplatePaperOrientation right) => !left.Equals(right);

        public static explicit operator string(TemplatePaperOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePaperOrientation other && Equals(other);
        public bool Equals(TemplatePaperOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePaperSize : IEquatable<TemplatePaperSize>
    {
        private readonly string _value;

        private TemplatePaperSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePaperSize UsLetter { get; } = new TemplatePaperSize("US_LETTER");
        public static TemplatePaperSize UsLegal { get; } = new TemplatePaperSize("US_LEGAL");
        public static TemplatePaperSize UsTabloidLedger { get; } = new TemplatePaperSize("US_TABLOID_LEDGER");
        public static TemplatePaperSize A0 { get; } = new TemplatePaperSize("A0");
        public static TemplatePaperSize A1 { get; } = new TemplatePaperSize("A1");
        public static TemplatePaperSize A2 { get; } = new TemplatePaperSize("A2");
        public static TemplatePaperSize A3 { get; } = new TemplatePaperSize("A3");
        public static TemplatePaperSize A4 { get; } = new TemplatePaperSize("A4");
        public static TemplatePaperSize A5 { get; } = new TemplatePaperSize("A5");
        public static TemplatePaperSize JisB4 { get; } = new TemplatePaperSize("JIS_B4");
        public static TemplatePaperSize JisB5 { get; } = new TemplatePaperSize("JIS_B5");

        public static bool operator ==(TemplatePaperSize left, TemplatePaperSize right) => left.Equals(right);
        public static bool operator !=(TemplatePaperSize left, TemplatePaperSize right) => !left.Equals(right);

        public static explicit operator string(TemplatePaperSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePaperSize other && Equals(other);
        public bool Equals(TemplatePaperSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateParameterValueType : IEquatable<TemplateParameterValueType>
    {
        private readonly string _value;

        private TemplateParameterValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateParameterValueType MultiValued { get; } = new TemplateParameterValueType("MULTI_VALUED");
        public static TemplateParameterValueType SingleValued { get; } = new TemplateParameterValueType("SINGLE_VALUED");

        public static bool operator ==(TemplateParameterValueType left, TemplateParameterValueType right) => left.Equals(right);
        public static bool operator !=(TemplateParameterValueType left, TemplateParameterValueType right) => !left.Equals(right);

        public static explicit operator string(TemplateParameterValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateParameterValueType other && Equals(other);
        public bool Equals(TemplateParameterValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePivotTableConditionalFormattingScopeRole : IEquatable<TemplatePivotTableConditionalFormattingScopeRole>
    {
        private readonly string _value;

        private TemplatePivotTableConditionalFormattingScopeRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePivotTableConditionalFormattingScopeRole Field { get; } = new TemplatePivotTableConditionalFormattingScopeRole("FIELD");
        public static TemplatePivotTableConditionalFormattingScopeRole FieldTotal { get; } = new TemplatePivotTableConditionalFormattingScopeRole("FIELD_TOTAL");
        public static TemplatePivotTableConditionalFormattingScopeRole GrandTotal { get; } = new TemplatePivotTableConditionalFormattingScopeRole("GRAND_TOTAL");

        public static bool operator ==(TemplatePivotTableConditionalFormattingScopeRole left, TemplatePivotTableConditionalFormattingScopeRole right) => left.Equals(right);
        public static bool operator !=(TemplatePivotTableConditionalFormattingScopeRole left, TemplatePivotTableConditionalFormattingScopeRole right) => !left.Equals(right);

        public static explicit operator string(TemplatePivotTableConditionalFormattingScopeRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePivotTableConditionalFormattingScopeRole other && Equals(other);
        public bool Equals(TemplatePivotTableConditionalFormattingScopeRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePivotTableFieldCollapseState : IEquatable<TemplatePivotTableFieldCollapseState>
    {
        private readonly string _value;

        private TemplatePivotTableFieldCollapseState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePivotTableFieldCollapseState Collapsed { get; } = new TemplatePivotTableFieldCollapseState("COLLAPSED");
        public static TemplatePivotTableFieldCollapseState Expanded { get; } = new TemplatePivotTableFieldCollapseState("EXPANDED");

        public static bool operator ==(TemplatePivotTableFieldCollapseState left, TemplatePivotTableFieldCollapseState right) => left.Equals(right);
        public static bool operator !=(TemplatePivotTableFieldCollapseState left, TemplatePivotTableFieldCollapseState right) => !left.Equals(right);

        public static explicit operator string(TemplatePivotTableFieldCollapseState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePivotTableFieldCollapseState other && Equals(other);
        public bool Equals(TemplatePivotTableFieldCollapseState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePivotTableMetricPlacement : IEquatable<TemplatePivotTableMetricPlacement>
    {
        private readonly string _value;

        private TemplatePivotTableMetricPlacement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePivotTableMetricPlacement Row { get; } = new TemplatePivotTableMetricPlacement("ROW");
        public static TemplatePivotTableMetricPlacement Column { get; } = new TemplatePivotTableMetricPlacement("COLUMN");

        public static bool operator ==(TemplatePivotTableMetricPlacement left, TemplatePivotTableMetricPlacement right) => left.Equals(right);
        public static bool operator !=(TemplatePivotTableMetricPlacement left, TemplatePivotTableMetricPlacement right) => !left.Equals(right);

        public static explicit operator string(TemplatePivotTableMetricPlacement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePivotTableMetricPlacement other && Equals(other);
        public bool Equals(TemplatePivotTableMetricPlacement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePivotTableRowsLayout : IEquatable<TemplatePivotTableRowsLayout>
    {
        private readonly string _value;

        private TemplatePivotTableRowsLayout(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePivotTableRowsLayout Tabular { get; } = new TemplatePivotTableRowsLayout("TABULAR");
        public static TemplatePivotTableRowsLayout Hierarchy { get; } = new TemplatePivotTableRowsLayout("HIERARCHY");

        public static bool operator ==(TemplatePivotTableRowsLayout left, TemplatePivotTableRowsLayout right) => left.Equals(right);
        public static bool operator !=(TemplatePivotTableRowsLayout left, TemplatePivotTableRowsLayout right) => !left.Equals(right);

        public static explicit operator string(TemplatePivotTableRowsLayout value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePivotTableRowsLayout other && Equals(other);
        public bool Equals(TemplatePivotTableRowsLayout other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePivotTableSubtotalLevel : IEquatable<TemplatePivotTableSubtotalLevel>
    {
        private readonly string _value;

        private TemplatePivotTableSubtotalLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePivotTableSubtotalLevel All { get; } = new TemplatePivotTableSubtotalLevel("ALL");
        public static TemplatePivotTableSubtotalLevel Custom { get; } = new TemplatePivotTableSubtotalLevel("CUSTOM");
        public static TemplatePivotTableSubtotalLevel Last { get; } = new TemplatePivotTableSubtotalLevel("LAST");

        public static bool operator ==(TemplatePivotTableSubtotalLevel left, TemplatePivotTableSubtotalLevel right) => left.Equals(right);
        public static bool operator !=(TemplatePivotTableSubtotalLevel left, TemplatePivotTableSubtotalLevel right) => !left.Equals(right);

        public static explicit operator string(TemplatePivotTableSubtotalLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePivotTableSubtotalLevel other && Equals(other);
        public bool Equals(TemplatePivotTableSubtotalLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePrimaryValueDisplayType : IEquatable<TemplatePrimaryValueDisplayType>
    {
        private readonly string _value;

        private TemplatePrimaryValueDisplayType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePrimaryValueDisplayType Hidden { get; } = new TemplatePrimaryValueDisplayType("HIDDEN");
        public static TemplatePrimaryValueDisplayType Comparison { get; } = new TemplatePrimaryValueDisplayType("COMPARISON");
        public static TemplatePrimaryValueDisplayType Actual { get; } = new TemplatePrimaryValueDisplayType("ACTUAL");

        public static bool operator ==(TemplatePrimaryValueDisplayType left, TemplatePrimaryValueDisplayType right) => left.Equals(right);
        public static bool operator !=(TemplatePrimaryValueDisplayType left, TemplatePrimaryValueDisplayType right) => !left.Equals(right);

        public static explicit operator string(TemplatePrimaryValueDisplayType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePrimaryValueDisplayType other && Equals(other);
        public bool Equals(TemplatePrimaryValueDisplayType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateRadarChartAxesRangeScale : IEquatable<TemplateRadarChartAxesRangeScale>
    {
        private readonly string _value;

        private TemplateRadarChartAxesRangeScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateRadarChartAxesRangeScale Auto { get; } = new TemplateRadarChartAxesRangeScale("AUTO");
        public static TemplateRadarChartAxesRangeScale Independent { get; } = new TemplateRadarChartAxesRangeScale("INDEPENDENT");
        public static TemplateRadarChartAxesRangeScale Shared { get; } = new TemplateRadarChartAxesRangeScale("SHARED");

        public static bool operator ==(TemplateRadarChartAxesRangeScale left, TemplateRadarChartAxesRangeScale right) => left.Equals(right);
        public static bool operator !=(TemplateRadarChartAxesRangeScale left, TemplateRadarChartAxesRangeScale right) => !left.Equals(right);

        public static explicit operator string(TemplateRadarChartAxesRangeScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateRadarChartAxesRangeScale other && Equals(other);
        public bool Equals(TemplateRadarChartAxesRangeScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateRadarChartShape : IEquatable<TemplateRadarChartShape>
    {
        private readonly string _value;

        private TemplateRadarChartShape(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateRadarChartShape Circle { get; } = new TemplateRadarChartShape("CIRCLE");
        public static TemplateRadarChartShape Polygon { get; } = new TemplateRadarChartShape("POLYGON");

        public static bool operator ==(TemplateRadarChartShape left, TemplateRadarChartShape right) => left.Equals(right);
        public static bool operator !=(TemplateRadarChartShape left, TemplateRadarChartShape right) => !left.Equals(right);

        public static explicit operator string(TemplateRadarChartShape value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateRadarChartShape other && Equals(other);
        public bool Equals(TemplateRadarChartShape other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateReferenceLineLabelHorizontalPosition : IEquatable<TemplateReferenceLineLabelHorizontalPosition>
    {
        private readonly string _value;

        private TemplateReferenceLineLabelHorizontalPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateReferenceLineLabelHorizontalPosition Left { get; } = new TemplateReferenceLineLabelHorizontalPosition("LEFT");
        public static TemplateReferenceLineLabelHorizontalPosition Center { get; } = new TemplateReferenceLineLabelHorizontalPosition("CENTER");
        public static TemplateReferenceLineLabelHorizontalPosition Right { get; } = new TemplateReferenceLineLabelHorizontalPosition("RIGHT");

        public static bool operator ==(TemplateReferenceLineLabelHorizontalPosition left, TemplateReferenceLineLabelHorizontalPosition right) => left.Equals(right);
        public static bool operator !=(TemplateReferenceLineLabelHorizontalPosition left, TemplateReferenceLineLabelHorizontalPosition right) => !left.Equals(right);

        public static explicit operator string(TemplateReferenceLineLabelHorizontalPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateReferenceLineLabelHorizontalPosition other && Equals(other);
        public bool Equals(TemplateReferenceLineLabelHorizontalPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateReferenceLineLabelVerticalPosition : IEquatable<TemplateReferenceLineLabelVerticalPosition>
    {
        private readonly string _value;

        private TemplateReferenceLineLabelVerticalPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateReferenceLineLabelVerticalPosition Above { get; } = new TemplateReferenceLineLabelVerticalPosition("ABOVE");
        public static TemplateReferenceLineLabelVerticalPosition Below { get; } = new TemplateReferenceLineLabelVerticalPosition("BELOW");

        public static bool operator ==(TemplateReferenceLineLabelVerticalPosition left, TemplateReferenceLineLabelVerticalPosition right) => left.Equals(right);
        public static bool operator !=(TemplateReferenceLineLabelVerticalPosition left, TemplateReferenceLineLabelVerticalPosition right) => !left.Equals(right);

        public static explicit operator string(TemplateReferenceLineLabelVerticalPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateReferenceLineLabelVerticalPosition other && Equals(other);
        public bool Equals(TemplateReferenceLineLabelVerticalPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateReferenceLinePatternType : IEquatable<TemplateReferenceLinePatternType>
    {
        private readonly string _value;

        private TemplateReferenceLinePatternType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateReferenceLinePatternType Solid { get; } = new TemplateReferenceLinePatternType("SOLID");
        public static TemplateReferenceLinePatternType Dashed { get; } = new TemplateReferenceLinePatternType("DASHED");
        public static TemplateReferenceLinePatternType Dotted { get; } = new TemplateReferenceLinePatternType("DOTTED");

        public static bool operator ==(TemplateReferenceLinePatternType left, TemplateReferenceLinePatternType right) => left.Equals(right);
        public static bool operator !=(TemplateReferenceLinePatternType left, TemplateReferenceLinePatternType right) => !left.Equals(right);

        public static explicit operator string(TemplateReferenceLinePatternType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateReferenceLinePatternType other && Equals(other);
        public bool Equals(TemplateReferenceLinePatternType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateReferenceLineValueLabelRelativePosition : IEquatable<TemplateReferenceLineValueLabelRelativePosition>
    {
        private readonly string _value;

        private TemplateReferenceLineValueLabelRelativePosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateReferenceLineValueLabelRelativePosition BeforeCustomLabel { get; } = new TemplateReferenceLineValueLabelRelativePosition("BEFORE_CUSTOM_LABEL");
        public static TemplateReferenceLineValueLabelRelativePosition AfterCustomLabel { get; } = new TemplateReferenceLineValueLabelRelativePosition("AFTER_CUSTOM_LABEL");

        public static bool operator ==(TemplateReferenceLineValueLabelRelativePosition left, TemplateReferenceLineValueLabelRelativePosition right) => left.Equals(right);
        public static bool operator !=(TemplateReferenceLineValueLabelRelativePosition left, TemplateReferenceLineValueLabelRelativePosition right) => !left.Equals(right);

        public static explicit operator string(TemplateReferenceLineValueLabelRelativePosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateReferenceLineValueLabelRelativePosition other && Equals(other);
        public bool Equals(TemplateReferenceLineValueLabelRelativePosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateRelativeDateType : IEquatable<TemplateRelativeDateType>
    {
        private readonly string _value;

        private TemplateRelativeDateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateRelativeDateType Previous { get; } = new TemplateRelativeDateType("PREVIOUS");
        public static TemplateRelativeDateType This { get; } = new TemplateRelativeDateType("THIS");
        public static TemplateRelativeDateType Last { get; } = new TemplateRelativeDateType("LAST");
        public static TemplateRelativeDateType Now { get; } = new TemplateRelativeDateType("NOW");
        public static TemplateRelativeDateType Next { get; } = new TemplateRelativeDateType("NEXT");

        public static bool operator ==(TemplateRelativeDateType left, TemplateRelativeDateType right) => left.Equals(right);
        public static bool operator !=(TemplateRelativeDateType left, TemplateRelativeDateType right) => !left.Equals(right);

        public static explicit operator string(TemplateRelativeDateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateRelativeDateType other && Equals(other);
        public bool Equals(TemplateRelativeDateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateRelativeFontSize : IEquatable<TemplateRelativeFontSize>
    {
        private readonly string _value;

        private TemplateRelativeFontSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateRelativeFontSize ExtraSmall { get; } = new TemplateRelativeFontSize("EXTRA_SMALL");
        public static TemplateRelativeFontSize Small { get; } = new TemplateRelativeFontSize("SMALL");
        public static TemplateRelativeFontSize Medium { get; } = new TemplateRelativeFontSize("MEDIUM");
        public static TemplateRelativeFontSize Large { get; } = new TemplateRelativeFontSize("LARGE");
        public static TemplateRelativeFontSize ExtraLarge { get; } = new TemplateRelativeFontSize("EXTRA_LARGE");

        public static bool operator ==(TemplateRelativeFontSize left, TemplateRelativeFontSize right) => left.Equals(right);
        public static bool operator !=(TemplateRelativeFontSize left, TemplateRelativeFontSize right) => !left.Equals(right);

        public static explicit operator string(TemplateRelativeFontSize value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateRelativeFontSize other && Equals(other);
        public bool Equals(TemplateRelativeFontSize other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateResizeOption : IEquatable<TemplateResizeOption>
    {
        private readonly string _value;

        private TemplateResizeOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateResizeOption Fixed { get; } = new TemplateResizeOption("FIXED");
        public static TemplateResizeOption Responsive { get; } = new TemplateResizeOption("RESPONSIVE");

        public static bool operator ==(TemplateResizeOption left, TemplateResizeOption right) => left.Equals(right);
        public static bool operator !=(TemplateResizeOption left, TemplateResizeOption right) => !left.Equals(right);

        public static explicit operator string(TemplateResizeOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateResizeOption other && Equals(other);
        public bool Equals(TemplateResizeOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateResourceStatus : IEquatable<TemplateResourceStatus>
    {
        private readonly string _value;

        private TemplateResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateResourceStatus CreationInProgress { get; } = new TemplateResourceStatus("CREATION_IN_PROGRESS");
        public static TemplateResourceStatus CreationSuccessful { get; } = new TemplateResourceStatus("CREATION_SUCCESSFUL");
        public static TemplateResourceStatus CreationFailed { get; } = new TemplateResourceStatus("CREATION_FAILED");
        public static TemplateResourceStatus UpdateInProgress { get; } = new TemplateResourceStatus("UPDATE_IN_PROGRESS");
        public static TemplateResourceStatus UpdateSuccessful { get; } = new TemplateResourceStatus("UPDATE_SUCCESSFUL");
        public static TemplateResourceStatus UpdateFailed { get; } = new TemplateResourceStatus("UPDATE_FAILED");
        public static TemplateResourceStatus Deleted { get; } = new TemplateResourceStatus("DELETED");

        public static bool operator ==(TemplateResourceStatus left, TemplateResourceStatus right) => left.Equals(right);
        public static bool operator !=(TemplateResourceStatus left, TemplateResourceStatus right) => !left.Equals(right);

        public static explicit operator string(TemplateResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateResourceStatus other && Equals(other);
        public bool Equals(TemplateResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSectionPageBreakStatus : IEquatable<TemplateSectionPageBreakStatus>
    {
        private readonly string _value;

        private TemplateSectionPageBreakStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSectionPageBreakStatus Enabled { get; } = new TemplateSectionPageBreakStatus("ENABLED");
        public static TemplateSectionPageBreakStatus Disabled { get; } = new TemplateSectionPageBreakStatus("DISABLED");

        public static bool operator ==(TemplateSectionPageBreakStatus left, TemplateSectionPageBreakStatus right) => left.Equals(right);
        public static bool operator !=(TemplateSectionPageBreakStatus left, TemplateSectionPageBreakStatus right) => !left.Equals(right);

        public static explicit operator string(TemplateSectionPageBreakStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSectionPageBreakStatus other && Equals(other);
        public bool Equals(TemplateSectionPageBreakStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSelectAllValueOptions : IEquatable<TemplateSelectAllValueOptions>
    {
        private readonly string _value;

        private TemplateSelectAllValueOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSelectAllValueOptions AllValues { get; } = new TemplateSelectAllValueOptions("ALL_VALUES");

        public static bool operator ==(TemplateSelectAllValueOptions left, TemplateSelectAllValueOptions right) => left.Equals(right);
        public static bool operator !=(TemplateSelectAllValueOptions left, TemplateSelectAllValueOptions right) => !left.Equals(right);

        public static explicit operator string(TemplateSelectAllValueOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSelectAllValueOptions other && Equals(other);
        public bool Equals(TemplateSelectAllValueOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSelectedFieldOptions : IEquatable<TemplateSelectedFieldOptions>
    {
        private readonly string _value;

        private TemplateSelectedFieldOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSelectedFieldOptions AllFields { get; } = new TemplateSelectedFieldOptions("ALL_FIELDS");

        public static bool operator ==(TemplateSelectedFieldOptions left, TemplateSelectedFieldOptions right) => left.Equals(right);
        public static bool operator !=(TemplateSelectedFieldOptions left, TemplateSelectedFieldOptions right) => !left.Equals(right);

        public static explicit operator string(TemplateSelectedFieldOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSelectedFieldOptions other && Equals(other);
        public bool Equals(TemplateSelectedFieldOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSelectedTooltipType : IEquatable<TemplateSelectedTooltipType>
    {
        private readonly string _value;

        private TemplateSelectedTooltipType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSelectedTooltipType Basic { get; } = new TemplateSelectedTooltipType("BASIC");
        public static TemplateSelectedTooltipType Detailed { get; } = new TemplateSelectedTooltipType("DETAILED");

        public static bool operator ==(TemplateSelectedTooltipType left, TemplateSelectedTooltipType right) => left.Equals(right);
        public static bool operator !=(TemplateSelectedTooltipType left, TemplateSelectedTooltipType right) => !left.Equals(right);

        public static explicit operator string(TemplateSelectedTooltipType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSelectedTooltipType other && Equals(other);
        public bool Equals(TemplateSelectedTooltipType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSheetContentType : IEquatable<TemplateSheetContentType>
    {
        private readonly string _value;

        private TemplateSheetContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSheetContentType Paginated { get; } = new TemplateSheetContentType("PAGINATED");
        public static TemplateSheetContentType Interactive { get; } = new TemplateSheetContentType("INTERACTIVE");

        public static bool operator ==(TemplateSheetContentType left, TemplateSheetContentType right) => left.Equals(right);
        public static bool operator !=(TemplateSheetContentType left, TemplateSheetContentType right) => !left.Equals(right);

        public static explicit operator string(TemplateSheetContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSheetContentType other && Equals(other);
        public bool Equals(TemplateSheetContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSheetControlDateTimePickerType : IEquatable<TemplateSheetControlDateTimePickerType>
    {
        private readonly string _value;

        private TemplateSheetControlDateTimePickerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSheetControlDateTimePickerType SingleValued { get; } = new TemplateSheetControlDateTimePickerType("SINGLE_VALUED");
        public static TemplateSheetControlDateTimePickerType DateRange { get; } = new TemplateSheetControlDateTimePickerType("DATE_RANGE");

        public static bool operator ==(TemplateSheetControlDateTimePickerType left, TemplateSheetControlDateTimePickerType right) => left.Equals(right);
        public static bool operator !=(TemplateSheetControlDateTimePickerType left, TemplateSheetControlDateTimePickerType right) => !left.Equals(right);

        public static explicit operator string(TemplateSheetControlDateTimePickerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSheetControlDateTimePickerType other && Equals(other);
        public bool Equals(TemplateSheetControlDateTimePickerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSheetControlListType : IEquatable<TemplateSheetControlListType>
    {
        private readonly string _value;

        private TemplateSheetControlListType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSheetControlListType MultiSelect { get; } = new TemplateSheetControlListType("MULTI_SELECT");
        public static TemplateSheetControlListType SingleSelect { get; } = new TemplateSheetControlListType("SINGLE_SELECT");

        public static bool operator ==(TemplateSheetControlListType left, TemplateSheetControlListType right) => left.Equals(right);
        public static bool operator !=(TemplateSheetControlListType left, TemplateSheetControlListType right) => !left.Equals(right);

        public static explicit operator string(TemplateSheetControlListType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSheetControlListType other && Equals(other);
        public bool Equals(TemplateSheetControlListType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSheetControlSliderType : IEquatable<TemplateSheetControlSliderType>
    {
        private readonly string _value;

        private TemplateSheetControlSliderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSheetControlSliderType SinglePoint { get; } = new TemplateSheetControlSliderType("SINGLE_POINT");
        public static TemplateSheetControlSliderType Range { get; } = new TemplateSheetControlSliderType("RANGE");

        public static bool operator ==(TemplateSheetControlSliderType left, TemplateSheetControlSliderType right) => left.Equals(right);
        public static bool operator !=(TemplateSheetControlSliderType left, TemplateSheetControlSliderType right) => !left.Equals(right);

        public static explicit operator string(TemplateSheetControlSliderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSheetControlSliderType other && Equals(other);
        public bool Equals(TemplateSheetControlSliderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSimpleAttributeAggregationFunction : IEquatable<TemplateSimpleAttributeAggregationFunction>
    {
        private readonly string _value;

        private TemplateSimpleAttributeAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSimpleAttributeAggregationFunction UniqueValue { get; } = new TemplateSimpleAttributeAggregationFunction("UNIQUE_VALUE");

        public static bool operator ==(TemplateSimpleAttributeAggregationFunction left, TemplateSimpleAttributeAggregationFunction right) => left.Equals(right);
        public static bool operator !=(TemplateSimpleAttributeAggregationFunction left, TemplateSimpleAttributeAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(TemplateSimpleAttributeAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSimpleAttributeAggregationFunction other && Equals(other);
        public bool Equals(TemplateSimpleAttributeAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSimpleNumericalAggregationFunction : IEquatable<TemplateSimpleNumericalAggregationFunction>
    {
        private readonly string _value;

        private TemplateSimpleNumericalAggregationFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSimpleNumericalAggregationFunction Sum { get; } = new TemplateSimpleNumericalAggregationFunction("SUM");
        public static TemplateSimpleNumericalAggregationFunction Average { get; } = new TemplateSimpleNumericalAggregationFunction("AVERAGE");
        public static TemplateSimpleNumericalAggregationFunction Min { get; } = new TemplateSimpleNumericalAggregationFunction("MIN");
        public static TemplateSimpleNumericalAggregationFunction Max { get; } = new TemplateSimpleNumericalAggregationFunction("MAX");
        public static TemplateSimpleNumericalAggregationFunction Count { get; } = new TemplateSimpleNumericalAggregationFunction("COUNT");
        public static TemplateSimpleNumericalAggregationFunction DistinctCount { get; } = new TemplateSimpleNumericalAggregationFunction("DISTINCT_COUNT");
        public static TemplateSimpleNumericalAggregationFunction Var { get; } = new TemplateSimpleNumericalAggregationFunction("VAR");
        public static TemplateSimpleNumericalAggregationFunction Varp { get; } = new TemplateSimpleNumericalAggregationFunction("VARP");
        public static TemplateSimpleNumericalAggregationFunction Stdev { get; } = new TemplateSimpleNumericalAggregationFunction("STDEV");
        public static TemplateSimpleNumericalAggregationFunction Stdevp { get; } = new TemplateSimpleNumericalAggregationFunction("STDEVP");
        public static TemplateSimpleNumericalAggregationFunction Median { get; } = new TemplateSimpleNumericalAggregationFunction("MEDIAN");

        public static bool operator ==(TemplateSimpleNumericalAggregationFunction left, TemplateSimpleNumericalAggregationFunction right) => left.Equals(right);
        public static bool operator !=(TemplateSimpleNumericalAggregationFunction left, TemplateSimpleNumericalAggregationFunction right) => !left.Equals(right);

        public static explicit operator string(TemplateSimpleNumericalAggregationFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSimpleNumericalAggregationFunction other && Equals(other);
        public bool Equals(TemplateSimpleNumericalAggregationFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSmallMultiplesAxisPlacement : IEquatable<TemplateSmallMultiplesAxisPlacement>
    {
        private readonly string _value;

        private TemplateSmallMultiplesAxisPlacement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSmallMultiplesAxisPlacement Outside { get; } = new TemplateSmallMultiplesAxisPlacement("OUTSIDE");
        public static TemplateSmallMultiplesAxisPlacement Inside { get; } = new TemplateSmallMultiplesAxisPlacement("INSIDE");

        public static bool operator ==(TemplateSmallMultiplesAxisPlacement left, TemplateSmallMultiplesAxisPlacement right) => left.Equals(right);
        public static bool operator !=(TemplateSmallMultiplesAxisPlacement left, TemplateSmallMultiplesAxisPlacement right) => !left.Equals(right);

        public static explicit operator string(TemplateSmallMultiplesAxisPlacement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSmallMultiplesAxisPlacement other && Equals(other);
        public bool Equals(TemplateSmallMultiplesAxisPlacement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSmallMultiplesAxisScale : IEquatable<TemplateSmallMultiplesAxisScale>
    {
        private readonly string _value;

        private TemplateSmallMultiplesAxisScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSmallMultiplesAxisScale Shared { get; } = new TemplateSmallMultiplesAxisScale("SHARED");
        public static TemplateSmallMultiplesAxisScale Independent { get; } = new TemplateSmallMultiplesAxisScale("INDEPENDENT");

        public static bool operator ==(TemplateSmallMultiplesAxisScale left, TemplateSmallMultiplesAxisScale right) => left.Equals(right);
        public static bool operator !=(TemplateSmallMultiplesAxisScale left, TemplateSmallMultiplesAxisScale right) => !left.Equals(right);

        public static explicit operator string(TemplateSmallMultiplesAxisScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSmallMultiplesAxisScale other && Equals(other);
        public bool Equals(TemplateSmallMultiplesAxisScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSortDirection : IEquatable<TemplateSortDirection>
    {
        private readonly string _value;

        private TemplateSortDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSortDirection Asc { get; } = new TemplateSortDirection("ASC");
        public static TemplateSortDirection Desc { get; } = new TemplateSortDirection("DESC");

        public static bool operator ==(TemplateSortDirection left, TemplateSortDirection right) => left.Equals(right);
        public static bool operator !=(TemplateSortDirection left, TemplateSortDirection right) => !left.Equals(right);

        public static explicit operator string(TemplateSortDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSortDirection other && Equals(other);
        public bool Equals(TemplateSortDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateSpecialValue : IEquatable<TemplateSpecialValue>
    {
        private readonly string _value;

        private TemplateSpecialValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateSpecialValue Empty { get; } = new TemplateSpecialValue("EMPTY");
        public static TemplateSpecialValue Null { get; } = new TemplateSpecialValue("NULL");
        public static TemplateSpecialValue Other { get; } = new TemplateSpecialValue("OTHER");

        public static bool operator ==(TemplateSpecialValue left, TemplateSpecialValue right) => left.Equals(right);
        public static bool operator !=(TemplateSpecialValue left, TemplateSpecialValue right) => !left.Equals(right);

        public static explicit operator string(TemplateSpecialValue value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateSpecialValue other && Equals(other);
        public bool Equals(TemplateSpecialValue other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateStyledCellType : IEquatable<TemplateStyledCellType>
    {
        private readonly string _value;

        private TemplateStyledCellType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateStyledCellType Total { get; } = new TemplateStyledCellType("TOTAL");
        public static TemplateStyledCellType MetricHeader { get; } = new TemplateStyledCellType("METRIC_HEADER");
        public static TemplateStyledCellType Value { get; } = new TemplateStyledCellType("VALUE");

        public static bool operator ==(TemplateStyledCellType left, TemplateStyledCellType right) => left.Equals(right);
        public static bool operator !=(TemplateStyledCellType left, TemplateStyledCellType right) => !left.Equals(right);

        public static explicit operator string(TemplateStyledCellType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateStyledCellType other && Equals(other);
        public bool Equals(TemplateStyledCellType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTableBorderStyle : IEquatable<TemplateTableBorderStyle>
    {
        private readonly string _value;

        private TemplateTableBorderStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTableBorderStyle None { get; } = new TemplateTableBorderStyle("NONE");
        public static TemplateTableBorderStyle Solid { get; } = new TemplateTableBorderStyle("SOLID");

        public static bool operator ==(TemplateTableBorderStyle left, TemplateTableBorderStyle right) => left.Equals(right);
        public static bool operator !=(TemplateTableBorderStyle left, TemplateTableBorderStyle right) => !left.Equals(right);

        public static explicit operator string(TemplateTableBorderStyle value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTableBorderStyle other && Equals(other);
        public bool Equals(TemplateTableBorderStyle other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTableCellImageScalingConfiguration : IEquatable<TemplateTableCellImageScalingConfiguration>
    {
        private readonly string _value;

        private TemplateTableCellImageScalingConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTableCellImageScalingConfiguration FitToCellHeight { get; } = new TemplateTableCellImageScalingConfiguration("FIT_TO_CELL_HEIGHT");
        public static TemplateTableCellImageScalingConfiguration FitToCellWidth { get; } = new TemplateTableCellImageScalingConfiguration("FIT_TO_CELL_WIDTH");
        public static TemplateTableCellImageScalingConfiguration DoNotScale { get; } = new TemplateTableCellImageScalingConfiguration("DO_NOT_SCALE");

        public static bool operator ==(TemplateTableCellImageScalingConfiguration left, TemplateTableCellImageScalingConfiguration right) => left.Equals(right);
        public static bool operator !=(TemplateTableCellImageScalingConfiguration left, TemplateTableCellImageScalingConfiguration right) => !left.Equals(right);

        public static explicit operator string(TemplateTableCellImageScalingConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTableCellImageScalingConfiguration other && Equals(other);
        public bool Equals(TemplateTableCellImageScalingConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTableFieldIconSetType : IEquatable<TemplateTableFieldIconSetType>
    {
        private readonly string _value;

        private TemplateTableFieldIconSetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTableFieldIconSetType Link { get; } = new TemplateTableFieldIconSetType("LINK");

        public static bool operator ==(TemplateTableFieldIconSetType left, TemplateTableFieldIconSetType right) => left.Equals(right);
        public static bool operator !=(TemplateTableFieldIconSetType left, TemplateTableFieldIconSetType right) => !left.Equals(right);

        public static explicit operator string(TemplateTableFieldIconSetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTableFieldIconSetType other && Equals(other);
        public bool Equals(TemplateTableFieldIconSetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTableOrientation : IEquatable<TemplateTableOrientation>
    {
        private readonly string _value;

        private TemplateTableOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTableOrientation Vertical { get; } = new TemplateTableOrientation("VERTICAL");
        public static TemplateTableOrientation Horizontal { get; } = new TemplateTableOrientation("HORIZONTAL");

        public static bool operator ==(TemplateTableOrientation left, TemplateTableOrientation right) => left.Equals(right);
        public static bool operator !=(TemplateTableOrientation left, TemplateTableOrientation right) => !left.Equals(right);

        public static explicit operator string(TemplateTableOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTableOrientation other && Equals(other);
        public bool Equals(TemplateTableOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTableTotalsPlacement : IEquatable<TemplateTableTotalsPlacement>
    {
        private readonly string _value;

        private TemplateTableTotalsPlacement(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTableTotalsPlacement Start { get; } = new TemplateTableTotalsPlacement("START");
        public static TemplateTableTotalsPlacement End { get; } = new TemplateTableTotalsPlacement("END");

        public static bool operator ==(TemplateTableTotalsPlacement left, TemplateTableTotalsPlacement right) => left.Equals(right);
        public static bool operator !=(TemplateTableTotalsPlacement left, TemplateTableTotalsPlacement right) => !left.Equals(right);

        public static explicit operator string(TemplateTableTotalsPlacement value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTableTotalsPlacement other && Equals(other);
        public bool Equals(TemplateTableTotalsPlacement other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTableTotalsScrollStatus : IEquatable<TemplateTableTotalsScrollStatus>
    {
        private readonly string _value;

        private TemplateTableTotalsScrollStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTableTotalsScrollStatus Pinned { get; } = new TemplateTableTotalsScrollStatus("PINNED");
        public static TemplateTableTotalsScrollStatus Scrolled { get; } = new TemplateTableTotalsScrollStatus("SCROLLED");

        public static bool operator ==(TemplateTableTotalsScrollStatus left, TemplateTableTotalsScrollStatus right) => left.Equals(right);
        public static bool operator !=(TemplateTableTotalsScrollStatus left, TemplateTableTotalsScrollStatus right) => !left.Equals(right);

        public static explicit operator string(TemplateTableTotalsScrollStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTableTotalsScrollStatus other && Equals(other);
        public bool Equals(TemplateTableTotalsScrollStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTargetVisualOptions : IEquatable<TemplateTargetVisualOptions>
    {
        private readonly string _value;

        private TemplateTargetVisualOptions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTargetVisualOptions AllVisuals { get; } = new TemplateTargetVisualOptions("ALL_VISUALS");

        public static bool operator ==(TemplateTargetVisualOptions left, TemplateTargetVisualOptions right) => left.Equals(right);
        public static bool operator !=(TemplateTargetVisualOptions left, TemplateTargetVisualOptions right) => !left.Equals(right);

        public static explicit operator string(TemplateTargetVisualOptions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTargetVisualOptions other && Equals(other);
        public bool Equals(TemplateTargetVisualOptions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTextWrap : IEquatable<TemplateTextWrap>
    {
        private readonly string _value;

        private TemplateTextWrap(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTextWrap None { get; } = new TemplateTextWrap("NONE");
        public static TemplateTextWrap Wrap { get; } = new TemplateTextWrap("WRAP");

        public static bool operator ==(TemplateTextWrap left, TemplateTextWrap right) => left.Equals(right);
        public static bool operator !=(TemplateTextWrap left, TemplateTextWrap right) => !left.Equals(right);

        public static explicit operator string(TemplateTextWrap value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTextWrap other && Equals(other);
        public bool Equals(TemplateTextWrap other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTimeGranularity : IEquatable<TemplateTimeGranularity>
    {
        private readonly string _value;

        private TemplateTimeGranularity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTimeGranularity Year { get; } = new TemplateTimeGranularity("YEAR");
        public static TemplateTimeGranularity Quarter { get; } = new TemplateTimeGranularity("QUARTER");
        public static TemplateTimeGranularity Month { get; } = new TemplateTimeGranularity("MONTH");
        public static TemplateTimeGranularity Week { get; } = new TemplateTimeGranularity("WEEK");
        public static TemplateTimeGranularity Day { get; } = new TemplateTimeGranularity("DAY");
        public static TemplateTimeGranularity Hour { get; } = new TemplateTimeGranularity("HOUR");
        public static TemplateTimeGranularity Minute { get; } = new TemplateTimeGranularity("MINUTE");
        public static TemplateTimeGranularity Second { get; } = new TemplateTimeGranularity("SECOND");
        public static TemplateTimeGranularity Millisecond { get; } = new TemplateTimeGranularity("MILLISECOND");

        public static bool operator ==(TemplateTimeGranularity left, TemplateTimeGranularity right) => left.Equals(right);
        public static bool operator !=(TemplateTimeGranularity left, TemplateTimeGranularity right) => !left.Equals(right);

        public static explicit operator string(TemplateTimeGranularity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTimeGranularity other && Equals(other);
        public bool Equals(TemplateTimeGranularity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTooltipTitleType : IEquatable<TemplateTooltipTitleType>
    {
        private readonly string _value;

        private TemplateTooltipTitleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTooltipTitleType None { get; } = new TemplateTooltipTitleType("NONE");
        public static TemplateTooltipTitleType PrimaryValue { get; } = new TemplateTooltipTitleType("PRIMARY_VALUE");

        public static bool operator ==(TemplateTooltipTitleType left, TemplateTooltipTitleType right) => left.Equals(right);
        public static bool operator !=(TemplateTooltipTitleType left, TemplateTooltipTitleType right) => !left.Equals(right);

        public static explicit operator string(TemplateTooltipTitleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTooltipTitleType other && Equals(other);
        public bool Equals(TemplateTooltipTitleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTopBottomComputationType : IEquatable<TemplateTopBottomComputationType>
    {
        private readonly string _value;

        private TemplateTopBottomComputationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTopBottomComputationType Top { get; } = new TemplateTopBottomComputationType("TOP");
        public static TemplateTopBottomComputationType Bottom { get; } = new TemplateTopBottomComputationType("BOTTOM");

        public static bool operator ==(TemplateTopBottomComputationType left, TemplateTopBottomComputationType right) => left.Equals(right);
        public static bool operator !=(TemplateTopBottomComputationType left, TemplateTopBottomComputationType right) => !left.Equals(right);

        public static explicit operator string(TemplateTopBottomComputationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTopBottomComputationType other && Equals(other);
        public bool Equals(TemplateTopBottomComputationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTopBottomSortOrder : IEquatable<TemplateTopBottomSortOrder>
    {
        private readonly string _value;

        private TemplateTopBottomSortOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTopBottomSortOrder PercentDifference { get; } = new TemplateTopBottomSortOrder("PERCENT_DIFFERENCE");
        public static TemplateTopBottomSortOrder AbsoluteDifference { get; } = new TemplateTopBottomSortOrder("ABSOLUTE_DIFFERENCE");

        public static bool operator ==(TemplateTopBottomSortOrder left, TemplateTopBottomSortOrder right) => left.Equals(right);
        public static bool operator !=(TemplateTopBottomSortOrder left, TemplateTopBottomSortOrder right) => !left.Equals(right);

        public static explicit operator string(TemplateTopBottomSortOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTopBottomSortOrder other && Equals(other);
        public bool Equals(TemplateTopBottomSortOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateUrlTargetConfiguration : IEquatable<TemplateUrlTargetConfiguration>
    {
        private readonly string _value;

        private TemplateUrlTargetConfiguration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateUrlTargetConfiguration NewTab { get; } = new TemplateUrlTargetConfiguration("NEW_TAB");
        public static TemplateUrlTargetConfiguration NewWindow { get; } = new TemplateUrlTargetConfiguration("NEW_WINDOW");
        public static TemplateUrlTargetConfiguration SameTab { get; } = new TemplateUrlTargetConfiguration("SAME_TAB");

        public static bool operator ==(TemplateUrlTargetConfiguration left, TemplateUrlTargetConfiguration right) => left.Equals(right);
        public static bool operator !=(TemplateUrlTargetConfiguration left, TemplateUrlTargetConfiguration right) => !left.Equals(right);

        public static explicit operator string(TemplateUrlTargetConfiguration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateUrlTargetConfiguration other && Equals(other);
        public bool Equals(TemplateUrlTargetConfiguration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateValueWhenUnsetOption : IEquatable<TemplateValueWhenUnsetOption>
    {
        private readonly string _value;

        private TemplateValueWhenUnsetOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateValueWhenUnsetOption RecommendedValue { get; } = new TemplateValueWhenUnsetOption("RECOMMENDED_VALUE");
        public static TemplateValueWhenUnsetOption Null { get; } = new TemplateValueWhenUnsetOption("NULL");

        public static bool operator ==(TemplateValueWhenUnsetOption left, TemplateValueWhenUnsetOption right) => left.Equals(right);
        public static bool operator !=(TemplateValueWhenUnsetOption left, TemplateValueWhenUnsetOption right) => !left.Equals(right);

        public static explicit operator string(TemplateValueWhenUnsetOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateValueWhenUnsetOption other && Equals(other);
        public bool Equals(TemplateValueWhenUnsetOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateVerticalTextAlignment : IEquatable<TemplateVerticalTextAlignment>
    {
        private readonly string _value;

        private TemplateVerticalTextAlignment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateVerticalTextAlignment Top { get; } = new TemplateVerticalTextAlignment("TOP");
        public static TemplateVerticalTextAlignment Middle { get; } = new TemplateVerticalTextAlignment("MIDDLE");
        public static TemplateVerticalTextAlignment Bottom { get; } = new TemplateVerticalTextAlignment("BOTTOM");
        public static TemplateVerticalTextAlignment Auto { get; } = new TemplateVerticalTextAlignment("AUTO");

        public static bool operator ==(TemplateVerticalTextAlignment left, TemplateVerticalTextAlignment right) => left.Equals(right);
        public static bool operator !=(TemplateVerticalTextAlignment left, TemplateVerticalTextAlignment right) => !left.Equals(right);

        public static explicit operator string(TemplateVerticalTextAlignment value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateVerticalTextAlignment other && Equals(other);
        public bool Equals(TemplateVerticalTextAlignment other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateVisibility : IEquatable<TemplateVisibility>
    {
        private readonly string _value;

        private TemplateVisibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateVisibility Hidden { get; } = new TemplateVisibility("HIDDEN");
        public static TemplateVisibility Visible { get; } = new TemplateVisibility("VISIBLE");

        public static bool operator ==(TemplateVisibility left, TemplateVisibility right) => left.Equals(right);
        public static bool operator !=(TemplateVisibility left, TemplateVisibility right) => !left.Equals(right);

        public static explicit operator string(TemplateVisibility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateVisibility other && Equals(other);
        public bool Equals(TemplateVisibility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateVisualCustomActionTrigger : IEquatable<TemplateVisualCustomActionTrigger>
    {
        private readonly string _value;

        private TemplateVisualCustomActionTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateVisualCustomActionTrigger DataPointClick { get; } = new TemplateVisualCustomActionTrigger("DATA_POINT_CLICK");
        public static TemplateVisualCustomActionTrigger DataPointMenu { get; } = new TemplateVisualCustomActionTrigger("DATA_POINT_MENU");

        public static bool operator ==(TemplateVisualCustomActionTrigger left, TemplateVisualCustomActionTrigger right) => left.Equals(right);
        public static bool operator !=(TemplateVisualCustomActionTrigger left, TemplateVisualCustomActionTrigger right) => !left.Equals(right);

        public static explicit operator string(TemplateVisualCustomActionTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateVisualCustomActionTrigger other && Equals(other);
        public bool Equals(TemplateVisualCustomActionTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateWidgetStatus : IEquatable<TemplateWidgetStatus>
    {
        private readonly string _value;

        private TemplateWidgetStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateWidgetStatus Enabled { get; } = new TemplateWidgetStatus("ENABLED");
        public static TemplateWidgetStatus Disabled { get; } = new TemplateWidgetStatus("DISABLED");

        public static bool operator ==(TemplateWidgetStatus left, TemplateWidgetStatus right) => left.Equals(right);
        public static bool operator !=(TemplateWidgetStatus left, TemplateWidgetStatus right) => !left.Equals(right);

        public static explicit operator string(TemplateWidgetStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateWidgetStatus other && Equals(other);
        public bool Equals(TemplateWidgetStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateWordCloudCloudLayout : IEquatable<TemplateWordCloudCloudLayout>
    {
        private readonly string _value;

        private TemplateWordCloudCloudLayout(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateWordCloudCloudLayout Fluid { get; } = new TemplateWordCloudCloudLayout("FLUID");
        public static TemplateWordCloudCloudLayout Normal { get; } = new TemplateWordCloudCloudLayout("NORMAL");

        public static bool operator ==(TemplateWordCloudCloudLayout left, TemplateWordCloudCloudLayout right) => left.Equals(right);
        public static bool operator !=(TemplateWordCloudCloudLayout left, TemplateWordCloudCloudLayout right) => !left.Equals(right);

        public static explicit operator string(TemplateWordCloudCloudLayout value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateWordCloudCloudLayout other && Equals(other);
        public bool Equals(TemplateWordCloudCloudLayout other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateWordCloudWordCasing : IEquatable<TemplateWordCloudWordCasing>
    {
        private readonly string _value;

        private TemplateWordCloudWordCasing(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateWordCloudWordCasing LowerCase { get; } = new TemplateWordCloudWordCasing("LOWER_CASE");
        public static TemplateWordCloudWordCasing ExistingCase { get; } = new TemplateWordCloudWordCasing("EXISTING_CASE");

        public static bool operator ==(TemplateWordCloudWordCasing left, TemplateWordCloudWordCasing right) => left.Equals(right);
        public static bool operator !=(TemplateWordCloudWordCasing left, TemplateWordCloudWordCasing right) => !left.Equals(right);

        public static explicit operator string(TemplateWordCloudWordCasing value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateWordCloudWordCasing other && Equals(other);
        public bool Equals(TemplateWordCloudWordCasing other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateWordCloudWordOrientation : IEquatable<TemplateWordCloudWordOrientation>
    {
        private readonly string _value;

        private TemplateWordCloudWordOrientation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateWordCloudWordOrientation Horizontal { get; } = new TemplateWordCloudWordOrientation("HORIZONTAL");
        public static TemplateWordCloudWordOrientation HorizontalAndVertical { get; } = new TemplateWordCloudWordOrientation("HORIZONTAL_AND_VERTICAL");

        public static bool operator ==(TemplateWordCloudWordOrientation left, TemplateWordCloudWordOrientation right) => left.Equals(right);
        public static bool operator !=(TemplateWordCloudWordOrientation left, TemplateWordCloudWordOrientation right) => !left.Equals(right);

        public static explicit operator string(TemplateWordCloudWordOrientation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateWordCloudWordOrientation other && Equals(other);
        public bool Equals(TemplateWordCloudWordOrientation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateWordCloudWordPadding : IEquatable<TemplateWordCloudWordPadding>
    {
        private readonly string _value;

        private TemplateWordCloudWordPadding(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateWordCloudWordPadding None { get; } = new TemplateWordCloudWordPadding("NONE");
        public static TemplateWordCloudWordPadding Small { get; } = new TemplateWordCloudWordPadding("SMALL");
        public static TemplateWordCloudWordPadding Medium { get; } = new TemplateWordCloudWordPadding("MEDIUM");
        public static TemplateWordCloudWordPadding Large { get; } = new TemplateWordCloudWordPadding("LARGE");

        public static bool operator ==(TemplateWordCloudWordPadding left, TemplateWordCloudWordPadding right) => left.Equals(right);
        public static bool operator !=(TemplateWordCloudWordPadding left, TemplateWordCloudWordPadding right) => !left.Equals(right);

        public static explicit operator string(TemplateWordCloudWordPadding value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateWordCloudWordPadding other && Equals(other);
        public bool Equals(TemplateWordCloudWordPadding other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateWordCloudWordScaling : IEquatable<TemplateWordCloudWordScaling>
    {
        private readonly string _value;

        private TemplateWordCloudWordScaling(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateWordCloudWordScaling Emphasize { get; } = new TemplateWordCloudWordScaling("EMPHASIZE");
        public static TemplateWordCloudWordScaling Normal { get; } = new TemplateWordCloudWordScaling("NORMAL");

        public static bool operator ==(TemplateWordCloudWordScaling left, TemplateWordCloudWordScaling right) => left.Equals(right);
        public static bool operator !=(TemplateWordCloudWordScaling left, TemplateWordCloudWordScaling right) => !left.Equals(right);

        public static explicit operator string(TemplateWordCloudWordScaling value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateWordCloudWordScaling other && Equals(other);
        public bool Equals(TemplateWordCloudWordScaling other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThemeErrorType : IEquatable<ThemeErrorType>
    {
        private readonly string _value;

        private ThemeErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThemeErrorType InternalFailure { get; } = new ThemeErrorType("INTERNAL_FAILURE");

        public static bool operator ==(ThemeErrorType left, ThemeErrorType right) => left.Equals(right);
        public static bool operator !=(ThemeErrorType left, ThemeErrorType right) => !left.Equals(right);

        public static explicit operator string(ThemeErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThemeErrorType other && Equals(other);
        public bool Equals(ThemeErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThemeResourceStatus : IEquatable<ThemeResourceStatus>
    {
        private readonly string _value;

        private ThemeResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThemeResourceStatus CreationInProgress { get; } = new ThemeResourceStatus("CREATION_IN_PROGRESS");
        public static ThemeResourceStatus CreationSuccessful { get; } = new ThemeResourceStatus("CREATION_SUCCESSFUL");
        public static ThemeResourceStatus CreationFailed { get; } = new ThemeResourceStatus("CREATION_FAILED");
        public static ThemeResourceStatus UpdateInProgress { get; } = new ThemeResourceStatus("UPDATE_IN_PROGRESS");
        public static ThemeResourceStatus UpdateSuccessful { get; } = new ThemeResourceStatus("UPDATE_SUCCESSFUL");
        public static ThemeResourceStatus UpdateFailed { get; } = new ThemeResourceStatus("UPDATE_FAILED");
        public static ThemeResourceStatus Deleted { get; } = new ThemeResourceStatus("DELETED");

        public static bool operator ==(ThemeResourceStatus left, ThemeResourceStatus right) => left.Equals(right);
        public static bool operator !=(ThemeResourceStatus left, ThemeResourceStatus right) => !left.Equals(right);

        public static explicit operator string(ThemeResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThemeResourceStatus other && Equals(other);
        public bool Equals(ThemeResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThemeType : IEquatable<ThemeType>
    {
        private readonly string _value;

        private ThemeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThemeType Quicksight { get; } = new ThemeType("QUICKSIGHT");
        public static ThemeType Custom { get; } = new ThemeType("CUSTOM");
        public static ThemeType All { get; } = new ThemeType("ALL");

        public static bool operator ==(ThemeType left, ThemeType right) => left.Equals(right);
        public static bool operator !=(ThemeType left, ThemeType right) => !left.Equals(right);

        public static explicit operator string(ThemeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThemeType other && Equals(other);
        public bool Equals(ThemeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicAuthorSpecifiedAggregation : IEquatable<TopicAuthorSpecifiedAggregation>
    {
        private readonly string _value;

        private TopicAuthorSpecifiedAggregation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicAuthorSpecifiedAggregation Count { get; } = new TopicAuthorSpecifiedAggregation("COUNT");
        public static TopicAuthorSpecifiedAggregation DistinctCount { get; } = new TopicAuthorSpecifiedAggregation("DISTINCT_COUNT");
        public static TopicAuthorSpecifiedAggregation Min { get; } = new TopicAuthorSpecifiedAggregation("MIN");
        public static TopicAuthorSpecifiedAggregation Max { get; } = new TopicAuthorSpecifiedAggregation("MAX");
        public static TopicAuthorSpecifiedAggregation Median { get; } = new TopicAuthorSpecifiedAggregation("MEDIAN");
        public static TopicAuthorSpecifiedAggregation Sum { get; } = new TopicAuthorSpecifiedAggregation("SUM");
        public static TopicAuthorSpecifiedAggregation Average { get; } = new TopicAuthorSpecifiedAggregation("AVERAGE");
        public static TopicAuthorSpecifiedAggregation Stdev { get; } = new TopicAuthorSpecifiedAggregation("STDEV");
        public static TopicAuthorSpecifiedAggregation Stdevp { get; } = new TopicAuthorSpecifiedAggregation("STDEVP");
        public static TopicAuthorSpecifiedAggregation Var { get; } = new TopicAuthorSpecifiedAggregation("VAR");
        public static TopicAuthorSpecifiedAggregation Varp { get; } = new TopicAuthorSpecifiedAggregation("VARP");
        public static TopicAuthorSpecifiedAggregation Percentile { get; } = new TopicAuthorSpecifiedAggregation("PERCENTILE");

        public static bool operator ==(TopicAuthorSpecifiedAggregation left, TopicAuthorSpecifiedAggregation right) => left.Equals(right);
        public static bool operator !=(TopicAuthorSpecifiedAggregation left, TopicAuthorSpecifiedAggregation right) => !left.Equals(right);

        public static explicit operator string(TopicAuthorSpecifiedAggregation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicAuthorSpecifiedAggregation other && Equals(other);
        public bool Equals(TopicAuthorSpecifiedAggregation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicCategoryFilterFunction : IEquatable<TopicCategoryFilterFunction>
    {
        private readonly string _value;

        private TopicCategoryFilterFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicCategoryFilterFunction Exact { get; } = new TopicCategoryFilterFunction("EXACT");
        public static TopicCategoryFilterFunction Contains { get; } = new TopicCategoryFilterFunction("CONTAINS");

        public static bool operator ==(TopicCategoryFilterFunction left, TopicCategoryFilterFunction right) => left.Equals(right);
        public static bool operator !=(TopicCategoryFilterFunction left, TopicCategoryFilterFunction right) => !left.Equals(right);

        public static explicit operator string(TopicCategoryFilterFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicCategoryFilterFunction other && Equals(other);
        public bool Equals(TopicCategoryFilterFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicCategoryFilterType : IEquatable<TopicCategoryFilterType>
    {
        private readonly string _value;

        private TopicCategoryFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicCategoryFilterType CustomFilter { get; } = new TopicCategoryFilterType("CUSTOM_FILTER");
        public static TopicCategoryFilterType CustomFilterList { get; } = new TopicCategoryFilterType("CUSTOM_FILTER_LIST");
        public static TopicCategoryFilterType FilterList { get; } = new TopicCategoryFilterType("FILTER_LIST");

        public static bool operator ==(TopicCategoryFilterType left, TopicCategoryFilterType right) => left.Equals(right);
        public static bool operator !=(TopicCategoryFilterType left, TopicCategoryFilterType right) => !left.Equals(right);

        public static explicit operator string(TopicCategoryFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicCategoryFilterType other && Equals(other);
        public bool Equals(TopicCategoryFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicColumnDataRole : IEquatable<TopicColumnDataRole>
    {
        private readonly string _value;

        private TopicColumnDataRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicColumnDataRole Dimension { get; } = new TopicColumnDataRole("DIMENSION");
        public static TopicColumnDataRole Measure { get; } = new TopicColumnDataRole("MEASURE");

        public static bool operator ==(TopicColumnDataRole left, TopicColumnDataRole right) => left.Equals(right);
        public static bool operator !=(TopicColumnDataRole left, TopicColumnDataRole right) => !left.Equals(right);

        public static explicit operator string(TopicColumnDataRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicColumnDataRole other && Equals(other);
        public bool Equals(TopicColumnDataRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicColumnOrderingType : IEquatable<TopicColumnOrderingType>
    {
        private readonly string _value;

        private TopicColumnOrderingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicColumnOrderingType GreaterIsBetter { get; } = new TopicColumnOrderingType("GREATER_IS_BETTER");
        public static TopicColumnOrderingType LesserIsBetter { get; } = new TopicColumnOrderingType("LESSER_IS_BETTER");
        public static TopicColumnOrderingType Specified { get; } = new TopicColumnOrderingType("SPECIFIED");

        public static bool operator ==(TopicColumnOrderingType left, TopicColumnOrderingType right) => left.Equals(right);
        public static bool operator !=(TopicColumnOrderingType left, TopicColumnOrderingType right) => !left.Equals(right);

        public static explicit operator string(TopicColumnOrderingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicColumnOrderingType other && Equals(other);
        public bool Equals(TopicColumnOrderingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicConstantType : IEquatable<TopicConstantType>
    {
        private readonly string _value;

        private TopicConstantType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicConstantType Singular { get; } = new TopicConstantType("SINGULAR");
        public static TopicConstantType Range { get; } = new TopicConstantType("RANGE");
        public static TopicConstantType Collective { get; } = new TopicConstantType("COLLECTIVE");

        public static bool operator ==(TopicConstantType left, TopicConstantType right) => left.Equals(right);
        public static bool operator !=(TopicConstantType left, TopicConstantType right) => !left.Equals(right);

        public static explicit operator string(TopicConstantType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicConstantType other && Equals(other);
        public bool Equals(TopicConstantType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicDefaultAggregation : IEquatable<TopicDefaultAggregation>
    {
        private readonly string _value;

        private TopicDefaultAggregation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicDefaultAggregation Sum { get; } = new TopicDefaultAggregation("SUM");
        public static TopicDefaultAggregation Max { get; } = new TopicDefaultAggregation("MAX");
        public static TopicDefaultAggregation Min { get; } = new TopicDefaultAggregation("MIN");
        public static TopicDefaultAggregation Count { get; } = new TopicDefaultAggregation("COUNT");
        public static TopicDefaultAggregation DistinctCount { get; } = new TopicDefaultAggregation("DISTINCT_COUNT");
        public static TopicDefaultAggregation Average { get; } = new TopicDefaultAggregation("AVERAGE");

        public static bool operator ==(TopicDefaultAggregation left, TopicDefaultAggregation right) => left.Equals(right);
        public static bool operator !=(TopicDefaultAggregation left, TopicDefaultAggregation right) => !left.Equals(right);

        public static explicit operator string(TopicDefaultAggregation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicDefaultAggregation other && Equals(other);
        public bool Equals(TopicDefaultAggregation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicDisplayFormat : IEquatable<TopicDisplayFormat>
    {
        private readonly string _value;

        private TopicDisplayFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicDisplayFormat Auto { get; } = new TopicDisplayFormat("AUTO");
        public static TopicDisplayFormat Percent { get; } = new TopicDisplayFormat("PERCENT");
        public static TopicDisplayFormat Currency { get; } = new TopicDisplayFormat("CURRENCY");
        public static TopicDisplayFormat Number { get; } = new TopicDisplayFormat("NUMBER");
        public static TopicDisplayFormat Date { get; } = new TopicDisplayFormat("DATE");
        public static TopicDisplayFormat String { get; } = new TopicDisplayFormat("STRING");

        public static bool operator ==(TopicDisplayFormat left, TopicDisplayFormat right) => left.Equals(right);
        public static bool operator !=(TopicDisplayFormat left, TopicDisplayFormat right) => !left.Equals(right);

        public static explicit operator string(TopicDisplayFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicDisplayFormat other && Equals(other);
        public bool Equals(TopicDisplayFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicFilterClass : IEquatable<TopicFilterClass>
    {
        private readonly string _value;

        private TopicFilterClass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicFilterClass EnforcedValueFilter { get; } = new TopicFilterClass("ENFORCED_VALUE_FILTER");
        public static TopicFilterClass ConditionalValueFilter { get; } = new TopicFilterClass("CONDITIONAL_VALUE_FILTER");
        public static TopicFilterClass NamedValueFilter { get; } = new TopicFilterClass("NAMED_VALUE_FILTER");

        public static bool operator ==(TopicFilterClass left, TopicFilterClass right) => left.Equals(right);
        public static bool operator !=(TopicFilterClass left, TopicFilterClass right) => !left.Equals(right);

        public static explicit operator string(TopicFilterClass value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicFilterClass other && Equals(other);
        public bool Equals(TopicFilterClass other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicNamedEntityAggType : IEquatable<TopicNamedEntityAggType>
    {
        private readonly string _value;

        private TopicNamedEntityAggType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicNamedEntityAggType Sum { get; } = new TopicNamedEntityAggType("SUM");
        public static TopicNamedEntityAggType Min { get; } = new TopicNamedEntityAggType("MIN");
        public static TopicNamedEntityAggType Max { get; } = new TopicNamedEntityAggType("MAX");
        public static TopicNamedEntityAggType Count { get; } = new TopicNamedEntityAggType("COUNT");
        public static TopicNamedEntityAggType Average { get; } = new TopicNamedEntityAggType("AVERAGE");
        public static TopicNamedEntityAggType DistinctCount { get; } = new TopicNamedEntityAggType("DISTINCT_COUNT");
        public static TopicNamedEntityAggType Stdev { get; } = new TopicNamedEntityAggType("STDEV");
        public static TopicNamedEntityAggType Stdevp { get; } = new TopicNamedEntityAggType("STDEVP");
        public static TopicNamedEntityAggType Var { get; } = new TopicNamedEntityAggType("VAR");
        public static TopicNamedEntityAggType Varp { get; } = new TopicNamedEntityAggType("VARP");
        public static TopicNamedEntityAggType Percentile { get; } = new TopicNamedEntityAggType("PERCENTILE");
        public static TopicNamedEntityAggType Median { get; } = new TopicNamedEntityAggType("MEDIAN");
        public static TopicNamedEntityAggType Custom { get; } = new TopicNamedEntityAggType("CUSTOM");

        public static bool operator ==(TopicNamedEntityAggType left, TopicNamedEntityAggType right) => left.Equals(right);
        public static bool operator !=(TopicNamedEntityAggType left, TopicNamedEntityAggType right) => !left.Equals(right);

        public static explicit operator string(TopicNamedEntityAggType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicNamedEntityAggType other && Equals(other);
        public bool Equals(TopicNamedEntityAggType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicNamedFilterAggType : IEquatable<TopicNamedFilterAggType>
    {
        private readonly string _value;

        private TopicNamedFilterAggType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicNamedFilterAggType NoAggregation { get; } = new TopicNamedFilterAggType("NO_AGGREGATION");
        public static TopicNamedFilterAggType Sum { get; } = new TopicNamedFilterAggType("SUM");
        public static TopicNamedFilterAggType Average { get; } = new TopicNamedFilterAggType("AVERAGE");
        public static TopicNamedFilterAggType Count { get; } = new TopicNamedFilterAggType("COUNT");
        public static TopicNamedFilterAggType DistinctCount { get; } = new TopicNamedFilterAggType("DISTINCT_COUNT");
        public static TopicNamedFilterAggType Max { get; } = new TopicNamedFilterAggType("MAX");
        public static TopicNamedFilterAggType Median { get; } = new TopicNamedFilterAggType("MEDIAN");
        public static TopicNamedFilterAggType Min { get; } = new TopicNamedFilterAggType("MIN");
        public static TopicNamedFilterAggType Stdev { get; } = new TopicNamedFilterAggType("STDEV");
        public static TopicNamedFilterAggType Stdevp { get; } = new TopicNamedFilterAggType("STDEVP");
        public static TopicNamedFilterAggType Var { get; } = new TopicNamedFilterAggType("VAR");
        public static TopicNamedFilterAggType Varp { get; } = new TopicNamedFilterAggType("VARP");

        public static bool operator ==(TopicNamedFilterAggType left, TopicNamedFilterAggType right) => left.Equals(right);
        public static bool operator !=(TopicNamedFilterAggType left, TopicNamedFilterAggType right) => !left.Equals(right);

        public static explicit operator string(TopicNamedFilterAggType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicNamedFilterAggType other && Equals(other);
        public bool Equals(TopicNamedFilterAggType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicNamedFilterType : IEquatable<TopicNamedFilterType>
    {
        private readonly string _value;

        private TopicNamedFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicNamedFilterType CategoryFilter { get; } = new TopicNamedFilterType("CATEGORY_FILTER");
        public static TopicNamedFilterType NumericEqualityFilter { get; } = new TopicNamedFilterType("NUMERIC_EQUALITY_FILTER");
        public static TopicNamedFilterType NumericRangeFilter { get; } = new TopicNamedFilterType("NUMERIC_RANGE_FILTER");
        public static TopicNamedFilterType DateRangeFilter { get; } = new TopicNamedFilterType("DATE_RANGE_FILTER");
        public static TopicNamedFilterType RelativeDateFilter { get; } = new TopicNamedFilterType("RELATIVE_DATE_FILTER");

        public static bool operator ==(TopicNamedFilterType left, TopicNamedFilterType right) => left.Equals(right);
        public static bool operator !=(TopicNamedFilterType left, TopicNamedFilterType right) => !left.Equals(right);

        public static explicit operator string(TopicNamedFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicNamedFilterType other && Equals(other);
        public bool Equals(TopicNamedFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicNumberScale : IEquatable<TopicNumberScale>
    {
        private readonly string _value;

        private TopicNumberScale(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicNumberScale None { get; } = new TopicNumberScale("NONE");
        public static TopicNumberScale Auto { get; } = new TopicNumberScale("AUTO");
        public static TopicNumberScale Thousands { get; } = new TopicNumberScale("THOUSANDS");
        public static TopicNumberScale Millions { get; } = new TopicNumberScale("MILLIONS");
        public static TopicNumberScale Billions { get; } = new TopicNumberScale("BILLIONS");
        public static TopicNumberScale Trillions { get; } = new TopicNumberScale("TRILLIONS");

        public static bool operator ==(TopicNumberScale left, TopicNumberScale right) => left.Equals(right);
        public static bool operator !=(TopicNumberScale left, TopicNumberScale right) => !left.Equals(right);

        public static explicit operator string(TopicNumberScale value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicNumberScale other && Equals(other);
        public bool Equals(TopicNumberScale other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicNumericSeparatorSymbol : IEquatable<TopicNumericSeparatorSymbol>
    {
        private readonly string _value;

        private TopicNumericSeparatorSymbol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicNumericSeparatorSymbol Comma { get; } = new TopicNumericSeparatorSymbol("COMMA");
        public static TopicNumericSeparatorSymbol Dot { get; } = new TopicNumericSeparatorSymbol("DOT");

        public static bool operator ==(TopicNumericSeparatorSymbol left, TopicNumericSeparatorSymbol right) => left.Equals(right);
        public static bool operator !=(TopicNumericSeparatorSymbol left, TopicNumericSeparatorSymbol right) => !left.Equals(right);

        public static explicit operator string(TopicNumericSeparatorSymbol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicNumericSeparatorSymbol other && Equals(other);
        public bool Equals(TopicNumericSeparatorSymbol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicPropertyRole : IEquatable<TopicPropertyRole>
    {
        private readonly string _value;

        private TopicPropertyRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicPropertyRole Primary { get; } = new TopicPropertyRole("PRIMARY");
        public static TopicPropertyRole Id { get; } = new TopicPropertyRole("ID");

        public static bool operator ==(TopicPropertyRole left, TopicPropertyRole right) => left.Equals(right);
        public static bool operator !=(TopicPropertyRole left, TopicPropertyRole right) => !left.Equals(right);

        public static explicit operator string(TopicPropertyRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicPropertyRole other && Equals(other);
        public bool Equals(TopicPropertyRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicPropertyUsage : IEquatable<TopicPropertyUsage>
    {
        private readonly string _value;

        private TopicPropertyUsage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicPropertyUsage Inherit { get; } = new TopicPropertyUsage("INHERIT");
        public static TopicPropertyUsage Dimension { get; } = new TopicPropertyUsage("DIMENSION");
        public static TopicPropertyUsage Measure { get; } = new TopicPropertyUsage("MEASURE");

        public static bool operator ==(TopicPropertyUsage left, TopicPropertyUsage right) => left.Equals(right);
        public static bool operator !=(TopicPropertyUsage left, TopicPropertyUsage right) => !left.Equals(right);

        public static explicit operator string(TopicPropertyUsage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicPropertyUsage other && Equals(other);
        public bool Equals(TopicPropertyUsage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicRelativeDateFilterFunction : IEquatable<TopicRelativeDateFilterFunction>
    {
        private readonly string _value;

        private TopicRelativeDateFilterFunction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicRelativeDateFilterFunction Previous { get; } = new TopicRelativeDateFilterFunction("PREVIOUS");
        public static TopicRelativeDateFilterFunction This { get; } = new TopicRelativeDateFilterFunction("THIS");
        public static TopicRelativeDateFilterFunction Last { get; } = new TopicRelativeDateFilterFunction("LAST");
        public static TopicRelativeDateFilterFunction Next { get; } = new TopicRelativeDateFilterFunction("NEXT");
        public static TopicRelativeDateFilterFunction Now { get; } = new TopicRelativeDateFilterFunction("NOW");

        public static bool operator ==(TopicRelativeDateFilterFunction left, TopicRelativeDateFilterFunction right) => left.Equals(right);
        public static bool operator !=(TopicRelativeDateFilterFunction left, TopicRelativeDateFilterFunction right) => !left.Equals(right);

        public static explicit operator string(TopicRelativeDateFilterFunction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicRelativeDateFilterFunction other && Equals(other);
        public bool Equals(TopicRelativeDateFilterFunction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicTimeGranularity : IEquatable<TopicTimeGranularity>
    {
        private readonly string _value;

        private TopicTimeGranularity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicTimeGranularity Second { get; } = new TopicTimeGranularity("SECOND");
        public static TopicTimeGranularity Minute { get; } = new TopicTimeGranularity("MINUTE");
        public static TopicTimeGranularity Hour { get; } = new TopicTimeGranularity("HOUR");
        public static TopicTimeGranularity Day { get; } = new TopicTimeGranularity("DAY");
        public static TopicTimeGranularity Week { get; } = new TopicTimeGranularity("WEEK");
        public static TopicTimeGranularity Month { get; } = new TopicTimeGranularity("MONTH");
        public static TopicTimeGranularity Quarter { get; } = new TopicTimeGranularity("QUARTER");
        public static TopicTimeGranularity Year { get; } = new TopicTimeGranularity("YEAR");

        public static bool operator ==(TopicTimeGranularity left, TopicTimeGranularity right) => left.Equals(right);
        public static bool operator !=(TopicTimeGranularity left, TopicTimeGranularity right) => !left.Equals(right);

        public static explicit operator string(TopicTimeGranularity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicTimeGranularity other && Equals(other);
        public bool Equals(TopicTimeGranularity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TopicUndefinedSpecifiedValueType : IEquatable<TopicUndefinedSpecifiedValueType>
    {
        private readonly string _value;

        private TopicUndefinedSpecifiedValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TopicUndefinedSpecifiedValueType Least { get; } = new TopicUndefinedSpecifiedValueType("LEAST");
        public static TopicUndefinedSpecifiedValueType Most { get; } = new TopicUndefinedSpecifiedValueType("MOST");

        public static bool operator ==(TopicUndefinedSpecifiedValueType left, TopicUndefinedSpecifiedValueType right) => left.Equals(right);
        public static bool operator !=(TopicUndefinedSpecifiedValueType left, TopicUndefinedSpecifiedValueType right) => !left.Equals(right);

        public static explicit operator string(TopicUndefinedSpecifiedValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TopicUndefinedSpecifiedValueType other && Equals(other);
        public bool Equals(TopicUndefinedSpecifiedValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct VpcConnectionNetworkInterfaceStatus : IEquatable<VpcConnectionNetworkInterfaceStatus>
    {
        private readonly string _value;

        private VpcConnectionNetworkInterfaceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpcConnectionNetworkInterfaceStatus Creating { get; } = new VpcConnectionNetworkInterfaceStatus("CREATING");
        public static VpcConnectionNetworkInterfaceStatus Available { get; } = new VpcConnectionNetworkInterfaceStatus("AVAILABLE");
        public static VpcConnectionNetworkInterfaceStatus CreationFailed { get; } = new VpcConnectionNetworkInterfaceStatus("CREATION_FAILED");
        public static VpcConnectionNetworkInterfaceStatus Updating { get; } = new VpcConnectionNetworkInterfaceStatus("UPDATING");
        public static VpcConnectionNetworkInterfaceStatus UpdateFailed { get; } = new VpcConnectionNetworkInterfaceStatus("UPDATE_FAILED");
        public static VpcConnectionNetworkInterfaceStatus Deleting { get; } = new VpcConnectionNetworkInterfaceStatus("DELETING");
        public static VpcConnectionNetworkInterfaceStatus Deleted { get; } = new VpcConnectionNetworkInterfaceStatus("DELETED");
        public static VpcConnectionNetworkInterfaceStatus DeletionFailed { get; } = new VpcConnectionNetworkInterfaceStatus("DELETION_FAILED");
        public static VpcConnectionNetworkInterfaceStatus DeletionScheduled { get; } = new VpcConnectionNetworkInterfaceStatus("DELETION_SCHEDULED");
        public static VpcConnectionNetworkInterfaceStatus AttachmentFailedRollbackFailed { get; } = new VpcConnectionNetworkInterfaceStatus("ATTACHMENT_FAILED_ROLLBACK_FAILED");

        public static bool operator ==(VpcConnectionNetworkInterfaceStatus left, VpcConnectionNetworkInterfaceStatus right) => left.Equals(right);
        public static bool operator !=(VpcConnectionNetworkInterfaceStatus left, VpcConnectionNetworkInterfaceStatus right) => !left.Equals(right);

        public static explicit operator string(VpcConnectionNetworkInterfaceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpcConnectionNetworkInterfaceStatus other && Equals(other);
        public bool Equals(VpcConnectionNetworkInterfaceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct VpcConnectionVpcConnectionAvailabilityStatus : IEquatable<VpcConnectionVpcConnectionAvailabilityStatus>
    {
        private readonly string _value;

        private VpcConnectionVpcConnectionAvailabilityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpcConnectionVpcConnectionAvailabilityStatus Available { get; } = new VpcConnectionVpcConnectionAvailabilityStatus("AVAILABLE");
        public static VpcConnectionVpcConnectionAvailabilityStatus Unavailable { get; } = new VpcConnectionVpcConnectionAvailabilityStatus("UNAVAILABLE");
        public static VpcConnectionVpcConnectionAvailabilityStatus PartiallyAvailable { get; } = new VpcConnectionVpcConnectionAvailabilityStatus("PARTIALLY_AVAILABLE");

        public static bool operator ==(VpcConnectionVpcConnectionAvailabilityStatus left, VpcConnectionVpcConnectionAvailabilityStatus right) => left.Equals(right);
        public static bool operator !=(VpcConnectionVpcConnectionAvailabilityStatus left, VpcConnectionVpcConnectionAvailabilityStatus right) => !left.Equals(right);

        public static explicit operator string(VpcConnectionVpcConnectionAvailabilityStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpcConnectionVpcConnectionAvailabilityStatus other && Equals(other);
        public bool Equals(VpcConnectionVpcConnectionAvailabilityStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct VpcConnectionVpcConnectionResourceStatus : IEquatable<VpcConnectionVpcConnectionResourceStatus>
    {
        private readonly string _value;

        private VpcConnectionVpcConnectionResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpcConnectionVpcConnectionResourceStatus CreationInProgress { get; } = new VpcConnectionVpcConnectionResourceStatus("CREATION_IN_PROGRESS");
        public static VpcConnectionVpcConnectionResourceStatus CreationSuccessful { get; } = new VpcConnectionVpcConnectionResourceStatus("CREATION_SUCCESSFUL");
        public static VpcConnectionVpcConnectionResourceStatus CreationFailed { get; } = new VpcConnectionVpcConnectionResourceStatus("CREATION_FAILED");
        public static VpcConnectionVpcConnectionResourceStatus UpdateInProgress { get; } = new VpcConnectionVpcConnectionResourceStatus("UPDATE_IN_PROGRESS");
        public static VpcConnectionVpcConnectionResourceStatus UpdateSuccessful { get; } = new VpcConnectionVpcConnectionResourceStatus("UPDATE_SUCCESSFUL");
        public static VpcConnectionVpcConnectionResourceStatus UpdateFailed { get; } = new VpcConnectionVpcConnectionResourceStatus("UPDATE_FAILED");
        public static VpcConnectionVpcConnectionResourceStatus DeletionInProgress { get; } = new VpcConnectionVpcConnectionResourceStatus("DELETION_IN_PROGRESS");
        public static VpcConnectionVpcConnectionResourceStatus DeletionFailed { get; } = new VpcConnectionVpcConnectionResourceStatus("DELETION_FAILED");
        public static VpcConnectionVpcConnectionResourceStatus Deleted { get; } = new VpcConnectionVpcConnectionResourceStatus("DELETED");

        public static bool operator ==(VpcConnectionVpcConnectionResourceStatus left, VpcConnectionVpcConnectionResourceStatus right) => left.Equals(right);
        public static bool operator !=(VpcConnectionVpcConnectionResourceStatus left, VpcConnectionVpcConnectionResourceStatus right) => !left.Equals(right);

        public static explicit operator string(VpcConnectionVpcConnectionResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpcConnectionVpcConnectionResourceStatus other && Equals(other);
        public bool Equals(VpcConnectionVpcConnectionResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
