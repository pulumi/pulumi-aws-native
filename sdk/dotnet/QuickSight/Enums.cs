// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.QuickSight
{
    [EnumType]
    public readonly struct AnalysisAnalysisErrorType : IEquatable<AnalysisAnalysisErrorType>
    {
        private readonly string _value;

        private AnalysisAnalysisErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisAnalysisErrorType AccessDenied { get; } = new AnalysisAnalysisErrorType("ACCESS_DENIED");
        public static AnalysisAnalysisErrorType SourceNotFound { get; } = new AnalysisAnalysisErrorType("SOURCE_NOT_FOUND");
        public static AnalysisAnalysisErrorType DataSetNotFound { get; } = new AnalysisAnalysisErrorType("DATA_SET_NOT_FOUND");
        public static AnalysisAnalysisErrorType InternalFailure { get; } = new AnalysisAnalysisErrorType("INTERNAL_FAILURE");
        public static AnalysisAnalysisErrorType ParameterValueIncompatible { get; } = new AnalysisAnalysisErrorType("PARAMETER_VALUE_INCOMPATIBLE");
        public static AnalysisAnalysisErrorType ParameterTypeInvalid { get; } = new AnalysisAnalysisErrorType("PARAMETER_TYPE_INVALID");
        public static AnalysisAnalysisErrorType ParameterNotFound { get; } = new AnalysisAnalysisErrorType("PARAMETER_NOT_FOUND");
        public static AnalysisAnalysisErrorType ColumnTypeMismatch { get; } = new AnalysisAnalysisErrorType("COLUMN_TYPE_MISMATCH");
        public static AnalysisAnalysisErrorType ColumnGeographicRoleMismatch { get; } = new AnalysisAnalysisErrorType("COLUMN_GEOGRAPHIC_ROLE_MISMATCH");
        public static AnalysisAnalysisErrorType ColumnReplacementMissing { get; } = new AnalysisAnalysisErrorType("COLUMN_REPLACEMENT_MISSING");

        public static bool operator ==(AnalysisAnalysisErrorType left, AnalysisAnalysisErrorType right) => left.Equals(right);
        public static bool operator !=(AnalysisAnalysisErrorType left, AnalysisAnalysisErrorType right) => !left.Equals(right);

        public static explicit operator string(AnalysisAnalysisErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisAnalysisErrorType other && Equals(other);
        public bool Equals(AnalysisAnalysisErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AnalysisResourceStatus : IEquatable<AnalysisResourceStatus>
    {
        private readonly string _value;

        private AnalysisResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisResourceStatus CreationInProgress { get; } = new AnalysisResourceStatus("CREATION_IN_PROGRESS");
        public static AnalysisResourceStatus CreationSuccessful { get; } = new AnalysisResourceStatus("CREATION_SUCCESSFUL");
        public static AnalysisResourceStatus CreationFailed { get; } = new AnalysisResourceStatus("CREATION_FAILED");
        public static AnalysisResourceStatus UpdateInProgress { get; } = new AnalysisResourceStatus("UPDATE_IN_PROGRESS");
        public static AnalysisResourceStatus UpdateSuccessful { get; } = new AnalysisResourceStatus("UPDATE_SUCCESSFUL");
        public static AnalysisResourceStatus UpdateFailed { get; } = new AnalysisResourceStatus("UPDATE_FAILED");
        public static AnalysisResourceStatus Deleted { get; } = new AnalysisResourceStatus("DELETED");

        public static bool operator ==(AnalysisResourceStatus left, AnalysisResourceStatus right) => left.Equals(right);
        public static bool operator !=(AnalysisResourceStatus left, AnalysisResourceStatus right) => !left.Equals(right);

        public static explicit operator string(AnalysisResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisResourceStatus other && Equals(other);
        public bool Equals(AnalysisResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardDashboardBehavior : IEquatable<DashboardDashboardBehavior>
    {
        private readonly string _value;

        private DashboardDashboardBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardDashboardBehavior Enabled { get; } = new DashboardDashboardBehavior("ENABLED");
        public static DashboardDashboardBehavior Disabled { get; } = new DashboardDashboardBehavior("DISABLED");

        public static bool operator ==(DashboardDashboardBehavior left, DashboardDashboardBehavior right) => left.Equals(right);
        public static bool operator !=(DashboardDashboardBehavior left, DashboardDashboardBehavior right) => !left.Equals(right);

        public static explicit operator string(DashboardDashboardBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardDashboardBehavior other && Equals(other);
        public bool Equals(DashboardDashboardBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardDashboardErrorType : IEquatable<DashboardDashboardErrorType>
    {
        private readonly string _value;

        private DashboardDashboardErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardDashboardErrorType AccessDenied { get; } = new DashboardDashboardErrorType("ACCESS_DENIED");
        public static DashboardDashboardErrorType SourceNotFound { get; } = new DashboardDashboardErrorType("SOURCE_NOT_FOUND");
        public static DashboardDashboardErrorType DataSetNotFound { get; } = new DashboardDashboardErrorType("DATA_SET_NOT_FOUND");
        public static DashboardDashboardErrorType InternalFailure { get; } = new DashboardDashboardErrorType("INTERNAL_FAILURE");
        public static DashboardDashboardErrorType ParameterValueIncompatible { get; } = new DashboardDashboardErrorType("PARAMETER_VALUE_INCOMPATIBLE");
        public static DashboardDashboardErrorType ParameterTypeInvalid { get; } = new DashboardDashboardErrorType("PARAMETER_TYPE_INVALID");
        public static DashboardDashboardErrorType ParameterNotFound { get; } = new DashboardDashboardErrorType("PARAMETER_NOT_FOUND");
        public static DashboardDashboardErrorType ColumnTypeMismatch { get; } = new DashboardDashboardErrorType("COLUMN_TYPE_MISMATCH");
        public static DashboardDashboardErrorType ColumnGeographicRoleMismatch { get; } = new DashboardDashboardErrorType("COLUMN_GEOGRAPHIC_ROLE_MISMATCH");
        public static DashboardDashboardErrorType ColumnReplacementMissing { get; } = new DashboardDashboardErrorType("COLUMN_REPLACEMENT_MISSING");

        public static bool operator ==(DashboardDashboardErrorType left, DashboardDashboardErrorType right) => left.Equals(right);
        public static bool operator !=(DashboardDashboardErrorType left, DashboardDashboardErrorType right) => !left.Equals(right);

        public static explicit operator string(DashboardDashboardErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardDashboardErrorType other && Equals(other);
        public bool Equals(DashboardDashboardErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardDashboardUIState : IEquatable<DashboardDashboardUIState>
    {
        private readonly string _value;

        private DashboardDashboardUIState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardDashboardUIState Expanded { get; } = new DashboardDashboardUIState("EXPANDED");
        public static DashboardDashboardUIState Collapsed { get; } = new DashboardDashboardUIState("COLLAPSED");

        public static bool operator ==(DashboardDashboardUIState left, DashboardDashboardUIState right) => left.Equals(right);
        public static bool operator !=(DashboardDashboardUIState left, DashboardDashboardUIState right) => !left.Equals(right);

        public static explicit operator string(DashboardDashboardUIState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardDashboardUIState other && Equals(other);
        public bool Equals(DashboardDashboardUIState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DashboardResourceStatus : IEquatable<DashboardResourceStatus>
    {
        private readonly string _value;

        private DashboardResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DashboardResourceStatus CreationInProgress { get; } = new DashboardResourceStatus("CREATION_IN_PROGRESS");
        public static DashboardResourceStatus CreationSuccessful { get; } = new DashboardResourceStatus("CREATION_SUCCESSFUL");
        public static DashboardResourceStatus CreationFailed { get; } = new DashboardResourceStatus("CREATION_FAILED");
        public static DashboardResourceStatus UpdateInProgress { get; } = new DashboardResourceStatus("UPDATE_IN_PROGRESS");
        public static DashboardResourceStatus UpdateSuccessful { get; } = new DashboardResourceStatus("UPDATE_SUCCESSFUL");
        public static DashboardResourceStatus UpdateFailed { get; } = new DashboardResourceStatus("UPDATE_FAILED");
        public static DashboardResourceStatus Deleted { get; } = new DashboardResourceStatus("DELETED");

        public static bool operator ==(DashboardResourceStatus left, DashboardResourceStatus right) => left.Equals(right);
        public static bool operator !=(DashboardResourceStatus left, DashboardResourceStatus right) => !left.Equals(right);

        public static explicit operator string(DashboardResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DashboardResourceStatus other && Equals(other);
        public bool Equals(DashboardResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetColumnDataType : IEquatable<DataSetColumnDataType>
    {
        private readonly string _value;

        private DataSetColumnDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetColumnDataType String { get; } = new DataSetColumnDataType("STRING");
        public static DataSetColumnDataType Integer { get; } = new DataSetColumnDataType("INTEGER");
        public static DataSetColumnDataType Decimal { get; } = new DataSetColumnDataType("DECIMAL");
        public static DataSetColumnDataType Datetime { get; } = new DataSetColumnDataType("DATETIME");

        public static bool operator ==(DataSetColumnDataType left, DataSetColumnDataType right) => left.Equals(right);
        public static bool operator !=(DataSetColumnDataType left, DataSetColumnDataType right) => !left.Equals(right);

        public static explicit operator string(DataSetColumnDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetColumnDataType other && Equals(other);
        public bool Equals(DataSetColumnDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetDataSetImportMode : IEquatable<DataSetDataSetImportMode>
    {
        private readonly string _value;

        private DataSetDataSetImportMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetDataSetImportMode Spice { get; } = new DataSetDataSetImportMode("SPICE");
        public static DataSetDataSetImportMode DirectQuery { get; } = new DataSetDataSetImportMode("DIRECT_QUERY");

        public static bool operator ==(DataSetDataSetImportMode left, DataSetDataSetImportMode right) => left.Equals(right);
        public static bool operator !=(DataSetDataSetImportMode left, DataSetDataSetImportMode right) => !left.Equals(right);

        public static explicit operator string(DataSetDataSetImportMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetDataSetImportMode other && Equals(other);
        public bool Equals(DataSetDataSetImportMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetGeoSpatialCountryCode : IEquatable<DataSetGeoSpatialCountryCode>
    {
        private readonly string _value;

        private DataSetGeoSpatialCountryCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetGeoSpatialCountryCode Us { get; } = new DataSetGeoSpatialCountryCode("US");

        public static bool operator ==(DataSetGeoSpatialCountryCode left, DataSetGeoSpatialCountryCode right) => left.Equals(right);
        public static bool operator !=(DataSetGeoSpatialCountryCode left, DataSetGeoSpatialCountryCode right) => !left.Equals(right);

        public static explicit operator string(DataSetGeoSpatialCountryCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetGeoSpatialCountryCode other && Equals(other);
        public bool Equals(DataSetGeoSpatialCountryCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetRowLevelPermissionFormatVersion : IEquatable<DataSetRowLevelPermissionFormatVersion>
    {
        private readonly string _value;

        private DataSetRowLevelPermissionFormatVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetRowLevelPermissionFormatVersion Version1 { get; } = new DataSetRowLevelPermissionFormatVersion("VERSION_1");
        public static DataSetRowLevelPermissionFormatVersion Version2 { get; } = new DataSetRowLevelPermissionFormatVersion("VERSION_2");

        public static bool operator ==(DataSetRowLevelPermissionFormatVersion left, DataSetRowLevelPermissionFormatVersion right) => left.Equals(right);
        public static bool operator !=(DataSetRowLevelPermissionFormatVersion left, DataSetRowLevelPermissionFormatVersion right) => !left.Equals(right);

        public static explicit operator string(DataSetRowLevelPermissionFormatVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetRowLevelPermissionFormatVersion other && Equals(other);
        public bool Equals(DataSetRowLevelPermissionFormatVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSetRowLevelPermissionPolicy : IEquatable<DataSetRowLevelPermissionPolicy>
    {
        private readonly string _value;

        private DataSetRowLevelPermissionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSetRowLevelPermissionPolicy GrantAccess { get; } = new DataSetRowLevelPermissionPolicy("GRANT_ACCESS");
        public static DataSetRowLevelPermissionPolicy DenyAccess { get; } = new DataSetRowLevelPermissionPolicy("DENY_ACCESS");

        public static bool operator ==(DataSetRowLevelPermissionPolicy left, DataSetRowLevelPermissionPolicy right) => left.Equals(right);
        public static bool operator !=(DataSetRowLevelPermissionPolicy left, DataSetRowLevelPermissionPolicy right) => !left.Equals(right);

        public static explicit operator string(DataSetRowLevelPermissionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSetRowLevelPermissionPolicy other && Equals(other);
        public bool Equals(DataSetRowLevelPermissionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceDataSourceErrorInfoType : IEquatable<DataSourceDataSourceErrorInfoType>
    {
        private readonly string _value;

        private DataSourceDataSourceErrorInfoType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceDataSourceErrorInfoType AccessDenied { get; } = new DataSourceDataSourceErrorInfoType("ACCESS_DENIED");
        public static DataSourceDataSourceErrorInfoType CopySourceNotFound { get; } = new DataSourceDataSourceErrorInfoType("COPY_SOURCE_NOT_FOUND");
        public static DataSourceDataSourceErrorInfoType Timeout { get; } = new DataSourceDataSourceErrorInfoType("TIMEOUT");
        public static DataSourceDataSourceErrorInfoType EngineVersionNotSupported { get; } = new DataSourceDataSourceErrorInfoType("ENGINE_VERSION_NOT_SUPPORTED");
        public static DataSourceDataSourceErrorInfoType UnknownHost { get; } = new DataSourceDataSourceErrorInfoType("UNKNOWN_HOST");
        public static DataSourceDataSourceErrorInfoType GenericSqlFailure { get; } = new DataSourceDataSourceErrorInfoType("GENERIC_SQL_FAILURE");
        public static DataSourceDataSourceErrorInfoType Conflict { get; } = new DataSourceDataSourceErrorInfoType("CONFLICT");
        public static DataSourceDataSourceErrorInfoType Unknown { get; } = new DataSourceDataSourceErrorInfoType("UNKNOWN");

        public static bool operator ==(DataSourceDataSourceErrorInfoType left, DataSourceDataSourceErrorInfoType right) => left.Equals(right);
        public static bool operator !=(DataSourceDataSourceErrorInfoType left, DataSourceDataSourceErrorInfoType right) => !left.Equals(right);

        public static explicit operator string(DataSourceDataSourceErrorInfoType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceDataSourceErrorInfoType other && Equals(other);
        public bool Equals(DataSourceDataSourceErrorInfoType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceDataSourceType : IEquatable<DataSourceDataSourceType>
    {
        private readonly string _value;

        private DataSourceDataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceDataSourceType AdobeAnalytics { get; } = new DataSourceDataSourceType("ADOBE_ANALYTICS");
        public static DataSourceDataSourceType AmazonElasticsearch { get; } = new DataSourceDataSourceType("AMAZON_ELASTICSEARCH");
        public static DataSourceDataSourceType Athena { get; } = new DataSourceDataSourceType("ATHENA");
        public static DataSourceDataSourceType Aurora { get; } = new DataSourceDataSourceType("AURORA");
        public static DataSourceDataSourceType AuroraPostgresql { get; } = new DataSourceDataSourceType("AURORA_POSTGRESQL");
        public static DataSourceDataSourceType AwsIotAnalytics { get; } = new DataSourceDataSourceType("AWS_IOT_ANALYTICS");
        public static DataSourceDataSourceType Github { get; } = new DataSourceDataSourceType("GITHUB");
        public static DataSourceDataSourceType Jira { get; } = new DataSourceDataSourceType("JIRA");
        public static DataSourceDataSourceType Mariadb { get; } = new DataSourceDataSourceType("MARIADB");
        public static DataSourceDataSourceType Mysql { get; } = new DataSourceDataSourceType("MYSQL");
        public static DataSourceDataSourceType Oracle { get; } = new DataSourceDataSourceType("ORACLE");
        public static DataSourceDataSourceType Postgresql { get; } = new DataSourceDataSourceType("POSTGRESQL");
        public static DataSourceDataSourceType Presto { get; } = new DataSourceDataSourceType("PRESTO");
        public static DataSourceDataSourceType Redshift { get; } = new DataSourceDataSourceType("REDSHIFT");
        public static DataSourceDataSourceType S3 { get; } = new DataSourceDataSourceType("S3");
        public static DataSourceDataSourceType Salesforce { get; } = new DataSourceDataSourceType("SALESFORCE");
        public static DataSourceDataSourceType Servicenow { get; } = new DataSourceDataSourceType("SERVICENOW");
        public static DataSourceDataSourceType Snowflake { get; } = new DataSourceDataSourceType("SNOWFLAKE");
        public static DataSourceDataSourceType Spark { get; } = new DataSourceDataSourceType("SPARK");
        public static DataSourceDataSourceType Sqlserver { get; } = new DataSourceDataSourceType("SQLSERVER");
        public static DataSourceDataSourceType Teradata { get; } = new DataSourceDataSourceType("TERADATA");
        public static DataSourceDataSourceType Twitter { get; } = new DataSourceDataSourceType("TWITTER");
        public static DataSourceDataSourceType Timestream { get; } = new DataSourceDataSourceType("TIMESTREAM");

        public static bool operator ==(DataSourceDataSourceType left, DataSourceDataSourceType right) => left.Equals(right);
        public static bool operator !=(DataSourceDataSourceType left, DataSourceDataSourceType right) => !left.Equals(right);

        public static explicit operator string(DataSourceDataSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceDataSourceType other && Equals(other);
        public bool Equals(DataSourceDataSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceResourceStatus : IEquatable<DataSourceResourceStatus>
    {
        private readonly string _value;

        private DataSourceResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceResourceStatus CreationInProgress { get; } = new DataSourceResourceStatus("CREATION_IN_PROGRESS");
        public static DataSourceResourceStatus CreationSuccessful { get; } = new DataSourceResourceStatus("CREATION_SUCCESSFUL");
        public static DataSourceResourceStatus CreationFailed { get; } = new DataSourceResourceStatus("CREATION_FAILED");
        public static DataSourceResourceStatus UpdateInProgress { get; } = new DataSourceResourceStatus("UPDATE_IN_PROGRESS");
        public static DataSourceResourceStatus UpdateSuccessful { get; } = new DataSourceResourceStatus("UPDATE_SUCCESSFUL");
        public static DataSourceResourceStatus UpdateFailed { get; } = new DataSourceResourceStatus("UPDATE_FAILED");
        public static DataSourceResourceStatus Deleted { get; } = new DataSourceResourceStatus("DELETED");

        public static bool operator ==(DataSourceResourceStatus left, DataSourceResourceStatus right) => left.Equals(right);
        public static bool operator !=(DataSourceResourceStatus left, DataSourceResourceStatus right) => !left.Equals(right);

        public static explicit operator string(DataSourceResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceResourceStatus other && Equals(other);
        public bool Equals(DataSourceResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateResourceStatus : IEquatable<TemplateResourceStatus>
    {
        private readonly string _value;

        private TemplateResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateResourceStatus CreationInProgress { get; } = new TemplateResourceStatus("CREATION_IN_PROGRESS");
        public static TemplateResourceStatus CreationSuccessful { get; } = new TemplateResourceStatus("CREATION_SUCCESSFUL");
        public static TemplateResourceStatus CreationFailed { get; } = new TemplateResourceStatus("CREATION_FAILED");
        public static TemplateResourceStatus UpdateInProgress { get; } = new TemplateResourceStatus("UPDATE_IN_PROGRESS");
        public static TemplateResourceStatus UpdateSuccessful { get; } = new TemplateResourceStatus("UPDATE_SUCCESSFUL");
        public static TemplateResourceStatus UpdateFailed { get; } = new TemplateResourceStatus("UPDATE_FAILED");
        public static TemplateResourceStatus Deleted { get; } = new TemplateResourceStatus("DELETED");

        public static bool operator ==(TemplateResourceStatus left, TemplateResourceStatus right) => left.Equals(right);
        public static bool operator !=(TemplateResourceStatus left, TemplateResourceStatus right) => !left.Equals(right);

        public static explicit operator string(TemplateResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateResourceStatus other && Equals(other);
        public bool Equals(TemplateResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateTemplateErrorType : IEquatable<TemplateTemplateErrorType>
    {
        private readonly string _value;

        private TemplateTemplateErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateTemplateErrorType SourceNotFound { get; } = new TemplateTemplateErrorType("SOURCE_NOT_FOUND");
        public static TemplateTemplateErrorType DataSetNotFound { get; } = new TemplateTemplateErrorType("DATA_SET_NOT_FOUND");
        public static TemplateTemplateErrorType InternalFailure { get; } = new TemplateTemplateErrorType("INTERNAL_FAILURE");
        public static TemplateTemplateErrorType AccessDenied { get; } = new TemplateTemplateErrorType("ACCESS_DENIED");

        public static bool operator ==(TemplateTemplateErrorType left, TemplateTemplateErrorType right) => left.Equals(right);
        public static bool operator !=(TemplateTemplateErrorType left, TemplateTemplateErrorType right) => !left.Equals(right);

        public static explicit operator string(TemplateTemplateErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateTemplateErrorType other && Equals(other);
        public bool Equals(TemplateTemplateErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThemeResourceStatus : IEquatable<ThemeResourceStatus>
    {
        private readonly string _value;

        private ThemeResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThemeResourceStatus CreationInProgress { get; } = new ThemeResourceStatus("CREATION_IN_PROGRESS");
        public static ThemeResourceStatus CreationSuccessful { get; } = new ThemeResourceStatus("CREATION_SUCCESSFUL");
        public static ThemeResourceStatus CreationFailed { get; } = new ThemeResourceStatus("CREATION_FAILED");
        public static ThemeResourceStatus UpdateInProgress { get; } = new ThemeResourceStatus("UPDATE_IN_PROGRESS");
        public static ThemeResourceStatus UpdateSuccessful { get; } = new ThemeResourceStatus("UPDATE_SUCCESSFUL");
        public static ThemeResourceStatus UpdateFailed { get; } = new ThemeResourceStatus("UPDATE_FAILED");
        public static ThemeResourceStatus Deleted { get; } = new ThemeResourceStatus("DELETED");

        public static bool operator ==(ThemeResourceStatus left, ThemeResourceStatus right) => left.Equals(right);
        public static bool operator !=(ThemeResourceStatus left, ThemeResourceStatus right) => !left.Equals(right);

        public static explicit operator string(ThemeResourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThemeResourceStatus other && Equals(other);
        public bool Equals(ThemeResourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThemeThemeErrorType : IEquatable<ThemeThemeErrorType>
    {
        private readonly string _value;

        private ThemeThemeErrorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThemeThemeErrorType InternalFailure { get; } = new ThemeThemeErrorType("INTERNAL_FAILURE");

        public static bool operator ==(ThemeThemeErrorType left, ThemeThemeErrorType right) => left.Equals(right);
        public static bool operator !=(ThemeThemeErrorType left, ThemeThemeErrorType right) => !left.Equals(right);

        public static explicit operator string(ThemeThemeErrorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThemeThemeErrorType other && Equals(other);
        public bool Equals(ThemeThemeErrorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ThemeThemeType : IEquatable<ThemeThemeType>
    {
        private readonly string _value;

        private ThemeThemeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ThemeThemeType Quicksight { get; } = new ThemeThemeType("QUICKSIGHT");
        public static ThemeThemeType Custom { get; } = new ThemeThemeType("CUSTOM");
        public static ThemeThemeType All { get; } = new ThemeThemeType("ALL");

        public static bool operator ==(ThemeThemeType left, ThemeThemeType right) => left.Equals(right);
        public static bool operator !=(ThemeThemeType left, ThemeThemeType right) => !left.Equals(right);

        public static explicit operator string(ThemeThemeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ThemeThemeType other && Equals(other);
        public bool Equals(ThemeThemeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
