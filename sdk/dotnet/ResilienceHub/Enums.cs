// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.ResilienceHub
{
    /// <summary>
    /// Assessment execution schedule.
    /// </summary>
    [EnumType]
    public readonly struct AppAssessmentSchedule : IEquatable<AppAssessmentSchedule>
    {
        private readonly string _value;

        private AppAssessmentSchedule(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppAssessmentSchedule Disabled { get; } = new AppAssessmentSchedule("Disabled");
        public static AppAssessmentSchedule Daily { get; } = new AppAssessmentSchedule("Daily");

        public static bool operator ==(AppAssessmentSchedule left, AppAssessmentSchedule right) => left.Equals(right);
        public static bool operator !=(AppAssessmentSchedule left, AppAssessmentSchedule right) => !left.Equals(right);

        public static explicit operator string(AppAssessmentSchedule value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppAssessmentSchedule other && Equals(other);
        public bool Equals(AppAssessmentSchedule other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates if compliance drifts (deviations) were detected while running an assessment for your application.
    /// </summary>
    [EnumType]
    public readonly struct AppDriftStatus : IEquatable<AppDriftStatus>
    {
        private readonly string _value;

        private AppDriftStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppDriftStatus NotChecked { get; } = new AppDriftStatus("NotChecked");
        public static AppDriftStatus NotDetected { get; } = new AppDriftStatus("NotDetected");
        public static AppDriftStatus Detected { get; } = new AppDriftStatus("Detected");

        public static bool operator ==(AppDriftStatus left, AppDriftStatus right) => left.Equals(right);
        public static bool operator !=(AppDriftStatus left, AppDriftStatus right) => !left.Equals(right);

        public static explicit operator string(AppDriftStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppDriftStatus other && Equals(other);
        public bool Equals(AppDriftStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of event you would like to subscribe and get notification for.
    /// </summary>
    [EnumType]
    public readonly struct AppEventSubscriptionEventType : IEquatable<AppEventSubscriptionEventType>
    {
        private readonly string _value;

        private AppEventSubscriptionEventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppEventSubscriptionEventType ScheduledAssessmentFailure { get; } = new AppEventSubscriptionEventType("ScheduledAssessmentFailure");
        public static AppEventSubscriptionEventType DriftDetected { get; } = new AppEventSubscriptionEventType("DriftDetected");

        public static bool operator ==(AppEventSubscriptionEventType left, AppEventSubscriptionEventType right) => left.Equals(right);
        public static bool operator !=(AppEventSubscriptionEventType left, AppEventSubscriptionEventType right) => !left.Equals(right);

        public static explicit operator string(AppEventSubscriptionEventType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppEventSubscriptionEventType other && Equals(other);
        public bool Equals(AppEventSubscriptionEventType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
    /// </summary>
    [EnumType]
    public readonly struct AppPermissionModelType : IEquatable<AppPermissionModelType>
    {
        private readonly string _value;

        private AppPermissionModelType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppPermissionModelType LegacyIamUser { get; } = new AppPermissionModelType("LegacyIAMUser");
        public static AppPermissionModelType RoleBased { get; } = new AppPermissionModelType("RoleBased");

        public static bool operator ==(AppPermissionModelType left, AppPermissionModelType right) => left.Equals(right);
        public static bool operator !=(AppPermissionModelType left, AppPermissionModelType right) => !left.Equals(right);

        public static explicit operator string(AppPermissionModelType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppPermissionModelType other && Equals(other);
        public bool Equals(AppPermissionModelType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Data Location Constraint of the Policy.
    /// </summary>
    [EnumType]
    public readonly struct ResiliencyPolicyDataLocationConstraint : IEquatable<ResiliencyPolicyDataLocationConstraint>
    {
        private readonly string _value;

        private ResiliencyPolicyDataLocationConstraint(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResiliencyPolicyDataLocationConstraint AnyLocation { get; } = new ResiliencyPolicyDataLocationConstraint("AnyLocation");
        public static ResiliencyPolicyDataLocationConstraint SameContinent { get; } = new ResiliencyPolicyDataLocationConstraint("SameContinent");
        public static ResiliencyPolicyDataLocationConstraint SameCountry { get; } = new ResiliencyPolicyDataLocationConstraint("SameCountry");

        public static bool operator ==(ResiliencyPolicyDataLocationConstraint left, ResiliencyPolicyDataLocationConstraint right) => left.Equals(right);
        public static bool operator !=(ResiliencyPolicyDataLocationConstraint left, ResiliencyPolicyDataLocationConstraint right) => !left.Equals(right);

        public static explicit operator string(ResiliencyPolicyDataLocationConstraint value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResiliencyPolicyDataLocationConstraint other && Equals(other);
        public bool Equals(ResiliencyPolicyDataLocationConstraint other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Resiliency Policy Tier.
    /// </summary>
    [EnumType]
    public readonly struct ResiliencyPolicyTier : IEquatable<ResiliencyPolicyTier>
    {
        private readonly string _value;

        private ResiliencyPolicyTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResiliencyPolicyTier MissionCritical { get; } = new ResiliencyPolicyTier("MissionCritical");
        public static ResiliencyPolicyTier Critical { get; } = new ResiliencyPolicyTier("Critical");
        public static ResiliencyPolicyTier Important { get; } = new ResiliencyPolicyTier("Important");
        public static ResiliencyPolicyTier CoreServices { get; } = new ResiliencyPolicyTier("CoreServices");
        public static ResiliencyPolicyTier NonCritical { get; } = new ResiliencyPolicyTier("NonCritical");

        public static bool operator ==(ResiliencyPolicyTier left, ResiliencyPolicyTier right) => left.Equals(right);
        public static bool operator !=(ResiliencyPolicyTier left, ResiliencyPolicyTier right) => !left.Equals(right);

        public static explicit operator string(ResiliencyPolicyTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResiliencyPolicyTier other && Equals(other);
        public bool Equals(ResiliencyPolicyTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
