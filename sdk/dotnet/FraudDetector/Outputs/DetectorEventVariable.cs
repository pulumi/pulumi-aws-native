// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.FraudDetector.Outputs
{

    [OutputType]
    public sealed class DetectorEventVariable
    {
        /// <summary>
        /// The event variable ARN.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The time when the event variable was created.
        /// </summary>
        public readonly string? CreatedTime;
        /// <summary>
        /// The data source of the event variable.
        /// 
        /// Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
        /// 
        /// When defining a variable within a detector, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
        /// </summary>
        public readonly Pulumi.AwsNative.FraudDetector.DetectorEventVariableDataSource? DataSource;
        /// <summary>
        /// The data type of the event variable.
        /// 
        /// Valid values: `STRING | INTEGER | BOOLEAN | FLOAT`
        /// </summary>
        public readonly Pulumi.AwsNative.FraudDetector.DetectorEventVariableDataType? DataType;
        /// <summary>
        /// The default value of the event variable. This is required if you are providing the details of your variables instead of the ARN.
        /// </summary>
        public readonly string? DefaultValue;
        /// <summary>
        /// The description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
        /// 
        /// For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
        /// </summary>
        public readonly bool? Inline;
        /// <summary>
        /// The time when the event variable was last updated.
        /// </summary>
        public readonly string? LastUpdatedTime;
        /// <summary>
        /// The name of the event variable.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Tags associated with this event variable.
        /// </summary>
        public readonly ImmutableArray<Outputs.DetectorTag> Tags;
        /// <summary>
        /// The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types) .
        /// </summary>
        public readonly Pulumi.AwsNative.FraudDetector.DetectorEventVariableVariableType? VariableType;

        [OutputConstructor]
        private DetectorEventVariable(
            string? arn,

            string? createdTime,

            Pulumi.AwsNative.FraudDetector.DetectorEventVariableDataSource? dataSource,

            Pulumi.AwsNative.FraudDetector.DetectorEventVariableDataType? dataType,

            string? defaultValue,

            string? description,

            bool? inline,

            string? lastUpdatedTime,

            string? name,

            ImmutableArray<Outputs.DetectorTag> tags,

            Pulumi.AwsNative.FraudDetector.DetectorEventVariableVariableType? variableType)
        {
            Arn = arn;
            CreatedTime = createdTime;
            DataSource = dataSource;
            DataType = dataType;
            DefaultValue = defaultValue;
            Description = description;
            Inline = inline;
            LastUpdatedTime = lastUpdatedTime;
            Name = name;
            Tags = tags;
            VariableType = variableType;
        }
    }
}
