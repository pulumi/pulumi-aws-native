// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.FraudDetector.Inputs
{

    public sealed class EventTypeEventVariableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The event variable ARN.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The time when the event type was created.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// The source of the event variable.
        /// 
        /// Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
        /// 
        /// When defining a variable within a event type, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
        /// </summary>
        [Input("dataSource")]
        public Input<Pulumi.AwsNative.FraudDetector.EventTypeEventVariableDataSource>? DataSource { get; set; }

        /// <summary>
        /// The data type of the event variable. For more information, see [Data types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#data-types) .
        /// </summary>
        [Input("dataType")]
        public Input<Pulumi.AwsNative.FraudDetector.EventTypeEventVariableDataType>? DataType { get; set; }

        /// <summary>
        /// The default value of the event variable
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// The description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
        /// 
        /// For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your event type but not execute any changes to the variables.
        /// </summary>
        [Input("inline")]
        public Input<bool>? Inline { get; set; }

        /// <summary>
        /// The time when the event type was last updated.
        /// </summary>
        [Input("lastUpdatedTime")]
        public Input<string>? LastUpdatedTime { get; set; }

        /// <summary>
        /// The name of the event variable.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<Inputs.EventTypeTagArgs>? _tags;

        /// <summary>
        /// Tags associated with this event type.
        /// </summary>
        public InputList<Inputs.EventTypeTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.EventTypeTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#variable-types) .
        /// </summary>
        [Input("variableType")]
        public Input<Pulumi.AwsNative.FraudDetector.EventTypeEventVariableVariableType>? VariableType { get; set; }

        public EventTypeEventVariableArgs()
        {
        }
        public static new EventTypeEventVariableArgs Empty => new EventTypeEventVariableArgs();
    }
}
