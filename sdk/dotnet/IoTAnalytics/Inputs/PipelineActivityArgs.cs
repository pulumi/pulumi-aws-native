// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTAnalytics.Inputs
{

    public sealed class PipelineActivityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Adds other attributes based on existing attributes in the message.
        /// </summary>
        [Input("addAttributes")]
        public Input<Inputs.PipelineAddAttributesArgs>? AddAttributes { get; set; }

        /// <summary>
        /// Determines the source of the messages to be processed.
        /// </summary>
        [Input("channel")]
        public Input<Inputs.PipelineChannelArgs>? Channel { get; set; }

        /// <summary>
        /// Specifies where to store the processed message data.
        /// </summary>
        [Input("datastore")]
        public Input<Inputs.PipelineDatastoreArgs>? Datastore { get; set; }

        /// <summary>
        /// Adds data from the AWS IoT device registry to your message.
        /// </summary>
        [Input("deviceRegistryEnrich")]
        public Input<Inputs.PipelineDeviceRegistryEnrichArgs>? DeviceRegistryEnrich { get; set; }

        /// <summary>
        /// Adds information from the AWS IoT Device Shadows service to a message.
        /// </summary>
        [Input("deviceShadowEnrich")]
        public Input<Inputs.PipelineDeviceShadowEnrichArgs>? DeviceShadowEnrich { get; set; }

        /// <summary>
        /// Filters a message based on its attributes.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.PipelineFilterArgs>? Filter { get; set; }

        /// <summary>
        /// Runs a Lambda function to modify the message.
        /// </summary>
        [Input("lambda")]
        public Input<Inputs.PipelineLambdaArgs>? Lambda { get; set; }

        /// <summary>
        /// Computes an arithmetic expression using the message's attributes and adds it to the message.
        /// </summary>
        [Input("math")]
        public Input<Inputs.PipelineMathArgs>? Math { get; set; }

        /// <summary>
        /// Removes attributes from a message.
        /// </summary>
        [Input("removeAttributes")]
        public Input<Inputs.PipelineRemoveAttributesArgs>? RemoveAttributes { get; set; }

        /// <summary>
        /// Creates a new message using only the specified attributes from the original message.
        /// </summary>
        [Input("selectAttributes")]
        public Input<Inputs.PipelineSelectAttributesArgs>? SelectAttributes { get; set; }

        public PipelineActivityArgs()
        {
        }
        public static new PipelineActivityArgs Empty => new PipelineActivityArgs();
    }
}
