// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CustomerProfiles.Inputs
{

    /// <summary>
    /// The relative time period over which data is included in the aggregation.
    /// </summary>
    public sealed class CalculatedAttributeDefinitionRangeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The format the timestamp field in your JSON object is specified. This value should be one of EPOCHMILLI or ISO_8601. E.g. if your object type is MyType and source JSON is {"generatedAt": {"timestamp": "2001-07-04T12:08:56.235Z"}}, then TimestampFormat should be "ISO_8601".
        /// </summary>
        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        /// <summary>
        /// An expression specifying the field in your JSON object from which the date should be parsed. The expression should follow the structure of \"{ObjectTypeName.&lt;Location of timestamp field in JSON pointer format&gt;}\". E.g. if your object type is MyType and source JSON is {"generatedAt": {"timestamp": "1737587945945"}}, then TimestampSource should be "{MyType.generatedAt.timestamp}".
        /// </summary>
        [Input("timestampSource")]
        public Input<string>? TimestampSource { get; set; }

        /// <summary>
        /// The unit of time.
        /// </summary>
        [Input("unit", required: true)]
        public Input<Pulumi.AwsNative.CustomerProfiles.CalculatedAttributeDefinitionRangeUnit> Unit { get; set; } = null!;

        /// <summary>
        /// The amount of time of the specified unit.
        /// </summary>
        [Input("value")]
        public Input<int>? Value { get; set; }

        /// <summary>
        /// A structure letting customers specify a relative time window over which over which data is included in the Calculated Attribute. Use positive numbers to indicate that the endpoint is in the past, and negative numbers to indicate it is in the future. ValueRange overrides Value.
        /// </summary>
        [Input("valueRange")]
        public Input<Inputs.CalculatedAttributeDefinitionValueRangeArgs>? ValueRange { get; set; }

        public CalculatedAttributeDefinitionRangeArgs()
        {
        }
        public static new CalculatedAttributeDefinitionRangeArgs Empty => new CalculatedAttributeDefinitionRangeArgs();
    }
}
