// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CustomerProfiles
{
    public static class GetDomain
    {
        /// <summary>
        /// A domain defined for 3rd party data source in Profile Service
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("aws-native:customerprofiles:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// A domain defined for 3rd party data source in Profile Service
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainResult>("aws-native:customerprofiles:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique name of the domain.
        /// </summary>
        [Input("domainName", required: true)]
        public string DomainName { get; set; } = null!;

        public GetDomainArgs()
        {
        }
    }

    public sealed class GetDomainInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique name of the domain.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        public GetDomainInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        /// <summary>
        /// The time of this integration got created
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// The URL of the SQS dead letter queue
        /// </summary>
        public readonly string? DeadLetterQueueUrl;
        /// <summary>
        /// The default encryption key
        /// </summary>
        public readonly string? DefaultEncryptionKey;
        /// <summary>
        /// The default number of days until the data within the domain expires.
        /// </summary>
        public readonly int? DefaultExpirationDays;
        /// <summary>
        /// The time of this integration got last updated at
        /// </summary>
        public readonly string? LastUpdatedAt;
        /// <summary>
        /// The tags (keys and values) associated with the domain
        /// </summary>
        public readonly ImmutableArray<Outputs.DomainTag> Tags;

        [OutputConstructor]
        private GetDomainResult(
            string? createdAt,

            string? deadLetterQueueUrl,

            string? defaultEncryptionKey,

            int? defaultExpirationDays,

            string? lastUpdatedAt,

            ImmutableArray<Outputs.DomainTag> tags)
        {
            CreatedAt = createdAt;
            DeadLetterQueueUrl = deadLetterQueueUrl;
            DefaultEncryptionKey = defaultEncryptionKey;
            DefaultExpirationDays = defaultExpirationDays;
            LastUpdatedAt = lastUpdatedAt;
            Tags = tags;
        }
    }
}
