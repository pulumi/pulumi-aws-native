// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.CustomerProfiles
{
    [EnumType]
    public readonly struct IntegrationConnectorType : IEquatable<IntegrationConnectorType>
    {
        private readonly string _value;

        private IntegrationConnectorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationConnectorType Salesforce { get; } = new IntegrationConnectorType("Salesforce");
        public static IntegrationConnectorType Marketo { get; } = new IntegrationConnectorType("Marketo");
        public static IntegrationConnectorType ServiceNow { get; } = new IntegrationConnectorType("ServiceNow");
        public static IntegrationConnectorType Zendesk { get; } = new IntegrationConnectorType("Zendesk");
        public static IntegrationConnectorType S3 { get; } = new IntegrationConnectorType("S3");

        public static bool operator ==(IntegrationConnectorType left, IntegrationConnectorType right) => left.Equals(right);
        public static bool operator !=(IntegrationConnectorType left, IntegrationConnectorType right) => !left.Equals(right);

        public static explicit operator string(IntegrationConnectorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationConnectorType other && Equals(other);
        public bool Equals(IntegrationConnectorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IntegrationMarketoConnectorOperator : IEquatable<IntegrationMarketoConnectorOperator>
    {
        private readonly string _value;

        private IntegrationMarketoConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationMarketoConnectorOperator Projection { get; } = new IntegrationMarketoConnectorOperator("PROJECTION");
        public static IntegrationMarketoConnectorOperator LessThan { get; } = new IntegrationMarketoConnectorOperator("LESS_THAN");
        public static IntegrationMarketoConnectorOperator GreaterThan { get; } = new IntegrationMarketoConnectorOperator("GREATER_THAN");
        public static IntegrationMarketoConnectorOperator Between { get; } = new IntegrationMarketoConnectorOperator("BETWEEN");
        public static IntegrationMarketoConnectorOperator Addition { get; } = new IntegrationMarketoConnectorOperator("ADDITION");
        public static IntegrationMarketoConnectorOperator Multiplication { get; } = new IntegrationMarketoConnectorOperator("MULTIPLICATION");
        public static IntegrationMarketoConnectorOperator Division { get; } = new IntegrationMarketoConnectorOperator("DIVISION");
        public static IntegrationMarketoConnectorOperator Subtraction { get; } = new IntegrationMarketoConnectorOperator("SUBTRACTION");
        public static IntegrationMarketoConnectorOperator MaskAll { get; } = new IntegrationMarketoConnectorOperator("MASK_ALL");
        public static IntegrationMarketoConnectorOperator MaskFirstN { get; } = new IntegrationMarketoConnectorOperator("MASK_FIRST_N");
        public static IntegrationMarketoConnectorOperator MaskLastN { get; } = new IntegrationMarketoConnectorOperator("MASK_LAST_N");
        public static IntegrationMarketoConnectorOperator ValidateNonNull { get; } = new IntegrationMarketoConnectorOperator("VALIDATE_NON_NULL");
        public static IntegrationMarketoConnectorOperator ValidateNonZero { get; } = new IntegrationMarketoConnectorOperator("VALIDATE_NON_ZERO");
        public static IntegrationMarketoConnectorOperator ValidateNonNegative { get; } = new IntegrationMarketoConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static IntegrationMarketoConnectorOperator ValidateNumeric { get; } = new IntegrationMarketoConnectorOperator("VALIDATE_NUMERIC");
        public static IntegrationMarketoConnectorOperator NoOp { get; } = new IntegrationMarketoConnectorOperator("NO_OP");

        public static bool operator ==(IntegrationMarketoConnectorOperator left, IntegrationMarketoConnectorOperator right) => left.Equals(right);
        public static bool operator !=(IntegrationMarketoConnectorOperator left, IntegrationMarketoConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(IntegrationMarketoConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationMarketoConnectorOperator other && Equals(other);
        public bool Equals(IntegrationMarketoConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IntegrationOperatorPropertiesKeys : IEquatable<IntegrationOperatorPropertiesKeys>
    {
        private readonly string _value;

        private IntegrationOperatorPropertiesKeys(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationOperatorPropertiesKeys Value { get; } = new IntegrationOperatorPropertiesKeys("VALUE");
        public static IntegrationOperatorPropertiesKeys Values { get; } = new IntegrationOperatorPropertiesKeys("VALUES");
        public static IntegrationOperatorPropertiesKeys DataType { get; } = new IntegrationOperatorPropertiesKeys("DATA_TYPE");
        public static IntegrationOperatorPropertiesKeys UpperBound { get; } = new IntegrationOperatorPropertiesKeys("UPPER_BOUND");
        public static IntegrationOperatorPropertiesKeys LowerBound { get; } = new IntegrationOperatorPropertiesKeys("LOWER_BOUND");
        public static IntegrationOperatorPropertiesKeys SourceDataType { get; } = new IntegrationOperatorPropertiesKeys("SOURCE_DATA_TYPE");
        public static IntegrationOperatorPropertiesKeys DestinationDataType { get; } = new IntegrationOperatorPropertiesKeys("DESTINATION_DATA_TYPE");
        public static IntegrationOperatorPropertiesKeys ValidationAction { get; } = new IntegrationOperatorPropertiesKeys("VALIDATION_ACTION");
        public static IntegrationOperatorPropertiesKeys MaskValue { get; } = new IntegrationOperatorPropertiesKeys("MASK_VALUE");
        public static IntegrationOperatorPropertiesKeys MaskLength { get; } = new IntegrationOperatorPropertiesKeys("MASK_LENGTH");
        public static IntegrationOperatorPropertiesKeys TruncateLength { get; } = new IntegrationOperatorPropertiesKeys("TRUNCATE_LENGTH");
        public static IntegrationOperatorPropertiesKeys MathOperationFieldsOrder { get; } = new IntegrationOperatorPropertiesKeys("MATH_OPERATION_FIELDS_ORDER");
        public static IntegrationOperatorPropertiesKeys ConcatFormat { get; } = new IntegrationOperatorPropertiesKeys("CONCAT_FORMAT");
        public static IntegrationOperatorPropertiesKeys SubfieldCategoryMap { get; } = new IntegrationOperatorPropertiesKeys("SUBFIELD_CATEGORY_MAP");

        public static bool operator ==(IntegrationOperatorPropertiesKeys left, IntegrationOperatorPropertiesKeys right) => left.Equals(right);
        public static bool operator !=(IntegrationOperatorPropertiesKeys left, IntegrationOperatorPropertiesKeys right) => !left.Equals(right);

        public static explicit operator string(IntegrationOperatorPropertiesKeys value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationOperatorPropertiesKeys other && Equals(other);
        public bool Equals(IntegrationOperatorPropertiesKeys other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IntegrationS3ConnectorOperator : IEquatable<IntegrationS3ConnectorOperator>
    {
        private readonly string _value;

        private IntegrationS3ConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationS3ConnectorOperator Projection { get; } = new IntegrationS3ConnectorOperator("PROJECTION");
        public static IntegrationS3ConnectorOperator LessThan { get; } = new IntegrationS3ConnectorOperator("LESS_THAN");
        public static IntegrationS3ConnectorOperator GreaterThan { get; } = new IntegrationS3ConnectorOperator("GREATER_THAN");
        public static IntegrationS3ConnectorOperator Between { get; } = new IntegrationS3ConnectorOperator("BETWEEN");
        public static IntegrationS3ConnectorOperator LessThanOrEqualTo { get; } = new IntegrationS3ConnectorOperator("LESS_THAN_OR_EQUAL_TO");
        public static IntegrationS3ConnectorOperator GreaterThanOrEqualTo { get; } = new IntegrationS3ConnectorOperator("GREATER_THAN_OR_EQUAL_TO");
        public static IntegrationS3ConnectorOperator EqualTo { get; } = new IntegrationS3ConnectorOperator("EQUAL_TO");
        public static IntegrationS3ConnectorOperator NotEqualTo { get; } = new IntegrationS3ConnectorOperator("NOT_EQUAL_TO");
        public static IntegrationS3ConnectorOperator Addition { get; } = new IntegrationS3ConnectorOperator("ADDITION");
        public static IntegrationS3ConnectorOperator Multiplication { get; } = new IntegrationS3ConnectorOperator("MULTIPLICATION");
        public static IntegrationS3ConnectorOperator Division { get; } = new IntegrationS3ConnectorOperator("DIVISION");
        public static IntegrationS3ConnectorOperator Subtraction { get; } = new IntegrationS3ConnectorOperator("SUBTRACTION");
        public static IntegrationS3ConnectorOperator MaskAll { get; } = new IntegrationS3ConnectorOperator("MASK_ALL");
        public static IntegrationS3ConnectorOperator MaskFirstN { get; } = new IntegrationS3ConnectorOperator("MASK_FIRST_N");
        public static IntegrationS3ConnectorOperator MaskLastN { get; } = new IntegrationS3ConnectorOperator("MASK_LAST_N");
        public static IntegrationS3ConnectorOperator ValidateNonNull { get; } = new IntegrationS3ConnectorOperator("VALIDATE_NON_NULL");
        public static IntegrationS3ConnectorOperator ValidateNonZero { get; } = new IntegrationS3ConnectorOperator("VALIDATE_NON_ZERO");
        public static IntegrationS3ConnectorOperator ValidateNonNegative { get; } = new IntegrationS3ConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static IntegrationS3ConnectorOperator ValidateNumeric { get; } = new IntegrationS3ConnectorOperator("VALIDATE_NUMERIC");
        public static IntegrationS3ConnectorOperator NoOp { get; } = new IntegrationS3ConnectorOperator("NO_OP");

        public static bool operator ==(IntegrationS3ConnectorOperator left, IntegrationS3ConnectorOperator right) => left.Equals(right);
        public static bool operator !=(IntegrationS3ConnectorOperator left, IntegrationS3ConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(IntegrationS3ConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationS3ConnectorOperator other && Equals(other);
        public bool Equals(IntegrationS3ConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IntegrationSalesforceConnectorOperator : IEquatable<IntegrationSalesforceConnectorOperator>
    {
        private readonly string _value;

        private IntegrationSalesforceConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationSalesforceConnectorOperator Projection { get; } = new IntegrationSalesforceConnectorOperator("PROJECTION");
        public static IntegrationSalesforceConnectorOperator LessThan { get; } = new IntegrationSalesforceConnectorOperator("LESS_THAN");
        public static IntegrationSalesforceConnectorOperator GreaterThan { get; } = new IntegrationSalesforceConnectorOperator("GREATER_THAN");
        public static IntegrationSalesforceConnectorOperator Contains { get; } = new IntegrationSalesforceConnectorOperator("CONTAINS");
        public static IntegrationSalesforceConnectorOperator Between { get; } = new IntegrationSalesforceConnectorOperator("BETWEEN");
        public static IntegrationSalesforceConnectorOperator LessThanOrEqualTo { get; } = new IntegrationSalesforceConnectorOperator("LESS_THAN_OR_EQUAL_TO");
        public static IntegrationSalesforceConnectorOperator GreaterThanOrEqualTo { get; } = new IntegrationSalesforceConnectorOperator("GREATER_THAN_OR_EQUAL_TO");
        public static IntegrationSalesforceConnectorOperator EqualTo { get; } = new IntegrationSalesforceConnectorOperator("EQUAL_TO");
        public static IntegrationSalesforceConnectorOperator NotEqualTo { get; } = new IntegrationSalesforceConnectorOperator("NOT_EQUAL_TO");
        public static IntegrationSalesforceConnectorOperator Addition { get; } = new IntegrationSalesforceConnectorOperator("ADDITION");
        public static IntegrationSalesforceConnectorOperator Multiplication { get; } = new IntegrationSalesforceConnectorOperator("MULTIPLICATION");
        public static IntegrationSalesforceConnectorOperator Division { get; } = new IntegrationSalesforceConnectorOperator("DIVISION");
        public static IntegrationSalesforceConnectorOperator Subtraction { get; } = new IntegrationSalesforceConnectorOperator("SUBTRACTION");
        public static IntegrationSalesforceConnectorOperator MaskAll { get; } = new IntegrationSalesforceConnectorOperator("MASK_ALL");
        public static IntegrationSalesforceConnectorOperator MaskFirstN { get; } = new IntegrationSalesforceConnectorOperator("MASK_FIRST_N");
        public static IntegrationSalesforceConnectorOperator MaskLastN { get; } = new IntegrationSalesforceConnectorOperator("MASK_LAST_N");
        public static IntegrationSalesforceConnectorOperator ValidateNonNull { get; } = new IntegrationSalesforceConnectorOperator("VALIDATE_NON_NULL");
        public static IntegrationSalesforceConnectorOperator ValidateNonZero { get; } = new IntegrationSalesforceConnectorOperator("VALIDATE_NON_ZERO");
        public static IntegrationSalesforceConnectorOperator ValidateNonNegative { get; } = new IntegrationSalesforceConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static IntegrationSalesforceConnectorOperator ValidateNumeric { get; } = new IntegrationSalesforceConnectorOperator("VALIDATE_NUMERIC");
        public static IntegrationSalesforceConnectorOperator NoOp { get; } = new IntegrationSalesforceConnectorOperator("NO_OP");

        public static bool operator ==(IntegrationSalesforceConnectorOperator left, IntegrationSalesforceConnectorOperator right) => left.Equals(right);
        public static bool operator !=(IntegrationSalesforceConnectorOperator left, IntegrationSalesforceConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(IntegrationSalesforceConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationSalesforceConnectorOperator other && Equals(other);
        public bool Equals(IntegrationSalesforceConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IntegrationScheduledTriggerPropertiesDataPullMode : IEquatable<IntegrationScheduledTriggerPropertiesDataPullMode>
    {
        private readonly string _value;

        private IntegrationScheduledTriggerPropertiesDataPullMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationScheduledTriggerPropertiesDataPullMode Incremental { get; } = new IntegrationScheduledTriggerPropertiesDataPullMode("Incremental");
        public static IntegrationScheduledTriggerPropertiesDataPullMode Complete { get; } = new IntegrationScheduledTriggerPropertiesDataPullMode("Complete");

        public static bool operator ==(IntegrationScheduledTriggerPropertiesDataPullMode left, IntegrationScheduledTriggerPropertiesDataPullMode right) => left.Equals(right);
        public static bool operator !=(IntegrationScheduledTriggerPropertiesDataPullMode left, IntegrationScheduledTriggerPropertiesDataPullMode right) => !left.Equals(right);

        public static explicit operator string(IntegrationScheduledTriggerPropertiesDataPullMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationScheduledTriggerPropertiesDataPullMode other && Equals(other);
        public bool Equals(IntegrationScheduledTriggerPropertiesDataPullMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IntegrationServiceNowConnectorOperator : IEquatable<IntegrationServiceNowConnectorOperator>
    {
        private readonly string _value;

        private IntegrationServiceNowConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationServiceNowConnectorOperator Projection { get; } = new IntegrationServiceNowConnectorOperator("PROJECTION");
        public static IntegrationServiceNowConnectorOperator LessThan { get; } = new IntegrationServiceNowConnectorOperator("LESS_THAN");
        public static IntegrationServiceNowConnectorOperator GreaterThan { get; } = new IntegrationServiceNowConnectorOperator("GREATER_THAN");
        public static IntegrationServiceNowConnectorOperator Contains { get; } = new IntegrationServiceNowConnectorOperator("CONTAINS");
        public static IntegrationServiceNowConnectorOperator Between { get; } = new IntegrationServiceNowConnectorOperator("BETWEEN");
        public static IntegrationServiceNowConnectorOperator LessThanOrEqualTo { get; } = new IntegrationServiceNowConnectorOperator("LESS_THAN_OR_EQUAL_TO");
        public static IntegrationServiceNowConnectorOperator GreaterThanOrEqualTo { get; } = new IntegrationServiceNowConnectorOperator("GREATER_THAN_OR_EQUAL_TO");
        public static IntegrationServiceNowConnectorOperator EqualTo { get; } = new IntegrationServiceNowConnectorOperator("EQUAL_TO");
        public static IntegrationServiceNowConnectorOperator NotEqualTo { get; } = new IntegrationServiceNowConnectorOperator("NOT_EQUAL_TO");
        public static IntegrationServiceNowConnectorOperator Addition { get; } = new IntegrationServiceNowConnectorOperator("ADDITION");
        public static IntegrationServiceNowConnectorOperator Multiplication { get; } = new IntegrationServiceNowConnectorOperator("MULTIPLICATION");
        public static IntegrationServiceNowConnectorOperator Division { get; } = new IntegrationServiceNowConnectorOperator("DIVISION");
        public static IntegrationServiceNowConnectorOperator Subtraction { get; } = new IntegrationServiceNowConnectorOperator("SUBTRACTION");
        public static IntegrationServiceNowConnectorOperator MaskAll { get; } = new IntegrationServiceNowConnectorOperator("MASK_ALL");
        public static IntegrationServiceNowConnectorOperator MaskFirstN { get; } = new IntegrationServiceNowConnectorOperator("MASK_FIRST_N");
        public static IntegrationServiceNowConnectorOperator MaskLastN { get; } = new IntegrationServiceNowConnectorOperator("MASK_LAST_N");
        public static IntegrationServiceNowConnectorOperator ValidateNonNull { get; } = new IntegrationServiceNowConnectorOperator("VALIDATE_NON_NULL");
        public static IntegrationServiceNowConnectorOperator ValidateNonZero { get; } = new IntegrationServiceNowConnectorOperator("VALIDATE_NON_ZERO");
        public static IntegrationServiceNowConnectorOperator ValidateNonNegative { get; } = new IntegrationServiceNowConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static IntegrationServiceNowConnectorOperator ValidateNumeric { get; } = new IntegrationServiceNowConnectorOperator("VALIDATE_NUMERIC");
        public static IntegrationServiceNowConnectorOperator NoOp { get; } = new IntegrationServiceNowConnectorOperator("NO_OP");

        public static bool operator ==(IntegrationServiceNowConnectorOperator left, IntegrationServiceNowConnectorOperator right) => left.Equals(right);
        public static bool operator !=(IntegrationServiceNowConnectorOperator left, IntegrationServiceNowConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(IntegrationServiceNowConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationServiceNowConnectorOperator other && Equals(other);
        public bool Equals(IntegrationServiceNowConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IntegrationTaskType : IEquatable<IntegrationTaskType>
    {
        private readonly string _value;

        private IntegrationTaskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationTaskType Arithmetic { get; } = new IntegrationTaskType("Arithmetic");
        public static IntegrationTaskType Filter { get; } = new IntegrationTaskType("Filter");
        public static IntegrationTaskType Map { get; } = new IntegrationTaskType("Map");
        public static IntegrationTaskType Mask { get; } = new IntegrationTaskType("Mask");
        public static IntegrationTaskType Merge { get; } = new IntegrationTaskType("Merge");
        public static IntegrationTaskType Truncate { get; } = new IntegrationTaskType("Truncate");
        public static IntegrationTaskType Validate { get; } = new IntegrationTaskType("Validate");

        public static bool operator ==(IntegrationTaskType left, IntegrationTaskType right) => left.Equals(right);
        public static bool operator !=(IntegrationTaskType left, IntegrationTaskType right) => !left.Equals(right);

        public static explicit operator string(IntegrationTaskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationTaskType other && Equals(other);
        public bool Equals(IntegrationTaskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IntegrationTriggerType : IEquatable<IntegrationTriggerType>
    {
        private readonly string _value;

        private IntegrationTriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationTriggerType Scheduled { get; } = new IntegrationTriggerType("Scheduled");
        public static IntegrationTriggerType Event { get; } = new IntegrationTriggerType("Event");
        public static IntegrationTriggerType OnDemand { get; } = new IntegrationTriggerType("OnDemand");

        public static bool operator ==(IntegrationTriggerType left, IntegrationTriggerType right) => left.Equals(right);
        public static bool operator !=(IntegrationTriggerType left, IntegrationTriggerType right) => !left.Equals(right);

        public static explicit operator string(IntegrationTriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationTriggerType other && Equals(other);
        public bool Equals(IntegrationTriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IntegrationZendeskConnectorOperator : IEquatable<IntegrationZendeskConnectorOperator>
    {
        private readonly string _value;

        private IntegrationZendeskConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationZendeskConnectorOperator Projection { get; } = new IntegrationZendeskConnectorOperator("PROJECTION");
        public static IntegrationZendeskConnectorOperator GreaterThan { get; } = new IntegrationZendeskConnectorOperator("GREATER_THAN");
        public static IntegrationZendeskConnectorOperator Addition { get; } = new IntegrationZendeskConnectorOperator("ADDITION");
        public static IntegrationZendeskConnectorOperator Multiplication { get; } = new IntegrationZendeskConnectorOperator("MULTIPLICATION");
        public static IntegrationZendeskConnectorOperator Division { get; } = new IntegrationZendeskConnectorOperator("DIVISION");
        public static IntegrationZendeskConnectorOperator Subtraction { get; } = new IntegrationZendeskConnectorOperator("SUBTRACTION");
        public static IntegrationZendeskConnectorOperator MaskAll { get; } = new IntegrationZendeskConnectorOperator("MASK_ALL");
        public static IntegrationZendeskConnectorOperator MaskFirstN { get; } = new IntegrationZendeskConnectorOperator("MASK_FIRST_N");
        public static IntegrationZendeskConnectorOperator MaskLastN { get; } = new IntegrationZendeskConnectorOperator("MASK_LAST_N");
        public static IntegrationZendeskConnectorOperator ValidateNonNull { get; } = new IntegrationZendeskConnectorOperator("VALIDATE_NON_NULL");
        public static IntegrationZendeskConnectorOperator ValidateNonZero { get; } = new IntegrationZendeskConnectorOperator("VALIDATE_NON_ZERO");
        public static IntegrationZendeskConnectorOperator ValidateNonNegative { get; } = new IntegrationZendeskConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static IntegrationZendeskConnectorOperator ValidateNumeric { get; } = new IntegrationZendeskConnectorOperator("VALIDATE_NUMERIC");
        public static IntegrationZendeskConnectorOperator NoOp { get; } = new IntegrationZendeskConnectorOperator("NO_OP");

        public static bool operator ==(IntegrationZendeskConnectorOperator left, IntegrationZendeskConnectorOperator right) => left.Equals(right);
        public static bool operator !=(IntegrationZendeskConnectorOperator left, IntegrationZendeskConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(IntegrationZendeskConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationZendeskConnectorOperator other && Equals(other);
        public bool Equals(IntegrationZendeskConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The content type of the field. Used for determining equality when searching.
    /// </summary>
    [EnumType]
    public readonly struct ObjectTypeFieldContentType : IEquatable<ObjectTypeFieldContentType>
    {
        private readonly string _value;

        private ObjectTypeFieldContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ObjectTypeFieldContentType String { get; } = new ObjectTypeFieldContentType("STRING");
        public static ObjectTypeFieldContentType Number { get; } = new ObjectTypeFieldContentType("NUMBER");
        public static ObjectTypeFieldContentType PhoneNumber { get; } = new ObjectTypeFieldContentType("PHONE_NUMBER");
        public static ObjectTypeFieldContentType EmailAddress { get; } = new ObjectTypeFieldContentType("EMAIL_ADDRESS");
        public static ObjectTypeFieldContentType Name { get; } = new ObjectTypeFieldContentType("NAME");

        public static bool operator ==(ObjectTypeFieldContentType left, ObjectTypeFieldContentType right) => left.Equals(right);
        public static bool operator !=(ObjectTypeFieldContentType left, ObjectTypeFieldContentType right) => !left.Equals(right);

        public static explicit operator string(ObjectTypeFieldContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ObjectTypeFieldContentType other && Equals(other);
        public bool Equals(ObjectTypeFieldContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ObjectTypeKeyStandardIdentifiersItem : IEquatable<ObjectTypeKeyStandardIdentifiersItem>
    {
        private readonly string _value;

        private ObjectTypeKeyStandardIdentifiersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ObjectTypeKeyStandardIdentifiersItem Profile { get; } = new ObjectTypeKeyStandardIdentifiersItem("PROFILE");
        public static ObjectTypeKeyStandardIdentifiersItem Unique { get; } = new ObjectTypeKeyStandardIdentifiersItem("UNIQUE");
        public static ObjectTypeKeyStandardIdentifiersItem Secondary { get; } = new ObjectTypeKeyStandardIdentifiersItem("SECONDARY");
        public static ObjectTypeKeyStandardIdentifiersItem LookupOnly { get; } = new ObjectTypeKeyStandardIdentifiersItem("LOOKUP_ONLY");
        public static ObjectTypeKeyStandardIdentifiersItem NewOnly { get; } = new ObjectTypeKeyStandardIdentifiersItem("NEW_ONLY");

        public static bool operator ==(ObjectTypeKeyStandardIdentifiersItem left, ObjectTypeKeyStandardIdentifiersItem right) => left.Equals(right);
        public static bool operator !=(ObjectTypeKeyStandardIdentifiersItem left, ObjectTypeKeyStandardIdentifiersItem right) => !left.Equals(right);

        public static explicit operator string(ObjectTypeKeyStandardIdentifiersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ObjectTypeKeyStandardIdentifiersItem other && Equals(other);
        public bool Equals(ObjectTypeKeyStandardIdentifiersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
