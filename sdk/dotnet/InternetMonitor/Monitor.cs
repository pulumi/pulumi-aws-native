// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.InternetMonitor
{
    /// <summary>
    /// Represents a monitor, which defines the monitoring boundaries for measurements that Internet Monitor publishes information about for an application
    /// </summary>
    [AwsNativeResourceType("aws-native:internetmonitor:Monitor")]
    public partial class Monitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time when the monitor was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A complex type with the configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for an overall performance or availability issue, across an application's geographies.
        /// 
        /// Defines the percentages, for overall performance scores and availability scores for an application, that are the thresholds for when Internet Monitor creates a health event. You can override the defaults to set a custom threshold for overall performance or availability scores, or both.
        /// 
        /// You can also set thresholds for local health scores,, where Internet Monitor creates a health event when scores cross a threshold for one or more city-networks, in addition to creating an event when an overall score crosses a threshold.
        /// 
        /// If you don't set a health event threshold, the default value is 95%.
        /// 
        /// For local thresholds, you also set a minimum percentage of overall traffic that is impacted by an issue before Internet Monitor creates an event. In addition, you can disable local thresholds, for performance scores, availability scores, or both.
        /// 
        /// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *CloudWatch User Guide* .
        /// </summary>
        [Output("healthEventsConfig")]
        public Output<Outputs.MonitorHealthEventsConfig?> HealthEventsConfig { get; private set; } = null!;

        /// <summary>
        /// A boolean option that you can set to `TRUE` to include monitors for linked accounts in a list of monitors, when you've set up cross-account sharing in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        /// </summary>
        [Output("includeLinkedAccounts")]
        public Output<bool?> IncludeLinkedAccounts { get; private set; } = null!;

        /// <summary>
        /// Publish internet measurements for a monitor for all city-networks (up to the 500,000 service limit) to another location, such as an Amazon S3 bucket. Measurements are also published to Amazon CloudWatch Logs for the first 500 (by traffic volume) city-networks (client locations and ASNs, typically internet service providers or ISPs).
        /// </summary>
        [Output("internetMeasurementsLogDelivery")]
        public Output<Outputs.MonitorInternetMeasurementsLogDelivery?> InternetMeasurementsLogDelivery { get; private set; } = null!;

        /// <summary>
        /// The account ID for an account that you've set up cross-account sharing for in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        /// </summary>
        [Output("linkedAccountId")]
        public Output<string?> LinkedAccountId { get; private set; } = null!;

        /// <summary>
        /// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network, such as an internet service provider, that clients access the resources through.
        /// 
        /// For more information, see [Choosing a city-network maximum value](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html) in *Using Amazon CloudWatch Internet Monitor* .
        /// </summary>
        [Output("maxCityNetworksToMonitor")]
        public Output<int?> MaxCityNetworksToMonitor { get; private set; } = null!;

        /// <summary>
        /// The last time that the monitor was modified.
        /// </summary>
        [Output("modifiedAt")]
        public Output<string> ModifiedAt { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the monitor.
        /// </summary>
        [Output("monitorArn")]
        public Output<string> MonitorArn { get; private set; } = null!;

        /// <summary>
        /// The name of the monitor. A monitor name can contain only alphanumeric characters, dashes (-), periods (.), and underscores (_).
        /// </summary>
        [Output("monitorName")]
        public Output<string> MonitorName { get; private set; } = null!;

        /// <summary>
        /// The health of data processing for the monitor. For more information, see `ProcessingStatus` under [MonitorListMember](https://docs.aws.amazon.com/internet-monitor/latest/api/API_MonitorListMember.html) in the *Amazon CloudWatch Internet Monitor API Reference* .
        /// </summary>
        [Output("processingStatus")]
        public Output<Pulumi.AwsNative.InternetMonitor.MonitorProcessingStatusCode> ProcessingStatus { get; private set; } = null!;

        /// <summary>
        /// Additional information about the health of the data processing for the monitor.
        /// </summary>
        [Output("processingStatusInfo")]
        public Output<string> ProcessingStatusInfo { get; private set; } = null!;

        /// <summary>
        /// The resources that have been added for the monitor, listed by their Amazon Resource Names (ARNs). Use this option to add or remove resources when making an update.
        /// 
        /// &gt; Be aware that if you include content in the `Resources` field when you update a monitor, the `ResourcesToAdd` and `ResourcesToRemove` fields must be empty.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<string>> Resources { get; private set; } = null!;

        /// <summary>
        /// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs). Resources can be Amazon Virtual Private Cloud VPCs, Network Load Balancers (NLBs), Amazon CloudFront distributions, or Amazon WorkSpaces directories.
        /// 
        /// You can add a combination of VPCs and CloudFront distributions, or you can add WorkSpaces directories, or you can add NLBs. You can't add NLBs or WorkSpaces directories together with any other resources.
        /// 
        /// If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.
        /// 
        /// &gt; You can specify this field for a monitor update only if the `Resources` field is empty.
        /// </summary>
        [Output("resourcesToAdd")]
        public Output<ImmutableArray<string>> ResourcesToAdd { get; private set; } = null!;

        /// <summary>
        /// The resources to remove from a monitor, which you provide as a set of Amazon Resource Names (ARNs)
        /// 
        /// &gt; You can specify this field for a monitor update only if the `Resources` field is empty.
        /// </summary>
        [Output("resourcesToRemove")]
        public Output<ImmutableArray<string>> ResourcesToRemove { get; private set; } = null!;

        /// <summary>
        /// The status of a monitor. The accepted values that you can specify for `Status` are `ACTIVE` and `INACTIVE` .
        /// </summary>
        [Output("status")]
        public Output<Pulumi.AwsNative.InternetMonitor.MonitorConfigState?> Status { get; private set; } = null!;

        /// <summary>
        /// The tags for a monitor, listed as a set of *key:value* pairs.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The percentage of the internet-facing traffic for your application that you want to monitor. You can also, optionally, set a limit for the number of city-networks (client locations and ASNs, typically internet service providers) that Internet Monitor will monitor traffic for. The city-networks maximum limit caps the number of city-networks that Internet Monitor monitors for your application, regardless of the percentage of traffic that you choose to monitor.
        /// </summary>
        [Output("trafficPercentageToMonitor")]
        public Output<int?> TrafficPercentageToMonitor { get; private set; } = null!;


        /// <summary>
        /// Create a Monitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Monitor(string name, MonitorArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:internetmonitor:Monitor", name, args ?? new MonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Monitor(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:internetmonitor:Monitor", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "monitorName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Monitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Monitor Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Monitor(name, id, options);
        }
    }

    public sealed class MonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A complex type with the configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for an overall performance or availability issue, across an application's geographies.
        /// 
        /// Defines the percentages, for overall performance scores and availability scores for an application, that are the thresholds for when Internet Monitor creates a health event. You can override the defaults to set a custom threshold for overall performance or availability scores, or both.
        /// 
        /// You can also set thresholds for local health scores,, where Internet Monitor creates a health event when scores cross a threshold for one or more city-networks, in addition to creating an event when an overall score crosses a threshold.
        /// 
        /// If you don't set a health event threshold, the default value is 95%.
        /// 
        /// For local thresholds, you also set a minimum percentage of overall traffic that is impacted by an issue before Internet Monitor creates an event. In addition, you can disable local thresholds, for performance scores, availability scores, or both.
        /// 
        /// For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *CloudWatch User Guide* .
        /// </summary>
        [Input("healthEventsConfig")]
        public Input<Inputs.MonitorHealthEventsConfigArgs>? HealthEventsConfig { get; set; }

        /// <summary>
        /// A boolean option that you can set to `TRUE` to include monitors for linked accounts in a list of monitors, when you've set up cross-account sharing in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        /// </summary>
        [Input("includeLinkedAccounts")]
        public Input<bool>? IncludeLinkedAccounts { get; set; }

        /// <summary>
        /// Publish internet measurements for a monitor for all city-networks (up to the 500,000 service limit) to another location, such as an Amazon S3 bucket. Measurements are also published to Amazon CloudWatch Logs for the first 500 (by traffic volume) city-networks (client locations and ASNs, typically internet service providers or ISPs).
        /// </summary>
        [Input("internetMeasurementsLogDelivery")]
        public Input<Inputs.MonitorInternetMeasurementsLogDeliveryArgs>? InternetMeasurementsLogDelivery { get; set; }

        /// <summary>
        /// The account ID for an account that you've set up cross-account sharing for in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        /// </summary>
        [Input("linkedAccountId")]
        public Input<string>? LinkedAccountId { get; set; }

        /// <summary>
        /// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network, such as an internet service provider, that clients access the resources through.
        /// 
        /// For more information, see [Choosing a city-network maximum value](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html) in *Using Amazon CloudWatch Internet Monitor* .
        /// </summary>
        [Input("maxCityNetworksToMonitor")]
        public Input<int>? MaxCityNetworksToMonitor { get; set; }

        /// <summary>
        /// The name of the monitor. A monitor name can contain only alphanumeric characters, dashes (-), periods (.), and underscores (_).
        /// </summary>
        [Input("monitorName")]
        public Input<string>? MonitorName { get; set; }

        [Input("resources")]
        private InputList<string>? _resources;

        /// <summary>
        /// The resources that have been added for the monitor, listed by their Amazon Resource Names (ARNs). Use this option to add or remove resources when making an update.
        /// 
        /// &gt; Be aware that if you include content in the `Resources` field when you update a monitor, the `ResourcesToAdd` and `ResourcesToRemove` fields must be empty.
        /// </summary>
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        [Input("resourcesToAdd")]
        private InputList<string>? _resourcesToAdd;

        /// <summary>
        /// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs). Resources can be Amazon Virtual Private Cloud VPCs, Network Load Balancers (NLBs), Amazon CloudFront distributions, or Amazon WorkSpaces directories.
        /// 
        /// You can add a combination of VPCs and CloudFront distributions, or you can add WorkSpaces directories, or you can add NLBs. You can't add NLBs or WorkSpaces directories together with any other resources.
        /// 
        /// If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.
        /// 
        /// &gt; You can specify this field for a monitor update only if the `Resources` field is empty.
        /// </summary>
        public InputList<string> ResourcesToAdd
        {
            get => _resourcesToAdd ?? (_resourcesToAdd = new InputList<string>());
            set => _resourcesToAdd = value;
        }

        [Input("resourcesToRemove")]
        private InputList<string>? _resourcesToRemove;

        /// <summary>
        /// The resources to remove from a monitor, which you provide as a set of Amazon Resource Names (ARNs)
        /// 
        /// &gt; You can specify this field for a monitor update only if the `Resources` field is empty.
        /// </summary>
        public InputList<string> ResourcesToRemove
        {
            get => _resourcesToRemove ?? (_resourcesToRemove = new InputList<string>());
            set => _resourcesToRemove = value;
        }

        /// <summary>
        /// The status of a monitor. The accepted values that you can specify for `Status` are `ACTIVE` and `INACTIVE` .
        /// </summary>
        [Input("status")]
        public Input<Pulumi.AwsNative.InternetMonitor.MonitorConfigState>? Status { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The tags for a monitor, listed as a set of *key:value* pairs.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The percentage of the internet-facing traffic for your application that you want to monitor. You can also, optionally, set a limit for the number of city-networks (client locations and ASNs, typically internet service providers) that Internet Monitor will monitor traffic for. The city-networks maximum limit caps the number of city-networks that Internet Monitor monitors for your application, regardless of the percentage of traffic that you choose to monitor.
        /// </summary>
        [Input("trafficPercentageToMonitor")]
        public Input<int>? TrafficPercentageToMonitor { get; set; }

        public MonitorArgs()
        {
        }
        public static new MonitorArgs Empty => new MonitorArgs();
    }
}
