// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AmplifyUiBuilder.Inputs
{

    public sealed class ComponentChildArgs : global::Pulumi.ResourceArgs
    {
        [Input("children")]
        private InputList<Inputs.ComponentChildArgs>? _children;

        /// <summary>
        /// The list of `ComponentChild` instances for this component.
        /// </summary>
        public InputList<Inputs.ComponentChildArgs> Children
        {
            get => _children ?? (_children = new InputList<Inputs.ComponentChildArgs>());
            set => _children = value;
        }

        /// <summary>
        /// The type of the child component.
        /// </summary>
        [Input("componentType", required: true)]
        public Input<string> ComponentType { get; set; } = null!;

        [Input("events")]
        private InputMap<Inputs.ComponentEventArgs>? _events;

        /// <summary>
        /// Describes the events that can be raised on the child component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
        /// </summary>
        public InputMap<Inputs.ComponentEventArgs> Events
        {
            get => _events ?? (_events = new InputMap<Inputs.ComponentEventArgs>());
            set => _events = value;
        }

        /// <summary>
        /// The name of the child component.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("properties", required: true)]
        private InputMap<Inputs.ComponentPropertyArgs>? _properties;

        /// <summary>
        /// Describes the properties of the child component. You can't specify `tags` as a valid property for `properties` .
        /// </summary>
        public InputMap<Inputs.ComponentPropertyArgs> Properties
        {
            get => _properties ?? (_properties = new InputMap<Inputs.ComponentPropertyArgs>());
            set => _properties = value;
        }

        /// <summary>
        /// The unique ID of the child component in its original source system, such as Figma.
        /// </summary>
        [Input("sourceId")]
        public Input<string>? SourceId { get; set; }

        public ComponentChildArgs()
        {
        }
        public static new ComponentChildArgs Empty => new ComponentChildArgs();
    }
}
