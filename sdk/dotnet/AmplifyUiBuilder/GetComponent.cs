// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AmplifyUiBuilder
{
    public static class GetComponent
    {
        /// <summary>
        /// Definition of AWS::AmplifyUIBuilder::Component Resource Type
        /// </summary>
        public static Task<GetComponentResult> InvokeAsync(GetComponentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComponentResult>("aws-native:amplifyuibuilder:getComponent", args ?? new GetComponentArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::AmplifyUIBuilder::Component Resource Type
        /// </summary>
        public static Output<GetComponentResult> Invoke(GetComponentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComponentResult>("aws-native:amplifyuibuilder:getComponent", args ?? new GetComponentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComponentArgs : global::Pulumi.InvokeArgs
    {
        [Input("appId", required: true)]
        public string AppId { get; set; } = null!;

        [Input("environmentName", required: true)]
        public string EnvironmentName { get; set; } = null!;

        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetComponentArgs()
        {
        }
        public static new GetComponentArgs Empty => new GetComponentArgs();
    }

    public sealed class GetComponentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        [Input("environmentName", required: true)]
        public Input<string> EnvironmentName { get; set; } = null!;

        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetComponentInvokeArgs()
        {
        }
        public static new GetComponentInvokeArgs Empty => new GetComponentInvokeArgs();
    }


    [OutputType]
    public sealed class GetComponentResult
    {
        public readonly ImmutableDictionary<string, Outputs.ComponentBindingPropertiesValue>? BindingProperties;
        public readonly ImmutableArray<Outputs.ComponentChild> Children;
        public readonly ImmutableDictionary<string, Outputs.ComponentDataConfiguration>? CollectionProperties;
        public readonly string? ComponentType;
        public readonly string? CreatedAt;
        public readonly ImmutableDictionary<string, Outputs.ComponentEvent>? Events;
        public readonly string? Id;
        public readonly string? ModifiedAt;
        public readonly string? Name;
        public readonly ImmutableDictionary<string, object>? Overrides;
        public readonly ImmutableDictionary<string, Outputs.ComponentProperty>? Properties;
        public readonly string? SchemaVersion;
        public readonly string? SourceId;
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly ImmutableArray<Outputs.ComponentVariant> Variants;

        [OutputConstructor]
        private GetComponentResult(
            ImmutableDictionary<string, Outputs.ComponentBindingPropertiesValue>? bindingProperties,

            ImmutableArray<Outputs.ComponentChild> children,

            ImmutableDictionary<string, Outputs.ComponentDataConfiguration>? collectionProperties,

            string? componentType,

            string? createdAt,

            ImmutableDictionary<string, Outputs.ComponentEvent>? events,

            string? id,

            string? modifiedAt,

            string? name,

            ImmutableDictionary<string, object>? overrides,

            ImmutableDictionary<string, Outputs.ComponentProperty>? properties,

            string? schemaVersion,

            string? sourceId,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<Outputs.ComponentVariant> variants)
        {
            BindingProperties = bindingProperties;
            Children = children;
            CollectionProperties = collectionProperties;
            ComponentType = componentType;
            CreatedAt = createdAt;
            Events = events;
            Id = id;
            ModifiedAt = modifiedAt;
            Name = name;
            Overrides = overrides;
            Properties = properties;
            SchemaVersion = schemaVersion;
            SourceId = sourceId;
            Tags = tags;
            Variants = variants;
        }
    }
}
