// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AmplifyUiBuilder
{
    public static class GetTheme
    {
        /// <summary>
        /// Definition of AWS::AmplifyUIBuilder::Theme Resource Type
        /// </summary>
        public static Task<GetThemeResult> InvokeAsync(GetThemeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetThemeResult>("aws-native:amplifyuibuilder:getTheme", args ?? new GetThemeArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::AmplifyUIBuilder::Theme Resource Type
        /// </summary>
        public static Output<GetThemeResult> Invoke(GetThemeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetThemeResult>("aws-native:amplifyuibuilder:getTheme", args ?? new GetThemeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetThemeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the Amplify app associated with the theme.
        /// </summary>
        [Input("appId", required: true)]
        public string AppId { get; set; } = null!;

        /// <summary>
        /// The name of the backend environment that is a part of the Amplify app.
        /// </summary>
        [Input("environmentName", required: true)]
        public string EnvironmentName { get; set; } = null!;

        /// <summary>
        /// The ID for the theme.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetThemeArgs()
        {
        }
        public static new GetThemeArgs Empty => new GetThemeArgs();
    }

    public sealed class GetThemeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the Amplify app associated with the theme.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// The name of the backend environment that is a part of the Amplify app.
        /// </summary>
        [Input("environmentName", required: true)]
        public Input<string> EnvironmentName { get; set; } = null!;

        /// <summary>
        /// The ID for the theme.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetThemeInvokeArgs()
        {
        }
        public static new GetThemeInvokeArgs Empty => new GetThemeInvokeArgs();
    }


    [OutputType]
    public sealed class GetThemeResult
    {
        /// <summary>
        /// The time that the theme was created.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// The ID for the theme.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The time that the theme was modified.
        /// </summary>
        public readonly string? ModifiedAt;
        /// <summary>
        /// The name of the theme.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Describes the properties that can be overriden to customize a theme.
        /// </summary>
        public readonly ImmutableArray<Outputs.ThemeValues> Overrides;
        /// <summary>
        /// One or more key-value pairs to use when tagging the theme.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// A list of key-value pairs that defines the properties of the theme.
        /// </summary>
        public readonly ImmutableArray<Outputs.ThemeValues> Values;

        [OutputConstructor]
        private GetThemeResult(
            string? createdAt,

            string? id,

            string? modifiedAt,

            string? name,

            ImmutableArray<Outputs.ThemeValues> overrides,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<Outputs.ThemeValues> values)
        {
            CreatedAt = createdAt;
            Id = id;
            ModifiedAt = modifiedAt;
            Name = name;
            Overrides = overrides;
            Tags = tags;
            Values = values;
        }
    }
}
