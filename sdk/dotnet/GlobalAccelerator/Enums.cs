// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.GlobalAccelerator
{
    /// <summary>
    /// IP Address type.
    /// </summary>
    [EnumType]
    public readonly struct AcceleratorIpAddressType : IEquatable<AcceleratorIpAddressType>
    {
        private readonly string _value;

        private AcceleratorIpAddressType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AcceleratorIpAddressType Ipv4 { get; } = new AcceleratorIpAddressType("IPV4");
        public static AcceleratorIpAddressType Ipv6 { get; } = new AcceleratorIpAddressType("IPV6");

        public static bool operator ==(AcceleratorIpAddressType left, AcceleratorIpAddressType right) => left.Equals(right);
        public static bool operator !=(AcceleratorIpAddressType left, AcceleratorIpAddressType right) => !left.Equals(right);

        public static explicit operator string(AcceleratorIpAddressType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AcceleratorIpAddressType other && Equals(other);
        public bool Equals(AcceleratorIpAddressType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.
    /// </summary>
    [EnumType]
    public readonly struct EndpointGroupHealthCheckProtocol : IEquatable<EndpointGroupHealthCheckProtocol>
    {
        private readonly string _value;

        private EndpointGroupHealthCheckProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EndpointGroupHealthCheckProtocol Tcp { get; } = new EndpointGroupHealthCheckProtocol("TCP");
        public static EndpointGroupHealthCheckProtocol Http { get; } = new EndpointGroupHealthCheckProtocol("HTTP");
        public static EndpointGroupHealthCheckProtocol Https { get; } = new EndpointGroupHealthCheckProtocol("HTTPS");

        public static bool operator ==(EndpointGroupHealthCheckProtocol left, EndpointGroupHealthCheckProtocol right) => left.Equals(right);
        public static bool operator !=(EndpointGroupHealthCheckProtocol left, EndpointGroupHealthCheckProtocol right) => !left.Equals(right);

        public static explicit operator string(EndpointGroupHealthCheckProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EndpointGroupHealthCheckProtocol other && Equals(other);
        public bool Equals(EndpointGroupHealthCheckProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Client affinity lets you direct all requests from a user to the same endpoint.
    /// </summary>
    [EnumType]
    public readonly struct ListenerClientAffinity : IEquatable<ListenerClientAffinity>
    {
        private readonly string _value;

        private ListenerClientAffinity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ListenerClientAffinity None { get; } = new ListenerClientAffinity("NONE");
        public static ListenerClientAffinity SourceIp { get; } = new ListenerClientAffinity("SOURCE_IP");

        public static bool operator ==(ListenerClientAffinity left, ListenerClientAffinity right) => left.Equals(right);
        public static bool operator !=(ListenerClientAffinity left, ListenerClientAffinity right) => !left.Equals(right);

        public static explicit operator string(ListenerClientAffinity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ListenerClientAffinity other && Equals(other);
        public bool Equals(ListenerClientAffinity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol for the listener.
    /// </summary>
    [EnumType]
    public readonly struct ListenerProtocol : IEquatable<ListenerProtocol>
    {
        private readonly string _value;

        private ListenerProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ListenerProtocol Tcp { get; } = new ListenerProtocol("TCP");
        public static ListenerProtocol Udp { get; } = new ListenerProtocol("UDP");

        public static bool operator ==(ListenerProtocol left, ListenerProtocol right) => left.Equals(right);
        public static bool operator !=(ListenerProtocol left, ListenerProtocol right) => !left.Equals(right);

        public static explicit operator string(ListenerProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ListenerProtocol other && Equals(other);
        public bool Equals(ListenerProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
