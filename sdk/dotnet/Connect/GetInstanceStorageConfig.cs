// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Connect
{
    public static class GetInstanceStorageConfig
    {
        /// <summary>
        /// Resource Type definition for AWS::Connect::InstanceStorageConfig
        /// </summary>
        public static Task<GetInstanceStorageConfigResult> InvokeAsync(GetInstanceStorageConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceStorageConfigResult>("aws-native:connect:getInstanceStorageConfig", args ?? new GetInstanceStorageConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Connect::InstanceStorageConfig
        /// </summary>
        public static Output<GetInstanceStorageConfigResult> Invoke(GetInstanceStorageConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceStorageConfigResult>("aws-native:connect:getInstanceStorageConfig", args ?? new GetInstanceStorageConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceStorageConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("associationId", required: true)]
        public string AssociationId { get; set; } = null!;

        /// <summary>
        /// Connect Instance ID with which the storage config will be associated
        /// </summary>
        [Input("instanceArn", required: true)]
        public string InstanceArn { get; set; } = null!;

        [Input("resourceType", required: true)]
        public Pulumi.AwsNative.Connect.InstanceStorageConfigInstanceStorageResourceType ResourceType { get; set; }

        public GetInstanceStorageConfigArgs()
        {
        }
        public static new GetInstanceStorageConfigArgs Empty => new GetInstanceStorageConfigArgs();
    }

    public sealed class GetInstanceStorageConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("associationId", required: true)]
        public Input<string> AssociationId { get; set; } = null!;

        /// <summary>
        /// Connect Instance ID with which the storage config will be associated
        /// </summary>
        [Input("instanceArn", required: true)]
        public Input<string> InstanceArn { get; set; } = null!;

        [Input("resourceType", required: true)]
        public Input<Pulumi.AwsNative.Connect.InstanceStorageConfigInstanceStorageResourceType> ResourceType { get; set; } = null!;

        public GetInstanceStorageConfigInvokeArgs()
        {
        }
        public static new GetInstanceStorageConfigInvokeArgs Empty => new GetInstanceStorageConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceStorageConfigResult
    {
        public readonly string? AssociationId;
        public readonly Outputs.InstanceStorageConfigKinesisFirehoseConfig? KinesisFirehoseConfig;
        public readonly Outputs.InstanceStorageConfigKinesisStreamConfig? KinesisStreamConfig;
        public readonly Outputs.InstanceStorageConfigKinesisVideoStreamConfig? KinesisVideoStreamConfig;
        public readonly Outputs.InstanceStorageConfigS3Config? S3Config;
        public readonly Pulumi.AwsNative.Connect.InstanceStorageConfigStorageType? StorageType;

        [OutputConstructor]
        private GetInstanceStorageConfigResult(
            string? associationId,

            Outputs.InstanceStorageConfigKinesisFirehoseConfig? kinesisFirehoseConfig,

            Outputs.InstanceStorageConfigKinesisStreamConfig? kinesisStreamConfig,

            Outputs.InstanceStorageConfigKinesisVideoStreamConfig? kinesisVideoStreamConfig,

            Outputs.InstanceStorageConfigS3Config? s3Config,

            Pulumi.AwsNative.Connect.InstanceStorageConfigStorageType? storageType)
        {
            AssociationId = associationId;
            KinesisFirehoseConfig = kinesisFirehoseConfig;
            KinesisStreamConfig = kinesisStreamConfig;
            KinesisVideoStreamConfig = kinesisVideoStreamConfig;
            S3Config = s3Config;
            StorageType = storageType;
        }
    }
}
