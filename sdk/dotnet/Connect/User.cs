// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Connect
{
    /// <summary>
    /// Resource Type definition for AWS::Connect::User
    /// </summary>
    [AwsNativeResourceType("aws-native:connect:User")]
    public partial class User : Pulumi.CustomResource
    {
        /// <summary>
        /// The identifier of the user account in the directory used for identity management.
        /// </summary>
        [Output("directoryUserId")]
        public Output<string?> DirectoryUserId { get; private set; } = null!;

        /// <summary>
        /// The identifier of the hierarchy group for the user.
        /// </summary>
        [Output("hierarchyGroupArn")]
        public Output<string?> HierarchyGroupArn { get; private set; } = null!;

        /// <summary>
        /// The information about the identity of the user.
        /// </summary>
        [Output("identityInfo")]
        public Output<Outputs.UserIdentityInfo?> IdentityInfo { get; private set; } = null!;

        /// <summary>
        /// The identifier of the Amazon Connect instance.
        /// </summary>
        [Output("instanceArn")]
        public Output<string> InstanceArn { get; private set; } = null!;

        /// <summary>
        /// The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The phone settings for the user.
        /// </summary>
        [Output("phoneConfig")]
        public Output<Outputs.UserPhoneConfig> PhoneConfig { get; private set; } = null!;

        /// <summary>
        /// The identifier of the routing profile for the user.
        /// </summary>
        [Output("routingProfileArn")]
        public Output<string> RoutingProfileArn { get; private set; } = null!;

        /// <summary>
        /// One or more security profile arns for the user
        /// </summary>
        [Output("securityProfileArns")]
        public Output<ImmutableArray<string>> SecurityProfileArns { get; private set; } = null!;

        /// <summary>
        /// One or more tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.UserTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) for the user.
        /// </summary>
        [Output("userArn")]
        public Output<string> UserArn { get; private set; } = null!;

        /// <summary>
        /// The user name for the account.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("aws-native:connect:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:connect:User", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new User(name, id, options);
        }
    }

    public sealed class UserArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identifier of the user account in the directory used for identity management.
        /// </summary>
        [Input("directoryUserId")]
        public Input<string>? DirectoryUserId { get; set; }

        /// <summary>
        /// The identifier of the hierarchy group for the user.
        /// </summary>
        [Input("hierarchyGroupArn")]
        public Input<string>? HierarchyGroupArn { get; set; }

        /// <summary>
        /// The information about the identity of the user.
        /// </summary>
        [Input("identityInfo")]
        public Input<Inputs.UserIdentityInfoArgs>? IdentityInfo { get; set; }

        /// <summary>
        /// The identifier of the Amazon Connect instance.
        /// </summary>
        [Input("instanceArn", required: true)]
        public Input<string> InstanceArn { get; set; } = null!;

        /// <summary>
        /// The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The phone settings for the user.
        /// </summary>
        [Input("phoneConfig", required: true)]
        public Input<Inputs.UserPhoneConfigArgs> PhoneConfig { get; set; } = null!;

        /// <summary>
        /// The identifier of the routing profile for the user.
        /// </summary>
        [Input("routingProfileArn", required: true)]
        public Input<string> RoutingProfileArn { get; set; } = null!;

        [Input("securityProfileArns", required: true)]
        private InputList<string>? _securityProfileArns;

        /// <summary>
        /// One or more security profile arns for the user
        /// </summary>
        public InputList<string> SecurityProfileArns
        {
            get => _securityProfileArns ?? (_securityProfileArns = new InputList<string>());
            set => _securityProfileArns = value;
        }

        [Input("tags")]
        private InputList<Inputs.UserTagArgs>? _tags;

        /// <summary>
        /// One or more tags.
        /// </summary>
        public InputList<Inputs.UserTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.UserTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The user name for the account.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public UserArgs()
        {
        }
    }
}
