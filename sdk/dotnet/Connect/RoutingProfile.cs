// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Connect
{
    /// <summary>
    /// Resource Type definition for AWS::Connect::RoutingProfile
    /// </summary>
    [AwsNativeResourceType("aws-native:connect:RoutingProfile")]
    public partial class RoutingProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether agents with this routing profile will have their routing order calculated based on longest idle time or time since their last inbound contact.
        /// </summary>
        [Output("agentAvailabilityTimer")]
        public Output<Pulumi.AwsNative.Connect.RoutingProfileAgentAvailabilityTimer?> AgentAvailabilityTimer { get; private set; } = null!;

        /// <summary>
        /// The identifier of the default outbound queue for this routing profile.
        /// </summary>
        [Output("defaultOutboundQueueArn")]
        public Output<string> DefaultOutboundQueueArn { get; private set; } = null!;

        /// <summary>
        /// The description of the routing profile.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The identifier of the Amazon Connect instance.
        /// </summary>
        [Output("instanceArn")]
        public Output<string> InstanceArn { get; private set; } = null!;

        /// <summary>
        /// The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.
        /// </summary>
        [Output("mediaConcurrencies")]
        public Output<ImmutableArray<Outputs.RoutingProfileMediaConcurrency>> MediaConcurrencies { get; private set; } = null!;

        /// <summary>
        /// The name of the routing profile.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The queues to associate with this routing profile.
        /// </summary>
        [Output("queueConfigs")]
        public Output<ImmutableArray<Outputs.RoutingProfileQueueConfig>> QueueConfigs { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the routing profile.
        /// </summary>
        [Output("routingProfileArn")]
        public Output<string> RoutingProfileArn { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.RoutingProfileTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a RoutingProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoutingProfile(string name, RoutingProfileArgs args, CustomResourceOptions? options = null)
            : base("aws-native:connect:RoutingProfile", name, args ?? new RoutingProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoutingProfile(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:connect:RoutingProfile", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoutingProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoutingProfile Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RoutingProfile(name, id, options);
        }
    }

    public sealed class RoutingProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether agents with this routing profile will have their routing order calculated based on longest idle time or time since their last inbound contact.
        /// </summary>
        [Input("agentAvailabilityTimer")]
        public Input<Pulumi.AwsNative.Connect.RoutingProfileAgentAvailabilityTimer>? AgentAvailabilityTimer { get; set; }

        /// <summary>
        /// The identifier of the default outbound queue for this routing profile.
        /// </summary>
        [Input("defaultOutboundQueueArn", required: true)]
        public Input<string> DefaultOutboundQueueArn { get; set; } = null!;

        /// <summary>
        /// The description of the routing profile.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The identifier of the Amazon Connect instance.
        /// </summary>
        [Input("instanceArn", required: true)]
        public Input<string> InstanceArn { get; set; } = null!;

        [Input("mediaConcurrencies", required: true)]
        private InputList<Inputs.RoutingProfileMediaConcurrencyArgs>? _mediaConcurrencies;

        /// <summary>
        /// The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.
        /// </summary>
        public InputList<Inputs.RoutingProfileMediaConcurrencyArgs> MediaConcurrencies
        {
            get => _mediaConcurrencies ?? (_mediaConcurrencies = new InputList<Inputs.RoutingProfileMediaConcurrencyArgs>());
            set => _mediaConcurrencies = value;
        }

        /// <summary>
        /// The name of the routing profile.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("queueConfigs")]
        private InputList<Inputs.RoutingProfileQueueConfigArgs>? _queueConfigs;

        /// <summary>
        /// The queues to associate with this routing profile.
        /// </summary>
        public InputList<Inputs.RoutingProfileQueueConfigArgs> QueueConfigs
        {
            get => _queueConfigs ?? (_queueConfigs = new InputList<Inputs.RoutingProfileQueueConfigArgs>());
            set => _queueConfigs = value;
        }

        [Input("tags")]
        private InputList<Inputs.RoutingProfileTagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public InputList<Inputs.RoutingProfileTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RoutingProfileTagArgs>());
            set => _tags = value;
        }

        public RoutingProfileArgs()
        {
        }
        public static new RoutingProfileArgs Empty => new RoutingProfileArgs();
    }
}
