// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Connect
{
    /// <summary>
    /// The state of the contact flow module.
    /// </summary>
    [EnumType]
    public readonly struct ContactFlowModuleState : IEquatable<ContactFlowModuleState>
    {
        private readonly string _value;

        private ContactFlowModuleState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContactFlowModuleState Active { get; } = new ContactFlowModuleState("ACTIVE");
        public static ContactFlowModuleState Archived { get; } = new ContactFlowModuleState("ARCHIVED");

        public static bool operator ==(ContactFlowModuleState left, ContactFlowModuleState right) => left.Equals(right);
        public static bool operator !=(ContactFlowModuleState left, ContactFlowModuleState right) => !left.Equals(right);

        public static explicit operator string(ContactFlowModuleState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContactFlowModuleState other && Equals(other);
        public bool Equals(ContactFlowModuleState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the contact flow module.
    /// </summary>
    [EnumType]
    public readonly struct ContactFlowModuleStatus : IEquatable<ContactFlowModuleStatus>
    {
        private readonly string _value;

        private ContactFlowModuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContactFlowModuleStatus Published { get; } = new ContactFlowModuleStatus("PUBLISHED");
        public static ContactFlowModuleStatus Saved { get; } = new ContactFlowModuleStatus("SAVED");

        public static bool operator ==(ContactFlowModuleStatus left, ContactFlowModuleStatus right) => left.Equals(right);
        public static bool operator !=(ContactFlowModuleStatus left, ContactFlowModuleStatus right) => !left.Equals(right);

        public static explicit operator string(ContactFlowModuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContactFlowModuleStatus other && Equals(other);
        public bool Equals(ContactFlowModuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the contact flow.
    /// </summary>
    [EnumType]
    public readonly struct ContactFlowState : IEquatable<ContactFlowState>
    {
        private readonly string _value;

        private ContactFlowState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContactFlowState Active { get; } = new ContactFlowState("ACTIVE");
        public static ContactFlowState Archived { get; } = new ContactFlowState("ARCHIVED");

        public static bool operator ==(ContactFlowState left, ContactFlowState right) => left.Equals(right);
        public static bool operator !=(ContactFlowState left, ContactFlowState right) => !left.Equals(right);

        public static explicit operator string(ContactFlowState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContactFlowState other && Equals(other);
        public bool Equals(ContactFlowState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the contact flow.
    /// </summary>
    [EnumType]
    public readonly struct ContactFlowType : IEquatable<ContactFlowType>
    {
        private readonly string _value;

        private ContactFlowType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContactFlowType ContactFlow { get; } = new ContactFlowType("CONTACT_FLOW");
        public static ContactFlowType CustomerQueue { get; } = new ContactFlowType("CUSTOMER_QUEUE");
        public static ContactFlowType CustomerHold { get; } = new ContactFlowType("CUSTOMER_HOLD");
        public static ContactFlowType CustomerWhisper { get; } = new ContactFlowType("CUSTOMER_WHISPER");
        public static ContactFlowType AgentHold { get; } = new ContactFlowType("AGENT_HOLD");
        public static ContactFlowType AgentWhisper { get; } = new ContactFlowType("AGENT_WHISPER");
        public static ContactFlowType OutboundWhisper { get; } = new ContactFlowType("OUTBOUND_WHISPER");
        public static ContactFlowType AgentTransfer { get; } = new ContactFlowType("AGENT_TRANSFER");
        public static ContactFlowType QueueTransfer { get; } = new ContactFlowType("QUEUE_TRANSFER");

        public static bool operator ==(ContactFlowType left, ContactFlowType right) => left.Equals(right);
        public static bool operator !=(ContactFlowType left, ContactFlowType right) => !left.Equals(right);

        public static explicit operator string(ContactFlowType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContactFlowType other && Equals(other);
        public bool Equals(ContactFlowType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The day that the hours of operation applies to.
    /// </summary>
    [EnumType]
    public readonly struct HoursOfOperationConfigDay : IEquatable<HoursOfOperationConfigDay>
    {
        private readonly string _value;

        private HoursOfOperationConfigDay(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static HoursOfOperationConfigDay Sunday { get; } = new HoursOfOperationConfigDay("SUNDAY");
        public static HoursOfOperationConfigDay Monday { get; } = new HoursOfOperationConfigDay("MONDAY");
        public static HoursOfOperationConfigDay Tuesday { get; } = new HoursOfOperationConfigDay("TUESDAY");
        public static HoursOfOperationConfigDay Wednesday { get; } = new HoursOfOperationConfigDay("WEDNESDAY");
        public static HoursOfOperationConfigDay Thursday { get; } = new HoursOfOperationConfigDay("THURSDAY");
        public static HoursOfOperationConfigDay Friday { get; } = new HoursOfOperationConfigDay("FRIDAY");
        public static HoursOfOperationConfigDay Saturday { get; } = new HoursOfOperationConfigDay("SATURDAY");

        public static bool operator ==(HoursOfOperationConfigDay left, HoursOfOperationConfigDay right) => left.Equals(right);
        public static bool operator !=(HoursOfOperationConfigDay left, HoursOfOperationConfigDay right) => !left.Equals(right);

        public static explicit operator string(HoursOfOperationConfigDay value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is HoursOfOperationConfigDay other && Equals(other);
        public bool Equals(HoursOfOperationConfigDay other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of directory integration for new instance.
    /// </summary>
    [EnumType]
    public readonly struct InstanceIdentityManagementType : IEquatable<InstanceIdentityManagementType>
    {
        private readonly string _value;

        private InstanceIdentityManagementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstanceIdentityManagementType Saml { get; } = new InstanceIdentityManagementType("SAML");
        public static InstanceIdentityManagementType ConnectManaged { get; } = new InstanceIdentityManagementType("CONNECT_MANAGED");
        public static InstanceIdentityManagementType ExistingDirectory { get; } = new InstanceIdentityManagementType("EXISTING_DIRECTORY");

        public static bool operator ==(InstanceIdentityManagementType left, InstanceIdentityManagementType right) => left.Equals(right);
        public static bool operator !=(InstanceIdentityManagementType left, InstanceIdentityManagementType right) => !left.Equals(right);

        public static explicit operator string(InstanceIdentityManagementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceIdentityManagementType other && Equals(other);
        public bool Equals(InstanceIdentityManagementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the creation status of new instance.
    /// </summary>
    [EnumType]
    public readonly struct InstanceStatus : IEquatable<InstanceStatus>
    {
        private readonly string _value;

        private InstanceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstanceStatus CreationInProgress { get; } = new InstanceStatus("CREATION_IN_PROGRESS");
        public static InstanceStatus CreationFailed { get; } = new InstanceStatus("CREATION_FAILED");
        public static InstanceStatus Active { get; } = new InstanceStatus("ACTIVE");

        public static bool operator ==(InstanceStatus left, InstanceStatus right) => left.Equals(right);
        public static bool operator !=(InstanceStatus left, InstanceStatus right) => !left.Equals(right);

        public static explicit operator string(InstanceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceStatus other && Equals(other);
        public bool Equals(InstanceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies default encryption using AWS KMS-Managed Keys
    /// </summary>
    [EnumType]
    public readonly struct InstanceStorageConfigEncryptionType : IEquatable<InstanceStorageConfigEncryptionType>
    {
        private readonly string _value;

        private InstanceStorageConfigEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstanceStorageConfigEncryptionType Kms { get; } = new InstanceStorageConfigEncryptionType("KMS");

        public static bool operator ==(InstanceStorageConfigEncryptionType left, InstanceStorageConfigEncryptionType right) => left.Equals(right);
        public static bool operator !=(InstanceStorageConfigEncryptionType left, InstanceStorageConfigEncryptionType right) => !left.Equals(right);

        public static explicit operator string(InstanceStorageConfigEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceStorageConfigEncryptionType other && Equals(other);
        public bool Equals(InstanceStorageConfigEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of storage resource available for the instance
    /// </summary>
    [EnumType]
    public readonly struct InstanceStorageConfigInstanceStorageResourceType : IEquatable<InstanceStorageConfigInstanceStorageResourceType>
    {
        private readonly string _value;

        private InstanceStorageConfigInstanceStorageResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstanceStorageConfigInstanceStorageResourceType ChatTranscripts { get; } = new InstanceStorageConfigInstanceStorageResourceType("CHAT_TRANSCRIPTS");
        public static InstanceStorageConfigInstanceStorageResourceType CallRecordings { get; } = new InstanceStorageConfigInstanceStorageResourceType("CALL_RECORDINGS");
        public static InstanceStorageConfigInstanceStorageResourceType ScheduledReports { get; } = new InstanceStorageConfigInstanceStorageResourceType("SCHEDULED_REPORTS");
        public static InstanceStorageConfigInstanceStorageResourceType MediaStreams { get; } = new InstanceStorageConfigInstanceStorageResourceType("MEDIA_STREAMS");
        public static InstanceStorageConfigInstanceStorageResourceType ContactTraceRecords { get; } = new InstanceStorageConfigInstanceStorageResourceType("CONTACT_TRACE_RECORDS");
        public static InstanceStorageConfigInstanceStorageResourceType AgentEvents { get; } = new InstanceStorageConfigInstanceStorageResourceType("AGENT_EVENTS");

        public static bool operator ==(InstanceStorageConfigInstanceStorageResourceType left, InstanceStorageConfigInstanceStorageResourceType right) => left.Equals(right);
        public static bool operator !=(InstanceStorageConfigInstanceStorageResourceType left, InstanceStorageConfigInstanceStorageResourceType right) => !left.Equals(right);

        public static explicit operator string(InstanceStorageConfigInstanceStorageResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceStorageConfigInstanceStorageResourceType other && Equals(other);
        public bool Equals(InstanceStorageConfigInstanceStorageResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the storage type to be associated with the instance
    /// </summary>
    [EnumType]
    public readonly struct InstanceStorageConfigStorageType : IEquatable<InstanceStorageConfigStorageType>
    {
        private readonly string _value;

        private InstanceStorageConfigStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstanceStorageConfigStorageType S3 { get; } = new InstanceStorageConfigStorageType("S3");
        public static InstanceStorageConfigStorageType KinesisVideoStream { get; } = new InstanceStorageConfigStorageType("KINESIS_VIDEO_STREAM");
        public static InstanceStorageConfigStorageType KinesisStream { get; } = new InstanceStorageConfigStorageType("KINESIS_STREAM");
        public static InstanceStorageConfigStorageType KinesisFirehose { get; } = new InstanceStorageConfigStorageType("KINESIS_FIREHOSE");

        public static bool operator ==(InstanceStorageConfigStorageType left, InstanceStorageConfigStorageType right) => left.Equals(right);
        public static bool operator !=(InstanceStorageConfigStorageType left, InstanceStorageConfigStorageType right) => !left.Equals(right);

        public static explicit operator string(InstanceStorageConfigStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceStorageConfigStorageType other && Equals(other);
        public bool Equals(InstanceStorageConfigStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the integration type to be associated with the instance
    /// </summary>
    [EnumType]
    public readonly struct IntegrationAssociationIntegrationType : IEquatable<IntegrationAssociationIntegrationType>
    {
        private readonly string _value;

        private IntegrationAssociationIntegrationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IntegrationAssociationIntegrationType LexBot { get; } = new IntegrationAssociationIntegrationType("LEX_BOT");
        public static IntegrationAssociationIntegrationType LambdaFunction { get; } = new IntegrationAssociationIntegrationType("LAMBDA_FUNCTION");

        public static bool operator ==(IntegrationAssociationIntegrationType left, IntegrationAssociationIntegrationType right) => left.Equals(right);
        public static bool operator !=(IntegrationAssociationIntegrationType left, IntegrationAssociationIntegrationType right) => !left.Equals(right);

        public static explicit operator string(IntegrationAssociationIntegrationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IntegrationAssociationIntegrationType other && Equals(other);
        public bool Equals(IntegrationAssociationIntegrationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
    /// </summary>
    [EnumType]
    public readonly struct QuickConnectType : IEquatable<QuickConnectType>
    {
        private readonly string _value;

        private QuickConnectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QuickConnectType PhoneNumber { get; } = new QuickConnectType("PHONE_NUMBER");
        public static QuickConnectType Queue { get; } = new QuickConnectType("QUEUE");
        public static QuickConnectType User { get; } = new QuickConnectType("USER");

        public static bool operator ==(QuickConnectType left, QuickConnectType right) => left.Equals(right);
        public static bool operator !=(QuickConnectType left, QuickConnectType right) => !left.Equals(right);

        public static explicit operator string(QuickConnectType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QuickConnectType other && Equals(other);
        public bool Equals(QuickConnectType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The publish status of a rule, either draft or published.
    /// </summary>
    [EnumType]
    public readonly struct RulePublishStatus : IEquatable<RulePublishStatus>
    {
        private readonly string _value;

        private RulePublishStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RulePublishStatus Draft { get; } = new RulePublishStatus("DRAFT");
        public static RulePublishStatus Published { get; } = new RulePublishStatus("PUBLISHED");

        public static bool operator ==(RulePublishStatus left, RulePublishStatus right) => left.Equals(right);
        public static bool operator !=(RulePublishStatus left, RulePublishStatus right) => !left.Equals(right);

        public static explicit operator string(RulePublishStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RulePublishStatus other && Equals(other);
        public bool Equals(RulePublishStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of content.
    /// </summary>
    [EnumType]
    public readonly struct RuleSendNotificationActionContentType : IEquatable<RuleSendNotificationActionContentType>
    {
        private readonly string _value;

        private RuleSendNotificationActionContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleSendNotificationActionContentType PlainText { get; } = new RuleSendNotificationActionContentType("PLAIN_TEXT");

        public static bool operator ==(RuleSendNotificationActionContentType left, RuleSendNotificationActionContentType right) => left.Equals(right);
        public static bool operator !=(RuleSendNotificationActionContentType left, RuleSendNotificationActionContentType right) => !left.Equals(right);

        public static explicit operator string(RuleSendNotificationActionContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleSendNotificationActionContentType other && Equals(other);
        public bool Equals(RuleSendNotificationActionContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The means of delivery.
    /// </summary>
    [EnumType]
    public readonly struct RuleSendNotificationActionDeliveryMethod : IEquatable<RuleSendNotificationActionDeliveryMethod>
    {
        private readonly string _value;

        private RuleSendNotificationActionDeliveryMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleSendNotificationActionDeliveryMethod Email { get; } = new RuleSendNotificationActionDeliveryMethod("EMAIL");

        public static bool operator ==(RuleSendNotificationActionDeliveryMethod left, RuleSendNotificationActionDeliveryMethod right) => left.Equals(right);
        public static bool operator !=(RuleSendNotificationActionDeliveryMethod left, RuleSendNotificationActionDeliveryMethod right) => !left.Equals(right);

        public static explicit operator string(RuleSendNotificationActionDeliveryMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleSendNotificationActionDeliveryMethod other && Equals(other);
        public bool Equals(RuleSendNotificationActionDeliveryMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of event source.
    /// </summary>
    [EnumType]
    public readonly struct RuleTriggerEventSourceEventSourceName : IEquatable<RuleTriggerEventSourceEventSourceName>
    {
        private readonly string _value;

        private RuleTriggerEventSourceEventSourceName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleTriggerEventSourceEventSourceName OnPostCallAnalysisAvailable { get; } = new RuleTriggerEventSourceEventSourceName("OnPostCallAnalysisAvailable");
        public static RuleTriggerEventSourceEventSourceName OnRealTimeCallAnalysisAvailable { get; } = new RuleTriggerEventSourceEventSourceName("OnRealTimeCallAnalysisAvailable");
        public static RuleTriggerEventSourceEventSourceName OnPostChatAnalysisAvailable { get; } = new RuleTriggerEventSourceEventSourceName("OnPostChatAnalysisAvailable");
        public static RuleTriggerEventSourceEventSourceName OnZendeskTicketCreate { get; } = new RuleTriggerEventSourceEventSourceName("OnZendeskTicketCreate");
        public static RuleTriggerEventSourceEventSourceName OnZendeskTicketStatusUpdate { get; } = new RuleTriggerEventSourceEventSourceName("OnZendeskTicketStatusUpdate");
        public static RuleTriggerEventSourceEventSourceName OnSalesforceCaseCreate { get; } = new RuleTriggerEventSourceEventSourceName("OnSalesforceCaseCreate");

        public static bool operator ==(RuleTriggerEventSourceEventSourceName left, RuleTriggerEventSourceEventSourceName right) => left.Equals(right);
        public static bool operator !=(RuleTriggerEventSourceEventSourceName left, RuleTriggerEventSourceEventSourceName right) => !left.Equals(right);

        public static explicit operator string(RuleTriggerEventSourceEventSourceName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleTriggerEventSourceEventSourceName other && Equals(other);
        public bool Equals(RuleTriggerEventSourceEventSourceName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the task template's field
    /// </summary>
    [EnumType]
    public readonly struct TaskTemplateFieldType : IEquatable<TaskTemplateFieldType>
    {
        private readonly string _value;

        private TaskTemplateFieldType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TaskTemplateFieldType Name { get; } = new TaskTemplateFieldType("NAME");
        public static TaskTemplateFieldType Description { get; } = new TaskTemplateFieldType("DESCRIPTION");
        public static TaskTemplateFieldType ScheduledTime { get; } = new TaskTemplateFieldType("SCHEDULED_TIME");
        public static TaskTemplateFieldType QuickConnect { get; } = new TaskTemplateFieldType("QUICK_CONNECT");
        public static TaskTemplateFieldType Url { get; } = new TaskTemplateFieldType("URL");
        public static TaskTemplateFieldType Number { get; } = new TaskTemplateFieldType("NUMBER");
        public static TaskTemplateFieldType Text { get; } = new TaskTemplateFieldType("TEXT");
        public static TaskTemplateFieldType TextArea { get; } = new TaskTemplateFieldType("TEXT_AREA");
        public static TaskTemplateFieldType DateTime { get; } = new TaskTemplateFieldType("DATE_TIME");
        public static TaskTemplateFieldType Boolean { get; } = new TaskTemplateFieldType("BOOLEAN");
        public static TaskTemplateFieldType SingleSelect { get; } = new TaskTemplateFieldType("SINGLE_SELECT");
        public static TaskTemplateFieldType Email { get; } = new TaskTemplateFieldType("EMAIL");

        public static bool operator ==(TaskTemplateFieldType left, TaskTemplateFieldType right) => left.Equals(right);
        public static bool operator !=(TaskTemplateFieldType left, TaskTemplateFieldType right) => !left.Equals(right);

        public static explicit operator string(TaskTemplateFieldType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TaskTemplateFieldType other && Equals(other);
        public bool Equals(TaskTemplateFieldType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the task template
    /// </summary>
    [EnumType]
    public readonly struct TaskTemplateStatus : IEquatable<TaskTemplateStatus>
    {
        private readonly string _value;

        private TaskTemplateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TaskTemplateStatus Active { get; } = new TaskTemplateStatus("ACTIVE");
        public static TaskTemplateStatus Inactive { get; } = new TaskTemplateStatus("INACTIVE");

        public static bool operator ==(TaskTemplateStatus left, TaskTemplateStatus right) => left.Equals(right);
        public static bool operator !=(TaskTemplateStatus left, TaskTemplateStatus right) => !left.Equals(right);

        public static explicit operator string(TaskTemplateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TaskTemplateStatus other && Equals(other);
        public bool Equals(TaskTemplateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The phone type.
    /// </summary>
    [EnumType]
    public readonly struct UserPhoneType : IEquatable<UserPhoneType>
    {
        private readonly string _value;

        private UserPhoneType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserPhoneType SoftPhone { get; } = new UserPhoneType("SOFT_PHONE");
        public static UserPhoneType DeskPhone { get; } = new UserPhoneType("DESK_PHONE");

        public static bool operator ==(UserPhoneType left, UserPhoneType right) => left.Equals(right);
        public static bool operator !=(UserPhoneType left, UserPhoneType right) => !left.Equals(right);

        public static explicit operator string(UserPhoneType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserPhoneType other && Equals(other);
        public bool Equals(UserPhoneType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
