// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AutoScaling
{
    public static class GetAutoScalingGroup
    {
        /// <summary>
        /// Resource Type definition for AWS::AutoScaling::AutoScalingGroup
        /// </summary>
        public static Task<GetAutoScalingGroupResult> InvokeAsync(GetAutoScalingGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAutoScalingGroupResult>("aws-native:autoscaling:getAutoScalingGroup", args ?? new GetAutoScalingGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::AutoScaling::AutoScalingGroup
        /// </summary>
        public static Output<GetAutoScalingGroupResult> Invoke(GetAutoScalingGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAutoScalingGroupResult>("aws-native:autoscaling:getAutoScalingGroup", args ?? new GetAutoScalingGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAutoScalingGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetAutoScalingGroupArgs()
        {
        }
        public static new GetAutoScalingGroupArgs Empty => new GetAutoScalingGroupArgs();
    }

    public sealed class GetAutoScalingGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetAutoScalingGroupInvokeArgs()
        {
        }
        public static new GetAutoScalingGroupInvokeArgs Empty => new GetAutoScalingGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetAutoScalingGroupResult
    {
        public readonly ImmutableArray<string> AvailabilityZones;
        public readonly bool? CapacityRebalance;
        public readonly string? Context;
        public readonly string? Cooldown;
        public readonly int? DefaultInstanceWarmup;
        public readonly string? DesiredCapacity;
        public readonly string? DesiredCapacityType;
        public readonly int? HealthCheckGracePeriod;
        public readonly string? HealthCheckType;
        public readonly string? Id;
        public readonly Outputs.AutoScalingGroupInstanceMaintenancePolicy? InstanceMaintenancePolicy;
        public readonly string? LaunchConfigurationName;
        public readonly Outputs.AutoScalingGroupLaunchTemplateSpecification? LaunchTemplate;
        public readonly ImmutableArray<Outputs.AutoScalingGroupLifecycleHookSpecification> LifecycleHookSpecificationList;
        public readonly ImmutableArray<string> LoadBalancerNames;
        public readonly int? MaxInstanceLifetime;
        public readonly string? MaxSize;
        public readonly ImmutableArray<Outputs.AutoScalingGroupMetricsCollection> MetricsCollection;
        public readonly string? MinSize;
        public readonly Outputs.AutoScalingGroupMixedInstancesPolicy? MixedInstancesPolicy;
        public readonly bool? NewInstancesProtectedFromScaleIn;
        public readonly ImmutableArray<Outputs.AutoScalingGroupNotificationConfiguration> NotificationConfigurations;
        public readonly string? PlacementGroup;
        public readonly string? ServiceLinkedRoleArn;
        public readonly ImmutableArray<Outputs.AutoScalingGroupTagProperty> Tags;
        public readonly ImmutableArray<string> TargetGroupArns;
        public readonly ImmutableArray<string> TerminationPolicies;
        public readonly ImmutableArray<string> VpcZoneIdentifier;

        [OutputConstructor]
        private GetAutoScalingGroupResult(
            ImmutableArray<string> availabilityZones,

            bool? capacityRebalance,

            string? context,

            string? cooldown,

            int? defaultInstanceWarmup,

            string? desiredCapacity,

            string? desiredCapacityType,

            int? healthCheckGracePeriod,

            string? healthCheckType,

            string? id,

            Outputs.AutoScalingGroupInstanceMaintenancePolicy? instanceMaintenancePolicy,

            string? launchConfigurationName,

            Outputs.AutoScalingGroupLaunchTemplateSpecification? launchTemplate,

            ImmutableArray<Outputs.AutoScalingGroupLifecycleHookSpecification> lifecycleHookSpecificationList,

            ImmutableArray<string> loadBalancerNames,

            int? maxInstanceLifetime,

            string? maxSize,

            ImmutableArray<Outputs.AutoScalingGroupMetricsCollection> metricsCollection,

            string? minSize,

            Outputs.AutoScalingGroupMixedInstancesPolicy? mixedInstancesPolicy,

            bool? newInstancesProtectedFromScaleIn,

            ImmutableArray<Outputs.AutoScalingGroupNotificationConfiguration> notificationConfigurations,

            string? placementGroup,

            string? serviceLinkedRoleArn,

            ImmutableArray<Outputs.AutoScalingGroupTagProperty> tags,

            ImmutableArray<string> targetGroupArns,

            ImmutableArray<string> terminationPolicies,

            ImmutableArray<string> vpcZoneIdentifier)
        {
            AvailabilityZones = availabilityZones;
            CapacityRebalance = capacityRebalance;
            Context = context;
            Cooldown = cooldown;
            DefaultInstanceWarmup = defaultInstanceWarmup;
            DesiredCapacity = desiredCapacity;
            DesiredCapacityType = desiredCapacityType;
            HealthCheckGracePeriod = healthCheckGracePeriod;
            HealthCheckType = healthCheckType;
            Id = id;
            InstanceMaintenancePolicy = instanceMaintenancePolicy;
            LaunchConfigurationName = launchConfigurationName;
            LaunchTemplate = launchTemplate;
            LifecycleHookSpecificationList = lifecycleHookSpecificationList;
            LoadBalancerNames = loadBalancerNames;
            MaxInstanceLifetime = maxInstanceLifetime;
            MaxSize = maxSize;
            MetricsCollection = metricsCollection;
            MinSize = minSize;
            MixedInstancesPolicy = mixedInstancesPolicy;
            NewInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn;
            NotificationConfigurations = notificationConfigurations;
            PlacementGroup = placementGroup;
            ServiceLinkedRoleArn = serviceLinkedRoleArn;
            Tags = tags;
            TargetGroupArns = targetGroupArns;
            TerminationPolicies = terminationPolicies;
            VpcZoneIdentifier = vpcZoneIdentifier;
        }
    }
}
