// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AutoScaling
{
    public static class GetScalingPolicy
    {
        /// <summary>
        /// Resource Type definition for AWS::AutoScaling::ScalingPolicy
        /// </summary>
        public static Task<GetScalingPolicyResult> InvokeAsync(GetScalingPolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetScalingPolicyResult>("aws-native:autoscaling:getScalingPolicy", args ?? new GetScalingPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::AutoScaling::ScalingPolicy
        /// </summary>
        public static Output<GetScalingPolicyResult> Invoke(GetScalingPolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetScalingPolicyResult>("aws-native:autoscaling:getScalingPolicy", args ?? new GetScalingPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScalingPolicyArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetScalingPolicyArgs()
        {
        }
    }

    public sealed class GetScalingPolicyInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetScalingPolicyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetScalingPolicyResult
    {
        public readonly string? AdjustmentType;
        public readonly string? AutoScalingGroupName;
        public readonly string? Cooldown;
        public readonly int? EstimatedInstanceWarmup;
        public readonly string? Id;
        public readonly string? MetricAggregationType;
        public readonly int? MinAdjustmentMagnitude;
        public readonly string? PolicyType;
        public readonly Outputs.ScalingPolicyPredictiveScalingConfiguration? PredictiveScalingConfiguration;
        public readonly int? ScalingAdjustment;
        public readonly ImmutableArray<Outputs.ScalingPolicyStepAdjustment> StepAdjustments;
        public readonly Outputs.ScalingPolicyTargetTrackingConfiguration? TargetTrackingConfiguration;

        [OutputConstructor]
        private GetScalingPolicyResult(
            string? adjustmentType,

            string? autoScalingGroupName,

            string? cooldown,

            int? estimatedInstanceWarmup,

            string? id,

            string? metricAggregationType,

            int? minAdjustmentMagnitude,

            string? policyType,

            Outputs.ScalingPolicyPredictiveScalingConfiguration? predictiveScalingConfiguration,

            int? scalingAdjustment,

            ImmutableArray<Outputs.ScalingPolicyStepAdjustment> stepAdjustments,

            Outputs.ScalingPolicyTargetTrackingConfiguration? targetTrackingConfiguration)
        {
            AdjustmentType = adjustmentType;
            AutoScalingGroupName = autoScalingGroupName;
            Cooldown = cooldown;
            EstimatedInstanceWarmup = estimatedInstanceWarmup;
            Id = id;
            MetricAggregationType = metricAggregationType;
            MinAdjustmentMagnitude = minAdjustmentMagnitude;
            PolicyType = policyType;
            PredictiveScalingConfiguration = predictiveScalingConfiguration;
            ScalingAdjustment = scalingAdjustment;
            StepAdjustments = stepAdjustments;
            TargetTrackingConfiguration = targetTrackingConfiguration;
        }
    }
}
