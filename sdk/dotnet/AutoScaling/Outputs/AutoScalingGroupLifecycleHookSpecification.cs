// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AutoScaling.Outputs
{

    /// <summary>
    /// ``LifecycleHookSpecification`` specifies a lifecycle hook for the ``LifecycleHookSpecificationList`` property of the [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html) resource. A lifecycle hook specifies actions to perform when Amazon EC2 Auto Scaling launches or terminates instances. 
    ///  For more information, see [Amazon EC2 Auto Scaling lifecycle hooks](https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html) in the *Amazon EC2 Auto Scaling User Guide*. You can find a sample template snippet in the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-lifecyclehook.html#aws-resource-as-lifecyclehook--examples) section of the ``AWS::AutoScaling::LifecycleHook`` resource.
    /// </summary>
    [OutputType]
    public sealed class AutoScalingGroupLifecycleHookSpecification
    {
        /// <summary>
        /// The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is ``ABANDON``.
        ///  Valid values: ``CONTINUE`` | ``ABANDON``
        /// </summary>
        public readonly string? DefaultResult;
        /// <summary>
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from ``30`` to ``7200`` seconds. The default value is ``3600`` seconds (1 hour).
        /// </summary>
        public readonly int? HeartbeatTimeout;
        /// <summary>
        /// The name of the lifecycle hook.
        /// </summary>
        public readonly string LifecycleHookName;
        /// <summary>
        /// The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.
        ///   +  To create a lifecycle hook for scale-out events, specify ``autoscaling:EC2_INSTANCE_LAUNCHING``.
        ///   +  To create a lifecycle hook for scale-in events, specify ``autoscaling:EC2_INSTANCE_TERMINATING``.
        /// </summary>
        public readonly string LifecycleTransition;
        /// <summary>
        /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
        /// </summary>
        public readonly string? NotificationMetadata;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook. You can specify an Amazon SNS topic or an Amazon SQS queue.
        /// </summary>
        public readonly string? NotificationTargetArn;
        /// <summary>
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. For information about creating this role, see [Prepare to add a lifecycle hook to your Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/prepare-for-lifecycle-notifications.html) in the *Amazon EC2 Auto Scaling User Guide*.
        ///  Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue.
        /// </summary>
        public readonly string? RoleArn;

        [OutputConstructor]
        private AutoScalingGroupLifecycleHookSpecification(
            string? defaultResult,

            int? heartbeatTimeout,

            string lifecycleHookName,

            string lifecycleTransition,

            string? notificationMetadata,

            string? notificationTargetArn,

            string? roleArn)
        {
            DefaultResult = defaultResult;
            HeartbeatTimeout = heartbeatTimeout;
            LifecycleHookName = lifecycleHookName;
            LifecycleTransition = lifecycleTransition;
            NotificationMetadata = notificationMetadata;
            NotificationTargetArn = notificationTargetArn;
            RoleArn = roleArn;
        }
    }
}
