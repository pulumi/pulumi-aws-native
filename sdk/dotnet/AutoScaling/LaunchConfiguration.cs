// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AutoScaling
{
    /// <summary>
    /// The AWS::AutoScaling::LaunchConfiguration resource specifies the launch configuration that can be used by an Auto Scaling group to configure Amazon EC2 instances.
    /// </summary>
    [AwsNativeResourceType("aws-native:autoscaling:LaunchConfiguration")]
    public partial class LaunchConfiguration : Pulumi.CustomResource
    {
        /// <summary>
        /// For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.
        /// </summary>
        [Output("associatePublicIpAddress")]
        public Output<bool?> AssociatePublicIpAddress { get; private set; } = null!;

        /// <summary>
        /// Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
        /// </summary>
        [Output("blockDeviceMappings")]
        public Output<ImmutableArray<Outputs.LaunchConfigurationBlockDeviceMapping>> BlockDeviceMappings { get; private set; } = null!;

        /// <summary>
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
        /// </summary>
        [Output("classicLinkVPCId")]
        public Output<string?> ClassicLinkVPCId { get; private set; } = null!;

        /// <summary>
        /// The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
        /// </summary>
        [Output("classicLinkVPCSecurityGroups")]
        public Output<ImmutableArray<string>> ClassicLinkVPCSecurityGroups { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
        /// </summary>
        [Output("ebsOptimized")]
        public Output<bool?> EbsOptimized { get; private set; } = null!;

        /// <summary>
        /// Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
        /// </summary>
        [Output("iamInstanceProfile")]
        public Output<string?> IamInstanceProfile { get; private set; } = null!;

        /// <summary>
        /// Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Amazon EC2 instance you want to use to create the launch configuration.
        /// </summary>
        [Output("instanceId")]
        public Output<string?> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
        /// </summary>
        [Output("instanceMonitoring")]
        public Output<bool?> InstanceMonitoring { get; private set; } = null!;

        /// <summary>
        /// Specifies the instance type of the EC2 instance.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// Provides the ID of the kernel associated with the EC2 AMI.
        /// </summary>
        [Output("kernelId")]
        public Output<string?> KernelId { get; private set; } = null!;

        /// <summary>
        /// Provides the name of the EC2 key pair.
        /// </summary>
        [Output("keyName")]
        public Output<string?> KeyName { get; private set; } = null!;

        /// <summary>
        /// The name of the launch configuration. This name must be unique per Region per account.
        /// </summary>
        [Output("launchConfigurationName")]
        public Output<string?> LaunchConfigurationName { get; private set; } = null!;

        /// <summary>
        /// The metadata options for the instances.
        /// </summary>
        [Output("metadataOptions")]
        public Output<Outputs.LaunchConfigurationMetadataOptions?> MetadataOptions { get; private set; } = null!;

        /// <summary>
        /// The tenancy of the instance, either default or dedicated.
        /// </summary>
        [Output("placementTenancy")]
        public Output<string?> PlacementTenancy { get; private set; } = null!;

        /// <summary>
        /// The ID of the RAM disk to select.
        /// </summary>
        [Output("ramDiskId")]
        public Output<string?> RamDiskId { get; private set; } = null!;

        /// <summary>
        /// A list that contains the security groups to assign to the instances in the Auto Scaling group.
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
        /// </summary>
        [Output("spotPrice")]
        public Output<string?> SpotPrice { get; private set; } = null!;

        /// <summary>
        /// The Base64-encoded user data to make available to the launched EC2 instances.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;


        /// <summary>
        /// Create a LaunchConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LaunchConfiguration(string name, LaunchConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:autoscaling:LaunchConfiguration", name, args ?? new LaunchConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LaunchConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:autoscaling:LaunchConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LaunchConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LaunchConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new LaunchConfiguration(name, id, options);
        }
    }

    public sealed class LaunchConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.
        /// </summary>
        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        [Input("blockDeviceMappings")]
        private InputList<Inputs.LaunchConfigurationBlockDeviceMappingArgs>? _blockDeviceMappings;

        /// <summary>
        /// Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.
        /// </summary>
        public InputList<Inputs.LaunchConfigurationBlockDeviceMappingArgs> BlockDeviceMappings
        {
            get => _blockDeviceMappings ?? (_blockDeviceMappings = new InputList<Inputs.LaunchConfigurationBlockDeviceMappingArgs>());
            set => _blockDeviceMappings = value;
        }

        /// <summary>
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.
        /// </summary>
        [Input("classicLinkVPCId")]
        public Input<string>? ClassicLinkVPCId { get; set; }

        [Input("classicLinkVPCSecurityGroups")]
        private InputList<string>? _classicLinkVPCSecurityGroups;

        /// <summary>
        /// The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.
        /// </summary>
        public InputList<string> ClassicLinkVPCSecurityGroups
        {
            get => _classicLinkVPCSecurityGroups ?? (_classicLinkVPCSecurityGroups = new InputList<string>());
            set => _classicLinkVPCSecurityGroups = value;
        }

        /// <summary>
        /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).
        /// </summary>
        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        /// <summary>
        /// Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.
        /// </summary>
        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        /// <summary>
        /// Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// The ID of the Amazon EC2 instance you want to use to create the launch configuration.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
        /// </summary>
        [Input("instanceMonitoring")]
        public Input<bool>? InstanceMonitoring { get; set; }

        /// <summary>
        /// Specifies the instance type of the EC2 instance.
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// Provides the ID of the kernel associated with the EC2 AMI.
        /// </summary>
        [Input("kernelId")]
        public Input<string>? KernelId { get; set; }

        /// <summary>
        /// Provides the name of the EC2 key pair.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// The name of the launch configuration. This name must be unique per Region per account.
        /// </summary>
        [Input("launchConfigurationName")]
        public Input<string>? LaunchConfigurationName { get; set; }

        /// <summary>
        /// The metadata options for the instances.
        /// </summary>
        [Input("metadataOptions")]
        public Input<Inputs.LaunchConfigurationMetadataOptionsArgs>? MetadataOptions { get; set; }

        /// <summary>
        /// The tenancy of the instance, either default or dedicated.
        /// </summary>
        [Input("placementTenancy")]
        public Input<string>? PlacementTenancy { get; set; }

        /// <summary>
        /// The ID of the RAM disk to select.
        /// </summary>
        [Input("ramDiskId")]
        public Input<string>? RamDiskId { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// A list that contains the security groups to assign to the instances in the Auto Scaling group.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// The Base64-encoded user data to make available to the launched EC2 instances.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public LaunchConfigurationArgs()
        {
        }
    }
}
