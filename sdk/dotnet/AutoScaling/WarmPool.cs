// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AutoScaling
{
    /// <summary>
    /// Resource schema for AWS::AutoScaling::WarmPool.
    /// </summary>
    [AwsNativeResourceType("aws-native:autoscaling:WarmPool")]
    public partial class WarmPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Auto Scaling group.
        /// </summary>
        [Output("autoScalingGroupName")]
        public Output<string> AutoScalingGroupName { get; private set; } = null!;

        /// <summary>
        /// Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
        /// </summary>
        [Output("instanceReusePolicy")]
        public Output<Outputs.WarmPoolInstanceReusePolicy?> InstanceReusePolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except `Terminated` for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group's maximum capacity and its desired capacity.
        /// 
        /// &gt; If a value for `MaxGroupPreparedCapacity` is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group's maximum capacity and its desired capacity. If you specify a value for `MaxGroupPreparedCapacity` , Amazon EC2 Auto Scaling uses the difference between the `MaxGroupPreparedCapacity` and the desired capacity instead.
        /// &gt; 
        /// &gt; The size of the warm pool is dynamic. Only when `MaxGroupPreparedCapacity` and `MinSize` are set to the same value does the warm pool have an absolute size. 
        /// 
        /// If the desired capacity of the Auto Scaling group is higher than the `MaxGroupPreparedCapacity` , the capacity of the warm pool is 0, unless you specify a value for `MinSize` . To remove a value that you previously set, include the property but specify -1 for the value.
        /// </summary>
        [Output("maxGroupPreparedCapacity")]
        public Output<int?> MaxGroupPreparedCapacity { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
        /// </summary>
        [Output("minSize")]
        public Output<int?> MinSize { get; private set; } = null!;

        /// <summary>
        /// Sets the instance state to transition to after the lifecycle actions are complete. Default is `Stopped` .
        /// </summary>
        [Output("poolState")]
        public Output<string?> PoolState { get; private set; } = null!;


        /// <summary>
        /// Create a WarmPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WarmPool(string name, WarmPoolArgs args, CustomResourceOptions? options = null)
            : base("aws-native:autoscaling:WarmPool", name, args ?? new WarmPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WarmPool(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:autoscaling:WarmPool", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "autoScalingGroupName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WarmPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WarmPool Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new WarmPool(name, id, options);
        }
    }

    public sealed class WarmPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Auto Scaling group.
        /// </summary>
        [Input("autoScalingGroupName", required: true)]
        public Input<string> AutoScalingGroupName { get; set; } = null!;

        /// <summary>
        /// Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
        /// </summary>
        [Input("instanceReusePolicy")]
        public Input<Inputs.WarmPoolInstanceReusePolicyArgs>? InstanceReusePolicy { get; set; }

        /// <summary>
        /// Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except `Terminated` for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group's maximum capacity and its desired capacity.
        /// 
        /// &gt; If a value for `MaxGroupPreparedCapacity` is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group's maximum capacity and its desired capacity. If you specify a value for `MaxGroupPreparedCapacity` , Amazon EC2 Auto Scaling uses the difference between the `MaxGroupPreparedCapacity` and the desired capacity instead.
        /// &gt; 
        /// &gt; The size of the warm pool is dynamic. Only when `MaxGroupPreparedCapacity` and `MinSize` are set to the same value does the warm pool have an absolute size. 
        /// 
        /// If the desired capacity of the Auto Scaling group is higher than the `MaxGroupPreparedCapacity` , the capacity of the warm pool is 0, unless you specify a value for `MinSize` . To remove a value that you previously set, include the property but specify -1 for the value.
        /// </summary>
        [Input("maxGroupPreparedCapacity")]
        public Input<int>? MaxGroupPreparedCapacity { get; set; }

        /// <summary>
        /// Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// Sets the instance state to transition to after the lifecycle actions are complete. Default is `Stopped` .
        /// </summary>
        [Input("poolState")]
        public Input<string>? PoolState { get; set; }

        public WarmPoolArgs()
        {
        }
        public static new WarmPoolArgs Empty => new WarmPoolArgs();
    }
}
