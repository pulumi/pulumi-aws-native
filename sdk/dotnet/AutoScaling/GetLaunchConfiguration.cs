// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AutoScaling
{
    public static class GetLaunchConfiguration
    {
        /// <summary>
        /// The AWS::AutoScaling::LaunchConfiguration resource specifies the launch configuration that can be used by an Auto Scaling group to configure Amazon EC2 instances.
        /// </summary>
        public static Task<GetLaunchConfigurationResult> InvokeAsync(GetLaunchConfigurationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLaunchConfigurationResult>("aws-native:autoscaling:getLaunchConfiguration", args ?? new GetLaunchConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::AutoScaling::LaunchConfiguration resource specifies the launch configuration that can be used by an Auto Scaling group to configure Amazon EC2 instances.
        /// </summary>
        public static Output<GetLaunchConfigurationResult> Invoke(GetLaunchConfigurationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetLaunchConfigurationResult>("aws-native:autoscaling:getLaunchConfiguration", args ?? new GetLaunchConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLaunchConfigurationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the launch configuration. This name must be unique per Region per account.
        /// </summary>
        [Input("launchConfigurationName", required: true)]
        public string LaunchConfigurationName { get; set; } = null!;

        public GetLaunchConfigurationArgs()
        {
        }
    }

    public sealed class GetLaunchConfigurationInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the launch configuration. This name must be unique per Region per account.
        /// </summary>
        [Input("launchConfigurationName", required: true)]
        public Input<string> LaunchConfigurationName { get; set; } = null!;

        public GetLaunchConfigurationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLaunchConfigurationResult
    {
        [OutputConstructor]
        private GetLaunchConfigurationResult()
        {
        }
    }
}
