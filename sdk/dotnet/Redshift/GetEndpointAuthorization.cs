// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Redshift
{
    public static class GetEndpointAuthorization
    {
        /// <summary>
        /// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across AWS accounts.
        /// </summary>
        public static Task<GetEndpointAuthorizationResult> InvokeAsync(GetEndpointAuthorizationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEndpointAuthorizationResult>("aws-native:redshift:getEndpointAuthorization", args ?? new GetEndpointAuthorizationArgs(), options.WithDefaults());

        /// <summary>
        /// Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across AWS accounts.
        /// </summary>
        public static Output<GetEndpointAuthorizationResult> Invoke(GetEndpointAuthorizationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetEndpointAuthorizationResult>("aws-native:redshift:getEndpointAuthorization", args ?? new GetEndpointAuthorizationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEndpointAuthorizationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The target AWS account ID to grant or revoke access for.
        /// </summary>
        [Input("account", required: true)]
        public string Account { get; set; } = null!;

        /// <summary>
        /// The cluster identifier.
        /// </summary>
        [Input("clusterIdentifier", required: true)]
        public string ClusterIdentifier { get; set; } = null!;

        public GetEndpointAuthorizationArgs()
        {
        }
    }

    public sealed class GetEndpointAuthorizationInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The target AWS account ID to grant or revoke access for.
        /// </summary>
        [Input("account", required: true)]
        public Input<string> Account { get; set; } = null!;

        /// <summary>
        /// The cluster identifier.
        /// </summary>
        [Input("clusterIdentifier", required: true)]
        public Input<string> ClusterIdentifier { get; set; } = null!;

        public GetEndpointAuthorizationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEndpointAuthorizationResult
    {
        /// <summary>
        /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
        /// </summary>
        public readonly bool? AllowedAllVPCs;
        /// <summary>
        /// The VPCs allowed access to the cluster.
        /// </summary>
        public readonly ImmutableArray<string> AllowedVPCs;
        /// <summary>
        /// The time (UTC) when the authorization was created.
        /// </summary>
        public readonly string? AuthorizeTime;
        /// <summary>
        /// The status of the cluster.
        /// </summary>
        public readonly string? ClusterStatus;
        /// <summary>
        /// The number of Redshift-managed VPC endpoints created for the authorization.
        /// </summary>
        public readonly int? EndpointCount;
        /// <summary>
        /// The AWS account ID of the grantee of the cluster.
        /// </summary>
        public readonly string? Grantee;
        /// <summary>
        /// The AWS account ID of the cluster owner.
        /// </summary>
        public readonly string? Grantor;
        /// <summary>
        /// The status of the authorization action.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The virtual private cloud (VPC) identifiers to grant or revoke access to.
        /// </summary>
        public readonly ImmutableArray<string> VpcIds;

        [OutputConstructor]
        private GetEndpointAuthorizationResult(
            bool? allowedAllVPCs,

            ImmutableArray<string> allowedVPCs,

            string? authorizeTime,

            string? clusterStatus,

            int? endpointCount,

            string? grantee,

            string? grantor,

            string? status,

            ImmutableArray<string> vpcIds)
        {
            AllowedAllVPCs = allowedAllVPCs;
            AllowedVPCs = allowedVPCs;
            AuthorizeTime = authorizeTime;
            ClusterStatus = clusterStatus;
            EndpointCount = endpointCount;
            Grantee = grantee;
            Grantor = grantor;
            Status = status;
            VpcIds = vpcIds;
        }
    }
}
