// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Sns
{
    public static class GetSubscription
    {
        /// <summary>
        /// Resource Type definition for AWS::SNS::Subscription
        /// </summary>
        public static Task<GetSubscriptionResult> InvokeAsync(GetSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubscriptionResult>("aws-native:sns:getSubscription", args ?? new GetSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::SNS::Subscription
        /// </summary>
        public static Output<GetSubscriptionResult> Invoke(GetSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscriptionResult>("aws-native:sns:getSubscription", args ?? new GetSubscriptionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::SNS::Subscription
        /// </summary>
        public static Output<GetSubscriptionResult> Invoke(GetSubscriptionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubscriptionResult>("aws-native:sns:getSubscription", args ?? new GetSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Arn of the subscription
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetSubscriptionArgs()
        {
        }
        public static new GetSubscriptionArgs Empty => new GetSubscriptionArgs();
    }

    public sealed class GetSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Arn of the subscription
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetSubscriptionInvokeArgs()
        {
        }
        public static new GetSubscriptionInvokeArgs Empty => new GetSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubscriptionResult
    {
        /// <summary>
        /// Arn of the subscription
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The delivery policy JSON assigned to the subscription. Enables the subscriber to define the message delivery retry strategy in the case of an HTTP/S endpoint subscribed to the topic.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? DeliveryPolicy;
        /// <summary>
        /// The filter policy JSON assigned to the subscription. Enables the subscriber to filter out unwanted messages.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? FilterPolicy;
        /// <summary>
        /// This attribute lets you choose the filtering scope by using one of the following string value types: MessageAttributes (default) and MessageBody.
        /// </summary>
        public readonly string? FilterPolicyScope;
        /// <summary>
        /// When set to true, enables raw message delivery. Raw messages don't contain any JSON formatting and can be sent to Amazon SQS and HTTP/S endpoints.
        /// </summary>
        public readonly bool? RawMessageDelivery;
        /// <summary>
        /// When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue. Messages that can't be delivered due to client errors are held in the dead-letter queue for further analysis or reprocessing.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? RedrivePolicy;
        /// <summary>
        /// Specifies whether Amazon SNS resends the notification to the subscription when a message's attribute changes.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::SNS::Subscription` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? ReplayPolicy;
        /// <summary>
        /// This property applies only to Amazon Data Firehose delivery stream subscriptions.
        /// </summary>
        public readonly string? SubscriptionRoleArn;

        [OutputConstructor]
        private GetSubscriptionResult(
            string? arn,

            object? deliveryPolicy,

            object? filterPolicy,

            string? filterPolicyScope,

            bool? rawMessageDelivery,

            object? redrivePolicy,

            object? replayPolicy,

            string? subscriptionRoleArn)
        {
            Arn = arn;
            DeliveryPolicy = deliveryPolicy;
            FilterPolicy = filterPolicy;
            FilterPolicyScope = filterPolicyScope;
            RawMessageDelivery = rawMessageDelivery;
            RedrivePolicy = redrivePolicy;
            ReplayPolicy = replayPolicy;
            SubscriptionRoleArn = subscriptionRoleArn;
        }
    }
}
