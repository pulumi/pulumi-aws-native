// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.RDS
{
    public static class GetDBProxy
    {
        /// <summary>
        /// Resource schema for AWS::RDS::DBProxy
        /// </summary>
        public static Task<GetDBProxyResult> InvokeAsync(GetDBProxyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDBProxyResult>("aws-native:rds:getDBProxy", args ?? new GetDBProxyArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::RDS::DBProxy
        /// </summary>
        public static Output<GetDBProxyResult> Invoke(GetDBProxyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDBProxyResult>("aws-native:rds:getDBProxy", args ?? new GetDBProxyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDBProxyArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
        /// </summary>
        [Input("dBProxyName", required: true)]
        public string DBProxyName { get; set; } = null!;

        public GetDBProxyArgs()
        {
        }
    }

    public sealed class GetDBProxyInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
        /// </summary>
        [Input("dBProxyName", required: true)]
        public Input<string> DBProxyName { get; set; } = null!;

        public GetDBProxyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDBProxyResult
    {
        /// <summary>
        /// The authorization mechanism that the proxy uses.
        /// </summary>
        public readonly ImmutableArray<Outputs.DBProxyAuthFormat> Auth;
        /// <summary>
        /// The Amazon Resource Name (ARN) for the proxy.
        /// </summary>
        public readonly string? DBProxyArn;
        /// <summary>
        /// Whether the proxy includes detailed information about SQL statements in its logs.
        /// </summary>
        public readonly bool? DebugLogging;
        /// <summary>
        /// The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
        /// </summary>
        public readonly string? Endpoint;
        /// <summary>
        /// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
        /// </summary>
        public readonly int? IdleClientTimeout;
        /// <summary>
        /// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
        /// </summary>
        public readonly bool? RequireTLS;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
        /// </summary>
        public readonly string? RoleArn;
        /// <summary>
        /// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
        /// </summary>
        public readonly ImmutableArray<Outputs.DBProxyTagFormat> Tags;
        /// <summary>
        /// VPC security group IDs to associate with the new proxy.
        /// </summary>
        public readonly ImmutableArray<string> VpcSecurityGroupIds;

        [OutputConstructor]
        private GetDBProxyResult(
            ImmutableArray<Outputs.DBProxyAuthFormat> auth,

            string? dBProxyArn,

            bool? debugLogging,

            string? endpoint,

            int? idleClientTimeout,

            bool? requireTLS,

            string? roleArn,

            ImmutableArray<Outputs.DBProxyTagFormat> tags,

            ImmutableArray<string> vpcSecurityGroupIds)
        {
            Auth = auth;
            DBProxyArn = dBProxyArn;
            DebugLogging = debugLogging;
            Endpoint = endpoint;
            IdleClientTimeout = idleClientTimeout;
            RequireTLS = requireTLS;
            RoleArn = roleArn;
            Tags = tags;
            VpcSecurityGroupIds = vpcSecurityGroupIds;
        }
    }
}
