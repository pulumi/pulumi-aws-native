// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Evidently
{
    /// <summary>
    /// Resource Type definition for AWS::Evidently::Experiment.
    /// </summary>
    [AwsNativeResourceType("aws-native:evidently:Experiment")]
    public partial class Experiment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the experiment. For example, `arn:aws:evidently:us-west-2:0123455678912:project/myProject/experiment/myExperiment`
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// An optional description of the experiment.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal. You can use up to three metrics in an experiment.
        /// </summary>
        [Output("metricGoals")]
        public Output<ImmutableArray<Outputs.ExperimentMetricGoalObject>> MetricGoals { get; private set; } = null!;

        /// <summary>
        /// A name for the new experiment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
        /// </summary>
        [Output("onlineAbConfig")]
        public Output<Outputs.ExperimentOnlineAbConfigObject> OnlineAbConfig { get; private set; } = null!;

        /// <summary>
        /// The name or the ARN of the project where this experiment is to be created.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the experiment name as the `randomizationSalt` .
        /// </summary>
        [Output("randomizationSalt")]
        public Output<string?> RandomizationSalt { get; private set; } = null!;

        /// <summary>
        /// Set this to `true` to remove the segment that is associated with this experiment. You can't use this parameter if the experiment is currently running.
        /// </summary>
        [Output("removeSegment")]
        public Output<bool?> RemoveSegment { get; private set; } = null!;

        /// <summary>
        /// Start Experiment. Default is False
        /// </summary>
        [Output("runningStatus")]
        public Output<Outputs.ExperimentRunningStatusObject?> RunningStatus { get; private set; } = null!;

        /// <summary>
        /// The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.
        /// 
        /// This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.
        /// </summary>
        [Output("samplingRate")]
        public Output<int?> SamplingRate { get; private set; } = null!;

        /// <summary>
        /// Specifies an audience *segment* to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.
        /// 
        /// For more information, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax) .
        /// </summary>
        [Output("segment")]
        public Output<string?> Segment { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// An array of structures that describe the configuration of each feature variation used in the experiment.
        /// </summary>
        [Output("treatments")]
        public Output<ImmutableArray<Outputs.ExperimentTreatmentObject>> Treatments { get; private set; } = null!;


        /// <summary>
        /// Create a Experiment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Experiment(string name, ExperimentArgs args, CustomResourceOptions? options = null)
            : base("aws-native:evidently:Experiment", name, args ?? new ExperimentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Experiment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:evidently:Experiment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "name",
                    "project",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Experiment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Experiment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Experiment(name, id, options);
        }
    }

    public sealed class ExperimentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of the experiment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("metricGoals", required: true)]
        private InputList<Inputs.ExperimentMetricGoalObjectArgs>? _metricGoals;

        /// <summary>
        /// An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal. You can use up to three metrics in an experiment.
        /// </summary>
        public InputList<Inputs.ExperimentMetricGoalObjectArgs> MetricGoals
        {
            get => _metricGoals ?? (_metricGoals = new InputList<Inputs.ExperimentMetricGoalObjectArgs>());
            set => _metricGoals = value;
        }

        /// <summary>
        /// A name for the new experiment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A structure that contains the configuration of which variation to use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.
        /// </summary>
        [Input("onlineAbConfig", required: true)]
        public Input<Inputs.ExperimentOnlineAbConfigObjectArgs> OnlineAbConfig { get; set; } = null!;

        /// <summary>
        /// The name or the ARN of the project where this experiment is to be created.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and `randomizationSalt` . If you omit `randomizationSalt` , Evidently uses the experiment name as the `randomizationSalt` .
        /// </summary>
        [Input("randomizationSalt")]
        public Input<string>? RandomizationSalt { get; set; }

        /// <summary>
        /// Set this to `true` to remove the segment that is associated with this experiment. You can't use this parameter if the experiment is currently running.
        /// </summary>
        [Input("removeSegment")]
        public Input<bool>? RemoveSegment { get; set; }

        /// <summary>
        /// Start Experiment. Default is False
        /// </summary>
        [Input("runningStatus")]
        public Input<Inputs.ExperimentRunningStatusObjectArgs>? RunningStatus { get; set; }

        /// <summary>
        /// The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.
        /// 
        /// This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.
        /// </summary>
        [Input("samplingRate")]
        public Input<int>? SamplingRate { get; set; }

        /// <summary>
        /// Specifies an audience *segment* to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.
        /// 
        /// For more information, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax) .
        /// </summary>
        [Input("segment")]
        public Input<string>? Segment { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        [Input("treatments", required: true)]
        private InputList<Inputs.ExperimentTreatmentObjectArgs>? _treatments;

        /// <summary>
        /// An array of structures that describe the configuration of each feature variation used in the experiment.
        /// </summary>
        public InputList<Inputs.ExperimentTreatmentObjectArgs> Treatments
        {
            get => _treatments ?? (_treatments = new InputList<Inputs.ExperimentTreatmentObjectArgs>());
            set => _treatments = value;
        }

        public ExperimentArgs()
        {
        }
        public static new ExperimentArgs Empty => new ExperimentArgs();
    }
}
