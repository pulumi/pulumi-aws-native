// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.PinpointEmail
{
    public static class GetIdentity
    {
        /// <summary>
        /// Resource Type definition for AWS::PinpointEmail::Identity
        /// </summary>
        public static Task<GetIdentityResult> InvokeAsync(GetIdentityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIdentityResult>("aws-native:pinpointemail:getIdentity", args ?? new GetIdentityArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::PinpointEmail::Identity
        /// </summary>
        public static Output<GetIdentityResult> Invoke(GetIdentityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIdentityResult>("aws-native:pinpointemail:getIdentity", args ?? new GetIdentityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIdentityArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetIdentityArgs()
        {
        }
        public static new GetIdentityArgs Empty => new GetIdentityArgs();
    }

    public sealed class GetIdentityInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetIdentityInvokeArgs()
        {
        }
        public static new GetIdentityInvokeArgs Empty => new GetIdentityInvokeArgs();
    }


    [OutputType]
    public sealed class GetIdentityResult
    {
        public readonly bool? DkimSigningEnabled;
        public readonly bool? FeedbackForwardingEnabled;
        public readonly string? Id;
        public readonly string? IdentityDnsRecordName1;
        public readonly string? IdentityDnsRecordName2;
        public readonly string? IdentityDnsRecordName3;
        public readonly string? IdentityDnsRecordValue1;
        public readonly string? IdentityDnsRecordValue2;
        public readonly string? IdentityDnsRecordValue3;
        public readonly Outputs.IdentityMailFromAttributes? MailFromAttributes;
        public readonly ImmutableArray<Outputs.IdentityTags> Tags;

        [OutputConstructor]
        private GetIdentityResult(
            bool? dkimSigningEnabled,

            bool? feedbackForwardingEnabled,

            string? id,

            string? identityDnsRecordName1,

            string? identityDnsRecordName2,

            string? identityDnsRecordName3,

            string? identityDnsRecordValue1,

            string? identityDnsRecordValue2,

            string? identityDnsRecordValue3,

            Outputs.IdentityMailFromAttributes? mailFromAttributes,

            ImmutableArray<Outputs.IdentityTags> tags)
        {
            DkimSigningEnabled = dkimSigningEnabled;
            FeedbackForwardingEnabled = feedbackForwardingEnabled;
            Id = id;
            IdentityDnsRecordName1 = identityDnsRecordName1;
            IdentityDnsRecordName2 = identityDnsRecordName2;
            IdentityDnsRecordName3 = identityDnsRecordName3;
            IdentityDnsRecordValue1 = identityDnsRecordValue1;
            IdentityDnsRecordValue2 = identityDnsRecordValue2;
            IdentityDnsRecordValue3 = identityDnsRecordValue3;
            MailFromAttributes = mailFromAttributes;
            Tags = tags;
        }
    }
}
