// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.PinpointEmail
{
    public static class GetIdentity
    {
        /// <summary>
        /// Resource Type definition for AWS::PinpointEmail::Identity
        /// </summary>
        public static Task<GetIdentityResult> InvokeAsync(GetIdentityArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIdentityResult>("aws-native:pinpointemail:getIdentity", args ?? new GetIdentityArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::PinpointEmail::Identity
        /// </summary>
        public static Output<GetIdentityResult> Invoke(GetIdentityInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIdentityResult>("aws-native:pinpointemail:getIdentity", args ?? new GetIdentityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIdentityArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetIdentityArgs()
        {
        }
    }

    public sealed class GetIdentityInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetIdentityInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIdentityResult
    {
        public readonly bool? DkimSigningEnabled;
        public readonly bool? FeedbackForwardingEnabled;
        public readonly string? Id;
        public readonly string? IdentityDNSRecordName1;
        public readonly string? IdentityDNSRecordName2;
        public readonly string? IdentityDNSRecordName3;
        public readonly string? IdentityDNSRecordValue1;
        public readonly string? IdentityDNSRecordValue2;
        public readonly string? IdentityDNSRecordValue3;
        public readonly Outputs.IdentityMailFromAttributes? MailFromAttributes;
        public readonly ImmutableArray<Outputs.IdentityTags> Tags;

        [OutputConstructor]
        private GetIdentityResult(
            bool? dkimSigningEnabled,

            bool? feedbackForwardingEnabled,

            string? id,

            string? identityDNSRecordName1,

            string? identityDNSRecordName2,

            string? identityDNSRecordName3,

            string? identityDNSRecordValue1,

            string? identityDNSRecordValue2,

            string? identityDNSRecordValue3,

            Outputs.IdentityMailFromAttributes? mailFromAttributes,

            ImmutableArray<Outputs.IdentityTags> tags)
        {
            DkimSigningEnabled = dkimSigningEnabled;
            FeedbackForwardingEnabled = feedbackForwardingEnabled;
            Id = id;
            IdentityDNSRecordName1 = identityDNSRecordName1;
            IdentityDNSRecordName2 = identityDNSRecordName2;
            IdentityDNSRecordName3 = identityDNSRecordName3;
            IdentityDNSRecordValue1 = identityDNSRecordValue1;
            IdentityDNSRecordValue2 = identityDNSRecordValue2;
            IdentityDNSRecordValue3 = identityDNSRecordValue3;
            MailFromAttributes = mailFromAttributes;
            Tags = tags;
        }
    }
}
