// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AppMesh
{
    public static class GetRoute
    {
        /// <summary>
        /// Resource Type definition for AWS::AppMesh::Route
        /// </summary>
        public static Task<GetRouteResult> InvokeAsync(GetRouteArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRouteResult>("aws-native:appmesh:getRoute", args ?? new GetRouteArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::AppMesh::Route
        /// </summary>
        public static Output<GetRouteResult> Invoke(GetRouteInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRouteResult>("aws-native:appmesh:getRoute", args ?? new GetRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetRouteArgs()
        {
        }
    }

    public sealed class GetRouteInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetRouteInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRouteResult
    {
        public readonly string? Arn;
        public readonly string? Id;
        public readonly string? ResourceOwner;
        public readonly Outputs.RouteSpec? Spec;
        public readonly ImmutableArray<Outputs.RouteTag> Tags;
        public readonly string? Uid;

        [OutputConstructor]
        private GetRouteResult(
            string? arn,

            string? id,

            string? resourceOwner,

            Outputs.RouteSpec? spec,

            ImmutableArray<Outputs.RouteTag> tags,

            string? uid)
        {
            Arn = arn;
            Id = id;
            ResourceOwner = resourceOwner;
            Spec = spec;
            Tags = tags;
            Uid = uid;
        }
    }
}
