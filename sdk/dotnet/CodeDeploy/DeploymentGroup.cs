// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CodeDeploy
{
    /// <summary>
    /// Resource Type definition for AWS::CodeDeploy::DeploymentGroup
    /// </summary>
    [Obsolete(@"DeploymentGroup is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")]
    [AwsNativeResourceType("aws-native:codedeploy:DeploymentGroup")]
    public partial class DeploymentGroup : Pulumi.CustomResource
    {
        [Output("alarmConfiguration")]
        public Output<Outputs.DeploymentGroupAlarmConfiguration?> AlarmConfiguration { get; private set; } = null!;

        [Output("applicationName")]
        public Output<string> ApplicationName { get; private set; } = null!;

        [Output("autoRollbackConfiguration")]
        public Output<Outputs.DeploymentGroupAutoRollbackConfiguration?> AutoRollbackConfiguration { get; private set; } = null!;

        [Output("autoScalingGroups")]
        public Output<ImmutableArray<string>> AutoScalingGroups { get; private set; } = null!;

        [Output("blueGreenDeploymentConfiguration")]
        public Output<Outputs.DeploymentGroupBlueGreenDeploymentConfiguration?> BlueGreenDeploymentConfiguration { get; private set; } = null!;

        [Output("deployment")]
        public Output<Outputs.DeploymentGroupDeployment?> Deployment { get; private set; } = null!;

        [Output("deploymentConfigName")]
        public Output<string?> DeploymentConfigName { get; private set; } = null!;

        [Output("deploymentGroupName")]
        public Output<string?> DeploymentGroupName { get; private set; } = null!;

        [Output("deploymentStyle")]
        public Output<Outputs.DeploymentGroupDeploymentStyle?> DeploymentStyle { get; private set; } = null!;

        [Output("eCSServices")]
        public Output<ImmutableArray<Outputs.DeploymentGroupECSService>> ECSServices { get; private set; } = null!;

        [Output("ec2TagFilters")]
        public Output<ImmutableArray<Outputs.DeploymentGroupEC2TagFilter>> Ec2TagFilters { get; private set; } = null!;

        [Output("ec2TagSet")]
        public Output<Outputs.DeploymentGroupEC2TagSet?> Ec2TagSet { get; private set; } = null!;

        [Output("loadBalancerInfo")]
        public Output<Outputs.DeploymentGroupLoadBalancerInfo?> LoadBalancerInfo { get; private set; } = null!;

        [Output("onPremisesInstanceTagFilters")]
        public Output<ImmutableArray<Outputs.DeploymentGroupTagFilter>> OnPremisesInstanceTagFilters { get; private set; } = null!;

        [Output("onPremisesTagSet")]
        public Output<Outputs.DeploymentGroupOnPremisesTagSet?> OnPremisesTagSet { get; private set; } = null!;

        [Output("serviceRoleArn")]
        public Output<string> ServiceRoleArn { get; private set; } = null!;

        [Output("triggerConfigurations")]
        public Output<ImmutableArray<Outputs.DeploymentGroupTriggerConfig>> TriggerConfigurations { get; private set; } = null!;


        /// <summary>
        /// Create a DeploymentGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeploymentGroup(string name, DeploymentGroupArgs args, CustomResourceOptions? options = null)
            : base("aws-native:codedeploy:DeploymentGroup", name, args ?? new DeploymentGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeploymentGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:codedeploy:DeploymentGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeploymentGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeploymentGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DeploymentGroup(name, id, options);
        }
    }

    public sealed class DeploymentGroupArgs : Pulumi.ResourceArgs
    {
        [Input("alarmConfiguration")]
        public Input<Inputs.DeploymentGroupAlarmConfigurationArgs>? AlarmConfiguration { get; set; }

        [Input("applicationName", required: true)]
        public Input<string> ApplicationName { get; set; } = null!;

        [Input("autoRollbackConfiguration")]
        public Input<Inputs.DeploymentGroupAutoRollbackConfigurationArgs>? AutoRollbackConfiguration { get; set; }

        [Input("autoScalingGroups")]
        private InputList<string>? _autoScalingGroups;
        public InputList<string> AutoScalingGroups
        {
            get => _autoScalingGroups ?? (_autoScalingGroups = new InputList<string>());
            set => _autoScalingGroups = value;
        }

        [Input("blueGreenDeploymentConfiguration")]
        public Input<Inputs.DeploymentGroupBlueGreenDeploymentConfigurationArgs>? BlueGreenDeploymentConfiguration { get; set; }

        [Input("deployment")]
        public Input<Inputs.DeploymentGroupDeploymentArgs>? Deployment { get; set; }

        [Input("deploymentConfigName")]
        public Input<string>? DeploymentConfigName { get; set; }

        [Input("deploymentGroupName")]
        public Input<string>? DeploymentGroupName { get; set; }

        [Input("deploymentStyle")]
        public Input<Inputs.DeploymentGroupDeploymentStyleArgs>? DeploymentStyle { get; set; }

        [Input("eCSServices")]
        private InputList<Inputs.DeploymentGroupECSServiceArgs>? _eCSServices;
        public InputList<Inputs.DeploymentGroupECSServiceArgs> ECSServices
        {
            get => _eCSServices ?? (_eCSServices = new InputList<Inputs.DeploymentGroupECSServiceArgs>());
            set => _eCSServices = value;
        }

        [Input("ec2TagFilters")]
        private InputList<Inputs.DeploymentGroupEC2TagFilterArgs>? _ec2TagFilters;
        public InputList<Inputs.DeploymentGroupEC2TagFilterArgs> Ec2TagFilters
        {
            get => _ec2TagFilters ?? (_ec2TagFilters = new InputList<Inputs.DeploymentGroupEC2TagFilterArgs>());
            set => _ec2TagFilters = value;
        }

        [Input("ec2TagSet")]
        public Input<Inputs.DeploymentGroupEC2TagSetArgs>? Ec2TagSet { get; set; }

        [Input("loadBalancerInfo")]
        public Input<Inputs.DeploymentGroupLoadBalancerInfoArgs>? LoadBalancerInfo { get; set; }

        [Input("onPremisesInstanceTagFilters")]
        private InputList<Inputs.DeploymentGroupTagFilterArgs>? _onPremisesInstanceTagFilters;
        public InputList<Inputs.DeploymentGroupTagFilterArgs> OnPremisesInstanceTagFilters
        {
            get => _onPremisesInstanceTagFilters ?? (_onPremisesInstanceTagFilters = new InputList<Inputs.DeploymentGroupTagFilterArgs>());
            set => _onPremisesInstanceTagFilters = value;
        }

        [Input("onPremisesTagSet")]
        public Input<Inputs.DeploymentGroupOnPremisesTagSetArgs>? OnPremisesTagSet { get; set; }

        [Input("serviceRoleArn", required: true)]
        public Input<string> ServiceRoleArn { get; set; } = null!;

        [Input("triggerConfigurations")]
        private InputList<Inputs.DeploymentGroupTriggerConfigArgs>? _triggerConfigurations;
        public InputList<Inputs.DeploymentGroupTriggerConfigArgs> TriggerConfigurations
        {
            get => _triggerConfigurations ?? (_triggerConfigurations = new InputList<Inputs.DeploymentGroupTriggerConfigArgs>());
            set => _triggerConfigurations = value;
        }

        public DeploymentGroupArgs()
        {
        }
    }
}
