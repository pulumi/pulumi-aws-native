// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Sso
{
    /// <summary>
    /// The entity type for which the assignment will be created.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationAssignmentPrincipalType : IEquatable<ApplicationAssignmentPrincipalType>
    {
        private readonly string _value;

        private ApplicationAssignmentPrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationAssignmentPrincipalType User { get; } = new ApplicationAssignmentPrincipalType("USER");
        public static ApplicationAssignmentPrincipalType Group { get; } = new ApplicationAssignmentPrincipalType("GROUP");

        public static bool operator ==(ApplicationAssignmentPrincipalType left, ApplicationAssignmentPrincipalType right) => left.Equals(right);
        public static bool operator !=(ApplicationAssignmentPrincipalType left, ApplicationAssignmentPrincipalType right) => !left.Equals(right);

        public static explicit operator string(ApplicationAssignmentPrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationAssignmentPrincipalType other && Equals(other);
        public bool Equals(ApplicationAssignmentPrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether this application is visible in the access portal
    /// </summary>
    [EnumType]
    public readonly struct ApplicationPortalOptionsConfigurationVisibility : IEquatable<ApplicationPortalOptionsConfigurationVisibility>
    {
        private readonly string _value;

        private ApplicationPortalOptionsConfigurationVisibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationPortalOptionsConfigurationVisibility Enabled { get; } = new ApplicationPortalOptionsConfigurationVisibility("ENABLED");
        public static ApplicationPortalOptionsConfigurationVisibility Disabled { get; } = new ApplicationPortalOptionsConfigurationVisibility("DISABLED");

        public static bool operator ==(ApplicationPortalOptionsConfigurationVisibility left, ApplicationPortalOptionsConfigurationVisibility right) => left.Equals(right);
        public static bool operator !=(ApplicationPortalOptionsConfigurationVisibility left, ApplicationPortalOptionsConfigurationVisibility right) => !left.Equals(right);

        public static explicit operator string(ApplicationPortalOptionsConfigurationVisibility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationPortalOptionsConfigurationVisibility other && Equals(other);
        public bool Equals(ApplicationPortalOptionsConfigurationVisibility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This determines how IAM Identity Center navigates the user to the target application
    /// </summary>
    [EnumType]
    public readonly struct ApplicationSignInOptionsOrigin : IEquatable<ApplicationSignInOptionsOrigin>
    {
        private readonly string _value;

        private ApplicationSignInOptionsOrigin(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationSignInOptionsOrigin IdentityCenter { get; } = new ApplicationSignInOptionsOrigin("IDENTITY_CENTER");
        public static ApplicationSignInOptionsOrigin Application { get; } = new ApplicationSignInOptionsOrigin("APPLICATION");

        public static bool operator ==(ApplicationSignInOptionsOrigin left, ApplicationSignInOptionsOrigin right) => left.Equals(right);
        public static bool operator !=(ApplicationSignInOptionsOrigin left, ApplicationSignInOptionsOrigin right) => !left.Equals(right);

        public static explicit operator string(ApplicationSignInOptionsOrigin value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationSignInOptionsOrigin other && Equals(other);
        public bool Equals(ApplicationSignInOptionsOrigin other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether the application is enabled or disabled
    /// </summary>
    [EnumType]
    public readonly struct ApplicationStatus : IEquatable<ApplicationStatus>
    {
        private readonly string _value;

        private ApplicationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationStatus Enabled { get; } = new ApplicationStatus("ENABLED");
        public static ApplicationStatus Disabled { get; } = new ApplicationStatus("DISABLED");

        public static bool operator ==(ApplicationStatus left, ApplicationStatus right) => left.Equals(right);
        public static bool operator !=(ApplicationStatus left, ApplicationStatus right) => !left.Equals(right);

        public static explicit operator string(ApplicationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationStatus other && Equals(other);
        public bool Equals(ApplicationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The assignee's type, user/group
    /// </summary>
    [EnumType]
    public readonly struct AssignmentPrincipalType : IEquatable<AssignmentPrincipalType>
    {
        private readonly string _value;

        private AssignmentPrincipalType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssignmentPrincipalType User { get; } = new AssignmentPrincipalType("USER");
        public static AssignmentPrincipalType Group { get; } = new AssignmentPrincipalType("GROUP");

        public static bool operator ==(AssignmentPrincipalType left, AssignmentPrincipalType right) => left.Equals(right);
        public static bool operator !=(AssignmentPrincipalType left, AssignmentPrincipalType right) => !left.Equals(right);

        public static explicit operator string(AssignmentPrincipalType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssignmentPrincipalType other && Equals(other);
        public bool Equals(AssignmentPrincipalType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of resource to be provsioned to, only aws account now
    /// </summary>
    [EnumType]
    public readonly struct AssignmentTargetType : IEquatable<AssignmentTargetType>
    {
        private readonly string _value;

        private AssignmentTargetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssignmentTargetType AwsAccount { get; } = new AssignmentTargetType("AWS_ACCOUNT");

        public static bool operator ==(AssignmentTargetType left, AssignmentTargetType right) => left.Equals(right);
        public static bool operator !=(AssignmentTargetType left, AssignmentTargetType right) => !left.Equals(right);

        public static explicit operator string(AssignmentTargetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssignmentTargetType other && Equals(other);
        public bool Equals(AssignmentTargetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
