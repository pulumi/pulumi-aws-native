// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGatewayV2
{
    public static class GetRoute
    {
        /// <summary>
        /// Resource Type definition for AWS::ApiGatewayV2::Route
        /// </summary>
        public static Task<GetRouteResult> InvokeAsync(GetRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteResult>("aws-native:apigatewayv2:getRoute", args ?? new GetRouteArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ApiGatewayV2::Route
        /// </summary>
        public static Output<GetRouteResult> Invoke(GetRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteResult>("aws-native:apigatewayv2:getRoute", args ?? new GetRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public string ApiId { get; set; } = null!;

        [Input("routeId", required: true)]
        public string RouteId { get; set; } = null!;

        public GetRouteArgs()
        {
        }
        public static new GetRouteArgs Empty => new GetRouteArgs();
    }

    public sealed class GetRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        [Input("routeId", required: true)]
        public Input<string> RouteId { get; set; } = null!;

        public GetRouteInvokeArgs()
        {
        }
        public static new GetRouteInvokeArgs Empty => new GetRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteResult
    {
        public readonly bool? ApiKeyRequired;
        public readonly ImmutableArray<string> AuthorizationScopes;
        public readonly string? AuthorizationType;
        public readonly string? ModelSelectionExpression;
        public readonly string? OperationName;
        public readonly object? RequestModels;
        public readonly string? RouteId;
        public readonly string? RouteKey;
        public readonly string? RouteResponseSelectionExpression;
        public readonly string? Target;

        [OutputConstructor]
        private GetRouteResult(
            bool? apiKeyRequired,

            ImmutableArray<string> authorizationScopes,

            string? authorizationType,

            string? modelSelectionExpression,

            string? operationName,

            object? requestModels,

            string? routeId,

            string? routeKey,

            string? routeResponseSelectionExpression,

            string? target)
        {
            ApiKeyRequired = apiKeyRequired;
            AuthorizationScopes = authorizationScopes;
            AuthorizationType = authorizationType;
            ModelSelectionExpression = modelSelectionExpression;
            OperationName = operationName;
            RequestModels = requestModels;
            RouteId = routeId;
            RouteKey = routeKey;
            RouteResponseSelectionExpression = routeResponseSelectionExpression;
            Target = target;
        }
    }
}
