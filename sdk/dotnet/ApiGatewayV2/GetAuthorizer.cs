// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGatewayV2
{
    public static class GetAuthorizer
    {
        /// <summary>
        /// Resource Type definition for AWS::ApiGatewayV2::Authorizer
        /// </summary>
        public static Task<GetAuthorizerResult> InvokeAsync(GetAuthorizerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAuthorizerResult>("aws-native:apigatewayv2:getAuthorizer", args ?? new GetAuthorizerArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ApiGatewayV2::Authorizer
        /// </summary>
        public static Output<GetAuthorizerResult> Invoke(GetAuthorizerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAuthorizerResult>("aws-native:apigatewayv2:getAuthorizer", args ?? new GetAuthorizerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthorizerArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetAuthorizerArgs()
        {
        }
    }

    public sealed class GetAuthorizerInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetAuthorizerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAuthorizerResult
    {
        public readonly string? AuthorizerCredentialsArn;
        public readonly string? AuthorizerPayloadFormatVersion;
        public readonly int? AuthorizerResultTtlInSeconds;
        public readonly string? AuthorizerType;
        public readonly string? AuthorizerUri;
        public readonly bool? EnableSimpleResponses;
        public readonly string? Id;
        public readonly ImmutableArray<string> IdentitySource;
        public readonly string? IdentityValidationExpression;
        public readonly Outputs.AuthorizerJWTConfiguration? JwtConfiguration;
        public readonly string? Name;

        [OutputConstructor]
        private GetAuthorizerResult(
            string? authorizerCredentialsArn,

            string? authorizerPayloadFormatVersion,

            int? authorizerResultTtlInSeconds,

            string? authorizerType,

            string? authorizerUri,

            bool? enableSimpleResponses,

            string? id,

            ImmutableArray<string> identitySource,

            string? identityValidationExpression,

            Outputs.AuthorizerJWTConfiguration? jwtConfiguration,

            string? name)
        {
            AuthorizerCredentialsArn = authorizerCredentialsArn;
            AuthorizerPayloadFormatVersion = authorizerPayloadFormatVersion;
            AuthorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
            AuthorizerType = authorizerType;
            AuthorizerUri = authorizerUri;
            EnableSimpleResponses = enableSimpleResponses;
            Id = id;
            IdentitySource = identitySource;
            IdentityValidationExpression = identityValidationExpression;
            JwtConfiguration = jwtConfiguration;
            Name = name;
        }
    }
}
