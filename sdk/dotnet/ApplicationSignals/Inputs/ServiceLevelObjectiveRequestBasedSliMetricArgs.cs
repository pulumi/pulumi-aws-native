// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApplicationSignals.Inputs
{

    /// <summary>
    /// This structure contains the information about the metric that is used for a request-based SLO.
    /// </summary>
    public sealed class ServiceLevelObjectiveRequestBasedSliMetricArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifies the dependency using the `DependencyKeyAttributes` and `DependencyOperationName` .
        /// </summary>
        [Input("dependencyConfig")]
        public Input<Inputs.ServiceLevelObjectiveDependencyConfigArgs>? DependencyConfig { get; set; }

        [Input("keyAttributes")]
        private InputMap<string>? _keyAttributes;

        /// <summary>
        /// This is a string-to-string map that contains information about the type of object that this SLO is related to. It can include the following fields.
        /// 
        /// - `Type` designates the type of object that this SLO is related to.
        /// - `ResourceType` specifies the type of the resource. This field is used only when the value of the `Type` field is `Resource` or `AWS::Resource` .
        /// - `Name` specifies the name of the object. This is used only if the value of the `Type` field is `Service` , `RemoteService` , or `AWS::Service` .
        /// - `Identifier` identifies the resource objects of this resource. This is used only if the value of the `Type` field is `Resource` or `AWS::Resource` .
        /// - `Environment` specifies the location where this object is hosted, or what it belongs to.
        /// - `AwsAccountId` allows you to create an SLO for an object that exists in another account.
        /// </summary>
        public InputMap<string> KeyAttributes
        {
            get => _keyAttributes ?? (_keyAttributes = new InputMap<string>());
            set => _keyAttributes = value;
        }

        /// <summary>
        /// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
        /// </summary>
        [Input("metricType")]
        public Input<Pulumi.AwsNative.ApplicationSignals.ServiceLevelObjectiveRequestBasedSliMetricMetricType>? MetricType { get; set; }

        /// <summary>
        /// Use this structure to define the metric that you want to use as the "good request" or "bad request" value for a request-based SLO. This value observed for the metric defined in `TotalRequestCountMetric` will be divided by the number found for `MonitoredRequestCountMetric` to determine the percentage of successful requests that this SLO tracks.
        /// </summary>
        [Input("monitoredRequestCountMetric")]
        public Input<Inputs.ServiceLevelObjectiveMonitoredRequestCountMetricArgs>? MonitoredRequestCountMetric { get; set; }

        /// <summary>
        /// If the SLO monitors a specific operation of the service, this field displays that operation name.
        /// </summary>
        [Input("operationName")]
        public Input<string>? OperationName { get; set; }

        [Input("totalRequestCountMetric")]
        private InputList<Inputs.ServiceLevelObjectiveMetricDataQueryArgs>? _totalRequestCountMetric;

        /// <summary>
        /// This structure defines the metric that is used as the "total requests" number for a request-based SLO. The number observed for this metric is divided by the number of "good requests" or "bad requests" that is observed for the metric defined in `MonitoredRequestCountMetric`.
        /// </summary>
        public InputList<Inputs.ServiceLevelObjectiveMetricDataQueryArgs> TotalRequestCountMetric
        {
            get => _totalRequestCountMetric ?? (_totalRequestCountMetric = new InputList<Inputs.ServiceLevelObjectiveMetricDataQueryArgs>());
            set => _totalRequestCountMetric = value;
        }

        public ServiceLevelObjectiveRequestBasedSliMetricArgs()
        {
        }
        public static new ServiceLevelObjectiveRequestBasedSliMetricArgs Empty => new ServiceLevelObjectiveRequestBasedSliMetricArgs();
    }
}
