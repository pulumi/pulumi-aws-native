// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApplicationSignals.Inputs
{

    /// <summary>
    /// A metric to be used directly for the SLO, or to be used in the math expression that will be used for the SLO. Within one MetricDataQuery object, you must specify either Expression or MetricStat but not both.
    /// </summary>
    public sealed class ServiceLevelObjectiveMetricStatArgs : global::Pulumi.ResourceArgs
    {
        [Input("metric", required: true)]
        public Input<Inputs.ServiceLevelObjectiveMetricArgs> Metric { get; set; } = null!;

        /// <summary>
        /// The granularity, in seconds, to be used for the metric.
        /// </summary>
        [Input("period", required: true)]
        public Input<int> Period { get; set; } = null!;

        /// <summary>
        /// The statistic to use for comparison to the threshold. It can be any CloudWatch statistic or extended statistic.
        /// </summary>
        [Input("stat", required: true)]
        public Input<string> Stat { get; set; } = null!;

        /// <summary>
        /// If you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        public ServiceLevelObjectiveMetricStatArgs()
        {
        }
        public static new ServiceLevelObjectiveMetricStatArgs Empty => new ServiceLevelObjectiveMetricStatArgs();
    }
}
