// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApplicationSignals.Outputs
{

    /// <summary>
    /// This structure contains the information about the metric that is used for a request-based SLO.
    /// </summary>
    [OutputType]
    public sealed class ServiceLevelObjectiveRequestBasedSliMetric
    {
        public readonly ImmutableDictionary<string, string>? KeyAttributes;
        /// <summary>
        /// If the SLO monitors either the LATENCY or AVAILABILITY metric that Application Signals collects, this field displays which of those metrics is used.
        /// </summary>
        public readonly Pulumi.AwsNative.ApplicationSignals.ServiceLevelObjectiveRequestBasedSliMetricMetricType? MetricType;
        public readonly Outputs.ServiceLevelObjectiveMonitoredRequestCountMetric? MonitoredRequestCountMetric;
        /// <summary>
        /// If the SLO monitors a specific operation of the service, this field displays that operation name.
        /// </summary>
        public readonly string? OperationName;
        /// <summary>
        /// This structure defines the metric that is used as the "total requests" number for a request-based SLO. The number observed for this metric is divided by the number of "good requests" or "bad requests" that is observed for the metric defined in `MonitoredRequestCountMetric`.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceLevelObjectiveMetricDataQuery> TotalRequestCountMetric;

        [OutputConstructor]
        private ServiceLevelObjectiveRequestBasedSliMetric(
            ImmutableDictionary<string, string>? keyAttributes,

            Pulumi.AwsNative.ApplicationSignals.ServiceLevelObjectiveRequestBasedSliMetricMetricType? metricType,

            Outputs.ServiceLevelObjectiveMonitoredRequestCountMetric? monitoredRequestCountMetric,

            string? operationName,

            ImmutableArray<Outputs.ServiceLevelObjectiveMetricDataQuery> totalRequestCountMetric)
        {
            KeyAttributes = keyAttributes;
            MetricType = metricType;
            MonitoredRequestCountMetric = monitoredRequestCountMetric;
            OperationName = operationName;
            TotalRequestCountMetric = totalRequestCountMetric;
        }
    }
}
