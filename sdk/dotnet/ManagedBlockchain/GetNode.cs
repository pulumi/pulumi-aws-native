// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ManagedBlockchain
{
    public static class GetNode
    {
        /// <summary>
        /// Resource Type definition for AWS::ManagedBlockchain::Node
        /// </summary>
        public static Task<GetNodeResult> InvokeAsync(GetNodeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeResult>("aws-native:managedblockchain:getNode", args ?? new GetNodeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ManagedBlockchain::Node
        /// </summary>
        public static Output<GetNodeResult> Invoke(GetNodeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeResult>("aws-native:managedblockchain:getNode", args ?? new GetNodeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeArgs : global::Pulumi.InvokeArgs
    {
        [Input("nodeId", required: true)]
        public string NodeId { get; set; } = null!;

        public GetNodeArgs()
        {
        }
        public static new GetNodeArgs Empty => new GetNodeArgs();
    }

    public sealed class GetNodeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("nodeId", required: true)]
        public Input<string> NodeId { get; set; } = null!;

        public GetNodeInvokeArgs()
        {
        }
        public static new GetNodeInvokeArgs Empty => new GetNodeInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodeResult
    {
        public readonly string? Arn;
        public readonly string? MemberId;
        public readonly string? NetworkId;
        public readonly Outputs.NodeConfiguration? NodeConfiguration;
        public readonly string? NodeId;

        [OutputConstructor]
        private GetNodeResult(
            string? arn,

            string? memberId,

            string? networkId,

            Outputs.NodeConfiguration? nodeConfiguration,

            string? nodeId)
        {
            Arn = arn;
            MemberId = memberId;
            NetworkId = networkId;
            NodeConfiguration = nodeConfiguration;
            NodeId = nodeId;
        }
    }
}
