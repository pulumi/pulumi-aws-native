// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QBusiness.Outputs
{

    [OutputType]
    public sealed class DataAccessorAuthenticationDetail
    {
        /// <summary>
        /// The specific authentication configuration based on the authentication type.
        /// </summary>
        public readonly Outputs.DataAccessorAuthenticationConfigurationProperties? AuthenticationConfiguration;
        /// <summary>
        /// The type of authentication to use for the data accessor. This determines how the ISV authenticates when accessing data. You can use one of two authentication types:
        /// 
        /// - `AWS_IAM_IDC_TTI` - Authentication using IAM Identity Center Trusted Token Issuer (TTI). This authentication type allows the ISV to use a trusted token issuer to generate tokens for accessing the data.
        /// - `AWS_IAM_IDC_AUTH_CODE` - Authentication using IAM Identity Center authorization code flow. This authentication type uses the standard OAuth 2.0 authorization code flow for authentication.
        /// </summary>
        public readonly Pulumi.AwsNative.QBusiness.DataAccessorAuthenticationType AuthenticationType;
        /// <summary>
        /// A list of external identifiers associated with this authentication configuration. These are used to correlate the data accessor with external systems.
        /// </summary>
        public readonly ImmutableArray<string> ExternalIds;

        [OutputConstructor]
        private DataAccessorAuthenticationDetail(
            Outputs.DataAccessorAuthenticationConfigurationProperties? authenticationConfiguration,

            Pulumi.AwsNative.QBusiness.DataAccessorAuthenticationType authenticationType,

            ImmutableArray<string> externalIds)
        {
            AuthenticationConfiguration = authenticationConfiguration;
            AuthenticationType = authenticationType;
            ExternalIds = externalIds;
        }
    }
}
