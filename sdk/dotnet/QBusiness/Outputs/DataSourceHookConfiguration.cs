// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QBusiness.Outputs
{

    [OutputType]
    public sealed class DataSourceHookConfiguration
    {
        /// <summary>
        /// The condition used for when a Lambda function should be invoked.
        /// 
        /// For example, you can specify a condition that if there are empty date-time values, then Amazon Q Business should invoke a function that inserts the current date-time.
        /// </summary>
        public readonly Outputs.DataSourceDocumentAttributeCondition? InvocationCondition;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the Lambda function during ingestion. For more information, see [Using Lambda functions for Amazon Q Business document enrichment](https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/cde-lambda-operations.html) .
        /// </summary>
        public readonly string? LambdaArn;
        /// <summary>
        /// The Amazon Resource Name (ARN) of a role with permission to run `PreExtractionHookConfiguration` and `PostExtractionHookConfiguration` for altering document metadata and content during the document ingestion process.
        /// </summary>
        public readonly string? RoleArn;
        /// <summary>
        /// Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see [Data contracts for Lambda functions](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/cde-lambda-operations.html#cde-lambda-operations-data-contracts) .
        /// </summary>
        public readonly string? S3BucketName;

        [OutputConstructor]
        private DataSourceHookConfiguration(
            Outputs.DataSourceDocumentAttributeCondition? invocationCondition,

            string? lambdaArn,

            string? roleArn,

            string? s3BucketName)
        {
            InvocationCondition = invocationCondition;
            LambdaArn = lambdaArn;
            RoleArn = roleArn;
            S3BucketName = s3BucketName;
        }
    }
}
