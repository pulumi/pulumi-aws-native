// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.QBusiness.Inputs
{

    public sealed class DataAccessorAttributeFilterArgs : global::Pulumi.ResourceArgs
    {
        [Input("andAllFilters")]
        private InputList<Inputs.DataAccessorAttributeFilterArgs>? _andAllFilters;

        /// <summary>
        /// Performs a logical `AND` operation on all supplied filters.
        /// </summary>
        public InputList<Inputs.DataAccessorAttributeFilterArgs> AndAllFilters
        {
            get => _andAllFilters ?? (_andAllFilters = new InputList<Inputs.DataAccessorAttributeFilterArgs>());
            set => _andAllFilters = value;
        }

        /// <summary>
        /// Returns `true` when a document contains all the specified document attributes or metadata fields. Supported for the following [document attribute value types](https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html) : `stringListValue` .
        /// </summary>
        [Input("containsAll")]
        public Input<Inputs.DataAccessorDocumentAttributeArgs>? ContainsAll { get; set; }

        /// <summary>
        /// Returns `true` when a document contains any of the specified document attributes or metadata fields. Supported for the following [document attribute value types](https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html) : `stringListValue` .
        /// </summary>
        [Input("containsAny")]
        public Input<Inputs.DataAccessorDocumentAttributeArgs>? ContainsAny { get; set; }

        /// <summary>
        /// Performs an equals operation on two document attributes or metadata fields. Supported for the following [document attribute value types](https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html) : `dateValue` , `longValue` , `stringListValue` and `stringValue` .
        /// </summary>
        [Input("equalsTo")]
        public Input<Inputs.DataAccessorDocumentAttributeArgs>? EqualsTo { get; set; }

        /// <summary>
        /// Performs a greater than operation on two document attributes or metadata fields. Supported for the following [document attribute value types](https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html) : `dateValue` and `longValue` .
        /// </summary>
        [Input("greaterThan")]
        public Input<Inputs.DataAccessorDocumentAttributeArgs>? GreaterThan { get; set; }

        /// <summary>
        /// Performs a greater or equals than operation on two document attributes or metadata fields. Supported for the following [document attribute value types](https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html) : `dateValue` and `longValue` .
        /// </summary>
        [Input("greaterThanOrEquals")]
        public Input<Inputs.DataAccessorDocumentAttributeArgs>? GreaterThanOrEquals { get; set; }

        /// <summary>
        /// Performs a less than operation on two document attributes or metadata fields. Supported for the following [document attribute value types](https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html) : `dateValue` and `longValue` .
        /// </summary>
        [Input("lessThan")]
        public Input<Inputs.DataAccessorDocumentAttributeArgs>? LessThan { get; set; }

        /// <summary>
        /// Performs a less than or equals operation on two document attributes or metadata fields.Supported for the following [document attribute value type](https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeValue.html) : `dateValue` and `longValue` .
        /// </summary>
        [Input("lessThanOrEquals")]
        public Input<Inputs.DataAccessorDocumentAttributeArgs>? LessThanOrEquals { get; set; }

        /// <summary>
        /// Performs a logical `NOT` operation on all supplied filters.
        /// </summary>
        [Input("notFilter")]
        public Input<Inputs.DataAccessorAttributeFilterArgs>? NotFilter { get; set; }

        [Input("orAllFilters")]
        private InputList<Inputs.DataAccessorAttributeFilterArgs>? _orAllFilters;

        /// <summary>
        /// Performs a logical `OR` operation on all supplied filters.
        /// </summary>
        public InputList<Inputs.DataAccessorAttributeFilterArgs> OrAllFilters
        {
            get => _orAllFilters ?? (_orAllFilters = new InputList<Inputs.DataAccessorAttributeFilterArgs>());
            set => _orAllFilters = value;
        }

        public DataAccessorAttributeFilterArgs()
        {
        }
        public static new DataAccessorAttributeFilterArgs Empty => new DataAccessorAttributeFilterArgs();
    }
}
