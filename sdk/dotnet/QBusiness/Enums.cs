// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.QBusiness
{
    [EnumType]
    public readonly struct ApplicationAttachmentsControlMode : IEquatable<ApplicationAttachmentsControlMode>
    {
        private readonly string _value;

        private ApplicationAttachmentsControlMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationAttachmentsControlMode Enabled { get; } = new ApplicationAttachmentsControlMode("ENABLED");
        public static ApplicationAttachmentsControlMode Disabled { get; } = new ApplicationAttachmentsControlMode("DISABLED");

        public static bool operator ==(ApplicationAttachmentsControlMode left, ApplicationAttachmentsControlMode right) => left.Equals(right);
        public static bool operator !=(ApplicationAttachmentsControlMode left, ApplicationAttachmentsControlMode right) => !left.Equals(right);

        public static explicit operator string(ApplicationAttachmentsControlMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationAttachmentsControlMode other && Equals(other);
        public bool Equals(ApplicationAttachmentsControlMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ApplicationAutoSubscriptionStatus : IEquatable<ApplicationAutoSubscriptionStatus>
    {
        private readonly string _value;

        private ApplicationAutoSubscriptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationAutoSubscriptionStatus Enabled { get; } = new ApplicationAutoSubscriptionStatus("ENABLED");
        public static ApplicationAutoSubscriptionStatus Disabled { get; } = new ApplicationAutoSubscriptionStatus("DISABLED");

        public static bool operator ==(ApplicationAutoSubscriptionStatus left, ApplicationAutoSubscriptionStatus right) => left.Equals(right);
        public static bool operator !=(ApplicationAutoSubscriptionStatus left, ApplicationAutoSubscriptionStatus right) => !left.Equals(right);

        public static explicit operator string(ApplicationAutoSubscriptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationAutoSubscriptionStatus other && Equals(other);
        public bool Equals(ApplicationAutoSubscriptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ApplicationIdentityType : IEquatable<ApplicationIdentityType>
    {
        private readonly string _value;

        private ApplicationIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationIdentityType AwsIamIdpSaml { get; } = new ApplicationIdentityType("AWS_IAM_IDP_SAML");
        public static ApplicationIdentityType AwsIamIdpOidc { get; } = new ApplicationIdentityType("AWS_IAM_IDP_OIDC");
        public static ApplicationIdentityType AwsIamIdc { get; } = new ApplicationIdentityType("AWS_IAM_IDC");
        public static ApplicationIdentityType AwsQuicksightIdp { get; } = new ApplicationIdentityType("AWS_QUICKSIGHT_IDP");

        public static bool operator ==(ApplicationIdentityType left, ApplicationIdentityType right) => left.Equals(right);
        public static bool operator !=(ApplicationIdentityType left, ApplicationIdentityType right) => !left.Equals(right);

        public static explicit operator string(ApplicationIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationIdentityType other && Equals(other);
        public bool Equals(ApplicationIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ApplicationPersonalizationControlMode : IEquatable<ApplicationPersonalizationControlMode>
    {
        private readonly string _value;

        private ApplicationPersonalizationControlMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationPersonalizationControlMode Enabled { get; } = new ApplicationPersonalizationControlMode("ENABLED");
        public static ApplicationPersonalizationControlMode Disabled { get; } = new ApplicationPersonalizationControlMode("DISABLED");

        public static bool operator ==(ApplicationPersonalizationControlMode left, ApplicationPersonalizationControlMode right) => left.Equals(right);
        public static bool operator !=(ApplicationPersonalizationControlMode left, ApplicationPersonalizationControlMode right) => !left.Equals(right);

        public static explicit operator string(ApplicationPersonalizationControlMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationPersonalizationControlMode other && Equals(other);
        public bool Equals(ApplicationPersonalizationControlMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ApplicationQAppsControlMode : IEquatable<ApplicationQAppsControlMode>
    {
        private readonly string _value;

        private ApplicationQAppsControlMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationQAppsControlMode Enabled { get; } = new ApplicationQAppsControlMode("ENABLED");
        public static ApplicationQAppsControlMode Disabled { get; } = new ApplicationQAppsControlMode("DISABLED");

        public static bool operator ==(ApplicationQAppsControlMode left, ApplicationQAppsControlMode right) => left.Equals(right);
        public static bool operator !=(ApplicationQAppsControlMode left, ApplicationQAppsControlMode right) => !left.Equals(right);

        public static explicit operator string(ApplicationQAppsControlMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationQAppsControlMode other && Equals(other);
        public bool Equals(ApplicationQAppsControlMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ApplicationStatus : IEquatable<ApplicationStatus>
    {
        private readonly string _value;

        private ApplicationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationStatus Creating { get; } = new ApplicationStatus("CREATING");
        public static ApplicationStatus Active { get; } = new ApplicationStatus("ACTIVE");
        public static ApplicationStatus Deleting { get; } = new ApplicationStatus("DELETING");
        public static ApplicationStatus Failed { get; } = new ApplicationStatus("FAILED");
        public static ApplicationStatus Updating { get; } = new ApplicationStatus("UPDATING");

        public static bool operator ==(ApplicationStatus left, ApplicationStatus right) => left.Equals(right);
        public static bool operator !=(ApplicationStatus left, ApplicationStatus right) => !left.Equals(right);

        public static explicit operator string(ApplicationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationStatus other && Equals(other);
        public bool Equals(ApplicationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ApplicationSubscriptionType : IEquatable<ApplicationSubscriptionType>
    {
        private readonly string _value;

        private ApplicationSubscriptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationSubscriptionType QLite { get; } = new ApplicationSubscriptionType("Q_LITE");
        public static ApplicationSubscriptionType QBusiness { get; } = new ApplicationSubscriptionType("Q_BUSINESS");

        public static bool operator ==(ApplicationSubscriptionType left, ApplicationSubscriptionType right) => left.Equals(right);
        public static bool operator !=(ApplicationSubscriptionType left, ApplicationSubscriptionType right) => !left.Equals(right);

        public static explicit operator string(ApplicationSubscriptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationSubscriptionType other && Equals(other);
        public bool Equals(ApplicationSubscriptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceAttributeValueOperator : IEquatable<DataSourceAttributeValueOperator>
    {
        private readonly string _value;

        private DataSourceAttributeValueOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceAttributeValueOperator Delete { get; } = new DataSourceAttributeValueOperator("DELETE");

        public static bool operator ==(DataSourceAttributeValueOperator left, DataSourceAttributeValueOperator right) => left.Equals(right);
        public static bool operator !=(DataSourceAttributeValueOperator left, DataSourceAttributeValueOperator right) => !left.Equals(right);

        public static explicit operator string(DataSourceAttributeValueOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceAttributeValueOperator other && Equals(other);
        public bool Equals(DataSourceAttributeValueOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceAudioExtractionStatus : IEquatable<DataSourceAudioExtractionStatus>
    {
        private readonly string _value;

        private DataSourceAudioExtractionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceAudioExtractionStatus Enabled { get; } = new DataSourceAudioExtractionStatus("ENABLED");
        public static DataSourceAudioExtractionStatus Disabled { get; } = new DataSourceAudioExtractionStatus("DISABLED");

        public static bool operator ==(DataSourceAudioExtractionStatus left, DataSourceAudioExtractionStatus right) => left.Equals(right);
        public static bool operator !=(DataSourceAudioExtractionStatus left, DataSourceAudioExtractionStatus right) => !left.Equals(right);

        public static explicit operator string(DataSourceAudioExtractionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceAudioExtractionStatus other && Equals(other);
        public bool Equals(DataSourceAudioExtractionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceDocumentContentOperator : IEquatable<DataSourceDocumentContentOperator>
    {
        private readonly string _value;

        private DataSourceDocumentContentOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceDocumentContentOperator Delete { get; } = new DataSourceDocumentContentOperator("DELETE");

        public static bool operator ==(DataSourceDocumentContentOperator left, DataSourceDocumentContentOperator right) => left.Equals(right);
        public static bool operator !=(DataSourceDocumentContentOperator left, DataSourceDocumentContentOperator right) => !left.Equals(right);

        public static explicit operator string(DataSourceDocumentContentOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceDocumentContentOperator other && Equals(other);
        public bool Equals(DataSourceDocumentContentOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceDocumentEnrichmentConditionOperator : IEquatable<DataSourceDocumentEnrichmentConditionOperator>
    {
        private readonly string _value;

        private DataSourceDocumentEnrichmentConditionOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceDocumentEnrichmentConditionOperator GreaterThan { get; } = new DataSourceDocumentEnrichmentConditionOperator("GREATER_THAN");
        public static DataSourceDocumentEnrichmentConditionOperator GreaterThanOrEquals { get; } = new DataSourceDocumentEnrichmentConditionOperator("GREATER_THAN_OR_EQUALS");
        public static DataSourceDocumentEnrichmentConditionOperator LessThan { get; } = new DataSourceDocumentEnrichmentConditionOperator("LESS_THAN");
        public static DataSourceDocumentEnrichmentConditionOperator LessThanOrEquals { get; } = new DataSourceDocumentEnrichmentConditionOperator("LESS_THAN_OR_EQUALS");
        public static DataSourceDocumentEnrichmentConditionOperator EqualsValue { get; } = new DataSourceDocumentEnrichmentConditionOperator("EQUALS");
        public static DataSourceDocumentEnrichmentConditionOperator NotEquals { get; } = new DataSourceDocumentEnrichmentConditionOperator("NOT_EQUALS");
        public static DataSourceDocumentEnrichmentConditionOperator Contains { get; } = new DataSourceDocumentEnrichmentConditionOperator("CONTAINS");
        public static DataSourceDocumentEnrichmentConditionOperator NotContains { get; } = new DataSourceDocumentEnrichmentConditionOperator("NOT_CONTAINS");
        public static DataSourceDocumentEnrichmentConditionOperator Exists { get; } = new DataSourceDocumentEnrichmentConditionOperator("EXISTS");
        public static DataSourceDocumentEnrichmentConditionOperator NotExists { get; } = new DataSourceDocumentEnrichmentConditionOperator("NOT_EXISTS");
        public static DataSourceDocumentEnrichmentConditionOperator BeginsWith { get; } = new DataSourceDocumentEnrichmentConditionOperator("BEGINS_WITH");

        public static bool operator ==(DataSourceDocumentEnrichmentConditionOperator left, DataSourceDocumentEnrichmentConditionOperator right) => left.Equals(right);
        public static bool operator !=(DataSourceDocumentEnrichmentConditionOperator left, DataSourceDocumentEnrichmentConditionOperator right) => !left.Equals(right);

        public static explicit operator string(DataSourceDocumentEnrichmentConditionOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceDocumentEnrichmentConditionOperator other && Equals(other);
        public bool Equals(DataSourceDocumentEnrichmentConditionOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceImageExtractionStatus : IEquatable<DataSourceImageExtractionStatus>
    {
        private readonly string _value;

        private DataSourceImageExtractionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceImageExtractionStatus Enabled { get; } = new DataSourceImageExtractionStatus("ENABLED");
        public static DataSourceImageExtractionStatus Disabled { get; } = new DataSourceImageExtractionStatus("DISABLED");

        public static bool operator ==(DataSourceImageExtractionStatus left, DataSourceImageExtractionStatus right) => left.Equals(right);
        public static bool operator !=(DataSourceImageExtractionStatus left, DataSourceImageExtractionStatus right) => !left.Equals(right);

        public static explicit operator string(DataSourceImageExtractionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceImageExtractionStatus other && Equals(other);
        public bool Equals(DataSourceImageExtractionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceStatus : IEquatable<DataSourceStatus>
    {
        private readonly string _value;

        private DataSourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceStatus PendingCreation { get; } = new DataSourceStatus("PENDING_CREATION");
        public static DataSourceStatus Creating { get; } = new DataSourceStatus("CREATING");
        public static DataSourceStatus Active { get; } = new DataSourceStatus("ACTIVE");
        public static DataSourceStatus Deleting { get; } = new DataSourceStatus("DELETING");
        public static DataSourceStatus Failed { get; } = new DataSourceStatus("FAILED");
        public static DataSourceStatus Updating { get; } = new DataSourceStatus("UPDATING");

        public static bool operator ==(DataSourceStatus left, DataSourceStatus right) => left.Equals(right);
        public static bool operator !=(DataSourceStatus left, DataSourceStatus right) => !left.Equals(right);

        public static explicit operator string(DataSourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceStatus other && Equals(other);
        public bool Equals(DataSourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceVideoExtractionStatus : IEquatable<DataSourceVideoExtractionStatus>
    {
        private readonly string _value;

        private DataSourceVideoExtractionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceVideoExtractionStatus Enabled { get; } = new DataSourceVideoExtractionStatus("ENABLED");
        public static DataSourceVideoExtractionStatus Disabled { get; } = new DataSourceVideoExtractionStatus("DISABLED");

        public static bool operator ==(DataSourceVideoExtractionStatus left, DataSourceVideoExtractionStatus right) => left.Equals(right);
        public static bool operator !=(DataSourceVideoExtractionStatus left, DataSourceVideoExtractionStatus right) => !left.Equals(right);

        public static explicit operator string(DataSourceVideoExtractionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceVideoExtractionStatus other && Equals(other);
        public bool Equals(DataSourceVideoExtractionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IndexAttributeType : IEquatable<IndexAttributeType>
    {
        private readonly string _value;

        private IndexAttributeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexAttributeType String { get; } = new IndexAttributeType("STRING");
        public static IndexAttributeType StringList { get; } = new IndexAttributeType("STRING_LIST");
        public static IndexAttributeType Number { get; } = new IndexAttributeType("NUMBER");
        public static IndexAttributeType Date { get; } = new IndexAttributeType("DATE");

        public static bool operator ==(IndexAttributeType left, IndexAttributeType right) => left.Equals(right);
        public static bool operator !=(IndexAttributeType left, IndexAttributeType right) => !left.Equals(right);

        public static explicit operator string(IndexAttributeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexAttributeType other && Equals(other);
        public bool Equals(IndexAttributeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IndexStatus : IEquatable<IndexStatus>
    {
        private readonly string _value;

        private IndexStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexStatus Creating { get; } = new IndexStatus("CREATING");
        public static IndexStatus Active { get; } = new IndexStatus("ACTIVE");
        public static IndexStatus Deleting { get; } = new IndexStatus("DELETING");
        public static IndexStatus Failed { get; } = new IndexStatus("FAILED");
        public static IndexStatus Updating { get; } = new IndexStatus("UPDATING");

        public static bool operator ==(IndexStatus left, IndexStatus right) => left.Equals(right);
        public static bool operator !=(IndexStatus left, IndexStatus right) => !left.Equals(right);

        public static explicit operator string(IndexStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexStatus other && Equals(other);
        public bool Equals(IndexStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IndexType : IEquatable<IndexType>
    {
        private readonly string _value;

        private IndexType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexType Enterprise { get; } = new IndexType("ENTERPRISE");
        public static IndexType Starter { get; } = new IndexType("STARTER");

        public static bool operator ==(IndexType left, IndexType right) => left.Equals(right);
        public static bool operator !=(IndexType left, IndexType right) => !left.Equals(right);

        public static explicit operator string(IndexType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexType other && Equals(other);
        public bool Equals(IndexType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PluginApiSchemaType : IEquatable<PluginApiSchemaType>
    {
        private readonly string _value;

        private PluginApiSchemaType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PluginApiSchemaType OpenApiV3 { get; } = new PluginApiSchemaType("OPEN_API_V3");

        public static bool operator ==(PluginApiSchemaType left, PluginApiSchemaType right) => left.Equals(right);
        public static bool operator !=(PluginApiSchemaType left, PluginApiSchemaType right) => !left.Equals(right);

        public static explicit operator string(PluginApiSchemaType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PluginApiSchemaType other && Equals(other);
        public bool Equals(PluginApiSchemaType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PluginBuildStatus : IEquatable<PluginBuildStatus>
    {
        private readonly string _value;

        private PluginBuildStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PluginBuildStatus Ready { get; } = new PluginBuildStatus("READY");
        public static PluginBuildStatus CreateInProgress { get; } = new PluginBuildStatus("CREATE_IN_PROGRESS");
        public static PluginBuildStatus CreateFailed { get; } = new PluginBuildStatus("CREATE_FAILED");
        public static PluginBuildStatus UpdateInProgress { get; } = new PluginBuildStatus("UPDATE_IN_PROGRESS");
        public static PluginBuildStatus UpdateFailed { get; } = new PluginBuildStatus("UPDATE_FAILED");
        public static PluginBuildStatus DeleteInProgress { get; } = new PluginBuildStatus("DELETE_IN_PROGRESS");
        public static PluginBuildStatus DeleteFailed { get; } = new PluginBuildStatus("DELETE_FAILED");

        public static bool operator ==(PluginBuildStatus left, PluginBuildStatus right) => left.Equals(right);
        public static bool operator !=(PluginBuildStatus left, PluginBuildStatus right) => !left.Equals(right);

        public static explicit operator string(PluginBuildStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PluginBuildStatus other && Equals(other);
        public bool Equals(PluginBuildStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PluginState : IEquatable<PluginState>
    {
        private readonly string _value;

        private PluginState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PluginState Enabled { get; } = new PluginState("ENABLED");
        public static PluginState Disabled { get; } = new PluginState("DISABLED");

        public static bool operator ==(PluginState left, PluginState right) => left.Equals(right);
        public static bool operator !=(PluginState left, PluginState right) => !left.Equals(right);

        public static explicit operator string(PluginState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PluginState other && Equals(other);
        public bool Equals(PluginState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PluginType : IEquatable<PluginType>
    {
        private readonly string _value;

        private PluginType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PluginType ServiceNow { get; } = new PluginType("SERVICE_NOW");
        public static PluginType Salesforce { get; } = new PluginType("SALESFORCE");
        public static PluginType Jira { get; } = new PluginType("JIRA");
        public static PluginType Zendesk { get; } = new PluginType("ZENDESK");
        public static PluginType Custom { get; } = new PluginType("CUSTOM");
        public static PluginType Quicksight { get; } = new PluginType("QUICKSIGHT");
        public static PluginType ServicenowNowPlatform { get; } = new PluginType("SERVICENOW_NOW_PLATFORM");
        public static PluginType JiraCloud { get; } = new PluginType("JIRA_CLOUD");
        public static PluginType SalesforceCrm { get; } = new PluginType("SALESFORCE_CRM");
        public static PluginType ZendeskSuite { get; } = new PluginType("ZENDESK_SUITE");
        public static PluginType AtlassianConfluence { get; } = new PluginType("ATLASSIAN_CONFLUENCE");
        public static PluginType GoogleCalendar { get; } = new PluginType("GOOGLE_CALENDAR");
        public static PluginType MicrosoftTeams { get; } = new PluginType("MICROSOFT_TEAMS");
        public static PluginType MicrosoftExchange { get; } = new PluginType("MICROSOFT_EXCHANGE");
        public static PluginType PagerdutyAdvance { get; } = new PluginType("PAGERDUTY_ADVANCE");
        public static PluginType Smartsheet { get; } = new PluginType("SMARTSHEET");
        public static PluginType Asana { get; } = new PluginType("ASANA");

        public static bool operator ==(PluginType left, PluginType right) => left.Equals(right);
        public static bool operator !=(PluginType left, PluginType right) => !left.Equals(right);

        public static explicit operator string(PluginType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PluginType other && Equals(other);
        public bool Equals(PluginType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct QBusinessIndexStatus : IEquatable<QBusinessIndexStatus>
    {
        private readonly string _value;

        private QBusinessIndexStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QBusinessIndexStatus Enabled { get; } = new QBusinessIndexStatus("ENABLED");
        public static QBusinessIndexStatus Disabled { get; } = new QBusinessIndexStatus("DISABLED");

        public static bool operator ==(QBusinessIndexStatus left, QBusinessIndexStatus right) => left.Equals(right);
        public static bool operator !=(QBusinessIndexStatus left, QBusinessIndexStatus right) => !left.Equals(right);

        public static explicit operator string(QBusinessIndexStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QBusinessIndexStatus other && Equals(other);
        public bool Equals(QBusinessIndexStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RetrieverStatus : IEquatable<RetrieverStatus>
    {
        private readonly string _value;

        private RetrieverStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RetrieverStatus Creating { get; } = new RetrieverStatus("CREATING");
        public static RetrieverStatus Active { get; } = new RetrieverStatus("ACTIVE");
        public static RetrieverStatus Failed { get; } = new RetrieverStatus("FAILED");

        public static bool operator ==(RetrieverStatus left, RetrieverStatus right) => left.Equals(right);
        public static bool operator !=(RetrieverStatus left, RetrieverStatus right) => !left.Equals(right);

        public static explicit operator string(RetrieverStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetrieverStatus other && Equals(other);
        public bool Equals(RetrieverStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RetrieverType : IEquatable<RetrieverType>
    {
        private readonly string _value;

        private RetrieverType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RetrieverType NativeIndex { get; } = new RetrieverType("NATIVE_INDEX");
        public static RetrieverType KendraIndex { get; } = new RetrieverType("KENDRA_INDEX");

        public static bool operator ==(RetrieverType left, RetrieverType right) => left.Equals(right);
        public static bool operator !=(RetrieverType left, RetrieverType right) => !left.Equals(right);

        public static explicit operator string(RetrieverType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RetrieverType other && Equals(other);
        public bool Equals(RetrieverType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebExperienceBrowserExtension : IEquatable<WebExperienceBrowserExtension>
    {
        private readonly string _value;

        private WebExperienceBrowserExtension(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebExperienceBrowserExtension Firefox { get; } = new WebExperienceBrowserExtension("FIREFOX");
        public static WebExperienceBrowserExtension Chrome { get; } = new WebExperienceBrowserExtension("CHROME");

        public static bool operator ==(WebExperienceBrowserExtension left, WebExperienceBrowserExtension right) => left.Equals(right);
        public static bool operator !=(WebExperienceBrowserExtension left, WebExperienceBrowserExtension right) => !left.Equals(right);

        public static explicit operator string(WebExperienceBrowserExtension value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebExperienceBrowserExtension other && Equals(other);
        public bool Equals(WebExperienceBrowserExtension other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebExperienceSamplePromptsControlMode : IEquatable<WebExperienceSamplePromptsControlMode>
    {
        private readonly string _value;

        private WebExperienceSamplePromptsControlMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebExperienceSamplePromptsControlMode Enabled { get; } = new WebExperienceSamplePromptsControlMode("ENABLED");
        public static WebExperienceSamplePromptsControlMode Disabled { get; } = new WebExperienceSamplePromptsControlMode("DISABLED");

        public static bool operator ==(WebExperienceSamplePromptsControlMode left, WebExperienceSamplePromptsControlMode right) => left.Equals(right);
        public static bool operator !=(WebExperienceSamplePromptsControlMode left, WebExperienceSamplePromptsControlMode right) => !left.Equals(right);

        public static explicit operator string(WebExperienceSamplePromptsControlMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebExperienceSamplePromptsControlMode other && Equals(other);
        public bool Equals(WebExperienceSamplePromptsControlMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebExperienceStatus : IEquatable<WebExperienceStatus>
    {
        private readonly string _value;

        private WebExperienceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebExperienceStatus Creating { get; } = new WebExperienceStatus("CREATING");
        public static WebExperienceStatus Active { get; } = new WebExperienceStatus("ACTIVE");
        public static WebExperienceStatus Deleting { get; } = new WebExperienceStatus("DELETING");
        public static WebExperienceStatus Failed { get; } = new WebExperienceStatus("FAILED");
        public static WebExperienceStatus PendingAuthConfig { get; } = new WebExperienceStatus("PENDING_AUTH_CONFIG");

        public static bool operator ==(WebExperienceStatus left, WebExperienceStatus right) => left.Equals(right);
        public static bool operator !=(WebExperienceStatus left, WebExperienceStatus right) => !left.Equals(right);

        public static explicit operator string(WebExperienceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebExperienceStatus other && Equals(other);
        public bool Equals(WebExperienceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
