// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.SupportApp
{
    /// <summary>
    /// The severity level of a support case that a customer wants to get notified for.
    /// </summary>
    [EnumType]
    public readonly struct SlackChannelConfigurationNotifyOnCaseSeverity : IEquatable<SlackChannelConfigurationNotifyOnCaseSeverity>
    {
        private readonly string _value;

        private SlackChannelConfigurationNotifyOnCaseSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SlackChannelConfigurationNotifyOnCaseSeverity None { get; } = new SlackChannelConfigurationNotifyOnCaseSeverity("none");
        public static SlackChannelConfigurationNotifyOnCaseSeverity All { get; } = new SlackChannelConfigurationNotifyOnCaseSeverity("all");
        public static SlackChannelConfigurationNotifyOnCaseSeverity High { get; } = new SlackChannelConfigurationNotifyOnCaseSeverity("high");

        public static bool operator ==(SlackChannelConfigurationNotifyOnCaseSeverity left, SlackChannelConfigurationNotifyOnCaseSeverity right) => left.Equals(right);
        public static bool operator !=(SlackChannelConfigurationNotifyOnCaseSeverity left, SlackChannelConfigurationNotifyOnCaseSeverity right) => !left.Equals(right);

        public static explicit operator string(SlackChannelConfigurationNotifyOnCaseSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SlackChannelConfigurationNotifyOnCaseSeverity other && Equals(other);
        public bool Equals(SlackChannelConfigurationNotifyOnCaseSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
