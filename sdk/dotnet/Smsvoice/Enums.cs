// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Smsvoice
{
    [EnumType]
    public readonly struct PhoneNumberNumberCapabilitiesItem : IEquatable<PhoneNumberNumberCapabilitiesItem>
    {
        private readonly string _value;

        private PhoneNumberNumberCapabilitiesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PhoneNumberNumberCapabilitiesItem Sms { get; } = new PhoneNumberNumberCapabilitiesItem("SMS");
        public static PhoneNumberNumberCapabilitiesItem Voice { get; } = new PhoneNumberNumberCapabilitiesItem("VOICE");
        public static PhoneNumberNumberCapabilitiesItem Mms { get; } = new PhoneNumberNumberCapabilitiesItem("MMS");

        public static bool operator ==(PhoneNumberNumberCapabilitiesItem left, PhoneNumberNumberCapabilitiesItem right) => left.Equals(right);
        public static bool operator !=(PhoneNumberNumberCapabilitiesItem left, PhoneNumberNumberCapabilitiesItem right) => !left.Equals(right);

        public static explicit operator string(PhoneNumberNumberCapabilitiesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PhoneNumberNumberCapabilitiesItem other && Equals(other);
        public bool Equals(PhoneNumberNumberCapabilitiesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of phone number to request.
    /// </summary>
    [EnumType]
    public readonly struct PhoneNumberNumberType : IEquatable<PhoneNumberNumberType>
    {
        private readonly string _value;

        private PhoneNumberNumberType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PhoneNumberNumberType LongCode { get; } = new PhoneNumberNumberType("LONG_CODE");
        public static PhoneNumberNumberType TollFree { get; } = new PhoneNumberNumberType("TOLL_FREE");
        public static PhoneNumberNumberType TenDlc { get; } = new PhoneNumberNumberType("TEN_DLC");
        public static PhoneNumberNumberType Simulator { get; } = new PhoneNumberNumberType("SIMULATOR");

        public static bool operator ==(PhoneNumberNumberType left, PhoneNumberNumberType right) => left.Equals(right);
        public static bool operator !=(PhoneNumberNumberType left, PhoneNumberNumberType right) => !left.Equals(right);

        public static explicit operator string(PhoneNumberNumberType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PhoneNumberNumberType other && Equals(other);
        public bool Equals(PhoneNumberNumberType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action to perform when the keyword is used.
    /// </summary>
    [EnumType]
    public readonly struct PhoneNumberOptionalKeywordAction : IEquatable<PhoneNumberOptionalKeywordAction>
    {
        private readonly string _value;

        private PhoneNumberOptionalKeywordAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PhoneNumberOptionalKeywordAction AutomaticResponse { get; } = new PhoneNumberOptionalKeywordAction("AUTOMATIC_RESPONSE");
        public static PhoneNumberOptionalKeywordAction OptOut { get; } = new PhoneNumberOptionalKeywordAction("OPT_OUT");
        public static PhoneNumberOptionalKeywordAction OptIn { get; } = new PhoneNumberOptionalKeywordAction("OPT_IN");

        public static bool operator ==(PhoneNumberOptionalKeywordAction left, PhoneNumberOptionalKeywordAction right) => left.Equals(right);
        public static bool operator !=(PhoneNumberOptionalKeywordAction left, PhoneNumberOptionalKeywordAction right) => !left.Equals(right);

        public static explicit operator string(PhoneNumberOptionalKeywordAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PhoneNumberOptionalKeywordAction other && Equals(other);
        public bool Equals(PhoneNumberOptionalKeywordAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The action to perform when the keyword is used.
    /// </summary>
    [EnumType]
    public readonly struct PoolOptionalKeywordAction : IEquatable<PoolOptionalKeywordAction>
    {
        private readonly string _value;

        private PoolOptionalKeywordAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PoolOptionalKeywordAction AutomaticResponse { get; } = new PoolOptionalKeywordAction("AUTOMATIC_RESPONSE");
        public static PoolOptionalKeywordAction OptOut { get; } = new PoolOptionalKeywordAction("OPT_OUT");
        public static PoolOptionalKeywordAction OptIn { get; } = new PoolOptionalKeywordAction("OPT_IN");

        public static bool operator ==(PoolOptionalKeywordAction left, PoolOptionalKeywordAction right) => left.Equals(right);
        public static bool operator !=(PoolOptionalKeywordAction left, PoolOptionalKeywordAction right) => !left.Equals(right);

        public static explicit operator string(PoolOptionalKeywordAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PoolOptionalKeywordAction other && Equals(other);
        public bool Equals(PoolOptionalKeywordAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The types of protection that can be used.
    /// </summary>
    [EnumType]
    public readonly struct ProtectConfigurationCountryRuleProtectStatus : IEquatable<ProtectConfigurationCountryRuleProtectStatus>
    {
        private readonly string _value;

        private ProtectConfigurationCountryRuleProtectStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProtectConfigurationCountryRuleProtectStatus Allow { get; } = new ProtectConfigurationCountryRuleProtectStatus("ALLOW");
        public static ProtectConfigurationCountryRuleProtectStatus Block { get; } = new ProtectConfigurationCountryRuleProtectStatus("BLOCK");
        public static ProtectConfigurationCountryRuleProtectStatus Monitor { get; } = new ProtectConfigurationCountryRuleProtectStatus("MONITOR");
        public static ProtectConfigurationCountryRuleProtectStatus Filter { get; } = new ProtectConfigurationCountryRuleProtectStatus("FILTER");

        public static bool operator ==(ProtectConfigurationCountryRuleProtectStatus left, ProtectConfigurationCountryRuleProtectStatus right) => left.Equals(right);
        public static bool operator !=(ProtectConfigurationCountryRuleProtectStatus left, ProtectConfigurationCountryRuleProtectStatus right) => !left.Equals(right);

        public static explicit operator string(ProtectConfigurationCountryRuleProtectStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProtectConfigurationCountryRuleProtectStatus other && Equals(other);
        public bool Equals(ProtectConfigurationCountryRuleProtectStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
