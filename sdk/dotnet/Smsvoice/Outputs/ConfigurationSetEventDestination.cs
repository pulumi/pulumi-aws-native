// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Smsvoice.Outputs
{

    /// <summary>
    /// An event destination is a location where you send message events. The event options are Amazon CloudWatch, Amazon Data Firehose, or Amazon SNS. For example, when a message is delivered successfully, you can send information about that event to an event destination, or send notifications to endpoints that are subscribed to an Amazon SNS topic.
    /// </summary>
    [OutputType]
    public sealed class ConfigurationSetEventDestination
    {
        /// <summary>
        /// An object that contains IamRoleArn and LogGroupArn associated with an Amazon CloudWatch event destination.
        /// </summary>
        public readonly Outputs.ConfigurationSetCloudWatchLogsDestination? CloudWatchLogsDestination;
        /// <summary>
        /// When set to true events will be logged. By default this is set to true
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The name that identifies the event destination.
        /// </summary>
        public readonly string EventDestinationName;
        /// <summary>
        /// An object that contains IamRoleArn and DeliveryStreamArn associated with an Amazon Kinesis Firehose event destination.
        /// </summary>
        public readonly Outputs.ConfigurationSetKinesisFirehoseDestination? KinesisFirehoseDestination;
        /// <summary>
        /// An array of event types that determine which events to log. If 'ALL' is used, then AWS End User Messaging SMS and Voice logs every event type.
        /// </summary>
        public readonly ImmutableArray<string> MatchingEventTypes;
        /// <summary>
        /// An object that contains SNS TopicArn event destination.
        /// </summary>
        public readonly Outputs.ConfigurationSetSnsDestination? SnsDestination;

        [OutputConstructor]
        private ConfigurationSetEventDestination(
            Outputs.ConfigurationSetCloudWatchLogsDestination? cloudWatchLogsDestination,

            bool enabled,

            string eventDestinationName,

            Outputs.ConfigurationSetKinesisFirehoseDestination? kinesisFirehoseDestination,

            ImmutableArray<string> matchingEventTypes,

            Outputs.ConfigurationSetSnsDestination? snsDestination)
        {
            CloudWatchLogsDestination = cloudWatchLogsDestination;
            Enabled = enabled;
            EventDestinationName = eventDestinationName;
            KinesisFirehoseDestination = kinesisFirehoseDestination;
            MatchingEventTypes = matchingEventTypes;
            SnsDestination = snsDestination;
        }
    }
}
