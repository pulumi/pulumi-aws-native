// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.DeviceFarm
{
    /// <summary>
    /// The rule's stringified attribute.
    /// </summary>
    [EnumType]
    public readonly struct DevicePoolRuleAttribute : IEquatable<DevicePoolRuleAttribute>
    {
        private readonly string _value;

        private DevicePoolRuleAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DevicePoolRuleAttribute Arn { get; } = new DevicePoolRuleAttribute("ARN");
        public static DevicePoolRuleAttribute Platform { get; } = new DevicePoolRuleAttribute("PLATFORM");
        public static DevicePoolRuleAttribute FormFactor { get; } = new DevicePoolRuleAttribute("FORM_FACTOR");
        public static DevicePoolRuleAttribute Manufacturer { get; } = new DevicePoolRuleAttribute("MANUFACTURER");
        public static DevicePoolRuleAttribute RemoteAccessEnabled { get; } = new DevicePoolRuleAttribute("REMOTE_ACCESS_ENABLED");
        public static DevicePoolRuleAttribute RemoteDebugEnabled { get; } = new DevicePoolRuleAttribute("REMOTE_DEBUG_ENABLED");
        public static DevicePoolRuleAttribute AppiumVersion { get; } = new DevicePoolRuleAttribute("APPIUM_VERSION");
        public static DevicePoolRuleAttribute InstanceArn { get; } = new DevicePoolRuleAttribute("INSTANCE_ARN");
        public static DevicePoolRuleAttribute InstanceLabels { get; } = new DevicePoolRuleAttribute("INSTANCE_LABELS");
        public static DevicePoolRuleAttribute FleetType { get; } = new DevicePoolRuleAttribute("FLEET_TYPE");
        public static DevicePoolRuleAttribute OsVersion { get; } = new DevicePoolRuleAttribute("OS_VERSION");
        public static DevicePoolRuleAttribute Model { get; } = new DevicePoolRuleAttribute("MODEL");
        public static DevicePoolRuleAttribute Availability { get; } = new DevicePoolRuleAttribute("AVAILABILITY");

        public static bool operator ==(DevicePoolRuleAttribute left, DevicePoolRuleAttribute right) => left.Equals(right);
        public static bool operator !=(DevicePoolRuleAttribute left, DevicePoolRuleAttribute right) => !left.Equals(right);

        public static explicit operator string(DevicePoolRuleAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DevicePoolRuleAttribute other && Equals(other);
        public bool Equals(DevicePoolRuleAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies how Device Farm compares the rule's attribute to the value.
    /// </summary>
    [EnumType]
    public readonly struct DevicePoolRuleOperator : IEquatable<DevicePoolRuleOperator>
    {
        private readonly string _value;

        private DevicePoolRuleOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DevicePoolRuleOperator EqualsValue { get; } = new DevicePoolRuleOperator("EQUALS");
        public static DevicePoolRuleOperator LessThan { get; } = new DevicePoolRuleOperator("LESS_THAN");
        public static DevicePoolRuleOperator LessThanOrEquals { get; } = new DevicePoolRuleOperator("LESS_THAN_OR_EQUALS");
        public static DevicePoolRuleOperator GreaterThan { get; } = new DevicePoolRuleOperator("GREATER_THAN");
        public static DevicePoolRuleOperator GreaterThanOrEquals { get; } = new DevicePoolRuleOperator("GREATER_THAN_OR_EQUALS");
        public static DevicePoolRuleOperator In { get; } = new DevicePoolRuleOperator("IN");
        public static DevicePoolRuleOperator NotIn { get; } = new DevicePoolRuleOperator("NOT_IN");
        public static DevicePoolRuleOperator Contains { get; } = new DevicePoolRuleOperator("CONTAINS");

        public static bool operator ==(DevicePoolRuleOperator left, DevicePoolRuleOperator right) => left.Equals(right);
        public static bool operator !=(DevicePoolRuleOperator left, DevicePoolRuleOperator right) => !left.Equals(right);

        public static explicit operator string(DevicePoolRuleOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DevicePoolRuleOperator other && Equals(other);
        public bool Equals(DevicePoolRuleOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
