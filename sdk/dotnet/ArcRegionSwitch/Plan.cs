// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ArcRegionSwitch
{
    /// <summary>
    /// Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application
    /// </summary>
    [AwsNativeResourceType("aws-native:arcregionswitch:Plan")]
    public partial class Plan : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("associatedAlarms")]
        public Output<ImmutableDictionary<string, Outputs.PlanAssociatedAlarm>?> AssociatedAlarms { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("executionRole")]
        public Output<string> ExecutionRole { get; private set; } = null!;

        [Output("healthChecksForPlan")]
        public Output<ImmutableDictionary<string, ImmutableArray<Outputs.PlanHealthCheckState>>> HealthChecksForPlan { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        [Output("primaryRegion")]
        public Output<string?> PrimaryRegion { get; private set; } = null!;

        [Output("recoveryApproach")]
        public Output<Pulumi.AwsNative.ArcRegionSwitch.PlanRecoveryApproach> RecoveryApproach { get; private set; } = null!;

        [Output("recoveryTimeObjectiveMinutes")]
        public Output<double?> RecoveryTimeObjectiveMinutes { get; private set; } = null!;

        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("triggers")]
        public Output<ImmutableArray<Outputs.PlanTrigger>> Triggers { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        [Output("workflows")]
        public Output<ImmutableArray<Outputs.PlanWorkflow>> Workflows { get; private set; } = null!;


        /// <summary>
        /// Create a Plan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Plan(string name, PlanArgs args, CustomResourceOptions? options = null)
            : base("aws-native:arcregionswitch:Plan", name, args ?? new PlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Plan(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:arcregionswitch:Plan", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "name",
                    "primaryRegion",
                    "recoveryApproach",
                    "regions[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Plan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Plan Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Plan(name, id, options);
        }
    }

    public sealed class PlanArgs : global::Pulumi.ResourceArgs
    {
        [Input("associatedAlarms")]
        private InputMap<Inputs.PlanAssociatedAlarmArgs>? _associatedAlarms;
        public InputMap<Inputs.PlanAssociatedAlarmArgs> AssociatedAlarms
        {
            get => _associatedAlarms ?? (_associatedAlarms = new InputMap<Inputs.PlanAssociatedAlarmArgs>());
            set => _associatedAlarms = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("executionRole", required: true)]
        public Input<string> ExecutionRole { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("primaryRegion")]
        public Input<string>? PrimaryRegion { get; set; }

        [Input("recoveryApproach", required: true)]
        public Input<Pulumi.AwsNative.ArcRegionSwitch.PlanRecoveryApproach> RecoveryApproach { get; set; } = null!;

        [Input("recoveryTimeObjectiveMinutes")]
        public Input<double>? RecoveryTimeObjectiveMinutes { get; set; }

        [Input("regions", required: true)]
        private InputList<string>? _regions;
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("triggers")]
        private InputList<Inputs.PlanTriggerArgs>? _triggers;
        public InputList<Inputs.PlanTriggerArgs> Triggers
        {
            get => _triggers ?? (_triggers = new InputList<Inputs.PlanTriggerArgs>());
            set => _triggers = value;
        }

        [Input("workflows", required: true)]
        private InputList<Inputs.PlanWorkflowArgs>? _workflows;
        public InputList<Inputs.PlanWorkflowArgs> Workflows
        {
            get => _workflows ?? (_workflows = new InputList<Inputs.PlanWorkflowArgs>());
            set => _workflows = value;
        }

        public PlanArgs()
        {
        }
        public static new PlanArgs Empty => new PlanArgs();
    }
}
