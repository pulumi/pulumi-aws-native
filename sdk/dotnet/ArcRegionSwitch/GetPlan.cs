// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ArcRegionSwitch
{
    public static class GetPlan
    {
        /// <summary>
        /// Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application
        /// </summary>
        public static Task<GetPlanResult> InvokeAsync(GetPlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPlanResult>("aws-native:arcregionswitch:getPlan", args ?? new GetPlanArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application
        /// </summary>
        public static Output<GetPlanResult> Invoke(GetPlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPlanResult>("aws-native:arcregionswitch:getPlan", args ?? new GetPlanInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a plan that specifies Regions, IAM roles, and workflows of logic required to perform the desired change to your multi-Region application
        /// </summary>
        public static Output<GetPlanResult> Invoke(GetPlanInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPlanResult>("aws-native:arcregionswitch:getPlan", args ?? new GetPlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPlanArgs : global::Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetPlanArgs()
        {
        }
        public static new GetPlanArgs Empty => new GetPlanArgs();
    }

    public sealed class GetPlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetPlanInvokeArgs()
        {
        }
        public static new GetPlanInvokeArgs Empty => new GetPlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetPlanResult
    {
        public readonly string? Arn;
        public readonly ImmutableDictionary<string, Outputs.PlanAssociatedAlarm>? AssociatedAlarms;
        public readonly string? Description;
        public readonly string? ExecutionRole;
        public readonly ImmutableDictionary<string, ImmutableArray<Outputs.PlanHealthCheckState>>? HealthChecksForPlan;
        public readonly string? Owner;
        public readonly double? RecoveryTimeObjectiveMinutes;
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly ImmutableArray<Outputs.PlanTrigger> Triggers;
        public readonly string? Version;
        public readonly ImmutableArray<Outputs.PlanWorkflow> Workflows;

        [OutputConstructor]
        private GetPlanResult(
            string? arn,

            ImmutableDictionary<string, Outputs.PlanAssociatedAlarm>? associatedAlarms,

            string? description,

            string? executionRole,

            ImmutableDictionary<string, ImmutableArray<Outputs.PlanHealthCheckState>>? healthChecksForPlan,

            string? owner,

            double? recoveryTimeObjectiveMinutes,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<Outputs.PlanTrigger> triggers,

            string? version,

            ImmutableArray<Outputs.PlanWorkflow> workflows)
        {
            Arn = arn;
            AssociatedAlarms = associatedAlarms;
            Description = description;
            ExecutionRole = executionRole;
            HealthChecksForPlan = healthChecksForPlan;
            Owner = owner;
            RecoveryTimeObjectiveMinutes = recoveryTimeObjectiveMinutes;
            Tags = tags;
            Triggers = triggers;
            Version = version;
            Workflows = workflows;
        }
    }
}
