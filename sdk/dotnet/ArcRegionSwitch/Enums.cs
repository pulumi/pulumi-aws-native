// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.ArcRegionSwitch
{
    [EnumType]
    public readonly struct PlanAlarmCondition : IEquatable<PlanAlarmCondition>
    {
        private readonly string _value;

        private PlanAlarmCondition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlanAlarmCondition Red { get; } = new PlanAlarmCondition("red");
        public static PlanAlarmCondition Green { get; } = new PlanAlarmCondition("green");

        public static bool operator ==(PlanAlarmCondition left, PlanAlarmCondition right) => left.Equals(right);
        public static bool operator !=(PlanAlarmCondition left, PlanAlarmCondition right) => !left.Equals(right);

        public static explicit operator string(PlanAlarmCondition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlanAlarmCondition other && Equals(other);
        public bool Equals(PlanAlarmCondition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PlanAlarmType : IEquatable<PlanAlarmType>
    {
        private readonly string _value;

        private PlanAlarmType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlanAlarmType ApplicationHealth { get; } = new PlanAlarmType("applicationHealth");
        public static PlanAlarmType Trigger { get; } = new PlanAlarmType("trigger");

        public static bool operator ==(PlanAlarmType left, PlanAlarmType right) => left.Equals(right);
        public static bool operator !=(PlanAlarmType left, PlanAlarmType right) => !left.Equals(right);

        public static explicit operator string(PlanAlarmType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlanAlarmType other && Equals(other);
        public bool Equals(PlanAlarmType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PlanExecutionBlockType : IEquatable<PlanExecutionBlockType>
    {
        private readonly string _value;

        private PlanExecutionBlockType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlanExecutionBlockType CustomActionLambda { get; } = new PlanExecutionBlockType("CustomActionLambda");
        public static PlanExecutionBlockType ManualApproval { get; } = new PlanExecutionBlockType("ManualApproval");
        public static PlanExecutionBlockType AuroraGlobalDatabase { get; } = new PlanExecutionBlockType("AuroraGlobalDatabase");
        public static PlanExecutionBlockType Ec2AutoScaling { get; } = new PlanExecutionBlockType("EC2AutoScaling");
        public static PlanExecutionBlockType ArcRoutingControl { get; } = new PlanExecutionBlockType("ARCRoutingControl");
        public static PlanExecutionBlockType ArcRegionSwitchPlan { get; } = new PlanExecutionBlockType("ARCRegionSwitchPlan");
        public static PlanExecutionBlockType Parallel { get; } = new PlanExecutionBlockType("Parallel");
        public static PlanExecutionBlockType EcsServiceScaling { get; } = new PlanExecutionBlockType("ECSServiceScaling");
        public static PlanExecutionBlockType EksResourceScaling { get; } = new PlanExecutionBlockType("EKSResourceScaling");
        public static PlanExecutionBlockType Route53HealthCheck { get; } = new PlanExecutionBlockType("Route53HealthCheck");

        public static bool operator ==(PlanExecutionBlockType left, PlanExecutionBlockType right) => left.Equals(right);
        public static bool operator !=(PlanExecutionBlockType left, PlanExecutionBlockType right) => !left.Equals(right);

        public static explicit operator string(PlanExecutionBlockType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlanExecutionBlockType other && Equals(other);
        public bool Equals(PlanExecutionBlockType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PlanGlobalAuroraUngracefulBehavior : IEquatable<PlanGlobalAuroraUngracefulBehavior>
    {
        private readonly string _value;

        private PlanGlobalAuroraUngracefulBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlanGlobalAuroraUngracefulBehavior Failover { get; } = new PlanGlobalAuroraUngracefulBehavior("failover");

        public static bool operator ==(PlanGlobalAuroraUngracefulBehavior left, PlanGlobalAuroraUngracefulBehavior right) => left.Equals(right);
        public static bool operator !=(PlanGlobalAuroraUngracefulBehavior left, PlanGlobalAuroraUngracefulBehavior right) => !left.Equals(right);

        public static explicit operator string(PlanGlobalAuroraUngracefulBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlanGlobalAuroraUngracefulBehavior other && Equals(other);
        public bool Equals(PlanGlobalAuroraUngracefulBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PlanRecoveryApproach : IEquatable<PlanRecoveryApproach>
    {
        private readonly string _value;

        private PlanRecoveryApproach(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlanRecoveryApproach ActiveActive { get; } = new PlanRecoveryApproach("activeActive");
        public static PlanRecoveryApproach ActivePassive { get; } = new PlanRecoveryApproach("activePassive");

        public static bool operator ==(PlanRecoveryApproach left, PlanRecoveryApproach right) => left.Equals(right);
        public static bool operator !=(PlanRecoveryApproach left, PlanRecoveryApproach right) => !left.Equals(right);

        public static explicit operator string(PlanRecoveryApproach value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlanRecoveryApproach other && Equals(other);
        public bool Equals(PlanRecoveryApproach other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PlanRegionToRunIn : IEquatable<PlanRegionToRunIn>
    {
        private readonly string _value;

        private PlanRegionToRunIn(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlanRegionToRunIn ActivatingRegion { get; } = new PlanRegionToRunIn("activatingRegion");
        public static PlanRegionToRunIn DeactivatingRegion { get; } = new PlanRegionToRunIn("deactivatingRegion");

        public static bool operator ==(PlanRegionToRunIn left, PlanRegionToRunIn right) => left.Equals(right);
        public static bool operator !=(PlanRegionToRunIn left, PlanRegionToRunIn right) => !left.Equals(right);

        public static explicit operator string(PlanRegionToRunIn value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlanRegionToRunIn other && Equals(other);
        public bool Equals(PlanRegionToRunIn other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PlanRoutingControlStateChange : IEquatable<PlanRoutingControlStateChange>
    {
        private readonly string _value;

        private PlanRoutingControlStateChange(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlanRoutingControlStateChange On { get; } = new PlanRoutingControlStateChange("On");
        public static PlanRoutingControlStateChange Off { get; } = new PlanRoutingControlStateChange("Off");

        public static bool operator ==(PlanRoutingControlStateChange left, PlanRoutingControlStateChange right) => left.Equals(right);
        public static bool operator !=(PlanRoutingControlStateChange left, PlanRoutingControlStateChange right) => !left.Equals(right);

        public static explicit operator string(PlanRoutingControlStateChange value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlanRoutingControlStateChange other && Equals(other);
        public bool Equals(PlanRoutingControlStateChange other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PlanWorkflowTargetAction : IEquatable<PlanWorkflowTargetAction>
    {
        private readonly string _value;

        private PlanWorkflowTargetAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlanWorkflowTargetAction Activate { get; } = new PlanWorkflowTargetAction("activate");
        public static PlanWorkflowTargetAction Deactivate { get; } = new PlanWorkflowTargetAction("deactivate");

        public static bool operator ==(PlanWorkflowTargetAction left, PlanWorkflowTargetAction right) => left.Equals(right);
        public static bool operator !=(PlanWorkflowTargetAction left, PlanWorkflowTargetAction right) => !left.Equals(right);

        public static explicit operator string(PlanWorkflowTargetAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlanWorkflowTargetAction other && Equals(other);
        public bool Equals(PlanWorkflowTargetAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
