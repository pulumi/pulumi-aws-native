// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.KinesisAnalytics
{
    public static class GetApplicationReferenceDataSource
    {
        /// <summary>
        /// Resource Type definition for AWS::KinesisAnalytics::ApplicationReferenceDataSource
        /// </summary>
        public static Task<GetApplicationReferenceDataSourceResult> InvokeAsync(GetApplicationReferenceDataSourceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplicationReferenceDataSourceResult>("aws-native:kinesisanalytics:getApplicationReferenceDataSource", args ?? new GetApplicationReferenceDataSourceArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::KinesisAnalytics::ApplicationReferenceDataSource
        /// </summary>
        public static Output<GetApplicationReferenceDataSourceResult> Invoke(GetApplicationReferenceDataSourceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetApplicationReferenceDataSourceResult>("aws-native:kinesisanalytics:getApplicationReferenceDataSource", args ?? new GetApplicationReferenceDataSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationReferenceDataSourceArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetApplicationReferenceDataSourceArgs()
        {
        }
    }

    public sealed class GetApplicationReferenceDataSourceInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetApplicationReferenceDataSourceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetApplicationReferenceDataSourceResult
    {
        public readonly string? Id;
        public readonly Outputs.ApplicationReferenceDataSourceReferenceDataSource? ReferenceDataSource;

        [OutputConstructor]
        private GetApplicationReferenceDataSourceResult(
            string? id,

            Outputs.ApplicationReferenceDataSourceReferenceDataSource? referenceDataSource)
        {
            Id = id;
            ReferenceDataSource = referenceDataSource;
        }
    }
}
