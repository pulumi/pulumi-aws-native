// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.VoiceID
{
    public static class GetDomain
    {
        /// <summary>
        /// The AWS::VoiceID::Domain resource specifies an Amazon VoiceID Domain.
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("aws-native:voiceid:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::VoiceID::Domain resource specifies an Amazon VoiceID Domain.
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainResult>("aws-native:voiceid:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : global::Pulumi.InvokeArgs
    {
        [Input("domainId", required: true)]
        public string DomainId { get; set; } = null!;

        public GetDomainArgs()
        {
        }
        public static new GetDomainArgs Empty => new GetDomainArgs();
    }

    public sealed class GetDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("domainId", required: true)]
        public Input<string> DomainId { get; set; } = null!;

        public GetDomainInvokeArgs()
        {
        }
        public static new GetDomainInvokeArgs Empty => new GetDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        public readonly string? DomainId;
        public readonly ImmutableArray<Outputs.DomainTag> Tags;

        [OutputConstructor]
        private GetDomainResult(
            string? domainId,

            ImmutableArray<Outputs.DomainTag> tags)
        {
            DomainId = domainId;
            Tags = tags;
        }
    }
}
