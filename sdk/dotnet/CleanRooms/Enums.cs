// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.CleanRooms
{
    /// <summary>
    /// The type of parameter.
    /// </summary>
    [EnumType]
    public readonly struct AnalysisTemplateAnalysisParameterType : IEquatable<AnalysisTemplateAnalysisParameterType>
    {
        private readonly string _value;

        private AnalysisTemplateAnalysisParameterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTemplateAnalysisParameterType Smallint { get; } = new AnalysisTemplateAnalysisParameterType("SMALLINT");
        public static AnalysisTemplateAnalysisParameterType Integer { get; } = new AnalysisTemplateAnalysisParameterType("INTEGER");
        public static AnalysisTemplateAnalysisParameterType Bigint { get; } = new AnalysisTemplateAnalysisParameterType("BIGINT");
        public static AnalysisTemplateAnalysisParameterType Decimal { get; } = new AnalysisTemplateAnalysisParameterType("DECIMAL");
        public static AnalysisTemplateAnalysisParameterType Real { get; } = new AnalysisTemplateAnalysisParameterType("REAL");
        public static AnalysisTemplateAnalysisParameterType DoublePrecision { get; } = new AnalysisTemplateAnalysisParameterType("DOUBLE_PRECISION");
        public static AnalysisTemplateAnalysisParameterType Boolean { get; } = new AnalysisTemplateAnalysisParameterType("BOOLEAN");
        public static AnalysisTemplateAnalysisParameterType Char { get; } = new AnalysisTemplateAnalysisParameterType("CHAR");
        public static AnalysisTemplateAnalysisParameterType Varchar { get; } = new AnalysisTemplateAnalysisParameterType("VARCHAR");
        public static AnalysisTemplateAnalysisParameterType Date { get; } = new AnalysisTemplateAnalysisParameterType("DATE");
        public static AnalysisTemplateAnalysisParameterType Timestamp { get; } = new AnalysisTemplateAnalysisParameterType("TIMESTAMP");
        public static AnalysisTemplateAnalysisParameterType Timestamptz { get; } = new AnalysisTemplateAnalysisParameterType("TIMESTAMPTZ");
        public static AnalysisTemplateAnalysisParameterType Time { get; } = new AnalysisTemplateAnalysisParameterType("TIME");
        public static AnalysisTemplateAnalysisParameterType Timetz { get; } = new AnalysisTemplateAnalysisParameterType("TIMETZ");
        public static AnalysisTemplateAnalysisParameterType Varbyte { get; } = new AnalysisTemplateAnalysisParameterType("VARBYTE");

        public static bool operator ==(AnalysisTemplateAnalysisParameterType left, AnalysisTemplateAnalysisParameterType right) => left.Equals(right);
        public static bool operator !=(AnalysisTemplateAnalysisParameterType left, AnalysisTemplateAnalysisParameterType right) => !left.Equals(right);

        public static explicit operator string(AnalysisTemplateAnalysisParameterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTemplateAnalysisParameterType other && Equals(other);
        public bool Equals(AnalysisTemplateAnalysisParameterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The format of the analysis template.
    /// </summary>
    [EnumType]
    public readonly struct AnalysisTemplateFormat : IEquatable<AnalysisTemplateFormat>
    {
        private readonly string _value;

        private AnalysisTemplateFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AnalysisTemplateFormat Sql { get; } = new AnalysisTemplateFormat("SQL");

        public static bool operator ==(AnalysisTemplateFormat left, AnalysisTemplateFormat right) => left.Equals(right);
        public static bool operator !=(AnalysisTemplateFormat left, AnalysisTemplateFormat right) => !left.Equals(right);

        public static explicit operator string(AnalysisTemplateFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AnalysisTemplateFormat other && Equals(other);
        public bool Equals(AnalysisTemplateFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CollaborationMemberAbility : IEquatable<CollaborationMemberAbility>
    {
        private readonly string _value;

        private CollaborationMemberAbility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CollaborationMemberAbility CanQuery { get; } = new CollaborationMemberAbility("CAN_QUERY");
        public static CollaborationMemberAbility CanReceiveResults { get; } = new CollaborationMemberAbility("CAN_RECEIVE_RESULTS");

        public static bool operator ==(CollaborationMemberAbility left, CollaborationMemberAbility right) => left.Equals(right);
        public static bool operator !=(CollaborationMemberAbility left, CollaborationMemberAbility right) => !left.Equals(right);

        public static explicit operator string(CollaborationMemberAbility value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CollaborationMemberAbility other && Equals(other);
        public bool Equals(CollaborationMemberAbility other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CollaborationQueryLogStatus : IEquatable<CollaborationQueryLogStatus>
    {
        private readonly string _value;

        private CollaborationQueryLogStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CollaborationQueryLogStatus Enabled { get; } = new CollaborationQueryLogStatus("ENABLED");
        public static CollaborationQueryLogStatus Disabled { get; } = new CollaborationQueryLogStatus("DISABLED");

        public static bool operator ==(CollaborationQueryLogStatus left, CollaborationQueryLogStatus right) => left.Equals(right);
        public static bool operator !=(CollaborationQueryLogStatus left, CollaborationQueryLogStatus right) => !left.Equals(right);

        public static explicit operator string(CollaborationQueryLogStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CollaborationQueryLogStatus other && Equals(other);
        public bool Equals(CollaborationQueryLogStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfiguredTableAdditionalAnalyses : IEquatable<ConfiguredTableAdditionalAnalyses>
    {
        private readonly string _value;

        private ConfiguredTableAdditionalAnalyses(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfiguredTableAdditionalAnalyses Allowed { get; } = new ConfiguredTableAdditionalAnalyses("ALLOWED");
        public static ConfiguredTableAdditionalAnalyses Required { get; } = new ConfiguredTableAdditionalAnalyses("REQUIRED");
        public static ConfiguredTableAdditionalAnalyses NotAllowed { get; } = new ConfiguredTableAdditionalAnalyses("NOT_ALLOWED");

        public static bool operator ==(ConfiguredTableAdditionalAnalyses left, ConfiguredTableAdditionalAnalyses right) => left.Equals(right);
        public static bool operator !=(ConfiguredTableAdditionalAnalyses left, ConfiguredTableAdditionalAnalyses right) => !left.Equals(right);

        public static explicit operator string(ConfiguredTableAdditionalAnalyses value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfiguredTableAdditionalAnalyses other && Equals(other);
        public bool Equals(ConfiguredTableAdditionalAnalyses other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfiguredTableAggregateFunctionName : IEquatable<ConfiguredTableAggregateFunctionName>
    {
        private readonly string _value;

        private ConfiguredTableAggregateFunctionName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfiguredTableAggregateFunctionName Sum { get; } = new ConfiguredTableAggregateFunctionName("SUM");
        public static ConfiguredTableAggregateFunctionName SumDistinct { get; } = new ConfiguredTableAggregateFunctionName("SUM_DISTINCT");
        public static ConfiguredTableAggregateFunctionName Count { get; } = new ConfiguredTableAggregateFunctionName("COUNT");
        public static ConfiguredTableAggregateFunctionName CountDistinct { get; } = new ConfiguredTableAggregateFunctionName("COUNT_DISTINCT");
        public static ConfiguredTableAggregateFunctionName Avg { get; } = new ConfiguredTableAggregateFunctionName("AVG");

        public static bool operator ==(ConfiguredTableAggregateFunctionName left, ConfiguredTableAggregateFunctionName right) => left.Equals(right);
        public static bool operator !=(ConfiguredTableAggregateFunctionName left, ConfiguredTableAggregateFunctionName right) => !left.Equals(right);

        public static explicit operator string(ConfiguredTableAggregateFunctionName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfiguredTableAggregateFunctionName other && Equals(other);
        public bool Equals(ConfiguredTableAggregateFunctionName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfiguredTableAggregationType : IEquatable<ConfiguredTableAggregationType>
    {
        private readonly string _value;

        private ConfiguredTableAggregationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfiguredTableAggregationType CountDistinct { get; } = new ConfiguredTableAggregationType("COUNT_DISTINCT");

        public static bool operator ==(ConfiguredTableAggregationType left, ConfiguredTableAggregationType right) => left.Equals(right);
        public static bool operator !=(ConfiguredTableAggregationType left, ConfiguredTableAggregationType right) => !left.Equals(right);

        public static explicit operator string(ConfiguredTableAggregationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfiguredTableAggregationType other && Equals(other);
        public bool Equals(ConfiguredTableAggregationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfiguredTableAnalysisMethod : IEquatable<ConfiguredTableAnalysisMethod>
    {
        private readonly string _value;

        private ConfiguredTableAnalysisMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfiguredTableAnalysisMethod DirectQuery { get; } = new ConfiguredTableAnalysisMethod("DIRECT_QUERY");

        public static bool operator ==(ConfiguredTableAnalysisMethod left, ConfiguredTableAnalysisMethod right) => left.Equals(right);
        public static bool operator !=(ConfiguredTableAnalysisMethod left, ConfiguredTableAnalysisMethod right) => !left.Equals(right);

        public static explicit operator string(ConfiguredTableAnalysisMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfiguredTableAnalysisMethod other && Equals(other);
        public bool Equals(ConfiguredTableAnalysisMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfiguredTableAnalysisRuleType : IEquatable<ConfiguredTableAnalysisRuleType>
    {
        private readonly string _value;

        private ConfiguredTableAnalysisRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfiguredTableAnalysisRuleType Aggregation { get; } = new ConfiguredTableAnalysisRuleType("AGGREGATION");
        public static ConfiguredTableAnalysisRuleType List { get; } = new ConfiguredTableAnalysisRuleType("LIST");
        public static ConfiguredTableAnalysisRuleType Custom { get; } = new ConfiguredTableAnalysisRuleType("CUSTOM");

        public static bool operator ==(ConfiguredTableAnalysisRuleType left, ConfiguredTableAnalysisRuleType right) => left.Equals(right);
        public static bool operator !=(ConfiguredTableAnalysisRuleType left, ConfiguredTableAnalysisRuleType right) => !left.Equals(right);

        public static explicit operator string(ConfiguredTableAnalysisRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfiguredTableAnalysisRuleType other && Equals(other);
        public bool Equals(ConfiguredTableAnalysisRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfiguredTableAssociationAnalysisRuleType : IEquatable<ConfiguredTableAssociationAnalysisRuleType>
    {
        private readonly string _value;

        private ConfiguredTableAssociationAnalysisRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfiguredTableAssociationAnalysisRuleType Aggregation { get; } = new ConfiguredTableAssociationAnalysisRuleType("AGGREGATION");
        public static ConfiguredTableAssociationAnalysisRuleType List { get; } = new ConfiguredTableAssociationAnalysisRuleType("LIST");
        public static ConfiguredTableAssociationAnalysisRuleType Custom { get; } = new ConfiguredTableAssociationAnalysisRuleType("CUSTOM");

        public static bool operator ==(ConfiguredTableAssociationAnalysisRuleType left, ConfiguredTableAssociationAnalysisRuleType right) => left.Equals(right);
        public static bool operator !=(ConfiguredTableAssociationAnalysisRuleType left, ConfiguredTableAssociationAnalysisRuleType right) => !left.Equals(right);

        public static explicit operator string(ConfiguredTableAssociationAnalysisRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfiguredTableAssociationAnalysisRuleType other && Equals(other);
        public bool Equals(ConfiguredTableAssociationAnalysisRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfiguredTableJoinOperator : IEquatable<ConfiguredTableJoinOperator>
    {
        private readonly string _value;

        private ConfiguredTableJoinOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfiguredTableJoinOperator Or { get; } = new ConfiguredTableJoinOperator("OR");
        public static ConfiguredTableJoinOperator And { get; } = new ConfiguredTableJoinOperator("AND");

        public static bool operator ==(ConfiguredTableJoinOperator left, ConfiguredTableJoinOperator right) => left.Equals(right);
        public static bool operator !=(ConfiguredTableJoinOperator left, ConfiguredTableJoinOperator right) => !left.Equals(right);

        public static explicit operator string(ConfiguredTableJoinOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfiguredTableJoinOperator other && Equals(other);
        public bool Equals(ConfiguredTableJoinOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfiguredTableJoinRequiredOption : IEquatable<ConfiguredTableJoinRequiredOption>
    {
        private readonly string _value;

        private ConfiguredTableJoinRequiredOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfiguredTableJoinRequiredOption QueryRunner { get; } = new ConfiguredTableJoinRequiredOption("QUERY_RUNNER");

        public static bool operator ==(ConfiguredTableJoinRequiredOption left, ConfiguredTableJoinRequiredOption right) => left.Equals(right);
        public static bool operator !=(ConfiguredTableJoinRequiredOption left, ConfiguredTableJoinRequiredOption right) => !left.Equals(right);

        public static explicit operator string(ConfiguredTableJoinRequiredOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfiguredTableJoinRequiredOption other && Equals(other);
        public bool Equals(ConfiguredTableJoinRequiredOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConfiguredTableScalarFunctions : IEquatable<ConfiguredTableScalarFunctions>
    {
        private readonly string _value;

        private ConfiguredTableScalarFunctions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConfiguredTableScalarFunctions Trunc { get; } = new ConfiguredTableScalarFunctions("TRUNC");
        public static ConfiguredTableScalarFunctions Abs { get; } = new ConfiguredTableScalarFunctions("ABS");
        public static ConfiguredTableScalarFunctions Ceiling { get; } = new ConfiguredTableScalarFunctions("CEILING");
        public static ConfiguredTableScalarFunctions Floor { get; } = new ConfiguredTableScalarFunctions("FLOOR");
        public static ConfiguredTableScalarFunctions Ln { get; } = new ConfiguredTableScalarFunctions("LN");
        public static ConfiguredTableScalarFunctions Log { get; } = new ConfiguredTableScalarFunctions("LOG");
        public static ConfiguredTableScalarFunctions Round { get; } = new ConfiguredTableScalarFunctions("ROUND");
        public static ConfiguredTableScalarFunctions Sqrt { get; } = new ConfiguredTableScalarFunctions("SQRT");
        public static ConfiguredTableScalarFunctions Cast { get; } = new ConfiguredTableScalarFunctions("CAST");
        public static ConfiguredTableScalarFunctions Lower { get; } = new ConfiguredTableScalarFunctions("LOWER");
        public static ConfiguredTableScalarFunctions Rtrim { get; } = new ConfiguredTableScalarFunctions("RTRIM");
        public static ConfiguredTableScalarFunctions Upper { get; } = new ConfiguredTableScalarFunctions("UPPER");
        public static ConfiguredTableScalarFunctions Coalesce { get; } = new ConfiguredTableScalarFunctions("COALESCE");
        public static ConfiguredTableScalarFunctions Convert { get; } = new ConfiguredTableScalarFunctions("CONVERT");
        public static ConfiguredTableScalarFunctions CurrentDate { get; } = new ConfiguredTableScalarFunctions("CURRENT_DATE");
        public static ConfiguredTableScalarFunctions Dateadd { get; } = new ConfiguredTableScalarFunctions("DATEADD");
        public static ConfiguredTableScalarFunctions Extract { get; } = new ConfiguredTableScalarFunctions("EXTRACT");
        public static ConfiguredTableScalarFunctions Getdate { get; } = new ConfiguredTableScalarFunctions("GETDATE");
        public static ConfiguredTableScalarFunctions Substring { get; } = new ConfiguredTableScalarFunctions("SUBSTRING");
        public static ConfiguredTableScalarFunctions ToChar { get; } = new ConfiguredTableScalarFunctions("TO_CHAR");
        public static ConfiguredTableScalarFunctions ToDate { get; } = new ConfiguredTableScalarFunctions("TO_DATE");
        public static ConfiguredTableScalarFunctions ToNumber { get; } = new ConfiguredTableScalarFunctions("TO_NUMBER");
        public static ConfiguredTableScalarFunctions ToTimestamp { get; } = new ConfiguredTableScalarFunctions("TO_TIMESTAMP");
        public static ConfiguredTableScalarFunctions Trim { get; } = new ConfiguredTableScalarFunctions("TRIM");

        public static bool operator ==(ConfiguredTableScalarFunctions left, ConfiguredTableScalarFunctions right) => left.Equals(right);
        public static bool operator !=(ConfiguredTableScalarFunctions left, ConfiguredTableScalarFunctions right) => !left.Equals(right);

        public static explicit operator string(ConfiguredTableScalarFunctions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConfiguredTableScalarFunctions other && Equals(other);
        public bool Equals(ConfiguredTableScalarFunctions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the input source of the ID mapping table.
    /// </summary>
    [EnumType]
    public readonly struct IdMappingTableInputSourceType : IEquatable<IdMappingTableInputSourceType>
    {
        private readonly string _value;

        private IdMappingTableInputSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdMappingTableInputSourceType Source { get; } = new IdMappingTableInputSourceType("SOURCE");
        public static IdMappingTableInputSourceType Target { get; } = new IdMappingTableInputSourceType("TARGET");

        public static bool operator ==(IdMappingTableInputSourceType left, IdMappingTableInputSourceType right) => left.Equals(right);
        public static bool operator !=(IdMappingTableInputSourceType left, IdMappingTableInputSourceType right) => !left.Equals(right);

        public static explicit operator string(IdMappingTableInputSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdMappingTableInputSourceType other && Equals(other);
        public bool Equals(IdMappingTableInputSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The ID namespace type for this ID namespace association.
    /// </summary>
    [EnumType]
    public readonly struct IdNamespaceAssociationInputReferencePropertiesIdNamespaceType : IEquatable<IdNamespaceAssociationInputReferencePropertiesIdNamespaceType>
    {
        private readonly string _value;

        private IdNamespaceAssociationInputReferencePropertiesIdNamespaceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdNamespaceAssociationInputReferencePropertiesIdNamespaceType Source { get; } = new IdNamespaceAssociationInputReferencePropertiesIdNamespaceType("SOURCE");
        public static IdNamespaceAssociationInputReferencePropertiesIdNamespaceType Target { get; } = new IdNamespaceAssociationInputReferencePropertiesIdNamespaceType("TARGET");

        public static bool operator ==(IdNamespaceAssociationInputReferencePropertiesIdNamespaceType left, IdNamespaceAssociationInputReferencePropertiesIdNamespaceType right) => left.Equals(right);
        public static bool operator !=(IdNamespaceAssociationInputReferencePropertiesIdNamespaceType left, IdNamespaceAssociationInputReferencePropertiesIdNamespaceType right) => !left.Equals(right);

        public static explicit operator string(IdNamespaceAssociationInputReferencePropertiesIdNamespaceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdNamespaceAssociationInputReferencePropertiesIdNamespaceType other && Equals(other);
        public bool Equals(IdNamespaceAssociationInputReferencePropertiesIdNamespaceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MembershipQueryLogStatus : IEquatable<MembershipQueryLogStatus>
    {
        private readonly string _value;

        private MembershipQueryLogStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MembershipQueryLogStatus Enabled { get; } = new MembershipQueryLogStatus("ENABLED");
        public static MembershipQueryLogStatus Disabled { get; } = new MembershipQueryLogStatus("DISABLED");

        public static bool operator ==(MembershipQueryLogStatus left, MembershipQueryLogStatus right) => left.Equals(right);
        public static bool operator !=(MembershipQueryLogStatus left, MembershipQueryLogStatus right) => !left.Equals(right);

        public static explicit operator string(MembershipQueryLogStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MembershipQueryLogStatus other && Equals(other);
        public bool Equals(MembershipQueryLogStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MembershipResultFormat : IEquatable<MembershipResultFormat>
    {
        private readonly string _value;

        private MembershipResultFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MembershipResultFormat Csv { get; } = new MembershipResultFormat("CSV");
        public static MembershipResultFormat Parquet { get; } = new MembershipResultFormat("PARQUET");

        public static bool operator ==(MembershipResultFormat left, MembershipResultFormat right) => left.Equals(right);
        public static bool operator !=(MembershipResultFormat left, MembershipResultFormat right) => !left.Equals(right);

        public static explicit operator string(MembershipResultFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MembershipResultFormat other && Equals(other);
        public bool Equals(MembershipResultFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// How often the privacy budget refreshes.
    /// 
    /// &gt; If you plan to regularly bring new data into the collaboration, use `CALENDAR_MONTH` to automatically get a new privacy budget for the collaboration every calendar month. Choosing this option allows arbitrary amounts of information to be revealed about rows of the data when repeatedly queried across refreshes. Avoid choosing this if the same rows will be repeatedly queried between privacy budget refreshes.
    /// </summary>
    [EnumType]
    public readonly struct PrivacyBudgetTemplateAutoRefresh : IEquatable<PrivacyBudgetTemplateAutoRefresh>
    {
        private readonly string _value;

        private PrivacyBudgetTemplateAutoRefresh(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivacyBudgetTemplateAutoRefresh CalendarMonth { get; } = new PrivacyBudgetTemplateAutoRefresh("CALENDAR_MONTH");
        public static PrivacyBudgetTemplateAutoRefresh None { get; } = new PrivacyBudgetTemplateAutoRefresh("NONE");

        public static bool operator ==(PrivacyBudgetTemplateAutoRefresh left, PrivacyBudgetTemplateAutoRefresh right) => left.Equals(right);
        public static bool operator !=(PrivacyBudgetTemplateAutoRefresh left, PrivacyBudgetTemplateAutoRefresh right) => !left.Equals(right);

        public static explicit operator string(PrivacyBudgetTemplateAutoRefresh value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivacyBudgetTemplateAutoRefresh other && Equals(other);
        public bool Equals(PrivacyBudgetTemplateAutoRefresh other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of the privacy budget template.
    /// </summary>
    [EnumType]
    public readonly struct PrivacyBudgetTemplatePrivacyBudgetType : IEquatable<PrivacyBudgetTemplatePrivacyBudgetType>
    {
        private readonly string _value;

        private PrivacyBudgetTemplatePrivacyBudgetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivacyBudgetTemplatePrivacyBudgetType DifferentialPrivacy { get; } = new PrivacyBudgetTemplatePrivacyBudgetType("DIFFERENTIAL_PRIVACY");

        public static bool operator ==(PrivacyBudgetTemplatePrivacyBudgetType left, PrivacyBudgetTemplatePrivacyBudgetType right) => left.Equals(right);
        public static bool operator !=(PrivacyBudgetTemplatePrivacyBudgetType left, PrivacyBudgetTemplatePrivacyBudgetType right) => !left.Equals(right);

        public static explicit operator string(PrivacyBudgetTemplatePrivacyBudgetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivacyBudgetTemplatePrivacyBudgetType other && Equals(other);
        public bool Equals(PrivacyBudgetTemplatePrivacyBudgetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
