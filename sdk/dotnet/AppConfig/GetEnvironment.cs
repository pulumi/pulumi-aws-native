// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AppConfig
{
    public static class GetEnvironment
    {
        /// <summary>
        /// Resource Type definition for AWS::AppConfig::Environment
        /// </summary>
        public static Task<GetEnvironmentResult> InvokeAsync(GetEnvironmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentResult>("aws-native:appconfig:getEnvironment", args ?? new GetEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::AppConfig::Environment
        /// </summary>
        public static Output<GetEnvironmentResult> Invoke(GetEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentResult>("aws-native:appconfig:getEnvironment", args ?? new GetEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The application ID.
        /// </summary>
        [Input("applicationId", required: true)]
        public string ApplicationId { get; set; } = null!;

        /// <summary>
        /// The environment ID.
        /// </summary>
        [Input("environmentId", required: true)]
        public string EnvironmentId { get; set; } = null!;

        public GetEnvironmentArgs()
        {
        }
        public static new GetEnvironmentArgs Empty => new GetEnvironmentArgs();
    }

    public sealed class GetEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The application ID.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// The environment ID.
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        public GetEnvironmentInvokeArgs()
        {
        }
        public static new GetEnvironmentInvokeArgs Empty => new GetEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvironmentResult
    {
        /// <summary>
        /// A description of the environment.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The environment ID.
        /// </summary>
        public readonly string? EnvironmentId;
        /// <summary>
        /// Amazon CloudWatch alarms to monitor during the deployment process.
        /// </summary>
        public readonly ImmutableArray<Outputs.EnvironmentMonitor> Monitors;
        /// <summary>
        /// A name for the environment.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Metadata to assign to the environment. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
        /// </summary>
        public readonly ImmutableArray<Outputs.EnvironmentTag> Tags;

        [OutputConstructor]
        private GetEnvironmentResult(
            string? description,

            string? environmentId,

            ImmutableArray<Outputs.EnvironmentMonitor> monitors,

            string? name,

            ImmutableArray<Outputs.EnvironmentTag> tags)
        {
            Description = description;
            EnvironmentId = environmentId;
            Monitors = monitors;
            Name = name;
            Tags = tags;
        }
    }
}
