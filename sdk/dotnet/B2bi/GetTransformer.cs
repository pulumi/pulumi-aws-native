// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.B2bi
{
    public static class GetTransformer
    {
        /// <summary>
        /// Definition of AWS::B2BI::Transformer Resource Type
        /// </summary>
        public static Task<GetTransformerResult> InvokeAsync(GetTransformerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransformerResult>("aws-native:b2bi:getTransformer", args ?? new GetTransformerArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::B2BI::Transformer Resource Type
        /// </summary>
        public static Output<GetTransformerResult> Invoke(GetTransformerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransformerResult>("aws-native:b2bi:getTransformer", args ?? new GetTransformerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransformerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The system-assigned unique identifier for the transformer.
        /// </summary>
        [Input("transformerId", required: true)]
        public string TransformerId { get; set; } = null!;

        public GetTransformerArgs()
        {
        }
        public static new GetTransformerArgs Empty => new GetTransformerArgs();
    }

    public sealed class GetTransformerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The system-assigned unique identifier for the transformer.
        /// </summary>
        [Input("transformerId", required: true)]
        public Input<string> TransformerId { get; set; } = null!;

        public GetTransformerInvokeArgs()
        {
        }
        public static new GetTransformerInvokeArgs Empty => new GetTransformerInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransformerResult
    {
        /// <summary>
        /// Returns a timestamp indicating when the transformer was created. For example, `2023-07-20T19:58:44.624Z` .
        /// </summary>
        public readonly string? CreatedAt;
        public readonly Outputs.TransformerEdiTypeProperties? EdiType;
        public readonly Pulumi.AwsNative.B2bi.TransformerFileFormat? FileFormat;
        /// <summary>
        /// Returns a structure that contains the format options for the transformation.
        /// </summary>
        public readonly Outputs.TransformerInputConversion? InputConversion;
        /// <summary>
        /// Returns the structure that contains the mapping template and its language (either XSLT or JSONATA).
        /// </summary>
        public readonly Outputs.TransformerMapping? Mapping;
        /// <summary>
        /// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
        /// </summary>
        public readonly string? MappingTemplate;
        /// <summary>
        /// Returns a timestamp representing the date and time for the most recent change for the transformer object.
        /// </summary>
        public readonly string? ModifiedAt;
        /// <summary>
        /// Returns the descriptive name for the transformer.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Returns the `OutputConversion` object, which contains the format options for the outbound transformation.
        /// </summary>
        public readonly Outputs.TransformerOutputConversion? OutputConversion;
        /// <summary>
        /// This shape is deprecated: This is a legacy trait. Please use input-conversion or output-conversion.
        /// </summary>
        public readonly string? SampleDocument;
        /// <summary>
        /// Returns a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.
        /// </summary>
        public readonly Outputs.TransformerSampleDocuments? SampleDocuments;
        /// <summary>
        /// Returns the state of the newly created transformer. The transformer can be either `active` or `inactive` . For the transformer to be used in a capability, its status must `active` .
        /// </summary>
        public readonly Pulumi.AwsNative.B2bi.TransformerStatus? Status;
        /// <summary>
        /// A key-value pair for a specific transformer. Tags are metadata that you can use to search for and group capabilities for various purposes.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;
        /// <summary>
        /// Returns an Amazon Resource Name (ARN) for a specific transformer.
        /// </summary>
        public readonly string? TransformerArn;
        /// <summary>
        /// The system-assigned unique identifier for the transformer.
        /// </summary>
        public readonly string? TransformerId;

        [OutputConstructor]
        private GetTransformerResult(
            string? createdAt,

            Outputs.TransformerEdiTypeProperties? ediType,

            Pulumi.AwsNative.B2bi.TransformerFileFormat? fileFormat,

            Outputs.TransformerInputConversion? inputConversion,

            Outputs.TransformerMapping? mapping,

            string? mappingTemplate,

            string? modifiedAt,

            string? name,

            Outputs.TransformerOutputConversion? outputConversion,

            string? sampleDocument,

            Outputs.TransformerSampleDocuments? sampleDocuments,

            Pulumi.AwsNative.B2bi.TransformerStatus? status,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags,

            string? transformerArn,

            string? transformerId)
        {
            CreatedAt = createdAt;
            EdiType = ediType;
            FileFormat = fileFormat;
            InputConversion = inputConversion;
            Mapping = mapping;
            MappingTemplate = mappingTemplate;
            ModifiedAt = modifiedAt;
            Name = name;
            OutputConversion = outputConversion;
            SampleDocument = sampleDocument;
            SampleDocuments = sampleDocuments;
            Status = status;
            Tags = tags;
            TransformerArn = transformerArn;
            TransformerId = transformerId;
        }
    }
}
