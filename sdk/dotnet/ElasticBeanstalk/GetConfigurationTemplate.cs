// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ElasticBeanstalk
{
    public static class GetConfigurationTemplate
    {
        /// <summary>
        /// Resource Type definition for AWS::ElasticBeanstalk::ConfigurationTemplate
        /// </summary>
        public static Task<GetConfigurationTemplateResult> InvokeAsync(GetConfigurationTemplateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigurationTemplateResult>("aws-native:elasticbeanstalk:getConfigurationTemplate", args ?? new GetConfigurationTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ElasticBeanstalk::ConfigurationTemplate
        /// </summary>
        public static Output<GetConfigurationTemplateResult> Invoke(GetConfigurationTemplateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigurationTemplateResult>("aws-native:elasticbeanstalk:getConfigurationTemplate", args ?? new GetConfigurationTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigurationTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Elastic Beanstalk application to associate with this configuration template. 
        /// </summary>
        [Input("applicationName", required: true)]
        public string ApplicationName { get; set; } = null!;

        /// <summary>
        /// The name of the configuration template
        /// </summary>
        [Input("templateName", required: true)]
        public string TemplateName { get; set; } = null!;

        public GetConfigurationTemplateArgs()
        {
        }
        public static new GetConfigurationTemplateArgs Empty => new GetConfigurationTemplateArgs();
    }

    public sealed class GetConfigurationTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Elastic Beanstalk application to associate with this configuration template. 
        /// </summary>
        [Input("applicationName", required: true)]
        public Input<string> ApplicationName { get; set; } = null!;

        /// <summary>
        /// The name of the configuration template
        /// </summary>
        [Input("templateName", required: true)]
        public Input<string> TemplateName { get; set; } = null!;

        public GetConfigurationTemplateInvokeArgs()
        {
        }
        public static new GetConfigurationTemplateInvokeArgs Empty => new GetConfigurationTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigurationTemplateResult
    {
        /// <summary>
        /// An optional description for this configuration.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see [Option Values](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html) in the AWS Elastic Beanstalk Developer Guide. 
        /// </summary>
        public readonly ImmutableArray<Outputs.ConfigurationTemplateConfigurationOptionSetting> OptionSettings;
        /// <summary>
        /// The name of the configuration template
        /// </summary>
        public readonly string? TemplateName;

        [OutputConstructor]
        private GetConfigurationTemplateResult(
            string? description,

            ImmutableArray<Outputs.ConfigurationTemplateConfigurationOptionSetting> optionSettings,

            string? templateName)
        {
            Description = description;
            OptionSettings = optionSettings;
            TemplateName = templateName;
        }
    }
}
