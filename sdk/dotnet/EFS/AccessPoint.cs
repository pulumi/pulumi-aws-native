// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EFS
{
    /// <summary>
    /// Resource Type definition for AWS::EFS::AccessPoint
    /// </summary>
    [AwsNativeResourceType("aws-native:efs:AccessPoint")]
    public partial class AccessPoint : Pulumi.CustomResource
    {
        [Output("accessPointId")]
        public Output<string> AccessPointId { get; private set; } = null!;

        [Output("accessPointTags")]
        public Output<ImmutableArray<Outputs.AccessPointAccessPointTag>> AccessPointTags { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// (optional) A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.
        /// </summary>
        [Output("clientToken")]
        public Output<string?> ClientToken { get; private set; } = null!;

        /// <summary>
        /// The ID of the EFS file system that the access point provides access to.
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// The operating system user and group applied to all file system requests made using the access point.
        /// </summary>
        [Output("posixUser")]
        public Output<Outputs.AccessPointPosixUser?> PosixUser { get; private set; } = null!;

        /// <summary>
        /// Specifies the directory on the Amazon EFS file system that the access point exposes as the root directory of your file system to NFS clients using the access point. The clients using the access point can only access the root directory and below. If the RootDirectory&gt;Path specified does not exist, EFS creates it and applies the CreationInfo settings when a client connects to an access point. When specifying a RootDirectory, you need to provide the Path, and the CreationInfo is optional.
        /// </summary>
        [Output("rootDirectory")]
        public Output<Outputs.AccessPointRootDirectory?> RootDirectory { get; private set; } = null!;


        /// <summary>
        /// Create a AccessPoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessPoint(string name, AccessPointArgs args, CustomResourceOptions? options = null)
            : base("aws-native:efs:AccessPoint", name, args ?? new AccessPointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessPoint(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:efs:AccessPoint", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessPoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessPoint Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AccessPoint(name, id, options);
        }
    }

    public sealed class AccessPointArgs : Pulumi.ResourceArgs
    {
        [Input("accessPointTags")]
        private InputList<Inputs.AccessPointAccessPointTagArgs>? _accessPointTags;
        public InputList<Inputs.AccessPointAccessPointTagArgs> AccessPointTags
        {
            get => _accessPointTags ?? (_accessPointTags = new InputList<Inputs.AccessPointAccessPointTagArgs>());
            set => _accessPointTags = value;
        }

        /// <summary>
        /// (optional) A string of up to 64 ASCII characters that Amazon EFS uses to ensure idempotent creation.
        /// </summary>
        [Input("clientToken")]
        public Input<string>? ClientToken { get; set; }

        /// <summary>
        /// The ID of the EFS file system that the access point provides access to.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The operating system user and group applied to all file system requests made using the access point.
        /// </summary>
        [Input("posixUser")]
        public Input<Inputs.AccessPointPosixUserArgs>? PosixUser { get; set; }

        /// <summary>
        /// Specifies the directory on the Amazon EFS file system that the access point exposes as the root directory of your file system to NFS clients using the access point. The clients using the access point can only access the root directory and below. If the RootDirectory&gt;Path specified does not exist, EFS creates it and applies the CreationInfo settings when a client connects to an access point. When specifying a RootDirectory, you need to provide the Path, and the CreationInfo is optional.
        /// </summary>
        [Input("rootDirectory")]
        public Input<Inputs.AccessPointRootDirectoryArgs>? RootDirectory { get; set; }

        public AccessPointArgs()
        {
        }
    }
}
