// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EFS
{
    public static class GetFileSystem
    {
        /// <summary>
        /// Resource Type definition for AWS::EFS::FileSystem
        /// </summary>
        public static Task<GetFileSystemResult> InvokeAsync(GetFileSystemArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFileSystemResult>("aws-native:efs:getFileSystem", args ?? new GetFileSystemArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::EFS::FileSystem
        /// </summary>
        public static Output<GetFileSystemResult> Invoke(GetFileSystemInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFileSystemResult>("aws-native:efs:getFileSystem", args ?? new GetFileSystemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFileSystemArgs : Pulumi.InvokeArgs
    {
        [Input("fileSystemId", required: true)]
        public string FileSystemId { get; set; } = null!;

        public GetFileSystemArgs()
        {
        }
    }

    public sealed class GetFileSystemInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        public GetFileSystemInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFileSystemResult
    {
        public readonly string? Arn;
        public readonly Outputs.FileSystemBackupPolicy? BackupPolicy;
        public readonly string? FileSystemId;
        public readonly object? FileSystemPolicy;
        public readonly ImmutableArray<Outputs.FileSystemElasticFileSystemTag> FileSystemTags;
        public readonly ImmutableArray<Outputs.FileSystemLifecyclePolicy> LifecyclePolicies;
        public readonly double? ProvisionedThroughputInMibps;
        public readonly string? ThroughputMode;

        [OutputConstructor]
        private GetFileSystemResult(
            string? arn,

            Outputs.FileSystemBackupPolicy? backupPolicy,

            string? fileSystemId,

            object? fileSystemPolicy,

            ImmutableArray<Outputs.FileSystemElasticFileSystemTag> fileSystemTags,

            ImmutableArray<Outputs.FileSystemLifecyclePolicy> lifecyclePolicies,

            double? provisionedThroughputInMibps,

            string? throughputMode)
        {
            Arn = arn;
            BackupPolicy = backupPolicy;
            FileSystemId = fileSystemId;
            FileSystemPolicy = fileSystemPolicy;
            FileSystemTags = fileSystemTags;
            LifecyclePolicies = lifecyclePolicies;
            ProvisionedThroughputInMibps = provisionedThroughputInMibps;
            ThroughputMode = throughputMode;
        }
    }
}
