// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.SystemsManagerSAP
{
    [EnumType]
    public readonly struct ApplicationCredentialCredentialType : IEquatable<ApplicationCredentialCredentialType>
    {
        private readonly string _value;

        private ApplicationCredentialCredentialType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationCredentialCredentialType Admin { get; } = new ApplicationCredentialCredentialType("ADMIN");

        public static bool operator ==(ApplicationCredentialCredentialType left, ApplicationCredentialCredentialType right) => left.Equals(right);
        public static bool operator !=(ApplicationCredentialCredentialType left, ApplicationCredentialCredentialType right) => !left.Equals(right);

        public static explicit operator string(ApplicationCredentialCredentialType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationCredentialCredentialType other && Equals(other);
        public bool Equals(ApplicationCredentialCredentialType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ApplicationType : IEquatable<ApplicationType>
    {
        private readonly string _value;

        private ApplicationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationType Hana { get; } = new ApplicationType("HANA");

        public static bool operator ==(ApplicationType left, ApplicationType right) => left.Equals(right);
        public static bool operator !=(ApplicationType left, ApplicationType right) => !left.Equals(right);

        public static explicit operator string(ApplicationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationType other && Equals(other);
        public bool Equals(ApplicationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
