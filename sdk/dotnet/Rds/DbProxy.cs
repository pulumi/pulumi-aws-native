// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Rds
{
    /// <summary>
    /// Resource schema for AWS::RDS::DBProxy
    /// </summary>
    [AwsNativeResourceType("aws-native:rds:DbProxy")]
    public partial class DbProxy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The authorization mechanism that the proxy uses.
        /// </summary>
        [Output("auth")]
        public Output<ImmutableArray<Outputs.DbProxyAuthFormat>> Auth { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) for the proxy.
        /// </summary>
        [Output("dbProxyArn")]
        public Output<string> DbProxyArn { get; private set; } = null!;

        /// <summary>
        /// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
        /// </summary>
        [Output("dbProxyName")]
        public Output<string> DbProxyName { get; private set; } = null!;

        /// <summary>
        /// Whether the proxy includes detailed information about SQL statements in its logs.
        /// </summary>
        [Output("debugLogging")]
        public Output<bool?> DebugLogging { get; private set; } = null!;

        /// <summary>
        /// The endpoint that you can use to connect to the proxy. You include the endpoint value in the connection string for a database client application.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The kinds of databases that the proxy can connect to.
        /// </summary>
        [Output("engineFamily")]
        public Output<Pulumi.AwsNative.Rds.DbProxyEngineFamily> EngineFamily { get; private set; } = null!;

        /// <summary>
        /// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
        /// </summary>
        [Output("idleClientTimeout")]
        public Output<int?> IdleClientTimeout { get; private set; } = null!;

        /// <summary>
        /// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
        /// </summary>
        [Output("requireTls")]
        public Output<bool?> RequireTls { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.DbProxyTagFormat>> Tags { get; private set; } = null!;

        /// <summary>
        /// VPC ID to associate with the new DB proxy.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// VPC security group IDs to associate with the new proxy.
        /// </summary>
        [Output("vpcSecurityGroupIds")]
        public Output<ImmutableArray<string>> VpcSecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// VPC subnet IDs to associate with the new proxy.
        /// </summary>
        [Output("vpcSubnetIds")]
        public Output<ImmutableArray<string>> VpcSubnetIds { get; private set; } = null!;


        /// <summary>
        /// Create a DbProxy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbProxy(string name, DbProxyArgs args, CustomResourceOptions? options = null)
            : base("aws-native:rds:DbProxy", name, args ?? new DbProxyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbProxy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:rds:DbProxy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbProxy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbProxy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DbProxy(name, id, options);
        }
    }

    public sealed class DbProxyArgs : global::Pulumi.ResourceArgs
    {
        [Input("auth", required: true)]
        private InputList<Inputs.DbProxyAuthFormatArgs>? _auth;

        /// <summary>
        /// The authorization mechanism that the proxy uses.
        /// </summary>
        public InputList<Inputs.DbProxyAuthFormatArgs> Auth
        {
            get => _auth ?? (_auth = new InputList<Inputs.DbProxyAuthFormatArgs>());
            set => _auth = value;
        }

        /// <summary>
        /// The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region.
        /// </summary>
        [Input("dbProxyName")]
        public Input<string>? DbProxyName { get; set; }

        /// <summary>
        /// Whether the proxy includes detailed information about SQL statements in its logs.
        /// </summary>
        [Input("debugLogging")]
        public Input<bool>? DebugLogging { get; set; }

        /// <summary>
        /// The kinds of databases that the proxy can connect to.
        /// </summary>
        [Input("engineFamily", required: true)]
        public Input<Pulumi.AwsNative.Rds.DbProxyEngineFamily> EngineFamily { get; set; } = null!;

        /// <summary>
        /// The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it.
        /// </summary>
        [Input("idleClientTimeout")]
        public Input<int>? IdleClientTimeout { get; set; }

        /// <summary>
        /// A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
        /// </summary>
        [Input("requireTls")]
        public Input<bool>? RequireTls { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.DbProxyTagFormatArgs>? _tags;

        /// <summary>
        /// An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.
        /// </summary>
        public InputList<Inputs.DbProxyTagFormatArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DbProxyTagFormatArgs>());
            set => _tags = value;
        }

        [Input("vpcSecurityGroupIds")]
        private InputList<string>? _vpcSecurityGroupIds;

        /// <summary>
        /// VPC security group IDs to associate with the new proxy.
        /// </summary>
        public InputList<string> VpcSecurityGroupIds
        {
            get => _vpcSecurityGroupIds ?? (_vpcSecurityGroupIds = new InputList<string>());
            set => _vpcSecurityGroupIds = value;
        }

        [Input("vpcSubnetIds", required: true)]
        private InputList<string>? _vpcSubnetIds;

        /// <summary>
        /// VPC subnet IDs to associate with the new proxy.
        /// </summary>
        public InputList<string> VpcSubnetIds
        {
            get => _vpcSubnetIds ?? (_vpcSubnetIds = new InputList<string>());
            set => _vpcSubnetIds = value;
        }

        public DbProxyArgs()
        {
        }
        public static new DbProxyArgs Empty => new DbProxyArgs();
    }
}
