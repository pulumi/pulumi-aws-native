// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Rds
{
    /// <summary>
    /// The availability status to be assigned to the CEV.
    /// </summary>
    [EnumType]
    public readonly struct CustomDbEngineVersionStatus : IEquatable<CustomDbEngineVersionStatus>
    {
        private readonly string _value;

        private CustomDbEngineVersionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDbEngineVersionStatus Available { get; } = new CustomDbEngineVersionStatus("available");
        public static CustomDbEngineVersionStatus Inactive { get; } = new CustomDbEngineVersionStatus("inactive");
        public static CustomDbEngineVersionStatus InactiveExceptRestore { get; } = new CustomDbEngineVersionStatus("inactive-except-restore");

        public static bool operator ==(CustomDbEngineVersionStatus left, CustomDbEngineVersionStatus right) => left.Equals(right);
        public static bool operator !=(CustomDbEngineVersionStatus left, CustomDbEngineVersionStatus right) => !left.Equals(right);

        public static explicit operator string(CustomDbEngineVersionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDbEngineVersionStatus other && Equals(other);
        public bool Equals(CustomDbEngineVersionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the processor feature. Valid names are ``coreCount`` and ``threadsPerCore``.
    /// </summary>
    [EnumType]
    public readonly struct DbInstanceProcessorFeatureName : IEquatable<DbInstanceProcessorFeatureName>
    {
        private readonly string _value;

        private DbInstanceProcessorFeatureName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DbInstanceProcessorFeatureName CoreCount { get; } = new DbInstanceProcessorFeatureName("coreCount");
        public static DbInstanceProcessorFeatureName ThreadsPerCore { get; } = new DbInstanceProcessorFeatureName("threadsPerCore");

        public static bool operator ==(DbInstanceProcessorFeatureName left, DbInstanceProcessorFeatureName right) => left.Equals(right);
        public static bool operator !=(DbInstanceProcessorFeatureName left, DbInstanceProcessorFeatureName right) => !left.Equals(right);

        public static explicit operator string(DbInstanceProcessorFeatureName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DbInstanceProcessorFeatureName other && Equals(other);
        public bool Equals(DbInstanceProcessorFeatureName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of authentication that the proxy uses for connections from the proxy to the underlying database. 
    /// </summary>
    [EnumType]
    public readonly struct DbProxyAuthFormatAuthScheme : IEquatable<DbProxyAuthFormatAuthScheme>
    {
        private readonly string _value;

        private DbProxyAuthFormatAuthScheme(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DbProxyAuthFormatAuthScheme Secrets { get; } = new DbProxyAuthFormatAuthScheme("SECRETS");

        public static bool operator ==(DbProxyAuthFormatAuthScheme left, DbProxyAuthFormatAuthScheme right) => left.Equals(right);
        public static bool operator !=(DbProxyAuthFormatAuthScheme left, DbProxyAuthFormatAuthScheme right) => !left.Equals(right);

        public static explicit operator string(DbProxyAuthFormatAuthScheme value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DbProxyAuthFormatAuthScheme other && Equals(other);
        public bool Equals(DbProxyAuthFormatAuthScheme other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of authentication the proxy uses for connections from clients.
    /// </summary>
    [EnumType]
    public readonly struct DbProxyAuthFormatClientPasswordAuthType : IEquatable<DbProxyAuthFormatClientPasswordAuthType>
    {
        private readonly string _value;

        private DbProxyAuthFormatClientPasswordAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DbProxyAuthFormatClientPasswordAuthType MysqlNativePassword { get; } = new DbProxyAuthFormatClientPasswordAuthType("MYSQL_NATIVE_PASSWORD");
        public static DbProxyAuthFormatClientPasswordAuthType PostgresScramSha256 { get; } = new DbProxyAuthFormatClientPasswordAuthType("POSTGRES_SCRAM_SHA_256");
        public static DbProxyAuthFormatClientPasswordAuthType PostgresMd5 { get; } = new DbProxyAuthFormatClientPasswordAuthType("POSTGRES_MD5");
        public static DbProxyAuthFormatClientPasswordAuthType SqlServerAuthentication { get; } = new DbProxyAuthFormatClientPasswordAuthType("SQL_SERVER_AUTHENTICATION");

        public static bool operator ==(DbProxyAuthFormatClientPasswordAuthType left, DbProxyAuthFormatClientPasswordAuthType right) => left.Equals(right);
        public static bool operator !=(DbProxyAuthFormatClientPasswordAuthType left, DbProxyAuthFormatClientPasswordAuthType right) => !left.Equals(right);

        public static explicit operator string(DbProxyAuthFormatClientPasswordAuthType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DbProxyAuthFormatClientPasswordAuthType other && Equals(other);
        public bool Equals(DbProxyAuthFormatClientPasswordAuthType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The ENABLED value is valid only for proxies with RDS for Microsoft SQL Server.
    /// </summary>
    [EnumType]
    public readonly struct DbProxyAuthFormatIamAuth : IEquatable<DbProxyAuthFormatIamAuth>
    {
        private readonly string _value;

        private DbProxyAuthFormatIamAuth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DbProxyAuthFormatIamAuth Disabled { get; } = new DbProxyAuthFormatIamAuth("DISABLED");
        public static DbProxyAuthFormatIamAuth Required { get; } = new DbProxyAuthFormatIamAuth("REQUIRED");
        public static DbProxyAuthFormatIamAuth Enabled { get; } = new DbProxyAuthFormatIamAuth("ENABLED");

        public static bool operator ==(DbProxyAuthFormatIamAuth left, DbProxyAuthFormatIamAuth right) => left.Equals(right);
        public static bool operator !=(DbProxyAuthFormatIamAuth left, DbProxyAuthFormatIamAuth right) => !left.Equals(right);

        public static explicit operator string(DbProxyAuthFormatIamAuth value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DbProxyAuthFormatIamAuth other && Equals(other);
        public bool Equals(DbProxyAuthFormatIamAuth other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.
    /// </summary>
    [EnumType]
    public readonly struct DbProxyEndpointTargetRole : IEquatable<DbProxyEndpointTargetRole>
    {
        private readonly string _value;

        private DbProxyEndpointTargetRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DbProxyEndpointTargetRole ReadWrite { get; } = new DbProxyEndpointTargetRole("READ_WRITE");
        public static DbProxyEndpointTargetRole ReadOnly { get; } = new DbProxyEndpointTargetRole("READ_ONLY");

        public static bool operator ==(DbProxyEndpointTargetRole left, DbProxyEndpointTargetRole right) => left.Equals(right);
        public static bool operator !=(DbProxyEndpointTargetRole left, DbProxyEndpointTargetRole right) => !left.Equals(right);

        public static explicit operator string(DbProxyEndpointTargetRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DbProxyEndpointTargetRole other && Equals(other);
        public bool Equals(DbProxyEndpointTargetRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The kinds of databases that the proxy can connect to.
    /// </summary>
    [EnumType]
    public readonly struct DbProxyEngineFamily : IEquatable<DbProxyEngineFamily>
    {
        private readonly string _value;

        private DbProxyEngineFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DbProxyEngineFamily Mysql { get; } = new DbProxyEngineFamily("MYSQL");
        public static DbProxyEngineFamily Postgresql { get; } = new DbProxyEngineFamily("POSTGRESQL");
        public static DbProxyEngineFamily Sqlserver { get; } = new DbProxyEngineFamily("SQLSERVER");

        public static bool operator ==(DbProxyEngineFamily left, DbProxyEngineFamily right) => left.Equals(right);
        public static bool operator !=(DbProxyEngineFamily left, DbProxyEngineFamily right) => !left.Equals(right);

        public static explicit operator string(DbProxyEngineFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DbProxyEngineFamily other && Equals(other);
        public bool Equals(DbProxyEngineFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The identifier for the DBProxyTargetGroup
    /// </summary>
    [EnumType]
    public readonly struct DbProxyTargetGroupTargetGroupName : IEquatable<DbProxyTargetGroupTargetGroupName>
    {
        private readonly string _value;

        private DbProxyTargetGroupTargetGroupName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DbProxyTargetGroupTargetGroupName Default { get; } = new DbProxyTargetGroupTargetGroupName("default");

        public static bool operator ==(DbProxyTargetGroupTargetGroupName left, DbProxyTargetGroupTargetGroupName right) => left.Equals(right);
        public static bool operator !=(DbProxyTargetGroupTargetGroupName left, DbProxyTargetGroupTargetGroupName right) => !left.Equals(right);

        public static explicit operator string(DbProxyTargetGroupTargetGroupName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DbProxyTargetGroupTargetGroupName other && Equals(other);
        public bool Equals(DbProxyTargetGroupTargetGroupName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora).
    /// If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
    /// </summary>
    [EnumType]
    public readonly struct GlobalClusterEngine : IEquatable<GlobalClusterEngine>
    {
        private readonly string _value;

        private GlobalClusterEngine(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GlobalClusterEngine Aurora { get; } = new GlobalClusterEngine("aurora");
        public static GlobalClusterEngine AuroraMysql { get; } = new GlobalClusterEngine("aurora-mysql");
        public static GlobalClusterEngine AuroraPostgresql { get; } = new GlobalClusterEngine("aurora-postgresql");

        public static bool operator ==(GlobalClusterEngine left, GlobalClusterEngine right) => left.Equals(right);
        public static bool operator !=(GlobalClusterEngine left, GlobalClusterEngine right) => !left.Equals(right);

        public static explicit operator string(GlobalClusterEngine value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GlobalClusterEngine other && Equals(other);
        public bool Equals(GlobalClusterEngine other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
