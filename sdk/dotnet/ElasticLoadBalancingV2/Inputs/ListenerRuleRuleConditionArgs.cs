// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ElasticLoadBalancingV2.Inputs
{

    /// <summary>
    /// Specifies a condition for a listener rule.
    /// </summary>
    public sealed class ListenerRuleRuleConditionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The field in the HTTP request. The following are the possible values:
        ///   +   ``http-header`` 
        ///   +   ``http-request-method`` 
        ///   +   ``host-header`` 
        ///   +   ``path-pattern`` 
        ///   +   ``query-string`` 
        ///   +   ``source-ip``
        /// </summary>
        [Input("field")]
        public Input<string>? Field { get; set; }

        /// <summary>
        /// Information for a host header condition. Specify only when ``Field`` is ``host-header``.
        /// </summary>
        [Input("hostHeaderConfig")]
        public Input<Inputs.ListenerRuleHostHeaderConfigArgs>? HostHeaderConfig { get; set; }

        /// <summary>
        /// Information for an HTTP header condition. Specify only when ``Field`` is ``http-header``.
        /// </summary>
        [Input("httpHeaderConfig")]
        public Input<Inputs.ListenerRuleHttpHeaderConfigArgs>? HttpHeaderConfig { get; set; }

        /// <summary>
        /// Information for an HTTP method condition. Specify only when ``Field`` is ``http-request-method``.
        /// </summary>
        [Input("httpRequestMethodConfig")]
        public Input<Inputs.ListenerRuleHttpRequestMethodConfigArgs>? HttpRequestMethodConfig { get; set; }

        /// <summary>
        /// Information for a path pattern condition. Specify only when ``Field`` is ``path-pattern``.
        /// </summary>
        [Input("pathPatternConfig")]
        public Input<Inputs.ListenerRulePathPatternConfigArgs>? PathPatternConfig { get; set; }

        /// <summary>
        /// Information for a query string condition. Specify only when ``Field`` is ``query-string``.
        /// </summary>
        [Input("queryStringConfig")]
        public Input<Inputs.ListenerRuleQueryStringConfigArgs>? QueryStringConfig { get; set; }

        /// <summary>
        /// Information for a source IP condition. Specify only when ``Field`` is ``source-ip``.
        /// </summary>
        [Input("sourceIpConfig")]
        public Input<Inputs.ListenerRuleSourceIpConfigArgs>? SourceIpConfig { get; set; }

        [Input("values")]
        private InputList<string>? _values;

        /// <summary>
        /// The condition value. Specify only when ``Field`` is ``host-header`` or ``path-pattern``. Alternatively, to specify multiple host names or multiple path patterns, use ``HostHeaderConfig`` or ``PathPatternConfig``.
        ///  If ``Field`` is ``host-header`` and you're not using ``HostHeaderConfig``, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters.
        ///   +  A-Z, a-z, 0-9
        ///   +  - .
        ///   +  * (matches 0 or more characters)
        ///   +  ? (matches exactly 1 character)
        ///   
        ///  If ``Field`` is ``path-pattern`` and you're not using ``PathPatternConfig``, you can specify a single path pattern (for example, /img/*). A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters.
        ///   +  A-Z, a-z, 0-9
        ///   +  _ - . $ / ~ " ' @ : +
        ///   +  &amp; (using &amp;amp;)
        ///   +  * (matches 0 or more characters)
        ///   +  ? (matches exactly 1 character)
        /// </summary>
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public ListenerRuleRuleConditionArgs()
        {
        }
        public static new ListenerRuleRuleConditionArgs Empty => new ListenerRuleRuleConditionArgs();
    }
}
