// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ElasticLoadBalancingV2
{
    /// <summary>
    /// Resource Type definition for AWS::ElasticLoadBalancingV2::TrustStore
    /// </summary>
    [AwsNativeResourceType("aws-native:elasticloadbalancingv2:TrustStore")]
    public partial class TrustStore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the S3 bucket to fetch the CA certificate bundle from.
        /// </summary>
        [Output("caCertificatesBundleS3Bucket")]
        public Output<string?> CaCertificatesBundleS3Bucket { get; private set; } = null!;

        /// <summary>
        /// The name of the S3 object to fetch the CA certificate bundle from.
        /// </summary>
        [Output("caCertificatesBundleS3Key")]
        public Output<string?> CaCertificatesBundleS3Key { get; private set; } = null!;

        /// <summary>
        /// The version of the S3 bucket that contains the CA certificate bundle.
        /// </summary>
        [Output("caCertificatesBundleS3ObjectVersion")]
        public Output<string?> CaCertificatesBundleS3ObjectVersion { get; private set; } = null!;

        /// <summary>
        /// The name of the trust store.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The number of certificates associated with the trust store.
        /// </summary>
        [Output("numberOfCaCertificates")]
        public Output<int> NumberOfCaCertificates { get; private set; } = null!;

        /// <summary>
        /// The status of the trust store, could be either of ACTIVE or CREATING.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The tags to assign to the trust store.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the trust store.
        /// </summary>
        [Output("trustStoreArn")]
        public Output<string> TrustStoreArn { get; private set; } = null!;


        /// <summary>
        /// Create a TrustStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrustStore(string name, TrustStoreArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:elasticloadbalancingv2:TrustStore", name, args ?? new TrustStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TrustStore(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:elasticloadbalancingv2:TrustStore", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "name",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrustStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrustStore Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new TrustStore(name, id, options);
        }
    }

    public sealed class TrustStoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the S3 bucket to fetch the CA certificate bundle from.
        /// </summary>
        [Input("caCertificatesBundleS3Bucket")]
        public Input<string>? CaCertificatesBundleS3Bucket { get; set; }

        /// <summary>
        /// The name of the S3 object to fetch the CA certificate bundle from.
        /// </summary>
        [Input("caCertificatesBundleS3Key")]
        public Input<string>? CaCertificatesBundleS3Key { get; set; }

        /// <summary>
        /// The version of the S3 bucket that contains the CA certificate bundle.
        /// </summary>
        [Input("caCertificatesBundleS3ObjectVersion")]
        public Input<string>? CaCertificatesBundleS3ObjectVersion { get; set; }

        /// <summary>
        /// The name of the trust store.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The tags to assign to the trust store.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public TrustStoreArgs()
        {
        }
        public static new TrustStoreArgs Empty => new TrustStoreArgs();
    }
}
