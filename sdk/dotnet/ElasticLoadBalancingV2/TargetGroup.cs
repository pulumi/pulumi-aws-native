// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ElasticLoadBalancingV2
{
    /// <summary>
    /// Resource Type definition for AWS::ElasticLoadBalancingV2::TargetGroup
    /// </summary>
    [AwsNativeResourceType("aws-native:elasticloadbalancingv2:TargetGroup")]
    public partial class TargetGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
        /// </summary>
        [Output("healthCheckEnabled")]
        public Output<bool?> HealthCheckEnabled { get; private set; } = null!;

        /// <summary>
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        /// </summary>
        [Output("healthCheckIntervalSeconds")]
        public Output<int?> HealthCheckIntervalSeconds { get; private set; } = null!;

        /// <summary>
        /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.
        /// </summary>
        [Output("healthCheckPath")]
        public Output<string?> HealthCheckPath { get; private set; } = null!;

        /// <summary>
        /// The port the load balancer uses when performing health checks on targets. 
        /// </summary>
        [Output("healthCheckPort")]
        public Output<string?> HealthCheckPort { get; private set; } = null!;

        /// <summary>
        /// The protocol the load balancer uses when performing health checks on targets. 
        /// </summary>
        [Output("healthCheckProtocol")]
        public Output<string?> HealthCheckProtocol { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in seconds, during which no response from a target means a failed health check.
        /// </summary>
        [Output("healthCheckTimeoutSeconds")]
        public Output<int?> HealthCheckTimeoutSeconds { get; private set; } = null!;

        /// <summary>
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy. 
        /// </summary>
        [Output("healthyThresholdCount")]
        public Output<int?> HealthyThresholdCount { get; private set; } = null!;

        /// <summary>
        /// The type of IP address used for this target group. The possible values are ipv4 and ipv6. 
        /// </summary>
        [Output("ipAddressType")]
        public Output<string?> IpAddressType { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
        /// </summary>
        [Output("loadBalancerArns")]
        public Output<ImmutableArray<string>> LoadBalancerArns { get; private set; } = null!;

        /// <summary>
        /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
        /// </summary>
        [Output("matcher")]
        public Output<Outputs.TargetGroupMatcher?> Matcher { get; private set; } = null!;

        /// <summary>
        /// The name of the target group.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// The protocol to use for routing traffic to the targets.
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
        /// </summary>
        [Output("protocolVersion")]
        public Output<string?> ProtocolVersion { get; private set; } = null!;

        /// <summary>
        /// The tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The ARN of the Target Group
        /// </summary>
        [Output("targetGroupArn")]
        public Output<string> TargetGroupArn { get; private set; } = null!;

        /// <summary>
        /// The attributes.
        /// </summary>
        [Output("targetGroupAttributes")]
        public Output<ImmutableArray<Outputs.TargetGroupAttribute>> TargetGroupAttributes { get; private set; } = null!;

        /// <summary>
        /// The full name of the target group.
        /// </summary>
        [Output("targetGroupFullName")]
        public Output<string> TargetGroupFullName { get; private set; } = null!;

        /// <summary>
        /// The name of the target group.
        /// </summary>
        [Output("targetGroupName")]
        public Output<string> TargetGroupName { get; private set; } = null!;

        /// <summary>
        /// The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
        /// </summary>
        [Output("targetType")]
        public Output<string?> TargetType { get; private set; } = null!;

        /// <summary>
        /// The targets.
        /// </summary>
        [Output("targets")]
        public Output<ImmutableArray<Outputs.TargetGroupTargetDescription>> Targets { get; private set; } = null!;

        /// <summary>
        /// The number of consecutive health check failures required before considering a target unhealthy.
        /// </summary>
        [Output("unhealthyThresholdCount")]
        public Output<int?> UnhealthyThresholdCount { get; private set; } = null!;

        /// <summary>
        /// The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        /// </summary>
        [Output("vpcId")]
        public Output<string?> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a TargetGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TargetGroup(string name, TargetGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:elasticloadbalancingv2:TargetGroup", name, args ?? new TargetGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TargetGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:elasticloadbalancingv2:TargetGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "ipAddressType",
                    "name",
                    "port",
                    "protocol",
                    "protocolVersion",
                    "targetType",
                    "vpcId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TargetGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TargetGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new TargetGroup(name, id, options);
        }
    }

    public sealed class TargetGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
        /// </summary>
        [Input("healthCheckEnabled")]
        public Input<bool>? HealthCheckEnabled { get; set; }

        /// <summary>
        /// The approximate amount of time, in seconds, between health checks of an individual target.
        /// </summary>
        [Input("healthCheckIntervalSeconds")]
        public Input<int>? HealthCheckIntervalSeconds { get; set; }

        /// <summary>
        /// [HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.
        /// </summary>
        [Input("healthCheckPath")]
        public Input<string>? HealthCheckPath { get; set; }

        /// <summary>
        /// The port the load balancer uses when performing health checks on targets. 
        /// </summary>
        [Input("healthCheckPort")]
        public Input<string>? HealthCheckPort { get; set; }

        /// <summary>
        /// The protocol the load balancer uses when performing health checks on targets. 
        /// </summary>
        [Input("healthCheckProtocol")]
        public Input<string>? HealthCheckProtocol { get; set; }

        /// <summary>
        /// The amount of time, in seconds, during which no response from a target means a failed health check.
        /// </summary>
        [Input("healthCheckTimeoutSeconds")]
        public Input<int>? HealthCheckTimeoutSeconds { get; set; }

        /// <summary>
        /// The number of consecutive health checks successes required before considering an unhealthy target healthy. 
        /// </summary>
        [Input("healthyThresholdCount")]
        public Input<int>? HealthyThresholdCount { get; set; }

        /// <summary>
        /// The type of IP address used for this target group. The possible values are ipv4 and ipv6. 
        /// </summary>
        [Input("ipAddressType")]
        public Input<string>? IpAddressType { get; set; }

        /// <summary>
        /// [HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.
        /// </summary>
        [Input("matcher")]
        public Input<Inputs.TargetGroupMatcherArgs>? Matcher { get; set; }

        /// <summary>
        /// The name of the target group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The protocol to use for routing traffic to the targets.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// [HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.
        /// </summary>
        [Input("protocolVersion")]
        public Input<string>? ProtocolVersion { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The tags.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        [Input("targetGroupAttributes")]
        private InputList<Inputs.TargetGroupAttributeArgs>? _targetGroupAttributes;

        /// <summary>
        /// The attributes.
        /// </summary>
        public InputList<Inputs.TargetGroupAttributeArgs> TargetGroupAttributes
        {
            get => _targetGroupAttributes ?? (_targetGroupAttributes = new InputList<Inputs.TargetGroupAttributeArgs>());
            set => _targetGroupAttributes = value;
        }

        /// <summary>
        /// The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
        /// </summary>
        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        [Input("targets")]
        private InputList<Inputs.TargetGroupTargetDescriptionArgs>? _targets;

        /// <summary>
        /// The targets.
        /// </summary>
        public InputList<Inputs.TargetGroupTargetDescriptionArgs> Targets
        {
            get => _targets ?? (_targets = new InputList<Inputs.TargetGroupTargetDescriptionArgs>());
            set => _targets = value;
        }

        /// <summary>
        /// The number of consecutive health check failures required before considering a target unhealthy.
        /// </summary>
        [Input("unhealthyThresholdCount")]
        public Input<int>? UnhealthyThresholdCount { get; set; }

        /// <summary>
        /// The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public TargetGroupArgs()
        {
        }
        public static new TargetGroupArgs Empty => new TargetGroupArgs();
    }
}
