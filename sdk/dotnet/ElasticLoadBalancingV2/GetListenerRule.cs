// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ElasticLoadBalancingV2
{
    public static class GetListenerRule
    {
        /// <summary>
        /// Specifies a listener rule. The listener must be associated with an Application Load Balancer. Each rule consists of a priority, one or more actions, and one or more conditions.
        ///  For more information, see [Quotas for your Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html) in the *User Guide for Application Load Balancers*.
        /// </summary>
        public static Task<GetListenerRuleResult> InvokeAsync(GetListenerRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetListenerRuleResult>("aws-native:elasticloadbalancingv2:getListenerRule", args ?? new GetListenerRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Specifies a listener rule. The listener must be associated with an Application Load Balancer. Each rule consists of a priority, one or more actions, and one or more conditions.
        ///  For more information, see [Quotas for your Application Load Balancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html) in the *User Guide for Application Load Balancers*.
        /// </summary>
        public static Output<GetListenerRuleResult> Invoke(GetListenerRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetListenerRuleResult>("aws-native:elasticloadbalancingv2:getListenerRule", args ?? new GetListenerRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetListenerRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the rule.
        /// </summary>
        [Input("ruleArn", required: true)]
        public string RuleArn { get; set; } = null!;

        public GetListenerRuleArgs()
        {
        }
        public static new GetListenerRuleArgs Empty => new GetListenerRuleArgs();
    }

    public sealed class GetListenerRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the rule.
        /// </summary>
        [Input("ruleArn", required: true)]
        public Input<string> RuleArn { get; set; } = null!;

        public GetListenerRuleInvokeArgs()
        {
        }
        public static new GetListenerRuleInvokeArgs Empty => new GetListenerRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetListenerRuleResult
    {
        /// <summary>
        /// The actions.
        ///  The rule must include exactly one of the following types of actions: ``forward``, ``fixed-response``, or ``redirect``, and it must be the last action to be performed. If the rule is for an HTTPS listener, it can also optionally include an authentication action.
        /// </summary>
        public readonly ImmutableArray<Outputs.ListenerRuleAction> Actions;
        /// <summary>
        /// The conditions.
        ///  The rule can optionally include up to one of each of the following conditions: ``http-request-method``, ``host-header``, ``path-pattern``, and ``source-ip``. A rule can also optionally include one or more of each of the following conditions: ``http-header`` and ``query-string``.
        /// </summary>
        public readonly ImmutableArray<Outputs.ListenerRuleRuleCondition> Conditions;
        /// <summary>
        /// Indicates whether this is the default rule.
        /// </summary>
        public readonly bool? IsDefault;
        /// <summary>
        /// The rule priority. A listener can't have multiple rules with the same priority.
        ///  If you try to reorder rules by updating their priorities, do not specify a new priority if an existing rule already uses this priority, as this can cause an error. If you need to reuse a priority with a different rule, you must remove it as a priority first, and then specify it in a subsequent update.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the rule.
        /// </summary>
        public readonly string? RuleArn;

        [OutputConstructor]
        private GetListenerRuleResult(
            ImmutableArray<Outputs.ListenerRuleAction> actions,

            ImmutableArray<Outputs.ListenerRuleRuleCondition> conditions,

            bool? isDefault,

            int? priority,

            string? ruleArn)
        {
            Actions = actions;
            Conditions = conditions;
            IsDefault = isDefault;
            Priority = priority;
            RuleArn = ruleArn;
        }
    }
}
