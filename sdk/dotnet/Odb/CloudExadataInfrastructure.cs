// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Odb
{
    /// <summary>
    /// The AWS::ODB::CloudExadataInfrastructure resource creates an Exadata Infrastructure
    /// </summary>
    [AwsNativeResourceType("aws-native:odb:CloudExadataInfrastructure")]
    public partial class CloudExadataInfrastructure : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of storage servers requested for the Exadata infrastructure.
        /// </summary>
        [Output("activatedStorageCount")]
        public Output<int> ActivatedStorageCount { get; private set; } = null!;

        /// <summary>
        /// The number of storage servers requested for the Exadata infrastructure.
        /// </summary>
        [Output("additionalStorageCount")]
        public Output<int> AdditionalStorageCount { get; private set; } = null!;

        /// <summary>
        /// The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string?> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The AZ ID of the AZ where the Exadata infrastructure is located.
        /// </summary>
        [Output("availabilityZoneId")]
        public Output<string?> AvailabilityZoneId { get; private set; } = null!;

        /// <summary>
        /// The amount of available storage, in gigabytes (GB), for the Exadata infrastructure.
        /// </summary>
        [Output("availableStorageSizeInGbs")]
        public Output<int> AvailableStorageSizeInGbs { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) for the Exadata infrastructure.
        /// </summary>
        [Output("cloudExadataInfrastructureArn")]
        public Output<string> CloudExadataInfrastructureArn { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the Exadata infrastructure.
        /// </summary>
        [Output("cloudExadataInfrastructureId")]
        public Output<string> CloudExadataInfrastructureId { get; private set; } = null!;

        /// <summary>
        /// The number of database servers for the Exadata infrastructure.
        /// </summary>
        [Output("computeCount")]
        public Output<int?> ComputeCount { get; private set; } = null!;

        /// <summary>
        /// The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.
        /// </summary>
        [Output("computeModel")]
        public Output<string> ComputeModel { get; private set; } = null!;

        /// <summary>
        /// The total number of CPU cores that are allocated to the Exadata infrastructure.
        /// </summary>
        [Output("cpuCount")]
        public Output<int> CpuCount { get; private set; } = null!;

        /// <summary>
        /// The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.
        /// </summary>
        [Output("customerContactsToSendToOci")]
        public Output<ImmutableArray<Outputs.CloudExadataInfrastructureCustomerContact>> CustomerContactsToSendToOci { get; private set; } = null!;

        /// <summary>
        /// The size of the Exadata infrastructure's data disk group, in terabytes (TB).
        /// </summary>
        [Output("dataStorageSizeInTbs")]
        public Output<double> DataStorageSizeInTbs { get; private set; } = null!;

        /// <summary>
        /// The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        /// </summary>
        [Output("databaseServerType")]
        public Output<string?> DatabaseServerType { get; private set; } = null!;

        /// <summary>
        /// The size of the Exadata infrastructure's local node storage, in gigabytes (GB).
        /// </summary>
        [Output("dbNodeStorageSizeInGbs")]
        public Output<int> DbNodeStorageSizeInGbs { get; private set; } = null!;

        /// <summary>
        /// The list of database server identifiers for the Exadata infrastructure.
        /// </summary>
        [Output("dbServerIds")]
        public Output<ImmutableArray<string>> DbServerIds { get; private set; } = null!;

        /// <summary>
        /// The software version of the database servers (dom0) in the Exadata infrastructure.
        /// </summary>
        [Output("dbServerVersion")]
        public Output<string> DbServerVersion { get; private set; } = null!;

        /// <summary>
        /// The user-friendly name for the Exadata infrastructure.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<Outputs.CloudExadataInfrastructureMaintenanceWindow?> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// The total number of CPU cores available on the Exadata infrastructure.
        /// </summary>
        [Output("maxCpuCount")]
        public Output<int> MaxCpuCount { get; private set; } = null!;

        /// <summary>
        /// The total amount of data disk group storage, in terabytes (TB), that's available on the Exadata infrastructure.
        /// </summary>
        [Output("maxDataStorageInTbs")]
        public Output<double> MaxDataStorageInTbs { get; private set; } = null!;

        /// <summary>
        /// The total amount of local node storage, in gigabytes (GB), that's available on the Exadata infrastructure.
        /// </summary>
        [Output("maxDbNodeStorageSizeInGbs")]
        public Output<int> MaxDbNodeStorageSizeInGbs { get; private set; } = null!;

        /// <summary>
        /// The total amount of memory, in gigabytes (GB), that's available on the Exadata infrastructure.
        /// </summary>
        [Output("maxMemoryInGbs")]
        public Output<int> MaxMemoryInGbs { get; private set; } = null!;

        /// <summary>
        /// The amount of memory, in gigabytes (GB), that's allocated on the Exadata infrastructure.
        /// </summary>
        [Output("memorySizeInGbs")]
        public Output<int> MemorySizeInGbs { get; private set; } = null!;

        /// <summary>
        /// The name of the OCI resource anchor for the Exadata infrastructure.
        /// </summary>
        [Output("ociResourceAnchorName")]
        public Output<string> OciResourceAnchorName { get; private set; } = null!;

        /// <summary>
        /// The HTTPS link to the Exadata infrastructure in OCI.
        /// </summary>
        [Output("ociUrl")]
        public Output<string> OciUrl { get; private set; } = null!;

        /// <summary>
        /// The OCID of the Exadata infrastructure.
        /// </summary>
        [Output("ocid")]
        public Output<string> Ocid { get; private set; } = null!;

        /// <summary>
        /// The model name of the Exadata infrastructure.
        /// </summary>
        [Output("shape")]
        public Output<string?> Shape { get; private set; } = null!;

        /// <summary>
        /// The number of storage servers that are activated for the Exadata infrastructure.
        /// </summary>
        [Output("storageCount")]
        public Output<int?> StorageCount { get; private set; } = null!;

        /// <summary>
        /// The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        /// </summary>
        [Output("storageServerType")]
        public Output<string?> StorageServerType { get; private set; } = null!;

        /// <summary>
        /// The software version of the storage servers on the Exadata infrastructure.
        /// </summary>
        [Output("storageServerVersion")]
        public Output<string> StorageServerVersion { get; private set; } = null!;

        /// <summary>
        /// Tags to assign to the Exadata Infrastructure.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The total amount of storage, in gigabytes (GB), on the the Exadata infrastructure.
        /// </summary>
        [Output("totalStorageSizeInGbs")]
        public Output<int> TotalStorageSizeInGbs { get; private set; } = null!;


        /// <summary>
        /// Create a CloudExadataInfrastructure resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudExadataInfrastructure(string name, CloudExadataInfrastructureArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:odb:CloudExadataInfrastructure", name, args ?? new CloudExadataInfrastructureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudExadataInfrastructure(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:odb:CloudExadataInfrastructure", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "availabilityZone",
                    "availabilityZoneId",
                    "computeCount",
                    "customerContactsToSendToOci[*]",
                    "databaseServerType",
                    "displayName",
                    "shape",
                    "storageCount",
                    "storageServerType",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudExadataInfrastructure resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudExadataInfrastructure Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CloudExadataInfrastructure(name, id, options);
        }
    }

    public sealed class CloudExadataInfrastructureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Availability Zone (AZ) where the Exadata infrastructure is located.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// The AZ ID of the AZ where the Exadata infrastructure is located.
        /// </summary>
        [Input("availabilityZoneId")]
        public Input<string>? AvailabilityZoneId { get; set; }

        /// <summary>
        /// The number of database servers for the Exadata infrastructure.
        /// </summary>
        [Input("computeCount")]
        public Input<int>? ComputeCount { get; set; }

        [Input("customerContactsToSendToOci")]
        private InputList<Inputs.CloudExadataInfrastructureCustomerContactArgs>? _customerContactsToSendToOci;

        /// <summary>
        /// The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.
        /// </summary>
        public InputList<Inputs.CloudExadataInfrastructureCustomerContactArgs> CustomerContactsToSendToOci
        {
            get => _customerContactsToSendToOci ?? (_customerContactsToSendToOci = new InputList<Inputs.CloudExadataInfrastructureCustomerContactArgs>());
            set => _customerContactsToSendToOci = value;
        }

        /// <summary>
        /// The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        /// </summary>
        [Input("databaseServerType")]
        public Input<string>? DatabaseServerType { get; set; }

        /// <summary>
        /// The user-friendly name for the Exadata infrastructure.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<Inputs.CloudExadataInfrastructureMaintenanceWindowArgs>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The model name of the Exadata infrastructure.
        /// </summary>
        [Input("shape")]
        public Input<string>? Shape { get; set; }

        /// <summary>
        /// The number of storage servers that are activated for the Exadata infrastructure.
        /// </summary>
        [Input("storageCount")]
        public Input<int>? StorageCount { get; set; }

        /// <summary>
        /// The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.
        /// </summary>
        [Input("storageServerType")]
        public Input<string>? StorageServerType { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// Tags to assign to the Exadata Infrastructure.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public CloudExadataInfrastructureArgs()
        {
        }
        public static new CloudExadataInfrastructureArgs Empty => new CloudExadataInfrastructureArgs();
    }
}
