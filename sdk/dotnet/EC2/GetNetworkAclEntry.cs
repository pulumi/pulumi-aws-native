// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2
{
    public static class GetNetworkAclEntry
    {
        /// <summary>
        /// Resource Type definition for AWS::EC2::NetworkAclEntry
        /// </summary>
        public static Task<GetNetworkAclEntryResult> InvokeAsync(GetNetworkAclEntryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkAclEntryResult>("aws-native:ec2:getNetworkAclEntry", args ?? new GetNetworkAclEntryArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::EC2::NetworkAclEntry
        /// </summary>
        public static Output<GetNetworkAclEntryResult> Invoke(GetNetworkAclEntryInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNetworkAclEntryResult>("aws-native:ec2:getNetworkAclEntry", args ?? new GetNetworkAclEntryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkAclEntryArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetNetworkAclEntryArgs()
        {
        }
    }

    public sealed class GetNetworkAclEntryInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetNetworkAclEntryInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNetworkAclEntryResult
    {
        /// <summary>
        /// The IPv4 CIDR range to allow or deny, in CIDR notation (for example, 172.16.0.0/24). Requirement is conditional: You must specify the CidrBlock or Ipv6CidrBlock property
        /// </summary>
        public readonly string? CidrBlock;
        /// <summary>
        /// The Internet Control Message Protocol (ICMP) code and type. Requirement is conditional: Required if specifying 1 (ICMP) for the protocol parameter
        /// </summary>
        public readonly Outputs.NetworkAclEntryIcmp? Icmp;
        public readonly string? Id;
        /// <summary>
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64)
        /// </summary>
        public readonly string? Ipv6CidrBlock;
        /// <summary>
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18
        /// </summary>
        public readonly Outputs.NetworkAclEntryPortRange? PortRange;
        /// <summary>
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code
        /// </summary>
        public readonly int? Protocol;
        /// <summary>
        /// Indicates whether to allow or deny the traffic that matches the rule
        /// </summary>
        public readonly string? RuleAction;

        [OutputConstructor]
        private GetNetworkAclEntryResult(
            string? cidrBlock,

            Outputs.NetworkAclEntryIcmp? icmp,

            string? id,

            string? ipv6CidrBlock,

            Outputs.NetworkAclEntryPortRange? portRange,

            int? protocol,

            string? ruleAction)
        {
            CidrBlock = cidrBlock;
            Icmp = icmp;
            Id = id;
            Ipv6CidrBlock = ipv6CidrBlock;
            PortRange = portRange;
            Protocol = protocol;
            RuleAction = ruleAction;
        }
    }
}
