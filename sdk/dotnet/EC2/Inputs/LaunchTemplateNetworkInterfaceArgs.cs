// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2.Inputs
{

    /// <summary>
    /// Specifies the parameters for a network interface.
    /// </summary>
    public sealed class LaunchTemplateNetworkInterfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether to associate a Carrier IP address with eth0 for a new network interface.
        /// </summary>
        [Input("associateCarrierIpAddress")]
        public Input<bool>? AssociateCarrierIpAddress { get; set; }

        /// <summary>
        /// Associates a public IPv4 address with eth0 for a new network interface.
        /// </summary>
        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        /// <summary>
        /// Indicates whether the network interface is deleted when the instance is terminated.
        /// </summary>
        [Input("deleteOnTermination")]
        public Input<bool>? DeleteOnTermination { get; set; }

        /// <summary>
        /// A description for the network interface.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The device index for the network interface attachment.
        /// </summary>
        [Input("deviceIndex")]
        public Input<int>? DeviceIndex { get; set; }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// The IDs of one or more security groups.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// The type of network interface.
        /// </summary>
        [Input("interfaceType")]
        public Input<string>? InterfaceType { get; set; }

        /// <summary>
        /// The number of IPv4 prefixes to be automatically assigned to the network interface.
        /// </summary>
        [Input("ipv4PrefixCount")]
        public Input<int>? Ipv4PrefixCount { get; set; }

        [Input("ipv4Prefixes")]
        private InputList<Inputs.LaunchTemplateIpv4PrefixSpecificationArgs>? _ipv4Prefixes;

        /// <summary>
        /// One or more IPv4 prefixes to be assigned to the network interface.
        /// </summary>
        public InputList<Inputs.LaunchTemplateIpv4PrefixSpecificationArgs> Ipv4Prefixes
        {
            get => _ipv4Prefixes ?? (_ipv4Prefixes = new InputList<Inputs.LaunchTemplateIpv4PrefixSpecificationArgs>());
            set => _ipv4Prefixes = value;
        }

        /// <summary>
        /// The number of IPv6 addresses to assign to a network interface.
        /// </summary>
        [Input("ipv6AddressCount")]
        public Input<int>? Ipv6AddressCount { get; set; }

        [Input("ipv6Addresses")]
        private InputList<Inputs.LaunchTemplateIpv6AddArgs>? _ipv6Addresses;

        /// <summary>
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet.
        /// </summary>
        public InputList<Inputs.LaunchTemplateIpv6AddArgs> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<Inputs.LaunchTemplateIpv6AddArgs>());
            set => _ipv6Addresses = value;
        }

        /// <summary>
        /// The number of IPv6 prefixes to be automatically assigned to the network interface.
        /// </summary>
        [Input("ipv6PrefixCount")]
        public Input<int>? Ipv6PrefixCount { get; set; }

        [Input("ipv6Prefixes")]
        private InputList<Inputs.LaunchTemplateIpv6PrefixSpecificationArgs>? _ipv6Prefixes;

        /// <summary>
        /// One or more IPv6 prefixes to be assigned to the network interface.
        /// </summary>
        public InputList<Inputs.LaunchTemplateIpv6PrefixSpecificationArgs> Ipv6Prefixes
        {
            get => _ipv6Prefixes ?? (_ipv6Prefixes = new InputList<Inputs.LaunchTemplateIpv6PrefixSpecificationArgs>());
            set => _ipv6Prefixes = value;
        }

        /// <summary>
        /// The index of the network card.
        /// </summary>
        [Input("networkCardIndex")]
        public Input<int>? NetworkCardIndex { get; set; }

        /// <summary>
        /// The ID of the network interface.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// The primary private IPv4 address of the network interface.
        /// </summary>
        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        [Input("privateIpAddresses")]
        private InputList<Inputs.LaunchTemplatePrivateIpAddArgs>? _privateIpAddresses;

        /// <summary>
        /// One or more private IPv4 addresses.
        /// </summary>
        public InputList<Inputs.LaunchTemplatePrivateIpAddArgs> PrivateIpAddresses
        {
            get => _privateIpAddresses ?? (_privateIpAddresses = new InputList<Inputs.LaunchTemplatePrivateIpAddArgs>());
            set => _privateIpAddresses = value;
        }

        /// <summary>
        /// The number of secondary private IPv4 addresses to assign to a network interface.
        /// </summary>
        [Input("secondaryPrivateIpAddressCount")]
        public Input<int>? SecondaryPrivateIpAddressCount { get; set; }

        /// <summary>
        /// The ID of the subnet for the network interface.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public LaunchTemplateNetworkInterfaceArgs()
        {
        }
        public static new LaunchTemplateNetworkInterfaceArgs Empty => new LaunchTemplateNetworkInterfaceArgs();
    }
}
