// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2
{
    public static class GetTrafficMirrorFilterRule
    {
        /// <summary>
        /// Resource Type definition for AWS::EC2::TrafficMirrorFilterRule
        /// </summary>
        public static Task<GetTrafficMirrorFilterRuleResult> InvokeAsync(GetTrafficMirrorFilterRuleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTrafficMirrorFilterRuleResult>("aws-native:ec2:getTrafficMirrorFilterRule", args ?? new GetTrafficMirrorFilterRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::EC2::TrafficMirrorFilterRule
        /// </summary>
        public static Output<GetTrafficMirrorFilterRuleResult> Invoke(GetTrafficMirrorFilterRuleInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTrafficMirrorFilterRuleResult>("aws-native:ec2:getTrafficMirrorFilterRule", args ?? new GetTrafficMirrorFilterRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTrafficMirrorFilterRuleArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTrafficMirrorFilterRuleArgs()
        {
        }
    }

    public sealed class GetTrafficMirrorFilterRuleInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTrafficMirrorFilterRuleInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTrafficMirrorFilterRuleResult
    {
        public readonly string? Description;
        public readonly string? DestinationCidrBlock;
        public readonly Outputs.TrafficMirrorFilterRuleTrafficMirrorPortRange? DestinationPortRange;
        public readonly string? Id;
        public readonly int? Protocol;
        public readonly string? RuleAction;
        public readonly int? RuleNumber;
        public readonly string? SourceCidrBlock;
        public readonly Outputs.TrafficMirrorFilterRuleTrafficMirrorPortRange? SourcePortRange;
        public readonly string? TrafficDirection;

        [OutputConstructor]
        private GetTrafficMirrorFilterRuleResult(
            string? description,

            string? destinationCidrBlock,

            Outputs.TrafficMirrorFilterRuleTrafficMirrorPortRange? destinationPortRange,

            string? id,

            int? protocol,

            string? ruleAction,

            int? ruleNumber,

            string? sourceCidrBlock,

            Outputs.TrafficMirrorFilterRuleTrafficMirrorPortRange? sourcePortRange,

            string? trafficDirection)
        {
            Description = description;
            DestinationCidrBlock = destinationCidrBlock;
            DestinationPortRange = destinationPortRange;
            Id = id;
            Protocol = protocol;
            RuleAction = ruleAction;
            RuleNumber = ruleNumber;
            SourceCidrBlock = sourceCidrBlock;
            SourcePortRange = sourcePortRange;
            TrafficDirection = trafficDirection;
        }
    }
}
