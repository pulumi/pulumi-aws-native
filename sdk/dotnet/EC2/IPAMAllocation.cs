// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2
{
    /// <summary>
    /// Resource Schema of AWS::EC2::IPAMAllocation Type
    /// </summary>
    [AwsNativeResourceType("aws-native:ec2:IPAMAllocation")]
    public partial class IPAMAllocation : Pulumi.CustomResource
    {
        [Output("cidr")]
        public Output<string?> Cidr { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Id of the allocation.
        /// </summary>
        [Output("ipamPoolAllocationId")]
        public Output<string> IpamPoolAllocationId { get; private set; } = null!;

        /// <summary>
        /// Id of the IPAM Pool.
        /// </summary>
        [Output("ipamPoolId")]
        public Output<string> IpamPoolId { get; private set; } = null!;

        /// <summary>
        /// The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
        /// </summary>
        [Output("netmaskLength")]
        public Output<int?> NetmaskLength { get; private set; } = null!;


        /// <summary>
        /// Create a IPAMAllocation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IPAMAllocation(string name, IPAMAllocationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ec2:IPAMAllocation", name, args ?? new IPAMAllocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IPAMAllocation(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:IPAMAllocation", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IPAMAllocation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IPAMAllocation Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new IPAMAllocation(name, id, options);
        }
    }

    public sealed class IPAMAllocationArgs : Pulumi.ResourceArgs
    {
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Id of the IPAM Pool.
        /// </summary>
        [Input("ipamPoolId", required: true)]
        public Input<string> IpamPoolId { get; set; } = null!;

        /// <summary>
        /// The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
        /// </summary>
        [Input("netmaskLength")]
        public Input<int>? NetmaskLength { get; set; }

        public IPAMAllocationArgs()
        {
        }
    }
}
