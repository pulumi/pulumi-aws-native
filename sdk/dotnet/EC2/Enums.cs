// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.EC2
{
    [EnumType]
    public readonly struct EC2FleetCapacityReservationOptionsRequestUsageStrategy : IEquatable<EC2FleetCapacityReservationOptionsRequestUsageStrategy>
    {
        private readonly string _value;

        private EC2FleetCapacityReservationOptionsRequestUsageStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetCapacityReservationOptionsRequestUsageStrategy UseCapacityReservationsFirst { get; } = new EC2FleetCapacityReservationOptionsRequestUsageStrategy("use-capacity-reservations-first");

        public static bool operator ==(EC2FleetCapacityReservationOptionsRequestUsageStrategy left, EC2FleetCapacityReservationOptionsRequestUsageStrategy right) => left.Equals(right);
        public static bool operator !=(EC2FleetCapacityReservationOptionsRequestUsageStrategy left, EC2FleetCapacityReservationOptionsRequestUsageStrategy right) => !left.Equals(right);

        public static explicit operator string(EC2FleetCapacityReservationOptionsRequestUsageStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetCapacityReservationOptionsRequestUsageStrategy other && Equals(other);
        public bool Equals(EC2FleetCapacityReservationOptionsRequestUsageStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetExcessCapacityTerminationPolicy : IEquatable<EC2FleetExcessCapacityTerminationPolicy>
    {
        private readonly string _value;

        private EC2FleetExcessCapacityTerminationPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetExcessCapacityTerminationPolicy Termination { get; } = new EC2FleetExcessCapacityTerminationPolicy("termination");
        public static EC2FleetExcessCapacityTerminationPolicy NoTermination { get; } = new EC2FleetExcessCapacityTerminationPolicy("no-termination");

        public static bool operator ==(EC2FleetExcessCapacityTerminationPolicy left, EC2FleetExcessCapacityTerminationPolicy right) => left.Equals(right);
        public static bool operator !=(EC2FleetExcessCapacityTerminationPolicy left, EC2FleetExcessCapacityTerminationPolicy right) => !left.Equals(right);

        public static explicit operator string(EC2FleetExcessCapacityTerminationPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetExcessCapacityTerminationPolicy other && Equals(other);
        public bool Equals(EC2FleetExcessCapacityTerminationPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetSpotOptionsRequestAllocationStrategy : IEquatable<EC2FleetSpotOptionsRequestAllocationStrategy>
    {
        private readonly string _value;

        private EC2FleetSpotOptionsRequestAllocationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetSpotOptionsRequestAllocationStrategy LowestPrice { get; } = new EC2FleetSpotOptionsRequestAllocationStrategy("lowestPrice");
        public static EC2FleetSpotOptionsRequestAllocationStrategy Diversified { get; } = new EC2FleetSpotOptionsRequestAllocationStrategy("diversified");
        public static EC2FleetSpotOptionsRequestAllocationStrategy CapacityOptimized { get; } = new EC2FleetSpotOptionsRequestAllocationStrategy("capacityOptimized");
        public static EC2FleetSpotOptionsRequestAllocationStrategy CapacityOptimizedPrioritized { get; } = new EC2FleetSpotOptionsRequestAllocationStrategy("capacityOptimizedPrioritized");

        public static bool operator ==(EC2FleetSpotOptionsRequestAllocationStrategy left, EC2FleetSpotOptionsRequestAllocationStrategy right) => left.Equals(right);
        public static bool operator !=(EC2FleetSpotOptionsRequestAllocationStrategy left, EC2FleetSpotOptionsRequestAllocationStrategy right) => !left.Equals(right);

        public static explicit operator string(EC2FleetSpotOptionsRequestAllocationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetSpotOptionsRequestAllocationStrategy other && Equals(other);
        public bool Equals(EC2FleetSpotOptionsRequestAllocationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetSpotOptionsRequestInstanceInterruptionBehavior : IEquatable<EC2FleetSpotOptionsRequestInstanceInterruptionBehavior>
    {
        private readonly string _value;

        private EC2FleetSpotOptionsRequestInstanceInterruptionBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetSpotOptionsRequestInstanceInterruptionBehavior Hibernate { get; } = new EC2FleetSpotOptionsRequestInstanceInterruptionBehavior("hibernate");
        public static EC2FleetSpotOptionsRequestInstanceInterruptionBehavior Stop { get; } = new EC2FleetSpotOptionsRequestInstanceInterruptionBehavior("stop");
        public static EC2FleetSpotOptionsRequestInstanceInterruptionBehavior Terminate { get; } = new EC2FleetSpotOptionsRequestInstanceInterruptionBehavior("terminate");

        public static bool operator ==(EC2FleetSpotOptionsRequestInstanceInterruptionBehavior left, EC2FleetSpotOptionsRequestInstanceInterruptionBehavior right) => left.Equals(right);
        public static bool operator !=(EC2FleetSpotOptionsRequestInstanceInterruptionBehavior left, EC2FleetSpotOptionsRequestInstanceInterruptionBehavior right) => !left.Equals(right);

        public static explicit operator string(EC2FleetSpotOptionsRequestInstanceInterruptionBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetSpotOptionsRequestInstanceInterruptionBehavior other && Equals(other);
        public bool Equals(EC2FleetSpotOptionsRequestInstanceInterruptionBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetTagSpecificationResourceType : IEquatable<EC2FleetTagSpecificationResourceType>
    {
        private readonly string _value;

        private EC2FleetTagSpecificationResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetTagSpecificationResourceType ClientVpnEndpoint { get; } = new EC2FleetTagSpecificationResourceType("client-vpn-endpoint");
        public static EC2FleetTagSpecificationResourceType CustomerGateway { get; } = new EC2FleetTagSpecificationResourceType("customer-gateway");
        public static EC2FleetTagSpecificationResourceType DedicatedHost { get; } = new EC2FleetTagSpecificationResourceType("dedicated-host");
        public static EC2FleetTagSpecificationResourceType DhcpOptions { get; } = new EC2FleetTagSpecificationResourceType("dhcp-options");
        public static EC2FleetTagSpecificationResourceType EgressOnlyInternetGateway { get; } = new EC2FleetTagSpecificationResourceType("egress-only-internet-gateway");
        public static EC2FleetTagSpecificationResourceType ElasticGpu { get; } = new EC2FleetTagSpecificationResourceType("elastic-gpu");
        public static EC2FleetTagSpecificationResourceType ElasticIp { get; } = new EC2FleetTagSpecificationResourceType("elastic-ip");
        public static EC2FleetTagSpecificationResourceType ExportImageTask { get; } = new EC2FleetTagSpecificationResourceType("export-image-task");
        public static EC2FleetTagSpecificationResourceType ExportInstanceTask { get; } = new EC2FleetTagSpecificationResourceType("export-instance-task");
        public static EC2FleetTagSpecificationResourceType Fleet { get; } = new EC2FleetTagSpecificationResourceType("fleet");
        public static EC2FleetTagSpecificationResourceType FpgaImage { get; } = new EC2FleetTagSpecificationResourceType("fpga-image");
        public static EC2FleetTagSpecificationResourceType HostReservation { get; } = new EC2FleetTagSpecificationResourceType("host-reservation");
        public static EC2FleetTagSpecificationResourceType Image { get; } = new EC2FleetTagSpecificationResourceType("image");
        public static EC2FleetTagSpecificationResourceType ImportImageTask { get; } = new EC2FleetTagSpecificationResourceType("import-image-task");
        public static EC2FleetTagSpecificationResourceType ImportSnapshotTask { get; } = new EC2FleetTagSpecificationResourceType("import-snapshot-task");
        public static EC2FleetTagSpecificationResourceType Instance { get; } = new EC2FleetTagSpecificationResourceType("instance");
        public static EC2FleetTagSpecificationResourceType InternetGateway { get; } = new EC2FleetTagSpecificationResourceType("internet-gateway");
        public static EC2FleetTagSpecificationResourceType KeyPair { get; } = new EC2FleetTagSpecificationResourceType("key-pair");
        public static EC2FleetTagSpecificationResourceType LaunchTemplate { get; } = new EC2FleetTagSpecificationResourceType("launch-template");
        public static EC2FleetTagSpecificationResourceType LocalGatewayRouteTableVpcAssociation { get; } = new EC2FleetTagSpecificationResourceType("local-gateway-route-table-vpc-association");
        public static EC2FleetTagSpecificationResourceType Natgateway { get; } = new EC2FleetTagSpecificationResourceType("natgateway");
        public static EC2FleetTagSpecificationResourceType NetworkAcl { get; } = new EC2FleetTagSpecificationResourceType("network-acl");
        public static EC2FleetTagSpecificationResourceType NetworkInsightsAnalysis { get; } = new EC2FleetTagSpecificationResourceType("network-insights-analysis");
        public static EC2FleetTagSpecificationResourceType NetworkInsightsPath { get; } = new EC2FleetTagSpecificationResourceType("network-insights-path");
        public static EC2FleetTagSpecificationResourceType NetworkInterface { get; } = new EC2FleetTagSpecificationResourceType("network-interface");
        public static EC2FleetTagSpecificationResourceType PlacementGroup { get; } = new EC2FleetTagSpecificationResourceType("placement-group");
        public static EC2FleetTagSpecificationResourceType ReservedInstances { get; } = new EC2FleetTagSpecificationResourceType("reserved-instances");
        public static EC2FleetTagSpecificationResourceType RouteTable { get; } = new EC2FleetTagSpecificationResourceType("route-table");
        public static EC2FleetTagSpecificationResourceType SecurityGroup { get; } = new EC2FleetTagSpecificationResourceType("security-group");
        public static EC2FleetTagSpecificationResourceType Snapshot { get; } = new EC2FleetTagSpecificationResourceType("snapshot");
        public static EC2FleetTagSpecificationResourceType SpotFleetRequest { get; } = new EC2FleetTagSpecificationResourceType("spot-fleet-request");
        public static EC2FleetTagSpecificationResourceType SpotInstancesRequest { get; } = new EC2FleetTagSpecificationResourceType("spot-instances-request");
        public static EC2FleetTagSpecificationResourceType Subnet { get; } = new EC2FleetTagSpecificationResourceType("subnet");
        public static EC2FleetTagSpecificationResourceType TrafficMirrorFilter { get; } = new EC2FleetTagSpecificationResourceType("traffic-mirror-filter");
        public static EC2FleetTagSpecificationResourceType TrafficMirrorSession { get; } = new EC2FleetTagSpecificationResourceType("traffic-mirror-session");
        public static EC2FleetTagSpecificationResourceType TrafficMirrorTarget { get; } = new EC2FleetTagSpecificationResourceType("traffic-mirror-target");
        public static EC2FleetTagSpecificationResourceType TransitGateway { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway");
        public static EC2FleetTagSpecificationResourceType TransitGatewayAttachment { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway-attachment");
        public static EC2FleetTagSpecificationResourceType TransitGatewayConnectPeer { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway-connect-peer");
        public static EC2FleetTagSpecificationResourceType TransitGatewayMulticastDomain { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway-multicast-domain");
        public static EC2FleetTagSpecificationResourceType TransitGatewayRouteTable { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway-route-table");
        public static EC2FleetTagSpecificationResourceType Volume { get; } = new EC2FleetTagSpecificationResourceType("volume");
        public static EC2FleetTagSpecificationResourceType Vpc { get; } = new EC2FleetTagSpecificationResourceType("vpc");
        public static EC2FleetTagSpecificationResourceType VpcFlowLog { get; } = new EC2FleetTagSpecificationResourceType("vpc-flow-log");
        public static EC2FleetTagSpecificationResourceType VpcPeeringConnection { get; } = new EC2FleetTagSpecificationResourceType("vpc-peering-connection");
        public static EC2FleetTagSpecificationResourceType VpnConnection { get; } = new EC2FleetTagSpecificationResourceType("vpn-connection");
        public static EC2FleetTagSpecificationResourceType VpnGateway { get; } = new EC2FleetTagSpecificationResourceType("vpn-gateway");

        public static bool operator ==(EC2FleetTagSpecificationResourceType left, EC2FleetTagSpecificationResourceType right) => left.Equals(right);
        public static bool operator !=(EC2FleetTagSpecificationResourceType left, EC2FleetTagSpecificationResourceType right) => !left.Equals(right);

        public static explicit operator string(EC2FleetTagSpecificationResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetTagSpecificationResourceType other && Equals(other);
        public bool Equals(EC2FleetTagSpecificationResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType : IEquatable<EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType>
    {
        private readonly string _value;

        private EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType OnDemand { get; } = new EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType("on-demand");
        public static EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType Spot { get; } = new EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType("spot");

        public static bool operator ==(EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType left, EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType right) => left.Equals(right);
        public static bool operator !=(EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType left, EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType right) => !left.Equals(right);

        public static explicit operator string(EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType other && Equals(other);
        public bool Equals(EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetType : IEquatable<EC2FleetType>
    {
        private readonly string _value;

        private EC2FleetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetType Maintain { get; } = new EC2FleetType("maintain");
        public static EC2FleetType Request { get; } = new EC2FleetType("request");
        public static EC2FleetType Instant { get; } = new EC2FleetType("instant");

        public static bool operator ==(EC2FleetType left, EC2FleetType right) => left.Equals(right);
        public static bool operator !=(EC2FleetType left, EC2FleetType right) => !left.Equals(right);

        public static explicit operator string(EC2FleetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetType other && Equals(other);
        public bool Equals(EC2FleetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogLogDestinationType : IEquatable<FlowLogLogDestinationType>
    {
        private readonly string _value;

        private FlowLogLogDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogLogDestinationType CloudWatchLogs { get; } = new FlowLogLogDestinationType("cloud-watch-logs");
        public static FlowLogLogDestinationType S3 { get; } = new FlowLogLogDestinationType("s3");

        public static bool operator ==(FlowLogLogDestinationType left, FlowLogLogDestinationType right) => left.Equals(right);
        public static bool operator !=(FlowLogLogDestinationType left, FlowLogLogDestinationType right) => !left.Equals(right);

        public static explicit operator string(FlowLogLogDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogLogDestinationType other && Equals(other);
        public bool Equals(FlowLogLogDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogResourceType : IEquatable<FlowLogResourceType>
    {
        private readonly string _value;

        private FlowLogResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogResourceType NetworkInterface { get; } = new FlowLogResourceType("NetworkInterface");
        public static FlowLogResourceType Subnet { get; } = new FlowLogResourceType("Subnet");
        public static FlowLogResourceType Vpc { get; } = new FlowLogResourceType("VPC");

        public static bool operator ==(FlowLogResourceType left, FlowLogResourceType right) => left.Equals(right);
        public static bool operator !=(FlowLogResourceType left, FlowLogResourceType right) => !left.Equals(right);

        public static explicit operator string(FlowLogResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogResourceType other && Equals(other);
        public bool Equals(FlowLogResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogTrafficType : IEquatable<FlowLogTrafficType>
    {
        private readonly string _value;

        private FlowLogTrafficType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogTrafficType Accept { get; } = new FlowLogTrafficType("ACCEPT");
        public static FlowLogTrafficType All { get; } = new FlowLogTrafficType("ALL");
        public static FlowLogTrafficType Reject { get; } = new FlowLogTrafficType("REJECT");

        public static bool operator ==(FlowLogTrafficType left, FlowLogTrafficType right) => left.Equals(right);
        public static bool operator !=(FlowLogTrafficType left, FlowLogTrafficType right) => !left.Equals(right);

        public static explicit operator string(FlowLogTrafficType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogTrafficType other && Equals(other);
        public bool Equals(FlowLogTrafficType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkInsightsAnalysisStatus : IEquatable<NetworkInsightsAnalysisStatus>
    {
        private readonly string _value;

        private NetworkInsightsAnalysisStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkInsightsAnalysisStatus Running { get; } = new NetworkInsightsAnalysisStatus("running");
        public static NetworkInsightsAnalysisStatus Failed { get; } = new NetworkInsightsAnalysisStatus("failed");
        public static NetworkInsightsAnalysisStatus Succeeded { get; } = new NetworkInsightsAnalysisStatus("succeeded");

        public static bool operator ==(NetworkInsightsAnalysisStatus left, NetworkInsightsAnalysisStatus right) => left.Equals(right);
        public static bool operator !=(NetworkInsightsAnalysisStatus left, NetworkInsightsAnalysisStatus right) => !left.Equals(right);

        public static explicit operator string(NetworkInsightsAnalysisStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInsightsAnalysisStatus other && Equals(other);
        public bool Equals(NetworkInsightsAnalysisStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkInsightsPathProtocol : IEquatable<NetworkInsightsPathProtocol>
    {
        private readonly string _value;

        private NetworkInsightsPathProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkInsightsPathProtocol Tcp { get; } = new NetworkInsightsPathProtocol("tcp");
        public static NetworkInsightsPathProtocol Udp { get; } = new NetworkInsightsPathProtocol("udp");

        public static bool operator ==(NetworkInsightsPathProtocol left, NetworkInsightsPathProtocol right) => left.Equals(right);
        public static bool operator !=(NetworkInsightsPathProtocol left, NetworkInsightsPathProtocol right) => !left.Equals(right);

        public static explicit operator string(NetworkInsightsPathProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInsightsPathProtocol other && Equals(other);
        public bool Equals(NetworkInsightsPathProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ip Version of Prefix List.
    /// </summary>
    [EnumType]
    public readonly struct PrefixListAddressFamily : IEquatable<PrefixListAddressFamily>
    {
        private readonly string _value;

        private PrefixListAddressFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrefixListAddressFamily IPv4 { get; } = new PrefixListAddressFamily("IPv4");
        public static PrefixListAddressFamily IPv6 { get; } = new PrefixListAddressFamily("IPv6");

        public static bool operator ==(PrefixListAddressFamily left, PrefixListAddressFamily right) => left.Equals(right);
        public static bool operator !=(PrefixListAddressFamily left, PrefixListAddressFamily right) => !left.Equals(right);

        public static explicit operator string(PrefixListAddressFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrefixListAddressFamily other && Equals(other);
        public bool Equals(PrefixListAddressFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetEbsBlockDeviceVolumeType : IEquatable<SpotFleetEbsBlockDeviceVolumeType>
    {
        private readonly string _value;

        private SpotFleetEbsBlockDeviceVolumeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetEbsBlockDeviceVolumeType Gp2 { get; } = new SpotFleetEbsBlockDeviceVolumeType("gp2");
        public static SpotFleetEbsBlockDeviceVolumeType Gp3 { get; } = new SpotFleetEbsBlockDeviceVolumeType("gp3");
        public static SpotFleetEbsBlockDeviceVolumeType Io1 { get; } = new SpotFleetEbsBlockDeviceVolumeType("io1");
        public static SpotFleetEbsBlockDeviceVolumeType Io2 { get; } = new SpotFleetEbsBlockDeviceVolumeType("io2");
        public static SpotFleetEbsBlockDeviceVolumeType Sc1 { get; } = new SpotFleetEbsBlockDeviceVolumeType("sc1");
        public static SpotFleetEbsBlockDeviceVolumeType St1 { get; } = new SpotFleetEbsBlockDeviceVolumeType("st1");
        public static SpotFleetEbsBlockDeviceVolumeType Standard { get; } = new SpotFleetEbsBlockDeviceVolumeType("standard");

        public static bool operator ==(SpotFleetEbsBlockDeviceVolumeType left, SpotFleetEbsBlockDeviceVolumeType right) => left.Equals(right);
        public static bool operator !=(SpotFleetEbsBlockDeviceVolumeType left, SpotFleetEbsBlockDeviceVolumeType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetEbsBlockDeviceVolumeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetEbsBlockDeviceVolumeType other && Equals(other);
        public bool Equals(SpotFleetEbsBlockDeviceVolumeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotCapacityRebalanceReplacementStrategy : IEquatable<SpotFleetSpotCapacityRebalanceReplacementStrategy>
    {
        private readonly string _value;

        private SpotFleetSpotCapacityRebalanceReplacementStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotCapacityRebalanceReplacementStrategy Launch { get; } = new SpotFleetSpotCapacityRebalanceReplacementStrategy("launch");

        public static bool operator ==(SpotFleetSpotCapacityRebalanceReplacementStrategy left, SpotFleetSpotCapacityRebalanceReplacementStrategy right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotCapacityRebalanceReplacementStrategy left, SpotFleetSpotCapacityRebalanceReplacementStrategy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotCapacityRebalanceReplacementStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotCapacityRebalanceReplacementStrategy other && Equals(other);
        public bool Equals(SpotFleetSpotCapacityRebalanceReplacementStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotFleetRequestConfigDataAllocationStrategy : IEquatable<SpotFleetSpotFleetRequestConfigDataAllocationStrategy>
    {
        private readonly string _value;

        private SpotFleetSpotFleetRequestConfigDataAllocationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotFleetRequestConfigDataAllocationStrategy CapacityOptimized { get; } = new SpotFleetSpotFleetRequestConfigDataAllocationStrategy("capacityOptimized");
        public static SpotFleetSpotFleetRequestConfigDataAllocationStrategy CapacityOptimizedPrioritized { get; } = new SpotFleetSpotFleetRequestConfigDataAllocationStrategy("capacityOptimizedPrioritized");
        public static SpotFleetSpotFleetRequestConfigDataAllocationStrategy Diversified { get; } = new SpotFleetSpotFleetRequestConfigDataAllocationStrategy("diversified");
        public static SpotFleetSpotFleetRequestConfigDataAllocationStrategy LowestPrice { get; } = new SpotFleetSpotFleetRequestConfigDataAllocationStrategy("lowestPrice");

        public static bool operator ==(SpotFleetSpotFleetRequestConfigDataAllocationStrategy left, SpotFleetSpotFleetRequestConfigDataAllocationStrategy right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotFleetRequestConfigDataAllocationStrategy left, SpotFleetSpotFleetRequestConfigDataAllocationStrategy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotFleetRequestConfigDataAllocationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotFleetRequestConfigDataAllocationStrategy other && Equals(other);
        public bool Equals(SpotFleetSpotFleetRequestConfigDataAllocationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy : IEquatable<SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy>
    {
        private readonly string _value;

        private SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy Default { get; } = new SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy("Default");
        public static SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy NoTermination { get; } = new SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy("NoTermination");

        public static bool operator ==(SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy left, SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy left, SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy other && Equals(other);
        public bool Equals(SpotFleetSpotFleetRequestConfigDataExcessCapacityTerminationPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior : IEquatable<SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior>
    {
        private readonly string _value;

        private SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior Hibernate { get; } = new SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior("hibernate");
        public static SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior Stop { get; } = new SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior("stop");
        public static SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior Terminate { get; } = new SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior("terminate");

        public static bool operator ==(SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior left, SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior left, SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior other && Equals(other);
        public bool Equals(SpotFleetSpotFleetRequestConfigDataInstanceInterruptionBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotFleetRequestConfigDataType : IEquatable<SpotFleetSpotFleetRequestConfigDataType>
    {
        private readonly string _value;

        private SpotFleetSpotFleetRequestConfigDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotFleetRequestConfigDataType Maintain { get; } = new SpotFleetSpotFleetRequestConfigDataType("maintain");
        public static SpotFleetSpotFleetRequestConfigDataType Request { get; } = new SpotFleetSpotFleetRequestConfigDataType("request");

        public static bool operator ==(SpotFleetSpotFleetRequestConfigDataType left, SpotFleetSpotFleetRequestConfigDataType right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotFleetRequestConfigDataType left, SpotFleetSpotFleetRequestConfigDataType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotFleetRequestConfigDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotFleetRequestConfigDataType other && Equals(other);
        public bool Equals(SpotFleetSpotFleetRequestConfigDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotFleetTagSpecificationResourceType : IEquatable<SpotFleetSpotFleetTagSpecificationResourceType>
    {
        private readonly string _value;

        private SpotFleetSpotFleetTagSpecificationResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotFleetTagSpecificationResourceType ClientVpnEndpoint { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("client-vpn-endpoint");
        public static SpotFleetSpotFleetTagSpecificationResourceType CustomerGateway { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("customer-gateway");
        public static SpotFleetSpotFleetTagSpecificationResourceType DedicatedHost { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("dedicated-host");
        public static SpotFleetSpotFleetTagSpecificationResourceType DhcpOptions { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("dhcp-options");
        public static SpotFleetSpotFleetTagSpecificationResourceType EgressOnlyInternetGateway { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("egress-only-internet-gateway");
        public static SpotFleetSpotFleetTagSpecificationResourceType ElasticGpu { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("elastic-gpu");
        public static SpotFleetSpotFleetTagSpecificationResourceType ElasticIp { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("elastic-ip");
        public static SpotFleetSpotFleetTagSpecificationResourceType ExportImageTask { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("export-image-task");
        public static SpotFleetSpotFleetTagSpecificationResourceType ExportInstanceTask { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("export-instance-task");
        public static SpotFleetSpotFleetTagSpecificationResourceType Fleet { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("fleet");
        public static SpotFleetSpotFleetTagSpecificationResourceType FpgaImage { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("fpga-image");
        public static SpotFleetSpotFleetTagSpecificationResourceType HostReservation { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("host-reservation");
        public static SpotFleetSpotFleetTagSpecificationResourceType Image { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("image");
        public static SpotFleetSpotFleetTagSpecificationResourceType ImportImageTask { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("import-image-task");
        public static SpotFleetSpotFleetTagSpecificationResourceType ImportSnapshotTask { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("import-snapshot-task");
        public static SpotFleetSpotFleetTagSpecificationResourceType Instance { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("instance");
        public static SpotFleetSpotFleetTagSpecificationResourceType InternetGateway { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("internet-gateway");
        public static SpotFleetSpotFleetTagSpecificationResourceType KeyPair { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("key-pair");
        public static SpotFleetSpotFleetTagSpecificationResourceType LaunchTemplate { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("launch-template");
        public static SpotFleetSpotFleetTagSpecificationResourceType LocalGatewayRouteTableVpcAssociation { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("local-gateway-route-table-vpc-association");
        public static SpotFleetSpotFleetTagSpecificationResourceType Natgateway { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("natgateway");
        public static SpotFleetSpotFleetTagSpecificationResourceType NetworkAcl { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("network-acl");
        public static SpotFleetSpotFleetTagSpecificationResourceType NetworkInsightsAnalysis { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("network-insights-analysis");
        public static SpotFleetSpotFleetTagSpecificationResourceType NetworkInsightsPath { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("network-insights-path");
        public static SpotFleetSpotFleetTagSpecificationResourceType NetworkInterface { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("network-interface");
        public static SpotFleetSpotFleetTagSpecificationResourceType PlacementGroup { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("placement-group");
        public static SpotFleetSpotFleetTagSpecificationResourceType ReservedInstances { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("reserved-instances");
        public static SpotFleetSpotFleetTagSpecificationResourceType RouteTable { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("route-table");
        public static SpotFleetSpotFleetTagSpecificationResourceType SecurityGroup { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("security-group");
        public static SpotFleetSpotFleetTagSpecificationResourceType Snapshot { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("snapshot");
        public static SpotFleetSpotFleetTagSpecificationResourceType SpotFleetRequest { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("spot-fleet-request");
        public static SpotFleetSpotFleetTagSpecificationResourceType SpotInstancesRequest { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("spot-instances-request");
        public static SpotFleetSpotFleetTagSpecificationResourceType Subnet { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("subnet");
        public static SpotFleetSpotFleetTagSpecificationResourceType TrafficMirrorFilter { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("traffic-mirror-filter");
        public static SpotFleetSpotFleetTagSpecificationResourceType TrafficMirrorSession { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("traffic-mirror-session");
        public static SpotFleetSpotFleetTagSpecificationResourceType TrafficMirrorTarget { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("traffic-mirror-target");
        public static SpotFleetSpotFleetTagSpecificationResourceType TransitGateway { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("transit-gateway");
        public static SpotFleetSpotFleetTagSpecificationResourceType TransitGatewayAttachment { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("transit-gateway-attachment");
        public static SpotFleetSpotFleetTagSpecificationResourceType TransitGatewayConnectPeer { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("transit-gateway-connect-peer");
        public static SpotFleetSpotFleetTagSpecificationResourceType TransitGatewayMulticastDomain { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("transit-gateway-multicast-domain");
        public static SpotFleetSpotFleetTagSpecificationResourceType TransitGatewayRouteTable { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("transit-gateway-route-table");
        public static SpotFleetSpotFleetTagSpecificationResourceType Volume { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("volume");
        public static SpotFleetSpotFleetTagSpecificationResourceType Vpc { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("vpc");
        public static SpotFleetSpotFleetTagSpecificationResourceType VpcFlowLog { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("vpc-flow-log");
        public static SpotFleetSpotFleetTagSpecificationResourceType VpcPeeringConnection { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("vpc-peering-connection");
        public static SpotFleetSpotFleetTagSpecificationResourceType VpnConnection { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("vpn-connection");
        public static SpotFleetSpotFleetTagSpecificationResourceType VpnGateway { get; } = new SpotFleetSpotFleetTagSpecificationResourceType("vpn-gateway");

        public static bool operator ==(SpotFleetSpotFleetTagSpecificationResourceType left, SpotFleetSpotFleetTagSpecificationResourceType right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotFleetTagSpecificationResourceType left, SpotFleetSpotFleetTagSpecificationResourceType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotFleetTagSpecificationResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotFleetTagSpecificationResourceType other && Equals(other);
        public bool Equals(SpotFleetSpotFleetTagSpecificationResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotPlacementTenancy : IEquatable<SpotFleetSpotPlacementTenancy>
    {
        private readonly string _value;

        private SpotFleetSpotPlacementTenancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotPlacementTenancy Dedicated { get; } = new SpotFleetSpotPlacementTenancy("dedicated");
        public static SpotFleetSpotPlacementTenancy Default { get; } = new SpotFleetSpotPlacementTenancy("default");
        public static SpotFleetSpotPlacementTenancy Host { get; } = new SpotFleetSpotPlacementTenancy("host");

        public static bool operator ==(SpotFleetSpotPlacementTenancy left, SpotFleetSpotPlacementTenancy right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotPlacementTenancy left, SpotFleetSpotPlacementTenancy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotPlacementTenancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotPlacementTenancy other && Equals(other);
        public bool Equals(SpotFleetSpotPlacementTenancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
