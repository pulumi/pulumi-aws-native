// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.EC2
{
    [EnumType]
    public readonly struct CapacityReservationFleetInstanceMatchCriteria : IEquatable<CapacityReservationFleetInstanceMatchCriteria>
    {
        private readonly string _value;

        private CapacityReservationFleetInstanceMatchCriteria(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CapacityReservationFleetInstanceMatchCriteria Open { get; } = new CapacityReservationFleetInstanceMatchCriteria("open");

        public static bool operator ==(CapacityReservationFleetInstanceMatchCriteria left, CapacityReservationFleetInstanceMatchCriteria right) => left.Equals(right);
        public static bool operator !=(CapacityReservationFleetInstanceMatchCriteria left, CapacityReservationFleetInstanceMatchCriteria right) => !left.Equals(right);

        public static explicit operator string(CapacityReservationFleetInstanceMatchCriteria value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CapacityReservationFleetInstanceMatchCriteria other && Equals(other);
        public bool Equals(CapacityReservationFleetInstanceMatchCriteria other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CapacityReservationFleetTenancy : IEquatable<CapacityReservationFleetTenancy>
    {
        private readonly string _value;

        private CapacityReservationFleetTenancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CapacityReservationFleetTenancy Default { get; } = new CapacityReservationFleetTenancy("default");

        public static bool operator ==(CapacityReservationFleetTenancy left, CapacityReservationFleetTenancy right) => left.Equals(right);
        public static bool operator !=(CapacityReservationFleetTenancy left, CapacityReservationFleetTenancy right) => !left.Equals(right);

        public static explicit operator string(CapacityReservationFleetTenancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CapacityReservationFleetTenancy other && Equals(other);
        public bool Equals(CapacityReservationFleetTenancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetCapacityRebalanceReplacementStrategy : IEquatable<EC2FleetCapacityRebalanceReplacementStrategy>
    {
        private readonly string _value;

        private EC2FleetCapacityRebalanceReplacementStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetCapacityRebalanceReplacementStrategy Launch { get; } = new EC2FleetCapacityRebalanceReplacementStrategy("launch");
        public static EC2FleetCapacityRebalanceReplacementStrategy LaunchBeforeTerminate { get; } = new EC2FleetCapacityRebalanceReplacementStrategy("launch-before-terminate");

        public static bool operator ==(EC2FleetCapacityRebalanceReplacementStrategy left, EC2FleetCapacityRebalanceReplacementStrategy right) => left.Equals(right);
        public static bool operator !=(EC2FleetCapacityRebalanceReplacementStrategy left, EC2FleetCapacityRebalanceReplacementStrategy right) => !left.Equals(right);

        public static explicit operator string(EC2FleetCapacityRebalanceReplacementStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetCapacityRebalanceReplacementStrategy other && Equals(other);
        public bool Equals(EC2FleetCapacityRebalanceReplacementStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetCapacityReservationOptionsRequestUsageStrategy : IEquatable<EC2FleetCapacityReservationOptionsRequestUsageStrategy>
    {
        private readonly string _value;

        private EC2FleetCapacityReservationOptionsRequestUsageStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetCapacityReservationOptionsRequestUsageStrategy UseCapacityReservationsFirst { get; } = new EC2FleetCapacityReservationOptionsRequestUsageStrategy("use-capacity-reservations-first");

        public static bool operator ==(EC2FleetCapacityReservationOptionsRequestUsageStrategy left, EC2FleetCapacityReservationOptionsRequestUsageStrategy right) => left.Equals(right);
        public static bool operator !=(EC2FleetCapacityReservationOptionsRequestUsageStrategy left, EC2FleetCapacityReservationOptionsRequestUsageStrategy right) => !left.Equals(right);

        public static explicit operator string(EC2FleetCapacityReservationOptionsRequestUsageStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetCapacityReservationOptionsRequestUsageStrategy other && Equals(other);
        public bool Equals(EC2FleetCapacityReservationOptionsRequestUsageStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetExcessCapacityTerminationPolicy : IEquatable<EC2FleetExcessCapacityTerminationPolicy>
    {
        private readonly string _value;

        private EC2FleetExcessCapacityTerminationPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetExcessCapacityTerminationPolicy Termination { get; } = new EC2FleetExcessCapacityTerminationPolicy("termination");
        public static EC2FleetExcessCapacityTerminationPolicy NoTermination { get; } = new EC2FleetExcessCapacityTerminationPolicy("no-termination");

        public static bool operator ==(EC2FleetExcessCapacityTerminationPolicy left, EC2FleetExcessCapacityTerminationPolicy right) => left.Equals(right);
        public static bool operator !=(EC2FleetExcessCapacityTerminationPolicy left, EC2FleetExcessCapacityTerminationPolicy right) => !left.Equals(right);

        public static explicit operator string(EC2FleetExcessCapacityTerminationPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetExcessCapacityTerminationPolicy other && Equals(other);
        public bool Equals(EC2FleetExcessCapacityTerminationPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem : IEquatable<EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem>
    {
        private readonly string _value;

        private EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem Nvidia { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem("nvidia");
        public static EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem Amd { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem("amd");
        public static EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem AmazonWebServices { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem("amazon-web-services");
        public static EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem Xilinx { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem("xilinx");

        public static bool operator ==(EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem left, EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem right) => left.Equals(right);
        public static bool operator !=(EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem left, EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem right) => !left.Equals(right);

        public static explicit operator string(EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem other && Equals(other);
        public bool Equals(EC2FleetInstanceRequirementsRequestAcceleratorManufacturersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetInstanceRequirementsRequestAcceleratorNamesItem : IEquatable<EC2FleetInstanceRequirementsRequestAcceleratorNamesItem>
    {
        private readonly string _value;

        private EC2FleetInstanceRequirementsRequestAcceleratorNamesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetInstanceRequirementsRequestAcceleratorNamesItem A100 { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorNamesItem("a100");
        public static EC2FleetInstanceRequirementsRequestAcceleratorNamesItem V100 { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorNamesItem("v100");
        public static EC2FleetInstanceRequirementsRequestAcceleratorNamesItem K80 { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorNamesItem("k80");
        public static EC2FleetInstanceRequirementsRequestAcceleratorNamesItem T4 { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorNamesItem("t4");
        public static EC2FleetInstanceRequirementsRequestAcceleratorNamesItem M60 { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorNamesItem("m60");
        public static EC2FleetInstanceRequirementsRequestAcceleratorNamesItem RadeonProV520 { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorNamesItem("radeon-pro-v520");
        public static EC2FleetInstanceRequirementsRequestAcceleratorNamesItem Vu9p { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorNamesItem("vu9p");
        public static EC2FleetInstanceRequirementsRequestAcceleratorNamesItem Inferentia { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorNamesItem("inferentia");
        public static EC2FleetInstanceRequirementsRequestAcceleratorNamesItem K520 { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorNamesItem("k520");

        public static bool operator ==(EC2FleetInstanceRequirementsRequestAcceleratorNamesItem left, EC2FleetInstanceRequirementsRequestAcceleratorNamesItem right) => left.Equals(right);
        public static bool operator !=(EC2FleetInstanceRequirementsRequestAcceleratorNamesItem left, EC2FleetInstanceRequirementsRequestAcceleratorNamesItem right) => !left.Equals(right);

        public static explicit operator string(EC2FleetInstanceRequirementsRequestAcceleratorNamesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetInstanceRequirementsRequestAcceleratorNamesItem other && Equals(other);
        public bool Equals(EC2FleetInstanceRequirementsRequestAcceleratorNamesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetInstanceRequirementsRequestAcceleratorTypesItem : IEquatable<EC2FleetInstanceRequirementsRequestAcceleratorTypesItem>
    {
        private readonly string _value;

        private EC2FleetInstanceRequirementsRequestAcceleratorTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetInstanceRequirementsRequestAcceleratorTypesItem Gpu { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorTypesItem("gpu");
        public static EC2FleetInstanceRequirementsRequestAcceleratorTypesItem Fpga { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorTypesItem("fpga");
        public static EC2FleetInstanceRequirementsRequestAcceleratorTypesItem Inference { get; } = new EC2FleetInstanceRequirementsRequestAcceleratorTypesItem("inference");

        public static bool operator ==(EC2FleetInstanceRequirementsRequestAcceleratorTypesItem left, EC2FleetInstanceRequirementsRequestAcceleratorTypesItem right) => left.Equals(right);
        public static bool operator !=(EC2FleetInstanceRequirementsRequestAcceleratorTypesItem left, EC2FleetInstanceRequirementsRequestAcceleratorTypesItem right) => !left.Equals(right);

        public static explicit operator string(EC2FleetInstanceRequirementsRequestAcceleratorTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetInstanceRequirementsRequestAcceleratorTypesItem other && Equals(other);
        public bool Equals(EC2FleetInstanceRequirementsRequestAcceleratorTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetInstanceRequirementsRequestBareMetal : IEquatable<EC2FleetInstanceRequirementsRequestBareMetal>
    {
        private readonly string _value;

        private EC2FleetInstanceRequirementsRequestBareMetal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetInstanceRequirementsRequestBareMetal Included { get; } = new EC2FleetInstanceRequirementsRequestBareMetal("included");
        public static EC2FleetInstanceRequirementsRequestBareMetal Required { get; } = new EC2FleetInstanceRequirementsRequestBareMetal("required");
        public static EC2FleetInstanceRequirementsRequestBareMetal Excluded { get; } = new EC2FleetInstanceRequirementsRequestBareMetal("excluded");

        public static bool operator ==(EC2FleetInstanceRequirementsRequestBareMetal left, EC2FleetInstanceRequirementsRequestBareMetal right) => left.Equals(right);
        public static bool operator !=(EC2FleetInstanceRequirementsRequestBareMetal left, EC2FleetInstanceRequirementsRequestBareMetal right) => !left.Equals(right);

        public static explicit operator string(EC2FleetInstanceRequirementsRequestBareMetal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetInstanceRequirementsRequestBareMetal other && Equals(other);
        public bool Equals(EC2FleetInstanceRequirementsRequestBareMetal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetInstanceRequirementsRequestBurstablePerformance : IEquatable<EC2FleetInstanceRequirementsRequestBurstablePerformance>
    {
        private readonly string _value;

        private EC2FleetInstanceRequirementsRequestBurstablePerformance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetInstanceRequirementsRequestBurstablePerformance Included { get; } = new EC2FleetInstanceRequirementsRequestBurstablePerformance("included");
        public static EC2FleetInstanceRequirementsRequestBurstablePerformance Required { get; } = new EC2FleetInstanceRequirementsRequestBurstablePerformance("required");
        public static EC2FleetInstanceRequirementsRequestBurstablePerformance Excluded { get; } = new EC2FleetInstanceRequirementsRequestBurstablePerformance("excluded");

        public static bool operator ==(EC2FleetInstanceRequirementsRequestBurstablePerformance left, EC2FleetInstanceRequirementsRequestBurstablePerformance right) => left.Equals(right);
        public static bool operator !=(EC2FleetInstanceRequirementsRequestBurstablePerformance left, EC2FleetInstanceRequirementsRequestBurstablePerformance right) => !left.Equals(right);

        public static explicit operator string(EC2FleetInstanceRequirementsRequestBurstablePerformance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetInstanceRequirementsRequestBurstablePerformance other && Equals(other);
        public bool Equals(EC2FleetInstanceRequirementsRequestBurstablePerformance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetInstanceRequirementsRequestCpuManufacturersItem : IEquatable<EC2FleetInstanceRequirementsRequestCpuManufacturersItem>
    {
        private readonly string _value;

        private EC2FleetInstanceRequirementsRequestCpuManufacturersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetInstanceRequirementsRequestCpuManufacturersItem Intel { get; } = new EC2FleetInstanceRequirementsRequestCpuManufacturersItem("intel");
        public static EC2FleetInstanceRequirementsRequestCpuManufacturersItem Amd { get; } = new EC2FleetInstanceRequirementsRequestCpuManufacturersItem("amd");
        public static EC2FleetInstanceRequirementsRequestCpuManufacturersItem AmazonWebServices { get; } = new EC2FleetInstanceRequirementsRequestCpuManufacturersItem("amazon-web-services");

        public static bool operator ==(EC2FleetInstanceRequirementsRequestCpuManufacturersItem left, EC2FleetInstanceRequirementsRequestCpuManufacturersItem right) => left.Equals(right);
        public static bool operator !=(EC2FleetInstanceRequirementsRequestCpuManufacturersItem left, EC2FleetInstanceRequirementsRequestCpuManufacturersItem right) => !left.Equals(right);

        public static explicit operator string(EC2FleetInstanceRequirementsRequestCpuManufacturersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetInstanceRequirementsRequestCpuManufacturersItem other && Equals(other);
        public bool Equals(EC2FleetInstanceRequirementsRequestCpuManufacturersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetInstanceRequirementsRequestInstanceGenerationsItem : IEquatable<EC2FleetInstanceRequirementsRequestInstanceGenerationsItem>
    {
        private readonly string _value;

        private EC2FleetInstanceRequirementsRequestInstanceGenerationsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetInstanceRequirementsRequestInstanceGenerationsItem Current { get; } = new EC2FleetInstanceRequirementsRequestInstanceGenerationsItem("current");
        public static EC2FleetInstanceRequirementsRequestInstanceGenerationsItem Previous { get; } = new EC2FleetInstanceRequirementsRequestInstanceGenerationsItem("previous");

        public static bool operator ==(EC2FleetInstanceRequirementsRequestInstanceGenerationsItem left, EC2FleetInstanceRequirementsRequestInstanceGenerationsItem right) => left.Equals(right);
        public static bool operator !=(EC2FleetInstanceRequirementsRequestInstanceGenerationsItem left, EC2FleetInstanceRequirementsRequestInstanceGenerationsItem right) => !left.Equals(right);

        public static explicit operator string(EC2FleetInstanceRequirementsRequestInstanceGenerationsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetInstanceRequirementsRequestInstanceGenerationsItem other && Equals(other);
        public bool Equals(EC2FleetInstanceRequirementsRequestInstanceGenerationsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetInstanceRequirementsRequestLocalStorage : IEquatable<EC2FleetInstanceRequirementsRequestLocalStorage>
    {
        private readonly string _value;

        private EC2FleetInstanceRequirementsRequestLocalStorage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetInstanceRequirementsRequestLocalStorage Included { get; } = new EC2FleetInstanceRequirementsRequestLocalStorage("included");
        public static EC2FleetInstanceRequirementsRequestLocalStorage Required { get; } = new EC2FleetInstanceRequirementsRequestLocalStorage("required");
        public static EC2FleetInstanceRequirementsRequestLocalStorage Excluded { get; } = new EC2FleetInstanceRequirementsRequestLocalStorage("excluded");

        public static bool operator ==(EC2FleetInstanceRequirementsRequestLocalStorage left, EC2FleetInstanceRequirementsRequestLocalStorage right) => left.Equals(right);
        public static bool operator !=(EC2FleetInstanceRequirementsRequestLocalStorage left, EC2FleetInstanceRequirementsRequestLocalStorage right) => !left.Equals(right);

        public static explicit operator string(EC2FleetInstanceRequirementsRequestLocalStorage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetInstanceRequirementsRequestLocalStorage other && Equals(other);
        public bool Equals(EC2FleetInstanceRequirementsRequestLocalStorage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetInstanceRequirementsRequestLocalStorageTypesItem : IEquatable<EC2FleetInstanceRequirementsRequestLocalStorageTypesItem>
    {
        private readonly string _value;

        private EC2FleetInstanceRequirementsRequestLocalStorageTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetInstanceRequirementsRequestLocalStorageTypesItem Hdd { get; } = new EC2FleetInstanceRequirementsRequestLocalStorageTypesItem("hdd");
        public static EC2FleetInstanceRequirementsRequestLocalStorageTypesItem Ssd { get; } = new EC2FleetInstanceRequirementsRequestLocalStorageTypesItem("ssd");

        public static bool operator ==(EC2FleetInstanceRequirementsRequestLocalStorageTypesItem left, EC2FleetInstanceRequirementsRequestLocalStorageTypesItem right) => left.Equals(right);
        public static bool operator !=(EC2FleetInstanceRequirementsRequestLocalStorageTypesItem left, EC2FleetInstanceRequirementsRequestLocalStorageTypesItem right) => !left.Equals(right);

        public static explicit operator string(EC2FleetInstanceRequirementsRequestLocalStorageTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetInstanceRequirementsRequestLocalStorageTypesItem other && Equals(other);
        public bool Equals(EC2FleetInstanceRequirementsRequestLocalStorageTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetSpotOptionsRequestAllocationStrategy : IEquatable<EC2FleetSpotOptionsRequestAllocationStrategy>
    {
        private readonly string _value;

        private EC2FleetSpotOptionsRequestAllocationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetSpotOptionsRequestAllocationStrategy LowestPrice { get; } = new EC2FleetSpotOptionsRequestAllocationStrategy("lowestPrice");
        public static EC2FleetSpotOptionsRequestAllocationStrategy Diversified { get; } = new EC2FleetSpotOptionsRequestAllocationStrategy("diversified");
        public static EC2FleetSpotOptionsRequestAllocationStrategy CapacityOptimized { get; } = new EC2FleetSpotOptionsRequestAllocationStrategy("capacityOptimized");
        public static EC2FleetSpotOptionsRequestAllocationStrategy CapacityOptimizedPrioritized { get; } = new EC2FleetSpotOptionsRequestAllocationStrategy("capacityOptimizedPrioritized");

        public static bool operator ==(EC2FleetSpotOptionsRequestAllocationStrategy left, EC2FleetSpotOptionsRequestAllocationStrategy right) => left.Equals(right);
        public static bool operator !=(EC2FleetSpotOptionsRequestAllocationStrategy left, EC2FleetSpotOptionsRequestAllocationStrategy right) => !left.Equals(right);

        public static explicit operator string(EC2FleetSpotOptionsRequestAllocationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetSpotOptionsRequestAllocationStrategy other && Equals(other);
        public bool Equals(EC2FleetSpotOptionsRequestAllocationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetSpotOptionsRequestInstanceInterruptionBehavior : IEquatable<EC2FleetSpotOptionsRequestInstanceInterruptionBehavior>
    {
        private readonly string _value;

        private EC2FleetSpotOptionsRequestInstanceInterruptionBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetSpotOptionsRequestInstanceInterruptionBehavior Hibernate { get; } = new EC2FleetSpotOptionsRequestInstanceInterruptionBehavior("hibernate");
        public static EC2FleetSpotOptionsRequestInstanceInterruptionBehavior Stop { get; } = new EC2FleetSpotOptionsRequestInstanceInterruptionBehavior("stop");
        public static EC2FleetSpotOptionsRequestInstanceInterruptionBehavior Terminate { get; } = new EC2FleetSpotOptionsRequestInstanceInterruptionBehavior("terminate");

        public static bool operator ==(EC2FleetSpotOptionsRequestInstanceInterruptionBehavior left, EC2FleetSpotOptionsRequestInstanceInterruptionBehavior right) => left.Equals(right);
        public static bool operator !=(EC2FleetSpotOptionsRequestInstanceInterruptionBehavior left, EC2FleetSpotOptionsRequestInstanceInterruptionBehavior right) => !left.Equals(right);

        public static explicit operator string(EC2FleetSpotOptionsRequestInstanceInterruptionBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetSpotOptionsRequestInstanceInterruptionBehavior other && Equals(other);
        public bool Equals(EC2FleetSpotOptionsRequestInstanceInterruptionBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetTagSpecificationResourceType : IEquatable<EC2FleetTagSpecificationResourceType>
    {
        private readonly string _value;

        private EC2FleetTagSpecificationResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetTagSpecificationResourceType ClientVpnEndpoint { get; } = new EC2FleetTagSpecificationResourceType("client-vpn-endpoint");
        public static EC2FleetTagSpecificationResourceType CustomerGateway { get; } = new EC2FleetTagSpecificationResourceType("customer-gateway");
        public static EC2FleetTagSpecificationResourceType DedicatedHost { get; } = new EC2FleetTagSpecificationResourceType("dedicated-host");
        public static EC2FleetTagSpecificationResourceType DhcpOptions { get; } = new EC2FleetTagSpecificationResourceType("dhcp-options");
        public static EC2FleetTagSpecificationResourceType EgressOnlyInternetGateway { get; } = new EC2FleetTagSpecificationResourceType("egress-only-internet-gateway");
        public static EC2FleetTagSpecificationResourceType ElasticGpu { get; } = new EC2FleetTagSpecificationResourceType("elastic-gpu");
        public static EC2FleetTagSpecificationResourceType ElasticIp { get; } = new EC2FleetTagSpecificationResourceType("elastic-ip");
        public static EC2FleetTagSpecificationResourceType ExportImageTask { get; } = new EC2FleetTagSpecificationResourceType("export-image-task");
        public static EC2FleetTagSpecificationResourceType ExportInstanceTask { get; } = new EC2FleetTagSpecificationResourceType("export-instance-task");
        public static EC2FleetTagSpecificationResourceType Fleet { get; } = new EC2FleetTagSpecificationResourceType("fleet");
        public static EC2FleetTagSpecificationResourceType FpgaImage { get; } = new EC2FleetTagSpecificationResourceType("fpga-image");
        public static EC2FleetTagSpecificationResourceType HostReservation { get; } = new EC2FleetTagSpecificationResourceType("host-reservation");
        public static EC2FleetTagSpecificationResourceType Image { get; } = new EC2FleetTagSpecificationResourceType("image");
        public static EC2FleetTagSpecificationResourceType ImportImageTask { get; } = new EC2FleetTagSpecificationResourceType("import-image-task");
        public static EC2FleetTagSpecificationResourceType ImportSnapshotTask { get; } = new EC2FleetTagSpecificationResourceType("import-snapshot-task");
        public static EC2FleetTagSpecificationResourceType Instance { get; } = new EC2FleetTagSpecificationResourceType("instance");
        public static EC2FleetTagSpecificationResourceType InternetGateway { get; } = new EC2FleetTagSpecificationResourceType("internet-gateway");
        public static EC2FleetTagSpecificationResourceType KeyPair { get; } = new EC2FleetTagSpecificationResourceType("key-pair");
        public static EC2FleetTagSpecificationResourceType LaunchTemplate { get; } = new EC2FleetTagSpecificationResourceType("launch-template");
        public static EC2FleetTagSpecificationResourceType LocalGatewayRouteTableVpcAssociation { get; } = new EC2FleetTagSpecificationResourceType("local-gateway-route-table-vpc-association");
        public static EC2FleetTagSpecificationResourceType Natgateway { get; } = new EC2FleetTagSpecificationResourceType("natgateway");
        public static EC2FleetTagSpecificationResourceType NetworkAcl { get; } = new EC2FleetTagSpecificationResourceType("network-acl");
        public static EC2FleetTagSpecificationResourceType NetworkInsightsAnalysis { get; } = new EC2FleetTagSpecificationResourceType("network-insights-analysis");
        public static EC2FleetTagSpecificationResourceType NetworkInsightsPath { get; } = new EC2FleetTagSpecificationResourceType("network-insights-path");
        public static EC2FleetTagSpecificationResourceType NetworkInterface { get; } = new EC2FleetTagSpecificationResourceType("network-interface");
        public static EC2FleetTagSpecificationResourceType PlacementGroup { get; } = new EC2FleetTagSpecificationResourceType("placement-group");
        public static EC2FleetTagSpecificationResourceType ReservedInstances { get; } = new EC2FleetTagSpecificationResourceType("reserved-instances");
        public static EC2FleetTagSpecificationResourceType RouteTable { get; } = new EC2FleetTagSpecificationResourceType("route-table");
        public static EC2FleetTagSpecificationResourceType SecurityGroup { get; } = new EC2FleetTagSpecificationResourceType("security-group");
        public static EC2FleetTagSpecificationResourceType Snapshot { get; } = new EC2FleetTagSpecificationResourceType("snapshot");
        public static EC2FleetTagSpecificationResourceType SpotFleetRequest { get; } = new EC2FleetTagSpecificationResourceType("spot-fleet-request");
        public static EC2FleetTagSpecificationResourceType SpotInstancesRequest { get; } = new EC2FleetTagSpecificationResourceType("spot-instances-request");
        public static EC2FleetTagSpecificationResourceType Subnet { get; } = new EC2FleetTagSpecificationResourceType("subnet");
        public static EC2FleetTagSpecificationResourceType TrafficMirrorFilter { get; } = new EC2FleetTagSpecificationResourceType("traffic-mirror-filter");
        public static EC2FleetTagSpecificationResourceType TrafficMirrorSession { get; } = new EC2FleetTagSpecificationResourceType("traffic-mirror-session");
        public static EC2FleetTagSpecificationResourceType TrafficMirrorTarget { get; } = new EC2FleetTagSpecificationResourceType("traffic-mirror-target");
        public static EC2FleetTagSpecificationResourceType TransitGateway { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway");
        public static EC2FleetTagSpecificationResourceType TransitGatewayAttachment { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway-attachment");
        public static EC2FleetTagSpecificationResourceType TransitGatewayConnectPeer { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway-connect-peer");
        public static EC2FleetTagSpecificationResourceType TransitGatewayMulticastDomain { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway-multicast-domain");
        public static EC2FleetTagSpecificationResourceType TransitGatewayRouteTable { get; } = new EC2FleetTagSpecificationResourceType("transit-gateway-route-table");
        public static EC2FleetTagSpecificationResourceType Volume { get; } = new EC2FleetTagSpecificationResourceType("volume");
        public static EC2FleetTagSpecificationResourceType Vpc { get; } = new EC2FleetTagSpecificationResourceType("vpc");
        public static EC2FleetTagSpecificationResourceType VpcFlowLog { get; } = new EC2FleetTagSpecificationResourceType("vpc-flow-log");
        public static EC2FleetTagSpecificationResourceType VpcPeeringConnection { get; } = new EC2FleetTagSpecificationResourceType("vpc-peering-connection");
        public static EC2FleetTagSpecificationResourceType VpnConnection { get; } = new EC2FleetTagSpecificationResourceType("vpn-connection");
        public static EC2FleetTagSpecificationResourceType VpnGateway { get; } = new EC2FleetTagSpecificationResourceType("vpn-gateway");

        public static bool operator ==(EC2FleetTagSpecificationResourceType left, EC2FleetTagSpecificationResourceType right) => left.Equals(right);
        public static bool operator !=(EC2FleetTagSpecificationResourceType left, EC2FleetTagSpecificationResourceType right) => !left.Equals(right);

        public static explicit operator string(EC2FleetTagSpecificationResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetTagSpecificationResourceType other && Equals(other);
        public bool Equals(EC2FleetTagSpecificationResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType : IEquatable<EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType>
    {
        private readonly string _value;

        private EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType OnDemand { get; } = new EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType("on-demand");
        public static EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType Spot { get; } = new EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType("spot");

        public static bool operator ==(EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType left, EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType right) => left.Equals(right);
        public static bool operator !=(EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType left, EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType right) => !left.Equals(right);

        public static explicit operator string(EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType other && Equals(other);
        public bool Equals(EC2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType : IEquatable<EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType>
    {
        private readonly string _value;

        private EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType Vcpu { get; } = new EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType("vcpu");
        public static EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType MemoryMib { get; } = new EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType("memory-mib");
        public static EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType Units { get; } = new EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType("units");

        public static bool operator ==(EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType left, EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType right) => left.Equals(right);
        public static bool operator !=(EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType left, EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType right) => !left.Equals(right);

        public static explicit operator string(EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType other && Equals(other);
        public bool Equals(EC2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EC2FleetType : IEquatable<EC2FleetType>
    {
        private readonly string _value;

        private EC2FleetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EC2FleetType Maintain { get; } = new EC2FleetType("maintain");
        public static EC2FleetType Request { get; } = new EC2FleetType("request");
        public static EC2FleetType Instant { get; } = new EC2FleetType("instant");

        public static bool operator ==(EC2FleetType left, EC2FleetType right) => left.Equals(right);
        public static bool operator !=(EC2FleetType left, EC2FleetType right) => !left.Equals(right);

        public static explicit operator string(EC2FleetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EC2FleetType other && Equals(other);
        public bool Equals(EC2FleetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowLogDestinationOptionsPropertiesFileFormat : IEquatable<FlowLogDestinationOptionsPropertiesFileFormat>
    {
        private readonly string _value;

        private FlowLogDestinationOptionsPropertiesFileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogDestinationOptionsPropertiesFileFormat PlainText { get; } = new FlowLogDestinationOptionsPropertiesFileFormat("plain-text");
        public static FlowLogDestinationOptionsPropertiesFileFormat Parquet { get; } = new FlowLogDestinationOptionsPropertiesFileFormat("parquet");

        public static bool operator ==(FlowLogDestinationOptionsPropertiesFileFormat left, FlowLogDestinationOptionsPropertiesFileFormat right) => left.Equals(right);
        public static bool operator !=(FlowLogDestinationOptionsPropertiesFileFormat left, FlowLogDestinationOptionsPropertiesFileFormat right) => !left.Equals(right);

        public static explicit operator string(FlowLogDestinationOptionsPropertiesFileFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogDestinationOptionsPropertiesFileFormat other && Equals(other);
        public bool Equals(FlowLogDestinationOptionsPropertiesFileFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogLogDestinationType : IEquatable<FlowLogLogDestinationType>
    {
        private readonly string _value;

        private FlowLogLogDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogLogDestinationType CloudWatchLogs { get; } = new FlowLogLogDestinationType("cloud-watch-logs");
        public static FlowLogLogDestinationType S3 { get; } = new FlowLogLogDestinationType("s3");

        public static bool operator ==(FlowLogLogDestinationType left, FlowLogLogDestinationType right) => left.Equals(right);
        public static bool operator !=(FlowLogLogDestinationType left, FlowLogLogDestinationType right) => !left.Equals(right);

        public static explicit operator string(FlowLogLogDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogLogDestinationType other && Equals(other);
        public bool Equals(FlowLogLogDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogResourceType : IEquatable<FlowLogResourceType>
    {
        private readonly string _value;

        private FlowLogResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogResourceType NetworkInterface { get; } = new FlowLogResourceType("NetworkInterface");
        public static FlowLogResourceType Subnet { get; } = new FlowLogResourceType("Subnet");
        public static FlowLogResourceType Vpc { get; } = new FlowLogResourceType("VPC");

        public static bool operator ==(FlowLogResourceType left, FlowLogResourceType right) => left.Equals(right);
        public static bool operator !=(FlowLogResourceType left, FlowLogResourceType right) => !left.Equals(right);

        public static explicit operator string(FlowLogResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogResourceType other && Equals(other);
        public bool Equals(FlowLogResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogTrafficType : IEquatable<FlowLogTrafficType>
    {
        private readonly string _value;

        private FlowLogTrafficType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogTrafficType Accept { get; } = new FlowLogTrafficType("ACCEPT");
        public static FlowLogTrafficType All { get; } = new FlowLogTrafficType("ALL");
        public static FlowLogTrafficType Reject { get; } = new FlowLogTrafficType("REJECT");

        public static bool operator ==(FlowLogTrafficType left, FlowLogTrafficType right) => left.Equals(right);
        public static bool operator !=(FlowLogTrafficType left, FlowLogTrafficType right) => !left.Equals(right);

        public static explicit operator string(FlowLogTrafficType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogTrafficType other && Equals(other);
        public bool Equals(FlowLogTrafficType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines whether this scope contains publicly routable space or space for a private network
    /// </summary>
    [EnumType]
    public readonly struct IPAMPoolIpamScopeType : IEquatable<IPAMPoolIpamScopeType>
    {
        private readonly string _value;

        private IPAMPoolIpamScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPAMPoolIpamScopeType Public { get; } = new IPAMPoolIpamScopeType("public");
        public static IPAMPoolIpamScopeType Private { get; } = new IPAMPoolIpamScopeType("private");

        public static bool operator ==(IPAMPoolIpamScopeType left, IPAMPoolIpamScopeType right) => left.Equals(right);
        public static bool operator !=(IPAMPoolIpamScopeType left, IPAMPoolIpamScopeType right) => !left.Equals(right);

        public static explicit operator string(IPAMPoolIpamScopeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPAMPoolIpamScopeType other && Equals(other);
        public bool Equals(IPAMPoolIpamScopeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of this pool. This can be one of the following values: "create-in-progress", "create-complete", "modify-in-progress", "modify-complete", "delete-in-progress", or "delete-complete"
    /// </summary>
    [EnumType]
    public readonly struct IPAMPoolState : IEquatable<IPAMPoolState>
    {
        private readonly string _value;

        private IPAMPoolState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPAMPoolState CreateInProgress { get; } = new IPAMPoolState("create-in-progress");
        public static IPAMPoolState CreateComplete { get; } = new IPAMPoolState("create-complete");
        public static IPAMPoolState ModifyInProgress { get; } = new IPAMPoolState("modify-in-progress");
        public static IPAMPoolState ModifyComplete { get; } = new IPAMPoolState("modify-complete");
        public static IPAMPoolState DeleteInProgress { get; } = new IPAMPoolState("delete-in-progress");
        public static IPAMPoolState DeleteComplete { get; } = new IPAMPoolState("delete-complete");

        public static bool operator ==(IPAMPoolState left, IPAMPoolState right) => left.Equals(right);
        public static bool operator !=(IPAMPoolState left, IPAMPoolState right) => !left.Equals(right);

        public static explicit operator string(IPAMPoolState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPAMPoolState other && Equals(other);
        public bool Equals(IPAMPoolState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines whether this scope contains publicly routable space or space for a private network
    /// </summary>
    [EnumType]
    public readonly struct IPAMScopeIpamScopeType : IEquatable<IPAMScopeIpamScopeType>
    {
        private readonly string _value;

        private IPAMScopeIpamScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IPAMScopeIpamScopeType Public { get; } = new IPAMScopeIpamScopeType("public");
        public static IPAMScopeIpamScopeType Private { get; } = new IPAMScopeIpamScopeType("private");

        public static bool operator ==(IPAMScopeIpamScopeType left, IPAMScopeIpamScopeType right) => left.Equals(right);
        public static bool operator !=(IPAMScopeIpamScopeType left, IPAMScopeIpamScopeType right) => !left.Equals(right);

        public static explicit operator string(IPAMScopeIpamScopeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IPAMScopeIpamScopeType other && Equals(other);
        public bool Equals(IPAMScopeIpamScopeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkInsightsAnalysisStatus : IEquatable<NetworkInsightsAnalysisStatus>
    {
        private readonly string _value;

        private NetworkInsightsAnalysisStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkInsightsAnalysisStatus Running { get; } = new NetworkInsightsAnalysisStatus("running");
        public static NetworkInsightsAnalysisStatus Failed { get; } = new NetworkInsightsAnalysisStatus("failed");
        public static NetworkInsightsAnalysisStatus Succeeded { get; } = new NetworkInsightsAnalysisStatus("succeeded");

        public static bool operator ==(NetworkInsightsAnalysisStatus left, NetworkInsightsAnalysisStatus right) => left.Equals(right);
        public static bool operator !=(NetworkInsightsAnalysisStatus left, NetworkInsightsAnalysisStatus right) => !left.Equals(right);

        public static explicit operator string(NetworkInsightsAnalysisStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInsightsAnalysisStatus other && Equals(other);
        public bool Equals(NetworkInsightsAnalysisStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkInsightsPathProtocol : IEquatable<NetworkInsightsPathProtocol>
    {
        private readonly string _value;

        private NetworkInsightsPathProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkInsightsPathProtocol Tcp { get; } = new NetworkInsightsPathProtocol("tcp");
        public static NetworkInsightsPathProtocol Udp { get; } = new NetworkInsightsPathProtocol("udp");

        public static bool operator ==(NetworkInsightsPathProtocol left, NetworkInsightsPathProtocol right) => left.Equals(right);
        public static bool operator !=(NetworkInsightsPathProtocol left, NetworkInsightsPathProtocol right) => !left.Equals(right);

        public static explicit operator string(NetworkInsightsPathProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInsightsPathProtocol other && Equals(other);
        public bool Equals(NetworkInsightsPathProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ip Version of Prefix List.
    /// </summary>
    [EnumType]
    public readonly struct PrefixListAddressFamily : IEquatable<PrefixListAddressFamily>
    {
        private readonly string _value;

        private PrefixListAddressFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrefixListAddressFamily IPv4 { get; } = new PrefixListAddressFamily("IPv4");
        public static PrefixListAddressFamily IPv6 { get; } = new PrefixListAddressFamily("IPv6");

        public static bool operator ==(PrefixListAddressFamily left, PrefixListAddressFamily right) => left.Equals(right);
        public static bool operator !=(PrefixListAddressFamily left, PrefixListAddressFamily right) => !left.Equals(right);

        public static explicit operator string(PrefixListAddressFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrefixListAddressFamily other && Equals(other);
        public bool Equals(PrefixListAddressFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetEbsBlockDeviceVolumeType : IEquatable<SpotFleetEbsBlockDeviceVolumeType>
    {
        private readonly string _value;

        private SpotFleetEbsBlockDeviceVolumeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetEbsBlockDeviceVolumeType Gp2 { get; } = new SpotFleetEbsBlockDeviceVolumeType("gp2");
        public static SpotFleetEbsBlockDeviceVolumeType Gp3 { get; } = new SpotFleetEbsBlockDeviceVolumeType("gp3");
        public static SpotFleetEbsBlockDeviceVolumeType Io1 { get; } = new SpotFleetEbsBlockDeviceVolumeType("io1");
        public static SpotFleetEbsBlockDeviceVolumeType Io2 { get; } = new SpotFleetEbsBlockDeviceVolumeType("io2");
        public static SpotFleetEbsBlockDeviceVolumeType Sc1 { get; } = new SpotFleetEbsBlockDeviceVolumeType("sc1");
        public static SpotFleetEbsBlockDeviceVolumeType St1 { get; } = new SpotFleetEbsBlockDeviceVolumeType("st1");
        public static SpotFleetEbsBlockDeviceVolumeType Standard { get; } = new SpotFleetEbsBlockDeviceVolumeType("standard");

        public static bool operator ==(SpotFleetEbsBlockDeviceVolumeType left, SpotFleetEbsBlockDeviceVolumeType right) => left.Equals(right);
        public static bool operator !=(SpotFleetEbsBlockDeviceVolumeType left, SpotFleetEbsBlockDeviceVolumeType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetEbsBlockDeviceVolumeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetEbsBlockDeviceVolumeType other && Equals(other);
        public bool Equals(SpotFleetEbsBlockDeviceVolumeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem : IEquatable<SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem Nvidia { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem("nvidia");
        public static SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem Amd { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem("amd");
        public static SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem AmazonWebServices { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem("amazon-web-services");
        public static SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem Xilinx { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem("xilinx");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem left, SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem left, SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestAcceleratorNamesItem : IEquatable<SpotFleetInstanceRequirementsRequestAcceleratorNamesItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestAcceleratorNamesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem A100 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("a100");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem V100 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("v100");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem K80 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("k80");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem T4 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("t4");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem M60 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("m60");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem RadeonProV520 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("radeon-pro-v520");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem Vu9p { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("vu9p");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem Inferentia { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("inferentia");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem K520 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("k520");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestAcceleratorNamesItem left, SpotFleetInstanceRequirementsRequestAcceleratorNamesItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestAcceleratorNamesItem left, SpotFleetInstanceRequirementsRequestAcceleratorNamesItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestAcceleratorNamesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestAcceleratorNamesItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestAcceleratorNamesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestAcceleratorTypesItem : IEquatable<SpotFleetInstanceRequirementsRequestAcceleratorTypesItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestAcceleratorTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestAcceleratorTypesItem Gpu { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorTypesItem("gpu");
        public static SpotFleetInstanceRequirementsRequestAcceleratorTypesItem Fpga { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorTypesItem("fpga");
        public static SpotFleetInstanceRequirementsRequestAcceleratorTypesItem Inference { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorTypesItem("inference");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestAcceleratorTypesItem left, SpotFleetInstanceRequirementsRequestAcceleratorTypesItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestAcceleratorTypesItem left, SpotFleetInstanceRequirementsRequestAcceleratorTypesItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestAcceleratorTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestAcceleratorTypesItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestAcceleratorTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestBareMetal : IEquatable<SpotFleetInstanceRequirementsRequestBareMetal>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestBareMetal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestBareMetal Included { get; } = new SpotFleetInstanceRequirementsRequestBareMetal("included");
        public static SpotFleetInstanceRequirementsRequestBareMetal Required { get; } = new SpotFleetInstanceRequirementsRequestBareMetal("required");
        public static SpotFleetInstanceRequirementsRequestBareMetal Excluded { get; } = new SpotFleetInstanceRequirementsRequestBareMetal("excluded");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestBareMetal left, SpotFleetInstanceRequirementsRequestBareMetal right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestBareMetal left, SpotFleetInstanceRequirementsRequestBareMetal right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestBareMetal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestBareMetal other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestBareMetal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestBurstablePerformance : IEquatable<SpotFleetInstanceRequirementsRequestBurstablePerformance>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestBurstablePerformance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestBurstablePerformance Included { get; } = new SpotFleetInstanceRequirementsRequestBurstablePerformance("included");
        public static SpotFleetInstanceRequirementsRequestBurstablePerformance Required { get; } = new SpotFleetInstanceRequirementsRequestBurstablePerformance("required");
        public static SpotFleetInstanceRequirementsRequestBurstablePerformance Excluded { get; } = new SpotFleetInstanceRequirementsRequestBurstablePerformance("excluded");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestBurstablePerformance left, SpotFleetInstanceRequirementsRequestBurstablePerformance right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestBurstablePerformance left, SpotFleetInstanceRequirementsRequestBurstablePerformance right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestBurstablePerformance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestBurstablePerformance other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestBurstablePerformance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestCpuManufacturersItem : IEquatable<SpotFleetInstanceRequirementsRequestCpuManufacturersItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestCpuManufacturersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestCpuManufacturersItem Intel { get; } = new SpotFleetInstanceRequirementsRequestCpuManufacturersItem("intel");
        public static SpotFleetInstanceRequirementsRequestCpuManufacturersItem Amd { get; } = new SpotFleetInstanceRequirementsRequestCpuManufacturersItem("amd");
        public static SpotFleetInstanceRequirementsRequestCpuManufacturersItem AmazonWebServices { get; } = new SpotFleetInstanceRequirementsRequestCpuManufacturersItem("amazon-web-services");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestCpuManufacturersItem left, SpotFleetInstanceRequirementsRequestCpuManufacturersItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestCpuManufacturersItem left, SpotFleetInstanceRequirementsRequestCpuManufacturersItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestCpuManufacturersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestCpuManufacturersItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestCpuManufacturersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestInstanceGenerationsItem : IEquatable<SpotFleetInstanceRequirementsRequestInstanceGenerationsItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestInstanceGenerationsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestInstanceGenerationsItem Current { get; } = new SpotFleetInstanceRequirementsRequestInstanceGenerationsItem("current");
        public static SpotFleetInstanceRequirementsRequestInstanceGenerationsItem Previous { get; } = new SpotFleetInstanceRequirementsRequestInstanceGenerationsItem("previous");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestInstanceGenerationsItem left, SpotFleetInstanceRequirementsRequestInstanceGenerationsItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestInstanceGenerationsItem left, SpotFleetInstanceRequirementsRequestInstanceGenerationsItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestInstanceGenerationsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestInstanceGenerationsItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestInstanceGenerationsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestLocalStorage : IEquatable<SpotFleetInstanceRequirementsRequestLocalStorage>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestLocalStorage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestLocalStorage Included { get; } = new SpotFleetInstanceRequirementsRequestLocalStorage("included");
        public static SpotFleetInstanceRequirementsRequestLocalStorage Required { get; } = new SpotFleetInstanceRequirementsRequestLocalStorage("required");
        public static SpotFleetInstanceRequirementsRequestLocalStorage Excluded { get; } = new SpotFleetInstanceRequirementsRequestLocalStorage("excluded");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestLocalStorage left, SpotFleetInstanceRequirementsRequestLocalStorage right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestLocalStorage left, SpotFleetInstanceRequirementsRequestLocalStorage right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestLocalStorage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestLocalStorage other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestLocalStorage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestLocalStorageTypesItem : IEquatable<SpotFleetInstanceRequirementsRequestLocalStorageTypesItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestLocalStorageTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestLocalStorageTypesItem Hdd { get; } = new SpotFleetInstanceRequirementsRequestLocalStorageTypesItem("hdd");
        public static SpotFleetInstanceRequirementsRequestLocalStorageTypesItem Ssd { get; } = new SpotFleetInstanceRequirementsRequestLocalStorageTypesItem("ssd");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestLocalStorageTypesItem left, SpotFleetInstanceRequirementsRequestLocalStorageTypesItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestLocalStorageTypesItem left, SpotFleetInstanceRequirementsRequestLocalStorageTypesItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestLocalStorageTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestLocalStorageTypesItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestLocalStorageTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataAllocationStrategy : IEquatable<SpotFleetRequestConfigDataAllocationStrategy>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataAllocationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataAllocationStrategy CapacityOptimized { get; } = new SpotFleetRequestConfigDataAllocationStrategy("capacityOptimized");
        public static SpotFleetRequestConfigDataAllocationStrategy CapacityOptimizedPrioritized { get; } = new SpotFleetRequestConfigDataAllocationStrategy("capacityOptimizedPrioritized");
        public static SpotFleetRequestConfigDataAllocationStrategy Diversified { get; } = new SpotFleetRequestConfigDataAllocationStrategy("diversified");
        public static SpotFleetRequestConfigDataAllocationStrategy LowestPrice { get; } = new SpotFleetRequestConfigDataAllocationStrategy("lowestPrice");

        public static bool operator ==(SpotFleetRequestConfigDataAllocationStrategy left, SpotFleetRequestConfigDataAllocationStrategy right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataAllocationStrategy left, SpotFleetRequestConfigDataAllocationStrategy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataAllocationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataAllocationStrategy other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataAllocationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataExcessCapacityTerminationPolicy : IEquatable<SpotFleetRequestConfigDataExcessCapacityTerminationPolicy>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataExcessCapacityTerminationPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataExcessCapacityTerminationPolicy Default { get; } = new SpotFleetRequestConfigDataExcessCapacityTerminationPolicy("Default");
        public static SpotFleetRequestConfigDataExcessCapacityTerminationPolicy NoTermination { get; } = new SpotFleetRequestConfigDataExcessCapacityTerminationPolicy("NoTermination");

        public static bool operator ==(SpotFleetRequestConfigDataExcessCapacityTerminationPolicy left, SpotFleetRequestConfigDataExcessCapacityTerminationPolicy right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataExcessCapacityTerminationPolicy left, SpotFleetRequestConfigDataExcessCapacityTerminationPolicy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataExcessCapacityTerminationPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataExcessCapacityTerminationPolicy other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataExcessCapacityTerminationPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataInstanceInterruptionBehavior : IEquatable<SpotFleetRequestConfigDataInstanceInterruptionBehavior>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataInstanceInterruptionBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataInstanceInterruptionBehavior Hibernate { get; } = new SpotFleetRequestConfigDataInstanceInterruptionBehavior("hibernate");
        public static SpotFleetRequestConfigDataInstanceInterruptionBehavior Stop { get; } = new SpotFleetRequestConfigDataInstanceInterruptionBehavior("stop");
        public static SpotFleetRequestConfigDataInstanceInterruptionBehavior Terminate { get; } = new SpotFleetRequestConfigDataInstanceInterruptionBehavior("terminate");

        public static bool operator ==(SpotFleetRequestConfigDataInstanceInterruptionBehavior left, SpotFleetRequestConfigDataInstanceInterruptionBehavior right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataInstanceInterruptionBehavior left, SpotFleetRequestConfigDataInstanceInterruptionBehavior right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataInstanceInterruptionBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataInstanceInterruptionBehavior other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataInstanceInterruptionBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataTargetCapacityUnitType : IEquatable<SpotFleetRequestConfigDataTargetCapacityUnitType>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataTargetCapacityUnitType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataTargetCapacityUnitType Vcpu { get; } = new SpotFleetRequestConfigDataTargetCapacityUnitType("vcpu");
        public static SpotFleetRequestConfigDataTargetCapacityUnitType MemoryMib { get; } = new SpotFleetRequestConfigDataTargetCapacityUnitType("memory-mib");
        public static SpotFleetRequestConfigDataTargetCapacityUnitType Units { get; } = new SpotFleetRequestConfigDataTargetCapacityUnitType("units");

        public static bool operator ==(SpotFleetRequestConfigDataTargetCapacityUnitType left, SpotFleetRequestConfigDataTargetCapacityUnitType right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataTargetCapacityUnitType left, SpotFleetRequestConfigDataTargetCapacityUnitType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataTargetCapacityUnitType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataTargetCapacityUnitType other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataTargetCapacityUnitType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataType : IEquatable<SpotFleetRequestConfigDataType>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataType Maintain { get; } = new SpotFleetRequestConfigDataType("maintain");
        public static SpotFleetRequestConfigDataType Request { get; } = new SpotFleetRequestConfigDataType("request");

        public static bool operator ==(SpotFleetRequestConfigDataType left, SpotFleetRequestConfigDataType right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataType left, SpotFleetRequestConfigDataType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataType other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotCapacityRebalanceReplacementStrategy : IEquatable<SpotFleetSpotCapacityRebalanceReplacementStrategy>
    {
        private readonly string _value;

        private SpotFleetSpotCapacityRebalanceReplacementStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotCapacityRebalanceReplacementStrategy Launch { get; } = new SpotFleetSpotCapacityRebalanceReplacementStrategy("launch");
        public static SpotFleetSpotCapacityRebalanceReplacementStrategy LaunchBeforeTerminate { get; } = new SpotFleetSpotCapacityRebalanceReplacementStrategy("launch-before-terminate");

        public static bool operator ==(SpotFleetSpotCapacityRebalanceReplacementStrategy left, SpotFleetSpotCapacityRebalanceReplacementStrategy right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotCapacityRebalanceReplacementStrategy left, SpotFleetSpotCapacityRebalanceReplacementStrategy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotCapacityRebalanceReplacementStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotCapacityRebalanceReplacementStrategy other && Equals(other);
        public bool Equals(SpotFleetSpotCapacityRebalanceReplacementStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotPlacementTenancy : IEquatable<SpotFleetSpotPlacementTenancy>
    {
        private readonly string _value;

        private SpotFleetSpotPlacementTenancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotPlacementTenancy Dedicated { get; } = new SpotFleetSpotPlacementTenancy("dedicated");
        public static SpotFleetSpotPlacementTenancy Default { get; } = new SpotFleetSpotPlacementTenancy("default");
        public static SpotFleetSpotPlacementTenancy Host { get; } = new SpotFleetSpotPlacementTenancy("host");

        public static bool operator ==(SpotFleetSpotPlacementTenancy left, SpotFleetSpotPlacementTenancy right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotPlacementTenancy left, SpotFleetSpotPlacementTenancy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotPlacementTenancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotPlacementTenancy other && Equals(other);
        public bool Equals(SpotFleetSpotPlacementTenancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetTagSpecificationResourceType : IEquatable<SpotFleetTagSpecificationResourceType>
    {
        private readonly string _value;

        private SpotFleetTagSpecificationResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetTagSpecificationResourceType ClientVpnEndpoint { get; } = new SpotFleetTagSpecificationResourceType("client-vpn-endpoint");
        public static SpotFleetTagSpecificationResourceType CustomerGateway { get; } = new SpotFleetTagSpecificationResourceType("customer-gateway");
        public static SpotFleetTagSpecificationResourceType DedicatedHost { get; } = new SpotFleetTagSpecificationResourceType("dedicated-host");
        public static SpotFleetTagSpecificationResourceType DhcpOptions { get; } = new SpotFleetTagSpecificationResourceType("dhcp-options");
        public static SpotFleetTagSpecificationResourceType EgressOnlyInternetGateway { get; } = new SpotFleetTagSpecificationResourceType("egress-only-internet-gateway");
        public static SpotFleetTagSpecificationResourceType ElasticGpu { get; } = new SpotFleetTagSpecificationResourceType("elastic-gpu");
        public static SpotFleetTagSpecificationResourceType ElasticIp { get; } = new SpotFleetTagSpecificationResourceType("elastic-ip");
        public static SpotFleetTagSpecificationResourceType ExportImageTask { get; } = new SpotFleetTagSpecificationResourceType("export-image-task");
        public static SpotFleetTagSpecificationResourceType ExportInstanceTask { get; } = new SpotFleetTagSpecificationResourceType("export-instance-task");
        public static SpotFleetTagSpecificationResourceType Fleet { get; } = new SpotFleetTagSpecificationResourceType("fleet");
        public static SpotFleetTagSpecificationResourceType FpgaImage { get; } = new SpotFleetTagSpecificationResourceType("fpga-image");
        public static SpotFleetTagSpecificationResourceType HostReservation { get; } = new SpotFleetTagSpecificationResourceType("host-reservation");
        public static SpotFleetTagSpecificationResourceType Image { get; } = new SpotFleetTagSpecificationResourceType("image");
        public static SpotFleetTagSpecificationResourceType ImportImageTask { get; } = new SpotFleetTagSpecificationResourceType("import-image-task");
        public static SpotFleetTagSpecificationResourceType ImportSnapshotTask { get; } = new SpotFleetTagSpecificationResourceType("import-snapshot-task");
        public static SpotFleetTagSpecificationResourceType Instance { get; } = new SpotFleetTagSpecificationResourceType("instance");
        public static SpotFleetTagSpecificationResourceType InternetGateway { get; } = new SpotFleetTagSpecificationResourceType("internet-gateway");
        public static SpotFleetTagSpecificationResourceType KeyPair { get; } = new SpotFleetTagSpecificationResourceType("key-pair");
        public static SpotFleetTagSpecificationResourceType LaunchTemplate { get; } = new SpotFleetTagSpecificationResourceType("launch-template");
        public static SpotFleetTagSpecificationResourceType LocalGatewayRouteTableVpcAssociation { get; } = new SpotFleetTagSpecificationResourceType("local-gateway-route-table-vpc-association");
        public static SpotFleetTagSpecificationResourceType Natgateway { get; } = new SpotFleetTagSpecificationResourceType("natgateway");
        public static SpotFleetTagSpecificationResourceType NetworkAcl { get; } = new SpotFleetTagSpecificationResourceType("network-acl");
        public static SpotFleetTagSpecificationResourceType NetworkInsightsAnalysis { get; } = new SpotFleetTagSpecificationResourceType("network-insights-analysis");
        public static SpotFleetTagSpecificationResourceType NetworkInsightsPath { get; } = new SpotFleetTagSpecificationResourceType("network-insights-path");
        public static SpotFleetTagSpecificationResourceType NetworkInterface { get; } = new SpotFleetTagSpecificationResourceType("network-interface");
        public static SpotFleetTagSpecificationResourceType PlacementGroup { get; } = new SpotFleetTagSpecificationResourceType("placement-group");
        public static SpotFleetTagSpecificationResourceType ReservedInstances { get; } = new SpotFleetTagSpecificationResourceType("reserved-instances");
        public static SpotFleetTagSpecificationResourceType RouteTable { get; } = new SpotFleetTagSpecificationResourceType("route-table");
        public static SpotFleetTagSpecificationResourceType SecurityGroup { get; } = new SpotFleetTagSpecificationResourceType("security-group");
        public static SpotFleetTagSpecificationResourceType Snapshot { get; } = new SpotFleetTagSpecificationResourceType("snapshot");
        public static SpotFleetTagSpecificationResourceType SpotFleetRequest { get; } = new SpotFleetTagSpecificationResourceType("spot-fleet-request");
        public static SpotFleetTagSpecificationResourceType SpotInstancesRequest { get; } = new SpotFleetTagSpecificationResourceType("spot-instances-request");
        public static SpotFleetTagSpecificationResourceType Subnet { get; } = new SpotFleetTagSpecificationResourceType("subnet");
        public static SpotFleetTagSpecificationResourceType TrafficMirrorFilter { get; } = new SpotFleetTagSpecificationResourceType("traffic-mirror-filter");
        public static SpotFleetTagSpecificationResourceType TrafficMirrorSession { get; } = new SpotFleetTagSpecificationResourceType("traffic-mirror-session");
        public static SpotFleetTagSpecificationResourceType TrafficMirrorTarget { get; } = new SpotFleetTagSpecificationResourceType("traffic-mirror-target");
        public static SpotFleetTagSpecificationResourceType TransitGateway { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway");
        public static SpotFleetTagSpecificationResourceType TransitGatewayAttachment { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway-attachment");
        public static SpotFleetTagSpecificationResourceType TransitGatewayConnectPeer { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway-connect-peer");
        public static SpotFleetTagSpecificationResourceType TransitGatewayMulticastDomain { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway-multicast-domain");
        public static SpotFleetTagSpecificationResourceType TransitGatewayRouteTable { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway-route-table");
        public static SpotFleetTagSpecificationResourceType Volume { get; } = new SpotFleetTagSpecificationResourceType("volume");
        public static SpotFleetTagSpecificationResourceType Vpc { get; } = new SpotFleetTagSpecificationResourceType("vpc");
        public static SpotFleetTagSpecificationResourceType VpcFlowLog { get; } = new SpotFleetTagSpecificationResourceType("vpc-flow-log");
        public static SpotFleetTagSpecificationResourceType VpcPeeringConnection { get; } = new SpotFleetTagSpecificationResourceType("vpc-peering-connection");
        public static SpotFleetTagSpecificationResourceType VpnConnection { get; } = new SpotFleetTagSpecificationResourceType("vpn-connection");
        public static SpotFleetTagSpecificationResourceType VpnGateway { get; } = new SpotFleetTagSpecificationResourceType("vpn-gateway");

        public static bool operator ==(SpotFleetTagSpecificationResourceType left, SpotFleetTagSpecificationResourceType right) => left.Equals(right);
        public static bool operator !=(SpotFleetTagSpecificationResourceType left, SpotFleetTagSpecificationResourceType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetTagSpecificationResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetTagSpecificationResourceType other && Equals(other);
        public bool Equals(SpotFleetTagSpecificationResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
