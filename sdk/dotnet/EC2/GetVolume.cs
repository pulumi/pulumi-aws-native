// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2
{
    public static class GetVolume
    {
        /// <summary>
        /// Resource Type definition for AWS::EC2::Volume
        /// </summary>
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("aws-native:ec2:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::EC2::Volume
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("aws-native:ec2:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetVolumeArgs()
        {
        }
    }

    public sealed class GetVolumeInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetVolumeInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        public readonly bool? AutoEnableIO;
        public readonly string? AvailabilityZone;
        public readonly bool? Encrypted;
        public readonly string? Id;
        public readonly int? Iops;
        public readonly string? KmsKeyId;
        public readonly bool? MultiAttachEnabled;
        public readonly string? OutpostArn;
        public readonly int? Size;
        public readonly string? SnapshotId;
        public readonly ImmutableArray<Outputs.VolumeTag> Tags;
        public readonly int? Throughput;
        public readonly string? VolumeType;

        [OutputConstructor]
        private GetVolumeResult(
            bool? autoEnableIO,

            string? availabilityZone,

            bool? encrypted,

            string? id,

            int? iops,

            string? kmsKeyId,

            bool? multiAttachEnabled,

            string? outpostArn,

            int? size,

            string? snapshotId,

            ImmutableArray<Outputs.VolumeTag> tags,

            int? throughput,

            string? volumeType)
        {
            AutoEnableIO = autoEnableIO;
            AvailabilityZone = availabilityZone;
            Encrypted = encrypted;
            Id = id;
            Iops = iops;
            KmsKeyId = kmsKeyId;
            MultiAttachEnabled = multiAttachEnabled;
            OutpostArn = outpostArn;
            Size = size;
            SnapshotId = snapshotId;
            Tags = tags;
            Throughput = throughput;
            VolumeType = volumeType;
        }
    }
}
