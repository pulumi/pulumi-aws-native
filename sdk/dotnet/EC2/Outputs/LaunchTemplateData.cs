// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2.Outputs
{

    /// <summary>
    /// The information for the launch template.
    /// </summary>
    [OutputType]
    public sealed class LaunchTemplateData
    {
        /// <summary>
        /// The block device mapping.
        /// </summary>
        public readonly ImmutableArray<Outputs.LaunchTemplateBlockDeviceMapping> BlockDeviceMappings;
        public readonly Outputs.LaunchTemplateCapacityReservationSpecification? CapacityReservationSpecification;
        public readonly Outputs.LaunchTemplateCpuOptions? CpuOptions;
        public readonly Outputs.LaunchTemplateCreditSpecification? CreditSpecification;
        /// <summary>
        /// Indicates whether to enable the instance for stop protection.
        /// </summary>
        public readonly bool? DisableApiStop;
        /// <summary>
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API.
        /// </summary>
        public readonly bool? DisableApiTermination;
        /// <summary>
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        /// </summary>
        public readonly bool? EbsOptimized;
        /// <summary>
        /// An elastic GPU to associate with the instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.LaunchTemplateElasticGpuSpecification> ElasticGpuSpecifications;
        /// <summary>
        /// The elastic inference accelerator for the instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.LaunchTemplateElasticInferenceAccelerator> ElasticInferenceAccelerators;
        public readonly Outputs.LaunchTemplateEnclaveOptions? EnclaveOptions;
        public readonly Outputs.LaunchTemplateHibernationOptions? HibernationOptions;
        public readonly Outputs.LaunchTemplateIamInstanceProfile? IamInstanceProfile;
        /// <summary>
        /// The ID of the AMI. Alternatively, you can specify a Systems Manager parameter, which will resolve to an AMI ID on launch.
        /// </summary>
        public readonly string? ImageId;
        /// <summary>
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        /// </summary>
        public readonly string? InstanceInitiatedShutdownBehavior;
        public readonly Outputs.LaunchTemplateInstanceMarketOptions? InstanceMarketOptions;
        public readonly Outputs.LaunchTemplateInstanceRequirements? InstanceRequirements;
        public readonly string? InstanceType;
        /// <summary>
        /// The ID of the kernel.
        /// </summary>
        public readonly string? KernelId;
        /// <summary>
        /// The name of the EC2 key pair
        /// </summary>
        public readonly string? KeyName;
        /// <summary>
        /// The license configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.LaunchTemplateLicenseSpecification> LicenseSpecifications;
        public readonly Outputs.LaunchTemplateMaintenanceOptions? MaintenanceOptions;
        public readonly Outputs.LaunchTemplateMetadataOptions? MetadataOptions;
        public readonly Outputs.LaunchTemplateMonitoring? Monitoring;
        /// <summary>
        /// If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
        /// </summary>
        public readonly ImmutableArray<Outputs.LaunchTemplateNetworkInterface> NetworkInterfaces;
        public readonly Outputs.LaunchTemplatePlacement? Placement;
        public readonly Outputs.LaunchTemplatePrivateDnsNameOptions? PrivateDnsNameOptions;
        public readonly string? RamDiskId;
        /// <summary>
        /// One or more security group IDs. 
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// One or more security group names.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroups;
        /// <summary>
        /// The tags to apply to the resources that are created during instance launch.
        /// </summary>
        public readonly ImmutableArray<Outputs.TagSpecification> TagSpecifications;
        /// <summary>
        /// The user data to make available to the instance.
        /// </summary>
        public readonly string? UserData;

        [OutputConstructor]
        private LaunchTemplateData(
            ImmutableArray<Outputs.LaunchTemplateBlockDeviceMapping> blockDeviceMappings,

            Outputs.LaunchTemplateCapacityReservationSpecification? capacityReservationSpecification,

            Outputs.LaunchTemplateCpuOptions? cpuOptions,

            Outputs.LaunchTemplateCreditSpecification? creditSpecification,

            bool? disableApiStop,

            bool? disableApiTermination,

            bool? ebsOptimized,

            ImmutableArray<Outputs.LaunchTemplateElasticGpuSpecification> elasticGpuSpecifications,

            ImmutableArray<Outputs.LaunchTemplateElasticInferenceAccelerator> elasticInferenceAccelerators,

            Outputs.LaunchTemplateEnclaveOptions? enclaveOptions,

            Outputs.LaunchTemplateHibernationOptions? hibernationOptions,

            Outputs.LaunchTemplateIamInstanceProfile? iamInstanceProfile,

            string? imageId,

            string? instanceInitiatedShutdownBehavior,

            Outputs.LaunchTemplateInstanceMarketOptions? instanceMarketOptions,

            Outputs.LaunchTemplateInstanceRequirements? instanceRequirements,

            string? instanceType,

            string? kernelId,

            string? keyName,

            ImmutableArray<Outputs.LaunchTemplateLicenseSpecification> licenseSpecifications,

            Outputs.LaunchTemplateMaintenanceOptions? maintenanceOptions,

            Outputs.LaunchTemplateMetadataOptions? metadataOptions,

            Outputs.LaunchTemplateMonitoring? monitoring,

            ImmutableArray<Outputs.LaunchTemplateNetworkInterface> networkInterfaces,

            Outputs.LaunchTemplatePlacement? placement,

            Outputs.LaunchTemplatePrivateDnsNameOptions? privateDnsNameOptions,

            string? ramDiskId,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<string> securityGroups,

            ImmutableArray<Outputs.TagSpecification> tagSpecifications,

            string? userData)
        {
            BlockDeviceMappings = blockDeviceMappings;
            CapacityReservationSpecification = capacityReservationSpecification;
            CpuOptions = cpuOptions;
            CreditSpecification = creditSpecification;
            DisableApiStop = disableApiStop;
            DisableApiTermination = disableApiTermination;
            EbsOptimized = ebsOptimized;
            ElasticGpuSpecifications = elasticGpuSpecifications;
            ElasticInferenceAccelerators = elasticInferenceAccelerators;
            EnclaveOptions = enclaveOptions;
            HibernationOptions = hibernationOptions;
            IamInstanceProfile = iamInstanceProfile;
            ImageId = imageId;
            InstanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior;
            InstanceMarketOptions = instanceMarketOptions;
            InstanceRequirements = instanceRequirements;
            InstanceType = instanceType;
            KernelId = kernelId;
            KeyName = keyName;
            LicenseSpecifications = licenseSpecifications;
            MaintenanceOptions = maintenanceOptions;
            MetadataOptions = metadataOptions;
            Monitoring = monitoring;
            NetworkInterfaces = networkInterfaces;
            Placement = placement;
            PrivateDnsNameOptions = privateDnsNameOptions;
            RamDiskId = ramDiskId;
            SecurityGroupIds = securityGroupIds;
            SecurityGroups = securityGroups;
            TagSpecifications = tagSpecifications;
            UserData = userData;
        }
    }
}
