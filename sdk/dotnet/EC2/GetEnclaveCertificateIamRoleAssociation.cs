// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2
{
    public static class GetEnclaveCertificateIamRoleAssociation
    {
        /// <summary>
        /// Associates an AWS Identity and Access Management (IAM) role with an AWS Certificate Manager (ACM) certificate. This association is based on Amazon Resource Names and it enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave.
        /// </summary>
        public static Task<GetEnclaveCertificateIamRoleAssociationResult> InvokeAsync(GetEnclaveCertificateIamRoleAssociationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEnclaveCertificateIamRoleAssociationResult>("aws-native:ec2:getEnclaveCertificateIamRoleAssociation", args ?? new GetEnclaveCertificateIamRoleAssociationArgs(), options.WithDefaults());

        /// <summary>
        /// Associates an AWS Identity and Access Management (IAM) role with an AWS Certificate Manager (ACM) certificate. This association is based on Amazon Resource Names and it enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave.
        /// </summary>
        public static Output<GetEnclaveCertificateIamRoleAssociationResult> Invoke(GetEnclaveCertificateIamRoleAssociationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetEnclaveCertificateIamRoleAssociationResult>("aws-native:ec2:getEnclaveCertificateIamRoleAssociation", args ?? new GetEnclaveCertificateIamRoleAssociationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnclaveCertificateIamRoleAssociationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
        /// </summary>
        [Input("certificateArn", required: true)]
        public string CertificateArn { get; set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.
        /// </summary>
        [Input("roleArn", required: true)]
        public string RoleArn { get; set; } = null!;

        public GetEnclaveCertificateIamRoleAssociationArgs()
        {
        }
    }

    public sealed class GetEnclaveCertificateIamRoleAssociationInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
        /// </summary>
        [Input("certificateArn", required: true)]
        public Input<string> CertificateArn { get; set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        public GetEnclaveCertificateIamRoleAssociationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEnclaveCertificateIamRoleAssociationResult
    {
        /// <summary>
        /// The name of the Amazon S3 bucket to which the certificate was uploaded.
        /// </summary>
        public readonly string? CertificateS3BucketName;
        /// <summary>
        /// The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.
        /// </summary>
        public readonly string? CertificateS3ObjectKey;
        /// <summary>
        /// The ID of the AWS KMS CMK used to encrypt the private key of the certificate.
        /// </summary>
        public readonly string? EncryptionKmsKeyId;

        [OutputConstructor]
        private GetEnclaveCertificateIamRoleAssociationResult(
            string? certificateS3BucketName,

            string? certificateS3ObjectKey,

            string? encryptionKmsKeyId)
        {
            CertificateS3BucketName = certificateS3BucketName;
            CertificateS3ObjectKey = certificateS3ObjectKey;
            EncryptionKmsKeyId = encryptionKmsKeyId;
        }
    }
}
