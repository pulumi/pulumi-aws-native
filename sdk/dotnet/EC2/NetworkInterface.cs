// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2
{
    /// <summary>
    /// Resource Type definition for AWS::EC2::NetworkInterface
    /// </summary>
    [Obsolete(@"NetworkInterface is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")]
    [AwsNativeResourceType("aws-native:ec2:NetworkInterface")]
    public partial class NetworkInterface : Pulumi.CustomResource
    {
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("groupSet")]
        public Output<ImmutableArray<string>> GroupSet { get; private set; } = null!;

        [Output("interfaceType")]
        public Output<string?> InterfaceType { get; private set; } = null!;

        [Output("ipv6AddressCount")]
        public Output<int?> Ipv6AddressCount { get; private set; } = null!;

        [Output("ipv6Addresses")]
        public Output<ImmutableArray<Outputs.NetworkInterfaceInstanceIpv6Address>> Ipv6Addresses { get; private set; } = null!;

        [Output("primaryPrivateIpAddress")]
        public Output<string> PrimaryPrivateIpAddress { get; private set; } = null!;

        [Output("privateIpAddress")]
        public Output<string?> PrivateIpAddress { get; private set; } = null!;

        [Output("privateIpAddresses")]
        public Output<ImmutableArray<Outputs.NetworkInterfacePrivateIpAddressSpecification>> PrivateIpAddresses { get; private set; } = null!;

        [Output("secondaryPrivateIpAddressCount")]
        public Output<int?> SecondaryPrivateIpAddressCount { get; private set; } = null!;

        [Output("secondaryPrivateIpAddresses")]
        public Output<ImmutableArray<string>> SecondaryPrivateIpAddresses { get; private set; } = null!;

        [Output("sourceDestCheck")]
        public Output<bool?> SourceDestCheck { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.NetworkInterfaceTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkInterface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkInterface(string name, NetworkInterfaceArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ec2:NetworkInterface", name, args ?? new NetworkInterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkInterface(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:NetworkInterface", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkInterface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkInterface Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new NetworkInterface(name, id, options);
        }
    }

    public sealed class NetworkInterfaceArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groupSet")]
        private InputList<string>? _groupSet;
        public InputList<string> GroupSet
        {
            get => _groupSet ?? (_groupSet = new InputList<string>());
            set => _groupSet = value;
        }

        [Input("interfaceType")]
        public Input<string>? InterfaceType { get; set; }

        [Input("ipv6AddressCount")]
        public Input<int>? Ipv6AddressCount { get; set; }

        [Input("ipv6Addresses")]
        private InputList<Inputs.NetworkInterfaceInstanceIpv6AddressArgs>? _ipv6Addresses;
        public InputList<Inputs.NetworkInterfaceInstanceIpv6AddressArgs> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<Inputs.NetworkInterfaceInstanceIpv6AddressArgs>());
            set => _ipv6Addresses = value;
        }

        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        [Input("privateIpAddresses")]
        private InputList<Inputs.NetworkInterfacePrivateIpAddressSpecificationArgs>? _privateIpAddresses;
        public InputList<Inputs.NetworkInterfacePrivateIpAddressSpecificationArgs> PrivateIpAddresses
        {
            get => _privateIpAddresses ?? (_privateIpAddresses = new InputList<Inputs.NetworkInterfacePrivateIpAddressSpecificationArgs>());
            set => _privateIpAddresses = value;
        }

        [Input("secondaryPrivateIpAddressCount")]
        public Input<int>? SecondaryPrivateIpAddressCount { get; set; }

        [Input("sourceDestCheck")]
        public Input<bool>? SourceDestCheck { get; set; }

        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.NetworkInterfaceTagArgs>? _tags;
        public InputList<Inputs.NetworkInterfaceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NetworkInterfaceTagArgs>());
            set => _tags = value;
        }

        public NetworkInterfaceArgs()
        {
        }
    }
}
