// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2
{
    public static class GetNetworkInsightsAnalysis
    {
        /// <summary>
        /// Resource schema for AWS::EC2::NetworkInsightsAnalysis
        /// </summary>
        public static Task<GetNetworkInsightsAnalysisResult> InvokeAsync(GetNetworkInsightsAnalysisArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkInsightsAnalysisResult>("aws-native:ec2:getNetworkInsightsAnalysis", args ?? new GetNetworkInsightsAnalysisArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::EC2::NetworkInsightsAnalysis
        /// </summary>
        public static Output<GetNetworkInsightsAnalysisResult> Invoke(GetNetworkInsightsAnalysisInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNetworkInsightsAnalysisResult>("aws-native:ec2:getNetworkInsightsAnalysis", args ?? new GetNetworkInsightsAnalysisInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkInsightsAnalysisArgs : Pulumi.InvokeArgs
    {
        [Input("networkInsightsAnalysisId", required: true)]
        public string NetworkInsightsAnalysisId { get; set; } = null!;

        public GetNetworkInsightsAnalysisArgs()
        {
        }
    }

    public sealed class GetNetworkInsightsAnalysisInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("networkInsightsAnalysisId", required: true)]
        public Input<string> NetworkInsightsAnalysisId { get; set; } = null!;

        public GetNetworkInsightsAnalysisInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNetworkInsightsAnalysisResult
    {
        public readonly ImmutableArray<Outputs.NetworkInsightsAnalysisAlternatePathHint> AlternatePathHints;
        public readonly ImmutableArray<Outputs.NetworkInsightsAnalysisExplanation> Explanations;
        public readonly ImmutableArray<Outputs.NetworkInsightsAnalysisPathComponent> ForwardPathComponents;
        public readonly string? NetworkInsightsAnalysisArn;
        public readonly string? NetworkInsightsAnalysisId;
        public readonly bool? NetworkPathFound;
        public readonly ImmutableArray<Outputs.NetworkInsightsAnalysisPathComponent> ReturnPathComponents;
        public readonly string? StartDate;
        public readonly Pulumi.AwsNative.EC2.NetworkInsightsAnalysisStatus? Status;
        public readonly string? StatusMessage;
        public readonly ImmutableArray<Outputs.NetworkInsightsAnalysisTag> Tags;

        [OutputConstructor]
        private GetNetworkInsightsAnalysisResult(
            ImmutableArray<Outputs.NetworkInsightsAnalysisAlternatePathHint> alternatePathHints,

            ImmutableArray<Outputs.NetworkInsightsAnalysisExplanation> explanations,

            ImmutableArray<Outputs.NetworkInsightsAnalysisPathComponent> forwardPathComponents,

            string? networkInsightsAnalysisArn,

            string? networkInsightsAnalysisId,

            bool? networkPathFound,

            ImmutableArray<Outputs.NetworkInsightsAnalysisPathComponent> returnPathComponents,

            string? startDate,

            Pulumi.AwsNative.EC2.NetworkInsightsAnalysisStatus? status,

            string? statusMessage,

            ImmutableArray<Outputs.NetworkInsightsAnalysisTag> tags)
        {
            AlternatePathHints = alternatePathHints;
            Explanations = explanations;
            ForwardPathComponents = forwardPathComponents;
            NetworkInsightsAnalysisArn = networkInsightsAnalysisArn;
            NetworkInsightsAnalysisId = networkInsightsAnalysisId;
            NetworkPathFound = networkPathFound;
            ReturnPathComponents = returnPathComponents;
            StartDate = startDate;
            Status = status;
            StatusMessage = statusMessage;
            Tags = tags;
        }
    }
}
