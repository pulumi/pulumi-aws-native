// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.EC2
{
    /// <summary>
    /// Resource Type definition for AWS::EC2::NetworkAclEntry
    /// </summary>
    [Obsolete(@"NetworkAclEntry is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")]
    [AwsNativeResourceType("aws-native:ec2:NetworkAclEntry")]
    public partial class NetworkAclEntry : Pulumi.CustomResource
    {
        /// <summary>
        /// The IPv4 CIDR range to allow or deny, in CIDR notation (for example, 172.16.0.0/24). Requirement is conditional: You must specify the CidrBlock or Ipv6CidrBlock property
        /// </summary>
        [Output("cidrBlock")]
        public Output<string?> CidrBlock { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet)
        /// </summary>
        [Output("egress")]
        public Output<bool?> Egress { get; private set; } = null!;

        /// <summary>
        /// The Internet Control Message Protocol (ICMP) code and type. Requirement is conditional: Required if specifying 1 (ICMP) for the protocol parameter
        /// </summary>
        [Output("icmp")]
        public Output<Outputs.NetworkAclEntryIcmp?> Icmp { get; private set; } = null!;

        /// <summary>
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64)
        /// </summary>
        [Output("ipv6CidrBlock")]
        public Output<string?> Ipv6CidrBlock { get; private set; } = null!;

        /// <summary>
        /// The ID of the network ACL
        /// </summary>
        [Output("networkAclId")]
        public Output<string> NetworkAclId { get; private set; } = null!;

        /// <summary>
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18
        /// </summary>
        [Output("portRange")]
        public Output<Outputs.NetworkAclEntryPortRange?> PortRange { get; private set; } = null!;

        /// <summary>
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code
        /// </summary>
        [Output("protocol")]
        public Output<int> Protocol { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to allow or deny the traffic that matches the rule
        /// </summary>
        [Output("ruleAction")]
        public Output<string> RuleAction { get; private set; } = null!;

        /// <summary>
        /// Rule number to assign to the entry, such as 100. ACL entries are processed in ascending order by rule number. Entries can't use the same rule number unless one is an egress rule and the other is an ingress rule
        /// </summary>
        [Output("ruleNumber")]
        public Output<int> RuleNumber { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkAclEntry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkAclEntry(string name, NetworkAclEntryArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ec2:NetworkAclEntry", name, args ?? new NetworkAclEntryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkAclEntry(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:NetworkAclEntry", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkAclEntry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkAclEntry Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new NetworkAclEntry(name, id, options);
        }
    }

    public sealed class NetworkAclEntryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IPv4 CIDR range to allow or deny, in CIDR notation (for example, 172.16.0.0/24). Requirement is conditional: You must specify the CidrBlock or Ipv6CidrBlock property
        /// </summary>
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        /// <summary>
        /// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet)
        /// </summary>
        [Input("egress")]
        public Input<bool>? Egress { get; set; }

        /// <summary>
        /// The Internet Control Message Protocol (ICMP) code and type. Requirement is conditional: Required if specifying 1 (ICMP) for the protocol parameter
        /// </summary>
        [Input("icmp")]
        public Input<Inputs.NetworkAclEntryIcmpArgs>? Icmp { get; set; }

        /// <summary>
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64)
        /// </summary>
        [Input("ipv6CidrBlock")]
        public Input<string>? Ipv6CidrBlock { get; set; }

        /// <summary>
        /// The ID of the network ACL
        /// </summary>
        [Input("networkAclId", required: true)]
        public Input<string> NetworkAclId { get; set; } = null!;

        /// <summary>
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18
        /// </summary>
        [Input("portRange")]
        public Input<Inputs.NetworkAclEntryPortRangeArgs>? PortRange { get; set; }

        /// <summary>
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code
        /// </summary>
        [Input("protocol", required: true)]
        public Input<int> Protocol { get; set; } = null!;

        /// <summary>
        /// Indicates whether to allow or deny the traffic that matches the rule
        /// </summary>
        [Input("ruleAction", required: true)]
        public Input<string> RuleAction { get; set; } = null!;

        /// <summary>
        /// Rule number to assign to the entry, such as 100. ACL entries are processed in ascending order by rule number. Entries can't use the same rule number unless one is an egress rule and the other is an ingress rule
        /// </summary>
        [Input("ruleNumber", required: true)]
        public Input<int> RuleNumber { get; set; } = null!;

        public NetworkAclEntryArgs()
        {
        }
    }
}
