// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.SSM
{
    [EnumType]
    public readonly struct AssociationComplianceSeverity : IEquatable<AssociationComplianceSeverity>
    {
        private readonly string _value;

        private AssociationComplianceSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssociationComplianceSeverity Critical { get; } = new AssociationComplianceSeverity("CRITICAL");
        public static AssociationComplianceSeverity High { get; } = new AssociationComplianceSeverity("HIGH");
        public static AssociationComplianceSeverity Medium { get; } = new AssociationComplianceSeverity("MEDIUM");
        public static AssociationComplianceSeverity Low { get; } = new AssociationComplianceSeverity("LOW");
        public static AssociationComplianceSeverity Unspecified { get; } = new AssociationComplianceSeverity("UNSPECIFIED");

        public static bool operator ==(AssociationComplianceSeverity left, AssociationComplianceSeverity right) => left.Equals(right);
        public static bool operator !=(AssociationComplianceSeverity left, AssociationComplianceSeverity right) => !left.Equals(right);

        public static explicit operator string(AssociationComplianceSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssociationComplianceSeverity other && Equals(other);
        public bool Equals(AssociationComplianceSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AssociationSyncCompliance : IEquatable<AssociationSyncCompliance>
    {
        private readonly string _value;

        private AssociationSyncCompliance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssociationSyncCompliance Auto { get; } = new AssociationSyncCompliance("AUTO");
        public static AssociationSyncCompliance Manual { get; } = new AssociationSyncCompliance("MANUAL");

        public static bool operator ==(AssociationSyncCompliance left, AssociationSyncCompliance right) => left.Equals(right);
        public static bool operator !=(AssociationSyncCompliance left, AssociationSyncCompliance right) => !left.Equals(right);

        public static explicit operator string(AssociationSyncCompliance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssociationSyncCompliance other && Equals(other);
        public bool Equals(AssociationSyncCompliance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The key of a key-value pair that identifies the location of an attachment to a document.
    /// </summary>
    [EnumType]
    public readonly struct DocumentAttachmentsSourceKey : IEquatable<DocumentAttachmentsSourceKey>
    {
        private readonly string _value;

        private DocumentAttachmentsSourceKey(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DocumentAttachmentsSourceKey SourceUrl { get; } = new DocumentAttachmentsSourceKey("SourceUrl");
        public static DocumentAttachmentsSourceKey S3FileUrl { get; } = new DocumentAttachmentsSourceKey("S3FileUrl");
        public static DocumentAttachmentsSourceKey AttachmentReference { get; } = new DocumentAttachmentsSourceKey("AttachmentReference");

        public static bool operator ==(DocumentAttachmentsSourceKey left, DocumentAttachmentsSourceKey right) => left.Equals(right);
        public static bool operator !=(DocumentAttachmentsSourceKey left, DocumentAttachmentsSourceKey right) => !left.Equals(right);

        public static explicit operator string(DocumentAttachmentsSourceKey value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DocumentAttachmentsSourceKey other && Equals(other);
        public bool Equals(DocumentAttachmentsSourceKey other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
    /// </summary>
    [EnumType]
    public readonly struct DocumentFormat : IEquatable<DocumentFormat>
    {
        private readonly string _value;

        private DocumentFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DocumentFormat Yaml { get; } = new DocumentFormat("YAML");
        public static DocumentFormat Json { get; } = new DocumentFormat("JSON");
        public static DocumentFormat Text { get; } = new DocumentFormat("TEXT");

        public static bool operator ==(DocumentFormat left, DocumentFormat right) => left.Equals(right);
        public static bool operator !=(DocumentFormat left, DocumentFormat right) => !left.Equals(right);

        public static explicit operator string(DocumentFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DocumentFormat other && Equals(other);
        public bool Equals(DocumentFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of document to create.
    /// </summary>
    [EnumType]
    public readonly struct DocumentType : IEquatable<DocumentType>
    {
        private readonly string _value;

        private DocumentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DocumentType ApplicationConfiguration { get; } = new DocumentType("ApplicationConfiguration");
        public static DocumentType ApplicationConfigurationSchema { get; } = new DocumentType("ApplicationConfigurationSchema");
        public static DocumentType Automation { get; } = new DocumentType("Automation");
        public static DocumentType AutomationChangeTemplate { get; } = new DocumentType("Automation.ChangeTemplate");
        public static DocumentType ChangeCalendar { get; } = new DocumentType("ChangeCalendar");
        public static DocumentType CloudFormation { get; } = new DocumentType("CloudFormation");
        public static DocumentType Command { get; } = new DocumentType("Command");
        public static DocumentType DeploymentStrategy { get; } = new DocumentType("DeploymentStrategy");
        public static DocumentType Package { get; } = new DocumentType("Package");
        public static DocumentType Policy { get; } = new DocumentType("Policy");
        public static DocumentType ProblemAnalysis { get; } = new DocumentType("ProblemAnalysis");
        public static DocumentType ProblemAnalysisTemplate { get; } = new DocumentType("ProblemAnalysisTemplate");
        public static DocumentType Session { get; } = new DocumentType("Session");

        public static bool operator ==(DocumentType left, DocumentType right) => left.Equals(right);
        public static bool operator !=(DocumentType left, DocumentType right) => !left.Equals(right);

        public static explicit operator string(DocumentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DocumentType other && Equals(other);
        public bool Equals(DocumentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
