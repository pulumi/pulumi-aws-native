// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.ObservabilityAdmin
{
    /// <summary>
    /// Type of telemetry destination
    /// </summary>
    [EnumType]
    public readonly struct OrganizationTelemetryRuleDestinationType : IEquatable<OrganizationTelemetryRuleDestinationType>
    {
        private readonly string _value;

        private OrganizationTelemetryRuleDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OrganizationTelemetryRuleDestinationType CloudWatchLogs { get; } = new OrganizationTelemetryRuleDestinationType("cloud-watch-logs");

        public static bool operator ==(OrganizationTelemetryRuleDestinationType left, OrganizationTelemetryRuleDestinationType right) => left.Equals(right);
        public static bool operator !=(OrganizationTelemetryRuleDestinationType left, OrganizationTelemetryRuleDestinationType right) => !left.Equals(right);

        public static explicit operator string(OrganizationTelemetryRuleDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationTelemetryRuleDestinationType other && Equals(other);
        public bool Equals(OrganizationTelemetryRuleDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Resource Type associated with the Organization Telemetry Rule
    /// </summary>
    [EnumType]
    public readonly struct OrganizationTelemetryRuleResourceType : IEquatable<OrganizationTelemetryRuleResourceType>
    {
        private readonly string _value;

        private OrganizationTelemetryRuleResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OrganizationTelemetryRuleResourceType Awsec2vpc { get; } = new OrganizationTelemetryRuleResourceType("AWS::EC2::VPC");

        public static bool operator ==(OrganizationTelemetryRuleResourceType left, OrganizationTelemetryRuleResourceType right) => left.Equals(right);
        public static bool operator !=(OrganizationTelemetryRuleResourceType left, OrganizationTelemetryRuleResourceType right) => !left.Equals(right);

        public static explicit operator string(OrganizationTelemetryRuleResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationTelemetryRuleResourceType other && Equals(other);
        public bool Equals(OrganizationTelemetryRuleResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Telemetry Type associated with the Organization Telemetry Rule
    /// </summary>
    [EnumType]
    public readonly struct OrganizationTelemetryRuleTelemetryType : IEquatable<OrganizationTelemetryRuleTelemetryType>
    {
        private readonly string _value;

        private OrganizationTelemetryRuleTelemetryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OrganizationTelemetryRuleTelemetryType Logs { get; } = new OrganizationTelemetryRuleTelemetryType("Logs");

        public static bool operator ==(OrganizationTelemetryRuleTelemetryType left, OrganizationTelemetryRuleTelemetryType right) => left.Equals(right);
        public static bool operator !=(OrganizationTelemetryRuleTelemetryType left, OrganizationTelemetryRuleTelemetryType right) => !left.Equals(right);

        public static explicit operator string(OrganizationTelemetryRuleTelemetryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OrganizationTelemetryRuleTelemetryType other && Equals(other);
        public bool Equals(OrganizationTelemetryRuleTelemetryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of telemetry destination
    /// </summary>
    [EnumType]
    public readonly struct TelemetryRuleDestinationType : IEquatable<TelemetryRuleDestinationType>
    {
        private readonly string _value;

        private TelemetryRuleDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TelemetryRuleDestinationType CloudWatchLogs { get; } = new TelemetryRuleDestinationType("cloud-watch-logs");

        public static bool operator ==(TelemetryRuleDestinationType left, TelemetryRuleDestinationType right) => left.Equals(right);
        public static bool operator !=(TelemetryRuleDestinationType left, TelemetryRuleDestinationType right) => !left.Equals(right);

        public static explicit operator string(TelemetryRuleDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TelemetryRuleDestinationType other && Equals(other);
        public bool Equals(TelemetryRuleDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Resource Type associated with the Telemetry Rule
    /// </summary>
    [EnumType]
    public readonly struct TelemetryRuleResourceType : IEquatable<TelemetryRuleResourceType>
    {
        private readonly string _value;

        private TelemetryRuleResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TelemetryRuleResourceType Awsec2vpc { get; } = new TelemetryRuleResourceType("AWS::EC2::VPC");

        public static bool operator ==(TelemetryRuleResourceType left, TelemetryRuleResourceType right) => left.Equals(right);
        public static bool operator !=(TelemetryRuleResourceType left, TelemetryRuleResourceType right) => !left.Equals(right);

        public static explicit operator string(TelemetryRuleResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TelemetryRuleResourceType other && Equals(other);
        public bool Equals(TelemetryRuleResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Telemetry Type associated with the Telemetry Rule
    /// </summary>
    [EnumType]
    public readonly struct TelemetryRuleTelemetryType : IEquatable<TelemetryRuleTelemetryType>
    {
        private readonly string _value;

        private TelemetryRuleTelemetryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TelemetryRuleTelemetryType Logs { get; } = new TelemetryRuleTelemetryType("Logs");

        public static bool operator ==(TelemetryRuleTelemetryType left, TelemetryRuleTelemetryType right) => left.Equals(right);
        public static bool operator !=(TelemetryRuleTelemetryType left, TelemetryRuleTelemetryType right) => !left.Equals(right);

        public static explicit operator string(TelemetryRuleTelemetryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TelemetryRuleTelemetryType other && Equals(other);
        public bool Equals(TelemetryRuleTelemetryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
