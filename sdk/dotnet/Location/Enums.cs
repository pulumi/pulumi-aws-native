// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Location
{
    [EnumType]
    public readonly struct GeofenceCollectionPricingPlan : IEquatable<GeofenceCollectionPricingPlan>
    {
        private readonly string _value;

        private GeofenceCollectionPricingPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GeofenceCollectionPricingPlan RequestBasedUsage { get; } = new GeofenceCollectionPricingPlan("RequestBasedUsage");
        public static GeofenceCollectionPricingPlan MobileAssetTracking { get; } = new GeofenceCollectionPricingPlan("MobileAssetTracking");
        public static GeofenceCollectionPricingPlan MobileAssetManagement { get; } = new GeofenceCollectionPricingPlan("MobileAssetManagement");

        public static bool operator ==(GeofenceCollectionPricingPlan left, GeofenceCollectionPricingPlan right) => left.Equals(right);
        public static bool operator !=(GeofenceCollectionPricingPlan left, GeofenceCollectionPricingPlan right) => !left.Equals(right);

        public static explicit operator string(GeofenceCollectionPricingPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GeofenceCollectionPricingPlan other && Equals(other);
        public bool Equals(GeofenceCollectionPricingPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MapPricingPlan : IEquatable<MapPricingPlan>
    {
        private readonly string _value;

        private MapPricingPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MapPricingPlan RequestBasedUsage { get; } = new MapPricingPlan("RequestBasedUsage");
        public static MapPricingPlan MobileAssetTracking { get; } = new MapPricingPlan("MobileAssetTracking");
        public static MapPricingPlan MobileAssetManagement { get; } = new MapPricingPlan("MobileAssetManagement");

        public static bool operator ==(MapPricingPlan left, MapPricingPlan right) => left.Equals(right);
        public static bool operator !=(MapPricingPlan left, MapPricingPlan right) => !left.Equals(right);

        public static explicit operator string(MapPricingPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MapPricingPlan other && Equals(other);
        public bool Equals(MapPricingPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PlaceIndexIntendedUse : IEquatable<PlaceIndexIntendedUse>
    {
        private readonly string _value;

        private PlaceIndexIntendedUse(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlaceIndexIntendedUse SingleUse { get; } = new PlaceIndexIntendedUse("SingleUse");
        public static PlaceIndexIntendedUse Storage { get; } = new PlaceIndexIntendedUse("Storage");

        public static bool operator ==(PlaceIndexIntendedUse left, PlaceIndexIntendedUse right) => left.Equals(right);
        public static bool operator !=(PlaceIndexIntendedUse left, PlaceIndexIntendedUse right) => !left.Equals(right);

        public static explicit operator string(PlaceIndexIntendedUse value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlaceIndexIntendedUse other && Equals(other);
        public bool Equals(PlaceIndexIntendedUse other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PlaceIndexPricingPlan : IEquatable<PlaceIndexPricingPlan>
    {
        private readonly string _value;

        private PlaceIndexPricingPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlaceIndexPricingPlan RequestBasedUsage { get; } = new PlaceIndexPricingPlan("RequestBasedUsage");
        public static PlaceIndexPricingPlan MobileAssetTracking { get; } = new PlaceIndexPricingPlan("MobileAssetTracking");
        public static PlaceIndexPricingPlan MobileAssetManagement { get; } = new PlaceIndexPricingPlan("MobileAssetManagement");

        public static bool operator ==(PlaceIndexPricingPlan left, PlaceIndexPricingPlan right) => left.Equals(right);
        public static bool operator !=(PlaceIndexPricingPlan left, PlaceIndexPricingPlan right) => !left.Equals(right);

        public static explicit operator string(PlaceIndexPricingPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlaceIndexPricingPlan other && Equals(other);
        public bool Equals(PlaceIndexPricingPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RouteCalculatorPricingPlan : IEquatable<RouteCalculatorPricingPlan>
    {
        private readonly string _value;

        private RouteCalculatorPricingPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RouteCalculatorPricingPlan RequestBasedUsage { get; } = new RouteCalculatorPricingPlan("RequestBasedUsage");
        public static RouteCalculatorPricingPlan MobileAssetManagement { get; } = new RouteCalculatorPricingPlan("MobileAssetManagement");

        public static bool operator ==(RouteCalculatorPricingPlan left, RouteCalculatorPricingPlan right) => left.Equals(right);
        public static bool operator !=(RouteCalculatorPricingPlan left, RouteCalculatorPricingPlan right) => !left.Equals(right);

        public static explicit operator string(RouteCalculatorPricingPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RouteCalculatorPricingPlan other && Equals(other);
        public bool Equals(RouteCalculatorPricingPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TrackerPricingPlan : IEquatable<TrackerPricingPlan>
    {
        private readonly string _value;

        private TrackerPricingPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TrackerPricingPlan RequestBasedUsage { get; } = new TrackerPricingPlan("RequestBasedUsage");
        public static TrackerPricingPlan MobileAssetTracking { get; } = new TrackerPricingPlan("MobileAssetTracking");
        public static TrackerPricingPlan MobileAssetManagement { get; } = new TrackerPricingPlan("MobileAssetManagement");

        public static bool operator ==(TrackerPricingPlan left, TrackerPricingPlan right) => left.Equals(right);
        public static bool operator !=(TrackerPricingPlan left, TrackerPricingPlan right) => !left.Equals(right);

        public static explicit operator string(TrackerPricingPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TrackerPricingPlan other && Equals(other);
        public bool Equals(TrackerPricingPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
