// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Location
{
    public static class GetGeofenceCollection
    {
        /// <summary>
        /// Definition of AWS::Location::GeofenceCollection Resource Type
        /// </summary>
        public static Task<GetGeofenceCollectionResult> InvokeAsync(GetGeofenceCollectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGeofenceCollectionResult>("aws-native:location:getGeofenceCollection", args ?? new GetGeofenceCollectionArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::Location::GeofenceCollection Resource Type
        /// </summary>
        public static Output<GetGeofenceCollectionResult> Invoke(GetGeofenceCollectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGeofenceCollectionResult>("aws-native:location:getGeofenceCollection", args ?? new GetGeofenceCollectionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::Location::GeofenceCollection Resource Type
        /// </summary>
        public static Output<GetGeofenceCollectionResult> Invoke(GetGeofenceCollectionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGeofenceCollectionResult>("aws-native:location:getGeofenceCollection", args ?? new GetGeofenceCollectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGeofenceCollectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A custom name for the geofence collection.
        /// 
        /// Requirements:
        /// 
        /// - Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_).
        /// - Must be a unique geofence collection name.
        /// - No spaces allowed. For example, `ExampleGeofenceCollection` .
        /// </summary>
        [Input("collectionName", required: true)]
        public string CollectionName { get; set; } = null!;

        public GetGeofenceCollectionArgs()
        {
        }
        public static new GetGeofenceCollectionArgs Empty => new GetGeofenceCollectionArgs();
    }

    public sealed class GetGeofenceCollectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A custom name for the geofence collection.
        /// 
        /// Requirements:
        /// 
        /// - Contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_).
        /// - Must be a unique geofence collection name.
        /// - No spaces allowed. For example, `ExampleGeofenceCollection` .
        /// </summary>
        [Input("collectionName", required: true)]
        public Input<string> CollectionName { get; set; } = null!;

        public GetGeofenceCollectionInvokeArgs()
        {
        }
        public static new GetGeofenceCollectionInvokeArgs Empty => new GetGeofenceCollectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetGeofenceCollectionResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS .
        /// 
        /// - Format example: `arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollection`
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// Synonym for `Arn` . The Amazon Resource Name (ARN) for the geofence collection resource. Used when you need to specify a resource across all AWS .
        /// 
        /// - Format example: `arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollection`
        /// </summary>
        public readonly string? CollectionArn;
        /// <summary>
        /// The timestamp for when the geofence collection resource was created in [ISO 8601](https://docs.aws.amazon.com/https://www.iso.org/iso-8601-date-and-time-format.html) format: `YYYY-MM-DDThh:mm:ss.sssZ` .
        /// </summary>
        public readonly string? CreateTime;
        /// <summary>
        /// An optional description for the geofence collection.
        /// </summary>
        public readonly string? Description;
        public readonly Pulumi.AwsNative.Location.GeofenceCollectionPricingPlan? PricingPlan;
        /// <summary>
        /// This shape is deprecated since 2022-02-01: Deprecated. No longer allowed.
        /// </summary>
        public readonly string? PricingPlanDataSource;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;
        /// <summary>
        /// The timestamp for when the geofence collection resource was last updated in [ISO 8601](https://docs.aws.amazon.com/https://www.iso.org/iso-8601-date-and-time-format.html) format: `YYYY-MM-DDThh:mm:ss.sssZ` .
        /// </summary>
        public readonly string? UpdateTime;

        [OutputConstructor]
        private GetGeofenceCollectionResult(
            string? arn,

            string? collectionArn,

            string? createTime,

            string? description,

            Pulumi.AwsNative.Location.GeofenceCollectionPricingPlan? pricingPlan,

            string? pricingPlanDataSource,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags,

            string? updateTime)
        {
            Arn = arn;
            CollectionArn = collectionArn;
            CreateTime = createTime;
            Description = description;
            PricingPlan = pricingPlan;
            PricingPlanDataSource = pricingPlanDataSource;
            Tags = tags;
            UpdateTime = updateTime;
        }
    }
}
