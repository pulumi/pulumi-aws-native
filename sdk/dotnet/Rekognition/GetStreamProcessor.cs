// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Rekognition
{
    public static class GetStreamProcessor
    {
        /// <summary>
        /// The AWS::Rekognition::StreamProcessor type is used to create an Amazon Rekognition StreamProcessor that you can use to analyze streaming videos.
        /// </summary>
        public static Task<GetStreamProcessorResult> InvokeAsync(GetStreamProcessorArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStreamProcessorResult>("aws-native:rekognition:getStreamProcessor", args ?? new GetStreamProcessorArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::Rekognition::StreamProcessor type is used to create an Amazon Rekognition StreamProcessor that you can use to analyze streaming videos.
        /// </summary>
        public static Output<GetStreamProcessorResult> Invoke(GetStreamProcessorInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetStreamProcessorResult>("aws-native:rekognition:getStreamProcessor", args ?? new GetStreamProcessorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamProcessorArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the stream processor. It's an identifier you assign to the stream processor. You can use it to manage the stream processor.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetStreamProcessorArgs()
        {
        }
    }

    public sealed class GetStreamProcessorInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the stream processor. It's an identifier you assign to the stream processor. You can use it to manage the stream processor.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetStreamProcessorInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStreamProcessorResult
    {
        public readonly string? Arn;
        /// <summary>
        /// Current status of the stream processor.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Detailed status message about the stream processor.
        /// </summary>
        public readonly string? StatusMessage;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.StreamProcessorTag> Tags;

        [OutputConstructor]
        private GetStreamProcessorResult(
            string? arn,

            string? status,

            string? statusMessage,

            ImmutableArray<Outputs.StreamProcessorTag> tags)
        {
            Arn = arn;
            Status = status;
            StatusMessage = statusMessage;
            Tags = tags;
        }
    }
}
