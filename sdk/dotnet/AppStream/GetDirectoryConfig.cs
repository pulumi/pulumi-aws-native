// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AppStream
{
    public static class GetDirectoryConfig
    {
        /// <summary>
        /// Resource Type definition for AWS::AppStream::DirectoryConfig
        /// </summary>
        public static Task<GetDirectoryConfigResult> InvokeAsync(GetDirectoryConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryConfigResult>("aws-native:appstream:getDirectoryConfig", args ?? new GetDirectoryConfigArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::AppStream::DirectoryConfig
        /// </summary>
        public static Output<GetDirectoryConfigResult> Invoke(GetDirectoryConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDirectoryConfigResult>("aws-native:appstream:getDirectoryConfig", args ?? new GetDirectoryConfigInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::AppStream::DirectoryConfig
        /// </summary>
        public static Output<GetDirectoryConfigResult> Invoke(GetDirectoryConfigInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDirectoryConfigResult>("aws-native:appstream:getDirectoryConfig", args ?? new GetDirectoryConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDirectoryConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified name of the directory (for example, corp.example.com).
        /// </summary>
        [Input("directoryName", required: true)]
        public string DirectoryName { get; set; } = null!;

        public GetDirectoryConfigArgs()
        {
        }
        public static new GetDirectoryConfigArgs Empty => new GetDirectoryConfigArgs();
    }

    public sealed class GetDirectoryConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully qualified name of the directory (for example, corp.example.com).
        /// </summary>
        [Input("directoryName", required: true)]
        public Input<string> DirectoryName { get; set; } = null!;

        public GetDirectoryConfigInvokeArgs()
        {
        }
        public static new GetDirectoryConfigInvokeArgs Empty => new GetDirectoryConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetDirectoryConfigResult
    {
        /// <summary>
        /// The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances.
        /// </summary>
        public readonly Outputs.DirectoryConfigCertificateBasedAuthProperties? CertificateBasedAuthProperties;
        /// <summary>
        /// The distinguished names of the organizational units for computer accounts.
        /// </summary>
        public readonly ImmutableArray<string> OrganizationalUnitDistinguishedNames;
        /// <summary>
        /// The credentials for the service account used by the streaming instance to connect to the directory. Do not use this parameter directly. Use `ServiceAccountCredentials` as an input parameter with `noEcho` as shown in the [Parameters](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html) . For best practices information, see [Do Not Embed Credentials in Your Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#creds) .
        /// </summary>
        public readonly Outputs.DirectoryConfigServiceAccountCredentials? ServiceAccountCredentials;

        [OutputConstructor]
        private GetDirectoryConfigResult(
            Outputs.DirectoryConfigCertificateBasedAuthProperties? certificateBasedAuthProperties,

            ImmutableArray<string> organizationalUnitDistinguishedNames,

            Outputs.DirectoryConfigServiceAccountCredentials? serviceAccountCredentials)
        {
            CertificateBasedAuthProperties = certificateBasedAuthProperties;
            OrganizationalUnitDistinguishedNames = organizationalUnitDistinguishedNames;
            ServiceAccountCredentials = serviceAccountCredentials;
        }
    }
}
