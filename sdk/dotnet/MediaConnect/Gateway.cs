// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaConnect
{
    /// <summary>
    /// Resource schema for AWS::MediaConnect::Gateway
    /// </summary>
    [AwsNativeResourceType("aws-native:mediaconnect:Gateway")]
    public partial class Gateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The range of IP addresses that contribute content or initiate output requests for flows communicating with this gateway. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        /// </summary>
        [Output("egressCidrBlocks")]
        public Output<ImmutableArray<string>> EgressCidrBlocks { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the gateway.
        /// </summary>
        [Output("gatewayArn")]
        public Output<string> GatewayArn { get; private set; } = null!;

        /// <summary>
        /// The current status of the gateway.
        /// </summary>
        [Output("gatewayState")]
        public Output<Pulumi.AwsNative.MediaConnect.GatewayState> GatewayState { get; private set; } = null!;

        /// <summary>
        /// The name of the gateway. This name can not be modified after the gateway is created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of networks in the gateway.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.GatewayNetwork>> Networks { get; private set; } = null!;


        /// <summary>
        /// Create a Gateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Gateway(string name, GatewayArgs args, CustomResourceOptions? options = null)
            : base("aws-native:mediaconnect:Gateway", name, args ?? new GatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Gateway(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:mediaconnect:Gateway", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Gateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Gateway Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Gateway(name, id, options);
        }
    }

    public sealed class GatewayArgs : global::Pulumi.ResourceArgs
    {
        [Input("egressCidrBlocks", required: true)]
        private InputList<string>? _egressCidrBlocks;

        /// <summary>
        /// The range of IP addresses that contribute content or initiate output requests for flows communicating with this gateway. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        /// </summary>
        public InputList<string> EgressCidrBlocks
        {
            get => _egressCidrBlocks ?? (_egressCidrBlocks = new InputList<string>());
            set => _egressCidrBlocks = value;
        }

        /// <summary>
        /// The name of the gateway. This name can not be modified after the gateway is created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks", required: true)]
        private InputList<Inputs.GatewayNetworkArgs>? _networks;

        /// <summary>
        /// The list of networks in the gateway.
        /// </summary>
        public InputList<Inputs.GatewayNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.GatewayNetworkArgs>());
            set => _networks = value;
        }

        public GatewayArgs()
        {
        }
        public static new GatewayArgs Empty => new GatewayArgs();
    }
}
