// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ServiceCatalog
{
    public static class GetPortfolio
    {
        /// <summary>
        /// Resource Type definition for AWS::ServiceCatalog::Portfolio
        /// </summary>
        public static Task<GetPortfolioResult> InvokeAsync(GetPortfolioArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPortfolioResult>("aws-native:servicecatalog:getPortfolio", args ?? new GetPortfolioArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ServiceCatalog::Portfolio
        /// </summary>
        public static Output<GetPortfolioResult> Invoke(GetPortfolioInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPortfolioResult>("aws-native:servicecatalog:getPortfolio", args ?? new GetPortfolioInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPortfolioArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public string? Id { get; set; }

        public GetPortfolioArgs()
        {
        }
    }

    public sealed class GetPortfolioInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetPortfolioInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPortfolioResult
    {
        public readonly string? AcceptLanguage;
        public readonly string? Description;
        public readonly string? DisplayName;
        public readonly string? Id;
        public readonly string? PortfolioName;
        public readonly string? ProviderName;
        public readonly ImmutableArray<Outputs.PortfolioTag> Tags;

        [OutputConstructor]
        private GetPortfolioResult(
            string? acceptLanguage,

            string? description,

            string? displayName,

            string? id,

            string? portfolioName,

            string? providerName,

            ImmutableArray<Outputs.PortfolioTag> tags)
        {
            AcceptLanguage = acceptLanguage;
            Description = description;
            DisplayName = displayName;
            Id = id;
            PortfolioName = portfolioName;
            ProviderName = providerName;
            Tags = tags;
        }
    }
}
