// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.RtbFabric
{
    [EnumType]
    public readonly struct LinkDirection : IEquatable<LinkDirection>
    {
        private readonly string _value;

        private LinkDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LinkDirection Request { get; } = new LinkDirection("REQUEST");
        public static LinkDirection Response { get; } = new LinkDirection("RESPONSE");

        public static bool operator ==(LinkDirection left, LinkDirection right) => left.Equals(right);
        public static bool operator !=(LinkDirection left, LinkDirection right) => !left.Equals(right);

        public static explicit operator string(LinkDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LinkDirection other && Equals(other);
        public bool Equals(LinkDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct LinkResponderErrorMaskingForHttpCodeAction : IEquatable<LinkResponderErrorMaskingForHttpCodeAction>
    {
        private readonly string _value;

        private LinkResponderErrorMaskingForHttpCodeAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LinkResponderErrorMaskingForHttpCodeAction NoBid { get; } = new LinkResponderErrorMaskingForHttpCodeAction("NO_BID");
        public static LinkResponderErrorMaskingForHttpCodeAction Passthrough { get; } = new LinkResponderErrorMaskingForHttpCodeAction("PASSTHROUGH");

        public static bool operator ==(LinkResponderErrorMaskingForHttpCodeAction left, LinkResponderErrorMaskingForHttpCodeAction right) => left.Equals(right);
        public static bool operator !=(LinkResponderErrorMaskingForHttpCodeAction left, LinkResponderErrorMaskingForHttpCodeAction right) => !left.Equals(right);

        public static explicit operator string(LinkResponderErrorMaskingForHttpCodeAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LinkResponderErrorMaskingForHttpCodeAction other && Equals(other);
        public bool Equals(LinkResponderErrorMaskingForHttpCodeAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct LinkResponderErrorMaskingLoggingType : IEquatable<LinkResponderErrorMaskingLoggingType>
    {
        private readonly string _value;

        private LinkResponderErrorMaskingLoggingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LinkResponderErrorMaskingLoggingType None { get; } = new LinkResponderErrorMaskingLoggingType("NONE");
        public static LinkResponderErrorMaskingLoggingType Metric { get; } = new LinkResponderErrorMaskingLoggingType("METRIC");
        public static LinkResponderErrorMaskingLoggingType Response { get; } = new LinkResponderErrorMaskingLoggingType("RESPONSE");

        public static bool operator ==(LinkResponderErrorMaskingLoggingType left, LinkResponderErrorMaskingLoggingType right) => left.Equals(right);
        public static bool operator !=(LinkResponderErrorMaskingLoggingType left, LinkResponderErrorMaskingLoggingType right) => !left.Equals(right);

        public static explicit operator string(LinkResponderErrorMaskingLoggingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LinkResponderErrorMaskingLoggingType other && Equals(other);
        public bool Equals(LinkResponderErrorMaskingLoggingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct LinkStatus : IEquatable<LinkStatus>
    {
        private readonly string _value;

        private LinkStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LinkStatus PendingCreation { get; } = new LinkStatus("PENDING_CREATION");
        public static LinkStatus PendingRequest { get; } = new LinkStatus("PENDING_REQUEST");
        public static LinkStatus Requested { get; } = new LinkStatus("REQUESTED");
        public static LinkStatus Accepted { get; } = new LinkStatus("ACCEPTED");
        public static LinkStatus Active { get; } = new LinkStatus("ACTIVE");
        public static LinkStatus Declined { get; } = new LinkStatus("DECLINED");
        public static LinkStatus Failed { get; } = new LinkStatus("FAILED");
        public static LinkStatus PendingDeletion { get; } = new LinkStatus("PENDING_DELETION");
        public static LinkStatus Deleted { get; } = new LinkStatus("DELETED");
        public static LinkStatus PendingUpdate { get; } = new LinkStatus("PENDING_UPDATE");
        public static LinkStatus PendingIsolation { get; } = new LinkStatus("PENDING_ISOLATION");
        public static LinkStatus Isolated { get; } = new LinkStatus("ISOLATED");
        public static LinkStatus PendingRestoration { get; } = new LinkStatus("PENDING_RESTORATION");
        public static LinkStatus UnknownToSdkVersion { get; } = new LinkStatus("UNKNOWN_TO_SDK_VERSION");

        public static bool operator ==(LinkStatus left, LinkStatus right) => left.Equals(right);
        public static bool operator !=(LinkStatus left, LinkStatus right) => !left.Equals(right);

        public static explicit operator string(LinkStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LinkStatus other && Equals(other);
        public bool Equals(LinkStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RequesterGatewayStatus : IEquatable<RequesterGatewayStatus>
    {
        private readonly string _value;

        private RequesterGatewayStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RequesterGatewayStatus PendingCreation { get; } = new RequesterGatewayStatus("PENDING_CREATION");
        public static RequesterGatewayStatus Active { get; } = new RequesterGatewayStatus("ACTIVE");
        public static RequesterGatewayStatus PendingDeletion { get; } = new RequesterGatewayStatus("PENDING_DELETION");
        public static RequesterGatewayStatus Deleted { get; } = new RequesterGatewayStatus("DELETED");
        public static RequesterGatewayStatus Error { get; } = new RequesterGatewayStatus("ERROR");
        public static RequesterGatewayStatus PendingUpdate { get; } = new RequesterGatewayStatus("PENDING_UPDATE");
        public static RequesterGatewayStatus Isolated { get; } = new RequesterGatewayStatus("ISOLATED");
        public static RequesterGatewayStatus PendingIsolation { get; } = new RequesterGatewayStatus("PENDING_ISOLATION");
        public static RequesterGatewayStatus PendingRestoration { get; } = new RequesterGatewayStatus("PENDING_RESTORATION");

        public static bool operator ==(RequesterGatewayStatus left, RequesterGatewayStatus right) => left.Equals(right);
        public static bool operator !=(RequesterGatewayStatus left, RequesterGatewayStatus right) => !left.Equals(right);

        public static explicit operator string(RequesterGatewayStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RequesterGatewayStatus other && Equals(other);
        public bool Equals(RequesterGatewayStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ResponderGatewayProtocol : IEquatable<ResponderGatewayProtocol>
    {
        private readonly string _value;

        private ResponderGatewayProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResponderGatewayProtocol Http { get; } = new ResponderGatewayProtocol("HTTP");
        public static ResponderGatewayProtocol Https { get; } = new ResponderGatewayProtocol("HTTPS");

        public static bool operator ==(ResponderGatewayProtocol left, ResponderGatewayProtocol right) => left.Equals(right);
        public static bool operator !=(ResponderGatewayProtocol left, ResponderGatewayProtocol right) => !left.Equals(right);

        public static explicit operator string(ResponderGatewayProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResponderGatewayProtocol other && Equals(other);
        public bool Equals(ResponderGatewayProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ResponderGatewayStatus : IEquatable<ResponderGatewayStatus>
    {
        private readonly string _value;

        private ResponderGatewayStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResponderGatewayStatus PendingCreation { get; } = new ResponderGatewayStatus("PENDING_CREATION");
        public static ResponderGatewayStatus Active { get; } = new ResponderGatewayStatus("ACTIVE");
        public static ResponderGatewayStatus PendingDeletion { get; } = new ResponderGatewayStatus("PENDING_DELETION");
        public static ResponderGatewayStatus Deleted { get; } = new ResponderGatewayStatus("DELETED");
        public static ResponderGatewayStatus Error { get; } = new ResponderGatewayStatus("ERROR");
        public static ResponderGatewayStatus PendingUpdate { get; } = new ResponderGatewayStatus("PENDING_UPDATE");
        public static ResponderGatewayStatus Isolated { get; } = new ResponderGatewayStatus("ISOLATED");
        public static ResponderGatewayStatus PendingIsolation { get; } = new ResponderGatewayStatus("PENDING_ISOLATION");
        public static ResponderGatewayStatus PendingRestoration { get; } = new ResponderGatewayStatus("PENDING_RESTORATION");

        public static bool operator ==(ResponderGatewayStatus left, ResponderGatewayStatus right) => left.Equals(right);
        public static bool operator !=(ResponderGatewayStatus left, ResponderGatewayStatus right) => !left.Equals(right);

        public static explicit operator string(ResponderGatewayStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResponderGatewayStatus other && Equals(other);
        public bool Equals(ResponderGatewayStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
