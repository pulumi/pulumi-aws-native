// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.MediaTailor
{
    /// <summary>
    /// Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
    /// </summary>
    [EnumType]
    public readonly struct PlaybackConfigurationAvailSuppressionMode : IEquatable<PlaybackConfigurationAvailSuppressionMode>
    {
        private readonly string _value;

        private PlaybackConfigurationAvailSuppressionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlaybackConfigurationAvailSuppressionMode Off { get; } = new PlaybackConfigurationAvailSuppressionMode("OFF");
        public static PlaybackConfigurationAvailSuppressionMode BehindLiveEdge { get; } = new PlaybackConfigurationAvailSuppressionMode("BEHIND_LIVE_EDGE");

        public static bool operator ==(PlaybackConfigurationAvailSuppressionMode left, PlaybackConfigurationAvailSuppressionMode right) => left.Equals(right);
        public static bool operator !=(PlaybackConfigurationAvailSuppressionMode left, PlaybackConfigurationAvailSuppressionMode right) => !left.Equals(right);

        public static explicit operator string(PlaybackConfigurationAvailSuppressionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlaybackConfigurationAvailSuppressionMode other && Equals(other);
        public bool Equals(PlaybackConfigurationAvailSuppressionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
    /// </summary>
    [EnumType]
    public readonly struct PlaybackConfigurationDashConfigurationForPutOriginManifestType : IEquatable<PlaybackConfigurationDashConfigurationForPutOriginManifestType>
    {
        private readonly string _value;

        private PlaybackConfigurationDashConfigurationForPutOriginManifestType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PlaybackConfigurationDashConfigurationForPutOriginManifestType SinglePeriod { get; } = new PlaybackConfigurationDashConfigurationForPutOriginManifestType("SINGLE_PERIOD");
        public static PlaybackConfigurationDashConfigurationForPutOriginManifestType MultiPeriod { get; } = new PlaybackConfigurationDashConfigurationForPutOriginManifestType("MULTI_PERIOD");

        public static bool operator ==(PlaybackConfigurationDashConfigurationForPutOriginManifestType left, PlaybackConfigurationDashConfigurationForPutOriginManifestType right) => left.Equals(right);
        public static bool operator !=(PlaybackConfigurationDashConfigurationForPutOriginManifestType left, PlaybackConfigurationDashConfigurationForPutOriginManifestType right) => !left.Equals(right);

        public static explicit operator string(PlaybackConfigurationDashConfigurationForPutOriginManifestType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PlaybackConfigurationDashConfigurationForPutOriginManifestType other && Equals(other);
        public bool Equals(PlaybackConfigurationDashConfigurationForPutOriginManifestType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
