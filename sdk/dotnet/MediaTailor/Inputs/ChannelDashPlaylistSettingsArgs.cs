// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaTailor.Inputs
{

    /// <summary>
    /// &lt;p&gt;Dash manifest configuration parameters.&lt;/p&gt;
    /// </summary>
    public sealed class ChannelDashPlaylistSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;p&gt;The total duration (in seconds) of each manifest. Minimum value: &lt;code&gt;30&lt;/code&gt; seconds. Maximum value: &lt;code&gt;3600&lt;/code&gt; seconds.&lt;/p&gt;
        /// </summary>
        [Input("manifestWindowSeconds")]
        public Input<double>? ManifestWindowSeconds { get; set; }

        /// <summary>
        /// &lt;p&gt;Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: &lt;code&gt;2&lt;/code&gt; seconds. Maximum value: &lt;code&gt;60&lt;/code&gt; seconds.&lt;/p&gt;
        /// </summary>
        [Input("minBufferTimeSeconds")]
        public Input<double>? MinBufferTimeSeconds { get; set; }

        /// <summary>
        /// &lt;p&gt;Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: &lt;code&gt;2&lt;/code&gt; seconds. Maximum value: &lt;code&gt;60&lt;/code&gt; seconds.&lt;/p&gt;
        /// </summary>
        [Input("minUpdatePeriodSeconds")]
        public Input<double>? MinUpdatePeriodSeconds { get; set; }

        /// <summary>
        /// &lt;p&gt;Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: &lt;code&gt;2&lt;/code&gt; seconds. Maximum value: &lt;code&gt;60&lt;/code&gt; seconds.&lt;/p&gt;
        /// </summary>
        [Input("suggestedPresentationDelaySeconds")]
        public Input<double>? SuggestedPresentationDelaySeconds { get; set; }

        public ChannelDashPlaylistSettingsArgs()
        {
        }
        public static new ChannelDashPlaylistSettingsArgs Empty => new ChannelDashPlaylistSettingsArgs();
    }
}
