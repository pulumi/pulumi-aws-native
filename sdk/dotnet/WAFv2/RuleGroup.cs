// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WAFv2
{
    /// <summary>
    /// Contains the Rules that identify the requests that you want to allow, block, or count. In a RuleGroup, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a RuleGroup, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the RuleGroup with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a RuleGroup, a request needs to match only one of the specifications to be allowed, blocked, or counted.
    /// </summary>
    [AwsNativeResourceType("aws-native:wafv2:RuleGroup")]
    public partial class RuleGroup : Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Collection of Available Labels.
        /// </summary>
        [Output("availableLabels")]
        public Output<ImmutableArray<Outputs.RuleGroupLabelSummary>> AvailableLabels { get; private set; } = null!;

        [Output("capacity")]
        public Output<int> Capacity { get; private set; } = null!;

        /// <summary>
        /// Collection of Consumed Labels.
        /// </summary>
        [Output("consumedLabels")]
        public Output<ImmutableArray<Outputs.RuleGroupLabelSummary>> ConsumedLabels { get; private set; } = null!;

        [Output("customResponseBodies")]
        public Output<Outputs.RuleGroupCustomResponseBodies?> CustomResponseBodies { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("labelNamespace")]
        public Output<string> LabelNamespace { get; private set; } = null!;

        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Collection of Rules.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.RuleGroupRule>> Rules { get; private set; } = null!;

        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.RuleGroupTag>> Tags { get; private set; } = null!;

        [Output("visibilityConfig")]
        public Output<Outputs.RuleGroupVisibilityConfig> VisibilityConfig { get; private set; } = null!;


        /// <summary>
        /// Create a RuleGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleGroup(string name, RuleGroupArgs args, CustomResourceOptions? options = null)
            : base("aws-native:wafv2:RuleGroup", name, args ?? new RuleGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:wafv2:RuleGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RuleGroup(name, id, options);
        }
    }

    public sealed class RuleGroupArgs : Pulumi.ResourceArgs
    {
        [Input("capacity", required: true)]
        public Input<int> Capacity { get; set; } = null!;

        [Input("customResponseBodies")]
        public Input<Inputs.RuleGroupCustomResponseBodiesArgs>? CustomResponseBodies { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.RuleGroupRuleArgs>? _rules;

        /// <summary>
        /// Collection of Rules.
        /// </summary>
        public InputList<Inputs.RuleGroupRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RuleGroupRuleArgs>());
            set => _rules = value;
        }

        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.RuleGroupTagArgs>? _tags;
        public InputList<Inputs.RuleGroupTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RuleGroupTagArgs>());
            set => _tags = value;
        }

        [Input("visibilityConfig", required: true)]
        public Input<Inputs.RuleGroupVisibilityConfigArgs> VisibilityConfig { get; set; } = null!;

        public RuleGroupArgs()
        {
        }
    }
}
