// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WAFv2
{
    public static class GetWebACL
    {
        /// <summary>
        /// Contains the Rules that identify the requests that you want to allow, block, or count. In a WebACL, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a WebACL, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the WebACL with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a WebACL, a request needs to match only one of the specifications to be allowed, blocked, or counted.
        /// </summary>
        public static Task<GetWebACLResult> InvokeAsync(GetWebACLArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetWebACLResult>("aws-native:wafv2:getWebACL", args ?? new GetWebACLArgs(), options.WithDefaults());

        /// <summary>
        /// Contains the Rules that identify the requests that you want to allow, block, or count. In a WebACL, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a WebACL, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the WebACL with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a WebACL, a request needs to match only one of the specifications to be allowed, blocked, or counted.
        /// </summary>
        public static Output<GetWebACLResult> Invoke(GetWebACLInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetWebACLResult>("aws-native:wafv2:getWebACL", args ?? new GetWebACLInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWebACLArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("scope", required: true)]
        public Pulumi.AwsNative.WAFv2.WebACLScope Scope { get; set; }

        public GetWebACLArgs()
        {
        }
    }

    public sealed class GetWebACLInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("scope", required: true)]
        public Input<Pulumi.AwsNative.WAFv2.WebACLScope> Scope { get; set; } = null!;

        public GetWebACLInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetWebACLResult
    {
        public readonly string? Arn;
        public readonly int? Capacity;
        public readonly Outputs.WebACLCaptchaConfig? CaptchaConfig;
        public readonly Outputs.WebACLCustomResponseBodies? CustomResponseBodies;
        public readonly Outputs.WebACLDefaultAction? DefaultAction;
        public readonly string? Description;
        public readonly string? Id;
        public readonly string? LabelNamespace;
        /// <summary>
        /// Collection of Rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.WebACLRule> Rules;
        public readonly ImmutableArray<Outputs.WebACLTag> Tags;
        public readonly Outputs.WebACLVisibilityConfig? VisibilityConfig;

        [OutputConstructor]
        private GetWebACLResult(
            string? arn,

            int? capacity,

            Outputs.WebACLCaptchaConfig? captchaConfig,

            Outputs.WebACLCustomResponseBodies? customResponseBodies,

            Outputs.WebACLDefaultAction? defaultAction,

            string? description,

            string? id,

            string? labelNamespace,

            ImmutableArray<Outputs.WebACLRule> rules,

            ImmutableArray<Outputs.WebACLTag> tags,

            Outputs.WebACLVisibilityConfig? visibilityConfig)
        {
            Arn = arn;
            Capacity = capacity;
            CaptchaConfig = captchaConfig;
            CustomResponseBodies = customResponseBodies;
            DefaultAction = defaultAction;
            Description = description;
            Id = id;
            LabelNamespace = labelNamespace;
            Rules = rules;
            Tags = tags;
            VisibilityConfig = visibilityConfig;
        }
    }
}
