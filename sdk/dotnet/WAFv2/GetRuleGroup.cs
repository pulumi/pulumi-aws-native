// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WAFv2
{
    public static class GetRuleGroup
    {
        /// <summary>
        /// Contains the Rules that identify the requests that you want to allow, block, or count. In a RuleGroup, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a RuleGroup, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the RuleGroup with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a RuleGroup, a request needs to match only one of the specifications to be allowed, blocked, or counted.
        /// </summary>
        public static Task<GetRuleGroupResult> InvokeAsync(GetRuleGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRuleGroupResult>("aws-native:wafv2:getRuleGroup", args ?? new GetRuleGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Contains the Rules that identify the requests that you want to allow, block, or count. In a RuleGroup, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a RuleGroup, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the RuleGroup with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a RuleGroup, a request needs to match only one of the specifications to be allowed, blocked, or counted.
        /// </summary>
        public static Output<GetRuleGroupResult> Invoke(GetRuleGroupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRuleGroupResult>("aws-native:wafv2:getRuleGroup", args ?? new GetRuleGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRuleGroupArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("scope", required: true)]
        public Pulumi.AwsNative.WAFv2.RuleGroupScope Scope { get; set; }

        public GetRuleGroupArgs()
        {
        }
    }

    public sealed class GetRuleGroupInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("scope", required: true)]
        public Input<Pulumi.AwsNative.WAFv2.RuleGroupScope> Scope { get; set; } = null!;

        public GetRuleGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRuleGroupResult
    {
        public readonly string? Arn;
        /// <summary>
        /// Collection of Available Labels.
        /// </summary>
        public readonly ImmutableArray<Outputs.RuleGroupLabelSummary> AvailableLabels;
        public readonly int? Capacity;
        /// <summary>
        /// Collection of Consumed Labels.
        /// </summary>
        public readonly ImmutableArray<Outputs.RuleGroupLabelSummary> ConsumedLabels;
        public readonly Outputs.RuleGroupCustomResponseBodies? CustomResponseBodies;
        public readonly string? Description;
        public readonly string? Id;
        public readonly string? LabelNamespace;
        /// <summary>
        /// Collection of Rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.RuleGroupRule> Rules;
        public readonly ImmutableArray<Outputs.RuleGroupTag> Tags;
        public readonly Outputs.RuleGroupVisibilityConfig? VisibilityConfig;

        [OutputConstructor]
        private GetRuleGroupResult(
            string? arn,

            ImmutableArray<Outputs.RuleGroupLabelSummary> availableLabels,

            int? capacity,

            ImmutableArray<Outputs.RuleGroupLabelSummary> consumedLabels,

            Outputs.RuleGroupCustomResponseBodies? customResponseBodies,

            string? description,

            string? id,

            string? labelNamespace,

            ImmutableArray<Outputs.RuleGroupRule> rules,

            ImmutableArray<Outputs.RuleGroupTag> tags,

            Outputs.RuleGroupVisibilityConfig? visibilityConfig)
        {
            Arn = arn;
            AvailableLabels = availableLabels;
            Capacity = capacity;
            ConsumedLabels = consumedLabels;
            CustomResponseBodies = customResponseBodies;
            Description = description;
            Id = id;
            LabelNamespace = labelNamespace;
            Rules = rules;
            Tags = tags;
            VisibilityConfig = visibilityConfig;
        }
    }
}
