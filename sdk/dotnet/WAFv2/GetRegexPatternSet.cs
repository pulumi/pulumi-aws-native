// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WAFv2
{
    public static class GetRegexPatternSet
    {
        /// <summary>
        /// Contains a list of Regular expressions based on the provided inputs. RegexPatternSet can be used with other WAF entities with RegexPatternSetReferenceStatement to perform other actions .
        /// </summary>
        public static Task<GetRegexPatternSetResult> InvokeAsync(GetRegexPatternSetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegexPatternSetResult>("aws-native:wafv2:getRegexPatternSet", args ?? new GetRegexPatternSetArgs(), options.WithDefaults());

        /// <summary>
        /// Contains a list of Regular expressions based on the provided inputs. RegexPatternSet can be used with other WAF entities with RegexPatternSetReferenceStatement to perform other actions .
        /// </summary>
        public static Output<GetRegexPatternSetResult> Invoke(GetRegexPatternSetInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRegexPatternSetResult>("aws-native:wafv2:getRegexPatternSet", args ?? new GetRegexPatternSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegexPatternSetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Id of the RegexPatternSet
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Name of the RegexPatternSet.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Use CLOUDFRONT for CloudFront RegexPatternSet, use REGIONAL for Application Load Balancer and API Gateway.
        /// </summary>
        [Input("scope", required: true)]
        public Pulumi.AwsNative.WAFv2.RegexPatternSetScope Scope { get; set; }

        public GetRegexPatternSetArgs()
        {
        }
    }

    public sealed class GetRegexPatternSetInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Id of the RegexPatternSet
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Name of the RegexPatternSet.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Use CLOUDFRONT for CloudFront RegexPatternSet, use REGIONAL for Application Load Balancer and API Gateway.
        /// </summary>
        [Input("scope", required: true)]
        public Input<Pulumi.AwsNative.WAFv2.RegexPatternSetScope> Scope { get; set; } = null!;

        public GetRegexPatternSetInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRegexPatternSetResult
    {
        /// <summary>
        /// ARN of the WAF entity.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// Description of the entity.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Id of the RegexPatternSet
        /// </summary>
        public readonly string? Id;
        public readonly ImmutableArray<string> RegularExpressionList;
        public readonly ImmutableArray<Outputs.RegexPatternSetTag> Tags;

        [OutputConstructor]
        private GetRegexPatternSetResult(
            string? arn,

            string? description,

            string? id,

            ImmutableArray<string> regularExpressionList,

            ImmutableArray<Outputs.RegexPatternSetTag> tags)
        {
            Arn = arn;
            Description = description;
            Id = id;
            RegularExpressionList = regularExpressionList;
            Tags = tags;
        }
    }
}
