// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.OpenSearchServerless
{
    /// <summary>
    /// The possible types for the access policy
    /// </summary>
    [EnumType]
    public readonly struct AccessPolicyType : IEquatable<AccessPolicyType>
    {
        private readonly string _value;

        private AccessPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessPolicyType Data { get; } = new AccessPolicyType("data");

        public static bool operator ==(AccessPolicyType left, AccessPolicyType right) => left.Equals(right);
        public static bool operator !=(AccessPolicyType left, AccessPolicyType right) => !left.Equals(right);

        public static explicit operator string(AccessPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessPolicyType other && Equals(other);
        public bool Equals(AccessPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The possible standby replicas for the collection
    /// </summary>
    [EnumType]
    public readonly struct CollectionStandbyReplicas : IEquatable<CollectionStandbyReplicas>
    {
        private readonly string _value;

        private CollectionStandbyReplicas(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CollectionStandbyReplicas Enabled { get; } = new CollectionStandbyReplicas("ENABLED");
        public static CollectionStandbyReplicas Disabled { get; } = new CollectionStandbyReplicas("DISABLED");

        public static bool operator ==(CollectionStandbyReplicas left, CollectionStandbyReplicas right) => left.Equals(right);
        public static bool operator !=(CollectionStandbyReplicas left, CollectionStandbyReplicas right) => !left.Equals(right);

        public static explicit operator string(CollectionStandbyReplicas value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CollectionStandbyReplicas other && Equals(other);
        public bool Equals(CollectionStandbyReplicas other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The possible types for the collection
    /// </summary>
    [EnumType]
    public readonly struct CollectionType : IEquatable<CollectionType>
    {
        private readonly string _value;

        private CollectionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CollectionType Search { get; } = new CollectionType("SEARCH");
        public static CollectionType Timeseries { get; } = new CollectionType("TIMESERIES");
        public static CollectionType Vectorsearch { get; } = new CollectionType("VECTORSEARCH");

        public static bool operator ==(CollectionType left, CollectionType right) => left.Equals(right);
        public static bool operator !=(CollectionType left, CollectionType right) => !left.Equals(right);

        public static explicit operator string(CollectionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CollectionType other && Equals(other);
        public bool Equals(CollectionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The k-NN search engine to use
    /// </summary>
    [EnumType]
    public readonly struct IndexPropertyMappingMethodPropertiesEngine : IEquatable<IndexPropertyMappingMethodPropertiesEngine>
    {
        private readonly string _value;

        private IndexPropertyMappingMethodPropertiesEngine(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexPropertyMappingMethodPropertiesEngine Nmslib { get; } = new IndexPropertyMappingMethodPropertiesEngine("nmslib");
        public static IndexPropertyMappingMethodPropertiesEngine Faiss { get; } = new IndexPropertyMappingMethodPropertiesEngine("faiss");
        public static IndexPropertyMappingMethodPropertiesEngine Lucene { get; } = new IndexPropertyMappingMethodPropertiesEngine("lucene");

        public static bool operator ==(IndexPropertyMappingMethodPropertiesEngine left, IndexPropertyMappingMethodPropertiesEngine right) => left.Equals(right);
        public static bool operator !=(IndexPropertyMappingMethodPropertiesEngine left, IndexPropertyMappingMethodPropertiesEngine right) => !left.Equals(right);

        public static explicit operator string(IndexPropertyMappingMethodPropertiesEngine value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexPropertyMappingMethodPropertiesEngine other && Equals(other);
        public bool Equals(IndexPropertyMappingMethodPropertiesEngine other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The algorithm name for k-NN search
    /// </summary>
    [EnumType]
    public readonly struct IndexPropertyMappingMethodPropertiesName : IEquatable<IndexPropertyMappingMethodPropertiesName>
    {
        private readonly string _value;

        private IndexPropertyMappingMethodPropertiesName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexPropertyMappingMethodPropertiesName Hnsw { get; } = new IndexPropertyMappingMethodPropertiesName("hnsw");
        public static IndexPropertyMappingMethodPropertiesName Ivf { get; } = new IndexPropertyMappingMethodPropertiesName("ivf");

        public static bool operator ==(IndexPropertyMappingMethodPropertiesName left, IndexPropertyMappingMethodPropertiesName right) => left.Equals(right);
        public static bool operator !=(IndexPropertyMappingMethodPropertiesName left, IndexPropertyMappingMethodPropertiesName right) => !left.Equals(right);

        public static explicit operator string(IndexPropertyMappingMethodPropertiesName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexPropertyMappingMethodPropertiesName other && Equals(other);
        public bool Equals(IndexPropertyMappingMethodPropertiesName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The distance function used for k-NN search
    /// </summary>
    [EnumType]
    public readonly struct IndexPropertyMappingMethodPropertiesSpaceType : IEquatable<IndexPropertyMappingMethodPropertiesSpaceType>
    {
        private readonly string _value;

        private IndexPropertyMappingMethodPropertiesSpaceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexPropertyMappingMethodPropertiesSpaceType L2 { get; } = new IndexPropertyMappingMethodPropertiesSpaceType("l2");
        public static IndexPropertyMappingMethodPropertiesSpaceType L1 { get; } = new IndexPropertyMappingMethodPropertiesSpaceType("l1");
        public static IndexPropertyMappingMethodPropertiesSpaceType Linf { get; } = new IndexPropertyMappingMethodPropertiesSpaceType("linf");
        public static IndexPropertyMappingMethodPropertiesSpaceType Cosinesimil { get; } = new IndexPropertyMappingMethodPropertiesSpaceType("cosinesimil");
        public static IndexPropertyMappingMethodPropertiesSpaceType Innerproduct { get; } = new IndexPropertyMappingMethodPropertiesSpaceType("innerproduct");
        public static IndexPropertyMappingMethodPropertiesSpaceType Hamming { get; } = new IndexPropertyMappingMethodPropertiesSpaceType("hamming");

        public static bool operator ==(IndexPropertyMappingMethodPropertiesSpaceType left, IndexPropertyMappingMethodPropertiesSpaceType right) => left.Equals(right);
        public static bool operator !=(IndexPropertyMappingMethodPropertiesSpaceType left, IndexPropertyMappingMethodPropertiesSpaceType right) => !left.Equals(right);

        public static explicit operator string(IndexPropertyMappingMethodPropertiesSpaceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexPropertyMappingMethodPropertiesSpaceType other && Equals(other);
        public bool Equals(IndexPropertyMappingMethodPropertiesSpaceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The field data type. Must be a valid OpenSearch field type.
    /// </summary>
    [EnumType]
    public readonly struct IndexPropertyMappingType : IEquatable<IndexPropertyMappingType>
    {
        private readonly string _value;

        private IndexPropertyMappingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexPropertyMappingType Text { get; } = new IndexPropertyMappingType("text");
        public static IndexPropertyMappingType KnnVector { get; } = new IndexPropertyMappingType("knn_vector");

        public static bool operator ==(IndexPropertyMappingType left, IndexPropertyMappingType right) => left.Equals(right);
        public static bool operator !=(IndexPropertyMappingType left, IndexPropertyMappingType right) => !left.Equals(right);

        public static explicit operator string(IndexPropertyMappingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexPropertyMappingType other && Equals(other);
        public bool Equals(IndexPropertyMappingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of lifecycle policy
    /// </summary>
    [EnumType]
    public readonly struct LifecyclePolicyType : IEquatable<LifecyclePolicyType>
    {
        private readonly string _value;

        private LifecyclePolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LifecyclePolicyType Retention { get; } = new LifecyclePolicyType("retention");

        public static bool operator ==(LifecyclePolicyType left, LifecyclePolicyType right) => left.Equals(right);
        public static bool operator !=(LifecyclePolicyType left, LifecyclePolicyType right) => !left.Equals(right);

        public static explicit operator string(LifecyclePolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LifecyclePolicyType other && Equals(other);
        public bool Equals(LifecyclePolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Config type for security config
    /// </summary>
    [EnumType]
    public readonly struct SecurityConfigType : IEquatable<SecurityConfigType>
    {
        private readonly string _value;

        private SecurityConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityConfigType Saml { get; } = new SecurityConfigType("saml");
        public static SecurityConfigType Iamidentitycenter { get; } = new SecurityConfigType("iamidentitycenter");

        public static bool operator ==(SecurityConfigType left, SecurityConfigType right) => left.Equals(right);
        public static bool operator !=(SecurityConfigType left, SecurityConfigType right) => !left.Equals(right);

        public static explicit operator string(SecurityConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityConfigType other && Equals(other);
        public bool Equals(SecurityConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The possible types for the network policy
    /// </summary>
    [EnumType]
    public readonly struct SecurityPolicyType : IEquatable<SecurityPolicyType>
    {
        private readonly string _value;

        private SecurityPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityPolicyType Encryption { get; } = new SecurityPolicyType("encryption");
        public static SecurityPolicyType Network { get; } = new SecurityPolicyType("network");

        public static bool operator ==(SecurityPolicyType left, SecurityPolicyType right) => left.Equals(right);
        public static bool operator !=(SecurityPolicyType left, SecurityPolicyType right) => !left.Equals(right);

        public static explicit operator string(SecurityPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityPolicyType other && Equals(other);
        public bool Equals(SecurityPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
