// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MemoryDb
{
    /// <summary>
    /// The AWS::MemoryDB::Multi Region Cluster resource creates an Amazon MemoryDB Multi Region Cluster.
    /// </summary>
    [AwsNativeResourceType("aws-native:memorydb:MultiRegionCluster")]
    public partial class MultiRegionCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the multi region cluster.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Description of the multi region cluster.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The engine type used by the multi region cluster.
        /// </summary>
        [Output("engine")]
        public Output<string?> Engine { get; private set; } = null!;

        /// <summary>
        /// The Redis engine version used by the multi region cluster.
        /// </summary>
        [Output("engineVersion")]
        public Output<string?> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.
        /// </summary>
        [Output("multiRegionClusterName")]
        public Output<string> MultiRegionClusterName { get; private set; } = null!;

        /// <summary>
        /// The name of the Multi Region cluster. This value must be unique as it also serves as the multi region cluster identifier.
        /// </summary>
        [Output("multiRegionClusterNameSuffix")]
        public Output<string?> MultiRegionClusterNameSuffix { get; private set; } = null!;

        /// <summary>
        /// The name of the parameter group associated with the multi region cluster.
        /// </summary>
        [Output("multiRegionParameterGroupName")]
        public Output<string?> MultiRegionParameterGroupName { get; private set; } = null!;

        /// <summary>
        /// The compute and memory capacity of the nodes in the multi region cluster.
        /// </summary>
        [Output("nodeType")]
        public Output<string> NodeType { get; private set; } = null!;

        /// <summary>
        /// The number of shards the multi region cluster will contain.
        /// </summary>
        [Output("numShards")]
        public Output<int?> NumShards { get; private set; } = null!;

        /// <summary>
        /// The status of the multi region cluster. For example, Available, Updating, Creating.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this multi region cluster.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// A flag that enables in-transit encryption when set to true.
        /// 
        /// You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
        /// </summary>
        [Output("tlsEnabled")]
        public Output<bool?> TlsEnabled { get; private set; } = null!;

        /// <summary>
        /// An enum string value that determines the update strategy for scaling. Possible values are 'COORDINATED' and 'UNCOORDINATED'. Default is 'COORDINATED'.
        /// </summary>
        [Output("updateStrategy")]
        public Output<Pulumi.AwsNative.MemoryDb.MultiRegionClusterUpdateStrategy?> UpdateStrategy { get; private set; } = null!;


        /// <summary>
        /// Create a MultiRegionCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MultiRegionCluster(string name, MultiRegionClusterArgs args, CustomResourceOptions? options = null)
            : base("aws-native:memorydb:MultiRegionCluster", name, args ?? new MultiRegionClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MultiRegionCluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:memorydb:MultiRegionCluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "engineVersion",
                    "multiRegionClusterNameSuffix",
                    "multiRegionParameterGroupName",
                    "tlsEnabled",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MultiRegionCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MultiRegionCluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MultiRegionCluster(name, id, options);
        }
    }

    public sealed class MultiRegionClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the multi region cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The engine type used by the multi region cluster.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// The Redis engine version used by the multi region cluster.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The name of the Multi Region cluster. This value must be unique as it also serves as the multi region cluster identifier.
        /// </summary>
        [Input("multiRegionClusterNameSuffix")]
        public Input<string>? MultiRegionClusterNameSuffix { get; set; }

        /// <summary>
        /// The name of the parameter group associated with the multi region cluster.
        /// </summary>
        [Input("multiRegionParameterGroupName")]
        public Input<string>? MultiRegionParameterGroupName { get; set; }

        /// <summary>
        /// The compute and memory capacity of the nodes in the multi region cluster.
        /// </summary>
        [Input("nodeType", required: true)]
        public Input<string> NodeType { get; set; } = null!;

        /// <summary>
        /// The number of shards the multi region cluster will contain.
        /// </summary>
        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this multi region cluster.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// A flag that enables in-transit encryption when set to true.
        /// 
        /// You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
        /// </summary>
        [Input("tlsEnabled")]
        public Input<bool>? TlsEnabled { get; set; }

        /// <summary>
        /// An enum string value that determines the update strategy for scaling. Possible values are 'COORDINATED' and 'UNCOORDINATED'. Default is 'COORDINATED'.
        /// </summary>
        [Input("updateStrategy")]
        public Input<Pulumi.AwsNative.MemoryDb.MultiRegionClusterUpdateStrategy>? UpdateStrategy { get; set; }

        public MultiRegionClusterArgs()
        {
        }
        public static new MultiRegionClusterArgs Empty => new MultiRegionClusterArgs();
    }
}
