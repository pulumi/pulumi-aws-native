// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CloudTrail
{
    /// <summary>
    /// Creates a trail that specifies the settings for delivery of log data to an Amazon S3 bucket. A maximum of five trails can exist in a region, irrespective of the region in which they were created.
    /// </summary>
    [AwsNativeResourceType("aws-native:cloudtrail:Trail")]
    public partial class Trail : Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
        /// </summary>
        [Output("cloudWatchLogsLogGroupArn")]
        public Output<string?> CloudWatchLogsLogGroupArn { get; private set; } = null!;

        /// <summary>
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        /// </summary>
        [Output("cloudWatchLogsRoleArn")]
        public Output<string?> CloudWatchLogsRoleArn { get; private set; } = null!;

        /// <summary>
        /// Specifies whether log file validation is enabled. The default is false.
        /// </summary>
        [Output("enableLogFileValidation")]
        public Output<bool?> EnableLogFileValidation { get; private set; } = null!;

        /// <summary>
        /// Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn't match any event selector, the trail doesn't log the event. You can configure up to five event selectors for a trail.
        /// </summary>
        [Output("eventSelectors")]
        public Output<ImmutableArray<Outputs.TrailEventSelector>> EventSelectors { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        /// </summary>
        [Output("includeGlobalServiceEvents")]
        public Output<bool?> IncludeGlobalServiceEvents { get; private set; } = null!;

        /// <summary>
        /// Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail.
        /// </summary>
        [Output("insightSelectors")]
        public Output<ImmutableArray<Outputs.TrailInsightSelector>> InsightSelectors { get; private set; } = null!;

        /// <summary>
        /// Whether the CloudTrail is currently logging AWS API calls.
        /// </summary>
        [Output("isLogging")]
        public Output<bool> IsLogging { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the trail applies only to the current region or to all regions. The default is false. If the trail exists only in the current region and this value is set to true, shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all regions and this value is set to false, the trail will remain in the region where it was created, and its shadow trails in other regions will be deleted. As a best practice, consider using trails that log events in all regions.
        /// </summary>
        [Output("isMultiRegionTrail")]
        public Output<bool?> IsMultiRegionTrail { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the trail is created for all accounts in an organization in AWS Organizations, or only for the current AWS account. The default is false, and cannot be true unless the call is made on behalf of an AWS account that is the master account for an organization in AWS Organizations.
        /// </summary>
        [Output("isOrganizationTrail")]
        public Output<bool?> IsOrganizationTrail { get; private set; } = null!;

        /// <summary>
        /// Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
        /// </summary>
        [Output("kMSKeyId")]
        public Output<string?> KMSKeyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
        /// </summary>
        [Output("s3BucketName")]
        public Output<string> S3BucketName { get; private set; } = null!;

        /// <summary>
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
        /// </summary>
        [Output("s3KeyPrefix")]
        public Output<string?> S3KeyPrefix { get; private set; } = null!;

        [Output("snsTopicArn")]
        public Output<string> SnsTopicArn { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
        /// </summary>
        [Output("snsTopicName")]
        public Output<string?> SnsTopicName { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.TrailTag>> Tags { get; private set; } = null!;

        [Output("trailName")]
        public Output<string?> TrailName { get; private set; } = null!;


        /// <summary>
        /// Create a Trail resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Trail(string name, TrailArgs args, CustomResourceOptions? options = null)
            : base("aws-native:cloudtrail:Trail", name, args ?? new TrailArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Trail(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:cloudtrail:Trail", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Trail resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Trail Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Trail(name, id, options);
        }
    }

    public sealed class TrailArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
        /// </summary>
        [Input("cloudWatchLogsLogGroupArn")]
        public Input<string>? CloudWatchLogsLogGroupArn { get; set; }

        /// <summary>
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        /// </summary>
        [Input("cloudWatchLogsRoleArn")]
        public Input<string>? CloudWatchLogsRoleArn { get; set; }

        /// <summary>
        /// Specifies whether log file validation is enabled. The default is false.
        /// </summary>
        [Input("enableLogFileValidation")]
        public Input<bool>? EnableLogFileValidation { get; set; }

        [Input("eventSelectors")]
        private InputList<Inputs.TrailEventSelectorArgs>? _eventSelectors;

        /// <summary>
        /// Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn't match any event selector, the trail doesn't log the event. You can configure up to five event selectors for a trail.
        /// </summary>
        public InputList<Inputs.TrailEventSelectorArgs> EventSelectors
        {
            get => _eventSelectors ?? (_eventSelectors = new InputList<Inputs.TrailEventSelectorArgs>());
            set => _eventSelectors = value;
        }

        /// <summary>
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        /// </summary>
        [Input("includeGlobalServiceEvents")]
        public Input<bool>? IncludeGlobalServiceEvents { get; set; }

        [Input("insightSelectors")]
        private InputList<Inputs.TrailInsightSelectorArgs>? _insightSelectors;

        /// <summary>
        /// Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail.
        /// </summary>
        public InputList<Inputs.TrailInsightSelectorArgs> InsightSelectors
        {
            get => _insightSelectors ?? (_insightSelectors = new InputList<Inputs.TrailInsightSelectorArgs>());
            set => _insightSelectors = value;
        }

        /// <summary>
        /// Whether the CloudTrail is currently logging AWS API calls.
        /// </summary>
        [Input("isLogging", required: true)]
        public Input<bool> IsLogging { get; set; } = null!;

        /// <summary>
        /// Specifies whether the trail applies only to the current region or to all regions. The default is false. If the trail exists only in the current region and this value is set to true, shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all regions and this value is set to false, the trail will remain in the region where it was created, and its shadow trails in other regions will be deleted. As a best practice, consider using trails that log events in all regions.
        /// </summary>
        [Input("isMultiRegionTrail")]
        public Input<bool>? IsMultiRegionTrail { get; set; }

        /// <summary>
        /// Specifies whether the trail is created for all accounts in an organization in AWS Organizations, or only for the current AWS account. The default is false, and cannot be true unless the call is made on behalf of an AWS account that is the master account for an organization in AWS Organizations.
        /// </summary>
        [Input("isOrganizationTrail")]
        public Input<bool>? IsOrganizationTrail { get; set; }

        /// <summary>
        /// Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
        /// </summary>
        [Input("kMSKeyId")]
        public Input<string>? KMSKeyId { get; set; }

        /// <summary>
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
        /// </summary>
        [Input("s3BucketName", required: true)]
        public Input<string> S3BucketName { get; set; } = null!;

        /// <summary>
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
        /// </summary>
        [Input("s3KeyPrefix")]
        public Input<string>? S3KeyPrefix { get; set; }

        /// <summary>
        /// Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
        /// </summary>
        [Input("snsTopicName")]
        public Input<string>? SnsTopicName { get; set; }

        [Input("tags")]
        private InputList<Inputs.TrailTagArgs>? _tags;
        public InputList<Inputs.TrailTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TrailTagArgs>());
            set => _tags = value;
        }

        [Input("trailName")]
        public Input<string>? TrailName { get; set; }

        public TrailArgs()
        {
        }
    }
}
