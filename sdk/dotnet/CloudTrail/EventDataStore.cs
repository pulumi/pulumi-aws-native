// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CloudTrail
{
    /// <summary>
    /// A storage lake of event data against which you can run complex SQL-based queries. An event data store can include events that you have logged on your account from the last 7 to 2557 or 3653 days (about seven or ten years) depending on the selected BillingMode.
    /// </summary>
    [AwsNativeResourceType("aws-native:cloudtrail:EventDataStore")]
    public partial class EventDataStore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The advanced event selectors that were used to select events for the data store.
        /// </summary>
        [Output("advancedEventSelectors")]
        public Output<ImmutableArray<Outputs.EventDataStoreAdvancedEventSelector>> AdvancedEventSelectors { get; private set; } = null!;

        /// <summary>
        /// The mode that the event data store will use to charge for event storage.
        /// </summary>
        [Output("billingMode")]
        public Output<string?> BillingMode { get; private set; } = null!;

        /// <summary>
        /// The timestamp of the event data store's creation.
        /// </summary>
        [Output("createdTimestamp")]
        public Output<string> CreatedTimestamp { get; private set; } = null!;

        /// <summary>
        /// The ARN of the event data store.
        /// </summary>
        [Output("eventDataStoreArn")]
        public Output<string> EventDataStoreArn { get; private set; } = null!;

        /// <summary>
        /// Indicates whether federation is enabled on an event data store.
        /// </summary>
        [Output("federationEnabled")]
        public Output<bool?> FederationEnabled { get; private set; } = null!;

        /// <summary>
        /// The ARN of the role used for event data store federation.
        /// </summary>
        [Output("federationRoleArn")]
        public Output<string?> FederationRoleArn { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the event data store is ingesting events.
        /// </summary>
        [Output("ingestionEnabled")]
        public Output<bool?> IngestionEnabled { get; private set; } = null!;

        /// <summary>
        /// Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing event data store. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store.
        /// </summary>
        [Output("insightSelectors")]
        public Output<ImmutableArray<Outputs.EventDataStoreInsightSelector>> InsightSelectors { get; private set; } = null!;

        /// <summary>
        /// Specifies the ARN of the event data store that will collect Insights events. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store
        /// </summary>
        [Output("insightsDestination")]
        public Output<string?> InsightsDestination { get; private set; } = null!;

        /// <summary>
        /// Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
        /// </summary>
        [Output("multiRegionEnabled")]
        public Output<bool?> MultiRegionEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the event data store.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Indicates that an event data store is collecting logged events for an organization.
        /// </summary>
        [Output("organizationEnabled")]
        public Output<bool?> OrganizationEnabled { get; private set; } = null!;

        /// <summary>
        /// The retention period, in days.
        /// </summary>
        [Output("retentionPeriod")]
        public Output<int?> RetentionPeriod { get; private set; } = null!;

        /// <summary>
        /// The status of an event data store. Values are STARTING_INGESTION, ENABLED, STOPPING_INGESTION, STOPPED_INGESTION and PENDING_DELETION.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the event data store is protected from termination.
        /// </summary>
        [Output("terminationProtectionEnabled")]
        public Output<bool?> TerminationProtectionEnabled { get; private set; } = null!;

        /// <summary>
        /// The timestamp showing when an event data store was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
        /// </summary>
        [Output("updatedTimestamp")]
        public Output<string> UpdatedTimestamp { get; private set; } = null!;


        /// <summary>
        /// Create a EventDataStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventDataStore(string name, EventDataStoreArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:cloudtrail:EventDataStore", name, args ?? new EventDataStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventDataStore(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:cloudtrail:EventDataStore", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventDataStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventDataStore Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new EventDataStore(name, id, options);
        }
    }

    public sealed class EventDataStoreArgs : global::Pulumi.ResourceArgs
    {
        [Input("advancedEventSelectors")]
        private InputList<Inputs.EventDataStoreAdvancedEventSelectorArgs>? _advancedEventSelectors;

        /// <summary>
        /// The advanced event selectors that were used to select events for the data store.
        /// </summary>
        public InputList<Inputs.EventDataStoreAdvancedEventSelectorArgs> AdvancedEventSelectors
        {
            get => _advancedEventSelectors ?? (_advancedEventSelectors = new InputList<Inputs.EventDataStoreAdvancedEventSelectorArgs>());
            set => _advancedEventSelectors = value;
        }

        /// <summary>
        /// The mode that the event data store will use to charge for event storage.
        /// </summary>
        [Input("billingMode")]
        public Input<string>? BillingMode { get; set; }

        /// <summary>
        /// Indicates whether federation is enabled on an event data store.
        /// </summary>
        [Input("federationEnabled")]
        public Input<bool>? FederationEnabled { get; set; }

        /// <summary>
        /// The ARN of the role used for event data store federation.
        /// </summary>
        [Input("federationRoleArn")]
        public Input<string>? FederationRoleArn { get; set; }

        /// <summary>
        /// Indicates whether the event data store is ingesting events.
        /// </summary>
        [Input("ingestionEnabled")]
        public Input<bool>? IngestionEnabled { get; set; }

        [Input("insightSelectors")]
        private InputList<Inputs.EventDataStoreInsightSelectorArgs>? _insightSelectors;

        /// <summary>
        /// Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing event data store. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store.
        /// </summary>
        public InputList<Inputs.EventDataStoreInsightSelectorArgs> InsightSelectors
        {
            get => _insightSelectors ?? (_insightSelectors = new InputList<Inputs.EventDataStoreInsightSelectorArgs>());
            set => _insightSelectors = value;
        }

        /// <summary>
        /// Specifies the ARN of the event data store that will collect Insights events. Both InsightSelectors and InsightsDestination need to have a value in order to enable Insights events on an event data store
        /// </summary>
        [Input("insightsDestination")]
        public Input<string>? InsightsDestination { get; set; }

        /// <summary>
        /// Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by 'alias/', a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
        /// </summary>
        [Input("multiRegionEnabled")]
        public Input<bool>? MultiRegionEnabled { get; set; }

        /// <summary>
        /// The name of the event data store.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Indicates that an event data store is collecting logged events for an organization.
        /// </summary>
        [Input("organizationEnabled")]
        public Input<bool>? OrganizationEnabled { get; set; }

        /// <summary>
        /// The retention period, in days.
        /// </summary>
        [Input("retentionPeriod")]
        public Input<int>? RetentionPeriod { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Indicates whether the event data store is protected from termination.
        /// </summary>
        [Input("terminationProtectionEnabled")]
        public Input<bool>? TerminationProtectionEnabled { get; set; }

        public EventDataStoreArgs()
        {
        }
        public static new EventDataStoreArgs Empty => new EventDataStoreArgs();
    }
}
