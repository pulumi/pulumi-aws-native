// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.DMS
{
    /// <summary>
    /// Resource Type definition for AWS::DMS::ReplicationInstance
    /// </summary>
    [Obsolete(@"ReplicationInstance is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")]
    [AwsNativeResourceType("aws-native:dms:ReplicationInstance")]
    public partial class ReplicationInstance : Pulumi.CustomResource
    {
        [Output("allocatedStorage")]
        public Output<int?> AllocatedStorage { get; private set; } = null!;

        [Output("allowMajorVersionUpgrade")]
        public Output<bool?> AllowMajorVersionUpgrade { get; private set; } = null!;

        [Output("autoMinorVersionUpgrade")]
        public Output<bool?> AutoMinorVersionUpgrade { get; private set; } = null!;

        [Output("availabilityZone")]
        public Output<string?> AvailabilityZone { get; private set; } = null!;

        [Output("engineVersion")]
        public Output<string?> EngineVersion { get; private set; } = null!;

        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        [Output("multiAZ")]
        public Output<bool?> MultiAZ { get; private set; } = null!;

        [Output("preferredMaintenanceWindow")]
        public Output<string?> PreferredMaintenanceWindow { get; private set; } = null!;

        [Output("publiclyAccessible")]
        public Output<bool?> PubliclyAccessible { get; private set; } = null!;

        [Output("replicationInstanceClass")]
        public Output<string> ReplicationInstanceClass { get; private set; } = null!;

        [Output("replicationInstanceIdentifier")]
        public Output<string?> ReplicationInstanceIdentifier { get; private set; } = null!;

        [Output("replicationInstancePrivateIpAddresses")]
        public Output<ImmutableArray<string>> ReplicationInstancePrivateIpAddresses { get; private set; } = null!;

        [Output("replicationInstancePublicIpAddresses")]
        public Output<ImmutableArray<string>> ReplicationInstancePublicIpAddresses { get; private set; } = null!;

        [Output("replicationSubnetGroupIdentifier")]
        public Output<string?> ReplicationSubnetGroupIdentifier { get; private set; } = null!;

        [Output("resourceIdentifier")]
        public Output<string?> ResourceIdentifier { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.ReplicationInstanceTag>> Tags { get; private set; } = null!;

        [Output("vpcSecurityGroupIds")]
        public Output<ImmutableArray<string>> VpcSecurityGroupIds { get; private set; } = null!;


        /// <summary>
        /// Create a ReplicationInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReplicationInstance(string name, ReplicationInstanceArgs args, CustomResourceOptions? options = null)
            : base("aws-native:dms:ReplicationInstance", name, args ?? new ReplicationInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReplicationInstance(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:dms:ReplicationInstance", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReplicationInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReplicationInstance Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ReplicationInstance(name, id, options);
        }
    }

    public sealed class ReplicationInstanceArgs : Pulumi.ResourceArgs
    {
        [Input("allocatedStorage")]
        public Input<int>? AllocatedStorage { get; set; }

        [Input("allowMajorVersionUpgrade")]
        public Input<bool>? AllowMajorVersionUpgrade { get; set; }

        [Input("autoMinorVersionUpgrade")]
        public Input<bool>? AutoMinorVersionUpgrade { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("multiAZ")]
        public Input<bool>? MultiAZ { get; set; }

        [Input("preferredMaintenanceWindow")]
        public Input<string>? PreferredMaintenanceWindow { get; set; }

        [Input("publiclyAccessible")]
        public Input<bool>? PubliclyAccessible { get; set; }

        [Input("replicationInstanceClass", required: true)]
        public Input<string> ReplicationInstanceClass { get; set; } = null!;

        [Input("replicationInstanceIdentifier")]
        public Input<string>? ReplicationInstanceIdentifier { get; set; }

        [Input("replicationSubnetGroupIdentifier")]
        public Input<string>? ReplicationSubnetGroupIdentifier { get; set; }

        [Input("resourceIdentifier")]
        public Input<string>? ResourceIdentifier { get; set; }

        [Input("tags")]
        private InputList<Inputs.ReplicationInstanceTagArgs>? _tags;
        public InputList<Inputs.ReplicationInstanceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ReplicationInstanceTagArgs>());
            set => _tags = value;
        }

        [Input("vpcSecurityGroupIds")]
        private InputList<string>? _vpcSecurityGroupIds;
        public InputList<string> VpcSecurityGroupIds
        {
            get => _vpcSecurityGroupIds ?? (_vpcSecurityGroupIds = new InputList<string>());
            set => _vpcSecurityGroupIds = value;
        }

        public ReplicationInstanceArgs()
        {
        }
    }
}
