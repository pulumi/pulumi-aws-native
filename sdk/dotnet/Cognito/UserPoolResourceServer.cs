// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Cognito
{
    /// <summary>
    /// Resource Type definition for AWS::Cognito::UserPoolResourceServer
    /// </summary>
    [AwsNativeResourceType("aws-native:cognito:UserPoolResourceServer")]
    public partial class UserPoolResourceServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
        /// 
        /// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// A friendly name for the resource server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of scopes. Each scope is a map with keys `ScopeName` and `ScopeDescription` .
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<Outputs.UserPoolResourceServerResourceServerScopeType>> Scopes { get; private set; } = null!;

        /// <summary>
        /// The user pool ID for the user pool.
        /// </summary>
        [Output("userPoolId")]
        public Output<string> UserPoolId { get; private set; } = null!;


        /// <summary>
        /// Create a UserPoolResourceServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserPoolResourceServer(string name, UserPoolResourceServerArgs args, CustomResourceOptions? options = null)
            : base("aws-native:cognito:UserPoolResourceServer", name, args ?? new UserPoolResourceServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserPoolResourceServer(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:cognito:UserPoolResourceServer", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "identifier",
                    "userPoolId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserPoolResourceServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserPoolResourceServer Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new UserPoolResourceServer(name, id, options);
        }
    }

    public sealed class UserPoolResourceServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
        /// 
        /// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// A friendly name for the resource server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("scopes")]
        private InputList<Inputs.UserPoolResourceServerResourceServerScopeTypeArgs>? _scopes;

        /// <summary>
        /// A list of scopes. Each scope is a map with keys `ScopeName` and `ScopeDescription` .
        /// </summary>
        public InputList<Inputs.UserPoolResourceServerResourceServerScopeTypeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.UserPoolResourceServerResourceServerScopeTypeArgs>());
            set => _scopes = value;
        }

        /// <summary>
        /// The user pool ID for the user pool.
        /// </summary>
        [Input("userPoolId", required: true)]
        public Input<string> UserPoolId { get; set; } = null!;

        public UserPoolResourceServerArgs()
        {
        }
        public static new UserPoolResourceServerArgs Empty => new UserPoolResourceServerArgs();
    }
}
