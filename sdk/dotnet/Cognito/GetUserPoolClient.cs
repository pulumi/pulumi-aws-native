// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Cognito
{
    public static class GetUserPoolClient
    {
        /// <summary>
        /// Resource Type definition for AWS::Cognito::UserPoolClient
        /// </summary>
        public static Task<GetUserPoolClientResult> InvokeAsync(GetUserPoolClientArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUserPoolClientResult>("aws-native:cognito:getUserPoolClient", args ?? new GetUserPoolClientArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Cognito::UserPoolClient
        /// </summary>
        public static Output<GetUserPoolClientResult> Invoke(GetUserPoolClientInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUserPoolClientResult>("aws-native:cognito:getUserPoolClient", args ?? new GetUserPoolClientInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserPoolClientArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetUserPoolClientArgs()
        {
        }
    }

    public sealed class GetUserPoolClientInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetUserPoolClientInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetUserPoolClientResult
    {
        public readonly int? AccessTokenValidity;
        public readonly ImmutableArray<string> AllowedOAuthFlows;
        public readonly bool? AllowedOAuthFlowsUserPoolClient;
        public readonly ImmutableArray<string> AllowedOAuthScopes;
        public readonly Outputs.UserPoolClientAnalyticsConfiguration? AnalyticsConfiguration;
        public readonly ImmutableArray<string> CallbackURLs;
        public readonly string? ClientName;
        public readonly string? ClientSecret;
        public readonly string? DefaultRedirectURI;
        public readonly bool? EnableTokenRevocation;
        public readonly ImmutableArray<string> ExplicitAuthFlows;
        public readonly string? Id;
        public readonly int? IdTokenValidity;
        public readonly ImmutableArray<string> LogoutURLs;
        public readonly string? Name;
        public readonly string? PreventUserExistenceErrors;
        public readonly ImmutableArray<string> ReadAttributes;
        public readonly int? RefreshTokenValidity;
        public readonly ImmutableArray<string> SupportedIdentityProviders;
        public readonly Outputs.UserPoolClientTokenValidityUnits? TokenValidityUnits;
        public readonly ImmutableArray<string> WriteAttributes;

        [OutputConstructor]
        private GetUserPoolClientResult(
            int? accessTokenValidity,

            ImmutableArray<string> allowedOAuthFlows,

            bool? allowedOAuthFlowsUserPoolClient,

            ImmutableArray<string> allowedOAuthScopes,

            Outputs.UserPoolClientAnalyticsConfiguration? analyticsConfiguration,

            ImmutableArray<string> callbackURLs,

            string? clientName,

            string? clientSecret,

            string? defaultRedirectURI,

            bool? enableTokenRevocation,

            ImmutableArray<string> explicitAuthFlows,

            string? id,

            int? idTokenValidity,

            ImmutableArray<string> logoutURLs,

            string? name,

            string? preventUserExistenceErrors,

            ImmutableArray<string> readAttributes,

            int? refreshTokenValidity,

            ImmutableArray<string> supportedIdentityProviders,

            Outputs.UserPoolClientTokenValidityUnits? tokenValidityUnits,

            ImmutableArray<string> writeAttributes)
        {
            AccessTokenValidity = accessTokenValidity;
            AllowedOAuthFlows = allowedOAuthFlows;
            AllowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient;
            AllowedOAuthScopes = allowedOAuthScopes;
            AnalyticsConfiguration = analyticsConfiguration;
            CallbackURLs = callbackURLs;
            ClientName = clientName;
            ClientSecret = clientSecret;
            DefaultRedirectURI = defaultRedirectURI;
            EnableTokenRevocation = enableTokenRevocation;
            ExplicitAuthFlows = explicitAuthFlows;
            Id = id;
            IdTokenValidity = idTokenValidity;
            LogoutURLs = logoutURLs;
            Name = name;
            PreventUserExistenceErrors = preventUserExistenceErrors;
            ReadAttributes = readAttributes;
            RefreshTokenValidity = refreshTokenValidity;
            SupportedIdentityProviders = supportedIdentityProviders;
            TokenValidityUnits = tokenValidityUnits;
            WriteAttributes = writeAttributes;
        }
    }
}
