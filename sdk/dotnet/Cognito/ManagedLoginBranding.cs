// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Cognito
{
    /// <summary>
    /// Resource Type definition for AWS::Cognito::ManagedLoginBranding
    /// </summary>
    [AwsNativeResourceType("aws-native:cognito:ManagedLoginBranding")]
    public partial class ManagedLoginBranding : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
        /// </summary>
        [Output("assets")]
        public Output<ImmutableArray<Outputs.ManagedLoginBrandingAssetType>> Assets { get; private set; } = null!;

        /// <summary>
        /// The app client that's assigned to the branding style that you want more information about.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// The ID of the managed login branding style.
        /// </summary>
        [Output("managedLoginBrandingId")]
        public Output<string> ManagedLoginBrandingId { get; private set; } = null!;

        /// <summary>
        /// When `true` , returns values for branding options that are unchanged from Amazon Cognito defaults. When `false` or when you omit this parameter, returns only values that you customized in your branding style.
        /// </summary>
        [Output("returnMergedResources")]
        public Output<bool?> ReturnMergedResources { get; private set; } = null!;

        /// <summary>
        /// A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
        /// </summary>
        [Output("settings")]
        public Output<object?> Settings { get; private set; } = null!;

        /// <summary>
        /// When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding editor.
        /// 
        /// When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
        /// </summary>
        [Output("useCognitoProvidedValues")]
        public Output<bool?> UseCognitoProvidedValues { get; private set; } = null!;

        /// <summary>
        /// The user pool where the branding style is assigned.
        /// </summary>
        [Output("userPoolId")]
        public Output<string> UserPoolId { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedLoginBranding resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedLoginBranding(string name, ManagedLoginBrandingArgs args, CustomResourceOptions? options = null)
            : base("aws-native:cognito:ManagedLoginBranding", name, args ?? new ManagedLoginBrandingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedLoginBranding(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:cognito:ManagedLoginBranding", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "clientId",
                    "userPoolId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedLoginBranding resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedLoginBranding Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ManagedLoginBranding(name, id, options);
        }
    }

    public sealed class ManagedLoginBrandingArgs : global::Pulumi.ResourceArgs
    {
        [Input("assets")]
        private InputList<Inputs.ManagedLoginBrandingAssetTypeArgs>? _assets;

        /// <summary>
        /// An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
        /// </summary>
        public InputList<Inputs.ManagedLoginBrandingAssetTypeArgs> Assets
        {
            get => _assets ?? (_assets = new InputList<Inputs.ManagedLoginBrandingAssetTypeArgs>());
            set => _assets = value;
        }

        /// <summary>
        /// The app client that's assigned to the branding style that you want more information about.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// When `true` , returns values for branding options that are unchanged from Amazon Cognito defaults. When `false` or when you omit this parameter, returns only values that you customized in your branding style.
        /// </summary>
        [Input("returnMergedResources")]
        public Input<bool>? ReturnMergedResources { get; set; }

        /// <summary>
        /// A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
        /// </summary>
        [Input("settings")]
        public Input<object>? Settings { get; set; }

        /// <summary>
        /// When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding editor.
        /// 
        /// When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
        /// </summary>
        [Input("useCognitoProvidedValues")]
        public Input<bool>? UseCognitoProvidedValues { get; set; }

        /// <summary>
        /// The user pool where the branding style is assigned.
        /// </summary>
        [Input("userPoolId", required: true)]
        public Input<string> UserPoolId { get; set; } = null!;

        public ManagedLoginBrandingArgs()
        {
        }
        public static new ManagedLoginBrandingArgs Empty => new ManagedLoginBrandingArgs();
    }
}
