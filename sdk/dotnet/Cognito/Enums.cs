// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Cognito
{
    [EnumType]
    public readonly struct ManagedLoginBrandingCategoryType : IEquatable<ManagedLoginBrandingCategoryType>
    {
        private readonly string _value;

        private ManagedLoginBrandingCategoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedLoginBrandingCategoryType FaviconIco { get; } = new ManagedLoginBrandingCategoryType("FAVICON_ICO");
        public static ManagedLoginBrandingCategoryType FaviconSvg { get; } = new ManagedLoginBrandingCategoryType("FAVICON_SVG");
        public static ManagedLoginBrandingCategoryType EmailGraphic { get; } = new ManagedLoginBrandingCategoryType("EMAIL_GRAPHIC");
        public static ManagedLoginBrandingCategoryType SmsGraphic { get; } = new ManagedLoginBrandingCategoryType("SMS_GRAPHIC");
        public static ManagedLoginBrandingCategoryType AuthAppGraphic { get; } = new ManagedLoginBrandingCategoryType("AUTH_APP_GRAPHIC");
        public static ManagedLoginBrandingCategoryType PasswordGraphic { get; } = new ManagedLoginBrandingCategoryType("PASSWORD_GRAPHIC");
        public static ManagedLoginBrandingCategoryType PasskeyGraphic { get; } = new ManagedLoginBrandingCategoryType("PASSKEY_GRAPHIC");
        public static ManagedLoginBrandingCategoryType PageHeaderLogo { get; } = new ManagedLoginBrandingCategoryType("PAGE_HEADER_LOGO");
        public static ManagedLoginBrandingCategoryType PageHeaderBackground { get; } = new ManagedLoginBrandingCategoryType("PAGE_HEADER_BACKGROUND");
        public static ManagedLoginBrandingCategoryType PageFooterLogo { get; } = new ManagedLoginBrandingCategoryType("PAGE_FOOTER_LOGO");
        public static ManagedLoginBrandingCategoryType PageFooterBackground { get; } = new ManagedLoginBrandingCategoryType("PAGE_FOOTER_BACKGROUND");
        public static ManagedLoginBrandingCategoryType PageBackground { get; } = new ManagedLoginBrandingCategoryType("PAGE_BACKGROUND");
        public static ManagedLoginBrandingCategoryType FormBackground { get; } = new ManagedLoginBrandingCategoryType("FORM_BACKGROUND");
        public static ManagedLoginBrandingCategoryType FormLogo { get; } = new ManagedLoginBrandingCategoryType("FORM_LOGO");
        public static ManagedLoginBrandingCategoryType IdpButtonIcon { get; } = new ManagedLoginBrandingCategoryType("IDP_BUTTON_ICON");

        public static bool operator ==(ManagedLoginBrandingCategoryType left, ManagedLoginBrandingCategoryType right) => left.Equals(right);
        public static bool operator !=(ManagedLoginBrandingCategoryType left, ManagedLoginBrandingCategoryType right) => !left.Equals(right);

        public static explicit operator string(ManagedLoginBrandingCategoryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedLoginBrandingCategoryType other && Equals(other);
        public bool Equals(ManagedLoginBrandingCategoryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ManagedLoginBrandingColorModeType : IEquatable<ManagedLoginBrandingColorModeType>
    {
        private readonly string _value;

        private ManagedLoginBrandingColorModeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedLoginBrandingColorModeType Light { get; } = new ManagedLoginBrandingColorModeType("LIGHT");
        public static ManagedLoginBrandingColorModeType Dark { get; } = new ManagedLoginBrandingColorModeType("DARK");
        public static ManagedLoginBrandingColorModeType Dynamic { get; } = new ManagedLoginBrandingColorModeType("DYNAMIC");

        public static bool operator ==(ManagedLoginBrandingColorModeType left, ManagedLoginBrandingColorModeType right) => left.Equals(right);
        public static bool operator !=(ManagedLoginBrandingColorModeType left, ManagedLoginBrandingColorModeType right) => !left.Equals(right);

        public static explicit operator string(ManagedLoginBrandingColorModeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedLoginBrandingColorModeType other && Equals(other);
        public bool Equals(ManagedLoginBrandingColorModeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ManagedLoginBrandingExtensionType : IEquatable<ManagedLoginBrandingExtensionType>
    {
        private readonly string _value;

        private ManagedLoginBrandingExtensionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ManagedLoginBrandingExtensionType Ico { get; } = new ManagedLoginBrandingExtensionType("ICO");
        public static ManagedLoginBrandingExtensionType Jpeg { get; } = new ManagedLoginBrandingExtensionType("JPEG");
        public static ManagedLoginBrandingExtensionType Png { get; } = new ManagedLoginBrandingExtensionType("PNG");
        public static ManagedLoginBrandingExtensionType Svg { get; } = new ManagedLoginBrandingExtensionType("SVG");
        public static ManagedLoginBrandingExtensionType Webp { get; } = new ManagedLoginBrandingExtensionType("WEBP");

        public static bool operator ==(ManagedLoginBrandingExtensionType left, ManagedLoginBrandingExtensionType right) => left.Equals(right);
        public static bool operator !=(ManagedLoginBrandingExtensionType left, ManagedLoginBrandingExtensionType right) => !left.Equals(right);

        public static explicit operator string(ManagedLoginBrandingExtensionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ManagedLoginBrandingExtensionType other && Equals(other);
        public bool Equals(ManagedLoginBrandingExtensionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The user pool [feature plan](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-sign-in-feature-plans.html) , or tier. This parameter determines the eligibility of the user pool for features like managed login, access-token customization, and threat protection. Defaults to `ESSENTIALS` .
    /// </summary>
    [EnumType]
    public readonly struct UserPoolTier : IEquatable<UserPoolTier>
    {
        private readonly string _value;

        private UserPoolTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserPoolTier Lite { get; } = new UserPoolTier("LITE");
        public static UserPoolTier Essentials { get; } = new UserPoolTier("ESSENTIALS");
        public static UserPoolTier Plus { get; } = new UserPoolTier("PLUS");

        public static bool operator ==(UserPoolTier left, UserPoolTier right) => left.Equals(right);
        public static bool operator !=(UserPoolTier left, UserPoolTier right) => !left.Equals(right);

        public static explicit operator string(UserPoolTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserPoolTier other && Equals(other);
        public bool Equals(UserPoolTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
