// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Cognito
{
    public static class GetUserPoolResourceServer
    {
        /// <summary>
        /// Resource Type definition for AWS::Cognito::UserPoolResourceServer
        /// </summary>
        public static Task<GetUserPoolResourceServerResult> InvokeAsync(GetUserPoolResourceServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserPoolResourceServerResult>("aws-native:cognito:getUserPoolResourceServer", args ?? new GetUserPoolResourceServerArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Cognito::UserPoolResourceServer
        /// </summary>
        public static Output<GetUserPoolResourceServerResult> Invoke(GetUserPoolResourceServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserPoolResourceServerResult>("aws-native:cognito:getUserPoolResourceServer", args ?? new GetUserPoolResourceServerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Cognito::UserPoolResourceServer
        /// </summary>
        public static Output<GetUserPoolResourceServerResult> Invoke(GetUserPoolResourceServerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserPoolResourceServerResult>("aws-native:cognito:getUserPoolResourceServer", args ?? new GetUserPoolResourceServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserPoolResourceServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
        /// 
        /// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        /// <summary>
        /// The ID of the user pool where you want to create a resource server.
        /// </summary>
        [Input("userPoolId", required: true)]
        public string UserPoolId { get; set; } = null!;

        public GetUserPoolResourceServerArgs()
        {
        }
        public static new GetUserPoolResourceServerArgs Empty => new GetUserPoolResourceServerArgs();
    }

    public sealed class GetUserPoolResourceServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique resource server identifier for the resource server. The identifier can be an API friendly name like `solar-system-data` . You can also set an API URL like `https://solar-system-data-api.example.com` as your identifier.
        /// 
        /// Amazon Cognito represents scopes in the access token in the format `$resource-server-identifier/$scope` . Longer scope-identifier strings increase the size of your access tokens.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// The ID of the user pool where you want to create a resource server.
        /// </summary>
        [Input("userPoolId", required: true)]
        public Input<string> UserPoolId { get; set; } = null!;

        public GetUserPoolResourceServerInvokeArgs()
        {
        }
        public static new GetUserPoolResourceServerInvokeArgs Empty => new GetUserPoolResourceServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserPoolResourceServerResult
    {
        /// <summary>
        /// A friendly name for the resource server.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// A list of scopes. Each scope is a map with keys `ScopeName` and `ScopeDescription` .
        /// </summary>
        public readonly ImmutableArray<Outputs.UserPoolResourceServerResourceServerScopeType> Scopes;

        [OutputConstructor]
        private GetUserPoolResourceServerResult(
            string? name,

            ImmutableArray<Outputs.UserPoolResourceServerResourceServerScopeType> scopes)
        {
            Name = name;
            Scopes = scopes;
        }
    }
}
