// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Amplify
{
    public static class GetDomain
    {
        /// <summary>
        /// The AWS::Amplify::Domain resource allows you to connect a custom domain to your app.
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("aws-native:amplify:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::Amplify::Domain resource allows you to connect a custom domain to your app.
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainResult>("aws-native:amplify:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetDomainArgs()
        {
        }
    }

    public sealed class GetDomainInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetDomainInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        public readonly string? Arn;
        public readonly ImmutableArray<string> AutoSubDomainCreationPatterns;
        public readonly string? AutoSubDomainIAMRole;
        public readonly string? CertificateRecord;
        public readonly string? DomainStatus;
        public readonly bool? EnableAutoSubDomain;
        public readonly string? StatusReason;
        public readonly ImmutableArray<Outputs.DomainSubDomainSetting> SubDomainSettings;

        [OutputConstructor]
        private GetDomainResult(
            string? arn,

            ImmutableArray<string> autoSubDomainCreationPatterns,

            string? autoSubDomainIAMRole,

            string? certificateRecord,

            string? domainStatus,

            bool? enableAutoSubDomain,

            string? statusReason,

            ImmutableArray<Outputs.DomainSubDomainSetting> subDomainSettings)
        {
            Arn = arn;
            AutoSubDomainCreationPatterns = autoSubDomainCreationPatterns;
            AutoSubDomainIAMRole = autoSubDomainIAMRole;
            CertificateRecord = certificateRecord;
            DomainStatus = domainStatus;
            EnableAutoSubDomain = enableAutoSubDomain;
            StatusReason = statusReason;
            SubDomainSettings = subDomainSettings;
        }
    }
}
