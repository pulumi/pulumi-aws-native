// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Amplify
{
    public static class GetDomain
    {
        /// <summary>
        /// The AWS::Amplify::Domain resource allows you to connect a custom domain to your app.
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("aws-native:amplify:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::Amplify::Domain resource allows you to connect a custom domain to your app.
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainResult>("aws-native:amplify:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::Amplify::Domain resource allows you to connect a custom domain to your app.
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainResult>("aws-native:amplify:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN for the Domain Association.
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetDomainArgs()
        {
        }
        public static new GetDomainArgs Empty => new GetDomainArgs();
    }

    public sealed class GetDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN for the Domain Association.
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetDomainInvokeArgs()
        {
        }
        public static new GetDomainInvokeArgs Empty => new GetDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        /// <summary>
        /// ARN for the Domain Association.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// Sets the branch patterns for automatic subdomain creation.
        /// </summary>
        public readonly ImmutableArray<string> AutoSubDomainCreationPatterns;
        /// <summary>
        /// The required AWS Identity and Access Management (IAMlong) service role for the Amazon Resource Name (ARN) for automatically creating subdomains.
        /// </summary>
        public readonly string? AutoSubDomainIamRole;
        public readonly Outputs.DomainCertificate? Certificate;
        /// <summary>
        /// DNS Record for certificate verification.
        /// </summary>
        public readonly string? CertificateRecord;
        /// <summary>
        /// Status for the Domain Association.
        /// </summary>
        public readonly string? DomainStatus;
        /// <summary>
        /// Enables the automated creation of subdomains for branches.
        /// </summary>
        public readonly bool? EnableAutoSubDomain;
        /// <summary>
        /// Reason for the current status of the domain.
        /// </summary>
        public readonly string? StatusReason;
        /// <summary>
        /// The setting for the subdomain.
        /// </summary>
        public readonly ImmutableArray<Outputs.DomainSubDomainSetting> SubDomainSettings;
        /// <summary>
        /// The status of the domain update operation that is currently in progress. The following list describes the valid update states.
        /// 
        /// - **REQUESTING_CERTIFICATE** - The certificate is in the process of being updated.
        /// - **PENDING_VERIFICATION** - Indicates that an Amplify managed certificate is in the process of being verified. This occurs during the creation of a custom domain or when a custom domain is updated to use a managed certificate.
        /// - **IMPORTING_CUSTOM_CERTIFICATE** - Indicates that an Amplify custom certificate is in the process of being imported. This occurs during the creation of a custom domain or when a custom domain is updated to use a custom certificate.
        /// - **PENDING_DEPLOYMENT** - Indicates that the subdomain or certificate changes are being propagated.
        /// - **AWAITING_APP_CNAME** - Amplify is waiting for CNAME records corresponding to subdomains to be propagated. If your custom domain is on RouteÂ 53, Amplify handles this for you automatically. For more information about custom domains, see [Setting up custom domains](https://docs.aws.amazon.com/amplify/latest/userguide/custom-domains.html) in the *Amplify Hosting User Guide* .
        /// - **UPDATE_COMPLETE** - The certificate has been associated with a domain.
        /// - **UPDATE_FAILED** - The certificate has failed to be provisioned or associated, and there is no existing active certificate to roll back to.
        /// </summary>
        public readonly string? UpdateStatus;

        [OutputConstructor]
        private GetDomainResult(
            string? arn,

            ImmutableArray<string> autoSubDomainCreationPatterns,

            string? autoSubDomainIamRole,

            Outputs.DomainCertificate? certificate,

            string? certificateRecord,

            string? domainStatus,

            bool? enableAutoSubDomain,

            string? statusReason,

            ImmutableArray<Outputs.DomainSubDomainSetting> subDomainSettings,

            string? updateStatus)
        {
            Arn = arn;
            AutoSubDomainCreationPatterns = autoSubDomainCreationPatterns;
            AutoSubDomainIamRole = autoSubDomainIamRole;
            Certificate = certificate;
            CertificateRecord = certificateRecord;
            DomainStatus = domainStatus;
            EnableAutoSubDomain = enableAutoSubDomain;
            StatusReason = statusReason;
            SubDomainSettings = subDomainSettings;
            UpdateStatus = updateStatus;
        }
    }
}
