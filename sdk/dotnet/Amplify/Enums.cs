// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Amplify
{
    /// <summary>
    /// Stage for the auto created branch.
    /// </summary>
    [EnumType]
    public readonly struct AppAutoBranchCreationConfigStage : IEquatable<AppAutoBranchCreationConfigStage>
    {
        private readonly string _value;

        private AppAutoBranchCreationConfigStage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppAutoBranchCreationConfigStage Experimental { get; } = new AppAutoBranchCreationConfigStage("EXPERIMENTAL");
        public static AppAutoBranchCreationConfigStage Beta { get; } = new AppAutoBranchCreationConfigStage("BETA");
        public static AppAutoBranchCreationConfigStage PullRequest { get; } = new AppAutoBranchCreationConfigStage("PULL_REQUEST");
        public static AppAutoBranchCreationConfigStage Production { get; } = new AppAutoBranchCreationConfigStage("PRODUCTION");
        public static AppAutoBranchCreationConfigStage Development { get; } = new AppAutoBranchCreationConfigStage("DEVELOPMENT");

        public static bool operator ==(AppAutoBranchCreationConfigStage left, AppAutoBranchCreationConfigStage right) => left.Equals(right);
        public static bool operator !=(AppAutoBranchCreationConfigStage left, AppAutoBranchCreationConfigStage right) => !left.Equals(right);

        public static explicit operator string(AppAutoBranchCreationConfigStage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppAutoBranchCreationConfigStage other && Equals(other);
        public bool Equals(AppAutoBranchCreationConfigStage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AppCacheConfigType : IEquatable<AppCacheConfigType>
    {
        private readonly string _value;

        private AppCacheConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppCacheConfigType AmplifyManaged { get; } = new AppCacheConfigType("AMPLIFY_MANAGED");
        public static AppCacheConfigType AmplifyManagedNoCookies { get; } = new AppCacheConfigType("AMPLIFY_MANAGED_NO_COOKIES");

        public static bool operator ==(AppCacheConfigType left, AppCacheConfigType right) => left.Equals(right);
        public static bool operator !=(AppCacheConfigType left, AppCacheConfigType right) => !left.Equals(right);

        public static explicit operator string(AppCacheConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppCacheConfigType other && Equals(other);
        public bool Equals(AppCacheConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The platform for the Amplify app. For a static app, set the platform type to `WEB` . For a dynamic server-side rendered (SSR) app, set the platform type to `WEB_COMPUTE` . For an app requiring Amplify Hosting's original SSR support only, set the platform type to `WEB_DYNAMIC` .
    /// 
    /// If you are deploying an SSG only app with Next.js version 14 or later, you must set the platform type to `WEB_COMPUTE` and set the artifacts `baseDirectory` to `.next` in the application's build settings. For an example of the build specification settings, see [Amplify build settings for a Next.js 14 SSG application](https://docs.aws.amazon.com/amplify/latest/userguide/deploy-nextjs-app.html#build-setting-detection-ssg-14) in the *Amplify Hosting User Guide* .
    /// </summary>
    [EnumType]
    public readonly struct AppPlatform : IEquatable<AppPlatform>
    {
        private readonly string _value;

        private AppPlatform(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AppPlatform Web { get; } = new AppPlatform("WEB");
        public static AppPlatform WebDynamic { get; } = new AppPlatform("WEB_DYNAMIC");
        public static AppPlatform WebCompute { get; } = new AppPlatform("WEB_COMPUTE");

        public static bool operator ==(AppPlatform left, AppPlatform right) => left.Equals(right);
        public static bool operator !=(AppPlatform left, AppPlatform right) => !left.Equals(right);

        public static explicit operator string(AppPlatform value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AppPlatform other && Equals(other);
        public bool Equals(AppPlatform other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the current stage for the branch.
    /// </summary>
    [EnumType]
    public readonly struct BranchStage : IEquatable<BranchStage>
    {
        private readonly string _value;

        private BranchStage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BranchStage Experimental { get; } = new BranchStage("EXPERIMENTAL");
        public static BranchStage Beta { get; } = new BranchStage("BETA");
        public static BranchStage PullRequest { get; } = new BranchStage("PULL_REQUEST");
        public static BranchStage Production { get; } = new BranchStage("PRODUCTION");
        public static BranchStage Development { get; } = new BranchStage("DEVELOPMENT");

        public static bool operator ==(BranchStage left, BranchStage right) => left.Equals(right);
        public static bool operator !=(BranchStage left, BranchStage right) => !left.Equals(right);

        public static explicit operator string(BranchStage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BranchStage other && Equals(other);
        public bool Equals(BranchStage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of SSL/TLS certificate that you want to use.
    /// 
    /// Specify `AMPLIFY_MANAGED` to use the default certificate that Amplify provisions for you.
    /// 
    /// Specify `CUSTOM` to use your own certificate that you have already added to AWS Certificate Manager in your AWS account . Make sure you request (or import) the certificate in the US East (N. Virginia) Region (us-east-1). For more information about using ACM, see [Importing certificates into AWS Certificate Manager](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the *ACM User guide* .
    /// </summary>
    [EnumType]
    public readonly struct DomainCertificateCertificateType : IEquatable<DomainCertificateCertificateType>
    {
        private readonly string _value;

        private DomainCertificateCertificateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainCertificateCertificateType AmplifyManaged { get; } = new DomainCertificateCertificateType("AMPLIFY_MANAGED");
        public static DomainCertificateCertificateType Custom { get; } = new DomainCertificateCertificateType("CUSTOM");

        public static bool operator ==(DomainCertificateCertificateType left, DomainCertificateCertificateType right) => left.Equals(right);
        public static bool operator !=(DomainCertificateCertificateType left, DomainCertificateCertificateType right) => !left.Equals(right);

        public static explicit operator string(DomainCertificateCertificateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainCertificateCertificateType other && Equals(other);
        public bool Equals(DomainCertificateCertificateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The certificate type.
    /// 
    /// Specify `AMPLIFY_MANAGED` to use the default certificate that Amplify provisions for you.
    /// 
    /// Specify `CUSTOM` to use your own certificate that you have already added to AWS Certificate Manager in your AWS account . Make sure you request (or import) the certificate in the US East (N. Virginia) Region (us-east-1). For more information about using ACM, see [Importing certificates into AWS Certificate Manager](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the *ACM User guide* .
    /// </summary>
    [EnumType]
    public readonly struct DomainCertificateSettingsCertificateType : IEquatable<DomainCertificateSettingsCertificateType>
    {
        private readonly string _value;

        private DomainCertificateSettingsCertificateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainCertificateSettingsCertificateType AmplifyManaged { get; } = new DomainCertificateSettingsCertificateType("AMPLIFY_MANAGED");
        public static DomainCertificateSettingsCertificateType Custom { get; } = new DomainCertificateSettingsCertificateType("CUSTOM");

        public static bool operator ==(DomainCertificateSettingsCertificateType left, DomainCertificateSettingsCertificateType right) => left.Equals(right);
        public static bool operator !=(DomainCertificateSettingsCertificateType left, DomainCertificateSettingsCertificateType right) => !left.Equals(right);

        public static explicit operator string(DomainCertificateSettingsCertificateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainCertificateSettingsCertificateType other && Equals(other);
        public bool Equals(DomainCertificateSettingsCertificateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
