// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Amplify
{
    /// <summary>
    /// The AWS::Amplify::Branch resource creates a new branch within an app.
    /// </summary>
    [AwsNativeResourceType("aws-native:amplify:Branch")]
    public partial class Branch : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique ID for an Amplify app.
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// ARN for a branch, part of an Amplify App.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The backend for a `Branch` of an Amplify app. Use for a backend created from an AWS CloudFormation stack.
        /// 
        /// This field is available to Amplify Gen 2 apps only. When you deploy an application with Amplify Gen 2, you provision the app's backend infrastructure using Typescript code.
        /// </summary>
        [Output("backend")]
        public Output<Outputs.BranchBackend?> Backend { get; private set; } = null!;

        /// <summary>
        /// The basic authorization credentials for a branch of an Amplify app. You must base64-encode the authorization credentials and provide them in the format `user:password` .
        /// </summary>
        [Output("basicAuthConfig")]
        public Output<Outputs.BranchBasicAuthConfig?> BasicAuthConfig { get; private set; } = null!;

        /// <summary>
        /// The name for the branch.
        /// </summary>
        [Output("branchName")]
        public Output<string> BranchName { get; private set; } = null!;

        /// <summary>
        /// The build specification (build spec) for the branch.
        /// </summary>
        [Output("buildSpec")]
        public Output<string?> BuildSpec { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to assign to a branch of an SSR app. The SSR Compute role allows the Amplify Hosting compute service to securely access specific AWS resources based on the role's permissions. For more information about the SSR Compute role, see [Adding an SSR Compute role](https://docs.aws.amazon.com/amplify/latest/userguide/amplify-SSR-compute-role.html) in the *Amplify User Guide* .
        /// </summary>
        [Output("computeRoleArn")]
        public Output<string?> ComputeRoleArn { get; private set; } = null!;

        /// <summary>
        /// The description for the branch that is part of an Amplify app.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enables auto building for the branch.
        /// </summary>
        [Output("enableAutoBuild")]
        public Output<bool?> EnableAutoBuild { get; private set; } = null!;

        /// <summary>
        /// Enables performance mode for the branch.
        /// 
        /// Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out.
        /// </summary>
        [Output("enablePerformanceMode")]
        public Output<bool?> EnablePerformanceMode { get; private set; } = null!;

        /// <summary>
        /// Specifies whether Amplify Hosting creates a preview for each pull request that is made for this branch. If this property is enabled, Amplify deploys your app to a unique preview URL after each pull request is opened. Development and QA teams can use this preview to test the pull request before it's merged into a production or integration branch.
        /// 
        /// To provide backend support for your preview, Amplify automatically provisions a temporary backend environment that it deletes when the pull request is closed. If you want to specify a dedicated backend environment for your previews, use the `PullRequestEnvironmentName` property.
        /// 
        /// For more information, see [Web Previews](https://docs.aws.amazon.com/amplify/latest/userguide/pr-previews.html) in the *AWS Amplify Hosting User Guide* .
        /// </summary>
        [Output("enablePullRequestPreview")]
        public Output<bool?> EnablePullRequestPreview { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the skew protection feature is enabled for the branch.
        /// 
        /// Deployment skew protection is available to Amplify applications to eliminate version skew issues between client and servers in web applications. When you apply skew protection to a branch, you can ensure that your clients always interact with the correct version of server-side assets, regardless of when a deployment occurs. For more information about skew protection, see [Skew protection for Amplify deployments](https://docs.aws.amazon.com/amplify/latest/userguide/skew-protection.html) in the *Amplify User Guide* .
        /// </summary>
        [Output("enableSkewProtection")]
        public Output<bool?> EnableSkewProtection { get; private set; } = null!;

        /// <summary>
        /// The environment variables for the branch.
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableArray<Outputs.BranchEnvironmentVariable>> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// The framework for the branch.
        /// </summary>
        [Output("framework")]
        public Output<string?> Framework { get; private set; } = null!;

        /// <summary>
        /// If pull request previews are enabled for this branch, you can use this property to specify a dedicated backend environment for your previews. For example, you could specify an environment named `prod` , `test` , or `dev` that you initialized with the Amplify CLI and mapped to this branch.
        /// 
        /// To enable pull request previews, set the `EnablePullRequestPreview` property to `true` .
        /// 
        /// If you don't specify an environment, Amplify Hosting provides backend support for each preview by automatically provisioning a temporary backend environment. Amplify Hosting deletes this environment when the pull request is closed.
        /// 
        /// For more information about creating backend environments, see [Feature Branch Deployments and Team Workflows](https://docs.aws.amazon.com/amplify/latest/userguide/multi-environments.html) in the *AWS Amplify Hosting User Guide* .
        /// </summary>
        [Output("pullRequestEnvironmentName")]
        public Output<string?> PullRequestEnvironmentName { get; private set; } = null!;

        /// <summary>
        /// Describes the current stage for the branch.
        /// </summary>
        [Output("stage")]
        public Output<Pulumi.AwsNative.Amplify.BranchStage?> Stage { get; private set; } = null!;

        /// <summary>
        /// The tag for the branch.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Branch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Branch(string name, BranchArgs args, CustomResourceOptions? options = null)
            : base("aws-native:amplify:Branch", name, args ?? new BranchArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Branch(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:amplify:Branch", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "appId",
                    "branchName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Branch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Branch Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Branch(name, id, options);
        }
    }

    public sealed class BranchArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique ID for an Amplify app.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// The backend for a `Branch` of an Amplify app. Use for a backend created from an AWS CloudFormation stack.
        /// 
        /// This field is available to Amplify Gen 2 apps only. When you deploy an application with Amplify Gen 2, you provision the app's backend infrastructure using Typescript code.
        /// </summary>
        [Input("backend")]
        public Input<Inputs.BranchBackendArgs>? Backend { get; set; }

        /// <summary>
        /// The basic authorization credentials for a branch of an Amplify app. You must base64-encode the authorization credentials and provide them in the format `user:password` .
        /// </summary>
        [Input("basicAuthConfig")]
        public Input<Inputs.BranchBasicAuthConfigArgs>? BasicAuthConfig { get; set; }

        /// <summary>
        /// The name for the branch.
        /// </summary>
        [Input("branchName")]
        public Input<string>? BranchName { get; set; }

        /// <summary>
        /// The build specification (build spec) for the branch.
        /// </summary>
        [Input("buildSpec")]
        public Input<string>? BuildSpec { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to assign to a branch of an SSR app. The SSR Compute role allows the Amplify Hosting compute service to securely access specific AWS resources based on the role's permissions. For more information about the SSR Compute role, see [Adding an SSR Compute role](https://docs.aws.amazon.com/amplify/latest/userguide/amplify-SSR-compute-role.html) in the *Amplify User Guide* .
        /// </summary>
        [Input("computeRoleArn")]
        public Input<string>? ComputeRoleArn { get; set; }

        /// <summary>
        /// The description for the branch that is part of an Amplify app.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enables auto building for the branch.
        /// </summary>
        [Input("enableAutoBuild")]
        public Input<bool>? EnableAutoBuild { get; set; }

        /// <summary>
        /// Enables performance mode for the branch.
        /// 
        /// Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out.
        /// </summary>
        [Input("enablePerformanceMode")]
        public Input<bool>? EnablePerformanceMode { get; set; }

        /// <summary>
        /// Specifies whether Amplify Hosting creates a preview for each pull request that is made for this branch. If this property is enabled, Amplify deploys your app to a unique preview URL after each pull request is opened. Development and QA teams can use this preview to test the pull request before it's merged into a production or integration branch.
        /// 
        /// To provide backend support for your preview, Amplify automatically provisions a temporary backend environment that it deletes when the pull request is closed. If you want to specify a dedicated backend environment for your previews, use the `PullRequestEnvironmentName` property.
        /// 
        /// For more information, see [Web Previews](https://docs.aws.amazon.com/amplify/latest/userguide/pr-previews.html) in the *AWS Amplify Hosting User Guide* .
        /// </summary>
        [Input("enablePullRequestPreview")]
        public Input<bool>? EnablePullRequestPreview { get; set; }

        /// <summary>
        /// Specifies whether the skew protection feature is enabled for the branch.
        /// 
        /// Deployment skew protection is available to Amplify applications to eliminate version skew issues between client and servers in web applications. When you apply skew protection to a branch, you can ensure that your clients always interact with the correct version of server-side assets, regardless of when a deployment occurs. For more information about skew protection, see [Skew protection for Amplify deployments](https://docs.aws.amazon.com/amplify/latest/userguide/skew-protection.html) in the *Amplify User Guide* .
        /// </summary>
        [Input("enableSkewProtection")]
        public Input<bool>? EnableSkewProtection { get; set; }

        [Input("environmentVariables")]
        private InputList<Inputs.BranchEnvironmentVariableArgs>? _environmentVariables;

        /// <summary>
        /// The environment variables for the branch.
        /// </summary>
        public InputList<Inputs.BranchEnvironmentVariableArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<Inputs.BranchEnvironmentVariableArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// The framework for the branch.
        /// </summary>
        [Input("framework")]
        public Input<string>? Framework { get; set; }

        /// <summary>
        /// If pull request previews are enabled for this branch, you can use this property to specify a dedicated backend environment for your previews. For example, you could specify an environment named `prod` , `test` , or `dev` that you initialized with the Amplify CLI and mapped to this branch.
        /// 
        /// To enable pull request previews, set the `EnablePullRequestPreview` property to `true` .
        /// 
        /// If you don't specify an environment, Amplify Hosting provides backend support for each preview by automatically provisioning a temporary backend environment. Amplify Hosting deletes this environment when the pull request is closed.
        /// 
        /// For more information about creating backend environments, see [Feature Branch Deployments and Team Workflows](https://docs.aws.amazon.com/amplify/latest/userguide/multi-environments.html) in the *AWS Amplify Hosting User Guide* .
        /// </summary>
        [Input("pullRequestEnvironmentName")]
        public Input<string>? PullRequestEnvironmentName { get; set; }

        /// <summary>
        /// Describes the current stage for the branch.
        /// </summary>
        [Input("stage")]
        public Input<Pulumi.AwsNative.Amplify.BranchStage>? Stage { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The tag for the branch.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public BranchArgs()
        {
        }
        public static new BranchArgs Empty => new BranchArgs();
    }
}
