// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CloudFormation
{
    public static class GetStack
    {
        /// <summary>
        /// The AWS::CloudFormation::Stack resource nests a stack as a resource in a top-level template.
        /// </summary>
        public static Task<GetStackResult> InvokeAsync(GetStackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStackResult>("aws-native:cloudformation:getStack", args ?? new GetStackArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::CloudFormation::Stack resource nests a stack as a resource in a top-level template.
        /// </summary>
        public static Output<GetStackResult> Invoke(GetStackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStackResult>("aws-native:cloudformation:getStack", args ?? new GetStackInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::CloudFormation::Stack resource nests a stack as a resource in a top-level template.
        /// </summary>
        public static Output<GetStackResult> Invoke(GetStackInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStackResult>("aws-native:cloudformation:getStack", args ?? new GetStackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the stack.
        /// </summary>
        [Input("stackId", required: true)]
        public string StackId { get; set; } = null!;

        public GetStackArgs()
        {
        }
        public static new GetStackArgs Empty => new GetStackArgs();
    }

    public sealed class GetStackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the stack.
        /// </summary>
        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        public GetStackInvokeArgs()
        {
        }
        public static new GetStackInvokeArgs Empty => new GetStackInvokeArgs();
    }


    [OutputType]
    public sealed class GetStackResult
    {
        /// <summary>
        /// In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.
        /// 
        /// - `CAPABILITY_IAM` and `CAPABILITY_NAMED_IAM`
        /// 
        /// Some stack templates might include resources that can affect permissions in your AWS account ; for example, by creating new AWS Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.
        /// 
        /// The following IAM resources require you to specify either the `CAPABILITY_IAM` or `CAPABILITY_NAMED_IAM` capability.
        /// 
        /// - If you have IAM resources, you can specify either capability.
        /// - If you have IAM resources with custom names, you *must* specify `CAPABILITY_NAMED_IAM` .
        /// - If you don't specify either of these capabilities, CloudFormation returns an `InsufficientCapabilities` error.
        /// 
        /// If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.
        /// 
        /// - [AWS::IAM::AccessKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-accesskey.html)
        /// - [AWS::IAM::Group](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-group.html)
        /// - [AWS::IAM::InstanceProfile](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html)
        /// - [AWS::IAM::Policy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html)
        /// - [AWS::IAM::Role](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
        /// - [AWS::IAM::User](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-user.html)
        /// - [AWS::IAM::UserToGroupAddition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-usertogroupaddition.html)
        /// 
        /// For more information, see [Acknowledging IAM resources in CloudFormation templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/control-access-with-iam.html#using-iam-capabilities) in the *AWS CloudFormation User Guide* .
        /// - `CAPABILITY_AUTO_EXPAND`
        /// 
        /// Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the [AWS::Include](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-include.html) and [AWS::Serverless](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html) transforms, which are macros hosted by CloudFormation .
        /// 
        /// If you want to create a stack from a stack template that contains macros *and* nested stacks, you must create the stack directly from the template using this capability.
        /// 
        /// &gt; You should only create stacks directly from a stack template that contains macros if you know what processing the macro performs.
        /// &gt; 
        /// &gt; Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified. 
        /// 
        /// For more information, see [Perform custom processing on CloudFormation templates with template macros](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html) in the *AWS CloudFormation User Guide* .
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.CloudFormation.StackCapabilitiesItem> Capabilities;
        /// <summary>
        /// The unique ID of the change set.
        /// </summary>
        public readonly string? ChangeSetId;
        /// <summary>
        /// The time at which the stack was created.
        /// </summary>
        public readonly string? CreationTime;
        /// <summary>
        /// A user-defined description associated with the stack.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Set to `true` to disable rollback of the stack if stack creation failed. You can specify either `DisableRollback` or `OnFailure` , but not both.
        /// 
        /// Default: `false`
        /// </summary>
        public readonly bool? DisableRollback;
        /// <summary>
        /// Whether to enable termination protection on the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see [Protect CloudFormation stacks from being deleted](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html) in the *AWS CloudFormation User Guide* . Termination protection is deactivated on stacks by default.
        /// 
        /// For nested stacks, termination protection is set on the root stack and can't be changed directly on the nested stack.
        /// </summary>
        public readonly bool? EnableTerminationProtection;
        /// <summary>
        /// The time the stack was last updated. This field will only be returned if the stack has been updated at least once.
        /// </summary>
        public readonly string? LastUpdateTime;
        /// <summary>
        /// The Amazon SNS topic ARNs to publish stack related events. You can find your Amazon SNS topic ARNs using the Amazon SNS console or your Command Line Interface (CLI).
        /// </summary>
        public readonly ImmutableArray<string> NotificationArns;
        /// <summary>
        /// A list of output structures.
        /// </summary>
        public readonly ImmutableArray<Outputs.StackOutput> Outputs;
        /// <summary>
        /// The set value pairs that represent the parameters passed to CloudFormation when this nested stack is created. Each parameter has a name corresponding to a parameter defined in the embedded template and a value representing the value that you want to set for the parameter.
        /// 
        /// &gt; If you use the `Ref` function to pass a parameter value to a nested stack, comma-delimited list parameters must be of type `String` . In other words, you can't pass values that are of type `CommaDelimitedList` to nested stacks. 
        /// 
        /// Required if the nested stack requires input parameters.
        /// 
        /// Whether an update causes interruptions depends on the resources that are being updated. An update never causes a nested stack to be replaced.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Parameters;
        /// <summary>
        /// For nested stacks, the stack ID of the direct parent of this stack. For the first level of nested stacks, the root stack is also the parent stack.
        /// 
        /// For more information, see [Nested stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the *AWS CloudFormation User Guide* .
        /// </summary>
        public readonly string? ParentId;
        /// <summary>
        /// The Amazon Resource Name (ARN) of an IAM role that CloudFormation assumes to create the stack. CloudFormation uses the role's credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don't have permission to pass it. Ensure that the role grants least privilege.
        /// 
        /// If you don't specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that's generated from your user credentials.
        /// </summary>
        public readonly string? RoleArn;
        /// <summary>
        /// For nested stacks, the stack ID of the top-level stack to which the nested stack ultimately belongs.
        /// 
        /// For more information, see [Nested stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html) in the *AWS CloudFormation User Guide* .
        /// </summary>
        public readonly string? RootId;
        /// <summary>
        /// Unique identifier of the stack.
        /// </summary>
        public readonly string? StackId;
        /// <summary>
        /// Structure containing the stack policy body. For more information, go to [Prevent updates to stack resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html) in the *AWS CloudFormation User Guide* . You can specify either the `StackPolicyBody` or the `StackPolicyURL` parameter, but not both.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::CloudFormation::Stack` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? StackPolicyBody;
        /// <summary>
        /// Current status of the stack.
        /// </summary>
        public readonly Pulumi.AwsNative.CloudFormation.StackStatus? StackStatus;
        /// <summary>
        /// Success/failure message associated with the stack status.
        /// </summary>
        public readonly string? StackStatusReason;
        /// <summary>
        /// Key-value pairs to associate with this stack. CloudFormation also propagates these tags to the resources created in the stack. A maximum number of 50 tags can be specified.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;
        /// <summary>
        /// Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes.
        /// 
        /// Conditional: You must specify either the `TemplateBody` or the `TemplateURL` parameter, but not both.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::CloudFormation::Stack` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? TemplateBody;
        /// <summary>
        /// The length of time, in minutes, that CloudFormation waits for the nested stack to reach the `CREATE_COMPLETE` state. The default is no timeout. When CloudFormation detects that the nested stack has reached the `CREATE_COMPLETE` state, it marks the nested stack resource as `CREATE_COMPLETE` in the parent stack and resumes creating the parent stack. If the timeout period expires before the nested stack reaches `CREATE_COMPLETE` , CloudFormation marks the nested stack as failed and rolls back both the nested stack and parent stack.
        /// 
        /// Updates aren't supported.
        /// </summary>
        public readonly int? TimeoutInMinutes;

        [OutputConstructor]
        private GetStackResult(
            ImmutableArray<Pulumi.AwsNative.CloudFormation.StackCapabilitiesItem> capabilities,

            string? changeSetId,

            string? creationTime,

            string? description,

            bool? disableRollback,

            bool? enableTerminationProtection,

            string? lastUpdateTime,

            ImmutableArray<string> notificationArns,

            ImmutableArray<Outputs.StackOutput> outputs,

            ImmutableDictionary<string, string>? parameters,

            string? parentId,

            string? roleArn,

            string? rootId,

            string? stackId,

            object? stackPolicyBody,

            Pulumi.AwsNative.CloudFormation.StackStatus? stackStatus,

            string? stackStatusReason,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags,

            object? templateBody,

            int? timeoutInMinutes)
        {
            Capabilities = capabilities;
            ChangeSetId = changeSetId;
            CreationTime = creationTime;
            Description = description;
            DisableRollback = disableRollback;
            EnableTerminationProtection = enableTerminationProtection;
            LastUpdateTime = lastUpdateTime;
            NotificationArns = notificationArns;
            Outputs = outputs;
            Parameters = parameters;
            ParentId = parentId;
            RoleArn = roleArn;
            RootId = rootId;
            StackId = stackId;
            StackPolicyBody = stackPolicyBody;
            StackStatus = stackStatus;
            StackStatusReason = stackStatusReason;
            Tags = tags;
            TemplateBody = templateBody;
            TimeoutInMinutes = timeoutInMinutes;
        }
    }
}
