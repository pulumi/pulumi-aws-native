// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CloudFormation
{
    public static class GetStackSet
    {
        /// <summary>
        /// StackSet as a resource provides one-click experience for provisioning a StackSet and StackInstances
        /// </summary>
        public static Task<GetStackSetResult> InvokeAsync(GetStackSetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStackSetResult>("aws-native:cloudformation:getStackSet", args ?? new GetStackSetArgs(), options.WithDefaults());

        /// <summary>
        /// StackSet as a resource provides one-click experience for provisioning a StackSet and StackInstances
        /// </summary>
        public static Output<GetStackSetResult> Invoke(GetStackSetInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetStackSetResult>("aws-native:cloudformation:getStackSet", args ?? new GetStackSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStackSetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the stack set that you're creating.
        /// </summary>
        [Input("stackSetId", required: true)]
        public string StackSetId { get; set; } = null!;

        public GetStackSetArgs()
        {
        }
    }

    public sealed class GetStackSetInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the stack set that you're creating.
        /// </summary>
        [Input("stackSetId", required: true)]
        public Input<string> StackSetId { get; set; } = null!;

        public GetStackSetInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStackSetResult
    {
        /// <summary>
        /// The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account.
        /// </summary>
        public readonly string? AdministrationRoleARN;
        /// <summary>
        /// Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if PermissionModel is SERVICE_MANAGED.
        /// </summary>
        public readonly Outputs.StackSetAutoDeployment? AutoDeployment;
        /// <summary>
        /// In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for AWS CloudFormation to create the stack set and related stack instances.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.CloudFormation.StackSetCapability> Capabilities;
        /// <summary>
        /// A description of the stack set. You can use the description to identify the stack set's purpose or other important information.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, AWS CloudFormation uses the AWSCloudFormationStackSetExecutionRole role for the stack set operation.
        /// </summary>
        public readonly string? ExecutionRoleName;
        /// <summary>
        /// Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
        /// </summary>
        public readonly Outputs.ManagedExecutionProperties? ManagedExecution;
        /// <summary>
        /// The input parameters for the stack set template.
        /// </summary>
        public readonly ImmutableArray<Outputs.StackSetParameter> Parameters;
        /// <summary>
        /// A group of stack instances with parameters in some specific accounts and regions.
        /// </summary>
        public readonly ImmutableArray<Outputs.StackSetStackInstances> StackInstancesGroup;
        /// <summary>
        /// The ID of the stack set that you're creating.
        /// </summary>
        public readonly string? StackSetId;
        /// <summary>
        /// The key-value pairs to associate with this stack set and the stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.
        /// </summary>
        public readonly ImmutableArray<Outputs.StackSetTag> Tags;
        /// <summary>
        /// The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes.
        /// </summary>
        public readonly string? TemplateBody;

        [OutputConstructor]
        private GetStackSetResult(
            string? administrationRoleARN,

            Outputs.StackSetAutoDeployment? autoDeployment,

            ImmutableArray<Pulumi.AwsNative.CloudFormation.StackSetCapability> capabilities,

            string? description,

            string? executionRoleName,

            Outputs.ManagedExecutionProperties? managedExecution,

            ImmutableArray<Outputs.StackSetParameter> parameters,

            ImmutableArray<Outputs.StackSetStackInstances> stackInstancesGroup,

            string? stackSetId,

            ImmutableArray<Outputs.StackSetTag> tags,

            string? templateBody)
        {
            AdministrationRoleARN = administrationRoleARN;
            AutoDeployment = autoDeployment;
            Capabilities = capabilities;
            Description = description;
            ExecutionRoleName = executionRoleName;
            ManagedExecution = managedExecution;
            Parameters = parameters;
            StackInstancesGroup = stackInstancesGroup;
            StackSetId = stackSetId;
            Tags = tags;
            TemplateBody = templateBody;
        }
    }
}
