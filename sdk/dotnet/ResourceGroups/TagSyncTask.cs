// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ResourceGroups
{
    /// <summary>
    /// Schema for ResourceGroups::TagSyncTask
    /// </summary>
    [AwsNativeResourceType("aws-native:resourcegroups:TagSyncTask")]
    public partial class TagSyncTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon resource name (ARN) or name of the application group for which you want to create a tag-sync task
        /// </summary>
        [Output("group")]
        public Output<string> Group { get; private set; } = null!;

        /// <summary>
        /// The Amazon resource name (ARN) of the ApplicationGroup for which the TagSyncTask is created
        /// </summary>
        [Output("groupArn")]
        public Output<string> GroupArn { get; private set; } = null!;

        /// <summary>
        /// The Name of the application group for which the TagSyncTask is created
        /// </summary>
        [Output("groupName")]
        public Output<string> GroupName { get; private set; } = null!;

        /// <summary>
        /// The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// The status of the TagSyncTask
        /// </summary>
        [Output("status")]
        public Output<Pulumi.AwsNative.ResourceGroups.TagSyncTaskStatus> Status { get; private set; } = null!;

        /// <summary>
        /// The tag key. Resources tagged with this tag key-value pair will be added to the application. If a resource with this tag is later untagged, the tag-sync task removes the resource from the application.
        /// </summary>
        [Output("tagKey")]
        public Output<string> TagKey { get; private set; } = null!;

        /// <summary>
        /// The tag value. Resources tagged with this tag key-value pair will be added to the application. If a resource with this tag is later untagged, the tag-sync task removes the resource from the application.
        /// </summary>
        [Output("tagValue")]
        public Output<string> TagValue { get; private set; } = null!;

        /// <summary>
        /// The ARN of the TagSyncTask resource
        /// </summary>
        [Output("taskArn")]
        public Output<string> TaskArn { get; private set; } = null!;


        /// <summary>
        /// Create a TagSyncTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TagSyncTask(string name, TagSyncTaskArgs args, CustomResourceOptions? options = null)
            : base("aws-native:resourcegroups:TagSyncTask", name, args ?? new TagSyncTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TagSyncTask(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:resourcegroups:TagSyncTask", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "group",
                    "roleArn",
                    "tagKey",
                    "tagValue",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TagSyncTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TagSyncTask Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new TagSyncTask(name, id, options);
        }
    }

    public sealed class TagSyncTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon resource name (ARN) or name of the application group for which you want to create a tag-sync task
        /// </summary>
        [Input("group", required: true)]
        public Input<string> Group { get; set; } = null!;

        /// <summary>
        /// The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// The tag key. Resources tagged with this tag key-value pair will be added to the application. If a resource with this tag is later untagged, the tag-sync task removes the resource from the application.
        /// </summary>
        [Input("tagKey", required: true)]
        public Input<string> TagKey { get; set; } = null!;

        /// <summary>
        /// The tag value. Resources tagged with this tag key-value pair will be added to the application. If a resource with this tag is later untagged, the tag-sync task removes the resource from the application.
        /// </summary>
        [Input("tagValue", required: true)]
        public Input<string> TagValue { get; set; } = null!;

        public TagSyncTaskArgs()
        {
        }
        public static new TagSyncTaskArgs Empty => new TagSyncTaskArgs();
    }
}
