// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.ResourceGroups
{
    /// <summary>
    /// Specifies the type of resource query that determines this group's membership. There are two valid query types:
    /// 
    /// - `TAG_FILTERS_1_0` indicates that the group is a tag-based group. To complete the group membership, you must include the `TagFilters` property to specify the tag filters to use in the query.
    /// - `CLOUDFORMATION_STACK_1_0` , the default, indicates that the group is a CloudFormation stack-based group. Group membership is based on the CloudFormation stack. You must specify the `StackIdentifier` property in the query to define which stack to associate the group with, or leave it empty to default to the stack where the group is defined.
    /// </summary>
    [EnumType]
    public readonly struct GroupResourceQueryType : IEquatable<GroupResourceQueryType>
    {
        private readonly string _value;

        private GroupResourceQueryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GroupResourceQueryType TagFilters10 { get; } = new GroupResourceQueryType("TAG_FILTERS_1_0");
        public static GroupResourceQueryType CloudformationStack10 { get; } = new GroupResourceQueryType("CLOUDFORMATION_STACK_1_0");

        public static bool operator ==(GroupResourceQueryType left, GroupResourceQueryType right) => left.Equals(right);
        public static bool operator !=(GroupResourceQueryType left, GroupResourceQueryType right) => !left.Equals(right);

        public static explicit operator string(GroupResourceQueryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GroupResourceQueryType other && Equals(other);
        public bool Equals(GroupResourceQueryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the TagSyncTask
    /// </summary>
    [EnumType]
    public readonly struct TagSyncTaskStatus : IEquatable<TagSyncTaskStatus>
    {
        private readonly string _value;

        private TagSyncTaskStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TagSyncTaskStatus Active { get; } = new TagSyncTaskStatus("ACTIVE");
        public static TagSyncTaskStatus Error { get; } = new TagSyncTaskStatus("ERROR");

        public static bool operator ==(TagSyncTaskStatus left, TagSyncTaskStatus right) => left.Equals(right);
        public static bool operator !=(TagSyncTaskStatus left, TagSyncTaskStatus right) => !left.Equals(right);

        public static explicit operator string(TagSyncTaskStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TagSyncTaskStatus other && Equals(other);
        public bool Equals(TagSyncTaskStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
