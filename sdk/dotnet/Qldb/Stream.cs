// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Qldb
{
    /// <summary>
    /// Resource schema for AWS::QLDB::Stream.
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myQLDBStream = new AwsNative.Qldb.Stream("myQLDBStream", new()
    ///     {
    ///         ExclusiveEndTime = "2020-05-29T22:59:59Z",
    ///         InclusiveStartTime = "2020-05-29T00:00:00Z",
    ///         KinesisConfiguration = new AwsNative.Qldb.Inputs.StreamKinesisConfigurationArgs
    ///         {
    ///             AggregationEnabled = true,
    ///             StreamArn = "arn:aws:kinesis:us-east-1:123456789012:stream/stream-for-qldb",
    ///         },
    ///         LedgerName = "exampleLedger",
    ///         RoleArn = "arn:aws:iam::123456789012:role/my-kinesis-stream-role",
    ///         StreamName = "exampleLedger-stream",
    ///         Tags = new[]
    ///         {
    ///             new AwsNative.Inputs.TagArgs
    ///             {
    ///                 Key = "Domain",
    ///                 Value = "Test",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myQLDBStream = new AwsNative.Qldb.Stream("myQLDBStream", new()
    ///     {
    ///         ExclusiveEndTime = "2020-05-29T22:59:59Z",
    ///         InclusiveStartTime = "2020-05-29T00:00:00Z",
    ///         KinesisConfiguration = new AwsNative.Qldb.Inputs.StreamKinesisConfigurationArgs
    ///         {
    ///             AggregationEnabled = true,
    ///             StreamArn = "arn:aws:kinesis:us-east-1:123456789012:stream/stream-for-qldb",
    ///         },
    ///         LedgerName = "exampleLedger",
    ///         RoleArn = "arn:aws:iam::123456789012:role/my-kinesis-stream-role",
    ///         StreamName = "exampleLedger-stream",
    ///         Tags = new[]
    ///         {
    ///             new AwsNative.Inputs.TagArgs
    ///             {
    ///                 Key = "Domain",
    ///                 Value = "Test",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:qldb:Stream")]
    public partial class Stream : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the QLDB journal stream. For example: `arn:aws:qldb:us-east-1:123456789012:stream/exampleLedger/IiPT4brpZCqCq3f4MTHbYy` .
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The unique ID that QLDB assigns to each QLDB journal stream. For example: `IiPT4brpZCqCq3f4MTHbYy` .
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The exclusive date and time that specifies when the stream ends. If you don't define this parameter, the stream runs indefinitely until you cancel it.
        /// 
        /// The `ExclusiveEndTime` must be in `ISO 8601` date and time format and in Universal Coordinated Time (UTC). For example: `2019-06-13T21:36:34Z` .
        /// </summary>
        [Output("exclusiveEndTime")]
        public Output<string?> ExclusiveEndTime { get; private set; } = null!;

        /// <summary>
        /// The inclusive start date and time from which to start streaming journal data. This parameter must be in `ISO 8601` date and time format and in Universal Coordinated Time (UTC). For example: `2019-06-13T21:36:34Z` .
        /// 
        /// The `InclusiveStartTime` cannot be in the future and must be before `ExclusiveEndTime` .
        /// 
        /// If you provide an `InclusiveStartTime` that is before the ledger's `CreationDateTime` , QLDB effectively defaults it to the ledger's `CreationDateTime` .
        /// </summary>
        [Output("inclusiveStartTime")]
        public Output<string> InclusiveStartTime { get; private set; } = null!;

        /// <summary>
        /// The configuration settings of the Amazon Kinesis Data Streams destination for an Amazon QLDB journal stream.
        /// </summary>
        [Output("kinesisConfiguration")]
        public Output<Outputs.StreamKinesisConfiguration> KinesisConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of the ledger.
        /// </summary>
        [Output("ledgerName")]
        public Output<string> LedgerName { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role that grants QLDB permissions for a journal stream to write data records to a Kinesis Data Streams resource.
        /// 
        /// To pass a role to QLDB when requesting a journal stream, you must have permissions to perform the `iam:PassRole` action on the IAM role resource. This is required for all journal stream requests.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// The name that you want to assign to the QLDB journal stream. User-defined names can help identify and indicate the purpose of a stream.
        /// 
        /// Your stream name must be unique among other *active* streams for a given ledger. Stream names have the same naming constraints as ledger names, as defined in [Quotas in Amazon QLDB](https://docs.aws.amazon.com/qldb/latest/developerguide/limits.html#limits.naming) in the *Amazon QLDB Developer Guide* .
        /// </summary>
        [Output("streamName")]
        public Output<string> StreamName { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Stream resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stream(string name, StreamArgs args, CustomResourceOptions? options = null)
            : base("aws-native:qldb:Stream", name, args ?? new StreamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stream(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:qldb:Stream", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "exclusiveEndTime",
                    "inclusiveStartTime",
                    "kinesisConfiguration",
                    "ledgerName",
                    "roleArn",
                    "streamName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stream resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stream Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Stream(name, id, options);
        }
    }

    public sealed class StreamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The exclusive date and time that specifies when the stream ends. If you don't define this parameter, the stream runs indefinitely until you cancel it.
        /// 
        /// The `ExclusiveEndTime` must be in `ISO 8601` date and time format and in Universal Coordinated Time (UTC). For example: `2019-06-13T21:36:34Z` .
        /// </summary>
        [Input("exclusiveEndTime")]
        public Input<string>? ExclusiveEndTime { get; set; }

        /// <summary>
        /// The inclusive start date and time from which to start streaming journal data. This parameter must be in `ISO 8601` date and time format and in Universal Coordinated Time (UTC). For example: `2019-06-13T21:36:34Z` .
        /// 
        /// The `InclusiveStartTime` cannot be in the future and must be before `ExclusiveEndTime` .
        /// 
        /// If you provide an `InclusiveStartTime` that is before the ledger's `CreationDateTime` , QLDB effectively defaults it to the ledger's `CreationDateTime` .
        /// </summary>
        [Input("inclusiveStartTime", required: true)]
        public Input<string> InclusiveStartTime { get; set; } = null!;

        /// <summary>
        /// The configuration settings of the Amazon Kinesis Data Streams destination for an Amazon QLDB journal stream.
        /// </summary>
        [Input("kinesisConfiguration", required: true)]
        public Input<Inputs.StreamKinesisConfigurationArgs> KinesisConfiguration { get; set; } = null!;

        /// <summary>
        /// The name of the ledger.
        /// </summary>
        [Input("ledgerName", required: true)]
        public Input<string> LedgerName { get; set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role that grants QLDB permissions for a journal stream to write data records to a Kinesis Data Streams resource.
        /// 
        /// To pass a role to QLDB when requesting a journal stream, you must have permissions to perform the `iam:PassRole` action on the IAM role resource. This is required for all journal stream requests.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// The name that you want to assign to the QLDB journal stream. User-defined names can help identify and indicate the purpose of a stream.
        /// 
        /// Your stream name must be unique among other *active* streams for a given ledger. Stream names have the same naming constraints as ledger names, as defined in [Quotas in Amazon QLDB](https://docs.aws.amazon.com/qldb/latest/developerguide/limits.html#limits.naming) in the *Amazon QLDB Developer Guide* .
        /// </summary>
        [Input("streamName")]
        public Input<string>? StreamName { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public StreamArgs()
        {
        }
        public static new StreamArgs Empty => new StreamArgs();
    }
}
