// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AmazonMq
{
    /// <summary>
    /// Resource Type definition for AWS::AmazonMQ::Configuration
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var configuration = new AwsNative.AmazonMq.Configuration("configuration", new()
    ///     {
    ///         Data = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(@"&lt;?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?&gt;
    /// &lt;broker xmlns=""http://activemq.apache.org/schema/core"" start=""false""&gt;
    ///   &lt;destinationPolicy&gt;
    ///     &lt;policyMap&gt;
    ///       &lt;policyEntries&gt;
    ///         &lt;policyEntry topic=""&gt;""&gt;
    ///           &lt;pendingMessageLimitStrategy&gt;
    ///             &lt;constantPendingMessageLimitStrategy limit=""3000""/&gt;
    ///           &lt;/pendingMessageLimitStrategy&gt;
    ///         &lt;/policyEntry&gt;
    ///       &lt;/policyEntries&gt;
    ///     &lt;/policyMap&gt;
    ///   &lt;/destinationPolicy&gt;
    ///   &lt;plugins&gt;
    ///   &lt;/plugins&gt;
    /// &lt;/broker&gt;
    /// ")),
    ///         EngineType = "ACTIVEMQ",
    ///         EngineVersion = "5.15.0",
    ///         Name = "my-configuration-1",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:amazonmq:Configuration")]
    public partial class Configuration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon MQ configuration.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The authentication strategy associated with the configuration. The default is SIMPLE.
        /// </summary>
        [Output("authenticationStrategy")]
        public Output<string?> AuthenticationStrategy { get; private set; } = null!;

        /// <summary>
        /// The ID of the Amazon MQ configuration.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The base64-encoded XML configuration.
        /// </summary>
        [Output("data")]
        public Output<string> Data { get; private set; } = null!;

        /// <summary>
        /// The description of the configuration.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The type of broker engine. Note: Currently, Amazon MQ only supports ACTIVEMQ for creating and editing broker configurations.
        /// </summary>
        [Output("engineType")]
        public Output<string> EngineType { get; private set; } = null!;

        /// <summary>
        /// The version of the broker engine.
        /// </summary>
        [Output("engineVersion")]
        public Output<string?> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The name of the configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The revision number of the configuration.
        /// </summary>
        [Output("revision")]
        public Output<string> Revision { get; private set; } = null!;

        /// <summary>
        /// Create tags when creating the configuration.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Configuration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Configuration(string name, ConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:amazonmq:Configuration", name, args ?? new ConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Configuration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:amazonmq:Configuration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "authenticationStrategy",
                    "engineType",
                    "engineVersion",
                    "name",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Configuration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Configuration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Configuration(name, id, options);
        }
    }

    public sealed class ConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication strategy associated with the configuration. The default is SIMPLE.
        /// </summary>
        [Input("authenticationStrategy")]
        public Input<string>? AuthenticationStrategy { get; set; }

        /// <summary>
        /// The base64-encoded XML configuration.
        /// </summary>
        [Input("data", required: true)]
        public Input<string> Data { get; set; } = null!;

        /// <summary>
        /// The description of the configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The type of broker engine. Note: Currently, Amazon MQ only supports ACTIVEMQ for creating and editing broker configurations.
        /// </summary>
        [Input("engineType", required: true)]
        public Input<string> EngineType { get; set; } = null!;

        /// <summary>
        /// The version of the broker engine.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The name of the configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// Create tags when creating the configuration.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public ConfigurationArgs()
        {
        }
        public static new ConfigurationArgs Empty => new ConfigurationArgs();
    }
}
