// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AmazonMq
{
    public static class GetBroker
    {
        /// <summary>
        /// Resource type definition for AWS::AmazonMQ::Broker
        /// </summary>
        public static Task<GetBrokerResult> InvokeAsync(GetBrokerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBrokerResult>("aws-native:amazonmq:getBroker", args ?? new GetBrokerArgs(), options.WithDefaults());

        /// <summary>
        /// Resource type definition for AWS::AmazonMQ::Broker
        /// </summary>
        public static Output<GetBrokerResult> Invoke(GetBrokerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBrokerResult>("aws-native:amazonmq:getBroker", args ?? new GetBrokerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource type definition for AWS::AmazonMQ::Broker
        /// </summary>
        public static Output<GetBrokerResult> Invoke(GetBrokerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBrokerResult>("aws-native:amazonmq:getBroker", args ?? new GetBrokerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBrokerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Required. The unique ID that Amazon MQ generates for the configuration.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetBrokerArgs()
        {
        }
        public static new GetBrokerArgs Empty => new GetBrokerArgs();
    }

    public sealed class GetBrokerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Required. The unique ID that Amazon MQ generates for the configuration.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetBrokerInvokeArgs()
        {
        }
        public static new GetBrokerInvokeArgs Empty => new GetBrokerInvokeArgs();
    }


    [OutputType]
    public sealed class GetBrokerResult
    {
        /// <summary>
        /// The AMQP endpoints of each broker instance as a list of strings.
        /// 
        /// `amqp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:5671`
        /// </summary>
        public readonly ImmutableArray<string> AmqpEndpoints;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon MQ broker.
        /// 
        /// `arn:aws:mq:us-east-2:123456789012:broker:MyBroker:b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9`
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
        /// </summary>
        public readonly bool? AutoMinorVersionUpgrade;
        /// <summary>
        /// The ID of the current actual configuration.
        /// </summary>
        public readonly string? ConfigurationId;
        /// <summary>
        /// The revision of the current actual configuration.
        /// </summary>
        public readonly string? ConfigurationRevision;
        public readonly ImmutableArray<string> ConsoleUrls;
        /// <summary>
        /// Defines whether this broker is a part of a data replication pair.
        /// </summary>
        public readonly string? DataReplicationMode;
        /// <summary>
        /// The version in use. This may have more precision than the specified EngineVersion.
        /// </summary>
        public readonly string? EngineVersionCurrent;
        /// <summary>
        /// The broker's instance type.
        /// </summary>
        public readonly string? HostInstanceType;
        /// <summary>
        /// Required. The unique ID that Amazon MQ generates for the configuration.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The IP addresses of each broker instance as a list of strings. Does not apply to RabbitMQ brokers.
        /// 
        /// `['198.51.100.2', '203.0.113.9']`
        /// </summary>
        public readonly ImmutableArray<string> IpAddresses;
        /// <summary>
        /// Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        /// </summary>
        public readonly Outputs.BrokerLdapServerMetadata? LdapServerMetadata;
        /// <summary>
        /// Enables Amazon CloudWatch logging for brokers.
        /// </summary>
        public readonly Outputs.BrokerLogList? Logs;
        /// <summary>
        /// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
        /// </summary>
        public readonly Outputs.BrokerMaintenanceWindow? MaintenanceWindowStartTime;
        /// <summary>
        /// The MQTT endpoints of each broker instance as a list of strings.
        /// 
        /// `mqtt+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:8883`
        /// </summary>
        public readonly ImmutableArray<string> MqttEndpoints;
        /// <summary>
        /// The OpenWire endpoints of each broker instance as a list of strings.
        /// 
        /// `ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61617`
        /// </summary>
        public readonly ImmutableArray<string> OpenWireEndpoints;
        /// <summary>
        /// The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroups;
        /// <summary>
        /// The STOMP endpoints of each broker instance as a list of strings.
        /// 
        /// `stomp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61614`
        /// </summary>
        public readonly ImmutableArray<string> StompEndpoints;
        /// <summary>
        /// An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;
        /// <summary>
        /// The WSS endpoints of each broker instance as a list of strings.
        /// 
        /// `wss://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61619`
        /// </summary>
        public readonly ImmutableArray<string> WssEndpoints;

        [OutputConstructor]
        private GetBrokerResult(
            ImmutableArray<string> amqpEndpoints,

            string? arn,

            bool? autoMinorVersionUpgrade,

            string? configurationId,

            string? configurationRevision,

            ImmutableArray<string> consoleUrls,

            string? dataReplicationMode,

            string? engineVersionCurrent,

            string? hostInstanceType,

            string? id,

            ImmutableArray<string> ipAddresses,

            Outputs.BrokerLdapServerMetadata? ldapServerMetadata,

            Outputs.BrokerLogList? logs,

            Outputs.BrokerMaintenanceWindow? maintenanceWindowStartTime,

            ImmutableArray<string> mqttEndpoints,

            ImmutableArray<string> openWireEndpoints,

            ImmutableArray<string> securityGroups,

            ImmutableArray<string> stompEndpoints,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags,

            ImmutableArray<string> wssEndpoints)
        {
            AmqpEndpoints = amqpEndpoints;
            Arn = arn;
            AutoMinorVersionUpgrade = autoMinorVersionUpgrade;
            ConfigurationId = configurationId;
            ConfigurationRevision = configurationRevision;
            ConsoleUrls = consoleUrls;
            DataReplicationMode = dataReplicationMode;
            EngineVersionCurrent = engineVersionCurrent;
            HostInstanceType = hostInstanceType;
            Id = id;
            IpAddresses = ipAddresses;
            LdapServerMetadata = ldapServerMetadata;
            Logs = logs;
            MaintenanceWindowStartTime = maintenanceWindowStartTime;
            MqttEndpoints = mqttEndpoints;
            OpenWireEndpoints = openWireEndpoints;
            SecurityGroups = securityGroups;
            StompEndpoints = stompEndpoints;
            Tags = tags;
            WssEndpoints = wssEndpoints;
        }
    }
}
