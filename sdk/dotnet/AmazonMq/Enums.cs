// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.AmazonMq
{
    /// <summary>
    /// Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
    /// </summary>
    [EnumType]
    public readonly struct BrokerAuthenticationStrategy : IEquatable<BrokerAuthenticationStrategy>
    {
        private readonly string _value;

        private BrokerAuthenticationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerAuthenticationStrategy Simple { get; } = new BrokerAuthenticationStrategy("SIMPLE");
        public static BrokerAuthenticationStrategy Ldap { get; } = new BrokerAuthenticationStrategy("LDAP");

        public static bool operator ==(BrokerAuthenticationStrategy left, BrokerAuthenticationStrategy right) => left.Equals(right);
        public static bool operator !=(BrokerAuthenticationStrategy left, BrokerAuthenticationStrategy right) => !left.Equals(right);

        public static explicit operator string(BrokerAuthenticationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerAuthenticationStrategy other && Equals(other);
        public bool Equals(BrokerAuthenticationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
    /// </summary>
    [EnumType]
    public readonly struct BrokerAuthenticationStrategy0 : IEquatable<BrokerAuthenticationStrategy0>
    {
        private readonly string _value;

        private BrokerAuthenticationStrategy0(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerAuthenticationStrategy0 Simple { get; } = new BrokerAuthenticationStrategy0("SIMPLE");
        public static BrokerAuthenticationStrategy0 Ldap { get; } = new BrokerAuthenticationStrategy0("LDAP");

        public static bool operator ==(BrokerAuthenticationStrategy0 left, BrokerAuthenticationStrategy0 right) => left.Equals(right);
        public static bool operator !=(BrokerAuthenticationStrategy0 left, BrokerAuthenticationStrategy0 right) => !left.Equals(right);

        public static explicit operator string(BrokerAuthenticationStrategy0 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerAuthenticationStrategy0 other && Equals(other);
        public bool Equals(BrokerAuthenticationStrategy0 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines whether this broker is a part of a data replication pair.
    /// </summary>
    [EnumType]
    public readonly struct BrokerDataReplicationMode : IEquatable<BrokerDataReplicationMode>
    {
        private readonly string _value;

        private BrokerDataReplicationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerDataReplicationMode None { get; } = new BrokerDataReplicationMode("NONE");
        public static BrokerDataReplicationMode Crdr { get; } = new BrokerDataReplicationMode("CRDR");

        public static bool operator ==(BrokerDataReplicationMode left, BrokerDataReplicationMode right) => left.Equals(right);
        public static bool operator !=(BrokerDataReplicationMode left, BrokerDataReplicationMode right) => !left.Equals(right);

        public static explicit operator string(BrokerDataReplicationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerDataReplicationMode other && Equals(other);
        public bool Equals(BrokerDataReplicationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines whether this broker is a part of a data replication pair.
    /// </summary>
    [EnumType]
    public readonly struct BrokerDataReplicationMode0 : IEquatable<BrokerDataReplicationMode0>
    {
        private readonly string _value;

        private BrokerDataReplicationMode0(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerDataReplicationMode0 None { get; } = new BrokerDataReplicationMode0("NONE");
        public static BrokerDataReplicationMode0 Crdr { get; } = new BrokerDataReplicationMode0("CRDR");

        public static bool operator ==(BrokerDataReplicationMode0 left, BrokerDataReplicationMode0 right) => left.Equals(right);
        public static bool operator !=(BrokerDataReplicationMode0 left, BrokerDataReplicationMode0 right) => !left.Equals(right);

        public static explicit operator string(BrokerDataReplicationMode0 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerDataReplicationMode0 other && Equals(other);
        public bool Equals(BrokerDataReplicationMode0 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment mode of the broker. Available values:
    /// 
    /// - `SINGLE_INSTANCE`
    /// - `ACTIVE_STANDBY_MULTI_AZ`
    /// - `CLUSTER_MULTI_AZ`
    /// </summary>
    [EnumType]
    public readonly struct BrokerDeploymentMode : IEquatable<BrokerDeploymentMode>
    {
        private readonly string _value;

        private BrokerDeploymentMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerDeploymentMode SingleInstance { get; } = new BrokerDeploymentMode("SINGLE_INSTANCE");
        public static BrokerDeploymentMode ActiveStandbyMultiAz { get; } = new BrokerDeploymentMode("ACTIVE_STANDBY_MULTI_AZ");
        public static BrokerDeploymentMode ClusterMultiAz { get; } = new BrokerDeploymentMode("CLUSTER_MULTI_AZ");

        public static bool operator ==(BrokerDeploymentMode left, BrokerDeploymentMode right) => left.Equals(right);
        public static bool operator !=(BrokerDeploymentMode left, BrokerDeploymentMode right) => !left.Equals(right);

        public static explicit operator string(BrokerDeploymentMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerDeploymentMode other && Equals(other);
        public bool Equals(BrokerDeploymentMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment mode of the broker. Available values:
    /// 
    /// - `SINGLE_INSTANCE`
    /// - `ACTIVE_STANDBY_MULTI_AZ`
    /// - `CLUSTER_MULTI_AZ`
    /// </summary>
    [EnumType]
    public readonly struct BrokerDeploymentMode0 : IEquatable<BrokerDeploymentMode0>
    {
        private readonly string _value;

        private BrokerDeploymentMode0(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerDeploymentMode0 SingleInstance { get; } = new BrokerDeploymentMode0("SINGLE_INSTANCE");
        public static BrokerDeploymentMode0 ActiveStandbyMultiAz { get; } = new BrokerDeploymentMode0("ACTIVE_STANDBY_MULTI_AZ");
        public static BrokerDeploymentMode0 ClusterMultiAz { get; } = new BrokerDeploymentMode0("CLUSTER_MULTI_AZ");

        public static bool operator ==(BrokerDeploymentMode0 left, BrokerDeploymentMode0 right) => left.Equals(right);
        public static bool operator !=(BrokerDeploymentMode0 left, BrokerDeploymentMode0 right) => !left.Equals(right);

        public static explicit operator string(BrokerDeploymentMode0 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerDeploymentMode0 other && Equals(other);
        public bool Equals(BrokerDeploymentMode0 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
    /// </summary>
    [EnumType]
    public readonly struct BrokerEngineType : IEquatable<BrokerEngineType>
    {
        private readonly string _value;

        private BrokerEngineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerEngineType Activemq { get; } = new BrokerEngineType("ACTIVEMQ");
        public static BrokerEngineType Rabbitmq { get; } = new BrokerEngineType("RABBITMQ");

        public static bool operator ==(BrokerEngineType left, BrokerEngineType right) => left.Equals(right);
        public static bool operator !=(BrokerEngineType left, BrokerEngineType right) => !left.Equals(right);

        public static explicit operator string(BrokerEngineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerEngineType other && Equals(other);
        public bool Equals(BrokerEngineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
    /// </summary>
    [EnumType]
    public readonly struct BrokerEngineType0 : IEquatable<BrokerEngineType0>
    {
        private readonly string _value;

        private BrokerEngineType0(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerEngineType0 Activemq { get; } = new BrokerEngineType0("ACTIVEMQ");
        public static BrokerEngineType0 Rabbitmq { get; } = new BrokerEngineType0("RABBITMQ");

        public static bool operator ==(BrokerEngineType0 left, BrokerEngineType0 right) => left.Equals(right);
        public static bool operator !=(BrokerEngineType0 left, BrokerEngineType0 right) => !left.Equals(right);

        public static explicit operator string(BrokerEngineType0 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerEngineType0 other && Equals(other);
        public bool Equals(BrokerEngineType0 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// _Allowed Values_: &lt;code&gt;MONDAY&lt;/code&gt; | &lt;code&gt;TUESDAY&lt;/code&gt; | &lt;code&gt;WEDNESDAY&lt;/code&gt; | &lt;code&gt;THURSDAY&lt;/code&gt; | &lt;code&gt;FRIDAY&lt;/code&gt; | &lt;code&gt;SATURDAY&lt;/code&gt; | &lt;code&gt;SUNDAY&lt;/code&gt;
    /// </summary>
    [EnumType]
    public readonly struct BrokerMaintenanceWindowDayOfWeek : IEquatable<BrokerMaintenanceWindowDayOfWeek>
    {
        private readonly string _value;

        private BrokerMaintenanceWindowDayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerMaintenanceWindowDayOfWeek Monday { get; } = new BrokerMaintenanceWindowDayOfWeek("MONDAY");
        public static BrokerMaintenanceWindowDayOfWeek Tuesday { get; } = new BrokerMaintenanceWindowDayOfWeek("TUESDAY");
        public static BrokerMaintenanceWindowDayOfWeek Wednesday { get; } = new BrokerMaintenanceWindowDayOfWeek("WEDNESDAY");
        public static BrokerMaintenanceWindowDayOfWeek Thursday { get; } = new BrokerMaintenanceWindowDayOfWeek("THURSDAY");
        public static BrokerMaintenanceWindowDayOfWeek Friday { get; } = new BrokerMaintenanceWindowDayOfWeek("FRIDAY");
        public static BrokerMaintenanceWindowDayOfWeek Saturday { get; } = new BrokerMaintenanceWindowDayOfWeek("SATURDAY");
        public static BrokerMaintenanceWindowDayOfWeek Sunday { get; } = new BrokerMaintenanceWindowDayOfWeek("SUNDAY");

        public static bool operator ==(BrokerMaintenanceWindowDayOfWeek left, BrokerMaintenanceWindowDayOfWeek right) => left.Equals(right);
        public static bool operator !=(BrokerMaintenanceWindowDayOfWeek left, BrokerMaintenanceWindowDayOfWeek right) => !left.Equals(right);

        public static explicit operator string(BrokerMaintenanceWindowDayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerMaintenanceWindowDayOfWeek other && Equals(other);
        public bool Equals(BrokerMaintenanceWindowDayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// _Allowed Values_: &lt;code&gt;MONDAY&lt;/code&gt; | &lt;code&gt;TUESDAY&lt;/code&gt; | &lt;code&gt;WEDNESDAY&lt;/code&gt; | &lt;code&gt;THURSDAY&lt;/code&gt; | &lt;code&gt;FRIDAY&lt;/code&gt; | &lt;code&gt;SATURDAY&lt;/code&gt; | &lt;code&gt;SUNDAY&lt;/code&gt;
    /// </summary>
    [EnumType]
    public readonly struct BrokerMaintenanceWindowDayOfWeek0 : IEquatable<BrokerMaintenanceWindowDayOfWeek0>
    {
        private readonly string _value;

        private BrokerMaintenanceWindowDayOfWeek0(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerMaintenanceWindowDayOfWeek0 Monday { get; } = new BrokerMaintenanceWindowDayOfWeek0("MONDAY");
        public static BrokerMaintenanceWindowDayOfWeek0 Tuesday { get; } = new BrokerMaintenanceWindowDayOfWeek0("TUESDAY");
        public static BrokerMaintenanceWindowDayOfWeek0 Wednesday { get; } = new BrokerMaintenanceWindowDayOfWeek0("WEDNESDAY");
        public static BrokerMaintenanceWindowDayOfWeek0 Thursday { get; } = new BrokerMaintenanceWindowDayOfWeek0("THURSDAY");
        public static BrokerMaintenanceWindowDayOfWeek0 Friday { get; } = new BrokerMaintenanceWindowDayOfWeek0("FRIDAY");
        public static BrokerMaintenanceWindowDayOfWeek0 Saturday { get; } = new BrokerMaintenanceWindowDayOfWeek0("SATURDAY");
        public static BrokerMaintenanceWindowDayOfWeek0 Sunday { get; } = new BrokerMaintenanceWindowDayOfWeek0("SUNDAY");

        public static bool operator ==(BrokerMaintenanceWindowDayOfWeek0 left, BrokerMaintenanceWindowDayOfWeek0 right) => left.Equals(right);
        public static bool operator !=(BrokerMaintenanceWindowDayOfWeek0 left, BrokerMaintenanceWindowDayOfWeek0 right) => !left.Equals(right);

        public static explicit operator string(BrokerMaintenanceWindowDayOfWeek0 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerMaintenanceWindowDayOfWeek0 other && Equals(other);
        public bool Equals(BrokerMaintenanceWindowDayOfWeek0 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The broker's storage type.
    /// </summary>
    [EnumType]
    public readonly struct BrokerStorageType : IEquatable<BrokerStorageType>
    {
        private readonly string _value;

        private BrokerStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerStorageType Ebs { get; } = new BrokerStorageType("EBS");
        public static BrokerStorageType Efs { get; } = new BrokerStorageType("EFS");

        public static bool operator ==(BrokerStorageType left, BrokerStorageType right) => left.Equals(right);
        public static bool operator !=(BrokerStorageType left, BrokerStorageType right) => !left.Equals(right);

        public static explicit operator string(BrokerStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerStorageType other && Equals(other);
        public bool Equals(BrokerStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The broker's storage type.
    /// </summary>
    [EnumType]
    public readonly struct BrokerStorageType0 : IEquatable<BrokerStorageType0>
    {
        private readonly string _value;

        private BrokerStorageType0(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BrokerStorageType0 Ebs { get; } = new BrokerStorageType0("EBS");
        public static BrokerStorageType0 Efs { get; } = new BrokerStorageType0("EFS");

        public static bool operator ==(BrokerStorageType0 left, BrokerStorageType0 right) => left.Equals(right);
        public static bool operator !=(BrokerStorageType0 left, BrokerStorageType0 right) => !left.Equals(right);

        public static explicit operator string(BrokerStorageType0 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BrokerStorageType0 other && Equals(other);
        public bool Equals(BrokerStorageType0 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
