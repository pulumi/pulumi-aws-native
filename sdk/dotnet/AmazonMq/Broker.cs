// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AmazonMq
{
    /// <summary>
    /// Resource type definition for AWS::AmazonMQ::Broker
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicBroker = new AwsNative.AmazonMq.Broker("basicBroker", new()
    ///     {
    ///         AutoMinorVersionUpgrade = false,
    ///         BrokerName = "MyBasicActiveBroker",
    ///         DeploymentMode = AwsNative.AmazonMq.BrokerDeploymentMode.SingleInstance,
    ///         EngineType = "ActiveMQ",
    ///         EngineVersion = "5.15.0",
    ///         HostInstanceType = "mq.t2.micro",
    ///         PubliclyAccessible = true,
    ///         Users = new[]
    ///         {
    ///             new AwsNative.AmazonMq.Inputs.BrokerUserArgs
    ///             {
    ///                 ConsoleAccess = true,
    ///                 Groups = new[]
    ///                 {
    ///                     "MyGroup",
    ///                 },
    ///                 Password = "AmazonMqPassword",
    ///                 Username = "AmazonMqUsername",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicBroker = new AwsNative.AmazonMq.Broker("basicBroker", new()
    ///     {
    ///         AutoMinorVersionUpgrade = false,
    ///         BrokerName = "MyBasicRabbitBroker",
    ///         DeploymentMode = AwsNative.AmazonMq.BrokerDeploymentMode.SingleInstance,
    ///         EngineType = "RabbitMQ",
    ///         EngineVersion = "3.8.6",
    ///         HostInstanceType = "mq.t3.micro",
    ///         PubliclyAccessible = true,
    ///         Users = new[]
    ///         {
    ///             new AwsNative.AmazonMq.Inputs.BrokerUserArgs
    ///             {
    ///                 Password = "AmazonMqPassword",
    ///                 Username = "AmazonMqUsername",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicBroker = new AwsNative.AmazonMq.Broker("basicBroker", new()
    ///     {
    ///         AutoMinorVersionUpgrade = false,
    ///         BrokerName = "MyBasicActiveBroker",
    ///         DeploymentMode = AwsNative.AmazonMq.BrokerDeploymentMode.SingleInstance,
    ///         EngineType = "ActiveMQ",
    ///         EngineVersion = "5.15.0",
    ///         HostInstanceType = "mq.t2.micro",
    ///         PubliclyAccessible = true,
    ///         Users = new[]
    ///         {
    ///             new AwsNative.AmazonMq.Inputs.BrokerUserArgs
    ///             {
    ///                 ConsoleAccess = true,
    ///                 Groups = new[]
    ///                 {
    ///                     "MyGroup",
    ///                 },
    ///                 Password = "AmazonMqPassword",
    ///                 Username = "AmazonMqUsername",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicBroker = new AwsNative.AmazonMq.Broker("basicBroker", new()
    ///     {
    ///         AutoMinorVersionUpgrade = false,
    ///         BrokerName = "MyBasicRabbitBroker",
    ///         DeploymentMode = AwsNative.AmazonMq.BrokerDeploymentMode.SingleInstance,
    ///         EngineType = "RabbitMQ",
    ///         EngineVersion = "3.8.6",
    ///         HostInstanceType = "mq.t3.micro",
    ///         PubliclyAccessible = true,
    ///         Users = new[]
    ///         {
    ///             new AwsNative.AmazonMq.Inputs.BrokerUserArgs
    ///             {
    ///                 Password = "AmazonMqPassword",
    ///                 Username = "AmazonMqUsername",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var complexBroker = new AwsNative.AmazonMq.Broker("complexBroker", new()
    ///     {
    ///         AutoMinorVersionUpgrade = true,
    ///         BrokerName = "MyComplexRabbitBroker",
    ///         DeploymentMode = AwsNative.AmazonMq.BrokerDeploymentMode.SingleInstance,
    ///         EngineType = "RabbitMQ",
    ///         EngineVersion = "3.8.6",
    ///         HostInstanceType = "mq.t3.micro",
    ///         Logs = new AwsNative.AmazonMq.Inputs.BrokerLogListArgs
    ///         {
    ///             General = true,
    ///         },
    ///         MaintenanceWindowStartTime = new AwsNative.AmazonMq.Inputs.BrokerMaintenanceWindowArgs
    ///         {
    ///             DayOfWeek = "Monday",
    ///             TimeOfDay = "22:45",
    ///             TimeZone = "America/Los_Angeles",
    ///         },
    ///         PubliclyAccessible = false,
    ///         SecurityGroups = new[]
    ///         {
    ///             "sg-1a234b5cd6efgh7i8",
    ///         },
    ///         SubnetIds = new[]
    ///         {
    ///             "subnet-123456b7891abcd1f",
    ///         },
    ///         Users = new[]
    ///         {
    ///             new AwsNative.AmazonMq.Inputs.BrokerUserArgs
    ///             {
    ///                 Password = "AmazonMqPassword",
    ///                 Username = "AmazonMqUsername",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var complexBroker = new AwsNative.AmazonMq.Broker("complexBroker", new()
    ///     {
    ///         AutoMinorVersionUpgrade = false,
    ///         BrokerName = "MyComplexRabbitBroker",
    ///         DeploymentMode = AwsNative.AmazonMq.BrokerDeploymentMode.SingleInstance,
    ///         EngineType = "RabbitMQ",
    ///         EngineVersion = "3.8.6",
    ///         HostInstanceType = "mq.t3.micro",
    ///         Logs = new AwsNative.AmazonMq.Inputs.BrokerLogListArgs
    ///         {
    ///             General = true,
    ///         },
    ///         MaintenanceWindowStartTime = new AwsNative.AmazonMq.Inputs.BrokerMaintenanceWindowArgs
    ///         {
    ///             DayOfWeek = "Monday",
    ///             TimeOfDay = "22:45",
    ///             TimeZone = "America/Los_Angeles",
    ///         },
    ///         PubliclyAccessible = false,
    ///         SecurityGroups = new[]
    ///         {
    ///             "sg-1a234b5cd6efgh7i8",
    ///         },
    ///         SubnetIds = new[]
    ///         {
    ///             "subnet-123456b7891abcd1f",
    ///         },
    ///         Users = new[]
    ///         {
    ///             new AwsNative.AmazonMq.Inputs.BrokerUserArgs
    ///             {
    ///                 Password = "AmazonMqPassword",
    ///                 Username = "AmazonMqUsername",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:amazonmq:Broker")]
    public partial class Broker : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The AMQP endpoints of each broker instance as a list of strings.
        /// 
        /// `amqp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:5671`
        /// </summary>
        [Output("amqpEndpoints")]
        public Output<ImmutableArray<string>> AmqpEndpoints { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon MQ broker.
        /// 
        /// `arn:aws:mq:us-east-2:123456789012:broker:MyBroker:b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9`
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
        /// </summary>
        [Output("authenticationStrategy")]
        public Output<string?> AuthenticationStrategy { get; private set; } = null!;

        /// <summary>
        /// Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
        /// </summary>
        [Output("autoMinorVersionUpgrade")]
        public Output<bool?> AutoMinorVersionUpgrade { get; private set; } = null!;

        /// <summary>
        /// Required. The unique ID that Amazon MQ generates for the configuration.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
        /// 
        /// &gt; Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
        /// </summary>
        [Output("brokerName")]
        public Output<string> BrokerName { get; private set; } = null!;

        /// <summary>
        /// The intended configuration (ID and revision) to be set when creating or updating.
        /// This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.BrokerConfigurationId?> Configuration { get; private set; } = null!;

        /// <summary>
        /// The ID of the current actual configuration.
        /// </summary>
        [Output("configurationId")]
        public Output<string> ConfigurationId { get; private set; } = null!;

        /// <summary>
        /// The revision of the current actual configuration.
        /// </summary>
        [Output("configurationRevision")]
        public Output<string> ConfigurationRevision { get; private set; } = null!;

        [Output("consoleUrls")]
        public Output<ImmutableArray<string>> ConsoleUrls { get; private set; } = null!;

        /// <summary>
        /// Defines whether this broker is a part of a data replication pair.
        /// </summary>
        [Output("dataReplicationMode")]
        public Output<string?> DataReplicationMode { get; private set; } = null!;

        /// <summary>
        /// The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
        /// This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
        /// Information on the current primary is available on the DataReplicationMetadata object returned by the API.
        /// </summary>
        [Output("dataReplicationPrimaryBrokerArn")]
        public Output<string?> DataReplicationPrimaryBrokerArn { get; private set; } = null!;

        /// <summary>
        /// The deployment mode of the broker. Available values:
        /// 
        /// - `SINGLE_INSTANCE`
        /// - `ACTIVE_STANDBY_MULTI_AZ`
        /// - `CLUSTER_MULTI_AZ`
        /// </summary>
        [Output("deploymentMode")]
        public Output<string> DeploymentMode { get; private set; } = null!;

        /// <summary>
        /// Encryption options for the broker. Does not apply to RabbitMQ brokers.
        /// </summary>
        [Output("encryptionOptions")]
        public Output<Outputs.BrokerEncryptionOptions?> EncryptionOptions { get; private set; } = null!;

        /// <summary>
        /// The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
        /// </summary>
        [Output("engineType")]
        public Output<string> EngineType { get; private set; } = null!;

        /// <summary>
        /// The version specified to use. See also EngineVersionCurrent.
        /// </summary>
        [Output("engineVersion")]
        public Output<string?> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The version in use. This may have more precision than the specified EngineVersion.
        /// </summary>
        [Output("engineVersionCurrent")]
        public Output<string> EngineVersionCurrent { get; private set; } = null!;

        /// <summary>
        /// The broker's instance type.
        /// </summary>
        [Output("hostInstanceType")]
        public Output<string> HostInstanceType { get; private set; } = null!;

        /// <summary>
        /// The IP addresses of each broker instance as a list of strings. Does not apply to RabbitMQ brokers.
        /// 
        /// `['198.51.100.2', '203.0.113.9']`
        /// </summary>
        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        /// <summary>
        /// Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        /// </summary>
        [Output("ldapServerMetadata")]
        public Output<Outputs.BrokerLdapServerMetadata?> LdapServerMetadata { get; private set; } = null!;

        /// <summary>
        /// Enables Amazon CloudWatch logging for brokers.
        /// </summary>
        [Output("logs")]
        public Output<Outputs.BrokerLogList?> Logs { get; private set; } = null!;

        /// <summary>
        /// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
        /// </summary>
        [Output("maintenanceWindowStartTime")]
        public Output<Outputs.BrokerMaintenanceWindow?> MaintenanceWindowStartTime { get; private set; } = null!;

        /// <summary>
        /// The MQTT endpoints of each broker instance as a list of strings.
        /// 
        /// `mqtt+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:8883`
        /// </summary>
        [Output("mqttEndpoints")]
        public Output<ImmutableArray<string>> MqttEndpoints { get; private set; } = null!;

        /// <summary>
        /// The OpenWire endpoints of each broker instance as a list of strings.
        /// 
        /// `ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61617`
        /// </summary>
        [Output("openWireEndpoints")]
        public Output<ImmutableArray<string>> OpenWireEndpoints { get; private set; } = null!;

        /// <summary>
        /// Enables connections from applications outside of the VPC that hosts the broker's subnets.
        /// </summary>
        [Output("publiclyAccessible")]
        public Output<bool> PubliclyAccessible { get; private set; } = null!;

        /// <summary>
        /// The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// The STOMP endpoints of each broker instance as a list of strings.
        /// 
        /// `stomp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61614`
        /// </summary>
        [Output("stompEndpoints")]
        public Output<ImmutableArray<string>> StompEndpoints { get; private set; } = null!;

        /// <summary>
        /// The broker's storage type.
        /// </summary>
        [Output("storageType")]
        public Output<string?> StorageType { get; private set; } = null!;

        /// <summary>
        /// The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
        /// 
        /// &gt; If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Users to configure on the broker. 
        /// For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
        /// For ActiveMQ, changes to anything but Password are detected and will trigger an update,
        /// but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.BrokerUser>> Users { get; private set; } = null!;

        /// <summary>
        /// The WSS endpoints of each broker instance as a list of strings.
        /// 
        /// `wss://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61619`
        /// </summary>
        [Output("wssEndpoints")]
        public Output<ImmutableArray<string>> WssEndpoints { get; private set; } = null!;


        /// <summary>
        /// Create a Broker resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Broker(string name, BrokerArgs args, CustomResourceOptions? options = null)
            : base("aws-native:amazonmq:Broker", name, args ?? new BrokerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Broker(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:amazonmq:Broker", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "authenticationStrategy",
                    "brokerName",
                    "deploymentMode",
                    "encryptionOptions",
                    "engineType",
                    "publiclyAccessible",
                    "storageType",
                    "subnetIds[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Broker resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Broker Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Broker(name, id, options);
        }
    }

    public sealed class BrokerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
        /// </summary>
        [Input("authenticationStrategy")]
        public InputUnion<Pulumi.AwsNative.AmazonMq.BrokerAuthenticationStrategy, string>? AuthenticationStrategy { get; set; }

        /// <summary>
        /// Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
        /// </summary>
        [Input("autoMinorVersionUpgrade")]
        public Input<bool>? AutoMinorVersionUpgrade { get; set; }

        /// <summary>
        /// The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
        /// 
        /// &gt; Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
        /// </summary>
        [Input("brokerName")]
        public Input<string>? BrokerName { get; set; }

        /// <summary>
        /// The intended configuration (ID and revision) to be set when creating or updating.
        /// This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.BrokerConfigurationIdArgs>? Configuration { get; set; }

        /// <summary>
        /// Defines whether this broker is a part of a data replication pair.
        /// </summary>
        [Input("dataReplicationMode")]
        public InputUnion<Pulumi.AwsNative.AmazonMq.BrokerDataReplicationMode, string>? DataReplicationMode { get; set; }

        /// <summary>
        /// The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
        /// This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
        /// Information on the current primary is available on the DataReplicationMetadata object returned by the API.
        /// </summary>
        [Input("dataReplicationPrimaryBrokerArn")]
        public Input<string>? DataReplicationPrimaryBrokerArn { get; set; }

        /// <summary>
        /// The deployment mode of the broker. Available values:
        /// 
        /// - `SINGLE_INSTANCE`
        /// - `ACTIVE_STANDBY_MULTI_AZ`
        /// - `CLUSTER_MULTI_AZ`
        /// </summary>
        [Input("deploymentMode", required: true)]
        public InputUnion<Pulumi.AwsNative.AmazonMq.BrokerDeploymentMode, string> DeploymentMode { get; set; } = null!;

        /// <summary>
        /// Encryption options for the broker. Does not apply to RabbitMQ brokers.
        /// </summary>
        [Input("encryptionOptions")]
        public Input<Inputs.BrokerEncryptionOptionsArgs>? EncryptionOptions { get; set; }

        /// <summary>
        /// The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
        /// </summary>
        [Input("engineType", required: true)]
        public InputUnion<Pulumi.AwsNative.AmazonMq.BrokerEngineType, string> EngineType { get; set; } = null!;

        /// <summary>
        /// The version specified to use. See also EngineVersionCurrent.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The broker's instance type.
        /// </summary>
        [Input("hostInstanceType", required: true)]
        public Input<string> HostInstanceType { get; set; } = null!;

        /// <summary>
        /// Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
        /// </summary>
        [Input("ldapServerMetadata")]
        public Input<Inputs.BrokerLdapServerMetadataArgs>? LdapServerMetadata { get; set; }

        /// <summary>
        /// Enables Amazon CloudWatch logging for brokers.
        /// </summary>
        [Input("logs")]
        public Input<Inputs.BrokerLogListArgs>? Logs { get; set; }

        /// <summary>
        /// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
        /// </summary>
        [Input("maintenanceWindowStartTime")]
        public Input<Inputs.BrokerMaintenanceWindowArgs>? MaintenanceWindowStartTime { get; set; }

        /// <summary>
        /// Enables connections from applications outside of the VPC that hosts the broker's subnets.
        /// </summary>
        [Input("publiclyAccessible", required: true)]
        public Input<bool> PubliclyAccessible { get; set; } = null!;

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The broker's storage type.
        /// </summary>
        [Input("storageType")]
        public InputUnion<Pulumi.AwsNative.AmazonMq.BrokerStorageType, string>? StorageType { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
        /// 
        /// &gt; If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        [Input("users")]
        private InputList<Inputs.BrokerUserArgs>? _users;

        /// <summary>
        /// Users to configure on the broker. 
        /// For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
        /// For ActiveMQ, changes to anything but Password are detected and will trigger an update,
        /// but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
        /// </summary>
        public InputList<Inputs.BrokerUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.BrokerUserArgs>());
            set => _users = value;
        }

        public BrokerArgs()
        {
        }
        public static new BrokerArgs Empty => new BrokerArgs();
    }
}
