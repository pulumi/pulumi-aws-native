// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.CodeBuild
{
    /// <summary>
    /// Information about the compute resources the compute fleet uses. Available values include:
    /// 
    /// - `BUILD_GENERAL1_SMALL` : Use up to 3 GB memory and 2 vCPUs for builds.
    /// - `BUILD_GENERAL1_MEDIUM` : Use up to 7 GB memory and 4 vCPUs for builds.
    /// - `BUILD_GENERAL1_LARGE` : Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment type.
    /// - `BUILD_GENERAL1_XLARGE` : Use up to 70 GB memory and 36 vCPUs for builds, depending on your environment type.
    /// - `BUILD_GENERAL1_2XLARGE` : Use up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.
    /// 
    /// If you use `BUILD_GENERAL1_SMALL` :
    /// 
    /// - For environment type `LINUX_CONTAINER` , you can use up to 3 GB memory and 2 vCPUs for builds.
    /// - For environment type `LINUX_GPU_CONTAINER` , you can use up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.
    /// - For environment type `ARM_CONTAINER` , you can use up to 4 GB memory and 2 vCPUs on ARM-based processors for builds.
    /// 
    /// If you use `BUILD_GENERAL1_LARGE` :
    /// 
    /// - For environment type `LINUX_CONTAINER` , you can use up to 15 GB memory and 8 vCPUs for builds.
    /// - For environment type `LINUX_GPU_CONTAINER` , you can use up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.
    /// - For environment type `ARM_CONTAINER` , you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.
    /// 
    /// For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the *AWS CodeBuild User Guide.*
    /// </summary>
    [EnumType]
    public readonly struct FleetComputeType : IEquatable<FleetComputeType>
    {
        private readonly string _value;

        private FleetComputeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetComputeType BuildGeneral1Small { get; } = new FleetComputeType("BUILD_GENERAL1_SMALL");
        public static FleetComputeType BuildGeneral1Medium { get; } = new FleetComputeType("BUILD_GENERAL1_MEDIUM");
        public static FleetComputeType BuildGeneral1Large { get; } = new FleetComputeType("BUILD_GENERAL1_LARGE");
        public static FleetComputeType BuildGeneral12xlarge { get; } = new FleetComputeType("BUILD_GENERAL1_2XLARGE");

        public static bool operator ==(FleetComputeType left, FleetComputeType right) => left.Equals(right);
        public static bool operator !=(FleetComputeType left, FleetComputeType right) => !left.Equals(right);

        public static explicit operator string(FleetComputeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetComputeType other && Equals(other);
        public bool Equals(FleetComputeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The environment type of the compute fleet.
    /// 
    /// - The environment type `ARM_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), EU (Frankfurt), and South America (São Paulo).
    /// - The environment type `LINUX_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), South America (São Paulo), and Asia Pacific (Mumbai).
    /// - The environment type `LINUX_GPU_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), and Asia Pacific (Sydney).
    /// - The environment type `WINDOWS_SERVER_2019_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), Asia Pacific (Tokyo), Asia Pacific (Mumbai) and EU (Ireland).
    /// - The environment type `WINDOWS_SERVER_2022_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Sydney), Asia Pacific (Singapore), Asia Pacific (Tokyo), South America (São Paulo) and Asia Pacific (Mumbai).
    /// 
    /// For more information, see [Build environment compute types](https://docs.aws.amazon.com//codebuild/latest/userguide/build-env-ref-compute-types.html) in the *AWS CodeBuild user guide* .
    /// </summary>
    [EnumType]
    public readonly struct FleetEnvironmentType : IEquatable<FleetEnvironmentType>
    {
        private readonly string _value;

        private FleetEnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetEnvironmentType WindowsServer2019Container { get; } = new FleetEnvironmentType("WINDOWS_SERVER_2019_CONTAINER");
        public static FleetEnvironmentType WindowsServer2022Container { get; } = new FleetEnvironmentType("WINDOWS_SERVER_2022_CONTAINER");
        public static FleetEnvironmentType LinuxContainer { get; } = new FleetEnvironmentType("LINUX_CONTAINER");
        public static FleetEnvironmentType LinuxGpuContainer { get; } = new FleetEnvironmentType("LINUX_GPU_CONTAINER");
        public static FleetEnvironmentType ArmContainer { get; } = new FleetEnvironmentType("ARM_CONTAINER");

        public static bool operator ==(FleetEnvironmentType left, FleetEnvironmentType right) => left.Equals(right);
        public static bool operator !=(FleetEnvironmentType left, FleetEnvironmentType right) => !left.Equals(right);

        public static explicit operator string(FleetEnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetEnvironmentType other && Equals(other);
        public bool Equals(FleetEnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
