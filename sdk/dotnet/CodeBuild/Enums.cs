// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.CodeBuild
{
    /// <summary>
    /// Information about the compute resources the compute fleet uses. Available values include:
    /// 
    /// - `ATTRIBUTE_BASED_COMPUTE` : Specify the amount of vCPUs, memory, disk space, and the type of machine.
    /// 
    /// &gt; If you use `ATTRIBUTE_BASED_COMPUTE` , you must define your attributes by using `computeConfiguration` . AWS CodeBuild will select the cheapest instance that satisfies your specified attributes. For more information, see [Reserved capacity environment types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment-reserved-capacity.types) in the *AWS CodeBuild User Guide* .
    /// - `BUILD_GENERAL1_SMALL` : Use up to 4 GiB memory and 2 vCPUs for builds.
    /// - `BUILD_GENERAL1_MEDIUM` : Use up to 8 GiB memory and 4 vCPUs for builds.
    /// - `BUILD_GENERAL1_LARGE` : Use up to 16 GiB memory and 8 vCPUs for builds, depending on your environment type.
    /// - `BUILD_GENERAL1_XLARGE` : Use up to 72 GiB memory and 36 vCPUs for builds, depending on your environment type.
    /// - `BUILD_GENERAL1_2XLARGE` : Use up to 144 GiB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.
    /// - `BUILD_LAMBDA_1GB` : Use up to 1 GiB memory for builds. Only available for environment type `LINUX_LAMBDA_CONTAINER` and `ARM_LAMBDA_CONTAINER` .
    /// - `BUILD_LAMBDA_2GB` : Use up to 2 GiB memory for builds. Only available for environment type `LINUX_LAMBDA_CONTAINER` and `ARM_LAMBDA_CONTAINER` .
    /// - `BUILD_LAMBDA_4GB` : Use up to 4 GiB memory for builds. Only available for environment type `LINUX_LAMBDA_CONTAINER` and `ARM_LAMBDA_CONTAINER` .
    /// - `BUILD_LAMBDA_8GB` : Use up to 8 GiB memory for builds. Only available for environment type `LINUX_LAMBDA_CONTAINER` and `ARM_LAMBDA_CONTAINER` .
    /// - `BUILD_LAMBDA_10GB` : Use up to 10 GiB memory for builds. Only available for environment type `LINUX_LAMBDA_CONTAINER` and `ARM_LAMBDA_CONTAINER` .
    /// 
    /// If you use `BUILD_GENERAL1_SMALL` :
    /// 
    /// - For environment type `LINUX_CONTAINER` , you can use up to 4 GiB memory and 2 vCPUs for builds.
    /// - For environment type `LINUX_GPU_CONTAINER` , you can use up to 16 GiB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.
    /// - For environment type `ARM_CONTAINER` , you can use up to 4 GiB memory and 2 vCPUs on ARM-based processors for builds.
    /// 
    /// If you use `BUILD_GENERAL1_LARGE` :
    /// 
    /// - For environment type `LINUX_CONTAINER` , you can use up to 16 GiB memory and 8 vCPUs for builds.
    /// - For environment type `LINUX_GPU_CONTAINER` , you can use up to 255 GiB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.
    /// - For environment type `ARM_CONTAINER` , you can use up to 16 GiB memory and 8 vCPUs on ARM-based processors for builds.
    /// 
    /// For more information, see [On-demand environment types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) in the *AWS CodeBuild User Guide.*
    /// </summary>
    [EnumType]
    public readonly struct FleetComputeType : IEquatable<FleetComputeType>
    {
        private readonly string _value;

        private FleetComputeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetComputeType BuildGeneral1Small { get; } = new FleetComputeType("BUILD_GENERAL1_SMALL");
        public static FleetComputeType BuildGeneral1Medium { get; } = new FleetComputeType("BUILD_GENERAL1_MEDIUM");
        public static FleetComputeType BuildGeneral1Large { get; } = new FleetComputeType("BUILD_GENERAL1_LARGE");
        public static FleetComputeType BuildGeneral1Xlarge { get; } = new FleetComputeType("BUILD_GENERAL1_XLARGE");
        public static FleetComputeType BuildGeneral12xlarge { get; } = new FleetComputeType("BUILD_GENERAL1_2XLARGE");

        public static bool operator ==(FleetComputeType left, FleetComputeType right) => left.Equals(right);
        public static bool operator !=(FleetComputeType left, FleetComputeType right) => !left.Equals(right);

        public static explicit operator string(FleetComputeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetComputeType other && Equals(other);
        public bool Equals(FleetComputeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The environment type of the compute fleet.
    /// 
    /// - The environment type `ARM_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), EU (Frankfurt), and South America (São Paulo).
    /// - The environment type `LINUX_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), South America (São Paulo), and Asia Pacific (Mumbai).
    /// - The environment type `LINUX_GPU_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), and Asia Pacific (Sydney).
    /// - The environment type `MAC_ARM` is available only in regions US East (Ohio), US East (N. Virginia), US West (Oregon), Europe (Frankfurt), and Asia Pacific (Sydney).
    /// - The environment type `WINDOWS_SERVER_2019_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), Asia Pacific (Tokyo), Asia Pacific (Mumbai) and EU (Ireland).
    /// - The environment type `WINDOWS_SERVER_2022_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Sydney), Asia Pacific (Singapore), Asia Pacific (Tokyo), South America (São Paulo) and Asia Pacific (Mumbai).
    /// 
    /// For more information, see [Build environment compute types](https://docs.aws.amazon.com//codebuild/latest/userguide/build-env-ref-compute-types.html) in the *AWS CodeBuild user guide* .
    /// </summary>
    [EnumType]
    public readonly struct FleetEnvironmentType : IEquatable<FleetEnvironmentType>
    {
        private readonly string _value;

        private FleetEnvironmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetEnvironmentType WindowsServer2019Container { get; } = new FleetEnvironmentType("WINDOWS_SERVER_2019_CONTAINER");
        public static FleetEnvironmentType WindowsServer2022Container { get; } = new FleetEnvironmentType("WINDOWS_SERVER_2022_CONTAINER");
        public static FleetEnvironmentType LinuxContainer { get; } = new FleetEnvironmentType("LINUX_CONTAINER");
        public static FleetEnvironmentType LinuxGpuContainer { get; } = new FleetEnvironmentType("LINUX_GPU_CONTAINER");
        public static FleetEnvironmentType ArmContainer { get; } = new FleetEnvironmentType("ARM_CONTAINER");
        public static FleetEnvironmentType MacArm { get; } = new FleetEnvironmentType("MAC_ARM");

        public static bool operator ==(FleetEnvironmentType left, FleetEnvironmentType right) => left.Equals(right);
        public static bool operator !=(FleetEnvironmentType left, FleetEnvironmentType right) => !left.Equals(right);

        public static explicit operator string(FleetEnvironmentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetEnvironmentType other && Equals(other);
        public bool Equals(FleetEnvironmentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The compute fleet overflow behavior.
    /// 
    /// - For overflow behavior `QUEUE` , your overflow builds need to wait on the existing fleet instance to become available.
    /// - For overflow behavior `ON_DEMAND` , your overflow builds run on CodeBuild on-demand.
    /// 
    /// &gt; If you choose to set your overflow behavior to on-demand while creating a VPC-connected fleet, make sure that you add the required VPC permissions to your project service role. For more information, see [Example policy statement to allow CodeBuild access to AWS services required to create a VPC network interface](https://docs.aws.amazon.com/codebuild/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#customer-managed-policies-example-create-vpc-network-interface) .
    /// </summary>
    [EnumType]
    public readonly struct FleetOverflowBehavior : IEquatable<FleetOverflowBehavior>
    {
        private readonly string _value;

        private FleetOverflowBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetOverflowBehavior Queue { get; } = new FleetOverflowBehavior("QUEUE");
        public static FleetOverflowBehavior OnDemand { get; } = new FleetOverflowBehavior("ON_DEMAND");

        public static bool operator ==(FleetOverflowBehavior left, FleetOverflowBehavior right) => left.Equals(right);
        public static bool operator !=(FleetOverflowBehavior left, FleetOverflowBehavior right) => !left.Equals(right);

        public static explicit operator string(FleetOverflowBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetOverflowBehavior other && Equals(other);
        public bool Equals(FleetOverflowBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
