// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CodeBuild
{
    public static class GetProject
    {
        /// <summary>
        /// Resource Type definition for AWS::CodeBuild::Project
        /// </summary>
        public static Task<GetProjectResult> InvokeAsync(GetProjectArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectResult>("aws-native:codebuild:getProject", args ?? new GetProjectArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::CodeBuild::Project
        /// </summary>
        public static Output<GetProjectResult> Invoke(GetProjectInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetProjectResult>("aws-native:codebuild:getProject", args ?? new GetProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetProjectArgs()
        {
        }
    }

    public sealed class GetProjectInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetProjectInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProjectResult
    {
        public readonly string? Arn;
        public readonly Outputs.ProjectArtifacts? Artifacts;
        public readonly bool? BadgeEnabled;
        public readonly Outputs.ProjectBuildBatchConfig? BuildBatchConfig;
        public readonly Outputs.ProjectCache? Cache;
        public readonly int? ConcurrentBuildLimit;
        public readonly string? Description;
        public readonly string? EncryptionKey;
        public readonly Outputs.ProjectEnvironment? Environment;
        public readonly ImmutableArray<Outputs.ProjectFileSystemLocation> FileSystemLocations;
        public readonly string? Id;
        public readonly Outputs.ProjectLogsConfig? LogsConfig;
        public readonly int? QueuedTimeoutInMinutes;
        public readonly string? ResourceAccessRole;
        public readonly ImmutableArray<Outputs.ProjectArtifacts> SecondaryArtifacts;
        public readonly ImmutableArray<Outputs.ProjectSourceVersion> SecondarySourceVersions;
        public readonly ImmutableArray<Outputs.ProjectSource> SecondarySources;
        public readonly string? ServiceRole;
        public readonly Outputs.ProjectSource? Source;
        public readonly string? SourceVersion;
        public readonly ImmutableArray<Outputs.ProjectTag> Tags;
        public readonly int? TimeoutInMinutes;
        public readonly Outputs.ProjectTriggers? Triggers;
        public readonly string? Visibility;
        public readonly Outputs.ProjectVpcConfig? VpcConfig;

        [OutputConstructor]
        private GetProjectResult(
            string? arn,

            Outputs.ProjectArtifacts? artifacts,

            bool? badgeEnabled,

            Outputs.ProjectBuildBatchConfig? buildBatchConfig,

            Outputs.ProjectCache? cache,

            int? concurrentBuildLimit,

            string? description,

            string? encryptionKey,

            Outputs.ProjectEnvironment? environment,

            ImmutableArray<Outputs.ProjectFileSystemLocation> fileSystemLocations,

            string? id,

            Outputs.ProjectLogsConfig? logsConfig,

            int? queuedTimeoutInMinutes,

            string? resourceAccessRole,

            ImmutableArray<Outputs.ProjectArtifacts> secondaryArtifacts,

            ImmutableArray<Outputs.ProjectSourceVersion> secondarySourceVersions,

            ImmutableArray<Outputs.ProjectSource> secondarySources,

            string? serviceRole,

            Outputs.ProjectSource? source,

            string? sourceVersion,

            ImmutableArray<Outputs.ProjectTag> tags,

            int? timeoutInMinutes,

            Outputs.ProjectTriggers? triggers,

            string? visibility,

            Outputs.ProjectVpcConfig? vpcConfig)
        {
            Arn = arn;
            Artifacts = artifacts;
            BadgeEnabled = badgeEnabled;
            BuildBatchConfig = buildBatchConfig;
            Cache = cache;
            ConcurrentBuildLimit = concurrentBuildLimit;
            Description = description;
            EncryptionKey = encryptionKey;
            Environment = environment;
            FileSystemLocations = fileSystemLocations;
            Id = id;
            LogsConfig = logsConfig;
            QueuedTimeoutInMinutes = queuedTimeoutInMinutes;
            ResourceAccessRole = resourceAccessRole;
            SecondaryArtifacts = secondaryArtifacts;
            SecondarySourceVersions = secondarySourceVersions;
            SecondarySources = secondarySources;
            ServiceRole = serviceRole;
            Source = source;
            SourceVersion = sourceVersion;
            Tags = tags;
            TimeoutInMinutes = timeoutInMinutes;
            Triggers = triggers;
            Visibility = visibility;
            VpcConfig = vpcConfig;
        }
    }
}
