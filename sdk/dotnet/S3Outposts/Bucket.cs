// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.S3Outposts
{
    /// <summary>
    /// Resource Type Definition for AWS::S3Outposts::Bucket
    /// </summary>
    [AwsNativeResourceType("aws-native:s3outposts:Bucket")]
    public partial class Bucket : Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the specified bucket.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A name for the bucket.
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// Rules that define how Amazon S3Outposts manages objects during their lifetime.
        /// </summary>
        [Output("lifecycleConfiguration")]
        public Output<Outputs.BucketLifecycleConfiguration?> LifecycleConfiguration { get; private set; } = null!;

        /// <summary>
        /// The id of the customer outpost on which the bucket resides.
        /// </summary>
        [Output("outpostId")]
        public Output<string> OutpostId { get; private set; } = null!;

        /// <summary>
        /// An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.BucketTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Bucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Bucket(string name, BucketArgs args, CustomResourceOptions? options = null)
            : base("aws-native:s3outposts:Bucket", name, args ?? new BucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Bucket(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:s3outposts:Bucket", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Bucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Bucket Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Bucket(name, id, options);
        }
    }

    public sealed class BucketArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A name for the bucket.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// Rules that define how Amazon S3Outposts manages objects during their lifetime.
        /// </summary>
        [Input("lifecycleConfiguration")]
        public Input<Inputs.BucketLifecycleConfigurationArgs>? LifecycleConfiguration { get; set; }

        /// <summary>
        /// The id of the customer outpost on which the bucket resides.
        /// </summary>
        [Input("outpostId", required: true)]
        public Input<string> OutpostId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.BucketTagArgs>? _tags;

        /// <summary>
        /// An arbitrary set of tags (key-value pairs) for this S3Outposts bucket.
        /// </summary>
        public InputList<Inputs.BucketTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.BucketTagArgs>());
            set => _tags = value;
        }

        public BucketArgs()
        {
        }
    }
}
