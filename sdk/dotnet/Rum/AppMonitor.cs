// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Rum
{
    /// <summary>
    /// Resource Type definition for AWS::RUM::AppMonitor
    /// </summary>
    [AwsNativeResourceType("aws-native:rum:AppMonitor")]
    public partial class AppMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
        /// 
        /// If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
        /// </summary>
        [Output("appMonitorConfiguration")]
        public Output<Outputs.AppMonitorConfiguration?> AppMonitorConfiguration { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the new app monitor.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
        /// </summary>
        [Output("customEvents")]
        public Output<Outputs.AppMonitorCustomEvents?> CustomEvents { get; private set; } = null!;

        /// <summary>
        /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
        /// </summary>
        [Output("cwLogEnabled")]
        public Output<bool?> CwLogEnabled { get; private set; } = null!;

        /// <summary>
        /// The top-level internet domain name for which your application has administrative authority.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// A name for the app monitor
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Assigns one or more tags (key-value pairs) to the app monitor.
        /// 
        /// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
        /// 
        /// Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
        /// 
        /// You can associate as many as 50 tags with an app monitor.
        /// 
        /// For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a AppMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppMonitor(string name, AppMonitorArgs args, CustomResourceOptions? options = null)
            : base("aws-native:rum:AppMonitor", name, args ?? new AppMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppMonitor(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:rum:AppMonitor", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "name",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppMonitor Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AppMonitor(name, id, options);
        }
    }

    public sealed class AppMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
        /// 
        /// If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
        /// </summary>
        [Input("appMonitorConfiguration")]
        public Input<Inputs.AppMonitorConfigurationArgs>? AppMonitorConfiguration { get; set; }

        /// <summary>
        /// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
        /// </summary>
        [Input("customEvents")]
        public Input<Inputs.AppMonitorCustomEventsArgs>? CustomEvents { get; set; }

        /// <summary>
        /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
        /// </summary>
        [Input("cwLogEnabled")]
        public Input<bool>? CwLogEnabled { get; set; }

        /// <summary>
        /// The top-level internet domain name for which your application has administrative authority.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// A name for the app monitor
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// Assigns one or more tags (key-value pairs) to the app monitor.
        /// 
        /// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
        /// 
        /// Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
        /// 
        /// You can associate as many as 50 tags with an app monitor.
        /// 
        /// For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public AppMonitorArgs()
        {
        }
        public static new AppMonitorArgs Empty => new AppMonitorArgs();
    }
}
