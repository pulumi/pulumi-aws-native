// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Rum
{
    public static class GetAppMonitor
    {
        /// <summary>
        /// Resource Type definition for AWS::RUM::AppMonitor
        /// </summary>
        public static Task<GetAppMonitorResult> InvokeAsync(GetAppMonitorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAppMonitorResult>("aws-native:rum:getAppMonitor", args ?? new GetAppMonitorArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::RUM::AppMonitor
        /// </summary>
        public static Output<GetAppMonitorResult> Invoke(GetAppMonitorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppMonitorResult>("aws-native:rum:getAppMonitor", args ?? new GetAppMonitorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::RUM::AppMonitor
        /// </summary>
        public static Output<GetAppMonitorResult> Invoke(GetAppMonitorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAppMonitorResult>("aws-native:rum:getAppMonitor", args ?? new GetAppMonitorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAppMonitorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name for the app monitor
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetAppMonitorArgs()
        {
        }
        public static new GetAppMonitorArgs Empty => new GetAppMonitorArgs();
    }

    public sealed class GetAppMonitorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name for the app monitor
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetAppMonitorInvokeArgs()
        {
        }
        public static new GetAppMonitorInvokeArgs Empty => new GetAppMonitorInvokeArgs();
    }


    [OutputType]
    public sealed class GetAppMonitorResult
    {
        /// <summary>
        /// A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
        /// 
        /// If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
        /// </summary>
        public readonly Outputs.AppMonitorConfiguration? AppMonitorConfiguration;
        /// <summary>
        /// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
        /// </summary>
        public readonly Outputs.AppMonitorCustomEvents? CustomEvents;
        /// <summary>
        /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
        /// </summary>
        public readonly bool? CwLogEnabled;
        /// <summary>
        /// The top-level internet domain name for which your application has administrative authority.
        /// </summary>
        public readonly string? Domain;
        /// <summary>
        /// The unique ID of the new app monitor.
        /// </summary>
        public readonly string? Id;
        public readonly Outputs.AppMonitorResourcePolicy? ResourcePolicy;
        /// <summary>
        /// Assigns one or more tags (key-value pairs) to the app monitor.
        /// 
        /// Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
        /// 
        /// Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
        /// 
        /// You can associate as many as 50 tags with an app monitor.
        /// 
        /// For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;

        [OutputConstructor]
        private GetAppMonitorResult(
            Outputs.AppMonitorConfiguration? appMonitorConfiguration,

            Outputs.AppMonitorCustomEvents? customEvents,

            bool? cwLogEnabled,

            string? domain,

            string? id,

            Outputs.AppMonitorResourcePolicy? resourcePolicy,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags)
        {
            AppMonitorConfiguration = appMonitorConfiguration;
            CustomEvents = customEvents;
            CwLogEnabled = cwLogEnabled;
            Domain = domain;
            Id = id;
            ResourcePolicy = resourcePolicy;
            Tags = tags;
        }
    }
}
