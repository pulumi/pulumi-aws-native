// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Rum.Inputs
{

    /// <summary>
    /// An structure which defines the destination and the metrics that you want to send.
    /// </summary>
    public sealed class AppMonitorMetricDestinationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the Evidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
        /// </summary>
        [Input("destination", required: true)]
        public Input<Pulumi.AwsNative.Rum.AppMonitorMetricDestinationDestination> Destination { get; set; } = null!;

        /// <summary>
        /// Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
        /// </summary>
        [Input("destinationArn")]
        public Input<string>? DestinationArn { get; set; }

        /// <summary>
        /// This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
        /// 
        /// This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.
        /// </summary>
        [Input("iamRoleArn")]
        public Input<string>? IamRoleArn { get; set; }

        [Input("metricDefinitions")]
        private InputList<Inputs.AppMonitorMetricDefinitionArgs>? _metricDefinitions;

        /// <summary>
        /// An array of structures which define the metrics that you want to send.
        /// </summary>
        public InputList<Inputs.AppMonitorMetricDefinitionArgs> MetricDefinitions
        {
            get => _metricDefinitions ?? (_metricDefinitions = new InputList<Inputs.AppMonitorMetricDefinitionArgs>());
            set => _metricDefinitions = value;
        }

        public AppMonitorMetricDestinationArgs()
        {
        }
        public static new AppMonitorMetricDestinationArgs Empty => new AppMonitorMetricDestinationArgs();
    }
}
