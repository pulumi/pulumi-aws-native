// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaStore
{
    public static class GetContainer
    {
        /// <summary>
        /// Resource Type definition for AWS::MediaStore::Container
        /// </summary>
        public static Task<GetContainerResult> InvokeAsync(GetContainerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetContainerResult>("aws-native:mediastore:getContainer", args ?? new GetContainerArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::MediaStore::Container
        /// </summary>
        public static Output<GetContainerResult> Invoke(GetContainerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetContainerResult>("aws-native:mediastore:getContainer", args ?? new GetContainerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetContainerArgs()
        {
        }
    }

    public sealed class GetContainerInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetContainerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetContainerResult
    {
        public readonly bool? AccessLoggingEnabled;
        public readonly ImmutableArray<Outputs.ContainerCorsRule> CorsPolicy;
        public readonly string? Endpoint;
        public readonly string? Id;
        public readonly string? LifecyclePolicy;
        public readonly Outputs.ContainerMetricPolicy? MetricPolicy;
        public readonly string? Policy;
        public readonly ImmutableArray<Outputs.ContainerTag> Tags;

        [OutputConstructor]
        private GetContainerResult(
            bool? accessLoggingEnabled,

            ImmutableArray<Outputs.ContainerCorsRule> corsPolicy,

            string? endpoint,

            string? id,

            string? lifecyclePolicy,

            Outputs.ContainerMetricPolicy? metricPolicy,

            string? policy,

            ImmutableArray<Outputs.ContainerTag> tags)
        {
            AccessLoggingEnabled = accessLoggingEnabled;
            CorsPolicy = corsPolicy;
            Endpoint = endpoint;
            Id = id;
            LifecyclePolicy = lifecyclePolicy;
            MetricPolicy = metricPolicy;
            Policy = policy;
            Tags = tags;
        }
    }
}
