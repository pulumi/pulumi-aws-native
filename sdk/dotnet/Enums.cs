// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative
{
    /// <summary>
    /// A Region represents any valid Amazon region that may be targeted with deployments.
    /// </summary>
    [EnumType]
    public readonly struct Region : IEquatable<Region>
    {
        private readonly string _value;

        private Region(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// Africa (Cape Town)
        /// </summary>
        public static Region AfSouth1 { get; } = new Region("af-south-1");
        /// <summary>
        /// Asia Pacific (Hong Kong)
        /// </summary>
        public static Region ApEast1 { get; } = new Region("ap-east-1");
        /// <summary>
        /// Asia Pacific (Tokyo)
        /// </summary>
        public static Region ApNortheast1 { get; } = new Region("ap-northeast-1");
        /// <summary>
        /// Asia Pacific (Seoul)
        /// </summary>
        public static Region ApNortheast2 { get; } = new Region("ap-northeast-2");
        /// <summary>
        /// Asia Pacific (Osaka)
        /// </summary>
        public static Region ApNortheast3 { get; } = new Region("ap-northeast-3");
        /// <summary>
        /// Asia Pacific (Mumbai)
        /// </summary>
        public static Region ApSouth1 { get; } = new Region("ap-south-1");
        /// <summary>
        /// Asia Pacific (Hyderabad)
        /// </summary>
        public static Region ApSouth2 { get; } = new Region("ap-south-2");
        /// <summary>
        /// Asia Pacific (Singapore)
        /// </summary>
        public static Region ApSoutheast1 { get; } = new Region("ap-southeast-1");
        /// <summary>
        /// Asia Pacific (Sydney)
        /// </summary>
        public static Region ApSoutheast2 { get; } = new Region("ap-southeast-2");
        /// <summary>
        /// Asia Pacific (Jakarta)
        /// </summary>
        public static Region ApSoutheast3 { get; } = new Region("ap-southeast-3");
        /// <summary>
        /// Asia Pacific (Melbourne)
        /// </summary>
        public static Region ApSoutheast4 { get; } = new Region("ap-southeast-4");
        /// <summary>
        /// Asia Pacific (Malaysia)
        /// </summary>
        public static Region ApSoutheast5 { get; } = new Region("ap-southeast-5");
        /// <summary>
        /// Asia Pacific (Thailand)
        /// </summary>
        public static Region ApSoutheast7 { get; } = new Region("ap-southeast-7");
        /// <summary>
        /// Canada (Central)
        /// </summary>
        public static Region CaCentral1 { get; } = new Region("ca-central-1");
        /// <summary>
        /// Canada West (Calgary)
        /// </summary>
        public static Region CaWest1 { get; } = new Region("ca-west-1");
        /// <summary>
        /// China (Beijing)
        /// </summary>
        public static Region CnNorth1 { get; } = new Region("cn-north-1");
        /// <summary>
        /// China (Ningxia)
        /// </summary>
        public static Region CnNorthwest1 { get; } = new Region("cn-northwest-1");
        /// <summary>
        /// Europe (Frankfurt)
        /// </summary>
        public static Region EuCentral1 { get; } = new Region("eu-central-1");
        /// <summary>
        /// Europe (Zurich)
        /// </summary>
        public static Region EuCentral2 { get; } = new Region("eu-central-2");
        /// <summary>
        /// EU ISOE West
        /// </summary>
        public static Region EuIsoeWest1 { get; } = new Region("eu-isoe-west-1");
        /// <summary>
        /// Europe (Stockholm)
        /// </summary>
        public static Region EuNorth1 { get; } = new Region("eu-north-1");
        /// <summary>
        /// Europe (Milan)
        /// </summary>
        public static Region EuSouth1 { get; } = new Region("eu-south-1");
        /// <summary>
        /// Europe (Spain)
        /// </summary>
        public static Region EuSouth2 { get; } = new Region("eu-south-2");
        /// <summary>
        /// Europe (Ireland)
        /// </summary>
        public static Region EuWest1 { get; } = new Region("eu-west-1");
        /// <summary>
        /// Europe (London)
        /// </summary>
        public static Region EuWest2 { get; } = new Region("eu-west-2");
        /// <summary>
        /// Europe (Paris)
        /// </summary>
        public static Region EuWest3 { get; } = new Region("eu-west-3");
        /// <summary>
        /// EU (Germany)
        /// </summary>
        public static Region EuscDeEast1 { get; } = new Region("eusc-de-east-1");
        /// <summary>
        /// Israel (Tel Aviv)
        /// </summary>
        public static Region IlCentral1 { get; } = new Region("il-central-1");
        /// <summary>
        /// Middle East (UAE)
        /// </summary>
        public static Region MeCentral1 { get; } = new Region("me-central-1");
        /// <summary>
        /// Middle East (Bahrain)
        /// </summary>
        public static Region MeSouth1 { get; } = new Region("me-south-1");
        /// <summary>
        /// Mexico (Central)
        /// </summary>
        public static Region MxCentral1 { get; } = new Region("mx-central-1");
        /// <summary>
        /// South America (Sao Paulo)
        /// </summary>
        public static Region SaEast1 { get; } = new Region("sa-east-1");
        /// <summary>
        /// US East (N. Virginia)
        /// </summary>
        public static Region UsEast1 { get; } = new Region("us-east-1");
        /// <summary>
        /// US East (Ohio)
        /// </summary>
        public static Region UsEast2 { get; } = new Region("us-east-2");
        /// <summary>
        /// AWS GovCloud (US-East)
        /// </summary>
        public static Region UsGovEast1 { get; } = new Region("us-gov-east-1");
        /// <summary>
        /// AWS GovCloud (US-West)
        /// </summary>
        public static Region UsGovWest1 { get; } = new Region("us-gov-west-1");
        /// <summary>
        /// US ISO East
        /// </summary>
        public static Region UsIsoEast1 { get; } = new Region("us-iso-east-1");
        /// <summary>
        /// US ISO WEST
        /// </summary>
        public static Region UsIsoWest1 { get; } = new Region("us-iso-west-1");
        /// <summary>
        /// US ISOB East (Ohio)
        /// </summary>
        public static Region UsIsobEast1 { get; } = new Region("us-isob-east-1");
        /// <summary>
        /// US ISOF EAST
        /// </summary>
        public static Region UsIsofEast1 { get; } = new Region("us-isof-east-1");
        /// <summary>
        /// US ISOF SOUTH
        /// </summary>
        public static Region UsIsofSouth1 { get; } = new Region("us-isof-south-1");
        /// <summary>
        /// US West (N. California)
        /// </summary>
        public static Region UsWest1 { get; } = new Region("us-west-1");
        /// <summary>
        /// US West (Oregon)
        /// </summary>
        public static Region UsWest2 { get; } = new Region("us-west-2");

        public static bool operator ==(Region left, Region right) => left.Equals(right);
        public static bool operator !=(Region left, Region right) => !left.Equals(right);

        public static explicit operator string(Region value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Region other && Equals(other);
        public bool Equals(Region other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
