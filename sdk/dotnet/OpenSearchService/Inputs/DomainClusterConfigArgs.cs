// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.OpenSearchService.Inputs
{

    public sealed class DomainClusterConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Container for cold storage configuration options.
        /// </summary>
        [Input("coldStorageOptions")]
        public Input<Inputs.DomainColdStorageOptionsArgs>? ColdStorageOptions { get; set; }

        /// <summary>
        /// The number of instances to use for the master node. If you specify this property, you must specify `true` for the `DedicatedMasterEnabled` property.
        /// </summary>
        [Input("dedicatedMasterCount")]
        public Input<int>? DedicatedMasterCount { get; set; }

        /// <summary>
        /// Indicates whether to use a dedicated master node for the OpenSearch Service domain. A dedicated master node is a cluster node that performs cluster management tasks, but doesn't hold data or respond to data upload requests. Dedicated master nodes offload cluster management tasks to increase the stability of your search clusters. See [Dedicated master nodes in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-dedicatedmasternodes.html) .
        /// </summary>
        [Input("dedicatedMasterEnabled")]
        public Input<bool>? DedicatedMasterEnabled { get; set; }

        /// <summary>
        /// The hardware configuration of the computer that hosts the dedicated master node, such as `m3.medium.search` . If you specify this property, you must specify `true` for the `DedicatedMasterEnabled` property. For valid values, see [Supported instance types in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html) .
        /// </summary>
        [Input("dedicatedMasterType")]
        public Input<string>? DedicatedMasterType { get; set; }

        /// <summary>
        /// The number of data nodes (instances) to use in the OpenSearch Service domain.
        /// </summary>
        [Input("instanceCount")]
        public Input<int>? InstanceCount { get; set; }

        /// <summary>
        /// The instance type for your data nodes, such as `m3.medium.search` . For valid values, see [Supported instance types in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html) .
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Indicates whether Multi-AZ with Standby deployment option is enabled. For more information, see [Multi-AZ with Standby](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html#managedomains-za-standby) .
        /// </summary>
        [Input("multiAzWithStandbyEnabled")]
        public Input<bool>? MultiAzWithStandbyEnabled { get; set; }

        [Input("nodeOptions")]
        private InputList<Inputs.DomainNodeOptionArgs>? _nodeOptions;

        /// <summary>
        /// List of node options for the domain.
        /// </summary>
        public InputList<Inputs.DomainNodeOptionArgs> NodeOptions
        {
            get => _nodeOptions ?? (_nodeOptions = new InputList<Inputs.DomainNodeOptionArgs>());
            set => _nodeOptions = value;
        }

        /// <summary>
        /// The number of warm nodes in the cluster.
        /// </summary>
        [Input("warmCount")]
        public Input<int>? WarmCount { get; set; }

        /// <summary>
        /// Whether to enable UltraWarm storage for the cluster. See [UltraWarm storage for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ultrawarm.html) .
        /// </summary>
        [Input("warmEnabled")]
        public Input<bool>? WarmEnabled { get; set; }

        /// <summary>
        /// The instance type for the cluster's warm nodes.
        /// </summary>
        [Input("warmType")]
        public Input<string>? WarmType { get; set; }

        /// <summary>
        /// Specifies zone awareness configuration options. Only use if `ZoneAwarenessEnabled` is `true` .
        /// </summary>
        [Input("zoneAwarenessConfig")]
        public Input<Inputs.DomainZoneAwarenessConfigArgs>? ZoneAwarenessConfig { get; set; }

        /// <summary>
        /// Indicates whether to enable zone awareness for the OpenSearch Service domain. When you enable zone awareness, OpenSearch Service allocates the nodes and replica index shards that belong to a cluster across two Availability Zones (AZs) in the same region to prevent data loss and minimize downtime in the event of node or data center failure. Don't enable zone awareness if your cluster has no replica index shards or is a single-node cluster. For more information, see [Configuring a multi-AZ domain in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html) .
        /// </summary>
        [Input("zoneAwarenessEnabled")]
        public Input<bool>? ZoneAwarenessEnabled { get; set; }

        public DomainClusterConfigArgs()
        {
        }
        public static new DomainClusterConfigArgs Empty => new DomainClusterConfigArgs();
    }
}
