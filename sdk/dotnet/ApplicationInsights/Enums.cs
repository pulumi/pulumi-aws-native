// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.ApplicationInsights
{
    /// <summary>
    /// Indicates the degree of outage when the alarm goes off.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationAlarmSeverity : IEquatable<ApplicationAlarmSeverity>
    {
        private readonly string _value;

        private ApplicationAlarmSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationAlarmSeverity High { get; } = new ApplicationAlarmSeverity("HIGH");
        public static ApplicationAlarmSeverity Medium { get; } = new ApplicationAlarmSeverity("MEDIUM");
        public static ApplicationAlarmSeverity Low { get; } = new ApplicationAlarmSeverity("LOW");

        public static bool operator ==(ApplicationAlarmSeverity left, ApplicationAlarmSeverity right) => left.Equals(right);
        public static bool operator !=(ApplicationAlarmSeverity left, ApplicationAlarmSeverity right) => !left.Equals(right);

        public static explicit operator string(ApplicationAlarmSeverity value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationAlarmSeverity other && Equals(other);
        public bool Equals(ApplicationAlarmSeverity other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The component monitoring configuration mode.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationComponentMonitoringSettingComponentConfigurationMode : IEquatable<ApplicationComponentMonitoringSettingComponentConfigurationMode>
    {
        private readonly string _value;

        private ApplicationComponentMonitoringSettingComponentConfigurationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationComponentMonitoringSettingComponentConfigurationMode Default { get; } = new ApplicationComponentMonitoringSettingComponentConfigurationMode("DEFAULT");
        public static ApplicationComponentMonitoringSettingComponentConfigurationMode DefaultWithOverwrite { get; } = new ApplicationComponentMonitoringSettingComponentConfigurationMode("DEFAULT_WITH_OVERWRITE");
        public static ApplicationComponentMonitoringSettingComponentConfigurationMode Custom { get; } = new ApplicationComponentMonitoringSettingComponentConfigurationMode("CUSTOM");

        public static bool operator ==(ApplicationComponentMonitoringSettingComponentConfigurationMode left, ApplicationComponentMonitoringSettingComponentConfigurationMode right) => left.Equals(right);
        public static bool operator !=(ApplicationComponentMonitoringSettingComponentConfigurationMode left, ApplicationComponentMonitoringSettingComponentConfigurationMode right) => !left.Equals(right);

        public static explicit operator string(ApplicationComponentMonitoringSettingComponentConfigurationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationComponentMonitoringSettingComponentConfigurationMode other && Equals(other);
        public bool Equals(ApplicationComponentMonitoringSettingComponentConfigurationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The level of event to log.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationEventLevel : IEquatable<ApplicationEventLevel>
    {
        private readonly string _value;

        private ApplicationEventLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationEventLevel Information { get; } = new ApplicationEventLevel("INFORMATION");
        public static ApplicationEventLevel Warning { get; } = new ApplicationEventLevel("WARNING");
        public static ApplicationEventLevel Error { get; } = new ApplicationEventLevel("ERROR");
        public static ApplicationEventLevel Critical { get; } = new ApplicationEventLevel("CRITICAL");
        public static ApplicationEventLevel Verbose { get; } = new ApplicationEventLevel("VERBOSE");

        public static bool operator ==(ApplicationEventLevel left, ApplicationEventLevel right) => left.Equals(right);
        public static bool operator !=(ApplicationEventLevel left, ApplicationEventLevel right) => !left.Equals(right);

        public static explicit operator string(ApplicationEventLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationEventLevel other && Equals(other);
        public bool Equals(ApplicationEventLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of encoding of the logs to be monitored.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationLogEncoding : IEquatable<ApplicationLogEncoding>
    {
        private readonly string _value;

        private ApplicationLogEncoding(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationLogEncoding Utf8 { get; } = new ApplicationLogEncoding("utf-8");
        public static ApplicationLogEncoding Utf16 { get; } = new ApplicationLogEncoding("utf-16");
        public static ApplicationLogEncoding Ascii { get; } = new ApplicationLogEncoding("ascii");

        public static bool operator ==(ApplicationLogEncoding left, ApplicationLogEncoding right) => left.Equals(right);
        public static bool operator !=(ApplicationLogEncoding left, ApplicationLogEncoding right) => !left.Equals(right);

        public static explicit operator string(ApplicationLogEncoding value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationLogEncoding other && Equals(other);
        public bool Equals(ApplicationLogEncoding other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The sub component type.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationSubComponentTypeConfigurationSubComponentType : IEquatable<ApplicationSubComponentTypeConfigurationSubComponentType>
    {
        private readonly string _value;

        private ApplicationSubComponentTypeConfigurationSubComponentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationSubComponentTypeConfigurationSubComponentType AWSEC2Instance { get; } = new ApplicationSubComponentTypeConfigurationSubComponentType("AWS::EC2::Instance");
        public static ApplicationSubComponentTypeConfigurationSubComponentType AWSEC2Volume { get; } = new ApplicationSubComponentTypeConfigurationSubComponentType("AWS::EC2::Volume");

        public static bool operator ==(ApplicationSubComponentTypeConfigurationSubComponentType left, ApplicationSubComponentTypeConfigurationSubComponentType right) => left.Equals(right);
        public static bool operator !=(ApplicationSubComponentTypeConfigurationSubComponentType left, ApplicationSubComponentTypeConfigurationSubComponentType right) => !left.Equals(right);

        public static explicit operator string(ApplicationSubComponentTypeConfigurationSubComponentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationSubComponentTypeConfigurationSubComponentType other && Equals(other);
        public bool Equals(ApplicationSubComponentTypeConfigurationSubComponentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
