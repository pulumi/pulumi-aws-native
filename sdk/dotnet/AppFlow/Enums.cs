// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.AppFlow
{
    /// <summary>
    /// Mode in which data transfer should be enabled. Private connection mode is currently enabled for Salesforce, Snowflake, Trendmicro and Singular
    /// </summary>
    [EnumType]
    public readonly struct ConnectorProfileConnectionMode : IEquatable<ConnectorProfileConnectionMode>
    {
        private readonly string _value;

        private ConnectorProfileConnectionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorProfileConnectionMode Public { get; } = new ConnectorProfileConnectionMode("Public");
        public static ConnectorProfileConnectionMode Private { get; } = new ConnectorProfileConnectionMode("Private");

        public static bool operator ==(ConnectorProfileConnectionMode left, ConnectorProfileConnectionMode right) => left.Equals(right);
        public static bool operator !=(ConnectorProfileConnectionMode left, ConnectorProfileConnectionMode right) => !left.Equals(right);

        public static explicit operator string(ConnectorProfileConnectionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorProfileConnectionMode other && Equals(other);
        public bool Equals(ConnectorProfileConnectionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConnectorProfileConnectorType : IEquatable<ConnectorProfileConnectorType>
    {
        private readonly string _value;

        private ConnectorProfileConnectorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorProfileConnectorType Salesforce { get; } = new ConnectorProfileConnectorType("Salesforce");
        public static ConnectorProfileConnectorType Singular { get; } = new ConnectorProfileConnectorType("Singular");
        public static ConnectorProfileConnectorType Slack { get; } = new ConnectorProfileConnectorType("Slack");
        public static ConnectorProfileConnectorType Redshift { get; } = new ConnectorProfileConnectorType("Redshift");
        public static ConnectorProfileConnectorType Marketo { get; } = new ConnectorProfileConnectorType("Marketo");
        public static ConnectorProfileConnectorType Googleanalytics { get; } = new ConnectorProfileConnectorType("Googleanalytics");
        public static ConnectorProfileConnectorType Zendesk { get; } = new ConnectorProfileConnectorType("Zendesk");
        public static ConnectorProfileConnectorType Servicenow { get; } = new ConnectorProfileConnectorType("Servicenow");
        public static ConnectorProfileConnectorType Datadog { get; } = new ConnectorProfileConnectorType("Datadog");
        public static ConnectorProfileConnectorType Trendmicro { get; } = new ConnectorProfileConnectorType("Trendmicro");
        public static ConnectorProfileConnectorType Snowflake { get; } = new ConnectorProfileConnectorType("Snowflake");
        public static ConnectorProfileConnectorType Dynatrace { get; } = new ConnectorProfileConnectorType("Dynatrace");
        public static ConnectorProfileConnectorType Infornexus { get; } = new ConnectorProfileConnectorType("Infornexus");
        public static ConnectorProfileConnectorType Amplitude { get; } = new ConnectorProfileConnectorType("Amplitude");
        public static ConnectorProfileConnectorType Veeva { get; } = new ConnectorProfileConnectorType("Veeva");

        public static bool operator ==(ConnectorProfileConnectorType left, ConnectorProfileConnectorType right) => left.Equals(right);
        public static bool operator !=(ConnectorProfileConnectorType left, ConnectorProfileConnectorType right) => !left.Equals(right);

        public static explicit operator string(ConnectorProfileConnectorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorProfileConnectorType other && Equals(other);
        public bool Equals(ConnectorProfileConnectorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowAggregationType : IEquatable<FlowAggregationType>
    {
        private readonly string _value;

        private FlowAggregationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowAggregationType None { get; } = new FlowAggregationType("None");
        public static FlowAggregationType SingleFile { get; } = new FlowAggregationType("SingleFile");

        public static bool operator ==(FlowAggregationType left, FlowAggregationType right) => left.Equals(right);
        public static bool operator !=(FlowAggregationType left, FlowAggregationType right) => !left.Equals(right);

        public static explicit operator string(FlowAggregationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowAggregationType other && Equals(other);
        public bool Equals(FlowAggregationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowAmplitudeConnectorOperator : IEquatable<FlowAmplitudeConnectorOperator>
    {
        private readonly string _value;

        private FlowAmplitudeConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowAmplitudeConnectorOperator Between { get; } = new FlowAmplitudeConnectorOperator("BETWEEN");

        public static bool operator ==(FlowAmplitudeConnectorOperator left, FlowAmplitudeConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowAmplitudeConnectorOperator left, FlowAmplitudeConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowAmplitudeConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowAmplitudeConnectorOperator other && Equals(other);
        public bool Equals(FlowAmplitudeConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowConnectorType : IEquatable<FlowConnectorType>
    {
        private readonly string _value;

        private FlowConnectorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowConnectorType Salesforce { get; } = new FlowConnectorType("Salesforce");
        public static FlowConnectorType Singular { get; } = new FlowConnectorType("Singular");
        public static FlowConnectorType Slack { get; } = new FlowConnectorType("Slack");
        public static FlowConnectorType Redshift { get; } = new FlowConnectorType("Redshift");
        public static FlowConnectorType S3 { get; } = new FlowConnectorType("S3");
        public static FlowConnectorType Marketo { get; } = new FlowConnectorType("Marketo");
        public static FlowConnectorType Googleanalytics { get; } = new FlowConnectorType("Googleanalytics");
        public static FlowConnectorType Zendesk { get; } = new FlowConnectorType("Zendesk");
        public static FlowConnectorType Servicenow { get; } = new FlowConnectorType("Servicenow");
        public static FlowConnectorType Datadog { get; } = new FlowConnectorType("Datadog");
        public static FlowConnectorType Trendmicro { get; } = new FlowConnectorType("Trendmicro");
        public static FlowConnectorType Snowflake { get; } = new FlowConnectorType("Snowflake");
        public static FlowConnectorType Dynatrace { get; } = new FlowConnectorType("Dynatrace");
        public static FlowConnectorType Infornexus { get; } = new FlowConnectorType("Infornexus");
        public static FlowConnectorType Amplitude { get; } = new FlowConnectorType("Amplitude");
        public static FlowConnectorType Veeva { get; } = new FlowConnectorType("Veeva");
        public static FlowConnectorType EventBridge { get; } = new FlowConnectorType("EventBridge");
        public static FlowConnectorType Upsolver { get; } = new FlowConnectorType("Upsolver");
        public static FlowConnectorType LookoutMetrics { get; } = new FlowConnectorType("LookoutMetrics");

        public static bool operator ==(FlowConnectorType left, FlowConnectorType right) => left.Equals(right);
        public static bool operator !=(FlowConnectorType left, FlowConnectorType right) => !left.Equals(right);

        public static explicit operator string(FlowConnectorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowConnectorType other && Equals(other);
        public bool Equals(FlowConnectorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowDatadogConnectorOperator : IEquatable<FlowDatadogConnectorOperator>
    {
        private readonly string _value;

        private FlowDatadogConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowDatadogConnectorOperator Projection { get; } = new FlowDatadogConnectorOperator("PROJECTION");
        public static FlowDatadogConnectorOperator Between { get; } = new FlowDatadogConnectorOperator("BETWEEN");
        public static FlowDatadogConnectorOperator EqualTo { get; } = new FlowDatadogConnectorOperator("EQUAL_TO");
        public static FlowDatadogConnectorOperator Addition { get; } = new FlowDatadogConnectorOperator("ADDITION");
        public static FlowDatadogConnectorOperator Multiplication { get; } = new FlowDatadogConnectorOperator("MULTIPLICATION");
        public static FlowDatadogConnectorOperator Division { get; } = new FlowDatadogConnectorOperator("DIVISION");
        public static FlowDatadogConnectorOperator Subtraction { get; } = new FlowDatadogConnectorOperator("SUBTRACTION");
        public static FlowDatadogConnectorOperator MaskAll { get; } = new FlowDatadogConnectorOperator("MASK_ALL");
        public static FlowDatadogConnectorOperator MaskFirstN { get; } = new FlowDatadogConnectorOperator("MASK_FIRST_N");
        public static FlowDatadogConnectorOperator MaskLastN { get; } = new FlowDatadogConnectorOperator("MASK_LAST_N");
        public static FlowDatadogConnectorOperator ValidateNonNull { get; } = new FlowDatadogConnectorOperator("VALIDATE_NON_NULL");
        public static FlowDatadogConnectorOperator ValidateNonZero { get; } = new FlowDatadogConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowDatadogConnectorOperator ValidateNonNegative { get; } = new FlowDatadogConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowDatadogConnectorOperator ValidateNumeric { get; } = new FlowDatadogConnectorOperator("VALIDATE_NUMERIC");
        public static FlowDatadogConnectorOperator NoOp { get; } = new FlowDatadogConnectorOperator("NO_OP");

        public static bool operator ==(FlowDatadogConnectorOperator left, FlowDatadogConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowDatadogConnectorOperator left, FlowDatadogConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowDatadogConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowDatadogConnectorOperator other && Equals(other);
        public bool Equals(FlowDatadogConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowDynatraceConnectorOperator : IEquatable<FlowDynatraceConnectorOperator>
    {
        private readonly string _value;

        private FlowDynatraceConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowDynatraceConnectorOperator Projection { get; } = new FlowDynatraceConnectorOperator("PROJECTION");
        public static FlowDynatraceConnectorOperator Between { get; } = new FlowDynatraceConnectorOperator("BETWEEN");
        public static FlowDynatraceConnectorOperator EqualTo { get; } = new FlowDynatraceConnectorOperator("EQUAL_TO");
        public static FlowDynatraceConnectorOperator Addition { get; } = new FlowDynatraceConnectorOperator("ADDITION");
        public static FlowDynatraceConnectorOperator Multiplication { get; } = new FlowDynatraceConnectorOperator("MULTIPLICATION");
        public static FlowDynatraceConnectorOperator Division { get; } = new FlowDynatraceConnectorOperator("DIVISION");
        public static FlowDynatraceConnectorOperator Subtraction { get; } = new FlowDynatraceConnectorOperator("SUBTRACTION");
        public static FlowDynatraceConnectorOperator MaskAll { get; } = new FlowDynatraceConnectorOperator("MASK_ALL");
        public static FlowDynatraceConnectorOperator MaskFirstN { get; } = new FlowDynatraceConnectorOperator("MASK_FIRST_N");
        public static FlowDynatraceConnectorOperator MaskLastN { get; } = new FlowDynatraceConnectorOperator("MASK_LAST_N");
        public static FlowDynatraceConnectorOperator ValidateNonNull { get; } = new FlowDynatraceConnectorOperator("VALIDATE_NON_NULL");
        public static FlowDynatraceConnectorOperator ValidateNonZero { get; } = new FlowDynatraceConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowDynatraceConnectorOperator ValidateNonNegative { get; } = new FlowDynatraceConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowDynatraceConnectorOperator ValidateNumeric { get; } = new FlowDynatraceConnectorOperator("VALIDATE_NUMERIC");
        public static FlowDynatraceConnectorOperator NoOp { get; } = new FlowDynatraceConnectorOperator("NO_OP");

        public static bool operator ==(FlowDynatraceConnectorOperator left, FlowDynatraceConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowDynatraceConnectorOperator left, FlowDynatraceConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowDynatraceConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowDynatraceConnectorOperator other && Equals(other);
        public bool Equals(FlowDynatraceConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowFileType : IEquatable<FlowFileType>
    {
        private readonly string _value;

        private FlowFileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowFileType Csv { get; } = new FlowFileType("CSV");
        public static FlowFileType Json { get; } = new FlowFileType("JSON");
        public static FlowFileType Parquet { get; } = new FlowFileType("PARQUET");

        public static bool operator ==(FlowFileType left, FlowFileType right) => left.Equals(right);
        public static bool operator !=(FlowFileType left, FlowFileType right) => !left.Equals(right);

        public static explicit operator string(FlowFileType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowFileType other && Equals(other);
        public bool Equals(FlowFileType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowGoogleAnalyticsConnectorOperator : IEquatable<FlowGoogleAnalyticsConnectorOperator>
    {
        private readonly string _value;

        private FlowGoogleAnalyticsConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowGoogleAnalyticsConnectorOperator Projection { get; } = new FlowGoogleAnalyticsConnectorOperator("PROJECTION");
        public static FlowGoogleAnalyticsConnectorOperator Between { get; } = new FlowGoogleAnalyticsConnectorOperator("BETWEEN");

        public static bool operator ==(FlowGoogleAnalyticsConnectorOperator left, FlowGoogleAnalyticsConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowGoogleAnalyticsConnectorOperator left, FlowGoogleAnalyticsConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowGoogleAnalyticsConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowGoogleAnalyticsConnectorOperator other && Equals(other);
        public bool Equals(FlowGoogleAnalyticsConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowInforNexusConnectorOperator : IEquatable<FlowInforNexusConnectorOperator>
    {
        private readonly string _value;

        private FlowInforNexusConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowInforNexusConnectorOperator Projection { get; } = new FlowInforNexusConnectorOperator("PROJECTION");
        public static FlowInforNexusConnectorOperator Between { get; } = new FlowInforNexusConnectorOperator("BETWEEN");
        public static FlowInforNexusConnectorOperator EqualTo { get; } = new FlowInforNexusConnectorOperator("EQUAL_TO");
        public static FlowInforNexusConnectorOperator Addition { get; } = new FlowInforNexusConnectorOperator("ADDITION");
        public static FlowInforNexusConnectorOperator Multiplication { get; } = new FlowInforNexusConnectorOperator("MULTIPLICATION");
        public static FlowInforNexusConnectorOperator Division { get; } = new FlowInforNexusConnectorOperator("DIVISION");
        public static FlowInforNexusConnectorOperator Subtraction { get; } = new FlowInforNexusConnectorOperator("SUBTRACTION");
        public static FlowInforNexusConnectorOperator MaskAll { get; } = new FlowInforNexusConnectorOperator("MASK_ALL");
        public static FlowInforNexusConnectorOperator MaskFirstN { get; } = new FlowInforNexusConnectorOperator("MASK_FIRST_N");
        public static FlowInforNexusConnectorOperator MaskLastN { get; } = new FlowInforNexusConnectorOperator("MASK_LAST_N");
        public static FlowInforNexusConnectorOperator ValidateNonNull { get; } = new FlowInforNexusConnectorOperator("VALIDATE_NON_NULL");
        public static FlowInforNexusConnectorOperator ValidateNonZero { get; } = new FlowInforNexusConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowInforNexusConnectorOperator ValidateNonNegative { get; } = new FlowInforNexusConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowInforNexusConnectorOperator ValidateNumeric { get; } = new FlowInforNexusConnectorOperator("VALIDATE_NUMERIC");
        public static FlowInforNexusConnectorOperator NoOp { get; } = new FlowInforNexusConnectorOperator("NO_OP");

        public static bool operator ==(FlowInforNexusConnectorOperator left, FlowInforNexusConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowInforNexusConnectorOperator left, FlowInforNexusConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowInforNexusConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowInforNexusConnectorOperator other && Equals(other);
        public bool Equals(FlowInforNexusConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowMarketoConnectorOperator : IEquatable<FlowMarketoConnectorOperator>
    {
        private readonly string _value;

        private FlowMarketoConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowMarketoConnectorOperator Projection { get; } = new FlowMarketoConnectorOperator("PROJECTION");
        public static FlowMarketoConnectorOperator LessThan { get; } = new FlowMarketoConnectorOperator("LESS_THAN");
        public static FlowMarketoConnectorOperator GreaterThan { get; } = new FlowMarketoConnectorOperator("GREATER_THAN");
        public static FlowMarketoConnectorOperator Between { get; } = new FlowMarketoConnectorOperator("BETWEEN");
        public static FlowMarketoConnectorOperator Addition { get; } = new FlowMarketoConnectorOperator("ADDITION");
        public static FlowMarketoConnectorOperator Multiplication { get; } = new FlowMarketoConnectorOperator("MULTIPLICATION");
        public static FlowMarketoConnectorOperator Division { get; } = new FlowMarketoConnectorOperator("DIVISION");
        public static FlowMarketoConnectorOperator Subtraction { get; } = new FlowMarketoConnectorOperator("SUBTRACTION");
        public static FlowMarketoConnectorOperator MaskAll { get; } = new FlowMarketoConnectorOperator("MASK_ALL");
        public static FlowMarketoConnectorOperator MaskFirstN { get; } = new FlowMarketoConnectorOperator("MASK_FIRST_N");
        public static FlowMarketoConnectorOperator MaskLastN { get; } = new FlowMarketoConnectorOperator("MASK_LAST_N");
        public static FlowMarketoConnectorOperator ValidateNonNull { get; } = new FlowMarketoConnectorOperator("VALIDATE_NON_NULL");
        public static FlowMarketoConnectorOperator ValidateNonZero { get; } = new FlowMarketoConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowMarketoConnectorOperator ValidateNonNegative { get; } = new FlowMarketoConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowMarketoConnectorOperator ValidateNumeric { get; } = new FlowMarketoConnectorOperator("VALIDATE_NUMERIC");
        public static FlowMarketoConnectorOperator NoOp { get; } = new FlowMarketoConnectorOperator("NO_OP");

        public static bool operator ==(FlowMarketoConnectorOperator left, FlowMarketoConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowMarketoConnectorOperator left, FlowMarketoConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowMarketoConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowMarketoConnectorOperator other && Equals(other);
        public bool Equals(FlowMarketoConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowOperatorPropertiesKeys : IEquatable<FlowOperatorPropertiesKeys>
    {
        private readonly string _value;

        private FlowOperatorPropertiesKeys(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowOperatorPropertiesKeys Value { get; } = new FlowOperatorPropertiesKeys("VALUE");
        public static FlowOperatorPropertiesKeys Values { get; } = new FlowOperatorPropertiesKeys("VALUES");
        public static FlowOperatorPropertiesKeys DataType { get; } = new FlowOperatorPropertiesKeys("DATA_TYPE");
        public static FlowOperatorPropertiesKeys UpperBound { get; } = new FlowOperatorPropertiesKeys("UPPER_BOUND");
        public static FlowOperatorPropertiesKeys LowerBound { get; } = new FlowOperatorPropertiesKeys("LOWER_BOUND");
        public static FlowOperatorPropertiesKeys SourceDataType { get; } = new FlowOperatorPropertiesKeys("SOURCE_DATA_TYPE");
        public static FlowOperatorPropertiesKeys DestinationDataType { get; } = new FlowOperatorPropertiesKeys("DESTINATION_DATA_TYPE");
        public static FlowOperatorPropertiesKeys ValidationAction { get; } = new FlowOperatorPropertiesKeys("VALIDATION_ACTION");
        public static FlowOperatorPropertiesKeys MaskValue { get; } = new FlowOperatorPropertiesKeys("MASK_VALUE");
        public static FlowOperatorPropertiesKeys MaskLength { get; } = new FlowOperatorPropertiesKeys("MASK_LENGTH");
        public static FlowOperatorPropertiesKeys TruncateLength { get; } = new FlowOperatorPropertiesKeys("TRUNCATE_LENGTH");
        public static FlowOperatorPropertiesKeys MathOperationFieldsOrder { get; } = new FlowOperatorPropertiesKeys("MATH_OPERATION_FIELDS_ORDER");
        public static FlowOperatorPropertiesKeys ConcatFormat { get; } = new FlowOperatorPropertiesKeys("CONCAT_FORMAT");
        public static FlowOperatorPropertiesKeys SubfieldCategoryMap { get; } = new FlowOperatorPropertiesKeys("SUBFIELD_CATEGORY_MAP");
        public static FlowOperatorPropertiesKeys ExcludeSourceFieldsList { get; } = new FlowOperatorPropertiesKeys("EXCLUDE_SOURCE_FIELDS_LIST");

        public static bool operator ==(FlowOperatorPropertiesKeys left, FlowOperatorPropertiesKeys right) => left.Equals(right);
        public static bool operator !=(FlowOperatorPropertiesKeys left, FlowOperatorPropertiesKeys right) => !left.Equals(right);

        public static explicit operator string(FlowOperatorPropertiesKeys value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowOperatorPropertiesKeys other && Equals(other);
        public bool Equals(FlowOperatorPropertiesKeys other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowPrefixFormat : IEquatable<FlowPrefixFormat>
    {
        private readonly string _value;

        private FlowPrefixFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowPrefixFormat Year { get; } = new FlowPrefixFormat("YEAR");
        public static FlowPrefixFormat Month { get; } = new FlowPrefixFormat("MONTH");
        public static FlowPrefixFormat Day { get; } = new FlowPrefixFormat("DAY");
        public static FlowPrefixFormat Hour { get; } = new FlowPrefixFormat("HOUR");
        public static FlowPrefixFormat Minute { get; } = new FlowPrefixFormat("MINUTE");

        public static bool operator ==(FlowPrefixFormat left, FlowPrefixFormat right) => left.Equals(right);
        public static bool operator !=(FlowPrefixFormat left, FlowPrefixFormat right) => !left.Equals(right);

        public static explicit operator string(FlowPrefixFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowPrefixFormat other && Equals(other);
        public bool Equals(FlowPrefixFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowPrefixType : IEquatable<FlowPrefixType>
    {
        private readonly string _value;

        private FlowPrefixType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowPrefixType Filename { get; } = new FlowPrefixType("FILENAME");
        public static FlowPrefixType Path { get; } = new FlowPrefixType("PATH");
        public static FlowPrefixType PathAndFilename { get; } = new FlowPrefixType("PATH_AND_FILENAME");

        public static bool operator ==(FlowPrefixType left, FlowPrefixType right) => left.Equals(right);
        public static bool operator !=(FlowPrefixType left, FlowPrefixType right) => !left.Equals(right);

        public static explicit operator string(FlowPrefixType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowPrefixType other && Equals(other);
        public bool Equals(FlowPrefixType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowS3ConnectorOperator : IEquatable<FlowS3ConnectorOperator>
    {
        private readonly string _value;

        private FlowS3ConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowS3ConnectorOperator Projection { get; } = new FlowS3ConnectorOperator("PROJECTION");
        public static FlowS3ConnectorOperator LessThan { get; } = new FlowS3ConnectorOperator("LESS_THAN");
        public static FlowS3ConnectorOperator GreaterThan { get; } = new FlowS3ConnectorOperator("GREATER_THAN");
        public static FlowS3ConnectorOperator Between { get; } = new FlowS3ConnectorOperator("BETWEEN");
        public static FlowS3ConnectorOperator LessThanOrEqualTo { get; } = new FlowS3ConnectorOperator("LESS_THAN_OR_EQUAL_TO");
        public static FlowS3ConnectorOperator GreaterThanOrEqualTo { get; } = new FlowS3ConnectorOperator("GREATER_THAN_OR_EQUAL_TO");
        public static FlowS3ConnectorOperator EqualTo { get; } = new FlowS3ConnectorOperator("EQUAL_TO");
        public static FlowS3ConnectorOperator NotEqualTo { get; } = new FlowS3ConnectorOperator("NOT_EQUAL_TO");
        public static FlowS3ConnectorOperator Addition { get; } = new FlowS3ConnectorOperator("ADDITION");
        public static FlowS3ConnectorOperator Multiplication { get; } = new FlowS3ConnectorOperator("MULTIPLICATION");
        public static FlowS3ConnectorOperator Division { get; } = new FlowS3ConnectorOperator("DIVISION");
        public static FlowS3ConnectorOperator Subtraction { get; } = new FlowS3ConnectorOperator("SUBTRACTION");
        public static FlowS3ConnectorOperator MaskAll { get; } = new FlowS3ConnectorOperator("MASK_ALL");
        public static FlowS3ConnectorOperator MaskFirstN { get; } = new FlowS3ConnectorOperator("MASK_FIRST_N");
        public static FlowS3ConnectorOperator MaskLastN { get; } = new FlowS3ConnectorOperator("MASK_LAST_N");
        public static FlowS3ConnectorOperator ValidateNonNull { get; } = new FlowS3ConnectorOperator("VALIDATE_NON_NULL");
        public static FlowS3ConnectorOperator ValidateNonZero { get; } = new FlowS3ConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowS3ConnectorOperator ValidateNonNegative { get; } = new FlowS3ConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowS3ConnectorOperator ValidateNumeric { get; } = new FlowS3ConnectorOperator("VALIDATE_NUMERIC");
        public static FlowS3ConnectorOperator NoOp { get; } = new FlowS3ConnectorOperator("NO_OP");

        public static bool operator ==(FlowS3ConnectorOperator left, FlowS3ConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowS3ConnectorOperator left, FlowS3ConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowS3ConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowS3ConnectorOperator other && Equals(other);
        public bool Equals(FlowS3ConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowSalesforceConnectorOperator : IEquatable<FlowSalesforceConnectorOperator>
    {
        private readonly string _value;

        private FlowSalesforceConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowSalesforceConnectorOperator Projection { get; } = new FlowSalesforceConnectorOperator("PROJECTION");
        public static FlowSalesforceConnectorOperator LessThan { get; } = new FlowSalesforceConnectorOperator("LESS_THAN");
        public static FlowSalesforceConnectorOperator Contains { get; } = new FlowSalesforceConnectorOperator("CONTAINS");
        public static FlowSalesforceConnectorOperator GreaterThan { get; } = new FlowSalesforceConnectorOperator("GREATER_THAN");
        public static FlowSalesforceConnectorOperator Between { get; } = new FlowSalesforceConnectorOperator("BETWEEN");
        public static FlowSalesforceConnectorOperator LessThanOrEqualTo { get; } = new FlowSalesforceConnectorOperator("LESS_THAN_OR_EQUAL_TO");
        public static FlowSalesforceConnectorOperator GreaterThanOrEqualTo { get; } = new FlowSalesforceConnectorOperator("GREATER_THAN_OR_EQUAL_TO");
        public static FlowSalesforceConnectorOperator EqualTo { get; } = new FlowSalesforceConnectorOperator("EQUAL_TO");
        public static FlowSalesforceConnectorOperator NotEqualTo { get; } = new FlowSalesforceConnectorOperator("NOT_EQUAL_TO");
        public static FlowSalesforceConnectorOperator Addition { get; } = new FlowSalesforceConnectorOperator("ADDITION");
        public static FlowSalesforceConnectorOperator Multiplication { get; } = new FlowSalesforceConnectorOperator("MULTIPLICATION");
        public static FlowSalesforceConnectorOperator Division { get; } = new FlowSalesforceConnectorOperator("DIVISION");
        public static FlowSalesforceConnectorOperator Subtraction { get; } = new FlowSalesforceConnectorOperator("SUBTRACTION");
        public static FlowSalesforceConnectorOperator MaskAll { get; } = new FlowSalesforceConnectorOperator("MASK_ALL");
        public static FlowSalesforceConnectorOperator MaskFirstN { get; } = new FlowSalesforceConnectorOperator("MASK_FIRST_N");
        public static FlowSalesforceConnectorOperator MaskLastN { get; } = new FlowSalesforceConnectorOperator("MASK_LAST_N");
        public static FlowSalesforceConnectorOperator ValidateNonNull { get; } = new FlowSalesforceConnectorOperator("VALIDATE_NON_NULL");
        public static FlowSalesforceConnectorOperator ValidateNonZero { get; } = new FlowSalesforceConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowSalesforceConnectorOperator ValidateNonNegative { get; } = new FlowSalesforceConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowSalesforceConnectorOperator ValidateNumeric { get; } = new FlowSalesforceConnectorOperator("VALIDATE_NUMERIC");
        public static FlowSalesforceConnectorOperator NoOp { get; } = new FlowSalesforceConnectorOperator("NO_OP");

        public static bool operator ==(FlowSalesforceConnectorOperator left, FlowSalesforceConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowSalesforceConnectorOperator left, FlowSalesforceConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowSalesforceConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowSalesforceConnectorOperator other && Equals(other);
        public bool Equals(FlowSalesforceConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowScheduledTriggerPropertiesDataPullMode : IEquatable<FlowScheduledTriggerPropertiesDataPullMode>
    {
        private readonly string _value;

        private FlowScheduledTriggerPropertiesDataPullMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowScheduledTriggerPropertiesDataPullMode Incremental { get; } = new FlowScheduledTriggerPropertiesDataPullMode("Incremental");
        public static FlowScheduledTriggerPropertiesDataPullMode Complete { get; } = new FlowScheduledTriggerPropertiesDataPullMode("Complete");

        public static bool operator ==(FlowScheduledTriggerPropertiesDataPullMode left, FlowScheduledTriggerPropertiesDataPullMode right) => left.Equals(right);
        public static bool operator !=(FlowScheduledTriggerPropertiesDataPullMode left, FlowScheduledTriggerPropertiesDataPullMode right) => !left.Equals(right);

        public static explicit operator string(FlowScheduledTriggerPropertiesDataPullMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowScheduledTriggerPropertiesDataPullMode other && Equals(other);
        public bool Equals(FlowScheduledTriggerPropertiesDataPullMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowServiceNowConnectorOperator : IEquatable<FlowServiceNowConnectorOperator>
    {
        private readonly string _value;

        private FlowServiceNowConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowServiceNowConnectorOperator Projection { get; } = new FlowServiceNowConnectorOperator("PROJECTION");
        public static FlowServiceNowConnectorOperator LessThan { get; } = new FlowServiceNowConnectorOperator("LESS_THAN");
        public static FlowServiceNowConnectorOperator Contains { get; } = new FlowServiceNowConnectorOperator("CONTAINS");
        public static FlowServiceNowConnectorOperator GreaterThan { get; } = new FlowServiceNowConnectorOperator("GREATER_THAN");
        public static FlowServiceNowConnectorOperator Between { get; } = new FlowServiceNowConnectorOperator("BETWEEN");
        public static FlowServiceNowConnectorOperator LessThanOrEqualTo { get; } = new FlowServiceNowConnectorOperator("LESS_THAN_OR_EQUAL_TO");
        public static FlowServiceNowConnectorOperator GreaterThanOrEqualTo { get; } = new FlowServiceNowConnectorOperator("GREATER_THAN_OR_EQUAL_TO");
        public static FlowServiceNowConnectorOperator EqualTo { get; } = new FlowServiceNowConnectorOperator("EQUAL_TO");
        public static FlowServiceNowConnectorOperator NotEqualTo { get; } = new FlowServiceNowConnectorOperator("NOT_EQUAL_TO");
        public static FlowServiceNowConnectorOperator Addition { get; } = new FlowServiceNowConnectorOperator("ADDITION");
        public static FlowServiceNowConnectorOperator Multiplication { get; } = new FlowServiceNowConnectorOperator("MULTIPLICATION");
        public static FlowServiceNowConnectorOperator Division { get; } = new FlowServiceNowConnectorOperator("DIVISION");
        public static FlowServiceNowConnectorOperator Subtraction { get; } = new FlowServiceNowConnectorOperator("SUBTRACTION");
        public static FlowServiceNowConnectorOperator MaskAll { get; } = new FlowServiceNowConnectorOperator("MASK_ALL");
        public static FlowServiceNowConnectorOperator MaskFirstN { get; } = new FlowServiceNowConnectorOperator("MASK_FIRST_N");
        public static FlowServiceNowConnectorOperator MaskLastN { get; } = new FlowServiceNowConnectorOperator("MASK_LAST_N");
        public static FlowServiceNowConnectorOperator ValidateNonNull { get; } = new FlowServiceNowConnectorOperator("VALIDATE_NON_NULL");
        public static FlowServiceNowConnectorOperator ValidateNonZero { get; } = new FlowServiceNowConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowServiceNowConnectorOperator ValidateNonNegative { get; } = new FlowServiceNowConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowServiceNowConnectorOperator ValidateNumeric { get; } = new FlowServiceNowConnectorOperator("VALIDATE_NUMERIC");
        public static FlowServiceNowConnectorOperator NoOp { get; } = new FlowServiceNowConnectorOperator("NO_OP");

        public static bool operator ==(FlowServiceNowConnectorOperator left, FlowServiceNowConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowServiceNowConnectorOperator left, FlowServiceNowConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowServiceNowConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowServiceNowConnectorOperator other && Equals(other);
        public bool Equals(FlowServiceNowConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowSingularConnectorOperator : IEquatable<FlowSingularConnectorOperator>
    {
        private readonly string _value;

        private FlowSingularConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowSingularConnectorOperator Projection { get; } = new FlowSingularConnectorOperator("PROJECTION");
        public static FlowSingularConnectorOperator EqualTo { get; } = new FlowSingularConnectorOperator("EQUAL_TO");
        public static FlowSingularConnectorOperator Addition { get; } = new FlowSingularConnectorOperator("ADDITION");
        public static FlowSingularConnectorOperator Multiplication { get; } = new FlowSingularConnectorOperator("MULTIPLICATION");
        public static FlowSingularConnectorOperator Division { get; } = new FlowSingularConnectorOperator("DIVISION");
        public static FlowSingularConnectorOperator Subtraction { get; } = new FlowSingularConnectorOperator("SUBTRACTION");
        public static FlowSingularConnectorOperator MaskAll { get; } = new FlowSingularConnectorOperator("MASK_ALL");
        public static FlowSingularConnectorOperator MaskFirstN { get; } = new FlowSingularConnectorOperator("MASK_FIRST_N");
        public static FlowSingularConnectorOperator MaskLastN { get; } = new FlowSingularConnectorOperator("MASK_LAST_N");
        public static FlowSingularConnectorOperator ValidateNonNull { get; } = new FlowSingularConnectorOperator("VALIDATE_NON_NULL");
        public static FlowSingularConnectorOperator ValidateNonZero { get; } = new FlowSingularConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowSingularConnectorOperator ValidateNonNegative { get; } = new FlowSingularConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowSingularConnectorOperator ValidateNumeric { get; } = new FlowSingularConnectorOperator("VALIDATE_NUMERIC");
        public static FlowSingularConnectorOperator NoOp { get; } = new FlowSingularConnectorOperator("NO_OP");

        public static bool operator ==(FlowSingularConnectorOperator left, FlowSingularConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowSingularConnectorOperator left, FlowSingularConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowSingularConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowSingularConnectorOperator other && Equals(other);
        public bool Equals(FlowSingularConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowSlackConnectorOperator : IEquatable<FlowSlackConnectorOperator>
    {
        private readonly string _value;

        private FlowSlackConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowSlackConnectorOperator Projection { get; } = new FlowSlackConnectorOperator("PROJECTION");
        public static FlowSlackConnectorOperator Between { get; } = new FlowSlackConnectorOperator("BETWEEN");
        public static FlowSlackConnectorOperator EqualTo { get; } = new FlowSlackConnectorOperator("EQUAL_TO");
        public static FlowSlackConnectorOperator Addition { get; } = new FlowSlackConnectorOperator("ADDITION");
        public static FlowSlackConnectorOperator Multiplication { get; } = new FlowSlackConnectorOperator("MULTIPLICATION");
        public static FlowSlackConnectorOperator Division { get; } = new FlowSlackConnectorOperator("DIVISION");
        public static FlowSlackConnectorOperator Subtraction { get; } = new FlowSlackConnectorOperator("SUBTRACTION");
        public static FlowSlackConnectorOperator MaskAll { get; } = new FlowSlackConnectorOperator("MASK_ALL");
        public static FlowSlackConnectorOperator MaskFirstN { get; } = new FlowSlackConnectorOperator("MASK_FIRST_N");
        public static FlowSlackConnectorOperator MaskLastN { get; } = new FlowSlackConnectorOperator("MASK_LAST_N");
        public static FlowSlackConnectorOperator ValidateNonNull { get; } = new FlowSlackConnectorOperator("VALIDATE_NON_NULL");
        public static FlowSlackConnectorOperator ValidateNonZero { get; } = new FlowSlackConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowSlackConnectorOperator ValidateNonNegative { get; } = new FlowSlackConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowSlackConnectorOperator ValidateNumeric { get; } = new FlowSlackConnectorOperator("VALIDATE_NUMERIC");
        public static FlowSlackConnectorOperator NoOp { get; } = new FlowSlackConnectorOperator("NO_OP");

        public static bool operator ==(FlowSlackConnectorOperator left, FlowSlackConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowSlackConnectorOperator left, FlowSlackConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowSlackConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowSlackConnectorOperator other && Equals(other);
        public bool Equals(FlowSlackConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowTaskType : IEquatable<FlowTaskType>
    {
        private readonly string _value;

        private FlowTaskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowTaskType Arithmetic { get; } = new FlowTaskType("Arithmetic");
        public static FlowTaskType Filter { get; } = new FlowTaskType("Filter");
        public static FlowTaskType Map { get; } = new FlowTaskType("Map");
        public static FlowTaskType MapAll { get; } = new FlowTaskType("Map_all");
        public static FlowTaskType Mask { get; } = new FlowTaskType("Mask");
        public static FlowTaskType Merge { get; } = new FlowTaskType("Merge");
        public static FlowTaskType Truncate { get; } = new FlowTaskType("Truncate");
        public static FlowTaskType Validate { get; } = new FlowTaskType("Validate");

        public static bool operator ==(FlowTaskType left, FlowTaskType right) => left.Equals(right);
        public static bool operator !=(FlowTaskType left, FlowTaskType right) => !left.Equals(right);

        public static explicit operator string(FlowTaskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowTaskType other && Equals(other);
        public bool Equals(FlowTaskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowTrendmicroConnectorOperator : IEquatable<FlowTrendmicroConnectorOperator>
    {
        private readonly string _value;

        private FlowTrendmicroConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowTrendmicroConnectorOperator Projection { get; } = new FlowTrendmicroConnectorOperator("PROJECTION");
        public static FlowTrendmicroConnectorOperator EqualTo { get; } = new FlowTrendmicroConnectorOperator("EQUAL_TO");
        public static FlowTrendmicroConnectorOperator Addition { get; } = new FlowTrendmicroConnectorOperator("ADDITION");
        public static FlowTrendmicroConnectorOperator Multiplication { get; } = new FlowTrendmicroConnectorOperator("MULTIPLICATION");
        public static FlowTrendmicroConnectorOperator Division { get; } = new FlowTrendmicroConnectorOperator("DIVISION");
        public static FlowTrendmicroConnectorOperator Subtraction { get; } = new FlowTrendmicroConnectorOperator("SUBTRACTION");
        public static FlowTrendmicroConnectorOperator MaskAll { get; } = new FlowTrendmicroConnectorOperator("MASK_ALL");
        public static FlowTrendmicroConnectorOperator MaskFirstN { get; } = new FlowTrendmicroConnectorOperator("MASK_FIRST_N");
        public static FlowTrendmicroConnectorOperator MaskLastN { get; } = new FlowTrendmicroConnectorOperator("MASK_LAST_N");
        public static FlowTrendmicroConnectorOperator ValidateNonNull { get; } = new FlowTrendmicroConnectorOperator("VALIDATE_NON_NULL");
        public static FlowTrendmicroConnectorOperator ValidateNonZero { get; } = new FlowTrendmicroConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowTrendmicroConnectorOperator ValidateNonNegative { get; } = new FlowTrendmicroConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowTrendmicroConnectorOperator ValidateNumeric { get; } = new FlowTrendmicroConnectorOperator("VALIDATE_NUMERIC");
        public static FlowTrendmicroConnectorOperator NoOp { get; } = new FlowTrendmicroConnectorOperator("NO_OP");

        public static bool operator ==(FlowTrendmicroConnectorOperator left, FlowTrendmicroConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowTrendmicroConnectorOperator left, FlowTrendmicroConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowTrendmicroConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowTrendmicroConnectorOperator other && Equals(other);
        public bool Equals(FlowTrendmicroConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowTriggerType : IEquatable<FlowTriggerType>
    {
        private readonly string _value;

        private FlowTriggerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowTriggerType Scheduled { get; } = new FlowTriggerType("Scheduled");
        public static FlowTriggerType Event { get; } = new FlowTriggerType("Event");
        public static FlowTriggerType OnDemand { get; } = new FlowTriggerType("OnDemand");

        public static bool operator ==(FlowTriggerType left, FlowTriggerType right) => left.Equals(right);
        public static bool operator !=(FlowTriggerType left, FlowTriggerType right) => !left.Equals(right);

        public static explicit operator string(FlowTriggerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowTriggerType other && Equals(other);
        public bool Equals(FlowTriggerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowVeevaConnectorOperator : IEquatable<FlowVeevaConnectorOperator>
    {
        private readonly string _value;

        private FlowVeevaConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowVeevaConnectorOperator Projection { get; } = new FlowVeevaConnectorOperator("PROJECTION");
        public static FlowVeevaConnectorOperator LessThan { get; } = new FlowVeevaConnectorOperator("LESS_THAN");
        public static FlowVeevaConnectorOperator GreaterThan { get; } = new FlowVeevaConnectorOperator("GREATER_THAN");
        public static FlowVeevaConnectorOperator Between { get; } = new FlowVeevaConnectorOperator("BETWEEN");
        public static FlowVeevaConnectorOperator LessThanOrEqualTo { get; } = new FlowVeevaConnectorOperator("LESS_THAN_OR_EQUAL_TO");
        public static FlowVeevaConnectorOperator GreaterThanOrEqualTo { get; } = new FlowVeevaConnectorOperator("GREATER_THAN_OR_EQUAL_TO");
        public static FlowVeevaConnectorOperator EqualTo { get; } = new FlowVeevaConnectorOperator("EQUAL_TO");
        public static FlowVeevaConnectorOperator NotEqualTo { get; } = new FlowVeevaConnectorOperator("NOT_EQUAL_TO");
        public static FlowVeevaConnectorOperator Addition { get; } = new FlowVeevaConnectorOperator("ADDITION");
        public static FlowVeevaConnectorOperator Multiplication { get; } = new FlowVeevaConnectorOperator("MULTIPLICATION");
        public static FlowVeevaConnectorOperator Division { get; } = new FlowVeevaConnectorOperator("DIVISION");
        public static FlowVeevaConnectorOperator Subtraction { get; } = new FlowVeevaConnectorOperator("SUBTRACTION");
        public static FlowVeevaConnectorOperator MaskAll { get; } = new FlowVeevaConnectorOperator("MASK_ALL");
        public static FlowVeevaConnectorOperator MaskFirstN { get; } = new FlowVeevaConnectorOperator("MASK_FIRST_N");
        public static FlowVeevaConnectorOperator MaskLastN { get; } = new FlowVeevaConnectorOperator("MASK_LAST_N");
        public static FlowVeevaConnectorOperator ValidateNonNull { get; } = new FlowVeevaConnectorOperator("VALIDATE_NON_NULL");
        public static FlowVeevaConnectorOperator ValidateNonZero { get; } = new FlowVeevaConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowVeevaConnectorOperator ValidateNonNegative { get; } = new FlowVeevaConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowVeevaConnectorOperator ValidateNumeric { get; } = new FlowVeevaConnectorOperator("VALIDATE_NUMERIC");
        public static FlowVeevaConnectorOperator NoOp { get; } = new FlowVeevaConnectorOperator("NO_OP");

        public static bool operator ==(FlowVeevaConnectorOperator left, FlowVeevaConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowVeevaConnectorOperator left, FlowVeevaConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowVeevaConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowVeevaConnectorOperator other && Equals(other);
        public bool Equals(FlowVeevaConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowWriteOperationType : IEquatable<FlowWriteOperationType>
    {
        private readonly string _value;

        private FlowWriteOperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowWriteOperationType Insert { get; } = new FlowWriteOperationType("INSERT");
        public static FlowWriteOperationType Upsert { get; } = new FlowWriteOperationType("UPSERT");
        public static FlowWriteOperationType Update { get; } = new FlowWriteOperationType("UPDATE");

        public static bool operator ==(FlowWriteOperationType left, FlowWriteOperationType right) => left.Equals(right);
        public static bool operator !=(FlowWriteOperationType left, FlowWriteOperationType right) => !left.Equals(right);

        public static explicit operator string(FlowWriteOperationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowWriteOperationType other && Equals(other);
        public bool Equals(FlowWriteOperationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowZendeskConnectorOperator : IEquatable<FlowZendeskConnectorOperator>
    {
        private readonly string _value;

        private FlowZendeskConnectorOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowZendeskConnectorOperator Projection { get; } = new FlowZendeskConnectorOperator("PROJECTION");
        public static FlowZendeskConnectorOperator GreaterThan { get; } = new FlowZendeskConnectorOperator("GREATER_THAN");
        public static FlowZendeskConnectorOperator Addition { get; } = new FlowZendeskConnectorOperator("ADDITION");
        public static FlowZendeskConnectorOperator Multiplication { get; } = new FlowZendeskConnectorOperator("MULTIPLICATION");
        public static FlowZendeskConnectorOperator Division { get; } = new FlowZendeskConnectorOperator("DIVISION");
        public static FlowZendeskConnectorOperator Subtraction { get; } = new FlowZendeskConnectorOperator("SUBTRACTION");
        public static FlowZendeskConnectorOperator MaskAll { get; } = new FlowZendeskConnectorOperator("MASK_ALL");
        public static FlowZendeskConnectorOperator MaskFirstN { get; } = new FlowZendeskConnectorOperator("MASK_FIRST_N");
        public static FlowZendeskConnectorOperator MaskLastN { get; } = new FlowZendeskConnectorOperator("MASK_LAST_N");
        public static FlowZendeskConnectorOperator ValidateNonNull { get; } = new FlowZendeskConnectorOperator("VALIDATE_NON_NULL");
        public static FlowZendeskConnectorOperator ValidateNonZero { get; } = new FlowZendeskConnectorOperator("VALIDATE_NON_ZERO");
        public static FlowZendeskConnectorOperator ValidateNonNegative { get; } = new FlowZendeskConnectorOperator("VALIDATE_NON_NEGATIVE");
        public static FlowZendeskConnectorOperator ValidateNumeric { get; } = new FlowZendeskConnectorOperator("VALIDATE_NUMERIC");
        public static FlowZendeskConnectorOperator NoOp { get; } = new FlowZendeskConnectorOperator("NO_OP");

        public static bool operator ==(FlowZendeskConnectorOperator left, FlowZendeskConnectorOperator right) => left.Equals(right);
        public static bool operator !=(FlowZendeskConnectorOperator left, FlowZendeskConnectorOperator right) => !left.Equals(right);

        public static explicit operator string(FlowZendeskConnectorOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowZendeskConnectorOperator other && Equals(other);
        public bool Equals(FlowZendeskConnectorOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
