// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AppFlow
{
    /// <summary>
    /// Resource schema for AWS::AppFlow::Flow.
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testFlow = new AwsNative.AppFlow.Flow("testFlow", new()
    ///     {
    ///         FlowName = "MyEventFlow",
    ///         Description = "Test event flow for CloudFormation from salesforce to s3",
    ///         TriggerConfig = new AwsNative.AppFlow.Inputs.FlowTriggerConfigArgs
    ///         {
    ///             TriggerType = AwsNative.AppFlow.FlowTriggerType.Event,
    ///         },
    ///         SourceFlowConfig = new AwsNative.AppFlow.Inputs.FlowSourceFlowConfigArgs
    ///         {
    ///             ConnectorType = AwsNative.AppFlow.FlowConnectorType.Salesforce,
    ///             ConnectorProfileName = "TestConnectorProfile",
    ///             SourceConnectorProperties = new AwsNative.AppFlow.Inputs.FlowSourceConnectorPropertiesArgs
    ///             {
    ///                 Salesforce = new AwsNative.AppFlow.Inputs.FlowSalesforceSourcePropertiesArgs
    ///                 {
    ///                     Object = "Account",
    ///                     EnableDynamicFieldUpdate = false,
    ///                     IncludeDeletedRecords = true,
    ///                 },
    ///             },
    ///         },
    ///         DestinationFlowConfigList = new[]
    ///         {
    ///             new AwsNative.AppFlow.Inputs.FlowDestinationFlowConfigArgs
    ///             {
    ///                 ConnectorType = AwsNative.AppFlow.FlowConnectorType.S3,
    ///                 DestinationConnectorProperties = new AwsNative.AppFlow.Inputs.FlowDestinationConnectorPropertiesArgs
    ///                 {
    ///                     S3 = new AwsNative.AppFlow.Inputs.FlowS3DestinationPropertiesArgs
    ///                     {
    ///                         BucketName = "TestOutputBucket",
    ///                         S3OutputFormatConfig = new AwsNative.AppFlow.Inputs.FlowS3OutputFormatConfigArgs
    ///                         {
    ///                             FileType = AwsNative.AppFlow.FlowFileType.Json,
    ///                             AggregationConfig = new AwsNative.AppFlow.Inputs.FlowAggregationConfigArgs
    ///                             {
    ///                                 AggregationType = AwsNative.AppFlow.FlowAggregationType.None,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tasks = new[]
    ///         {
    ///             new AwsNative.AppFlow.Inputs.FlowTaskArgs
    ///             {
    ///                 TaskType = AwsNative.AppFlow.FlowTaskType.Filter,
    ///                 SourceFields = new[]
    ///                 {
    ///                     "Id",
    ///                     "Name",
    ///                 },
    ///                 ConnectorOperator = new AwsNative.AppFlow.Inputs.FlowConnectorOperatorArgs
    ///                 {
    ///                     Salesforce = AwsNative.AppFlow.FlowSalesforceConnectorOperator.Projection,
    ///                 },
    ///             },
    ///             new AwsNative.AppFlow.Inputs.FlowTaskArgs
    ///             {
    ///                 TaskType = AwsNative.AppFlow.FlowTaskType.Map,
    ///                 SourceFields = new[]
    ///                 {
    ///                     "Id",
    ///                 },
    ///                 TaskProperties = new[]
    ///                 {
    ///                     new AwsNative.AppFlow.Inputs.FlowTaskPropertiesObjectArgs
    ///                     {
    ///                         Key = AwsNative.AppFlow.FlowOperatorPropertiesKeys.SourceDataType,
    ///                         Value = "id",
    ///                     },
    ///                     new AwsNative.AppFlow.Inputs.FlowTaskPropertiesObjectArgs
    ///                     {
    ///                         Key = AwsNative.AppFlow.FlowOperatorPropertiesKeys.DestinationDataType,
    ///                         Value = "id",
    ///                     },
    ///                 },
    ///                 DestinationField = "Id",
    ///                 ConnectorOperator = new AwsNative.AppFlow.Inputs.FlowConnectorOperatorArgs
    ///                 {
    ///                     Salesforce = AwsNative.AppFlow.FlowSalesforceConnectorOperator.NoOp,
    ///                 },
    ///             },
    ///             new AwsNative.AppFlow.Inputs.FlowTaskArgs
    ///             {
    ///                 TaskType = AwsNative.AppFlow.FlowTaskType.Map,
    ///                 SourceFields = new[]
    ///                 {
    ///                     "Name",
    ///                 },
    ///                 TaskProperties = new[]
    ///                 {
    ///                     new AwsNative.AppFlow.Inputs.FlowTaskPropertiesObjectArgs
    ///                     {
    ///                         Key = AwsNative.AppFlow.FlowOperatorPropertiesKeys.SourceDataType,
    ///                         Value = "string",
    ///                     },
    ///                     new AwsNative.AppFlow.Inputs.FlowTaskPropertiesObjectArgs
    ///                     {
    ///                         Key = AwsNative.AppFlow.FlowOperatorPropertiesKeys.DestinationDataType,
    ///                         Value = "string",
    ///                     },
    ///                 },
    ///                 DestinationField = "Name",
    ///                 ConnectorOperator = new AwsNative.AppFlow.Inputs.FlowConnectorOperatorArgs
    ///                 {
    ///                     Salesforce = AwsNative.AppFlow.FlowSalesforceConnectorOperator.NoOp,
    ///                 },
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new AwsNative.Inputs.TagArgs
    ///             {
    ///                 Key = "testKey",
    ///                 Value = "testValue",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testFlow = new AwsNative.AppFlow.Flow("testFlow", new()
    ///     {
    ///         FlowName = "MyEventFlow",
    ///         Description = "Test flow for CloudFormation from salesforce to s3",
    ///         TriggerConfig = new AwsNative.AppFlow.Inputs.FlowTriggerConfigArgs
    ///         {
    ///             TriggerType = AwsNative.AppFlow.FlowTriggerType.Event,
    ///         },
    ///         SourceFlowConfig = new AwsNative.AppFlow.Inputs.FlowSourceFlowConfigArgs
    ///         {
    ///             ConnectorType = AwsNative.AppFlow.FlowConnectorType.Salesforce,
    ///             ConnectorProfileName = "TestConnectorProfile",
    ///             SourceConnectorProperties = new AwsNative.AppFlow.Inputs.FlowSourceConnectorPropertiesArgs
    ///             {
    ///                 Salesforce = new AwsNative.AppFlow.Inputs.FlowSalesforceSourcePropertiesArgs
    ///                 {
    ///                     Object = "Account",
    ///                     EnableDynamicFieldUpdate = false,
    ///                     IncludeDeletedRecords = true,
    ///                 },
    ///             },
    ///         },
    ///         DestinationFlowConfigList = new[]
    ///         {
    ///             new AwsNative.AppFlow.Inputs.FlowDestinationFlowConfigArgs
    ///             {
    ///                 ConnectorType = AwsNative.AppFlow.FlowConnectorType.S3,
    ///                 DestinationConnectorProperties = new AwsNative.AppFlow.Inputs.FlowDestinationConnectorPropertiesArgs
    ///                 {
    ///                     S3 = new AwsNative.AppFlow.Inputs.FlowS3DestinationPropertiesArgs
    ///                     {
    ///                         BucketName = "TestOutputBucket",
    ///                         S3OutputFormatConfig = new AwsNative.AppFlow.Inputs.FlowS3OutputFormatConfigArgs
    ///                         {
    ///                             FileType = AwsNative.AppFlow.FlowFileType.Json,
    ///                             AggregationConfig = new AwsNative.AppFlow.Inputs.FlowAggregationConfigArgs
    ///                             {
    ///                                 AggregationType = AwsNative.AppFlow.FlowAggregationType.None,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tasks = new[]
    ///         {
    ///             new AwsNative.AppFlow.Inputs.FlowTaskArgs
    ///             {
    ///                 TaskType = AwsNative.AppFlow.FlowTaskType.Filter,
    ///                 ConnectorOperator = new AwsNative.AppFlow.Inputs.FlowConnectorOperatorArgs
    ///                 {
    ///                     Salesforce = AwsNative.AppFlow.FlowSalesforceConnectorOperator.Projection,
    ///                 },
    ///                 SourceFields = new[]
    ///                 {
    ///                     "Id",
    ///                 },
    ///             },
    ///             new AwsNative.AppFlow.Inputs.FlowTaskArgs
    ///             {
    ///                 TaskType = AwsNative.AppFlow.FlowTaskType.Map,
    ///                 SourceFields = new[]
    ///                 {
    ///                     "Id",
    ///                 },
    ///                 TaskProperties = new[]
    ///                 {
    ///                     new AwsNative.AppFlow.Inputs.FlowTaskPropertiesObjectArgs
    ///                     {
    ///                         Key = AwsNative.AppFlow.FlowOperatorPropertiesKeys.SourceDataType,
    ///                         Value = "id",
    ///                     },
    ///                     new AwsNative.AppFlow.Inputs.FlowTaskPropertiesObjectArgs
    ///                     {
    ///                         Key = AwsNative.AppFlow.FlowOperatorPropertiesKeys.DestinationDataType,
    ///                         Value = "id",
    ///                     },
    ///                 },
    ///                 DestinationField = "Id",
    ///                 ConnectorOperator = new AwsNative.AppFlow.Inputs.FlowConnectorOperatorArgs
    ///                 {
    ///                     Salesforce = AwsNative.AppFlow.FlowSalesforceConnectorOperator.NoOp,
    ///                 },
    ///             },
    ///             new AwsNative.AppFlow.Inputs.FlowTaskArgs
    ///             {
    ///                 TaskType = AwsNative.AppFlow.FlowTaskType.Map,
    ///                 SourceFields = new[]
    ///                 {
    ///                     "Name",
    ///                 },
    ///                 TaskProperties = new[]
    ///                 {
    ///                     new AwsNative.AppFlow.Inputs.FlowTaskPropertiesObjectArgs
    ///                     {
    ///                         Key = AwsNative.AppFlow.FlowOperatorPropertiesKeys.SourceDataType,
    ///                         Value = "string",
    ///                     },
    ///                     new AwsNative.AppFlow.Inputs.FlowTaskPropertiesObjectArgs
    ///                     {
    ///                         Key = AwsNative.AppFlow.FlowOperatorPropertiesKeys.DestinationDataType,
    ///                         Value = "string",
    ///                     },
    ///                 },
    ///                 DestinationField = "Name",
    ///                 ConnectorOperator = new AwsNative.AppFlow.Inputs.FlowConnectorOperatorArgs
    ///                 {
    ///                     Salesforce = AwsNative.AppFlow.FlowSalesforceConnectorOperator.NoOp,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:appflow:Flow")]
    public partial class Flow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the flow.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of Destination connectors of the flow.
        /// </summary>
        [Output("destinationFlowConfigList")]
        public Output<ImmutableArray<Outputs.FlowDestinationFlowConfig>> DestinationFlowConfigList { get; private set; } = null!;

        /// <summary>
        /// ARN identifier of the flow.
        /// </summary>
        [Output("flowArn")]
        public Output<string> FlowArn { get; private set; } = null!;

        /// <summary>
        /// Name of the flow.
        /// </summary>
        [Output("flowName")]
        public Output<string> FlowName { get; private set; } = null!;

        /// <summary>
        /// Flow activation status for Scheduled- and Event-triggered flows
        /// </summary>
        [Output("flowStatus")]
        public Output<Pulumi.AwsNative.AppFlow.FlowStatus?> FlowStatus { get; private set; } = null!;

        /// <summary>
        /// The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
        /// </summary>
        [Output("kmsArn")]
        public Output<string?> KmsArn { get; private set; } = null!;

        /// <summary>
        /// Configurations of metadata catalog of the flow.
        /// </summary>
        [Output("metadataCatalogConfig")]
        public Output<Outputs.FlowMetadataCatalogConfig?> MetadataCatalogConfig { get; private set; } = null!;

        /// <summary>
        /// Configurations of Source connector of the flow.
        /// </summary>
        [Output("sourceFlowConfig")]
        public Output<Outputs.FlowSourceFlowConfig> SourceFlowConfig { get; private set; } = null!;

        /// <summary>
        /// List of Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// List of tasks for the flow.
        /// </summary>
        [Output("tasks")]
        public Output<ImmutableArray<Outputs.FlowTask>> Tasks { get; private set; } = null!;

        /// <summary>
        /// Trigger settings of the flow.
        /// </summary>
        [Output("triggerConfig")]
        public Output<Outputs.FlowTriggerConfig> TriggerConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Flow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Flow(string name, FlowArgs args, CustomResourceOptions? options = null)
            : base("aws-native:appflow:Flow", name, args ?? new FlowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Flow(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:appflow:Flow", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "flowName",
                    "kmsArn",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Flow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Flow Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Flow(name, id, options);
        }
    }

    public sealed class FlowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the flow.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinationFlowConfigList", required: true)]
        private InputList<Inputs.FlowDestinationFlowConfigArgs>? _destinationFlowConfigList;

        /// <summary>
        /// List of Destination connectors of the flow.
        /// </summary>
        public InputList<Inputs.FlowDestinationFlowConfigArgs> DestinationFlowConfigList
        {
            get => _destinationFlowConfigList ?? (_destinationFlowConfigList = new InputList<Inputs.FlowDestinationFlowConfigArgs>());
            set => _destinationFlowConfigList = value;
        }

        /// <summary>
        /// Name of the flow.
        /// </summary>
        [Input("flowName")]
        public Input<string>? FlowName { get; set; }

        /// <summary>
        /// Flow activation status for Scheduled- and Event-triggered flows
        /// </summary>
        [Input("flowStatus")]
        public Input<Pulumi.AwsNative.AppFlow.FlowStatus>? FlowStatus { get; set; }

        /// <summary>
        /// The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
        /// </summary>
        [Input("kmsArn")]
        public Input<string>? KmsArn { get; set; }

        /// <summary>
        /// Configurations of metadata catalog of the flow.
        /// </summary>
        [Input("metadataCatalogConfig")]
        public Input<Inputs.FlowMetadataCatalogConfigArgs>? MetadataCatalogConfig { get; set; }

        /// <summary>
        /// Configurations of Source connector of the flow.
        /// </summary>
        [Input("sourceFlowConfig", required: true)]
        public Input<Inputs.FlowSourceFlowConfigArgs> SourceFlowConfig { get; set; } = null!;

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// List of Tags.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        [Input("tasks", required: true)]
        private InputList<Inputs.FlowTaskArgs>? _tasks;

        /// <summary>
        /// List of tasks for the flow.
        /// </summary>
        public InputList<Inputs.FlowTaskArgs> Tasks
        {
            get => _tasks ?? (_tasks = new InputList<Inputs.FlowTaskArgs>());
            set => _tasks = value;
        }

        /// <summary>
        /// Trigger settings of the flow.
        /// </summary>
        [Input("triggerConfig", required: true)]
        public Input<Inputs.FlowTriggerConfigArgs> TriggerConfig { get; set; } = null!;

        public FlowArgs()
        {
        }
        public static new FlowArgs Empty => new FlowArgs();
    }
}
