// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AppFlow.Outputs
{

    /// <summary>
    /// Destination connector details
    /// </summary>
    [OutputType]
    public sealed class FlowDestinationConnectorProperties
    {
        /// <summary>
        /// The properties that are applied when the custom connector is being used as a destination.
        /// </summary>
        public readonly Outputs.FlowCustomConnectorDestinationProperties? CustomConnector;
        /// <summary>
        /// The properties that are applied when Amazon EventBridge is being used as a destination.
        /// </summary>
        public readonly Outputs.FlowEventBridgeDestinationProperties? EventBridge;
        /// <summary>
        /// The properties that are applied when Amazon Lookout for Metrics is used as a destination.
        /// </summary>
        public readonly Outputs.FlowLookoutMetricsDestinationProperties? LookoutMetrics;
        /// <summary>
        /// The properties that Amazon AppFlow applies when you use Marketo as a flow destination.
        /// </summary>
        public readonly Outputs.FlowMarketoDestinationProperties? Marketo;
        /// <summary>
        /// The properties that are applied when Amazon Redshift is being used as a destination.
        /// </summary>
        public readonly Outputs.FlowRedshiftDestinationProperties? Redshift;
        /// <summary>
        /// The properties that are applied when Amazon S3 is used as a destination.
        /// </summary>
        public readonly Outputs.FlowS3DestinationProperties? S3;
        /// <summary>
        /// The properties that are applied when Salesforce is being used as a destination.
        /// </summary>
        public readonly Outputs.FlowSalesforceDestinationProperties? Salesforce;
        /// <summary>
        /// The properties that are applied when using SAPOData as a flow destination
        /// </summary>
        public readonly Outputs.FlowSapoDataDestinationProperties? SapoData;
        /// <summary>
        /// The properties that are applied when Snowflake is being used as a destination.
        /// </summary>
        public readonly Outputs.FlowSnowflakeDestinationProperties? Snowflake;
        /// <summary>
        /// The properties that are applied when Upsolver is used as a destination.
        /// </summary>
        public readonly Outputs.FlowUpsolverDestinationProperties? Upsolver;
        /// <summary>
        /// The properties that are applied when Zendesk is used as a destination.
        /// </summary>
        public readonly Outputs.FlowZendeskDestinationProperties? Zendesk;

        [OutputConstructor]
        private FlowDestinationConnectorProperties(
            Outputs.FlowCustomConnectorDestinationProperties? customConnector,

            Outputs.FlowEventBridgeDestinationProperties? eventBridge,

            Outputs.FlowLookoutMetricsDestinationProperties? lookoutMetrics,

            Outputs.FlowMarketoDestinationProperties? marketo,

            Outputs.FlowRedshiftDestinationProperties? redshift,

            Outputs.FlowS3DestinationProperties? s3,

            Outputs.FlowSalesforceDestinationProperties? salesforce,

            Outputs.FlowSapoDataDestinationProperties? sapoData,

            Outputs.FlowSnowflakeDestinationProperties? snowflake,

            Outputs.FlowUpsolverDestinationProperties? upsolver,

            Outputs.FlowZendeskDestinationProperties? zendesk)
        {
            CustomConnector = customConnector;
            EventBridge = eventBridge;
            LookoutMetrics = lookoutMetrics;
            Marketo = marketo;
            Redshift = redshift;
            S3 = s3;
            Salesforce = salesforce;
            SapoData = sapoData;
            Snowflake = snowflake;
            Upsolver = upsolver;
            Zendesk = zendesk;
        }
    }
}
