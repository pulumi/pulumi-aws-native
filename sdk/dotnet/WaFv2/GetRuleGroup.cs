// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WaFv2
{
    public static class GetRuleGroup
    {
        /// <summary>
        /// Contains the Rules that identify the requests that you want to allow, block, or count. In a RuleGroup, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a RuleGroup, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the RuleGroup with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a RuleGroup, a request needs to match only one of the specifications to be allowed, blocked, or counted.
        /// </summary>
        public static Task<GetRuleGroupResult> InvokeAsync(GetRuleGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRuleGroupResult>("aws-native:wafv2:getRuleGroup", args ?? new GetRuleGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Contains the Rules that identify the requests that you want to allow, block, or count. In a RuleGroup, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a RuleGroup, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the RuleGroup with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a RuleGroup, a request needs to match only one of the specifications to be allowed, blocked, or counted.
        /// </summary>
        public static Output<GetRuleGroupResult> Invoke(GetRuleGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRuleGroupResult>("aws-native:wafv2:getRuleGroup", args ?? new GetRuleGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRuleGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the rule group.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AWS AppSync GraphQL API, an Amazon Cognito user pool, an AWS App Runner service, or an AWS Verified Access instance. Valid Values are `CLOUDFRONT` and `REGIONAL` .
        /// 
        /// &gt; For `CLOUDFRONT` , you must create your WAFv2 resources in the US East (N. Virginia) Region, `us-east-1` .
        /// </summary>
        [Input("scope", required: true)]
        public Pulumi.AwsNative.WaFv2.RuleGroupScope Scope { get; set; }

        public GetRuleGroupArgs()
        {
        }
        public static new GetRuleGroupArgs Empty => new GetRuleGroupArgs();
    }

    public sealed class GetRuleGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the rule group.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AWS AppSync GraphQL API, an Amazon Cognito user pool, an AWS App Runner service, or an AWS Verified Access instance. Valid Values are `CLOUDFRONT` and `REGIONAL` .
        /// 
        /// &gt; For `CLOUDFRONT` , you must create your WAFv2 resources in the US East (N. Virginia) Region, `us-east-1` .
        /// </summary>
        [Input("scope", required: true)]
        public Input<Pulumi.AwsNative.WaFv2.RuleGroupScope> Scope { get; set; } = null!;

        public GetRuleGroupInvokeArgs()
        {
        }
        public static new GetRuleGroupInvokeArgs Empty => new GetRuleGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetRuleGroupResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the rule group.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// Collection of Available Labels.
        /// </summary>
        public readonly ImmutableArray<Outputs.RuleGroupLabelSummary> AvailableLabels;
        /// <summary>
        /// The web ACL capacity units (WCUs) required for this rule group.
        /// 
        /// When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, AWS WAF enforces this limit.
        /// 
        /// AWS WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. AWS WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        /// </summary>
        public readonly int? Capacity;
        /// <summary>
        /// Collection of Consumed Labels.
        /// </summary>
        public readonly ImmutableArray<Outputs.RuleGroupLabelSummary> ConsumedLabels;
        /// <summary>
        /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group.
        /// 
        /// For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
        /// 
        /// For information about the limits on count and size for custom request and response settings, see [AWS WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the *AWS WAF Developer Guide* .
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.RuleGroupCustomResponseBody>? CustomResponseBodies;
        /// <summary>
        /// A description of the rule group that helps with identification.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The ID of the rule group.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix.
        /// 
        /// The syntax for the label namespace prefix for a rule group is the following: `awswaf:&lt;account ID&gt;:rule group:&lt;rule group name&gt;:`
        /// 
        /// When a rule with a label matches a web request, AWS WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon.
        /// </summary>
        public readonly string? LabelNamespace;
        /// <summary>
        /// Collection of Rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.RuleGroupRule> Rules;
        /// <summary>
        /// A tag associated with an AWS resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as "environment", and the tag value represents a specific value within that category, such as "test," "development," or "production". Or you might set the tag key to "customer" and the value to the customer name or ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a resource.
        /// 
        /// You can tag the AWS resources that you manage through AWS WAF : web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the AWS WAF console.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;
        /// <summary>
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// </summary>
        public readonly Outputs.RuleGroupVisibilityConfig? VisibilityConfig;

        [OutputConstructor]
        private GetRuleGroupResult(
            string? arn,

            ImmutableArray<Outputs.RuleGroupLabelSummary> availableLabels,

            int? capacity,

            ImmutableArray<Outputs.RuleGroupLabelSummary> consumedLabels,

            ImmutableDictionary<string, Outputs.RuleGroupCustomResponseBody>? customResponseBodies,

            string? description,

            string? id,

            string? labelNamespace,

            ImmutableArray<Outputs.RuleGroupRule> rules,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags,

            Outputs.RuleGroupVisibilityConfig? visibilityConfig)
        {
            Arn = arn;
            AvailableLabels = availableLabels;
            Capacity = capacity;
            ConsumedLabels = consumedLabels;
            CustomResponseBodies = customResponseBodies;
            Description = description;
            Id = id;
            LabelNamespace = labelNamespace;
            Rules = rules;
            Tags = tags;
            VisibilityConfig = visibilityConfig;
        }
    }
}
