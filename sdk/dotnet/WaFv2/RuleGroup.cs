// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WaFv2
{
    /// <summary>
    /// Contains the Rules that identify the requests that you want to allow, block, or count. In a RuleGroup, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a RuleGroup, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the RuleGroup with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a RuleGroup, a request needs to match only one of the specifications to be allowed, blocked, or counted.
    /// </summary>
    [AwsNativeResourceType("aws-native:wafv2:RuleGroup")]
    public partial class RuleGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the rule group.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Collection of Available Labels.
        /// </summary>
        [Output("availableLabels")]
        public Output<ImmutableArray<Outputs.RuleGroupLabelSummary>> AvailableLabels { get; private set; } = null!;

        /// <summary>
        /// The ID of the rule group.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The web ACL capacity units (WCUs) required for this rule group.
        /// 
        /// When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, AWS WAF enforces this limit.
        /// 
        /// AWS WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. AWS WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        /// </summary>
        [Output("capacity")]
        public Output<int> Capacity { get; private set; } = null!;

        /// <summary>
        /// Collection of Consumed Labels.
        /// </summary>
        [Output("consumedLabels")]
        public Output<ImmutableArray<Outputs.RuleGroupLabelSummary>> ConsumedLabels { get; private set; } = null!;

        /// <summary>
        /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group.
        /// 
        /// For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
        /// 
        /// For information about the limits on count and size for custom request and response settings, see [AWS WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the *AWS WAF Developer Guide* .
        /// </summary>
        [Output("customResponseBodies")]
        public Output<ImmutableDictionary<string, Outputs.RuleGroupCustomResponseBody>?> CustomResponseBodies { get; private set; } = null!;

        /// <summary>
        /// A description of the rule group that helps with identification.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix.
        /// 
        /// The syntax for the label namespace prefix for a rule group is the following: `awswaf:&lt;account ID&gt;:rule group:&lt;rule group name&gt;:`
        /// 
        /// When a rule with a label matches a web request, AWS WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon.
        /// </summary>
        [Output("labelNamespace")]
        public Output<string> LabelNamespace { get; private set; } = null!;

        /// <summary>
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Collection of Rules.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.RuleGroupRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. For an AWS Amplify application, use `CLOUDFRONT` . A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AWS AppSync GraphQL API, an Amazon Cognito user pool, an AWS App Runner service, or an AWS Verified Access instance. Valid Values are `CLOUDFRONT` and `REGIONAL` .
        /// 
        /// &gt; For `CLOUDFRONT` , you must create your WAFv2 resources in the US East (N. Virginia) Region, `us-east-1` .
        /// </summary>
        [Output("scope")]
        public Output<Pulumi.AwsNative.WaFv2.RuleGroupScope> Scope { get; private set; } = null!;

        /// <summary>
        /// Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource.
        /// 
        /// &gt; To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// </summary>
        [Output("visibilityConfig")]
        public Output<Outputs.RuleGroupVisibilityConfig> VisibilityConfig { get; private set; } = null!;


        /// <summary>
        /// Create a RuleGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleGroup(string name, RuleGroupArgs args, CustomResourceOptions? options = null)
            : base("aws-native:wafv2:RuleGroup", name, args ?? new RuleGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:wafv2:RuleGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "name",
                    "scope",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RuleGroup(name, id, options);
        }
    }

    public sealed class RuleGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("availableLabels")]
        private InputList<Inputs.RuleGroupLabelSummaryArgs>? _availableLabels;

        /// <summary>
        /// Collection of Available Labels.
        /// </summary>
        public InputList<Inputs.RuleGroupLabelSummaryArgs> AvailableLabels
        {
            get => _availableLabels ?? (_availableLabels = new InputList<Inputs.RuleGroupLabelSummaryArgs>());
            set => _availableLabels = value;
        }

        /// <summary>
        /// The web ACL capacity units (WCUs) required for this rule group.
        /// 
        /// When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, AWS WAF enforces this limit.
        /// 
        /// AWS WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. AWS WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. The WCU limit for web ACLs is 1,500.
        /// </summary>
        [Input("capacity", required: true)]
        public Input<int> Capacity { get; set; } = null!;

        [Input("consumedLabels")]
        private InputList<Inputs.RuleGroupLabelSummaryArgs>? _consumedLabels;

        /// <summary>
        /// Collection of Consumed Labels.
        /// </summary>
        public InputList<Inputs.RuleGroupLabelSummaryArgs> ConsumedLabels
        {
            get => _consumedLabels ?? (_consumedLabels = new InputList<Inputs.RuleGroupLabelSummaryArgs>());
            set => _consumedLabels = value;
        }

        [Input("customResponseBodies")]
        private InputMap<Inputs.RuleGroupCustomResponseBodyArgs>? _customResponseBodies;

        /// <summary>
        /// A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group.
        /// 
        /// For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
        /// 
        /// For information about the limits on count and size for custom request and response settings, see [AWS WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the *AWS WAF Developer Guide* .
        /// </summary>
        public InputMap<Inputs.RuleGroupCustomResponseBodyArgs> CustomResponseBodies
        {
            get => _customResponseBodies ?? (_customResponseBodies = new InputMap<Inputs.RuleGroupCustomResponseBodyArgs>());
            set => _customResponseBodies = value;
        }

        /// <summary>
        /// A description of the rule group that helps with identification.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the rule group. You cannot change the name of a rule group after you create it.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.RuleGroupRuleArgs>? _rules;

        /// <summary>
        /// Collection of Rules.
        /// </summary>
        public InputList<Inputs.RuleGroupRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RuleGroupRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies whether this is for an Amazon CloudFront distribution or for a regional application. For an AWS Amplify application, use `CLOUDFRONT` . A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AWS AppSync GraphQL API, an Amazon Cognito user pool, an AWS App Runner service, or an AWS Verified Access instance. Valid Values are `CLOUDFRONT` and `REGIONAL` .
        /// 
        /// &gt; For `CLOUDFRONT` , you must create your WAFv2 resources in the US East (N. Virginia) Region, `us-east-1` .
        /// </summary>
        [Input("scope", required: true)]
        public Input<Pulumi.AwsNative.WaFv2.RuleGroupScope> Scope { get; set; } = null!;

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// Key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource.
        /// 
        /// &gt; To modify tags on existing resources, use the AWS WAF APIs or command line interface. With AWS CloudFormation , you can only add tags to AWS WAF resources during resource creation.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection.
        /// </summary>
        [Input("visibilityConfig", required: true)]
        public Input<Inputs.RuleGroupVisibilityConfigArgs> VisibilityConfig { get; set; } = null!;

        public RuleGroupArgs()
        {
        }
        public static new RuleGroupArgs Empty => new RuleGroupArgs();
    }
}
