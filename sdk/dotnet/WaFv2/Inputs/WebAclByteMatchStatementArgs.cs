// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WaFv2.Inputs
{

    /// <summary>
    /// Byte Match statement.
    /// </summary>
    public sealed class WebAclByteMatchStatementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a web request component to be used in a rule match statement or in a logging configuration.
        /// 
        /// - In a rule statement, this is the part of the web request that you want AWS WAF to inspect. Include the single `FieldToMatch` type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in `FieldToMatch` for each rule statement that requires it. To inspect more than one component of the web request, create a separate rule statement for each component.
        /// 
        /// Example JSON for a `QueryString` field to match:
        /// 
        /// `"FieldToMatch": { "QueryString": {} }`
        /// 
        /// Example JSON for a `Method` field to match specification:
        /// 
        /// `"FieldToMatch": { "Method": { "Name": "DELETE" } }`
        /// - In a logging configuration, this is used in the `RedactedFields` property to specify a field to redact from the logging records. For this use case, note the following:
        /// 
        /// - Even though all `FieldToMatch` settings are available, the only valid settings for field redaction are `UriPath` , `QueryString` , `SingleHeader` , and `Method` .
        /// - In this documentation, the descriptions of the individual fields talk about specifying the web request component to inspect, but for field redaction, you are specifying the component type to redact from the logs.
        /// - If you have request sampling enabled, the redacted fields configuration for logging has no impact on sampling. The only way to exclude fields from request sampling is by disabling sampling in the web ACL visibility configuration.
        /// </summary>
        [Input("fieldToMatch", required: true)]
        public Input<Inputs.WebAclFieldToMatchArgs> FieldToMatch { get; set; } = null!;

        /// <summary>
        /// The area within the portion of the web request that you want AWS WAF to search for `SearchString` . Valid values include the following:
        /// 
        /// *CONTAINS*
        /// 
        /// The specified part of the web request must include the value of `SearchString` , but the location doesn't matter.
        /// 
        /// *CONTAINS_WORD*
        /// 
        /// The specified part of the web request must include the value of `SearchString` , and `SearchString` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, `SearchString` must be a word, which means that both of the following are true:
        /// 
        /// - `SearchString` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and `;BadBot` .
        /// - `SearchString` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, `BadBot;` and `-BadBot;` .
        /// 
        /// *EXACTLY*
        /// 
        /// The value of the specified part of the web request must exactly match the value of `SearchString` .
        /// 
        /// *STARTS_WITH*
        /// 
        /// The value of `SearchString` must appear at the beginning of the specified part of the web request.
        /// 
        /// *ENDS_WITH*
        /// 
        /// The value of `SearchString` must appear at the end of the specified part of the web request.
        /// </summary>
        [Input("positionalConstraint", required: true)]
        public Input<Pulumi.AwsNative.WaFv2.WebAclPositionalConstraint> PositionalConstraint { get; set; } = null!;

        /// <summary>
        /// A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `FieldToMatch` . The maximum length of the value is 200 bytes. For alphabetic characters A-Z and a-z, the value is case sensitive.
        /// 
        /// Don't encode this string. Provide the value that you want AWS WAF to search for. AWS CloudFormation automatically base64 encodes the value for you.
        /// 
        /// For example, suppose the value of `Type` is `HEADER` and the value of `Data` is `User-Agent` . If you want to search the `User-Agent` header for the value `BadBot` , you provide the string `BadBot` in the value of `SearchString` .
        /// 
        /// You must specify either `SearchString` or `SearchStringBase64` in a `ByteMatchStatement` .
        /// </summary>
        [Input("searchString")]
        public Input<string>? SearchString { get; set; }

        /// <summary>
        /// String to search for in a web request component, base64-encoded. If you don't want to encode the string, specify the unencoded value in `SearchString` instead.
        /// 
        /// You must specify either `SearchString` or `SearchStringBase64` in a `ByteMatchStatement` .
        /// </summary>
        [Input("searchStringBase64")]
        public Input<string>? SearchStringBase64 { get; set; }

        [Input("textTransformations", required: true)]
        private InputList<Inputs.WebAclTextTransformationArgs>? _textTransformations;

        /// <summary>
        /// Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
        /// </summary>
        public InputList<Inputs.WebAclTextTransformationArgs> TextTransformations
        {
            get => _textTransformations ?? (_textTransformations = new InputList<Inputs.WebAclTextTransformationArgs>());
            set => _textTransformations = value;
        }

        public WebAclByteMatchStatementArgs()
        {
        }
        public static new WebAclByteMatchStatementArgs Empty => new WebAclByteMatchStatementArgs();
    }
}
