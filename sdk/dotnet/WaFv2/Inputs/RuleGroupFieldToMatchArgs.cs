// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WaFv2.Inputs
{

    /// <summary>
    /// Field of the request to match.
    /// </summary>
    public sealed class RuleGroupFieldToMatchArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// All query arguments of a web request.
        /// </summary>
        [Input("allQueryArguments")]
        public Input<object>? AllQueryArguments { get; set; }

        /// <summary>
        /// Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form.
        /// 
        /// AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
        /// 
        /// - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
        /// - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
        /// 
        /// For information about how to handle oversized request bodies, see the `Body` object configuration.
        /// </summary>
        [Input("body")]
        public Input<Inputs.RuleGroupBodyArgs>? Body { get; set; }

        /// <summary>
        /// Inspect the request cookies. You must configure scope and pattern matching filters in the `Cookies` object, to define the set of cookies and the parts of the cookies that AWS WAF inspects.
        /// 
        /// Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize cookie content in the `Cookies` object. AWS WAF applies the pattern matching filters to the cookies that it receives from the underlying host service.
        /// </summary>
        [Input("cookies")]
        public Input<Inputs.RuleGroupCookiesArgs>? Cookies { get; set; }

        /// <summary>
        /// Inspect the request headers. You must configure scope and pattern matching filters in the `Headers` object, to define the set of headers to and the parts of the headers that AWS WAF inspects.
        /// 
        /// Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize header content in the `Headers` object. AWS WAF applies the pattern matching filters to the headers that it receives from the underlying host service.
        /// </summary>
        [Input("headers")]
        public Input<Inputs.RuleGroupHeadersArgs>? Headers { get; set; }

        /// <summary>
        /// Match against the request's JA3 fingerprint. The JA3 fingerprint is a 32-character hash derived from the TLS Client Hello of an incoming request. This fingerprint serves as a unique identifier for the client's TLS configuration. AWS WAF calculates and logs this fingerprint for each request that has enough TLS Client Hello information for the calculation. Almost all web requests include this information.
        /// 
        /// &gt; You can use this choice only with a string match `ByteMatchStatement` with the `PositionalConstraint` set to `EXACTLY` . 
        /// 
        /// You can obtain the JA3 fingerprint for client requests from the web ACL logs. If AWS WAF is able to calculate the fingerprint, it includes it in the logs. For information about the logging fields, see [Log fields](https://docs.aws.amazon.com/waf/latest/developerguide/logging-fields.html) in the *AWS WAF Developer Guide* .
        /// 
        /// Provide the JA3 fingerprint string from the logs in your string match statement specification, to match with any future requests that have the same TLS configuration.
        /// </summary>
        [Input("ja3Fingerprint")]
        public Input<Inputs.RuleGroupJa3FingerprintArgs>? Ja3Fingerprint { get; set; }

        /// <summary>
        /// Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form.
        /// 
        /// AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
        /// 
        /// - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
        /// - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
        /// 
        /// For information about how to handle oversized request bodies, see the `JsonBody` object configuration.
        /// </summary>
        [Input("jsonBody")]
        public Input<Inputs.RuleGroupJsonBodyArgs>? JsonBody { get; set; }

        /// <summary>
        /// The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
        /// </summary>
        [Input("method")]
        public Input<object>? Method { get; set; }

        /// <summary>
        /// The query string of a web request. This is the part of a URL that appears after a ? character, if any.
        /// </summary>
        [Input("queryString")]
        public Input<object>? QueryString { get; set; }

        /// <summary>
        /// Inspect a single header. Provide the name of the header to inspect, for example, `User-Agent` or `Referer` . This setting isn't case sensitive.
        /// 
        /// Example JSON: `"SingleHeader": { "Name": "haystack" }`
        /// 
        /// Alternately, you can filter and inspect all headers with the `Headers` `FieldToMatch` setting.
        /// </summary>
        [Input("singleHeader")]
        public Input<Inputs.RuleGroupFieldToMatchSingleHeaderPropertiesArgs>? SingleHeader { get; set; }

        /// <summary>
        /// One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
        /// </summary>
        [Input("singleQueryArgument")]
        public Input<Inputs.RuleGroupFieldToMatchSingleQueryArgumentPropertiesArgs>? SingleQueryArgument { get; set; }

        /// <summary>
        /// The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
        /// </summary>
        [Input("uriPath")]
        public Input<object>? UriPath { get; set; }

        public RuleGroupFieldToMatchArgs()
        {
        }
        public static new RuleGroupFieldToMatchArgs Empty => new RuleGroupFieldToMatchArgs();
    }
}
