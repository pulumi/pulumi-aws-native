// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WaFv2.Outputs
{

    /// <summary>
    /// Action taken when Rule matches its condition.
    /// </summary>
    [OutputType]
    public sealed class WebAclRuleAction
    {
        /// <summary>
        /// Specifies that AWS WAF should allow the request and optionally defines additional custom handling for the request.
        /// 
        /// This is used in the context of other settings, for example to specify values for a rule action or a web ACL default action.
        /// </summary>
        public readonly Outputs.WebAclAllowAction? Allow;
        /// <summary>
        /// Specifies that AWS WAF should block the request and optionally defines additional custom handling for the response to the web request.
        /// 
        /// This is used in the context of other settings, for example to specify values for a rule action or a web ACL default action.
        /// </summary>
        public readonly Outputs.WebAclBlockAction? Block;
        /// <summary>
        /// Specifies that AWS WAF should run a `CAPTCHA` check against the request:
        /// 
        /// - If the request includes a valid, unexpired `CAPTCHA` token, AWS WAF allows the web request inspection to proceed to the next rule, similar to a `CountAction` .
        /// - If the request doesn't include a valid, unexpired `CAPTCHA` token, AWS WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.
        /// 
        /// AWS WAF generates a response that it sends back to the client, which includes the following:
        /// 
        /// - The header `x-amzn-waf-action` with a value of `captcha` .
        /// - The HTTP status code `405 Method Not Allowed` .
        /// - If the request contains an `Accept` header with a value of `text/html` , the response includes a `CAPTCHA` challenge.
        /// 
        /// You can configure the expiration time in the `CaptchaConfig` `ImmunityTimeProperty` setting at the rule and web ACL level. The rule setting overrides the web ACL setting.
        /// 
        /// This action option is available for rules. It isn't available for web ACL default actions.
        /// </summary>
        public readonly Outputs.WebAclCaptchaAction? Captcha;
        /// <summary>
        /// Specifies that AWS WAF should run a `Challenge` check against the request to verify that the request is coming from a legitimate client session:
        /// 
        /// - If the request includes a valid, unexpired challenge token, AWS WAF applies any custom request handling and labels that you've configured and then allows the web request inspection to proceed to the next rule, similar to a `CountAction` .
        /// - If the request doesn't include a valid, unexpired challenge token, AWS WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.
        /// 
        /// AWS WAF then generates a challenge response that it sends back to the client, which includes the following:
        /// 
        /// - The header `x-amzn-waf-action` with a value of `challenge` .
        /// - The HTTP status code `202 Request Accepted` .
        /// - If the request contains an `Accept` header with a value of `text/html` , the response includes a JavaScript page interstitial with a challenge script.
        /// 
        /// Challenges run silent browser interrogations in the background, and don't generally affect the end user experience.
        /// 
        /// A challenge enforces token acquisition using an interstitial JavaScript challenge that inspects the client session for legitimate behavior. The challenge blocks bots or at least increases the cost of operating sophisticated bots.
        /// 
        /// After the client session successfully responds to the challenge, it receives a new token from AWS WAF , which the challenge script uses to resubmit the original request.
        /// 
        /// You can configure the expiration time in the `ChallengeConfig` `ImmunityTimeProperty` setting at the rule and web ACL level. The rule setting overrides the web ACL setting.
        /// 
        /// This action option is available for rules. It isn't available for web ACL default actions.
        /// </summary>
        public readonly Outputs.WebAclChallengeAction? Challenge;
        /// <summary>
        /// Specifies that AWS WAF should count the request. Optionally defines additional custom handling for the request.
        /// 
        /// This is used in the context of other settings, for example to specify values for a rule action or a web ACL default action.
        /// </summary>
        public readonly Outputs.WebAclCountAction? Count;

        [OutputConstructor]
        private WebAclRuleAction(
            Outputs.WebAclAllowAction? allow,

            Outputs.WebAclBlockAction? block,

            Outputs.WebAclCaptchaAction? captcha,

            Outputs.WebAclChallengeAction? challenge,

            Outputs.WebAclCountAction? count)
        {
            Allow = allow;
            Block = block;
            Captcha = captcha;
            Challenge = challenge;
            Count = count;
        }
    }
}
