// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WaFv2.Outputs
{

    /// <summary>
    /// Action taken when Rule matches its condition.
    /// </summary>
    [OutputType]
    public sealed class RuleGroupRuleAction
    {
        /// <summary>
        /// Instructs AWS WAF to allow the web request.
        /// </summary>
        public readonly Outputs.RuleGroupAllowAction? Allow;
        /// <summary>
        /// Instructs AWS WAF to block the web request.
        /// </summary>
        public readonly Outputs.RuleGroupBlockAction? Block;
        /// <summary>
        /// Specifies that AWS WAF should run a `CAPTCHA` check against the request:
        /// 
        /// - If the request includes a valid, unexpired `CAPTCHA` token, AWS WAF allows the web request inspection to proceed to the next rule, similar to a `CountAction` .
        /// - If the request doesn't include a valid, unexpired `CAPTCHA` token, AWS WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.
        /// 
        /// AWS WAF generates a response that it sends back to the client, which includes the following:
        /// 
        /// - The header `x-amzn-waf-action` with a value of `captcha` .
        /// - The HTTP status code `405 Method Not Allowed` .
        /// - If the request contains an `Accept` header with a value of `text/html` , the response includes a `CAPTCHA` challenge.
        /// 
        /// You can configure the expiration time in the `CaptchaConfig` `ImmunityTimeProperty` setting at the rule and web ACL level. The rule setting overrides the web ACL setting.
        /// 
        /// This action option is available for rules. It isn't available for web ACL default actions.
        /// </summary>
        public readonly Outputs.RuleGroupCaptchaAction? Captcha;
        /// <summary>
        /// Instructs AWS WAF to run a `Challenge` check against the web request.
        /// </summary>
        public readonly Outputs.RuleGroupChallengeAction? Challenge;
        /// <summary>
        /// Instructs AWS WAF to count the web request and then continue evaluating the request using the remaining rules in the web ACL.
        /// </summary>
        public readonly Outputs.RuleGroupCountAction? Count;

        [OutputConstructor]
        private RuleGroupRuleAction(
            Outputs.RuleGroupAllowAction? allow,

            Outputs.RuleGroupBlockAction? block,

            Outputs.RuleGroupCaptchaAction? captcha,

            Outputs.RuleGroupChallengeAction? challenge,

            Outputs.RuleGroupCountAction? count)
        {
            Allow = allow;
            Block = block;
            Captcha = captcha;
            Challenge = challenge;
            Count = count;
        }
    }
}
