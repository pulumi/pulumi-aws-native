// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.WaFv2.Outputs
{

    /// <summary>
    /// Configures how to use the AntiDDOS AWS managed rule group in the web ACL
    /// </summary>
    [OutputType]
    public sealed class WebAclAwsManagedRulesAntiDDoSRuleSet
    {
        /// <summary>
        /// Configures the request handling that's applied by the managed rule group rules `ChallengeAllDuringEvent` and `ChallengeDDoSRequests` during a distributed denial of service (DDoS) attack.
        /// </summary>
        public readonly Outputs.WebAclClientSideActionConfig ClientSideActionConfig;
        /// <summary>
        /// The sensitivity that the rule group rule `DDoSRequests` uses when matching against the DDoS suspicion labeling on a request. The managed rule group adds the labeling during DDoS events, before the `DDoSRequests` rule runs.
        /// 
        /// The higher the sensitivity, the more levels of labeling that the rule matches:
        /// 
        /// - Low sensitivity is less sensitive, causing the rule to match only on the most likely participants in an attack, which are the requests with the high suspicion label `awswaf:managed:aws:anti-ddos:high-suspicion-ddos-request` .
        /// - Medium sensitivity causes the rule to match on the medium and high suspicion labels.
        /// - High sensitivity causes the rule to match on all of the suspicion labels: low, medium, and high.
        /// 
        /// Default: `LOW`
        /// </summary>
        public readonly Pulumi.AwsNative.WaFv2.WebAclSensitivityToAct? SensitivityToBlock;

        [OutputConstructor]
        private WebAclAwsManagedRulesAntiDDoSRuleSet(
            Outputs.WebAclClientSideActionConfig clientSideActionConfig,

            Pulumi.AwsNative.WaFv2.WebAclSensitivityToAct? sensitivityToBlock)
        {
            ClientSideActionConfig = clientSideActionConfig;
            SensitivityToBlock = sensitivityToBlock;
        }
    }
}
