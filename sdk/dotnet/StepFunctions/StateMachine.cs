// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.StepFunctions
{
    /// <summary>
    /// Resource schema for StateMachine
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myStateMachine = new AwsNative.StepFunctions.StateMachine("myStateMachine", new()
    ///     {
    ///         StateMachineName = "HelloWorld-StateMachine",
    ///         StateMachineType = AwsNative.StepFunctions.StateMachineType.Standard,
    ///         DefinitionString = "{\"StartAt\": \"HelloWorld\",  \"States\": {\"HelloWorld\": {\"Type\": \"Task\", \"Resource\":  \"arn:aws:lambda:us-east-1:111122223333;:function:HelloFunction\", \"End\": true}}}",
    ///         RoleArn = "arn:aws:iam::111122223333:role/service-role/StatesExecutionRole-us-east-1;",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myStateMachine = new AwsNative.StepFunctions.StateMachine("myStateMachine", new()
    ///     {
    ///         StateMachineName = "HelloWorld-StateMachine",
    ///         StateMachineType = AwsNative.StepFunctions.StateMachineType.Standard,
    ///         DefinitionString = @"{
    ///     ""StartAt"": ""HelloWorld"",
    ///     ""States"" : {
    ///         ""HelloWorld"" : {
    ///             ""Type"" : ""Task"", 
    ///             ""Resource"" : ""arn:aws:lambda:us-east-1:111122223333:function:HelloFunction"",
    ///             ""End"" : true
    ///         }
    ///     }
    /// }",
    ///         RoleArn = "arn:aws:iam::111122223333:role/service-role/StatesExecutionRole-us-east-1",
    ///         Tags = new[]
    ///         {
    ///             new AwsNative.Inputs.TagArgs
    ///             {
    ///                 Key = "keyname1",
    ///                 Value = "value1",
    ///             },
    ///             new AwsNative.Inputs.TagArgs
    ///             {
    ///                 Key = "keyname2",
    ///                 Value = "value2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myStateMachine = new AwsNative.StepFunctions.StateMachine("myStateMachine", new()
    ///     {
    ///         StateMachineName = "HelloWorld-StateMachine",
    ///         DefinitionString = @"{
    ///   ""StartAt"": ""HelloWorld"",
    ///   ""States"": {
    ///     ""HelloWorld"": {
    ///       ""Type"": ""Task"",
    ///       ""Resource"": ""arn:aws:lambda:us-east-1:111122223333:function:HelloFunction"",
    ///       ""End"": true
    ///     }
    ///   }
    /// }",
    ///         RoleArn = "arn:aws:iam::111122223333:role/service-role/StatesExecutionRole-us-east-1",
    ///         Tags = new[]
    ///         {
    ///             new AwsNative.Inputs.TagArgs
    ///             {
    ///                 Key = "keyname1",
    ///                 Value = "value1",
    ///             },
    ///             new AwsNative.Inputs.TagArgs
    ///             {
    ///                 Key = "keyname2",
    ///                 Value = "value2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myStateMachine = new AwsNative.StepFunctions.StateMachine("myStateMachine", new()
    ///     {
    ///         StateMachineName = "HelloWorld-StateMachine",
    ///         DefinitionS3Location = new AwsNative.StepFunctions.Inputs.StateMachineS3LocationArgs
    ///         {
    ///             Bucket = "example_bucket",
    ///             Key = "hello_world.json",
    ///         },
    ///         DefinitionSubstitutions = 
    ///         {
    ///             { "helloFunction", "arn:aws:lambda:us-east-1:111122223333:function:HelloFunction" },
    ///         },
    ///         RoleArn = "arn:aws:iam::111122223333:role/service-role/StatesExecutionRole-us-east-1",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:stepfunctions:StateMachine")]
    public partial class StateMachine : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Returns the ARN of the resource.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The Amazon States Language definition of the state machine. The state machine definition must be in JSON or YAML, and the format of the object must match the format of your CloudFormation template file. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
        /// </summary>
        [Output("definition")]
        public Output<Outputs.StateMachineDefinition?> Definition { get; private set; } = null!;

        /// <summary>
        /// The name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.
        /// </summary>
        [Output("definitionS3Location")]
        public Output<Outputs.StateMachineS3Location?> DefinitionS3Location { get; private set; } = null!;

        /// <summary>
        /// The Amazon States Language definition of the state machine. The state machine definition must be in JSON. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
        /// </summary>
        [Output("definitionString")]
        public Output<string?> DefinitionString { get; private set; } = null!;

        /// <summary>
        /// A map (string to string) that specifies the mappings for placeholder variables in the state machine definition. This enables the customer to inject values obtained at runtime, for example from intrinsic functions, in the state machine definition. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map.
        /// 
        /// Substitutions must follow the syntax: `${key_name}` or `${variable_1,variable_2,...}` .
        /// </summary>
        [Output("definitionSubstitutions")]
        public Output<ImmutableDictionary<string, object>?> DefinitionSubstitutions { get; private set; } = null!;

        /// <summary>
        /// Encryption configuration for the state machine.
        /// </summary>
        [Output("encryptionConfiguration")]
        public Output<Outputs.StateMachineEncryptionConfiguration?> EncryptionConfiguration { get; private set; } = null!;

        /// <summary>
        /// Defines what execution history events are logged and where they are logged.
        /// 
        /// &gt; By default, the `level` is set to `OFF` . For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.
        /// </summary>
        [Output("loggingConfiguration")]
        public Output<Outputs.StateMachineLoggingConfiguration?> LoggingConfiguration { get; private set; } = null!;

        /// <summary>
        /// Returns the name of the state machine. For example:
        /// 
        /// `{ "Fn::GetAtt": ["MyStateMachine", "Name"] }`
        /// 
        /// Returns the name of your state machine:
        /// 
        /// `HelloWorld-StateMachine`
        /// 
        /// If you did not specify the name it will be similar to the following:
        /// 
        /// `MyStateMachine-1234abcdefgh`
        /// 
        /// For more information about using `Fn::GetAtt` , see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html) .
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// The name of the state machine.
        /// 
        /// A name must *not* contain:
        /// 
        /// - white space
        /// - brackets `&lt; &gt; { } [ ]`
        /// - wildcard characters `? *`
        /// - special characters `" # % \ ^ | ~ ` $ &amp; , ; : /`
        /// - control characters ( `U+0000-001F` , `U+007F-009F` )
        /// 
        /// &gt; If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
        /// </summary>
        [Output("stateMachineName")]
        public Output<string?> StateMachineName { get; private set; } = null!;

        /// <summary>
        /// Identifier for a state machine revision, which is an immutable, read-only snapshot of a state machine’s definition and configuration.
        /// </summary>
        [Output("stateMachineRevisionId")]
        public Output<string> StateMachineRevisionId { get; private set; } = null!;

        /// <summary>
        /// Determines whether a `STANDARD` or `EXPRESS` state machine is created. The default is `STANDARD` . You cannot update the `type` of a state machine once it has been created. For more information on `STANDARD` and `EXPRESS` workflows, see [Standard Versus Express Workflows](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html) in the AWS Step Functions Developer Guide.
        /// </summary>
        [Output("stateMachineType")]
        public Output<Pulumi.AwsNative.StepFunctions.StateMachineType?> StateMachineType { get; private set; } = null!;

        /// <summary>
        /// The list of tags to add to a resource.
        /// 
        /// Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Selects whether or not the state machine's AWS X-Ray tracing is enabled.
        /// </summary>
        [Output("tracingConfiguration")]
        public Output<Outputs.StateMachineTracingConfiguration?> TracingConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a StateMachine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StateMachine(string name, StateMachineArgs args, CustomResourceOptions? options = null)
            : base("aws-native:stepfunctions:StateMachine", name, args ?? new StateMachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StateMachine(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:stepfunctions:StateMachine", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "stateMachineName",
                    "stateMachineType",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StateMachine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StateMachine Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new StateMachine(name, id, options);
        }
    }

    public sealed class StateMachineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon States Language definition of the state machine. The state machine definition must be in JSON or YAML, and the format of the object must match the format of your CloudFormation template file. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
        /// </summary>
        [Input("definition")]
        public Input<Inputs.StateMachineDefinitionArgs>? Definition { get; set; }

        /// <summary>
        /// The name of the S3 bucket where the state machine definition is stored. The state machine definition must be a JSON or YAML file.
        /// </summary>
        [Input("definitionS3Location")]
        public Input<Inputs.StateMachineS3LocationArgs>? DefinitionS3Location { get; set; }

        /// <summary>
        /// The Amazon States Language definition of the state machine. The state machine definition must be in JSON. See [Amazon States Language](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html) .
        /// </summary>
        [Input("definitionString")]
        public Input<string>? DefinitionString { get; set; }

        [Input("definitionSubstitutions")]
        private InputMap<object>? _definitionSubstitutions;

        /// <summary>
        /// A map (string to string) that specifies the mappings for placeholder variables in the state machine definition. This enables the customer to inject values obtained at runtime, for example from intrinsic functions, in the state machine definition. Variables can be template parameter names, resource logical IDs, resource attributes, or a variable in a key-value map.
        /// 
        /// Substitutions must follow the syntax: `${key_name}` or `${variable_1,variable_2,...}` .
        /// </summary>
        public InputMap<object> DefinitionSubstitutions
        {
            get => _definitionSubstitutions ?? (_definitionSubstitutions = new InputMap<object>());
            set => _definitionSubstitutions = value;
        }

        /// <summary>
        /// Encryption configuration for the state machine.
        /// </summary>
        [Input("encryptionConfiguration")]
        public Input<Inputs.StateMachineEncryptionConfigurationArgs>? EncryptionConfiguration { get; set; }

        /// <summary>
        /// Defines what execution history events are logged and where they are logged.
        /// 
        /// &gt; By default, the `level` is set to `OFF` . For more information see [Log Levels](https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html) in the AWS Step Functions User Guide.
        /// </summary>
        [Input("loggingConfiguration")]
        public Input<Inputs.StateMachineLoggingConfigurationArgs>? LoggingConfiguration { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to use for this state machine.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// The name of the state machine.
        /// 
        /// A name must *not* contain:
        /// 
        /// - white space
        /// - brackets `&lt; &gt; { } [ ]`
        /// - wildcard characters `? *`
        /// - special characters `" # % \ ^ | ~ ` $ &amp; , ; : /`
        /// - control characters ( `U+0000-001F` , `U+007F-009F` )
        /// 
        /// &gt; If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
        /// </summary>
        [Input("stateMachineName")]
        public Input<string>? StateMachineName { get; set; }

        /// <summary>
        /// Determines whether a `STANDARD` or `EXPRESS` state machine is created. The default is `STANDARD` . You cannot update the `type` of a state machine once it has been created. For more information on `STANDARD` and `EXPRESS` workflows, see [Standard Versus Express Workflows](https://docs.aws.amazon.com/step-functions/latest/dg/concepts-standard-vs-express.html) in the AWS Step Functions Developer Guide.
        /// </summary>
        [Input("stateMachineType")]
        public Input<Pulumi.AwsNative.StepFunctions.StateMachineType>? StateMachineType { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The list of tags to add to a resource.
        /// 
        /// Tags may only contain Unicode letters, digits, white space, or these symbols: `_ . : / = + - @` .
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Selects whether or not the state machine's AWS X-Ray tracing is enabled.
        /// </summary>
        [Input("tracingConfiguration")]
        public Input<Inputs.StateMachineTracingConfigurationArgs>? TracingConfiguration { get; set; }

        public StateMachineArgs()
        {
        }
        public static new StateMachineArgs Empty => new StateMachineArgs();
    }
}
