// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.StepFunctions
{
    [EnumType]
    public readonly struct StateMachineLoggingConfigurationLevel : IEquatable<StateMachineLoggingConfigurationLevel>
    {
        private readonly string _value;

        private StateMachineLoggingConfigurationLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StateMachineLoggingConfigurationLevel All { get; } = new StateMachineLoggingConfigurationLevel("ALL");
        public static StateMachineLoggingConfigurationLevel Error { get; } = new StateMachineLoggingConfigurationLevel("ERROR");
        public static StateMachineLoggingConfigurationLevel Fatal { get; } = new StateMachineLoggingConfigurationLevel("FATAL");
        public static StateMachineLoggingConfigurationLevel Off { get; } = new StateMachineLoggingConfigurationLevel("OFF");

        public static bool operator ==(StateMachineLoggingConfigurationLevel left, StateMachineLoggingConfigurationLevel right) => left.Equals(right);
        public static bool operator !=(StateMachineLoggingConfigurationLevel left, StateMachineLoggingConfigurationLevel right) => !left.Equals(right);

        public static explicit operator string(StateMachineLoggingConfigurationLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StateMachineLoggingConfigurationLevel other && Equals(other);
        public bool Equals(StateMachineLoggingConfigurationLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StateMachineStateMachineType : IEquatable<StateMachineStateMachineType>
    {
        private readonly string _value;

        private StateMachineStateMachineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StateMachineStateMachineType Standard { get; } = new StateMachineStateMachineType("STANDARD");
        public static StateMachineStateMachineType Express { get; } = new StateMachineStateMachineType("EXPRESS");

        public static bool operator ==(StateMachineStateMachineType left, StateMachineStateMachineType right) => left.Equals(right);
        public static bool operator !=(StateMachineStateMachineType left, StateMachineStateMachineType right) => !left.Equals(right);

        public static explicit operator string(StateMachineStateMachineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StateMachineStateMachineType other && Equals(other);
        public bool Equals(StateMachineStateMachineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
