// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGateway
{
    public static class GetRestApi
    {
        /// <summary>
        /// Resource Type definition for AWS::ApiGateway::RestApi.
        /// </summary>
        public static Task<GetRestApiResult> InvokeAsync(GetRestApiArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRestApiResult>("aws-native:apigateway:getRestApi", args ?? new GetRestApiArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ApiGateway::RestApi.
        /// </summary>
        public static Output<GetRestApiResult> Invoke(GetRestApiInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRestApiResult>("aws-native:apigateway:getRestApi", args ?? new GetRestApiInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRestApiArgs : global::Pulumi.InvokeArgs
    {
        [Input("restApiId", required: true)]
        public string RestApiId { get; set; } = null!;

        public GetRestApiArgs()
        {
        }
        public static new GetRestApiArgs Empty => new GetRestApiArgs();
    }

    public sealed class GetRestApiInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("restApiId", required: true)]
        public Input<string> RestApiId { get; set; } = null!;

        public GetRestApiInvokeArgs()
        {
        }
        public static new GetRestApiInvokeArgs Empty => new GetRestApiInvokeArgs();
    }


    [OutputType]
    public sealed class GetRestApiResult
    {
        public readonly string? ApiKeySourceType;
        public readonly ImmutableArray<string> BinaryMediaTypes;
        public readonly string? Description;
        public readonly bool? DisableExecuteApiEndpoint;
        public readonly Outputs.RestApiEndpointConfiguration? EndpointConfiguration;
        public readonly int? MinimumCompressionSize;
        public readonly string? Name;
        public readonly object? Policy;
        public readonly string? RestApiId;
        public readonly string? RootResourceId;
        public readonly ImmutableArray<Outputs.RestApiTag> Tags;

        [OutputConstructor]
        private GetRestApiResult(
            string? apiKeySourceType,

            ImmutableArray<string> binaryMediaTypes,

            string? description,

            bool? disableExecuteApiEndpoint,

            Outputs.RestApiEndpointConfiguration? endpointConfiguration,

            int? minimumCompressionSize,

            string? name,

            object? policy,

            string? restApiId,

            string? rootResourceId,

            ImmutableArray<Outputs.RestApiTag> tags)
        {
            ApiKeySourceType = apiKeySourceType;
            BinaryMediaTypes = binaryMediaTypes;
            Description = description;
            DisableExecuteApiEndpoint = disableExecuteApiEndpoint;
            EndpointConfiguration = endpointConfiguration;
            MinimumCompressionSize = minimumCompressionSize;
            Name = name;
            Policy = policy;
            RestApiId = restApiId;
            RootResourceId = rootResourceId;
            Tags = tags;
        }
    }
}
