// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGateway
{
    public static class GetUsagePlan
    {
        /// <summary>
        /// Resource Type definition for AWS::ApiGateway::UsagePlan
        /// </summary>
        public static Task<GetUsagePlanResult> InvokeAsync(GetUsagePlanArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUsagePlanResult>("aws-native:apigateway:getUsagePlan", args ?? new GetUsagePlanArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ApiGateway::UsagePlan
        /// </summary>
        public static Output<GetUsagePlanResult> Invoke(GetUsagePlanInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUsagePlanResult>("aws-native:apigateway:getUsagePlan", args ?? new GetUsagePlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsagePlanArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetUsagePlanArgs()
        {
        }
    }

    public sealed class GetUsagePlanInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetUsagePlanInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetUsagePlanResult
    {
        /// <summary>
        /// The API stages to associate with this usage plan.
        /// </summary>
        public readonly ImmutableArray<Outputs.UsagePlanApiStage> ApiStages;
        /// <summary>
        /// A description of the usage plan.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Configures the number of requests that users can make within a given interval.
        /// </summary>
        public readonly Outputs.UsagePlanQuotaSettings? Quota;
        /// <summary>
        /// An array of arbitrary tags (key-value pairs) to associate with the usage plan.
        /// </summary>
        public readonly ImmutableArray<Outputs.UsagePlanTag> Tags;
        /// <summary>
        /// Configures the overall request rate (average requests per second) and burst capacity.
        /// </summary>
        public readonly Outputs.UsagePlanThrottleSettings? Throttle;
        /// <summary>
        /// A name for the usage plan.
        /// </summary>
        public readonly string? UsagePlanName;

        [OutputConstructor]
        private GetUsagePlanResult(
            ImmutableArray<Outputs.UsagePlanApiStage> apiStages,

            string? description,

            string? id,

            Outputs.UsagePlanQuotaSettings? quota,

            ImmutableArray<Outputs.UsagePlanTag> tags,

            Outputs.UsagePlanThrottleSettings? throttle,

            string? usagePlanName)
        {
            ApiStages = apiStages;
            Description = description;
            Id = id;
            Quota = quota;
            Tags = tags;
            Throttle = throttle;
            UsagePlanName = usagePlanName;
        }
    }
}
