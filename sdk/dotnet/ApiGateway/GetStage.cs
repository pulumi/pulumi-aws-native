// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGateway
{
    public static class GetStage
    {
        /// <summary>
        /// Resource Type definition for AWS::ApiGateway::Stage
        /// </summary>
        public static Task<GetStageResult> InvokeAsync(GetStageArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStageResult>("aws-native:apigateway:getStage", args ?? new GetStageArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ApiGateway::Stage
        /// </summary>
        public static Output<GetStageResult> Invoke(GetStageInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetStageResult>("aws-native:apigateway:getStage", args ?? new GetStageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStageArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the RestApi resource that you're deploying with this stage.
        /// </summary>
        [Input("restApiId", required: true)]
        public string RestApiId { get; set; } = null!;

        /// <summary>
        /// The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
        /// </summary>
        [Input("stageName", required: true)]
        public string StageName { get; set; } = null!;

        public GetStageArgs()
        {
        }
    }

    public sealed class GetStageInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the RestApi resource that you're deploying with this stage.
        /// </summary>
        [Input("restApiId", required: true)]
        public Input<string> RestApiId { get; set; } = null!;

        /// <summary>
        /// The name of the stage, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI).
        /// </summary>
        [Input("stageName", required: true)]
        public Input<string> StageName { get; set; } = null!;

        public GetStageInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStageResult
    {
        /// <summary>
        /// Specifies settings for logging access in this stage.
        /// </summary>
        public readonly Outputs.StageAccessLogSetting? AccessLogSetting;
        /// <summary>
        /// Indicates whether cache clustering is enabled for the stage.
        /// </summary>
        public readonly bool? CacheClusterEnabled;
        /// <summary>
        /// The stage's cache cluster size.
        /// </summary>
        public readonly string? CacheClusterSize;
        /// <summary>
        /// Specifies settings for the canary deployment in this stage.
        /// </summary>
        public readonly Outputs.StageCanarySetting? CanarySetting;
        /// <summary>
        /// The ID of the client certificate that API Gateway uses to call your integration endpoints in the stage. 
        /// </summary>
        public readonly string? ClientCertificateId;
        /// <summary>
        /// The ID of the deployment that the stage is associated with. This parameter is required to create a stage. 
        /// </summary>
        public readonly string? DeploymentId;
        /// <summary>
        /// A description of the stage.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The version ID of the API documentation snapshot.
        /// </summary>
        public readonly string? DocumentationVersion;
        /// <summary>
        /// Settings for all methods in the stage.
        /// </summary>
        public readonly ImmutableArray<Outputs.StageMethodSetting> MethodSettings;
        /// <summary>
        /// An array of arbitrary tags (key-value pairs) to associate with the stage.
        /// </summary>
        public readonly ImmutableArray<Outputs.StageTag> Tags;
        /// <summary>
        /// Specifies whether active X-Ray tracing is enabled for this stage.
        /// </summary>
        public readonly bool? TracingEnabled;
        /// <summary>
        /// A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value.
        /// </summary>
        public readonly object? Variables;

        [OutputConstructor]
        private GetStageResult(
            Outputs.StageAccessLogSetting? accessLogSetting,

            bool? cacheClusterEnabled,

            string? cacheClusterSize,

            Outputs.StageCanarySetting? canarySetting,

            string? clientCertificateId,

            string? deploymentId,

            string? description,

            string? documentationVersion,

            ImmutableArray<Outputs.StageMethodSetting> methodSettings,

            ImmutableArray<Outputs.StageTag> tags,

            bool? tracingEnabled,

            object? variables)
        {
            AccessLogSetting = accessLogSetting;
            CacheClusterEnabled = cacheClusterEnabled;
            CacheClusterSize = cacheClusterSize;
            CanarySetting = canarySetting;
            ClientCertificateId = clientCertificateId;
            DeploymentId = deploymentId;
            Description = description;
            DocumentationVersion = documentationVersion;
            MethodSettings = methodSettings;
            Tags = tags;
            TracingEnabled = tracingEnabled;
            Variables = variables;
        }
    }
}
