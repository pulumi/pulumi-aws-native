// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGateway
{
    public static class GetMethod
    {
        /// <summary>
        /// Resource Type definition for AWS::ApiGateway::Method
        /// </summary>
        public static Task<GetMethodResult> InvokeAsync(GetMethodArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMethodResult>("aws-native:apigateway:getMethod", args ?? new GetMethodArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ApiGateway::Method
        /// </summary>
        public static Output<GetMethodResult> Invoke(GetMethodInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMethodResult>("aws-native:apigateway:getMethod", args ?? new GetMethodInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMethodArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetMethodArgs()
        {
        }
        public static new GetMethodArgs Empty => new GetMethodArgs();
    }

    public sealed class GetMethodInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetMethodInvokeArgs()
        {
        }
        public static new GetMethodInvokeArgs Empty => new GetMethodInvokeArgs();
    }


    [OutputType]
    public sealed class GetMethodResult
    {
        public readonly bool? ApiKeyRequired;
        public readonly ImmutableArray<string> AuthorizationScopes;
        public readonly string? AuthorizationType;
        public readonly string? AuthorizerId;
        public readonly string? HttpMethod;
        public readonly string? Id;
        public readonly Outputs.MethodIntegration? Integration;
        public readonly ImmutableArray<Outputs.MethodResponse> MethodResponses;
        public readonly string? OperationName;
        public readonly object? RequestModels;
        public readonly object? RequestParameters;
        public readonly string? RequestValidatorId;
        public readonly string? ResourceId;
        public readonly string? RestApiId;

        [OutputConstructor]
        private GetMethodResult(
            bool? apiKeyRequired,

            ImmutableArray<string> authorizationScopes,

            string? authorizationType,

            string? authorizerId,

            string? httpMethod,

            string? id,

            Outputs.MethodIntegration? integration,

            ImmutableArray<Outputs.MethodResponse> methodResponses,

            string? operationName,

            object? requestModels,

            object? requestParameters,

            string? requestValidatorId,

            string? resourceId,

            string? restApiId)
        {
            ApiKeyRequired = apiKeyRequired;
            AuthorizationScopes = authorizationScopes;
            AuthorizationType = authorizationType;
            AuthorizerId = authorizerId;
            HttpMethod = httpMethod;
            Id = id;
            Integration = integration;
            MethodResponses = methodResponses;
            OperationName = operationName;
            RequestModels = requestModels;
            RequestParameters = requestParameters;
            RequestValidatorId = requestValidatorId;
            ResourceId = resourceId;
            RestApiId = restApiId;
        }
    }
}
