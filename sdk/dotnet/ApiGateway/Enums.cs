// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.ApiGateway
{
    /// <summary>
    /// The type of API entity to which the documentation content applies. Valid values are ``API``, ``AUTHORIZER``, ``MODEL``, ``RESOURCE``, ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. Content inheritance does not apply to any entity of the ``API``, ``AUTHORIZER``, ``METHOD``, ``MODEL``, ``REQUEST_BODY``, or ``RESOURCE`` type.
    /// </summary>
    [EnumType]
    public readonly struct DocumentationPartLocationType : IEquatable<DocumentationPartLocationType>
    {
        private readonly string _value;

        private DocumentationPartLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DocumentationPartLocationType Api { get; } = new DocumentationPartLocationType("API");
        public static DocumentationPartLocationType Authorizer { get; } = new DocumentationPartLocationType("AUTHORIZER");
        public static DocumentationPartLocationType Model { get; } = new DocumentationPartLocationType("MODEL");
        public static DocumentationPartLocationType Resource { get; } = new DocumentationPartLocationType("RESOURCE");
        public static DocumentationPartLocationType Method { get; } = new DocumentationPartLocationType("METHOD");
        public static DocumentationPartLocationType PathParameter { get; } = new DocumentationPartLocationType("PATH_PARAMETER");
        public static DocumentationPartLocationType QueryParameter { get; } = new DocumentationPartLocationType("QUERY_PARAMETER");
        public static DocumentationPartLocationType RequestHeader { get; } = new DocumentationPartLocationType("REQUEST_HEADER");
        public static DocumentationPartLocationType RequestBody { get; } = new DocumentationPartLocationType("REQUEST_BODY");
        public static DocumentationPartLocationType Response { get; } = new DocumentationPartLocationType("RESPONSE");
        public static DocumentationPartLocationType ResponseHeader { get; } = new DocumentationPartLocationType("RESPONSE_HEADER");
        public static DocumentationPartLocationType ResponseBody { get; } = new DocumentationPartLocationType("RESPONSE_BODY");

        public static bool operator ==(DocumentationPartLocationType left, DocumentationPartLocationType right) => left.Equals(right);
        public static bool operator !=(DocumentationPartLocationType left, DocumentationPartLocationType right) => !left.Equals(right);

        public static explicit operator string(DocumentationPartLocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DocumentationPartLocationType other && Equals(other);
        public bool Equals(DocumentationPartLocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of a UsagePlanKey resource for a plan customer.
    /// </summary>
    [EnumType]
    public readonly struct UsagePlanKeyKeyType : IEquatable<UsagePlanKeyKeyType>
    {
        private readonly string _value;

        private UsagePlanKeyKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UsagePlanKeyKeyType ApiKey { get; } = new UsagePlanKeyKeyType("API_KEY");

        public static bool operator ==(UsagePlanKeyKeyType left, UsagePlanKeyKeyType right) => left.Equals(right);
        public static bool operator !=(UsagePlanKeyKeyType left, UsagePlanKeyKeyType right) => !left.Equals(right);

        public static explicit operator string(UsagePlanKeyKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UsagePlanKeyKeyType other && Equals(other);
        public bool Equals(UsagePlanKeyKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
