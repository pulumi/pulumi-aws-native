// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGateway
{
    /// <summary>
    /// The ``AWS::ApiGateway::UsagePlan`` resource creates a usage plan for deployed APIs. A usage plan sets a target for the throttling and quota limits on individual client API keys. For more information, see [Creating and Using API Usage Plans in Amazon API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html) in the *API Gateway Developer Guide*.
    ///  In some cases clients can exceed the targets that you set. Donâ€™t rely on usage plans to control costs. Consider using [](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html) to monitor costs and [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) to manage API requests.
    /// </summary>
    [AwsNativeResourceType("aws-native:apigateway:UsagePlan")]
    public partial class UsagePlan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The associated API stages of a usage plan.
        /// </summary>
        [Output("apiStages")]
        public Output<ImmutableArray<Outputs.UsagePlanApiStage>> ApiStages { get; private set; } = null!;

        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The description of a usage plan.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The target maximum number of permitted requests per a given unit time interval.
        /// </summary>
        [Output("quota")]
        public Output<Outputs.UsagePlanQuotaSettings?> Quota { get; private set; } = null!;

        /// <summary>
        /// The collection of tags. Each tag element is associated with a given resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// A map containing method level throttling information for API stage in a usage plan.
        /// </summary>
        [Output("throttle")]
        public Output<Outputs.UsagePlanThrottleSettings?> Throttle { get; private set; } = null!;

        /// <summary>
        /// The name of a usage plan.
        /// </summary>
        [Output("usagePlanName")]
        public Output<string?> UsagePlanName { get; private set; } = null!;


        /// <summary>
        /// Create a UsagePlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UsagePlan(string name, UsagePlanArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:apigateway:UsagePlan", name, args ?? new UsagePlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UsagePlan(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:apigateway:UsagePlan", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UsagePlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UsagePlan Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new UsagePlan(name, id, options);
        }
    }

    public sealed class UsagePlanArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiStages")]
        private InputList<Inputs.UsagePlanApiStageArgs>? _apiStages;

        /// <summary>
        /// The associated API stages of a usage plan.
        /// </summary>
        public InputList<Inputs.UsagePlanApiStageArgs> ApiStages
        {
            get => _apiStages ?? (_apiStages = new InputList<Inputs.UsagePlanApiStageArgs>());
            set => _apiStages = value;
        }

        /// <summary>
        /// The description of a usage plan.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The target maximum number of permitted requests per a given unit time interval.
        /// </summary>
        [Input("quota")]
        public Input<Inputs.UsagePlanQuotaSettingsArgs>? Quota { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The collection of tags. Each tag element is associated with a given resource.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// A map containing method level throttling information for API stage in a usage plan.
        /// </summary>
        [Input("throttle")]
        public Input<Inputs.UsagePlanThrottleSettingsArgs>? Throttle { get; set; }

        /// <summary>
        /// The name of a usage plan.
        /// </summary>
        [Input("usagePlanName")]
        public Input<string>? UsagePlanName { get; set; }

        public UsagePlanArgs()
        {
        }
        public static new UsagePlanArgs Empty => new UsagePlanArgs();
    }
}
