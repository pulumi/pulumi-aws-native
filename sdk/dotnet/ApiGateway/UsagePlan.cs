// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGateway
{
    /// <summary>
    /// Resource Type definition for AWS::ApiGateway::UsagePlan
    /// </summary>
    [AwsNativeResourceType("aws-native:apigateway:UsagePlan")]
    public partial class UsagePlan : Pulumi.CustomResource
    {
        /// <summary>
        /// The API stages to associate with this usage plan.
        /// </summary>
        [Output("apiStages")]
        public Output<ImmutableArray<Outputs.UsagePlanApiStage>> ApiStages { get; private set; } = null!;

        /// <summary>
        /// A description of the usage plan.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Configures the number of requests that users can make within a given interval.
        /// </summary>
        [Output("quota")]
        public Output<Outputs.UsagePlanQuotaSettings?> Quota { get; private set; } = null!;

        /// <summary>
        /// An array of arbitrary tags (key-value pairs) to associate with the usage plan.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.UsagePlanTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Configures the overall request rate (average requests per second) and burst capacity.
        /// </summary>
        [Output("throttle")]
        public Output<Outputs.UsagePlanThrottleSettings?> Throttle { get; private set; } = null!;

        /// <summary>
        /// A name for the usage plan.
        /// </summary>
        [Output("usagePlanName")]
        public Output<string?> UsagePlanName { get; private set; } = null!;


        /// <summary>
        /// Create a UsagePlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UsagePlan(string name, UsagePlanArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:apigateway:UsagePlan", name, args ?? new UsagePlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UsagePlan(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:apigateway:UsagePlan", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UsagePlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UsagePlan Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new UsagePlan(name, id, options);
        }
    }

    public sealed class UsagePlanArgs : Pulumi.ResourceArgs
    {
        [Input("apiStages")]
        private InputList<Inputs.UsagePlanApiStageArgs>? _apiStages;

        /// <summary>
        /// The API stages to associate with this usage plan.
        /// </summary>
        public InputList<Inputs.UsagePlanApiStageArgs> ApiStages
        {
            get => _apiStages ?? (_apiStages = new InputList<Inputs.UsagePlanApiStageArgs>());
            set => _apiStages = value;
        }

        /// <summary>
        /// A description of the usage plan.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configures the number of requests that users can make within a given interval.
        /// </summary>
        [Input("quota")]
        public Input<Inputs.UsagePlanQuotaSettingsArgs>? Quota { get; set; }

        [Input("tags")]
        private InputList<Inputs.UsagePlanTagArgs>? _tags;

        /// <summary>
        /// An array of arbitrary tags (key-value pairs) to associate with the usage plan.
        /// </summary>
        public InputList<Inputs.UsagePlanTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.UsagePlanTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Configures the overall request rate (average requests per second) and burst capacity.
        /// </summary>
        [Input("throttle")]
        public Input<Inputs.UsagePlanThrottleSettingsArgs>? Throttle { get; set; }

        /// <summary>
        /// A name for the usage plan.
        /// </summary>
        [Input("usagePlanName")]
        public Input<string>? UsagePlanName { get; set; }

        public UsagePlanArgs()
        {
        }
    }
}
