// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGateway
{
    /// <summary>
    /// The ``AWS::ApiGateway::DomainName`` resource specifies a custom domain name for your API in API Gateway.
    ///  You can use a custom domain name to provide a URL that's more intuitive and easier to recall. For more information about using custom domain names, see [Set up Custom Domain Name for an API in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html) in the *API Gateway Developer Guide*.
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var cfnDomainName = config.Require("cfnDomainName");
    ///     var certificateArn = config.Require("certificateArn");
    ///     var type = config.Require("type");
    ///     var myDomainName = new AwsNative.ApiGateway.DomainName("myDomainName", new()
    ///     {
    ///         CertificateArn = certificateArn,
    ///         DomainNameValue = cfnDomainName,
    ///         EndpointConfiguration = new AwsNative.ApiGateway.Inputs.DomainNameEndpointConfigurationArgs
    ///         {
    ///             Types = new[]
    ///             {
    ///                 type,
    ///             },
    ///         },
    ///         RegionalCertificateArn = certificateArn,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["domainName"] = myDomainName.Id,
    ///     };
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var cfnDomainName = config.Require("cfnDomainName");
    ///     var certificateArn = config.Require("certificateArn");
    ///     var type = config.Require("type");
    ///     var myDomainName = new AwsNative.ApiGateway.DomainName("myDomainName", new()
    ///     {
    ///         CertificateArn = certificateArn,
    ///         DomainNameValue = cfnDomainName,
    ///         EndpointConfiguration = new AwsNative.ApiGateway.Inputs.DomainNameEndpointConfigurationArgs
    ///         {
    ///             Types = new[]
    ///             {
    ///                 type,
    ///             },
    ///         },
    ///         RegionalCertificateArn = certificateArn,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["domainName"] = myDomainName.Id,
    ///     };
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:apigateway:DomainName")]
    public partial class DomainName : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The reference to an AWS -managed certificate that will be used by edge-optimized endpoint or private endpoint for this domain name. AWS Certificate Manager is the only supported source.
        /// </summary>
        [Output("certificateArn")]
        public Output<string?> CertificateArn { get; private set; } = null!;

        /// <summary>
        /// The Amazon CloudFront distribution domain name that's mapped to the custom domain name. This is only applicable for endpoints whose type is `EDGE` .
        /// 
        /// Example: `d111111abcdef8.cloudfront.net`
        /// </summary>
        [Output("distributionDomainName")]
        public Output<string> DistributionDomainName { get; private set; } = null!;

        /// <summary>
        /// The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized endpoint. The only valid value is `Z2FDTNDATAQYW2` for all regions.
        /// </summary>
        [Output("distributionHostedZoneId")]
        public Output<string> DistributionHostedZoneId { get; private set; } = null!;

        /// <summary>
        /// The custom domain name as an API host name, for example, `my-api.example.com` .
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainNameValue { get; private set; } = null!;

        /// <summary>
        /// The ARN of the domain name.
        /// </summary>
        [Output("domainNameArn")]
        public Output<string> DomainNameArn { get; private set; } = null!;

        /// <summary>
        /// The endpoint configuration of this DomainName showing the endpoint types and IP address types of the domain name.
        /// </summary>
        [Output("endpointConfiguration")]
        public Output<Outputs.DomainNameEndpointConfiguration?> EndpointConfiguration { get; private set; } = null!;

        /// <summary>
        /// The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
        /// </summary>
        [Output("mutualTlsAuthentication")]
        public Output<Outputs.DomainNameMutualTlsAuthentication?> MutualTlsAuthentication { get; private set; } = null!;

        /// <summary>
        /// The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the RegionalCertificateArn.
        /// </summary>
        [Output("ownershipVerificationCertificateArn")]
        public Output<string?> OwnershipVerificationCertificateArn { get; private set; } = null!;

        /// <summary>
        /// The reference to an AWS -managed certificate that will be used for validating the regional domain name. AWS Certificate Manager is the only supported source.
        /// </summary>
        [Output("regionalCertificateArn")]
        public Output<string?> RegionalCertificateArn { get; private set; } = null!;

        /// <summary>
        /// The domain name associated with the regional endpoint for this custom domain name. You set up this association by adding a DNS record that points the custom domain name to this regional domain name.
        /// </summary>
        [Output("regionalDomainName")]
        public Output<string> RegionalDomainName { get; private set; } = null!;

        /// <summary>
        /// The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint.
        /// </summary>
        [Output("regionalHostedZoneId")]
        public Output<string> RegionalHostedZoneId { get; private set; } = null!;

        /// <summary>
        /// The routing mode for this domain name. The routing mode determines how API Gateway sends traffic from your custom domain name to your public APIs.
        /// </summary>
        [Output("routingMode")]
        public Output<Pulumi.AwsNative.ApiGateway.DomainNameRoutingMode?> RoutingMode { get; private set; } = null!;

        /// <summary>
        /// The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are `TLS_1_0` and `TLS_1_2` .
        /// </summary>
        [Output("securityPolicy")]
        public Output<string?> SecurityPolicy { get; private set; } = null!;

        /// <summary>
        /// The collection of tags. Each tag element is associated with a given resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DomainName resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainName(string name, DomainNameArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:apigateway:DomainName", name, args ?? new DomainNameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainName(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:apigateway:DomainName", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "domainName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainName resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainName Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DomainName(name, id, options);
        }
    }

    public sealed class DomainNameArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The reference to an AWS -managed certificate that will be used by edge-optimized endpoint or private endpoint for this domain name. AWS Certificate Manager is the only supported source.
        /// </summary>
        [Input("certificateArn")]
        public Input<string>? CertificateArn { get; set; }

        /// <summary>
        /// The custom domain name as an API host name, for example, `my-api.example.com` .
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainNameValue { get; set; }

        /// <summary>
        /// The endpoint configuration of this DomainName showing the endpoint types and IP address types of the domain name.
        /// </summary>
        [Input("endpointConfiguration")]
        public Input<Inputs.DomainNameEndpointConfigurationArgs>? EndpointConfiguration { get; set; }

        /// <summary>
        /// The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
        /// </summary>
        [Input("mutualTlsAuthentication")]
        public Input<Inputs.DomainNameMutualTlsAuthenticationArgs>? MutualTlsAuthentication { get; set; }

        /// <summary>
        /// The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the RegionalCertificateArn.
        /// </summary>
        [Input("ownershipVerificationCertificateArn")]
        public Input<string>? OwnershipVerificationCertificateArn { get; set; }

        /// <summary>
        /// The reference to an AWS -managed certificate that will be used for validating the regional domain name. AWS Certificate Manager is the only supported source.
        /// </summary>
        [Input("regionalCertificateArn")]
        public Input<string>? RegionalCertificateArn { get; set; }

        /// <summary>
        /// The routing mode for this domain name. The routing mode determines how API Gateway sends traffic from your custom domain name to your public APIs.
        /// </summary>
        [Input("routingMode")]
        public Input<Pulumi.AwsNative.ApiGateway.DomainNameRoutingMode>? RoutingMode { get; set; }

        /// <summary>
        /// The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are `TLS_1_0` and `TLS_1_2` .
        /// </summary>
        [Input("securityPolicy")]
        public Input<string>? SecurityPolicy { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The collection of tags. Each tag element is associated with a given resource.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public DomainNameArgs()
        {
        }
        public static new DomainNameArgs Empty => new DomainNameArgs();
    }
}
