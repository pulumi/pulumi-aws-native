// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApiGateway
{
    public static class GetAuthorizer
    {
        /// <summary>
        /// Represents an authorization layer for methods. If enabled on a method, API Gateway will activate the authorizer when a client calls the method.
        /// </summary>
        public static Task<GetAuthorizerResult> InvokeAsync(GetAuthorizerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAuthorizerResult>("aws-native:apigateway:getAuthorizer", args ?? new GetAuthorizerArgs(), options.WithDefaults());

        /// <summary>
        /// Represents an authorization layer for methods. If enabled on a method, API Gateway will activate the authorizer when a client calls the method.
        /// </summary>
        public static Output<GetAuthorizerResult> Invoke(GetAuthorizerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAuthorizerResult>("aws-native:apigateway:getAuthorizer", args ?? new GetAuthorizerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthorizerArgs : Pulumi.InvokeArgs
    {
        [Input("authorizerId", required: true)]
        public string AuthorizerId { get; set; } = null!;

        /// <summary>
        /// The identifier of the API.
        /// </summary>
        [Input("restApiId", required: true)]
        public string RestApiId { get; set; } = null!;

        public GetAuthorizerArgs()
        {
        }
    }

    public sealed class GetAuthorizerInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("authorizerId", required: true)]
        public Input<string> AuthorizerId { get; set; } = null!;

        /// <summary>
        /// The identifier of the API.
        /// </summary>
        [Input("restApiId", required: true)]
        public Input<string> RestApiId { get; set; } = null!;

        public GetAuthorizerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAuthorizerResult
    {
        /// <summary>
        /// Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
        /// </summary>
        public readonly string? AuthType;
        /// <summary>
        /// Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer.
        /// </summary>
        public readonly string? AuthorizerCredentials;
        public readonly string? AuthorizerId;
        /// <summary>
        /// The TTL in seconds of cached authorizer results.
        /// </summary>
        public readonly int? AuthorizerResultTtlInSeconds;
        /// <summary>
        /// Specifies the authorizer's Uniform Resource Identifier (URI).
        /// </summary>
        public readonly string? AuthorizerUri;
        /// <summary>
        /// The identity source for which authorization is requested.
        /// </summary>
        public readonly string? IdentitySource;
        /// <summary>
        /// A validation expression for the incoming identity token.
        /// </summary>
        public readonly string? IdentityValidationExpression;
        /// <summary>
        /// The name of the authorizer.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// A list of the Amazon Cognito user pool ARNs for the COGNITO_USER_POOLS authorizer.
        /// </summary>
        public readonly ImmutableArray<string> ProviderARNs;
        /// <summary>
        /// The authorizer type.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetAuthorizerResult(
            string? authType,

            string? authorizerCredentials,

            string? authorizerId,

            int? authorizerResultTtlInSeconds,

            string? authorizerUri,

            string? identitySource,

            string? identityValidationExpression,

            string? name,

            ImmutableArray<string> providerARNs,

            string? type)
        {
            AuthType = authType;
            AuthorizerCredentials = authorizerCredentials;
            AuthorizerId = authorizerId;
            AuthorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
            AuthorizerUri = authorizerUri;
            IdentitySource = identitySource;
            IdentityValidationExpression = identityValidationExpression;
            Name = name;
            ProviderARNs = providerARNs;
            Type = type;
        }
    }
}
