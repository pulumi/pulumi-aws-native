// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Comprehend
{
    [EnumType]
    public readonly struct FlywheelDocumentClassificationConfigMode : IEquatable<FlywheelDocumentClassificationConfigMode>
    {
        private readonly string _value;

        private FlywheelDocumentClassificationConfigMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlywheelDocumentClassificationConfigMode MultiClass { get; } = new FlywheelDocumentClassificationConfigMode("MULTI_CLASS");
        public static FlywheelDocumentClassificationConfigMode MultiLabel { get; } = new FlywheelDocumentClassificationConfigMode("MULTI_LABEL");

        public static bool operator ==(FlywheelDocumentClassificationConfigMode left, FlywheelDocumentClassificationConfigMode right) => left.Equals(right);
        public static bool operator !=(FlywheelDocumentClassificationConfigMode left, FlywheelDocumentClassificationConfigMode right) => !left.Equals(right);

        public static explicit operator string(FlywheelDocumentClassificationConfigMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlywheelDocumentClassificationConfigMode other && Equals(other);
        public bool Equals(FlywheelDocumentClassificationConfigMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlywheelModelType : IEquatable<FlywheelModelType>
    {
        private readonly string _value;

        private FlywheelModelType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlywheelModelType DocumentClassifier { get; } = new FlywheelModelType("DOCUMENT_CLASSIFIER");
        public static FlywheelModelType EntityRecognizer { get; } = new FlywheelModelType("ENTITY_RECOGNIZER");

        public static bool operator ==(FlywheelModelType left, FlywheelModelType right) => left.Equals(right);
        public static bool operator !=(FlywheelModelType left, FlywheelModelType right) => !left.Equals(right);

        public static explicit operator string(FlywheelModelType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlywheelModelType other && Equals(other);
        public bool Equals(FlywheelModelType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlywheelTaskConfigLanguageCode : IEquatable<FlywheelTaskConfigLanguageCode>
    {
        private readonly string _value;

        private FlywheelTaskConfigLanguageCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlywheelTaskConfigLanguageCode En { get; } = new FlywheelTaskConfigLanguageCode("en");
        public static FlywheelTaskConfigLanguageCode Es { get; } = new FlywheelTaskConfigLanguageCode("es");
        public static FlywheelTaskConfigLanguageCode Fr { get; } = new FlywheelTaskConfigLanguageCode("fr");
        public static FlywheelTaskConfigLanguageCode It { get; } = new FlywheelTaskConfigLanguageCode("it");
        public static FlywheelTaskConfigLanguageCode De { get; } = new FlywheelTaskConfigLanguageCode("de");
        public static FlywheelTaskConfigLanguageCode Pt { get; } = new FlywheelTaskConfigLanguageCode("pt");

        public static bool operator ==(FlywheelTaskConfigLanguageCode left, FlywheelTaskConfigLanguageCode right) => left.Equals(right);
        public static bool operator !=(FlywheelTaskConfigLanguageCode left, FlywheelTaskConfigLanguageCode right) => !left.Equals(right);

        public static explicit operator string(FlywheelTaskConfigLanguageCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlywheelTaskConfigLanguageCode other && Equals(other);
        public bool Equals(FlywheelTaskConfigLanguageCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
