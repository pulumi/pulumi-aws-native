// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.S3.Outputs
{

    /// <summary>
    /// S3 bucket destination settings for the Amazon S3 Storage Lens metrics export.
    /// </summary>
    [OutputType]
    public sealed class StorageLensS3BucketDestination
    {
        /// <summary>
        /// The AWS account ID that owns the destination S3 bucket.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
        /// </summary>
        public readonly string Arn;
        public readonly Outputs.StorageLensEncryption? Encryption;
        /// <summary>
        /// Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
        /// </summary>
        public readonly Pulumi.AwsNative.S3.StorageLensS3BucketDestinationFormat Format;
        /// <summary>
        /// The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
        /// </summary>
        public readonly Pulumi.AwsNative.S3.StorageLensS3BucketDestinationOutputSchemaVersion OutputSchemaVersion;
        /// <summary>
        /// The prefix to use for Amazon S3 Storage Lens export.
        /// </summary>
        public readonly string? Prefix;

        [OutputConstructor]
        private StorageLensS3BucketDestination(
            string accountId,

            string arn,

            Outputs.StorageLensEncryption? encryption,

            Pulumi.AwsNative.S3.StorageLensS3BucketDestinationFormat format,

            Pulumi.AwsNative.S3.StorageLensS3BucketDestinationOutputSchemaVersion outputSchemaVersion,

            string? prefix)
        {
            AccountId = accountId;
            Arn = arn;
            Encryption = encryption;
            Format = format;
            OutputSchemaVersion = outputSchemaVersion;
            Prefix = prefix;
        }
    }
}
