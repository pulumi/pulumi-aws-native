// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.S3
{
    public static class GetBucket
    {
        /// <summary>
        /// Resource Type definition for AWS::S3::Bucket
        /// </summary>
        public static Task<GetBucketResult> InvokeAsync(GetBucketArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBucketResult>("aws-native:s3:getBucket", args ?? new GetBucketArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::S3::Bucket
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetBucketResult>("aws-native:s3:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the bucket name.
        /// </summary>
        [Input("bucketName", required: true)]
        public string BucketName { get; set; } = null!;

        public GetBucketArgs()
        {
        }
    }

    public sealed class GetBucketInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the bucket name.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        public GetBucketInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBucketResult
    {
        /// <summary>
        /// Configuration for the transfer acceleration state.
        /// </summary>
        public readonly Outputs.BucketAccelerateConfiguration? AccelerateConfiguration;
        /// <summary>
        /// A canned access control list (ACL) that grants predefined permissions to the bucket.
        /// </summary>
        public readonly Pulumi.AwsNative.S3.BucketAccessControl? AccessControl;
        /// <summary>
        /// The configuration and any analyses for the analytics filter of an Amazon S3 bucket.
        /// </summary>
        public readonly ImmutableArray<Outputs.BucketAnalyticsConfiguration> AnalyticsConfigurations;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the specified bucket.
        /// </summary>
        public readonly string? Arn;
        public readonly Outputs.BucketEncryption? BucketEncryption;
        /// <summary>
        /// Rules that define cross-origin resource sharing of objects in this bucket.
        /// </summary>
        public readonly Outputs.BucketCorsConfiguration? CorsConfiguration;
        /// <summary>
        /// The IPv4 DNS name of the specified bucket.
        /// </summary>
        public readonly string? DomainName;
        /// <summary>
        /// The IPv6 DNS name of the specified bucket. For more information about dual-stack endpoints, see [Using Amazon S3 Dual-Stack Endpoints](https://docs.aws.amazon.com/AmazonS3/latest/dev/dual-stack-endpoints.html).
        /// </summary>
        public readonly string? DualStackDomainName;
        /// <summary>
        /// Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.
        /// </summary>
        public readonly ImmutableArray<Outputs.BucketIntelligentTieringConfiguration> IntelligentTieringConfigurations;
        /// <summary>
        /// The inventory configuration for an Amazon S3 bucket.
        /// </summary>
        public readonly ImmutableArray<Outputs.BucketInventoryConfiguration> InventoryConfigurations;
        /// <summary>
        /// Rules that define how Amazon S3 manages objects during their lifetime.
        /// </summary>
        public readonly Outputs.BucketLifecycleConfiguration? LifecycleConfiguration;
        /// <summary>
        /// Settings that define where logs are stored.
        /// </summary>
        public readonly Outputs.BucketLoggingConfiguration? LoggingConfiguration;
        /// <summary>
        /// Settings that define a metrics configuration for the CloudWatch request metrics from the bucket.
        /// </summary>
        public readonly ImmutableArray<Outputs.BucketMetricsConfiguration> MetricsConfigurations;
        /// <summary>
        /// Configuration that defines how Amazon S3 handles bucket notifications.
        /// </summary>
        public readonly Outputs.BucketNotificationConfiguration? NotificationConfiguration;
        /// <summary>
        /// Places an Object Lock configuration on the specified bucket.
        /// </summary>
        public readonly Outputs.BucketObjectLockConfiguration? ObjectLockConfiguration;
        /// <summary>
        /// Specifies the container element for object ownership rules.
        /// </summary>
        public readonly Outputs.BucketOwnershipControls? OwnershipControls;
        public readonly Outputs.BucketPublicAccessBlockConfiguration? PublicAccessBlockConfiguration;
        /// <summary>
        /// Returns the regional domain name of the specified bucket.
        /// </summary>
        public readonly string? RegionalDomainName;
        /// <summary>
        /// Configuration for replicating objects in an S3 bucket.
        /// </summary>
        public readonly Outputs.BucketReplicationConfiguration? ReplicationConfiguration;
        /// <summary>
        /// An arbitrary set of tags (key-value pairs) for this S3 bucket.
        /// </summary>
        public readonly ImmutableArray<Outputs.BucketTag> Tags;
        public readonly Outputs.BucketVersioningConfiguration? VersioningConfiguration;
        public readonly Outputs.BucketWebsiteConfiguration? WebsiteConfiguration;
        /// <summary>
        /// The Amazon S3 website endpoint for the specified bucket.
        /// </summary>
        public readonly string? WebsiteURL;

        [OutputConstructor]
        private GetBucketResult(
            Outputs.BucketAccelerateConfiguration? accelerateConfiguration,

            Pulumi.AwsNative.S3.BucketAccessControl? accessControl,

            ImmutableArray<Outputs.BucketAnalyticsConfiguration> analyticsConfigurations,

            string? arn,

            Outputs.BucketEncryption? bucketEncryption,

            Outputs.BucketCorsConfiguration? corsConfiguration,

            string? domainName,

            string? dualStackDomainName,

            ImmutableArray<Outputs.BucketIntelligentTieringConfiguration> intelligentTieringConfigurations,

            ImmutableArray<Outputs.BucketInventoryConfiguration> inventoryConfigurations,

            Outputs.BucketLifecycleConfiguration? lifecycleConfiguration,

            Outputs.BucketLoggingConfiguration? loggingConfiguration,

            ImmutableArray<Outputs.BucketMetricsConfiguration> metricsConfigurations,

            Outputs.BucketNotificationConfiguration? notificationConfiguration,

            Outputs.BucketObjectLockConfiguration? objectLockConfiguration,

            Outputs.BucketOwnershipControls? ownershipControls,

            Outputs.BucketPublicAccessBlockConfiguration? publicAccessBlockConfiguration,

            string? regionalDomainName,

            Outputs.BucketReplicationConfiguration? replicationConfiguration,

            ImmutableArray<Outputs.BucketTag> tags,

            Outputs.BucketVersioningConfiguration? versioningConfiguration,

            Outputs.BucketWebsiteConfiguration? websiteConfiguration,

            string? websiteURL)
        {
            AccelerateConfiguration = accelerateConfiguration;
            AccessControl = accessControl;
            AnalyticsConfigurations = analyticsConfigurations;
            Arn = arn;
            BucketEncryption = bucketEncryption;
            CorsConfiguration = corsConfiguration;
            DomainName = domainName;
            DualStackDomainName = dualStackDomainName;
            IntelligentTieringConfigurations = intelligentTieringConfigurations;
            InventoryConfigurations = inventoryConfigurations;
            LifecycleConfiguration = lifecycleConfiguration;
            LoggingConfiguration = loggingConfiguration;
            MetricsConfigurations = metricsConfigurations;
            NotificationConfiguration = notificationConfiguration;
            ObjectLockConfiguration = objectLockConfiguration;
            OwnershipControls = ownershipControls;
            PublicAccessBlockConfiguration = publicAccessBlockConfiguration;
            RegionalDomainName = regionalDomainName;
            ReplicationConfiguration = replicationConfiguration;
            Tags = tags;
            VersioningConfiguration = versioningConfiguration;
            WebsiteConfiguration = websiteConfiguration;
            WebsiteURL = websiteURL;
        }
    }
}
