// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.S3
{
    public static class GetBucket
    {
        /// <summary>
        /// Resource Type definition for AWS::S3::Bucket
        /// </summary>
        public static Task<GetBucketResult> InvokeAsync(GetBucketArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBucketResult>("aws-native:s3:getBucket", args ?? new GetBucketArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::S3::Bucket
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketResult>("aws-native:s3:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetBucketArgs()
        {
        }
        public static new GetBucketArgs Empty => new GetBucketArgs();
    }

    public sealed class GetBucketInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetBucketInvokeArgs()
        {
        }
        public static new GetBucketInvokeArgs Empty => new GetBucketInvokeArgs();
    }


    [OutputType]
    public sealed class GetBucketResult
    {
        public readonly Outputs.BucketAccelerateConfiguration? AccelerateConfiguration;
        public readonly string? AccessControl;
        public readonly ImmutableArray<Outputs.BucketAnalyticsConfiguration> AnalyticsConfigurations;
        public readonly string? Arn;
        public readonly Outputs.BucketEncryption? BucketEncryption;
        public readonly Outputs.BucketCorsConfiguration? CorsConfiguration;
        public readonly string? DomainName;
        public readonly string? DualStackDomainName;
        public readonly string? Id;
        public readonly ImmutableArray<Outputs.BucketIntelligentTieringConfiguration> IntelligentTieringConfigurations;
        public readonly ImmutableArray<Outputs.BucketInventoryConfiguration> InventoryConfigurations;
        public readonly Outputs.BucketLifecycleConfiguration? LifecycleConfiguration;
        public readonly Outputs.BucketLoggingConfiguration? LoggingConfiguration;
        public readonly ImmutableArray<Outputs.BucketMetricsConfiguration> MetricsConfigurations;
        public readonly Outputs.BucketNotificationConfiguration? NotificationConfiguration;
        public readonly Outputs.BucketObjectLockConfiguration? ObjectLockConfiguration;
        public readonly Outputs.BucketOwnershipControls? OwnershipControls;
        public readonly Outputs.BucketPublicAccessBlockConfiguration? PublicAccessBlockConfiguration;
        public readonly string? RegionalDomainName;
        public readonly Outputs.BucketReplicationConfiguration? ReplicationConfiguration;
        public readonly ImmutableArray<Outputs.BucketTag> Tags;
        public readonly Outputs.BucketVersioningConfiguration? VersioningConfiguration;
        public readonly Outputs.BucketWebsiteConfiguration? WebsiteConfiguration;
        public readonly string? WebsiteUrl;

        [OutputConstructor]
        private GetBucketResult(
            Outputs.BucketAccelerateConfiguration? accelerateConfiguration,

            string? accessControl,

            ImmutableArray<Outputs.BucketAnalyticsConfiguration> analyticsConfigurations,

            string? arn,

            Outputs.BucketEncryption? bucketEncryption,

            Outputs.BucketCorsConfiguration? corsConfiguration,

            string? domainName,

            string? dualStackDomainName,

            string? id,

            ImmutableArray<Outputs.BucketIntelligentTieringConfiguration> intelligentTieringConfigurations,

            ImmutableArray<Outputs.BucketInventoryConfiguration> inventoryConfigurations,

            Outputs.BucketLifecycleConfiguration? lifecycleConfiguration,

            Outputs.BucketLoggingConfiguration? loggingConfiguration,

            ImmutableArray<Outputs.BucketMetricsConfiguration> metricsConfigurations,

            Outputs.BucketNotificationConfiguration? notificationConfiguration,

            Outputs.BucketObjectLockConfiguration? objectLockConfiguration,

            Outputs.BucketOwnershipControls? ownershipControls,

            Outputs.BucketPublicAccessBlockConfiguration? publicAccessBlockConfiguration,

            string? regionalDomainName,

            Outputs.BucketReplicationConfiguration? replicationConfiguration,

            ImmutableArray<Outputs.BucketTag> tags,

            Outputs.BucketVersioningConfiguration? versioningConfiguration,

            Outputs.BucketWebsiteConfiguration? websiteConfiguration,

            string? websiteUrl)
        {
            AccelerateConfiguration = accelerateConfiguration;
            AccessControl = accessControl;
            AnalyticsConfigurations = analyticsConfigurations;
            Arn = arn;
            BucketEncryption = bucketEncryption;
            CorsConfiguration = corsConfiguration;
            DomainName = domainName;
            DualStackDomainName = dualStackDomainName;
            Id = id;
            IntelligentTieringConfigurations = intelligentTieringConfigurations;
            InventoryConfigurations = inventoryConfigurations;
            LifecycleConfiguration = lifecycleConfiguration;
            LoggingConfiguration = loggingConfiguration;
            MetricsConfigurations = metricsConfigurations;
            NotificationConfiguration = notificationConfiguration;
            ObjectLockConfiguration = objectLockConfiguration;
            OwnershipControls = ownershipControls;
            PublicAccessBlockConfiguration = publicAccessBlockConfiguration;
            RegionalDomainName = regionalDomainName;
            ReplicationConfiguration = replicationConfiguration;
            Tags = tags;
            VersioningConfiguration = versioningConfiguration;
            WebsiteConfiguration = websiteConfiguration;
            WebsiteUrl = websiteUrl;
        }
    }
}
