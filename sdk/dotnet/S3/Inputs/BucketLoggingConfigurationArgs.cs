// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.S3.Inputs
{

    /// <summary>
    /// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For examples and more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the *Amazon S3 API Reference*.
    ///   To successfully complete the ``AWS::S3::Bucket LoggingConfiguration`` request, you must have ``s3:PutObject`` and ``s3:PutObjectAcl`` in your IAM permissions.
    /// </summary>
    public sealed class BucketLoggingConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the bucket where Amazon S3 should store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the ``LoggingConfiguration`` property is defined.
        /// </summary>
        [Input("destinationBucketName")]
        public Input<string>? DestinationBucketName { get; set; }

        /// <summary>
        /// A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
        /// </summary>
        [Input("logFilePrefix")]
        public Input<string>? LogFilePrefix { get; set; }

        /// <summary>
        /// Amazon S3 key format for log objects. Only one format, either PartitionedPrefix or SimplePrefix, is allowed.
        /// </summary>
        [Input("targetObjectKeyFormat")]
        public Input<Inputs.BucketTargetObjectKeyFormatArgs>? TargetObjectKeyFormat { get; set; }

        public BucketLoggingConfigurationArgs()
        {
        }
        public static new BucketLoggingConfigurationArgs Empty => new BucketLoggingConfigurationArgs();
    }
}
