// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.S3
{
    /// <summary>
    /// Indicates whether this Access Point allows access from the public Internet. If VpcConfiguration is specified for this Access Point, then NetworkOrigin is VPC, and the Access Point doesn't allow access from the public Internet. Otherwise, NetworkOrigin is Internet, and the Access Point allows access from the public Internet, subject to the Access Point and bucket access policies.
    /// </summary>
    [EnumType]
    public readonly struct AccessPointNetworkOrigin : IEquatable<AccessPointNetworkOrigin>
    {
        private readonly string _value;

        private AccessPointNetworkOrigin(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessPointNetworkOrigin Internet { get; } = new AccessPointNetworkOrigin("Internet");
        public static AccessPointNetworkOrigin Vpc { get; } = new AccessPointNetworkOrigin("VPC");

        public static bool operator ==(AccessPointNetworkOrigin left, AccessPointNetworkOrigin right) => left.Equals(right);
        public static bool operator !=(AccessPointNetworkOrigin left, AccessPointNetworkOrigin right) => !left.Equals(right);

        public static explicit operator string(AccessPointNetworkOrigin value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessPointNetworkOrigin other && Equals(other);
        public bool Equals(AccessPointNetworkOrigin other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether the policy is public or not.
    /// </summary>
    [EnumType]
    public readonly struct AccessPointPolicyStatusPropertiesIsPublic : IEquatable<AccessPointPolicyStatusPropertiesIsPublic>
    {
        private readonly string _value;

        private AccessPointPolicyStatusPropertiesIsPublic(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AccessPointPolicyStatusPropertiesIsPublic True { get; } = new AccessPointPolicyStatusPropertiesIsPublic("true");
        public static AccessPointPolicyStatusPropertiesIsPublic False { get; } = new AccessPointPolicyStatusPropertiesIsPublic("false");

        public static bool operator ==(AccessPointPolicyStatusPropertiesIsPublic left, AccessPointPolicyStatusPropertiesIsPublic right) => left.Equals(right);
        public static bool operator !=(AccessPointPolicyStatusPropertiesIsPublic left, AccessPointPolicyStatusPropertiesIsPublic right) => !left.Equals(right);

        public static explicit operator string(AccessPointPolicyStatusPropertiesIsPublic value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AccessPointPolicyStatusPropertiesIsPublic other && Equals(other);
        public bool Equals(AccessPointPolicyStatusPropertiesIsPublic other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configures the transfer acceleration state for an Amazon S3 bucket.
    /// </summary>
    [EnumType]
    public readonly struct BucketAccelerateConfigurationAccelerationStatus : IEquatable<BucketAccelerateConfigurationAccelerationStatus>
    {
        private readonly string _value;

        private BucketAccelerateConfigurationAccelerationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketAccelerateConfigurationAccelerationStatus Enabled { get; } = new BucketAccelerateConfigurationAccelerationStatus("Enabled");
        public static BucketAccelerateConfigurationAccelerationStatus Suspended { get; } = new BucketAccelerateConfigurationAccelerationStatus("Suspended");

        public static bool operator ==(BucketAccelerateConfigurationAccelerationStatus left, BucketAccelerateConfigurationAccelerationStatus right) => left.Equals(right);
        public static bool operator !=(BucketAccelerateConfigurationAccelerationStatus left, BucketAccelerateConfigurationAccelerationStatus right) => !left.Equals(right);

        public static explicit operator string(BucketAccelerateConfigurationAccelerationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketAccelerateConfigurationAccelerationStatus other && Equals(other);
        public bool Equals(BucketAccelerateConfigurationAccelerationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A canned access control list (ACL) that grants predefined permissions to the bucket.
    /// </summary>
    [EnumType]
    public readonly struct BucketAccessControl : IEquatable<BucketAccessControl>
    {
        private readonly string _value;

        private BucketAccessControl(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketAccessControl AuthenticatedRead { get; } = new BucketAccessControl("AuthenticatedRead");
        public static BucketAccessControl AwsExecRead { get; } = new BucketAccessControl("AwsExecRead");
        public static BucketAccessControl BucketOwnerFullControl { get; } = new BucketAccessControl("BucketOwnerFullControl");
        public static BucketAccessControl BucketOwnerRead { get; } = new BucketAccessControl("BucketOwnerRead");
        public static BucketAccessControl LogDeliveryWrite { get; } = new BucketAccessControl("LogDeliveryWrite");
        public static BucketAccessControl Private { get; } = new BucketAccessControl("Private");
        public static BucketAccessControl PublicRead { get; } = new BucketAccessControl("PublicRead");
        public static BucketAccessControl PublicReadWrite { get; } = new BucketAccessControl("PublicReadWrite");

        public static bool operator ==(BucketAccessControl left, BucketAccessControl right) => left.Equals(right);
        public static bool operator !=(BucketAccessControl left, BucketAccessControl right) => !left.Equals(right);

        public static explicit operator string(BucketAccessControl value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketAccessControl other && Equals(other);
        public bool Equals(BucketAccessControl other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BucketCorsRuleAllowedMethodsItem : IEquatable<BucketCorsRuleAllowedMethodsItem>
    {
        private readonly string _value;

        private BucketCorsRuleAllowedMethodsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketCorsRuleAllowedMethodsItem Get { get; } = new BucketCorsRuleAllowedMethodsItem("GET");
        public static BucketCorsRuleAllowedMethodsItem Put { get; } = new BucketCorsRuleAllowedMethodsItem("PUT");
        public static BucketCorsRuleAllowedMethodsItem Head { get; } = new BucketCorsRuleAllowedMethodsItem("HEAD");
        public static BucketCorsRuleAllowedMethodsItem Post { get; } = new BucketCorsRuleAllowedMethodsItem("POST");
        public static BucketCorsRuleAllowedMethodsItem Delete { get; } = new BucketCorsRuleAllowedMethodsItem("DELETE");

        public static bool operator ==(BucketCorsRuleAllowedMethodsItem left, BucketCorsRuleAllowedMethodsItem right) => left.Equals(right);
        public static bool operator !=(BucketCorsRuleAllowedMethodsItem left, BucketCorsRuleAllowedMethodsItem right) => !left.Equals(right);

        public static explicit operator string(BucketCorsRuleAllowedMethodsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketCorsRuleAllowedMethodsItem other && Equals(other);
        public bool Equals(BucketCorsRuleAllowedMethodsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BucketDefaultRetentionMode : IEquatable<BucketDefaultRetentionMode>
    {
        private readonly string _value;

        private BucketDefaultRetentionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketDefaultRetentionMode Compliance { get; } = new BucketDefaultRetentionMode("COMPLIANCE");
        public static BucketDefaultRetentionMode Governance { get; } = new BucketDefaultRetentionMode("GOVERNANCE");

        public static bool operator ==(BucketDefaultRetentionMode left, BucketDefaultRetentionMode right) => left.Equals(right);
        public static bool operator !=(BucketDefaultRetentionMode left, BucketDefaultRetentionMode right) => !left.Equals(right);

        public static explicit operator string(BucketDefaultRetentionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketDefaultRetentionMode other && Equals(other);
        public bool Equals(BucketDefaultRetentionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BucketDeleteMarkerReplicationStatus : IEquatable<BucketDeleteMarkerReplicationStatus>
    {
        private readonly string _value;

        private BucketDeleteMarkerReplicationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketDeleteMarkerReplicationStatus Disabled { get; } = new BucketDeleteMarkerReplicationStatus("Disabled");
        public static BucketDeleteMarkerReplicationStatus Enabled { get; } = new BucketDeleteMarkerReplicationStatus("Enabled");

        public static bool operator ==(BucketDeleteMarkerReplicationStatus left, BucketDeleteMarkerReplicationStatus right) => left.Equals(right);
        public static bool operator !=(BucketDeleteMarkerReplicationStatus left, BucketDeleteMarkerReplicationStatus right) => !left.Equals(right);

        public static explicit operator string(BucketDeleteMarkerReplicationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketDeleteMarkerReplicationStatus other && Equals(other);
        public bool Equals(BucketDeleteMarkerReplicationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the file format used when exporting data to Amazon S3.
    /// </summary>
    [EnumType]
    public readonly struct BucketDestinationFormat : IEquatable<BucketDestinationFormat>
    {
        private readonly string _value;

        private BucketDestinationFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketDestinationFormat Csv { get; } = new BucketDestinationFormat("CSV");
        public static BucketDestinationFormat Orc { get; } = new BucketDestinationFormat("ORC");
        public static BucketDestinationFormat Parquet { get; } = new BucketDestinationFormat("Parquet");

        public static bool operator ==(BucketDestinationFormat left, BucketDestinationFormat right) => left.Equals(right);
        public static bool operator !=(BucketDestinationFormat left, BucketDestinationFormat right) => !left.Equals(right);

        public static explicit operator string(BucketDestinationFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketDestinationFormat other && Equals(other);
        public bool Equals(BucketDestinationFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the status of the configuration.
    /// </summary>
    [EnumType]
    public readonly struct BucketIntelligentTieringConfigurationStatus : IEquatable<BucketIntelligentTieringConfigurationStatus>
    {
        private readonly string _value;

        private BucketIntelligentTieringConfigurationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketIntelligentTieringConfigurationStatus Disabled { get; } = new BucketIntelligentTieringConfigurationStatus("Disabled");
        public static BucketIntelligentTieringConfigurationStatus Enabled { get; } = new BucketIntelligentTieringConfigurationStatus("Enabled");

        public static bool operator ==(BucketIntelligentTieringConfigurationStatus left, BucketIntelligentTieringConfigurationStatus right) => left.Equals(right);
        public static bool operator !=(BucketIntelligentTieringConfigurationStatus left, BucketIntelligentTieringConfigurationStatus right) => !left.Equals(right);

        public static explicit operator string(BucketIntelligentTieringConfigurationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketIntelligentTieringConfigurationStatus other && Equals(other);
        public bool Equals(BucketIntelligentTieringConfigurationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Object versions to include in the inventory list.
    /// </summary>
    [EnumType]
    public readonly struct BucketInventoryConfigurationIncludedObjectVersions : IEquatable<BucketInventoryConfigurationIncludedObjectVersions>
    {
        private readonly string _value;

        private BucketInventoryConfigurationIncludedObjectVersions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketInventoryConfigurationIncludedObjectVersions All { get; } = new BucketInventoryConfigurationIncludedObjectVersions("All");
        public static BucketInventoryConfigurationIncludedObjectVersions Current { get; } = new BucketInventoryConfigurationIncludedObjectVersions("Current");

        public static bool operator ==(BucketInventoryConfigurationIncludedObjectVersions left, BucketInventoryConfigurationIncludedObjectVersions right) => left.Equals(right);
        public static bool operator !=(BucketInventoryConfigurationIncludedObjectVersions left, BucketInventoryConfigurationIncludedObjectVersions right) => !left.Equals(right);

        public static explicit operator string(BucketInventoryConfigurationIncludedObjectVersions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketInventoryConfigurationIncludedObjectVersions other && Equals(other);
        public bool Equals(BucketInventoryConfigurationIncludedObjectVersions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BucketInventoryConfigurationOptionalFieldsItem : IEquatable<BucketInventoryConfigurationOptionalFieldsItem>
    {
        private readonly string _value;

        private BucketInventoryConfigurationOptionalFieldsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketInventoryConfigurationOptionalFieldsItem Size { get; } = new BucketInventoryConfigurationOptionalFieldsItem("Size");
        public static BucketInventoryConfigurationOptionalFieldsItem LastModifiedDate { get; } = new BucketInventoryConfigurationOptionalFieldsItem("LastModifiedDate");
        public static BucketInventoryConfigurationOptionalFieldsItem StorageClass { get; } = new BucketInventoryConfigurationOptionalFieldsItem("StorageClass");
        public static BucketInventoryConfigurationOptionalFieldsItem ETag { get; } = new BucketInventoryConfigurationOptionalFieldsItem("ETag");
        public static BucketInventoryConfigurationOptionalFieldsItem IsMultipartUploaded { get; } = new BucketInventoryConfigurationOptionalFieldsItem("IsMultipartUploaded");
        public static BucketInventoryConfigurationOptionalFieldsItem ReplicationStatus { get; } = new BucketInventoryConfigurationOptionalFieldsItem("ReplicationStatus");
        public static BucketInventoryConfigurationOptionalFieldsItem EncryptionStatus { get; } = new BucketInventoryConfigurationOptionalFieldsItem("EncryptionStatus");
        public static BucketInventoryConfigurationOptionalFieldsItem ObjectLockRetainUntilDate { get; } = new BucketInventoryConfigurationOptionalFieldsItem("ObjectLockRetainUntilDate");
        public static BucketInventoryConfigurationOptionalFieldsItem ObjectLockMode { get; } = new BucketInventoryConfigurationOptionalFieldsItem("ObjectLockMode");
        public static BucketInventoryConfigurationOptionalFieldsItem ObjectLockLegalHoldStatus { get; } = new BucketInventoryConfigurationOptionalFieldsItem("ObjectLockLegalHoldStatus");
        public static BucketInventoryConfigurationOptionalFieldsItem IntelligentTieringAccessTier { get; } = new BucketInventoryConfigurationOptionalFieldsItem("IntelligentTieringAccessTier");
        public static BucketInventoryConfigurationOptionalFieldsItem BucketKeyStatus { get; } = new BucketInventoryConfigurationOptionalFieldsItem("BucketKeyStatus");

        public static bool operator ==(BucketInventoryConfigurationOptionalFieldsItem left, BucketInventoryConfigurationOptionalFieldsItem right) => left.Equals(right);
        public static bool operator !=(BucketInventoryConfigurationOptionalFieldsItem left, BucketInventoryConfigurationOptionalFieldsItem right) => !left.Equals(right);

        public static explicit operator string(BucketInventoryConfigurationOptionalFieldsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketInventoryConfigurationOptionalFieldsItem other && Equals(other);
        public bool Equals(BucketInventoryConfigurationOptionalFieldsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the schedule for generating inventory results.
    /// </summary>
    [EnumType]
    public readonly struct BucketInventoryConfigurationScheduleFrequency : IEquatable<BucketInventoryConfigurationScheduleFrequency>
    {
        private readonly string _value;

        private BucketInventoryConfigurationScheduleFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketInventoryConfigurationScheduleFrequency Daily { get; } = new BucketInventoryConfigurationScheduleFrequency("Daily");
        public static BucketInventoryConfigurationScheduleFrequency Weekly { get; } = new BucketInventoryConfigurationScheduleFrequency("Weekly");

        public static bool operator ==(BucketInventoryConfigurationScheduleFrequency left, BucketInventoryConfigurationScheduleFrequency right) => left.Equals(right);
        public static bool operator !=(BucketInventoryConfigurationScheduleFrequency left, BucketInventoryConfigurationScheduleFrequency right) => !left.Equals(right);

        public static explicit operator string(BucketInventoryConfigurationScheduleFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketInventoryConfigurationScheduleFrequency other && Equals(other);
        public bool Equals(BucketInventoryConfigurationScheduleFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BucketMetricsStatus : IEquatable<BucketMetricsStatus>
    {
        private readonly string _value;

        private BucketMetricsStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketMetricsStatus Disabled { get; } = new BucketMetricsStatus("Disabled");
        public static BucketMetricsStatus Enabled { get; } = new BucketMetricsStatus("Enabled");

        public static bool operator ==(BucketMetricsStatus left, BucketMetricsStatus right) => left.Equals(right);
        public static bool operator !=(BucketMetricsStatus left, BucketMetricsStatus right) => !left.Equals(right);

        public static explicit operator string(BucketMetricsStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketMetricsStatus other && Equals(other);
        public bool Equals(BucketMetricsStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The class of storage used to store the object.
    /// </summary>
    [EnumType]
    public readonly struct BucketNoncurrentVersionTransitionStorageClass : IEquatable<BucketNoncurrentVersionTransitionStorageClass>
    {
        private readonly string _value;

        private BucketNoncurrentVersionTransitionStorageClass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketNoncurrentVersionTransitionStorageClass DeepArchive { get; } = new BucketNoncurrentVersionTransitionStorageClass("DEEP_ARCHIVE");
        public static BucketNoncurrentVersionTransitionStorageClass Glacier { get; } = new BucketNoncurrentVersionTransitionStorageClass("GLACIER");
        public static BucketNoncurrentVersionTransitionStorageClass IntelligentTiering { get; } = new BucketNoncurrentVersionTransitionStorageClass("INTELLIGENT_TIERING");
        public static BucketNoncurrentVersionTransitionStorageClass OnezoneIa { get; } = new BucketNoncurrentVersionTransitionStorageClass("ONEZONE_IA");
        public static BucketNoncurrentVersionTransitionStorageClass StandardIa { get; } = new BucketNoncurrentVersionTransitionStorageClass("STANDARD_IA");

        public static bool operator ==(BucketNoncurrentVersionTransitionStorageClass left, BucketNoncurrentVersionTransitionStorageClass right) => left.Equals(right);
        public static bool operator !=(BucketNoncurrentVersionTransitionStorageClass left, BucketNoncurrentVersionTransitionStorageClass right) => !left.Equals(right);

        public static explicit operator string(BucketNoncurrentVersionTransitionStorageClass value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketNoncurrentVersionTransitionStorageClass other && Equals(other);
        public bool Equals(BucketNoncurrentVersionTransitionStorageClass other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies an object ownership rule.
    /// </summary>
    [EnumType]
    public readonly struct BucketOwnershipControlsRuleObjectOwnership : IEquatable<BucketOwnershipControlsRuleObjectOwnership>
    {
        private readonly string _value;

        private BucketOwnershipControlsRuleObjectOwnership(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketOwnershipControlsRuleObjectOwnership ObjectWriter { get; } = new BucketOwnershipControlsRuleObjectOwnership("ObjectWriter");
        public static BucketOwnershipControlsRuleObjectOwnership BucketOwnerPreferred { get; } = new BucketOwnershipControlsRuleObjectOwnership("BucketOwnerPreferred");

        public static bool operator ==(BucketOwnershipControlsRuleObjectOwnership left, BucketOwnershipControlsRuleObjectOwnership right) => left.Equals(right);
        public static bool operator !=(BucketOwnershipControlsRuleObjectOwnership left, BucketOwnershipControlsRuleObjectOwnership right) => !left.Equals(right);

        public static explicit operator string(BucketOwnershipControlsRuleObjectOwnership value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketOwnershipControlsRuleObjectOwnership other && Equals(other);
        public bool Equals(BucketOwnershipControlsRuleObjectOwnership other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
    /// </summary>
    [EnumType]
    public readonly struct BucketRedirectAllRequestsToProtocol : IEquatable<BucketRedirectAllRequestsToProtocol>
    {
        private readonly string _value;

        private BucketRedirectAllRequestsToProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketRedirectAllRequestsToProtocol Http { get; } = new BucketRedirectAllRequestsToProtocol("http");
        public static BucketRedirectAllRequestsToProtocol Https { get; } = new BucketRedirectAllRequestsToProtocol("https");

        public static bool operator ==(BucketRedirectAllRequestsToProtocol left, BucketRedirectAllRequestsToProtocol right) => left.Equals(right);
        public static bool operator !=(BucketRedirectAllRequestsToProtocol left, BucketRedirectAllRequestsToProtocol right) => !left.Equals(right);

        public static explicit operator string(BucketRedirectAllRequestsToProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketRedirectAllRequestsToProtocol other && Equals(other);
        public bool Equals(BucketRedirectAllRequestsToProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
    /// </summary>
    [EnumType]
    public readonly struct BucketRedirectRuleProtocol : IEquatable<BucketRedirectRuleProtocol>
    {
        private readonly string _value;

        private BucketRedirectRuleProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketRedirectRuleProtocol Http { get; } = new BucketRedirectRuleProtocol("http");
        public static BucketRedirectRuleProtocol Https { get; } = new BucketRedirectRuleProtocol("https");

        public static bool operator ==(BucketRedirectRuleProtocol left, BucketRedirectRuleProtocol right) => left.Equals(right);
        public static bool operator !=(BucketRedirectRuleProtocol left, BucketRedirectRuleProtocol right) => !left.Equals(right);

        public static explicit operator string(BucketRedirectRuleProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketRedirectRuleProtocol other && Equals(other);
        public bool Equals(BucketRedirectRuleProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether Amazon S3 replicates modifications on replicas.
    /// </summary>
    [EnumType]
    public readonly struct BucketReplicaModificationsStatus : IEquatable<BucketReplicaModificationsStatus>
    {
        private readonly string _value;

        private BucketReplicaModificationsStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketReplicaModificationsStatus Enabled { get; } = new BucketReplicaModificationsStatus("Enabled");
        public static BucketReplicaModificationsStatus Disabled { get; } = new BucketReplicaModificationsStatus("Disabled");

        public static bool operator ==(BucketReplicaModificationsStatus left, BucketReplicaModificationsStatus right) => left.Equals(right);
        public static bool operator !=(BucketReplicaModificationsStatus left, BucketReplicaModificationsStatus right) => !left.Equals(right);

        public static explicit operator string(BucketReplicaModificationsStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketReplicaModificationsStatus other && Equals(other);
        public bool Equals(BucketReplicaModificationsStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The storage class to use when replicating objects, such as S3 Standard or reduced redundancy.
    /// </summary>
    [EnumType]
    public readonly struct BucketReplicationDestinationStorageClass : IEquatable<BucketReplicationDestinationStorageClass>
    {
        private readonly string _value;

        private BucketReplicationDestinationStorageClass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketReplicationDestinationStorageClass DeepArchive { get; } = new BucketReplicationDestinationStorageClass("DEEP_ARCHIVE");
        public static BucketReplicationDestinationStorageClass Glacier { get; } = new BucketReplicationDestinationStorageClass("GLACIER");
        public static BucketReplicationDestinationStorageClass IntelligentTiering { get; } = new BucketReplicationDestinationStorageClass("INTELLIGENT_TIERING");
        public static BucketReplicationDestinationStorageClass OnezoneIa { get; } = new BucketReplicationDestinationStorageClass("ONEZONE_IA");
        public static BucketReplicationDestinationStorageClass ReducedRedundancy { get; } = new BucketReplicationDestinationStorageClass("REDUCED_REDUNDANCY");
        public static BucketReplicationDestinationStorageClass Standard { get; } = new BucketReplicationDestinationStorageClass("STANDARD");
        public static BucketReplicationDestinationStorageClass StandardIa { get; } = new BucketReplicationDestinationStorageClass("STANDARD_IA");

        public static bool operator ==(BucketReplicationDestinationStorageClass left, BucketReplicationDestinationStorageClass right) => left.Equals(right);
        public static bool operator !=(BucketReplicationDestinationStorageClass left, BucketReplicationDestinationStorageClass right) => !left.Equals(right);

        public static explicit operator string(BucketReplicationDestinationStorageClass value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketReplicationDestinationStorageClass other && Equals(other);
        public bool Equals(BucketReplicationDestinationStorageClass other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether the rule is enabled.
    /// </summary>
    [EnumType]
    public readonly struct BucketReplicationRuleStatus : IEquatable<BucketReplicationRuleStatus>
    {
        private readonly string _value;

        private BucketReplicationRuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketReplicationRuleStatus Disabled { get; } = new BucketReplicationRuleStatus("Disabled");
        public static BucketReplicationRuleStatus Enabled { get; } = new BucketReplicationRuleStatus("Enabled");

        public static bool operator ==(BucketReplicationRuleStatus left, BucketReplicationRuleStatus right) => left.Equals(right);
        public static bool operator !=(BucketReplicationRuleStatus left, BucketReplicationRuleStatus right) => !left.Equals(right);

        public static explicit operator string(BucketReplicationRuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketReplicationRuleStatus other && Equals(other);
        public bool Equals(BucketReplicationRuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BucketReplicationTimeStatus : IEquatable<BucketReplicationTimeStatus>
    {
        private readonly string _value;

        private BucketReplicationTimeStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketReplicationTimeStatus Disabled { get; } = new BucketReplicationTimeStatus("Disabled");
        public static BucketReplicationTimeStatus Enabled { get; } = new BucketReplicationTimeStatus("Enabled");

        public static bool operator ==(BucketReplicationTimeStatus left, BucketReplicationTimeStatus right) => left.Equals(right);
        public static bool operator !=(BucketReplicationTimeStatus left, BucketReplicationTimeStatus right) => !left.Equals(right);

        public static explicit operator string(BucketReplicationTimeStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketReplicationTimeStatus other && Equals(other);
        public bool Equals(BucketReplicationTimeStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BucketRuleStatus : IEquatable<BucketRuleStatus>
    {
        private readonly string _value;

        private BucketRuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketRuleStatus Enabled { get; } = new BucketRuleStatus("Enabled");
        public static BucketRuleStatus Disabled { get; } = new BucketRuleStatus("Disabled");

        public static bool operator ==(BucketRuleStatus left, BucketRuleStatus right) => left.Equals(right);
        public static bool operator !=(BucketRuleStatus left, BucketRuleStatus right) => !left.Equals(right);

        public static explicit operator string(BucketRuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketRuleStatus other && Equals(other);
        public bool Equals(BucketRuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BucketServerSideEncryptionByDefaultSSEAlgorithm : IEquatable<BucketServerSideEncryptionByDefaultSSEAlgorithm>
    {
        private readonly string _value;

        private BucketServerSideEncryptionByDefaultSSEAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketServerSideEncryptionByDefaultSSEAlgorithm Awskms { get; } = new BucketServerSideEncryptionByDefaultSSEAlgorithm("aws:kms");
        public static BucketServerSideEncryptionByDefaultSSEAlgorithm Aes256 { get; } = new BucketServerSideEncryptionByDefaultSSEAlgorithm("AES256");

        public static bool operator ==(BucketServerSideEncryptionByDefaultSSEAlgorithm left, BucketServerSideEncryptionByDefaultSSEAlgorithm right) => left.Equals(right);
        public static bool operator !=(BucketServerSideEncryptionByDefaultSSEAlgorithm left, BucketServerSideEncryptionByDefaultSSEAlgorithm right) => !left.Equals(right);

        public static explicit operator string(BucketServerSideEncryptionByDefaultSSEAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketServerSideEncryptionByDefaultSSEAlgorithm other && Equals(other);
        public bool Equals(BucketServerSideEncryptionByDefaultSSEAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether Amazon S3 replicates objects created with server-side encryption using a customer master key (CMK) stored in AWS Key Management Service.
    /// </summary>
    [EnumType]
    public readonly struct BucketSseKmsEncryptedObjectsStatus : IEquatable<BucketSseKmsEncryptedObjectsStatus>
    {
        private readonly string _value;

        private BucketSseKmsEncryptedObjectsStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketSseKmsEncryptedObjectsStatus Disabled { get; } = new BucketSseKmsEncryptedObjectsStatus("Disabled");
        public static BucketSseKmsEncryptedObjectsStatus Enabled { get; } = new BucketSseKmsEncryptedObjectsStatus("Enabled");

        public static bool operator ==(BucketSseKmsEncryptedObjectsStatus left, BucketSseKmsEncryptedObjectsStatus right) => left.Equals(right);
        public static bool operator !=(BucketSseKmsEncryptedObjectsStatus left, BucketSseKmsEncryptedObjectsStatus right) => !left.Equals(right);

        public static explicit operator string(BucketSseKmsEncryptedObjectsStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketSseKmsEncryptedObjectsStatus other && Equals(other);
        public bool Equals(BucketSseKmsEncryptedObjectsStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// S3 Intelligent-Tiering access tier. See Storage class for automatically optimizing frequently and infrequently accessed objects for a list of access tiers in the S3 Intelligent-Tiering storage class.
    /// </summary>
    [EnumType]
    public readonly struct BucketTieringAccessTier : IEquatable<BucketTieringAccessTier>
    {
        private readonly string _value;

        private BucketTieringAccessTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketTieringAccessTier ArchiveAccess { get; } = new BucketTieringAccessTier("ARCHIVE_ACCESS");
        public static BucketTieringAccessTier DeepArchiveAccess { get; } = new BucketTieringAccessTier("DEEP_ARCHIVE_ACCESS");

        public static bool operator ==(BucketTieringAccessTier left, BucketTieringAccessTier right) => left.Equals(right);
        public static bool operator !=(BucketTieringAccessTier left, BucketTieringAccessTier right) => !left.Equals(right);

        public static explicit operator string(BucketTieringAccessTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketTieringAccessTier other && Equals(other);
        public bool Equals(BucketTieringAccessTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BucketTransitionStorageClass : IEquatable<BucketTransitionStorageClass>
    {
        private readonly string _value;

        private BucketTransitionStorageClass(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketTransitionStorageClass DeepArchive { get; } = new BucketTransitionStorageClass("DEEP_ARCHIVE");
        public static BucketTransitionStorageClass Glacier { get; } = new BucketTransitionStorageClass("GLACIER");
        public static BucketTransitionStorageClass IntelligentTiering { get; } = new BucketTransitionStorageClass("INTELLIGENT_TIERING");
        public static BucketTransitionStorageClass OnezoneIa { get; } = new BucketTransitionStorageClass("ONEZONE_IA");
        public static BucketTransitionStorageClass StandardIa { get; } = new BucketTransitionStorageClass("STANDARD_IA");

        public static bool operator ==(BucketTransitionStorageClass left, BucketTransitionStorageClass right) => left.Equals(right);
        public static bool operator !=(BucketTransitionStorageClass left, BucketTransitionStorageClass right) => !left.Equals(right);

        public static explicit operator string(BucketTransitionStorageClass value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketTransitionStorageClass other && Equals(other);
        public bool Equals(BucketTransitionStorageClass other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The versioning state of the bucket.
    /// </summary>
    [EnumType]
    public readonly struct BucketVersioningConfigurationStatus : IEquatable<BucketVersioningConfigurationStatus>
    {
        private readonly string _value;

        private BucketVersioningConfigurationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BucketVersioningConfigurationStatus Enabled { get; } = new BucketVersioningConfigurationStatus("Enabled");
        public static BucketVersioningConfigurationStatus Suspended { get; } = new BucketVersioningConfigurationStatus("Suspended");

        public static bool operator ==(BucketVersioningConfigurationStatus left, BucketVersioningConfigurationStatus right) => left.Equals(right);
        public static bool operator !=(BucketVersioningConfigurationStatus left, BucketVersioningConfigurationStatus right) => !left.Equals(right);

        public static explicit operator string(BucketVersioningConfigurationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BucketVersioningConfigurationStatus other && Equals(other);
        public bool Equals(BucketVersioningConfigurationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether the policy is public or not.
    /// </summary>
    [EnumType]
    public readonly struct MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic : IEquatable<MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic>
    {
        private readonly string _value;

        private MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic True { get; } = new MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic("true");
        public static MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic False { get; } = new MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic("false");

        public static bool operator ==(MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic left, MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic right) => left.Equals(right);
        public static bool operator !=(MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic left, MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic right) => !left.Equals(right);

        public static explicit operator string(MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic other && Equals(other);
        public bool Equals(MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
    /// </summary>
    [EnumType]
    public readonly struct StorageLensS3BucketDestinationFormat : IEquatable<StorageLensS3BucketDestinationFormat>
    {
        private readonly string _value;

        private StorageLensS3BucketDestinationFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageLensS3BucketDestinationFormat Csv { get; } = new StorageLensS3BucketDestinationFormat("CSV");
        public static StorageLensS3BucketDestinationFormat Parquet { get; } = new StorageLensS3BucketDestinationFormat("Parquet");

        public static bool operator ==(StorageLensS3BucketDestinationFormat left, StorageLensS3BucketDestinationFormat right) => left.Equals(right);
        public static bool operator !=(StorageLensS3BucketDestinationFormat left, StorageLensS3BucketDestinationFormat right) => !left.Equals(right);

        public static explicit operator string(StorageLensS3BucketDestinationFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageLensS3BucketDestinationFormat other && Equals(other);
        public bool Equals(StorageLensS3BucketDestinationFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
    /// </summary>
    [EnumType]
    public readonly struct StorageLensS3BucketDestinationOutputSchemaVersion : IEquatable<StorageLensS3BucketDestinationOutputSchemaVersion>
    {
        private readonly string _value;

        private StorageLensS3BucketDestinationOutputSchemaVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageLensS3BucketDestinationOutputSchemaVersion V1 { get; } = new StorageLensS3BucketDestinationOutputSchemaVersion("V_1");

        public static bool operator ==(StorageLensS3BucketDestinationOutputSchemaVersion left, StorageLensS3BucketDestinationOutputSchemaVersion right) => left.Equals(right);
        public static bool operator !=(StorageLensS3BucketDestinationOutputSchemaVersion left, StorageLensS3BucketDestinationOutputSchemaVersion right) => !left.Equals(right);

        public static explicit operator string(StorageLensS3BucketDestinationOutputSchemaVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageLensS3BucketDestinationOutputSchemaVersion other && Equals(other);
        public bool Equals(StorageLensS3BucketDestinationOutputSchemaVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
