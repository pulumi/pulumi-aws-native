// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.NetworkFirewall
{
    /// <summary>
    /// An analysis type.
    /// </summary>
    [EnumType]
    public readonly struct FirewallEnabledAnalysisType : IEquatable<FirewallEnabledAnalysisType>
    {
        private readonly string _value;

        private FirewallEnabledAnalysisType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallEnabledAnalysisType TlsSni { get; } = new FirewallEnabledAnalysisType("TLS_SNI");
        public static FirewallEnabledAnalysisType HttpHost { get; } = new FirewallEnabledAnalysisType("HTTP_HOST");

        public static bool operator ==(FirewallEnabledAnalysisType left, FirewallEnabledAnalysisType right) => left.Equals(right);
        public static bool operator !=(FirewallEnabledAnalysisType left, FirewallEnabledAnalysisType right) => !left.Equals(right);

        public static explicit operator string(FirewallEnabledAnalysisType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallEnabledAnalysisType other && Equals(other);
        public bool Equals(FirewallEnabledAnalysisType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FirewallPolicyOverrideAction : IEquatable<FirewallPolicyOverrideAction>
    {
        private readonly string _value;

        private FirewallPolicyOverrideAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyOverrideAction DropToAlert { get; } = new FirewallPolicyOverrideAction("DROP_TO_ALERT");

        public static bool operator ==(FirewallPolicyOverrideAction left, FirewallPolicyOverrideAction right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyOverrideAction left, FirewallPolicyOverrideAction right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyOverrideAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyOverrideAction other && Equals(other);
        public bool Equals(FirewallPolicyOverrideAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FirewallPolicyRuleOrder : IEquatable<FirewallPolicyRuleOrder>
    {
        private readonly string _value;

        private FirewallPolicyRuleOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyRuleOrder DefaultActionOrder { get; } = new FirewallPolicyRuleOrder("DEFAULT_ACTION_ORDER");
        public static FirewallPolicyRuleOrder StrictOrder { get; } = new FirewallPolicyRuleOrder("STRICT_ORDER");

        public static bool operator ==(FirewallPolicyRuleOrder left, FirewallPolicyRuleOrder right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyRuleOrder left, FirewallPolicyRuleOrder right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyRuleOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyRuleOrder other && Equals(other);
        public bool Equals(FirewallPolicyRuleOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FirewallPolicyStreamExceptionPolicy : IEquatable<FirewallPolicyStreamExceptionPolicy>
    {
        private readonly string _value;

        private FirewallPolicyStreamExceptionPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FirewallPolicyStreamExceptionPolicy Drop { get; } = new FirewallPolicyStreamExceptionPolicy("DROP");
        public static FirewallPolicyStreamExceptionPolicy Continue { get; } = new FirewallPolicyStreamExceptionPolicy("CONTINUE");
        public static FirewallPolicyStreamExceptionPolicy Reject { get; } = new FirewallPolicyStreamExceptionPolicy("REJECT");

        public static bool operator ==(FirewallPolicyStreamExceptionPolicy left, FirewallPolicyStreamExceptionPolicy right) => left.Equals(right);
        public static bool operator !=(FirewallPolicyStreamExceptionPolicy left, FirewallPolicyStreamExceptionPolicy right) => !left.Equals(right);

        public static explicit operator string(FirewallPolicyStreamExceptionPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FirewallPolicyStreamExceptionPolicy other && Equals(other);
        public bool Equals(FirewallPolicyStreamExceptionPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of storage destination to send these logs to. You can send logs to an Amazon S3 bucket, a CloudWatch log group, or a Firehose delivery stream.
    /// </summary>
    [EnumType]
    public readonly struct LoggingConfigurationLogDestinationConfigLogDestinationType : IEquatable<LoggingConfigurationLogDestinationConfigLogDestinationType>
    {
        private readonly string _value;

        private LoggingConfigurationLogDestinationConfigLogDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoggingConfigurationLogDestinationConfigLogDestinationType S3 { get; } = new LoggingConfigurationLogDestinationConfigLogDestinationType("S3");
        public static LoggingConfigurationLogDestinationConfigLogDestinationType CloudWatchLogs { get; } = new LoggingConfigurationLogDestinationConfigLogDestinationType("CloudWatchLogs");
        public static LoggingConfigurationLogDestinationConfigLogDestinationType KinesisDataFirehose { get; } = new LoggingConfigurationLogDestinationConfigLogDestinationType("KinesisDataFirehose");

        public static bool operator ==(LoggingConfigurationLogDestinationConfigLogDestinationType left, LoggingConfigurationLogDestinationConfigLogDestinationType right) => left.Equals(right);
        public static bool operator !=(LoggingConfigurationLogDestinationConfigLogDestinationType left, LoggingConfigurationLogDestinationConfigLogDestinationType right) => !left.Equals(right);

        public static explicit operator string(LoggingConfigurationLogDestinationConfigLogDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoggingConfigurationLogDestinationConfigLogDestinationType other && Equals(other);
        public bool Equals(LoggingConfigurationLogDestinationConfigLogDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of log to record. You can record the following types of logs from your Network Firewall stateful engine.
    /// 
    /// - `ALERT` - Logs for traffic that matches your stateful rules and that have an action that sends an alert. A stateful rule sends alerts for the rule actions DROP, ALERT, and REJECT. For more information, see the `StatefulRule` property.
    /// - `FLOW` - Standard network traffic flow logs. The stateful rules engine records flow logs for all network traffic that it receives. Each flow log record captures the network flow for a specific standard stateless rule group.
    /// - `TLS` - Logs for events that are related to TLS inspection. For more information, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-configurations.html) in the *Network Firewall Developer Guide* .
    /// </summary>
    [EnumType]
    public readonly struct LoggingConfigurationLogDestinationConfigLogType : IEquatable<LoggingConfigurationLogDestinationConfigLogType>
    {
        private readonly string _value;

        private LoggingConfigurationLogDestinationConfigLogType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LoggingConfigurationLogDestinationConfigLogType Alert { get; } = new LoggingConfigurationLogDestinationConfigLogType("ALERT");
        public static LoggingConfigurationLogDestinationConfigLogType Flow { get; } = new LoggingConfigurationLogDestinationConfigLogType("FLOW");
        public static LoggingConfigurationLogDestinationConfigLogType Tls { get; } = new LoggingConfigurationLogDestinationConfigLogType("TLS");

        public static bool operator ==(LoggingConfigurationLogDestinationConfigLogType left, LoggingConfigurationLogDestinationConfigLogType right) => left.Equals(right);
        public static bool operator !=(LoggingConfigurationLogDestinationConfigLogType left, LoggingConfigurationLogDestinationConfigLogType right) => !left.Equals(right);

        public static explicit operator string(LoggingConfigurationLogDestinationConfigLogType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LoggingConfigurationLogDestinationConfigLogType other && Equals(other);
        public bool Equals(LoggingConfigurationLogDestinationConfigLogType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RuleGroupGeneratedRulesType : IEquatable<RuleGroupGeneratedRulesType>
    {
        private readonly string _value;

        private RuleGroupGeneratedRulesType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleGroupGeneratedRulesType Allowlist { get; } = new RuleGroupGeneratedRulesType("ALLOWLIST");
        public static RuleGroupGeneratedRulesType Denylist { get; } = new RuleGroupGeneratedRulesType("DENYLIST");

        public static bool operator ==(RuleGroupGeneratedRulesType left, RuleGroupGeneratedRulesType right) => left.Equals(right);
        public static bool operator !=(RuleGroupGeneratedRulesType left, RuleGroupGeneratedRulesType right) => !left.Equals(right);

        public static explicit operator string(RuleGroupGeneratedRulesType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleGroupGeneratedRulesType other && Equals(other);
        public bool Equals(RuleGroupGeneratedRulesType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The direction of traffic flow to inspect. If set to `ANY` , the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to `FORWARD` , the inspection only matches traffic going from the source to the destination.
    /// </summary>
    [EnumType]
    public readonly struct RuleGroupHeaderDirection : IEquatable<RuleGroupHeaderDirection>
    {
        private readonly string _value;

        private RuleGroupHeaderDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleGroupHeaderDirection Forward { get; } = new RuleGroupHeaderDirection("FORWARD");
        public static RuleGroupHeaderDirection Any { get; } = new RuleGroupHeaderDirection("ANY");

        public static bool operator ==(RuleGroupHeaderDirection left, RuleGroupHeaderDirection right) => left.Equals(right);
        public static bool operator !=(RuleGroupHeaderDirection left, RuleGroupHeaderDirection right) => !left.Equals(right);

        public static explicit operator string(RuleGroupHeaderDirection value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleGroupHeaderDirection other && Equals(other);
        public bool Equals(RuleGroupHeaderDirection other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The protocol to inspect for. To specify all, you can use `IP` , because all traffic on AWS and on the internet is IP.
    /// </summary>
    [EnumType]
    public readonly struct RuleGroupHeaderProtocol : IEquatable<RuleGroupHeaderProtocol>
    {
        private readonly string _value;

        private RuleGroupHeaderProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleGroupHeaderProtocol Ip { get; } = new RuleGroupHeaderProtocol("IP");
        public static RuleGroupHeaderProtocol Tcp { get; } = new RuleGroupHeaderProtocol("TCP");
        public static RuleGroupHeaderProtocol Udp { get; } = new RuleGroupHeaderProtocol("UDP");
        public static RuleGroupHeaderProtocol Icmp { get; } = new RuleGroupHeaderProtocol("ICMP");
        public static RuleGroupHeaderProtocol Http { get; } = new RuleGroupHeaderProtocol("HTTP");
        public static RuleGroupHeaderProtocol Ftp { get; } = new RuleGroupHeaderProtocol("FTP");
        public static RuleGroupHeaderProtocol Tls { get; } = new RuleGroupHeaderProtocol("TLS");
        public static RuleGroupHeaderProtocol Smb { get; } = new RuleGroupHeaderProtocol("SMB");
        public static RuleGroupHeaderProtocol Dns { get; } = new RuleGroupHeaderProtocol("DNS");
        public static RuleGroupHeaderProtocol Dcerpc { get; } = new RuleGroupHeaderProtocol("DCERPC");
        public static RuleGroupHeaderProtocol Ssh { get; } = new RuleGroupHeaderProtocol("SSH");
        public static RuleGroupHeaderProtocol Smtp { get; } = new RuleGroupHeaderProtocol("SMTP");
        public static RuleGroupHeaderProtocol Imap { get; } = new RuleGroupHeaderProtocol("IMAP");
        public static RuleGroupHeaderProtocol Msn { get; } = new RuleGroupHeaderProtocol("MSN");
        public static RuleGroupHeaderProtocol Krb5 { get; } = new RuleGroupHeaderProtocol("KRB5");
        public static RuleGroupHeaderProtocol Ikev2 { get; } = new RuleGroupHeaderProtocol("IKEV2");
        public static RuleGroupHeaderProtocol Tftp { get; } = new RuleGroupHeaderProtocol("TFTP");
        public static RuleGroupHeaderProtocol Ntp { get; } = new RuleGroupHeaderProtocol("NTP");
        public static RuleGroupHeaderProtocol Dhcp { get; } = new RuleGroupHeaderProtocol("DHCP");

        public static bool operator ==(RuleGroupHeaderProtocol left, RuleGroupHeaderProtocol right) => left.Equals(right);
        public static bool operator !=(RuleGroupHeaderProtocol left, RuleGroupHeaderProtocol right) => !left.Equals(right);

        public static explicit operator string(RuleGroupHeaderProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleGroupHeaderProtocol other && Equals(other);
        public bool Equals(RuleGroupHeaderProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RuleGroupRuleOrder : IEquatable<RuleGroupRuleOrder>
    {
        private readonly string _value;

        private RuleGroupRuleOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleGroupRuleOrder DefaultActionOrder { get; } = new RuleGroupRuleOrder("DEFAULT_ACTION_ORDER");
        public static RuleGroupRuleOrder StrictOrder { get; } = new RuleGroupRuleOrder("STRICT_ORDER");

        public static bool operator ==(RuleGroupRuleOrder left, RuleGroupRuleOrder right) => left.Equals(right);
        public static bool operator !=(RuleGroupRuleOrder left, RuleGroupRuleOrder right) => !left.Equals(right);

        public static explicit operator string(RuleGroupRuleOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleGroupRuleOrder other && Equals(other);
        public bool Equals(RuleGroupRuleOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow.
    /// 
    /// The actions for a stateful rule are defined as follows:
    /// 
    /// - *PASS* - Permits the packets to go to the intended destination.
    /// - *DROP* - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the firewall logging configuration.
    /// - *REJECT* - Drops traffic that matches the conditions of the stateful rule and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a `RST` bit contained in the TCP header flags. `REJECT` is available only for TCP traffic.
    /// - *ALERT* - Permits the packets to go to the intended destination and sends an alert log message, if alert logging is configured in the firewall logging configuration.
    /// 
    /// You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with `ALERT` action, verify in the logs that the rule is filtering as you want, then change the action to `DROP` .
    /// - *REJECT* - Drops TCP traffic that matches the conditions of the stateful rule, and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a `RST` bit contained in the TCP header flags. Also sends an alert log mesage if alert logging is configured in the firewall logging configuration.
    /// 
    /// `REJECT` isn't currently available for use with IMAP and FTP protocols.
    /// </summary>
    [EnumType]
    public readonly struct RuleGroupStatefulRuleAction : IEquatable<RuleGroupStatefulRuleAction>
    {
        private readonly string _value;

        private RuleGroupStatefulRuleAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleGroupStatefulRuleAction Pass { get; } = new RuleGroupStatefulRuleAction("PASS");
        public static RuleGroupStatefulRuleAction Drop { get; } = new RuleGroupStatefulRuleAction("DROP");
        public static RuleGroupStatefulRuleAction Alert { get; } = new RuleGroupStatefulRuleAction("ALERT");
        public static RuleGroupStatefulRuleAction Reject { get; } = new RuleGroupStatefulRuleAction("REJECT");

        public static bool operator ==(RuleGroupStatefulRuleAction left, RuleGroupStatefulRuleAction right) => left.Equals(right);
        public static bool operator !=(RuleGroupStatefulRuleAction left, RuleGroupStatefulRuleAction right) => !left.Equals(right);

        public static explicit operator string(RuleGroupStatefulRuleAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleGroupStatefulRuleAction other && Equals(other);
        public bool Equals(RuleGroupStatefulRuleAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RuleGroupSummaryRuleOption : IEquatable<RuleGroupSummaryRuleOption>
    {
        private readonly string _value;

        private RuleGroupSummaryRuleOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleGroupSummaryRuleOption Sid { get; } = new RuleGroupSummaryRuleOption("SID");
        public static RuleGroupSummaryRuleOption Msg { get; } = new RuleGroupSummaryRuleOption("MSG");
        public static RuleGroupSummaryRuleOption Metadata { get; } = new RuleGroupSummaryRuleOption("METADATA");

        public static bool operator ==(RuleGroupSummaryRuleOption left, RuleGroupSummaryRuleOption right) => left.Equals(right);
        public static bool operator !=(RuleGroupSummaryRuleOption left, RuleGroupSummaryRuleOption right) => !left.Equals(right);

        public static explicit operator string(RuleGroupSummaryRuleOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleGroupSummaryRuleOption other && Equals(other);
        public bool Equals(RuleGroupSummaryRuleOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RuleGroupTargetType : IEquatable<RuleGroupTargetType>
    {
        private readonly string _value;

        private RuleGroupTargetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleGroupTargetType TlsSni { get; } = new RuleGroupTargetType("TLS_SNI");
        public static RuleGroupTargetType HttpHost { get; } = new RuleGroupTargetType("HTTP_HOST");

        public static bool operator ==(RuleGroupTargetType left, RuleGroupTargetType right) => left.Equals(right);
        public static bool operator !=(RuleGroupTargetType left, RuleGroupTargetType right) => !left.Equals(right);

        public static explicit operator string(RuleGroupTargetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleGroupTargetType other && Equals(other);
        public bool Equals(RuleGroupTargetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RuleGroupTcpFlag : IEquatable<RuleGroupTcpFlag>
    {
        private readonly string _value;

        private RuleGroupTcpFlag(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleGroupTcpFlag Fin { get; } = new RuleGroupTcpFlag("FIN");
        public static RuleGroupTcpFlag Syn { get; } = new RuleGroupTcpFlag("SYN");
        public static RuleGroupTcpFlag Rst { get; } = new RuleGroupTcpFlag("RST");
        public static RuleGroupTcpFlag Psh { get; } = new RuleGroupTcpFlag("PSH");
        public static RuleGroupTcpFlag Ack { get; } = new RuleGroupTcpFlag("ACK");
        public static RuleGroupTcpFlag Urg { get; } = new RuleGroupTcpFlag("URG");
        public static RuleGroupTcpFlag Ece { get; } = new RuleGroupTcpFlag("ECE");
        public static RuleGroupTcpFlag Cwr { get; } = new RuleGroupTcpFlag("CWR");

        public static bool operator ==(RuleGroupTcpFlag left, RuleGroupTcpFlag right) => left.Equals(right);
        public static bool operator !=(RuleGroupTcpFlag left, RuleGroupTcpFlag right) => !left.Equals(right);

        public static explicit operator string(RuleGroupTcpFlag value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleGroupTcpFlag other && Equals(other);
        public bool Equals(RuleGroupTcpFlag other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains
    /// stateless rules. If it is stateful, it contains stateful rules.
    /// </summary>
    [EnumType]
    public readonly struct RuleGroupTypeEnum : IEquatable<RuleGroupTypeEnum>
    {
        private readonly string _value;

        private RuleGroupTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RuleGroupTypeEnum Stateless { get; } = new RuleGroupTypeEnum("STATELESS");
        public static RuleGroupTypeEnum Stateful { get; } = new RuleGroupTypeEnum("STATEFUL");

        public static bool operator ==(RuleGroupTypeEnum left, RuleGroupTypeEnum right) => left.Equals(right);
        public static bool operator !=(RuleGroupTypeEnum left, RuleGroupTypeEnum right) => !left.Equals(right);

        public static explicit operator string(RuleGroupTypeEnum value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RuleGroupTypeEnum other && Equals(other);
        public bool Equals(RuleGroupTypeEnum other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TlsInspectionConfigurationRevokedStatusAction : IEquatable<TlsInspectionConfigurationRevokedStatusAction>
    {
        private readonly string _value;

        private TlsInspectionConfigurationRevokedStatusAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TlsInspectionConfigurationRevokedStatusAction Pass { get; } = new TlsInspectionConfigurationRevokedStatusAction("PASS");
        public static TlsInspectionConfigurationRevokedStatusAction Drop { get; } = new TlsInspectionConfigurationRevokedStatusAction("DROP");
        public static TlsInspectionConfigurationRevokedStatusAction Reject { get; } = new TlsInspectionConfigurationRevokedStatusAction("REJECT");

        public static bool operator ==(TlsInspectionConfigurationRevokedStatusAction left, TlsInspectionConfigurationRevokedStatusAction right) => left.Equals(right);
        public static bool operator !=(TlsInspectionConfigurationRevokedStatusAction left, TlsInspectionConfigurationRevokedStatusAction right) => !left.Equals(right);

        public static explicit operator string(TlsInspectionConfigurationRevokedStatusAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TlsInspectionConfigurationRevokedStatusAction other && Equals(other);
        public bool Equals(TlsInspectionConfigurationRevokedStatusAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TlsInspectionConfigurationUnknownStatusAction : IEquatable<TlsInspectionConfigurationUnknownStatusAction>
    {
        private readonly string _value;

        private TlsInspectionConfigurationUnknownStatusAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TlsInspectionConfigurationUnknownStatusAction Pass { get; } = new TlsInspectionConfigurationUnknownStatusAction("PASS");
        public static TlsInspectionConfigurationUnknownStatusAction Drop { get; } = new TlsInspectionConfigurationUnknownStatusAction("DROP");
        public static TlsInspectionConfigurationUnknownStatusAction Reject { get; } = new TlsInspectionConfigurationUnknownStatusAction("REJECT");

        public static bool operator ==(TlsInspectionConfigurationUnknownStatusAction left, TlsInspectionConfigurationUnknownStatusAction right) => left.Equals(right);
        public static bool operator !=(TlsInspectionConfigurationUnknownStatusAction left, TlsInspectionConfigurationUnknownStatusAction right) => !left.Equals(right);

        public static explicit operator string(TlsInspectionConfigurationUnknownStatusAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TlsInspectionConfigurationUnknownStatusAction other && Equals(other);
        public bool Equals(TlsInspectionConfigurationUnknownStatusAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
