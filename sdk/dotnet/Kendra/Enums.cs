// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Kendra
{
    [EnumType]
    public readonly struct DataSourceConfluenceAttachmentFieldName : IEquatable<DataSourceConfluenceAttachmentFieldName>
    {
        private readonly string _value;

        private DataSourceConfluenceAttachmentFieldName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceConfluenceAttachmentFieldName Author { get; } = new DataSourceConfluenceAttachmentFieldName("AUTHOR");
        public static DataSourceConfluenceAttachmentFieldName ContentType { get; } = new DataSourceConfluenceAttachmentFieldName("CONTENT_TYPE");
        public static DataSourceConfluenceAttachmentFieldName CreatedDate { get; } = new DataSourceConfluenceAttachmentFieldName("CREATED_DATE");
        public static DataSourceConfluenceAttachmentFieldName DisplayUrl { get; } = new DataSourceConfluenceAttachmentFieldName("DISPLAY_URL");
        public static DataSourceConfluenceAttachmentFieldName FileSize { get; } = new DataSourceConfluenceAttachmentFieldName("FILE_SIZE");
        public static DataSourceConfluenceAttachmentFieldName ItemType { get; } = new DataSourceConfluenceAttachmentFieldName("ITEM_TYPE");
        public static DataSourceConfluenceAttachmentFieldName ParentId { get; } = new DataSourceConfluenceAttachmentFieldName("PARENT_ID");
        public static DataSourceConfluenceAttachmentFieldName SpaceKey { get; } = new DataSourceConfluenceAttachmentFieldName("SPACE_KEY");
        public static DataSourceConfluenceAttachmentFieldName SpaceName { get; } = new DataSourceConfluenceAttachmentFieldName("SPACE_NAME");
        public static DataSourceConfluenceAttachmentFieldName Url { get; } = new DataSourceConfluenceAttachmentFieldName("URL");
        public static DataSourceConfluenceAttachmentFieldName Version { get; } = new DataSourceConfluenceAttachmentFieldName("VERSION");

        public static bool operator ==(DataSourceConfluenceAttachmentFieldName left, DataSourceConfluenceAttachmentFieldName right) => left.Equals(right);
        public static bool operator !=(DataSourceConfluenceAttachmentFieldName left, DataSourceConfluenceAttachmentFieldName right) => !left.Equals(right);

        public static explicit operator string(DataSourceConfluenceAttachmentFieldName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceConfluenceAttachmentFieldName other && Equals(other);
        public bool Equals(DataSourceConfluenceAttachmentFieldName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceConfluenceBlogFieldName : IEquatable<DataSourceConfluenceBlogFieldName>
    {
        private readonly string _value;

        private DataSourceConfluenceBlogFieldName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceConfluenceBlogFieldName Author { get; } = new DataSourceConfluenceBlogFieldName("AUTHOR");
        public static DataSourceConfluenceBlogFieldName DisplayUrl { get; } = new DataSourceConfluenceBlogFieldName("DISPLAY_URL");
        public static DataSourceConfluenceBlogFieldName ItemType { get; } = new DataSourceConfluenceBlogFieldName("ITEM_TYPE");
        public static DataSourceConfluenceBlogFieldName Labels { get; } = new DataSourceConfluenceBlogFieldName("LABELS");
        public static DataSourceConfluenceBlogFieldName PublishDate { get; } = new DataSourceConfluenceBlogFieldName("PUBLISH_DATE");
        public static DataSourceConfluenceBlogFieldName SpaceKey { get; } = new DataSourceConfluenceBlogFieldName("SPACE_KEY");
        public static DataSourceConfluenceBlogFieldName SpaceName { get; } = new DataSourceConfluenceBlogFieldName("SPACE_NAME");
        public static DataSourceConfluenceBlogFieldName Url { get; } = new DataSourceConfluenceBlogFieldName("URL");
        public static DataSourceConfluenceBlogFieldName Version { get; } = new DataSourceConfluenceBlogFieldName("VERSION");

        public static bool operator ==(DataSourceConfluenceBlogFieldName left, DataSourceConfluenceBlogFieldName right) => left.Equals(right);
        public static bool operator !=(DataSourceConfluenceBlogFieldName left, DataSourceConfluenceBlogFieldName right) => !left.Equals(right);

        public static explicit operator string(DataSourceConfluenceBlogFieldName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceConfluenceBlogFieldName other && Equals(other);
        public bool Equals(DataSourceConfluenceBlogFieldName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceConfluencePageFieldName : IEquatable<DataSourceConfluencePageFieldName>
    {
        private readonly string _value;

        private DataSourceConfluencePageFieldName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceConfluencePageFieldName Author { get; } = new DataSourceConfluencePageFieldName("AUTHOR");
        public static DataSourceConfluencePageFieldName ContentStatus { get; } = new DataSourceConfluencePageFieldName("CONTENT_STATUS");
        public static DataSourceConfluencePageFieldName CreatedDate { get; } = new DataSourceConfluencePageFieldName("CREATED_DATE");
        public static DataSourceConfluencePageFieldName DisplayUrl { get; } = new DataSourceConfluencePageFieldName("DISPLAY_URL");
        public static DataSourceConfluencePageFieldName ItemType { get; } = new DataSourceConfluencePageFieldName("ITEM_TYPE");
        public static DataSourceConfluencePageFieldName Labels { get; } = new DataSourceConfluencePageFieldName("LABELS");
        public static DataSourceConfluencePageFieldName ModifiedDate { get; } = new DataSourceConfluencePageFieldName("MODIFIED_DATE");
        public static DataSourceConfluencePageFieldName ParentId { get; } = new DataSourceConfluencePageFieldName("PARENT_ID");
        public static DataSourceConfluencePageFieldName SpaceKey { get; } = new DataSourceConfluencePageFieldName("SPACE_KEY");
        public static DataSourceConfluencePageFieldName SpaceName { get; } = new DataSourceConfluencePageFieldName("SPACE_NAME");
        public static DataSourceConfluencePageFieldName Url { get; } = new DataSourceConfluencePageFieldName("URL");
        public static DataSourceConfluencePageFieldName Version { get; } = new DataSourceConfluencePageFieldName("VERSION");

        public static bool operator ==(DataSourceConfluencePageFieldName left, DataSourceConfluencePageFieldName right) => left.Equals(right);
        public static bool operator !=(DataSourceConfluencePageFieldName left, DataSourceConfluencePageFieldName right) => !left.Equals(right);

        public static explicit operator string(DataSourceConfluencePageFieldName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceConfluencePageFieldName other && Equals(other);
        public bool Equals(DataSourceConfluencePageFieldName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceConfluenceSpaceFieldName : IEquatable<DataSourceConfluenceSpaceFieldName>
    {
        private readonly string _value;

        private DataSourceConfluenceSpaceFieldName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceConfluenceSpaceFieldName DisplayUrl { get; } = new DataSourceConfluenceSpaceFieldName("DISPLAY_URL");
        public static DataSourceConfluenceSpaceFieldName ItemType { get; } = new DataSourceConfluenceSpaceFieldName("ITEM_TYPE");
        public static DataSourceConfluenceSpaceFieldName SpaceKey { get; } = new DataSourceConfluenceSpaceFieldName("SPACE_KEY");
        public static DataSourceConfluenceSpaceFieldName Url { get; } = new DataSourceConfluenceSpaceFieldName("URL");

        public static bool operator ==(DataSourceConfluenceSpaceFieldName left, DataSourceConfluenceSpaceFieldName right) => left.Equals(right);
        public static bool operator !=(DataSourceConfluenceSpaceFieldName left, DataSourceConfluenceSpaceFieldName right) => !left.Equals(right);

        public static explicit operator string(DataSourceConfluenceSpaceFieldName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceConfluenceSpaceFieldName other && Equals(other);
        public bool Equals(DataSourceConfluenceSpaceFieldName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceConfluenceVersion : IEquatable<DataSourceConfluenceVersion>
    {
        private readonly string _value;

        private DataSourceConfluenceVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceConfluenceVersion Cloud { get; } = new DataSourceConfluenceVersion("CLOUD");
        public static DataSourceConfluenceVersion Server { get; } = new DataSourceConfluenceVersion("SERVER");

        public static bool operator ==(DataSourceConfluenceVersion left, DataSourceConfluenceVersion right) => left.Equals(right);
        public static bool operator !=(DataSourceConfluenceVersion left, DataSourceConfluenceVersion right) => !left.Equals(right);

        public static explicit operator string(DataSourceConfluenceVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceConfluenceVersion other && Equals(other);
        public bool Equals(DataSourceConfluenceVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceDatabaseEngineType : IEquatable<DataSourceDatabaseEngineType>
    {
        private readonly string _value;

        private DataSourceDatabaseEngineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceDatabaseEngineType RdsAuroraMysql { get; } = new DataSourceDatabaseEngineType("RDS_AURORA_MYSQL");
        public static DataSourceDatabaseEngineType RdsAuroraPostgresql { get; } = new DataSourceDatabaseEngineType("RDS_AURORA_POSTGRESQL");
        public static DataSourceDatabaseEngineType RdsMysql { get; } = new DataSourceDatabaseEngineType("RDS_MYSQL");
        public static DataSourceDatabaseEngineType RdsPostgresql { get; } = new DataSourceDatabaseEngineType("RDS_POSTGRESQL");

        public static bool operator ==(DataSourceDatabaseEngineType left, DataSourceDatabaseEngineType right) => left.Equals(right);
        public static bool operator !=(DataSourceDatabaseEngineType left, DataSourceDatabaseEngineType right) => !left.Equals(right);

        public static explicit operator string(DataSourceDatabaseEngineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceDatabaseEngineType other && Equals(other);
        public bool Equals(DataSourceDatabaseEngineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceQueryIdentifiersEnclosingOption : IEquatable<DataSourceQueryIdentifiersEnclosingOption>
    {
        private readonly string _value;

        private DataSourceQueryIdentifiersEnclosingOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceQueryIdentifiersEnclosingOption DoubleQuotes { get; } = new DataSourceQueryIdentifiersEnclosingOption("DOUBLE_QUOTES");
        public static DataSourceQueryIdentifiersEnclosingOption None { get; } = new DataSourceQueryIdentifiersEnclosingOption("NONE");

        public static bool operator ==(DataSourceQueryIdentifiersEnclosingOption left, DataSourceQueryIdentifiersEnclosingOption right) => left.Equals(right);
        public static bool operator !=(DataSourceQueryIdentifiersEnclosingOption left, DataSourceQueryIdentifiersEnclosingOption right) => !left.Equals(right);

        public static explicit operator string(DataSourceQueryIdentifiersEnclosingOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceQueryIdentifiersEnclosingOption other && Equals(other);
        public bool Equals(DataSourceQueryIdentifiersEnclosingOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceSalesforceChatterFeedIncludeFilterType : IEquatable<DataSourceSalesforceChatterFeedIncludeFilterType>
    {
        private readonly string _value;

        private DataSourceSalesforceChatterFeedIncludeFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceSalesforceChatterFeedIncludeFilterType ActiveUser { get; } = new DataSourceSalesforceChatterFeedIncludeFilterType("ACTIVE_USER");
        public static DataSourceSalesforceChatterFeedIncludeFilterType StandardUser { get; } = new DataSourceSalesforceChatterFeedIncludeFilterType("STANDARD_USER");

        public static bool operator ==(DataSourceSalesforceChatterFeedIncludeFilterType left, DataSourceSalesforceChatterFeedIncludeFilterType right) => left.Equals(right);
        public static bool operator !=(DataSourceSalesforceChatterFeedIncludeFilterType left, DataSourceSalesforceChatterFeedIncludeFilterType right) => !left.Equals(right);

        public static explicit operator string(DataSourceSalesforceChatterFeedIncludeFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceSalesforceChatterFeedIncludeFilterType other && Equals(other);
        public bool Equals(DataSourceSalesforceChatterFeedIncludeFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceSalesforceKnowledgeArticleState : IEquatable<DataSourceSalesforceKnowledgeArticleState>
    {
        private readonly string _value;

        private DataSourceSalesforceKnowledgeArticleState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceSalesforceKnowledgeArticleState Draft { get; } = new DataSourceSalesforceKnowledgeArticleState("DRAFT");
        public static DataSourceSalesforceKnowledgeArticleState Published { get; } = new DataSourceSalesforceKnowledgeArticleState("PUBLISHED");
        public static DataSourceSalesforceKnowledgeArticleState Archived { get; } = new DataSourceSalesforceKnowledgeArticleState("ARCHIVED");

        public static bool operator ==(DataSourceSalesforceKnowledgeArticleState left, DataSourceSalesforceKnowledgeArticleState right) => left.Equals(right);
        public static bool operator !=(DataSourceSalesforceKnowledgeArticleState left, DataSourceSalesforceKnowledgeArticleState right) => !left.Equals(right);

        public static explicit operator string(DataSourceSalesforceKnowledgeArticleState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceSalesforceKnowledgeArticleState other && Equals(other);
        public bool Equals(DataSourceSalesforceKnowledgeArticleState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceSalesforceStandardObjectName : IEquatable<DataSourceSalesforceStandardObjectName>
    {
        private readonly string _value;

        private DataSourceSalesforceStandardObjectName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceSalesforceStandardObjectName Account { get; } = new DataSourceSalesforceStandardObjectName("ACCOUNT");
        public static DataSourceSalesforceStandardObjectName Campaign { get; } = new DataSourceSalesforceStandardObjectName("CAMPAIGN");
        public static DataSourceSalesforceStandardObjectName Case { get; } = new DataSourceSalesforceStandardObjectName("CASE");
        public static DataSourceSalesforceStandardObjectName Contact { get; } = new DataSourceSalesforceStandardObjectName("CONTACT");
        public static DataSourceSalesforceStandardObjectName Contract { get; } = new DataSourceSalesforceStandardObjectName("CONTRACT");
        public static DataSourceSalesforceStandardObjectName Document { get; } = new DataSourceSalesforceStandardObjectName("DOCUMENT");
        public static DataSourceSalesforceStandardObjectName Group { get; } = new DataSourceSalesforceStandardObjectName("GROUP");
        public static DataSourceSalesforceStandardObjectName Idea { get; } = new DataSourceSalesforceStandardObjectName("IDEA");
        public static DataSourceSalesforceStandardObjectName Lead { get; } = new DataSourceSalesforceStandardObjectName("LEAD");
        public static DataSourceSalesforceStandardObjectName Opportunity { get; } = new DataSourceSalesforceStandardObjectName("OPPORTUNITY");
        public static DataSourceSalesforceStandardObjectName Partner { get; } = new DataSourceSalesforceStandardObjectName("PARTNER");
        public static DataSourceSalesforceStandardObjectName Pricebook { get; } = new DataSourceSalesforceStandardObjectName("PRICEBOOK");
        public static DataSourceSalesforceStandardObjectName Product { get; } = new DataSourceSalesforceStandardObjectName("PRODUCT");
        public static DataSourceSalesforceStandardObjectName Profile { get; } = new DataSourceSalesforceStandardObjectName("PROFILE");
        public static DataSourceSalesforceStandardObjectName Solution { get; } = new DataSourceSalesforceStandardObjectName("SOLUTION");
        public static DataSourceSalesforceStandardObjectName Task { get; } = new DataSourceSalesforceStandardObjectName("TASK");
        public static DataSourceSalesforceStandardObjectName User { get; } = new DataSourceSalesforceStandardObjectName("USER");

        public static bool operator ==(DataSourceSalesforceStandardObjectName left, DataSourceSalesforceStandardObjectName right) => left.Equals(right);
        public static bool operator !=(DataSourceSalesforceStandardObjectName left, DataSourceSalesforceStandardObjectName right) => !left.Equals(right);

        public static explicit operator string(DataSourceSalesforceStandardObjectName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceSalesforceStandardObjectName other && Equals(other);
        public bool Equals(DataSourceSalesforceStandardObjectName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceServiceNowBuildVersionType : IEquatable<DataSourceServiceNowBuildVersionType>
    {
        private readonly string _value;

        private DataSourceServiceNowBuildVersionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceServiceNowBuildVersionType London { get; } = new DataSourceServiceNowBuildVersionType("LONDON");
        public static DataSourceServiceNowBuildVersionType Others { get; } = new DataSourceServiceNowBuildVersionType("OTHERS");

        public static bool operator ==(DataSourceServiceNowBuildVersionType left, DataSourceServiceNowBuildVersionType right) => left.Equals(right);
        public static bool operator !=(DataSourceServiceNowBuildVersionType left, DataSourceServiceNowBuildVersionType right) => !left.Equals(right);

        public static explicit operator string(DataSourceServiceNowBuildVersionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceServiceNowBuildVersionType other && Equals(other);
        public bool Equals(DataSourceServiceNowBuildVersionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataSourceSharePointConfigurationSharePointVersion : IEquatable<DataSourceSharePointConfigurationSharePointVersion>
    {
        private readonly string _value;

        private DataSourceSharePointConfigurationSharePointVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceSharePointConfigurationSharePointVersion SharepointOnline { get; } = new DataSourceSharePointConfigurationSharePointVersion("SHAREPOINT_ONLINE");

        public static bool operator ==(DataSourceSharePointConfigurationSharePointVersion left, DataSourceSharePointConfigurationSharePointVersion right) => left.Equals(right);
        public static bool operator !=(DataSourceSharePointConfigurationSharePointVersion left, DataSourceSharePointConfigurationSharePointVersion right) => !left.Equals(right);

        public static explicit operator string(DataSourceSharePointConfigurationSharePointVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceSharePointConfigurationSharePointVersion other && Equals(other);
        public bool Equals(DataSourceSharePointConfigurationSharePointVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Data source type
    /// </summary>
    [EnumType]
    public readonly struct DataSourceType : IEquatable<DataSourceType>
    {
        private readonly string _value;

        private DataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceType S3 { get; } = new DataSourceType("S3");
        public static DataSourceType Sharepoint { get; } = new DataSourceType("SHAREPOINT");
        public static DataSourceType Salesforce { get; } = new DataSourceType("SALESFORCE");
        public static DataSourceType Onedrive { get; } = new DataSourceType("ONEDRIVE");
        public static DataSourceType Servicenow { get; } = new DataSourceType("SERVICENOW");
        public static DataSourceType Database { get; } = new DataSourceType("DATABASE");
        public static DataSourceType Custom { get; } = new DataSourceType("CUSTOM");
        public static DataSourceType Confluence { get; } = new DataSourceType("CONFLUENCE");
        public static DataSourceType Googledrive { get; } = new DataSourceType("GOOGLEDRIVE");

        public static bool operator ==(DataSourceType left, DataSourceType right) => left.Equals(right);
        public static bool operator !=(DataSourceType left, DataSourceType right) => !left.Equals(right);

        public static explicit operator string(DataSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceType other && Equals(other);
        public bool Equals(DataSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Format of the input file
    /// </summary>
    [EnumType]
    public readonly struct FaqFileFormat : IEquatable<FaqFileFormat>
    {
        private readonly string _value;

        private FaqFileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FaqFileFormat Csv { get; } = new FaqFileFormat("CSV");
        public static FaqFileFormat CsvWithHeader { get; } = new FaqFileFormat("CSV_WITH_HEADER");
        public static FaqFileFormat Json { get; } = new FaqFileFormat("JSON");

        public static bool operator ==(FaqFileFormat left, FaqFileFormat right) => left.Equals(right);
        public static bool operator !=(FaqFileFormat left, FaqFileFormat right) => !left.Equals(right);

        public static explicit operator string(FaqFileFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FaqFileFormat other && Equals(other);
        public bool Equals(FaqFileFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IndexDocumentAttributeValueType : IEquatable<IndexDocumentAttributeValueType>
    {
        private readonly string _value;

        private IndexDocumentAttributeValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexDocumentAttributeValueType StringValue { get; } = new IndexDocumentAttributeValueType("STRING_VALUE");
        public static IndexDocumentAttributeValueType StringListValue { get; } = new IndexDocumentAttributeValueType("STRING_LIST_VALUE");
        public static IndexDocumentAttributeValueType LongValue { get; } = new IndexDocumentAttributeValueType("LONG_VALUE");
        public static IndexDocumentAttributeValueType DateValue { get; } = new IndexDocumentAttributeValueType("DATE_VALUE");

        public static bool operator ==(IndexDocumentAttributeValueType left, IndexDocumentAttributeValueType right) => left.Equals(right);
        public static bool operator !=(IndexDocumentAttributeValueType left, IndexDocumentAttributeValueType right) => !left.Equals(right);

        public static explicit operator string(IndexDocumentAttributeValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexDocumentAttributeValueType other && Equals(other);
        public bool Equals(IndexDocumentAttributeValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Edition of index
    /// </summary>
    [EnumType]
    public readonly struct IndexEdition : IEquatable<IndexEdition>
    {
        private readonly string _value;

        private IndexEdition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexEdition DeveloperEdition { get; } = new IndexEdition("DEVELOPER_EDITION");
        public static IndexEdition EnterpriseEdition { get; } = new IndexEdition("ENTERPRISE_EDITION");

        public static bool operator ==(IndexEdition left, IndexEdition right) => left.Equals(right);
        public static bool operator !=(IndexEdition left, IndexEdition right) => !left.Equals(right);

        public static explicit operator string(IndexEdition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexEdition other && Equals(other);
        public bool Equals(IndexEdition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IndexKeyLocation : IEquatable<IndexKeyLocation>
    {
        private readonly string _value;

        private IndexKeyLocation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexKeyLocation Url { get; } = new IndexKeyLocation("URL");
        public static IndexKeyLocation SecretManager { get; } = new IndexKeyLocation("SECRET_MANAGER");

        public static bool operator ==(IndexKeyLocation left, IndexKeyLocation right) => left.Equals(right);
        public static bool operator !=(IndexKeyLocation left, IndexKeyLocation right) => !left.Equals(right);

        public static explicit operator string(IndexKeyLocation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexKeyLocation other && Equals(other);
        public bool Equals(IndexKeyLocation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IndexOrder : IEquatable<IndexOrder>
    {
        private readonly string _value;

        private IndexOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexOrder Ascending { get; } = new IndexOrder("ASCENDING");
        public static IndexOrder Descending { get; } = new IndexOrder("DESCENDING");

        public static bool operator ==(IndexOrder left, IndexOrder right) => left.Equals(right);
        public static bool operator !=(IndexOrder left, IndexOrder right) => !left.Equals(right);

        public static explicit operator string(IndexOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexOrder other && Equals(other);
        public bool Equals(IndexOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IndexUserContextPolicy : IEquatable<IndexUserContextPolicy>
    {
        private readonly string _value;

        private IndexUserContextPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexUserContextPolicy AttributeFilter { get; } = new IndexUserContextPolicy("ATTRIBUTE_FILTER");
        public static IndexUserContextPolicy UserToken { get; } = new IndexUserContextPolicy("USER_TOKEN");

        public static bool operator ==(IndexUserContextPolicy left, IndexUserContextPolicy right) => left.Equals(right);
        public static bool operator !=(IndexUserContextPolicy left, IndexUserContextPolicy right) => !left.Equals(right);

        public static explicit operator string(IndexUserContextPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexUserContextPolicy other && Equals(other);
        public bool Equals(IndexUserContextPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
