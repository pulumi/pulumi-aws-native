// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApplicationAutoScaling.Outputs
{

    /// <summary>
    /// ``StepScalingPolicyConfiguration`` is a property of the [AWS::ApplicationAutoScaling::ScalingPolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalingpolicy.html) resource that specifies a step scaling policy configuration for Application Auto Scaling. 
    ///  For more information, see [Step scaling policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html) in the *Application Auto Scaling User Guide*.
    /// </summary>
    [OutputType]
    public sealed class ScalingPolicyStepScalingPolicyConfiguration
    {
        /// <summary>
        /// Specifies whether the ``ScalingAdjustment`` value in the ``StepAdjustment`` property is an absolute number or a percentage of the current capacity.
        /// </summary>
        public readonly string? AdjustmentType;
        /// <summary>
        /// The amount of time, in seconds, to wait for a previous scaling activity to take effect. If not specified, the default value is 300. For more information, see [Cooldown period](https://docs.aws.amazon.com/autoscaling/application/userguide/step-scaling-policy-overview.html#step-scaling-cooldown) in the *Application Auto Scaling User Guide*.
        /// </summary>
        public readonly int? Cooldown;
        /// <summary>
        /// The aggregation type for the CloudWatch metrics. Valid values are ``Minimum``, ``Maximum``, and ``Average``. If the aggregation type is null, the value is treated as ``Average``.
        /// </summary>
        public readonly string? MetricAggregationType;
        /// <summary>
        /// The minimum value to scale by when the adjustment type is ``PercentChangeInCapacity``. For example, suppose that you create a step scaling policy to scale out an Amazon ECS service by 25 percent and you specify a ``MinAdjustmentMagnitude`` of 2. If the service has 4 tasks and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a ``MinAdjustmentMagnitude`` of 2, Application Auto Scaling scales out the service by 2 tasks.
        /// </summary>
        public readonly int? MinAdjustmentMagnitude;
        /// <summary>
        /// A set of adjustments that enable you to scale based on the size of the alarm breach.
        ///  At least one step adjustment is required if you are adding a new step scaling policy configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScalingPolicyStepAdjustment> StepAdjustments;

        [OutputConstructor]
        private ScalingPolicyStepScalingPolicyConfiguration(
            string? adjustmentType,

            int? cooldown,

            string? metricAggregationType,

            int? minAdjustmentMagnitude,

            ImmutableArray<Outputs.ScalingPolicyStepAdjustment> stepAdjustments)
        {
            AdjustmentType = adjustmentType;
            Cooldown = cooldown;
            MetricAggregationType = metricAggregationType;
            MinAdjustmentMagnitude = minAdjustmentMagnitude;
            StepAdjustments = stepAdjustments;
        }
    }
}
