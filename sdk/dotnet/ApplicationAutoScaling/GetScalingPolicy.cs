// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApplicationAutoScaling
{
    public static class GetScalingPolicy
    {
        /// <summary>
        /// The ``AWS::ApplicationAutoScaling::ScalingPolicy`` resource defines a scaling policy that Application Auto Scaling uses to adjust the capacity of a scalable target. 
        ///  For more information, see [Target tracking scaling policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html) and [Step scaling policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html) in the *Application Auto Scaling User Guide*.
        /// </summary>
        public static Task<GetScalingPolicyResult> InvokeAsync(GetScalingPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScalingPolicyResult>("aws-native:applicationautoscaling:getScalingPolicy", args ?? new GetScalingPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// The ``AWS::ApplicationAutoScaling::ScalingPolicy`` resource defines a scaling policy that Application Auto Scaling uses to adjust the capacity of a scalable target. 
        ///  For more information, see [Target tracking scaling policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-target-tracking.html) and [Step scaling policies](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-step-scaling-policies.html) in the *Application Auto Scaling User Guide*.
        /// </summary>
        public static Output<GetScalingPolicyResult> Invoke(GetScalingPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScalingPolicyResult>("aws-native:applicationautoscaling:getScalingPolicy", args ?? new GetScalingPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScalingPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Returns the ARN of a scaling policy.
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        /// <summary>
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
        ///   +   ``ecs:service:DesiredCount`` - The task count of an ECS service.
        ///   +   ``elasticmapreduce:instancegroup:InstanceCount`` - The instance count of an EMR Instance Group.
        ///   +   ``ec2:spot-fleet-request:TargetCapacity`` - The target capacity of a Spot Fleet.
        ///   +   ``appstream:fleet:DesiredCapacity`` - The capacity of an AppStream 2.0 fleet.
        ///   +   ``dynamodb:table:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB table.
        ///   +   ``dynamodb:table:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB table.
        ///   +   ``dynamodb:index:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB global secondary index.
        ///   +   ``dynamodb:index:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB global secondary index.
        ///   +   ``rds:cluster:ReadReplicaCount`` - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.
        ///   +   ``sagemaker:variant:DesiredInstanceCount`` - The number of EC2 instances for a SageMaker model endpoint variant.
        ///   +   ``custom-resource:ResourceType:Property`` - The scalable dimension for a custom resource provided by your own application or service.
        ///   +   ``comprehend:document-classifier-endpoint:DesiredInferenceUnits`` - The number of inference units for an Amazon Comprehend document classification endpoint.
        ///   +   ``comprehend:entity-recognizer-endpoint:DesiredInferenceUnits`` - The number of inference units for an Amazon Comprehend entity recognizer endpoint.
        ///   +   ``lambda:function:ProvisionedConcurrency`` - The provisioned concurrency for a Lambda function.
        ///   +   ``cassandra:table:ReadCapacityUnits`` - The provisioned read capacity for an Amazon Keyspaces table.
        ///   +   ``cassandra:table:WriteCapacityUnits`` - The provisioned write capacity for an Amazon Keyspaces table.
        ///   +   ``kafka:broker-storage:VolumeSize`` - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.
        ///   +   ``elasticache:replication-group:NodeGroups`` - The number of node groups for an Amazon ElastiCache replication group.
        ///   +   ``elasticache:replication-group:Replicas`` - The number of replicas per node group for an Amazon ElastiCache replication group.
        ///   +   ``neptune:cluster:ReadReplicaCount`` - The count of read replicas in an Amazon Neptune DB cluster.
        ///   +   ``sagemaker:variant:DesiredProvisionedConcurrency`` - The provisioned concurrency for a SageMaker serverless endpoint.
        ///   +   ``sagemaker:inference-component:DesiredCopyCount`` - The number of copies across an endpoint for a SageMaker inference component.
        ///   +   ``workspaces:workspacespool:DesiredUserSessions`` - The number of user sessions for the WorkSpaces in the pool.
        /// </summary>
        [Input("scalableDimension", required: true)]
        public string ScalableDimension { get; set; } = null!;

        public GetScalingPolicyArgs()
        {
        }
        public static new GetScalingPolicyArgs Empty => new GetScalingPolicyArgs();
    }

    public sealed class GetScalingPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Returns the ARN of a scaling policy.
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        /// <summary>
        /// The scalable dimension. This string consists of the service namespace, resource type, and scaling property.
        ///   +   ``ecs:service:DesiredCount`` - The task count of an ECS service.
        ///   +   ``elasticmapreduce:instancegroup:InstanceCount`` - The instance count of an EMR Instance Group.
        ///   +   ``ec2:spot-fleet-request:TargetCapacity`` - The target capacity of a Spot Fleet.
        ///   +   ``appstream:fleet:DesiredCapacity`` - The capacity of an AppStream 2.0 fleet.
        ///   +   ``dynamodb:table:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB table.
        ///   +   ``dynamodb:table:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB table.
        ///   +   ``dynamodb:index:ReadCapacityUnits`` - The provisioned read capacity for a DynamoDB global secondary index.
        ///   +   ``dynamodb:index:WriteCapacityUnits`` - The provisioned write capacity for a DynamoDB global secondary index.
        ///   +   ``rds:cluster:ReadReplicaCount`` - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.
        ///   +   ``sagemaker:variant:DesiredInstanceCount`` - The number of EC2 instances for a SageMaker model endpoint variant.
        ///   +   ``custom-resource:ResourceType:Property`` - The scalable dimension for a custom resource provided by your own application or service.
        ///   +   ``comprehend:document-classifier-endpoint:DesiredInferenceUnits`` - The number of inference units for an Amazon Comprehend document classification endpoint.
        ///   +   ``comprehend:entity-recognizer-endpoint:DesiredInferenceUnits`` - The number of inference units for an Amazon Comprehend entity recognizer endpoint.
        ///   +   ``lambda:function:ProvisionedConcurrency`` - The provisioned concurrency for a Lambda function.
        ///   +   ``cassandra:table:ReadCapacityUnits`` - The provisioned read capacity for an Amazon Keyspaces table.
        ///   +   ``cassandra:table:WriteCapacityUnits`` - The provisioned write capacity for an Amazon Keyspaces table.
        ///   +   ``kafka:broker-storage:VolumeSize`` - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.
        ///   +   ``elasticache:replication-group:NodeGroups`` - The number of node groups for an Amazon ElastiCache replication group.
        ///   +   ``elasticache:replication-group:Replicas`` - The number of replicas per node group for an Amazon ElastiCache replication group.
        ///   +   ``neptune:cluster:ReadReplicaCount`` - The count of read replicas in an Amazon Neptune DB cluster.
        ///   +   ``sagemaker:variant:DesiredProvisionedConcurrency`` - The provisioned concurrency for a SageMaker serverless endpoint.
        ///   +   ``sagemaker:inference-component:DesiredCopyCount`` - The number of copies across an endpoint for a SageMaker inference component.
        ///   +   ``workspaces:workspacespool:DesiredUserSessions`` - The number of user sessions for the WorkSpaces in the pool.
        /// </summary>
        [Input("scalableDimension", required: true)]
        public Input<string> ScalableDimension { get; set; } = null!;

        public GetScalingPolicyInvokeArgs()
        {
        }
        public static new GetScalingPolicyInvokeArgs Empty => new GetScalingPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetScalingPolicyResult
    {
        /// <summary>
        /// Returns the ARN of a scaling policy.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The scaling policy type.
        ///  The following policy types are supported: 
        ///   ``TargetTrackingScaling``â€”Not supported for Amazon EMR
        ///   ``StepScaling``â€”Not supported for DynamoDB, Amazon Comprehend, Lambda, Amazon Keyspaces, Amazon MSK, Amazon ElastiCache, or Neptune.
        /// </summary>
        public readonly string? PolicyType;
        public readonly Outputs.ScalingPolicyPredictiveScalingPolicyConfiguration? PredictiveScalingPolicyConfiguration;
        /// <summary>
        /// A step scaling policy.
        /// </summary>
        public readonly Outputs.ScalingPolicyStepScalingPolicyConfiguration? StepScalingPolicyConfiguration;
        /// <summary>
        /// A target tracking scaling policy.
        /// </summary>
        public readonly Outputs.ScalingPolicyTargetTrackingScalingPolicyConfiguration? TargetTrackingScalingPolicyConfiguration;

        [OutputConstructor]
        private GetScalingPolicyResult(
            string? arn,

            string? policyType,

            Outputs.ScalingPolicyPredictiveScalingPolicyConfiguration? predictiveScalingPolicyConfiguration,

            Outputs.ScalingPolicyStepScalingPolicyConfiguration? stepScalingPolicyConfiguration,

            Outputs.ScalingPolicyTargetTrackingScalingPolicyConfiguration? targetTrackingScalingPolicyConfiguration)
        {
            Arn = arn;
            PolicyType = policyType;
            PredictiveScalingPolicyConfiguration = predictiveScalingPolicyConfiguration;
            StepScalingPolicyConfiguration = stepScalingPolicyConfiguration;
            TargetTrackingScalingPolicyConfiguration = targetTrackingScalingPolicyConfiguration;
        }
    }
}
