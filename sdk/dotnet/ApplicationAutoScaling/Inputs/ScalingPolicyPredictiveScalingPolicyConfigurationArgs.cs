// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApplicationAutoScaling.Inputs
{

    /// <summary>
    /// Represents a predictive scaling policy configuration.
    /// </summary>
    public sealed class ScalingPolicyPredictiveScalingPolicyConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity. Defaults to ``HonorMaxCapacity`` if not specified.
        /// </summary>
        [Input("maxCapacityBreachBehavior")]
        public Input<string>? MaxCapacityBreachBehavior { get; set; }

        /// <summary>
        /// The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55. 
        ///  Required if the ``MaxCapacityBreachBehavior`` property is set to ``IncreaseMaxCapacity``, and cannot be used otherwise.
        /// </summary>
        [Input("maxCapacityBuffer")]
        public Input<int>? MaxCapacityBuffer { get; set; }

        [Input("metricSpecifications", required: true)]
        private InputList<Inputs.ScalingPolicyPredictiveScalingMetricSpecificationArgs>? _metricSpecifications;

        /// <summary>
        /// This structure includes the metrics and target utilization to use for predictive scaling. 
        ///  This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.
        /// </summary>
        public InputList<Inputs.ScalingPolicyPredictiveScalingMetricSpecificationArgs> MetricSpecifications
        {
            get => _metricSpecifications ?? (_metricSpecifications = new InputList<Inputs.ScalingPolicyPredictiveScalingMetricSpecificationArgs>());
            set => _metricSpecifications = value;
        }

        /// <summary>
        /// The predictive scaling mode. Defaults to ``ForecastOnly`` if not specified.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The amount of time, in seconds, that the start time can be advanced. 
        ///  The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified.
        /// </summary>
        [Input("schedulingBufferTime")]
        public Input<int>? SchedulingBufferTime { get; set; }

        public ScalingPolicyPredictiveScalingPolicyConfigurationArgs()
        {
        }
        public static new ScalingPolicyPredictiveScalingPolicyConfigurationArgs Empty => new ScalingPolicyPredictiveScalingPolicyConfigurationArgs();
    }
}
