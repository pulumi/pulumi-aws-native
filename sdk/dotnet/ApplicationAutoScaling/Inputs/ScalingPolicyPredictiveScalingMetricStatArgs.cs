// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ApplicationAutoScaling.Inputs
{

    /// <summary>
    /// This structure defines the CloudWatch metric to return, along with the statistic and unit.
    /// </summary>
    public sealed class ScalingPolicyPredictiveScalingMetricStatArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CloudWatch metric to return, including the metric name, namespace, and dimensions. To get the exact metric name, namespace, and dimensions, inspect the [Metric](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Metric.html) object that is returned by a call to [ListMetrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html).
        /// </summary>
        [Input("metric")]
        public Input<Inputs.ScalingPolicyPredictiveScalingMetricArgs>? Metric { get; set; }

        /// <summary>
        /// The statistic to return. It can include any CloudWatch statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *Amazon CloudWatch User Guide*. 
        ///  The most commonly used metrics for predictive scaling are ``Average`` and ``Sum``.
        /// </summary>
        [Input("stat")]
        public Input<string>? Stat { get; set; }

        /// <summary>
        /// The unit to use for the returned data points. For a complete list of the units that CloudWatch supports, see the [MetricDatum](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) data type in the *Amazon CloudWatch API Reference*.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        public ScalingPolicyPredictiveScalingMetricStatArgs()
        {
        }
        public static new ScalingPolicyPredictiveScalingMetricStatArgs Empty => new ScalingPolicyPredictiveScalingMetricStatArgs();
    }
}
