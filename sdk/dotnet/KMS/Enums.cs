// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.KMS
{
    /// <summary>
    /// Specifies the type of CMK to create. The default value is SYMMETRIC_DEFAULT. This property is required only for asymmetric CMKs. You can't change the KeySpec value after the CMK is created.
    /// </summary>
    [EnumType]
    public readonly struct KeyKeySpec : IEquatable<KeyKeySpec>
    {
        private readonly string _value;

        private KeyKeySpec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyKeySpec SymmetricDefault { get; } = new KeyKeySpec("SYMMETRIC_DEFAULT");
        public static KeyKeySpec Rsa2048 { get; } = new KeyKeySpec("RSA_2048");
        public static KeyKeySpec Rsa3072 { get; } = new KeyKeySpec("RSA_3072");
        public static KeyKeySpec Rsa4096 { get; } = new KeyKeySpec("RSA_4096");
        public static KeyKeySpec EccNistP256 { get; } = new KeyKeySpec("ECC_NIST_P256");
        public static KeyKeySpec EccNistP384 { get; } = new KeyKeySpec("ECC_NIST_P384");
        public static KeyKeySpec EccNistP521 { get; } = new KeyKeySpec("ECC_NIST_P521");
        public static KeyKeySpec EccSecgP256k1 { get; } = new KeyKeySpec("ECC_SECG_P256K1");

        public static bool operator ==(KeyKeySpec left, KeyKeySpec right) => left.Equals(right);
        public static bool operator !=(KeyKeySpec left, KeyKeySpec right) => !left.Equals(right);

        public static explicit operator string(KeyKeySpec value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyKeySpec other && Equals(other);
        public bool Equals(KeyKeySpec other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the cryptographic operations for which you can use the CMK. The default value is ENCRYPT_DECRYPT. This property is required only for asymmetric CMKs. You can't change the KeyUsage value after the CMK is created.
    /// </summary>
    [EnumType]
    public readonly struct KeyKeyUsage : IEquatable<KeyKeyUsage>
    {
        private readonly string _value;

        private KeyKeyUsage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyKeyUsage EncryptDecrypt { get; } = new KeyKeyUsage("ENCRYPT_DECRYPT");
        public static KeyKeyUsage SignVerify { get; } = new KeyKeyUsage("SIGN_VERIFY");

        public static bool operator ==(KeyKeyUsage left, KeyKeyUsage right) => left.Equals(right);
        public static bool operator !=(KeyKeyUsage left, KeyKeyUsage right) => !left.Equals(right);

        public static explicit operator string(KeyKeyUsage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyKeyUsage other && Equals(other);
        public bool Equals(KeyKeyUsage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
