// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.EMR
{
    /// <summary>
    /// Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM. Amazon EMR Studio currently only supports SSO authentication.
    /// </summary>
    [EnumType]
    public readonly struct StudioAuthMode : IEquatable<StudioAuthMode>
    {
        private readonly string _value;

        private StudioAuthMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StudioAuthMode Sso { get; } = new StudioAuthMode("SSO");
        public static StudioAuthMode Iam { get; } = new StudioAuthMode("IAM");

        public static bool operator ==(StudioAuthMode left, StudioAuthMode right) => left.Equals(right);
        public static bool operator !=(StudioAuthMode left, StudioAuthMode right) => !left.Equals(right);

        public static explicit operator string(StudioAuthMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StudioAuthMode other && Equals(other);
        public bool Equals(StudioAuthMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether the identity to map to the Studio is a user or a group.
    /// </summary>
    [EnumType]
    public readonly struct StudioSessionMappingIdentityType : IEquatable<StudioSessionMappingIdentityType>
    {
        private readonly string _value;

        private StudioSessionMappingIdentityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StudioSessionMappingIdentityType User { get; } = new StudioSessionMappingIdentityType("USER");
        public static StudioSessionMappingIdentityType Group { get; } = new StudioSessionMappingIdentityType("GROUP");

        public static bool operator ==(StudioSessionMappingIdentityType left, StudioSessionMappingIdentityType right) => left.Equals(right);
        public static bool operator !=(StudioSessionMappingIdentityType left, StudioSessionMappingIdentityType right) => !left.Equals(right);

        public static explicit operator string(StudioSessionMappingIdentityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StudioSessionMappingIdentityType other && Equals(other);
        public bool Equals(StudioSessionMappingIdentityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
