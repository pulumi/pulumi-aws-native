// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lex.Outputs
{

    /// <summary>
    /// Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
    /// </summary>
    [OutputType]
    public sealed class BotIntentConfirmationSetting
    {
        /// <summary>
        /// The DialogCodeHookInvocationSetting object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is InvokeDialogCodeHook.
        /// </summary>
        public readonly Outputs.BotDialogCodeHookInvocationSetting? CodeHook;
        /// <summary>
        /// A list of conditional branches to evaluate after the intent is closed.
        /// </summary>
        public readonly Outputs.BotConditionalSpecification? ConfirmationConditional;
        /// <summary>
        /// Specifies the next step that the bot executes when the customer confirms the intent.
        /// </summary>
        public readonly Outputs.BotDialogState? ConfirmationNextStep;
        /// <summary>
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        /// </summary>
        public readonly Outputs.BotResponseSpecification? ConfirmationResponse;
        /// <summary>
        /// A list of conditional branches to evaluate after the intent is declined.
        /// </summary>
        public readonly Outputs.BotConditionalSpecification? DeclinationConditional;
        /// <summary>
        /// Specifies the next step that the bot executes when the customer declines the intent.
        /// </summary>
        public readonly Outputs.BotDialogState? DeclinationNextStep;
        /// <summary>
        /// When the user answers "no" to the question defined in promptSpecification, Amazon Lex responds with this response to acknowledge that the intent was canceled.
        /// </summary>
        public readonly Outputs.BotResponseSpecification? DeclinationResponse;
        /// <summary>
        /// The DialogCodeHookInvocationSetting used when the code hook is invoked during confirmation prompt retries.
        /// </summary>
        public readonly Outputs.BotElicitationCodeHookInvocationSetting? ElicitationCodeHook;
        /// <summary>
        /// Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
        /// </summary>
        public readonly Outputs.BotConditionalSpecification? FailureConditional;
        /// <summary>
        /// The next step to take in the conversation if the confirmation step fails.
        /// </summary>
        public readonly Outputs.BotDialogState? FailureNextStep;
        /// <summary>
        /// Specifies a list of message groups that Amazon Lex uses to respond the user input.
        /// </summary>
        public readonly Outputs.BotResponseSpecification? FailureResponse;
        /// <summary>
        /// Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
        /// </summary>
        public readonly bool? IsActive;
        /// <summary>
        /// Prompts the user to confirm the intent. This question should have a yes or no answer.
        /// </summary>
        public readonly Outputs.BotPromptSpecification PromptSpecification;

        [OutputConstructor]
        private BotIntentConfirmationSetting(
            Outputs.BotDialogCodeHookInvocationSetting? codeHook,

            Outputs.BotConditionalSpecification? confirmationConditional,

            Outputs.BotDialogState? confirmationNextStep,

            Outputs.BotResponseSpecification? confirmationResponse,

            Outputs.BotConditionalSpecification? declinationConditional,

            Outputs.BotDialogState? declinationNextStep,

            Outputs.BotResponseSpecification? declinationResponse,

            Outputs.BotElicitationCodeHookInvocationSetting? elicitationCodeHook,

            Outputs.BotConditionalSpecification? failureConditional,

            Outputs.BotDialogState? failureNextStep,

            Outputs.BotResponseSpecification? failureResponse,

            bool? isActive,

            Outputs.BotPromptSpecification promptSpecification)
        {
            CodeHook = codeHook;
            ConfirmationConditional = confirmationConditional;
            ConfirmationNextStep = confirmationNextStep;
            ConfirmationResponse = confirmationResponse;
            DeclinationConditional = declinationConditional;
            DeclinationNextStep = declinationNextStep;
            DeclinationResponse = declinationResponse;
            ElicitationCodeHook = elicitationCodeHook;
            FailureConditional = failureConditional;
            FailureNextStep = failureNextStep;
            FailureResponse = failureResponse;
            IsActive = isActive;
            PromptSpecification = promptSpecification;
        }
    }
}
