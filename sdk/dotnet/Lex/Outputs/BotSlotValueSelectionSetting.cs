// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lex.Outputs
{

    [OutputType]
    public sealed class BotSlotValueSelectionSetting
    {
        /// <summary>
        /// Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
        /// </summary>
        public readonly Outputs.BotAdvancedRecognitionSetting? AdvancedRecognitionSetting;
        /// <summary>
        /// A regular expression used to validate the value of a slot.
        /// </summary>
        public readonly Outputs.BotSlotValueRegexFilter? RegexFilter;
        /// <summary>
        /// Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:
        /// 
        /// - `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value.
        /// - `TOP_RESOLUTION` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.
        /// 
        /// If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
        /// </summary>
        public readonly Pulumi.AwsNative.Lex.BotSlotValueResolutionStrategy ResolutionStrategy;

        [OutputConstructor]
        private BotSlotValueSelectionSetting(
            Outputs.BotAdvancedRecognitionSetting? advancedRecognitionSetting,

            Outputs.BotSlotValueRegexFilter? regexFilter,

            Pulumi.AwsNative.Lex.BotSlotValueResolutionStrategy resolutionStrategy)
        {
            AdvancedRecognitionSetting = advancedRecognitionSetting;
            RegexFilter = regexFilter;
            ResolutionStrategy = resolutionStrategy;
        }
    }
}
