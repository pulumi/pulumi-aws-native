// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Lex
{
    [EnumType]
    public readonly struct BotAliasStatus : IEquatable<BotAliasStatus>
    {
        private readonly string _value;

        private BotAliasStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BotAliasStatus Creating { get; } = new BotAliasStatus("Creating");
        public static BotAliasStatus Available { get; } = new BotAliasStatus("Available");
        public static BotAliasStatus Deleting { get; } = new BotAliasStatus("Deleting");
        public static BotAliasStatus Failed { get; } = new BotAliasStatus("Failed");

        public static bool operator ==(BotAliasStatus left, BotAliasStatus right) => left.Equals(right);
        public static bool operator !=(BotAliasStatus left, BotAliasStatus right) => !left.Equals(right);

        public static explicit operator string(BotAliasStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BotAliasStatus other && Equals(other);
        public bool Equals(BotAliasStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enables using slot values as a custom vocabulary when recognizing user utterances.
    /// </summary>
    [EnumType]
    public readonly struct BotAudioRecognitionStrategy : IEquatable<BotAudioRecognitionStrategy>
    {
        private readonly string _value;

        private BotAudioRecognitionStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BotAudioRecognitionStrategy UseSlotValuesAsCustomVocabulary { get; } = new BotAudioRecognitionStrategy("UseSlotValuesAsCustomVocabulary");

        public static bool operator ==(BotAudioRecognitionStrategy left, BotAudioRecognitionStrategy right) => left.Equals(right);
        public static bool operator !=(BotAudioRecognitionStrategy left, BotAudioRecognitionStrategy right) => !left.Equals(right);

        public static explicit operator string(BotAudioRecognitionStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BotAudioRecognitionStrategy other && Equals(other);
        public bool Equals(BotAudioRecognitionStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The possible values of actions that the conversation can take.
    /// </summary>
    [EnumType]
    public readonly struct BotDialogActionType : IEquatable<BotDialogActionType>
    {
        private readonly string _value;

        private BotDialogActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BotDialogActionType CloseIntent { get; } = new BotDialogActionType("CloseIntent");
        public static BotDialogActionType ConfirmIntent { get; } = new BotDialogActionType("ConfirmIntent");
        public static BotDialogActionType ElicitIntent { get; } = new BotDialogActionType("ElicitIntent");
        public static BotDialogActionType ElicitSlot { get; } = new BotDialogActionType("ElicitSlot");
        public static BotDialogActionType StartIntent { get; } = new BotDialogActionType("StartIntent");
        public static BotDialogActionType FulfillIntent { get; } = new BotDialogActionType("FulfillIntent");
        public static BotDialogActionType EndConversation { get; } = new BotDialogActionType("EndConversation");
        public static BotDialogActionType EvaluateConditional { get; } = new BotDialogActionType("EvaluateConditional");
        public static BotDialogActionType InvokeDialogCodeHook { get; } = new BotDialogActionType("InvokeDialogCodeHook");

        public static bool operator ==(BotDialogActionType left, BotDialogActionType right) => left.Equals(right);
        public static bool operator !=(BotDialogActionType left, BotDialogActionType right) => !left.Equals(right);

        public static explicit operator string(BotDialogActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BotDialogActionType other && Equals(other);
        public bool Equals(BotDialogActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates how a message is selected from a message group among retries.
    /// </summary>
    [EnumType]
    public readonly struct BotMessageSelectionStrategy : IEquatable<BotMessageSelectionStrategy>
    {
        private readonly string _value;

        private BotMessageSelectionStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BotMessageSelectionStrategy Random { get; } = new BotMessageSelectionStrategy("Random");
        public static BotMessageSelectionStrategy Ordered { get; } = new BotMessageSelectionStrategy("Ordered");

        public static bool operator ==(BotMessageSelectionStrategy left, BotMessageSelectionStrategy right) => left.Equals(right);
        public static bool operator !=(BotMessageSelectionStrategy left, BotMessageSelectionStrategy right) => !left.Equals(right);

        public static explicit operator string(BotMessageSelectionStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BotMessageSelectionStrategy other && Equals(other);
        public bool Equals(BotMessageSelectionStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
    /// </summary>
    [EnumType]
    public readonly struct BotObfuscationSettingObfuscationSettingType : IEquatable<BotObfuscationSettingObfuscationSettingType>
    {
        private readonly string _value;

        private BotObfuscationSettingObfuscationSettingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BotObfuscationSettingObfuscationSettingType None { get; } = new BotObfuscationSettingObfuscationSettingType("None");
        public static BotObfuscationSettingObfuscationSettingType DefaultObfuscation { get; } = new BotObfuscationSettingObfuscationSettingType("DefaultObfuscation");

        public static bool operator ==(BotObfuscationSettingObfuscationSettingType left, BotObfuscationSettingObfuscationSettingType right) => left.Equals(right);
        public static bool operator !=(BotObfuscationSettingObfuscationSettingType left, BotObfuscationSettingObfuscationSettingType right) => !left.Equals(right);

        public static explicit operator string(BotObfuscationSettingObfuscationSettingType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BotObfuscationSettingObfuscationSettingType other && Equals(other);
        public bool Equals(BotObfuscationSettingObfuscationSettingType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BotSlotConstraint : IEquatable<BotSlotConstraint>
    {
        private readonly string _value;

        private BotSlotConstraint(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BotSlotConstraint Required { get; } = new BotSlotConstraint("Required");
        public static BotSlotConstraint Optional { get; } = new BotSlotConstraint("Optional");

        public static bool operator ==(BotSlotConstraint left, BotSlotConstraint right) => left.Equals(right);
        public static bool operator !=(BotSlotConstraint left, BotSlotConstraint right) => !left.Equals(right);

        public static explicit operator string(BotSlotConstraint value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BotSlotConstraint other && Equals(other);
        public bool Equals(BotSlotConstraint other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The different shapes that a slot can be in during a conversation.
    /// </summary>
    [EnumType]
    public readonly struct BotSlotShape : IEquatable<BotSlotShape>
    {
        private readonly string _value;

        private BotSlotShape(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BotSlotShape Scalar { get; } = new BotSlotShape("Scalar");
        public static BotSlotShape List { get; } = new BotSlotShape("List");

        public static bool operator ==(BotSlotShape left, BotSlotShape right) => left.Equals(right);
        public static bool operator !=(BotSlotShape left, BotSlotShape right) => !left.Equals(right);

        public static explicit operator string(BotSlotShape value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BotSlotShape other && Equals(other);
        public bool Equals(BotSlotShape other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BotSlotValueResolutionStrategy : IEquatable<BotSlotValueResolutionStrategy>
    {
        private readonly string _value;

        private BotSlotValueResolutionStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BotSlotValueResolutionStrategy OriginalValue { get; } = new BotSlotValueResolutionStrategy("ORIGINAL_VALUE");
        public static BotSlotValueResolutionStrategy TopResolution { get; } = new BotSlotValueResolutionStrategy("TOP_RESOLUTION");

        public static bool operator ==(BotSlotValueResolutionStrategy left, BotSlotValueResolutionStrategy right) => left.Equals(right);
        public static bool operator !=(BotSlotValueResolutionStrategy left, BotSlotValueResolutionStrategy right) => !left.Equals(right);

        public static explicit operator string(BotSlotValueResolutionStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BotSlotValueResolutionStrategy other && Equals(other);
        public bool Equals(BotSlotValueResolutionStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the engine parameter of the SynthesizeSpeech operation in the Amazon Polly developer guide.
    /// </summary>
    [EnumType]
    public readonly struct BotVoiceSettingsEngine : IEquatable<BotVoiceSettingsEngine>
    {
        private readonly string _value;

        private BotVoiceSettingsEngine(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BotVoiceSettingsEngine Standard { get; } = new BotVoiceSettingsEngine("standard");
        public static BotVoiceSettingsEngine Neural { get; } = new BotVoiceSettingsEngine("neural");

        public static bool operator ==(BotVoiceSettingsEngine left, BotVoiceSettingsEngine right) => left.Equals(right);
        public static bool operator !=(BotVoiceSettingsEngine left, BotVoiceSettingsEngine right) => !left.Equals(right);

        public static explicit operator string(BotVoiceSettingsEngine value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BotVoiceSettingsEngine other && Equals(other);
        public bool Equals(BotVoiceSettingsEngine other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
