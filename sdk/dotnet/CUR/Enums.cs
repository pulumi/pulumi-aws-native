// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.CUR
{
    /// <summary>
    /// The types of manifest that you want AWS to create for this report.
    /// </summary>
    [EnumType]
    public readonly struct ReportDefinitionAdditionalArtifactsItem : IEquatable<ReportDefinitionAdditionalArtifactsItem>
    {
        private readonly string _value;

        private ReportDefinitionAdditionalArtifactsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReportDefinitionAdditionalArtifactsItem Redshift { get; } = new ReportDefinitionAdditionalArtifactsItem("REDSHIFT");
        public static ReportDefinitionAdditionalArtifactsItem Quicksight { get; } = new ReportDefinitionAdditionalArtifactsItem("QUICKSIGHT");
        public static ReportDefinitionAdditionalArtifactsItem Athena { get; } = new ReportDefinitionAdditionalArtifactsItem("ATHENA");

        public static bool operator ==(ReportDefinitionAdditionalArtifactsItem left, ReportDefinitionAdditionalArtifactsItem right) => left.Equals(right);
        public static bool operator !=(ReportDefinitionAdditionalArtifactsItem left, ReportDefinitionAdditionalArtifactsItem right) => !left.Equals(right);

        public static explicit operator string(ReportDefinitionAdditionalArtifactsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReportDefinitionAdditionalArtifactsItem other && Equals(other);
        public bool Equals(ReportDefinitionAdditionalArtifactsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether or not AWS includes resource IDs in the report.
    /// </summary>
    [EnumType]
    public readonly struct ReportDefinitionAdditionalSchemaElementsItem : IEquatable<ReportDefinitionAdditionalSchemaElementsItem>
    {
        private readonly string _value;

        private ReportDefinitionAdditionalSchemaElementsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReportDefinitionAdditionalSchemaElementsItem Resources { get; } = new ReportDefinitionAdditionalSchemaElementsItem("RESOURCES");

        public static bool operator ==(ReportDefinitionAdditionalSchemaElementsItem left, ReportDefinitionAdditionalSchemaElementsItem right) => left.Equals(right);
        public static bool operator !=(ReportDefinitionAdditionalSchemaElementsItem left, ReportDefinitionAdditionalSchemaElementsItem right) => !left.Equals(right);

        public static explicit operator string(ReportDefinitionAdditionalSchemaElementsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReportDefinitionAdditionalSchemaElementsItem other && Equals(other);
        public bool Equals(ReportDefinitionAdditionalSchemaElementsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The compression format that AWS uses for the report.
    /// </summary>
    [EnumType]
    public readonly struct ReportDefinitionCompression : IEquatable<ReportDefinitionCompression>
    {
        private readonly string _value;

        private ReportDefinitionCompression(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReportDefinitionCompression Zip { get; } = new ReportDefinitionCompression("ZIP");
        public static ReportDefinitionCompression Gzip { get; } = new ReportDefinitionCompression("GZIP");
        public static ReportDefinitionCompression Parquet { get; } = new ReportDefinitionCompression("Parquet");

        public static bool operator ==(ReportDefinitionCompression left, ReportDefinitionCompression right) => left.Equals(right);
        public static bool operator !=(ReportDefinitionCompression left, ReportDefinitionCompression right) => !left.Equals(right);

        public static explicit operator string(ReportDefinitionCompression value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReportDefinitionCompression other && Equals(other);
        public bool Equals(ReportDefinitionCompression other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The format that AWS saves the report in.
    /// </summary>
    [EnumType]
    public readonly struct ReportDefinitionFormat : IEquatable<ReportDefinitionFormat>
    {
        private readonly string _value;

        private ReportDefinitionFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReportDefinitionFormat TextORcsv { get; } = new ReportDefinitionFormat("textORcsv");
        public static ReportDefinitionFormat Parquet { get; } = new ReportDefinitionFormat("Parquet");

        public static bool operator ==(ReportDefinitionFormat left, ReportDefinitionFormat right) => left.Equals(right);
        public static bool operator !=(ReportDefinitionFormat left, ReportDefinitionFormat right) => !left.Equals(right);

        public static explicit operator string(ReportDefinitionFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReportDefinitionFormat other && Equals(other);
        public bool Equals(ReportDefinitionFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether you want Amazon Web Services to overwrite the previous version of each report or to deliver the report in addition to the previous versions.
    /// </summary>
    [EnumType]
    public readonly struct ReportDefinitionReportVersioning : IEquatable<ReportDefinitionReportVersioning>
    {
        private readonly string _value;

        private ReportDefinitionReportVersioning(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReportDefinitionReportVersioning CreateNewReport { get; } = new ReportDefinitionReportVersioning("CREATE_NEW_REPORT");
        public static ReportDefinitionReportVersioning OverwriteReport { get; } = new ReportDefinitionReportVersioning("OVERWRITE_REPORT");

        public static bool operator ==(ReportDefinitionReportVersioning left, ReportDefinitionReportVersioning right) => left.Equals(right);
        public static bool operator !=(ReportDefinitionReportVersioning left, ReportDefinitionReportVersioning right) => !left.Equals(right);

        public static explicit operator string(ReportDefinitionReportVersioning value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReportDefinitionReportVersioning other && Equals(other);
        public bool Equals(ReportDefinitionReportVersioning other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The granularity of the line items in the report.
    /// </summary>
    [EnumType]
    public readonly struct ReportDefinitionTimeUnit : IEquatable<ReportDefinitionTimeUnit>
    {
        private readonly string _value;

        private ReportDefinitionTimeUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReportDefinitionTimeUnit Hourly { get; } = new ReportDefinitionTimeUnit("HOURLY");
        public static ReportDefinitionTimeUnit Daily { get; } = new ReportDefinitionTimeUnit("DAILY");
        public static ReportDefinitionTimeUnit Monthly { get; } = new ReportDefinitionTimeUnit("MONTHLY");

        public static bool operator ==(ReportDefinitionTimeUnit left, ReportDefinitionTimeUnit right) => left.Equals(right);
        public static bool operator !=(ReportDefinitionTimeUnit left, ReportDefinitionTimeUnit right) => !left.Equals(right);

        public static explicit operator string(ReportDefinitionTimeUnit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReportDefinitionTimeUnit other && Equals(other);
        public bool Equals(ReportDefinitionTimeUnit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
