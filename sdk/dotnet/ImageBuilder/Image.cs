// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ImageBuilder
{
    /// <summary>
    /// Resource schema for AWS::ImageBuilder::Image
    /// </summary>
    [AwsNativeResourceType("aws-native:imagebuilder:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the image.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
        /// </summary>
        [Output("containerRecipeArn")]
        public Output<string?> ContainerRecipeArn { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the distribution configuration.
        /// </summary>
        [Output("distributionConfigurationArn")]
        public Output<string?> DistributionConfigurationArn { get; private set; } = null!;

        /// <summary>
        /// Collects additional information about the image being created, including the operating system (OS) version and package list.
        /// </summary>
        [Output("enhancedImageMetadataEnabled")]
        public Output<bool?> EnhancedImageMetadataEnabled { get; private set; } = null!;

        /// <summary>
        /// The execution role name/ARN for the image build, if provided
        /// </summary>
        [Output("executionRole")]
        public Output<string?> ExecutionRole { get; private set; } = null!;

        /// <summary>
        /// The AMI ID of the EC2 AMI in current region.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
        /// </summary>
        [Output("imageRecipeArn")]
        public Output<string?> ImageRecipeArn { get; private set; } = null!;

        /// <summary>
        /// Contains settings for vulnerability scans.
        /// </summary>
        [Output("imageScanningConfiguration")]
        public Output<Outputs.ImageScanningConfiguration?> ImageScanningConfiguration { get; private set; } = null!;

        /// <summary>
        /// The image tests configuration used when creating this image.
        /// </summary>
        [Output("imageTestsConfiguration")]
        public Output<Outputs.ImageTestsConfiguration?> ImageTestsConfiguration { get; private set; } = null!;

        /// <summary>
        /// URI for containers created in current Region with default ECR image tag
        /// </summary>
        [Output("imageUri")]
        public Output<string> ImageUri { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the infrastructure configuration.
        /// </summary>
        [Output("infrastructureConfigurationArn")]
        public Output<string?> InfrastructureConfigurationArn { get; private set; } = null!;

        /// <summary>
        /// The name of the image.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The tags associated with the image.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Workflows to define the image build process
        /// </summary>
        [Output("workflows")]
        public Output<ImmutableArray<Outputs.ImageWorkflowConfiguration>> Workflows { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:imagebuilder:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:imagebuilder:Image", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "containerRecipeArn",
                    "distributionConfigurationArn",
                    "enhancedImageMetadataEnabled",
                    "imageRecipeArn",
                    "imageScanningConfiguration",
                    "imageTestsConfiguration",
                    "infrastructureConfigurationArn",
                    "tags.*",
                    "workflows[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Image(name, id, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested.
        /// </summary>
        [Input("containerRecipeArn")]
        public Input<string>? ContainerRecipeArn { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the distribution configuration.
        /// </summary>
        [Input("distributionConfigurationArn")]
        public Input<string>? DistributionConfigurationArn { get; set; }

        /// <summary>
        /// Collects additional information about the image being created, including the operating system (OS) version and package list.
        /// </summary>
        [Input("enhancedImageMetadataEnabled")]
        public Input<bool>? EnhancedImageMetadataEnabled { get; set; }

        /// <summary>
        /// The execution role name/ARN for the image build, if provided
        /// </summary>
        [Input("executionRole")]
        public Input<string>? ExecutionRole { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed.
        /// </summary>
        [Input("imageRecipeArn")]
        public Input<string>? ImageRecipeArn { get; set; }

        /// <summary>
        /// Contains settings for vulnerability scans.
        /// </summary>
        [Input("imageScanningConfiguration")]
        public Input<Inputs.ImageScanningConfigurationArgs>? ImageScanningConfiguration { get; set; }

        /// <summary>
        /// The image tests configuration used when creating this image.
        /// </summary>
        [Input("imageTestsConfiguration")]
        public Input<Inputs.ImageTestsConfigurationArgs>? ImageTestsConfiguration { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the infrastructure configuration.
        /// </summary>
        [Input("infrastructureConfigurationArn")]
        public Input<string>? InfrastructureConfigurationArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags associated with the image.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("workflows")]
        private InputList<Inputs.ImageWorkflowConfigurationArgs>? _workflows;

        /// <summary>
        /// Workflows to define the image build process
        /// </summary>
        public InputList<Inputs.ImageWorkflowConfigurationArgs> Workflows
        {
            get => _workflows ?? (_workflows = new InputList<Inputs.ImageWorkflowConfigurationArgs>());
            set => _workflows = value;
        }

        public ImageArgs()
        {
        }
        public static new ImageArgs Empty => new ImageArgs();
    }
}
