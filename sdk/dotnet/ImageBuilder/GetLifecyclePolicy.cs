// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ImageBuilder
{
    public static class GetLifecyclePolicy
    {
        /// <summary>
        /// Resource schema for AWS::ImageBuilder::LifecyclePolicy
        /// </summary>
        public static Task<GetLifecyclePolicyResult> InvokeAsync(GetLifecyclePolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLifecyclePolicyResult>("aws-native:imagebuilder:getLifecyclePolicy", args ?? new GetLifecyclePolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::ImageBuilder::LifecyclePolicy
        /// </summary>
        public static Output<GetLifecyclePolicyResult> Invoke(GetLifecyclePolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLifecyclePolicyResult>("aws-native:imagebuilder:getLifecyclePolicy", args ?? new GetLifecyclePolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLifecyclePolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the lifecycle policy.
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetLifecyclePolicyArgs()
        {
        }
        public static new GetLifecyclePolicyArgs Empty => new GetLifecyclePolicyArgs();
    }

    public sealed class GetLifecyclePolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the lifecycle policy.
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetLifecyclePolicyInvokeArgs()
        {
        }
        public static new GetLifecyclePolicyInvokeArgs Empty => new GetLifecyclePolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetLifecyclePolicyResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the lifecycle policy.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The description of the lifecycle policy.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The execution role of the lifecycle policy.
        /// </summary>
        public readonly string? ExecutionRole;
        /// <summary>
        /// The policy details of the lifecycle policy.
        /// </summary>
        public readonly ImmutableArray<Outputs.LifecyclePolicyPolicyDetail> PolicyDetails;
        /// <summary>
        /// The resource selection of the lifecycle policy.
        /// </summary>
        public readonly Outputs.LifecyclePolicyResourceSelection? ResourceSelection;
        /// <summary>
        /// The resource type of the lifecycle policy.
        /// </summary>
        public readonly Pulumi.AwsNative.ImageBuilder.LifecyclePolicyResourceType? ResourceType;
        /// <summary>
        /// The status of the lifecycle policy.
        /// </summary>
        public readonly Pulumi.AwsNative.ImageBuilder.LifecyclePolicyStatus? Status;
        /// <summary>
        /// The tags associated with the lifecycle policy.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetLifecyclePolicyResult(
            string? arn,

            string? description,

            string? executionRole,

            ImmutableArray<Outputs.LifecyclePolicyPolicyDetail> policyDetails,

            Outputs.LifecyclePolicyResourceSelection? resourceSelection,

            Pulumi.AwsNative.ImageBuilder.LifecyclePolicyResourceType? resourceType,

            Pulumi.AwsNative.ImageBuilder.LifecyclePolicyStatus? status,

            ImmutableDictionary<string, string>? tags)
        {
            Arn = arn;
            Description = description;
            ExecutionRole = executionRole;
            PolicyDetails = policyDetails;
            ResourceSelection = resourceSelection;
            ResourceType = resourceType;
            Status = status;
            Tags = tags;
        }
    }
}
