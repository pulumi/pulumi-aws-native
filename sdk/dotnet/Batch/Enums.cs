// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Batch
{
    /// <summary>
    /// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is `CANCEL` , which will cancel the job.
    /// </summary>
    [EnumType]
    public readonly struct JobQueueJobStateTimeLimitActionAction : IEquatable<JobQueueJobStateTimeLimitActionAction>
    {
        private readonly string _value;

        private JobQueueJobStateTimeLimitActionAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobQueueJobStateTimeLimitActionAction Cancel { get; } = new JobQueueJobStateTimeLimitActionAction("CANCEL");

        public static bool operator ==(JobQueueJobStateTimeLimitActionAction left, JobQueueJobStateTimeLimitActionAction right) => left.Equals(right);
        public static bool operator !=(JobQueueJobStateTimeLimitActionAction left, JobQueueJobStateTimeLimitActionAction right) => !left.Equals(right);

        public static explicit operator string(JobQueueJobStateTimeLimitActionAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobQueueJobStateTimeLimitActionAction other && Equals(other);
        public bool Equals(JobQueueJobStateTimeLimitActionAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the job needed to trigger the action. The only supported value is `RUNNABLE` .
    /// </summary>
    [EnumType]
    public readonly struct JobQueueJobStateTimeLimitActionState : IEquatable<JobQueueJobStateTimeLimitActionState>
    {
        private readonly string _value;

        private JobQueueJobStateTimeLimitActionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobQueueJobStateTimeLimitActionState Runnable { get; } = new JobQueueJobStateTimeLimitActionState("RUNNABLE");

        public static bool operator ==(JobQueueJobStateTimeLimitActionState left, JobQueueJobStateTimeLimitActionState right) => left.Equals(right);
        public static bool operator !=(JobQueueJobStateTimeLimitActionState left, JobQueueJobStateTimeLimitActionState right) => !left.Equals(right);

        public static explicit operator string(JobQueueJobStateTimeLimitActionState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobQueueJobStateTimeLimitActionState other && Equals(other);
        public bool Equals(JobQueueJobStateTimeLimitActionState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of the job queue. If the job queue state is `ENABLED` , it is able to accept jobs. If the job queue state is `DISABLED` , new jobs can't be added to the queue, but jobs already in the queue can finish.
    /// </summary>
    [EnumType]
    public readonly struct JobQueueState : IEquatable<JobQueueState>
    {
        private readonly string _value;

        private JobQueueState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobQueueState Disabled { get; } = new JobQueueState("DISABLED");
        public static JobQueueState Enabled { get; } = new JobQueueState("ENABLED");

        public static bool operator ==(JobQueueState left, JobQueueState right) => left.Equals(right);
        public static bool operator !=(JobQueueState left, JobQueueState right) => !left.Equals(right);

        public static explicit operator string(JobQueueState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobQueueState other && Equals(other);
        public bool Equals(JobQueueState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
