// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch
{
    /// <summary>
    /// Resource Type definition for AWS::Batch::ServiceEnvironment
    /// </summary>
    [AwsNativeResourceType("aws-native:batch:ServiceEnvironment")]
    public partial class ServiceEnvironment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The capacity limits for the service environment. This defines the maximum resources that can be used by service jobs in this environment.
        /// </summary>
        [Output("capacityLimits")]
        public Output<ImmutableArray<Outputs.ServiceEnvironmentCapacityLimit>> CapacityLimits { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the service environment.
        /// </summary>
        [Output("serviceEnvironmentArn")]
        public Output<string> ServiceEnvironmentArn { get; private set; } = null!;

        /// <summary>
        /// The name of the service environment.
        /// </summary>
        [Output("serviceEnvironmentName")]
        public Output<string?> ServiceEnvironmentName { get; private set; } = null!;

        /// <summary>
        /// The type of service environment. For SageMaker Training jobs, this value is `SAGEMAKER_TRAINING` .
        /// </summary>
        [Output("serviceEnvironmentType")]
        public Output<string> ServiceEnvironmentType { get; private set; } = null!;

        /// <summary>
        /// The state of the service environment. Valid values are `ENABLED` and `DISABLED` .
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// A key-value pair to associate with a resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceEnvironment(string name, ServiceEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("aws-native:batch:ServiceEnvironment", name, args ?? new ServiceEnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceEnvironment(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:batch:ServiceEnvironment", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "serviceEnvironmentName",
                    "serviceEnvironmentType",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceEnvironment Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ServiceEnvironment(name, id, options);
        }
    }

    public sealed class ServiceEnvironmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("capacityLimits", required: true)]
        private InputList<Inputs.ServiceEnvironmentCapacityLimitArgs>? _capacityLimits;

        /// <summary>
        /// The capacity limits for the service environment. This defines the maximum resources that can be used by service jobs in this environment.
        /// </summary>
        public InputList<Inputs.ServiceEnvironmentCapacityLimitArgs> CapacityLimits
        {
            get => _capacityLimits ?? (_capacityLimits = new InputList<Inputs.ServiceEnvironmentCapacityLimitArgs>());
            set => _capacityLimits = value;
        }

        /// <summary>
        /// The name of the service environment.
        /// </summary>
        [Input("serviceEnvironmentName")]
        public Input<string>? ServiceEnvironmentName { get; set; }

        /// <summary>
        /// The type of service environment. For SageMaker Training jobs, this value is `SAGEMAKER_TRAINING` .
        /// </summary>
        [Input("serviceEnvironmentType", required: true)]
        public Input<string> ServiceEnvironmentType { get; set; } = null!;

        /// <summary>
        /// The state of the service environment. Valid values are `ENABLED` and `DISABLED` .
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A key-value pair to associate with a resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ServiceEnvironmentArgs()
        {
        }
        public static new ServiceEnvironmentArgs Empty => new ServiceEnvironmentArgs();
    }
}
