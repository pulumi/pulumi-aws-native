// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch.Outputs
{

    [OutputType]
    public sealed class JobDefinitionEksContainer
    {
        /// <summary>
        /// An array of arguments to the entrypoint. If this isn't specified, the `CMD` of the container image is used. This corresponds to the `args` member in the [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) portion of the [Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) in Kubernetes. Environment variable references are expanded using the container's environment.
        /// 
        /// If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` , and the resulting string isn't expanded. For example, `$$(VAR_NAME)` is passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. For more information, see [Dockerfile reference: CMD](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) and [Define a command and arguments for a pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the *Kubernetes documentation* .
        /// </summary>
        public readonly ImmutableArray<string> Args;
        /// <summary>
        /// The entrypoint for the container. This isn't run within a shell. If this isn't specified, the `ENTRYPOINT` of the container image is used. Environment variable references are expanded using the container's environment.
        /// 
        /// If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` and the resulting string isn't expanded. For example, `$$(VAR_NAME)` will be passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. The entrypoint can't be updated. For more information, see [ENTRYPOINT](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint) in the *Dockerfile reference* and [Define a command and arguments for a container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) and [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) in the *Kubernetes documentation* .
        /// </summary>
        public readonly ImmutableArray<string> Command;
        /// <summary>
        /// The environment variables to pass to a container.
        /// 
        /// &gt; Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
        /// </summary>
        public readonly ImmutableArray<Outputs.JobDefinitionEksContainerEnvironmentVariable> Env;
        /// <summary>
        /// The Docker image used to start the container.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// The image pull policy for the container. Supported values are `Always` , `IfNotPresent` , and `Never` . This parameter defaults to `IfNotPresent` . However, if the `:latest` tag is specified, it defaults to `Always` . For more information, see [Updating images](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/containers/images/#updating-images) in the *Kubernetes documentation* .
        /// </summary>
        public readonly string? ImagePullPolicy;
        /// <summary>
        /// The name of the container. If the name isn't specified, the default name " `Default` " is used. Each container in a pod must have a unique name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The type and amount of resources to assign to a container. The supported resources include `memory` , `cpu` , and `nvidia.com/gpu` . For more information, see [Resource management for pods and containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the *Kubernetes documentation* .
        /// </summary>
        public readonly Outputs.JobDefinitionEksContainerResourceRequirements? Resources;
        /// <summary>
        /// The security context for a job. For more information, see [Configure a security context for a pod or container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the *Kubernetes documentation* .
        /// </summary>
        public readonly Outputs.JobDefinitionEksContainerSecurityContext? SecurityContext;
        /// <summary>
        /// The volume mounts for the container. AWS Batch supports `emptyDir` , `hostPath` , and `secret` volume types. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/) in the *Kubernetes documentation* .
        /// </summary>
        public readonly ImmutableArray<Outputs.JobDefinitionEksContainerVolumeMount> VolumeMounts;

        [OutputConstructor]
        private JobDefinitionEksContainer(
            ImmutableArray<string> args,

            ImmutableArray<string> command,

            ImmutableArray<Outputs.JobDefinitionEksContainerEnvironmentVariable> env,

            string image,

            string? imagePullPolicy,

            string? name,

            Outputs.JobDefinitionEksContainerResourceRequirements? resources,

            Outputs.JobDefinitionEksContainerSecurityContext? securityContext,

            ImmutableArray<Outputs.JobDefinitionEksContainerVolumeMount> volumeMounts)
        {
            Args = args;
            Command = command;
            Env = env;
            Image = image;
            ImagePullPolicy = imagePullPolicy;
            Name = name;
            Resources = resources;
            SecurityContext = securityContext;
            VolumeMounts = volumeMounts;
        }
    }
}
