// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch.Outputs
{

    [OutputType]
    public sealed class JobDefinitionEvaluateOnExit
    {
        /// <summary>
        /// Specifies the action to take if all of the specified conditions ( `onStatusReason` , `onReason` , and `onExitCode` ) are met. The values aren't case sensitive.
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// Contains a glob pattern to match against the decimal representation of the `ExitCode` returned for a job. The pattern can be up to 512 characters long. It can contain only numbers, and can end with an asterisk (*) so that only the start of the string needs to be an exact match.
        /// 
        /// The string can contain up to 512 characters.
        /// </summary>
        public readonly string? OnExitCode;
        /// <summary>
        /// Contains a glob pattern to match against the `Reason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        /// </summary>
        public readonly string? OnReason;
        /// <summary>
        /// Contains a glob pattern to match against the `StatusReason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white spaces (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
        /// </summary>
        public readonly string? OnStatusReason;

        [OutputConstructor]
        private JobDefinitionEvaluateOnExit(
            string action,

            string? onExitCode,

            string? onReason,

            string? onStatusReason)
        {
            Action = action;
            OnExitCode = onExitCode;
            OnReason = onReason;
            OnStatusReason = onStatusReason;
        }
    }
}
