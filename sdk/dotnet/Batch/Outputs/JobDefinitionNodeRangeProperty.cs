// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch.Outputs
{

    [OutputType]
    public sealed class JobDefinitionNodeRangeProperty
    {
        /// <summary>
        /// The container details for the node range.
        /// </summary>
        public readonly Outputs.JobDefinitionContainerProperties? Container;
        /// <summary>
        /// This is an object that represents the properties of the node range for a multi-node parallel job.
        /// </summary>
        public readonly Outputs.JobDefinitionEcsProperties? EcsProperties;
        /// <summary>
        /// This is an object that represents the properties of the node range for a multi-node parallel job.
        /// </summary>
        public readonly Outputs.JobDefinitionEksProperties? EksProperties;
        /// <summary>
        /// The instance types of the underlying host infrastructure of a multi-node parallel job.
        /// 
        /// &gt; This parameter isn't applicable to jobs that are running on Fargate resources.
        /// &gt; 
        /// &gt; In addition, this list object is currently limited to one element.
        /// </summary>
        public readonly ImmutableArray<string> InstanceTypes;
        /// <summary>
        /// The range of nodes, using node index values. A range of `0:3` indicates nodes with index values of `0` through `3` . If the starting range value is omitted ( `:n` ), then `0` is used to start the range. If the ending range value is omitted ( `n:` ), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes ( `0:n` ). You can nest node ranges (for example, `0:10` and `4:5` ). In this case, the `4:5` range properties override the `0:10` properties.
        /// </summary>
        public readonly string TargetNodes;

        [OutputConstructor]
        private JobDefinitionNodeRangeProperty(
            Outputs.JobDefinitionContainerProperties? container,

            Outputs.JobDefinitionEcsProperties? ecsProperties,

            Outputs.JobDefinitionEksProperties? eksProperties,

            ImmutableArray<string> instanceTypes,

            string targetNodes)
        {
            Container = container;
            EcsProperties = ecsProperties;
            EksProperties = eksProperties;
            InstanceTypes = instanceTypes;
            TargetNodes = targetNodes;
        }
    }
}
