// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch.Outputs
{

    /// <summary>
    /// Fair Share Policy for the Job Queue.
    /// </summary>
    [OutputType]
    public sealed class SchedulingPolicyFairsharePolicy
    {
        /// <summary>
        /// A value used to reserve some of the available maximum vCPU for share identifiers that aren't already used.
        /// 
        /// The reserved ratio is `( *computeReservation* /100)^ *ActiveFairShares*` where `*ActiveFairShares*` is the number of active share identifiers.
        /// 
        /// For example, a `computeReservation` value of 50 indicates that AWS Batch reserves 50% of the maximum available vCPU if there's only one share identifier. It reserves 25% if there are two share identifiers. It reserves 12.5% if there are three share identifiers. A `computeReservation` value of 25 indicates that AWS Batch should reserve 25% of the maximum available vCPU if there's only one share identifier, 6.25% if there are two fair share identifiers, and 1.56% if there are three share identifiers.
        /// 
        /// The minimum value is 0 and the maximum value is 99.
        /// </summary>
        public readonly double? ComputeReservation;
        /// <summary>
        /// The amount of time (in seconds) to use to calculate a fair-share percentage for each share identifier in use. A value of zero (0) indicates the default minimum time window (600 seconds). The maximum supported value is 604800 (1 week).
        /// 
        /// The decay allows for more recently run jobs to have more weight than jobs that ran earlier. Consider adjusting this number if you have jobs that (on average) run longer than ten minutes, or a large difference in job count or job run times between share identifiers, and the allocation of resources doesnâ€™t meet your needs.
        /// </summary>
        public readonly double? ShareDecaySeconds;
        /// <summary>
        /// List of Share Attributes
        /// </summary>
        public readonly ImmutableArray<Outputs.SchedulingPolicyShareAttributes> ShareDistribution;

        [OutputConstructor]
        private SchedulingPolicyFairsharePolicy(
            double? computeReservation,

            double? shareDecaySeconds,

            ImmutableArray<Outputs.SchedulingPolicyShareAttributes> shareDistribution)
        {
            ComputeReservation = computeReservation;
            ShareDecaySeconds = shareDecaySeconds;
            ShareDistribution = shareDistribution;
        }
    }
}
