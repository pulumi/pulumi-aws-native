// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch.Inputs
{

    public sealed class JobDefinitionMultiNodeEcsTaskPropertiesArgs : global::Pulumi.ResourceArgs
    {
        [Input("containers")]
        private InputList<Inputs.JobDefinitionTaskContainerPropertiesArgs>? _containers;

        /// <summary>
        /// This object is a list of containers.
        /// </summary>
        public InputList<Inputs.JobDefinitionTaskContainerPropertiesArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.JobDefinitionTaskContainerPropertiesArgs>());
            set => _containers = value;
        }

        [Input("enableExecuteCommand")]
        public Input<bool>? EnableExecuteCommand { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
        /// </summary>
        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        /// <summary>
        /// The IPC resource namespace to use for the containers in the task. The valid values are `host` , `task` , or `none` .
        /// 
        /// If `host` is specified, all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance.
        /// 
        /// If `task` is specified, all containers within the specified `task` share the same IPC resources.
        /// 
        /// If `none` is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance.
        /// 
        /// If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference.
        /// </summary>
        [Input("ipcMode")]
        public Input<string>? IpcMode { get; set; }

        /// <summary>
        /// The process namespace to use for the containers in the task. The valid values are `host` or `task` . For example, monitoring sidecars might need `pidMode` to access information about other containers running in the same task.
        /// 
        /// If `host` is specified, all containers within the tasks that specified the `host` PID mode on the same container instance share the process namespace with the host Amazon EC2 instance.
        /// 
        /// If `task` is specified, all containers within the specified task share the same process namespace.
        /// 
        /// If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference.
        /// </summary>
        [Input("pidMode")]
        public Input<string>? PidMode { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) that's associated with the Amazon ECS task.
        /// 
        /// &gt; This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html) .
        /// </summary>
        [Input("taskRoleArn")]
        public Input<string>? TaskRoleArn { get; set; }

        [Input("volumes")]
        private InputList<Inputs.JobDefinitionVolumeArgs>? _volumes;

        /// <summary>
        /// A list of volumes that are associated with the job.
        /// </summary>
        public InputList<Inputs.JobDefinitionVolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.JobDefinitionVolumeArgs>());
            set => _volumes = value;
        }

        public JobDefinitionMultiNodeEcsTaskPropertiesArgs()
        {
        }
        public static new JobDefinitionMultiNodeEcsTaskPropertiesArgs Empty => new JobDefinitionMultiNodeEcsTaskPropertiesArgs();
    }
}
