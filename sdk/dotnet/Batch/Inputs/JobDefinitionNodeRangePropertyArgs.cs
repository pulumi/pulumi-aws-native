// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch.Inputs
{

    public sealed class JobDefinitionNodeRangePropertyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The container details for the node range.
        /// </summary>
        [Input("container")]
        public Input<Inputs.JobDefinitionContainerPropertiesArgs>? Container { get; set; }

        /// <summary>
        /// This is an object that represents the properties of the node range for a multi-node parallel job.
        /// </summary>
        [Input("ecsProperties")]
        public Input<Inputs.JobDefinitionEcsPropertiesArgs>? EcsProperties { get; set; }

        [Input("eksProperties")]
        public Input<Inputs.JobDefinitionEksPropertiesArgs>? EksProperties { get; set; }

        [Input("instanceTypes")]
        private InputList<string>? _instanceTypes;

        /// <summary>
        /// The instance types of the underlying host infrastructure of a multi-node parallel job.
        /// 
        /// &gt; This parameter isn't applicable to jobs that are running on Fargate resources.
        /// &gt; 
        /// &gt; In addition, this list object is currently limited to one element.
        /// </summary>
        public InputList<string> InstanceTypes
        {
            get => _instanceTypes ?? (_instanceTypes = new InputList<string>());
            set => _instanceTypes = value;
        }

        /// <summary>
        /// The range of nodes, using node index values. A range of `0:3` indicates nodes with index values of `0` through `3` . If the starting range value is omitted ( `:n` ), then `0` is used to start the range. If the ending range value is omitted ( `n:` ), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes ( `0:n` ). You can nest node ranges (for example, `0:10` and `4:5` ). In this case, the `4:5` range properties override the `0:10` properties.
        /// </summary>
        [Input("targetNodes", required: true)]
        public Input<string> TargetNodes { get; set; } = null!;

        public JobDefinitionNodeRangePropertyArgs()
        {
        }
        public static new JobDefinitionNodeRangePropertyArgs Empty => new JobDefinitionNodeRangePropertyArgs();
    }
}
