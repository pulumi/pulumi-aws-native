// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch
{
    public static class GetJobDefinition
    {
        /// <summary>
        /// Resource Type definition for AWS::Batch::JobDefinition
        /// </summary>
        public static Task<GetJobDefinitionResult> InvokeAsync(GetJobDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetJobDefinitionResult>("aws-native:batch:getJobDefinition", args ?? new GetJobDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Batch::JobDefinition
        /// </summary>
        public static Output<GetJobDefinitionResult> Invoke(GetJobDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetJobDefinitionResult>("aws-native:batch:getJobDefinition", args ?? new GetJobDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetJobDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the job definition.
        /// </summary>
        [Input("jobDefinitionName", required: true)]
        public string JobDefinitionName { get; set; } = null!;

        public GetJobDefinitionArgs()
        {
        }
        public static new GetJobDefinitionArgs Empty => new GetJobDefinitionArgs();
    }

    public sealed class GetJobDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the job definition.
        /// </summary>
        [Input("jobDefinitionName", required: true)]
        public Input<string> JobDefinitionName { get; set; } = null!;

        public GetJobDefinitionInvokeArgs()
        {
        }
        public static new GetJobDefinitionInvokeArgs Empty => new GetJobDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetJobDefinitionResult
    {
        /// <summary>
        /// An object with properties specific to Amazon ECS-based jobs. When `containerProperties` is used in the job definition, it can't be used in addition to `eksProperties` , `ecsProperties` , or `nodeProperties` .
        /// </summary>
        public readonly Outputs.JobDefinitionContainerProperties? ContainerProperties;
        /// <summary>
        /// An object that contains the properties for the Amazon ECS resources of a job.When `ecsProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `eksProperties` , or `nodeProperties` .
        /// </summary>
        public readonly Outputs.JobDefinitionEcsProperties? EcsProperties;
        /// <summary>
        /// An object with properties that are specific to Amazon EKS-based jobs. When `eksProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `nodeProperties` .
        /// </summary>
        public readonly Outputs.JobDefinitionEksProperties? EksProperties;
        /// <summary>
        /// An object with properties that are specific to multi-node parallel jobs. When `nodeProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `eksProperties` .
        /// 
        /// &gt; If the job runs on Fargate resources, don't specify `nodeProperties` . Use `containerProperties` instead.
        /// </summary>
        public readonly Outputs.JobDefinitionNodeProperties? NodeProperties;
        /// <summary>
        /// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a `SubmitJob` request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the *AWS Batch User Guide* .
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Parameters;
        /// <summary>
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2` . Jobs run on Fargate resources specify `FARGATE` .
        /// </summary>
        public readonly ImmutableArray<string> PlatformCapabilities;
        /// <summary>
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the `FAILED` state.
        /// </summary>
        public readonly bool? PropagateTags;
        /// <summary>
        /// The retry strategy to use for failed jobs that are submitted with this job definition.
        /// </summary>
        public readonly Outputs.JobDefinitionRetryStrategy? RetryStrategy;
        /// <summary>
        /// The scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        /// </summary>
        public readonly int? SchedulingPriority;
        /// <summary>
        /// A key-value pair to associate with a resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, AWS Batch terminates your jobs if they aren't finished.
        /// </summary>
        public readonly Outputs.JobDefinitionJobTimeout? Timeout;
        /// <summary>
        /// The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the *AWS Batch User Guide* .
        /// 
        /// - If the value is `container` , then one of the following is required: `containerProperties` , `ecsProperties` , or `eksProperties` .
        /// - If the value is `multinode` , then `nodeProperties` is required.
        /// 
        /// &gt; If the job is run on Fargate resources, then `multinode` isn't supported.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetJobDefinitionResult(
            Outputs.JobDefinitionContainerProperties? containerProperties,

            Outputs.JobDefinitionEcsProperties? ecsProperties,

            Outputs.JobDefinitionEksProperties? eksProperties,

            Outputs.JobDefinitionNodeProperties? nodeProperties,

            ImmutableDictionary<string, string>? parameters,

            ImmutableArray<string> platformCapabilities,

            bool? propagateTags,

            Outputs.JobDefinitionRetryStrategy? retryStrategy,

            int? schedulingPriority,

            ImmutableDictionary<string, string>? tags,

            Outputs.JobDefinitionJobTimeout? timeout,

            string? type)
        {
            ContainerProperties = containerProperties;
            EcsProperties = ecsProperties;
            EksProperties = eksProperties;
            NodeProperties = nodeProperties;
            Parameters = parameters;
            PlatformCapabilities = platformCapabilities;
            PropagateTags = propagateTags;
            RetryStrategy = retryStrategy;
            SchedulingPriority = schedulingPriority;
            Tags = tags;
            Timeout = timeout;
            Type = type;
        }
    }
}
