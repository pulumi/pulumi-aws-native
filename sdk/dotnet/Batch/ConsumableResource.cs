// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch
{
    /// <summary>
    /// Resource Type schema for AWS::Batch::ConsumableResource
    /// </summary>
    [AwsNativeResourceType("aws-native:batch:ConsumableResource")]
    public partial class ConsumableResource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Available Quantity of ConsumableResource.
        /// </summary>
        [Output("availableQuantity")]
        public Output<int> AvailableQuantity { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the consumable resource.
        /// </summary>
        [Output("consumableResourceArn")]
        public Output<string> ConsumableResourceArn { get; private set; } = null!;

        /// <summary>
        /// Name of ConsumableResource.
        /// </summary>
        [Output("consumableResourceName")]
        public Output<string?> ConsumableResourceName { get; private set; } = null!;

        /// <summary>
        /// The Unix timestamp (in milliseconds) for when the consumable resource was created.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// In-use Quantity of ConsumableResource.
        /// </summary>
        [Output("inUseQuantity")]
        public Output<int> InUseQuantity { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the resource is available to be re-used after a job completes. Can be one of:
        /// 
        /// - `REPLENISHABLE`
        /// - `NON_REPLENISHABLE`
        /// </summary>
        [Output("resourceType")]
        public Output<Pulumi.AwsNative.Batch.ConsumableResourceResourceType> ResourceType { get; private set; } = null!;

        /// <summary>
        /// A key-value pair to associate with a resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Total Quantity of ConsumableResource.
        /// </summary>
        [Output("totalQuantity")]
        public Output<int> TotalQuantity { get; private set; } = null!;


        /// <summary>
        /// Create a ConsumableResource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConsumableResource(string name, ConsumableResourceArgs args, CustomResourceOptions? options = null)
            : base("aws-native:batch:ConsumableResource", name, args ?? new ConsumableResourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConsumableResource(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:batch:ConsumableResource", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "consumableResourceName",
                    "resourceType",
                    "tags.*",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConsumableResource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConsumableResource Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ConsumableResource(name, id, options);
        }
    }

    public sealed class ConsumableResourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of ConsumableResource.
        /// </summary>
        [Input("consumableResourceName")]
        public Input<string>? ConsumableResourceName { get; set; }

        /// <summary>
        /// Indicates whether the resource is available to be re-used after a job completes. Can be one of:
        /// 
        /// - `REPLENISHABLE`
        /// - `NON_REPLENISHABLE`
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<Pulumi.AwsNative.Batch.ConsumableResourceResourceType> ResourceType { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A key-value pair to associate with a resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Total Quantity of ConsumableResource.
        /// </summary>
        [Input("totalQuantity", required: true)]
        public Input<int> TotalQuantity { get; set; } = null!;

        public ConsumableResourceArgs()
        {
        }
        public static new ConsumableResourceArgs Empty => new ConsumableResourceArgs();
    }
}
