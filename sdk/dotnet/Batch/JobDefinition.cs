// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Batch
{
    /// <summary>
    /// Resource Type definition for AWS::Batch::JobDefinition
    /// </summary>
    [AwsNativeResourceType("aws-native:batch:JobDefinition")]
    public partial class JobDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Contains a list of consumable resources required by the job.
        /// </summary>
        [Output("consumableResourceProperties")]
        public Output<Outputs.JobDefinitionConsumableResourceProperties?> ConsumableResourceProperties { get; private set; } = null!;

        /// <summary>
        /// An object with properties specific to Amazon ECS-based jobs. When `containerProperties` is used in the job definition, it can't be used in addition to `eksProperties` , `ecsProperties` , or `nodeProperties` .
        /// </summary>
        [Output("containerProperties")]
        public Output<Outputs.JobDefinitionContainerProperties?> ContainerProperties { get; private set; } = null!;

        /// <summary>
        /// An object that contains the properties for the Amazon ECS resources of a job.When `ecsProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `eksProperties` , or `nodeProperties` .
        /// </summary>
        [Output("ecsProperties")]
        public Output<Outputs.JobDefinitionEcsProperties?> EcsProperties { get; private set; } = null!;

        /// <summary>
        /// An object with properties that are specific to Amazon EKS-based jobs. When `eksProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `nodeProperties` .
        /// </summary>
        [Output("eksProperties")]
        public Output<Outputs.JobDefinitionEksProperties?> EksProperties { get; private set; } = null!;

        /// <summary>
        /// The name of the job definition.
        /// </summary>
        [Output("jobDefinitionName")]
        public Output<string?> JobDefinitionName { get; private set; } = null!;

        /// <summary>
        /// An object with properties that are specific to multi-node parallel jobs. When `nodeProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `eksProperties` .
        /// 
        /// &gt; If the job runs on Fargate resources, don't specify `nodeProperties` . Use `containerProperties` instead.
        /// </summary>
        [Output("nodeProperties")]
        public Output<Outputs.JobDefinitionNodeProperties?> NodeProperties { get; private set; } = null!;

        /// <summary>
        /// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a `SubmitJob` request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the *AWS Batch User Guide* .
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2` . Jobs run on Fargate resources specify `FARGATE` .
        /// </summary>
        [Output("platformCapabilities")]
        public Output<ImmutableArray<string>> PlatformCapabilities { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the `FAILED` state.
        /// </summary>
        [Output("propagateTags")]
        public Output<bool?> PropagateTags { get; private set; } = null!;

        /// <summary>
        /// The retry strategy to use for failed jobs that are submitted with this job definition.
        /// </summary>
        [Output("retryStrategy")]
        public Output<Outputs.JobDefinitionRetryStrategy?> RetryStrategy { get; private set; } = null!;

        /// <summary>
        /// The scheduling priority of the job definition. This only affects jobs in job queues with a fair-share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        /// </summary>
        [Output("schedulingPriority")]
        public Output<int?> SchedulingPriority { get; private set; } = null!;

        /// <summary>
        /// A key-value pair to associate with a resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, AWS Batch terminates your jobs if they aren't finished.
        /// </summary>
        [Output("timeout")]
        public Output<Outputs.JobDefinitionJobTimeout?> Timeout { get; private set; } = null!;

        /// <summary>
        /// The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the *AWS Batch User Guide* .
        /// 
        /// - If the value is `container` , then one of the following is required: `containerProperties` , `ecsProperties` , or `eksProperties` .
        /// - If the value is `multinode` , then `nodeProperties` is required.
        /// 
        /// &gt; If the job is run on Fargate resources, then `multinode` isn't supported.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a JobDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public JobDefinition(string name, JobDefinitionArgs args, CustomResourceOptions? options = null)
            : base("aws-native:batch:JobDefinition", name, args ?? new JobDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private JobDefinition(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:batch:JobDefinition", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "jobDefinitionName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing JobDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static JobDefinition Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new JobDefinition(name, id, options);
        }
    }

    public sealed class JobDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Contains a list of consumable resources required by the job.
        /// </summary>
        [Input("consumableResourceProperties")]
        public Input<Inputs.JobDefinitionConsumableResourcePropertiesArgs>? ConsumableResourceProperties { get; set; }

        /// <summary>
        /// An object with properties specific to Amazon ECS-based jobs. When `containerProperties` is used in the job definition, it can't be used in addition to `eksProperties` , `ecsProperties` , or `nodeProperties` .
        /// </summary>
        [Input("containerProperties")]
        public Input<Inputs.JobDefinitionContainerPropertiesArgs>? ContainerProperties { get; set; }

        /// <summary>
        /// An object that contains the properties for the Amazon ECS resources of a job.When `ecsProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `eksProperties` , or `nodeProperties` .
        /// </summary>
        [Input("ecsProperties")]
        public Input<Inputs.JobDefinitionEcsPropertiesArgs>? EcsProperties { get; set; }

        /// <summary>
        /// An object with properties that are specific to Amazon EKS-based jobs. When `eksProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `nodeProperties` .
        /// </summary>
        [Input("eksProperties")]
        public Input<Inputs.JobDefinitionEksPropertiesArgs>? EksProperties { get; set; }

        /// <summary>
        /// The name of the job definition.
        /// </summary>
        [Input("jobDefinitionName")]
        public Input<string>? JobDefinitionName { get; set; }

        /// <summary>
        /// An object with properties that are specific to multi-node parallel jobs. When `nodeProperties` is used in the job definition, it can't be used in addition to `containerProperties` , `ecsProperties` , or `eksProperties` .
        /// 
        /// &gt; If the job runs on Fargate resources, don't specify `nodeProperties` . Use `containerProperties` instead.
        /// </summary>
        [Input("nodeProperties")]
        public Input<Inputs.JobDefinitionNodePropertiesArgs>? NodeProperties { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a `SubmitJob` request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see [Job definition parameters](https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html) in the *AWS Batch User Guide* .
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        [Input("platformCapabilities")]
        private InputList<string>? _platformCapabilities;

        /// <summary>
        /// The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2` . Jobs run on Fargate resources specify `FARGATE` .
        /// </summary>
        public InputList<string> PlatformCapabilities
        {
            get => _platformCapabilities ?? (_platformCapabilities = new InputList<string>());
            set => _platformCapabilities = value;
        }

        /// <summary>
        /// Specifies whether to propagate the tags from the job or job definition to the corresponding Amazon ECS task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the tasks when the tasks are created. For tags with the same name, job tags are given priority over job definitions tags. If the total number of combined tags from the job and job definition is over 50, the job is moved to the `FAILED` state.
        /// </summary>
        [Input("propagateTags")]
        public Input<bool>? PropagateTags { get; set; }

        /// <summary>
        /// The retry strategy to use for failed jobs that are submitted with this job definition.
        /// </summary>
        [Input("retryStrategy")]
        public Input<Inputs.JobDefinitionRetryStrategyArgs>? RetryStrategy { get; set; }

        /// <summary>
        /// The scheduling priority of the job definition. This only affects jobs in job queues with a fair-share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        /// </summary>
        [Input("schedulingPriority")]
        public Input<int>? SchedulingPriority { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A key-value pair to associate with a resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The timeout time for jobs that are submitted with this job definition. After the amount of time you specify passes, AWS Batch terminates your jobs if they aren't finished.
        /// </summary>
        [Input("timeout")]
        public Input<Inputs.JobDefinitionJobTimeoutArgs>? Timeout { get; set; }

        /// <summary>
        /// The type of job definition. For more information about multi-node parallel jobs, see [Creating a multi-node parallel job definition](https://docs.aws.amazon.com/batch/latest/userguide/multi-node-job-def.html) in the *AWS Batch User Guide* .
        /// 
        /// - If the value is `container` , then one of the following is required: `containerProperties` , `ecsProperties` , or `eksProperties` .
        /// - If the value is `multinode` , then `nodeProperties` is required.
        /// 
        /// &gt; If the job is run on Fargate resources, then `multinode` isn't supported.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public JobDefinitionArgs()
        {
        }
        public static new JobDefinitionArgs Empty => new JobDefinitionArgs();
    }
}
