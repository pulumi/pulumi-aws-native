// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.DataBrew
{
    /// <summary>
    /// Parameter type
    /// </summary>
    [EnumType]
    public readonly struct DatasetDatasetParameterType : IEquatable<DatasetDatasetParameterType>
    {
        private readonly string _value;

        private DatasetDatasetParameterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatasetDatasetParameterType String { get; } = new DatasetDatasetParameterType("String");
        public static DatasetDatasetParameterType Number { get; } = new DatasetDatasetParameterType("Number");
        public static DatasetDatasetParameterType Datetime { get; } = new DatasetDatasetParameterType("Datetime");

        public static bool operator ==(DatasetDatasetParameterType left, DatasetDatasetParameterType right) => left.Equals(right);
        public static bool operator !=(DatasetDatasetParameterType left, DatasetDatasetParameterType right) => !left.Equals(right);

        public static explicit operator string(DatasetDatasetParameterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatasetDatasetParameterType other && Equals(other);
        public bool Equals(DatasetDatasetParameterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Order
    /// </summary>
    [EnumType]
    public readonly struct DatasetFilesLimitOrder : IEquatable<DatasetFilesLimitOrder>
    {
        private readonly string _value;

        private DatasetFilesLimitOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatasetFilesLimitOrder Ascending { get; } = new DatasetFilesLimitOrder("ASCENDING");
        public static DatasetFilesLimitOrder Descending { get; } = new DatasetFilesLimitOrder("DESCENDING");

        public static bool operator ==(DatasetFilesLimitOrder left, DatasetFilesLimitOrder right) => left.Equals(right);
        public static bool operator !=(DatasetFilesLimitOrder left, DatasetFilesLimitOrder right) => !left.Equals(right);

        public static explicit operator string(DatasetFilesLimitOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatasetFilesLimitOrder other && Equals(other);
        public bool Equals(DatasetFilesLimitOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ordered by
    /// </summary>
    [EnumType]
    public readonly struct DatasetFilesLimitOrderedBy : IEquatable<DatasetFilesLimitOrderedBy>
    {
        private readonly string _value;

        private DatasetFilesLimitOrderedBy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatasetFilesLimitOrderedBy LastModifiedDate { get; } = new DatasetFilesLimitOrderedBy("LAST_MODIFIED_DATE");

        public static bool operator ==(DatasetFilesLimitOrderedBy left, DatasetFilesLimitOrderedBy right) => left.Equals(right);
        public static bool operator !=(DatasetFilesLimitOrderedBy left, DatasetFilesLimitOrderedBy right) => !left.Equals(right);

        public static explicit operator string(DatasetFilesLimitOrderedBy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatasetFilesLimitOrderedBy other && Equals(other);
        public bool Equals(DatasetFilesLimitOrderedBy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Dataset format
    /// </summary>
    [EnumType]
    public readonly struct DatasetFormat : IEquatable<DatasetFormat>
    {
        private readonly string _value;

        private DatasetFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DatasetFormat Csv { get; } = new DatasetFormat("CSV");
        public static DatasetFormat Json { get; } = new DatasetFormat("JSON");
        public static DatasetFormat Parquet { get; } = new DatasetFormat("PARQUET");
        public static DatasetFormat Excel { get; } = new DatasetFormat("EXCEL");

        public static bool operator ==(DatasetFormat left, DatasetFormat right) => left.Equals(right);
        public static bool operator !=(DatasetFormat left, DatasetFormat right) => !left.Equals(right);

        public static explicit operator string(DatasetFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DatasetFormat other && Equals(other);
        public bool Equals(DatasetFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Database table name
    /// </summary>
    [EnumType]
    public readonly struct JobDatabaseOutputDatabaseOutputMode : IEquatable<JobDatabaseOutputDatabaseOutputMode>
    {
        private readonly string _value;

        private JobDatabaseOutputDatabaseOutputMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobDatabaseOutputDatabaseOutputMode NewTable { get; } = new JobDatabaseOutputDatabaseOutputMode("NEW_TABLE");

        public static bool operator ==(JobDatabaseOutputDatabaseOutputMode left, JobDatabaseOutputDatabaseOutputMode right) => left.Equals(right);
        public static bool operator !=(JobDatabaseOutputDatabaseOutputMode left, JobDatabaseOutputDatabaseOutputMode right) => !left.Equals(right);

        public static explicit operator string(JobDatabaseOutputDatabaseOutputMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobDatabaseOutputDatabaseOutputMode other && Equals(other);
        public bool Equals(JobDatabaseOutputDatabaseOutputMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Encryption mode
    /// </summary>
    [EnumType]
    public readonly struct JobEncryptionMode : IEquatable<JobEncryptionMode>
    {
        private readonly string _value;

        private JobEncryptionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobEncryptionMode SseKms { get; } = new JobEncryptionMode("SSE-KMS");
        public static JobEncryptionMode SseS3 { get; } = new JobEncryptionMode("SSE-S3");

        public static bool operator ==(JobEncryptionMode left, JobEncryptionMode right) => left.Equals(right);
        public static bool operator !=(JobEncryptionMode left, JobEncryptionMode right) => !left.Equals(right);

        public static explicit operator string(JobEncryptionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobEncryptionMode other && Equals(other);
        public bool Equals(JobEncryptionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Log subscription
    /// </summary>
    [EnumType]
    public readonly struct JobLogSubscription : IEquatable<JobLogSubscription>
    {
        private readonly string _value;

        private JobLogSubscription(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobLogSubscription Enable { get; } = new JobLogSubscription("ENABLE");
        public static JobLogSubscription Disable { get; } = new JobLogSubscription("DISABLE");

        public static bool operator ==(JobLogSubscription left, JobLogSubscription right) => left.Equals(right);
        public static bool operator !=(JobLogSubscription left, JobLogSubscription right) => !left.Equals(right);

        public static explicit operator string(JobLogSubscription value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobLogSubscription other && Equals(other);
        public bool Equals(JobLogSubscription other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct JobOutputCompressionFormat : IEquatable<JobOutputCompressionFormat>
    {
        private readonly string _value;

        private JobOutputCompressionFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobOutputCompressionFormat Gzip { get; } = new JobOutputCompressionFormat("GZIP");
        public static JobOutputCompressionFormat Lz4 { get; } = new JobOutputCompressionFormat("LZ4");
        public static JobOutputCompressionFormat Snappy { get; } = new JobOutputCompressionFormat("SNAPPY");
        public static JobOutputCompressionFormat Bzip2 { get; } = new JobOutputCompressionFormat("BZIP2");
        public static JobOutputCompressionFormat Deflate { get; } = new JobOutputCompressionFormat("DEFLATE");
        public static JobOutputCompressionFormat Lzo { get; } = new JobOutputCompressionFormat("LZO");
        public static JobOutputCompressionFormat Brotli { get; } = new JobOutputCompressionFormat("BROTLI");
        public static JobOutputCompressionFormat Zstd { get; } = new JobOutputCompressionFormat("ZSTD");
        public static JobOutputCompressionFormat Zlib { get; } = new JobOutputCompressionFormat("ZLIB");

        public static bool operator ==(JobOutputCompressionFormat left, JobOutputCompressionFormat right) => left.Equals(right);
        public static bool operator !=(JobOutputCompressionFormat left, JobOutputCompressionFormat right) => !left.Equals(right);

        public static explicit operator string(JobOutputCompressionFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobOutputCompressionFormat other && Equals(other);
        public bool Equals(JobOutputCompressionFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct JobOutputFormat : IEquatable<JobOutputFormat>
    {
        private readonly string _value;

        private JobOutputFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobOutputFormat Csv { get; } = new JobOutputFormat("CSV");
        public static JobOutputFormat Json { get; } = new JobOutputFormat("JSON");
        public static JobOutputFormat Parquet { get; } = new JobOutputFormat("PARQUET");
        public static JobOutputFormat Glueparquet { get; } = new JobOutputFormat("GLUEPARQUET");
        public static JobOutputFormat Avro { get; } = new JobOutputFormat("AVRO");
        public static JobOutputFormat Orc { get; } = new JobOutputFormat("ORC");
        public static JobOutputFormat Xml { get; } = new JobOutputFormat("XML");
        public static JobOutputFormat Tableauhyper { get; } = new JobOutputFormat("TABLEAUHYPER");

        public static bool operator ==(JobOutputFormat left, JobOutputFormat right) => left.Equals(right);
        public static bool operator !=(JobOutputFormat left, JobOutputFormat right) => !left.Equals(right);

        public static explicit operator string(JobOutputFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobOutputFormat other && Equals(other);
        public bool Equals(JobOutputFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sample configuration mode for profile jobs.
    /// </summary>
    [EnumType]
    public readonly struct JobSampleMode : IEquatable<JobSampleMode>
    {
        private readonly string _value;

        private JobSampleMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobSampleMode FullDataset { get; } = new JobSampleMode("FULL_DATASET");
        public static JobSampleMode CustomRows { get; } = new JobSampleMode("CUSTOM_ROWS");

        public static bool operator ==(JobSampleMode left, JobSampleMode right) => left.Equals(right);
        public static bool operator !=(JobSampleMode left, JobSampleMode right) => !left.Equals(right);

        public static explicit operator string(JobSampleMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobSampleMode other && Equals(other);
        public bool Equals(JobSampleMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Job type
    /// </summary>
    [EnumType]
    public readonly struct JobType : IEquatable<JobType>
    {
        private readonly string _value;

        private JobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobType Profile { get; } = new JobType("PROFILE");
        public static JobType Recipe { get; } = new JobType("RECIPE");

        public static bool operator ==(JobType left, JobType right) => left.Equals(right);
        public static bool operator !=(JobType left, JobType right) => !left.Equals(right);

        public static explicit operator string(JobType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobType other && Equals(other);
        public bool Equals(JobType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Sample type
    /// </summary>
    [EnumType]
    public readonly struct ProjectSampleType : IEquatable<ProjectSampleType>
    {
        private readonly string _value;

        private ProjectSampleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectSampleType FirstN { get; } = new ProjectSampleType("FIRST_N");
        public static ProjectSampleType LastN { get; } = new ProjectSampleType("LAST_N");
        public static ProjectSampleType Random { get; } = new ProjectSampleType("RANDOM");

        public static bool operator ==(ProjectSampleType left, ProjectSampleType right) => left.Equals(right);
        public static bool operator !=(ProjectSampleType left, ProjectSampleType right) => !left.Equals(right);

        public static explicit operator string(ProjectSampleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectSampleType other && Equals(other);
        public bool Equals(ProjectSampleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
