// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.DataBrew
{
    public static class GetRecipe
    {
        /// <summary>
        /// Resource schema for AWS::DataBrew::Recipe.
        /// </summary>
        public static Task<GetRecipeResult> InvokeAsync(GetRecipeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRecipeResult>("aws-native:databrew:getRecipe", args ?? new GetRecipeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::DataBrew::Recipe.
        /// </summary>
        public static Output<GetRecipeResult> Invoke(GetRecipeInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRecipeResult>("aws-native:databrew:getRecipe", args ?? new GetRecipeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecipeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Recipe name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetRecipeArgs()
        {
        }
    }

    public sealed class GetRecipeInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Recipe name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetRecipeInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRecipeResult
    {
        /// <summary>
        /// Description of the recipe
        /// </summary>
        public readonly string? Description;
        public readonly ImmutableArray<Outputs.RecipeStep> Steps;

        [OutputConstructor]
        private GetRecipeResult(
            string? description,

            ImmutableArray<Outputs.RecipeStep> steps)
        {
            Description = description;
            Steps = steps;
        }
    }
}
