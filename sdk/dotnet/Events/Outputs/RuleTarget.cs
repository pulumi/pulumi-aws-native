// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Events.Outputs
{

    [OutputType]
    public sealed class RuleTarget
    {
        /// <summary>
        /// Contains the GraphQL operation to be parsed and executed, if the event target is an AWS AppSync API.
        /// </summary>
        public readonly Outputs.RuleAppSyncParameters? AppSyncParameters;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the target.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// If the event target is an AWS Batch job, this contains the job definition, job name, and other parameters. For more information, see [Jobs](https://docs.aws.amazon.com/batch/latest/userguide/jobs.html) in the *AWS Batch User Guide* .
        /// </summary>
        public readonly Outputs.RuleBatchParameters? BatchParameters;
        /// <summary>
        /// The `DeadLetterConfig` that defines the target queue to send dead-letter queue events to.
        /// </summary>
        public readonly Outputs.RuleDeadLetterConfig? DeadLetterConfig;
        /// <summary>
        /// Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see [Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon EC2 Container Service Developer Guide* .
        /// </summary>
        public readonly Outputs.RuleEcsParameters? EcsParameters;
        /// <summary>
        /// Contains the HTTP parameters to use when the target is a API Gateway endpoint or EventBridge ApiDestination.
        /// 
        /// If you specify an API Gateway API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.
        /// </summary>
        public readonly Outputs.RuleHttpParameters? HttpParameters;
        /// <summary>
        /// The ID of the target within the specified rule. Use this ID to reference the target when updating the rule. We recommend using a memorable and unique string.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](https://docs.aws.amazon.com/http://www.rfc-editor.org/rfc/rfc7159.txt) .
        /// </summary>
        public readonly string? Input;
        /// <summary>
        /// The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You may use JSON dot notation or bracket notation. For more information about JSON paths, see [JSONPath](https://docs.aws.amazon.com/http://goessner.net/articles/JsonPath/) .
        /// </summary>
        public readonly string? InputPath;
        /// <summary>
        /// Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.
        /// </summary>
        public readonly Outputs.RuleInputTransformer? InputTransformer;
        /// <summary>
        /// The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the `eventId` as the partition key.
        /// </summary>
        public readonly Outputs.RuleKinesisParameters? KinesisParameters;
        /// <summary>
        /// Contains the Amazon Redshift Data API parameters to use when the target is a Amazon Redshift cluster.
        /// 
        /// If you specify a Amazon Redshift Cluster as a Target, you can use this to specify parameters to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
        /// </summary>
        public readonly Outputs.RuleRedshiftDataParameters? RedshiftDataParameters;
        /// <summary>
        /// The retry policy configuration to use for the dead-letter queue.
        /// </summary>
        public readonly Outputs.RuleRetryPolicy? RetryPolicy;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.
        /// </summary>
        public readonly string? RoleArn;
        /// <summary>
        /// Parameters used when you are using the rule to invoke Amazon EC2 Run Command.
        /// </summary>
        public readonly Outputs.RuleRunCommandParameters? RunCommandParameters;
        /// <summary>
        /// Contains the SageMaker AI Model Building Pipeline parameters to start execution of a SageMaker AI Model Building Pipeline.
        /// 
        /// If you specify a SageMaker AI Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.
        /// </summary>
        public readonly Outputs.RuleSageMakerPipelineParameters? SageMakerPipelineParameters;
        /// <summary>
        /// Contains the message group ID to use when the target is a FIFO queue.
        /// 
        /// If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
        /// </summary>
        public readonly Outputs.RuleSqsParameters? SqsParameters;

        [OutputConstructor]
        private RuleTarget(
            Outputs.RuleAppSyncParameters? appSyncParameters,

            string arn,

            Outputs.RuleBatchParameters? batchParameters,

            Outputs.RuleDeadLetterConfig? deadLetterConfig,

            Outputs.RuleEcsParameters? ecsParameters,

            Outputs.RuleHttpParameters? httpParameters,

            string id,

            string? input,

            string? inputPath,

            Outputs.RuleInputTransformer? inputTransformer,

            Outputs.RuleKinesisParameters? kinesisParameters,

            Outputs.RuleRedshiftDataParameters? redshiftDataParameters,

            Outputs.RuleRetryPolicy? retryPolicy,

            string? roleArn,

            Outputs.RuleRunCommandParameters? runCommandParameters,

            Outputs.RuleSageMakerPipelineParameters? sageMakerPipelineParameters,

            Outputs.RuleSqsParameters? sqsParameters)
        {
            AppSyncParameters = appSyncParameters;
            Arn = arn;
            BatchParameters = batchParameters;
            DeadLetterConfig = deadLetterConfig;
            EcsParameters = ecsParameters;
            HttpParameters = httpParameters;
            Id = id;
            Input = input;
            InputPath = inputPath;
            InputTransformer = inputTransformer;
            KinesisParameters = kinesisParameters;
            RedshiftDataParameters = redshiftDataParameters;
            RetryPolicy = retryPolicy;
            RoleArn = roleArn;
            RunCommandParameters = runCommandParameters;
            SageMakerPipelineParameters = sageMakerPipelineParameters;
            SqsParameters = sqsParameters;
        }
    }
}
