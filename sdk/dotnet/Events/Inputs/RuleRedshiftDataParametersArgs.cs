// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Events.Inputs
{

    public sealed class RuleRedshiftDataParametersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the database. Required when authenticating using temporary credentials.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The database user name. Required when authenticating using temporary credentials.
        /// </summary>
        [Input("dbUser")]
        public Input<string>? DbUser { get; set; }

        /// <summary>
        /// The name or ARN of the secret that enables access to the database. Required when authenticating using AWS Secrets Manager.
        /// </summary>
        [Input("secretManagerArn")]
        public Input<string>? SecretManagerArn { get; set; }

        /// <summary>
        /// The SQL statement text to run.
        /// </summary>
        [Input("sql")]
        public Input<string>? Sql { get; set; }

        [Input("sqls")]
        private InputList<string>? _sqls;

        /// <summary>
        /// One or more SQL statements to run. The SQL statements are run as a single transaction. They run serially in the order of the array. Subsequent SQL statements don't start until the previous statement in the array completes. If any SQL statement fails, then because they are run as one transaction, all work is rolled back.
        /// </summary>
        public InputList<string> Sqls
        {
            get => _sqls ?? (_sqls = new InputList<string>());
            set => _sqls = value;
        }

        /// <summary>
        /// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
        /// </summary>
        [Input("statementName")]
        public Input<string>? StatementName { get; set; }

        /// <summary>
        /// Indicates whether to send an event back to EventBridge after the SQL statement runs.
        /// </summary>
        [Input("withEvent")]
        public Input<bool>? WithEvent { get; set; }

        public RuleRedshiftDataParametersArgs()
        {
        }
        public static new RuleRedshiftDataParametersArgs Empty => new RuleRedshiftDataParametersArgs();
    }
}
