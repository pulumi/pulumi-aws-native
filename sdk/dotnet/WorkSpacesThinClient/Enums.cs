// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.WorkSpacesThinClient
{
    [EnumType]
    public readonly struct EnvironmentDayOfWeek : IEquatable<EnvironmentDayOfWeek>
    {
        private readonly string _value;

        private EnvironmentDayOfWeek(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentDayOfWeek Monday { get; } = new EnvironmentDayOfWeek("MONDAY");
        public static EnvironmentDayOfWeek Tuesday { get; } = new EnvironmentDayOfWeek("TUESDAY");
        public static EnvironmentDayOfWeek Wednesday { get; } = new EnvironmentDayOfWeek("WEDNESDAY");
        public static EnvironmentDayOfWeek Thursday { get; } = new EnvironmentDayOfWeek("THURSDAY");
        public static EnvironmentDayOfWeek Friday { get; } = new EnvironmentDayOfWeek("FRIDAY");
        public static EnvironmentDayOfWeek Saturday { get; } = new EnvironmentDayOfWeek("SATURDAY");
        public static EnvironmentDayOfWeek Sunday { get; } = new EnvironmentDayOfWeek("SUNDAY");

        public static bool operator ==(EnvironmentDayOfWeek left, EnvironmentDayOfWeek right) => left.Equals(right);
        public static bool operator !=(EnvironmentDayOfWeek left, EnvironmentDayOfWeek right) => !left.Equals(right);

        public static explicit operator string(EnvironmentDayOfWeek value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentDayOfWeek other && Equals(other);
        public bool Equals(EnvironmentDayOfWeek other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of VDI.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentDesktopType : IEquatable<EnvironmentDesktopType>
    {
        private readonly string _value;

        private EnvironmentDesktopType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentDesktopType Workspaces { get; } = new EnvironmentDesktopType("workspaces");
        public static EnvironmentDesktopType Appstream { get; } = new EnvironmentDesktopType("appstream");
        public static EnvironmentDesktopType WorkspacesWeb { get; } = new EnvironmentDesktopType("workspaces-web");

        public static bool operator ==(EnvironmentDesktopType left, EnvironmentDesktopType right) => left.Equals(right);
        public static bool operator !=(EnvironmentDesktopType left, EnvironmentDesktopType right) => !left.Equals(right);

        public static explicit operator string(EnvironmentDesktopType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentDesktopType other && Equals(other);
        public bool Equals(EnvironmentDesktopType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The desired time zone maintenance window.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentMaintenanceWindowApplyTimeOf : IEquatable<EnvironmentMaintenanceWindowApplyTimeOf>
    {
        private readonly string _value;

        private EnvironmentMaintenanceWindowApplyTimeOf(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentMaintenanceWindowApplyTimeOf Utc { get; } = new EnvironmentMaintenanceWindowApplyTimeOf("UTC");
        public static EnvironmentMaintenanceWindowApplyTimeOf Device { get; } = new EnvironmentMaintenanceWindowApplyTimeOf("DEVICE");

        public static bool operator ==(EnvironmentMaintenanceWindowApplyTimeOf left, EnvironmentMaintenanceWindowApplyTimeOf right) => left.Equals(right);
        public static bool operator !=(EnvironmentMaintenanceWindowApplyTimeOf left, EnvironmentMaintenanceWindowApplyTimeOf right) => !left.Equals(right);

        public static explicit operator string(EnvironmentMaintenanceWindowApplyTimeOf value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentMaintenanceWindowApplyTimeOf other && Equals(other);
        public bool Equals(EnvironmentMaintenanceWindowApplyTimeOf other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of maintenance window.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentMaintenanceWindowType : IEquatable<EnvironmentMaintenanceWindowType>
    {
        private readonly string _value;

        private EnvironmentMaintenanceWindowType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentMaintenanceWindowType System { get; } = new EnvironmentMaintenanceWindowType("SYSTEM");
        public static EnvironmentMaintenanceWindowType Custom { get; } = new EnvironmentMaintenanceWindowType("CUSTOM");

        public static bool operator ==(EnvironmentMaintenanceWindowType left, EnvironmentMaintenanceWindowType right) => left.Equals(right);
        public static bool operator !=(EnvironmentMaintenanceWindowType left, EnvironmentMaintenanceWindowType right) => !left.Equals(right);

        public static explicit operator string(EnvironmentMaintenanceWindowType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentMaintenanceWindowType other && Equals(other);
        public bool Equals(EnvironmentMaintenanceWindowType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes if the software currently installed on all devices in the environment is a supported version.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentSoftwareSetComplianceStatus : IEquatable<EnvironmentSoftwareSetComplianceStatus>
    {
        private readonly string _value;

        private EnvironmentSoftwareSetComplianceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentSoftwareSetComplianceStatus Compliant { get; } = new EnvironmentSoftwareSetComplianceStatus("COMPLIANT");
        public static EnvironmentSoftwareSetComplianceStatus NotCompliant { get; } = new EnvironmentSoftwareSetComplianceStatus("NOT_COMPLIANT");
        public static EnvironmentSoftwareSetComplianceStatus NoRegisteredDevices { get; } = new EnvironmentSoftwareSetComplianceStatus("NO_REGISTERED_DEVICES");

        public static bool operator ==(EnvironmentSoftwareSetComplianceStatus left, EnvironmentSoftwareSetComplianceStatus right) => left.Equals(right);
        public static bool operator !=(EnvironmentSoftwareSetComplianceStatus left, EnvironmentSoftwareSetComplianceStatus right) => !left.Equals(right);

        public static explicit operator string(EnvironmentSoftwareSetComplianceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentSoftwareSetComplianceStatus other && Equals(other);
        public bool Equals(EnvironmentSoftwareSetComplianceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An option to define which software updates to apply.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentSoftwareSetUpdateMode : IEquatable<EnvironmentSoftwareSetUpdateMode>
    {
        private readonly string _value;

        private EnvironmentSoftwareSetUpdateMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentSoftwareSetUpdateMode UseLatest { get; } = new EnvironmentSoftwareSetUpdateMode("USE_LATEST");
        public static EnvironmentSoftwareSetUpdateMode UseDesired { get; } = new EnvironmentSoftwareSetUpdateMode("USE_DESIRED");

        public static bool operator ==(EnvironmentSoftwareSetUpdateMode left, EnvironmentSoftwareSetUpdateMode right) => left.Equals(right);
        public static bool operator !=(EnvironmentSoftwareSetUpdateMode left, EnvironmentSoftwareSetUpdateMode right) => !left.Equals(right);

        public static explicit operator string(EnvironmentSoftwareSetUpdateMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentSoftwareSetUpdateMode other && Equals(other);
        public bool Equals(EnvironmentSoftwareSetUpdateMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// An option to define if software updates should be applied within a maintenance window.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentSoftwareSetUpdateSchedule : IEquatable<EnvironmentSoftwareSetUpdateSchedule>
    {
        private readonly string _value;

        private EnvironmentSoftwareSetUpdateSchedule(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentSoftwareSetUpdateSchedule UseMaintenanceWindow { get; } = new EnvironmentSoftwareSetUpdateSchedule("USE_MAINTENANCE_WINDOW");
        public static EnvironmentSoftwareSetUpdateSchedule ApplyImmediately { get; } = new EnvironmentSoftwareSetUpdateSchedule("APPLY_IMMEDIATELY");

        public static bool operator ==(EnvironmentSoftwareSetUpdateSchedule left, EnvironmentSoftwareSetUpdateSchedule right) => left.Equals(right);
        public static bool operator !=(EnvironmentSoftwareSetUpdateSchedule left, EnvironmentSoftwareSetUpdateSchedule right) => !left.Equals(right);

        public static explicit operator string(EnvironmentSoftwareSetUpdateSchedule value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentSoftwareSetUpdateSchedule other && Equals(other);
        public bool Equals(EnvironmentSoftwareSetUpdateSchedule other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
