// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ECS.Outputs
{

    /// <summary>
    /// The health check command and associated configuration parameters for the container.
    /// </summary>
    [OutputType]
    public sealed class TaskDefinitionHealthCheck
    {
        /// <summary>
        /// A string array representing the command that the container runs to determine if it is healthy.
        /// </summary>
        public readonly ImmutableArray<string> Command;
        /// <summary>
        /// The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
        /// </summary>
        public readonly int? Interval;
        /// <summary>
        /// The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.
        /// </summary>
        public readonly int? Retries;
        /// <summary>
        /// The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.
        /// </summary>
        public readonly int? StartPeriod;
        /// <summary>
        /// The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.
        /// </summary>
        public readonly int? Timeout;

        [OutputConstructor]
        private TaskDefinitionHealthCheck(
            ImmutableArray<string> command,

            int? interval,

            int? retries,

            int? startPeriod,

            int? timeout)
        {
            Command = command;
            Interval = interval;
            Retries = retries;
            StartPeriod = startPeriod;
            Timeout = timeout;
        }
    }
}
