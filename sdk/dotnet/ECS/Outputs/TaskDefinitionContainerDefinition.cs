// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ECS.Outputs
{

    /// <summary>
    /// List of container definitions that are passed to the Docker daemon on a container instance
    /// </summary>
    [OutputType]
    public sealed class TaskDefinitionContainerDefinition
    {
        public readonly ImmutableArray<string> Command;
        public readonly int? Cpu;
        public readonly ImmutableArray<Outputs.TaskDefinitionContainerDependency> DependsOn;
        public readonly bool? DisableNetworking;
        public readonly ImmutableArray<string> DnsSearchDomains;
        public readonly ImmutableArray<string> DnsServers;
        public readonly object? DockerLabels;
        public readonly ImmutableArray<string> DockerSecurityOptions;
        public readonly ImmutableArray<string> EntryPoint;
        /// <summary>
        /// The environment variables to pass to a container
        /// </summary>
        public readonly ImmutableArray<Outputs.TaskDefinitionKeyValuePair> Environment;
        /// <summary>
        /// The list of one or more files that contain the environment variables to pass to a container
        /// </summary>
        public readonly ImmutableArray<Outputs.TaskDefinitionEnvironmentFile> EnvironmentFiles;
        public readonly bool? Essential;
        public readonly ImmutableArray<Outputs.TaskDefinitionHostEntry> ExtraHosts;
        public readonly Outputs.TaskDefinitionFirelensConfiguration? FirelensConfiguration;
        public readonly Outputs.TaskDefinitionHealthCheck? HealthCheck;
        public readonly string? Hostname;
        /// <summary>
        /// The image used to start a container. This string is passed directly to the Docker daemon.
        /// </summary>
        public readonly string? Image;
        public readonly bool? Interactive;
        public readonly ImmutableArray<string> Links;
        public readonly Outputs.TaskDefinitionLinuxParameters? LinuxParameters;
        public readonly Outputs.TaskDefinitionLogConfiguration? LogConfiguration;
        /// <summary>
        /// The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed.
        /// </summary>
        public readonly int? Memory;
        public readonly int? MemoryReservation;
        public readonly ImmutableArray<Outputs.TaskDefinitionMountPoint> MountPoints;
        /// <summary>
        /// The name of a container. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Port mappings allow containers to access ports on the host container instance to send or receive traffic.
        /// </summary>
        public readonly ImmutableArray<Outputs.TaskDefinitionPortMapping> PortMappings;
        public readonly bool? Privileged;
        public readonly bool? PseudoTerminal;
        public readonly bool? ReadonlyRootFilesystem;
        public readonly Outputs.TaskDefinitionRepositoryCredentials? RepositoryCredentials;
        public readonly ImmutableArray<Outputs.TaskDefinitionResourceRequirement> ResourceRequirements;
        public readonly ImmutableArray<Outputs.TaskDefinitionSecret> Secrets;
        public readonly int? StartTimeout;
        public readonly int? StopTimeout;
        public readonly ImmutableArray<Outputs.TaskDefinitionSystemControl> SystemControls;
        public readonly ImmutableArray<Outputs.TaskDefinitionUlimit> Ulimits;
        public readonly string? User;
        public readonly ImmutableArray<Outputs.TaskDefinitionVolumeFrom> VolumesFrom;
        public readonly string? WorkingDirectory;

        [OutputConstructor]
        private TaskDefinitionContainerDefinition(
            ImmutableArray<string> command,

            int? cpu,

            ImmutableArray<Outputs.TaskDefinitionContainerDependency> dependsOn,

            bool? disableNetworking,

            ImmutableArray<string> dnsSearchDomains,

            ImmutableArray<string> dnsServers,

            object? dockerLabels,

            ImmutableArray<string> dockerSecurityOptions,

            ImmutableArray<string> entryPoint,

            ImmutableArray<Outputs.TaskDefinitionKeyValuePair> environment,

            ImmutableArray<Outputs.TaskDefinitionEnvironmentFile> environmentFiles,

            bool? essential,

            ImmutableArray<Outputs.TaskDefinitionHostEntry> extraHosts,

            Outputs.TaskDefinitionFirelensConfiguration? firelensConfiguration,

            Outputs.TaskDefinitionHealthCheck? healthCheck,

            string? hostname,

            string? image,

            bool? interactive,

            ImmutableArray<string> links,

            Outputs.TaskDefinitionLinuxParameters? linuxParameters,

            Outputs.TaskDefinitionLogConfiguration? logConfiguration,

            int? memory,

            int? memoryReservation,

            ImmutableArray<Outputs.TaskDefinitionMountPoint> mountPoints,

            string? name,

            ImmutableArray<Outputs.TaskDefinitionPortMapping> portMappings,

            bool? privileged,

            bool? pseudoTerminal,

            bool? readonlyRootFilesystem,

            Outputs.TaskDefinitionRepositoryCredentials? repositoryCredentials,

            ImmutableArray<Outputs.TaskDefinitionResourceRequirement> resourceRequirements,

            ImmutableArray<Outputs.TaskDefinitionSecret> secrets,

            int? startTimeout,

            int? stopTimeout,

            ImmutableArray<Outputs.TaskDefinitionSystemControl> systemControls,

            ImmutableArray<Outputs.TaskDefinitionUlimit> ulimits,

            string? user,

            ImmutableArray<Outputs.TaskDefinitionVolumeFrom> volumesFrom,

            string? workingDirectory)
        {
            Command = command;
            Cpu = cpu;
            DependsOn = dependsOn;
            DisableNetworking = disableNetworking;
            DnsSearchDomains = dnsSearchDomains;
            DnsServers = dnsServers;
            DockerLabels = dockerLabels;
            DockerSecurityOptions = dockerSecurityOptions;
            EntryPoint = entryPoint;
            Environment = environment;
            EnvironmentFiles = environmentFiles;
            Essential = essential;
            ExtraHosts = extraHosts;
            FirelensConfiguration = firelensConfiguration;
            HealthCheck = healthCheck;
            Hostname = hostname;
            Image = image;
            Interactive = interactive;
            Links = links;
            LinuxParameters = linuxParameters;
            LogConfiguration = logConfiguration;
            Memory = memory;
            MemoryReservation = memoryReservation;
            MountPoints = mountPoints;
            Name = name;
            PortMappings = portMappings;
            Privileged = privileged;
            PseudoTerminal = pseudoTerminal;
            ReadonlyRootFilesystem = readonlyRootFilesystem;
            RepositoryCredentials = repositoryCredentials;
            ResourceRequirements = resourceRequirements;
            Secrets = secrets;
            StartTimeout = startTimeout;
            StopTimeout = stopTimeout;
            SystemControls = systemControls;
            Ulimits = ulimits;
            User = user;
            VolumesFrom = volumesFrom;
            WorkingDirectory = workingDirectory;
        }
    }
}
