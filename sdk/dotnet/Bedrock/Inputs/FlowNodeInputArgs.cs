// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Bedrock.Inputs
{

    /// <summary>
    /// Input to a node in a flow
    /// </summary>
    public sealed class FlowNodeInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies how input data flows between iterations in a DoWhile loop.
        /// 
        /// - `LoopCondition` - Controls whether the loop continues by evaluating condition expressions against the input data. Use this category to define the condition that determines if the loop should continue.
        /// - `ReturnValueToLoopStart` - Defines data to pass back to the start of the loop's next iteration. Use this category for variables that you want to update for each loop iteration.
        /// - `ExitLoop` - Defines the value that's available once the loop ends. Use this category to expose loop results to nodes outside the loop.
        /// </summary>
        [Input("category")]
        public Input<Pulumi.AwsNative.Bedrock.FlowNodeInputCategory>? Category { get; set; }

        /// <summary>
        /// Expression for a node input in a flow
        /// </summary>
        [Input("expression", required: true)]
        public Input<string> Expression { get; set; } = null!;

        /// <summary>
        /// Name of a node input in a flow
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the data type of the input. If the input doesn't match this type at runtime, a validation error will be thrown.
        /// </summary>
        [Input("type", required: true)]
        public Input<Pulumi.AwsNative.Bedrock.FlowNodeIoDataType> Type { get; set; } = null!;

        public FlowNodeInputArgs()
        {
        }
        public static new FlowNodeInputArgs Empty => new FlowNodeInputArgs();
    }
}
