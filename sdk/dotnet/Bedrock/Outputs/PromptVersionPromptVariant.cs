// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Bedrock.Outputs
{

    /// <summary>
    /// Prompt variant
    /// </summary>
    [OutputType]
    public sealed class PromptVersionPromptVariant
    {
        /// <summary>
        /// Contains inference configurations for the prompt variant.
        /// </summary>
        public readonly Outputs.PromptVersionPromptInferenceConfigurationProperties? InferenceConfiguration;
        /// <summary>
        /// ARN or Id of a Bedrock Foundational Model or Inference Profile, or the ARN of a imported model, or a provisioned throughput ARN for custom models.
        /// </summary>
        public readonly string? ModelId;
        /// <summary>
        /// Name for a variant.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Contains configurations for the prompt template.
        /// </summary>
        public readonly Outputs.PromptVersionPromptTemplateConfigurationProperties TemplateConfiguration;
        /// <summary>
        /// The type of prompt template to use.
        /// </summary>
        public readonly Pulumi.AwsNative.Bedrock.PromptVersionPromptTemplateType TemplateType;

        [OutputConstructor]
        private PromptVersionPromptVariant(
            Outputs.PromptVersionPromptInferenceConfigurationProperties? inferenceConfiguration,

            string? modelId,

            string name,

            Outputs.PromptVersionPromptTemplateConfigurationProperties templateConfiguration,

            Pulumi.AwsNative.Bedrock.PromptVersionPromptTemplateType templateType)
        {
            InferenceConfiguration = inferenceConfiguration;
            ModelId = modelId;
            Name = name;
            TemplateConfiguration = templateConfiguration;
            TemplateType = templateType;
        }
    }
}
