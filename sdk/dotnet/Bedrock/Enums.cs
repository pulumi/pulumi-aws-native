// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Bedrock
{
    /// <summary>
    /// Action Group Signature for a BuiltIn Action
    /// </summary>
    [EnumType]
    public readonly struct AgentActionGroupSignature : IEquatable<AgentActionGroupSignature>
    {
        private readonly string _value;

        private AgentActionGroupSignature(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentActionGroupSignature AmazonUserInput { get; } = new AgentActionGroupSignature("AMAZON.UserInput");

        public static bool operator ==(AgentActionGroupSignature left, AgentActionGroupSignature right) => left.Equals(right);
        public static bool operator !=(AgentActionGroupSignature left, AgentActionGroupSignature right) => !left.Equals(right);

        public static explicit operator string(AgentActionGroupSignature value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentActionGroupSignature other && Equals(other);
        public bool Equals(AgentActionGroupSignature other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the action group
    /// </summary>
    [EnumType]
    public readonly struct AgentActionGroupState : IEquatable<AgentActionGroupState>
    {
        private readonly string _value;

        private AgentActionGroupState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentActionGroupState Enabled { get; } = new AgentActionGroupState("ENABLED");
        public static AgentActionGroupState Disabled { get; } = new AgentActionGroupState("DISABLED");

        public static bool operator ==(AgentActionGroupState left, AgentActionGroupState right) => left.Equals(right);
        public static bool operator !=(AgentActionGroupState left, AgentActionGroupState right) => !left.Equals(right);

        public static explicit operator string(AgentActionGroupState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentActionGroupState other && Equals(other);
        public bool Equals(AgentActionGroupState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The statuses an Agent Alias can be in.
    /// </summary>
    [EnumType]
    public readonly struct AgentAliasStatus : IEquatable<AgentAliasStatus>
    {
        private readonly string _value;

        private AgentAliasStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentAliasStatus Creating { get; } = new AgentAliasStatus("CREATING");
        public static AgentAliasStatus Prepared { get; } = new AgentAliasStatus("PREPARED");
        public static AgentAliasStatus Failed { get; } = new AgentAliasStatus("FAILED");
        public static AgentAliasStatus Updating { get; } = new AgentAliasStatus("UPDATING");
        public static AgentAliasStatus Deleting { get; } = new AgentAliasStatus("DELETING");

        public static bool operator ==(AgentAliasStatus left, AgentAliasStatus right) => left.Equals(right);
        public static bool operator !=(AgentAliasStatus left, AgentAliasStatus right) => !left.Equals(right);

        public static explicit operator string(AgentAliasStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentAliasStatus other && Equals(other);
        public bool Equals(AgentAliasStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Creation Mode for Prompt Configuration.
    /// </summary>
    [EnumType]
    public readonly struct AgentCreationMode : IEquatable<AgentCreationMode>
    {
        private readonly string _value;

        private AgentCreationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentCreationMode Default { get; } = new AgentCreationMode("DEFAULT");
        public static AgentCreationMode Overridden { get; } = new AgentCreationMode("OVERRIDDEN");

        public static bool operator ==(AgentCreationMode left, AgentCreationMode right) => left.Equals(right);
        public static bool operator !=(AgentCreationMode left, AgentCreationMode right) => !left.Equals(right);

        public static explicit operator string(AgentCreationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentCreationMode other && Equals(other);
        public bool Equals(AgentCreationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the knowledge base; whether it is enabled or disabled
    /// </summary>
    [EnumType]
    public readonly struct AgentKnowledgeBaseState : IEquatable<AgentKnowledgeBaseState>
    {
        private readonly string _value;

        private AgentKnowledgeBaseState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentKnowledgeBaseState Enabled { get; } = new AgentKnowledgeBaseState("ENABLED");
        public static AgentKnowledgeBaseState Disabled { get; } = new AgentKnowledgeBaseState("DISABLED");

        public static bool operator ==(AgentKnowledgeBaseState left, AgentKnowledgeBaseState right) => left.Equals(right);
        public static bool operator !=(AgentKnowledgeBaseState left, AgentKnowledgeBaseState right) => !left.Equals(right);

        public static explicit operator string(AgentKnowledgeBaseState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentKnowledgeBaseState other && Equals(other);
        public bool Equals(AgentKnowledgeBaseState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Prompt State.
    /// </summary>
    [EnumType]
    public readonly struct AgentPromptState : IEquatable<AgentPromptState>
    {
        private readonly string _value;

        private AgentPromptState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentPromptState Enabled { get; } = new AgentPromptState("ENABLED");
        public static AgentPromptState Disabled { get; } = new AgentPromptState("DISABLED");

        public static bool operator ==(AgentPromptState left, AgentPromptState right) => left.Equals(right);
        public static bool operator !=(AgentPromptState left, AgentPromptState right) => !left.Equals(right);

        public static explicit operator string(AgentPromptState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentPromptState other && Equals(other);
        public bool Equals(AgentPromptState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Prompt Type.
    /// </summary>
    [EnumType]
    public readonly struct AgentPromptType : IEquatable<AgentPromptType>
    {
        private readonly string _value;

        private AgentPromptType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentPromptType PreProcessing { get; } = new AgentPromptType("PRE_PROCESSING");
        public static AgentPromptType Orchestration { get; } = new AgentPromptType("ORCHESTRATION");
        public static AgentPromptType PostProcessing { get; } = new AgentPromptType("POST_PROCESSING");
        public static AgentPromptType KnowledgeBaseResponseGeneration { get; } = new AgentPromptType("KNOWLEDGE_BASE_RESPONSE_GENERATION");

        public static bool operator ==(AgentPromptType left, AgentPromptType right) => left.Equals(right);
        public static bool operator !=(AgentPromptType left, AgentPromptType right) => !left.Equals(right);

        public static explicit operator string(AgentPromptType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentPromptType other && Equals(other);
        public bool Equals(AgentPromptType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Schema Type for Action APIs.
    /// </summary>
    [EnumType]
    public readonly struct AgentStatus : IEquatable<AgentStatus>
    {
        private readonly string _value;

        private AgentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentStatus Creating { get; } = new AgentStatus("CREATING");
        public static AgentStatus Preparing { get; } = new AgentStatus("PREPARING");
        public static AgentStatus Prepared { get; } = new AgentStatus("PREPARED");
        public static AgentStatus NotPrepared { get; } = new AgentStatus("NOT_PREPARED");
        public static AgentStatus Deleting { get; } = new AgentStatus("DELETING");
        public static AgentStatus Failed { get; } = new AgentStatus("FAILED");
        public static AgentStatus Versioning { get; } = new AgentStatus("VERSIONING");
        public static AgentStatus Updating { get; } = new AgentStatus("UPDATING");

        public static bool operator ==(AgentStatus left, AgentStatus right) => left.Equals(right);
        public static bool operator !=(AgentStatus left, AgentStatus right) => !left.Equals(right);

        public static explicit operator string(AgentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentStatus other && Equals(other);
        public bool Equals(AgentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
