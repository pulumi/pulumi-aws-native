// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Bedrock
{
    /// <summary>
    /// Action Group Signature for a BuiltIn Action
    /// </summary>
    [EnumType]
    public readonly struct AgentActionGroupSignature : IEquatable<AgentActionGroupSignature>
    {
        private readonly string _value;

        private AgentActionGroupSignature(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentActionGroupSignature AmazonUserInput { get; } = new AgentActionGroupSignature("AMAZON.UserInput");

        public static bool operator ==(AgentActionGroupSignature left, AgentActionGroupSignature right) => left.Equals(right);
        public static bool operator !=(AgentActionGroupSignature left, AgentActionGroupSignature right) => !left.Equals(right);

        public static explicit operator string(AgentActionGroupSignature value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentActionGroupSignature other && Equals(other);
        public bool Equals(AgentActionGroupSignature other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the action group
    /// </summary>
    [EnumType]
    public readonly struct AgentActionGroupState : IEquatable<AgentActionGroupState>
    {
        private readonly string _value;

        private AgentActionGroupState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentActionGroupState Enabled { get; } = new AgentActionGroupState("ENABLED");
        public static AgentActionGroupState Disabled { get; } = new AgentActionGroupState("DISABLED");

        public static bool operator ==(AgentActionGroupState left, AgentActionGroupState right) => left.Equals(right);
        public static bool operator !=(AgentActionGroupState left, AgentActionGroupState right) => !left.Equals(right);

        public static explicit operator string(AgentActionGroupState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentActionGroupState other && Equals(other);
        public bool Equals(AgentActionGroupState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The statuses an Agent Alias can be in.
    /// </summary>
    [EnumType]
    public readonly struct AgentAliasStatus : IEquatable<AgentAliasStatus>
    {
        private readonly string _value;

        private AgentAliasStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentAliasStatus Creating { get; } = new AgentAliasStatus("CREATING");
        public static AgentAliasStatus Prepared { get; } = new AgentAliasStatus("PREPARED");
        public static AgentAliasStatus Failed { get; } = new AgentAliasStatus("FAILED");
        public static AgentAliasStatus Updating { get; } = new AgentAliasStatus("UPDATING");
        public static AgentAliasStatus Deleting { get; } = new AgentAliasStatus("DELETING");

        public static bool operator ==(AgentAliasStatus left, AgentAliasStatus right) => left.Equals(right);
        public static bool operator !=(AgentAliasStatus left, AgentAliasStatus right) => !left.Equals(right);

        public static explicit operator string(AgentAliasStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentAliasStatus other && Equals(other);
        public bool Equals(AgentAliasStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Creation Mode for Prompt Configuration.
    /// </summary>
    [EnumType]
    public readonly struct AgentCreationMode : IEquatable<AgentCreationMode>
    {
        private readonly string _value;

        private AgentCreationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentCreationMode Default { get; } = new AgentCreationMode("DEFAULT");
        public static AgentCreationMode Overridden { get; } = new AgentCreationMode("OVERRIDDEN");

        public static bool operator ==(AgentCreationMode left, AgentCreationMode right) => left.Equals(right);
        public static bool operator !=(AgentCreationMode left, AgentCreationMode right) => !left.Equals(right);

        public static explicit operator string(AgentCreationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentCreationMode other && Equals(other);
        public bool Equals(AgentCreationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// State of the knowledge base; whether it is enabled or disabled
    /// </summary>
    [EnumType]
    public readonly struct AgentKnowledgeBaseState : IEquatable<AgentKnowledgeBaseState>
    {
        private readonly string _value;

        private AgentKnowledgeBaseState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentKnowledgeBaseState Enabled { get; } = new AgentKnowledgeBaseState("ENABLED");
        public static AgentKnowledgeBaseState Disabled { get; } = new AgentKnowledgeBaseState("DISABLED");

        public static bool operator ==(AgentKnowledgeBaseState left, AgentKnowledgeBaseState right) => left.Equals(right);
        public static bool operator !=(AgentKnowledgeBaseState left, AgentKnowledgeBaseState right) => !left.Equals(right);

        public static explicit operator string(AgentKnowledgeBaseState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentKnowledgeBaseState other && Equals(other);
        public bool Equals(AgentKnowledgeBaseState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Prompt State.
    /// </summary>
    [EnumType]
    public readonly struct AgentPromptState : IEquatable<AgentPromptState>
    {
        private readonly string _value;

        private AgentPromptState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentPromptState Enabled { get; } = new AgentPromptState("ENABLED");
        public static AgentPromptState Disabled { get; } = new AgentPromptState("DISABLED");

        public static bool operator ==(AgentPromptState left, AgentPromptState right) => left.Equals(right);
        public static bool operator !=(AgentPromptState left, AgentPromptState right) => !left.Equals(right);

        public static explicit operator string(AgentPromptState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentPromptState other && Equals(other);
        public bool Equals(AgentPromptState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Prompt Type.
    /// </summary>
    [EnumType]
    public readonly struct AgentPromptType : IEquatable<AgentPromptType>
    {
        private readonly string _value;

        private AgentPromptType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentPromptType PreProcessing { get; } = new AgentPromptType("PRE_PROCESSING");
        public static AgentPromptType Orchestration { get; } = new AgentPromptType("ORCHESTRATION");
        public static AgentPromptType PostProcessing { get; } = new AgentPromptType("POST_PROCESSING");
        public static AgentPromptType KnowledgeBaseResponseGeneration { get; } = new AgentPromptType("KNOWLEDGE_BASE_RESPONSE_GENERATION");

        public static bool operator ==(AgentPromptType left, AgentPromptType right) => left.Equals(right);
        public static bool operator !=(AgentPromptType left, AgentPromptType right) => !left.Equals(right);

        public static explicit operator string(AgentPromptType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentPromptType other && Equals(other);
        public bool Equals(AgentPromptType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Schema Type for Action APIs.
    /// </summary>
    [EnumType]
    public readonly struct AgentStatus : IEquatable<AgentStatus>
    {
        private readonly string _value;

        private AgentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgentStatus Creating { get; } = new AgentStatus("CREATING");
        public static AgentStatus Preparing { get; } = new AgentStatus("PREPARING");
        public static AgentStatus Prepared { get; } = new AgentStatus("PREPARED");
        public static AgentStatus NotPrepared { get; } = new AgentStatus("NOT_PREPARED");
        public static AgentStatus Deleting { get; } = new AgentStatus("DELETING");
        public static AgentStatus Failed { get; } = new AgentStatus("FAILED");
        public static AgentStatus Versioning { get; } = new AgentStatus("VERSIONING");
        public static AgentStatus Updating { get; } = new AgentStatus("UPDATING");

        public static bool operator ==(AgentStatus left, AgentStatus right) => left.Equals(right);
        public static bool operator !=(AgentStatus left, AgentStatus right) => !left.Equals(right);

        public static explicit operator string(AgentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgentStatus other && Equals(other);
        public bool Equals(AgentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Knowledge base can split your source data into chunks. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried. You have the following options for chunking your data. If you opt for NONE, then you may want to pre-process your files by splitting them up such that each file corresponds to a chunk.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceChunkingStrategy : IEquatable<DataSourceChunkingStrategy>
    {
        private readonly string _value;

        private DataSourceChunkingStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceChunkingStrategy FixedSize { get; } = new DataSourceChunkingStrategy("FIXED_SIZE");
        public static DataSourceChunkingStrategy None { get; } = new DataSourceChunkingStrategy("NONE");

        public static bool operator ==(DataSourceChunkingStrategy left, DataSourceChunkingStrategy right) => left.Equals(right);
        public static bool operator !=(DataSourceChunkingStrategy left, DataSourceChunkingStrategy right) => !left.Equals(right);

        public static explicit operator string(DataSourceChunkingStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceChunkingStrategy other && Equals(other);
        public bool Equals(DataSourceChunkingStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of a data source.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceStatus : IEquatable<DataSourceStatus>
    {
        private readonly string _value;

        private DataSourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceStatus Available { get; } = new DataSourceStatus("AVAILABLE");
        public static DataSourceStatus Deleting { get; } = new DataSourceStatus("DELETING");

        public static bool operator ==(DataSourceStatus left, DataSourceStatus right) => left.Equals(right);
        public static bool operator !=(DataSourceStatus left, DataSourceStatus right) => !left.Equals(right);

        public static explicit operator string(DataSourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceStatus other && Equals(other);
        public bool Equals(DataSourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the data source location.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceType : IEquatable<DataSourceType>
    {
        private readonly string _value;

        private DataSourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceType S3 { get; } = new DataSourceType("S3");

        public static bool operator ==(DataSourceType left, DataSourceType right) => left.Equals(right);
        public static bool operator !=(DataSourceType left, DataSourceType right) => !left.Equals(right);

        public static explicit operator string(DataSourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceType other && Equals(other);
        public bool Equals(DataSourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of filter in content policy
    /// </summary>
    [EnumType]
    public readonly struct GuardrailContentFilterType : IEquatable<GuardrailContentFilterType>
    {
        private readonly string _value;

        private GuardrailContentFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GuardrailContentFilterType Sexual { get; } = new GuardrailContentFilterType("SEXUAL");
        public static GuardrailContentFilterType Violence { get; } = new GuardrailContentFilterType("VIOLENCE");
        public static GuardrailContentFilterType Hate { get; } = new GuardrailContentFilterType("HATE");
        public static GuardrailContentFilterType Insults { get; } = new GuardrailContentFilterType("INSULTS");
        public static GuardrailContentFilterType Misconduct { get; } = new GuardrailContentFilterType("MISCONDUCT");
        public static GuardrailContentFilterType PromptAttack { get; } = new GuardrailContentFilterType("PROMPT_ATTACK");

        public static bool operator ==(GuardrailContentFilterType left, GuardrailContentFilterType right) => left.Equals(right);
        public static bool operator !=(GuardrailContentFilterType left, GuardrailContentFilterType right) => !left.Equals(right);

        public static explicit operator string(GuardrailContentFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GuardrailContentFilterType other && Equals(other);
        public bool Equals(GuardrailContentFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Strength for filters
    /// </summary>
    [EnumType]
    public readonly struct GuardrailFilterStrength : IEquatable<GuardrailFilterStrength>
    {
        private readonly string _value;

        private GuardrailFilterStrength(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GuardrailFilterStrength None { get; } = new GuardrailFilterStrength("NONE");
        public static GuardrailFilterStrength Low { get; } = new GuardrailFilterStrength("LOW");
        public static GuardrailFilterStrength Medium { get; } = new GuardrailFilterStrength("MEDIUM");
        public static GuardrailFilterStrength High { get; } = new GuardrailFilterStrength("HIGH");

        public static bool operator ==(GuardrailFilterStrength left, GuardrailFilterStrength right) => left.Equals(right);
        public static bool operator !=(GuardrailFilterStrength left, GuardrailFilterStrength right) => !left.Equals(right);

        public static explicit operator string(GuardrailFilterStrength value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GuardrailFilterStrength other && Equals(other);
        public bool Equals(GuardrailFilterStrength other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Options for managed words.
    /// </summary>
    [EnumType]
    public readonly struct GuardrailManagedWordsType : IEquatable<GuardrailManagedWordsType>
    {
        private readonly string _value;

        private GuardrailManagedWordsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GuardrailManagedWordsType Profanity { get; } = new GuardrailManagedWordsType("PROFANITY");

        public static bool operator ==(GuardrailManagedWordsType left, GuardrailManagedWordsType right) => left.Equals(right);
        public static bool operator !=(GuardrailManagedWordsType left, GuardrailManagedWordsType right) => !left.Equals(right);

        public static explicit operator string(GuardrailManagedWordsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GuardrailManagedWordsType other && Equals(other);
        public bool Equals(GuardrailManagedWordsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The currently supported PII entities
    /// </summary>
    [EnumType]
    public readonly struct GuardrailPiiEntityType : IEquatable<GuardrailPiiEntityType>
    {
        private readonly string _value;

        private GuardrailPiiEntityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GuardrailPiiEntityType Address { get; } = new GuardrailPiiEntityType("ADDRESS");
        public static GuardrailPiiEntityType Age { get; } = new GuardrailPiiEntityType("AGE");
        public static GuardrailPiiEntityType AwsAccessKey { get; } = new GuardrailPiiEntityType("AWS_ACCESS_KEY");
        public static GuardrailPiiEntityType AwsSecretKey { get; } = new GuardrailPiiEntityType("AWS_SECRET_KEY");
        public static GuardrailPiiEntityType CaHealthNumber { get; } = new GuardrailPiiEntityType("CA_HEALTH_NUMBER");
        public static GuardrailPiiEntityType CaSocialInsuranceNumber { get; } = new GuardrailPiiEntityType("CA_SOCIAL_INSURANCE_NUMBER");
        public static GuardrailPiiEntityType CreditDebitCardCvv { get; } = new GuardrailPiiEntityType("CREDIT_DEBIT_CARD_CVV");
        public static GuardrailPiiEntityType CreditDebitCardExpiry { get; } = new GuardrailPiiEntityType("CREDIT_DEBIT_CARD_EXPIRY");
        public static GuardrailPiiEntityType CreditDebitCardNumber { get; } = new GuardrailPiiEntityType("CREDIT_DEBIT_CARD_NUMBER");
        public static GuardrailPiiEntityType DriverId { get; } = new GuardrailPiiEntityType("DRIVER_ID");
        public static GuardrailPiiEntityType Email { get; } = new GuardrailPiiEntityType("EMAIL");
        public static GuardrailPiiEntityType InternationalBankAccountNumber { get; } = new GuardrailPiiEntityType("INTERNATIONAL_BANK_ACCOUNT_NUMBER");
        public static GuardrailPiiEntityType IpAddress { get; } = new GuardrailPiiEntityType("IP_ADDRESS");
        public static GuardrailPiiEntityType LicensePlate { get; } = new GuardrailPiiEntityType("LICENSE_PLATE");
        public static GuardrailPiiEntityType MacAddress { get; } = new GuardrailPiiEntityType("MAC_ADDRESS");
        public static GuardrailPiiEntityType Name { get; } = new GuardrailPiiEntityType("NAME");
        public static GuardrailPiiEntityType Password { get; } = new GuardrailPiiEntityType("PASSWORD");
        public static GuardrailPiiEntityType Phone { get; } = new GuardrailPiiEntityType("PHONE");
        public static GuardrailPiiEntityType Pin { get; } = new GuardrailPiiEntityType("PIN");
        public static GuardrailPiiEntityType SwiftCode { get; } = new GuardrailPiiEntityType("SWIFT_CODE");
        public static GuardrailPiiEntityType UkNationalHealthServiceNumber { get; } = new GuardrailPiiEntityType("UK_NATIONAL_HEALTH_SERVICE_NUMBER");
        public static GuardrailPiiEntityType UkNationalInsuranceNumber { get; } = new GuardrailPiiEntityType("UK_NATIONAL_INSURANCE_NUMBER");
        public static GuardrailPiiEntityType UkUniqueTaxpayerReferenceNumber { get; } = new GuardrailPiiEntityType("UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER");
        public static GuardrailPiiEntityType Url { get; } = new GuardrailPiiEntityType("URL");
        public static GuardrailPiiEntityType Username { get; } = new GuardrailPiiEntityType("USERNAME");
        public static GuardrailPiiEntityType UsBankAccountNumber { get; } = new GuardrailPiiEntityType("US_BANK_ACCOUNT_NUMBER");
        public static GuardrailPiiEntityType UsBankRoutingNumber { get; } = new GuardrailPiiEntityType("US_BANK_ROUTING_NUMBER");
        public static GuardrailPiiEntityType UsIndividualTaxIdentificationNumber { get; } = new GuardrailPiiEntityType("US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER");
        public static GuardrailPiiEntityType UsPassportNumber { get; } = new GuardrailPiiEntityType("US_PASSPORT_NUMBER");
        public static GuardrailPiiEntityType UsSocialSecurityNumber { get; } = new GuardrailPiiEntityType("US_SOCIAL_SECURITY_NUMBER");
        public static GuardrailPiiEntityType VehicleIdentificationNumber { get; } = new GuardrailPiiEntityType("VEHICLE_IDENTIFICATION_NUMBER");

        public static bool operator ==(GuardrailPiiEntityType left, GuardrailPiiEntityType right) => left.Equals(right);
        public static bool operator !=(GuardrailPiiEntityType left, GuardrailPiiEntityType right) => !left.Equals(right);

        public static explicit operator string(GuardrailPiiEntityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GuardrailPiiEntityType other && Equals(other);
        public bool Equals(GuardrailPiiEntityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Options for sensitive information action.
    /// </summary>
    [EnumType]
    public readonly struct GuardrailSensitiveInformationAction : IEquatable<GuardrailSensitiveInformationAction>
    {
        private readonly string _value;

        private GuardrailSensitiveInformationAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GuardrailSensitiveInformationAction Block { get; } = new GuardrailSensitiveInformationAction("BLOCK");
        public static GuardrailSensitiveInformationAction Anonymize { get; } = new GuardrailSensitiveInformationAction("ANONYMIZE");

        public static bool operator ==(GuardrailSensitiveInformationAction left, GuardrailSensitiveInformationAction right) => left.Equals(right);
        public static bool operator !=(GuardrailSensitiveInformationAction left, GuardrailSensitiveInformationAction right) => !left.Equals(right);

        public static explicit operator string(GuardrailSensitiveInformationAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GuardrailSensitiveInformationAction other && Equals(other);
        public bool Equals(GuardrailSensitiveInformationAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the guardrail
    /// </summary>
    [EnumType]
    public readonly struct GuardrailStatus : IEquatable<GuardrailStatus>
    {
        private readonly string _value;

        private GuardrailStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GuardrailStatus Creating { get; } = new GuardrailStatus("CREATING");
        public static GuardrailStatus Updating { get; } = new GuardrailStatus("UPDATING");
        public static GuardrailStatus Versioning { get; } = new GuardrailStatus("VERSIONING");
        public static GuardrailStatus Ready { get; } = new GuardrailStatus("READY");
        public static GuardrailStatus Failed { get; } = new GuardrailStatus("FAILED");
        public static GuardrailStatus Deleting { get; } = new GuardrailStatus("DELETING");

        public static bool operator ==(GuardrailStatus left, GuardrailStatus right) => left.Equals(right);
        public static bool operator !=(GuardrailStatus left, GuardrailStatus right) => !left.Equals(right);

        public static explicit operator string(GuardrailStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GuardrailStatus other && Equals(other);
        public bool Equals(GuardrailStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of topic in a policy
    /// </summary>
    [EnumType]
    public readonly struct GuardrailTopicType : IEquatable<GuardrailTopicType>
    {
        private readonly string _value;

        private GuardrailTopicType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GuardrailTopicType Deny { get; } = new GuardrailTopicType("DENY");

        public static bool operator ==(GuardrailTopicType left, GuardrailTopicType right) => left.Equals(right);
        public static bool operator !=(GuardrailTopicType left, GuardrailTopicType right) => !left.Equals(right);

        public static explicit operator string(GuardrailTopicType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GuardrailTopicType other && Equals(other);
        public bool Equals(GuardrailTopicType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of a knowledge base.
    /// </summary>
    [EnumType]
    public readonly struct KnowledgeBaseStatus : IEquatable<KnowledgeBaseStatus>
    {
        private readonly string _value;

        private KnowledgeBaseStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnowledgeBaseStatus Creating { get; } = new KnowledgeBaseStatus("CREATING");
        public static KnowledgeBaseStatus Active { get; } = new KnowledgeBaseStatus("ACTIVE");
        public static KnowledgeBaseStatus Deleting { get; } = new KnowledgeBaseStatus("DELETING");
        public static KnowledgeBaseStatus Updating { get; } = new KnowledgeBaseStatus("UPDATING");
        public static KnowledgeBaseStatus Failed { get; } = new KnowledgeBaseStatus("FAILED");

        public static bool operator ==(KnowledgeBaseStatus left, KnowledgeBaseStatus right) => left.Equals(right);
        public static bool operator !=(KnowledgeBaseStatus left, KnowledgeBaseStatus right) => !left.Equals(right);

        public static explicit operator string(KnowledgeBaseStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnowledgeBaseStatus other && Equals(other);
        public bool Equals(KnowledgeBaseStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The storage type of a knowledge base.
    /// </summary>
    [EnumType]
    public readonly struct KnowledgeBaseStorageType : IEquatable<KnowledgeBaseStorageType>
    {
        private readonly string _value;

        private KnowledgeBaseStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnowledgeBaseStorageType OpensearchServerless { get; } = new KnowledgeBaseStorageType("OPENSEARCH_SERVERLESS");
        public static KnowledgeBaseStorageType Pinecone { get; } = new KnowledgeBaseStorageType("PINECONE");
        public static KnowledgeBaseStorageType Rds { get; } = new KnowledgeBaseStorageType("RDS");

        public static bool operator ==(KnowledgeBaseStorageType left, KnowledgeBaseStorageType right) => left.Equals(right);
        public static bool operator !=(KnowledgeBaseStorageType left, KnowledgeBaseStorageType right) => !left.Equals(right);

        public static explicit operator string(KnowledgeBaseStorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnowledgeBaseStorageType other && Equals(other);
        public bool Equals(KnowledgeBaseStorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of a knowledge base.
    /// </summary>
    [EnumType]
    public readonly struct KnowledgeBaseType : IEquatable<KnowledgeBaseType>
    {
        private readonly string _value;

        private KnowledgeBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnowledgeBaseType Vector { get; } = new KnowledgeBaseType("VECTOR");

        public static bool operator ==(KnowledgeBaseType left, KnowledgeBaseType right) => left.Equals(right);
        public static bool operator !=(KnowledgeBaseType left, KnowledgeBaseType right) => !left.Equals(right);

        public static explicit operator string(KnowledgeBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnowledgeBaseType other && Equals(other);
        public bool Equals(KnowledgeBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
