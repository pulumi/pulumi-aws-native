// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.ECR
{
    /// <summary>
    /// The encryption type to use.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryEncryptionType : IEquatable<RepositoryEncryptionType>
    {
        private readonly string _value;

        private RepositoryEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepositoryEncryptionType Aes256 { get; } = new RepositoryEncryptionType("AES256");
        public static RepositoryEncryptionType Kms { get; } = new RepositoryEncryptionType("KMS");

        public static bool operator ==(RepositoryEncryptionType left, RepositoryEncryptionType right) => left.Equals(right);
        public static bool operator !=(RepositoryEncryptionType left, RepositoryEncryptionType right) => !left.Equals(right);

        public static explicit operator string(RepositoryEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryEncryptionType other && Equals(other);
        public bool Equals(RepositoryEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The image tag mutability setting for the repository.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryImageTagMutability : IEquatable<RepositoryImageTagMutability>
    {
        private readonly string _value;

        private RepositoryImageTagMutability(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepositoryImageTagMutability Mutable { get; } = new RepositoryImageTagMutability("MUTABLE");
        public static RepositoryImageTagMutability Immutable { get; } = new RepositoryImageTagMutability("IMMUTABLE");

        public static bool operator ==(RepositoryImageTagMutability left, RepositoryImageTagMutability right) => left.Equals(right);
        public static bool operator !=(RepositoryImageTagMutability left, RepositoryImageTagMutability right) => !left.Equals(right);

        public static explicit operator string(RepositoryImageTagMutability value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryImageTagMutability other && Equals(other);
        public bool Equals(RepositoryImageTagMutability other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
