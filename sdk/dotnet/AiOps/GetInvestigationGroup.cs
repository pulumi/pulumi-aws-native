// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AiOps
{
    public static class GetInvestigationGroup
    {
        /// <summary>
        /// Definition of AWS::AIOps::InvestigationGroup Resource Type
        /// </summary>
        public static Task<GetInvestigationGroupResult> InvokeAsync(GetInvestigationGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInvestigationGroupResult>("aws-native:aiops:getInvestigationGroup", args ?? new GetInvestigationGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::AIOps::InvestigationGroup Resource Type
        /// </summary>
        public static Output<GetInvestigationGroupResult> Invoke(GetInvestigationGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInvestigationGroupResult>("aws-native:aiops:getInvestigationGroup", args ?? new GetInvestigationGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::AIOps::InvestigationGroup Resource Type
        /// </summary>
        public static Output<GetInvestigationGroupResult> Invoke(GetInvestigationGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInvestigationGroupResult>("aws-native:aiops:getInvestigationGroup", args ?? new GetInvestigationGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInvestigationGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the investigation group. For example, `arn:aws:aiops: *Region* : *account-id* :investigation-group: *investigation-group-id*`
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetInvestigationGroupArgs()
        {
        }
        public static new GetInvestigationGroupArgs Empty => new GetInvestigationGroupArgs();
    }

    public sealed class GetInvestigationGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the investigation group. For example, `arn:aws:aiops: *Region* : *account-id* :investigation-group: *investigation-group-id*`
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetInvestigationGroupInvokeArgs()
        {
        }
        public static new GetInvestigationGroupInvokeArgs Empty => new GetInvestigationGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetInvestigationGroupResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the investigation group. For example, `arn:aws:aiops: *Region* : *account-id* :investigation-group: *investigation-group-id*`
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// An array of key-value pairs of notification channels to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.InvestigationGroupChatbotNotificationChannel> ChatbotNotificationChannels;
        /// <summary>
        /// The date and time that the investigation group was created.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// The name of the user who created the investigation group.
        /// </summary>
        public readonly string? CreatedBy;
        /// <summary>
        /// An array of cross account configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.InvestigationGroupCrossAccountConfiguration> CrossAccountConfigurations;
        /// <summary>
        /// Use this property to specify a customer managed AWS KMS key to encrypt your investigation data. If you omit this property, Amazon Q Developer operational investigations will use an AWS key to encrypt the data. For more information, see [Encryption of investigation data](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Investigations-Security.html#Investigations-KMS) .
        /// </summary>
        public readonly Outputs.InvestigationGroupEncryptionConfigMap? EncryptionConfig;
        /// <summary>
        /// Investigation Group policy
        /// </summary>
        public readonly string? InvestigationGroupPolicy;
        /// <summary>
        /// Flag to enable cloud trail history
        /// </summary>
        public readonly bool? IsCloudTrailEventHistoryEnabled;
        /// <summary>
        /// The date and time that the investigation group was most recently modified.
        /// </summary>
        public readonly string? LastModifiedAt;
        /// <summary>
        /// The name of the user who most recently modified the investigation group.
        /// </summary>
        public readonly string? LastModifiedBy;
        /// <summary>
        /// Specify the ARN of the IAM role that Amazon Q Developer operational investigations will use when it gathers investigation data. The permissions in this role determine which of your resources that Amazon Q Developer operational investigations will have access to during investigations.
        /// 
        /// For more information, see [How to control what data Amazon Q has access to during investigations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Investigations-Security.html#Investigations-Security-Data) .
        /// </summary>
        public readonly string? RoleArn;
        /// <summary>
        /// Enter the existing custom tag keys for custom applications in your system. Resource tags help Amazon Q narrow the search space when it is unable to discover definite relationships between resources. For example, to discover that an Amazon ECS service depends on an Amazon RDS database, Amazon Q can discover this relationship using data sources such as X-Ray and CloudWatch Application Signals. However, if you haven't deployed these features, Amazon Q will attempt to identify possible relationships. Tag boundaries can be used to narrow the resources that will be discovered by Amazon Q in these cases.
        /// 
        /// You don't need to enter tags created by myApplications or AWS CloudFormation , because Amazon Q can automatically detect those tags.
        /// </summary>
        public readonly ImmutableArray<string> TagKeyBoundaries;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;

        [OutputConstructor]
        private GetInvestigationGroupResult(
            string? arn,

            ImmutableArray<Outputs.InvestigationGroupChatbotNotificationChannel> chatbotNotificationChannels,

            string? createdAt,

            string? createdBy,

            ImmutableArray<Outputs.InvestigationGroupCrossAccountConfiguration> crossAccountConfigurations,

            Outputs.InvestigationGroupEncryptionConfigMap? encryptionConfig,

            string? investigationGroupPolicy,

            bool? isCloudTrailEventHistoryEnabled,

            string? lastModifiedAt,

            string? lastModifiedBy,

            string? roleArn,

            ImmutableArray<string> tagKeyBoundaries,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags)
        {
            Arn = arn;
            ChatbotNotificationChannels = chatbotNotificationChannels;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            CrossAccountConfigurations = crossAccountConfigurations;
            EncryptionConfig = encryptionConfig;
            InvestigationGroupPolicy = investigationGroupPolicy;
            IsCloudTrailEventHistoryEnabled = isCloudTrailEventHistoryEnabled;
            LastModifiedAt = lastModifiedAt;
            LastModifiedBy = lastModifiedBy;
            RoleArn = roleArn;
            TagKeyBoundaries = tagKeyBoundaries;
            Tags = tags;
        }
    }
}
