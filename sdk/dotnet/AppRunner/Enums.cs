// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.AppRunner
{
    /// <summary>
    /// The implementation provider chosen for tracing App Runner services.
    /// </summary>
    [EnumType]
    public readonly struct ObservabilityConfigurationTraceConfigurationVendor : IEquatable<ObservabilityConfigurationTraceConfigurationVendor>
    {
        private readonly string _value;

        private ObservabilityConfigurationTraceConfigurationVendor(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ObservabilityConfigurationTraceConfigurationVendor Awsxray { get; } = new ObservabilityConfigurationTraceConfigurationVendor("AWSXRAY");

        public static bool operator ==(ObservabilityConfigurationTraceConfigurationVendor left, ObservabilityConfigurationTraceConfigurationVendor right) => left.Equals(right);
        public static bool operator !=(ObservabilityConfigurationTraceConfigurationVendor left, ObservabilityConfigurationTraceConfigurationVendor right) => !left.Equals(right);

        public static explicit operator string(ObservabilityConfigurationTraceConfigurationVendor value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ObservabilityConfigurationTraceConfigurationVendor other && Equals(other);
        public bool Equals(ObservabilityConfigurationTraceConfigurationVendor other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configuration Source
    /// </summary>
    [EnumType]
    public readonly struct ServiceCodeConfigurationConfigurationSource : IEquatable<ServiceCodeConfigurationConfigurationSource>
    {
        private readonly string _value;

        private ServiceCodeConfigurationConfigurationSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceCodeConfigurationConfigurationSource Repository { get; } = new ServiceCodeConfigurationConfigurationSource("REPOSITORY");
        public static ServiceCodeConfigurationConfigurationSource Api { get; } = new ServiceCodeConfigurationConfigurationSource("API");

        public static bool operator ==(ServiceCodeConfigurationConfigurationSource left, ServiceCodeConfigurationConfigurationSource right) => left.Equals(right);
        public static bool operator !=(ServiceCodeConfigurationConfigurationSource left, ServiceCodeConfigurationConfigurationSource right) => !left.Equals(right);

        public static explicit operator string(ServiceCodeConfigurationConfigurationSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceCodeConfigurationConfigurationSource other && Equals(other);
        public bool Equals(ServiceCodeConfigurationConfigurationSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct ServiceCodeConfigurationValuesRuntime : IEquatable<ServiceCodeConfigurationValuesRuntime>
    {
        private readonly string _value;

        private ServiceCodeConfigurationValuesRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceCodeConfigurationValuesRuntime Python3 { get; } = new ServiceCodeConfigurationValuesRuntime("PYTHON_3");
        public static ServiceCodeConfigurationValuesRuntime Nodejs12 { get; } = new ServiceCodeConfigurationValuesRuntime("NODEJS_12");
        public static ServiceCodeConfigurationValuesRuntime Nodejs14 { get; } = new ServiceCodeConfigurationValuesRuntime("NODEJS_14");
        public static ServiceCodeConfigurationValuesRuntime Corretto8 { get; } = new ServiceCodeConfigurationValuesRuntime("CORRETTO_8");
        public static ServiceCodeConfigurationValuesRuntime Corretto11 { get; } = new ServiceCodeConfigurationValuesRuntime("CORRETTO_11");
        public static ServiceCodeConfigurationValuesRuntime Nodejs16 { get; } = new ServiceCodeConfigurationValuesRuntime("NODEJS_16");
        public static ServiceCodeConfigurationValuesRuntime Go1 { get; } = new ServiceCodeConfigurationValuesRuntime("GO_1");
        public static ServiceCodeConfigurationValuesRuntime Dotnet6 { get; } = new ServiceCodeConfigurationValuesRuntime("DOTNET_6");
        public static ServiceCodeConfigurationValuesRuntime Php81 { get; } = new ServiceCodeConfigurationValuesRuntime("PHP_81");
        public static ServiceCodeConfigurationValuesRuntime Ruby31 { get; } = new ServiceCodeConfigurationValuesRuntime("RUBY_31");

        public static bool operator ==(ServiceCodeConfigurationValuesRuntime left, ServiceCodeConfigurationValuesRuntime right) => left.Equals(right);
        public static bool operator !=(ServiceCodeConfigurationValuesRuntime left, ServiceCodeConfigurationValuesRuntime right) => !left.Equals(right);

        public static explicit operator string(ServiceCodeConfigurationValuesRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceCodeConfigurationValuesRuntime other && Equals(other);
        public bool Equals(ServiceCodeConfigurationValuesRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Network egress type.
    /// </summary>
    [EnumType]
    public readonly struct ServiceEgressConfigurationEgressType : IEquatable<ServiceEgressConfigurationEgressType>
    {
        private readonly string _value;

        private ServiceEgressConfigurationEgressType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceEgressConfigurationEgressType Default { get; } = new ServiceEgressConfigurationEgressType("DEFAULT");
        public static ServiceEgressConfigurationEgressType Vpc { get; } = new ServiceEgressConfigurationEgressType("VPC");

        public static bool operator ==(ServiceEgressConfigurationEgressType left, ServiceEgressConfigurationEgressType right) => left.Equals(right);
        public static bool operator !=(ServiceEgressConfigurationEgressType left, ServiceEgressConfigurationEgressType right) => !left.Equals(right);

        public static explicit operator string(ServiceEgressConfigurationEgressType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceEgressConfigurationEgressType other && Equals(other);
        public bool Equals(ServiceEgressConfigurationEgressType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Health Check Protocol
    /// </summary>
    [EnumType]
    public readonly struct ServiceHealthCheckConfigurationProtocol : IEquatable<ServiceHealthCheckConfigurationProtocol>
    {
        private readonly string _value;

        private ServiceHealthCheckConfigurationProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceHealthCheckConfigurationProtocol Tcp { get; } = new ServiceHealthCheckConfigurationProtocol("TCP");
        public static ServiceHealthCheckConfigurationProtocol Http { get; } = new ServiceHealthCheckConfigurationProtocol("HTTP");

        public static bool operator ==(ServiceHealthCheckConfigurationProtocol left, ServiceHealthCheckConfigurationProtocol right) => left.Equals(right);
        public static bool operator !=(ServiceHealthCheckConfigurationProtocol left, ServiceHealthCheckConfigurationProtocol right) => !left.Equals(right);

        public static explicit operator string(ServiceHealthCheckConfigurationProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceHealthCheckConfigurationProtocol other && Equals(other);
        public bool Equals(ServiceHealthCheckConfigurationProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Image Repository Type
    /// </summary>
    [EnumType]
    public readonly struct ServiceImageRepositoryImageRepositoryType : IEquatable<ServiceImageRepositoryImageRepositoryType>
    {
        private readonly string _value;

        private ServiceImageRepositoryImageRepositoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceImageRepositoryImageRepositoryType Ecr { get; } = new ServiceImageRepositoryImageRepositoryType("ECR");
        public static ServiceImageRepositoryImageRepositoryType EcrPublic { get; } = new ServiceImageRepositoryImageRepositoryType("ECR_PUBLIC");

        public static bool operator ==(ServiceImageRepositoryImageRepositoryType left, ServiceImageRepositoryImageRepositoryType right) => left.Equals(right);
        public static bool operator !=(ServiceImageRepositoryImageRepositoryType left, ServiceImageRepositoryImageRepositoryType right) => !left.Equals(right);

        public static explicit operator string(ServiceImageRepositoryImageRepositoryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceImageRepositoryImageRepositoryType other && Equals(other);
        public bool Equals(ServiceImageRepositoryImageRepositoryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source Code Version Type
    /// </summary>
    [EnumType]
    public readonly struct ServiceSourceCodeVersionType : IEquatable<ServiceSourceCodeVersionType>
    {
        private readonly string _value;

        private ServiceSourceCodeVersionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSourceCodeVersionType Branch { get; } = new ServiceSourceCodeVersionType("BRANCH");

        public static bool operator ==(ServiceSourceCodeVersionType left, ServiceSourceCodeVersionType right) => left.Equals(right);
        public static bool operator !=(ServiceSourceCodeVersionType left, ServiceSourceCodeVersionType right) => !left.Equals(right);

        public static explicit operator string(ServiceSourceCodeVersionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSourceCodeVersionType other && Equals(other);
        public bool Equals(ServiceSourceCodeVersionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of the VpcIngressConnection.
    /// </summary>
    [EnumType]
    public readonly struct VpcIngressConnectionStatus : IEquatable<VpcIngressConnectionStatus>
    {
        private readonly string _value;

        private VpcIngressConnectionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpcIngressConnectionStatus Available { get; } = new VpcIngressConnectionStatus("AVAILABLE");
        public static VpcIngressConnectionStatus PendingCreation { get; } = new VpcIngressConnectionStatus("PENDING_CREATION");
        public static VpcIngressConnectionStatus PendingUpdate { get; } = new VpcIngressConnectionStatus("PENDING_UPDATE");
        public static VpcIngressConnectionStatus PendingDeletion { get; } = new VpcIngressConnectionStatus("PENDING_DELETION");
        public static VpcIngressConnectionStatus FailedCreation { get; } = new VpcIngressConnectionStatus("FAILED_CREATION");
        public static VpcIngressConnectionStatus FailedUpdate { get; } = new VpcIngressConnectionStatus("FAILED_UPDATE");
        public static VpcIngressConnectionStatus FailedDeletion { get; } = new VpcIngressConnectionStatus("FAILED_DELETION");
        public static VpcIngressConnectionStatus Deleted { get; } = new VpcIngressConnectionStatus("DELETED");

        public static bool operator ==(VpcIngressConnectionStatus left, VpcIngressConnectionStatus right) => left.Equals(right);
        public static bool operator !=(VpcIngressConnectionStatus left, VpcIngressConnectionStatus right) => !left.Equals(right);

        public static explicit operator string(VpcIngressConnectionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpcIngressConnectionStatus other && Equals(other);
        public bool Equals(VpcIngressConnectionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
