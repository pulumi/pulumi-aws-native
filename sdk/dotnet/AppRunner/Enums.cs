// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.AppRunner
{
    /// <summary>
    /// Configuration Source
    /// </summary>
    [EnumType]
    public readonly struct ServiceCodeConfigurationConfigurationSource : IEquatable<ServiceCodeConfigurationConfigurationSource>
    {
        private readonly string _value;

        private ServiceCodeConfigurationConfigurationSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceCodeConfigurationConfigurationSource Repository { get; } = new ServiceCodeConfigurationConfigurationSource("REPOSITORY");
        public static ServiceCodeConfigurationConfigurationSource Api { get; } = new ServiceCodeConfigurationConfigurationSource("API");

        public static bool operator ==(ServiceCodeConfigurationConfigurationSource left, ServiceCodeConfigurationConfigurationSource right) => left.Equals(right);
        public static bool operator !=(ServiceCodeConfigurationConfigurationSource left, ServiceCodeConfigurationConfigurationSource right) => !left.Equals(right);

        public static explicit operator string(ServiceCodeConfigurationConfigurationSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceCodeConfigurationConfigurationSource other && Equals(other);
        public bool Equals(ServiceCodeConfigurationConfigurationSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct ServiceCodeConfigurationValuesRuntime : IEquatable<ServiceCodeConfigurationValuesRuntime>
    {
        private readonly string _value;

        private ServiceCodeConfigurationValuesRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceCodeConfigurationValuesRuntime Python3 { get; } = new ServiceCodeConfigurationValuesRuntime("PYTHON_3");
        public static ServiceCodeConfigurationValuesRuntime Nodejs12 { get; } = new ServiceCodeConfigurationValuesRuntime("NODEJS_12");

        public static bool operator ==(ServiceCodeConfigurationValuesRuntime left, ServiceCodeConfigurationValuesRuntime right) => left.Equals(right);
        public static bool operator !=(ServiceCodeConfigurationValuesRuntime left, ServiceCodeConfigurationValuesRuntime right) => !left.Equals(right);

        public static explicit operator string(ServiceCodeConfigurationValuesRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceCodeConfigurationValuesRuntime other && Equals(other);
        public bool Equals(ServiceCodeConfigurationValuesRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Health Check Protocol
    /// </summary>
    [EnumType]
    public readonly struct ServiceHealthCheckConfigurationProtocol : IEquatable<ServiceHealthCheckConfigurationProtocol>
    {
        private readonly string _value;

        private ServiceHealthCheckConfigurationProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceHealthCheckConfigurationProtocol Tcp { get; } = new ServiceHealthCheckConfigurationProtocol("TCP");
        public static ServiceHealthCheckConfigurationProtocol Http { get; } = new ServiceHealthCheckConfigurationProtocol("HTTP");

        public static bool operator ==(ServiceHealthCheckConfigurationProtocol left, ServiceHealthCheckConfigurationProtocol right) => left.Equals(right);
        public static bool operator !=(ServiceHealthCheckConfigurationProtocol left, ServiceHealthCheckConfigurationProtocol right) => !left.Equals(right);

        public static explicit operator string(ServiceHealthCheckConfigurationProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceHealthCheckConfigurationProtocol other && Equals(other);
        public bool Equals(ServiceHealthCheckConfigurationProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Image Repository Type
    /// </summary>
    [EnumType]
    public readonly struct ServiceImageRepositoryImageRepositoryType : IEquatable<ServiceImageRepositoryImageRepositoryType>
    {
        private readonly string _value;

        private ServiceImageRepositoryImageRepositoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceImageRepositoryImageRepositoryType Ecr { get; } = new ServiceImageRepositoryImageRepositoryType("ECR");
        public static ServiceImageRepositoryImageRepositoryType EcrPublic { get; } = new ServiceImageRepositoryImageRepositoryType("ECR_PUBLIC");

        public static bool operator ==(ServiceImageRepositoryImageRepositoryType left, ServiceImageRepositoryImageRepositoryType right) => left.Equals(right);
        public static bool operator !=(ServiceImageRepositoryImageRepositoryType left, ServiceImageRepositoryImageRepositoryType right) => !left.Equals(right);

        public static explicit operator string(ServiceImageRepositoryImageRepositoryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceImageRepositoryImageRepositoryType other && Equals(other);
        public bool Equals(ServiceImageRepositoryImageRepositoryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Source Code Version Type
    /// </summary>
    [EnumType]
    public readonly struct ServiceSourceCodeVersionType : IEquatable<ServiceSourceCodeVersionType>
    {
        private readonly string _value;

        private ServiceSourceCodeVersionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSourceCodeVersionType Branch { get; } = new ServiceSourceCodeVersionType("BRANCH");

        public static bool operator ==(ServiceSourceCodeVersionType left, ServiceSourceCodeVersionType right) => left.Equals(right);
        public static bool operator !=(ServiceSourceCodeVersionType left, ServiceSourceCodeVersionType right) => !left.Equals(right);

        public static explicit operator string(ServiceSourceCodeVersionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSourceCodeVersionType other && Equals(other);
        public bool Equals(ServiceSourceCodeVersionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
