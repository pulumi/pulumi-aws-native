// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AppRunner
{
    /// <summary>
    /// The AWS::AppRunner::ObservabilityConfiguration resource  is an AWS App Runner resource type that specifies an App Runner observability configuration
    /// </summary>
    [AwsNativeResourceType("aws-native:apprunner:ObservabilityConfiguration")]
    public partial class ObservabilityConfiguration : Pulumi.CustomResource
    {
        /// <summary>
        /// It's set to true for the configuration with the highest Revision among all configurations that share the same Name. It's set to false otherwise.
        /// </summary>
        [Output("latest")]
        public Output<bool> Latest { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of this ObservabilityConfiguration
        /// </summary>
        [Output("observabilityConfigurationArn")]
        public Output<string> ObservabilityConfigurationArn { get; private set; } = null!;

        /// <summary>
        /// A name for the observability configuration. When you use it for the first time in an AWS Region, App Runner creates revision number 1 of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.
        /// </summary>
        [Output("observabilityConfigurationName")]
        public Output<string?> ObservabilityConfigurationName { get; private set; } = null!;

        /// <summary>
        /// The revision of this observability configuration. It's unique among all the active configurations ('Status': 'ACTIVE') that share the same ObservabilityConfigurationName.
        /// </summary>
        [Output("observabilityConfigurationRevision")]
        public Output<int> ObservabilityConfigurationRevision { get; private set; } = null!;

        /// <summary>
        /// A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.ObservabilityConfigurationTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.
        /// </summary>
        [Output("traceConfiguration")]
        public Output<Outputs.ObservabilityConfigurationTraceConfiguration?> TraceConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a ObservabilityConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObservabilityConfiguration(string name, ObservabilityConfigurationArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:apprunner:ObservabilityConfiguration", name, args ?? new ObservabilityConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObservabilityConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:apprunner:ObservabilityConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObservabilityConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObservabilityConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ObservabilityConfiguration(name, id, options);
        }
    }

    public sealed class ObservabilityConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A name for the observability configuration. When you use it for the first time in an AWS Region, App Runner creates revision number 1 of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.
        /// </summary>
        [Input("observabilityConfigurationName")]
        public Input<string>? ObservabilityConfigurationName { get; set; }

        [Input("tags")]
        private InputList<Inputs.ObservabilityConfigurationTagArgs>? _tags;

        /// <summary>
        /// A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.
        /// </summary>
        public InputList<Inputs.ObservabilityConfigurationTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ObservabilityConfigurationTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.
        /// </summary>
        [Input("traceConfiguration")]
        public Input<Inputs.ObservabilityConfigurationTraceConfigurationArgs>? TraceConfiguration { get; set; }

        public ObservabilityConfigurationArgs()
        {
        }
    }
}
