// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AppRunner
{
    /// <summary>
    /// Describes an AWS App Runner automatic configuration resource that enables automatic scaling of instances used to process web requests. You can share an auto scaling configuration across multiple services.
    /// </summary>
    [AwsNativeResourceType("aws-native:apprunner:AutoScalingConfiguration")]
    public partial class AutoScalingConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of this auto scaling configuration.
        /// </summary>
        [Output("autoScalingConfigurationArn")]
        public Output<string> AutoScalingConfigurationArn { get; private set; } = null!;

        /// <summary>
        /// The customer-provided auto scaling configuration name.  When you use it for the first time in an AWS Region, App Runner creates revision number 1 of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration. The auto scaling configuration name can be used in multiple revisions of a configuration.
        /// </summary>
        [Output("autoScalingConfigurationName")]
        public Output<string?> AutoScalingConfigurationName { get; private set; } = null!;

        /// <summary>
        /// The revision of this auto scaling configuration. It's unique among all the active configurations ("Status": "ACTIVE") that share the same AutoScalingConfigurationName.
        /// </summary>
        [Output("autoScalingConfigurationRevision")]
        public Output<int> AutoScalingConfigurationRevision { get; private set; } = null!;

        /// <summary>
        /// It's set to true for the configuration with the highest Revision among all configurations that share the same AutoScalingConfigurationName. It's set to false otherwise. App Runner temporarily doubles the number of provisioned instances during deployments, to maintain the same capacity for both old and new code.
        /// </summary>
        [Output("latest")]
        public Output<bool> Latest { get; private set; } = null!;

        /// <summary>
        /// The maximum number of concurrent requests that an instance processes. If the number of concurrent requests exceeds this limit, App Runner scales the service up to use more instances to process the requests.
        /// </summary>
        [Output("maxConcurrency")]
        public Output<int?> MaxConcurrency { get; private set; } = null!;

        /// <summary>
        /// The maximum number of instances that an App Runner service scales up to. At most MaxSize instances actively serve traffic for your service.
        /// </summary>
        [Output("maxSize")]
        public Output<int?> MaxSize { get; private set; } = null!;

        /// <summary>
        /// The minimum number of instances that App Runner provisions for a service. The service always has at least MinSize provisioned instances. Some of them actively serve traffic. The rest of them (provisioned and inactive instances) are a cost-effective compute capacity reserve and are ready to be quickly activated. You pay for memory usage of all the provisioned instances. You pay for CPU usage of only the active subset.
        /// </summary>
        [Output("minSize")]
        public Output<int?> MinSize { get; private set; } = null!;

        /// <summary>
        /// A list of metadata items that you can associate with your auto scaling configuration resource. A tag is a key-value pair.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.AutoScalingConfigurationTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a AutoScalingConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutoScalingConfiguration(string name, AutoScalingConfigurationArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:apprunner:AutoScalingConfiguration", name, args ?? new AutoScalingConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutoScalingConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:apprunner:AutoScalingConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutoScalingConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutoScalingConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AutoScalingConfiguration(name, id, options);
        }
    }

    public sealed class AutoScalingConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The customer-provided auto scaling configuration name.  When you use it for the first time in an AWS Region, App Runner creates revision number 1 of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration. The auto scaling configuration name can be used in multiple revisions of a configuration.
        /// </summary>
        [Input("autoScalingConfigurationName")]
        public Input<string>? AutoScalingConfigurationName { get; set; }

        /// <summary>
        /// The maximum number of concurrent requests that an instance processes. If the number of concurrent requests exceeds this limit, App Runner scales the service up to use more instances to process the requests.
        /// </summary>
        [Input("maxConcurrency")]
        public Input<int>? MaxConcurrency { get; set; }

        /// <summary>
        /// The maximum number of instances that an App Runner service scales up to. At most MaxSize instances actively serve traffic for your service.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// The minimum number of instances that App Runner provisions for a service. The service always has at least MinSize provisioned instances. Some of them actively serve traffic. The rest of them (provisioned and inactive instances) are a cost-effective compute capacity reserve and are ready to be quickly activated. You pay for memory usage of all the provisioned instances. You pay for CPU usage of only the active subset.
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        [Input("tags")]
        private InputList<Inputs.AutoScalingConfigurationTagArgs>? _tags;

        /// <summary>
        /// A list of metadata items that you can associate with your auto scaling configuration resource. A tag is a key-value pair.
        /// </summary>
        public InputList<Inputs.AutoScalingConfigurationTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AutoScalingConfigurationTagArgs>());
            set => _tags = value;
        }

        public AutoScalingConfigurationArgs()
        {
        }
        public static new AutoScalingConfigurationArgs Empty => new AutoScalingConfigurationArgs();
    }
}
