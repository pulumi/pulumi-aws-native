// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CloudFront
{
    public static class GetCachePolicy
    {
        /// <summary>
        /// A cache policy.
        ///  When it's attached to a cache behavior, the cache policy determines the following:
        ///   +  The values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.
        ///   +  The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.
        ///   
        ///  The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find a valid object in its cache that matches the request's cache key. If you want to send values to the origin but *not* include them in the cache key, use ``OriginRequestPolicy``.
        /// </summary>
        public static Task<GetCachePolicyResult> InvokeAsync(GetCachePolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCachePolicyResult>("aws-native:cloudfront:getCachePolicy", args ?? new GetCachePolicyArgs(), options.WithDefaults());

        /// <summary>
        /// A cache policy.
        ///  When it's attached to a cache behavior, the cache policy determines the following:
        ///   +  The values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.
        ///   +  The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.
        ///   
        ///  The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find a valid object in its cache that matches the request's cache key. If you want to send values to the origin but *not* include them in the cache key, use ``OriginRequestPolicy``.
        /// </summary>
        public static Output<GetCachePolicyResult> Invoke(GetCachePolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCachePolicyResult>("aws-native:cloudfront:getCachePolicy", args ?? new GetCachePolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A cache policy.
        ///  When it's attached to a cache behavior, the cache policy determines the following:
        ///   +  The values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.
        ///   +  The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.
        ///   
        ///  The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find a valid object in its cache that matches the request's cache key. If you want to send values to the origin but *not* include them in the cache key, use ``OriginRequestPolicy``.
        /// </summary>
        public static Output<GetCachePolicyResult> Invoke(GetCachePolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCachePolicyResult>("aws-native:cloudfront:getCachePolicy", args ?? new GetCachePolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCachePolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the cache policy. For example: `2766f7b2-75c5-41c6-8f06-bf4303a2f2f5` .
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCachePolicyArgs()
        {
        }
        public static new GetCachePolicyArgs Empty => new GetCachePolicyArgs();
    }

    public sealed class GetCachePolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the cache policy. For example: `2766f7b2-75c5-41c6-8f06-bf4303a2f2f5` .
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCachePolicyInvokeArgs()
        {
        }
        public static new GetCachePolicyInvokeArgs Empty => new GetCachePolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetCachePolicyResult
    {
        /// <summary>
        /// The cache policy configuration.
        /// </summary>
        public readonly Outputs.CachePolicyConfig? CachePolicyConfig;
        /// <summary>
        /// The unique identifier for the cache policy. For example: `2766f7b2-75c5-41c6-8f06-bf4303a2f2f5` .
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The date and time when the cache policy was last modified.
        /// </summary>
        public readonly string? LastModifiedTime;

        [OutputConstructor]
        private GetCachePolicyResult(
            Outputs.CachePolicyConfig? cachePolicyConfig,

            string? id,

            string? lastModifiedTime)
        {
            CachePolicyConfig = cachePolicyConfig;
            Id = id;
            LastModifiedTime = lastModifiedTime;
        }
    }
}
