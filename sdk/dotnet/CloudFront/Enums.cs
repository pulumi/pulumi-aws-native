// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.CloudFront
{
    /// <summary>
    /// The type of traffic configuration.
    /// </summary>
    [EnumType]
    public readonly struct ContinuousDeploymentPolicyConfigType : IEquatable<ContinuousDeploymentPolicyConfigType>
    {
        private readonly string _value;

        private ContinuousDeploymentPolicyConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContinuousDeploymentPolicyConfigType SingleWeight { get; } = new ContinuousDeploymentPolicyConfigType("SingleWeight");
        public static ContinuousDeploymentPolicyConfigType SingleHeader { get; } = new ContinuousDeploymentPolicyConfigType("SingleHeader");

        public static bool operator ==(ContinuousDeploymentPolicyConfigType left, ContinuousDeploymentPolicyConfigType right) => left.Equals(right);
        public static bool operator !=(ContinuousDeploymentPolicyConfigType left, ContinuousDeploymentPolicyConfigType right) => !left.Equals(right);

        public static explicit operator string(ContinuousDeploymentPolicyConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContinuousDeploymentPolicyConfigType other && Equals(other);
        public bool Equals(ContinuousDeploymentPolicyConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of traffic configuration.
    /// </summary>
    [EnumType]
    public readonly struct ContinuousDeploymentPolicyTrafficConfigType : IEquatable<ContinuousDeploymentPolicyTrafficConfigType>
    {
        private readonly string _value;

        private ContinuousDeploymentPolicyTrafficConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContinuousDeploymentPolicyTrafficConfigType SingleWeight { get; } = new ContinuousDeploymentPolicyTrafficConfigType("SingleWeight");
        public static ContinuousDeploymentPolicyTrafficConfigType SingleHeader { get; } = new ContinuousDeploymentPolicyTrafficConfigType("SingleHeader");

        public static bool operator ==(ContinuousDeploymentPolicyTrafficConfigType left, ContinuousDeploymentPolicyTrafficConfigType right) => left.Equals(right);
        public static bool operator !=(ContinuousDeploymentPolicyTrafficConfigType left, ContinuousDeploymentPolicyTrafficConfigType right) => !left.Equals(right);

        public static explicit operator string(ContinuousDeploymentPolicyTrafficConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContinuousDeploymentPolicyTrafficConfigType other && Equals(other);
        public bool Equals(ContinuousDeploymentPolicyTrafficConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DistributionOriginGroupSelectionCriteria : IEquatable<DistributionOriginGroupSelectionCriteria>
    {
        private readonly string _value;

        private DistributionOriginGroupSelectionCriteria(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DistributionOriginGroupSelectionCriteria Default { get; } = new DistributionOriginGroupSelectionCriteria("default");
        public static DistributionOriginGroupSelectionCriteria MediaQualityBased { get; } = new DistributionOriginGroupSelectionCriteria("media-quality-based");

        public static bool operator ==(DistributionOriginGroupSelectionCriteria left, DistributionOriginGroupSelectionCriteria right) => left.Equals(right);
        public static bool operator !=(DistributionOriginGroupSelectionCriteria left, DistributionOriginGroupSelectionCriteria right) => !left.Equals(right);

        public static explicit operator string(DistributionOriginGroupSelectionCriteria value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionOriginGroupSelectionCriteria other && Equals(other);
        public bool Equals(DistributionOriginGroupSelectionCriteria other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus : IEquatable<MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus>
    {
        private readonly string _value;

        private MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus Enabled { get; } = new MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus("Enabled");
        public static MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus Disabled { get; } = new MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus("Disabled");

        public static bool operator ==(MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus left, MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus right) => left.Equals(right);
        public static bool operator !=(MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus left, MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus right) => !left.Equals(right);

        public static explicit operator string(MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus other && Equals(other);
        public bool Equals(MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
