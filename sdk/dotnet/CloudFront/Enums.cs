// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.CloudFront
{
    /// <summary>
    /// The type of traffic configuration.
    /// </summary>
    [EnumType]
    public readonly struct ContinuousDeploymentPolicyConfigType : IEquatable<ContinuousDeploymentPolicyConfigType>
    {
        private readonly string _value;

        private ContinuousDeploymentPolicyConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContinuousDeploymentPolicyConfigType SingleWeight { get; } = new ContinuousDeploymentPolicyConfigType("SingleWeight");
        public static ContinuousDeploymentPolicyConfigType SingleHeader { get; } = new ContinuousDeploymentPolicyConfigType("SingleHeader");

        public static bool operator ==(ContinuousDeploymentPolicyConfigType left, ContinuousDeploymentPolicyConfigType right) => left.Equals(right);
        public static bool operator !=(ContinuousDeploymentPolicyConfigType left, ContinuousDeploymentPolicyConfigType right) => !left.Equals(right);

        public static explicit operator string(ContinuousDeploymentPolicyConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContinuousDeploymentPolicyConfigType other && Equals(other);
        public bool Equals(ContinuousDeploymentPolicyConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of traffic configuration.
    /// </summary>
    [EnumType]
    public readonly struct ContinuousDeploymentPolicyTrafficConfigType : IEquatable<ContinuousDeploymentPolicyTrafficConfigType>
    {
        private readonly string _value;

        private ContinuousDeploymentPolicyTrafficConfigType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContinuousDeploymentPolicyTrafficConfigType SingleWeight { get; } = new ContinuousDeploymentPolicyTrafficConfigType("SingleWeight");
        public static ContinuousDeploymentPolicyTrafficConfigType SingleHeader { get; } = new ContinuousDeploymentPolicyTrafficConfigType("SingleHeader");

        public static bool operator ==(ContinuousDeploymentPolicyTrafficConfigType left, ContinuousDeploymentPolicyTrafficConfigType right) => left.Equals(right);
        public static bool operator !=(ContinuousDeploymentPolicyTrafficConfigType left, ContinuousDeploymentPolicyTrafficConfigType right) => !left.Equals(right);

        public static explicit operator string(ContinuousDeploymentPolicyTrafficConfigType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContinuousDeploymentPolicyTrafficConfigType other && Equals(other);
        public bool Equals(ContinuousDeploymentPolicyTrafficConfigType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DistributionConnectionMode : IEquatable<DistributionConnectionMode>
    {
        private readonly string _value;

        private DistributionConnectionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DistributionConnectionMode Direct { get; } = new DistributionConnectionMode("direct");
        public static DistributionConnectionMode TenantOnly { get; } = new DistributionConnectionMode("tenant-only");

        public static bool operator ==(DistributionConnectionMode left, DistributionConnectionMode right) => left.Equals(right);
        public static bool operator !=(DistributionConnectionMode left, DistributionConnectionMode right) => !left.Equals(right);

        public static explicit operator string(DistributionConnectionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionConnectionMode other && Equals(other);
        public bool Equals(DistributionConnectionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DistributionOriginGroupSelectionCriteria : IEquatable<DistributionOriginGroupSelectionCriteria>
    {
        private readonly string _value;

        private DistributionOriginGroupSelectionCriteria(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DistributionOriginGroupSelectionCriteria Default { get; } = new DistributionOriginGroupSelectionCriteria("default");
        public static DistributionOriginGroupSelectionCriteria MediaQualityBased { get; } = new DistributionOriginGroupSelectionCriteria("media-quality-based");

        public static bool operator ==(DistributionOriginGroupSelectionCriteria left, DistributionOriginGroupSelectionCriteria right) => left.Equals(right);
        public static bool operator !=(DistributionOriginGroupSelectionCriteria left, DistributionOriginGroupSelectionCriteria right) => !left.Equals(right);

        public static explicit operator string(DistributionOriginGroupSelectionCriteria value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionOriginGroupSelectionCriteria other && Equals(other);
        public bool Equals(DistributionOriginGroupSelectionCriteria other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DistributionTenantDomainResultReason : IEquatable<DistributionTenantDomainResultReason>
    {
        private readonly string _value;

        private DistributionTenantDomainResultReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DistributionTenantDomainResultReason PendingValidation { get; } = new DistributionTenantDomainResultReason("pending-validation");
        public static DistributionTenantDomainResultReason ValidationFailed { get; } = new DistributionTenantDomainResultReason("validation-failed");
        public static DistributionTenantDomainResultReason PendingActivation { get; } = new DistributionTenantDomainResultReason("pending-activation");
        public static DistributionTenantDomainResultReason CustomerActivated { get; } = new DistributionTenantDomainResultReason("customer-activated");

        public static bool operator ==(DistributionTenantDomainResultReason left, DistributionTenantDomainResultReason right) => left.Equals(right);
        public static bool operator !=(DistributionTenantDomainResultReason left, DistributionTenantDomainResultReason right) => !left.Equals(right);

        public static explicit operator string(DistributionTenantDomainResultReason value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionTenantDomainResultReason other && Equals(other);
        public bool Equals(DistributionTenantDomainResultReason other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DistributionTenantDomainResultStatus : IEquatable<DistributionTenantDomainResultStatus>
    {
        private readonly string _value;

        private DistributionTenantDomainResultStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DistributionTenantDomainResultStatus Active { get; } = new DistributionTenantDomainResultStatus("active");
        public static DistributionTenantDomainResultStatus Inactive { get; } = new DistributionTenantDomainResultStatus("inactive");

        public static bool operator ==(DistributionTenantDomainResultStatus left, DistributionTenantDomainResultStatus right) => left.Equals(right);
        public static bool operator !=(DistributionTenantDomainResultStatus left, DistributionTenantDomainResultStatus right) => !left.Equals(right);

        public static explicit operator string(DistributionTenantDomainResultStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionTenantDomainResultStatus other && Equals(other);
        public bool Equals(DistributionTenantDomainResultStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DistributionTenantGeoRestrictionCustomizationRestrictionType : IEquatable<DistributionTenantGeoRestrictionCustomizationRestrictionType>
    {
        private readonly string _value;

        private DistributionTenantGeoRestrictionCustomizationRestrictionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DistributionTenantGeoRestrictionCustomizationRestrictionType Blacklist { get; } = new DistributionTenantGeoRestrictionCustomizationRestrictionType("blacklist");
        public static DistributionTenantGeoRestrictionCustomizationRestrictionType Whitelist { get; } = new DistributionTenantGeoRestrictionCustomizationRestrictionType("whitelist");
        public static DistributionTenantGeoRestrictionCustomizationRestrictionType None { get; } = new DistributionTenantGeoRestrictionCustomizationRestrictionType("none");

        public static bool operator ==(DistributionTenantGeoRestrictionCustomizationRestrictionType left, DistributionTenantGeoRestrictionCustomizationRestrictionType right) => left.Equals(right);
        public static bool operator !=(DistributionTenantGeoRestrictionCustomizationRestrictionType left, DistributionTenantGeoRestrictionCustomizationRestrictionType right) => !left.Equals(right);

        public static explicit operator string(DistributionTenantGeoRestrictionCustomizationRestrictionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionTenantGeoRestrictionCustomizationRestrictionType other && Equals(other);
        public bool Equals(DistributionTenantGeoRestrictionCustomizationRestrictionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference : IEquatable<DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference>
    {
        private readonly string _value;

        private DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference Enabled { get; } = new DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference("enabled");
        public static DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference Disabled { get; } = new DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference("disabled");

        public static bool operator ==(DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference left, DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference right) => left.Equals(right);
        public static bool operator !=(DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference left, DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference right) => !left.Equals(right);

        public static explicit operator string(DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference other && Equals(other);
        public bool Equals(DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DistributionTenantManagedCertificateRequestValidationTokenHost : IEquatable<DistributionTenantManagedCertificateRequestValidationTokenHost>
    {
        private readonly string _value;

        private DistributionTenantManagedCertificateRequestValidationTokenHost(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DistributionTenantManagedCertificateRequestValidationTokenHost Cloudfront { get; } = new DistributionTenantManagedCertificateRequestValidationTokenHost("cloudfront");
        public static DistributionTenantManagedCertificateRequestValidationTokenHost SelfHosted { get; } = new DistributionTenantManagedCertificateRequestValidationTokenHost("self-hosted");

        public static bool operator ==(DistributionTenantManagedCertificateRequestValidationTokenHost left, DistributionTenantManagedCertificateRequestValidationTokenHost right) => left.Equals(right);
        public static bool operator !=(DistributionTenantManagedCertificateRequestValidationTokenHost left, DistributionTenantManagedCertificateRequestValidationTokenHost right) => !left.Equals(right);

        public static explicit operator string(DistributionTenantManagedCertificateRequestValidationTokenHost value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionTenantManagedCertificateRequestValidationTokenHost other && Equals(other);
        public bool Equals(DistributionTenantManagedCertificateRequestValidationTokenHost other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DistributionTenantWebAclCustomizationAction : IEquatable<DistributionTenantWebAclCustomizationAction>
    {
        private readonly string _value;

        private DistributionTenantWebAclCustomizationAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DistributionTenantWebAclCustomizationAction Override { get; } = new DistributionTenantWebAclCustomizationAction("override");
        public static DistributionTenantWebAclCustomizationAction Disable { get; } = new DistributionTenantWebAclCustomizationAction("disable");

        public static bool operator ==(DistributionTenantWebAclCustomizationAction left, DistributionTenantWebAclCustomizationAction right) => left.Equals(right);
        public static bool operator !=(DistributionTenantWebAclCustomizationAction left, DistributionTenantWebAclCustomizationAction right) => !left.Equals(right);

        public static explicit operator string(DistributionTenantWebAclCustomizationAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DistributionTenantWebAclCustomizationAction other && Equals(other);
        public bool Equals(DistributionTenantWebAclCustomizationAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
    /// </summary>
    [EnumType]
    public readonly struct MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus : IEquatable<MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus>
    {
        private readonly string _value;

        private MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus Enabled { get; } = new MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus("Enabled");
        public static MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus Disabled { get; } = new MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus("Disabled");

        public static bool operator ==(MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus left, MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus right) => left.Equals(right);
        public static bool operator !=(MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus left, MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus right) => !left.Equals(right);

        public static explicit operator string(MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus other && Equals(other);
        public bool Equals(MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
