// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CloudFront
{
    /// <summary>
    /// A cache policy.
    ///  When it's attached to a cache behavior, the cache policy determines the following:
    ///   +  The values that CloudFront includes in the cache key. These values can include HTTP headers, cookies, and URL query strings. CloudFront uses the cache key to find an object in its cache that it can return to the viewer.
    ///   +  The default, minimum, and maximum time to live (TTL) values that you want objects to stay in the CloudFront cache.
    /// 
    ///  The headers, cookies, and query strings that are included in the cache key are also included in requests that CloudFront sends to the origin. CloudFront sends a request when it can't find a valid object in its cache that matches the request's cache key. If you want to send values to the origin but *not* include them in the cache key, use ``OriginRequestPolicy``.
    /// </summary>
    [AwsNativeResourceType("aws-native:cloudfront:CachePolicy")]
    public partial class CachePolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique identifier for the cache policy. For example: `2766f7b2-75c5-41c6-8f06-bf4303a2f2f5` .
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The cache policy configuration.
        /// </summary>
        [Output("cachePolicyConfig")]
        public Output<Outputs.CachePolicyConfig> CachePolicyConfig { get; private set; } = null!;

        /// <summary>
        /// The date and time when the cache policy was last modified.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;


        /// <summary>
        /// Create a CachePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CachePolicy(string name, CachePolicyArgs args, CustomResourceOptions? options = null)
            : base("aws-native:cloudfront:CachePolicy", name, args ?? new CachePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CachePolicy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:cloudfront:CachePolicy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CachePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CachePolicy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CachePolicy(name, id, options);
        }
    }

    public sealed class CachePolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cache policy configuration.
        /// </summary>
        [Input("cachePolicyConfig", required: true)]
        public Input<Inputs.CachePolicyConfigArgs> CachePolicyConfig { get; set; } = null!;

        public CachePolicyArgs()
        {
        }
        public static new CachePolicyArgs Empty => new CachePolicyArgs();
    }
}
