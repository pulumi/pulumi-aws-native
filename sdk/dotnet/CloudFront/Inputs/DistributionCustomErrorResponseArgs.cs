// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CloudFront.Inputs
{

    /// <summary>
    /// A complex type that controls:
    ///   +  Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.
    ///   +  How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
    ///   
    ///  For more information about custom error pages, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the *Amazon CloudFront Developer Guide*.
    /// </summary>
    public sealed class DistributionCustomErrorResponseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ``ErrorCode``. When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has been resolved and the requested object is now available.
        ///  For more information, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Input("errorCachingMinTtl")]
        public Input<double>? ErrorCachingMinTtl { get; set; }

        /// <summary>
        /// The HTTP status code for which you want to specify a custom error page and/or a caching duration.
        /// </summary>
        [Input("errorCode", required: true)]
        public Input<int> ErrorCode { get; set; } = null!;

        /// <summary>
        /// The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety of reasons that you might want CloudFront to return a status code different from the status code that your origin returned to CloudFront, for example:
        ///   +  Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute ``200``, the response typically won't be intercepted.
        ///   +  If you don't care about distinguishing among different client errors or server errors, you can specify ``400`` or ``500`` as the ``ResponseCode`` for all 4xx or 5xx errors.
        ///   +  You might want to return a ``200`` status code (OK) and static website so your customers don't know that your website is down.
        ///   
        ///  If you specify a value for ``ResponseCode``, you must also specify a value for ``ResponsePagePath``.
        /// </summary>
        [Input("responseCode")]
        public Input<int>? ResponseCode { get; set; }

        /// <summary>
        /// The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ``ErrorCode``, for example, ``/4xx-errors/403-forbidden.html``. If you want to store your objects and your custom error pages in different locations, your distribution must include a cache behavior for which the following is true:
        ///   +  The value of ``PathPattern`` matches the path to your custom error messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory named ``/4xx-errors``. Your distribution must include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for example, ``/4xx-errors/*``.
        ///   +  The value of ``TargetOriginId`` specifies the value of the ``ID`` element for the origin that contains your custom error pages.
        ///   
        ///  If you specify a value for ``ResponsePagePath``, you must also specify a value for ``ResponseCode``.
        ///  We recommend 
        /// </summary>
        [Input("responsePagePath")]
        public Input<string>? ResponsePagePath { get; set; }

        public DistributionCustomErrorResponseArgs()
        {
        }
        public static new DistributionCustomErrorResponseArgs Empty => new DistributionCustomErrorResponseArgs();
    }
}
