// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CloudFront
{
    public static class GetMonitoringSubscription
    {
        /// <summary>
        /// Resource Type definition for AWS::CloudFront::MonitoringSubscription
        /// </summary>
        public static Task<GetMonitoringSubscriptionResult> InvokeAsync(GetMonitoringSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMonitoringSubscriptionResult>("aws-native:cloudfront:getMonitoringSubscription", args ?? new GetMonitoringSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::CloudFront::MonitoringSubscription
        /// </summary>
        public static Output<GetMonitoringSubscriptionResult> Invoke(GetMonitoringSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitoringSubscriptionResult>("aws-native:cloudfront:getMonitoringSubscription", args ?? new GetMonitoringSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMonitoringSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        [Input("distributionId", required: true)]
        public string DistributionId { get; set; } = null!;

        public GetMonitoringSubscriptionArgs()
        {
        }
        public static new GetMonitoringSubscriptionArgs Empty => new GetMonitoringSubscriptionArgs();
    }

    public sealed class GetMonitoringSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("distributionId", required: true)]
        public Input<string> DistributionId { get; set; } = null!;

        public GetMonitoringSubscriptionInvokeArgs()
        {
        }
        public static new GetMonitoringSubscriptionInvokeArgs Empty => new GetMonitoringSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetMonitoringSubscriptionResult
    {
        public readonly Outputs.MonitoringSubscription? MonitoringSubscriptionValue;

        [OutputConstructor]
        private GetMonitoringSubscriptionResult(Outputs.MonitoringSubscription? monitoringSubscription)
        {
            MonitoringSubscriptionValue = monitoringSubscription;
        }
    }
}
