// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CloudFront
{
    /// <summary>
    /// Creates a CF function.
    ///  To create a function, you provide the function code and some configuration information about the function. The response contains an Amazon Resource Name (ARN) that uniquely identifies the function, and the function’s stage.
    ///  By default, when you create a function, it’s in the ``DEVELOPMENT`` stage. In this stage, you can [test the function](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/test-function.html) in the CF console (or with ``TestFunction`` in the CF API).
    ///  When you’re ready to use your function with a CF distribution, publish the function to the ``LIVE`` stage. You can do this in the CF console, with ``PublishFunction`` in the CF API, or by updating the ``AWS::CloudFront::Function`` resource with the ``AutoPublish`` property set to ``true``. When the function is published to the ``LIVE`` stage, you can attach it to a distribution’s cache behavior, using the function’s ARN.
    ///  To automatically publish the function to the ``LIVE`` stage when it’s created, set the ``AutoPublish`` property to ``true``.
    /// </summary>
    [AwsNativeResourceType("aws-native:cloudfront:Function")]
    public partial class Function : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A flag that determines whether to automatically publish the function to the ``LIVE`` stage when it’s created. To automatically publish to the ``LIVE`` stage, set this property to ``true``.
        /// </summary>
        [Output("autoPublish")]
        public Output<bool?> AutoPublish { get; private set; } = null!;

        /// <summary>
        /// The ARN of the function. For example:
        /// 
        /// `arn:aws:cloudfront::123456789012:function/ExampleFunction` .
        /// 
        /// To get the function ARN, use the following syntax:
        /// 
        /// `!GetAtt *Function_Logical_ID* .FunctionMetadata.FunctionARN`
        /// </summary>
        [Output("functionArn")]
        public Output<string> FunctionArn { get; private set; } = null!;

        /// <summary>
        /// The function code. For more information about writing a CloudFront function, see [Writing function code for CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html) in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Output("functionCode")]
        public Output<string> FunctionCode { get; private set; } = null!;

        /// <summary>
        /// Contains configuration information about a CloudFront function.
        /// </summary>
        [Output("functionConfig")]
        public Output<Outputs.FunctionConfig> FunctionConfig { get; private set; } = null!;

        /// <summary>
        /// Contains metadata about a CloudFront function.
        /// </summary>
        [Output("functionMetadata")]
        public Output<Outputs.FunctionMetadata?> FunctionMetadata { get; private set; } = null!;

        /// <summary>
        /// A name to identify the function.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("stage")]
        public Output<string> Stage { get; private set; } = null!;


        /// <summary>
        /// Create a Function resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Function(string name, FunctionArgs args, CustomResourceOptions? options = null)
            : base("aws-native:cloudfront:Function", name, args ?? new FunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Function(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:cloudfront:Function", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Function resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Function Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Function(name, id, options);
        }
    }

    public sealed class FunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A flag that determines whether to automatically publish the function to the ``LIVE`` stage when it’s created. To automatically publish to the ``LIVE`` stage, set this property to ``true``.
        /// </summary>
        [Input("autoPublish")]
        public Input<bool>? AutoPublish { get; set; }

        /// <summary>
        /// The function code. For more information about writing a CloudFront function, see [Writing function code for CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html) in the *Amazon CloudFront Developer Guide*.
        /// </summary>
        [Input("functionCode", required: true)]
        public Input<string> FunctionCode { get; set; } = null!;

        /// <summary>
        /// Contains configuration information about a CloudFront function.
        /// </summary>
        [Input("functionConfig", required: true)]
        public Input<Inputs.FunctionConfigArgs> FunctionConfig { get; set; } = null!;

        /// <summary>
        /// Contains metadata about a CloudFront function.
        /// </summary>
        [Input("functionMetadata")]
        public Input<Inputs.FunctionMetadataArgs>? FunctionMetadata { get; set; }

        /// <summary>
        /// A name to identify the function.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public FunctionArgs()
        {
        }
        public static new FunctionArgs Empty => new FunctionArgs();
    }
}
