// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.DocDb
{
    public static class GetDbCluster
    {
        /// <summary>
        /// Resource Type definition for AWS::DocDB::DBCluster
        /// </summary>
        public static Task<GetDbClusterResult> InvokeAsync(GetDbClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDbClusterResult>("aws-native:docdb:getDbCluster", args ?? new GetDbClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::DocDB::DBCluster
        /// </summary>
        public static Output<GetDbClusterResult> Invoke(GetDbClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbClusterResult>("aws-native:docdb:getDbCluster", args ?? new GetDbClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDbClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetDbClusterArgs()
        {
        }
        public static new GetDbClusterArgs Empty => new GetDbClusterArgs();
    }

    public sealed class GetDbClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetDbClusterInvokeArgs()
        {
        }
        public static new GetDbClusterInvokeArgs Empty => new GetDbClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetDbClusterResult
    {
        public readonly int? BackupRetentionPeriod;
        public readonly string? ClusterResourceId;
        public readonly bool? CopyTagsToSnapshot;
        public readonly string? DbClusterParameterGroupName;
        public readonly bool? DeletionProtection;
        public readonly ImmutableArray<string> EnableCloudwatchLogsExports;
        public readonly string? Endpoint;
        public readonly string? Id;
        public readonly string? MasterUserPassword;
        public readonly int? Port;
        public readonly string? PreferredBackupWindow;
        public readonly string? PreferredMaintenanceWindow;
        public readonly string? ReadEndpoint;
        public readonly string? RestoreToTime;
        public readonly string? RestoreType;
        public readonly ImmutableArray<Outputs.DbClusterTag> Tags;
        public readonly bool? UseLatestRestorableTime;
        public readonly ImmutableArray<string> VpcSecurityGroupIds;

        [OutputConstructor]
        private GetDbClusterResult(
            int? backupRetentionPeriod,

            string? clusterResourceId,

            bool? copyTagsToSnapshot,

            string? dbClusterParameterGroupName,

            bool? deletionProtection,

            ImmutableArray<string> enableCloudwatchLogsExports,

            string? endpoint,

            string? id,

            string? masterUserPassword,

            int? port,

            string? preferredBackupWindow,

            string? preferredMaintenanceWindow,

            string? readEndpoint,

            string? restoreToTime,

            string? restoreType,

            ImmutableArray<Outputs.DbClusterTag> tags,

            bool? useLatestRestorableTime,

            ImmutableArray<string> vpcSecurityGroupIds)
        {
            BackupRetentionPeriod = backupRetentionPeriod;
            ClusterResourceId = clusterResourceId;
            CopyTagsToSnapshot = copyTagsToSnapshot;
            DbClusterParameterGroupName = dbClusterParameterGroupName;
            DeletionProtection = deletionProtection;
            EnableCloudwatchLogsExports = enableCloudwatchLogsExports;
            Endpoint = endpoint;
            Id = id;
            MasterUserPassword = masterUserPassword;
            Port = port;
            PreferredBackupWindow = preferredBackupWindow;
            PreferredMaintenanceWindow = preferredMaintenanceWindow;
            ReadEndpoint = readEndpoint;
            RestoreToTime = restoreToTime;
            RestoreType = restoreType;
            Tags = tags;
            UseLatestRestorableTime = useLatestRestorableTime;
            VpcSecurityGroupIds = vpcSecurityGroupIds;
        }
    }
}
