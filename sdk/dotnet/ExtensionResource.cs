// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative
{
    /// <summary>
    /// A special resource that enables deploying CloudFormation Extensions (third-party resources). An extension has to be pre-registered in your AWS account in order to use this resource.
    /// </summary>
    [AwsNativeResourceType("aws-native:index:ExtensionResource")]
    public partial class ExtensionResource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Dictionary of the extension resource attributes.
        /// </summary>
        [Output("outputs")]
        public Output<ImmutableDictionary<string, object>> Outputs { get; private set; } = null!;


        /// <summary>
        /// Create a ExtensionResource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExtensionResource(string name, ExtensionResourceArgs args, CustomResourceOptions? options = null)
            : base("aws-native:index:ExtensionResource", name, args ?? new ExtensionResourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExtensionResource(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:index:ExtensionResource", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExtensionResource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExtensionResource Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ExtensionResource(name, id, options);
        }
    }

    public sealed class ExtensionResourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional auto-naming specification for the resource.
        /// If provided and the name is not specified manually, the provider will automatically generate a name based on the Pulumi resource name and a random suffix.
        /// </summary>
        [Input("autoNaming")]
        public Input<Inputs.AutoNamingArgs>? AutoNaming { get; set; }

        [Input("createOnly")]
        private InputList<string>? _createOnly;

        /// <summary>
        /// Property names as defined by `createOnlyProperties` in the CloudFormation schema. Create-only properties can't be set during updates, so will not be included in patches even if they are also marked as write-only, and will cause an error if attempted to be updated. Therefore any property here should also be included in the `replaceOnChanges` resource option too.
        /// In the CloudFormation schema these are fully qualified property paths (e.g. `/properties/AccessToken`) whereas here we only include the top-level property name (e.g. `AccessToken`).
        /// </summary>
        public InputList<string> CreateOnly
        {
            get => _createOnly ?? (_createOnly = new InputList<string>());
            set => _createOnly = value;
        }

        [Input("properties", required: true)]
        private InputMap<object>? _properties;

        /// <summary>
        /// Property bag containing the properties for the resource. These should be defined using the casing expected by the CloudControl API as these values are sent exact as provided.
        /// </summary>
        public InputMap<object> Properties
        {
            get => _properties ?? (_properties = new InputMap<object>());
            set => _properties = value;
        }

        /// <summary>
        /// Optional name of the property containing the tags. Defaults to "Tags" if the `tagsStyle` is set to either "stringMap" or "keyValueArray". This is used to apply default tags to the resource and can be ignored if not using default tags.
        /// </summary>
        [Input("tagsProperty")]
        public Input<string>? TagsProperty { get; set; }

        /// <summary>
        /// Optional style of tags this resource uses. Valid values are "stringMap", "keyValueArray" or "none". Defaults to `keyValueArray` if `tagsProperty` is set. This is used to apply default tags to the resource and can be ignored if not using default tags.
        /// </summary>
        [Input("tagsStyle")]
        public Input<string>? TagsStyle { get; set; }

        /// <summary>
        /// CloudFormation type name. This has three parts, each separated by two colons. For AWS resources this starts with `AWS::` e.g. `AWS::Logs::LogGroup`. Third party resources should use a namespace prefix e.g. `MyCompany::MyService::MyResource`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("writeOnly")]
        private InputList<string>? _writeOnly;

        /// <summary>
        /// Property names as defined by `writeOnlyProperties` in the CloudFormation schema. Write-only properties are not returned during read operations and have to be included in all update operations as CloudControl itself can't read their previous values.
        /// In the CloudFormation schema these are fully qualified property paths (e.g. `/properties/AccessToken`) whereas here we only include the top-level property name (e.g. `AccessToken`).
        /// </summary>
        public InputList<string> WriteOnly
        {
            get => _writeOnly ?? (_writeOnly = new InputList<string>());
            set => _writeOnly = value;
        }

        public ExtensionResourceArgs()
        {
        }
        public static new ExtensionResourceArgs Empty => new ExtensionResourceArgs();
    }
}
