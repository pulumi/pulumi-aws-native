// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.RefactorSpaces
{
    public static class GetRoute
    {
        /// <summary>
        /// Definition of AWS::RefactorSpaces::Route Resource Type
        /// </summary>
        public static Task<GetRouteResult> InvokeAsync(GetRouteArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRouteResult>("aws-native:refactorspaces:getRoute", args ?? new GetRouteArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::RefactorSpaces::Route Resource Type
        /// </summary>
        public static Output<GetRouteResult> Invoke(GetRouteInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRouteResult>("aws-native:refactorspaces:getRoute", args ?? new GetRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteArgs : Pulumi.InvokeArgs
    {
        [Input("applicationIdentifier")]
        public string? ApplicationIdentifier { get; set; }

        [Input("environmentIdentifier")]
        public string? EnvironmentIdentifier { get; set; }

        [Input("routeIdentifier")]
        public string? RouteIdentifier { get; set; }

        public GetRouteArgs()
        {
        }
    }

    public sealed class GetRouteInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("applicationIdentifier")]
        public Input<string>? ApplicationIdentifier { get; set; }

        [Input("environmentIdentifier")]
        public Input<string>? EnvironmentIdentifier { get; set; }

        [Input("routeIdentifier")]
        public Input<string>? RouteIdentifier { get; set; }

        public GetRouteInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRouteResult
    {
        public readonly string? Arn;
        public readonly string? PathResourceToId;
        public readonly string? RouteIdentifier;
        /// <summary>
        /// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
        /// </summary>
        public readonly ImmutableArray<Outputs.RouteTag> Tags;

        [OutputConstructor]
        private GetRouteResult(
            string? arn,

            string? pathResourceToId,

            string? routeIdentifier,

            ImmutableArray<Outputs.RouteTag> tags)
        {
            Arn = arn;
            PathResourceToId = pathResourceToId;
            RouteIdentifier = routeIdentifier;
            Tags = tags;
        }
    }
}
