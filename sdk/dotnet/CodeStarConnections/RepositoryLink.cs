// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CodeStarConnections
{
    /// <summary>
    /// Schema for AWS::CodeStarConnections::RepositoryLink resource which is used to aggregate repository metadata relevant to synchronizing source provider content to AWS Resources.
    /// </summary>
    [AwsNativeResourceType("aws-native:codestarconnections:RepositoryLink")]
    public partial class RepositoryLink : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the CodeStarConnection. The ARN is used as the connection reference when the connection is shared between AWS services.
        /// </summary>
        [Output("connectionArn")]
        public Output<string> ConnectionArn { get; private set; } = null!;

        /// <summary>
        /// The ARN of the KMS key that the customer can optionally specify to use to encrypt RepositoryLink properties. If not specified, a default key will be used.
        /// </summary>
        [Output("encryptionKeyArn")]
        public Output<string?> EncryptionKeyArn { get; private set; } = null!;

        /// <summary>
        /// the ID of the entity that owns the repository.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// The name of the external provider where your third-party code repository is configured.
        /// </summary>
        [Output("providerType")]
        public Output<string> ProviderType { get; private set; } = null!;

        /// <summary>
        /// A unique Amazon Resource Name (ARN) to designate the repository link.
        /// </summary>
        [Output("repositoryLinkArn")]
        public Output<string> RepositoryLinkArn { get; private set; } = null!;

        /// <summary>
        /// A UUID that uniquely identifies the RepositoryLink.
        /// </summary>
        [Output("repositoryLinkId")]
        public Output<string> RepositoryLinkId { get; private set; } = null!;

        /// <summary>
        /// The repository for which the link is being created.
        /// </summary>
        [Output("repositoryName")]
        public Output<string> RepositoryName { get; private set; } = null!;

        /// <summary>
        /// Specifies the tags applied to a RepositoryLink.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.RepositoryLinkTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a RepositoryLink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepositoryLink(string name, RepositoryLinkArgs args, CustomResourceOptions? options = null)
            : base("aws-native:codestarconnections:RepositoryLink", name, args ?? new RepositoryLinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepositoryLink(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:codestarconnections:RepositoryLink", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "ownerId",
                    "repositoryName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepositoryLink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepositoryLink Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RepositoryLink(name, id, options);
        }
    }

    public sealed class RepositoryLinkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the CodeStarConnection. The ARN is used as the connection reference when the connection is shared between AWS services.
        /// </summary>
        [Input("connectionArn", required: true)]
        public Input<string> ConnectionArn { get; set; } = null!;

        /// <summary>
        /// The ARN of the KMS key that the customer can optionally specify to use to encrypt RepositoryLink properties. If not specified, a default key will be used.
        /// </summary>
        [Input("encryptionKeyArn")]
        public Input<string>? EncryptionKeyArn { get; set; }

        /// <summary>
        /// the ID of the entity that owns the repository.
        /// </summary>
        [Input("ownerId", required: true)]
        public Input<string> OwnerId { get; set; } = null!;

        /// <summary>
        /// The repository for which the link is being created.
        /// </summary>
        [Input("repositoryName", required: true)]
        public Input<string> RepositoryName { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.RepositoryLinkTagArgs>? _tags;

        /// <summary>
        /// Specifies the tags applied to a RepositoryLink.
        /// </summary>
        public InputList<Inputs.RepositoryLinkTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RepositoryLinkTagArgs>());
            set => _tags = value;
        }

        public RepositoryLinkArgs()
        {
        }
        public static new RepositoryLinkArgs Empty => new RepositoryLinkArgs();
    }
}
