// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CodeStarConnections
{
    /// <summary>
    /// Schema for AWS::CodeStarConnections::SyncConfiguration resource which is used to enables an AWS resource to be synchronized from a source-provider.
    /// </summary>
    [AwsNativeResourceType("aws-native:codestarconnections:SyncConfiguration")]
    public partial class SyncConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the branch of the repository from which resources are to be synchronized,
        /// </summary>
        [Output("branch")]
        public Output<string> Branch { get; private set; } = null!;

        /// <summary>
        /// The source provider repository path of the sync configuration file of the respective SyncType.
        /// </summary>
        [Output("configFile")]
        public Output<string> ConfigFile { get; private set; } = null!;

        /// <summary>
        /// the ID of the entity that owns the repository.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// The name of the external provider where your third-party code repository is configured.
        /// </summary>
        [Output("providerType")]
        public Output<string> ProviderType { get; private set; } = null!;

        /// <summary>
        /// A UUID that uniquely identifies the RepositoryLink that the SyncConfig is associated with.
        /// </summary>
        [Output("repositoryLinkId")]
        public Output<string> RepositoryLinkId { get; private set; } = null!;

        /// <summary>
        /// The name of the repository that is being synced to.
        /// </summary>
        [Output("repositoryName")]
        public Output<string> RepositoryName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource that is being synchronized to the repository.
        /// </summary>
        [Output("resourceName")]
        public Output<string> ResourceName { get; private set; } = null!;

        /// <summary>
        /// The IAM Role that allows AWS to update CloudFormation stacks based on content in the specified repository.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// The type of resource synchronization service that is to be configured, for example, CFN_STACK_SYNC.
        /// </summary>
        [Output("syncType")]
        public Output<string> SyncType { get; private set; } = null!;


        /// <summary>
        /// Create a SyncConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyncConfiguration(string name, SyncConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:codestarconnections:SyncConfiguration", name, args ?? new SyncConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyncConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:codestarconnections:SyncConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "resourceName",
                    "syncType",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyncConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyncConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SyncConfiguration(name, id, options);
        }
    }

    public sealed class SyncConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the branch of the repository from which resources are to be synchronized,
        /// </summary>
        [Input("branch", required: true)]
        public Input<string> Branch { get; set; } = null!;

        /// <summary>
        /// The source provider repository path of the sync configuration file of the respective SyncType.
        /// </summary>
        [Input("configFile", required: true)]
        public Input<string> ConfigFile { get; set; } = null!;

        /// <summary>
        /// A UUID that uniquely identifies the RepositoryLink that the SyncConfig is associated with.
        /// </summary>
        [Input("repositoryLinkId", required: true)]
        public Input<string> RepositoryLinkId { get; set; } = null!;

        /// <summary>
        /// The name of the resource that is being synchronized to the repository.
        /// </summary>
        [Input("resourceName", required: true)]
        public Input<string> ResourceName { get; set; } = null!;

        /// <summary>
        /// The IAM Role that allows AWS to update CloudFormation stacks based on content in the specified repository.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// The type of resource synchronization service that is to be configured, for example, CFN_STACK_SYNC.
        /// </summary>
        [Input("syncType", required: true)]
        public Input<string> SyncType { get; set; } = null!;

        public SyncConfigurationArgs()
        {
        }
        public static new SyncConfigurationArgs Empty => new SyncConfigurationArgs();
    }
}
