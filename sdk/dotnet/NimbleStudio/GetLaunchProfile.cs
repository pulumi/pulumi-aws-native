// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.NimbleStudio
{
    public static class GetLaunchProfile
    {
        /// <summary>
        /// Represents a launch profile which delegates access to a collection of studio components to studio users
        /// </summary>
        public static Task<GetLaunchProfileResult> InvokeAsync(GetLaunchProfileArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLaunchProfileResult>("aws-native:nimblestudio:getLaunchProfile", args ?? new GetLaunchProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a launch profile which delegates access to a collection of studio components to studio users
        /// </summary>
        public static Output<GetLaunchProfileResult> Invoke(GetLaunchProfileInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetLaunchProfileResult>("aws-native:nimblestudio:getLaunchProfile", args ?? new GetLaunchProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLaunchProfileArgs : Pulumi.InvokeArgs
    {
        [Input("launchProfileId", required: true)]
        public string LaunchProfileId { get; set; } = null!;

        /// <summary>
        /// &lt;p&gt;The studio ID. &lt;/p&gt;
        /// </summary>
        [Input("studioId", required: true)]
        public string StudioId { get; set; } = null!;

        public GetLaunchProfileArgs()
        {
        }
    }

    public sealed class GetLaunchProfileInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("launchProfileId", required: true)]
        public Input<string> LaunchProfileId { get; set; } = null!;

        /// <summary>
        /// &lt;p&gt;The studio ID. &lt;/p&gt;
        /// </summary>
        [Input("studioId", required: true)]
        public Input<string> StudioId { get; set; } = null!;

        public GetLaunchProfileInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLaunchProfileResult
    {
        /// <summary>
        /// &lt;p&gt;The description.&lt;/p&gt;
        /// </summary>
        public readonly string? Description;
        public readonly string? LaunchProfileId;
        /// <summary>
        /// &lt;p&gt;The version number of the protocol that is used by the launch profile. The only valid
        ///             version is "2021-03-31".&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<string> LaunchProfileProtocolVersions;
        /// <summary>
        /// &lt;p&gt;The name for the launch profile.&lt;/p&gt;
        /// </summary>
        public readonly string? Name;
        public readonly Outputs.LaunchProfileStreamConfiguration? StreamConfiguration;
        /// <summary>
        /// &lt;p&gt;Unique identifiers for a collection of studio components that can be used with this
        ///             launch profile.&lt;/p&gt;
        /// </summary>
        public readonly ImmutableArray<string> StudioComponentIds;

        [OutputConstructor]
        private GetLaunchProfileResult(
            string? description,

            string? launchProfileId,

            ImmutableArray<string> launchProfileProtocolVersions,

            string? name,

            Outputs.LaunchProfileStreamConfiguration? streamConfiguration,

            ImmutableArray<string> studioComponentIds)
        {
            Description = description;
            LaunchProfileId = launchProfileId;
            LaunchProfileProtocolVersions = launchProfileProtocolVersions;
            Name = name;
            StreamConfiguration = streamConfiguration;
            StudioComponentIds = studioComponentIds;
        }
    }
}
