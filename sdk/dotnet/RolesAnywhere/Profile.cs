// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.RolesAnywhere
{
    /// <summary>
    /// Definition of AWS::RolesAnywhere::Profile Resource Type
    /// </summary>
    [AwsNativeResourceType("aws-native:rolesanywhere:Profile")]
    public partial class Profile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Used to determine if a custom role session name will be accepted in a temporary credential request.
        /// </summary>
        [Output("acceptRoleSessionName")]
        public Output<bool?> AcceptRoleSessionName { get; private set; } = null!;

        /// <summary>
        /// A mapping applied to the authenticating end-entity certificate.
        /// </summary>
        [Output("attributeMappings")]
        public Output<ImmutableArray<Outputs.ProfileAttributeMapping>> AttributeMappings { get; private set; } = null!;

        /// <summary>
        /// The number of seconds vended session credentials will be valid for
        /// </summary>
        [Output("durationSeconds")]
        public Output<double?> DurationSeconds { get; private set; } = null!;

        /// <summary>
        /// The enabled status of the resource.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// A list of managed policy ARNs. Managed policies identified by this list will be applied to the vended session credentials.
        /// </summary>
        [Output("managedPolicyArns")]
        public Output<ImmutableArray<string>> ManagedPolicyArns { get; private set; } = null!;

        /// <summary>
        /// The customer specified name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ARN of the profile.
        /// </summary>
        [Output("profileArn")]
        public Output<string> ProfileArn { get; private set; } = null!;

        /// <summary>
        /// The unique primary identifier of the Profile
        /// </summary>
        [Output("profileId")]
        public Output<string> ProfileId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether instance properties are required in CreateSession requests with this profile.
        /// </summary>
        [Output("requireInstanceProperties")]
        public Output<bool?> RequireInstanceProperties { get; private set; } = null!;

        /// <summary>
        /// A list of IAM role ARNs that can be assumed when this profile is specified in a CreateSession request.
        /// </summary>
        [Output("roleArns")]
        public Output<ImmutableArray<string>> RoleArns { get; private set; } = null!;

        /// <summary>
        /// A session policy that will applied to the trust boundary of the vended session credentials.
        /// </summary>
        [Output("sessionPolicy")]
        public Output<string?> SessionPolicy { get; private set; } = null!;

        /// <summary>
        /// A list of Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Profile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Profile(string name, ProfileArgs args, CustomResourceOptions? options = null)
            : base("aws-native:rolesanywhere:Profile", name, args ?? new ProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Profile(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:rolesanywhere:Profile", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Profile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Profile Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Profile(name, id, options);
        }
    }

    public sealed class ProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Used to determine if a custom role session name will be accepted in a temporary credential request.
        /// </summary>
        [Input("acceptRoleSessionName")]
        public Input<bool>? AcceptRoleSessionName { get; set; }

        [Input("attributeMappings")]
        private InputList<Inputs.ProfileAttributeMappingArgs>? _attributeMappings;

        /// <summary>
        /// A mapping applied to the authenticating end-entity certificate.
        /// </summary>
        public InputList<Inputs.ProfileAttributeMappingArgs> AttributeMappings
        {
            get => _attributeMappings ?? (_attributeMappings = new InputList<Inputs.ProfileAttributeMappingArgs>());
            set => _attributeMappings = value;
        }

        /// <summary>
        /// The number of seconds vended session credentials will be valid for
        /// </summary>
        [Input("durationSeconds")]
        public Input<double>? DurationSeconds { get; set; }

        /// <summary>
        /// The enabled status of the resource.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("managedPolicyArns")]
        private InputList<string>? _managedPolicyArns;

        /// <summary>
        /// A list of managed policy ARNs. Managed policies identified by this list will be applied to the vended session credentials.
        /// </summary>
        public InputList<string> ManagedPolicyArns
        {
            get => _managedPolicyArns ?? (_managedPolicyArns = new InputList<string>());
            set => _managedPolicyArns = value;
        }

        /// <summary>
        /// The customer specified name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies whether instance properties are required in CreateSession requests with this profile.
        /// </summary>
        [Input("requireInstanceProperties")]
        public Input<bool>? RequireInstanceProperties { get; set; }

        [Input("roleArns", required: true)]
        private InputList<string>? _roleArns;

        /// <summary>
        /// A list of IAM role ARNs that can be assumed when this profile is specified in a CreateSession request.
        /// </summary>
        public InputList<string> RoleArns
        {
            get => _roleArns ?? (_roleArns = new InputList<string>());
            set => _roleArns = value;
        }

        /// <summary>
        /// A session policy that will applied to the trust boundary of the vended session credentials.
        /// </summary>
        [Input("sessionPolicy")]
        public Input<string>? SessionPolicy { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// A list of Tags.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public ProfileArgs()
        {
        }
        public static new ProfileArgs Empty => new ProfileArgs();
    }
}
