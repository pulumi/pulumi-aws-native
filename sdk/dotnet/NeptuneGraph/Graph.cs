// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.NeptuneGraph
{
    /// <summary>
    /// The AWS::NeptuneGraph::Graph resource creates an Amazon NeptuneGraph Graph.
    /// </summary>
    [AwsNativeResourceType("aws-native:neptunegraph:Graph")]
    public partial class Graph : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.
        /// 
        /// _Default_: If not specified, the default value is true.
        /// </summary>
        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Graph resource ARN
        /// </summary>
        [Output("graphArn")]
        public Output<string> GraphArn { get; private set; } = null!;

        /// <summary>
        /// The auto-generated id assigned by the service.
        /// </summary>
        [Output("graphId")]
        public Output<string> GraphId { get; private set; } = null!;

        /// <summary>
        /// Contains a user-supplied name for the Graph. 
        /// 
        /// If you don't specify a name, we generate a unique Graph Name using a combination of Stack Name and a UUID comprising of 4 characters.
        /// 
        /// _Important_: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
        /// </summary>
        [Output("graphName")]
        public Output<string?> GraphName { get; private set; } = null!;

        /// <summary>
        /// Memory for the Graph.
        /// </summary>
        [Output("provisionedMemory")]
        public Output<int> ProvisionedMemory { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.
        /// 
        /// When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.
        /// 
        /// When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.
        /// 
        /// _Default_: If not specified, the default value is false.
        /// </summary>
        [Output("publicConnectivity")]
        public Output<bool?> PublicConnectivity { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.
        /// 
        /// Replica Count should always be less than or equal to 2.
        /// 
        /// _Default_: If not specified, the default value is 1.
        /// </summary>
        [Output("replicaCount")]
        public Output<int?> ReplicaCount { get; private set; } = null!;

        /// <summary>
        /// The tags associated with this graph.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.GraphTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Vector Search Configuration
        /// </summary>
        [Output("vectorSearchConfiguration")]
        public Output<Outputs.GraphVectorSearchConfiguration?> VectorSearchConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a Graph resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Graph(string name, GraphArgs args, CustomResourceOptions? options = null)
            : base("aws-native:neptunegraph:Graph", name, args ?? new GraphArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Graph(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:neptunegraph:Graph", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "graphName",
                    "replicaCount",
                    "vectorSearchConfiguration",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Graph resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Graph Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Graph(name, id, options);
        }
    }

    public sealed class GraphArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.
        /// 
        /// _Default_: If not specified, the default value is true.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// Contains a user-supplied name for the Graph. 
        /// 
        /// If you don't specify a name, we generate a unique Graph Name using a combination of Stack Name and a UUID comprising of 4 characters.
        /// 
        /// _Important_: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
        /// </summary>
        [Input("graphName")]
        public Input<string>? GraphName { get; set; }

        /// <summary>
        /// Memory for the Graph.
        /// </summary>
        [Input("provisionedMemory", required: true)]
        public Input<int> ProvisionedMemory { get; set; } = null!;

        /// <summary>
        /// Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.
        /// 
        /// When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.
        /// 
        /// When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.
        /// 
        /// _Default_: If not specified, the default value is false.
        /// </summary>
        [Input("publicConnectivity")]
        public Input<bool>? PublicConnectivity { get; set; }

        /// <summary>
        /// Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.
        /// 
        /// Replica Count should always be less than or equal to 2.
        /// 
        /// _Default_: If not specified, the default value is 1.
        /// </summary>
        [Input("replicaCount")]
        public Input<int>? ReplicaCount { get; set; }

        [Input("tags")]
        private InputList<Inputs.GraphTagArgs>? _tags;

        /// <summary>
        /// The tags associated with this graph.
        /// </summary>
        public InputList<Inputs.GraphTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GraphTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Vector Search Configuration
        /// </summary>
        [Input("vectorSearchConfiguration")]
        public Input<Inputs.GraphVectorSearchConfigurationArgs>? VectorSearchConfiguration { get; set; }

        public GraphArgs()
        {
        }
        public static new GraphArgs Empty => new GraphArgs();
    }
}
