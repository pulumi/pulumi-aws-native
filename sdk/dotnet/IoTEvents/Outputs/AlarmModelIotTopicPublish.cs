// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTEvents.Outputs
{

    /// <summary>
    /// Information required to publish the MQTT message through the IoT message broker.
    /// </summary>
    [OutputType]
    public sealed class AlarmModelIotTopicPublish
    {
        /// <summary>
        /// The MQTT topic of the message. You can use a string expression that includes variables (``$variable.&lt;variable-name&gt;``) and input values (``$input.&lt;input-name&gt;.&lt;path-to-datum&gt;``) as the topic string.
        /// </summary>
        public readonly string MqttTopic;
        /// <summary>
        /// You can configure the action payload when you publish a message to an IoTCore topic.
        /// </summary>
        public readonly Outputs.AlarmModelPayload? Payload;

        [OutputConstructor]
        private AlarmModelIotTopicPublish(
            string mqttTopic,

            Outputs.AlarmModelPayload? payload)
        {
            MqttTopic = mqttTopic;
            Payload = payload;
        }
    }
}
