// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTEvents.Outputs
{

    /// <summary>
    /// Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.
    /// </summary>
    [OutputType]
    public sealed class DetectorModelDynamoDB
    {
        /// <summary>
        /// The name of the hash key (also called the partition key).
        /// </summary>
        public readonly string HashKeyField;
        /// <summary>
        /// The data type for the hash key (also called the partition key). You can specify the following values:
        /// 
        /// * `STRING` - The hash key is a string.
        /// 
        /// * `NUMBER` - The hash key is a number.
        /// 
        /// If you don't specify `hashKeyType`, the default value is `STRING`.
        /// </summary>
        public readonly string? HashKeyType;
        /// <summary>
        /// The value of the hash key (also called the partition key).
        /// </summary>
        public readonly string HashKeyValue;
        /// <summary>
        /// The type of operation to perform. You can specify the following values:
        /// 
        /// * `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.
        /// 
        /// * `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
        /// 
        /// * `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
        /// 
        /// If you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.
        /// </summary>
        public readonly string? Operation;
        public readonly Outputs.DetectorModelPayload? Payload;
        /// <summary>
        /// The name of the DynamoDB column that receives the action payload.
        /// 
        /// If you don't specify this parameter, the name of the DynamoDB column is `payload`.
        /// </summary>
        public readonly string? PayloadField;
        /// <summary>
        /// The name of the range key (also called the sort key).
        /// </summary>
        public readonly string? RangeKeyField;
        /// <summary>
        /// The data type for the range key (also called the sort key), You can specify the following values:
        /// 
        /// * `STRING` - The range key is a string.
        /// 
        /// * `NUMBER` - The range key is number.
        /// 
        /// If you don't specify `rangeKeyField`, the default value is `STRING`.
        /// </summary>
        public readonly string? RangeKeyType;
        /// <summary>
        /// The value of the range key (also called the sort key).
        /// </summary>
        public readonly string? RangeKeyValue;
        /// <summary>
        /// The name of the DynamoDB table.
        /// </summary>
        public readonly string TableName;

        [OutputConstructor]
        private DetectorModelDynamoDB(
            string hashKeyField,

            string? hashKeyType,

            string hashKeyValue,

            string? operation,

            Outputs.DetectorModelPayload? payload,

            string? payloadField,

            string? rangeKeyField,

            string? rangeKeyType,

            string? rangeKeyValue,

            string tableName)
        {
            HashKeyField = hashKeyField;
            HashKeyType = hashKeyType;
            HashKeyValue = hashKeyValue;
            Operation = operation;
            Payload = payload;
            PayloadField = payloadField;
            RangeKeyField = rangeKeyField;
            RangeKeyType = rangeKeyType;
            RangeKeyValue = rangeKeyValue;
            TableName = tableName;
        }
    }
}
