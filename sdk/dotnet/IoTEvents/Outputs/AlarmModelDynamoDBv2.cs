// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTEvents.Outputs
{

    /// <summary>
    /// Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.
    ///  You must use expressions for all parameters in ``DynamoDBv2Action``. The expressions accept literals, operators, functions, references, and substitution templates.
    ///   **Examples**
    ///  +  For literal values, the expressions must contain single quotes. For example, the value for the ``tableName`` parameter can be ``'GreenhouseTemperatureTable'``.
    ///   +  For references, you must specify either variables or input values. For example, the value for the ``tableName`` parameter can be ``$variable.ddbtableName``.
    ///   +  For a substitution template, you must use ``${}``, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.
    ///  In the following example, the value for the ``contentExpression`` parameter in ``Payload`` uses a substitution template. 
    ///   ``'{\"sensorID\": \"${$input.GreenhouseInput.sensor_id}\", \"temperature\": \"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\"}'`` 
    ///   +  For a string concatenation, you must use ``+``. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.
    ///  In the following example, the value for the ``tableName`` parameter uses a string concatenation. 
    ///   ``'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`` 
    ///   
    ///  For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *Developer Guide*.
    ///  The value for the ``type`` parameter in ``Payload`` must be ``JSON``.
    /// </summary>
    [OutputType]
    public sealed class AlarmModelDynamoDBv2
    {
        /// <summary>
        /// Information needed to configure the payload.
        ///  By default, ITE generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use ``contentExpression``.
        /// </summary>
        public readonly Outputs.AlarmModelPayload? Payload;
        /// <summary>
        /// The name of the DynamoDB table.
        /// </summary>
        public readonly string TableName;

        [OutputConstructor]
        private AlarmModelDynamoDBv2(
            Outputs.AlarmModelPayload? payload,

            string tableName)
        {
            Payload = payload;
            TableName = tableName;
        }
    }
}
