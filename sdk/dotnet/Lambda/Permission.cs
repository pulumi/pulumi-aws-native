// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lambda
{
    /// <summary>
    /// The ``AWS::Lambda::Permission`` resource grants an AWS service or another account permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.
    ///  To grant permission to another account, specify the account ID as the ``Principal``. To grant permission to an organization defined in AOlong, specify the organization ID as the ``PrincipalOrgID``. For AWS services, the principal is a domain-style identifier defined by the service, like ``s3.amazonaws.com`` or ``sns.amazonaws.com``. For AWS services, you can also specify the ARN of the associated resource as the ``SourceArn``. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function.
    ///  If your function has a fu
    /// </summary>
    [AwsNativeResourceType("aws-native:lambda:Permission")]
    public partial class Permission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action that the principal can use on the function. For example, ``lambda:InvokeFunction`` or ``lambda:GetFunction``.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// For Alexa Smart Home functions, a token that the invoker must supply.
        /// </summary>
        [Output("eventSourceToken")]
        public Output<string?> EventSourceToken { get; private set; } = null!;

        /// <summary>
        /// The name of the Lambda function, version, or alias.
        ///   **Name formats**
        ///  +   *Function name* – ``my-function`` (name-only), ``my-function:v1`` (with alias).
        ///   +   *Function ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:my-function``.
        ///   +   *Partial ARN* – ``123456789012:function:my-function``.
        ///   
        ///  You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
        /// </summary>
        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        /// <summary>
        /// The type of authentication that your function URL uses. Set to ``AWS_IAM`` if you want to restrict access to authenticated users only. Set to ``NONE`` if you want to bypass IAM authentication to create a public endpoint. For more information, see [Security and auth model for Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
        /// </summary>
        [Output("functionUrlAuthType")]
        public Output<Pulumi.AwsNative.Lambda.PermissionFunctionUrlAuthType?> FunctionUrlAuthType { get; private set; } = null!;

        /// <summary>
        /// The AWS-service or AWS-account that invokes the function. If you specify a service, use ``SourceArn`` or ``SourceAccount`` to limit who can invoke the function through that service.
        /// </summary>
        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        /// <summary>
        /// The identifier for your organization in AOlong. Use this to grant permissions to all the AWS-accounts under this organization.
        /// </summary>
        [Output("principalOrgId")]
        public Output<string?> PrincipalOrgId { get; private set; } = null!;

        /// <summary>
        /// For AWS-service, the ID of the AWS-account that owns the resource. Use this together with ``SourceArn`` to ensure that the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
        /// </summary>
        [Output("sourceAccount")]
        public Output<string?> SourceAccount { get; private set; } = null!;

        /// <summary>
        /// For AWS-services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.
        ///  Note that Lambda configures the comparison using the ``StringLike`` operator.
        /// </summary>
        [Output("sourceArn")]
        public Output<string?> SourceArn { get; private set; } = null!;


        /// <summary>
        /// Create a Permission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Permission(string name, PermissionArgs args, CustomResourceOptions? options = null)
            : base("aws-native:lambda:Permission", name, args ?? new PermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Permission(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:lambda:Permission", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "action",
                    "eventSourceToken",
                    "functionName",
                    "functionUrlAuthType",
                    "principal",
                    "principalOrgId",
                    "sourceAccount",
                    "sourceArn",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Permission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Permission Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Permission(name, id, options);
        }
    }

    public sealed class PermissionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action that the principal can use on the function. For example, ``lambda:InvokeFunction`` or ``lambda:GetFunction``.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// For Alexa Smart Home functions, a token that the invoker must supply.
        /// </summary>
        [Input("eventSourceToken")]
        public Input<string>? EventSourceToken { get; set; }

        /// <summary>
        /// The name of the Lambda function, version, or alias.
        ///   **Name formats**
        ///  +   *Function name* – ``my-function`` (name-only), ``my-function:v1`` (with alias).
        ///   +   *Function ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:my-function``.
        ///   +   *Partial ARN* – ``123456789012:function:my-function``.
        ///   
        ///  You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        /// <summary>
        /// The type of authentication that your function URL uses. Set to ``AWS_IAM`` if you want to restrict access to authenticated users only. Set to ``NONE`` if you want to bypass IAM authentication to create a public endpoint. For more information, see [Security and auth model for Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
        /// </summary>
        [Input("functionUrlAuthType")]
        public Input<Pulumi.AwsNative.Lambda.PermissionFunctionUrlAuthType>? FunctionUrlAuthType { get; set; }

        /// <summary>
        /// The AWS-service or AWS-account that invokes the function. If you specify a service, use ``SourceArn`` or ``SourceAccount`` to limit who can invoke the function through that service.
        /// </summary>
        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        /// <summary>
        /// The identifier for your organization in AOlong. Use this to grant permissions to all the AWS-accounts under this organization.
        /// </summary>
        [Input("principalOrgId")]
        public Input<string>? PrincipalOrgId { get; set; }

        /// <summary>
        /// For AWS-service, the ID of the AWS-account that owns the resource. Use this together with ``SourceArn`` to ensure that the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
        /// </summary>
        [Input("sourceAccount")]
        public Input<string>? SourceAccount { get; set; }

        /// <summary>
        /// For AWS-services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.
        ///  Note that Lambda configures the comparison using the ``StringLike`` operator.
        /// </summary>
        [Input("sourceArn")]
        public Input<string>? SourceArn { get; set; }

        public PermissionArgs()
        {
        }
        public static new PermissionArgs Empty => new PermissionArgs();
    }
}
