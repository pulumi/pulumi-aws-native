// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Lambda
{
    /// <summary>
    /// Resource Type definition for AWS::Lambda::CodeSigningConfig.
    /// </summary>
    [AwsNativeResourceType("aws-native:lambda:CodeSigningConfig")]
    public partial class CodeSigningConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
        /// </summary>
        [Output("allowedPublishers")]
        public Output<Outputs.CodeSigningConfigAllowedPublishers> AllowedPublishers { get; private set; } = null!;

        /// <summary>
        /// A unique Arn for CodeSigningConfig resource
        /// </summary>
        [Output("codeSigningConfigArn")]
        public Output<string> CodeSigningConfigArn { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for CodeSigningConfig resource
        /// </summary>
        [Output("codeSigningConfigId")]
        public Output<string> CodeSigningConfigId { get; private set; } = null!;

        /// <summary>
        /// Policies to control how to act if a signature is invalid
        /// </summary>
        [Output("codeSigningPolicies")]
        public Output<Outputs.CodeSigningConfigCodeSigningPolicies?> CodeSigningPolicies { get; private set; } = null!;

        /// <summary>
        /// A description of the CodeSigningConfig
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;


        /// <summary>
        /// Create a CodeSigningConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CodeSigningConfig(string name, CodeSigningConfigArgs args, CustomResourceOptions? options = null)
            : base("aws-native:lambda:CodeSigningConfig", name, args ?? new CodeSigningConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CodeSigningConfig(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:lambda:CodeSigningConfig", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CodeSigningConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CodeSigningConfig Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CodeSigningConfig(name, id, options);
        }
    }

    public sealed class CodeSigningConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
        /// </summary>
        [Input("allowedPublishers", required: true)]
        public Input<Inputs.CodeSigningConfigAllowedPublishersArgs> AllowedPublishers { get; set; } = null!;

        /// <summary>
        /// Policies to control how to act if a signature is invalid
        /// </summary>
        [Input("codeSigningPolicies")]
        public Input<Inputs.CodeSigningConfigCodeSigningPoliciesArgs>? CodeSigningPolicies { get; set; }

        /// <summary>
        /// A description of the CodeSigningConfig
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        public CodeSigningConfigArgs()
        {
        }
    }
}
