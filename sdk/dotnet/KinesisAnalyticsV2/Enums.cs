// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.KinesisAnalyticsV2
{
    /// <summary>
    /// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationCheckpointConfigurationConfigurationType : IEquatable<ApplicationCheckpointConfigurationConfigurationType>
    {
        private readonly string _value;

        private ApplicationCheckpointConfigurationConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationCheckpointConfigurationConfigurationType Default { get; } = new ApplicationCheckpointConfigurationConfigurationType("DEFAULT");
        public static ApplicationCheckpointConfigurationConfigurationType Custom { get; } = new ApplicationCheckpointConfigurationConfigurationType("CUSTOM");

        public static bool operator ==(ApplicationCheckpointConfigurationConfigurationType left, ApplicationCheckpointConfigurationConfigurationType right) => left.Equals(right);
        public static bool operator !=(ApplicationCheckpointConfigurationConfigurationType left, ApplicationCheckpointConfigurationConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ApplicationCheckpointConfigurationConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationCheckpointConfigurationConfigurationType other && Equals(other);
        public bool Equals(ApplicationCheckpointConfigurationConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether the code content is in text or zip format.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationCodeConfigurationCodeContentType : IEquatable<ApplicationCodeConfigurationCodeContentType>
    {
        private readonly string _value;

        private ApplicationCodeConfigurationCodeContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationCodeConfigurationCodeContentType Plaintext { get; } = new ApplicationCodeConfigurationCodeContentType("PLAINTEXT");
        public static ApplicationCodeConfigurationCodeContentType Zipfile { get; } = new ApplicationCodeConfigurationCodeContentType("ZIPFILE");

        public static bool operator ==(ApplicationCodeConfigurationCodeContentType left, ApplicationCodeConfigurationCodeContentType right) => left.Equals(right);
        public static bool operator !=(ApplicationCodeConfigurationCodeContentType left, ApplicationCodeConfigurationCodeContentType right) => !left.Equals(right);

        public static explicit operator string(ApplicationCodeConfigurationCodeContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationCodeConfigurationCodeContentType other && Equals(other);
        public bool Equals(ApplicationCodeConfigurationCodeContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Set this to either `UDF` or `DEPENDENCY_JAR`. `UDF` stands for user-defined functions. This type of artifact must be in an S3 bucket. A `DEPENDENCY_JAR` can be in either Maven or an S3 bucket.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationCustomArtifactConfigurationArtifactType : IEquatable<ApplicationCustomArtifactConfigurationArtifactType>
    {
        private readonly string _value;

        private ApplicationCustomArtifactConfigurationArtifactType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationCustomArtifactConfigurationArtifactType DependencyJar { get; } = new ApplicationCustomArtifactConfigurationArtifactType("DEPENDENCY_JAR");
        public static ApplicationCustomArtifactConfigurationArtifactType Udf { get; } = new ApplicationCustomArtifactConfigurationArtifactType("UDF");

        public static bool operator ==(ApplicationCustomArtifactConfigurationArtifactType left, ApplicationCustomArtifactConfigurationArtifactType right) => left.Equals(right);
        public static bool operator !=(ApplicationCustomArtifactConfigurationArtifactType left, ApplicationCustomArtifactConfigurationArtifactType right) => !left.Equals(right);

        public static explicit operator string(ApplicationCustomArtifactConfigurationArtifactType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationCustomArtifactConfigurationArtifactType other && Equals(other);
        public bool Equals(ApplicationCustomArtifactConfigurationArtifactType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the encoding of the records in the streaming source. For example, UTF-8.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationInputSchemaRecordEncoding : IEquatable<ApplicationInputSchemaRecordEncoding>
    {
        private readonly string _value;

        private ApplicationInputSchemaRecordEncoding(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationInputSchemaRecordEncoding Utf8 { get; } = new ApplicationInputSchemaRecordEncoding("UTF-8");

        public static bool operator ==(ApplicationInputSchemaRecordEncoding left, ApplicationInputSchemaRecordEncoding right) => left.Equals(right);
        public static bool operator !=(ApplicationInputSchemaRecordEncoding left, ApplicationInputSchemaRecordEncoding right) => !left.Equals(right);

        public static explicit operator string(ApplicationInputSchemaRecordEncoding value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationInputSchemaRecordEncoding other && Equals(other);
        public bool Equals(ApplicationInputSchemaRecordEncoding other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// To create a Kinesis Data Analytics Studio notebook, you must set the mode to `INTERACTIVE`. However, for a Kinesis Data Analytics for Apache Flink application, the mode is optional.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationMode : IEquatable<ApplicationMode>
    {
        private readonly string _value;

        private ApplicationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationMode Interactive { get; } = new ApplicationMode("INTERACTIVE");
        public static ApplicationMode Streaming { get; } = new ApplicationMode("STREAMING");

        public static bool operator ==(ApplicationMode left, ApplicationMode right) => left.Equals(right);
        public static bool operator !=(ApplicationMode left, ApplicationMode right) => !left.Equals(right);

        public static explicit operator string(ApplicationMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationMode other && Equals(other);
        public bool Equals(ApplicationMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationMonitoringConfigurationConfigurationType : IEquatable<ApplicationMonitoringConfigurationConfigurationType>
    {
        private readonly string _value;

        private ApplicationMonitoringConfigurationConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationMonitoringConfigurationConfigurationType Default { get; } = new ApplicationMonitoringConfigurationConfigurationType("DEFAULT");
        public static ApplicationMonitoringConfigurationConfigurationType Custom { get; } = new ApplicationMonitoringConfigurationConfigurationType("CUSTOM");

        public static bool operator ==(ApplicationMonitoringConfigurationConfigurationType left, ApplicationMonitoringConfigurationConfigurationType right) => left.Equals(right);
        public static bool operator !=(ApplicationMonitoringConfigurationConfigurationType left, ApplicationMonitoringConfigurationConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ApplicationMonitoringConfigurationConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationMonitoringConfigurationConfigurationType other && Equals(other);
        public bool Equals(ApplicationMonitoringConfigurationConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the verbosity of the CloudWatch Logs for an application.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationMonitoringConfigurationLogLevel : IEquatable<ApplicationMonitoringConfigurationLogLevel>
    {
        private readonly string _value;

        private ApplicationMonitoringConfigurationLogLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationMonitoringConfigurationLogLevel Debug { get; } = new ApplicationMonitoringConfigurationLogLevel("DEBUG");
        public static ApplicationMonitoringConfigurationLogLevel Info { get; } = new ApplicationMonitoringConfigurationLogLevel("INFO");
        public static ApplicationMonitoringConfigurationLogLevel Warn { get; } = new ApplicationMonitoringConfigurationLogLevel("WARN");
        public static ApplicationMonitoringConfigurationLogLevel Error { get; } = new ApplicationMonitoringConfigurationLogLevel("ERROR");

        public static bool operator ==(ApplicationMonitoringConfigurationLogLevel left, ApplicationMonitoringConfigurationLogLevel right) => left.Equals(right);
        public static bool operator !=(ApplicationMonitoringConfigurationLogLevel left, ApplicationMonitoringConfigurationLogLevel right) => !left.Equals(right);

        public static explicit operator string(ApplicationMonitoringConfigurationLogLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationMonitoringConfigurationLogLevel other && Equals(other);
        public bool Equals(ApplicationMonitoringConfigurationLogLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationMonitoringConfigurationMetricsLevel : IEquatable<ApplicationMonitoringConfigurationMetricsLevel>
    {
        private readonly string _value;

        private ApplicationMonitoringConfigurationMetricsLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationMonitoringConfigurationMetricsLevel Application { get; } = new ApplicationMonitoringConfigurationMetricsLevel("APPLICATION");
        public static ApplicationMonitoringConfigurationMetricsLevel Operator { get; } = new ApplicationMonitoringConfigurationMetricsLevel("OPERATOR");
        public static ApplicationMonitoringConfigurationMetricsLevel Parallelism { get; } = new ApplicationMonitoringConfigurationMetricsLevel("PARALLELISM");
        public static ApplicationMonitoringConfigurationMetricsLevel Task { get; } = new ApplicationMonitoringConfigurationMetricsLevel("TASK");

        public static bool operator ==(ApplicationMonitoringConfigurationMetricsLevel left, ApplicationMonitoringConfigurationMetricsLevel right) => left.Equals(right);
        public static bool operator !=(ApplicationMonitoringConfigurationMetricsLevel left, ApplicationMonitoringConfigurationMetricsLevel right) => !left.Equals(right);

        public static explicit operator string(ApplicationMonitoringConfigurationMetricsLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationMonitoringConfigurationMetricsLevel other && Equals(other);
        public bool Equals(ApplicationMonitoringConfigurationMetricsLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. You must set this property to `CUSTOM` in order to change your application's `AutoScalingEnabled`, `Parallelism`, or `ParallelismPerKPU` properties.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationParallelismConfigurationConfigurationType : IEquatable<ApplicationParallelismConfigurationConfigurationType>
    {
        private readonly string _value;

        private ApplicationParallelismConfigurationConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationParallelismConfigurationConfigurationType Custom { get; } = new ApplicationParallelismConfigurationConfigurationType("CUSTOM");
        public static ApplicationParallelismConfigurationConfigurationType Default { get; } = new ApplicationParallelismConfigurationConfigurationType("DEFAULT");

        public static bool operator ==(ApplicationParallelismConfigurationConfigurationType left, ApplicationParallelismConfigurationConfigurationType right) => left.Equals(right);
        public static bool operator !=(ApplicationParallelismConfigurationConfigurationType left, ApplicationParallelismConfigurationConfigurationType right) => !left.Equals(right);

        public static explicit operator string(ApplicationParallelismConfigurationConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationParallelismConfigurationConfigurationType other && Equals(other);
        public bool Equals(ApplicationParallelismConfigurationConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of record format.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationRecordFormatRecordFormatType : IEquatable<ApplicationRecordFormatRecordFormatType>
    {
        private readonly string _value;

        private ApplicationRecordFormatRecordFormatType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationRecordFormatRecordFormatType Csv { get; } = new ApplicationRecordFormatRecordFormatType("CSV");
        public static ApplicationRecordFormatRecordFormatType Json { get; } = new ApplicationRecordFormatRecordFormatType("JSON");

        public static bool operator ==(ApplicationRecordFormatRecordFormatType left, ApplicationRecordFormatRecordFormatType right) => left.Equals(right);
        public static bool operator !=(ApplicationRecordFormatRecordFormatType left, ApplicationRecordFormatRecordFormatType right) => !left.Equals(right);

        public static explicit operator string(ApplicationRecordFormatRecordFormatType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationRecordFormatRecordFormatType other && Equals(other);
        public bool Equals(ApplicationRecordFormatRecordFormatType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The verbosity of the CloudWatch Logs for an application. You can set it to `INFO`, `WARN`, `ERROR`, or `DEBUG`.
    /// </summary>
    [EnumType]
    public readonly struct ApplicationZeppelinMonitoringConfigurationLogLevel : IEquatable<ApplicationZeppelinMonitoringConfigurationLogLevel>
    {
        private readonly string _value;

        private ApplicationZeppelinMonitoringConfigurationLogLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ApplicationZeppelinMonitoringConfigurationLogLevel Debug { get; } = new ApplicationZeppelinMonitoringConfigurationLogLevel("DEBUG");
        public static ApplicationZeppelinMonitoringConfigurationLogLevel Info { get; } = new ApplicationZeppelinMonitoringConfigurationLogLevel("INFO");
        public static ApplicationZeppelinMonitoringConfigurationLogLevel Warn { get; } = new ApplicationZeppelinMonitoringConfigurationLogLevel("WARN");
        public static ApplicationZeppelinMonitoringConfigurationLogLevel Error { get; } = new ApplicationZeppelinMonitoringConfigurationLogLevel("ERROR");

        public static bool operator ==(ApplicationZeppelinMonitoringConfigurationLogLevel left, ApplicationZeppelinMonitoringConfigurationLogLevel right) => left.Equals(right);
        public static bool operator !=(ApplicationZeppelinMonitoringConfigurationLogLevel left, ApplicationZeppelinMonitoringConfigurationLogLevel right) => !left.Equals(right);

        public static explicit operator string(ApplicationZeppelinMonitoringConfigurationLogLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ApplicationZeppelinMonitoringConfigurationLogLevel other && Equals(other);
        public bool Equals(ApplicationZeppelinMonitoringConfigurationLogLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
