// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.KinesisAnalyticsV2.Outputs
{

    /// <summary>
    /// When you configure the application input for a SQL-based Kinesis Data Analytics application, you specify the streaming source, the in-application stream name that is created, and the mapping between the two.
    /// </summary>
    [OutputType]
    public sealed class ApplicationInput
    {
        /// <summary>
        /// Describes the number of in-application streams to create.
        /// </summary>
        public readonly Outputs.ApplicationInputParallelism? InputParallelism;
        /// <summary>
        /// The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
        /// </summary>
        public readonly Outputs.ApplicationInputProcessingConfiguration? InputProcessingConfiguration;
        /// <summary>
        /// Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
        /// </summary>
        public readonly Outputs.ApplicationInputSchema InputSchema;
        /// <summary>
        /// If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
        /// </summary>
        public readonly Outputs.ApplicationKinesisFirehoseInput? KinesisFirehoseInput;
        /// <summary>
        /// If the streaming source is an Amazon Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
        /// </summary>
        public readonly Outputs.ApplicationKinesisStreamsInput? KinesisStreamsInput;
        /// <summary>
        /// The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `"MyInApplicationStream"`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `"MyInApplicationStream_001"`, `"MyInApplicationStream_002"`, and so on.
        /// </summary>
        public readonly string NamePrefix;

        [OutputConstructor]
        private ApplicationInput(
            Outputs.ApplicationInputParallelism? inputParallelism,

            Outputs.ApplicationInputProcessingConfiguration? inputProcessingConfiguration,

            Outputs.ApplicationInputSchema inputSchema,

            Outputs.ApplicationKinesisFirehoseInput? kinesisFirehoseInput,

            Outputs.ApplicationKinesisStreamsInput? kinesisStreamsInput,

            string namePrefix)
        {
            InputParallelism = inputParallelism;
            InputProcessingConfiguration = inputProcessingConfiguration;
            InputSchema = inputSchema;
            KinesisFirehoseInput = kinesisFirehoseInput;
            KinesisStreamsInput = kinesisStreamsInput;
            NamePrefix = namePrefix;
        }
    }
}
