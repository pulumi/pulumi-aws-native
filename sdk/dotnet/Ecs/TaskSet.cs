// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ecs
{
    /// <summary>
    /// Create a task set in the specified cluster and service. This is used when a service uses the EXTERNAL deployment controller type. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.htmlin the Amazon Elastic Container Service Developer Guide.
    /// </summary>
    [AwsNativeResourceType("aws-native:ecs:TaskSet")]
    public partial class TaskSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the task set.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The capacity provider strategy that are associated with the task set.
        /// </summary>
        [Output("capacityProviderStrategy")]
        public Output<ImmutableArray<Outputs.TaskSetCapacityProviderStrategyItem>> CapacityProviderStrategy { get; private set; } = null!;

        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
        /// </summary>
        [Output("cluster")]
        public Output<string> Cluster { get; private set; } = null!;

        /// <summary>
        /// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value. 
        /// </summary>
        [Output("externalId")]
        public Output<string?> ExternalId { get; private set; } = null!;

        /// <summary>
        /// The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide. 
        /// </summary>
        [Output("launchType")]
        public Output<Pulumi.AwsNative.Ecs.TaskSetLaunchType?> LaunchType { get; private set; } = null!;

        /// <summary>
        /// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
        /// </summary>
        [Output("loadBalancers")]
        public Output<ImmutableArray<Outputs.TaskSetLoadBalancer>> LoadBalancers { get; private set; } = null!;

        /// <summary>
        /// The network configuration for the task set.
        /// </summary>
        [Output("networkConfiguration")]
        public Output<Outputs.TaskSetNetworkConfiguration?> NetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
        /// </summary>
        [Output("platformVersion")]
        public Output<string?> PlatformVersion { get; private set; } = null!;

        /// <summary>
        /// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
        /// </summary>
        [Output("scale")]
        public Output<Outputs.TaskSetScale?> Scale { get; private set; } = null!;

        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        /// <summary>
        /// The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
        /// </summary>
        [Output("serviceRegistries")]
        public Output<ImmutableArray<Outputs.TaskSetServiceRegistry>> ServiceRegistries { get; private set; } = null!;

        /// <summary>
        /// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both.
        /// 
        /// The following basic restrictions apply to tags:
        /// 
        /// - Maximum number of tags per resource - 50
        /// - For each resource, each tag key must be unique, and each tag key can have only one value.
        /// - Maximum key length - 128 Unicode characters in UTF-8
        /// - Maximum value length - 256 Unicode characters in UTF-8
        /// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        /// - Tag keys and values are case-sensitive.
        /// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
        /// </summary>
        [Output("taskDefinition")]
        public Output<string> TaskDefinition { get; private set; } = null!;


        /// <summary>
        /// Create a TaskSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TaskSet(string name, TaskSetArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ecs:TaskSet", name, args ?? new TaskSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TaskSet(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ecs:TaskSet", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "capacityProviderStrategy[*]",
                    "cluster",
                    "externalId",
                    "launchType",
                    "loadBalancers[*]",
                    "networkConfiguration",
                    "platformVersion",
                    "service",
                    "serviceRegistries[*]",
                    "taskDefinition",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TaskSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TaskSet Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new TaskSet(name, id, options);
        }
    }

    public sealed class TaskSetArgs : global::Pulumi.ResourceArgs
    {
        [Input("capacityProviderStrategy")]
        private InputList<Inputs.TaskSetCapacityProviderStrategyItemArgs>? _capacityProviderStrategy;

        /// <summary>
        /// The capacity provider strategy that are associated with the task set.
        /// </summary>
        public InputList<Inputs.TaskSetCapacityProviderStrategyItemArgs> CapacityProviderStrategy
        {
            get => _capacityProviderStrategy ?? (_capacityProviderStrategy = new InputList<Inputs.TaskSetCapacityProviderStrategyItemArgs>());
            set => _capacityProviderStrategy = value;
        }

        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the task set in.
        /// </summary>
        [Input("cluster", required: true)]
        public Input<string> Cluster { get; set; } = null!;

        /// <summary>
        /// An optional non-unique tag that identifies this task set in external systems. If the task set is associated with a service discovery registry, the tasks in this task set will have the ECS_TASK_SET_EXTERNAL_ID AWS Cloud Map attribute set to the provided value. 
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide. 
        /// </summary>
        [Input("launchType")]
        public Input<Pulumi.AwsNative.Ecs.TaskSetLaunchType>? LaunchType { get; set; }

        [Input("loadBalancers")]
        private InputList<Inputs.TaskSetLoadBalancerArgs>? _loadBalancers;

        /// <summary>
        /// A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
        /// </summary>
        public InputList<Inputs.TaskSetLoadBalancerArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.TaskSetLoadBalancerArgs>());
            set => _loadBalancers = value;
        }

        /// <summary>
        /// The network configuration for the task set.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.TaskSetNetworkConfigurationArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// The platform version that the tasks in the task set should use. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the LATEST platform version is used by default.
        /// </summary>
        [Input("platformVersion")]
        public Input<string>? PlatformVersion { get; set; }

        /// <summary>
        /// A floating-point percentage of the desired number of tasks to place and keep running in the task set.
        /// </summary>
        [Input("scale")]
        public Input<Inputs.TaskSetScaleArgs>? Scale { get; set; }

        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        [Input("serviceRegistries")]
        private InputList<Inputs.TaskSetServiceRegistryArgs>? _serviceRegistries;

        /// <summary>
        /// The details of the service discovery registries to assign to this task set. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html.
        /// </summary>
        public InputList<Inputs.TaskSetServiceRegistryArgs> ServiceRegistries
        {
            get => _serviceRegistries ?? (_serviceRegistries = new InputList<Inputs.TaskSetServiceRegistryArgs>());
            set => _serviceRegistries = value;
        }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The metadata that you apply to the task set to help you categorize and organize them. Each tag consists of a key and an optional value. You define both.
        /// 
        /// The following basic restrictions apply to tags:
        /// 
        /// - Maximum number of tags per resource - 50
        /// - For each resource, each tag key must be unique, and each tag key can have only one value.
        /// - Maximum key length - 128 Unicode characters in UTF-8
        /// - Maximum value length - 256 Unicode characters in UTF-8
        /// - If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        /// - Tag keys and values are case-sensitive.
        /// - Do not use `aws:` , `AWS:` , or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the task definition for the tasks in the task set to use.
        /// </summary>
        [Input("taskDefinition", required: true)]
        public Input<string> TaskDefinition { get; set; } = null!;

        public TaskSetArgs()
        {
        }
        public static new TaskSetArgs Empty => new TaskSetArgs();
    }
}
