// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ecs
{
    /// <summary>
    /// The ``AWS::ECS::Service`` resource creates an Amazon Elastic Container Service (Amazon ECS) service that runs and maintains the requested number of tasks and associated load balancers.
    ///   The stack update fails if you change any properties that require replacement and at least one ECS Service Connect ``ServiceConnectConfiguration`` property is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceConnectService`` must have a name that is unique in the namespace.
    ///    Starting April 15, 2023, AWS; will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, ECS, or EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
    ///    On June 12, 2025, Amazon ECS launched support for updating capacity provider configuration for ECS services. With this launch, ECS also aligned the CFN update behavior for ``CapacityProviderStrategy`` parameter with the standard practice. For more information, see [adds support for updating capacity provider configuration for ECS services](https://docs.aws.amazon.com/about-aws/whats-new/2025/05/amazon-ecs-capacity-provider-configuration-ecs/). Previously ECS ignored the ``CapacityProviderStrategy`` property if it was set to an empty list for example, ``[]`` in CFN, because updating capacity provider configuration was not supported. Now, with support for capacity provider updates, customers can remove capacity providers from a service by passing an empty list. When you specify an empty list (``[]``) for the ``CapacityProviderStrategy`` property in your CFN template, ECS will remove any capacity providers associated with the service, as follows:
    ///   +  For services created with a capacity provider strategy after the launch:
    ///   +  If there's a cluster default strategy set, the service will revert to using that default strategy.
    ///   +  If no cluster default strategy exists, you will receive the following error:
    ///  No launch type to fall back to for empty capacity provider strategy. Your service was not created with a launch type.
    /// 
    ///   +  For services created with a capacity provider strategy prior to the launch:
    ///   +  If ``CapacityProviderStrategy`` had ``FARGATE_SPOT`` or ``FARGATE`` capacity providers, the launch type will be updated to ``FARGATE`` and the capacity provider will be removed.
    ///   +  If the strategy included Auto Scaling group capacity providers, the service will revert to EC2 launch type, and the Auto Scaling group capacity providers will not be used.
    /// 
    ///  Recommended Actions
    ///  If you are currently using ``CapacityProviderStrategy: []`` in your CFN templates, you should take one of the following actions:
    ///   +  If you do not intend to update the Capacity Provider Strategy:
    ///   +  Remove the ``CapacityProviderStrategy`` property entirely from your CFN template
    ///   +  Alternatively, use ``!Ref ::NoValue`` for the ``CapacityProviderStrategy`` property in your template
    /// 
    ///   +  If you intend to maintain or update the Capacity Provider Strategy, specify the actual Capacity Provider Strategy for the service in your CFN template.
    /// 
    ///  If your CFN template had an empty list ([]) for ``CapacityProviderStrategy`` prior to the aforementioned launch on June 12, and you are using the same template with ``CapacityProviderStrategy: []``, you might encounter the following error:
    ///   Invalid request provided: When switching from launch type to capacity provider strategy on an existing service, or making a change to a capacity provider strategy on a service that is already using one, you must force a new deployment. (Service: Ecs, Status Code: 400, Request ID: xxx) (SDK Attempt Count: 1)" (RequestToken: xxx HandlerErrorCode: InvalidRequest)
    ///  Note that CFN automatically initiates a new deployment when it detects a parameter change, but customers cannot choose to force a deployment through CFN. This is an invalid input scenario that requires one of the remediation actions listed above.
    ///  If you are experiencing active production issues related to this change, contact AWS Support or your Technical Account Manager.
    /// </summary>
    [AwsNativeResourceType("aws-native:ecs:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether to use Availability Zone rebalancing for the service.
        ///  For more information, see [Balancing an Amazon ECS service across Availability Zones](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-rebalancing.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///  The default behavior of ``AvailabilityZoneRebalancing`` differs between create and update requests:
        ///   +  For create service requests, when no value is specified for ``AvailabilityZoneRebalancing``, Amazon ECS defaults the value to ``ENABLED``.
        ///   +  For update service requests, when no value is specified for ``AvailabilityZoneRebalancing``, Amazon ECS defaults to the existing serviceâ€™s ``AvailabilityZoneRebalancing`` value. If the service never had an ``AvailabilityZoneRebalancing`` value set, Amazon ECS treats this as ``DISABLED``.
        /// </summary>
        [Output("availabilityZoneRebalancing")]
        public Output<Pulumi.AwsNative.Ecs.ServiceAvailabilityZoneRebalancing?> AvailabilityZoneRebalancing { get; private set; } = null!;

        /// <summary>
        /// The capacity provider strategy to use for the service.
        ///  If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used.
        ///  A capacity provider strategy can contain a maximum of 20 capacity providers.
        ///   To remove this property from your service resource, specify an empty ``CapacityProviderStrategyItem`` array.
        /// </summary>
        [Output("capacityProviderStrategy")]
        public Output<ImmutableArray<Outputs.ServiceCapacityProviderStrategyItem>> CapacityProviderStrategy { get; private set; } = null!;

        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a cluster, the default cluster is assumed.
        /// </summary>
        [Output("cluster")]
        public Output<string?> Cluster { get; private set; } = null!;

        /// <summary>
        /// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
        /// </summary>
        [Output("deploymentConfiguration")]
        public Output<Outputs.ServiceDeploymentConfiguration?> DeploymentConfiguration { get; private set; } = null!;

        /// <summary>
        /// The deployment controller to use for the service.
        /// </summary>
        [Output("deploymentController")]
        public Output<Outputs.ServiceDeploymentController?> DeploymentController { get; private set; } = null!;

        /// <summary>
        /// The number of instantiations of the specified task definition to place and keep running in your service.
        ///  For new services, if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy, the desired count is not required.
        ///  For existing services, if a desired count is not specified, it is omitted from the operation.
        /// </summary>
        [Output("desiredCount")]
        public Output<int?> DesiredCount { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///  When you use Amazon ECS managed tags, you must set the ``propagateTags`` request parameter.
        /// </summary>
        [Output("enableEcsManagedTags")]
        public Output<bool?> EnableEcsManagedTags { get; private set; } = null!;

        /// <summary>
        /// Determines whether the execute command functionality is turned on for the service. If ``true``, the execute command functionality is turned on for all containers in tasks as part of the service.
        /// </summary>
        [Output("enableExecuteCommand")]
        public Output<bool?> EnableExecuteCommand { get; private set; } = null!;

        /// <summary>
        /// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (``my_image:latest``) or to roll Fargate tasks onto a newer platform version.
        /// </summary>
        [Output("forceNewDeployment")]
        public Output<Outputs.ServiceForceNewDeployment?> ForceNewDeployment { get; private set; } = null!;

        /// <summary>
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing, VPC Lattice, and container health checks after a task has first started. If you do not specify a health check grace period value, the default value of 0 is used. If you do not use any of the health checks, then ``healthCheckGracePeriodSeconds`` is unused.
        ///  If your service has more running tasks than desired, unhealthy tasks in the grace period might be stopped to reach the desired count.
        /// </summary>
        [Output("healthCheckGracePeriodSeconds")]
        public Output<int?> HealthCheckGracePeriodSeconds { get; private set; } = null!;

        /// <summary>
        /// The launch type on which to run your service. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///   If you want to use Managed Instances, you must use the ``capacityProviderStrategy`` request parameter
        /// </summary>
        [Output("launchType")]
        public Output<Pulumi.AwsNative.Ecs.ServiceLaunchType?> LaunchType { get; private set; } = null!;

        /// <summary>
        /// A list of load balancer objects to associate with the service. If you specify the ``Role`` property, ``LoadBalancers`` must be specified as well. For information about the number of load balancers that you can specify per service, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///   To remove this property from your service resource, specify an empty ``LoadBalancer`` array.
        /// </summary>
        [Output("loadBalancers")]
        public Output<ImmutableArray<Outputs.ServiceLoadBalancer>> LoadBalancers { get; private set; } = null!;

        /// <summary>
        /// The name of the Amazon ECS service, such as `sample-webapp` .
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network configuration for the service. This parameter is required for task definitions that use the ``awsvpc`` network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Output("networkConfiguration")]
        public Output<Outputs.ServiceNetworkConfiguration?> NetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.
        ///   To remove this property from your service resource, specify an empty ``PlacementConstraint`` array.
        /// </summary>
        [Output("placementConstraints")]
        public Output<ImmutableArray<Outputs.ServicePlacementConstraint>> PlacementConstraints { get; private set; } = null!;

        /// <summary>
        /// The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each service.
        ///   To remove this property from your service resource, specify an empty ``PlacementStrategy`` array.
        /// </summary>
        [Output("placementStrategies")]
        public Output<ImmutableArray<Outputs.ServicePlacementStrategy>> PlacementStrategies { get; private set; } = null!;

        /// <summary>
        /// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the ``LATEST`` platform version is used. For more information, see [platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Output("platformVersion")]
        public Output<string?> PlatformVersion { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
        ///  You must set this to a value other than ``NONE`` when you use Cost Explorer. For more information, see [Amazon ECS usage reports](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/usage-reports.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///  The default is ``NONE``.
        /// </summary>
        [Output("propagateTags")]
        public Output<Pulumi.AwsNative.Ecs.ServicePropagateTags?> PropagateTags { get; private set; } = null!;

        /// <summary>
        /// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition doesn't use the ``awsvpc`` network mode. If you specify the ``role`` parameter, you must also specify a load balancer object with the ``loadBalancers`` parameter.
        ///   If your account has already created the Amazon ECS service-linked role, that role is used for your service unless you specify a role here. The service-linked role is required if your task definition uses the ``awsvpc`` network mode or if the service is configured to use service discovery, an external deployment controller, multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///   If your specified role has a path other than ``/``, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name ``bar`` has a path of ``/foo/`` then you would specify ``/foo/bar`` as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the *IAM User Guide*.
        /// </summary>
        [Output("role")]
        public Output<string?> Role { get; private set; } = null!;

        /// <summary>
        /// The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
        ///  There are two service scheduler strategies available:
        ///   +  ``REPLICA``-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service uses the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types.
        ///   +  ``DAEMON``-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.
        ///   Tasks using the Fargate launch type or the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types don't support the ``DAEMON`` scheduling strategy.
        /// </summary>
        [Output("schedulingStrategy")]
        public Output<Pulumi.AwsNative.Ecs.ServiceSchedulingStrategy?> SchedulingStrategy { get; private set; } = null!;

        /// <summary>
        /// The ARN that identifies the service. For more information about the ARN format, see [Amazon Resource Name (ARN)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html#ecs-resource-ids) in the *Amazon ECS Developer Guide* .
        /// </summary>
        [Output("serviceArn")]
        public Output<string> ServiceArn { get; private set; } = null!;

        /// <summary>
        /// The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.
        ///  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Output("serviceConnectConfiguration")]
        public Output<Outputs.ServiceConnectConfiguration?> ServiceConnectConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.
        ///   The stack update fails if you change any properties that require replacement and the ``ServiceName`` is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceName`` must be unique in the cluster.
        /// </summary>
        [Output("serviceName")]
        public Output<string?> ServiceName { get; private set; } = null!;

        /// <summary>
        /// The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
        ///   Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
        ///    To remove this property from your service resource, specify an empty ``ServiceRegistry`` array.
        /// </summary>
        [Output("serviceRegistries")]
        public Output<ImmutableArray<Outputs.ServiceRegistry>> ServiceRegistries { get; private set; } = null!;

        /// <summary>
        /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well.
        ///  The following basic restrictions apply to tags:
        ///   +  Maximum number of tags per resource - 50
        ///   +  For each resource, each tag key must be unique, and each tag key can have only one value.
        ///   +  Maximum key length - 128 Unicode characters in UTF-8
        ///   +  Maximum value length - 256 Unicode characters in UTF-8
        ///   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///   +  Tag keys and values are case-sensitive.
        ///   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The ``family`` and ``revision`` (``family:revision``) or full ARN of the task definition to run in your service. If a ``revision`` isn't specified, the latest ``ACTIVE`` revision is used.
        ///  A task definition must be specified if the service uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers.
        ///  For more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
        /// </summary>
        [Output("taskDefinition")]
        public Output<string?> TaskDefinition { get; private set; } = null!;

        /// <summary>
        /// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
        ///   To remove this property from your service resource, specify an empty ``ServiceVolumeConfiguration`` array.
        /// </summary>
        [Output("volumeConfigurations")]
        public Output<ImmutableArray<Outputs.ServiceVolumeConfiguration>> VolumeConfigurations { get; private set; } = null!;

        /// <summary>
        /// The VPC Lattice configuration for the service being created.
        /// </summary>
        [Output("vpcLatticeConfigurations")]
        public Output<ImmutableArray<Outputs.ServiceVpcLatticeConfiguration>> VpcLatticeConfigurations { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:ecs:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ecs:Service", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "cluster",
                    "launchType",
                    "role",
                    "schedulingStrategy",
                    "serviceName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Service(name, id, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether to use Availability Zone rebalancing for the service.
        ///  For more information, see [Balancing an Amazon ECS service across Availability Zones](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-rebalancing.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///  The default behavior of ``AvailabilityZoneRebalancing`` differs between create and update requests:
        ///   +  For create service requests, when no value is specified for ``AvailabilityZoneRebalancing``, Amazon ECS defaults the value to ``ENABLED``.
        ///   +  For update service requests, when no value is specified for ``AvailabilityZoneRebalancing``, Amazon ECS defaults to the existing serviceâ€™s ``AvailabilityZoneRebalancing`` value. If the service never had an ``AvailabilityZoneRebalancing`` value set, Amazon ECS treats this as ``DISABLED``.
        /// </summary>
        [Input("availabilityZoneRebalancing")]
        public Input<Pulumi.AwsNative.Ecs.ServiceAvailabilityZoneRebalancing>? AvailabilityZoneRebalancing { get; set; }

        [Input("capacityProviderStrategy")]
        private InputList<Inputs.ServiceCapacityProviderStrategyItemArgs>? _capacityProviderStrategy;

        /// <summary>
        /// The capacity provider strategy to use for the service.
        ///  If a ``capacityProviderStrategy`` is specified, the ``launchType`` parameter must be omitted. If no ``capacityProviderStrategy`` or ``launchType`` is specified, the ``defaultCapacityProviderStrategy`` for the cluster is used.
        ///  A capacity provider strategy can contain a maximum of 20 capacity providers.
        ///   To remove this property from your service resource, specify an empty ``CapacityProviderStrategyItem`` array.
        /// </summary>
        public InputList<Inputs.ServiceCapacityProviderStrategyItemArgs> CapacityProviderStrategy
        {
            get => _capacityProviderStrategy ?? (_capacityProviderStrategy = new InputList<Inputs.ServiceCapacityProviderStrategyItemArgs>());
            set => _capacityProviderStrategy = value;
        }

        /// <summary>
        /// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on. If you do not specify a cluster, the default cluster is assumed.
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        /// <summary>
        /// Optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
        /// </summary>
        [Input("deploymentConfiguration")]
        public Input<Inputs.ServiceDeploymentConfigurationArgs>? DeploymentConfiguration { get; set; }

        /// <summary>
        /// The deployment controller to use for the service.
        /// </summary>
        [Input("deploymentController")]
        public Input<Inputs.ServiceDeploymentControllerArgs>? DeploymentController { get; set; }

        /// <summary>
        /// The number of instantiations of the specified task definition to place and keep running in your service.
        ///  For new services, if a desired count is not specified, a default value of ``1`` is used. When using the ``DAEMON`` scheduling strategy, the desired count is not required.
        ///  For existing services, if a desired count is not specified, it is omitted from the operation.
        /// </summary>
        [Input("desiredCount")]
        public Input<int>? DesiredCount { get; set; }

        /// <summary>
        /// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For more information, see [Tagging your Amazon ECS resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///  When you use Amazon ECS managed tags, you must set the ``propagateTags`` request parameter.
        /// </summary>
        [Input("enableEcsManagedTags")]
        public Input<bool>? EnableEcsManagedTags { get; set; }

        /// <summary>
        /// Determines whether the execute command functionality is turned on for the service. If ``true``, the execute command functionality is turned on for all containers in tasks as part of the service.
        /// </summary>
        [Input("enableExecuteCommand")]
        public Input<bool>? EnableExecuteCommand { get; set; }

        /// <summary>
        /// Determines whether to force a new deployment of the service. By default, deployments aren't forced. You can use this option to start a new deployment with no service definition changes. For example, you can update a service's tasks to use a newer Docker image with the same image/tag combination (``my_image:latest``) or to roll Fargate tasks onto a newer platform version.
        /// </summary>
        [Input("forceNewDeployment")]
        public Input<Inputs.ServiceForceNewDeploymentArgs>? ForceNewDeployment { get; set; }

        /// <summary>
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing, VPC Lattice, and container health checks after a task has first started. If you do not specify a health check grace period value, the default value of 0 is used. If you do not use any of the health checks, then ``healthCheckGracePeriodSeconds`` is unused.
        ///  If your service has more running tasks than desired, unhealthy tasks in the grace period might be stopped to reach the desired count.
        /// </summary>
        [Input("healthCheckGracePeriodSeconds")]
        public Input<int>? HealthCheckGracePeriodSeconds { get; set; }

        /// <summary>
        /// The launch type on which to run your service. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///   If you want to use Managed Instances, you must use the ``capacityProviderStrategy`` request parameter
        /// </summary>
        [Input("launchType")]
        public Input<Pulumi.AwsNative.Ecs.ServiceLaunchType>? LaunchType { get; set; }

        [Input("loadBalancers")]
        private InputList<Inputs.ServiceLoadBalancerArgs>? _loadBalancers;

        /// <summary>
        /// A list of load balancer objects to associate with the service. If you specify the ``Role`` property, ``LoadBalancers`` must be specified as well. For information about the number of load balancers that you can specify per service, see [Service Load Balancing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///   To remove this property from your service resource, specify an empty ``LoadBalancer`` array.
        /// </summary>
        public InputList<Inputs.ServiceLoadBalancerArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.ServiceLoadBalancerArgs>());
            set => _loadBalancers = value;
        }

        /// <summary>
        /// The network configuration for the service. This parameter is required for task definitions that use the ``awsvpc`` network mode to receive their own elastic network interface, and it is not supported for other network modes. For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.ServiceNetworkConfigurationArgs>? NetworkConfiguration { get; set; }

        [Input("placementConstraints")]
        private InputList<Inputs.ServicePlacementConstraintArgs>? _placementConstraints;

        /// <summary>
        /// An array of placement constraint objects to use for tasks in your service. You can specify a maximum of 10 constraints for each task. This limit includes constraints in the task definition and those specified at runtime.
        ///   To remove this property from your service resource, specify an empty ``PlacementConstraint`` array.
        /// </summary>
        public InputList<Inputs.ServicePlacementConstraintArgs> PlacementConstraints
        {
            get => _placementConstraints ?? (_placementConstraints = new InputList<Inputs.ServicePlacementConstraintArgs>());
            set => _placementConstraints = value;
        }

        [Input("placementStrategies")]
        private InputList<Inputs.ServicePlacementStrategyArgs>? _placementStrategies;

        /// <summary>
        /// The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules for each service.
        ///   To remove this property from your service resource, specify an empty ``PlacementStrategy`` array.
        /// </summary>
        public InputList<Inputs.ServicePlacementStrategyArgs> PlacementStrategies
        {
            get => _placementStrategies ?? (_placementStrategies = new InputList<Inputs.ServicePlacementStrategyArgs>());
            set => _placementStrategies = value;
        }

        /// <summary>
        /// The platform version that your tasks in the service are running on. A platform version is specified only for tasks using the Fargate launch type. If one isn't specified, the ``LATEST`` platform version is used. For more information, see [platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Input("platformVersion")]
        public Input<string>? PlatformVersion { get; set; }

        /// <summary>
        /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
        ///  You must set this to a value other than ``NONE`` when you use Cost Explorer. For more information, see [Amazon ECS usage reports](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/usage-reports.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///  The default is ``NONE``.
        /// </summary>
        [Input("propagateTags")]
        public Input<Pulumi.AwsNative.Ecs.ServicePropagateTags>? PropagateTags { get; set; }

        /// <summary>
        /// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is only permitted if you are using a load balancer with your service and your task definition doesn't use the ``awsvpc`` network mode. If you specify the ``role`` parameter, you must also specify a load balancer object with the ``loadBalancers`` parameter.
        ///   If your account has already created the Amazon ECS service-linked role, that role is used for your service unless you specify a role here. The service-linked role is required if your task definition uses the ``awsvpc`` network mode or if the service is configured to use service discovery, an external deployment controller, multiple target groups, or Elastic Inference accelerators in which case you don't specify a role here. For more information, see [Using service-linked roles for Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html) in the *Amazon Elastic Container Service Developer Guide*.
        ///   If your specified role has a path other than ``/``, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path. For example, if a role with the name ``bar`` has a path of ``/foo/`` then you would specify ``/foo/bar`` as the role name. For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the *IAM User Guide*.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
        ///  There are two service scheduler strategies available:
        ///   +  ``REPLICA``-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service uses the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types.
        ///   +  ``DAEMON``-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.
        ///   Tasks using the Fargate launch type or the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types don't support the ``DAEMON`` scheduling strategy.
        /// </summary>
        [Input("schedulingStrategy")]
        public Input<Pulumi.AwsNative.Ecs.ServiceSchedulingStrategy>? SchedulingStrategy { get; set; }

        /// <summary>
        /// The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.
        ///  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
        /// </summary>
        [Input("serviceConnectConfiguration")]
        public Input<Inputs.ServiceConnectConfigurationArgs>? ServiceConnectConfiguration { get; set; }

        /// <summary>
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within a cluster, but you can have similarly named services in multiple clusters within a Region or across multiple Regions.
        ///   The stack update fails if you change any properties that require replacement and the ``ServiceName`` is configured. This is because AWS CloudFormation creates the replacement service first, but each ``ServiceName`` must be unique in the cluster.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        [Input("serviceRegistries")]
        private InputList<Inputs.ServiceRegistryArgs>? _serviceRegistries;

        /// <summary>
        /// The details of the service discovery registry to associate with this service. For more information, see [Service discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
        ///   Each service may be associated with one service registry. Multiple service registries for each service isn't supported.
        ///    To remove this property from your service resource, specify an empty ``ServiceRegistry`` array.
        /// </summary>
        public InputList<Inputs.ServiceRegistryArgs> ServiceRegistries
        {
            get => _serviceRegistries ?? (_serviceRegistries = new InputList<Inputs.ServiceRegistryArgs>());
            set => _serviceRegistries = value;
        }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The metadata that you apply to the service to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. When a service is deleted, the tags are deleted as well.
        ///  The following basic restrictions apply to tags:
        ///   +  Maximum number of tags per resource - 50
        ///   +  For each resource, each tag key must be unique, and each tag key can have only one value.
        ///   +  Maximum key length - 128 Unicode characters in UTF-8
        ///   +  Maximum value length - 256 Unicode characters in UTF-8
        ///   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
        ///   +  Tag keys and values are case-sensitive.
        ///   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The ``family`` and ``revision`` (``family:revision``) or full ARN of the task definition to run in your service. If a ``revision`` isn't specified, the latest ``ACTIVE`` revision is used.
        ///  A task definition must be specified if the service uses either the ``ECS`` or ``CODE_DEPLOY`` deployment controllers.
        ///  For more information about deployment types, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html).
        /// </summary>
        [Input("taskDefinition")]
        public Input<string>? TaskDefinition { get; set; }

        [Input("volumeConfigurations")]
        private InputList<Inputs.ServiceVolumeConfigurationArgs>? _volumeConfigurations;

        /// <summary>
        /// The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
        ///   To remove this property from your service resource, specify an empty ``ServiceVolumeConfiguration`` array.
        /// </summary>
        public InputList<Inputs.ServiceVolumeConfigurationArgs> VolumeConfigurations
        {
            get => _volumeConfigurations ?? (_volumeConfigurations = new InputList<Inputs.ServiceVolumeConfigurationArgs>());
            set => _volumeConfigurations = value;
        }

        [Input("vpcLatticeConfigurations")]
        private InputList<Inputs.ServiceVpcLatticeConfigurationArgs>? _vpcLatticeConfigurations;

        /// <summary>
        /// The VPC Lattice configuration for the service being created.
        /// </summary>
        public InputList<Inputs.ServiceVpcLatticeConfigurationArgs> VpcLatticeConfigurations
        {
            get => _vpcLatticeConfigurations ?? (_vpcLatticeConfigurations = new InputList<Inputs.ServiceVpcLatticeConfigurationArgs>());
            set => _vpcLatticeConfigurations = value;
        }

        public ServiceArgs()
        {
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }
}
