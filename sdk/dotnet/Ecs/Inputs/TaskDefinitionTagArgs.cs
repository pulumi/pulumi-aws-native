// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ecs.Inputs
{

    /// <summary>
    /// The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
    ///  The following basic restrictions apply to tags:
    ///   +  Maximum number of tags per resource - 50
    ///   +  For each resource, each tag key must be unique, and each tag key can have only one value.
    ///   +  Maximum key length - 128 Unicode characters in UTF-8
    ///   +  Maximum value length - 256 Unicode characters in UTF-8
    ///   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
    ///   +  Tag keys and values are case-sensitive.
    ///   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix
    /// </summary>
    public sealed class TaskDefinitionTagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public TaskDefinitionTagArgs()
        {
        }
        public static new TaskDefinitionTagArgs Empty => new TaskDefinitionTagArgs();
    }
}
