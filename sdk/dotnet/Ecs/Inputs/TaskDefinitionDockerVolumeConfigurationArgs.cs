// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ecs.Inputs
{

    /// <summary>
    /// The ``DockerVolumeConfiguration`` property specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.
    /// </summary>
    public sealed class TaskDefinitionDockerVolumeConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If this value is ``true``, the Docker volume is created if it doesn't already exist.
        ///   This field is only used if the ``scope`` is ``shared``.
        /// </summary>
        [Input("autoprovision")]
        public Input<bool>? Autoprovision { get; set; }

        /// <summary>
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. This parameter maps to ``Driver`` in the docker conainer create command and the ``xxdriver`` option to docker volume create.
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        [Input("driverOpts")]
        private InputMap<string>? _driverOpts;

        /// <summary>
        /// A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the docker create-volume command and the ``xxopt`` option to docker volume create.
        /// </summary>
        public InputMap<string> DriverOpts
        {
            get => _driverOpts ?? (_driverOpts = new InputMap<string>());
            set => _driverOpts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the docker conainer create command and the ``xxlabel`` option to docker volume create.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public TaskDefinitionDockerVolumeConfigurationArgs()
        {
        }
        public static new TaskDefinitionDockerVolumeConfigurationArgs Empty => new TaskDefinitionDockerVolumeConfigurationArgs();
    }
}
