// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ecs.Inputs
{

    public sealed class TaskSetCapacityProviderStrategyItemArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider for each service. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of `0` is used.
        /// 
        /// Base value characteristics:
        /// 
        /// - Only one capacity provider in a strategy can have a base defined
        /// - Default value is `0` if not specified
        /// - Valid range: 0 to 100,000
        /// - Base requirements are satisfied first before weight distribution
        /// </summary>
        [Input("base")]
        public Input<int>? Base { get; set; }

        /// <summary>
        /// The short name of the capacity provider.
        /// </summary>
        [Input("capacityProvider")]
        public Input<string>? CapacityProvider { get; set; }

        /// <summary>
        /// The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The `weight` value is taken into consideration after the `base` value, if defined, is satisfied.
        /// 
        /// If no `weight` value is specified, the default value of `0` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of `0` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of `0` , any `RunTask` or `CreateService` actions using the capacity provider strategy will fail.
        /// 
        /// Weight value characteristics:
        /// 
        /// - Weight is considered after the base value is satisfied
        /// - Default value is `0` if not specified
        /// - Valid range: 0 to 1,000
        /// - At least one capacity provider must have a weight greater than zero
        /// - Capacity providers with weight of `0` cannot place tasks
        /// 
        /// Task distribution logic:
        /// 
        /// - Base satisfaction: The minimum number of tasks specified by the base value are placed on that capacity provider
        /// - Weight distribution: After base requirements are met, additional tasks are distributed according to weight ratios
        /// 
        /// Examples:
        /// 
        /// Equal Distribution: Two capacity providers both with weight `1` will split tasks evenly after base requirements are met.
        /// 
        /// Weighted Distribution: If capacityProviderA has weight `1` and capacityProviderB has weight `4` , then for every 1 task on A, 4 tasks will run on B.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public TaskSetCapacityProviderStrategyItemArgs()
        {
        }
        public static new TaskSetCapacityProviderStrategyItemArgs Empty => new TaskSetCapacityProviderStrategyItemArgs();
    }
}
