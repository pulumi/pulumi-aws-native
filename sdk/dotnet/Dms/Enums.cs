// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Dms
{
    [EnumType]
    public readonly struct DataProviderDmsSslModeValue : IEquatable<DataProviderDmsSslModeValue>
    {
        private readonly string _value;

        private DataProviderDmsSslModeValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataProviderDmsSslModeValue None { get; } = new DataProviderDmsSslModeValue("none");
        public static DataProviderDmsSslModeValue Require { get; } = new DataProviderDmsSslModeValue("require");
        public static DataProviderDmsSslModeValue VerifyCa { get; } = new DataProviderDmsSslModeValue("verify_ca");
        public static DataProviderDmsSslModeValue VerifyFull { get; } = new DataProviderDmsSslModeValue("verify_full");

        public static bool operator ==(DataProviderDmsSslModeValue left, DataProviderDmsSslModeValue right) => left.Equals(right);
        public static bool operator !=(DataProviderDmsSslModeValue left, DataProviderDmsSslModeValue right) => !left.Equals(right);

        public static explicit operator string(DataProviderDmsSslModeValue value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataProviderDmsSslModeValue other && Equals(other);
        public bool Equals(DataProviderDmsSslModeValue other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The property describes a data engine for the data provider.
    /// </summary>
    [EnumType]
    public readonly struct DataProviderEngine : IEquatable<DataProviderEngine>
    {
        private readonly string _value;

        private DataProviderEngine(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataProviderEngine Postgresql { get; } = new DataProviderEngine("postgresql");
        public static DataProviderEngine Mysql { get; } = new DataProviderEngine("mysql");
        public static DataProviderEngine Oracle { get; } = new DataProviderEngine("oracle");
        public static DataProviderEngine Sqlserver { get; } = new DataProviderEngine("sqlserver");
        public static DataProviderEngine Aurora { get; } = new DataProviderEngine("aurora");
        public static DataProviderEngine AuroraPostgresql { get; } = new DataProviderEngine("aurora_postgresql");

        public static bool operator ==(DataProviderEngine left, DataProviderEngine right) => left.Equals(right);
        public static bool operator !=(DataProviderEngine left, DataProviderEngine right) => !left.Equals(right);

        public static explicit operator string(DataProviderEngine value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataProviderEngine other && Equals(other);
        public bool Equals(DataProviderEngine other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The property describes a network type for the instance profile.
    /// </summary>
    [EnumType]
    public readonly struct InstanceProfileNetworkType : IEquatable<InstanceProfileNetworkType>
    {
        private readonly string _value;

        private InstanceProfileNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstanceProfileNetworkType Ipv4 { get; } = new InstanceProfileNetworkType("IPV4");
        public static InstanceProfileNetworkType Ipv6 { get; } = new InstanceProfileNetworkType("IPV6");
        public static InstanceProfileNetworkType Dual { get; } = new InstanceProfileNetworkType("DUAL");

        public static bool operator ==(InstanceProfileNetworkType left, InstanceProfileNetworkType right) => left.Equals(right);
        public static bool operator !=(InstanceProfileNetworkType left, InstanceProfileNetworkType right) => !left.Equals(right);

        public static explicit operator string(InstanceProfileNetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceProfileNetworkType other && Equals(other);
        public bool Equals(InstanceProfileNetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of AWS DMS Serverless replication to provision using this replication configuration
    /// </summary>
    [EnumType]
    public readonly struct ReplicationConfigReplicationType : IEquatable<ReplicationConfigReplicationType>
    {
        private readonly string _value;

        private ReplicationConfigReplicationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationConfigReplicationType FullLoad { get; } = new ReplicationConfigReplicationType("full-load");
        public static ReplicationConfigReplicationType FullLoadAndCdc { get; } = new ReplicationConfigReplicationType("full-load-and-cdc");
        public static ReplicationConfigReplicationType Cdc { get; } = new ReplicationConfigReplicationType("cdc");

        public static bool operator ==(ReplicationConfigReplicationType left, ReplicationConfigReplicationType right) => left.Equals(right);
        public static bool operator !=(ReplicationConfigReplicationType left, ReplicationConfigReplicationType right) => !left.Equals(right);

        public static explicit operator string(ReplicationConfigReplicationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationConfigReplicationType other && Equals(other);
        public bool Equals(ReplicationConfigReplicationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
