// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Dms
{
    /// <summary>
    /// The property describes the type of migration.
    /// </summary>
    [EnumType]
    public readonly struct DataMigrationType : IEquatable<DataMigrationType>
    {
        private readonly string _value;

        private DataMigrationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataMigrationType FullLoad { get; } = new DataMigrationType("full-load");
        public static DataMigrationType Cdc { get; } = new DataMigrationType("cdc");
        public static DataMigrationType FullLoadAndCdc { get; } = new DataMigrationType("full-load-and-cdc");

        public static bool operator ==(DataMigrationType left, DataMigrationType right) => left.Equals(right);
        public static bool operator !=(DataMigrationType left, DataMigrationType right) => !left.Equals(right);

        public static explicit operator string(DataMigrationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataMigrationType other && Equals(other);
        public bool Equals(DataMigrationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataProviderDb2SslModeValue : IEquatable<DataProviderDb2SslModeValue>
    {
        private readonly string _value;

        private DataProviderDb2SslModeValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataProviderDb2SslModeValue None { get; } = new DataProviderDb2SslModeValue("none");
        public static DataProviderDb2SslModeValue VerifyCa { get; } = new DataProviderDb2SslModeValue("verify-ca");

        public static bool operator ==(DataProviderDb2SslModeValue left, DataProviderDb2SslModeValue right) => left.Equals(right);
        public static bool operator !=(DataProviderDb2SslModeValue left, DataProviderDb2SslModeValue right) => !left.Equals(right);

        public static explicit operator string(DataProviderDb2SslModeValue value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataProviderDb2SslModeValue other && Equals(other);
        public bool Equals(DataProviderDb2SslModeValue other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataProviderDmsSslModeValue : IEquatable<DataProviderDmsSslModeValue>
    {
        private readonly string _value;

        private DataProviderDmsSslModeValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataProviderDmsSslModeValue None { get; } = new DataProviderDmsSslModeValue("none");
        public static DataProviderDmsSslModeValue Require { get; } = new DataProviderDmsSslModeValue("require");
        public static DataProviderDmsSslModeValue VerifyCa { get; } = new DataProviderDmsSslModeValue("verify-ca");
        public static DataProviderDmsSslModeValue VerifyFull { get; } = new DataProviderDmsSslModeValue("verify-full");

        public static bool operator ==(DataProviderDmsSslModeValue left, DataProviderDmsSslModeValue right) => left.Equals(right);
        public static bool operator !=(DataProviderDmsSslModeValue left, DataProviderDmsSslModeValue right) => !left.Equals(right);

        public static explicit operator string(DataProviderDmsSslModeValue value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataProviderDmsSslModeValue other && Equals(other);
        public bool Equals(DataProviderDmsSslModeValue other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The property describes a data engine for the data provider.
    /// </summary>
    [EnumType]
    public readonly struct DataProviderEngine : IEquatable<DataProviderEngine>
    {
        private readonly string _value;

        private DataProviderEngine(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataProviderEngine Aurora { get; } = new DataProviderEngine("aurora");
        public static DataProviderEngine AuroraPostgresql { get; } = new DataProviderEngine("aurora_postgresql");
        public static DataProviderEngine Mysql { get; } = new DataProviderEngine("mysql");
        public static DataProviderEngine Oracle { get; } = new DataProviderEngine("oracle");
        public static DataProviderEngine Postgres { get; } = new DataProviderEngine("postgres");
        public static DataProviderEngine Sqlserver { get; } = new DataProviderEngine("sqlserver");
        public static DataProviderEngine Redshift { get; } = new DataProviderEngine("redshift");
        public static DataProviderEngine Mariadb { get; } = new DataProviderEngine("mariadb");
        public static DataProviderEngine Mongodb { get; } = new DataProviderEngine("mongodb");
        public static DataProviderEngine Docdb { get; } = new DataProviderEngine("docdb");
        public static DataProviderEngine Db2 { get; } = new DataProviderEngine("db2");
        public static DataProviderEngine Db2Zos { get; } = new DataProviderEngine("db2_zos");

        public static bool operator ==(DataProviderEngine left, DataProviderEngine right) => left.Equals(right);
        public static bool operator !=(DataProviderEngine left, DataProviderEngine right) => !left.Equals(right);

        public static explicit operator string(DataProviderEngine value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataProviderEngine other && Equals(other);
        public bool Equals(DataProviderEngine other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataProviderMongoDbAuthMechanism : IEquatable<DataProviderMongoDbAuthMechanism>
    {
        private readonly string _value;

        private DataProviderMongoDbAuthMechanism(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataProviderMongoDbAuthMechanism Default { get; } = new DataProviderMongoDbAuthMechanism("default");
        public static DataProviderMongoDbAuthMechanism MongodbCr { get; } = new DataProviderMongoDbAuthMechanism("mongodb_cr");
        public static DataProviderMongoDbAuthMechanism ScramSha1 { get; } = new DataProviderMongoDbAuthMechanism("scram_sha_1");

        public static bool operator ==(DataProviderMongoDbAuthMechanism left, DataProviderMongoDbAuthMechanism right) => left.Equals(right);
        public static bool operator !=(DataProviderMongoDbAuthMechanism left, DataProviderMongoDbAuthMechanism right) => !left.Equals(right);

        public static explicit operator string(DataProviderMongoDbAuthMechanism value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataProviderMongoDbAuthMechanism other && Equals(other);
        public bool Equals(DataProviderMongoDbAuthMechanism other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataProviderMongoDbAuthType : IEquatable<DataProviderMongoDbAuthType>
    {
        private readonly string _value;

        private DataProviderMongoDbAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataProviderMongoDbAuthType No { get; } = new DataProviderMongoDbAuthType("no");
        public static DataProviderMongoDbAuthType Password { get; } = new DataProviderMongoDbAuthType("password");

        public static bool operator ==(DataProviderMongoDbAuthType left, DataProviderMongoDbAuthType right) => left.Equals(right);
        public static bool operator !=(DataProviderMongoDbAuthType left, DataProviderMongoDbAuthType right) => !left.Equals(right);

        public static explicit operator string(DataProviderMongoDbAuthType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataProviderMongoDbAuthType other && Equals(other);
        public bool Equals(DataProviderMongoDbAuthType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DataProviderMongoDbSslModeValue : IEquatable<DataProviderMongoDbSslModeValue>
    {
        private readonly string _value;

        private DataProviderMongoDbSslModeValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataProviderMongoDbSslModeValue None { get; } = new DataProviderMongoDbSslModeValue("none");
        public static DataProviderMongoDbSslModeValue Require { get; } = new DataProviderMongoDbSslModeValue("require");
        public static DataProviderMongoDbSslModeValue VerifyFull { get; } = new DataProviderMongoDbSslModeValue("verify-full");

        public static bool operator ==(DataProviderMongoDbSslModeValue left, DataProviderMongoDbSslModeValue right) => left.Equals(right);
        public static bool operator !=(DataProviderMongoDbSslModeValue left, DataProviderMongoDbSslModeValue right) => !left.Equals(right);

        public static explicit operator string(DataProviderMongoDbSslModeValue value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataProviderMongoDbSslModeValue other && Equals(other);
        public bool Equals(DataProviderMongoDbSslModeValue other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The property describes a network type for the instance profile.
    /// </summary>
    [EnumType]
    public readonly struct InstanceProfileNetworkType : IEquatable<InstanceProfileNetworkType>
    {
        private readonly string _value;

        private InstanceProfileNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstanceProfileNetworkType Ipv4 { get; } = new InstanceProfileNetworkType("IPV4");
        public static InstanceProfileNetworkType Dual { get; } = new InstanceProfileNetworkType("DUAL");

        public static bool operator ==(InstanceProfileNetworkType left, InstanceProfileNetworkType right) => left.Equals(right);
        public static bool operator !=(InstanceProfileNetworkType left, InstanceProfileNetworkType right) => !left.Equals(right);

        public static explicit operator string(InstanceProfileNetworkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceProfileNetworkType other && Equals(other);
        public bool Equals(InstanceProfileNetworkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of AWS DMS Serverless replication to provision using this replication configuration
    /// </summary>
    [EnumType]
    public readonly struct ReplicationConfigReplicationType : IEquatable<ReplicationConfigReplicationType>
    {
        private readonly string _value;

        private ReplicationConfigReplicationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationConfigReplicationType FullLoad { get; } = new ReplicationConfigReplicationType("full-load");
        public static ReplicationConfigReplicationType FullLoadAndCdc { get; } = new ReplicationConfigReplicationType("full-load-and-cdc");
        public static ReplicationConfigReplicationType Cdc { get; } = new ReplicationConfigReplicationType("cdc");

        public static bool operator ==(ReplicationConfigReplicationType left, ReplicationConfigReplicationType right) => left.Equals(right);
        public static bool operator !=(ReplicationConfigReplicationType left, ReplicationConfigReplicationType right) => !left.Equals(right);

        public static explicit operator string(ReplicationConfigReplicationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationConfigReplicationType other && Equals(other);
        public bool Equals(ReplicationConfigReplicationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
