// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Acmpca
{
    /// <summary>
    /// Private certificate authority.
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var rootCA = new AwsNative.Acmpca.CertificateAuthority("rootCA", new()
    ///     {
    ///         Type = "ROOT",
    ///         KeyAlgorithm = "RSA_2048",
    ///         SigningAlgorithm = "SHA256WITHRSA",
    ///         Subject = new AwsNative.Acmpca.Inputs.CertificateAuthoritySubjectArgs
    ///         {
    ///             Country = "US",
    ///             Organization = "string",
    ///             OrganizationalUnit = "string",
    ///             DistinguishedNameQualifier = "string",
    ///             State = "string",
    ///             CommonName = "123",
    ///             SerialNumber = "string",
    ///             Locality = "string",
    ///             Title = "string",
    ///             Surname = "string",
    ///             GivenName = "string",
    ///             Initials = "DG",
    ///             Pseudonym = "string",
    ///             GenerationQualifier = "DBG",
    ///         },
    ///         RevocationConfiguration = new AwsNative.Acmpca.Inputs.CertificateAuthorityRevocationConfigurationArgs
    ///         {
    ///             CrlConfiguration = new AwsNative.Acmpca.Inputs.CertificateAuthorityCrlConfigurationArgs
    ///             {
    ///                 Enabled = false,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var rootCACertificate = new AwsNative.Acmpca.Certificate("rootCACertificate", new()
    ///     {
    ///         CertificateAuthorityArn = rootCA.Id,
    ///         CertificateSigningRequest = rootCA.CertificateSigningRequest,
    ///         SigningAlgorithm = "SHA256WITHRSA",
    ///         TemplateArn = "arn:aws:acm-pca:::template/RootCACertificate/V1",
    ///         Validity = new AwsNative.Acmpca.Inputs.CertificateValidityArgs
    ///         {
    ///             Type = "DAYS",
    ///             Value = 100,
    ///         },
    ///     });
    /// 
    ///     var rootCAActivation = new AwsNative.Acmpca.CertificateAuthorityActivation("rootCAActivation", new()
    ///     {
    ///         CertificateAuthorityArn = rootCA.Id,
    ///         Certificate = rootCACertificate.Certificate,
    ///         Status = "ACTIVE",
    ///     });
    /// 
    ///     var rootCAPermission = new AwsNative.Acmpca.Permission("rootCAPermission", new()
    ///     {
    ///         Actions = new[]
    ///         {
    ///             "IssueCertificate",
    ///             "GetCertificate",
    ///             "ListPermissions",
    ///         },
    ///         CertificateAuthorityArn = rootCA.Id,
    ///         Principal = "acm.amazonaws.com",
    ///     });
    /// 
    ///     var subordinateCAOne = new AwsNative.Acmpca.CertificateAuthority("subordinateCAOne", new()
    ///     {
    ///         Type = "SUBORDINATE",
    ///         KeyAlgorithm = "RSA_2048",
    ///         SigningAlgorithm = "SHA256WITHRSA",
    ///         Subject = new AwsNative.Acmpca.Inputs.CertificateAuthoritySubjectArgs
    ///         {
    ///             Country = "US",
    ///             Organization = "string",
    ///             OrganizationalUnit = "string",
    ///             DistinguishedNameQualifier = "string",
    ///             State = "string",
    ///             CommonName = "Sub1",
    ///             SerialNumber = "string",
    ///             Locality = "string",
    ///             Title = "string",
    ///             Surname = "string",
    ///             GivenName = "string",
    ///             Initials = "DG",
    ///             Pseudonym = "string",
    ///             GenerationQualifier = "DBG",
    ///         },
    ///         RevocationConfiguration = null,
    ///         Tags = new[] {},
    ///     });
    /// 
    ///     var subordinateCAOneCACertificate = new AwsNative.Acmpca.Certificate("subordinateCAOneCACertificate", new()
    ///     {
    ///         CertificateAuthorityArn = rootCA.Id,
    ///         CertificateSigningRequest = subordinateCAOne.CertificateSigningRequest,
    ///         SigningAlgorithm = "SHA256WITHRSA",
    ///         TemplateArn = "arn:aws:acm-pca:::template/SubordinateCACertificate_PathLen3/V1",
    ///         Validity = new AwsNative.Acmpca.Inputs.CertificateValidityArgs
    ///         {
    ///             Type = "DAYS",
    ///             Value = 90,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             rootCAActivation, 
    ///         },
    ///     });
    /// 
    ///     var subordinateCAOneActivation = new AwsNative.Acmpca.CertificateAuthorityActivation("subordinateCAOneActivation", new()
    ///     {
    ///         CertificateAuthorityArn = subordinateCAOne.Id,
    ///         Certificate = subordinateCAOneCACertificate.Certificate,
    ///         CertificateChain = rootCAActivation.CompleteCertificateChain,
    ///         Status = "ACTIVE",
    ///     });
    /// 
    ///     var subordinateCAOnePermission = new AwsNative.Acmpca.Permission("subordinateCAOnePermission", new()
    ///     {
    ///         Actions = new[]
    ///         {
    ///             "IssueCertificate",
    ///             "GetCertificate",
    ///             "ListPermissions",
    ///         },
    ///         CertificateAuthorityArn = subordinateCAOne.Id,
    ///         Principal = "acm.amazonaws.com",
    ///     });
    /// 
    ///     var subordinateCATwo = new AwsNative.Acmpca.CertificateAuthority("subordinateCATwo", new()
    ///     {
    ///         Type = "SUBORDINATE",
    ///         KeyAlgorithm = "RSA_2048",
    ///         SigningAlgorithm = "SHA256WITHRSA",
    ///         Subject = new AwsNative.Acmpca.Inputs.CertificateAuthoritySubjectArgs
    ///         {
    ///             Country = "US",
    ///             Organization = "string",
    ///             OrganizationalUnit = "string",
    ///             DistinguishedNameQualifier = "string",
    ///             State = "string",
    ///             SerialNumber = "string",
    ///             Locality = "string",
    ///             Title = "string",
    ///             Surname = "string",
    ///             GivenName = "string",
    ///             Initials = "DG",
    ///             Pseudonym = "string",
    ///             GenerationQualifier = "DBG",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new AwsNative.Inputs.TagArgs
    ///             {
    ///                 Key = "Key1",
    ///                 Value = "Value1",
    ///             },
    ///             new AwsNative.Inputs.TagArgs
    ///             {
    ///                 Key = "Key2",
    ///                 Value = "Value2",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var subordinateCATwoCACertificate = new AwsNative.Acmpca.Certificate("subordinateCATwoCACertificate", new()
    ///     {
    ///         CertificateAuthorityArn = subordinateCAOne.Id,
    ///         CertificateSigningRequest = subordinateCATwo.CertificateSigningRequest,
    ///         SigningAlgorithm = "SHA256WITHRSA",
    ///         TemplateArn = "arn:aws:acm-pca:::template/SubordinateCACertificate_PathLen2/V1",
    ///         Validity = new AwsNative.Acmpca.Inputs.CertificateValidityArgs
    ///         {
    ///             Type = "DAYS",
    ///             Value = 80,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             subordinateCAOneActivation, 
    ///         },
    ///     });
    /// 
    ///     var subordinateCATwoActivation = new AwsNative.Acmpca.CertificateAuthorityActivation("subordinateCATwoActivation", new()
    ///     {
    ///         CertificateAuthorityArn = subordinateCATwo.Id,
    ///         Certificate = subordinateCATwoCACertificate.Certificate,
    ///         CertificateChain = subordinateCAOneActivation.CompleteCertificateChain,
    ///     });
    /// 
    ///     var subordinateCATwoPermission = new AwsNative.Acmpca.Permission("subordinateCATwoPermission", new()
    ///     {
    ///         Actions = new[]
    ///         {
    ///             "IssueCertificate",
    ///             "GetCertificate",
    ///             "ListPermissions",
    ///         },
    ///         CertificateAuthorityArn = subordinateCATwo.Id,
    ///         Principal = "acm.amazonaws.com",
    ///     });
    /// 
    ///     var endEntityCertificate = new AwsNative.Acmpca.Certificate("endEntityCertificate", new()
    ///     {
    ///         CertificateAuthorityArn = subordinateCATwo.Id,
    ///         CertificateSigningRequest = @"-----BEGIN CERTIFICATE REQUEST-----
    /// MIICvDCCAaQCAQAwdzELMAkGA1UEBhMCVVMxDTALBgNVBAgMBFV0YWgxDzANBgNV
    /// BAcMBkxpbmRvbjEWMBQGA1UECgwNRGlnaUNlcnQgSW5jLjERMA8GA1UECwwIRGln
    /// aUNlcnQxHTAbBgNVBAMMFGV4YW1wbGUuZGlnaWNlcnQuY29tMIIBIjANBgkqhkiG
    /// 9w0BAQEFAAOCAQ8AMIIBCgKCAQEA8+To7d+2kPWeBv/orU3LVbJwDrSQbeKamCmo
    /// wp5bqDxIwV20zqRb7APUOKYoVEFFOEQs6T6gImnIolhbiH6m4zgZ/CPvWBOkZc+c
    /// 1Po2EmvBz+AD5sBdT5kzGQA6NbWyZGldxRthNLOs1efOhdnWFuhI162qmcflgpiI
    /// WDuwq4C9f+YkeJhNn9dF5+owm8cOQmDrV8NNdiTqin8q3qYAHHJRW28glJUCZkTZ
    /// wIaSR6crBQ8TbYNE0dc+Caa3DOIkz1EOsHWzTx+n0zKfqcbgXi4DJx+C1bjptYPR
    /// BPZL8DAeWuA8ebudVT44yEp82G96/Ggcf7F33xMxe0yc+Xa6owIDAQABoAAwDQYJ
    /// KoZIhvcNAQEFBQADggEBAB0kcrFccSmFDmxox0Ne01UIqSsDqHgL+XmHTXJwre6D
    /// hJSZwbvEtOK0G3+dr4Fs11WuUNt5qcLsx5a8uk4G6AKHMzuhLsJ7XZjgmQXGECpY
    /// Q4mC3yT3ZoCGpIXbw+iP3lmEEXgaQL0Tx5LFl/okKbKYwIqNiyKWOMj7ZR/wxWg/
    /// ZDGRs55xuoeLDJ/ZRFf9bI+IaCUd1YrfYcHIl3G87Av+r49YVwqRDT0VDV7uLgqn
    /// 29XI1PpVUNCPQGn9p/eX6Qo7vpDaPybRtA2R7XLKjQaF9oXWeCUqy1hvJac9QFO2
    /// 97Ob1alpHPoZ7mWiEuJwjBPii6a9M9G30nUo39lBi1w=
    /// -----END CERTIFICATE REQUEST-----",
    ///         SigningAlgorithm = "SHA256WITHRSA",
    ///         Validity = new AwsNative.Acmpca.Inputs.CertificateValidityArgs
    ///         {
    ///             Type = "DAYS",
    ///             Value = 70,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             subordinateCATwoActivation, 
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["completeCertificateChain"] = subordinateCATwoActivation.CompleteCertificateChain,
    ///         ["certificateArn"] = endEntityCertificate.Arn,
    ///     };
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:acmpca:CertificateAuthority")]
    public partial class CertificateAuthority : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the certificate authority.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The base64 PEM-encoded certificate signing request (CSR) for your certificate authority certificate.
        /// </summary>
        [Output("certificateSigningRequest")]
        public Output<string> CertificateSigningRequest { get; private set; } = null!;

        /// <summary>
        /// Structure that contains CSR pass through extension information used by the CreateCertificateAuthority action.
        /// </summary>
        [Output("csrExtensions")]
        public Output<Outputs.CertificateAuthorityCsrExtensions?> CsrExtensions { get; private set; } = null!;

        /// <summary>
        /// Public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate.
        /// </summary>
        [Output("keyAlgorithm")]
        public Output<string> KeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// KeyStorageSecurityStadard defines a cryptographic key management compliance standard used for handling CA keys.
        /// </summary>
        [Output("keyStorageSecurityStandard")]
        public Output<string?> KeyStorageSecurityStandard { get; private set; } = null!;

        /// <summary>
        /// Certificate revocation information used by the CreateCertificateAuthority and UpdateCertificateAuthority actions.
        /// </summary>
        [Output("revocationConfiguration")]
        public Output<Outputs.CertificateAuthorityRevocationConfiguration?> RevocationConfiguration { get; private set; } = null!;

        /// <summary>
        /// Algorithm your CA uses to sign certificate requests.
        /// </summary>
        [Output("signingAlgorithm")]
        public Output<string> SigningAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Structure that contains X.500 distinguished name information for your CA.
        /// </summary>
        [Output("subject")]
        public Output<Outputs.CertificateAuthoritySubject> Subject { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the certificate authority.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Usage mode of the ceritificate authority.
        /// </summary>
        [Output("usageMode")]
        public Output<string?> UsageMode { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateAuthority resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateAuthority(string name, CertificateAuthorityArgs args, CustomResourceOptions? options = null)
            : base("aws-native:acmpca:CertificateAuthority", name, args ?? new CertificateAuthorityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateAuthority(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:acmpca:CertificateAuthority", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "csrExtensions",
                    "keyAlgorithm",
                    "keyStorageSecurityStandard",
                    "signingAlgorithm",
                    "subject",
                    "type",
                    "usageMode",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateAuthority Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CertificateAuthority(name, id, options);
        }
    }

    public sealed class CertificateAuthorityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Structure that contains CSR pass through extension information used by the CreateCertificateAuthority action.
        /// </summary>
        [Input("csrExtensions")]
        public Input<Inputs.CertificateAuthorityCsrExtensionsArgs>? CsrExtensions { get; set; }

        /// <summary>
        /// Public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate.
        /// </summary>
        [Input("keyAlgorithm", required: true)]
        public Input<string> KeyAlgorithm { get; set; } = null!;

        /// <summary>
        /// KeyStorageSecurityStadard defines a cryptographic key management compliance standard used for handling CA keys.
        /// </summary>
        [Input("keyStorageSecurityStandard")]
        public Input<string>? KeyStorageSecurityStandard { get; set; }

        /// <summary>
        /// Certificate revocation information used by the CreateCertificateAuthority and UpdateCertificateAuthority actions.
        /// </summary>
        [Input("revocationConfiguration")]
        public Input<Inputs.CertificateAuthorityRevocationConfigurationArgs>? RevocationConfiguration { get; set; }

        /// <summary>
        /// Algorithm your CA uses to sign certificate requests.
        /// </summary>
        [Input("signingAlgorithm", required: true)]
        public Input<string> SigningAlgorithm { get; set; } = null!;

        /// <summary>
        /// Structure that contains X.500 distinguished name information for your CA.
        /// </summary>
        [Input("subject", required: true)]
        public Input<Inputs.CertificateAuthoritySubjectArgs> Subject { get; set; } = null!;

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the certificate authority.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Usage mode of the ceritificate authority.
        /// </summary>
        [Input("usageMode")]
        public Input<string>? UsageMode { get; set; }

        public CertificateAuthorityArgs()
        {
        }
        public static new CertificateAuthorityArgs Empty => new CertificateAuthorityArgs();
    }
}
