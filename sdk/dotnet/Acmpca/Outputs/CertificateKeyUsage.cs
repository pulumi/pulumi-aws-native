// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Acmpca.Outputs
{

    /// <summary>
    /// Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
    /// </summary>
    [OutputType]
    public sealed class CertificateKeyUsage
    {
        /// <summary>
        /// Key can be used to sign CRLs.
        /// </summary>
        public readonly bool? CrlSign;
        /// <summary>
        /// Key can be used to decipher data.
        /// </summary>
        public readonly bool? DataEncipherment;
        /// <summary>
        /// Key can be used only to decipher data.
        /// </summary>
        public readonly bool? DecipherOnly;
        /// <summary>
        /// Key can be used for digital signing.
        /// </summary>
        public readonly bool? DigitalSignature;
        /// <summary>
        /// Key can be used only to encipher data.
        /// </summary>
        public readonly bool? EncipherOnly;
        /// <summary>
        /// Key can be used in a key-agreement protocol.
        /// </summary>
        public readonly bool? KeyAgreement;
        /// <summary>
        /// Key can be used to sign certificates.
        /// </summary>
        public readonly bool? KeyCertSign;
        /// <summary>
        /// Key can be used to encipher data.
        /// </summary>
        public readonly bool? KeyEncipherment;
        /// <summary>
        /// Key can be used for non-repudiation.
        /// </summary>
        public readonly bool? NonRepudiation;

        [OutputConstructor]
        private CertificateKeyUsage(
            bool? crlSign,

            bool? dataEncipherment,

            bool? decipherOnly,

            bool? digitalSignature,

            bool? encipherOnly,

            bool? keyAgreement,

            bool? keyCertSign,

            bool? keyEncipherment,

            bool? nonRepudiation)
        {
            CrlSign = crlSign;
            DataEncipherment = dataEncipherment;
            DecipherOnly = decipherOnly;
            DigitalSignature = digitalSignature;
            EncipherOnly = encipherOnly;
            KeyAgreement = keyAgreement;
            KeyCertSign = keyCertSign;
            KeyEncipherment = keyEncipherment;
            NonRepudiation = nonRepudiation;
        }
    }
}
