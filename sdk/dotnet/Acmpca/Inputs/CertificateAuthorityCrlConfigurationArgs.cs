// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Acmpca.Inputs
{

    /// <summary>
    /// Your certificate authority can create and maintain a certificate revocation list (CRL). A CRL contains information about certificates that have been revoked.
    /// </summary>
    public sealed class CertificateAuthorityCrlConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures the default behavior of the CRL Distribution Point extension for certificates issued by your CA. If this field is not provided, then the CRL Distribution Point extension will be present and contain the default CRL URL.
        /// </summary>
        [Input("crlDistributionPointExtensionConfiguration")]
        public Input<Inputs.CertificateAuthorityCrlDistributionPointExtensionConfigurationArgs>? CrlDistributionPointExtensionConfiguration { get; set; }

        /// <summary>
        /// Specifies the type of CRL. This setting determines the maximum number of certificates that the certificate authority can issue and revoke. For more information, see [AWS Private CA quotas](https://docs.aws.amazon.com/general/latest/gr/pca.html#limits_pca) .
        /// 
        /// - `COMPLETE` - The default setting. AWS Private CA maintains a single CRL file for all unexpired certificates issued by a CA that have been revoked for any reason. Each certificate that AWS Private CA issues is bound to a specific CRL through the CRL distribution point (CDP) defined in [RFC 5280](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc5280) .
        /// - `PARTITIONED` - Compared to complete CRLs, partitioned CRLs dramatically increase the number of certificates your private CA can issue.
        /// 
        /// &gt; When using partitioned CRLs, you must validate that the CRL's associated issuing distribution point (IDP) URI matches the certiÔ¨Åcate's CDP URI to ensure the right CRL has been fetched. AWS Private CA marks the IDP extension as critical, which your client must be able to process.
        /// </summary>
        [Input("crlType")]
        public Input<string>? CrlType { get; set; }

        /// <summary>
        /// Name inserted into the certificate *CRL Distribution Points* extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public.
        /// 
        /// &gt; The content of a Canonical Name (CNAME) record must conform to [RFC2396](https://docs.aws.amazon.com/https://www.ietf.org/rfc/rfc2396.txt) restrictions on the use of special characters in URIs. Additionally, the value of the CNAME must not include a protocol prefix such as "http://" or "https://".
        /// </summary>
        [Input("customCname")]
        public Input<string>? CustomCname { get; set; }

        /// <summary>
        /// Designates a custom file path in S3 for CRL(s). For example, `http://&lt;CustomName&gt;/&lt;CustomPath&gt;/&lt;CrlPartition_GUID&gt;.crl` .
        /// </summary>
        [Input("customPath")]
        public Input<string>? CustomPath { get; set; }

        /// <summary>
        /// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. You can use this value to enable certificate revocation for a new CA when you call the `CreateCertificateAuthority` operation or for an existing CA when you call the `UpdateCertificateAuthority` operation.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Validity period of the CRL in days.
        /// </summary>
        [Input("expirationInDays")]
        public Input<int>? ExpirationInDays { get; set; }

        /// <summary>
        /// Name of the S3 bucket that contains the CRL. If you do not provide a value for the *CustomCname* argument, the name of your S3 bucket is placed into the *CRL Distribution Points* extension of the issued certificate. You can change the name of your bucket by calling the [UpdateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html) operation. You must specify a [bucket policy](https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#s3-policies) that allows AWS Private CA to write the CRL to your bucket.
        /// 
        /// &gt; The `S3BucketName` parameter must conform to the [S3 bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html) .
        /// </summary>
        [Input("s3BucketName")]
        public Input<string>? S3BucketName { get; set; }

        /// <summary>
        /// Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. If you choose PUBLIC_READ, the CRL will be accessible over the public internet. If you choose BUCKET_OWNER_FULL_CONTROL, only the owner of the CRL S3 bucket can access the CRL, and your PKI clients may need an alternative method of access.
        /// 
        /// If no value is specified, the default is PUBLIC_READ.
        /// 
        /// *Note:* This default can cause CA creation to fail in some circumstances. If you have have enabled the Block Public Access (BPA) feature in your S3 account, then you must specify the value of this parameter as `BUCKET_OWNER_FULL_CONTROL` , and not doing so results in an error. If you have disabled BPA in S3, then you can specify either `BUCKET_OWNER_FULL_CONTROL` or `PUBLIC_READ` as the value.
        /// 
        /// For more information, see [Blocking public access to the S3 bucket](https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#s3-bpa) .
        /// </summary>
        [Input("s3ObjectAcl")]
        public Input<string>? S3ObjectAcl { get; set; }

        public CertificateAuthorityCrlConfigurationArgs()
        {
        }
        public static new CertificateAuthorityCrlConfigurationArgs Empty => new CertificateAuthorityCrlConfigurationArgs();
    }
}
