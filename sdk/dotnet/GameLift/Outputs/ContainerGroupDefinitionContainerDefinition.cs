// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift.Outputs
{

    /// <summary>
    /// Details about a container that is used in a container fleet
    /// </summary>
    [OutputType]
    public sealed class ContainerGroupDefinitionContainerDefinition
    {
        /// <summary>
        /// The command that's passed to the container.
        /// </summary>
        public readonly ImmutableArray<string> Command;
        /// <summary>
        /// A descriptive label for the container definition. Container definition names must be unique with a container group definition.
        /// </summary>
        public readonly string ContainerName;
        /// <summary>
        /// The maximum number of CPU units reserved for this container. The value is expressed as an integer amount of CPU units. 1 vCPU is equal to 1024 CPU units
        /// </summary>
        public readonly int? Cpu;
        /// <summary>
        /// A list of container dependencies that determines when this container starts up and shuts down. For container groups with multiple containers, dependencies let you define a startup/shutdown sequence across the containers.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerGroupDefinitionContainerDependency> DependsOn;
        /// <summary>
        /// The entry point that's passed to the container so that it will run as an executable. If there are multiple arguments, each argument is a string in the array.
        /// </summary>
        public readonly ImmutableArray<string> EntryPoint;
        /// <summary>
        /// The environment variables to pass to a container.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerGroupDefinitionContainerEnvironment> Environment;
        /// <summary>
        /// Specifies if the container is essential. If an essential container fails a health check, then all containers in the container group will be restarted. You must specify exactly 1 essential container in a container group.
        /// </summary>
        public readonly bool? Essential;
        /// <summary>
        /// Specifies how the health of the containers will be checked.
        /// </summary>
        public readonly Outputs.ContainerGroupDefinitionContainerHealthCheck? HealthCheck;
        /// <summary>
        /// Specifies the image URI of this container.
        /// </summary>
        public readonly string ImageUri;
        /// <summary>
        /// Specifies how much memory is available to the container. You must specify at least this parameter or the TotalMemoryLimit parameter of the ContainerGroupDefinition.
        /// </summary>
        public readonly Outputs.ContainerGroupDefinitionMemoryLimits? MemoryLimits;
        /// <summary>
        /// Defines the ports on the container.
        /// </summary>
        public readonly Outputs.ContainerGroupDefinitionPortConfiguration? PortConfiguration;
        /// <summary>
        /// The digest of the container image.
        /// </summary>
        public readonly string? ResolvedImageDigest;
        /// <summary>
        /// The working directory to run commands inside the container in.
        /// </summary>
        public readonly string? WorkingDirectory;

        [OutputConstructor]
        private ContainerGroupDefinitionContainerDefinition(
            ImmutableArray<string> command,

            string containerName,

            int? cpu,

            ImmutableArray<Outputs.ContainerGroupDefinitionContainerDependency> dependsOn,

            ImmutableArray<string> entryPoint,

            ImmutableArray<Outputs.ContainerGroupDefinitionContainerEnvironment> environment,

            bool? essential,

            Outputs.ContainerGroupDefinitionContainerHealthCheck? healthCheck,

            string imageUri,

            Outputs.ContainerGroupDefinitionMemoryLimits? memoryLimits,

            Outputs.ContainerGroupDefinitionPortConfiguration? portConfiguration,

            string? resolvedImageDigest,

            string? workingDirectory)
        {
            Command = command;
            ContainerName = containerName;
            Cpu = cpu;
            DependsOn = dependsOn;
            EntryPoint = entryPoint;
            Environment = environment;
            Essential = essential;
            HealthCheck = healthCheck;
            ImageUri = imageUri;
            MemoryLimits = memoryLimits;
            PortConfiguration = portConfiguration;
            ResolvedImageDigest = resolvedImageDigest;
            WorkingDirectory = workingDirectory;
        }
    }
}
