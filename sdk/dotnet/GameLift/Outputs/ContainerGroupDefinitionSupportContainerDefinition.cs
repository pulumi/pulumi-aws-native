// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift.Outputs
{

    /// <summary>
    /// Supports the function of the main container group
    /// </summary>
    [OutputType]
    public sealed class ContainerGroupDefinitionSupportContainerDefinition
    {
        /// <summary>
        /// A descriptive label for the container definition.
        /// </summary>
        public readonly string ContainerName;
        /// <summary>
        /// A list of container dependencies that determines when this container starts up and shuts down. For container groups with multiple containers, dependencies let you define a startup/shutdown sequence across the containers.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerGroupDefinitionContainerDependency> DependsOn;
        /// <summary>
        /// The environment variables to pass to a container.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerGroupDefinitionContainerEnvironment> EnvironmentOverride;
        /// <summary>
        /// Specifies if the container is essential. If an essential container fails a health check, then all containers in the container group will be restarted. You must specify exactly 1 essential container in a container group.
        /// </summary>
        public readonly bool? Essential;
        /// <summary>
        /// Specifies how the health of the containers will be checked.
        /// </summary>
        public readonly Outputs.ContainerGroupDefinitionContainerHealthCheck? HealthCheck;
        /// <summary>
        /// Specifies the image URI of this container.
        /// </summary>
        public readonly string ImageUri;
        /// <summary>
        /// The total memory limit of container groups following this definition in MiB
        /// </summary>
        public readonly int? MemoryHardLimitMebibytes;
        /// <summary>
        /// A list of mount point configurations to be used in a container.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContainerGroupDefinitionContainerMountPoint> MountPoints;
        /// <summary>
        /// Defines the ports on the container.
        /// </summary>
        public readonly Outputs.ContainerGroupDefinitionPortConfiguration? PortConfiguration;
        /// <summary>
        /// The digest of the container image.
        /// </summary>
        public readonly string? ResolvedImageDigest;
        /// <summary>
        /// The number of virtual CPUs to give to the support group
        /// </summary>
        public readonly double? Vcpu;

        [OutputConstructor]
        private ContainerGroupDefinitionSupportContainerDefinition(
            string containerName,

            ImmutableArray<Outputs.ContainerGroupDefinitionContainerDependency> dependsOn,

            ImmutableArray<Outputs.ContainerGroupDefinitionContainerEnvironment> environmentOverride,

            bool? essential,

            Outputs.ContainerGroupDefinitionContainerHealthCheck? healthCheck,

            string imageUri,

            int? memoryHardLimitMebibytes,

            ImmutableArray<Outputs.ContainerGroupDefinitionContainerMountPoint> mountPoints,

            Outputs.ContainerGroupDefinitionPortConfiguration? portConfiguration,

            string? resolvedImageDigest,

            double? vcpu)
        {
            ContainerName = containerName;
            DependsOn = dependsOn;
            EnvironmentOverride = environmentOverride;
            Essential = essential;
            HealthCheck = healthCheck;
            ImageUri = imageUri;
            MemoryHardLimitMebibytes = memoryHardLimitMebibytes;
            MountPoints = mountPoints;
            PortConfiguration = portConfiguration;
            ResolvedImageDigest = resolvedImageDigest;
            Vcpu = vcpu;
        }
    }
}
