// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift.Outputs
{

    /// <summary>
    /// Specifies container groups that this instance will hold. You must specify exactly one replica group. Optionally, you may specify exactly one daemon group. You can't change this property after you create the fleet.
    /// </summary>
    [OutputType]
    public sealed class FleetContainerGroupsConfiguration
    {
        /// <summary>
        /// A set of ports to allow inbound traffic, including game clients, to connect to processes running in the container fleet.
        /// 
        /// Connection ports are dynamically mapped to container ports, which are assigned to individual processes running in a container. The connection port range must have enough ports to map to all container ports across a fleet instance. To calculate the minimum connection ports needed, use the following formula:
        /// 
        /// *[Total number of container ports as defined for containers in the replica container group] * [Desired or calculated number of replica container groups per instance] + [Total number of container ports as defined for containers in the daemon container group]*
        /// 
        /// As a best practice, double the minimum number of connection ports.
        /// 
        /// &gt; Use the fleet's `EC2InboundPermissions` property to control external access to connection ports. Set this property to the connection port numbers that you want to open access to. See `IpPermission` for more details.
        /// </summary>
        public readonly Outputs.FleetConnectionPortRange ConnectionPortRange;
        /// <summary>
        /// The names of the container group definitions that will be created in an instance. You must specify exactly one REPLICA container group. You have the option to also specify one DAEMON container group.
        /// </summary>
        public readonly ImmutableArray<string> ContainerGroupDefinitionNames;
        public readonly Outputs.FleetContainerGroupsPerInstance? ContainerGroupsPerInstance;

        [OutputConstructor]
        private FleetContainerGroupsConfiguration(
            Outputs.FleetConnectionPortRange connectionPortRange,

            ImmutableArray<string> containerGroupDefinitionNames,

            Outputs.FleetContainerGroupsPerInstance? containerGroupsPerInstance)
        {
            ConnectionPortRange = connectionPortRange;
            ContainerGroupDefinitionNames = containerGroupDefinitionNames;
            ContainerGroupsPerInstance = containerGroupsPerInstance;
        }
    }
}
