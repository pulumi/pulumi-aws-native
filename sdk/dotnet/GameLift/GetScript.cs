// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift
{
    public static class GetScript
    {
        /// <summary>
        /// The AWS::GameLift::Script resource creates a new script record for your Realtime Servers script. Realtime scripts are JavaScript that provide configuration settings and optional custom game logic for your game. The script is deployed when you create a Realtime Servers fleet to host your game sessions. Script logic is executed during an active game session.
        /// </summary>
        public static Task<GetScriptResult> InvokeAsync(GetScriptArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScriptResult>("aws-native:gamelift:getScript", args ?? new GetScriptArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::GameLift::Script resource creates a new script record for your Realtime Servers script. Realtime scripts are JavaScript that provide configuration settings and optional custom game logic for your game. The script is deployed when you create a Realtime Servers fleet to host your game sessions. Script logic is executed during an active game session.
        /// </summary>
        public static Output<GetScriptResult> Invoke(GetScriptInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScriptResult>("aws-native:gamelift:getScript", args ?? new GetScriptInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScriptArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the Realtime script
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetScriptArgs()
        {
        }
        public static new GetScriptArgs Empty => new GetScriptArgs();
    }

    public sealed class GetScriptInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the Realtime script
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetScriptInvokeArgs()
        {
        }
        public static new GetScriptInvokeArgs Empty => new GetScriptInvokeArgs();
    }


    [OutputType]
    public sealed class GetScriptResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift script resource and uniquely identifies it. ARNs are unique across all Regions. In a GameLift script ARN, the resource ID matches the Id value.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        /// </summary>
        public readonly string? CreationTime;
        /// <summary>
        /// A unique identifier for the Realtime script
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// A descriptive label that is associated with a script. Script names do not need to be unique.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The file size of the uploaded Realtime script, expressed in bytes. When files are uploaded from an S3 location, this value remains at "0".
        /// </summary>
        public readonly int? SizeOnDisk;
        /// <summary>
        /// The location of the Amazon S3 bucket where a zipped file containing your Realtime scripts is stored. The storage location must specify the Amazon S3 bucket name, the zip file name (the "key"), and a role ARN that allows Amazon GameLift to access the Amazon S3 storage location. The S3 bucket must be in the same Region where you want to create a new script. By default, Amazon GameLift uploads the latest version of the zip file; if you have S3 object versioning turned on, you can use the ObjectVersion parameter to specify an earlier version.
        /// </summary>
        public readonly Outputs.ScriptS3Location? StorageLocation;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;
        /// <summary>
        /// The version that is associated with a script. Version strings do not need to be unique.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetScriptResult(
            string? arn,

            string? creationTime,

            string? id,

            string? name,

            int? sizeOnDisk,

            Outputs.ScriptS3Location? storageLocation,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags,

            string? version)
        {
            Arn = arn;
            CreationTime = creationTime;
            Id = id;
            Name = name;
            SizeOnDisk = sizeOnDisk;
            StorageLocation = storageLocation;
            Tags = tags;
            Version = version;
        }
    }
}
