// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift.Inputs
{

    /// <summary>
    /// Specifies the information required to run game servers with this container group
    /// </summary>
    public sealed class ContainerGroupDefinitionGameServerContainerDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A descriptive label for the container definition. Container definition names must be unique with a container group definition.
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        [Input("dependsOn")]
        private InputList<Inputs.ContainerGroupDefinitionContainerDependencyArgs>? _dependsOn;

        /// <summary>
        /// A list of container dependencies that determines when this container starts up and shuts down. For container groups with multiple containers, dependencies let you define a startup/shutdown sequence across the containers.
        /// </summary>
        public InputList<Inputs.ContainerGroupDefinitionContainerDependencyArgs> DependsOn
        {
            get => _dependsOn ?? (_dependsOn = new InputList<Inputs.ContainerGroupDefinitionContainerDependencyArgs>());
            set => _dependsOn = value;
        }

        [Input("environmentOverride")]
        private InputList<Inputs.ContainerGroupDefinitionContainerEnvironmentArgs>? _environmentOverride;

        /// <summary>
        /// The environment variables to pass to a container.
        /// </summary>
        public InputList<Inputs.ContainerGroupDefinitionContainerEnvironmentArgs> EnvironmentOverride
        {
            get => _environmentOverride ?? (_environmentOverride = new InputList<Inputs.ContainerGroupDefinitionContainerEnvironmentArgs>());
            set => _environmentOverride = value;
        }

        /// <summary>
        /// Specifies the image URI of this container.
        /// </summary>
        [Input("imageUri", required: true)]
        public Input<string> ImageUri { get; set; } = null!;

        [Input("mountPoints")]
        private InputList<Inputs.ContainerGroupDefinitionContainerMountPointArgs>? _mountPoints;

        /// <summary>
        /// A list of mount point configurations to be used in a container.
        /// </summary>
        public InputList<Inputs.ContainerGroupDefinitionContainerMountPointArgs> MountPoints
        {
            get => _mountPoints ?? (_mountPoints = new InputList<Inputs.ContainerGroupDefinitionContainerMountPointArgs>());
            set => _mountPoints = value;
        }

        /// <summary>
        /// Defines the ports on the container.
        /// </summary>
        [Input("portConfiguration")]
        public Input<Inputs.ContainerGroupDefinitionPortConfigurationArgs>? PortConfiguration { get; set; }

        /// <summary>
        /// The digest of the container image.
        /// </summary>
        [Input("resolvedImageDigest")]
        public Input<string>? ResolvedImageDigest { get; set; }

        /// <summary>
        /// The version of the server SDK used in this container group
        /// </summary>
        [Input("serverSdkVersion", required: true)]
        public Input<string> ServerSdkVersion { get; set; } = null!;

        public ContainerGroupDefinitionGameServerContainerDefinitionArgs()
        {
        }
        public static new ContainerGroupDefinitionGameServerContainerDefinitionArgs Empty => new ContainerGroupDefinitionGameServerContainerDefinitionArgs();
    }
}
