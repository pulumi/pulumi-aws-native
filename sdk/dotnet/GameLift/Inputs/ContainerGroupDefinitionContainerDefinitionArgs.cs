// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift.Inputs
{

    /// <summary>
    /// Details about a container that is used in a container fleet
    /// </summary>
    public sealed class ContainerGroupDefinitionContainerDefinitionArgs : global::Pulumi.ResourceArgs
    {
        [Input("command")]
        private InputList<string>? _command;

        /// <summary>
        /// The command that's passed to the container.
        /// </summary>
        public InputList<string> Command
        {
            get => _command ?? (_command = new InputList<string>());
            set => _command = value;
        }

        /// <summary>
        /// A descriptive label for the container definition. Container definition names must be unique with a container group definition.
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        /// <summary>
        /// The maximum number of CPU units reserved for this container. The value is expressed as an integer amount of CPU units. 1 vCPU is equal to 1024 CPU units
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        [Input("dependsOn")]
        private InputList<Inputs.ContainerGroupDefinitionContainerDependencyArgs>? _dependsOn;

        /// <summary>
        /// A list of container dependencies that determines when this container starts up and shuts down. For container groups with multiple containers, dependencies let you define a startup/shutdown sequence across the containers.
        /// </summary>
        public InputList<Inputs.ContainerGroupDefinitionContainerDependencyArgs> DependsOn
        {
            get => _dependsOn ?? (_dependsOn = new InputList<Inputs.ContainerGroupDefinitionContainerDependencyArgs>());
            set => _dependsOn = value;
        }

        [Input("entryPoint")]
        private InputList<string>? _entryPoint;

        /// <summary>
        /// The entry point that's passed to the container so that it will run as an executable. If there are multiple arguments, each argument is a string in the array.
        /// </summary>
        public InputList<string> EntryPoint
        {
            get => _entryPoint ?? (_entryPoint = new InputList<string>());
            set => _entryPoint = value;
        }

        [Input("environment")]
        private InputList<Inputs.ContainerGroupDefinitionContainerEnvironmentArgs>? _environment;

        /// <summary>
        /// The environment variables to pass to a container.
        /// </summary>
        public InputList<Inputs.ContainerGroupDefinitionContainerEnvironmentArgs> Environment
        {
            get => _environment ?? (_environment = new InputList<Inputs.ContainerGroupDefinitionContainerEnvironmentArgs>());
            set => _environment = value;
        }

        /// <summary>
        /// Specifies if the container is essential. If an essential container fails a health check, then all containers in the container group will be restarted. You must specify exactly 1 essential container in a container group.
        /// </summary>
        [Input("essential")]
        public Input<bool>? Essential { get; set; }

        /// <summary>
        /// Specifies how the health of the containers will be checked.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ContainerGroupDefinitionContainerHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// Specifies the image URI of this container.
        /// </summary>
        [Input("imageUri", required: true)]
        public Input<string> ImageUri { get; set; } = null!;

        /// <summary>
        /// Specifies how much memory is available to the container. You must specify at least this parameter or the TotalMemoryLimit parameter of the ContainerGroupDefinition.
        /// </summary>
        [Input("memoryLimits")]
        public Input<Inputs.ContainerGroupDefinitionMemoryLimitsArgs>? MemoryLimits { get; set; }

        /// <summary>
        /// Defines the ports on the container.
        /// </summary>
        [Input("portConfiguration")]
        public Input<Inputs.ContainerGroupDefinitionPortConfigurationArgs>? PortConfiguration { get; set; }

        /// <summary>
        /// The digest of the container image.
        /// </summary>
        [Input("resolvedImageDigest")]
        public Input<string>? ResolvedImageDigest { get; set; }

        /// <summary>
        /// The working directory to run commands inside the container in.
        /// </summary>
        [Input("workingDirectory")]
        public Input<string>? WorkingDirectory { get; set; }

        public ContainerGroupDefinitionContainerDefinitionArgs()
        {
        }
        public static new ContainerGroupDefinitionContainerDefinitionArgs Empty => new ContainerGroupDefinitionContainerDefinitionArgs();
    }
}
