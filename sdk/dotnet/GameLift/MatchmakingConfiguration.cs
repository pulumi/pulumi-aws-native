// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift
{
    /// <summary>
    /// The AWS::GameLift::MatchmakingConfiguration resource creates an Amazon GameLift (GameLift) matchmaking configuration.
    /// </summary>
    [AwsNativeResourceType("aws-native:gamelift:MatchmakingConfiguration")]
    public partial class MatchmakingConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players
        /// </summary>
        [Output("acceptanceRequired")]
        public Output<bool> AcceptanceRequired { get; private set; } = null!;

        /// <summary>
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
        /// </summary>
        [Output("acceptanceTimeoutSeconds")]
        public Output<int?> AcceptanceTimeoutSeconds { get; private set; } = null!;

        /// <summary>
        /// The number of player slots in a match to keep open for future players.
        /// </summary>
        [Output("additionalPlayerCount")]
        public Output<int?> AdditionalPlayerCount { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift matchmaking configuration resource and uniquely identifies it.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The method used to backfill game sessions created with this matchmaking configuration.
        /// </summary>
        [Output("backfillMode")]
        public Output<Pulumi.AwsNative.GameLift.MatchmakingConfigurationBackfillMode?> BackfillMode { get; private set; } = null!;

        /// <summary>
        /// A time stamp indicating when this data object was created.
        /// </summary>
        [Output("creationTime")]
        public Output<string?> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Information to attach to all events related to the matchmaking configuration.
        /// </summary>
        [Output("customEventData")]
        public Output<string?> CustomEventData { get; private set; } = null!;

        /// <summary>
        /// A descriptive label that is associated with matchmaking configuration.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
        /// </summary>
        [Output("flexMatchMode")]
        public Output<Pulumi.AwsNative.GameLift.MatchmakingConfigurationFlexMatchMode?> FlexMatchMode { get; private set; } = null!;

        /// <summary>
        /// A set of custom properties for a game session, formatted as key:value pairs.
        /// </summary>
        [Output("gameProperties")]
        public Output<ImmutableArray<Outputs.MatchmakingConfigurationGameProperty>> GameProperties { get; private set; } = null!;

        /// <summary>
        /// A set of custom game session properties, formatted as a single string value.
        /// </summary>
        [Output("gameSessionData")]
        public Output<string?> GameSessionData { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
        /// </summary>
        [Output("gameSessionQueueArns")]
        public Output<ImmutableArray<string>> GameSessionQueueArns { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for the matchmaking configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An SNS topic ARN that is set up to receive matchmaking notifications.
        /// </summary>
        [Output("notificationTarget")]
        public Output<string?> NotificationTarget { get; private set; } = null!;

        /// <summary>
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
        /// </summary>
        [Output("requestTimeoutSeconds")]
        public Output<int> RequestTimeoutSeconds { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
        /// </summary>
        [Output("ruleSetArn")]
        public Output<string?> RuleSetArn { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for the matchmaking rule set to use with this configuration.
        /// </summary>
        [Output("ruleSetName")]
        public Output<string> RuleSetName { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a MatchmakingConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MatchmakingConfiguration(string name, MatchmakingConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:gamelift:MatchmakingConfiguration", name, args ?? new MatchmakingConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MatchmakingConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:gamelift:MatchmakingConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "name",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MatchmakingConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MatchmakingConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MatchmakingConfiguration(name, id, options);
        }
    }

    public sealed class MatchmakingConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players
        /// </summary>
        [Input("acceptanceRequired", required: true)]
        public Input<bool> AcceptanceRequired { get; set; } = null!;

        /// <summary>
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
        /// </summary>
        [Input("acceptanceTimeoutSeconds")]
        public Input<int>? AcceptanceTimeoutSeconds { get; set; }

        /// <summary>
        /// The number of player slots in a match to keep open for future players.
        /// </summary>
        [Input("additionalPlayerCount")]
        public Input<int>? AdditionalPlayerCount { get; set; }

        /// <summary>
        /// The method used to backfill game sessions created with this matchmaking configuration.
        /// </summary>
        [Input("backfillMode")]
        public Input<Pulumi.AwsNative.GameLift.MatchmakingConfigurationBackfillMode>? BackfillMode { get; set; }

        /// <summary>
        /// A time stamp indicating when this data object was created.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// Information to attach to all events related to the matchmaking configuration.
        /// </summary>
        [Input("customEventData")]
        public Input<string>? CustomEventData { get; set; }

        /// <summary>
        /// A descriptive label that is associated with matchmaking configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
        /// </summary>
        [Input("flexMatchMode")]
        public Input<Pulumi.AwsNative.GameLift.MatchmakingConfigurationFlexMatchMode>? FlexMatchMode { get; set; }

        [Input("gameProperties")]
        private InputList<Inputs.MatchmakingConfigurationGamePropertyArgs>? _gameProperties;

        /// <summary>
        /// A set of custom properties for a game session, formatted as key:value pairs.
        /// </summary>
        public InputList<Inputs.MatchmakingConfigurationGamePropertyArgs> GameProperties
        {
            get => _gameProperties ?? (_gameProperties = new InputList<Inputs.MatchmakingConfigurationGamePropertyArgs>());
            set => _gameProperties = value;
        }

        /// <summary>
        /// A set of custom game session properties, formatted as a single string value.
        /// </summary>
        [Input("gameSessionData")]
        public Input<string>? GameSessionData { get; set; }

        [Input("gameSessionQueueArns")]
        private InputList<string>? _gameSessionQueueArns;

        /// <summary>
        /// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
        /// </summary>
        public InputList<string> GameSessionQueueArns
        {
            get => _gameSessionQueueArns ?? (_gameSessionQueueArns = new InputList<string>());
            set => _gameSessionQueueArns = value;
        }

        /// <summary>
        /// A unique identifier for the matchmaking configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An SNS topic ARN that is set up to receive matchmaking notifications.
        /// </summary>
        [Input("notificationTarget")]
        public Input<string>? NotificationTarget { get; set; }

        /// <summary>
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
        /// </summary>
        [Input("requestTimeoutSeconds", required: true)]
        public Input<int> RequestTimeoutSeconds { get; set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
        /// </summary>
        [Input("ruleSetArn")]
        public Input<string>? RuleSetArn { get; set; }

        /// <summary>
        /// A unique identifier for the matchmaking rule set to use with this configuration.
        /// </summary>
        [Input("ruleSetName", required: true)]
        public Input<string> RuleSetName { get; set; } = null!;

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        public MatchmakingConfigurationArgs()
        {
        }
        public static new MatchmakingConfigurationArgs Empty => new MatchmakingConfigurationArgs();
    }
}
