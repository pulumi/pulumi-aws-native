// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift
{
    /// <summary>
    /// The AWS::GameLift::GameServerGroup resource creates an Amazon GameLift (GameLift) GameServerGroup.
    /// </summary>
    [AwsNativeResourceType("aws-native:gamelift:GameServerGroup")]
    public partial class GameServerGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.
        /// </summary>
        [Output("autoScalingGroupArn")]
        public Output<string> AutoScalingGroupArn { get; private set; } = null!;

        /// <summary>
        /// Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
        /// </summary>
        [Output("autoScalingPolicy")]
        public Output<Outputs.GameServerGroupAutoScalingPolicy?> AutoScalingPolicy { get; private set; } = null!;

        /// <summary>
        /// The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
        /// </summary>
        [Output("balancingStrategy")]
        public Output<string?> BalancingStrategy { get; private set; } = null!;

        /// <summary>
        /// The type of delete to perform.
        /// </summary>
        [Output("deleteOption")]
        public Output<string?> DeleteOption { get; private set; } = null!;

        /// <summary>
        /// A generated unique ID for the game server group.
        /// </summary>
        [Output("gameServerGroupArn")]
        public Output<string> GameServerGroupArn { get; private set; } = null!;

        /// <summary>
        /// An identifier for the new game server group.
        /// </summary>
        [Output("gameServerGroupName")]
        public Output<string> GameServerGroupName { get; private set; } = null!;

        /// <summary>
        /// A flag that indicates whether instances in the game server group are protected from early termination.
        /// </summary>
        [Output("gameServerProtectionPolicy")]
        public Output<string?> GameServerProtectionPolicy { get; private set; } = null!;

        /// <summary>
        /// A set of EC2 instance types to use when creating instances in the group.
        /// </summary>
        [Output("instanceDefinitions")]
        public Output<ImmutableArray<Outputs.GameServerGroupInstanceDefinition>> InstanceDefinitions { get; private set; } = null!;

        /// <summary>
        /// The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
        /// </summary>
        [Output("launchTemplate")]
        public Output<Outputs.GameServerGroupLaunchTemplate> LaunchTemplate { get; private set; } = null!;

        /// <summary>
        /// The maximum number of instances allowed in the EC2 Auto Scaling group.
        /// </summary>
        [Output("maxSize")]
        public Output<double?> MaxSize { get; private set; } = null!;

        /// <summary>
        /// The minimum number of instances allowed in the EC2 Auto Scaling group.
        /// </summary>
        [Output("minSize")]
        public Output<double?> MinSize { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// A list of labels to assign to the new game server group resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.GameServerGroupTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
        /// </summary>
        [Output("vpcSubnets")]
        public Output<ImmutableArray<string>> VpcSubnets { get; private set; } = null!;


        /// <summary>
        /// Create a GameServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GameServerGroup(string name, GameServerGroupArgs args, CustomResourceOptions? options = null)
            : base("aws-native:gamelift:GameServerGroup", name, args ?? new GameServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GameServerGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:gamelift:GameServerGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GameServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GameServerGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new GameServerGroup(name, id, options);
        }
    }

    public sealed class GameServerGroupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting
        /// </summary>
        [Input("autoScalingPolicy")]
        public Input<Inputs.GameServerGroupAutoScalingPolicyArgs>? AutoScalingPolicy { get; set; }

        /// <summary>
        /// The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
        /// </summary>
        [Input("balancingStrategy")]
        public Input<string>? BalancingStrategy { get; set; }

        /// <summary>
        /// The type of delete to perform.
        /// </summary>
        [Input("deleteOption")]
        public Input<string>? DeleteOption { get; set; }

        /// <summary>
        /// An identifier for the new game server group.
        /// </summary>
        [Input("gameServerGroupName", required: true)]
        public Input<string> GameServerGroupName { get; set; } = null!;

        /// <summary>
        /// A flag that indicates whether instances in the game server group are protected from early termination.
        /// </summary>
        [Input("gameServerProtectionPolicy")]
        public Input<string>? GameServerProtectionPolicy { get; set; }

        [Input("instanceDefinitions", required: true)]
        private InputList<Inputs.GameServerGroupInstanceDefinitionArgs>? _instanceDefinitions;

        /// <summary>
        /// A set of EC2 instance types to use when creating instances in the group.
        /// </summary>
        public InputList<Inputs.GameServerGroupInstanceDefinitionArgs> InstanceDefinitions
        {
            get => _instanceDefinitions ?? (_instanceDefinitions = new InputList<Inputs.GameServerGroupInstanceDefinitionArgs>());
            set => _instanceDefinitions = value;
        }

        /// <summary>
        /// The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group.
        /// </summary>
        [Input("launchTemplate", required: true)]
        public Input<Inputs.GameServerGroupLaunchTemplateArgs> LaunchTemplate { get; set; } = null!;

        /// <summary>
        /// The maximum number of instances allowed in the EC2 Auto Scaling group.
        /// </summary>
        [Input("maxSize")]
        public Input<double>? MaxSize { get; set; }

        /// <summary>
        /// The minimum number of instances allowed in the EC2 Auto Scaling group.
        /// </summary>
        [Input("minSize")]
        public Input<double>? MinSize { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.GameServerGroupTagArgs>? _tags;

        /// <summary>
        /// A list of labels to assign to the new game server group resource.
        /// </summary>
        public InputList<Inputs.GameServerGroupTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GameServerGroupTagArgs>());
            set => _tags = value;
        }

        [Input("vpcSubnets")]
        private InputList<string>? _vpcSubnets;

        /// <summary>
        /// A list of virtual private cloud (VPC) subnets to use with instances in the game server group.
        /// </summary>
        public InputList<string> VpcSubnets
        {
            get => _vpcSubnets ?? (_vpcSubnets = new InputList<string>());
            set => _vpcSubnets = value;
        }

        public GameServerGroupArgs()
        {
        }
    }
}
