// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift
{
    /// <summary>
    /// The AWS::GameLift::Fleet resource creates an Amazon GameLift (GameLift) fleet to host game servers.  A fleet is a set of EC2 instances, each of which can host multiple game sessions.
    /// </summary>
    [AwsNativeResourceType("aws-native:gamelift:Fleet")]
    public partial class Fleet : Pulumi.CustomResource
    {
        /// <summary>
        /// A unique identifier for a build to be deployed on the new fleet. If you are deploying the fleet with a custom game build, you must specify this property. The build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
        /// </summary>
        [Output("buildId")]
        public Output<string?> BuildId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to generate a TLS/SSL certificate for the new fleet. TLS certificates are used for encrypting traffic between game clients and game servers running on GameLift. If this parameter is not set, certificate generation is disabled. This fleet setting cannot be changed once the fleet is created.
        /// </summary>
        [Output("certificateConfiguration")]
        public Output<Outputs.FleetCertificateConfiguration?> CertificateConfiguration { get; private set; } = null!;

        /// <summary>
        /// A human-readable description of a fleet.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// [DEPRECATED] The number of EC2 instances that you want this fleet to host. When creating a new fleet, GameLift automatically sets this value to "1" and initiates a single instance. Once the fleet is active, update this value to trigger GameLift to add or remove instances from the fleet.
        /// </summary>
        [Output("desiredEC2Instances")]
        public Output<int?> DesiredEC2Instances { get; private set; } = null!;

        /// <summary>
        /// A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift server.
        /// </summary>
        [Output("eC2InboundPermissions")]
        public Output<ImmutableArray<Outputs.FleetIpPermission>> EC2InboundPermissions { get; private set; } = null!;

        /// <summary>
        /// The name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        /// </summary>
        [Output("eC2InstanceType")]
        public Output<string?> EC2InstanceType { get; private set; } = null!;

        /// <summary>
        /// Unique fleet ID
        /// </summary>
        [Output("fleetId")]
        public Output<string> FleetId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to use On-Demand instances or Spot instances for this fleet. If empty, the default is ON_DEMAND. Both categories of instances use identical hardware and configurations based on the instance type selected for this fleet.
        /// </summary>
        [Output("fleetType")]
        public Output<Pulumi.AwsNative.GameLift.FleetFleetType?> FleetType { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for an AWS IAM role that manages access to your AWS services. With an instance role ARN set, any application that runs on an instance in this fleet can assume the role, including install scripts, server processes, and daemons (background processes). Create a role or look up a role's ARN from the IAM dashboard in the AWS Management Console.
        /// </summary>
        [Output("instanceRoleARN")]
        public Output<string?> InstanceRoleARN { get; private set; } = null!;

        [Output("locations")]
        public Output<ImmutableArray<Outputs.FleetLocationConfiguration>> Locations { get; private set; } = null!;

        /// <summary>
        /// This parameter is no longer used. When hosting a custom game build, specify where Amazon GameLift should store log files using the Amazon GameLift server API call ProcessReady()
        /// </summary>
        [Output("logPaths")]
        public Output<ImmutableArray<string>> LogPaths { get; private set; } = null!;

        /// <summary>
        /// [DEPRECATED] The maximum value that is allowed for the fleet's instance count. When creating a new fleet, GameLift automatically sets this value to "1". Once the fleet is active, you can change this value.
        /// </summary>
        [Output("maxSize")]
        public Output<int?> MaxSize { get; private set; } = null!;

        /// <summary>
        /// The name of an Amazon CloudWatch metric group. A metric group aggregates the metrics for all fleets in the group. Specify a string containing the metric group name. You can use an existing name or use a new name to create a new metric group. Currently, this parameter can have only one string.
        /// </summary>
        [Output("metricGroups")]
        public Output<ImmutableArray<string>> MetricGroups { get; private set; } = null!;

        /// <summary>
        /// [DEPRECATED] The minimum value allowed for the fleet's instance count. When creating a new fleet, GameLift automatically sets this value to "0". After the fleet is active, you can change this value.
        /// </summary>
        [Output("minSize")]
        public Output<int?> MinSize { get; private set; } = null!;

        /// <summary>
        /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// A game session protection policy to apply to all game sessions hosted on instances in this fleet. When protected, active game sessions cannot be terminated during a scale-down event. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy to affect future game sessions on the fleet. You can also set protection for individual game sessions.
        /// </summary>
        [Output("newGameSessionProtectionPolicy")]
        public Output<Pulumi.AwsNative.GameLift.FleetNewGameSessionProtectionPolicy?> NewGameSessionProtectionPolicy { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for the AWS account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your account ID in the AWS Management Console under account settings.
        /// </summary>
        [Output("peerVpcAwsAccountId")]
        public Output<string?> PeerVpcAwsAccountId { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the VPC Dashboard in the AWS Management Console.
        /// </summary>
        [Output("peerVpcId")]
        public Output<string?> PeerVpcId { get; private set; } = null!;

        /// <summary>
        /// A policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
        /// </summary>
        [Output("resourceCreationLimitPolicy")]
        public Output<Outputs.FleetResourceCreationLimitPolicy?> ResourceCreationLimitPolicy { get; private set; } = null!;

        /// <summary>
        /// Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime script. The runtime configuration defines the server executables or launch script file, launch parameters, and the number of processes to run concurrently on each instance. When creating a fleet, the runtime configuration must have at least one server process configuration; otherwise the request fails with an invalid request exception.
        /// 
        /// This parameter is required unless the parameters ServerLaunchPath and ServerLaunchParameters are defined. Runtime configuration has replaced these parameters, but fleets that use them will continue to work.
        /// </summary>
        [Output("runtimeConfiguration")]
        public Output<Outputs.FleetRuntimeConfiguration?> RuntimeConfiguration { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for a Realtime script to be deployed on a new Realtime Servers fleet. The script must have been successfully uploaded to Amazon GameLift. This fleet setting cannot be changed once the fleet is created.
        /// 
        /// Note: It is not currently possible to use the !Ref command to reference a script created with a CloudFormation template for the fleet property ScriptId. Instead, use Fn::GetAtt Script.Arn or Fn::GetAtt Script.Id to retrieve either of these properties as input for ScriptId. Alternatively, enter a ScriptId string manually.
        /// </summary>
        [Output("scriptId")]
        public Output<string?> ScriptId { get; private set; } = null!;

        /// <summary>
        /// This parameter is no longer used but is retained for backward compatibility. Instead, specify server launch parameters in the RuntimeConfiguration parameter. A request must specify either a runtime configuration or values for both ServerLaunchParameters and ServerLaunchPath.
        /// </summary>
        [Output("serverLaunchParameters")]
        public Output<string?> ServerLaunchParameters { get; private set; } = null!;

        /// <summary>
        /// This parameter is no longer used. Instead, specify a server launch path using the RuntimeConfiguration parameter. Requests that specify a server launch path and launch parameters instead of a runtime configuration will continue to work.
        /// </summary>
        [Output("serverLaunchPath")]
        public Output<string?> ServerLaunchPath { get; private set; } = null!;


        /// <summary>
        /// Create a Fleet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Fleet(string name, FleetArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:gamelift:Fleet", name, args ?? new FleetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Fleet(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:gamelift:Fleet", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Fleet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Fleet Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Fleet(name, id, options);
        }
    }

    public sealed class FleetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique identifier for a build to be deployed on the new fleet. If you are deploying the fleet with a custom game build, you must specify this property. The build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
        /// </summary>
        [Input("buildId")]
        public Input<string>? BuildId { get; set; }

        /// <summary>
        /// Indicates whether to generate a TLS/SSL certificate for the new fleet. TLS certificates are used for encrypting traffic between game clients and game servers running on GameLift. If this parameter is not set, certificate generation is disabled. This fleet setting cannot be changed once the fleet is created.
        /// </summary>
        [Input("certificateConfiguration")]
        public Input<Inputs.FleetCertificateConfigurationArgs>? CertificateConfiguration { get; set; }

        /// <summary>
        /// A human-readable description of a fleet.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// [DEPRECATED] The number of EC2 instances that you want this fleet to host. When creating a new fleet, GameLift automatically sets this value to "1" and initiates a single instance. Once the fleet is active, update this value to trigger GameLift to add or remove instances from the fleet.
        /// </summary>
        [Input("desiredEC2Instances")]
        public Input<int>? DesiredEC2Instances { get; set; }

        [Input("eC2InboundPermissions")]
        private InputList<Inputs.FleetIpPermissionArgs>? _eC2InboundPermissions;

        /// <summary>
        /// A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift server.
        /// </summary>
        public InputList<Inputs.FleetIpPermissionArgs> EC2InboundPermissions
        {
            get => _eC2InboundPermissions ?? (_eC2InboundPermissions = new InputList<Inputs.FleetIpPermissionArgs>());
            set => _eC2InboundPermissions = value;
        }

        /// <summary>
        /// The name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        /// </summary>
        [Input("eC2InstanceType")]
        public Input<string>? EC2InstanceType { get; set; }

        /// <summary>
        /// Indicates whether to use On-Demand instances or Spot instances for this fleet. If empty, the default is ON_DEMAND. Both categories of instances use identical hardware and configurations based on the instance type selected for this fleet.
        /// </summary>
        [Input("fleetType")]
        public Input<Pulumi.AwsNative.GameLift.FleetFleetType>? FleetType { get; set; }

        /// <summary>
        /// A unique identifier for an AWS IAM role that manages access to your AWS services. With an instance role ARN set, any application that runs on an instance in this fleet can assume the role, including install scripts, server processes, and daemons (background processes). Create a role or look up a role's ARN from the IAM dashboard in the AWS Management Console.
        /// </summary>
        [Input("instanceRoleARN")]
        public Input<string>? InstanceRoleARN { get; set; }

        [Input("locations")]
        private InputList<Inputs.FleetLocationConfigurationArgs>? _locations;
        public InputList<Inputs.FleetLocationConfigurationArgs> Locations
        {
            get => _locations ?? (_locations = new InputList<Inputs.FleetLocationConfigurationArgs>());
            set => _locations = value;
        }

        [Input("logPaths")]
        private InputList<string>? _logPaths;

        /// <summary>
        /// This parameter is no longer used. When hosting a custom game build, specify where Amazon GameLift should store log files using the Amazon GameLift server API call ProcessReady()
        /// </summary>
        public InputList<string> LogPaths
        {
            get => _logPaths ?? (_logPaths = new InputList<string>());
            set => _logPaths = value;
        }

        /// <summary>
        /// [DEPRECATED] The maximum value that is allowed for the fleet's instance count. When creating a new fleet, GameLift automatically sets this value to "1". Once the fleet is active, you can change this value.
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        [Input("metricGroups")]
        private InputList<string>? _metricGroups;

        /// <summary>
        /// The name of an Amazon CloudWatch metric group. A metric group aggregates the metrics for all fleets in the group. Specify a string containing the metric group name. You can use an existing name or use a new name to create a new metric group. Currently, this parameter can have only one string.
        /// </summary>
        public InputList<string> MetricGroups
        {
            get => _metricGroups ?? (_metricGroups = new InputList<string>());
            set => _metricGroups = value;
        }

        /// <summary>
        /// [DEPRECATED] The minimum value allowed for the fleet's instance count. When creating a new fleet, GameLift automatically sets this value to "0". After the fleet is active, you can change this value.
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// A descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A game session protection policy to apply to all game sessions hosted on instances in this fleet. When protected, active game sessions cannot be terminated during a scale-down event. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy to affect future game sessions on the fleet. You can also set protection for individual game sessions.
        /// </summary>
        [Input("newGameSessionProtectionPolicy")]
        public Input<Pulumi.AwsNative.GameLift.FleetNewGameSessionProtectionPolicy>? NewGameSessionProtectionPolicy { get; set; }

        /// <summary>
        /// A unique identifier for the AWS account with the VPC that you want to peer your Amazon GameLift fleet with. You can find your account ID in the AWS Management Console under account settings.
        /// </summary>
        [Input("peerVpcAwsAccountId")]
        public Input<string>? PeerVpcAwsAccountId { get; set; }

        /// <summary>
        /// A unique identifier for a VPC with resources to be accessed by your Amazon GameLift fleet. The VPC must be in the same Region as your fleet. To look up a VPC ID, use the VPC Dashboard in the AWS Management Console.
        /// </summary>
        [Input("peerVpcId")]
        public Input<string>? PeerVpcId { get; set; }

        /// <summary>
        /// A policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
        /// </summary>
        [Input("resourceCreationLimitPolicy")]
        public Input<Inputs.FleetResourceCreationLimitPolicyArgs>? ResourceCreationLimitPolicy { get; set; }

        /// <summary>
        /// Instructions for launching server processes on each instance in the fleet. Server processes run either a custom game build executable or a Realtime script. The runtime configuration defines the server executables or launch script file, launch parameters, and the number of processes to run concurrently on each instance. When creating a fleet, the runtime configuration must have at least one server process configuration; otherwise the request fails with an invalid request exception.
        /// 
        /// This parameter is required unless the parameters ServerLaunchPath and ServerLaunchParameters are defined. Runtime configuration has replaced these parameters, but fleets that use them will continue to work.
        /// </summary>
        [Input("runtimeConfiguration")]
        public Input<Inputs.FleetRuntimeConfigurationArgs>? RuntimeConfiguration { get; set; }

        /// <summary>
        /// A unique identifier for a Realtime script to be deployed on a new Realtime Servers fleet. The script must have been successfully uploaded to Amazon GameLift. This fleet setting cannot be changed once the fleet is created.
        /// 
        /// Note: It is not currently possible to use the !Ref command to reference a script created with a CloudFormation template for the fleet property ScriptId. Instead, use Fn::GetAtt Script.Arn or Fn::GetAtt Script.Id to retrieve either of these properties as input for ScriptId. Alternatively, enter a ScriptId string manually.
        /// </summary>
        [Input("scriptId")]
        public Input<string>? ScriptId { get; set; }

        /// <summary>
        /// This parameter is no longer used but is retained for backward compatibility. Instead, specify server launch parameters in the RuntimeConfiguration parameter. A request must specify either a runtime configuration or values for both ServerLaunchParameters and ServerLaunchPath.
        /// </summary>
        [Input("serverLaunchParameters")]
        public Input<string>? ServerLaunchParameters { get; set; }

        /// <summary>
        /// This parameter is no longer used. Instead, specify a server launch path using the RuntimeConfiguration parameter. Requests that specify a server launch path and launch parameters instead of a runtime configuration will continue to work.
        /// </summary>
        [Input("serverLaunchPath")]
        public Input<string>? ServerLaunchPath { get; set; }

        public FleetArgs()
        {
        }
    }
}
