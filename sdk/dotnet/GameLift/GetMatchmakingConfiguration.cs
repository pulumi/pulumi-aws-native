// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift
{
    public static class GetMatchmakingConfiguration
    {
        /// <summary>
        /// The AWS::GameLift::MatchmakingConfiguration resource creates an Amazon GameLift (GameLift) matchmaking configuration.
        /// </summary>
        public static Task<GetMatchmakingConfigurationResult> InvokeAsync(GetMatchmakingConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMatchmakingConfigurationResult>("aws-native:gamelift:getMatchmakingConfiguration", args ?? new GetMatchmakingConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::GameLift::MatchmakingConfiguration resource creates an Amazon GameLift (GameLift) matchmaking configuration.
        /// </summary>
        public static Output<GetMatchmakingConfigurationResult> Invoke(GetMatchmakingConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMatchmakingConfigurationResult>("aws-native:gamelift:getMatchmakingConfiguration", args ?? new GetMatchmakingConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMatchmakingConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the matchmaking configuration.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetMatchmakingConfigurationArgs()
        {
        }
        public static new GetMatchmakingConfigurationArgs Empty => new GetMatchmakingConfigurationArgs();
    }

    public sealed class GetMatchmakingConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the matchmaking configuration.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetMatchmakingConfigurationInvokeArgs()
        {
        }
        public static new GetMatchmakingConfigurationInvokeArgs Empty => new GetMatchmakingConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetMatchmakingConfigurationResult
    {
        /// <summary>
        /// A flag that indicates whether a match that was created with this configuration must be accepted by the matched players
        /// </summary>
        public readonly bool? AcceptanceRequired;
        /// <summary>
        /// The length of time (in seconds) to wait for players to accept a proposed match, if acceptance is required.
        /// </summary>
        public readonly int? AcceptanceTimeoutSeconds;
        /// <summary>
        /// The number of player slots in a match to keep open for future players.
        /// </summary>
        public readonly int? AdditionalPlayerCount;
        /// <summary>
        /// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift matchmaking configuration resource and uniquely identifies it.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The method used to backfill game sessions created with this matchmaking configuration.
        /// </summary>
        public readonly Pulumi.AwsNative.GameLift.MatchmakingConfigurationBackfillMode? BackfillMode;
        /// <summary>
        /// A time stamp indicating when this data object was created.
        /// </summary>
        public readonly string? CreationTime;
        /// <summary>
        /// Information to attach to all events related to the matchmaking configuration.
        /// </summary>
        public readonly string? CustomEventData;
        /// <summary>
        /// A descriptive label that is associated with matchmaking configuration.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
        /// </summary>
        public readonly Pulumi.AwsNative.GameLift.MatchmakingConfigurationFlexMatchMode? FlexMatchMode;
        /// <summary>
        /// A set of custom properties for a game session, formatted as key:value pairs.
        /// </summary>
        public readonly ImmutableArray<Outputs.MatchmakingConfigurationGameProperty> GameProperties;
        /// <summary>
        /// A set of custom game session properties, formatted as a single string value.
        /// </summary>
        public readonly string? GameSessionData;
        /// <summary>
        /// The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.
        /// </summary>
        public readonly ImmutableArray<string> GameSessionQueueArns;
        /// <summary>
        /// An SNS topic ARN that is set up to receive matchmaking notifications.
        /// </summary>
        public readonly string? NotificationTarget;
        /// <summary>
        /// The maximum duration, in seconds, that a matchmaking ticket can remain in process before timing out.
        /// </summary>
        public readonly int? RequestTimeoutSeconds;
        /// <summary>
        /// The Amazon Resource Name (ARN) associated with the GameLift matchmaking rule set resource that this configuration uses.
        /// </summary>
        public readonly string? RuleSetArn;
        /// <summary>
        /// A unique identifier for the matchmaking rule set to use with this configuration.
        /// </summary>
        public readonly string? RuleSetName;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;

        [OutputConstructor]
        private GetMatchmakingConfigurationResult(
            bool? acceptanceRequired,

            int? acceptanceTimeoutSeconds,

            int? additionalPlayerCount,

            string? arn,

            Pulumi.AwsNative.GameLift.MatchmakingConfigurationBackfillMode? backfillMode,

            string? creationTime,

            string? customEventData,

            string? description,

            Pulumi.AwsNative.GameLift.MatchmakingConfigurationFlexMatchMode? flexMatchMode,

            ImmutableArray<Outputs.MatchmakingConfigurationGameProperty> gameProperties,

            string? gameSessionData,

            ImmutableArray<string> gameSessionQueueArns,

            string? notificationTarget,

            int? requestTimeoutSeconds,

            string? ruleSetArn,

            string? ruleSetName,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags)
        {
            AcceptanceRequired = acceptanceRequired;
            AcceptanceTimeoutSeconds = acceptanceTimeoutSeconds;
            AdditionalPlayerCount = additionalPlayerCount;
            Arn = arn;
            BackfillMode = backfillMode;
            CreationTime = creationTime;
            CustomEventData = customEventData;
            Description = description;
            FlexMatchMode = flexMatchMode;
            GameProperties = gameProperties;
            GameSessionData = gameSessionData;
            GameSessionQueueArns = gameSessionQueueArns;
            NotificationTarget = notificationTarget;
            RequestTimeoutSeconds = requestTimeoutSeconds;
            RuleSetArn = ruleSetArn;
            RuleSetName = ruleSetName;
            Tags = tags;
        }
    }
}
