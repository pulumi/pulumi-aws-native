// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLift
{
    public static class GetGameSessionQueue
    {
        /// <summary>
        /// Resource Type definition for AWS::GameLift::GameSessionQueue
        /// </summary>
        public static Task<GetGameSessionQueueResult> InvokeAsync(GetGameSessionQueueArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGameSessionQueueResult>("aws-native:gamelift:getGameSessionQueue", args ?? new GetGameSessionQueueArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::GameLift::GameSessionQueue
        /// </summary>
        public static Output<GetGameSessionQueueResult> Invoke(GetGameSessionQueueInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGameSessionQueueResult>("aws-native:gamelift:getGameSessionQueue", args ?? new GetGameSessionQueueInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGameSessionQueueArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetGameSessionQueueArgs()
        {
        }
    }

    public sealed class GetGameSessionQueueInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetGameSessionQueueInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGameSessionQueueResult
    {
        public readonly string? Arn;
        public readonly string? CustomEventData;
        public readonly ImmutableArray<Outputs.GameSessionQueueDestination> Destinations;
        public readonly Outputs.GameSessionQueueFilterConfiguration? FilterConfiguration;
        public readonly string? Id;
        public readonly string? NotificationTarget;
        public readonly ImmutableArray<Outputs.GameSessionQueuePlayerLatencyPolicy> PlayerLatencyPolicies;
        public readonly Outputs.GameSessionQueuePriorityConfiguration? PriorityConfiguration;
        public readonly ImmutableArray<Outputs.GameSessionQueueTag> Tags;
        public readonly int? TimeoutInSeconds;

        [OutputConstructor]
        private GetGameSessionQueueResult(
            string? arn,

            string? customEventData,

            ImmutableArray<Outputs.GameSessionQueueDestination> destinations,

            Outputs.GameSessionQueueFilterConfiguration? filterConfiguration,

            string? id,

            string? notificationTarget,

            ImmutableArray<Outputs.GameSessionQueuePlayerLatencyPolicy> playerLatencyPolicies,

            Outputs.GameSessionQueuePriorityConfiguration? priorityConfiguration,

            ImmutableArray<Outputs.GameSessionQueueTag> tags,

            int? timeoutInSeconds)
        {
            Arn = arn;
            CustomEventData = customEventData;
            Destinations = destinations;
            FilterConfiguration = filterConfiguration;
            Id = id;
            NotificationTarget = notificationTarget;
            PlayerLatencyPolicies = playerLatencyPolicies;
            PriorityConfiguration = priorityConfiguration;
            Tags = tags;
            TimeoutInSeconds = timeoutInSeconds;
        }
    }
}
