// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Logs
{
    /// <summary>
    /// The ``AWS::Logs::MetricFilter`` resource specifies a metric filter that describes how CWL extracts information from logs and transforms it into Amazon CloudWatch metrics. If you have multiple metric filters that are associated with a log group, all the filters are applied to the log streams in that group.
    ///  The maximum number of metric filters that can be associated with a log group is 100.
    /// </summary>
    [AwsNativeResourceType("aws-native:logs:MetricFilter")]
    public partial class MetricFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
        ///  If this value is ``true``, the metric filter is applied on the transformed version of the log events instead of the original ingested log events.
        /// </summary>
        [Output("applyOnTransformedLogs")]
        public Output<bool?> ApplyOnTransformedLogs { get; private set; } = null!;

        /// <summary>
        /// The name of the metric filter.
        /// </summary>
        [Output("filterName")]
        public Output<string?> FilterName { get; private set; } = null!;

        /// <summary>
        /// A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        /// </summary>
        [Output("filterPattern")]
        public Output<string> FilterPattern { get; private set; } = null!;

        /// <summary>
        /// The name of an existing log group that you want to associate with this metric filter.
        /// </summary>
        [Output("logGroupName")]
        public Output<string> LogGroupName { get; private set; } = null!;

        /// <summary>
        /// The metric transformations.
        /// </summary>
        [Output("metricTransformations")]
        public Output<ImmutableArray<Outputs.MetricFilterMetricTransformation>> MetricTransformations { get; private set; } = null!;


        /// <summary>
        /// Create a MetricFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricFilter(string name, MetricFilterArgs args, CustomResourceOptions? options = null)
            : base("aws-native:logs:MetricFilter", name, args ?? new MetricFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetricFilter(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:logs:MetricFilter", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "filterName",
                    "logGroupName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricFilter Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MetricFilter(name, id, options);
        }
    }

    public sealed class MetricFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see [PutTransformer](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html).
        ///  If this value is ``true``, the metric filter is applied on the transformed version of the log events instead of the original ingested log events.
        /// </summary>
        [Input("applyOnTransformedLogs")]
        public Input<bool>? ApplyOnTransformedLogs { get; set; }

        /// <summary>
        /// The name of the metric filter.
        /// </summary>
        [Input("filterName")]
        public Input<string>? FilterName { get; set; }

        /// <summary>
        /// A filter pattern for extracting metric data out of ingested log events. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        /// </summary>
        [Input("filterPattern", required: true)]
        public Input<string> FilterPattern { get; set; } = null!;

        /// <summary>
        /// The name of an existing log group that you want to associate with this metric filter.
        /// </summary>
        [Input("logGroupName", required: true)]
        public Input<string> LogGroupName { get; set; } = null!;

        [Input("metricTransformations", required: true)]
        private InputList<Inputs.MetricFilterMetricTransformationArgs>? _metricTransformations;

        /// <summary>
        /// The metric transformations.
        /// </summary>
        public InputList<Inputs.MetricFilterMetricTransformationArgs> MetricTransformations
        {
            get => _metricTransformations ?? (_metricTransformations = new InputList<Inputs.MetricFilterMetricTransformationArgs>());
            set => _metricTransformations = value;
        }

        public MetricFilterArgs()
        {
        }
        public static new MetricFilterArgs Empty => new MetricFilterArgs();
    }
}
