// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Logs
{
    public static class GetTransformer
    {
        /// <summary>
        /// Specifies a transformer on the log group to transform logs into consistent structured and information rich format.
        /// </summary>
        public static Task<GetTransformerResult> InvokeAsync(GetTransformerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransformerResult>("aws-native:logs:getTransformer", args ?? new GetTransformerArgs(), options.WithDefaults());

        /// <summary>
        /// Specifies a transformer on the log group to transform logs into consistent structured and information rich format.
        /// </summary>
        public static Output<GetTransformerResult> Invoke(GetTransformerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransformerResult>("aws-native:logs:getTransformer", args ?? new GetTransformerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransformerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Existing log group that you want to associate with this transformer.
        /// </summary>
        [Input("logGroupIdentifier", required: true)]
        public string LogGroupIdentifier { get; set; } = null!;

        public GetTransformerArgs()
        {
        }
        public static new GetTransformerArgs Empty => new GetTransformerArgs();
    }

    public sealed class GetTransformerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Existing log group that you want to associate with this transformer.
        /// </summary>
        [Input("logGroupIdentifier", required: true)]
        public Input<string> LogGroupIdentifier { get; set; } = null!;

        public GetTransformerInvokeArgs()
        {
        }
        public static new GetTransformerInvokeArgs Empty => new GetTransformerInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransformerResult
    {
        /// <summary>
        /// List of processors in a transformer
        /// </summary>
        public readonly ImmutableArray<Outputs.TransformerProcessor> TransformerConfig;

        [OutputConstructor]
        private GetTransformerResult(ImmutableArray<Outputs.TransformerProcessor> transformerConfig)
        {
            TransformerConfig = transformerConfig;
        }
    }
}
