// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Logs.Outputs
{

    [OutputType]
    public sealed class MetricFilterMetricTransformation
    {
        /// <summary>
        /// The value to emit when a filter pattern does not match a log event. This value can be null.
        /// </summary>
        public readonly double? DefaultValue;
        /// <summary>
        /// Dimensions are the key-value pairs that further define a metric
        /// </summary>
        public readonly ImmutableArray<Outputs.MetricFilterDimension> Dimensions;
        /// <summary>
        /// The name of the CloudWatch metric. Metric name must be in ASCII format.
        /// </summary>
        public readonly string MetricName;
        /// <summary>
        /// The namespace of the CloudWatch metric.
        /// </summary>
        public readonly string MetricNamespace;
        /// <summary>
        /// The value to publish to the CloudWatch metric when a filter pattern matches a log event.
        /// </summary>
        public readonly string MetricValue;
        /// <summary>
        /// The unit to assign to the metric. If you omit this, the unit is set as None.
        /// </summary>
        public readonly Pulumi.AwsNative.Logs.MetricFilterMetricTransformationUnit? Unit;

        [OutputConstructor]
        private MetricFilterMetricTransformation(
            double? defaultValue,

            ImmutableArray<Outputs.MetricFilterDimension> dimensions,

            string metricName,

            string metricNamespace,

            string metricValue,

            Pulumi.AwsNative.Logs.MetricFilterMetricTransformationUnit? unit)
        {
            DefaultValue = defaultValue;
            Dimensions = dimensions;
            MetricName = metricName;
            MetricNamespace = metricNamespace;
            MetricValue = metricValue;
            Unit = unit;
        }
    }
}
