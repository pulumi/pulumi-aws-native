// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Macie
{
    [EnumType]
    public readonly struct FindingsFilterFindingFilterAction : IEquatable<FindingsFilterFindingFilterAction>
    {
        private readonly string _value;

        private FindingsFilterFindingFilterAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FindingsFilterFindingFilterAction Archive { get; } = new FindingsFilterFindingFilterAction("ARCHIVE");
        public static FindingsFilterFindingFilterAction Noop { get; } = new FindingsFilterFindingFilterAction("NOOP");

        public static bool operator ==(FindingsFilterFindingFilterAction left, FindingsFilterFindingFilterAction right) => left.Equals(right);
        public static bool operator !=(FindingsFilterFindingFilterAction left, FindingsFilterFindingFilterAction right) => !left.Equals(right);

        public static explicit operator string(FindingsFilterFindingFilterAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FindingsFilterFindingFilterAction other && Equals(other);
        public bool Equals(FindingsFilterFindingFilterAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A enumeration value that specifies how frequently finding updates are published.
    /// </summary>
    [EnumType]
    public readonly struct SessionFindingPublishingFrequency : IEquatable<SessionFindingPublishingFrequency>
    {
        private readonly string _value;

        private SessionFindingPublishingFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionFindingPublishingFrequency FifteenMinutes { get; } = new SessionFindingPublishingFrequency("FIFTEEN_MINUTES");
        public static SessionFindingPublishingFrequency OneHour { get; } = new SessionFindingPublishingFrequency("ONE_HOUR");
        public static SessionFindingPublishingFrequency SixHours { get; } = new SessionFindingPublishingFrequency("SIX_HOURS");

        public static bool operator ==(SessionFindingPublishingFrequency left, SessionFindingPublishingFrequency right) => left.Equals(right);
        public static bool operator !=(SessionFindingPublishingFrequency left, SessionFindingPublishingFrequency right) => !left.Equals(right);

        public static explicit operator string(SessionFindingPublishingFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionFindingPublishingFrequency other && Equals(other);
        public bool Equals(SessionFindingPublishingFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A enumeration value that specifies the status of the Macie Session.
    /// </summary>
    [EnumType]
    public readonly struct SessionStatus : IEquatable<SessionStatus>
    {
        private readonly string _value;

        private SessionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionStatus Enabled { get; } = new SessionStatus("ENABLED");
        public static SessionStatus Paused { get; } = new SessionStatus("PAUSED");

        public static bool operator ==(SessionStatus left, SessionStatus right) => left.Equals(right);
        public static bool operator !=(SessionStatus left, SessionStatus right) => !left.Equals(right);

        public static explicit operator string(SessionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionStatus other && Equals(other);
        public bool Equals(SessionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
