// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ElasticLoadBalancing
{
    public static class GetLoadBalancer
    {
        /// <summary>
        /// Resource Type definition for AWS::ElasticLoadBalancing::LoadBalancer
        /// </summary>
        public static Task<GetLoadBalancerResult> InvokeAsync(GetLoadBalancerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("aws-native:elasticloadbalancing:getLoadBalancer", args ?? new GetLoadBalancerArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ElasticLoadBalancing::LoadBalancer
        /// </summary>
        public static Output<GetLoadBalancerResult> Invoke(GetLoadBalancerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetLoadBalancerResult>("aws-native:elasticloadbalancing:getLoadBalancer", args ?? new GetLoadBalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetLoadBalancerArgs()
        {
        }
    }

    public sealed class GetLoadBalancerInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetLoadBalancerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        public readonly Outputs.LoadBalancerAccessLoggingPolicy? AccessLoggingPolicy;
        public readonly ImmutableArray<Outputs.LoadBalancerAppCookieStickinessPolicy> AppCookieStickinessPolicy;
        public readonly ImmutableArray<string> AvailabilityZones;
        public readonly string? CanonicalHostedZoneName;
        public readonly string? CanonicalHostedZoneNameID;
        public readonly Outputs.LoadBalancerConnectionDrainingPolicy? ConnectionDrainingPolicy;
        public readonly Outputs.LoadBalancerConnectionSettings? ConnectionSettings;
        public readonly bool? CrossZone;
        public readonly string? DNSName;
        public readonly Outputs.LoadBalancerHealthCheck? HealthCheck;
        public readonly string? Id;
        public readonly ImmutableArray<string> Instances;
        public readonly ImmutableArray<Outputs.LoadBalancerLBCookieStickinessPolicy> LBCookieStickinessPolicy;
        public readonly ImmutableArray<Outputs.LoadBalancerListeners> Listeners;
        public readonly ImmutableArray<Outputs.LoadBalancerPolicies> Policies;
        public readonly ImmutableArray<string> SecurityGroups;
        public readonly string? SourceSecurityGroupGroupName;
        public readonly string? SourceSecurityGroupOwnerAlias;
        public readonly ImmutableArray<string> Subnets;
        public readonly ImmutableArray<Outputs.LoadBalancerTag> Tags;

        [OutputConstructor]
        private GetLoadBalancerResult(
            Outputs.LoadBalancerAccessLoggingPolicy? accessLoggingPolicy,

            ImmutableArray<Outputs.LoadBalancerAppCookieStickinessPolicy> appCookieStickinessPolicy,

            ImmutableArray<string> availabilityZones,

            string? canonicalHostedZoneName,

            string? canonicalHostedZoneNameID,

            Outputs.LoadBalancerConnectionDrainingPolicy? connectionDrainingPolicy,

            Outputs.LoadBalancerConnectionSettings? connectionSettings,

            bool? crossZone,

            string? dNSName,

            Outputs.LoadBalancerHealthCheck? healthCheck,

            string? id,

            ImmutableArray<string> instances,

            ImmutableArray<Outputs.LoadBalancerLBCookieStickinessPolicy> lBCookieStickinessPolicy,

            ImmutableArray<Outputs.LoadBalancerListeners> listeners,

            ImmutableArray<Outputs.LoadBalancerPolicies> policies,

            ImmutableArray<string> securityGroups,

            string? sourceSecurityGroupGroupName,

            string? sourceSecurityGroupOwnerAlias,

            ImmutableArray<string> subnets,

            ImmutableArray<Outputs.LoadBalancerTag> tags)
        {
            AccessLoggingPolicy = accessLoggingPolicy;
            AppCookieStickinessPolicy = appCookieStickinessPolicy;
            AvailabilityZones = availabilityZones;
            CanonicalHostedZoneName = canonicalHostedZoneName;
            CanonicalHostedZoneNameID = canonicalHostedZoneNameID;
            ConnectionDrainingPolicy = connectionDrainingPolicy;
            ConnectionSettings = connectionSettings;
            CrossZone = crossZone;
            DNSName = dNSName;
            HealthCheck = healthCheck;
            Id = id;
            Instances = instances;
            LBCookieStickinessPolicy = lBCookieStickinessPolicy;
            Listeners = listeners;
            Policies = policies;
            SecurityGroups = securityGroups;
            SourceSecurityGroupGroupName = sourceSecurityGroupGroupName;
            SourceSecurityGroupOwnerAlias = sourceSecurityGroupOwnerAlias;
            Subnets = subnets;
            Tags = tags;
        }
    }
}
