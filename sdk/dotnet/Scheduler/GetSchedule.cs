// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Scheduler
{
    public static class GetSchedule
    {
        /// <summary>
        /// Definition of AWS::Scheduler::Schedule Resource Type
        /// </summary>
        public static Task<GetScheduleResult> InvokeAsync(GetScheduleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScheduleResult>("aws-native:scheduler:getSchedule", args ?? new GetScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::Scheduler::Schedule Resource Type
        /// </summary>
        public static Output<GetScheduleResult> Invoke(GetScheduleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScheduleResult>("aws-native:scheduler:getSchedule", args ?? new GetScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScheduleArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetScheduleArgs()
        {
        }
        public static new GetScheduleArgs Empty => new GetScheduleArgs();
    }

    public sealed class GetScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetScheduleInvokeArgs()
        {
        }
        public static new GetScheduleInvokeArgs Empty => new GetScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetScheduleResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the schedule.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The description of the schedule.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the EndDate you specify.
        /// </summary>
        public readonly string? EndDate;
        public readonly Outputs.ScheduleFlexibleTimeWindow? FlexibleTimeWindow;
        /// <summary>
        /// The name of the schedule group to associate with this schedule. If you omit this, the default schedule group is used.
        /// </summary>
        public readonly string? GroupName;
        /// <summary>
        /// The ARN for a KMS Key that will be used to encrypt customer data.
        /// </summary>
        public readonly string? KmsKeyArn;
        /// <summary>
        /// The scheduling expression.
        /// </summary>
        public readonly string? ScheduleExpression;
        /// <summary>
        /// The timezone in which the scheduling expression is evaluated.
        /// </summary>
        public readonly string? ScheduleExpressionTimezone;
        /// <summary>
        /// The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the StartDate you specify.
        /// </summary>
        public readonly string? StartDate;
        public readonly Pulumi.AwsNative.Scheduler.ScheduleState? State;
        public readonly Outputs.ScheduleTarget? Target;

        [OutputConstructor]
        private GetScheduleResult(
            string? arn,

            string? description,

            string? endDate,

            Outputs.ScheduleFlexibleTimeWindow? flexibleTimeWindow,

            string? groupName,

            string? kmsKeyArn,

            string? scheduleExpression,

            string? scheduleExpressionTimezone,

            string? startDate,

            Pulumi.AwsNative.Scheduler.ScheduleState? state,

            Outputs.ScheduleTarget? target)
        {
            Arn = arn;
            Description = description;
            EndDate = endDate;
            FlexibleTimeWindow = flexibleTimeWindow;
            GroupName = groupName;
            KmsKeyArn = kmsKeyArn;
            ScheduleExpression = scheduleExpression;
            ScheduleExpressionTimezone = scheduleExpressionTimezone;
            StartDate = startDate;
            State = state;
            Target = target;
        }
    }
}
