// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Scheduler.Outputs
{

    /// <summary>
    /// The custom parameters to be used when the target is an Amazon ECS task.
    /// </summary>
    [OutputType]
    public sealed class ScheduleEcsParameters
    {
        /// <summary>
        /// The capacity provider strategy to use for the task.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScheduleCapacityProviderStrategyItem> CapacityProviderStrategy;
        /// <summary>
        /// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
        /// </summary>
        public readonly bool? EnableEcsManagedTags;
        /// <summary>
        /// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
        /// </summary>
        public readonly bool? EnableExecuteCommand;
        /// <summary>
        /// Specifies an ECS task group for the task. The maximum length is 255 characters.
        /// </summary>
        public readonly string? Group;
        public readonly Pulumi.AwsNative.Scheduler.ScheduleLaunchType? LaunchType;
        public readonly Outputs.ScheduleNetworkConfiguration? NetworkConfiguration;
        /// <summary>
        /// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
        /// </summary>
        public readonly ImmutableArray<Outputs.SchedulePlacementConstraint> PlacementConstraints;
        /// <summary>
        /// The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
        /// </summary>
        public readonly ImmutableArray<Outputs.SchedulePlacementStrategy> PlacementStrategy;
        /// <summary>
        /// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.
        /// </summary>
        public readonly string? PlatformVersion;
        public readonly Pulumi.AwsNative.Scheduler.SchedulePropagateTags? PropagateTags;
        /// <summary>
        /// The reference ID to use for the task.
        /// </summary>
        public readonly string? ReferenceId;
        /// <summary>
        /// The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see RunTask in the Amazon ECS API Reference.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScheduleTagMap> Tags;
        /// <summary>
        /// The number of tasks to create based on TaskDefinition. The default is 1.
        /// </summary>
        public readonly double? TaskCount;
        /// <summary>
        /// The ARN of the task definition to use if the event target is an Amazon ECS task.
        /// </summary>
        public readonly string TaskDefinitionArn;

        [OutputConstructor]
        private ScheduleEcsParameters(
            ImmutableArray<Outputs.ScheduleCapacityProviderStrategyItem> capacityProviderStrategy,

            bool? enableEcsManagedTags,

            bool? enableExecuteCommand,

            string? group,

            Pulumi.AwsNative.Scheduler.ScheduleLaunchType? launchType,

            Outputs.ScheduleNetworkConfiguration? networkConfiguration,

            ImmutableArray<Outputs.SchedulePlacementConstraint> placementConstraints,

            ImmutableArray<Outputs.SchedulePlacementStrategy> placementStrategy,

            string? platformVersion,

            Pulumi.AwsNative.Scheduler.SchedulePropagateTags? propagateTags,

            string? referenceId,

            ImmutableArray<Outputs.ScheduleTagMap> tags,

            double? taskCount,

            string taskDefinitionArn)
        {
            CapacityProviderStrategy = capacityProviderStrategy;
            EnableEcsManagedTags = enableEcsManagedTags;
            EnableExecuteCommand = enableExecuteCommand;
            Group = group;
            LaunchType = launchType;
            NetworkConfiguration = networkConfiguration;
            PlacementConstraints = placementConstraints;
            PlacementStrategy = placementStrategy;
            PlatformVersion = platformVersion;
            PropagateTags = propagateTags;
            ReferenceId = referenceId;
            Tags = tags;
            TaskCount = taskCount;
            TaskDefinitionArn = taskDefinitionArn;
        }
    }
}
