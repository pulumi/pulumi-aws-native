// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Efs
{
    public static class GetFileSystem
    {
        /// <summary>
        /// The ``AWS::EFS::FileSystem`` resource creates a new, empty file system in EFSlong (EFS). You must create a mount target ([AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html)) to mount your EFS file system on an EC2 or other AWS cloud compute resource.
        /// </summary>
        public static Task<GetFileSystemResult> InvokeAsync(GetFileSystemArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFileSystemResult>("aws-native:efs:getFileSystem", args ?? new GetFileSystemArgs(), options.WithDefaults());

        /// <summary>
        /// The ``AWS::EFS::FileSystem`` resource creates a new, empty file system in EFSlong (EFS). You must create a mount target ([AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html)) to mount your EFS file system on an EC2 or other AWS cloud compute resource.
        /// </summary>
        public static Output<GetFileSystemResult> Invoke(GetFileSystemInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFileSystemResult>("aws-native:efs:getFileSystem", args ?? new GetFileSystemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFileSystemArgs : global::Pulumi.InvokeArgs
    {
        [Input("fileSystemId", required: true)]
        public string FileSystemId { get; set; } = null!;

        public GetFileSystemArgs()
        {
        }
        public static new GetFileSystemArgs Empty => new GetFileSystemArgs();
    }

    public sealed class GetFileSystemInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        public GetFileSystemInvokeArgs()
        {
        }
        public static new GetFileSystemInvokeArgs Empty => new GetFileSystemInvokeArgs();
    }


    [OutputType]
    public sealed class GetFileSystemResult
    {
        public readonly string? Arn;
        /// <summary>
        /// Use the ``BackupPolicy`` to turn automatic backups on or off for the file system.
        /// </summary>
        public readonly Outputs.FileSystemBackupPolicy? BackupPolicy;
        public readonly string? FileSystemId;
        /// <summary>
        /// The ``FileSystemPolicy`` for the EFS file system. A file system policy is an IAM resource policy used to control NFS access to an EFS file system. For more information, see [Using to control NFS access to Amazon EFS](https://docs.aws.amazon.com/efs/latest/ug/iam-access-control-nfs-efs.html) in the *Amazon EFS User Guide*.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::EFS::FileSystem` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? FileSystemPolicy;
        /// <summary>
        /// Describes the protection on the file system.
        /// </summary>
        public readonly Outputs.FileSystemProtection? FileSystemProtection;
        /// <summary>
        /// Use to create one or more tags associated with the file system. Each tag is a user-defined key-value pair. Name your file system on creation by including a ``"Key":"Name","Value":"{value}"`` key-value pair. Each key must be unique. For more information, see [Tagging resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *General Reference Guide*.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> FileSystemTags;
        /// <summary>
        /// An array of ``LifecyclePolicy`` objects that define the file system's ``LifecycleConfiguration`` object. A ``LifecycleConfiguration`` object informs Lifecycle management of the following:
        ///   +  When to move files in the file system from primary storage to IA storage.
        ///   + When to move files in the file system from primary storage or IA storage to Archive storage.
        ///  +  When to move files that are in IA or Archive storage to primary storage.
        ///   
        ///   EFS requires that each ``LifecyclePolicy`` object have only a single transition. This means that in a request body, ``LifecyclePolicies`` needs to be structured as an array of ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive`` ``TransitionToPrimaryStorageClass``. See the example requests in the following section for more information.
        /// </summary>
        public readonly ImmutableArray<Outputs.FileSystemLifecyclePolicy> LifecyclePolicies;
        /// <summary>
        /// The throughput, measured in mebibytes per second (MiBps), that you want to provision for a file system that you're creating. Required if ``ThroughputMode`` is set to ``provisioned``. Valid values are 1-3414 MiBps, with the upper limit depending on Region. To increase this limit, contact SUP. For more information, see [Amazon EFS quotas that you can increase](https://docs.aws.amazon.com/efs/latest/ug/limits.html#soft-limits) in the *Amazon EFS User Guide*.
        /// </summary>
        public readonly double? ProvisionedThroughputInMibps;
        /// <summary>
        /// Describes the replication configuration for a specific file system.
        /// </summary>
        public readonly Outputs.FileSystemReplicationConfiguration? ReplicationConfiguration;
        /// <summary>
        /// Specifies the throughput mode for the file system. The mode can be ``bursting``, ``provisioned``, or ``elastic``. If you set ``ThroughputMode`` to ``provisioned``, you must also set a value for ``ProvisionedThroughputInMibps``. After you create the file system, you can decrease your file system's Provisioned throughput or change between the throughput modes, with certain time restrictions. For more information, see [Specifying throughput with provisioned mode](https://docs.aws.amazon.com/efs/latest/ug/performance.html#provisioned-throughput) in the *Amazon EFS User Guide*. 
        ///  Default is ``bursting``.
        /// </summary>
        public readonly string? ThroughputMode;

        [OutputConstructor]
        private GetFileSystemResult(
            string? arn,

            Outputs.FileSystemBackupPolicy? backupPolicy,

            string? fileSystemId,

            object? fileSystemPolicy,

            Outputs.FileSystemProtection? fileSystemProtection,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> fileSystemTags,

            ImmutableArray<Outputs.FileSystemLifecyclePolicy> lifecyclePolicies,

            double? provisionedThroughputInMibps,

            Outputs.FileSystemReplicationConfiguration? replicationConfiguration,

            string? throughputMode)
        {
            Arn = arn;
            BackupPolicy = backupPolicy;
            FileSystemId = fileSystemId;
            FileSystemPolicy = fileSystemPolicy;
            FileSystemProtection = fileSystemProtection;
            FileSystemTags = fileSystemTags;
            LifecyclePolicies = lifecyclePolicies;
            ProvisionedThroughputInMibps = provisionedThroughputInMibps;
            ReplicationConfiguration = replicationConfiguration;
            ThroughputMode = throughputMode;
        }
    }
}
