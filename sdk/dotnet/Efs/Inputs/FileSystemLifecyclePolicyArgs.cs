// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Efs.Inputs
{

    /// <summary>
    /// Describes a policy used by Lifecycle management that specifies when to transition files into and out of the EFS storage classes. For more information, see [Managing file system storage](https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html).
    ///   + Each ``LifecyclePolicy`` object can have only a single transition. This means that in a request body, ``LifecyclePolicies`` must be structured as an array of ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive``, ``TransitionToPrimaryStorageClass``.
    ///  + See the AWS::EFS::FileSystem examples for the correct ``LifecyclePolicy`` structure. Do not use the syntax shown on this page.
    /// </summary>
    public sealed class FileSystemLifecyclePolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
        /// </summary>
        [Input("transitionToArchive")]
        public Input<string>? TransitionToArchive { get; set; }

        /// <summary>
        /// The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Infrequent Access (IA) storage. Metadata operations such as listing the contents of a directory don't count as file access events.
        /// </summary>
        [Input("transitionToIa")]
        public Input<string>? TransitionToIa { get; set; }

        /// <summary>
        /// Whether to move files back to primary (Standard) storage after they are accessed in IA or Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
        /// </summary>
        [Input("transitionToPrimaryStorageClass")]
        public Input<string>? TransitionToPrimaryStorageClass { get; set; }

        public FileSystemLifecyclePolicyArgs()
        {
        }
        public static new FileSystemLifecyclePolicyArgs Empty => new FileSystemLifecyclePolicyArgs();
    }
}
