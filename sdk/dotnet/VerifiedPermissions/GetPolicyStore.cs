// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.VerifiedPermissions
{
    public static class GetPolicyStore
    {
        /// <summary>
        /// Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
        /// </summary>
        public static Task<GetPolicyStoreResult> InvokeAsync(GetPolicyStoreArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyStoreResult>("aws-native:verifiedpermissions:getPolicyStore", args ?? new GetPolicyStoreArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
        /// </summary>
        public static Output<GetPolicyStoreResult> Invoke(GetPolicyStoreInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyStoreResult>("aws-native:verifiedpermissions:getPolicyStore", args ?? new GetPolicyStoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyStoreArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the new or updated policy store.
        /// </summary>
        [Input("policyStoreId", required: true)]
        public string PolicyStoreId { get; set; } = null!;

        public GetPolicyStoreArgs()
        {
        }
        public static new GetPolicyStoreArgs Empty => new GetPolicyStoreArgs();
    }

    public sealed class GetPolicyStoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the new or updated policy store.
        /// </summary>
        [Input("policyStoreId", required: true)]
        public Input<string> PolicyStoreId { get; set; } = null!;

        public GetPolicyStoreInvokeArgs()
        {
        }
        public static new GetPolicyStoreInvokeArgs Empty => new GetPolicyStoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyStoreResult
    {
        /// <summary>
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// Descriptive text that you can provide to help with identification of the current policy store.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The unique ID of the new or updated policy store.
        /// </summary>
        public readonly string? PolicyStoreId;
        /// <summary>
        /// Contains a list of principal types, resource types, and actions that can be specified in policies stored in the same policy store. If the validation mode for the policy store is set to `STRICT` , then policies that can't be validated by this schema are rejected by Verified Permissions and can't be stored in the policy store.
        /// </summary>
        public readonly Outputs.PolicyStoreSchemaDefinition? Schema;
        /// <summary>
        /// A structure that contains Cedar policy validation settings for the policy store. The validation mode determines which validation failures that Cedar considers serious enough to block acceptance of a new or edited static policy or policy template.
        /// </summary>
        public readonly Outputs.PolicyStoreValidationSettings? ValidationSettings;

        [OutputConstructor]
        private GetPolicyStoreResult(
            string? arn,

            string? description,

            string? policyStoreId,

            Outputs.PolicyStoreSchemaDefinition? schema,

            Outputs.PolicyStoreValidationSettings? validationSettings)
        {
            Arn = arn;
            Description = description;
            PolicyStoreId = policyStoreId;
            Schema = schema;
            ValidationSettings = validationSettings;
        }
    }
}
