// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.VerifiedPermissions
{
    public static class GetPolicyStore
    {
        /// <summary>
        /// Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
        /// </summary>
        public static Task<GetPolicyStoreResult> InvokeAsync(GetPolicyStoreArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyStoreResult>("aws-native:verifiedpermissions:getPolicyStore", args ?? new GetPolicyStoreArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a policy store that you can place schema, policies, and policy templates in to validate authorization requests
        /// </summary>
        public static Output<GetPolicyStoreResult> Invoke(GetPolicyStoreInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyStoreResult>("aws-native:verifiedpermissions:getPolicyStore", args ?? new GetPolicyStoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyStoreArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the new or updated policy store.
        /// </summary>
        [Input("policyStoreId", required: true)]
        public string PolicyStoreId { get; set; } = null!;

        public GetPolicyStoreArgs()
        {
        }
        public static new GetPolicyStoreArgs Empty => new GetPolicyStoreArgs();
    }

    public sealed class GetPolicyStoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the new or updated policy store.
        /// </summary>
        [Input("policyStoreId", required: true)]
        public Input<string> PolicyStoreId { get; set; } = null!;

        public GetPolicyStoreInvokeArgs()
        {
        }
        public static new GetPolicyStoreInvokeArgs Empty => new GetPolicyStoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyStoreResult
    {
        /// <summary>
        /// The [Amazon Resource Name (ARN)](https://docs.aws.amazon.com//general/latest/gr/aws-arns-and-namespaces.html) of the new or updated policy store.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// Descriptive text that you can provide to help with identification of the current policy store.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The unique ID of the new or updated policy store.
        /// </summary>
        public readonly string? PolicyStoreId;
        /// <summary>
        /// Creates or updates the policy schema in a policy store. Cedar can use the schema to validate any Cedar policies and policy templates submitted to the policy store. Any changes to the schema validate only policies and templates submitted after the schema change. Existing policies and templates are not re-evaluated against the changed schema. If you later update a policy, then it is evaluated against the new schema at that time.
        /// </summary>
        public readonly Outputs.PolicyStoreSchemaDefinition? Schema;
        /// <summary>
        /// Specifies the validation setting for this policy store.
        /// 
        /// Currently, the only valid and required value is `Mode` .
        /// 
        /// &gt; We recommend that you turn on `STRICT` mode only after you define a schema. If a schema doesn't exist, then `STRICT` mode causes any policy to fail validation, and Verified Permissions rejects the policy. You can turn off validation by using the [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) . Then, when you have a schema defined, use [UpdatePolicyStore](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore) again to turn validation back on.
        /// </summary>
        public readonly Outputs.PolicyStoreValidationSettings? ValidationSettings;

        [OutputConstructor]
        private GetPolicyStoreResult(
            string? arn,

            string? description,

            string? policyStoreId,

            Outputs.PolicyStoreSchemaDefinition? schema,

            Outputs.PolicyStoreValidationSettings? validationSettings)
        {
            Arn = arn;
            Description = description;
            PolicyStoreId = policyStoreId;
            Schema = schema;
            ValidationSettings = validationSettings;
        }
    }
}
