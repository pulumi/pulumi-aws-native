// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.VerifiedPermissions
{
    public static class GetIdentitySource
    {
        /// <summary>
        /// Definition of AWS::VerifiedPermissions::IdentitySource Resource Type
        /// </summary>
        public static Task<GetIdentitySourceResult> InvokeAsync(GetIdentitySourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIdentitySourceResult>("aws-native:verifiedpermissions:getIdentitySource", args ?? new GetIdentitySourceArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::VerifiedPermissions::IdentitySource Resource Type
        /// </summary>
        public static Output<GetIdentitySourceResult> Invoke(GetIdentitySourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIdentitySourceResult>("aws-native:verifiedpermissions:getIdentitySource", args ?? new GetIdentitySourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIdentitySourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the new or updated identity store.
        /// </summary>
        [Input("identitySourceId", required: true)]
        public string IdentitySourceId { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.
        /// </summary>
        [Input("policyStoreId", required: true)]
        public string PolicyStoreId { get; set; } = null!;

        public GetIdentitySourceArgs()
        {
        }
        public static new GetIdentitySourceArgs Empty => new GetIdentitySourceArgs();
    }

    public sealed class GetIdentitySourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the new or updated identity store.
        /// </summary>
        [Input("identitySourceId", required: true)]
        public Input<string> IdentitySourceId { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.
        /// </summary>
        [Input("policyStoreId", required: true)]
        public Input<string> PolicyStoreId { get; set; } = null!;

        public GetIdentitySourceInvokeArgs()
        {
        }
        public static new GetIdentitySourceInvokeArgs Empty => new GetIdentitySourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetIdentitySourceResult
    {
        /// <summary>
        /// Contains configuration information used when creating a new identity source.
        /// </summary>
        public readonly Union<Outputs.IdentitySourceConfiguration0Properties, Outputs.IdentitySourceConfiguration1Properties>? Configuration;
        public readonly Outputs.IdentitySourceDetails? Details;
        /// <summary>
        /// The unique ID of the new or updated identity store.
        /// </summary>
        public readonly string? IdentitySourceId;
        /// <summary>
        /// Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.
        /// </summary>
        public readonly string? PrincipalEntityType;

        [OutputConstructor]
        private GetIdentitySourceResult(
            Union<Outputs.IdentitySourceConfiguration0Properties, Outputs.IdentitySourceConfiguration1Properties>? configuration,

            Outputs.IdentitySourceDetails? details,

            string? identitySourceId,

            string? principalEntityType)
        {
            Configuration = configuration;
            Details = details;
            IdentitySourceId = identitySourceId;
            PrincipalEntityType = principalEntityType;
        }
    }
}
