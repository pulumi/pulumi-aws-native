// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.VerifiedPermissions
{
    /// <summary>
    /// Definition of AWS::VerifiedPermissions::Policy Resource Type
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var policyStoreId = config.Require("policyStoreId");
    ///     var description = config.Require("description");
    ///     var statement = config.Require("statement");
    ///     var staticPolicy = new AwsNative.VerifiedPermissions.Policy("staticPolicy", new()
    ///     {
    ///         PolicyStoreId = policyStoreId,
    ///         Definition = 
    ///         {
    ///             { "static", new AwsNative.VerifiedPermissions.Inputs.PolicyStaticPolicyDefinitionArgs
    ///             {
    ///                 Description = description,
    ///                 Statement = statement,
    ///             } },
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["policyId"] = staticPolicy.PolicyId,
    ///     };
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var policyStoreId = config.Require("policyStoreId");
    ///     var policyTemplateId = config.Require("policyTemplateId");
    ///     var principalType = config.Require("principalType");
    ///     var principalId = config.Require("principalId");
    ///     var resourceType = config.Require("resourceType");
    ///     var resourceId = config.Require("resourceId");
    ///     var templateLinkedPolicy = new AwsNative.VerifiedPermissions.Policy("templateLinkedPolicy", new()
    ///     {
    ///         PolicyStoreId = policyStoreId,
    ///         Definition = 
    ///         {
    ///             { "templateLinked", new AwsNative.VerifiedPermissions.Inputs.PolicyTemplateLinkedPolicyDefinitionArgs
    ///             {
    ///                 PolicyTemplateId = policyTemplateId,
    ///                 Principal = new AwsNative.VerifiedPermissions.Inputs.PolicyEntityIdentifierArgs
    ///                 {
    ///                     EntityType = principalType,
    ///                     EntityId = principalId,
    ///                 },
    ///                 Resource = new AwsNative.VerifiedPermissions.Inputs.PolicyEntityIdentifierArgs
    ///                 {
    ///                     EntityType = resourceType,
    ///                     EntityId = resourceId,
    ///                 },
    ///             } },
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["policyId"] = templateLinkedPolicy.PolicyId,
    ///     };
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:verifiedpermissions:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A structure that defines a Cedar policy. It includes the policy type, a description, and a policy body. This is a top level data type used to create a policy.
        /// 
        /// This data type is used as a request parameter for the [CreatePolicy](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicy.html) operation. This structure must always have either an `Static` or a `TemplateLinked` element.
        /// </summary>
        [Output("definition")]
        public Output<Union<Outputs.PolicyDefinition0Properties, Outputs.PolicyDefinition1Properties>> Definition { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the new or updated policy.
        /// </summary>
        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the `PolicyStoreId` of the policy store you want to store the policy in.
        /// </summary>
        [Output("policyStoreId")]
        public Output<string> PolicyStoreId { get; private set; } = null!;

        /// <summary>
        /// The type of the policy. This is one of the following values:
        /// 
        /// - Static
        /// - TemplateLinked
        /// </summary>
        [Output("policyType")]
        public Output<Pulumi.AwsNative.VerifiedPermissions.PolicyType> PolicyType { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("aws-native:verifiedpermissions:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:verifiedpermissions:Policy", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "policyStoreId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A structure that defines a Cedar policy. It includes the policy type, a description, and a policy body. This is a top level data type used to create a policy.
        /// 
        /// This data type is used as a request parameter for the [CreatePolicy](https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicy.html) operation. This structure must always have either an `Static` or a `TemplateLinked` element.
        /// </summary>
        [Input("definition", required: true)]
        public InputUnion<Inputs.PolicyDefinition0PropertiesArgs, Inputs.PolicyDefinition1PropertiesArgs> Definition { get; set; } = null!;

        /// <summary>
        /// Specifies the `PolicyStoreId` of the policy store you want to store the policy in.
        /// </summary>
        [Input("policyStoreId", required: true)]
        public Input<string> PolicyStoreId { get; set; } = null!;

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }
}
