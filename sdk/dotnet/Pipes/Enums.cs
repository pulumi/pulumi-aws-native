// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Pipes
{
    [EnumType]
    public readonly struct PipeAssignPublicIp : IEquatable<PipeAssignPublicIp>
    {
        private readonly string _value;

        private PipeAssignPublicIp(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeAssignPublicIp Enabled { get; } = new PipeAssignPublicIp("ENABLED");
        public static PipeAssignPublicIp Disabled { get; } = new PipeAssignPublicIp("DISABLED");

        public static bool operator ==(PipeAssignPublicIp left, PipeAssignPublicIp right) => left.Equals(right);
        public static bool operator !=(PipeAssignPublicIp left, PipeAssignPublicIp right) => !left.Equals(right);

        public static explicit operator string(PipeAssignPublicIp value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeAssignPublicIp other && Equals(other);
        public bool Equals(PipeAssignPublicIp other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeBatchJobDependencyType : IEquatable<PipeBatchJobDependencyType>
    {
        private readonly string _value;

        private PipeBatchJobDependencyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeBatchJobDependencyType NToN { get; } = new PipeBatchJobDependencyType("N_TO_N");
        public static PipeBatchJobDependencyType Sequential { get; } = new PipeBatchJobDependencyType("SEQUENTIAL");

        public static bool operator ==(PipeBatchJobDependencyType left, PipeBatchJobDependencyType right) => left.Equals(right);
        public static bool operator !=(PipeBatchJobDependencyType left, PipeBatchJobDependencyType right) => !left.Equals(right);

        public static explicit operator string(PipeBatchJobDependencyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeBatchJobDependencyType other && Equals(other);
        public bool Equals(PipeBatchJobDependencyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeBatchResourceRequirementType : IEquatable<PipeBatchResourceRequirementType>
    {
        private readonly string _value;

        private PipeBatchResourceRequirementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeBatchResourceRequirementType Gpu { get; } = new PipeBatchResourceRequirementType("GPU");
        public static PipeBatchResourceRequirementType Memory { get; } = new PipeBatchResourceRequirementType("MEMORY");
        public static PipeBatchResourceRequirementType Vcpu { get; } = new PipeBatchResourceRequirementType("VCPU");

        public static bool operator ==(PipeBatchResourceRequirementType left, PipeBatchResourceRequirementType right) => left.Equals(right);
        public static bool operator !=(PipeBatchResourceRequirementType left, PipeBatchResourceRequirementType right) => !left.Equals(right);

        public static explicit operator string(PipeBatchResourceRequirementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeBatchResourceRequirementType other && Equals(other);
        public bool Equals(PipeBatchResourceRequirementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeDynamoDbStreamStartPosition : IEquatable<PipeDynamoDbStreamStartPosition>
    {
        private readonly string _value;

        private PipeDynamoDbStreamStartPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeDynamoDbStreamStartPosition TrimHorizon { get; } = new PipeDynamoDbStreamStartPosition("TRIM_HORIZON");
        public static PipeDynamoDbStreamStartPosition Latest { get; } = new PipeDynamoDbStreamStartPosition("LATEST");

        public static bool operator ==(PipeDynamoDbStreamStartPosition left, PipeDynamoDbStreamStartPosition right) => left.Equals(right);
        public static bool operator !=(PipeDynamoDbStreamStartPosition left, PipeDynamoDbStreamStartPosition right) => !left.Equals(right);

        public static explicit operator string(PipeDynamoDbStreamStartPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeDynamoDbStreamStartPosition other && Equals(other);
        public bool Equals(PipeDynamoDbStreamStartPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeEcsEnvironmentFileType : IEquatable<PipeEcsEnvironmentFileType>
    {
        private readonly string _value;

        private PipeEcsEnvironmentFileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeEcsEnvironmentFileType S3 { get; } = new PipeEcsEnvironmentFileType("s3");

        public static bool operator ==(PipeEcsEnvironmentFileType left, PipeEcsEnvironmentFileType right) => left.Equals(right);
        public static bool operator !=(PipeEcsEnvironmentFileType left, PipeEcsEnvironmentFileType right) => !left.Equals(right);

        public static explicit operator string(PipeEcsEnvironmentFileType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeEcsEnvironmentFileType other && Equals(other);
        public bool Equals(PipeEcsEnvironmentFileType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeEcsResourceRequirementType : IEquatable<PipeEcsResourceRequirementType>
    {
        private readonly string _value;

        private PipeEcsResourceRequirementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeEcsResourceRequirementType Gpu { get; } = new PipeEcsResourceRequirementType("GPU");
        public static PipeEcsResourceRequirementType InferenceAccelerator { get; } = new PipeEcsResourceRequirementType("InferenceAccelerator");

        public static bool operator ==(PipeEcsResourceRequirementType left, PipeEcsResourceRequirementType right) => left.Equals(right);
        public static bool operator !=(PipeEcsResourceRequirementType left, PipeEcsResourceRequirementType right) => !left.Equals(right);

        public static explicit operator string(PipeEcsResourceRequirementType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeEcsResourceRequirementType other && Equals(other);
        public bool Equals(PipeEcsResourceRequirementType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeIncludeExecutionDataOption : IEquatable<PipeIncludeExecutionDataOption>
    {
        private readonly string _value;

        private PipeIncludeExecutionDataOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeIncludeExecutionDataOption All { get; } = new PipeIncludeExecutionDataOption("ALL");

        public static bool operator ==(PipeIncludeExecutionDataOption left, PipeIncludeExecutionDataOption right) => left.Equals(right);
        public static bool operator !=(PipeIncludeExecutionDataOption left, PipeIncludeExecutionDataOption right) => !left.Equals(right);

        public static explicit operator string(PipeIncludeExecutionDataOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeIncludeExecutionDataOption other && Equals(other);
        public bool Equals(PipeIncludeExecutionDataOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeKinesisStreamStartPosition : IEquatable<PipeKinesisStreamStartPosition>
    {
        private readonly string _value;

        private PipeKinesisStreamStartPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeKinesisStreamStartPosition TrimHorizon { get; } = new PipeKinesisStreamStartPosition("TRIM_HORIZON");
        public static PipeKinesisStreamStartPosition Latest { get; } = new PipeKinesisStreamStartPosition("LATEST");
        public static PipeKinesisStreamStartPosition AtTimestamp { get; } = new PipeKinesisStreamStartPosition("AT_TIMESTAMP");

        public static bool operator ==(PipeKinesisStreamStartPosition left, PipeKinesisStreamStartPosition right) => left.Equals(right);
        public static bool operator !=(PipeKinesisStreamStartPosition left, PipeKinesisStreamStartPosition right) => !left.Equals(right);

        public static explicit operator string(PipeKinesisStreamStartPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeKinesisStreamStartPosition other && Equals(other);
        public bool Equals(PipeKinesisStreamStartPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeLaunchType : IEquatable<PipeLaunchType>
    {
        private readonly string _value;

        private PipeLaunchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeLaunchType Ec2 { get; } = new PipeLaunchType("EC2");
        public static PipeLaunchType Fargate { get; } = new PipeLaunchType("FARGATE");
        public static PipeLaunchType External { get; } = new PipeLaunchType("EXTERNAL");

        public static bool operator ==(PipeLaunchType left, PipeLaunchType right) => left.Equals(right);
        public static bool operator !=(PipeLaunchType left, PipeLaunchType right) => !left.Equals(right);

        public static explicit operator string(PipeLaunchType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeLaunchType other && Equals(other);
        public bool Equals(PipeLaunchType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeLogLevel : IEquatable<PipeLogLevel>
    {
        private readonly string _value;

        private PipeLogLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeLogLevel Off { get; } = new PipeLogLevel("OFF");
        public static PipeLogLevel Error { get; } = new PipeLogLevel("ERROR");
        public static PipeLogLevel Info { get; } = new PipeLogLevel("INFO");
        public static PipeLogLevel Trace { get; } = new PipeLogLevel("TRACE");

        public static bool operator ==(PipeLogLevel left, PipeLogLevel right) => left.Equals(right);
        public static bool operator !=(PipeLogLevel left, PipeLogLevel right) => !left.Equals(right);

        public static explicit operator string(PipeLogLevel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeLogLevel other && Equals(other);
        public bool Equals(PipeLogLevel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeMskStartPosition : IEquatable<PipeMskStartPosition>
    {
        private readonly string _value;

        private PipeMskStartPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeMskStartPosition TrimHorizon { get; } = new PipeMskStartPosition("TRIM_HORIZON");
        public static PipeMskStartPosition Latest { get; } = new PipeMskStartPosition("LATEST");

        public static bool operator ==(PipeMskStartPosition left, PipeMskStartPosition right) => left.Equals(right);
        public static bool operator !=(PipeMskStartPosition left, PipeMskStartPosition right) => !left.Equals(right);

        public static explicit operator string(PipeMskStartPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeMskStartPosition other && Equals(other);
        public bool Equals(PipeMskStartPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeOnPartialBatchItemFailureStreams : IEquatable<PipeOnPartialBatchItemFailureStreams>
    {
        private readonly string _value;

        private PipeOnPartialBatchItemFailureStreams(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeOnPartialBatchItemFailureStreams AutomaticBisect { get; } = new PipeOnPartialBatchItemFailureStreams("AUTOMATIC_BISECT");

        public static bool operator ==(PipeOnPartialBatchItemFailureStreams left, PipeOnPartialBatchItemFailureStreams right) => left.Equals(right);
        public static bool operator !=(PipeOnPartialBatchItemFailureStreams left, PipeOnPartialBatchItemFailureStreams right) => !left.Equals(right);

        public static explicit operator string(PipeOnPartialBatchItemFailureStreams value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeOnPartialBatchItemFailureStreams other && Equals(other);
        public bool Equals(PipeOnPartialBatchItemFailureStreams other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipePlacementConstraintType : IEquatable<PipePlacementConstraintType>
    {
        private readonly string _value;

        private PipePlacementConstraintType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipePlacementConstraintType DistinctInstance { get; } = new PipePlacementConstraintType("distinctInstance");
        public static PipePlacementConstraintType MemberOf { get; } = new PipePlacementConstraintType("memberOf");

        public static bool operator ==(PipePlacementConstraintType left, PipePlacementConstraintType right) => left.Equals(right);
        public static bool operator !=(PipePlacementConstraintType left, PipePlacementConstraintType right) => !left.Equals(right);

        public static explicit operator string(PipePlacementConstraintType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipePlacementConstraintType other && Equals(other);
        public bool Equals(PipePlacementConstraintType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipePlacementStrategyType : IEquatable<PipePlacementStrategyType>
    {
        private readonly string _value;

        private PipePlacementStrategyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipePlacementStrategyType Random { get; } = new PipePlacementStrategyType("random");
        public static PipePlacementStrategyType Spread { get; } = new PipePlacementStrategyType("spread");
        public static PipePlacementStrategyType Binpack { get; } = new PipePlacementStrategyType("binpack");

        public static bool operator ==(PipePlacementStrategyType left, PipePlacementStrategyType right) => left.Equals(right);
        public static bool operator !=(PipePlacementStrategyType left, PipePlacementStrategyType right) => !left.Equals(right);

        public static explicit operator string(PipePlacementStrategyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipePlacementStrategyType other && Equals(other);
        public bool Equals(PipePlacementStrategyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipePropagateTags : IEquatable<PipePropagateTags>
    {
        private readonly string _value;

        private PipePropagateTags(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipePropagateTags TaskDefinition { get; } = new PipePropagateTags("TASK_DEFINITION");

        public static bool operator ==(PipePropagateTags left, PipePropagateTags right) => left.Equals(right);
        public static bool operator !=(PipePropagateTags left, PipePropagateTags right) => !left.Equals(right);

        public static explicit operator string(PipePropagateTags value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipePropagateTags other && Equals(other);
        public bool Equals(PipePropagateTags other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeRequestedPipeState : IEquatable<PipeRequestedPipeState>
    {
        private readonly string _value;

        private PipeRequestedPipeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeRequestedPipeState Running { get; } = new PipeRequestedPipeState("RUNNING");
        public static PipeRequestedPipeState Stopped { get; } = new PipeRequestedPipeState("STOPPED");

        public static bool operator ==(PipeRequestedPipeState left, PipeRequestedPipeState right) => left.Equals(right);
        public static bool operator !=(PipeRequestedPipeState left, PipeRequestedPipeState right) => !left.Equals(right);

        public static explicit operator string(PipeRequestedPipeState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeRequestedPipeState other && Equals(other);
        public bool Equals(PipeRequestedPipeState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeS3OutputFormat : IEquatable<PipeS3OutputFormat>
    {
        private readonly string _value;

        private PipeS3OutputFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeS3OutputFormat Json { get; } = new PipeS3OutputFormat("json");
        public static PipeS3OutputFormat Plain { get; } = new PipeS3OutputFormat("plain");
        public static PipeS3OutputFormat W3c { get; } = new PipeS3OutputFormat("w3c");

        public static bool operator ==(PipeS3OutputFormat left, PipeS3OutputFormat right) => left.Equals(right);
        public static bool operator !=(PipeS3OutputFormat left, PipeS3OutputFormat right) => !left.Equals(right);

        public static explicit operator string(PipeS3OutputFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeS3OutputFormat other && Equals(other);
        public bool Equals(PipeS3OutputFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeSelfManagedKafkaStartPosition : IEquatable<PipeSelfManagedKafkaStartPosition>
    {
        private readonly string _value;

        private PipeSelfManagedKafkaStartPosition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeSelfManagedKafkaStartPosition TrimHorizon { get; } = new PipeSelfManagedKafkaStartPosition("TRIM_HORIZON");
        public static PipeSelfManagedKafkaStartPosition Latest { get; } = new PipeSelfManagedKafkaStartPosition("LATEST");

        public static bool operator ==(PipeSelfManagedKafkaStartPosition left, PipeSelfManagedKafkaStartPosition right) => left.Equals(right);
        public static bool operator !=(PipeSelfManagedKafkaStartPosition left, PipeSelfManagedKafkaStartPosition right) => !left.Equals(right);

        public static explicit operator string(PipeSelfManagedKafkaStartPosition value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeSelfManagedKafkaStartPosition other && Equals(other);
        public bool Equals(PipeSelfManagedKafkaStartPosition other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeState : IEquatable<PipeState>
    {
        private readonly string _value;

        private PipeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeState Running { get; } = new PipeState("RUNNING");
        public static PipeState Stopped { get; } = new PipeState("STOPPED");
        public static PipeState Creating { get; } = new PipeState("CREATING");
        public static PipeState Updating { get; } = new PipeState("UPDATING");
        public static PipeState Deleting { get; } = new PipeState("DELETING");
        public static PipeState Starting { get; } = new PipeState("STARTING");
        public static PipeState Stopping { get; } = new PipeState("STOPPING");
        public static PipeState CreateFailed { get; } = new PipeState("CREATE_FAILED");
        public static PipeState UpdateFailed { get; } = new PipeState("UPDATE_FAILED");
        public static PipeState StartFailed { get; } = new PipeState("START_FAILED");
        public static PipeState StopFailed { get; } = new PipeState("STOP_FAILED");
        public static PipeState DeleteFailed { get; } = new PipeState("DELETE_FAILED");
        public static PipeState CreateRollbackFailed { get; } = new PipeState("CREATE_ROLLBACK_FAILED");
        public static PipeState DeleteRollbackFailed { get; } = new PipeState("DELETE_ROLLBACK_FAILED");
        public static PipeState UpdateRollbackFailed { get; } = new PipeState("UPDATE_ROLLBACK_FAILED");

        public static bool operator ==(PipeState left, PipeState right) => left.Equals(right);
        public static bool operator !=(PipeState left, PipeState right) => !left.Equals(right);

        public static explicit operator string(PipeState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeState other && Equals(other);
        public bool Equals(PipeState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PipeTargetInvocationType : IEquatable<PipeTargetInvocationType>
    {
        private readonly string _value;

        private PipeTargetInvocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipeTargetInvocationType RequestResponse { get; } = new PipeTargetInvocationType("REQUEST_RESPONSE");
        public static PipeTargetInvocationType FireAndForget { get; } = new PipeTargetInvocationType("FIRE_AND_FORGET");

        public static bool operator ==(PipeTargetInvocationType left, PipeTargetInvocationType right) => left.Equals(right);
        public static bool operator !=(PipeTargetInvocationType left, PipeTargetInvocationType right) => !left.Equals(right);

        public static explicit operator string(PipeTargetInvocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipeTargetInvocationType other && Equals(other);
        public bool Equals(PipeTargetInvocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
