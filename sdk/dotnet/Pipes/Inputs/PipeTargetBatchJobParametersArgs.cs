// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Pipes.Inputs
{

    public sealed class PipeTargetBatchJobParametersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.
        /// </summary>
        [Input("arrayProperties")]
        public Input<Inputs.PipeBatchArrayPropertiesArgs>? ArrayProperties { get; set; }

        /// <summary>
        /// The overrides that are sent to a container.
        /// </summary>
        [Input("containerOverrides")]
        public Input<Inputs.PipeBatchContainerOverridesArgs>? ContainerOverrides { get; set; }

        [Input("dependsOn")]
        private InputList<Inputs.PipeBatchJobDependencyArgs>? _dependsOn;

        /// <summary>
        /// A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a `SEQUENTIAL` type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an `N_TO_N` type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.
        /// </summary>
        public InputList<Inputs.PipeBatchJobDependencyArgs> DependsOn
        {
            get => _dependsOn ?? (_dependsOn = new InputList<Inputs.PipeBatchJobDependencyArgs>());
            set => _dependsOn = value;
        }

        /// <summary>
        /// The job definition used by this job. This value can be one of `name` , `name:revision` , or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
        /// </summary>
        [Input("jobDefinition", required: true)]
        public Input<string> JobDefinition { get; set; } = null!;

        /// <summary>
        /// The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        /// </summary>
        [Input("jobName", required: true)]
        public Input<string> JobName { get; set; } = null!;

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
        /// </summary>
        [Input("retryStrategy")]
        public Input<Inputs.PipeBatchRetryStrategyArgs>? RetryStrategy { get; set; }

        public PipeTargetBatchJobParametersArgs()
        {
        }
        public static new PipeTargetBatchJobParametersArgs Empty => new PipeTargetBatchJobParametersArgs();
    }
}
