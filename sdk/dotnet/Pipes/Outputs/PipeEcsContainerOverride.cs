// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Pipes.Outputs
{

    [OutputType]
    public sealed class PipeEcsContainerOverride
    {
        /// <summary>
        /// The command to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
        /// </summary>
        public readonly ImmutableArray<string> Command;
        /// <summary>
        /// The number of `cpu` units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
        /// </summary>
        public readonly int? Cpu;
        /// <summary>
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipeEcsEnvironmentVariable> Environment;
        /// <summary>
        /// A list of files containing the environment variables to pass to a container, instead of the value from the container definition.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipeEcsEnvironmentFile> EnvironmentFiles;
        /// <summary>
        /// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
        /// </summary>
        public readonly int? Memory;
        /// <summary>
        /// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
        /// </summary>
        public readonly int? MemoryReservation;
        /// <summary>
        /// The name of the container that receives the override. This parameter is required if any override is specified.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipeEcsResourceRequirement> ResourceRequirements;

        [OutputConstructor]
        private PipeEcsContainerOverride(
            ImmutableArray<string> command,

            int? cpu,

            ImmutableArray<Outputs.PipeEcsEnvironmentVariable> environment,

            ImmutableArray<Outputs.PipeEcsEnvironmentFile> environmentFiles,

            int? memory,

            int? memoryReservation,

            string? name,

            ImmutableArray<Outputs.PipeEcsResourceRequirement> resourceRequirements)
        {
            Command = command;
            Cpu = cpu;
            Environment = environment;
            EnvironmentFiles = environmentFiles;
            Memory = memory;
            MemoryReservation = memoryReservation;
            Name = name;
            ResourceRequirements = resourceRequirements;
        }
    }
}
