// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Pipes.Outputs
{

    [OutputType]
    public sealed class PipeSourceManagedStreamingKafkaParameters
    {
        /// <summary>
        /// The maximum number of records to include in each batch.
        /// </summary>
        public readonly int? BatchSize;
        /// <summary>
        /// The name of the destination queue to consume.
        /// </summary>
        public readonly string? ConsumerGroupId;
        /// <summary>
        /// The credentials needed to access the resource.
        /// </summary>
        public readonly Union<Outputs.PipeMskAccessCredentials0Properties, Outputs.PipeMskAccessCredentials1Properties>? Credentials;
        /// <summary>
        /// The maximum length of a time to wait for events.
        /// </summary>
        public readonly int? MaximumBatchingWindowInSeconds;
        /// <summary>
        /// (Streams only) The position in a stream from which to start reading.
        /// </summary>
        public readonly Pulumi.AwsNative.Pipes.PipeMskStartPosition? StartingPosition;
        /// <summary>
        /// The name of the topic that the pipe will read from.
        /// </summary>
        public readonly string TopicName;

        [OutputConstructor]
        private PipeSourceManagedStreamingKafkaParameters(
            int? batchSize,

            string? consumerGroupId,

            Union<Outputs.PipeMskAccessCredentials0Properties, Outputs.PipeMskAccessCredentials1Properties>? credentials,

            int? maximumBatchingWindowInSeconds,

            Pulumi.AwsNative.Pipes.PipeMskStartPosition? startingPosition,

            string topicName)
        {
            BatchSize = batchSize;
            ConsumerGroupId = consumerGroupId;
            Credentials = credentials;
            MaximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds;
            StartingPosition = startingPosition;
            TopicName = topicName;
        }
    }
}
