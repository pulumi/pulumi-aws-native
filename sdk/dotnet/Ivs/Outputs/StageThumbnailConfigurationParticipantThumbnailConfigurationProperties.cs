// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ivs.Outputs
{

    /// <summary>
    /// An object representing a configuration of thumbnails for recorded video from an individual participant.
    /// </summary>
    [OutputType]
    public sealed class StageThumbnailConfigurationParticipantThumbnailConfigurationProperties
    {
        /// <summary>
        /// Thumbnail recording mode. Default: DISABLED.
        /// </summary>
        public readonly Pulumi.AwsNative.Ivs.StageThumbnailConfigurationParticipantThumbnailConfigurationPropertiesRecordingMode? RecordingMode;
        /// <summary>
        /// Indicates the format in which thumbnails are recorded. SEQUENTIAL records all generated thumbnails in a serial manner, to the media/thumbnails/high directory. LATEST saves the latest thumbnail in media/latest_thumbnail/high/thumb.jpg and overwrites it at the interval specified by targetIntervalSeconds. You can enable both SEQUENTIAL and LATEST. Default: SEQUENTIAL.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Ivs.StageThumbnailConfigurationParticipantThumbnailConfigurationPropertiesStorageItem> Storage;
        /// <summary>
        /// The targeted thumbnail-generation interval in seconds. This is configurable only if recordingMode is INTERVAL. Default: 60.
        /// </summary>
        public readonly int? TargetIntervalSeconds;

        [OutputConstructor]
        private StageThumbnailConfigurationParticipantThumbnailConfigurationProperties(
            Pulumi.AwsNative.Ivs.StageThumbnailConfigurationParticipantThumbnailConfigurationPropertiesRecordingMode? recordingMode,

            ImmutableArray<Pulumi.AwsNative.Ivs.StageThumbnailConfigurationParticipantThumbnailConfigurationPropertiesStorageItem> storage,

            int? targetIntervalSeconds)
        {
            RecordingMode = recordingMode;
            Storage = storage;
            TargetIntervalSeconds = targetIntervalSeconds;
        }
    }
}
