// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Route53RecoveryControl
{
    /// <summary>
    /// Resource schema for AWS Route53 Recovery Control basic constructs and validation rules.
    /// </summary>
    [AwsNativeResourceType("aws-native:route53recoverycontrol:SafetyRule")]
    public partial class SafetyRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is `On` after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
        /// </summary>
        [Output("assertionRule")]
        public Output<Outputs.SafetyRuleAssertionRule?> AssertionRule { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the control panel.
        /// </summary>
        [Output("controlPanelArn")]
        public Output<string?> ControlPanelArn { get; private set; } = null!;

        /// <summary>
        /// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.
        /// 
        /// For example, if you specify one gating routing control and you set the `Type` in the rule configuration to `OR` , that indicates that you must set the gating routing control to `On` for the rule to evaluate as true; that is, for the gating control switch to be On. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
        /// </summary>
        [Output("gatingRule")]
        public Output<Outputs.SafetyRuleGatingRule?> GatingRule { get; private set; } = null!;

        /// <summary>
        /// The name of the assertion rule. The name must be unique within a control panel. You can use any non-white space character in the name except the following: &amp; &gt; &lt; ' (single quote) " (double quote) ; (semicolon)
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be `ON` as the result of a transaction. For example, if you have three assertion controls, you might specify `ATLEAST 2` for your rule configuration. This means that at least two assertion controls must be `ON` , so that at least two AWS Regions have traffic flowing to them.
        /// </summary>
        [Output("ruleConfig")]
        public Output<Outputs.SafetyRuleRuleConfig?> RuleConfig { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the safety rule.
        /// </summary>
        [Output("safetyRuleArn")]
        public Output<string> SafetyRuleArn { get; private set; } = null!;

        /// <summary>
        /// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        /// </summary>
        [Output("status")]
        public Output<Pulumi.AwsNative.Route53RecoveryControl.SafetyRuleStatus> Status { get; private set; } = null!;

        /// <summary>
        /// A collection of tags associated with a resource
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.CreateOnlyTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a SafetyRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SafetyRule(string name, SafetyRuleArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:route53recoverycontrol:SafetyRule", name, args ?? new SafetyRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SafetyRule(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:route53recoverycontrol:SafetyRule", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "controlPanelArn",
                    "ruleConfig",
                    "tags[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SafetyRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SafetyRule Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SafetyRule(name, id, options);
        }
    }

    public sealed class SafetyRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is `On` after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
        /// </summary>
        [Input("assertionRule")]
        public Input<Inputs.SafetyRuleAssertionRuleArgs>? AssertionRule { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the control panel.
        /// </summary>
        [Input("controlPanelArn")]
        public Input<string>? ControlPanelArn { get; set; }

        /// <summary>
        /// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.
        /// 
        /// For example, if you specify one gating routing control and you set the `Type` in the rule configuration to `OR` , that indicates that you must set the gating routing control to `On` for the rule to evaluate as true; that is, for the gating control switch to be On. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
        /// </summary>
        [Input("gatingRule")]
        public Input<Inputs.SafetyRuleGatingRuleArgs>? GatingRule { get; set; }

        /// <summary>
        /// The name of the assertion rule. The name must be unique within a control panel. You can use any non-white space character in the name except the following: &amp; &gt; &lt; ' (single quote) " (double quote) ; (semicolon)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The criteria that you set for specific assertion controls (routing controls) that designate how many control states must be `ON` as the result of a transaction. For example, if you have three assertion controls, you might specify `ATLEAST 2` for your rule configuration. This means that at least two assertion controls must be `ON` , so that at least two AWS Regions have traffic flowing to them.
        /// </summary>
        [Input("ruleConfig")]
        public Input<Inputs.SafetyRuleRuleConfigArgs>? RuleConfig { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs>? _tags;

        /// <summary>
        /// A collection of tags associated with a resource
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs>());
            set => _tags = value;
        }

        public SafetyRuleArgs()
        {
        }
        public static new SafetyRuleArgs Empty => new SafetyRuleArgs();
    }
}
