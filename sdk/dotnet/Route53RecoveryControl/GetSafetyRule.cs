// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Route53RecoveryControl
{
    public static class GetSafetyRule
    {
        /// <summary>
        /// Resource schema for AWS Route53 Recovery Control basic constructs and validation rules.
        /// </summary>
        public static Task<GetSafetyRuleResult> InvokeAsync(GetSafetyRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSafetyRuleResult>("aws-native:route53recoverycontrol:getSafetyRule", args ?? new GetSafetyRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS Route53 Recovery Control basic constructs and validation rules.
        /// </summary>
        public static Output<GetSafetyRuleResult> Invoke(GetSafetyRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSafetyRuleResult>("aws-native:route53recoverycontrol:getSafetyRule", args ?? new GetSafetyRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSafetyRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the safety rule.
        /// </summary>
        [Input("safetyRuleArn", required: true)]
        public string SafetyRuleArn { get; set; } = null!;

        public GetSafetyRuleArgs()
        {
        }
        public static new GetSafetyRuleArgs Empty => new GetSafetyRuleArgs();
    }

    public sealed class GetSafetyRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the safety rule.
        /// </summary>
        [Input("safetyRuleArn", required: true)]
        public Input<string> SafetyRuleArn { get; set; } = null!;

        public GetSafetyRuleInvokeArgs()
        {
        }
        public static new GetSafetyRuleInvokeArgs Empty => new GetSafetyRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetSafetyRuleResult
    {
        /// <summary>
        /// An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is `On` after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.
        /// </summary>
        public readonly Outputs.SafetyRuleAssertionRule? AssertionRule;
        /// <summary>
        /// A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.
        /// 
        /// For example, if you specify one gating routing control and you set the `Type` in the rule configuration to `OR` , that indicates that you must set the gating routing control to `On` for the rule to evaluate as true; that is, for the gating control switch to be On. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.
        /// </summary>
        public readonly Outputs.SafetyRuleGatingRule? GatingRule;
        /// <summary>
        /// The name of the assertion rule. The name must be unique within a control panel. You can use any non-white space character in the name except the following: &amp; &gt; &lt; ' (single quote) " (double quote) ; (semicolon)
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the safety rule.
        /// </summary>
        public readonly string? SafetyRuleArn;
        /// <summary>
        /// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        /// </summary>
        public readonly Pulumi.AwsNative.Route53RecoveryControl.SafetyRuleStatus? Status;

        [OutputConstructor]
        private GetSafetyRuleResult(
            Outputs.SafetyRuleAssertionRule? assertionRule,

            Outputs.SafetyRuleGatingRule? gatingRule,

            string? name,

            string? safetyRuleArn,

            Pulumi.AwsNative.Route53RecoveryControl.SafetyRuleStatus? status)
        {
            AssertionRule = assertionRule;
            GatingRule = gatingRule;
            Name = name;
            SafetyRuleArn = safetyRuleArn;
            Status = status;
        }
    }
}
