// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Route53RecoveryControl
{
    /// <summary>
    /// Deployment status of a resource. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
    /// </summary>
    [EnumType]
    public readonly struct ClusterStatus : IEquatable<ClusterStatus>
    {
        private readonly string _value;

        private ClusterStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClusterStatus Pending { get; } = new ClusterStatus("PENDING");
        public static ClusterStatus Deployed { get; } = new ClusterStatus("DEPLOYED");
        public static ClusterStatus PendingDeletion { get; } = new ClusterStatus("PENDING_DELETION");

        public static bool operator ==(ClusterStatus left, ClusterStatus right) => left.Equals(right);
        public static bool operator !=(ClusterStatus left, ClusterStatus right) => !left.Equals(right);

        public static explicit operator string(ClusterStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClusterStatus other && Equals(other);
        public bool Equals(ClusterStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment status of control panel. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
    /// </summary>
    [EnumType]
    public readonly struct ControlPanelStatus : IEquatable<ControlPanelStatus>
    {
        private readonly string _value;

        private ControlPanelStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ControlPanelStatus Pending { get; } = new ControlPanelStatus("PENDING");
        public static ControlPanelStatus Deployed { get; } = new ControlPanelStatus("DEPLOYED");
        public static ControlPanelStatus PendingDeletion { get; } = new ControlPanelStatus("PENDING_DELETION");

        public static bool operator ==(ControlPanelStatus left, ControlPanelStatus right) => left.Equals(right);
        public static bool operator !=(ControlPanelStatus left, ControlPanelStatus right) => !left.Equals(right);

        public static explicit operator string(ControlPanelStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ControlPanelStatus other && Equals(other);
        public bool Equals(ControlPanelStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
    /// </summary>
    [EnumType]
    public readonly struct RoutingControlStatus : IEquatable<RoutingControlStatus>
    {
        private readonly string _value;

        private RoutingControlStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RoutingControlStatus Pending { get; } = new RoutingControlStatus("PENDING");
        public static RoutingControlStatus Deployed { get; } = new RoutingControlStatus("DEPLOYED");
        public static RoutingControlStatus PendingDeletion { get; } = new RoutingControlStatus("PENDING_DELETION");

        public static bool operator ==(RoutingControlStatus left, RoutingControlStatus right) => left.Equals(right);
        public static bool operator !=(RoutingControlStatus left, RoutingControlStatus right) => !left.Equals(right);

        public static explicit operator string(RoutingControlStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RoutingControlStatus other && Equals(other);
        public bool Equals(RoutingControlStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A rule can be one of the following: ATLEAST, AND, or OR.
    /// </summary>
    [EnumType]
    public readonly struct SafetyRuleRuleType : IEquatable<SafetyRuleRuleType>
    {
        private readonly string _value;

        private SafetyRuleRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SafetyRuleRuleType And { get; } = new SafetyRuleRuleType("AND");
        public static SafetyRuleRuleType Or { get; } = new SafetyRuleRuleType("OR");
        public static SafetyRuleRuleType Atleast { get; } = new SafetyRuleRuleType("ATLEAST");

        public static bool operator ==(SafetyRuleRuleType left, SafetyRuleRuleType right) => left.Equals(right);
        public static bool operator !=(SafetyRuleRuleType left, SafetyRuleRuleType right) => !left.Equals(right);

        public static explicit operator string(SafetyRuleRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SafetyRuleRuleType other && Equals(other);
        public bool Equals(SafetyRuleRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The deployment status of the routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
    /// </summary>
    [EnumType]
    public readonly struct SafetyRuleStatus : IEquatable<SafetyRuleStatus>
    {
        private readonly string _value;

        private SafetyRuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SafetyRuleStatus Pending { get; } = new SafetyRuleStatus("PENDING");
        public static SafetyRuleStatus Deployed { get; } = new SafetyRuleStatus("DEPLOYED");
        public static SafetyRuleStatus PendingDeletion { get; } = new SafetyRuleStatus("PENDING_DELETION");

        public static bool operator ==(SafetyRuleStatus left, SafetyRuleStatus right) => left.Equals(right);
        public static bool operator !=(SafetyRuleStatus left, SafetyRuleStatus right) => !left.Equals(right);

        public static explicit operator string(SafetyRuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SafetyRuleStatus other && Equals(other);
        public bool Equals(SafetyRuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
