// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.ElastiCache
{
    /// <summary>
    /// Indicates the role of the member, primary or secondary.
    /// </summary>
    [EnumType]
    public readonly struct GlobalReplicationGroupMemberRole : IEquatable<GlobalReplicationGroupMemberRole>
    {
        private readonly string _value;

        private GlobalReplicationGroupMemberRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GlobalReplicationGroupMemberRole Primary { get; } = new GlobalReplicationGroupMemberRole("PRIMARY");
        public static GlobalReplicationGroupMemberRole Secondary { get; } = new GlobalReplicationGroupMemberRole("SECONDARY");

        public static bool operator ==(GlobalReplicationGroupMemberRole left, GlobalReplicationGroupMemberRole right) => left.Equals(right);
        public static bool operator !=(GlobalReplicationGroupMemberRole left, GlobalReplicationGroupMemberRole right) => !left.Equals(right);

        public static explicit operator string(GlobalReplicationGroupMemberRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GlobalReplicationGroupMemberRole other && Equals(other);
        public bool Equals(GlobalReplicationGroupMemberRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Must be redis.
    /// </summary>
    [EnumType]
    public readonly struct UserEngine : IEquatable<UserEngine>
    {
        private readonly string _value;

        private UserEngine(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserEngine Redis { get; } = new UserEngine("redis");

        public static bool operator ==(UserEngine left, UserEngine right) => left.Equals(right);
        public static bool operator !=(UserEngine left, UserEngine right) => !left.Equals(right);

        public static explicit operator string(UserEngine value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserEngine other && Equals(other);
        public bool Equals(UserEngine other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Must be redis.
    /// </summary>
    [EnumType]
    public readonly struct UserGroupEngine : IEquatable<UserGroupEngine>
    {
        private readonly string _value;

        private UserGroupEngine(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserGroupEngine Redis { get; } = new UserGroupEngine("redis");

        public static bool operator ==(UserGroupEngine left, UserGroupEngine right) => left.Equals(right);
        public static bool operator !=(UserGroupEngine left, UserGroupEngine right) => !left.Equals(right);

        public static explicit operator string(UserGroupEngine value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserGroupEngine other && Equals(other);
        public bool Equals(UserGroupEngine other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
