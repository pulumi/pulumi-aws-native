// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ElastiCache
{
    public static class GetCacheCluster
    {
        /// <summary>
        /// Resource Type definition for AWS::ElastiCache::CacheCluster
        /// </summary>
        public static Task<GetCacheClusterResult> InvokeAsync(GetCacheClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCacheClusterResult>("aws-native:elasticache:getCacheCluster", args ?? new GetCacheClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::ElastiCache::CacheCluster
        /// </summary>
        public static Output<GetCacheClusterResult> Invoke(GetCacheClusterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCacheClusterResult>("aws-native:elasticache:getCacheCluster", args ?? new GetCacheClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCacheClusterArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCacheClusterArgs()
        {
        }
    }

    public sealed class GetCacheClusterInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCacheClusterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCacheClusterResult
    {
        public readonly string? AZMode;
        public readonly bool? AutoMinorVersionUpgrade;
        public readonly string? CacheNodeType;
        public readonly string? CacheParameterGroupName;
        public readonly ImmutableArray<string> CacheSecurityGroupNames;
        public readonly string? ConfigurationEndpointAddress;
        public readonly string? ConfigurationEndpointPort;
        public readonly string? EngineVersion;
        public readonly string? Id;
        public readonly ImmutableArray<Outputs.CacheClusterLogDeliveryConfigurationRequest> LogDeliveryConfigurations;
        public readonly string? NotificationTopicArn;
        public readonly int? NumCacheNodes;
        public readonly string? PreferredAvailabilityZone;
        public readonly ImmutableArray<string> PreferredAvailabilityZones;
        public readonly string? PreferredMaintenanceWindow;
        public readonly string? RedisEndpointAddress;
        public readonly string? RedisEndpointPort;
        public readonly int? SnapshotRetentionLimit;
        public readonly string? SnapshotWindow;
        public readonly ImmutableArray<Outputs.CacheClusterTag> Tags;
        public readonly ImmutableArray<string> VpcSecurityGroupIds;

        [OutputConstructor]
        private GetCacheClusterResult(
            string? aZMode,

            bool? autoMinorVersionUpgrade,

            string? cacheNodeType,

            string? cacheParameterGroupName,

            ImmutableArray<string> cacheSecurityGroupNames,

            string? configurationEndpointAddress,

            string? configurationEndpointPort,

            string? engineVersion,

            string? id,

            ImmutableArray<Outputs.CacheClusterLogDeliveryConfigurationRequest> logDeliveryConfigurations,

            string? notificationTopicArn,

            int? numCacheNodes,

            string? preferredAvailabilityZone,

            ImmutableArray<string> preferredAvailabilityZones,

            string? preferredMaintenanceWindow,

            string? redisEndpointAddress,

            string? redisEndpointPort,

            int? snapshotRetentionLimit,

            string? snapshotWindow,

            ImmutableArray<Outputs.CacheClusterTag> tags,

            ImmutableArray<string> vpcSecurityGroupIds)
        {
            AZMode = aZMode;
            AutoMinorVersionUpgrade = autoMinorVersionUpgrade;
            CacheNodeType = cacheNodeType;
            CacheParameterGroupName = cacheParameterGroupName;
            CacheSecurityGroupNames = cacheSecurityGroupNames;
            ConfigurationEndpointAddress = configurationEndpointAddress;
            ConfigurationEndpointPort = configurationEndpointPort;
            EngineVersion = engineVersion;
            Id = id;
            LogDeliveryConfigurations = logDeliveryConfigurations;
            NotificationTopicArn = notificationTopicArn;
            NumCacheNodes = numCacheNodes;
            PreferredAvailabilityZone = preferredAvailabilityZone;
            PreferredAvailabilityZones = preferredAvailabilityZones;
            PreferredMaintenanceWindow = preferredMaintenanceWindow;
            RedisEndpointAddress = redisEndpointAddress;
            RedisEndpointPort = redisEndpointPort;
            SnapshotRetentionLimit = snapshotRetentionLimit;
            SnapshotWindow = snapshotWindow;
            Tags = tags;
            VpcSecurityGroupIds = vpcSecurityGroupIds;
        }
    }
}
