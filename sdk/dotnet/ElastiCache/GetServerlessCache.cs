// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ElastiCache
{
    public static class GetServerlessCache
    {
        /// <summary>
        /// The AWS::ElastiCache::ServerlessCache resource creates an Amazon ElastiCache Serverless Cache.
        /// </summary>
        public static Task<GetServerlessCacheResult> InvokeAsync(GetServerlessCacheArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerlessCacheResult>("aws-native:elasticache:getServerlessCache", args ?? new GetServerlessCacheArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::ElastiCache::ServerlessCache resource creates an Amazon ElastiCache Serverless Cache.
        /// </summary>
        public static Output<GetServerlessCacheResult> Invoke(GetServerlessCacheInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerlessCacheResult>("aws-native:elasticache:getServerlessCache", args ?? new GetServerlessCacheInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerlessCacheArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Serverless Cache. This value must be unique.
        /// </summary>
        [Input("serverlessCacheName", required: true)]
        public string ServerlessCacheName { get; set; } = null!;

        public GetServerlessCacheArgs()
        {
        }
        public static new GetServerlessCacheArgs Empty => new GetServerlessCacheArgs();
    }

    public sealed class GetServerlessCacheInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Serverless Cache. This value must be unique.
        /// </summary>
        [Input("serverlessCacheName", required: true)]
        public Input<string> ServerlessCacheName { get; set; } = null!;

        public GetServerlessCacheInvokeArgs()
        {
        }
        public static new GetServerlessCacheInvokeArgs Empty => new GetServerlessCacheInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerlessCacheResult
    {
        /// <summary>
        /// The ARN of the Serverless Cache.
        /// </summary>
        public readonly string? Arn;
        public readonly Outputs.ServerlessCacheCacheUsageLimits? CacheUsageLimits;
        /// <summary>
        /// The creation time of the Serverless Cache.
        /// </summary>
        public readonly string? CreateTime;
        /// <summary>
        /// The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
        /// </summary>
        public readonly string? DailySnapshotTime;
        /// <summary>
        /// The description of the Serverless Cache.
        /// </summary>
        public readonly string? Description;
        public readonly Outputs.ServerlessCacheEndpoint? Endpoint;
        /// <summary>
        /// The full engine version of the Serverless Cache.
        /// </summary>
        public readonly string? FullEngineVersion;
        public readonly Outputs.ServerlessCacheEndpoint? ReaderEndpoint;
        /// <summary>
        /// One or more Amazon VPC security groups associated with this Serverless Cache.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// The snapshot retention limit of the Serverless Cache.
        /// </summary>
        public readonly int? SnapshotRetentionLimit;
        /// <summary>
        /// The status of the Serverless Cache.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// An array of key-value pairs to apply to this Serverless Cache.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServerlessCacheTag> Tags;
        /// <summary>
        /// The ID of the user group.
        /// </summary>
        public readonly string? UserGroupId;

        [OutputConstructor]
        private GetServerlessCacheResult(
            string? arn,

            Outputs.ServerlessCacheCacheUsageLimits? cacheUsageLimits,

            string? createTime,

            string? dailySnapshotTime,

            string? description,

            Outputs.ServerlessCacheEndpoint? endpoint,

            string? fullEngineVersion,

            Outputs.ServerlessCacheEndpoint? readerEndpoint,

            ImmutableArray<string> securityGroupIds,

            int? snapshotRetentionLimit,

            string? status,

            ImmutableArray<Outputs.ServerlessCacheTag> tags,

            string? userGroupId)
        {
            Arn = arn;
            CacheUsageLimits = cacheUsageLimits;
            CreateTime = createTime;
            DailySnapshotTime = dailySnapshotTime;
            Description = description;
            Endpoint = endpoint;
            FullEngineVersion = fullEngineVersion;
            ReaderEndpoint = readerEndpoint;
            SecurityGroupIds = securityGroupIds;
            SnapshotRetentionLimit = snapshotRetentionLimit;
            Status = status;
            Tags = tags;
            UserGroupId = userGroupId;
        }
    }
}
