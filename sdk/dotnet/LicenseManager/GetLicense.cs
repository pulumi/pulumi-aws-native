// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.LicenseManager
{
    public static class GetLicense
    {
        /// <summary>
        /// Resource Type definition for AWS::LicenseManager::License
        /// </summary>
        public static Task<GetLicenseResult> InvokeAsync(GetLicenseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLicenseResult>("aws-native:licensemanager:getLicense", args ?? new GetLicenseArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::LicenseManager::License
        /// </summary>
        public static Output<GetLicenseResult> Invoke(GetLicenseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLicenseResult>("aws-native:licensemanager:getLicense", args ?? new GetLicenseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLicenseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Amazon Resource Name is a unique name for each resource.
        /// </summary>
        [Input("licenseArn", required: true)]
        public string LicenseArn { get; set; } = null!;

        public GetLicenseArgs()
        {
        }
        public static new GetLicenseArgs Empty => new GetLicenseArgs();
    }

    public sealed class GetLicenseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Amazon Resource Name is a unique name for each resource.
        /// </summary>
        [Input("licenseArn", required: true)]
        public Input<string> LicenseArn { get; set; } = null!;

        public GetLicenseInvokeArgs()
        {
        }
        public static new GetLicenseInvokeArgs Empty => new GetLicenseInvokeArgs();
    }


    [OutputType]
    public sealed class GetLicenseResult
    {
        /// <summary>
        /// Beneficiary of the license.
        /// </summary>
        public readonly string? Beneficiary;
        /// <summary>
        /// Details about a consumption configuration.
        /// </summary>
        public readonly Outputs.LicenseConsumptionConfiguration? ConsumptionConfiguration;
        /// <summary>
        /// Describes a resource entitled for use with a license.
        /// </summary>
        public readonly ImmutableArray<Outputs.LicenseEntitlement> Entitlements;
        /// <summary>
        /// Home region for the created license.
        /// </summary>
        public readonly string? HomeRegion;
        /// <summary>
        /// Details associated with the issuer of a license.
        /// </summary>
        public readonly Outputs.LicenseIssuerData? Issuer;
        /// <summary>
        /// Amazon Resource Name is a unique name for each resource.
        /// </summary>
        public readonly string? LicenseArn;
        /// <summary>
        /// Describes key/value pairs.
        /// </summary>
        public readonly ImmutableArray<Outputs.LicenseMetadata> LicenseMetadata;
        /// <summary>
        /// Name for the created license.
        /// </summary>
        public readonly string? LicenseName;
        /// <summary>
        /// Product name for the created license.
        /// </summary>
        public readonly string? ProductName;
        /// <summary>
        /// ProductSKU of the license.
        /// </summary>
        public readonly string? ProductSku;
        /// <summary>
        /// Date and time range during which the license is valid, in ISO8601-UTC format.
        /// </summary>
        public readonly Outputs.LicenseValidityDateFormat? Validity;
        /// <summary>
        /// The version of the license.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetLicenseResult(
            string? beneficiary,

            Outputs.LicenseConsumptionConfiguration? consumptionConfiguration,

            ImmutableArray<Outputs.LicenseEntitlement> entitlements,

            string? homeRegion,

            Outputs.LicenseIssuerData? issuer,

            string? licenseArn,

            ImmutableArray<Outputs.LicenseMetadata> licenseMetadata,

            string? licenseName,

            string? productName,

            string? productSku,

            Outputs.LicenseValidityDateFormat? validity,

            string? version)
        {
            Beneficiary = beneficiary;
            ConsumptionConfiguration = consumptionConfiguration;
            Entitlements = entitlements;
            HomeRegion = homeRegion;
            Issuer = issuer;
            LicenseArn = licenseArn;
            LicenseMetadata = licenseMetadata;
            LicenseName = licenseName;
            ProductName = productName;
            ProductSku = productSku;
            Validity = validity;
            Version = version;
        }
    }
}
