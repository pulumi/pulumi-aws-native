// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.S3Tables
{
    public static class GetTable
    {
        /// <summary>
        /// Resource Type definition for AWS::S3Tables::Table
        /// </summary>
        public static Task<GetTableResult> InvokeAsync(GetTableArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTableResult>("aws-native:s3tables:getTable", args ?? new GetTableArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::S3Tables::Table
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableResult>("aws-native:s3tables:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::S3Tables::Table
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTableResult>("aws-native:s3tables:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTableArgs : global::Pulumi.InvokeArgs
    {
        [Input("tableArn", required: true)]
        public string TableArn { get; set; } = null!;

        public GetTableArgs()
        {
        }
        public static new GetTableArgs Empty => new GetTableArgs();
    }

    public sealed class GetTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("tableArn", required: true)]
        public Input<string> TableArn { get; set; } = null!;

        public GetTableInvokeArgs()
        {
        }
        public static new GetTableInvokeArgs Empty => new GetTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetTableResult
    {
        public readonly Outputs.TableCompaction? Compaction;
        public readonly string? Namespace;
        public readonly Outputs.TableSnapshotManagement? SnapshotManagement;
        public readonly string? TableArn;
        public readonly string? TableName;
        public readonly string? VersionToken;
        public readonly string? WarehouseLocation;

        [OutputConstructor]
        private GetTableResult(
            Outputs.TableCompaction? compaction,

            string? @namespace,

            Outputs.TableSnapshotManagement? snapshotManagement,

            string? tableArn,

            string? tableName,

            string? versionToken,

            string? warehouseLocation)
        {
            Compaction = compaction;
            Namespace = @namespace;
            SnapshotManagement = snapshotManagement;
            TableArn = tableArn;
            TableName = tableName;
            VersionToken = versionToken;
            WarehouseLocation = warehouseLocation;
        }
    }
}
