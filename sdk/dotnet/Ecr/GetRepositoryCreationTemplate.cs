// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ecr
{
    public static class GetRepositoryCreationTemplate
    {
        /// <summary>
        /// AWS::ECR::RepositoryCreationTemplate is used to create repository with configuration from a pre-defined template.
        /// </summary>
        public static Task<GetRepositoryCreationTemplateResult> InvokeAsync(GetRepositoryCreationTemplateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryCreationTemplateResult>("aws-native:ecr:getRepositoryCreationTemplate", args ?? new GetRepositoryCreationTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// AWS::ECR::RepositoryCreationTemplate is used to create repository with configuration from a pre-defined template.
        /// </summary>
        public static Output<GetRepositoryCreationTemplateResult> Invoke(GetRepositoryCreationTemplateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryCreationTemplateResult>("aws-native:ecr:getRepositoryCreationTemplate", args ?? new GetRepositoryCreationTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryCreationTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The prefix use to match the repository name and apply the template.
        /// </summary>
        [Input("prefix", required: true)]
        public string Prefix { get; set; } = null!;

        public GetRepositoryCreationTemplateArgs()
        {
        }
        public static new GetRepositoryCreationTemplateArgs Empty => new GetRepositoryCreationTemplateArgs();
    }

    public sealed class GetRepositoryCreationTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The prefix use to match the repository name and apply the template.
        /// </summary>
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public GetRepositoryCreationTemplateInvokeArgs()
        {
        }
        public static new GetRepositoryCreationTemplateInvokeArgs Empty => new GetRepositoryCreationTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryCreationTemplateResult
    {
        /// <summary>
        /// A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Ecr.RepositoryCreationTemplateAppliedForItem> AppliedFor;
        /// <summary>
        /// Create timestamp of the template.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// The ARN of the role to be assumed by ECR. This role must be in the same account as the registry that you are configuring.
        /// </summary>
        public readonly string? CustomRoleArn;
        /// <summary>
        /// The description of the template.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
        /// 
        /// By default, when no encryption configuration is set or the `AES256` encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
        /// 
        /// For more control over the encryption of the contents of your repository, you can use server-side encryption with AWS Key Management Service key stored in AWS Key Management Service ( AWS KMS ) to encrypt your images. For more information, see [Amazon ECR encryption at rest](https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html) in the *Amazon Elastic Container Registry User Guide* .
        /// </summary>
        public readonly Outputs.RepositoryCreationTemplateEncryptionConfiguration? EncryptionConfiguration;
        /// <summary>
        /// The image tag mutability setting for the repository.
        /// </summary>
        public readonly Pulumi.AwsNative.Ecr.RepositoryCreationTemplateImageTagMutability? ImageTagMutability;
        /// <summary>
        /// The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
        /// </summary>
        public readonly string? LifecyclePolicy;
        /// <summary>
        /// The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
        /// </summary>
        public readonly string? RepositoryPolicy;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.RepositoryCreationTemplateTag> ResourceTags;
        /// <summary>
        /// Update timestamp of the template.
        /// </summary>
        public readonly string? UpdatedAt;

        [OutputConstructor]
        private GetRepositoryCreationTemplateResult(
            ImmutableArray<Pulumi.AwsNative.Ecr.RepositoryCreationTemplateAppliedForItem> appliedFor,

            string? createdAt,

            string? customRoleArn,

            string? description,

            Outputs.RepositoryCreationTemplateEncryptionConfiguration? encryptionConfiguration,

            Pulumi.AwsNative.Ecr.RepositoryCreationTemplateImageTagMutability? imageTagMutability,

            string? lifecyclePolicy,

            string? repositoryPolicy,

            ImmutableArray<Outputs.RepositoryCreationTemplateTag> resourceTags,

            string? updatedAt)
        {
            AppliedFor = appliedFor;
            CreatedAt = createdAt;
            CustomRoleArn = customRoleArn;
            Description = description;
            EncryptionConfiguration = encryptionConfiguration;
            ImageTagMutability = imageTagMutability;
            LifecyclePolicy = lifecyclePolicy;
            RepositoryPolicy = repositoryPolicy;
            ResourceTags = resourceTags;
            UpdatedAt = updatedAt;
        }
    }
}
