// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Ecr
{
    /// <summary>
    /// The type associated with the filter.
    /// </summary>
    [EnumType]
    public readonly struct RegistryScanningConfigurationFilterType : IEquatable<RegistryScanningConfigurationFilterType>
    {
        private readonly string _value;

        private RegistryScanningConfigurationFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistryScanningConfigurationFilterType Wildcard { get; } = new RegistryScanningConfigurationFilterType("WILDCARD");

        public static bool operator ==(RegistryScanningConfigurationFilterType left, RegistryScanningConfigurationFilterType right) => left.Equals(right);
        public static bool operator !=(RegistryScanningConfigurationFilterType left, RegistryScanningConfigurationFilterType right) => !left.Equals(right);

        public static explicit operator string(RegistryScanningConfigurationFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistryScanningConfigurationFilterType other && Equals(other);
        public bool Equals(RegistryScanningConfigurationFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The frequency that scans are performed.
    /// </summary>
    [EnumType]
    public readonly struct RegistryScanningConfigurationScanFrequency : IEquatable<RegistryScanningConfigurationScanFrequency>
    {
        private readonly string _value;

        private RegistryScanningConfigurationScanFrequency(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistryScanningConfigurationScanFrequency ScanOnPush { get; } = new RegistryScanningConfigurationScanFrequency("SCAN_ON_PUSH");
        public static RegistryScanningConfigurationScanFrequency ContinuousScan { get; } = new RegistryScanningConfigurationScanFrequency("CONTINUOUS_SCAN");

        public static bool operator ==(RegistryScanningConfigurationScanFrequency left, RegistryScanningConfigurationScanFrequency right) => left.Equals(right);
        public static bool operator !=(RegistryScanningConfigurationScanFrequency left, RegistryScanningConfigurationScanFrequency right) => !left.Equals(right);

        public static explicit operator string(RegistryScanningConfigurationScanFrequency value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistryScanningConfigurationScanFrequency other && Equals(other);
        public bool Equals(RegistryScanningConfigurationScanFrequency other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of scanning configured for the registry.
    /// </summary>
    [EnumType]
    public readonly struct RegistryScanningConfigurationScanType : IEquatable<RegistryScanningConfigurationScanType>
    {
        private readonly string _value;

        private RegistryScanningConfigurationScanType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistryScanningConfigurationScanType Basic { get; } = new RegistryScanningConfigurationScanType("BASIC");
        public static RegistryScanningConfigurationScanType Enhanced { get; } = new RegistryScanningConfigurationScanType("ENHANCED");

        public static bool operator ==(RegistryScanningConfigurationScanType left, RegistryScanningConfigurationScanType right) => left.Equals(right);
        public static bool operator !=(RegistryScanningConfigurationScanType left, RegistryScanningConfigurationScanType right) => !left.Equals(right);

        public static explicit operator string(RegistryScanningConfigurationScanType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistryScanningConfigurationScanType other && Equals(other);
        public bool Equals(RegistryScanningConfigurationScanType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of repository filter
    /// </summary>
    [EnumType]
    public readonly struct ReplicationConfigurationFilterType : IEquatable<ReplicationConfigurationFilterType>
    {
        private readonly string _value;

        private ReplicationConfigurationFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ReplicationConfigurationFilterType PrefixMatch { get; } = new ReplicationConfigurationFilterType("PREFIX_MATCH");

        public static bool operator ==(ReplicationConfigurationFilterType left, ReplicationConfigurationFilterType right) => left.Equals(right);
        public static bool operator !=(ReplicationConfigurationFilterType left, ReplicationConfigurationFilterType right) => !left.Equals(right);

        public static explicit operator string(ReplicationConfigurationFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ReplicationConfigurationFilterType other && Equals(other);
        public bool Equals(ReplicationConfigurationFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enumerable Strings representing the repository creation scenarios that the template will apply towards.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryCreationTemplateAppliedForItem : IEquatable<RepositoryCreationTemplateAppliedForItem>
    {
        private readonly string _value;

        private RepositoryCreationTemplateAppliedForItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepositoryCreationTemplateAppliedForItem Replication { get; } = new RepositoryCreationTemplateAppliedForItem("REPLICATION");
        public static RepositoryCreationTemplateAppliedForItem PullThroughCache { get; } = new RepositoryCreationTemplateAppliedForItem("PULL_THROUGH_CACHE");

        public static bool operator ==(RepositoryCreationTemplateAppliedForItem left, RepositoryCreationTemplateAppliedForItem right) => left.Equals(right);
        public static bool operator !=(RepositoryCreationTemplateAppliedForItem left, RepositoryCreationTemplateAppliedForItem right) => !left.Equals(right);

        public static explicit operator string(RepositoryCreationTemplateAppliedForItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryCreationTemplateAppliedForItem other && Equals(other);
        public bool Equals(RepositoryCreationTemplateAppliedForItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The encryption type to use.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryCreationTemplateEncryptionType : IEquatable<RepositoryCreationTemplateEncryptionType>
    {
        private readonly string _value;

        private RepositoryCreationTemplateEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepositoryCreationTemplateEncryptionType Aes256 { get; } = new RepositoryCreationTemplateEncryptionType("AES256");
        public static RepositoryCreationTemplateEncryptionType Kms { get; } = new RepositoryCreationTemplateEncryptionType("KMS");
        public static RepositoryCreationTemplateEncryptionType KmsDsse { get; } = new RepositoryCreationTemplateEncryptionType("KMS_DSSE");

        public static bool operator ==(RepositoryCreationTemplateEncryptionType left, RepositoryCreationTemplateEncryptionType right) => left.Equals(right);
        public static bool operator !=(RepositoryCreationTemplateEncryptionType left, RepositoryCreationTemplateEncryptionType right) => !left.Equals(right);

        public static explicit operator string(RepositoryCreationTemplateEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryCreationTemplateEncryptionType other && Equals(other);
        public bool Equals(RepositoryCreationTemplateEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryCreationTemplateImageTagMutability : IEquatable<RepositoryCreationTemplateImageTagMutability>
    {
        private readonly string _value;

        private RepositoryCreationTemplateImageTagMutability(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepositoryCreationTemplateImageTagMutability Mutable { get; } = new RepositoryCreationTemplateImageTagMutability("MUTABLE");
        public static RepositoryCreationTemplateImageTagMutability Immutable { get; } = new RepositoryCreationTemplateImageTagMutability("IMMUTABLE");
        public static RepositoryCreationTemplateImageTagMutability ImmutableWithExclusion { get; } = new RepositoryCreationTemplateImageTagMutability("IMMUTABLE_WITH_EXCLUSION");
        public static RepositoryCreationTemplateImageTagMutability MutableWithExclusion { get; } = new RepositoryCreationTemplateImageTagMutability("MUTABLE_WITH_EXCLUSION");

        public static bool operator ==(RepositoryCreationTemplateImageTagMutability left, RepositoryCreationTemplateImageTagMutability right) => left.Equals(right);
        public static bool operator !=(RepositoryCreationTemplateImageTagMutability left, RepositoryCreationTemplateImageTagMutability right) => !left.Equals(right);

        public static explicit operator string(RepositoryCreationTemplateImageTagMutability value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryCreationTemplateImageTagMutability other && Equals(other);
        public bool Equals(RepositoryCreationTemplateImageTagMutability other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType : IEquatable<RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType>
    {
        private readonly string _value;

        private RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType Wildcard { get; } = new RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType("WILDCARD");

        public static bool operator ==(RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType left, RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType right) => left.Equals(right);
        public static bool operator !=(RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType left, RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType right) => !left.Equals(right);

        public static explicit operator string(RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType other && Equals(other);
        public bool Equals(RepositoryCreationTemplateImageTagMutabilityExclusionFilterImageTagMutabilityExclusionFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The encryption type to use.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryEncryptionType : IEquatable<RepositoryEncryptionType>
    {
        private readonly string _value;

        private RepositoryEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepositoryEncryptionType Aes256 { get; } = new RepositoryEncryptionType("AES256");
        public static RepositoryEncryptionType Kms { get; } = new RepositoryEncryptionType("KMS");
        public static RepositoryEncryptionType KmsDsse { get; } = new RepositoryEncryptionType("KMS_DSSE");

        public static bool operator ==(RepositoryEncryptionType left, RepositoryEncryptionType right) => left.Equals(right);
        public static bool operator !=(RepositoryEncryptionType left, RepositoryEncryptionType right) => !left.Equals(right);

        public static explicit operator string(RepositoryEncryptionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryEncryptionType other && Equals(other);
        public bool Equals(RepositoryEncryptionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tag mutability setting for the repository. If this parameter is omitted, the default setting of ``MUTABLE`` will be used which will allow image tags to be overwritten. If ``IMMUTABLE`` is specified, all image tags within the repository will be immutable which will prevent them from being overwritten.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryImageTagMutability : IEquatable<RepositoryImageTagMutability>
    {
        private readonly string _value;

        private RepositoryImageTagMutability(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepositoryImageTagMutability Mutable { get; } = new RepositoryImageTagMutability("MUTABLE");
        public static RepositoryImageTagMutability Immutable { get; } = new RepositoryImageTagMutability("IMMUTABLE");
        public static RepositoryImageTagMutability MutableWithExclusion { get; } = new RepositoryImageTagMutability("MUTABLE_WITH_EXCLUSION");
        public static RepositoryImageTagMutability ImmutableWithExclusion { get; } = new RepositoryImageTagMutability("IMMUTABLE_WITH_EXCLUSION");

        public static bool operator ==(RepositoryImageTagMutability left, RepositoryImageTagMutability right) => left.Equals(right);
        public static bool operator !=(RepositoryImageTagMutability left, RepositoryImageTagMutability right) => !left.Equals(right);

        public static explicit operator string(RepositoryImageTagMutability value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryImageTagMutability other && Equals(other);
        public bool Equals(RepositoryImageTagMutability other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of filter to use for excluding image tags from the repository's mutability setting.
    /// </summary>
    [EnumType]
    public readonly struct RepositoryImageTagMutabilityExclusionFilterType : IEquatable<RepositoryImageTagMutabilityExclusionFilterType>
    {
        private readonly string _value;

        private RepositoryImageTagMutabilityExclusionFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RepositoryImageTagMutabilityExclusionFilterType Wildcard { get; } = new RepositoryImageTagMutabilityExclusionFilterType("WILDCARD");

        public static bool operator ==(RepositoryImageTagMutabilityExclusionFilterType left, RepositoryImageTagMutabilityExclusionFilterType right) => left.Equals(right);
        public static bool operator !=(RepositoryImageTagMutabilityExclusionFilterType left, RepositoryImageTagMutabilityExclusionFilterType right) => !left.Equals(right);

        public static explicit operator string(RepositoryImageTagMutabilityExclusionFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RepositoryImageTagMutabilityExclusionFilterType other && Equals(other);
        public bool Equals(RepositoryImageTagMutabilityExclusionFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
