// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Timestream
{
    public static class GetScheduledQuery
    {
        /// <summary>
        /// The AWS::Timestream::ScheduledQuery resource creates a Timestream Scheduled Query.
        /// </summary>
        public static Task<GetScheduledQueryResult> InvokeAsync(GetScheduledQueryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetScheduledQueryResult>("aws-native:timestream:getScheduledQuery", args ?? new GetScheduledQueryArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::Timestream::ScheduledQuery resource creates a Timestream Scheduled Query.
        /// </summary>
        public static Output<GetScheduledQueryResult> Invoke(GetScheduledQueryInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetScheduledQueryResult>("aws-native:timestream:getScheduledQuery", args ?? new GetScheduledQueryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScheduledQueryArgs : Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetScheduledQueryArgs()
        {
        }
    }

    public sealed class GetScheduledQueryInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetScheduledQueryInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetScheduledQueryResult
    {
        public readonly string? Arn;
        /// <summary>
        /// Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
        /// </summary>
        public readonly string? SQErrorReportConfiguration;
        /// <summary>
        /// The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/. If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
        /// </summary>
        public readonly string? SQKmsKeyId;
        /// <summary>
        /// The name of the scheduled query. Scheduled query names must be unique within each Region.
        /// </summary>
        public readonly string? SQName;
        /// <summary>
        /// Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
        /// </summary>
        public readonly string? SQNotificationConfiguration;
        /// <summary>
        /// The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
        /// </summary>
        public readonly string? SQQueryString;
        /// <summary>
        /// Configuration for when the scheduled query is executed.
        /// </summary>
        public readonly string? SQScheduleConfiguration;
        /// <summary>
        /// The ARN for the IAM role that Timestream will assume when running the scheduled query.
        /// </summary>
        public readonly string? SQScheduledQueryExecutionRoleArn;
        /// <summary>
        /// Configuration of target store where scheduled query results are written to.
        /// </summary>
        public readonly string? SQTargetConfiguration;
        public readonly ImmutableArray<Outputs.ScheduledQueryTag> Tags;

        [OutputConstructor]
        private GetScheduledQueryResult(
            string? arn,

            string? sQErrorReportConfiguration,

            string? sQKmsKeyId,

            string? sQName,

            string? sQNotificationConfiguration,

            string? sQQueryString,

            string? sQScheduleConfiguration,

            string? sQScheduledQueryExecutionRoleArn,

            string? sQTargetConfiguration,

            ImmutableArray<Outputs.ScheduledQueryTag> tags)
        {
            Arn = arn;
            SQErrorReportConfiguration = sQErrorReportConfiguration;
            SQKmsKeyId = sQKmsKeyId;
            SQName = sQName;
            SQNotificationConfiguration = sQNotificationConfiguration;
            SQQueryString = sQQueryString;
            SQScheduleConfiguration = sQScheduleConfiguration;
            SQScheduledQueryExecutionRoleArn = sQScheduledQueryExecutionRoleArn;
            SQTargetConfiguration = sQTargetConfiguration;
            Tags = tags;
        }
    }
}
