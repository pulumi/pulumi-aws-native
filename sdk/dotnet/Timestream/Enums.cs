// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Timestream
{
    /// <summary>
    /// Type for the dimension.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledQueryDimensionValueType : IEquatable<ScheduledQueryDimensionValueType>
    {
        private readonly string _value;

        private ScheduledQueryDimensionValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduledQueryDimensionValueType Varchar { get; } = new ScheduledQueryDimensionValueType("VARCHAR");

        public static bool operator ==(ScheduledQueryDimensionValueType left, ScheduledQueryDimensionValueType right) => left.Equals(right);
        public static bool operator !=(ScheduledQueryDimensionValueType left, ScheduledQueryDimensionValueType right) => !left.Equals(right);

        public static explicit operator string(ScheduledQueryDimensionValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledQueryDimensionValueType other && Equals(other);
        public bool Equals(ScheduledQueryDimensionValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledQueryEncryptionOption : IEquatable<ScheduledQueryEncryptionOption>
    {
        private readonly string _value;

        private ScheduledQueryEncryptionOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduledQueryEncryptionOption SseS3 { get; } = new ScheduledQueryEncryptionOption("SSE_S3");
        public static ScheduledQueryEncryptionOption SseKms { get; } = new ScheduledQueryEncryptionOption("SSE_KMS");

        public static bool operator ==(ScheduledQueryEncryptionOption left, ScheduledQueryEncryptionOption right) => left.Equals(right);
        public static bool operator !=(ScheduledQueryEncryptionOption left, ScheduledQueryEncryptionOption right) => !left.Equals(right);

        public static explicit operator string(ScheduledQueryEncryptionOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledQueryEncryptionOption other && Equals(other);
        public bool Equals(ScheduledQueryEncryptionOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of the value that is to be read from SourceColumn. If the mapping is for MULTI, use MeasureValueType.MULTI.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledQueryMixedMeasureMappingMeasureValueType : IEquatable<ScheduledQueryMixedMeasureMappingMeasureValueType>
    {
        private readonly string _value;

        private ScheduledQueryMixedMeasureMappingMeasureValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduledQueryMixedMeasureMappingMeasureValueType Bigint { get; } = new ScheduledQueryMixedMeasureMappingMeasureValueType("BIGINT");
        public static ScheduledQueryMixedMeasureMappingMeasureValueType Boolean { get; } = new ScheduledQueryMixedMeasureMappingMeasureValueType("BOOLEAN");
        public static ScheduledQueryMixedMeasureMappingMeasureValueType Double { get; } = new ScheduledQueryMixedMeasureMappingMeasureValueType("DOUBLE");
        public static ScheduledQueryMixedMeasureMappingMeasureValueType Varchar { get; } = new ScheduledQueryMixedMeasureMappingMeasureValueType("VARCHAR");
        public static ScheduledQueryMixedMeasureMappingMeasureValueType Multi { get; } = new ScheduledQueryMixedMeasureMappingMeasureValueType("MULTI");

        public static bool operator ==(ScheduledQueryMixedMeasureMappingMeasureValueType left, ScheduledQueryMixedMeasureMappingMeasureValueType right) => left.Equals(right);
        public static bool operator !=(ScheduledQueryMixedMeasureMappingMeasureValueType left, ScheduledQueryMixedMeasureMappingMeasureValueType right) => !left.Equals(right);

        public static explicit operator string(ScheduledQueryMixedMeasureMappingMeasureValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledQueryMixedMeasureMappingMeasureValueType other && Equals(other);
        public bool Equals(ScheduledQueryMixedMeasureMappingMeasureValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Value type of the measure value column to be read from the query result.
    /// </summary>
    [EnumType]
    public readonly struct ScheduledQueryMultiMeasureAttributeMappingMeasureValueType : IEquatable<ScheduledQueryMultiMeasureAttributeMappingMeasureValueType>
    {
        private readonly string _value;

        private ScheduledQueryMultiMeasureAttributeMappingMeasureValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ScheduledQueryMultiMeasureAttributeMappingMeasureValueType Bigint { get; } = new ScheduledQueryMultiMeasureAttributeMappingMeasureValueType("BIGINT");
        public static ScheduledQueryMultiMeasureAttributeMappingMeasureValueType Boolean { get; } = new ScheduledQueryMultiMeasureAttributeMappingMeasureValueType("BOOLEAN");
        public static ScheduledQueryMultiMeasureAttributeMappingMeasureValueType Double { get; } = new ScheduledQueryMultiMeasureAttributeMappingMeasureValueType("DOUBLE");
        public static ScheduledQueryMultiMeasureAttributeMappingMeasureValueType Varchar { get; } = new ScheduledQueryMultiMeasureAttributeMappingMeasureValueType("VARCHAR");

        public static bool operator ==(ScheduledQueryMultiMeasureAttributeMappingMeasureValueType left, ScheduledQueryMultiMeasureAttributeMappingMeasureValueType right) => left.Equals(right);
        public static bool operator !=(ScheduledQueryMultiMeasureAttributeMappingMeasureValueType left, ScheduledQueryMultiMeasureAttributeMappingMeasureValueType right) => !left.Equals(right);

        public static explicit operator string(ScheduledQueryMultiMeasureAttributeMappingMeasureValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ScheduledQueryMultiMeasureAttributeMappingMeasureValueType other && Equals(other);
        public bool Equals(ScheduledQueryMultiMeasureAttributeMappingMeasureValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
