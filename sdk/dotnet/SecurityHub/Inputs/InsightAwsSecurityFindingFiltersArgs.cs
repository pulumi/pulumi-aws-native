// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SecurityHub.Inputs
{

    /// <summary>
    /// A collection of filters that are applied to all active findings aggregated by AWS Security Hub.
    /// </summary>
    public sealed class InsightAwsSecurityFindingFiltersArgs : global::Pulumi.ResourceArgs
    {
        [Input("awsAccountId")]
        private InputList<Inputs.InsightStringFilterArgs>? _awsAccountId;

        /// <summary>
        /// The AWS account ID in which a finding is generated.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> AwsAccountId
        {
            get => _awsAccountId ?? (_awsAccountId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _awsAccountId = value;
        }

        [Input("awsAccountName")]
        private InputList<Inputs.InsightStringFilterArgs>? _awsAccountName;

        /// <summary>
        /// The name of the AWS account in which a finding is generated.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> AwsAccountName
        {
            get => _awsAccountName ?? (_awsAccountName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _awsAccountName = value;
        }

        [Input("companyName")]
        private InputList<Inputs.InsightStringFilterArgs>? _companyName;

        /// <summary>
        /// The name of the findings provider (company) that owns the solution (product) that generates findings.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> CompanyName
        {
            get => _companyName ?? (_companyName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _companyName = value;
        }

        [Input("complianceAssociatedStandardsId")]
        private InputList<Inputs.InsightStringFilterArgs>? _complianceAssociatedStandardsId;

        /// <summary>
        /// The unique identifier of a standard in which a control is enabled.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ComplianceAssociatedStandardsId
        {
            get => _complianceAssociatedStandardsId ?? (_complianceAssociatedStandardsId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _complianceAssociatedStandardsId = value;
        }

        [Input("complianceSecurityControlId")]
        private InputList<Inputs.InsightStringFilterArgs>? _complianceSecurityControlId;

        /// <summary>
        /// The unique identifier of a control across standards.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ComplianceSecurityControlId
        {
            get => _complianceSecurityControlId ?? (_complianceSecurityControlId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _complianceSecurityControlId = value;
        }

        [Input("complianceSecurityControlParametersName")]
        private InputList<Inputs.InsightStringFilterArgs>? _complianceSecurityControlParametersName;

        /// <summary>
        /// The name of a security control parameter.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ComplianceSecurityControlParametersName
        {
            get => _complianceSecurityControlParametersName ?? (_complianceSecurityControlParametersName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _complianceSecurityControlParametersName = value;
        }

        [Input("complianceSecurityControlParametersValue")]
        private InputList<Inputs.InsightStringFilterArgs>? _complianceSecurityControlParametersValue;

        /// <summary>
        /// The current value of a security control parameter.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ComplianceSecurityControlParametersValue
        {
            get => _complianceSecurityControlParametersValue ?? (_complianceSecurityControlParametersValue = new InputList<Inputs.InsightStringFilterArgs>());
            set => _complianceSecurityControlParametersValue = value;
        }

        [Input("complianceStatus")]
        private InputList<Inputs.InsightStringFilterArgs>? _complianceStatus;

        /// <summary>
        /// Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ComplianceStatus
        {
            get => _complianceStatus ?? (_complianceStatus = new InputList<Inputs.InsightStringFilterArgs>());
            set => _complianceStatus = value;
        }

        [Input("confidence")]
        private InputList<Inputs.InsightNumberFilterArgs>? _confidence;

        /// <summary>
        /// A finding's confidence.
        /// </summary>
        public InputList<Inputs.InsightNumberFilterArgs> Confidence
        {
            get => _confidence ?? (_confidence = new InputList<Inputs.InsightNumberFilterArgs>());
            set => _confidence = value;
        }

        [Input("createdAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _createdAt;

        /// <summary>
        /// An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> CreatedAt
        {
            get => _createdAt ?? (_createdAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _createdAt = value;
        }

        [Input("criticality")]
        private InputList<Inputs.InsightNumberFilterArgs>? _criticality;

        /// <summary>
        /// The level of importance assigned to the resources associated with the finding.
        /// </summary>
        public InputList<Inputs.InsightNumberFilterArgs> Criticality
        {
            get => _criticality ?? (_criticality = new InputList<Inputs.InsightNumberFilterArgs>());
            set => _criticality = value;
        }

        [Input("description")]
        private InputList<Inputs.InsightStringFilterArgs>? _description;

        /// <summary>
        /// A finding's description.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> Description
        {
            get => _description ?? (_description = new InputList<Inputs.InsightStringFilterArgs>());
            set => _description = value;
        }

        [Input("findingProviderFieldsConfidence")]
        private InputList<Inputs.InsightNumberFilterArgs>? _findingProviderFieldsConfidence;

        /// <summary>
        /// The finding provider value for the finding confidence.
        /// </summary>
        public InputList<Inputs.InsightNumberFilterArgs> FindingProviderFieldsConfidence
        {
            get => _findingProviderFieldsConfidence ?? (_findingProviderFieldsConfidence = new InputList<Inputs.InsightNumberFilterArgs>());
            set => _findingProviderFieldsConfidence = value;
        }

        [Input("findingProviderFieldsCriticality")]
        private InputList<Inputs.InsightNumberFilterArgs>? _findingProviderFieldsCriticality;

        /// <summary>
        /// The finding provider value for the level of importance assigned to the resources associated with the findings.
        /// </summary>
        public InputList<Inputs.InsightNumberFilterArgs> FindingProviderFieldsCriticality
        {
            get => _findingProviderFieldsCriticality ?? (_findingProviderFieldsCriticality = new InputList<Inputs.InsightNumberFilterArgs>());
            set => _findingProviderFieldsCriticality = value;
        }

        [Input("findingProviderFieldsRelatedFindingsId")]
        private InputList<Inputs.InsightStringFilterArgs>? _findingProviderFieldsRelatedFindingsId;

        /// <summary>
        /// The finding identifier of a related finding that is identified by the finding provider.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> FindingProviderFieldsRelatedFindingsId
        {
            get => _findingProviderFieldsRelatedFindingsId ?? (_findingProviderFieldsRelatedFindingsId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _findingProviderFieldsRelatedFindingsId = value;
        }

        [Input("findingProviderFieldsRelatedFindingsProductArn")]
        private InputList<Inputs.InsightStringFilterArgs>? _findingProviderFieldsRelatedFindingsProductArn;

        /// <summary>
        /// The ARN of the solution that generated a related finding that is identified by the finding provider.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> FindingProviderFieldsRelatedFindingsProductArn
        {
            get => _findingProviderFieldsRelatedFindingsProductArn ?? (_findingProviderFieldsRelatedFindingsProductArn = new InputList<Inputs.InsightStringFilterArgs>());
            set => _findingProviderFieldsRelatedFindingsProductArn = value;
        }

        [Input("findingProviderFieldsSeverityLabel")]
        private InputList<Inputs.InsightStringFilterArgs>? _findingProviderFieldsSeverityLabel;

        /// <summary>
        /// The finding provider value for the severity label.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> FindingProviderFieldsSeverityLabel
        {
            get => _findingProviderFieldsSeverityLabel ?? (_findingProviderFieldsSeverityLabel = new InputList<Inputs.InsightStringFilterArgs>());
            set => _findingProviderFieldsSeverityLabel = value;
        }

        [Input("findingProviderFieldsSeverityOriginal")]
        private InputList<Inputs.InsightStringFilterArgs>? _findingProviderFieldsSeverityOriginal;

        /// <summary>
        /// The finding provider's original value for the severity.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> FindingProviderFieldsSeverityOriginal
        {
            get => _findingProviderFieldsSeverityOriginal ?? (_findingProviderFieldsSeverityOriginal = new InputList<Inputs.InsightStringFilterArgs>());
            set => _findingProviderFieldsSeverityOriginal = value;
        }

        [Input("findingProviderFieldsTypes")]
        private InputList<Inputs.InsightStringFilterArgs>? _findingProviderFieldsTypes;

        /// <summary>
        /// One or more finding types that the finding provider assigned to the finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> FindingProviderFieldsTypes
        {
            get => _findingProviderFieldsTypes ?? (_findingProviderFieldsTypes = new InputList<Inputs.InsightStringFilterArgs>());
            set => _findingProviderFieldsTypes = value;
        }

        [Input("firstObservedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _firstObservedAt;

        /// <summary>
        /// An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> FirstObservedAt
        {
            get => _firstObservedAt ?? (_firstObservedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _firstObservedAt = value;
        }

        [Input("generatorId")]
        private InputList<Inputs.InsightStringFilterArgs>? _generatorId;

        /// <summary>
        /// The identifier for the solution-specific component (a discrete unit of logic) that generated a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> GeneratorId
        {
            get => _generatorId ?? (_generatorId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _generatorId = value;
        }

        [Input("id")]
        private InputList<Inputs.InsightStringFilterArgs>? _id;

        /// <summary>
        /// The security findings provider-specific identifier for a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> Id
        {
            get => _id ?? (_id = new InputList<Inputs.InsightStringFilterArgs>());
            set => _id = value;
        }

        [Input("lastObservedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _lastObservedAt;

        /// <summary>
        /// An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> LastObservedAt
        {
            get => _lastObservedAt ?? (_lastObservedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _lastObservedAt = value;
        }

        [Input("malwareName")]
        private InputList<Inputs.InsightStringFilterArgs>? _malwareName;

        /// <summary>
        /// The name of the malware that was observed.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> MalwareName
        {
            get => _malwareName ?? (_malwareName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _malwareName = value;
        }

        [Input("malwarePath")]
        private InputList<Inputs.InsightStringFilterArgs>? _malwarePath;

        /// <summary>
        /// The filesystem path of the malware that was observed.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> MalwarePath
        {
            get => _malwarePath ?? (_malwarePath = new InputList<Inputs.InsightStringFilterArgs>());
            set => _malwarePath = value;
        }

        [Input("malwareState")]
        private InputList<Inputs.InsightStringFilterArgs>? _malwareState;

        /// <summary>
        /// The state of the malware that was observed.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> MalwareState
        {
            get => _malwareState ?? (_malwareState = new InputList<Inputs.InsightStringFilterArgs>());
            set => _malwareState = value;
        }

        [Input("malwareType")]
        private InputList<Inputs.InsightStringFilterArgs>? _malwareType;

        /// <summary>
        /// The type of the malware that was observed.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> MalwareType
        {
            get => _malwareType ?? (_malwareType = new InputList<Inputs.InsightStringFilterArgs>());
            set => _malwareType = value;
        }

        [Input("networkDestinationDomain")]
        private InputList<Inputs.InsightStringFilterArgs>? _networkDestinationDomain;

        /// <summary>
        /// The destination domain of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> NetworkDestinationDomain
        {
            get => _networkDestinationDomain ?? (_networkDestinationDomain = new InputList<Inputs.InsightStringFilterArgs>());
            set => _networkDestinationDomain = value;
        }

        [Input("networkDestinationIpV4")]
        private InputList<Inputs.InsightIpFilterArgs>? _networkDestinationIpV4;

        /// <summary>
        /// The destination IPv4 address of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightIpFilterArgs> NetworkDestinationIpV4
        {
            get => _networkDestinationIpV4 ?? (_networkDestinationIpV4 = new InputList<Inputs.InsightIpFilterArgs>());
            set => _networkDestinationIpV4 = value;
        }

        [Input("networkDestinationIpV6")]
        private InputList<Inputs.InsightIpFilterArgs>? _networkDestinationIpV6;

        /// <summary>
        /// The destination IPv6 address of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightIpFilterArgs> NetworkDestinationIpV6
        {
            get => _networkDestinationIpV6 ?? (_networkDestinationIpV6 = new InputList<Inputs.InsightIpFilterArgs>());
            set => _networkDestinationIpV6 = value;
        }

        [Input("networkDestinationPort")]
        private InputList<Inputs.InsightNumberFilterArgs>? _networkDestinationPort;

        /// <summary>
        /// The destination port of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightNumberFilterArgs> NetworkDestinationPort
        {
            get => _networkDestinationPort ?? (_networkDestinationPort = new InputList<Inputs.InsightNumberFilterArgs>());
            set => _networkDestinationPort = value;
        }

        [Input("networkDirection")]
        private InputList<Inputs.InsightStringFilterArgs>? _networkDirection;

        /// <summary>
        /// Indicates the direction of network traffic associated with a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> NetworkDirection
        {
            get => _networkDirection ?? (_networkDirection = new InputList<Inputs.InsightStringFilterArgs>());
            set => _networkDirection = value;
        }

        [Input("networkProtocol")]
        private InputList<Inputs.InsightStringFilterArgs>? _networkProtocol;

        /// <summary>
        /// The protocol of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> NetworkProtocol
        {
            get => _networkProtocol ?? (_networkProtocol = new InputList<Inputs.InsightStringFilterArgs>());
            set => _networkProtocol = value;
        }

        [Input("networkSourceDomain")]
        private InputList<Inputs.InsightStringFilterArgs>? _networkSourceDomain;

        /// <summary>
        /// The source domain of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> NetworkSourceDomain
        {
            get => _networkSourceDomain ?? (_networkSourceDomain = new InputList<Inputs.InsightStringFilterArgs>());
            set => _networkSourceDomain = value;
        }

        [Input("networkSourceIpV4")]
        private InputList<Inputs.InsightIpFilterArgs>? _networkSourceIpV4;

        /// <summary>
        /// The source IPv4 address of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightIpFilterArgs> NetworkSourceIpV4
        {
            get => _networkSourceIpV4 ?? (_networkSourceIpV4 = new InputList<Inputs.InsightIpFilterArgs>());
            set => _networkSourceIpV4 = value;
        }

        [Input("networkSourceIpV6")]
        private InputList<Inputs.InsightIpFilterArgs>? _networkSourceIpV6;

        /// <summary>
        /// The source IPv6 address of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightIpFilterArgs> NetworkSourceIpV6
        {
            get => _networkSourceIpV6 ?? (_networkSourceIpV6 = new InputList<Inputs.InsightIpFilterArgs>());
            set => _networkSourceIpV6 = value;
        }

        [Input("networkSourceMac")]
        private InputList<Inputs.InsightStringFilterArgs>? _networkSourceMac;

        /// <summary>
        /// The source media access control (MAC) address of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> NetworkSourceMac
        {
            get => _networkSourceMac ?? (_networkSourceMac = new InputList<Inputs.InsightStringFilterArgs>());
            set => _networkSourceMac = value;
        }

        [Input("networkSourcePort")]
        private InputList<Inputs.InsightNumberFilterArgs>? _networkSourcePort;

        /// <summary>
        /// The source port of network-related information about a finding.
        /// </summary>
        public InputList<Inputs.InsightNumberFilterArgs> NetworkSourcePort
        {
            get => _networkSourcePort ?? (_networkSourcePort = new InputList<Inputs.InsightNumberFilterArgs>());
            set => _networkSourcePort = value;
        }

        [Input("noteText")]
        private InputList<Inputs.InsightStringFilterArgs>? _noteText;

        /// <summary>
        /// The text of a note.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> NoteText
        {
            get => _noteText ?? (_noteText = new InputList<Inputs.InsightStringFilterArgs>());
            set => _noteText = value;
        }

        [Input("noteUpdatedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _noteUpdatedAt;

        /// <summary>
        /// The timestamp of when the note was updated.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> NoteUpdatedAt
        {
            get => _noteUpdatedAt ?? (_noteUpdatedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _noteUpdatedAt = value;
        }

        [Input("noteUpdatedBy")]
        private InputList<Inputs.InsightStringFilterArgs>? _noteUpdatedBy;

        /// <summary>
        /// The principal that created a note.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> NoteUpdatedBy
        {
            get => _noteUpdatedBy ?? (_noteUpdatedBy = new InputList<Inputs.InsightStringFilterArgs>());
            set => _noteUpdatedBy = value;
        }

        [Input("processLaunchedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _processLaunchedAt;

        /// <summary>
        /// A timestamp that identifies when the process was launched.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> ProcessLaunchedAt
        {
            get => _processLaunchedAt ?? (_processLaunchedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _processLaunchedAt = value;
        }

        [Input("processName")]
        private InputList<Inputs.InsightStringFilterArgs>? _processName;

        /// <summary>
        /// The name of the process.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ProcessName
        {
            get => _processName ?? (_processName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _processName = value;
        }

        [Input("processParentPid")]
        private InputList<Inputs.InsightNumberFilterArgs>? _processParentPid;

        /// <summary>
        /// The parent process ID.
        /// </summary>
        public InputList<Inputs.InsightNumberFilterArgs> ProcessParentPid
        {
            get => _processParentPid ?? (_processParentPid = new InputList<Inputs.InsightNumberFilterArgs>());
            set => _processParentPid = value;
        }

        [Input("processPath")]
        private InputList<Inputs.InsightStringFilterArgs>? _processPath;

        /// <summary>
        /// The path to the process executable.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ProcessPath
        {
            get => _processPath ?? (_processPath = new InputList<Inputs.InsightStringFilterArgs>());
            set => _processPath = value;
        }

        [Input("processPid")]
        private InputList<Inputs.InsightNumberFilterArgs>? _processPid;

        /// <summary>
        /// The process ID.
        /// </summary>
        public InputList<Inputs.InsightNumberFilterArgs> ProcessPid
        {
            get => _processPid ?? (_processPid = new InputList<Inputs.InsightNumberFilterArgs>());
            set => _processPid = value;
        }

        [Input("processTerminatedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _processTerminatedAt;

        /// <summary>
        /// A timestamp that identifies when the process was terminated.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> ProcessTerminatedAt
        {
            get => _processTerminatedAt ?? (_processTerminatedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _processTerminatedAt = value;
        }

        [Input("productArn")]
        private InputList<Inputs.InsightStringFilterArgs>? _productArn;

        /// <summary>
        /// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ProductArn
        {
            get => _productArn ?? (_productArn = new InputList<Inputs.InsightStringFilterArgs>());
            set => _productArn = value;
        }

        [Input("productFields")]
        private InputList<Inputs.InsightMapFilterArgs>? _productFields;

        /// <summary>
        /// A data type where security findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format.
        /// </summary>
        public InputList<Inputs.InsightMapFilterArgs> ProductFields
        {
            get => _productFields ?? (_productFields = new InputList<Inputs.InsightMapFilterArgs>());
            set => _productFields = value;
        }

        [Input("productName")]
        private InputList<Inputs.InsightStringFilterArgs>? _productName;

        /// <summary>
        /// The name of the solution (product) that generates findings.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ProductName
        {
            get => _productName ?? (_productName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _productName = value;
        }

        [Input("recommendationText")]
        private InputList<Inputs.InsightStringFilterArgs>? _recommendationText;

        /// <summary>
        /// The recommendation of what to do about the issue described in a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> RecommendationText
        {
            get => _recommendationText ?? (_recommendationText = new InputList<Inputs.InsightStringFilterArgs>());
            set => _recommendationText = value;
        }

        [Input("recordState")]
        private InputList<Inputs.InsightStringFilterArgs>? _recordState;

        /// <summary>
        /// The updated record state for the finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> RecordState
        {
            get => _recordState ?? (_recordState = new InputList<Inputs.InsightStringFilterArgs>());
            set => _recordState = value;
        }

        [Input("region")]
        private InputList<Inputs.InsightStringFilterArgs>? _region;

        /// <summary>
        /// The Region from which the finding was generated.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> Region
        {
            get => _region ?? (_region = new InputList<Inputs.InsightStringFilterArgs>());
            set => _region = value;
        }

        [Input("relatedFindingsId")]
        private InputList<Inputs.InsightStringFilterArgs>? _relatedFindingsId;

        /// <summary>
        /// The solution-generated identifier for a related finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> RelatedFindingsId
        {
            get => _relatedFindingsId ?? (_relatedFindingsId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _relatedFindingsId = value;
        }

        [Input("relatedFindingsProductArn")]
        private InputList<Inputs.InsightStringFilterArgs>? _relatedFindingsProductArn;

        /// <summary>
        /// The ARN of the solution that generated a related finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> RelatedFindingsProductArn
        {
            get => _relatedFindingsProductArn ?? (_relatedFindingsProductArn = new InputList<Inputs.InsightStringFilterArgs>());
            set => _relatedFindingsProductArn = value;
        }

        [Input("resourceApplicationArn")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceApplicationArn;

        /// <summary>
        /// The ARN of the application that is related to a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceApplicationArn
        {
            get => _resourceApplicationArn ?? (_resourceApplicationArn = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceApplicationArn = value;
        }

        [Input("resourceApplicationName")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceApplicationName;

        /// <summary>
        /// The name of the application that is related to a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceApplicationName
        {
            get => _resourceApplicationName ?? (_resourceApplicationName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceApplicationName = value;
        }

        [Input("resourceAwsEc2InstanceIamInstanceProfileArn")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsEc2InstanceIamInstanceProfileArn;

        /// <summary>
        /// The IAM profile ARN of the instance.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsEc2InstanceIamInstanceProfileArn
        {
            get => _resourceAwsEc2InstanceIamInstanceProfileArn ?? (_resourceAwsEc2InstanceIamInstanceProfileArn = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsEc2InstanceIamInstanceProfileArn = value;
        }

        [Input("resourceAwsEc2InstanceImageId")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsEc2InstanceImageId;

        /// <summary>
        /// The Amazon Machine Image (AMI) ID of the instance.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsEc2InstanceImageId
        {
            get => _resourceAwsEc2InstanceImageId ?? (_resourceAwsEc2InstanceImageId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsEc2InstanceImageId = value;
        }

        [Input("resourceAwsEc2InstanceIpV4Addresses")]
        private InputList<Inputs.InsightIpFilterArgs>? _resourceAwsEc2InstanceIpV4Addresses;

        /// <summary>
        /// The IPv4 addresses associated with the instance.
        /// </summary>
        public InputList<Inputs.InsightIpFilterArgs> ResourceAwsEc2InstanceIpV4Addresses
        {
            get => _resourceAwsEc2InstanceIpV4Addresses ?? (_resourceAwsEc2InstanceIpV4Addresses = new InputList<Inputs.InsightIpFilterArgs>());
            set => _resourceAwsEc2InstanceIpV4Addresses = value;
        }

        [Input("resourceAwsEc2InstanceIpV6Addresses")]
        private InputList<Inputs.InsightIpFilterArgs>? _resourceAwsEc2InstanceIpV6Addresses;

        /// <summary>
        /// The IPv6 addresses associated with the instance.
        /// </summary>
        public InputList<Inputs.InsightIpFilterArgs> ResourceAwsEc2InstanceIpV6Addresses
        {
            get => _resourceAwsEc2InstanceIpV6Addresses ?? (_resourceAwsEc2InstanceIpV6Addresses = new InputList<Inputs.InsightIpFilterArgs>());
            set => _resourceAwsEc2InstanceIpV6Addresses = value;
        }

        [Input("resourceAwsEc2InstanceKeyName")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsEc2InstanceKeyName;

        /// <summary>
        /// The key name associated with the instance.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsEc2InstanceKeyName
        {
            get => _resourceAwsEc2InstanceKeyName ?? (_resourceAwsEc2InstanceKeyName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsEc2InstanceKeyName = value;
        }

        [Input("resourceAwsEc2InstanceLaunchedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _resourceAwsEc2InstanceLaunchedAt;

        /// <summary>
        /// The date and time the instance was launched.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> ResourceAwsEc2InstanceLaunchedAt
        {
            get => _resourceAwsEc2InstanceLaunchedAt ?? (_resourceAwsEc2InstanceLaunchedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _resourceAwsEc2InstanceLaunchedAt = value;
        }

        [Input("resourceAwsEc2InstanceSubnetId")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsEc2InstanceSubnetId;

        /// <summary>
        /// The identifier of the subnet that the instance was launched in.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsEc2InstanceSubnetId
        {
            get => _resourceAwsEc2InstanceSubnetId ?? (_resourceAwsEc2InstanceSubnetId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsEc2InstanceSubnetId = value;
        }

        [Input("resourceAwsEc2InstanceType")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsEc2InstanceType;

        /// <summary>
        /// The instance type of the instance.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsEc2InstanceType
        {
            get => _resourceAwsEc2InstanceType ?? (_resourceAwsEc2InstanceType = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsEc2InstanceType = value;
        }

        [Input("resourceAwsEc2InstanceVpcId")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsEc2InstanceVpcId;

        /// <summary>
        /// The identifier of the VPC that the instance was launched in.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsEc2InstanceVpcId
        {
            get => _resourceAwsEc2InstanceVpcId ?? (_resourceAwsEc2InstanceVpcId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsEc2InstanceVpcId = value;
        }

        [Input("resourceAwsIamAccessKeyCreatedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _resourceAwsIamAccessKeyCreatedAt;

        /// <summary>
        /// The creation date/time of the IAM access key related to a finding.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> ResourceAwsIamAccessKeyCreatedAt
        {
            get => _resourceAwsIamAccessKeyCreatedAt ?? (_resourceAwsIamAccessKeyCreatedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _resourceAwsIamAccessKeyCreatedAt = value;
        }

        [Input("resourceAwsIamAccessKeyPrincipalName")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsIamAccessKeyPrincipalName;

        /// <summary>
        /// The name of the principal that is associated with an IAM access key.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsIamAccessKeyPrincipalName
        {
            get => _resourceAwsIamAccessKeyPrincipalName ?? (_resourceAwsIamAccessKeyPrincipalName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsIamAccessKeyPrincipalName = value;
        }

        [Input("resourceAwsIamAccessKeyStatus")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsIamAccessKeyStatus;

        /// <summary>
        /// The status of the IAM access key related to a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsIamAccessKeyStatus
        {
            get => _resourceAwsIamAccessKeyStatus ?? (_resourceAwsIamAccessKeyStatus = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsIamAccessKeyStatus = value;
        }

        [Input("resourceAwsIamUserUserName")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsIamUserUserName;

        /// <summary>
        /// The name of an IAM user.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsIamUserUserName
        {
            get => _resourceAwsIamUserUserName ?? (_resourceAwsIamUserUserName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsIamUserUserName = value;
        }

        [Input("resourceAwsS3BucketOwnerId")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsS3BucketOwnerId;

        /// <summary>
        /// The canonical user ID of the owner of the S3 bucket.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsS3BucketOwnerId
        {
            get => _resourceAwsS3BucketOwnerId ?? (_resourceAwsS3BucketOwnerId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsS3BucketOwnerId = value;
        }

        [Input("resourceAwsS3BucketOwnerName")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceAwsS3BucketOwnerName;

        /// <summary>
        /// The display name of the owner of the S3 bucket.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceAwsS3BucketOwnerName
        {
            get => _resourceAwsS3BucketOwnerName ?? (_resourceAwsS3BucketOwnerName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceAwsS3BucketOwnerName = value;
        }

        [Input("resourceContainerImageId")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceContainerImageId;

        /// <summary>
        /// The identifier of the image related to a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceContainerImageId
        {
            get => _resourceContainerImageId ?? (_resourceContainerImageId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceContainerImageId = value;
        }

        [Input("resourceContainerImageName")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceContainerImageName;

        /// <summary>
        /// The name of the image related to a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceContainerImageName
        {
            get => _resourceContainerImageName ?? (_resourceContainerImageName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceContainerImageName = value;
        }

        [Input("resourceContainerLaunchedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _resourceContainerLaunchedAt;

        /// <summary>
        /// A timestamp that identifies when the container was started.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> ResourceContainerLaunchedAt
        {
            get => _resourceContainerLaunchedAt ?? (_resourceContainerLaunchedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _resourceContainerLaunchedAt = value;
        }

        [Input("resourceContainerName")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceContainerName;

        /// <summary>
        /// The name of the container related to a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceContainerName
        {
            get => _resourceContainerName ?? (_resourceContainerName = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceContainerName = value;
        }

        [Input("resourceDetailsOther")]
        private InputList<Inputs.InsightMapFilterArgs>? _resourceDetailsOther;

        /// <summary>
        /// The details of a resource that doesn't have a specific subfield for the resource type defined.
        /// </summary>
        public InputList<Inputs.InsightMapFilterArgs> ResourceDetailsOther
        {
            get => _resourceDetailsOther ?? (_resourceDetailsOther = new InputList<Inputs.InsightMapFilterArgs>());
            set => _resourceDetailsOther = value;
        }

        [Input("resourceId")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceId;

        /// <summary>
        /// The canonical identifier for the given resource type.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceId
        {
            get => _resourceId ?? (_resourceId = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceId = value;
        }

        [Input("resourcePartition")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourcePartition;

        /// <summary>
        /// The canonical AWS partition name that the Region is assigned to.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourcePartition
        {
            get => _resourcePartition ?? (_resourcePartition = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourcePartition = value;
        }

        [Input("resourceRegion")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceRegion;

        /// <summary>
        /// The canonical AWS external Region name where this resource is located.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceRegion
        {
            get => _resourceRegion ?? (_resourceRegion = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceRegion = value;
        }

        [Input("resourceTags")]
        private InputList<Inputs.InsightMapFilterArgs>? _resourceTags;

        /// <summary>
        /// A list of AWS tags associated with a resource at the time the finding was processed.
        /// </summary>
        public InputList<Inputs.InsightMapFilterArgs> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputList<Inputs.InsightMapFilterArgs>());
            set => _resourceTags = value;
        }

        [Input("resourceType")]
        private InputList<Inputs.InsightStringFilterArgs>? _resourceType;

        /// <summary>
        /// Specifies the type of the resource that details are provided for.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ResourceType
        {
            get => _resourceType ?? (_resourceType = new InputList<Inputs.InsightStringFilterArgs>());
            set => _resourceType = value;
        }

        [Input("sample")]
        private InputList<Inputs.InsightBooleanFilterArgs>? _sample;

        /// <summary>
        /// Indicates whether or not sample findings are included in the filter results.
        /// </summary>
        public InputList<Inputs.InsightBooleanFilterArgs> Sample
        {
            get => _sample ?? (_sample = new InputList<Inputs.InsightBooleanFilterArgs>());
            set => _sample = value;
        }

        [Input("severityLabel")]
        private InputList<Inputs.InsightStringFilterArgs>? _severityLabel;

        /// <summary>
        /// The label of a finding's severity.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> SeverityLabel
        {
            get => _severityLabel ?? (_severityLabel = new InputList<Inputs.InsightStringFilterArgs>());
            set => _severityLabel = value;
        }

        [Input("sourceUrl")]
        private InputList<Inputs.InsightStringFilterArgs>? _sourceUrl;

        /// <summary>
        /// A URL that links to a page about the current finding in the security findings provider's solution.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> SourceUrl
        {
            get => _sourceUrl ?? (_sourceUrl = new InputList<Inputs.InsightStringFilterArgs>());
            set => _sourceUrl = value;
        }

        [Input("threatIntelIndicatorCategory")]
        private InputList<Inputs.InsightStringFilterArgs>? _threatIntelIndicatorCategory;

        /// <summary>
        /// The category of a threat intelligence indicator.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ThreatIntelIndicatorCategory
        {
            get => _threatIntelIndicatorCategory ?? (_threatIntelIndicatorCategory = new InputList<Inputs.InsightStringFilterArgs>());
            set => _threatIntelIndicatorCategory = value;
        }

        [Input("threatIntelIndicatorLastObservedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _threatIntelIndicatorLastObservedAt;

        /// <summary>
        /// A timestamp that identifies the last observation of a threat intelligence indicator.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> ThreatIntelIndicatorLastObservedAt
        {
            get => _threatIntelIndicatorLastObservedAt ?? (_threatIntelIndicatorLastObservedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _threatIntelIndicatorLastObservedAt = value;
        }

        [Input("threatIntelIndicatorSource")]
        private InputList<Inputs.InsightStringFilterArgs>? _threatIntelIndicatorSource;

        /// <summary>
        /// The source of the threat intelligence.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ThreatIntelIndicatorSource
        {
            get => _threatIntelIndicatorSource ?? (_threatIntelIndicatorSource = new InputList<Inputs.InsightStringFilterArgs>());
            set => _threatIntelIndicatorSource = value;
        }

        [Input("threatIntelIndicatorSourceUrl")]
        private InputList<Inputs.InsightStringFilterArgs>? _threatIntelIndicatorSourceUrl;

        /// <summary>
        /// The URL for more details from the source of the threat intelligence.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ThreatIntelIndicatorSourceUrl
        {
            get => _threatIntelIndicatorSourceUrl ?? (_threatIntelIndicatorSourceUrl = new InputList<Inputs.InsightStringFilterArgs>());
            set => _threatIntelIndicatorSourceUrl = value;
        }

        [Input("threatIntelIndicatorType")]
        private InputList<Inputs.InsightStringFilterArgs>? _threatIntelIndicatorType;

        /// <summary>
        /// The type of a threat intelligence indicator.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ThreatIntelIndicatorType
        {
            get => _threatIntelIndicatorType ?? (_threatIntelIndicatorType = new InputList<Inputs.InsightStringFilterArgs>());
            set => _threatIntelIndicatorType = value;
        }

        [Input("threatIntelIndicatorValue")]
        private InputList<Inputs.InsightStringFilterArgs>? _threatIntelIndicatorValue;

        /// <summary>
        /// The value of a threat intelligence indicator.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> ThreatIntelIndicatorValue
        {
            get => _threatIntelIndicatorValue ?? (_threatIntelIndicatorValue = new InputList<Inputs.InsightStringFilterArgs>());
            set => _threatIntelIndicatorValue = value;
        }

        [Input("title")]
        private InputList<Inputs.InsightStringFilterArgs>? _title;

        /// <summary>
        /// A finding's title.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> Title
        {
            get => _title ?? (_title = new InputList<Inputs.InsightStringFilterArgs>());
            set => _title = value;
        }

        [Input("type")]
        private InputList<Inputs.InsightStringFilterArgs>? _type;

        /// <summary>
        /// A finding type in the format of namespace/category/classifier that classifies a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> Type
        {
            get => _type ?? (_type = new InputList<Inputs.InsightStringFilterArgs>());
            set => _type = value;
        }

        [Input("updatedAt")]
        private InputList<Inputs.InsightDateFilterArgs>? _updatedAt;

        /// <summary>
        /// An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record.
        /// </summary>
        public InputList<Inputs.InsightDateFilterArgs> UpdatedAt
        {
            get => _updatedAt ?? (_updatedAt = new InputList<Inputs.InsightDateFilterArgs>());
            set => _updatedAt = value;
        }

        [Input("userDefinedFields")]
        private InputList<Inputs.InsightMapFilterArgs>? _userDefinedFields;

        /// <summary>
        /// A list of name/value string pairs associated with the finding.
        /// </summary>
        public InputList<Inputs.InsightMapFilterArgs> UserDefinedFields
        {
            get => _userDefinedFields ?? (_userDefinedFields = new InputList<Inputs.InsightMapFilterArgs>());
            set => _userDefinedFields = value;
        }

        [Input("verificationState")]
        private InputList<Inputs.InsightStringFilterArgs>? _verificationState;

        /// <summary>
        /// The veracity of a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> VerificationState
        {
            get => _verificationState ?? (_verificationState = new InputList<Inputs.InsightStringFilterArgs>());
            set => _verificationState = value;
        }

        [Input("vulnerabilitiesExploitAvailable")]
        private InputList<Inputs.InsightStringFilterArgs>? _vulnerabilitiesExploitAvailable;

        /// <summary>
        /// Indicates whether a software vulnerability in your environment has a known exploit.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> VulnerabilitiesExploitAvailable
        {
            get => _vulnerabilitiesExploitAvailable ?? (_vulnerabilitiesExploitAvailable = new InputList<Inputs.InsightStringFilterArgs>());
            set => _vulnerabilitiesExploitAvailable = value;
        }

        [Input("vulnerabilitiesFixAvailable")]
        private InputList<Inputs.InsightStringFilterArgs>? _vulnerabilitiesFixAvailable;

        /// <summary>
        /// Indicates whether a vulnerability is fixed in a newer version of the affected software packages.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> VulnerabilitiesFixAvailable
        {
            get => _vulnerabilitiesFixAvailable ?? (_vulnerabilitiesFixAvailable = new InputList<Inputs.InsightStringFilterArgs>());
            set => _vulnerabilitiesFixAvailable = value;
        }

        [Input("workflowState")]
        private InputList<Inputs.InsightStringFilterArgs>? _workflowState;

        /// <summary>
        /// The workflow state of a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> WorkflowState
        {
            get => _workflowState ?? (_workflowState = new InputList<Inputs.InsightStringFilterArgs>());
            set => _workflowState = value;
        }

        [Input("workflowStatus")]
        private InputList<Inputs.InsightStringFilterArgs>? _workflowStatus;

        /// <summary>
        /// The status of the investigation into a finding.
        /// </summary>
        public InputList<Inputs.InsightStringFilterArgs> WorkflowStatus
        {
            get => _workflowStatus ?? (_workflowStatus = new InputList<Inputs.InsightStringFilterArgs>());
            set => _workflowStatus = value;
        }

        public InsightAwsSecurityFindingFiltersArgs()
        {
        }
        public static new InsightAwsSecurityFindingFiltersArgs Empty => new InsightAwsSecurityFindingFiltersArgs();
    }
}
