// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SecurityHub
{
    public static class GetOrganizationConfiguration
    {
        /// <summary>
        /// The AWS::SecurityHub::OrganizationConfiguration resource represents the configuration of your organization in Security Hub. Only the Security Hub administrator account can create Organization Configuration resource in each region and can opt-in to Central Configuration only in the aggregation region of FindingAggregator.
        /// </summary>
        public static Task<GetOrganizationConfigurationResult> InvokeAsync(GetOrganizationConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationConfigurationResult>("aws-native:securityhub:getOrganizationConfiguration", args ?? new GetOrganizationConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::SecurityHub::OrganizationConfiguration resource represents the configuration of your organization in Security Hub. Only the Security Hub administrator account can create Organization Configuration resource in each region and can opt-in to Central Configuration only in the aggregation region of FindingAggregator.
        /// </summary>
        public static Output<GetOrganizationConfigurationResult> Invoke(GetOrganizationConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationConfigurationResult>("aws-native:securityhub:getOrganizationConfiguration", args ?? new GetOrganizationConfigurationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::SecurityHub::OrganizationConfiguration resource represents the configuration of your organization in Security Hub. Only the Security Hub administrator account can create Organization Configuration resource in each region and can opt-in to Central Configuration only in the aggregation region of FindingAggregator.
        /// </summary>
        public static Output<GetOrganizationConfigurationResult> Invoke(GetOrganizationConfigurationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationConfigurationResult>("aws-native:securityhub:getOrganizationConfiguration", args ?? new GetOrganizationConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrganizationConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the OrganizationConfiguration being created and assigned as the unique identifier.
        /// </summary>
        [Input("organizationConfigurationIdentifier", required: true)]
        public string OrganizationConfigurationIdentifier { get; set; } = null!;

        public GetOrganizationConfigurationArgs()
        {
        }
        public static new GetOrganizationConfigurationArgs Empty => new GetOrganizationConfigurationArgs();
    }

    public sealed class GetOrganizationConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the OrganizationConfiguration being created and assigned as the unique identifier.
        /// </summary>
        [Input("organizationConfigurationIdentifier", required: true)]
        public Input<string> OrganizationConfigurationIdentifier { get; set; } = null!;

        public GetOrganizationConfigurationInvokeArgs()
        {
        }
        public static new GetOrganizationConfigurationInvokeArgs Empty => new GetOrganizationConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrganizationConfigurationResult
    {
        /// <summary>
        /// Whether to automatically enable Security Hub in new member accounts when they join the organization.
        /// </summary>
        public readonly bool? AutoEnable;
        /// <summary>
        /// Whether to automatically enable Security Hub default standards in new member accounts when they join the organization.
        /// </summary>
        public readonly Pulumi.AwsNative.SecurityHub.OrganizationConfigurationAutoEnableStandards? AutoEnableStandards;
        /// <summary>
        /// Indicates whether the organization uses local or central configuration.
        /// </summary>
        public readonly Pulumi.AwsNative.SecurityHub.OrganizationConfigurationConfigurationType? ConfigurationType;
        /// <summary>
        /// Whether the maximum number of allowed member accounts are already associated with the Security Hub administrator account.
        /// </summary>
        public readonly bool? MemberAccountLimitReached;
        /// <summary>
        /// The identifier of the OrganizationConfiguration being created and assigned as the unique identifier.
        /// </summary>
        public readonly string? OrganizationConfigurationIdentifier;
        /// <summary>
        /// Describes whether central configuration could be enabled as the ConfigurationType for the organization.
        /// </summary>
        public readonly Pulumi.AwsNative.SecurityHub.OrganizationConfigurationStatus? Status;
        /// <summary>
        /// Provides an explanation if the value of Status is equal to FAILED when ConfigurationType is equal to CENTRAL.
        /// </summary>
        public readonly string? StatusMessage;

        [OutputConstructor]
        private GetOrganizationConfigurationResult(
            bool? autoEnable,

            Pulumi.AwsNative.SecurityHub.OrganizationConfigurationAutoEnableStandards? autoEnableStandards,

            Pulumi.AwsNative.SecurityHub.OrganizationConfigurationConfigurationType? configurationType,

            bool? memberAccountLimitReached,

            string? organizationConfigurationIdentifier,

            Pulumi.AwsNative.SecurityHub.OrganizationConfigurationStatus? status,

            string? statusMessage)
        {
            AutoEnable = autoEnable;
            AutoEnableStandards = autoEnableStandards;
            ConfigurationType = configurationType;
            MemberAccountLimitReached = memberAccountLimitReached;
            OrganizationConfigurationIdentifier = organizationConfigurationIdentifier;
            Status = status;
            StatusMessage = statusMessage;
        }
    }
}
