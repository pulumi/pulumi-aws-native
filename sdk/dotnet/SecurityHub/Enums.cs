// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.SecurityHub
{
    [EnumType]
    public readonly struct AutomationRuleDateRangeUnit : IEquatable<AutomationRuleDateRangeUnit>
    {
        private readonly string _value;

        private AutomationRuleDateRangeUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleDateRangeUnit Days { get; } = new AutomationRuleDateRangeUnit("DAYS");

        public static bool operator ==(AutomationRuleDateRangeUnit left, AutomationRuleDateRangeUnit right) => left.Equals(right);
        public static bool operator !=(AutomationRuleDateRangeUnit left, AutomationRuleDateRangeUnit right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleDateRangeUnit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleDateRangeUnit other && Equals(other);
        public bool Equals(AutomationRuleDateRangeUnit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRuleMapFilterComparison : IEquatable<AutomationRuleMapFilterComparison>
    {
        private readonly string _value;

        private AutomationRuleMapFilterComparison(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleMapFilterComparison EqualsValue { get; } = new AutomationRuleMapFilterComparison("EQUALS");
        public static AutomationRuleMapFilterComparison NotEquals { get; } = new AutomationRuleMapFilterComparison("NOT_EQUALS");

        public static bool operator ==(AutomationRuleMapFilterComparison left, AutomationRuleMapFilterComparison right) => left.Equals(right);
        public static bool operator !=(AutomationRuleMapFilterComparison left, AutomationRuleMapFilterComparison right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleMapFilterComparison value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleMapFilterComparison other && Equals(other);
        public bool Equals(AutomationRuleMapFilterComparison other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Status of the Rule upon creation
    /// </summary>
    [EnumType]
    public readonly struct AutomationRuleRuleStatus : IEquatable<AutomationRuleRuleStatus>
    {
        private readonly string _value;

        private AutomationRuleRuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleRuleStatus Enabled { get; } = new AutomationRuleRuleStatus("ENABLED");
        public static AutomationRuleRuleStatus Disabled { get; } = new AutomationRuleRuleStatus("DISABLED");

        public static bool operator ==(AutomationRuleRuleStatus left, AutomationRuleRuleStatus right) => left.Equals(right);
        public static bool operator !=(AutomationRuleRuleStatus left, AutomationRuleRuleStatus right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleRuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleRuleStatus other && Equals(other);
        public bool Equals(AutomationRuleRuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRuleSeverityUpdateLabel : IEquatable<AutomationRuleSeverityUpdateLabel>
    {
        private readonly string _value;

        private AutomationRuleSeverityUpdateLabel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleSeverityUpdateLabel Informational { get; } = new AutomationRuleSeverityUpdateLabel("INFORMATIONAL");
        public static AutomationRuleSeverityUpdateLabel Low { get; } = new AutomationRuleSeverityUpdateLabel("LOW");
        public static AutomationRuleSeverityUpdateLabel Medium { get; } = new AutomationRuleSeverityUpdateLabel("MEDIUM");
        public static AutomationRuleSeverityUpdateLabel High { get; } = new AutomationRuleSeverityUpdateLabel("HIGH");
        public static AutomationRuleSeverityUpdateLabel Critical { get; } = new AutomationRuleSeverityUpdateLabel("CRITICAL");

        public static bool operator ==(AutomationRuleSeverityUpdateLabel left, AutomationRuleSeverityUpdateLabel right) => left.Equals(right);
        public static bool operator !=(AutomationRuleSeverityUpdateLabel left, AutomationRuleSeverityUpdateLabel right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleSeverityUpdateLabel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleSeverityUpdateLabel other && Equals(other);
        public bool Equals(AutomationRuleSeverityUpdateLabel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRuleStringFilterComparison : IEquatable<AutomationRuleStringFilterComparison>
    {
        private readonly string _value;

        private AutomationRuleStringFilterComparison(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleStringFilterComparison EqualsValue { get; } = new AutomationRuleStringFilterComparison("EQUALS");
        public static AutomationRuleStringFilterComparison Prefix { get; } = new AutomationRuleStringFilterComparison("PREFIX");
        public static AutomationRuleStringFilterComparison NotEquals { get; } = new AutomationRuleStringFilterComparison("NOT_EQUALS");
        public static AutomationRuleStringFilterComparison PrefixNotEquals { get; } = new AutomationRuleStringFilterComparison("PREFIX_NOT_EQUALS");

        public static bool operator ==(AutomationRuleStringFilterComparison left, AutomationRuleStringFilterComparison right) => left.Equals(right);
        public static bool operator !=(AutomationRuleStringFilterComparison left, AutomationRuleStringFilterComparison right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleStringFilterComparison value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleStringFilterComparison other && Equals(other);
        public bool Equals(AutomationRuleStringFilterComparison other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRuleWorkflowUpdateStatus : IEquatable<AutomationRuleWorkflowUpdateStatus>
    {
        private readonly string _value;

        private AutomationRuleWorkflowUpdateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleWorkflowUpdateStatus New { get; } = new AutomationRuleWorkflowUpdateStatus("NEW");
        public static AutomationRuleWorkflowUpdateStatus Notified { get; } = new AutomationRuleWorkflowUpdateStatus("NOTIFIED");
        public static AutomationRuleWorkflowUpdateStatus Resolved { get; } = new AutomationRuleWorkflowUpdateStatus("RESOLVED");
        public static AutomationRuleWorkflowUpdateStatus Suppressed { get; } = new AutomationRuleWorkflowUpdateStatus("SUPPRESSED");

        public static bool operator ==(AutomationRuleWorkflowUpdateStatus left, AutomationRuleWorkflowUpdateStatus right) => left.Equals(right);
        public static bool operator !=(AutomationRuleWorkflowUpdateStatus left, AutomationRuleWorkflowUpdateStatus right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleWorkflowUpdateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleWorkflowUpdateStatus other && Equals(other);
        public bool Equals(AutomationRuleWorkflowUpdateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRulesActionType : IEquatable<AutomationRulesActionType>
    {
        private readonly string _value;

        private AutomationRulesActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRulesActionType FindingFieldsUpdate { get; } = new AutomationRulesActionType("FINDING_FIELDS_UPDATE");

        public static bool operator ==(AutomationRulesActionType left, AutomationRulesActionType right) => left.Equals(right);
        public static bool operator !=(AutomationRulesActionType left, AutomationRulesActionType right) => !left.Equals(right);

        public static explicit operator string(AutomationRulesActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulesActionType other && Equals(other);
        public bool Equals(AutomationRulesActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AutomationRulesFindingFieldsUpdateVerificationState : IEquatable<AutomationRulesFindingFieldsUpdateVerificationState>
    {
        private readonly string _value;

        private AutomationRulesFindingFieldsUpdateVerificationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRulesFindingFieldsUpdateVerificationState Unknown { get; } = new AutomationRulesFindingFieldsUpdateVerificationState("UNKNOWN");
        public static AutomationRulesFindingFieldsUpdateVerificationState TruePositive { get; } = new AutomationRulesFindingFieldsUpdateVerificationState("TRUE_POSITIVE");
        public static AutomationRulesFindingFieldsUpdateVerificationState FalsePositive { get; } = new AutomationRulesFindingFieldsUpdateVerificationState("FALSE_POSITIVE");
        public static AutomationRulesFindingFieldsUpdateVerificationState BenignPositive { get; } = new AutomationRulesFindingFieldsUpdateVerificationState("BENIGN_POSITIVE");

        public static bool operator ==(AutomationRulesFindingFieldsUpdateVerificationState left, AutomationRulesFindingFieldsUpdateVerificationState right) => left.Equals(right);
        public static bool operator !=(AutomationRulesFindingFieldsUpdateVerificationState left, AutomationRulesFindingFieldsUpdateVerificationState right) => !left.Equals(right);

        public static explicit operator string(AutomationRulesFindingFieldsUpdateVerificationState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulesFindingFieldsUpdateVerificationState other && Equals(other);
        public bool Equals(AutomationRulesFindingFieldsUpdateVerificationState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
