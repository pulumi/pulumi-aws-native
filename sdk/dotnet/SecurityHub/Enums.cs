// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.SecurityHub
{
    /// <summary>
    /// A date range unit for the date filter.
    /// </summary>
    [EnumType]
    public readonly struct AutomationRuleDateRangeUnit : IEquatable<AutomationRuleDateRangeUnit>
    {
        private readonly string _value;

        private AutomationRuleDateRangeUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleDateRangeUnit Days { get; } = new AutomationRuleDateRangeUnit("DAYS");

        public static bool operator ==(AutomationRuleDateRangeUnit left, AutomationRuleDateRangeUnit right) => left.Equals(right);
        public static bool operator !=(AutomationRuleDateRangeUnit left, AutomationRuleDateRangeUnit right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleDateRangeUnit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleDateRangeUnit other && Equals(other);
        public bool Equals(AutomationRuleDateRangeUnit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The condition to apply to the key value when filtering Security Hub findings with a map filter.
    /// 
    /// To search for values that have the filter value, use one of the following comparison operators:
    /// 
    /// - To search for values that include the filter value, use `CONTAINS` . For example, for the `ResourceTags` field, the filter `Department CONTAINS Security` matches findings that include the value `Security` for the `Department` tag. In the same example, a finding with a value of `Security team` for the `Department` tag is a match.
    /// - To search for values that exactly match the filter value, use `EQUALS` . For example, for the `ResourceTags` field, the filter `Department EQUALS Security` matches findings that have the value `Security` for the `Department` tag.
    /// 
    /// `CONTAINS` and `EQUALS` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Department CONTAINS Security OR Department CONTAINS Finance` match a finding that includes either `Security` , `Finance` , or both values.
    /// 
    /// To search for values that don't have the filter value, use one of the following comparison operators:
    /// 
    /// - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, for the `ResourceTags` field, the filter `Department NOT_CONTAINS Finance` matches findings that exclude the value `Finance` for the `Department` tag.
    /// - To search for values other than the filter value, use `NOT_EQUALS` . For example, for the `ResourceTags` field, the filter `Department NOT_EQUALS Finance` matches findings that don’t have the value `Finance` for the `Department` tag.
    /// 
    /// `NOT_CONTAINS` and `NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Department NOT_CONTAINS Security AND Department NOT_CONTAINS Finance` match a finding that excludes both the `Security` and `Finance` values.
    /// 
    /// `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.
    /// 
    /// You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can’t have both an `EQUALS` filter and a `NOT_EQUALS` filter on the same field. Combining filters in this way returns an error.
    /// 
    /// `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
    /// </summary>
    [EnumType]
    public readonly struct AutomationRuleMapFilterComparison : IEquatable<AutomationRuleMapFilterComparison>
    {
        private readonly string _value;

        private AutomationRuleMapFilterComparison(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleMapFilterComparison EqualsValue { get; } = new AutomationRuleMapFilterComparison("EQUALS");
        public static AutomationRuleMapFilterComparison NotEquals { get; } = new AutomationRuleMapFilterComparison("NOT_EQUALS");
        public static AutomationRuleMapFilterComparison Contains { get; } = new AutomationRuleMapFilterComparison("CONTAINS");
        public static AutomationRuleMapFilterComparison NotContains { get; } = new AutomationRuleMapFilterComparison("NOT_CONTAINS");

        public static bool operator ==(AutomationRuleMapFilterComparison left, AutomationRuleMapFilterComparison right) => left.Equals(right);
        public static bool operator !=(AutomationRuleMapFilterComparison left, AutomationRuleMapFilterComparison right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleMapFilterComparison value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleMapFilterComparison other && Equals(other);
        public bool Equals(AutomationRuleMapFilterComparison other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether the rule is active after it is created. If this parameter is equal to ``ENABLED``, ASH applies the rule to findings and finding updates after the rule is created.
    /// </summary>
    [EnumType]
    public readonly struct AutomationRuleRuleStatus : IEquatable<AutomationRuleRuleStatus>
    {
        private readonly string _value;

        private AutomationRuleRuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleRuleStatus Enabled { get; } = new AutomationRuleRuleStatus("ENABLED");
        public static AutomationRuleRuleStatus Disabled { get; } = new AutomationRuleRuleStatus("DISABLED");

        public static bool operator ==(AutomationRuleRuleStatus left, AutomationRuleRuleStatus right) => left.Equals(right);
        public static bool operator !=(AutomationRuleRuleStatus left, AutomationRuleRuleStatus right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleRuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleRuleStatus other && Equals(other);
        public bool Equals(AutomationRuleRuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The severity value of the finding. The allowed values are the following.
    /// 
    /// - `INFORMATIONAL` - No issue was found.
    /// - `LOW` - The issue does not require action on its own.
    /// - `MEDIUM` - The issue must be addressed but not urgently.
    /// - `HIGH` - The issue must be addressed as a priority.
    /// - `CRITICAL` - The issue must be remediated immediately to avoid it escalating.
    /// </summary>
    [EnumType]
    public readonly struct AutomationRuleSeverityUpdateLabel : IEquatable<AutomationRuleSeverityUpdateLabel>
    {
        private readonly string _value;

        private AutomationRuleSeverityUpdateLabel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleSeverityUpdateLabel Informational { get; } = new AutomationRuleSeverityUpdateLabel("INFORMATIONAL");
        public static AutomationRuleSeverityUpdateLabel Low { get; } = new AutomationRuleSeverityUpdateLabel("LOW");
        public static AutomationRuleSeverityUpdateLabel Medium { get; } = new AutomationRuleSeverityUpdateLabel("MEDIUM");
        public static AutomationRuleSeverityUpdateLabel High { get; } = new AutomationRuleSeverityUpdateLabel("HIGH");
        public static AutomationRuleSeverityUpdateLabel Critical { get; } = new AutomationRuleSeverityUpdateLabel("CRITICAL");

        public static bool operator ==(AutomationRuleSeverityUpdateLabel left, AutomationRuleSeverityUpdateLabel right) => left.Equals(right);
        public static bool operator !=(AutomationRuleSeverityUpdateLabel left, AutomationRuleSeverityUpdateLabel right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleSeverityUpdateLabel value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleSeverityUpdateLabel other && Equals(other);
        public bool Equals(AutomationRuleSeverityUpdateLabel other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The condition to apply to a string value when filtering Security Hub findings.
    /// </summary>
    [EnumType]
    public readonly struct AutomationRuleStringFilterComparison : IEquatable<AutomationRuleStringFilterComparison>
    {
        private readonly string _value;

        private AutomationRuleStringFilterComparison(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleStringFilterComparison EqualsValue { get; } = new AutomationRuleStringFilterComparison("EQUALS");
        public static AutomationRuleStringFilterComparison Prefix { get; } = new AutomationRuleStringFilterComparison("PREFIX");
        public static AutomationRuleStringFilterComparison NotEquals { get; } = new AutomationRuleStringFilterComparison("NOT_EQUALS");
        public static AutomationRuleStringFilterComparison PrefixNotEquals { get; } = new AutomationRuleStringFilterComparison("PREFIX_NOT_EQUALS");
        public static AutomationRuleStringFilterComparison Contains { get; } = new AutomationRuleStringFilterComparison("CONTAINS");
        public static AutomationRuleStringFilterComparison NotContains { get; } = new AutomationRuleStringFilterComparison("NOT_CONTAINS");

        public static bool operator ==(AutomationRuleStringFilterComparison left, AutomationRuleStringFilterComparison right) => left.Equals(right);
        public static bool operator !=(AutomationRuleStringFilterComparison left, AutomationRuleStringFilterComparison right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleStringFilterComparison value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleStringFilterComparison other && Equals(other);
        public bool Equals(AutomationRuleStringFilterComparison other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to `SUPPRESSED` or `RESOLVED` does not prevent a new finding for the same issue.
    /// 
    /// The allowed values are the following.
    /// 
    /// - `NEW` - The initial state of a finding, before it is reviewed.
    /// 
    /// Security Hub also resets `WorkFlowStatus` from `NOTIFIED` or `RESOLVED` to `NEW` in the following cases:
    /// 
    /// - The record state changes from `ARCHIVED` to `ACTIVE` .
    /// - The compliance status changes from `PASSED` to either `WARNING` , `FAILED` , or `NOT_AVAILABLE` .
    /// - `NOTIFIED` - Indicates that you notified the resource owner about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.
    /// - `RESOLVED` - The finding was reviewed and remediated and is now considered resolved.
    /// - `SUPPRESSED` - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.
    /// </summary>
    [EnumType]
    public readonly struct AutomationRuleWorkflowUpdateStatus : IEquatable<AutomationRuleWorkflowUpdateStatus>
    {
        private readonly string _value;

        private AutomationRuleWorkflowUpdateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRuleWorkflowUpdateStatus New { get; } = new AutomationRuleWorkflowUpdateStatus("NEW");
        public static AutomationRuleWorkflowUpdateStatus Notified { get; } = new AutomationRuleWorkflowUpdateStatus("NOTIFIED");
        public static AutomationRuleWorkflowUpdateStatus Resolved { get; } = new AutomationRuleWorkflowUpdateStatus("RESOLVED");
        public static AutomationRuleWorkflowUpdateStatus Suppressed { get; } = new AutomationRuleWorkflowUpdateStatus("SUPPRESSED");

        public static bool operator ==(AutomationRuleWorkflowUpdateStatus left, AutomationRuleWorkflowUpdateStatus right) => left.Equals(right);
        public static bool operator !=(AutomationRuleWorkflowUpdateStatus left, AutomationRuleWorkflowUpdateStatus right) => !left.Equals(right);

        public static explicit operator string(AutomationRuleWorkflowUpdateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRuleWorkflowUpdateStatus other && Equals(other);
        public bool Equals(AutomationRuleWorkflowUpdateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies that the rule action should update the `Types` finding field. The `Types` finding field classifies findings in the format of namespace/category/classifier. For more information, see [Types taxonomy for ASFF](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html) in the *AWS Security Hub User Guide* .
    /// </summary>
    [EnumType]
    public readonly struct AutomationRulesActionType : IEquatable<AutomationRulesActionType>
    {
        private readonly string _value;

        private AutomationRulesActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRulesActionType FindingFieldsUpdate { get; } = new AutomationRulesActionType("FINDING_FIELDS_UPDATE");

        public static bool operator ==(AutomationRulesActionType left, AutomationRulesActionType right) => left.Equals(right);
        public static bool operator !=(AutomationRulesActionType left, AutomationRulesActionType right) => !left.Equals(right);

        public static explicit operator string(AutomationRulesActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulesActionType other && Equals(other);
        public bool Equals(AutomationRulesActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The rule action updates the `VerificationState` field of a finding.
    /// </summary>
    [EnumType]
    public readonly struct AutomationRulesFindingFieldsUpdateVerificationState : IEquatable<AutomationRulesFindingFieldsUpdateVerificationState>
    {
        private readonly string _value;

        private AutomationRulesFindingFieldsUpdateVerificationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AutomationRulesFindingFieldsUpdateVerificationState Unknown { get; } = new AutomationRulesFindingFieldsUpdateVerificationState("UNKNOWN");
        public static AutomationRulesFindingFieldsUpdateVerificationState TruePositive { get; } = new AutomationRulesFindingFieldsUpdateVerificationState("TRUE_POSITIVE");
        public static AutomationRulesFindingFieldsUpdateVerificationState FalsePositive { get; } = new AutomationRulesFindingFieldsUpdateVerificationState("FALSE_POSITIVE");
        public static AutomationRulesFindingFieldsUpdateVerificationState BenignPositive { get; } = new AutomationRulesFindingFieldsUpdateVerificationState("BENIGN_POSITIVE");

        public static bool operator ==(AutomationRulesFindingFieldsUpdateVerificationState left, AutomationRulesFindingFieldsUpdateVerificationState right) => left.Equals(right);
        public static bool operator !=(AutomationRulesFindingFieldsUpdateVerificationState left, AutomationRulesFindingFieldsUpdateVerificationState right) => !left.Equals(right);

        public static explicit operator string(AutomationRulesFindingFieldsUpdateVerificationState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AutomationRulesFindingFieldsUpdateVerificationState other && Equals(other);
        public bool Equals(AutomationRulesFindingFieldsUpdateVerificationState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The current status of the Security Hub administrator account. Indicates whether the account is currently enabled as a Security Hub administrator
    /// </summary>
    [EnumType]
    public readonly struct DelegatedAdminStatus : IEquatable<DelegatedAdminStatus>
    {
        private readonly string _value;

        private DelegatedAdminStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DelegatedAdminStatus Enabled { get; } = new DelegatedAdminStatus("ENABLED");
        public static DelegatedAdminStatus DisableInProgress { get; } = new DelegatedAdminStatus("DISABLE_IN_PROGRESS");

        public static bool operator ==(DelegatedAdminStatus left, DelegatedAdminStatus right) => left.Equals(right);
        public static bool operator !=(DelegatedAdminStatus left, DelegatedAdminStatus right) => !left.Equals(right);

        public static explicit operator string(DelegatedAdminStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DelegatedAdminStatus other && Equals(other);
        public bool Equals(DelegatedAdminStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A date range unit for the date filter.
    /// </summary>
    [EnumType]
    public readonly struct InsightDateRangeUnit : IEquatable<InsightDateRangeUnit>
    {
        private readonly string _value;

        private InsightDateRangeUnit(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InsightDateRangeUnit Days { get; } = new InsightDateRangeUnit("DAYS");

        public static bool operator ==(InsightDateRangeUnit left, InsightDateRangeUnit right) => left.Equals(right);
        public static bool operator !=(InsightDateRangeUnit left, InsightDateRangeUnit right) => !left.Equals(right);

        public static explicit operator string(InsightDateRangeUnit value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InsightDateRangeUnit other && Equals(other);
        public bool Equals(InsightDateRangeUnit other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The condition to apply to the key value when filtering Security Hub findings with a map filter.
    /// </summary>
    [EnumType]
    public readonly struct InsightMapFilterComparison : IEquatable<InsightMapFilterComparison>
    {
        private readonly string _value;

        private InsightMapFilterComparison(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InsightMapFilterComparison EqualsValue { get; } = new InsightMapFilterComparison("EQUALS");
        public static InsightMapFilterComparison NotEquals { get; } = new InsightMapFilterComparison("NOT_EQUALS");

        public static bool operator ==(InsightMapFilterComparison left, InsightMapFilterComparison right) => left.Equals(right);
        public static bool operator !=(InsightMapFilterComparison left, InsightMapFilterComparison right) => !left.Equals(right);

        public static explicit operator string(InsightMapFilterComparison value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InsightMapFilterComparison other && Equals(other);
        public bool Equals(InsightMapFilterComparison other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The condition to apply to a string value when filtering Security Hub findings.
    /// </summary>
    [EnumType]
    public readonly struct InsightStringFilterComparison : IEquatable<InsightStringFilterComparison>
    {
        private readonly string _value;

        private InsightStringFilterComparison(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InsightStringFilterComparison EqualsValue { get; } = new InsightStringFilterComparison("EQUALS");
        public static InsightStringFilterComparison Prefix { get; } = new InsightStringFilterComparison("PREFIX");
        public static InsightStringFilterComparison NotEquals { get; } = new InsightStringFilterComparison("NOT_EQUALS");
        public static InsightStringFilterComparison PrefixNotEquals { get; } = new InsightStringFilterComparison("PREFIX_NOT_EQUALS");

        public static bool operator ==(InsightStringFilterComparison left, InsightStringFilterComparison right) => left.Equals(right);
        public static bool operator !=(InsightStringFilterComparison left, InsightStringFilterComparison right) => !left.Equals(right);

        public static explicit operator string(InsightStringFilterComparison value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InsightStringFilterComparison other && Equals(other);
        public bool Equals(InsightStringFilterComparison other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SecurityControlParameterConfigurationValueType : IEquatable<SecurityControlParameterConfigurationValueType>
    {
        private readonly string _value;

        private SecurityControlParameterConfigurationValueType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SecurityControlParameterConfigurationValueType Default { get; } = new SecurityControlParameterConfigurationValueType("DEFAULT");
        public static SecurityControlParameterConfigurationValueType Custom { get; } = new SecurityControlParameterConfigurationValueType("CUSTOM");

        public static bool operator ==(SecurityControlParameterConfigurationValueType left, SecurityControlParameterConfigurationValueType right) => left.Equals(right);
        public static bool operator !=(SecurityControlParameterConfigurationValueType left, SecurityControlParameterConfigurationValueType right) => !left.Equals(right);

        public static explicit operator string(SecurityControlParameterConfigurationValueType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SecurityControlParameterConfigurationValueType other && Equals(other);
        public bool Equals(SecurityControlParameterConfigurationValueType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
