// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SsmQuickSetup
{
    public static class GetConfigurationManager
    {
        /// <summary>
        /// Definition of AWS::SSMQuickSetup::ConfigurationManager Resource Type
        /// </summary>
        public static Task<GetConfigurationManagerResult> InvokeAsync(GetConfigurationManagerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConfigurationManagerResult>("aws-native:ssmquicksetup:getConfigurationManager", args ?? new GetConfigurationManagerArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::SSMQuickSetup::ConfigurationManager Resource Type
        /// </summary>
        public static Output<GetConfigurationManagerResult> Invoke(GetConfigurationManagerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigurationManagerResult>("aws-native:ssmquicksetup:getConfigurationManager", args ?? new GetConfigurationManagerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::SSMQuickSetup::ConfigurationManager Resource Type
        /// </summary>
        public static Output<GetConfigurationManagerResult> Invoke(GetConfigurationManagerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConfigurationManagerResult>("aws-native:ssmquicksetup:getConfigurationManager", args ?? new GetConfigurationManagerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigurationManagerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ARN of the Quick Setup configuration.
        /// </summary>
        [Input("managerArn", required: true)]
        public string ManagerArn { get; set; } = null!;

        public GetConfigurationManagerArgs()
        {
        }
        public static new GetConfigurationManagerArgs Empty => new GetConfigurationManagerArgs();
    }

    public sealed class GetConfigurationManagerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ARN of the Quick Setup configuration.
        /// </summary>
        [Input("managerArn", required: true)]
        public Input<string> ManagerArn { get; set; } = null!;

        public GetConfigurationManagerInvokeArgs()
        {
        }
        public static new GetConfigurationManagerInvokeArgs Empty => new GetConfigurationManagerInvokeArgs();
    }


    [OutputType]
    public sealed class GetConfigurationManagerResult
    {
        /// <summary>
        /// The definition of the Quick Setup configuration that the configuration manager deploys.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConfigurationManagerConfigurationDefinition> ConfigurationDefinitions;
        /// <summary>
        /// The datetime stamp when the configuration manager was created.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// The description of the configuration.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The datetime stamp when the configuration manager was last updated.
        /// </summary>
        public readonly string? LastModifiedAt;
        /// <summary>
        /// The ARN of the Quick Setup configuration.
        /// </summary>
        public readonly string? ManagerArn;
        /// <summary>
        /// The name of the configuration
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Summaries of the state of the configuration manager. These summaries include an aggregate of the statuses from the configuration definition associated with the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConfigurationManagerStatusSummary> StatusSummaries;
        /// <summary>
        /// Key-value pairs of metadata to assign to the configuration manager.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetConfigurationManagerResult(
            ImmutableArray<Outputs.ConfigurationManagerConfigurationDefinition> configurationDefinitions,

            string? createdAt,

            string? description,

            string? lastModifiedAt,

            string? managerArn,

            string? name,

            ImmutableArray<Outputs.ConfigurationManagerStatusSummary> statusSummaries,

            ImmutableDictionary<string, string>? tags)
        {
            ConfigurationDefinitions = configurationDefinitions;
            CreatedAt = createdAt;
            Description = description;
            LastModifiedAt = lastModifiedAt;
            ManagerArn = managerArn;
            Name = name;
            StatusSummaries = statusSummaries;
            Tags = tags;
        }
    }
}
