// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaLive
{
    public static class GetSignalMap
    {
        /// <summary>
        /// Definition of AWS::MediaLive::SignalMap Resource Type
        /// </summary>
        public static Task<GetSignalMapResult> InvokeAsync(GetSignalMapArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSignalMapResult>("aws-native:medialive:getSignalMap", args ?? new GetSignalMapArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::MediaLive::SignalMap Resource Type
        /// </summary>
        public static Output<GetSignalMapResult> Invoke(GetSignalMapInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSignalMapResult>("aws-native:medialive:getSignalMap", args ?? new GetSignalMapInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSignalMapArgs : global::Pulumi.InvokeArgs
    {
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        public GetSignalMapArgs()
        {
        }
        public static new GetSignalMapArgs Empty => new GetSignalMapArgs();
    }

    public sealed class GetSignalMapInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        public GetSignalMapInvokeArgs()
        {
        }
        public static new GetSignalMapInvokeArgs Empty => new GetSignalMapInvokeArgs();
    }


    [OutputType]
    public sealed class GetSignalMapResult
    {
        /// <summary>
        /// A signal map's ARN (Amazon Resource Name)
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// An alarm template group's id.
        /// </summary>
        public readonly ImmutableArray<string> CloudWatchAlarmTemplateGroupIds;
        /// <summary>
        /// The date and time of resource creation.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// A resource's optional description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A top-level supported AWS resource ARN to discovery a signal map from.
        /// </summary>
        public readonly string? DiscoveryEntryPointArn;
        /// <summary>
        /// Error message associated with a failed creation or failed update attempt of a signal map.
        /// </summary>
        public readonly string? ErrorMessage;
        /// <summary>
        /// An eventbridge rule template group's id.
        /// </summary>
        public readonly ImmutableArray<string> EventBridgeRuleTemplateGroupIds;
        public readonly ImmutableDictionary<string, Outputs.SignalMapMediaResource>? FailedMediaResourceMap;
        /// <summary>
        /// A signal map's id.
        /// </summary>
        public readonly string? Id;
        public readonly string? Identifier;
        /// <summary>
        /// The date and time of latest discovery.
        /// </summary>
        public readonly string? LastDiscoveredAt;
        public readonly Outputs.SignalMapSuccessfulMonitorDeployment? LastSuccessfulMonitorDeployment;
        public readonly ImmutableDictionary<string, Outputs.SignalMapMediaResource>? MediaResourceMap;
        /// <summary>
        /// The date and time of latest resource modification.
        /// </summary>
        public readonly string? ModifiedAt;
        /// <summary>
        /// If true, there are pending monitor changes for this signal map that can be deployed.
        /// </summary>
        public readonly bool? MonitorChangesPendingDeployment;
        public readonly Outputs.SignalMapMonitorDeployment? MonitorDeployment;
        /// <summary>
        /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// A signal map's current status, which is dependent on its lifecycle actions or associated jobs.
        /// </summary>
        public readonly Pulumi.AwsNative.MediaLive.SignalMapStatus? Status;

        [OutputConstructor]
        private GetSignalMapResult(
            string? arn,

            ImmutableArray<string> cloudWatchAlarmTemplateGroupIds,

            string? createdAt,

            string? description,

            string? discoveryEntryPointArn,

            string? errorMessage,

            ImmutableArray<string> eventBridgeRuleTemplateGroupIds,

            ImmutableDictionary<string, Outputs.SignalMapMediaResource>? failedMediaResourceMap,

            string? id,

            string? identifier,

            string? lastDiscoveredAt,

            Outputs.SignalMapSuccessfulMonitorDeployment? lastSuccessfulMonitorDeployment,

            ImmutableDictionary<string, Outputs.SignalMapMediaResource>? mediaResourceMap,

            string? modifiedAt,

            bool? monitorChangesPendingDeployment,

            Outputs.SignalMapMonitorDeployment? monitorDeployment,

            string? name,

            Pulumi.AwsNative.MediaLive.SignalMapStatus? status)
        {
            Arn = arn;
            CloudWatchAlarmTemplateGroupIds = cloudWatchAlarmTemplateGroupIds;
            CreatedAt = createdAt;
            Description = description;
            DiscoveryEntryPointArn = discoveryEntryPointArn;
            ErrorMessage = errorMessage;
            EventBridgeRuleTemplateGroupIds = eventBridgeRuleTemplateGroupIds;
            FailedMediaResourceMap = failedMediaResourceMap;
            Id = id;
            Identifier = identifier;
            LastDiscoveredAt = lastDiscoveredAt;
            LastSuccessfulMonitorDeployment = lastSuccessfulMonitorDeployment;
            MediaResourceMap = mediaResourceMap;
            ModifiedAt = modifiedAt;
            MonitorChangesPendingDeployment = monitorChangesPendingDeployment;
            MonitorDeployment = monitorDeployment;
            Name = name;
            Status = status;
        }
    }
}
