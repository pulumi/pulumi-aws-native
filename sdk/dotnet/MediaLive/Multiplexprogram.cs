// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaLive
{
    /// <summary>
    /// Resource schema for AWS::MediaLive::Multiplexprogram
    /// </summary>
    [AwsNativeResourceType("aws-native:medialive:Multiplexprogram")]
    public partial class Multiplexprogram : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The MediaLive channel associated with the program.
        /// </summary>
        [Output("channelId")]
        public Output<string?> ChannelId { get; private set; } = null!;

        /// <summary>
        /// The ID of the multiplex that the program belongs to.
        /// </summary>
        [Output("multiplexId")]
        public Output<string?> MultiplexId { get; private set; } = null!;

        /// <summary>
        /// The settings for this multiplex program.
        /// </summary>
        [Output("multiplexProgramSettings")]
        public Output<Outputs.MultiplexprogramMultiplexProgramSettings?> MultiplexProgramSettings { get; private set; } = null!;

        /// <summary>
        /// The packet identifier map for this multiplex program.
        /// </summary>
        [Output("packetIdentifiersMap")]
        public Output<Outputs.MultiplexprogramMultiplexProgramPacketIdentifiersMap?> PacketIdentifiersMap { get; private set; } = null!;

        /// <summary>
        /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
        /// </summary>
        [Output("pipelineDetails")]
        public Output<ImmutableArray<Outputs.MultiplexprogramMultiplexProgramPipelineDetail>> PipelineDetails { get; private set; } = null!;

        /// <summary>
        /// The settings for this multiplex program.
        /// </summary>
        [Output("preferredChannelPipeline")]
        public Output<Pulumi.AwsNative.MediaLive.MultiplexprogramPreferredChannelPipeline?> PreferredChannelPipeline { get; private set; } = null!;

        /// <summary>
        /// The name of the multiplex program.
        /// </summary>
        [Output("programName")]
        public Output<string?> ProgramName { get; private set; } = null!;


        /// <summary>
        /// Create a Multiplexprogram resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Multiplexprogram(string name, MultiplexprogramArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:medialive:Multiplexprogram", name, args ?? new MultiplexprogramArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Multiplexprogram(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:medialive:Multiplexprogram", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "multiplexId",
                    "programName",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Multiplexprogram resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Multiplexprogram Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Multiplexprogram(name, id, options);
        }
    }

    public sealed class MultiplexprogramArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The MediaLive channel associated with the program.
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// The ID of the multiplex that the program belongs to.
        /// </summary>
        [Input("multiplexId")]
        public Input<string>? MultiplexId { get; set; }

        /// <summary>
        /// The settings for this multiplex program.
        /// </summary>
        [Input("multiplexProgramSettings")]
        public Input<Inputs.MultiplexprogramMultiplexProgramSettingsArgs>? MultiplexProgramSettings { get; set; }

        /// <summary>
        /// The packet identifier map for this multiplex program.
        /// </summary>
        [Input("packetIdentifiersMap")]
        public Input<Inputs.MultiplexprogramMultiplexProgramPacketIdentifiersMapArgs>? PacketIdentifiersMap { get; set; }

        [Input("pipelineDetails")]
        private InputList<Inputs.MultiplexprogramMultiplexProgramPipelineDetailArgs>? _pipelineDetails;

        /// <summary>
        /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
        /// </summary>
        public InputList<Inputs.MultiplexprogramMultiplexProgramPipelineDetailArgs> PipelineDetails
        {
            get => _pipelineDetails ?? (_pipelineDetails = new InputList<Inputs.MultiplexprogramMultiplexProgramPipelineDetailArgs>());
            set => _pipelineDetails = value;
        }

        /// <summary>
        /// The settings for this multiplex program.
        /// </summary>
        [Input("preferredChannelPipeline")]
        public Input<Pulumi.AwsNative.MediaLive.MultiplexprogramPreferredChannelPipeline>? PreferredChannelPipeline { get; set; }

        /// <summary>
        /// The name of the multiplex program.
        /// </summary>
        [Input("programName")]
        public Input<string>? ProgramName { get; set; }

        public MultiplexprogramArgs()
        {
        }
        public static new MultiplexprogramArgs Empty => new MultiplexprogramArgs();
    }
}
