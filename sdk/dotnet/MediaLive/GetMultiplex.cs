// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaLive
{
    public static class GetMultiplex
    {
        /// <summary>
        /// Resource schema for AWS::MediaLive::Multiplex
        /// </summary>
        public static Task<GetMultiplexResult> InvokeAsync(GetMultiplexArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMultiplexResult>("aws-native:medialive:getMultiplex", args ?? new GetMultiplexArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::MediaLive::Multiplex
        /// </summary>
        public static Output<GetMultiplexResult> Invoke(GetMultiplexInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultiplexResult>("aws-native:medialive:getMultiplex", args ?? new GetMultiplexInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMultiplexArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique id of the multiplex.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetMultiplexArgs()
        {
        }
        public static new GetMultiplexArgs Empty => new GetMultiplexArgs();
    }

    public sealed class GetMultiplexInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique id of the multiplex.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetMultiplexInvokeArgs()
        {
        }
        public static new GetMultiplexInvokeArgs Empty => new GetMultiplexInvokeArgs();
    }


    [OutputType]
    public sealed class GetMultiplexResult
    {
        /// <summary>
        /// The unique arn of the multiplex.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// A list of the multiplex output destinations.
        /// </summary>
        public readonly ImmutableArray<Outputs.MultiplexOutputDestination> Destinations;
        /// <summary>
        /// The unique id of the multiplex.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Configuration for a multiplex event.
        /// </summary>
        public readonly Outputs.MultiplexSettings? MultiplexSettings;
        /// <summary>
        /// Name of multiplex.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The number of currently healthy pipelines.
        /// </summary>
        public readonly int? PipelinesRunningCount;
        /// <summary>
        /// The number of programs in the multiplex.
        /// </summary>
        public readonly int? ProgramCount;
        public readonly Pulumi.AwsNative.MediaLive.MultiplexState? State;
        /// <summary>
        /// A collection of key-value pairs.
        /// </summary>
        public readonly ImmutableArray<Outputs.MultiplexTags> Tags;

        [OutputConstructor]
        private GetMultiplexResult(
            string? arn,

            ImmutableArray<Outputs.MultiplexOutputDestination> destinations,

            string? id,

            Outputs.MultiplexSettings? multiplexSettings,

            string? name,

            int? pipelinesRunningCount,

            int? programCount,

            Pulumi.AwsNative.MediaLive.MultiplexState? state,

            ImmutableArray<Outputs.MultiplexTags> tags)
        {
            Arn = arn;
            Destinations = destinations;
            Id = id;
            MultiplexSettings = multiplexSettings;
            Name = name;
            PipelinesRunningCount = pipelinesRunningCount;
            ProgramCount = programCount;
            State = state;
            Tags = tags;
        }
    }
}
