// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaLive
{
    /// <summary>
    /// Definition of AWS::MediaLive::SignalMap Resource Type
    /// </summary>
    [AwsNativeResourceType("aws-native:medialive:SignalMap")]
    public partial class SignalMap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A signal map's ARN (Amazon Resource Name)
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A signal map's id.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
        /// </summary>
        [Output("cloudWatchAlarmTemplateGroupIdentifiers")]
        public Output<ImmutableArray<string>> CloudWatchAlarmTemplateGroupIdentifiers { get; private set; } = null!;

        /// <summary>
        /// An alarm template group's id.
        /// </summary>
        [Output("cloudWatchAlarmTemplateGroupIds")]
        public Output<ImmutableArray<string>> CloudWatchAlarmTemplateGroupIds { get; private set; } = null!;

        /// <summary>
        /// The date and time of resource creation.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A resource's optional description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A top-level supported AWS resource ARN to discovery a signal map from.
        /// </summary>
        [Output("discoveryEntryPointArn")]
        public Output<string> DiscoveryEntryPointArn { get; private set; } = null!;

        /// <summary>
        /// Error message associated with a failed creation or failed update attempt of a signal map.
        /// </summary>
        [Output("errorMessage")]
        public Output<string> ErrorMessage { get; private set; } = null!;

        /// <summary>
        /// An eventbridge rule template group's identifier. Can be either be its id or current name.
        /// </summary>
        [Output("eventBridgeRuleTemplateGroupIdentifiers")]
        public Output<ImmutableArray<string>> EventBridgeRuleTemplateGroupIdentifiers { get; private set; } = null!;

        /// <summary>
        /// An eventbridge rule template group's id.
        /// </summary>
        [Output("eventBridgeRuleTemplateGroupIds")]
        public Output<ImmutableArray<string>> EventBridgeRuleTemplateGroupIds { get; private set; } = null!;

        [Output("failedMediaResourceMap")]
        public Output<ImmutableDictionary<string, Outputs.SignalMapMediaResource>> FailedMediaResourceMap { get; private set; } = null!;

        /// <summary>
        /// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
        /// </summary>
        [Output("forceRediscovery")]
        public Output<bool?> ForceRediscovery { get; private set; } = null!;

        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// The date and time of latest discovery.
        /// </summary>
        [Output("lastDiscoveredAt")]
        public Output<string> LastDiscoveredAt { get; private set; } = null!;

        [Output("lastSuccessfulMonitorDeployment")]
        public Output<Outputs.SignalMapSuccessfulMonitorDeployment> LastSuccessfulMonitorDeployment { get; private set; } = null!;

        [Output("mediaResourceMap")]
        public Output<ImmutableDictionary<string, Outputs.SignalMapMediaResource>> MediaResourceMap { get; private set; } = null!;

        /// <summary>
        /// The date and time of latest resource modification.
        /// </summary>
        [Output("modifiedAt")]
        public Output<string> ModifiedAt { get; private set; } = null!;

        /// <summary>
        /// If true, there are pending monitor changes for this signal map that can be deployed.
        /// </summary>
        [Output("monitorChangesPendingDeployment")]
        public Output<bool> MonitorChangesPendingDeployment { get; private set; } = null!;

        [Output("monitorDeployment")]
        public Output<Outputs.SignalMapMonitorDeployment> MonitorDeployment { get; private set; } = null!;

        /// <summary>
        /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A signal map's current status, which is dependent on its lifecycle actions or associated jobs.
        /// </summary>
        [Output("status")]
        public Output<Pulumi.AwsNative.MediaLive.SignalMapStatus> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a SignalMap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SignalMap(string name, SignalMapArgs args, CustomResourceOptions? options = null)
            : base("aws-native:medialive:SignalMap", name, args ?? new SignalMapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SignalMap(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:medialive:SignalMap", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "tags.*",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SignalMap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SignalMap Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SignalMap(name, id, options);
        }
    }

    public sealed class SignalMapArgs : global::Pulumi.ResourceArgs
    {
        [Input("cloudWatchAlarmTemplateGroupIdentifiers")]
        private InputList<string>? _cloudWatchAlarmTemplateGroupIdentifiers;

        /// <summary>
        /// A cloudwatch alarm template group's identifier. Can be either be its id or current name.
        /// </summary>
        public InputList<string> CloudWatchAlarmTemplateGroupIdentifiers
        {
            get => _cloudWatchAlarmTemplateGroupIdentifiers ?? (_cloudWatchAlarmTemplateGroupIdentifiers = new InputList<string>());
            set => _cloudWatchAlarmTemplateGroupIdentifiers = value;
        }

        /// <summary>
        /// A resource's optional description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A top-level supported AWS resource ARN to discovery a signal map from.
        /// </summary>
        [Input("discoveryEntryPointArn", required: true)]
        public Input<string> DiscoveryEntryPointArn { get; set; } = null!;

        [Input("eventBridgeRuleTemplateGroupIdentifiers")]
        private InputList<string>? _eventBridgeRuleTemplateGroupIdentifiers;

        /// <summary>
        /// An eventbridge rule template group's identifier. Can be either be its id or current name.
        /// </summary>
        public InputList<string> EventBridgeRuleTemplateGroupIdentifiers
        {
            get => _eventBridgeRuleTemplateGroupIdentifiers ?? (_eventBridgeRuleTemplateGroupIdentifiers = new InputList<string>());
            set => _eventBridgeRuleTemplateGroupIdentifiers = value;
        }

        /// <summary>
        /// If true, will force a rediscovery of a signal map if an unchanged discoveryEntryPointArn is provided.
        /// </summary>
        [Input("forceRediscovery")]
        public Input<bool>? ForceRediscovery { get; set; }

        /// <summary>
        /// A resource's name. Names must be unique within the scope of a resource type in a specific region.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SignalMapArgs()
        {
        }
        public static new SignalMapArgs Empty => new SignalMapArgs();
    }
}
