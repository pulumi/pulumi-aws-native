// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaLive
{
    public static class GetNetwork
    {
        /// <summary>
        /// Resource schema for AWS::MediaLive::Network.
        /// </summary>
        public static Task<GetNetworkResult> InvokeAsync(GetNetworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkResult>("aws-native:medialive:getNetwork", args ?? new GetNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::MediaLive::Network.
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("aws-native:medialive:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::MediaLive::Network.
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("aws-native:medialive:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the Network.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetNetworkArgs()
        {
        }
        public static new GetNetworkArgs Empty => new GetNetworkArgs();
    }

    public sealed class GetNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of the Network.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetNetworkInvokeArgs()
        {
        }
        public static new GetNetworkInvokeArgs Empty => new GetNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkResult
    {
        /// <summary>
        /// The ARN of the Network.
        /// </summary>
        public readonly string? Arn;
        public readonly ImmutableArray<string> AssociatedClusterIds;
        /// <summary>
        /// The unique ID of the Network.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of IP address cidr pools for the network
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkIpPool> IpPools;
        /// <summary>
        /// The user-specified name of the Network to be created.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The routes for the network
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworkRoute> Routes;
        /// <summary>
        /// The current state of the Network.
        /// </summary>
        public readonly Pulumi.AwsNative.MediaLive.NetworkState? State;
        /// <summary>
        /// A collection of key-value pairs.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;

        [OutputConstructor]
        private GetNetworkResult(
            string? arn,

            ImmutableArray<string> associatedClusterIds,

            string? id,

            ImmutableArray<Outputs.NetworkIpPool> ipPools,

            string? name,

            ImmutableArray<Outputs.NetworkRoute> routes,

            Pulumi.AwsNative.MediaLive.NetworkState? state,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags)
        {
            Arn = arn;
            AssociatedClusterIds = associatedClusterIds;
            Id = id;
            IpPools = ipPools;
            Name = name;
            Routes = routes;
            State = state;
            Tags = tags;
        }
    }
}
