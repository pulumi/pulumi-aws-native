// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaLive
{
    public static class GetMultiplexprogram
    {
        /// <summary>
        /// Resource schema for AWS::MediaLive::Multiplexprogram
        /// </summary>
        public static Task<GetMultiplexprogramResult> InvokeAsync(GetMultiplexprogramArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMultiplexprogramResult>("aws-native:medialive:getMultiplexprogram", args ?? new GetMultiplexprogramArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::MediaLive::Multiplexprogram
        /// </summary>
        public static Output<GetMultiplexprogramResult> Invoke(GetMultiplexprogramInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMultiplexprogramResult>("aws-native:medialive:getMultiplexprogram", args ?? new GetMultiplexprogramInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMultiplexprogramArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the multiplex that the program belongs to.
        /// </summary>
        [Input("multiplexId", required: true)]
        public string MultiplexId { get; set; } = null!;

        /// <summary>
        /// The name of the multiplex program.
        /// </summary>
        [Input("programName", required: true)]
        public string ProgramName { get; set; } = null!;

        public GetMultiplexprogramArgs()
        {
        }
        public static new GetMultiplexprogramArgs Empty => new GetMultiplexprogramArgs();
    }

    public sealed class GetMultiplexprogramInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the multiplex that the program belongs to.
        /// </summary>
        [Input("multiplexId", required: true)]
        public Input<string> MultiplexId { get; set; } = null!;

        /// <summary>
        /// The name of the multiplex program.
        /// </summary>
        [Input("programName", required: true)]
        public Input<string> ProgramName { get; set; } = null!;

        public GetMultiplexprogramInvokeArgs()
        {
        }
        public static new GetMultiplexprogramInvokeArgs Empty => new GetMultiplexprogramInvokeArgs();
    }


    [OutputType]
    public sealed class GetMultiplexprogramResult
    {
        /// <summary>
        /// The MediaLive channel associated with the program.
        /// </summary>
        public readonly string? ChannelId;
        /// <summary>
        /// The settings for this multiplex program.
        /// </summary>
        public readonly Outputs.MultiplexprogramMultiplexProgramSettings? MultiplexProgramSettings;
        /// <summary>
        /// The packet identifier map for this multiplex program.
        /// </summary>
        public readonly Outputs.MultiplexprogramMultiplexProgramPacketIdentifiersMap? PacketIdentifiersMap;
        /// <summary>
        /// Contains information about the current sources for the specified program in the specified multiplex. Keep in mind that each multiplex pipeline connects to both pipelines in a given source channel (the channel identified by the program). But only one of those channel pipelines is ever active at one time.
        /// </summary>
        public readonly ImmutableArray<Outputs.MultiplexprogramMultiplexProgramPipelineDetail> PipelineDetails;

        [OutputConstructor]
        private GetMultiplexprogramResult(
            string? channelId,

            Outputs.MultiplexprogramMultiplexProgramSettings? multiplexProgramSettings,

            Outputs.MultiplexprogramMultiplexProgramPacketIdentifiersMap? packetIdentifiersMap,

            ImmutableArray<Outputs.MultiplexprogramMultiplexProgramPipelineDetail> pipelineDetails)
        {
            ChannelId = channelId;
            MultiplexProgramSettings = multiplexProgramSettings;
            PacketIdentifiersMap = packetIdentifiersMap;
            PipelineDetails = pipelineDetails;
        }
    }
}
