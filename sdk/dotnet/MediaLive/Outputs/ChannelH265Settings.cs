// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaLive.Outputs
{

    [OutputType]
    public sealed class ChannelH265Settings
    {
        public readonly string? AdaptiveQuantization;
        public readonly string? AfdSignaling;
        public readonly string? AlternativeTransferFunction;
        public readonly int? Bitrate;
        public readonly int? BufSize;
        public readonly string? ColorMetadata;
        public readonly Outputs.ChannelH265ColorSpaceSettings? ColorSpaceSettings;
        public readonly Outputs.ChannelH265FilterSettings? FilterSettings;
        public readonly string? FixedAfd;
        public readonly string? FlickerAq;
        public readonly int? FramerateDenominator;
        public readonly int? FramerateNumerator;
        public readonly int? GopClosedCadence;
        public readonly double? GopSize;
        public readonly string? GopSizeUnits;
        public readonly string? Level;
        public readonly string? LookAheadRateControl;
        public readonly int? MaxBitrate;
        public readonly int? MinIInterval;
        public readonly int? ParDenominator;
        public readonly int? ParNumerator;
        public readonly string? Profile;
        public readonly int? QvbrQualityLevel;
        public readonly string? RateControlMode;
        public readonly string? ScanType;
        public readonly string? SceneChangeDetect;
        public readonly int? Slices;
        public readonly string? Tier;
        public readonly string? TimecodeInsertion;

        [OutputConstructor]
        private ChannelH265Settings(
            string? adaptiveQuantization,

            string? afdSignaling,

            string? alternativeTransferFunction,

            int? bitrate,

            int? bufSize,

            string? colorMetadata,

            Outputs.ChannelH265ColorSpaceSettings? colorSpaceSettings,

            Outputs.ChannelH265FilterSettings? filterSettings,

            string? fixedAfd,

            string? flickerAq,

            int? framerateDenominator,

            int? framerateNumerator,

            int? gopClosedCadence,

            double? gopSize,

            string? gopSizeUnits,

            string? level,

            string? lookAheadRateControl,

            int? maxBitrate,

            int? minIInterval,

            int? parDenominator,

            int? parNumerator,

            string? profile,

            int? qvbrQualityLevel,

            string? rateControlMode,

            string? scanType,

            string? sceneChangeDetect,

            int? slices,

            string? tier,

            string? timecodeInsertion)
        {
            AdaptiveQuantization = adaptiveQuantization;
            AfdSignaling = afdSignaling;
            AlternativeTransferFunction = alternativeTransferFunction;
            Bitrate = bitrate;
            BufSize = bufSize;
            ColorMetadata = colorMetadata;
            ColorSpaceSettings = colorSpaceSettings;
            FilterSettings = filterSettings;
            FixedAfd = fixedAfd;
            FlickerAq = flickerAq;
            FramerateDenominator = framerateDenominator;
            FramerateNumerator = framerateNumerator;
            GopClosedCadence = gopClosedCadence;
            GopSize = gopSize;
            GopSizeUnits = gopSizeUnits;
            Level = level;
            LookAheadRateControl = lookAheadRateControl;
            MaxBitrate = maxBitrate;
            MinIInterval = minIInterval;
            ParDenominator = parDenominator;
            ParNumerator = parNumerator;
            Profile = profile;
            QvbrQualityLevel = qvbrQualityLevel;
            RateControlMode = rateControlMode;
            ScanType = scanType;
            SceneChangeDetect = sceneChangeDetect;
            Slices = slices;
            Tier = tier;
            TimecodeInsertion = timecodeInsertion;
        }
    }
}
