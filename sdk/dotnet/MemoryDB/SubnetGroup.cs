// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MemoryDB
{
    /// <summary>
    /// The AWS::MemoryDB::SubnetGroup resource creates an Amazon MemoryDB Subnet Group.
    /// </summary>
    [AwsNativeResourceType("aws-native:memorydb:SubnetGroup")]
    public partial class SubnetGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the subnet group.
        /// </summary>
        [Output("aRN")]
        public Output<string> ARN { get; private set; } = null!;

        /// <summary>
        /// An optional description of the subnet group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
        /// </summary>
        [Output("subnetGroupName")]
        public Output<string> SubnetGroupName { get; private set; } = null!;

        /// <summary>
        /// A list of VPC subnet IDs for the subnet group.
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this subnet group.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.SubnetGroupTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a SubnetGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubnetGroup(string name, SubnetGroupArgs args, CustomResourceOptions? options = null)
            : base("aws-native:memorydb:SubnetGroup", name, args ?? new SubnetGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SubnetGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:memorydb:SubnetGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubnetGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubnetGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SubnetGroup(name, id, options);
        }
    }

    public sealed class SubnetGroupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of the subnet group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
        /// </summary>
        [Input("subnetGroupName")]
        public Input<string>? SubnetGroupName { get; set; }

        [Input("subnetIds", required: true)]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// A list of VPC subnet IDs for the subnet group.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputList<Inputs.SubnetGroupTagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this subnet group.
        /// </summary>
        public InputList<Inputs.SubnetGroupTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SubnetGroupTagArgs>());
            set => _tags = value;
        }

        public SubnetGroupArgs()
        {
        }
    }
}
