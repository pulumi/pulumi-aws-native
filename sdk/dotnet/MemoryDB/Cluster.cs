// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MemoryDB
{
    /// <summary>
    /// The AWS::MemoryDB::Cluster resource creates an Amazon MemoryDB Cluster.
    /// </summary>
    [AwsNativeResourceType("aws-native:memorydb:Cluster")]
    public partial class Cluster : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Access Control List to associate with the cluster.
        /// </summary>
        [Output("aCLName")]
        public Output<string> ACLName { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the cluster.
        /// </summary>
        [Output("aRN")]
        public Output<string> ARN { get; private set; } = null!;

        /// <summary>
        /// A flag that enables automatic minor version upgrade when set to true.
        /// 
        /// You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
        /// </summary>
        [Output("autoMinorVersionUpgrade")]
        public Output<bool?> AutoMinorVersionUpgrade { get; private set; } = null!;

        /// <summary>
        /// The cluster endpoint.
        /// </summary>
        [Output("clusterEndpoint")]
        public Output<Outputs.ClusterEndpoint?> ClusterEndpoint { get; private set; } = null!;

        /// <summary>
        /// The name of the cluster. This value must be unique as it also serves as the cluster identifier.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// An optional description of the cluster.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Redis engine version used by the cluster.
        /// </summary>
        [Output("engineVersion")]
        public Output<string?> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
        /// </summary>
        [Output("finalSnapshotName")]
        public Output<string?> FinalSnapshotName { get; private set; } = null!;

        /// <summary>
        /// The ID of the KMS key used to encrypt the cluster.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
        /// </summary>
        [Output("maintenanceWindow")]
        public Output<string?> MaintenanceWindow { get; private set; } = null!;

        /// <summary>
        /// The compute and memory capacity of the nodes in the cluster.
        /// </summary>
        [Output("nodeType")]
        public Output<string> NodeType { get; private set; } = null!;

        /// <summary>
        /// The number of replicas to apply to each shard. The limit is 5.
        /// </summary>
        [Output("numReplicasPerShard")]
        public Output<int?> NumReplicasPerShard { get; private set; } = null!;

        /// <summary>
        /// The number of shards the cluster will contain.
        /// </summary>
        [Output("numShards")]
        public Output<int?> NumShards { get; private set; } = null!;

        /// <summary>
        /// The name of the parameter group associated with the cluster.
        /// </summary>
        [Output("parameterGroupName")]
        public Output<string?> ParameterGroupName { get; private set; } = null!;

        /// <summary>
        /// The status of the parameter group used by the cluster.
        /// </summary>
        [Output("parameterGroupStatus")]
        public Output<string> ParameterGroupStatus { get; private set; } = null!;

        /// <summary>
        /// The port number on which each member of the cluster accepts connections.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// One or more Amazon VPC security groups associated with this cluster.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
        /// </summary>
        [Output("snapshotArns")]
        public Output<ImmutableArray<string>> SnapshotArns { get; private set; } = null!;

        /// <summary>
        /// The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while the new cluster is being created.
        /// </summary>
        [Output("snapshotName")]
        public Output<string?> SnapshotName { get; private set; } = null!;

        /// <summary>
        /// The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
        /// </summary>
        [Output("snapshotRetentionLimit")]
        public Output<int?> SnapshotRetentionLimit { get; private set; } = null!;

        /// <summary>
        /// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
        /// </summary>
        [Output("snapshotWindow")]
        public Output<string?> SnapshotWindow { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
        /// </summary>
        [Output("snsTopicArn")]
        public Output<string?> SnsTopicArn { get; private set; } = null!;

        /// <summary>
        /// The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
        /// </summary>
        [Output("snsTopicStatus")]
        public Output<string?> SnsTopicStatus { get; private set; } = null!;

        /// <summary>
        /// The status of the cluster. For example, Available, Updating, Creating.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The name of the subnet group to be used for the cluster.
        /// </summary>
        [Output("subnetGroupName")]
        public Output<string?> SubnetGroupName { get; private set; } = null!;

        /// <summary>
        /// A flag that enables in-transit encryption when set to true.
        /// 
        /// You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
        /// </summary>
        [Output("tLSEnabled")]
        public Output<bool?> TLSEnabled { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this cluster.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.ClusterTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("aws-native:memorydb:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:memorydb:Cluster", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, options);
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Access Control List to associate with the cluster.
        /// </summary>
        [Input("aCLName", required: true)]
        public Input<string> ACLName { get; set; } = null!;

        /// <summary>
        /// A flag that enables automatic minor version upgrade when set to true.
        /// 
        /// You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
        /// </summary>
        [Input("autoMinorVersionUpgrade")]
        public Input<bool>? AutoMinorVersionUpgrade { get; set; }

        /// <summary>
        /// The cluster endpoint.
        /// </summary>
        [Input("clusterEndpoint")]
        public Input<Inputs.ClusterEndpointArgs>? ClusterEndpoint { get; set; }

        /// <summary>
        /// The name of the cluster. This value must be unique as it also serves as the cluster identifier.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// An optional description of the cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Redis engine version used by the cluster.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
        /// </summary>
        [Input("finalSnapshotName")]
        public Input<string>? FinalSnapshotName { get; set; }

        /// <summary>
        /// The ID of the KMS key used to encrypt the cluster.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
        /// </summary>
        [Input("maintenanceWindow")]
        public Input<string>? MaintenanceWindow { get; set; }

        /// <summary>
        /// The compute and memory capacity of the nodes in the cluster.
        /// </summary>
        [Input("nodeType", required: true)]
        public Input<string> NodeType { get; set; } = null!;

        /// <summary>
        /// The number of replicas to apply to each shard. The limit is 5.
        /// </summary>
        [Input("numReplicasPerShard")]
        public Input<int>? NumReplicasPerShard { get; set; }

        /// <summary>
        /// The number of shards the cluster will contain.
        /// </summary>
        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        /// <summary>
        /// The name of the parameter group associated with the cluster.
        /// </summary>
        [Input("parameterGroupName")]
        public Input<string>? ParameterGroupName { get; set; }

        /// <summary>
        /// The port number on which each member of the cluster accepts connections.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// One or more Amazon VPC security groups associated with this cluster.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("snapshotArns")]
        private InputList<string>? _snapshotArns;

        /// <summary>
        /// A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
        /// </summary>
        public InputList<string> SnapshotArns
        {
            get => _snapshotArns ?? (_snapshotArns = new InputList<string>());
            set => _snapshotArns = value;
        }

        /// <summary>
        /// The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while the new cluster is being created.
        /// </summary>
        [Input("snapshotName")]
        public Input<string>? SnapshotName { get; set; }

        /// <summary>
        /// The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
        /// </summary>
        [Input("snapshotRetentionLimit")]
        public Input<int>? SnapshotRetentionLimit { get; set; }

        /// <summary>
        /// The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
        /// </summary>
        [Input("snapshotWindow")]
        public Input<string>? SnapshotWindow { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
        /// </summary>
        [Input("snsTopicArn")]
        public Input<string>? SnsTopicArn { get; set; }

        /// <summary>
        /// The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
        /// </summary>
        [Input("snsTopicStatus")]
        public Input<string>? SnsTopicStatus { get; set; }

        /// <summary>
        /// The name of the subnet group to be used for the cluster.
        /// </summary>
        [Input("subnetGroupName")]
        public Input<string>? SubnetGroupName { get; set; }

        /// <summary>
        /// A flag that enables in-transit encryption when set to true.
        /// 
        /// You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
        /// </summary>
        [Input("tLSEnabled")]
        public Input<bool>? TLSEnabled { get; set; }

        [Input("tags")]
        private InputList<Inputs.ClusterTagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this cluster.
        /// </summary>
        public InputList<Inputs.ClusterTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ClusterTagArgs>());
            set => _tags = value;
        }

        public ClusterArgs()
        {
        }
    }
}
