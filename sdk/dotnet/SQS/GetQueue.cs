// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.SQS
{
    public static class GetQueue
    {
        /// <summary>
        /// Resource Type definition for AWS::SQS::Queue
        /// </summary>
        public static Task<GetQueueResult> InvokeAsync(GetQueueArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetQueueResult>("aws-native:sqs:getQueue", args ?? new GetQueueArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::SQS::Queue
        /// </summary>
        public static Output<GetQueueResult> Invoke(GetQueueInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetQueueResult>("aws-native:sqs:getQueue", args ?? new GetQueueInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQueueArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetQueueArgs()
        {
        }
    }

    public sealed class GetQueueInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetQueueInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetQueueResult
    {
        public readonly string? Arn;
        public readonly bool? ContentBasedDeduplication;
        public readonly string? DeduplicationScope;
        public readonly int? DelaySeconds;
        public readonly string? FifoThroughputLimit;
        public readonly string? Id;
        public readonly int? KmsDataKeyReusePeriodSeconds;
        public readonly string? KmsMasterKeyId;
        public readonly int? MaximumMessageSize;
        public readonly int? MessageRetentionPeriod;
        public readonly int? ReceiveMessageWaitTimeSeconds;
        public readonly object? RedriveAllowPolicy;
        public readonly object? RedrivePolicy;
        public readonly ImmutableArray<Outputs.QueueTag> Tags;
        public readonly int? VisibilityTimeout;

        [OutputConstructor]
        private GetQueueResult(
            string? arn,

            bool? contentBasedDeduplication,

            string? deduplicationScope,

            int? delaySeconds,

            string? fifoThroughputLimit,

            string? id,

            int? kmsDataKeyReusePeriodSeconds,

            string? kmsMasterKeyId,

            int? maximumMessageSize,

            int? messageRetentionPeriod,

            int? receiveMessageWaitTimeSeconds,

            object? redriveAllowPolicy,

            object? redrivePolicy,

            ImmutableArray<Outputs.QueueTag> tags,

            int? visibilityTimeout)
        {
            Arn = arn;
            ContentBasedDeduplication = contentBasedDeduplication;
            DeduplicationScope = deduplicationScope;
            DelaySeconds = delaySeconds;
            FifoThroughputLimit = fifoThroughputLimit;
            Id = id;
            KmsDataKeyReusePeriodSeconds = kmsDataKeyReusePeriodSeconds;
            KmsMasterKeyId = kmsMasterKeyId;
            MaximumMessageSize = maximumMessageSize;
            MessageRetentionPeriod = messageRetentionPeriod;
            ReceiveMessageWaitTimeSeconds = receiveMessageWaitTimeSeconds;
            RedriveAllowPolicy = redriveAllowPolicy;
            RedrivePolicy = redrivePolicy;
            Tags = tags;
            VisibilityTimeout = visibilityTimeout;
        }
    }
}
