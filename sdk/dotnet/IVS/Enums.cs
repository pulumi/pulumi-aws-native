// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.IVS
{
    /// <summary>
    /// Channel latency mode.
    /// </summary>
    [EnumType]
    public readonly struct ChannelLatencyMode : IEquatable<ChannelLatencyMode>
    {
        private readonly string _value;

        private ChannelLatencyMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ChannelLatencyMode Normal { get; } = new ChannelLatencyMode("NORMAL");
        public static ChannelLatencyMode Low { get; } = new ChannelLatencyMode("LOW");

        public static bool operator ==(ChannelLatencyMode left, ChannelLatencyMode right) => left.Equals(right);
        public static bool operator !=(ChannelLatencyMode left, ChannelLatencyMode right) => !left.Equals(right);

        public static explicit operator string(ChannelLatencyMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ChannelLatencyMode other && Equals(other);
        public bool Equals(ChannelLatencyMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Channel type, which determines the allowable resolution and bitrate. If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.
    /// </summary>
    [EnumType]
    public readonly struct ChannelType : IEquatable<ChannelType>
    {
        private readonly string _value;

        private ChannelType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ChannelType Standard { get; } = new ChannelType("STANDARD");
        public static ChannelType Basic { get; } = new ChannelType("BASIC");

        public static bool operator ==(ChannelType left, ChannelType right) => left.Equals(right);
        public static bool operator !=(ChannelType left, ChannelType right) => !left.Equals(right);

        public static explicit operator string(ChannelType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ChannelType other && Equals(other);
        public bool Equals(ChannelType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Recording Configuration State.
    /// </summary>
    [EnumType]
    public readonly struct RecordingConfigurationState : IEquatable<RecordingConfigurationState>
    {
        private readonly string _value;

        private RecordingConfigurationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecordingConfigurationState Creating { get; } = new RecordingConfigurationState("CREATING");
        public static RecordingConfigurationState CreateFailed { get; } = new RecordingConfigurationState("CREATE_FAILED");
        public static RecordingConfigurationState Active { get; } = new RecordingConfigurationState("ACTIVE");

        public static bool operator ==(RecordingConfigurationState left, RecordingConfigurationState right) => left.Equals(right);
        public static bool operator !=(RecordingConfigurationState left, RecordingConfigurationState right) => !left.Equals(right);

        public static explicit operator string(RecordingConfigurationState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecordingConfigurationState other && Equals(other);
        public bool Equals(RecordingConfigurationState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
