// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IVS
{
    public static class GetChannel
    {
        /// <summary>
        /// Resource Type definition for AWS::IVS::Channel
        /// </summary>
        public static Task<GetChannelResult> InvokeAsync(GetChannelArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetChannelResult>("aws-native:ivs:getChannel", args ?? new GetChannelArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::IVS::Channel
        /// </summary>
        public static Output<GetChannelResult> Invoke(GetChannelInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetChannelResult>("aws-native:ivs:getChannel", args ?? new GetChannelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetChannelArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Channel ARN is automatically generated on creation and assigned as the unique identifier.
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetChannelArgs()
        {
        }
    }

    public sealed class GetChannelInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Channel ARN is automatically generated on creation and assigned as the unique identifier.
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetChannelInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetChannelResult
    {
        /// <summary>
        /// Channel ARN is automatically generated on creation and assigned as the unique identifier.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// Whether the channel is authorized.
        /// </summary>
        public readonly bool? Authorized;
        /// <summary>
        /// Channel ingest endpoint, part of the definition of an ingest server, used when you set up streaming software.
        /// </summary>
        public readonly string? IngestEndpoint;
        /// <summary>
        /// Channel latency mode.
        /// </summary>
        public readonly Pulumi.AwsNative.IVS.ChannelLatencyMode? LatencyMode;
        /// <summary>
        /// Channel
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Channel Playback URL.
        /// </summary>
        public readonly string? PlaybackUrl;
        /// <summary>
        /// Recording Configuration ARN. A value other than an empty string indicates that recording is enabled. Default: “” (recording is disabled).
        /// </summary>
        public readonly string? RecordingConfigurationArn;
        /// <summary>
        /// A list of key-value pairs that contain metadata for the asset model.
        /// </summary>
        public readonly ImmutableArray<Outputs.ChannelTag> Tags;
        /// <summary>
        /// Channel type, which determines the allowable resolution and bitrate. If you exceed the allowable resolution or bitrate, the stream probably will disconnect immediately.
        /// </summary>
        public readonly Pulumi.AwsNative.IVS.ChannelType? Type;

        [OutputConstructor]
        private GetChannelResult(
            string? arn,

            bool? authorized,

            string? ingestEndpoint,

            Pulumi.AwsNative.IVS.ChannelLatencyMode? latencyMode,

            string? name,

            string? playbackUrl,

            string? recordingConfigurationArn,

            ImmutableArray<Outputs.ChannelTag> tags,

            Pulumi.AwsNative.IVS.ChannelType? type)
        {
            Arn = arn;
            Authorized = authorized;
            IngestEndpoint = ingestEndpoint;
            LatencyMode = latencyMode;
            Name = name;
            PlaybackUrl = playbackUrl;
            RecordingConfigurationArn = recordingConfigurationArn;
            Tags = tags;
            Type = type;
        }
    }
}
