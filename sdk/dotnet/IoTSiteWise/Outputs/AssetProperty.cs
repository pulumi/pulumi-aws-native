// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTSiteWise.Outputs
{

    /// <summary>
    /// The asset property's definition, alias, unit, and notification state.
    /// </summary>
    [OutputType]
    public sealed class AssetProperty
    {
        /// <summary>
        /// The property alias that identifies the property.
        /// </summary>
        public readonly string? Alias;
        /// <summary>
        /// String-friendly customer provided external ID
        /// </summary>
        public readonly string? ExternalId;
        /// <summary>
        /// Customer provided actual UUID for property
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Customer provided ID for property.
        /// </summary>
        public readonly string? LogicalId;
        /// <summary>
        /// The MQTT notification state (ENABLED or DISABLED) for this asset property.
        /// </summary>
        public readonly Pulumi.AwsNative.IoTSiteWise.AssetPropertyNotificationState? NotificationState;
        /// <summary>
        /// The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the assetModelProperty in the asset model.
        /// </summary>
        public readonly string? Unit;

        [OutputConstructor]
        private AssetProperty(
            string? alias,

            string? externalId,

            string? id,

            string? logicalId,

            Pulumi.AwsNative.IoTSiteWise.AssetPropertyNotificationState? notificationState,

            string? unit)
        {
            Alias = alias;
            ExternalId = externalId;
            Id = id;
            LogicalId = logicalId;
            NotificationState = notificationState;
            Unit = unit;
        }
    }
}
