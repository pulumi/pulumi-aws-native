// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTSiteWise
{
    public static class GetGateway
    {
        /// <summary>
        /// Resource schema for AWS::IoTSiteWise::Gateway
        /// </summary>
        public static Task<GetGatewayResult> InvokeAsync(GetGatewayArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGatewayResult>("aws-native:iotsitewise:getGateway", args ?? new GetGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::IoTSiteWise::Gateway
        /// </summary>
        public static Output<GetGatewayResult> Invoke(GetGatewayInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGatewayResult>("aws-native:iotsitewise:getGateway", args ?? new GetGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewayArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the gateway device.
        /// </summary>
        [Input("gatewayId", required: true)]
        public string GatewayId { get; set; } = null!;

        public GetGatewayArgs()
        {
        }
    }

    public sealed class GetGatewayInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the gateway device.
        /// </summary>
        [Input("gatewayId", required: true)]
        public Input<string> GatewayId { get; set; } = null!;

        public GetGatewayInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGatewayResult
    {
        /// <summary>
        /// A list of gateway capability summaries that each contain a namespace and status.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewayCapabilitySummary> GatewayCapabilitySummaries;
        /// <summary>
        /// The ID of the gateway device.
        /// </summary>
        public readonly string? GatewayId;
        /// <summary>
        /// A unique, friendly name for the gateway.
        /// </summary>
        public readonly string? GatewayName;
        /// <summary>
        /// A list of key-value pairs that contain metadata for the gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewayTag> Tags;

        [OutputConstructor]
        private GetGatewayResult(
            ImmutableArray<Outputs.GatewayCapabilitySummary> gatewayCapabilitySummaries,

            string? gatewayId,

            string? gatewayName,

            ImmutableArray<Outputs.GatewayTag> tags)
        {
            GatewayCapabilitySummaries = gatewayCapabilitySummaries;
            GatewayId = gatewayId;
            GatewayName = gatewayName;
            Tags = tags;
        }
    }
}
