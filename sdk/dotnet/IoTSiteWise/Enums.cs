// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.IoTSiteWise
{
    [EnumType]
    public readonly struct AssetModelDataType : IEquatable<AssetModelDataType>
    {
        private readonly string _value;

        private AssetModelDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssetModelDataType String { get; } = new AssetModelDataType("STRING");
        public static AssetModelDataType Integer { get; } = new AssetModelDataType("INTEGER");
        public static AssetModelDataType Double { get; } = new AssetModelDataType("DOUBLE");
        public static AssetModelDataType Boolean { get; } = new AssetModelDataType("BOOLEAN");
        public static AssetModelDataType Struct { get; } = new AssetModelDataType("STRUCT");

        public static bool operator ==(AssetModelDataType left, AssetModelDataType right) => left.Equals(right);
        public static bool operator !=(AssetModelDataType left, AssetModelDataType right) => !left.Equals(right);

        public static explicit operator string(AssetModelDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssetModelDataType other && Equals(other);
        public bool Equals(AssetModelDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AssetModelDataTypeSpec : IEquatable<AssetModelDataTypeSpec>
    {
        private readonly string _value;

        private AssetModelDataTypeSpec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssetModelDataTypeSpec AwsalarmState { get; } = new AssetModelDataTypeSpec("AWS/ALARM_STATE");

        public static bool operator ==(AssetModelDataTypeSpec left, AssetModelDataTypeSpec right) => left.Equals(right);
        public static bool operator !=(AssetModelDataTypeSpec left, AssetModelDataTypeSpec right) => !left.Equals(right);

        public static explicit operator string(AssetModelDataTypeSpec value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssetModelDataTypeSpec other && Equals(other);
        public bool Equals(AssetModelDataTypeSpec other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AssetModelTypeName : IEquatable<AssetModelTypeName>
    {
        private readonly string _value;

        private AssetModelTypeName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssetModelTypeName Measurement { get; } = new AssetModelTypeName("Measurement");
        public static AssetModelTypeName Attribute { get; } = new AssetModelTypeName("Attribute");
        public static AssetModelTypeName Transform { get; } = new AssetModelTypeName("Transform");
        public static AssetModelTypeName Metric { get; } = new AssetModelTypeName("Metric");

        public static bool operator ==(AssetModelTypeName left, AssetModelTypeName right) => left.Equals(right);
        public static bool operator !=(AssetModelTypeName left, AssetModelTypeName right) => !left.Equals(right);

        public static explicit operator string(AssetModelTypeName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssetModelTypeName other && Equals(other);
        public bool Equals(AssetModelTypeName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The MQTT notification state (ENABLED or DISABLED) for this asset property.
    /// </summary>
    [EnumType]
    public readonly struct AssetPropertyNotificationState : IEquatable<AssetPropertyNotificationState>
    {
        private readonly string _value;

        private AssetPropertyNotificationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssetPropertyNotificationState Enabled { get; } = new AssetPropertyNotificationState("ENABLED");
        public static AssetPropertyNotificationState Disabled { get; } = new AssetPropertyNotificationState("DISABLED");

        public static bool operator ==(AssetPropertyNotificationState left, AssetPropertyNotificationState right) => left.Equals(right);
        public static bool operator !=(AssetPropertyNotificationState left, AssetPropertyNotificationState right) => !left.Equals(right);

        public static explicit operator string(AssetPropertyNotificationState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssetPropertyNotificationState other && Equals(other);
        public bool Equals(AssetPropertyNotificationState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
