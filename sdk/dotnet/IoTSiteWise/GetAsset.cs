// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTSiteWise
{
    public static class GetAsset
    {
        /// <summary>
        /// Resource schema for AWS::IoTSiteWise::Asset
        /// </summary>
        public static Task<GetAssetResult> InvokeAsync(GetAssetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAssetResult>("aws-native:iotsitewise:getAsset", args ?? new GetAssetArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::IoTSiteWise::Asset
        /// </summary>
        public static Output<GetAssetResult> Invoke(GetAssetInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAssetResult>("aws-native:iotsitewise:getAsset", args ?? new GetAssetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAssetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the asset
        /// </summary>
        [Input("assetId", required: true)]
        public string AssetId { get; set; } = null!;

        public GetAssetArgs()
        {
        }
    }

    public sealed class GetAssetInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the asset
        /// </summary>
        [Input("assetId", required: true)]
        public Input<string> AssetId { get; set; } = null!;

        public GetAssetInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAssetResult
    {
        /// <summary>
        /// The ARN of the asset
        /// </summary>
        public readonly string? AssetArn;
        public readonly ImmutableArray<Outputs.AssetHierarchy> AssetHierarchies;
        /// <summary>
        /// The ID of the asset
        /// </summary>
        public readonly string? AssetId;
        /// <summary>
        /// The ID of the asset model from which to create the asset.
        /// </summary>
        public readonly string? AssetModelId;
        /// <summary>
        /// A unique, friendly name for the asset.
        /// </summary>
        public readonly string? AssetName;
        public readonly ImmutableArray<Outputs.AssetProperty> AssetProperties;
        /// <summary>
        /// A list of key-value pairs that contain metadata for the asset.
        /// </summary>
        public readonly ImmutableArray<Outputs.AssetTag> Tags;

        [OutputConstructor]
        private GetAssetResult(
            string? assetArn,

            ImmutableArray<Outputs.AssetHierarchy> assetHierarchies,

            string? assetId,

            string? assetModelId,

            string? assetName,

            ImmutableArray<Outputs.AssetProperty> assetProperties,

            ImmutableArray<Outputs.AssetTag> tags)
        {
            AssetArn = assetArn;
            AssetHierarchies = assetHierarchies;
            AssetId = assetId;
            AssetModelId = assetModelId;
            AssetName = assetName;
            AssetProperties = assetProperties;
            Tags = tags;
        }
    }
}
