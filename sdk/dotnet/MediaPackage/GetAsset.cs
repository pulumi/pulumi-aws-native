// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaPackage
{
    public static class GetAsset
    {
        /// <summary>
        /// Resource schema for AWS::MediaPackage::Asset
        /// </summary>
        public static Task<GetAssetResult> InvokeAsync(GetAssetArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAssetResult>("aws-native:mediapackage:getAsset", args ?? new GetAssetArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::MediaPackage::Asset
        /// </summary>
        public static Output<GetAssetResult> Invoke(GetAssetInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAssetResult>("aws-native:mediapackage:getAsset", args ?? new GetAssetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAssetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the Asset.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetAssetArgs()
        {
        }
    }

    public sealed class GetAssetInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the Asset.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetAssetInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAssetResult
    {
        /// <summary>
        /// The ARN of the Asset.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The time the Asset was initially submitted for Ingest.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// The list of egress endpoints available for the Asset.
        /// </summary>
        public readonly ImmutableArray<Outputs.AssetEgressEndpoint> EgressEndpoints;
        /// <summary>
        /// The unique identifier for the Asset.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The ID of the PackagingGroup for the Asset.
        /// </summary>
        public readonly string? PackagingGroupId;
        /// <summary>
        /// The resource ID to include in SPEKE key requests.
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// ARN of the source object in S3.
        /// </summary>
        public readonly string? SourceArn;
        /// <summary>
        /// The IAM role_arn used to access the source S3 bucket.
        /// </summary>
        public readonly string? SourceRoleArn;
        /// <summary>
        /// A collection of tags associated with a resource
        /// </summary>
        public readonly ImmutableArray<Outputs.AssetTag> Tags;

        [OutputConstructor]
        private GetAssetResult(
            string? arn,

            string? createdAt,

            ImmutableArray<Outputs.AssetEgressEndpoint> egressEndpoints,

            string? id,

            string? packagingGroupId,

            string? resourceId,

            string? sourceArn,

            string? sourceRoleArn,

            ImmutableArray<Outputs.AssetTag> tags)
        {
            Arn = arn;
            CreatedAt = createdAt;
            EgressEndpoints = egressEndpoints;
            Id = id;
            PackagingGroupId = packagingGroupId;
            ResourceId = resourceId;
            SourceArn = sourceArn;
            SourceRoleArn = sourceRoleArn;
            Tags = tags;
        }
    }
}
