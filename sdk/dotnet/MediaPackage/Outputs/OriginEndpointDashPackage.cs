// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaPackage.Outputs
{

    /// <summary>
    /// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
    /// </summary>
    [OutputType]
    public sealed class OriginEndpointDashPackage
    {
        /// <summary>
        /// A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
        /// </summary>
        public readonly ImmutableArray<string> AdTriggers;
        public readonly string? AdsOnDeliveryRestrictions;
        public readonly Outputs.OriginEndpointDashEncryption? Encryption;
        /// <summary>
        /// Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
        /// </summary>
        public readonly string? ManifestLayout;
        /// <summary>
        /// Time window (in seconds) contained in each manifest.
        /// </summary>
        public readonly int? ManifestWindowSeconds;
        /// <summary>
        /// Minimum duration (in seconds) that a player will buffer media before starting the presentation.
        /// </summary>
        public readonly int? MinBufferTimeSeconds;
        /// <summary>
        /// Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
        /// </summary>
        public readonly int? MinUpdatePeriodSeconds;
        /// <summary>
        /// A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
        /// </summary>
        public readonly ImmutableArray<string> PeriodTriggers;
        /// <summary>
        /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
        /// </summary>
        public readonly string? Profile;
        /// <summary>
        /// Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
        /// </summary>
        public readonly int? SegmentDurationSeconds;
        /// <summary>
        /// Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
        /// </summary>
        public readonly string? SegmentTemplateFormat;
        public readonly Outputs.OriginEndpointStreamSelection? StreamSelection;
        /// <summary>
        /// Duration (in seconds) to delay live content before presentation.
        /// </summary>
        public readonly int? SuggestedPresentationDelaySeconds;
        /// <summary>
        /// Determines the type of UTCTiming included in the Media Presentation Description (MPD)
        /// </summary>
        public readonly string? UtcTiming;
        /// <summary>
        /// Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO or HTTP-HEAD
        /// </summary>
        public readonly string? UtcTimingUri;

        [OutputConstructor]
        private OriginEndpointDashPackage(
            ImmutableArray<string> adTriggers,

            string? adsOnDeliveryRestrictions,

            Outputs.OriginEndpointDashEncryption? encryption,

            string? manifestLayout,

            int? manifestWindowSeconds,

            int? minBufferTimeSeconds,

            int? minUpdatePeriodSeconds,

            ImmutableArray<string> periodTriggers,

            string? profile,

            int? segmentDurationSeconds,

            string? segmentTemplateFormat,

            Outputs.OriginEndpointStreamSelection? streamSelection,

            int? suggestedPresentationDelaySeconds,

            string? utcTiming,

            string? utcTimingUri)
        {
            AdTriggers = adTriggers;
            AdsOnDeliveryRestrictions = adsOnDeliveryRestrictions;
            Encryption = encryption;
            ManifestLayout = manifestLayout;
            ManifestWindowSeconds = manifestWindowSeconds;
            MinBufferTimeSeconds = minBufferTimeSeconds;
            MinUpdatePeriodSeconds = minUpdatePeriodSeconds;
            PeriodTriggers = periodTriggers;
            Profile = profile;
            SegmentDurationSeconds = segmentDurationSeconds;
            SegmentTemplateFormat = segmentTemplateFormat;
            StreamSelection = streamSelection;
            SuggestedPresentationDelaySeconds = suggestedPresentationDelaySeconds;
            UtcTiming = utcTiming;
            UtcTimingUri = utcTimingUri;
        }
    }
}
