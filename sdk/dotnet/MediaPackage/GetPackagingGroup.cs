// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.MediaPackage
{
    public static class GetPackagingGroup
    {
        /// <summary>
        /// Resource schema for AWS::MediaPackage::PackagingGroup
        /// </summary>
        public static Task<GetPackagingGroupResult> InvokeAsync(GetPackagingGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPackagingGroupResult>("aws-native:mediapackage:getPackagingGroup", args ?? new GetPackagingGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::MediaPackage::PackagingGroup
        /// </summary>
        public static Output<GetPackagingGroupResult> Invoke(GetPackagingGroupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPackagingGroupResult>("aws-native:mediapackage:getPackagingGroup", args ?? new GetPackagingGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPackagingGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the PackagingGroup.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetPackagingGroupArgs()
        {
        }
    }

    public sealed class GetPackagingGroupInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the PackagingGroup.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetPackagingGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPackagingGroupResult
    {
        /// <summary>
        /// The ARN of the PackagingGroup.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// CDN Authorization
        /// </summary>
        public readonly Outputs.PackagingGroupAuthorization? Authorization;
        /// <summary>
        /// The fully qualified domain name for Assets in the PackagingGroup.
        /// </summary>
        public readonly string? DomainName;
        /// <summary>
        /// The configuration parameters for egress access logging.
        /// </summary>
        public readonly Outputs.PackagingGroupLogConfiguration? EgressAccessLogs;

        [OutputConstructor]
        private GetPackagingGroupResult(
            string? arn,

            Outputs.PackagingGroupAuthorization? authorization,

            string? domainName,

            Outputs.PackagingGroupLogConfiguration? egressAccessLogs)
        {
            Arn = arn;
            Authorization = authorization;
            DomainName = domainName;
            EgressAccessLogs = egressAccessLogs;
        }
    }
}
