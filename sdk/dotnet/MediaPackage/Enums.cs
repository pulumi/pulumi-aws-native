// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.MediaPackage
{
    /// <summary>
    /// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointAdsOnDeliveryRestrictions : IEquatable<OriginEndpointAdsOnDeliveryRestrictions>
    {
        private readonly string _value;

        private OriginEndpointAdsOnDeliveryRestrictions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointAdsOnDeliveryRestrictions None { get; } = new OriginEndpointAdsOnDeliveryRestrictions("NONE");
        public static OriginEndpointAdsOnDeliveryRestrictions Restricted { get; } = new OriginEndpointAdsOnDeliveryRestrictions("RESTRICTED");
        public static OriginEndpointAdsOnDeliveryRestrictions Unrestricted { get; } = new OriginEndpointAdsOnDeliveryRestrictions("UNRESTRICTED");
        public static OriginEndpointAdsOnDeliveryRestrictions Both { get; } = new OriginEndpointAdsOnDeliveryRestrictions("BOTH");

        public static bool operator ==(OriginEndpointAdsOnDeliveryRestrictions left, OriginEndpointAdsOnDeliveryRestrictions right) => left.Equals(right);
        public static bool operator !=(OriginEndpointAdsOnDeliveryRestrictions left, OriginEndpointAdsOnDeliveryRestrictions right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointAdsOnDeliveryRestrictions value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointAdsOnDeliveryRestrictions other && Equals(other);
        public bool Equals(OriginEndpointAdsOnDeliveryRestrictions other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OriginEndpointDashPackageAdTriggersItem : IEquatable<OriginEndpointDashPackageAdTriggersItem>
    {
        private readonly string _value;

        private OriginEndpointDashPackageAdTriggersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointDashPackageAdTriggersItem SpliceInsert { get; } = new OriginEndpointDashPackageAdTriggersItem("SPLICE_INSERT");
        public static OriginEndpointDashPackageAdTriggersItem Break { get; } = new OriginEndpointDashPackageAdTriggersItem("BREAK");
        public static OriginEndpointDashPackageAdTriggersItem ProviderAdvertisement { get; } = new OriginEndpointDashPackageAdTriggersItem("PROVIDER_ADVERTISEMENT");
        public static OriginEndpointDashPackageAdTriggersItem DistributorAdvertisement { get; } = new OriginEndpointDashPackageAdTriggersItem("DISTRIBUTOR_ADVERTISEMENT");
        public static OriginEndpointDashPackageAdTriggersItem ProviderPlacementOpportunity { get; } = new OriginEndpointDashPackageAdTriggersItem("PROVIDER_PLACEMENT_OPPORTUNITY");
        public static OriginEndpointDashPackageAdTriggersItem DistributorPlacementOpportunity { get; } = new OriginEndpointDashPackageAdTriggersItem("DISTRIBUTOR_PLACEMENT_OPPORTUNITY");
        public static OriginEndpointDashPackageAdTriggersItem ProviderOverlayPlacementOpportunity { get; } = new OriginEndpointDashPackageAdTriggersItem("PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY");
        public static OriginEndpointDashPackageAdTriggersItem DistributorOverlayPlacementOpportunity { get; } = new OriginEndpointDashPackageAdTriggersItem("DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY");

        public static bool operator ==(OriginEndpointDashPackageAdTriggersItem left, OriginEndpointDashPackageAdTriggersItem right) => left.Equals(right);
        public static bool operator !=(OriginEndpointDashPackageAdTriggersItem left, OriginEndpointDashPackageAdTriggersItem right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointDashPackageAdTriggersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointDashPackageAdTriggersItem other && Equals(other);
        public bool Equals(OriginEndpointDashPackageAdTriggersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointDashPackageManifestLayout : IEquatable<OriginEndpointDashPackageManifestLayout>
    {
        private readonly string _value;

        private OriginEndpointDashPackageManifestLayout(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointDashPackageManifestLayout Full { get; } = new OriginEndpointDashPackageManifestLayout("FULL");
        public static OriginEndpointDashPackageManifestLayout Compact { get; } = new OriginEndpointDashPackageManifestLayout("COMPACT");

        public static bool operator ==(OriginEndpointDashPackageManifestLayout left, OriginEndpointDashPackageManifestLayout right) => left.Equals(right);
        public static bool operator !=(OriginEndpointDashPackageManifestLayout left, OriginEndpointDashPackageManifestLayout right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointDashPackageManifestLayout value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointDashPackageManifestLayout other && Equals(other);
        public bool Equals(OriginEndpointDashPackageManifestLayout other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OriginEndpointDashPackagePeriodTriggersItem : IEquatable<OriginEndpointDashPackagePeriodTriggersItem>
    {
        private readonly string _value;

        private OriginEndpointDashPackagePeriodTriggersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointDashPackagePeriodTriggersItem Ads { get; } = new OriginEndpointDashPackagePeriodTriggersItem("ADS");

        public static bool operator ==(OriginEndpointDashPackagePeriodTriggersItem left, OriginEndpointDashPackagePeriodTriggersItem right) => left.Equals(right);
        public static bool operator !=(OriginEndpointDashPackagePeriodTriggersItem left, OriginEndpointDashPackagePeriodTriggersItem right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointDashPackagePeriodTriggersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointDashPackagePeriodTriggersItem other && Equals(other);
        public bool Equals(OriginEndpointDashPackagePeriodTriggersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointDashPackageProfile : IEquatable<OriginEndpointDashPackageProfile>
    {
        private readonly string _value;

        private OriginEndpointDashPackageProfile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointDashPackageProfile None { get; } = new OriginEndpointDashPackageProfile("NONE");
        public static OriginEndpointDashPackageProfile Hbbtv15 { get; } = new OriginEndpointDashPackageProfile("HBBTV_1_5");

        public static bool operator ==(OriginEndpointDashPackageProfile left, OriginEndpointDashPackageProfile right) => left.Equals(right);
        public static bool operator !=(OriginEndpointDashPackageProfile left, OriginEndpointDashPackageProfile right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointDashPackageProfile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointDashPackageProfile other && Equals(other);
        public bool Equals(OriginEndpointDashPackageProfile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointDashPackageSegmentTemplateFormat : IEquatable<OriginEndpointDashPackageSegmentTemplateFormat>
    {
        private readonly string _value;

        private OriginEndpointDashPackageSegmentTemplateFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointDashPackageSegmentTemplateFormat NumberWithTimeline { get; } = new OriginEndpointDashPackageSegmentTemplateFormat("NUMBER_WITH_TIMELINE");
        public static OriginEndpointDashPackageSegmentTemplateFormat TimeWithTimeline { get; } = new OriginEndpointDashPackageSegmentTemplateFormat("TIME_WITH_TIMELINE");
        public static OriginEndpointDashPackageSegmentTemplateFormat NumberWithDuration { get; } = new OriginEndpointDashPackageSegmentTemplateFormat("NUMBER_WITH_DURATION");

        public static bool operator ==(OriginEndpointDashPackageSegmentTemplateFormat left, OriginEndpointDashPackageSegmentTemplateFormat right) => left.Equals(right);
        public static bool operator !=(OriginEndpointDashPackageSegmentTemplateFormat left, OriginEndpointDashPackageSegmentTemplateFormat right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointDashPackageSegmentTemplateFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointDashPackageSegmentTemplateFormat other && Equals(other);
        public bool Equals(OriginEndpointDashPackageSegmentTemplateFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of UTCTiming included in the Media Presentation Description (MPD)
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointDashPackageUtcTiming : IEquatable<OriginEndpointDashPackageUtcTiming>
    {
        private readonly string _value;

        private OriginEndpointDashPackageUtcTiming(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointDashPackageUtcTiming HttpIso { get; } = new OriginEndpointDashPackageUtcTiming("HTTP-ISO");
        public static OriginEndpointDashPackageUtcTiming HttpHead { get; } = new OriginEndpointDashPackageUtcTiming("HTTP-HEAD");
        public static OriginEndpointDashPackageUtcTiming None { get; } = new OriginEndpointDashPackageUtcTiming("NONE");

        public static bool operator ==(OriginEndpointDashPackageUtcTiming left, OriginEndpointDashPackageUtcTiming right) => left.Equals(right);
        public static bool operator !=(OriginEndpointDashPackageUtcTiming left, OriginEndpointDashPackageUtcTiming right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointDashPackageUtcTiming value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointDashPackageUtcTiming other && Equals(other);
        public bool Equals(OriginEndpointDashPackageUtcTiming other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The encryption method to use.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointHlsEncryptionEncryptionMethod : IEquatable<OriginEndpointHlsEncryptionEncryptionMethod>
    {
        private readonly string _value;

        private OriginEndpointHlsEncryptionEncryptionMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointHlsEncryptionEncryptionMethod Aes128 { get; } = new OriginEndpointHlsEncryptionEncryptionMethod("AES_128");
        public static OriginEndpointHlsEncryptionEncryptionMethod SampleAes { get; } = new OriginEndpointHlsEncryptionEncryptionMethod("SAMPLE_AES");

        public static bool operator ==(OriginEndpointHlsEncryptionEncryptionMethod left, OriginEndpointHlsEncryptionEncryptionMethod right) => left.Equals(right);
        public static bool operator !=(OriginEndpointHlsEncryptionEncryptionMethod left, OriginEndpointHlsEncryptionEncryptionMethod right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointHlsEncryptionEncryptionMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointHlsEncryptionEncryptionMethod other && Equals(other);
        public bool Equals(OriginEndpointHlsEncryptionEncryptionMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointHlsManifestAdMarkers : IEquatable<OriginEndpointHlsManifestAdMarkers>
    {
        private readonly string _value;

        private OriginEndpointHlsManifestAdMarkers(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointHlsManifestAdMarkers None { get; } = new OriginEndpointHlsManifestAdMarkers("NONE");
        public static OriginEndpointHlsManifestAdMarkers Scte35Enhanced { get; } = new OriginEndpointHlsManifestAdMarkers("SCTE35_ENHANCED");
        public static OriginEndpointHlsManifestAdMarkers Passthrough { get; } = new OriginEndpointHlsManifestAdMarkers("PASSTHROUGH");
        public static OriginEndpointHlsManifestAdMarkers Daterange { get; } = new OriginEndpointHlsManifestAdMarkers("DATERANGE");

        public static bool operator ==(OriginEndpointHlsManifestAdMarkers left, OriginEndpointHlsManifestAdMarkers right) => left.Equals(right);
        public static bool operator !=(OriginEndpointHlsManifestAdMarkers left, OriginEndpointHlsManifestAdMarkers right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointHlsManifestAdMarkers value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointHlsManifestAdMarkers other && Equals(other);
        public bool Equals(OriginEndpointHlsManifestAdMarkers other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OriginEndpointHlsManifestAdTriggersItem : IEquatable<OriginEndpointHlsManifestAdTriggersItem>
    {
        private readonly string _value;

        private OriginEndpointHlsManifestAdTriggersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointHlsManifestAdTriggersItem SpliceInsert { get; } = new OriginEndpointHlsManifestAdTriggersItem("SPLICE_INSERT");
        public static OriginEndpointHlsManifestAdTriggersItem Break { get; } = new OriginEndpointHlsManifestAdTriggersItem("BREAK");
        public static OriginEndpointHlsManifestAdTriggersItem ProviderAdvertisement { get; } = new OriginEndpointHlsManifestAdTriggersItem("PROVIDER_ADVERTISEMENT");
        public static OriginEndpointHlsManifestAdTriggersItem DistributorAdvertisement { get; } = new OriginEndpointHlsManifestAdTriggersItem("DISTRIBUTOR_ADVERTISEMENT");
        public static OriginEndpointHlsManifestAdTriggersItem ProviderPlacementOpportunity { get; } = new OriginEndpointHlsManifestAdTriggersItem("PROVIDER_PLACEMENT_OPPORTUNITY");
        public static OriginEndpointHlsManifestAdTriggersItem DistributorPlacementOpportunity { get; } = new OriginEndpointHlsManifestAdTriggersItem("DISTRIBUTOR_PLACEMENT_OPPORTUNITY");
        public static OriginEndpointHlsManifestAdTriggersItem ProviderOverlayPlacementOpportunity { get; } = new OriginEndpointHlsManifestAdTriggersItem("PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY");
        public static OriginEndpointHlsManifestAdTriggersItem DistributorOverlayPlacementOpportunity { get; } = new OriginEndpointHlsManifestAdTriggersItem("DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY");

        public static bool operator ==(OriginEndpointHlsManifestAdTriggersItem left, OriginEndpointHlsManifestAdTriggersItem right) => left.Equals(right);
        public static bool operator !=(OriginEndpointHlsManifestAdTriggersItem left, OriginEndpointHlsManifestAdTriggersItem right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointHlsManifestAdTriggersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointHlsManifestAdTriggersItem other && Equals(other);
        public bool Equals(OriginEndpointHlsManifestAdTriggersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointHlsManifestPlaylistType : IEquatable<OriginEndpointHlsManifestPlaylistType>
    {
        private readonly string _value;

        private OriginEndpointHlsManifestPlaylistType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointHlsManifestPlaylistType None { get; } = new OriginEndpointHlsManifestPlaylistType("NONE");
        public static OriginEndpointHlsManifestPlaylistType Event { get; } = new OriginEndpointHlsManifestPlaylistType("EVENT");
        public static OriginEndpointHlsManifestPlaylistType Vod { get; } = new OriginEndpointHlsManifestPlaylistType("VOD");

        public static bool operator ==(OriginEndpointHlsManifestPlaylistType left, OriginEndpointHlsManifestPlaylistType right) => left.Equals(right);
        public static bool operator !=(OriginEndpointHlsManifestPlaylistType left, OriginEndpointHlsManifestPlaylistType right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointHlsManifestPlaylistType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointHlsManifestPlaylistType other && Equals(other);
        public bool Equals(OriginEndpointHlsManifestPlaylistType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointHlsPackageAdMarkers : IEquatable<OriginEndpointHlsPackageAdMarkers>
    {
        private readonly string _value;

        private OriginEndpointHlsPackageAdMarkers(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointHlsPackageAdMarkers None { get; } = new OriginEndpointHlsPackageAdMarkers("NONE");
        public static OriginEndpointHlsPackageAdMarkers Scte35Enhanced { get; } = new OriginEndpointHlsPackageAdMarkers("SCTE35_ENHANCED");
        public static OriginEndpointHlsPackageAdMarkers Passthrough { get; } = new OriginEndpointHlsPackageAdMarkers("PASSTHROUGH");
        public static OriginEndpointHlsPackageAdMarkers Daterange { get; } = new OriginEndpointHlsPackageAdMarkers("DATERANGE");

        public static bool operator ==(OriginEndpointHlsPackageAdMarkers left, OriginEndpointHlsPackageAdMarkers right) => left.Equals(right);
        public static bool operator !=(OriginEndpointHlsPackageAdMarkers left, OriginEndpointHlsPackageAdMarkers right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointHlsPackageAdMarkers value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointHlsPackageAdMarkers other && Equals(other);
        public bool Equals(OriginEndpointHlsPackageAdMarkers other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OriginEndpointHlsPackageAdTriggersItem : IEquatable<OriginEndpointHlsPackageAdTriggersItem>
    {
        private readonly string _value;

        private OriginEndpointHlsPackageAdTriggersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointHlsPackageAdTriggersItem SpliceInsert { get; } = new OriginEndpointHlsPackageAdTriggersItem("SPLICE_INSERT");
        public static OriginEndpointHlsPackageAdTriggersItem Break { get; } = new OriginEndpointHlsPackageAdTriggersItem("BREAK");
        public static OriginEndpointHlsPackageAdTriggersItem ProviderAdvertisement { get; } = new OriginEndpointHlsPackageAdTriggersItem("PROVIDER_ADVERTISEMENT");
        public static OriginEndpointHlsPackageAdTriggersItem DistributorAdvertisement { get; } = new OriginEndpointHlsPackageAdTriggersItem("DISTRIBUTOR_ADVERTISEMENT");
        public static OriginEndpointHlsPackageAdTriggersItem ProviderPlacementOpportunity { get; } = new OriginEndpointHlsPackageAdTriggersItem("PROVIDER_PLACEMENT_OPPORTUNITY");
        public static OriginEndpointHlsPackageAdTriggersItem DistributorPlacementOpportunity { get; } = new OriginEndpointHlsPackageAdTriggersItem("DISTRIBUTOR_PLACEMENT_OPPORTUNITY");
        public static OriginEndpointHlsPackageAdTriggersItem ProviderOverlayPlacementOpportunity { get; } = new OriginEndpointHlsPackageAdTriggersItem("PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY");
        public static OriginEndpointHlsPackageAdTriggersItem DistributorOverlayPlacementOpportunity { get; } = new OriginEndpointHlsPackageAdTriggersItem("DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY");

        public static bool operator ==(OriginEndpointHlsPackageAdTriggersItem left, OriginEndpointHlsPackageAdTriggersItem right) => left.Equals(right);
        public static bool operator !=(OriginEndpointHlsPackageAdTriggersItem left, OriginEndpointHlsPackageAdTriggersItem right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointHlsPackageAdTriggersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointHlsPackageAdTriggersItem other && Equals(other);
        public bool Equals(OriginEndpointHlsPackageAdTriggersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointHlsPackagePlaylistType : IEquatable<OriginEndpointHlsPackagePlaylistType>
    {
        private readonly string _value;

        private OriginEndpointHlsPackagePlaylistType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointHlsPackagePlaylistType None { get; } = new OriginEndpointHlsPackagePlaylistType("NONE");
        public static OriginEndpointHlsPackagePlaylistType Event { get; } = new OriginEndpointHlsPackagePlaylistType("EVENT");
        public static OriginEndpointHlsPackagePlaylistType Vod { get; } = new OriginEndpointHlsPackagePlaylistType("VOD");

        public static bool operator ==(OriginEndpointHlsPackagePlaylistType left, OriginEndpointHlsPackagePlaylistType right) => left.Equals(right);
        public static bool operator !=(OriginEndpointHlsPackagePlaylistType left, OriginEndpointHlsPackagePlaylistType right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointHlsPackagePlaylistType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointHlsPackagePlaylistType other && Equals(other);
        public bool Equals(OriginEndpointHlsPackagePlaylistType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointOrigination : IEquatable<OriginEndpointOrigination>
    {
        private readonly string _value;

        private OriginEndpointOrigination(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointOrigination Allow { get; } = new OriginEndpointOrigination("ALLOW");
        public static OriginEndpointOrigination Deny { get; } = new OriginEndpointOrigination("DENY");

        public static bool operator ==(OriginEndpointOrigination left, OriginEndpointOrigination right) => left.Equals(right);
        public static bool operator !=(OriginEndpointOrigination left, OriginEndpointOrigination right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointOrigination value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointOrigination other && Equals(other);
        public bool Equals(OriginEndpointOrigination other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A directive that determines the order of streams in the output.
    /// </summary>
    [EnumType]
    public readonly struct OriginEndpointStreamSelectionStreamOrder : IEquatable<OriginEndpointStreamSelectionStreamOrder>
    {
        private readonly string _value;

        private OriginEndpointStreamSelectionStreamOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OriginEndpointStreamSelectionStreamOrder Original { get; } = new OriginEndpointStreamSelectionStreamOrder("ORIGINAL");
        public static OriginEndpointStreamSelectionStreamOrder VideoBitrateAscending { get; } = new OriginEndpointStreamSelectionStreamOrder("VIDEO_BITRATE_ASCENDING");
        public static OriginEndpointStreamSelectionStreamOrder VideoBitrateDescending { get; } = new OriginEndpointStreamSelectionStreamOrder("VIDEO_BITRATE_DESCENDING");

        public static bool operator ==(OriginEndpointStreamSelectionStreamOrder left, OriginEndpointStreamSelectionStreamOrder right) => left.Equals(right);
        public static bool operator !=(OriginEndpointStreamSelectionStreamOrder left, OriginEndpointStreamSelectionStreamOrder right) => !left.Equals(right);

        public static explicit operator string(OriginEndpointStreamSelectionStreamOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OriginEndpointStreamSelectionStreamOrder other && Equals(other);
        public bool Equals(OriginEndpointStreamSelectionStreamOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
    /// </summary>
    [EnumType]
    public readonly struct PackagingConfigurationDashManifestManifestLayout : IEquatable<PackagingConfigurationDashManifestManifestLayout>
    {
        private readonly string _value;

        private PackagingConfigurationDashManifestManifestLayout(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PackagingConfigurationDashManifestManifestLayout Full { get; } = new PackagingConfigurationDashManifestManifestLayout("FULL");
        public static PackagingConfigurationDashManifestManifestLayout Compact { get; } = new PackagingConfigurationDashManifestManifestLayout("COMPACT");

        public static bool operator ==(PackagingConfigurationDashManifestManifestLayout left, PackagingConfigurationDashManifestManifestLayout right) => left.Equals(right);
        public static bool operator !=(PackagingConfigurationDashManifestManifestLayout left, PackagingConfigurationDashManifestManifestLayout right) => !left.Equals(right);

        public static explicit operator string(PackagingConfigurationDashManifestManifestLayout value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PackagingConfigurationDashManifestManifestLayout other && Equals(other);
        public bool Equals(PackagingConfigurationDashManifestManifestLayout other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
    /// </summary>
    [EnumType]
    public readonly struct PackagingConfigurationDashManifestProfile : IEquatable<PackagingConfigurationDashManifestProfile>
    {
        private readonly string _value;

        private PackagingConfigurationDashManifestProfile(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PackagingConfigurationDashManifestProfile None { get; } = new PackagingConfigurationDashManifestProfile("NONE");
        public static PackagingConfigurationDashManifestProfile Hbbtv15 { get; } = new PackagingConfigurationDashManifestProfile("HBBTV_1_5");

        public static bool operator ==(PackagingConfigurationDashManifestProfile left, PackagingConfigurationDashManifestProfile right) => left.Equals(right);
        public static bool operator !=(PackagingConfigurationDashManifestProfile left, PackagingConfigurationDashManifestProfile right) => !left.Equals(right);

        public static explicit operator string(PackagingConfigurationDashManifestProfile value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PackagingConfigurationDashManifestProfile other && Equals(other);
        public bool Equals(PackagingConfigurationDashManifestProfile other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
    /// </summary>
    [EnumType]
    public readonly struct PackagingConfigurationDashPackageSegmentTemplateFormat : IEquatable<PackagingConfigurationDashPackageSegmentTemplateFormat>
    {
        private readonly string _value;

        private PackagingConfigurationDashPackageSegmentTemplateFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PackagingConfigurationDashPackageSegmentTemplateFormat NumberWithTimeline { get; } = new PackagingConfigurationDashPackageSegmentTemplateFormat("NUMBER_WITH_TIMELINE");
        public static PackagingConfigurationDashPackageSegmentTemplateFormat TimeWithTimeline { get; } = new PackagingConfigurationDashPackageSegmentTemplateFormat("TIME_WITH_TIMELINE");
        public static PackagingConfigurationDashPackageSegmentTemplateFormat NumberWithDuration { get; } = new PackagingConfigurationDashPackageSegmentTemplateFormat("NUMBER_WITH_DURATION");

        public static bool operator ==(PackagingConfigurationDashPackageSegmentTemplateFormat left, PackagingConfigurationDashPackageSegmentTemplateFormat right) => left.Equals(right);
        public static bool operator !=(PackagingConfigurationDashPackageSegmentTemplateFormat left, PackagingConfigurationDashPackageSegmentTemplateFormat right) => !left.Equals(right);

        public static explicit operator string(PackagingConfigurationDashPackageSegmentTemplateFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PackagingConfigurationDashPackageSegmentTemplateFormat other && Equals(other);
        public bool Equals(PackagingConfigurationDashPackageSegmentTemplateFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The encryption method to use.
    /// </summary>
    [EnumType]
    public readonly struct PackagingConfigurationHlsEncryptionEncryptionMethod : IEquatable<PackagingConfigurationHlsEncryptionEncryptionMethod>
    {
        private readonly string _value;

        private PackagingConfigurationHlsEncryptionEncryptionMethod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PackagingConfigurationHlsEncryptionEncryptionMethod Aes128 { get; } = new PackagingConfigurationHlsEncryptionEncryptionMethod("AES_128");
        public static PackagingConfigurationHlsEncryptionEncryptionMethod SampleAes { get; } = new PackagingConfigurationHlsEncryptionEncryptionMethod("SAMPLE_AES");

        public static bool operator ==(PackagingConfigurationHlsEncryptionEncryptionMethod left, PackagingConfigurationHlsEncryptionEncryptionMethod right) => left.Equals(right);
        public static bool operator !=(PackagingConfigurationHlsEncryptionEncryptionMethod left, PackagingConfigurationHlsEncryptionEncryptionMethod right) => !left.Equals(right);

        public static explicit operator string(PackagingConfigurationHlsEncryptionEncryptionMethod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PackagingConfigurationHlsEncryptionEncryptionMethod other && Equals(other);
        public bool Equals(PackagingConfigurationHlsEncryptionEncryptionMethod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
    /// </summary>
    [EnumType]
    public readonly struct PackagingConfigurationHlsManifestAdMarkers : IEquatable<PackagingConfigurationHlsManifestAdMarkers>
    {
        private readonly string _value;

        private PackagingConfigurationHlsManifestAdMarkers(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PackagingConfigurationHlsManifestAdMarkers None { get; } = new PackagingConfigurationHlsManifestAdMarkers("NONE");
        public static PackagingConfigurationHlsManifestAdMarkers Scte35Enhanced { get; } = new PackagingConfigurationHlsManifestAdMarkers("SCTE35_ENHANCED");
        public static PackagingConfigurationHlsManifestAdMarkers Passthrough { get; } = new PackagingConfigurationHlsManifestAdMarkers("PASSTHROUGH");

        public static bool operator ==(PackagingConfigurationHlsManifestAdMarkers left, PackagingConfigurationHlsManifestAdMarkers right) => left.Equals(right);
        public static bool operator !=(PackagingConfigurationHlsManifestAdMarkers left, PackagingConfigurationHlsManifestAdMarkers right) => !left.Equals(right);

        public static explicit operator string(PackagingConfigurationHlsManifestAdMarkers value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PackagingConfigurationHlsManifestAdMarkers other && Equals(other);
        public bool Equals(PackagingConfigurationHlsManifestAdMarkers other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A directive that determines the order of streams in the output.
    /// </summary>
    [EnumType]
    public readonly struct PackagingConfigurationStreamSelectionStreamOrder : IEquatable<PackagingConfigurationStreamSelectionStreamOrder>
    {
        private readonly string _value;

        private PackagingConfigurationStreamSelectionStreamOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PackagingConfigurationStreamSelectionStreamOrder Original { get; } = new PackagingConfigurationStreamSelectionStreamOrder("ORIGINAL");
        public static PackagingConfigurationStreamSelectionStreamOrder VideoBitrateAscending { get; } = new PackagingConfigurationStreamSelectionStreamOrder("VIDEO_BITRATE_ASCENDING");
        public static PackagingConfigurationStreamSelectionStreamOrder VideoBitrateDescending { get; } = new PackagingConfigurationStreamSelectionStreamOrder("VIDEO_BITRATE_DESCENDING");

        public static bool operator ==(PackagingConfigurationStreamSelectionStreamOrder left, PackagingConfigurationStreamSelectionStreamOrder right) => left.Equals(right);
        public static bool operator !=(PackagingConfigurationStreamSelectionStreamOrder left, PackagingConfigurationStreamSelectionStreamOrder right) => !left.Equals(right);

        public static explicit operator string(PackagingConfigurationStreamSelectionStreamOrder value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PackagingConfigurationStreamSelectionStreamOrder other && Equals(other);
        public bool Equals(PackagingConfigurationStreamSelectionStreamOrder other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
