// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.NetworkManager
{
    public static class GetCoreNetwork
    {
        /// <summary>
        /// AWS::NetworkManager::CoreNetwork Resource Type Definition.
        /// </summary>
        public static Task<GetCoreNetworkResult> InvokeAsync(GetCoreNetworkArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCoreNetworkResult>("aws-native:networkmanager:getCoreNetwork", args ?? new GetCoreNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// AWS::NetworkManager::CoreNetwork Resource Type Definition.
        /// </summary>
        public static Output<GetCoreNetworkResult> Invoke(GetCoreNetworkInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCoreNetworkResult>("aws-native:networkmanager:getCoreNetwork", args ?? new GetCoreNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCoreNetworkArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id of core network
        /// </summary>
        [Input("coreNetworkId", required: true)]
        public string CoreNetworkId { get; set; } = null!;

        public GetCoreNetworkArgs()
        {
        }
    }

    public sealed class GetCoreNetworkInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id of core network
        /// </summary>
        [Input("coreNetworkId", required: true)]
        public Input<string> CoreNetworkId { get; set; } = null!;

        public GetCoreNetworkInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCoreNetworkResult
    {
        /// <summary>
        /// The ARN (Amazon resource name) of core network
        /// </summary>
        public readonly string? CoreNetworkArn;
        /// <summary>
        /// The Id of core network
        /// </summary>
        public readonly string? CoreNetworkId;
        /// <summary>
        /// The creation time of core network
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// The description of core network
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The edges within a core network.
        /// </summary>
        public readonly ImmutableArray<Outputs.CoreNetworkEdge> Edges;
        /// <summary>
        /// Owner of the core network
        /// </summary>
        public readonly string? OwnerAccount;
        /// <summary>
        /// Live policy document for the core network
        /// </summary>
        public readonly string? PolicyDocument;
        /// <summary>
        /// The segments within a core network.
        /// </summary>
        public readonly ImmutableArray<Outputs.CoreNetworkSegment> Segments;
        /// <summary>
        /// The state of core network
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The tags for the global network.
        /// </summary>
        public readonly ImmutableArray<Outputs.CoreNetworkTag> Tags;

        [OutputConstructor]
        private GetCoreNetworkResult(
            string? coreNetworkArn,

            string? coreNetworkId,

            string? createdAt,

            string? description,

            ImmutableArray<Outputs.CoreNetworkEdge> edges,

            string? ownerAccount,

            string? policyDocument,

            ImmutableArray<Outputs.CoreNetworkSegment> segments,

            string? state,

            ImmutableArray<Outputs.CoreNetworkTag> tags)
        {
            CoreNetworkArn = coreNetworkArn;
            CoreNetworkId = coreNetworkId;
            CreatedAt = createdAt;
            Description = description;
            Edges = edges;
            OwnerAccount = ownerAccount;
            PolicyDocument = policyDocument;
            Segments = segments;
            State = state;
            Tags = tags;
        }
    }
}
