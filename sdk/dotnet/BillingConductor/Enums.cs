// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.BillingConductor
{
    [EnumType]
    public readonly struct BillingGroupStatus : IEquatable<BillingGroupStatus>
    {
        private readonly string _value;

        private BillingGroupStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BillingGroupStatus Active { get; } = new BillingGroupStatus("ACTIVE");
        public static BillingGroupStatus PrimaryAccountMissing { get; } = new BillingGroupStatus("PRIMARY_ACCOUNT_MISSING");

        public static bool operator ==(BillingGroupStatus left, BillingGroupStatus right) => left.Equals(right);
        public static bool operator !=(BillingGroupStatus left, BillingGroupStatus right) => !left.Equals(right);

        public static explicit operator string(BillingGroupStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BillingGroupStatus other && Equals(other);
        public bool Equals(BillingGroupStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomLineItemCurrencyCode : IEquatable<CustomLineItemCurrencyCode>
    {
        private readonly string _value;

        private CustomLineItemCurrencyCode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomLineItemCurrencyCode Usd { get; } = new CustomLineItemCurrencyCode("USD");
        public static CustomLineItemCurrencyCode Cny { get; } = new CustomLineItemCurrencyCode("CNY");

        public static bool operator ==(CustomLineItemCurrencyCode left, CustomLineItemCurrencyCode right) => left.Equals(right);
        public static bool operator !=(CustomLineItemCurrencyCode left, CustomLineItemCurrencyCode right) => !left.Equals(right);

        public static explicit operator string(CustomLineItemCurrencyCode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomLineItemCurrencyCode other && Equals(other);
        public bool Equals(CustomLineItemCurrencyCode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomLineItemType : IEquatable<CustomLineItemType>
    {
        private readonly string _value;

        private CustomLineItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomLineItemType Fee { get; } = new CustomLineItemType("FEE");
        public static CustomLineItemType Credit { get; } = new CustomLineItemType("CREDIT");

        public static bool operator ==(CustomLineItemType left, CustomLineItemType right) => left.Equals(right);
        public static bool operator !=(CustomLineItemType left, CustomLineItemType right) => !left.Equals(right);

        public static explicit operator string(CustomLineItemType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomLineItemType other && Equals(other);
        public bool Equals(CustomLineItemType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A term used to categorize the granularity of a Pricing Rule.
    /// </summary>
    [EnumType]
    public readonly struct PricingRuleScope : IEquatable<PricingRuleScope>
    {
        private readonly string _value;

        private PricingRuleScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PricingRuleScope Global { get; } = new PricingRuleScope("GLOBAL");
        public static PricingRuleScope Service { get; } = new PricingRuleScope("SERVICE");

        public static bool operator ==(PricingRuleScope left, PricingRuleScope right) => left.Equals(right);
        public static bool operator !=(PricingRuleScope left, PricingRuleScope right) => !left.Equals(right);

        public static explicit operator string(PricingRuleScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PricingRuleScope other && Equals(other);
        public bool Equals(PricingRuleScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// One of MARKUP or DISCOUNT that describes the direction of the rate that is applied to a pricing plan.
    /// </summary>
    [EnumType]
    public readonly struct PricingRuleType : IEquatable<PricingRuleType>
    {
        private readonly string _value;

        private PricingRuleType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PricingRuleType Markup { get; } = new PricingRuleType("MARKUP");
        public static PricingRuleType Discount { get; } = new PricingRuleType("DISCOUNT");

        public static bool operator ==(PricingRuleType left, PricingRuleType right) => left.Equals(right);
        public static bool operator !=(PricingRuleType left, PricingRuleType right) => !left.Equals(right);

        public static explicit operator string(PricingRuleType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PricingRuleType other && Equals(other);
        public bool Equals(PricingRuleType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
