// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Cassandra
{
    public static class GetTable
    {
        /// <summary>
        /// Resource schema for AWS::Cassandra::Table
        /// </summary>
        public static Task<GetTableResult> InvokeAsync(GetTableArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTableResult>("aws-native:cassandra:getTable", args ?? new GetTableArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::Cassandra::Table
        /// </summary>
        public static Output<GetTableResult> Invoke(GetTableInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTableResult>("aws-native:cassandra:getTable", args ?? new GetTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTableArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for Cassandra keyspace
        /// </summary>
        [Input("keyspaceName", required: true)]
        public string KeyspaceName { get; set; } = null!;

        /// <summary>
        /// Name for Cassandra table
        /// </summary>
        [Input("tableName", required: true)]
        public string TableName { get; set; } = null!;

        public GetTableArgs()
        {
        }
    }

    public sealed class GetTableInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for Cassandra keyspace
        /// </summary>
        [Input("keyspaceName", required: true)]
        public Input<string> KeyspaceName { get; set; } = null!;

        /// <summary>
        /// Name for Cassandra table
        /// </summary>
        [Input("tableName", required: true)]
        public Input<string> TableName { get; set; } = null!;

        public GetTableInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTableResult
    {
        public readonly Outputs.TableBillingMode? BillingMode;
        /// <summary>
        /// Default TTL (Time To Live) in seconds, where zero is disabled. If the value is greater than zero, TTL is enabled for the entire table and an expiration timestamp is added to each column.
        /// </summary>
        public readonly int? DefaultTimeToLive;
        public readonly Outputs.TableEncryptionSpecification? EncryptionSpecification;
        /// <summary>
        /// Indicates whether point in time recovery is enabled (true) or disabled (false) on the table
        /// </summary>
        public readonly bool? PointInTimeRecoveryEnabled;
        /// <summary>
        /// Non-key columns of the table
        /// </summary>
        public readonly ImmutableArray<Outputs.TableColumn> RegularColumns;
        /// <summary>
        /// An array of key-value pairs to apply to this resource
        /// </summary>
        public readonly ImmutableArray<Outputs.TableTag> Tags;

        [OutputConstructor]
        private GetTableResult(
            Outputs.TableBillingMode? billingMode,

            int? defaultTimeToLive,

            Outputs.TableEncryptionSpecification? encryptionSpecification,

            bool? pointInTimeRecoveryEnabled,

            ImmutableArray<Outputs.TableColumn> regularColumns,

            ImmutableArray<Outputs.TableTag> tags)
        {
            BillingMode = billingMode;
            DefaultTimeToLive = defaultTimeToLive;
            EncryptionSpecification = encryptionSpecification;
            PointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled;
            RegularColumns = regularColumns;
            Tags = tags;
        }
    }
}
