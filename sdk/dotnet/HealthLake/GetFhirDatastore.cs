// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.HealthLake
{
    public static class GetFhirDatastore
    {
        /// <summary>
        /// HealthLake FHIR Datastore
        /// </summary>
        public static Task<GetFhirDatastoreResult> InvokeAsync(GetFhirDatastoreArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFhirDatastoreResult>("aws-native:healthlake:getFhirDatastore", args ?? new GetFhirDatastoreArgs(), options.WithDefaults());

        /// <summary>
        /// HealthLake FHIR Datastore
        /// </summary>
        public static Output<GetFhirDatastoreResult> Invoke(GetFhirDatastoreInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFhirDatastoreResult>("aws-native:healthlake:getFhirDatastore", args ?? new GetFhirDatastoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFhirDatastoreArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon generated Data Store id. This id is in the output from the initial Data Store creation call.
        /// </summary>
        [Input("datastoreId", required: true)]
        public string DatastoreId { get; set; } = null!;

        public GetFhirDatastoreArgs()
        {
        }
        public static new GetFhirDatastoreArgs Empty => new GetFhirDatastoreArgs();
    }

    public sealed class GetFhirDatastoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Amazon generated Data Store id. This id is in the output from the initial Data Store creation call.
        /// </summary>
        [Input("datastoreId", required: true)]
        public Input<string> DatastoreId { get; set; } = null!;

        public GetFhirDatastoreInvokeArgs()
        {
        }
        public static new GetFhirDatastoreInvokeArgs Empty => new GetFhirDatastoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetFhirDatastoreResult
    {
        public readonly Outputs.FhirDatastoreCreatedAt? CreatedAt;
        /// <summary>
        /// The Data Store ARN is generated during the creation of the Data Store and can be found in the output from the initial Data Store creation request.
        /// </summary>
        public readonly string? DatastoreArn;
        /// <summary>
        /// The endpoint for the created Data Store.
        /// </summary>
        public readonly string? DatastoreEndpoint;
        /// <summary>
        /// The Amazon generated Data Store id. This id is in the output from the initial Data Store creation call.
        /// </summary>
        public readonly string? DatastoreId;
        /// <summary>
        /// The status of the FHIR Data Store. Possible statuses are ‘CREATING’, ‘ACTIVE’, ‘DELETING’, ‘DELETED’.
        /// </summary>
        public readonly Pulumi.AwsNative.HealthLake.FhirDatastoreDatastoreStatus? DatastoreStatus;
        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// 
        /// For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;

        [OutputConstructor]
        private GetFhirDatastoreResult(
            Outputs.FhirDatastoreCreatedAt? createdAt,

            string? datastoreArn,

            string? datastoreEndpoint,

            string? datastoreId,

            Pulumi.AwsNative.HealthLake.FhirDatastoreDatastoreStatus? datastoreStatus,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags)
        {
            CreatedAt = createdAt;
            DatastoreArn = datastoreArn;
            DatastoreEndpoint = datastoreEndpoint;
            DatastoreId = datastoreId;
            DatastoreStatus = datastoreStatus;
            Tags = tags;
        }
    }
}
