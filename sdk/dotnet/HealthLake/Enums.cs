// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.HealthLake
{
    /// <summary>
    /// The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
    /// </summary>
    [EnumType]
    public readonly struct FhirDatastoreDatastoreStatus : IEquatable<FhirDatastoreDatastoreStatus>
    {
        private readonly string _value;

        private FhirDatastoreDatastoreStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FhirDatastoreDatastoreStatus Creating { get; } = new FhirDatastoreDatastoreStatus("CREATING");
        public static FhirDatastoreDatastoreStatus Active { get; } = new FhirDatastoreDatastoreStatus("ACTIVE");
        public static FhirDatastoreDatastoreStatus Deleting { get; } = new FhirDatastoreDatastoreStatus("DELETING");
        public static FhirDatastoreDatastoreStatus Deleted { get; } = new FhirDatastoreDatastoreStatus("DELETED");

        public static bool operator ==(FhirDatastoreDatastoreStatus left, FhirDatastoreDatastoreStatus right) => left.Equals(right);
        public static bool operator !=(FhirDatastoreDatastoreStatus left, FhirDatastoreDatastoreStatus right) => !left.Equals(right);

        public static explicit operator string(FhirDatastoreDatastoreStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FhirDatastoreDatastoreStatus other && Equals(other);
        public bool Equals(FhirDatastoreDatastoreStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The FHIR version. Only R4 version data is supported.
    /// </summary>
    [EnumType]
    public readonly struct FhirDatastoreDatastoreTypeVersion : IEquatable<FhirDatastoreDatastoreTypeVersion>
    {
        private readonly string _value;

        private FhirDatastoreDatastoreTypeVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FhirDatastoreDatastoreTypeVersion R4 { get; } = new FhirDatastoreDatastoreTypeVersion("R4");

        public static bool operator ==(FhirDatastoreDatastoreTypeVersion left, FhirDatastoreDatastoreTypeVersion right) => left.Equals(right);
        public static bool operator !=(FhirDatastoreDatastoreTypeVersion left, FhirDatastoreDatastoreTypeVersion right) => !left.Equals(right);

        public static explicit operator string(FhirDatastoreDatastoreTypeVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FhirDatastoreDatastoreTypeVersion other && Equals(other);
        public bool Equals(FhirDatastoreDatastoreTypeVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
    /// </summary>
    [EnumType]
    public readonly struct FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy : IEquatable<FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy>
    {
        private readonly string _value;

        private FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy SmartOnFhirV1 { get; } = new FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy("SMART_ON_FHIR_V1");
        public static FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy AwsAuth { get; } = new FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy("AWS_AUTH");

        public static bool operator ==(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy left, FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy right) => left.Equals(right);
        public static bool operator !=(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy left, FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy right) => !left.Equals(right);

        public static explicit operator string(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy other && Equals(other);
        public bool Equals(FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
    /// </summary>
    [EnumType]
    public readonly struct FhirDatastoreKmsEncryptionConfigCmkType : IEquatable<FhirDatastoreKmsEncryptionConfigCmkType>
    {
        private readonly string _value;

        private FhirDatastoreKmsEncryptionConfigCmkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FhirDatastoreKmsEncryptionConfigCmkType CustomerManagedKmsKey { get; } = new FhirDatastoreKmsEncryptionConfigCmkType("CUSTOMER_MANAGED_KMS_KEY");
        public static FhirDatastoreKmsEncryptionConfigCmkType AwsOwnedKmsKey { get; } = new FhirDatastoreKmsEncryptionConfigCmkType("AWS_OWNED_KMS_KEY");

        public static bool operator ==(FhirDatastoreKmsEncryptionConfigCmkType left, FhirDatastoreKmsEncryptionConfigCmkType right) => left.Equals(right);
        public static bool operator !=(FhirDatastoreKmsEncryptionConfigCmkType left, FhirDatastoreKmsEncryptionConfigCmkType right) => !left.Equals(right);

        public static explicit operator string(FhirDatastoreKmsEncryptionConfigCmkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FhirDatastoreKmsEncryptionConfigCmkType other && Equals(other);
        public bool Equals(FhirDatastoreKmsEncryptionConfigCmkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of preloaded data. Only Synthea preloaded data is supported.
    /// </summary>
    [EnumType]
    public readonly struct FhirDatastorePreloadDataConfigPreloadDataType : IEquatable<FhirDatastorePreloadDataConfigPreloadDataType>
    {
        private readonly string _value;

        private FhirDatastorePreloadDataConfigPreloadDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FhirDatastorePreloadDataConfigPreloadDataType Synthea { get; } = new FhirDatastorePreloadDataConfigPreloadDataType("SYNTHEA");

        public static bool operator ==(FhirDatastorePreloadDataConfigPreloadDataType left, FhirDatastorePreloadDataConfigPreloadDataType right) => left.Equals(right);
        public static bool operator !=(FhirDatastorePreloadDataConfigPreloadDataType left, FhirDatastorePreloadDataConfigPreloadDataType right) => !left.Equals(right);

        public static explicit operator string(FhirDatastorePreloadDataConfigPreloadDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FhirDatastorePreloadDataConfigPreloadDataType other && Equals(other);
        public bool Equals(FhirDatastorePreloadDataConfigPreloadDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
