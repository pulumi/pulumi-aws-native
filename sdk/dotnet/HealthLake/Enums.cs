// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.HealthLake
{
    /// <summary>
    /// The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.
    /// </summary>
    [EnumType]
    public readonly struct FHIRDatastoreDatastoreStatus : IEquatable<FHIRDatastoreDatastoreStatus>
    {
        private readonly string _value;

        private FHIRDatastoreDatastoreStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FHIRDatastoreDatastoreStatus Creating { get; } = new FHIRDatastoreDatastoreStatus("CREATING");
        public static FHIRDatastoreDatastoreStatus Active { get; } = new FHIRDatastoreDatastoreStatus("ACTIVE");
        public static FHIRDatastoreDatastoreStatus Deleting { get; } = new FHIRDatastoreDatastoreStatus("DELETING");
        public static FHIRDatastoreDatastoreStatus Deleted { get; } = new FHIRDatastoreDatastoreStatus("DELETED");

        public static bool operator ==(FHIRDatastoreDatastoreStatus left, FHIRDatastoreDatastoreStatus right) => left.Equals(right);
        public static bool operator !=(FHIRDatastoreDatastoreStatus left, FHIRDatastoreDatastoreStatus right) => !left.Equals(right);

        public static explicit operator string(FHIRDatastoreDatastoreStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FHIRDatastoreDatastoreStatus other && Equals(other);
        public bool Equals(FHIRDatastoreDatastoreStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The FHIR version. Only R4 version data is supported.
    /// </summary>
    [EnumType]
    public readonly struct FHIRDatastoreDatastoreTypeVersion : IEquatable<FHIRDatastoreDatastoreTypeVersion>
    {
        private readonly string _value;

        private FHIRDatastoreDatastoreTypeVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FHIRDatastoreDatastoreTypeVersion R4 { get; } = new FHIRDatastoreDatastoreTypeVersion("R4");

        public static bool operator ==(FHIRDatastoreDatastoreTypeVersion left, FHIRDatastoreDatastoreTypeVersion right) => left.Equals(right);
        public static bool operator !=(FHIRDatastoreDatastoreTypeVersion left, FHIRDatastoreDatastoreTypeVersion right) => !left.Equals(right);

        public static explicit operator string(FHIRDatastoreDatastoreTypeVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FHIRDatastoreDatastoreTypeVersion other && Equals(other);
        public bool Equals(FHIRDatastoreDatastoreTypeVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
    /// </summary>
    [EnumType]
    public readonly struct FHIRDatastoreKmsEncryptionConfigCmkType : IEquatable<FHIRDatastoreKmsEncryptionConfigCmkType>
    {
        private readonly string _value;

        private FHIRDatastoreKmsEncryptionConfigCmkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FHIRDatastoreKmsEncryptionConfigCmkType CustomerManagedKmsKey { get; } = new FHIRDatastoreKmsEncryptionConfigCmkType("CUSTOMER_MANAGED_KMS_KEY");
        public static FHIRDatastoreKmsEncryptionConfigCmkType AwsOwnedKmsKey { get; } = new FHIRDatastoreKmsEncryptionConfigCmkType("AWS_OWNED_KMS_KEY");

        public static bool operator ==(FHIRDatastoreKmsEncryptionConfigCmkType left, FHIRDatastoreKmsEncryptionConfigCmkType right) => left.Equals(right);
        public static bool operator !=(FHIRDatastoreKmsEncryptionConfigCmkType left, FHIRDatastoreKmsEncryptionConfigCmkType right) => !left.Equals(right);

        public static explicit operator string(FHIRDatastoreKmsEncryptionConfigCmkType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FHIRDatastoreKmsEncryptionConfigCmkType other && Equals(other);
        public bool Equals(FHIRDatastoreKmsEncryptionConfigCmkType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of preloaded data. Only Synthea preloaded data is supported.
    /// </summary>
    [EnumType]
    public readonly struct FHIRDatastorePreloadDataConfigPreloadDataType : IEquatable<FHIRDatastorePreloadDataConfigPreloadDataType>
    {
        private readonly string _value;

        private FHIRDatastorePreloadDataConfigPreloadDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FHIRDatastorePreloadDataConfigPreloadDataType Synthea { get; } = new FHIRDatastorePreloadDataConfigPreloadDataType("SYNTHEA");

        public static bool operator ==(FHIRDatastorePreloadDataConfigPreloadDataType left, FHIRDatastorePreloadDataConfigPreloadDataType right) => left.Equals(right);
        public static bool operator !=(FHIRDatastorePreloadDataConfigPreloadDataType left, FHIRDatastorePreloadDataConfigPreloadDataType right) => !left.Equals(right);

        public static explicit operator string(FHIRDatastorePreloadDataConfigPreloadDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FHIRDatastorePreloadDataConfigPreloadDataType other && Equals(other);
        public bool Equals(FHIRDatastorePreloadDataConfigPreloadDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
