// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.ResourceExplorer2
{
    public static class GetView
    {
        /// <summary>
        /// Definition of AWS::ResourceExplorer2::View Resource Type
        /// </summary>
        public static Task<GetViewResult> InvokeAsync(GetViewArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetViewResult>("aws-native:resourceexplorer2:getView", args ?? new GetViewArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::ResourceExplorer2::View Resource Type
        /// </summary>
        public static Output<GetViewResult> Invoke(GetViewInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetViewResult>("aws-native:resourceexplorer2:getView", args ?? new GetViewInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetViewArgs : global::Pulumi.InvokeArgs
    {
        [Input("viewArn", required: true)]
        public string ViewArn { get; set; } = null!;

        public GetViewArgs()
        {
        }
        public static new GetViewArgs Empty => new GetViewArgs();
    }

    public sealed class GetViewInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("viewArn", required: true)]
        public Input<string> ViewArn { get; set; } = null!;

        public GetViewInvokeArgs()
        {
        }
        public static new GetViewInvokeArgs Empty => new GetViewInvokeArgs();
    }


    [OutputType]
    public sealed class GetViewResult
    {
        public readonly Outputs.ViewSearchFilter? Filters;
        public readonly ImmutableArray<Outputs.ViewIncludedProperty> IncludedProperties;
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string? ViewArn;

        [OutputConstructor]
        private GetViewResult(
            Outputs.ViewSearchFilter? filters,

            ImmutableArray<Outputs.ViewIncludedProperty> includedProperties,

            ImmutableDictionary<string, string>? tags,

            string? viewArn)
        {
            Filters = filters;
            IncludedProperties = includedProperties;
            Tags = tags;
            ViewArn = viewArn;
        }
    }
}
