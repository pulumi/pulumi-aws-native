// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.S3Vectors
{
    /// <summary>
    /// The data type of the vectors to be inserted into the vector index.
    /// </summary>
    [EnumType]
    public readonly struct IndexDataType : IEquatable<IndexDataType>
    {
        private readonly string _value;

        private IndexDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexDataType Float32 { get; } = new IndexDataType("float32");

        public static bool operator ==(IndexDataType left, IndexDataType right) => left.Equals(right);
        public static bool operator !=(IndexDataType left, IndexDataType right) => !left.Equals(right);

        public static explicit operator string(IndexDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexDataType other && Equals(other);
        public bool Equals(IndexDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The distance metric to be used for similarity search.
    /// </summary>
    [EnumType]
    public readonly struct IndexDistanceMetric : IEquatable<IndexDistanceMetric>
    {
        private readonly string _value;

        private IndexDistanceMetric(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IndexDistanceMetric Cosine { get; } = new IndexDistanceMetric("cosine");
        public static IndexDistanceMetric Euclidean { get; } = new IndexDistanceMetric("euclidean");

        public static bool operator ==(IndexDistanceMetric left, IndexDistanceMetric right) => left.Equals(right);
        public static bool operator !=(IndexDistanceMetric left, IndexDistanceMetric right) => !left.Equals(right);

        public static explicit operator string(IndexDistanceMetric value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IndexDistanceMetric other && Equals(other);
        public bool Equals(IndexDistanceMetric other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The server-side encryption type to use for the encryption configuration of the vector bucket. By default, if you don't specify, all new vectors in Amazon S3 vector buckets use server-side encryption with Amazon S3 managed keys (SSE-S3), specifically AES256.
    /// </summary>
    [EnumType]
    public readonly struct VectorBucketEncryptionConfigurationSseType : IEquatable<VectorBucketEncryptionConfigurationSseType>
    {
        private readonly string _value;

        private VectorBucketEncryptionConfigurationSseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VectorBucketEncryptionConfigurationSseType Aes256 { get; } = new VectorBucketEncryptionConfigurationSseType("AES256");
        public static VectorBucketEncryptionConfigurationSseType Awskms { get; } = new VectorBucketEncryptionConfigurationSseType("aws:kms");

        public static bool operator ==(VectorBucketEncryptionConfigurationSseType left, VectorBucketEncryptionConfigurationSseType right) => left.Equals(right);
        public static bool operator !=(VectorBucketEncryptionConfigurationSseType left, VectorBucketEncryptionConfigurationSseType right) => !left.Equals(right);

        public static explicit operator string(VectorBucketEncryptionConfigurationSseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VectorBucketEncryptionConfigurationSseType other && Equals(other);
        public bool Equals(VectorBucketEncryptionConfigurationSseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
