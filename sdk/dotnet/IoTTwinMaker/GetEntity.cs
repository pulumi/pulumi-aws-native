// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTTwinMaker
{
    public static class GetEntity
    {
        /// <summary>
        /// Resource schema for AWS::IoTTwinMaker::Entity
        /// </summary>
        public static Task<GetEntityResult> InvokeAsync(GetEntityArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEntityResult>("aws-native:iottwinmaker:getEntity", args ?? new GetEntityArgs(), options.WithDefaults());

        /// <summary>
        /// Resource schema for AWS::IoTTwinMaker::Entity
        /// </summary>
        public static Output<GetEntityResult> Invoke(GetEntityInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetEntityResult>("aws-native:iottwinmaker:getEntity", args ?? new GetEntityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEntityArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the entity.
        /// </summary>
        [Input("entityId", required: true)]
        public string EntityId { get; set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public string WorkspaceId { get; set; } = null!;

        public GetEntityArgs()
        {
        }
    }

    public sealed class GetEntityInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the entity.
        /// </summary>
        [Input("entityId", required: true)]
        public Input<string> EntityId { get; set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public GetEntityInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEntityResult
    {
        /// <summary>
        /// The ARN of the entity.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// A map that sets information about a component type.
        /// </summary>
        public readonly object? Components;
        /// <summary>
        /// The date and time when the entity was created.
        /// </summary>
        public readonly string? CreationDateTime;
        /// <summary>
        /// The description of the entity.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The name of the entity.
        /// </summary>
        public readonly string? EntityName;
        /// <summary>
        /// A Boolean value that specifies whether the entity has child entities or not.
        /// </summary>
        public readonly bool? HasChildEntities;
        /// <summary>
        /// The ID of the parent entity.
        /// </summary>
        public readonly string? ParentEntityId;
        /// <summary>
        /// The current status of the entity.
        /// </summary>
        public readonly Outputs.EntityStatus? Status;
        /// <summary>
        /// A key-value pair to associate with a resource.
        /// </summary>
        public readonly object? Tags;
        /// <summary>
        /// The last date and time when the entity was updated.
        /// </summary>
        public readonly string? UpdateDateTime;

        [OutputConstructor]
        private GetEntityResult(
            string? arn,

            object? components,

            string? creationDateTime,

            string? description,

            string? entityName,

            bool? hasChildEntities,

            string? parentEntityId,

            Outputs.EntityStatus? status,

            object? tags,

            string? updateDateTime)
        {
            Arn = arn;
            Components = components;
            CreationDateTime = creationDateTime;
            Description = description;
            EntityName = entityName;
            HasChildEntities = hasChildEntities;
            ParentEntityId = parentEntityId;
            Status = status;
            Tags = tags;
            UpdateDateTime = updateDateTime;
        }
    }
}
