// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTTwinMaker.Outputs
{

    [OutputType]
    public sealed class EntityComponent
    {
        /// <summary>
        /// The name of the component.
        /// </summary>
        public readonly string? ComponentName;
        /// <summary>
        /// The ID of the component type.
        /// </summary>
        public readonly string? ComponentTypeId;
        /// <summary>
        /// The name of the property definition set in the component.
        /// </summary>
        public readonly string? DefinedIn;
        /// <summary>
        /// The description of the component.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.EntityProperty>? Properties;
        /// <summary>
        /// An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.EntityPropertyGroup>? PropertyGroups;
        /// <summary>
        /// The current status of the entity.
        /// </summary>
        public readonly Outputs.EntityStatus? Status;

        [OutputConstructor]
        private EntityComponent(
            string? componentName,

            string? componentTypeId,

            string? definedIn,

            string? description,

            ImmutableDictionary<string, Outputs.EntityProperty>? properties,

            ImmutableDictionary<string, Outputs.EntityPropertyGroup>? propertyGroups,

            Outputs.EntityStatus? status)
        {
            ComponentName = componentName;
            ComponentTypeId = componentTypeId;
            DefinedIn = definedIn;
            Description = description;
            Properties = properties;
            PropertyGroups = propertyGroups;
            Status = status;
        }
    }
}
