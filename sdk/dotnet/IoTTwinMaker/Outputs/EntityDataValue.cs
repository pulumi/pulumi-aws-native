// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.IoTTwinMaker.Outputs
{

    /// <summary>
    /// An object that specifies a value for a property.
    /// </summary>
    [OutputType]
    public sealed class EntityDataValue
    {
        /// <summary>
        /// A Boolean value.
        /// </summary>
        public readonly bool? BooleanValue;
        /// <summary>
        /// A double value.
        /// </summary>
        public readonly double? DoubleValue;
        /// <summary>
        /// An expression that produces the value.
        /// </summary>
        public readonly string? Expression;
        /// <summary>
        /// An integer value.
        /// </summary>
        public readonly int? IntegerValue;
        /// <summary>
        /// A list of multiple values.
        /// </summary>
        public readonly ImmutableArray<Outputs.EntityDataValue> ListValue;
        /// <summary>
        /// A long value.
        /// </summary>
        public readonly double? LongValue;
        /// <summary>
        /// An object that maps strings to multiple DataValue objects.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.EntityDataValue>? MapValue;
        /// <summary>
        /// A value that relates a component to another component.
        /// </summary>
        public readonly Outputs.EntityDataValueRelationshipValueProperties? RelationshipValue;
        /// <summary>
        /// A string value.
        /// </summary>
        public readonly string? StringValue;

        [OutputConstructor]
        private EntityDataValue(
            bool? booleanValue,

            double? doubleValue,

            string? expression,

            int? integerValue,

            ImmutableArray<Outputs.EntityDataValue> listValue,

            double? longValue,

            ImmutableDictionary<string, Outputs.EntityDataValue>? mapValue,

            Outputs.EntityDataValueRelationshipValueProperties? relationshipValue,

            string? stringValue)
        {
            BooleanValue = booleanValue;
            DoubleValue = doubleValue;
            Expression = expression;
            IntegerValue = integerValue;
            ListValue = listValue;
            LongValue = longValue;
            MapValue = mapValue;
            RelationshipValue = relationshipValue;
            StringValue = stringValue;
        }
    }
}
