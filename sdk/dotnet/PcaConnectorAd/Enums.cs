// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.PcaConnectorAd
{
    [EnumType]
    public readonly struct TemplateApplicationPolicyType : IEquatable<TemplateApplicationPolicyType>
    {
        private readonly string _value;

        private TemplateApplicationPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateApplicationPolicyType AllApplicationPolicies { get; } = new TemplateApplicationPolicyType("ALL_APPLICATION_POLICIES");
        public static TemplateApplicationPolicyType AnyPurpose { get; } = new TemplateApplicationPolicyType("ANY_PURPOSE");
        public static TemplateApplicationPolicyType AttestationIdentityKeyCertificate { get; } = new TemplateApplicationPolicyType("ATTESTATION_IDENTITY_KEY_CERTIFICATE");
        public static TemplateApplicationPolicyType CertificateRequestAgent { get; } = new TemplateApplicationPolicyType("CERTIFICATE_REQUEST_AGENT");
        public static TemplateApplicationPolicyType ClientAuthentication { get; } = new TemplateApplicationPolicyType("CLIENT_AUTHENTICATION");
        public static TemplateApplicationPolicyType CodeSigning { get; } = new TemplateApplicationPolicyType("CODE_SIGNING");
        public static TemplateApplicationPolicyType CtlUsage { get; } = new TemplateApplicationPolicyType("CTL_USAGE");
        public static TemplateApplicationPolicyType DigitalRights { get; } = new TemplateApplicationPolicyType("DIGITAL_RIGHTS");
        public static TemplateApplicationPolicyType DirectoryServiceEmailReplication { get; } = new TemplateApplicationPolicyType("DIRECTORY_SERVICE_EMAIL_REPLICATION");
        public static TemplateApplicationPolicyType DisallowedList { get; } = new TemplateApplicationPolicyType("DISALLOWED_LIST");
        public static TemplateApplicationPolicyType DnsServerTrust { get; } = new TemplateApplicationPolicyType("DNS_SERVER_TRUST");
        public static TemplateApplicationPolicyType DocumentEncryption { get; } = new TemplateApplicationPolicyType("DOCUMENT_ENCRYPTION");
        public static TemplateApplicationPolicyType DocumentSigning { get; } = new TemplateApplicationPolicyType("DOCUMENT_SIGNING");
        public static TemplateApplicationPolicyType DynamicCodeGenerator { get; } = new TemplateApplicationPolicyType("DYNAMIC_CODE_GENERATOR");
        public static TemplateApplicationPolicyType EarlyLaunchAntimalwareDriver { get; } = new TemplateApplicationPolicyType("EARLY_LAUNCH_ANTIMALWARE_DRIVER");
        public static TemplateApplicationPolicyType EmbeddedWindowsSystemComponentVerification { get; } = new TemplateApplicationPolicyType("EMBEDDED_WINDOWS_SYSTEM_COMPONENT_VERIFICATION");
        public static TemplateApplicationPolicyType Enclave { get; } = new TemplateApplicationPolicyType("ENCLAVE");
        public static TemplateApplicationPolicyType EncryptingFileSystem { get; } = new TemplateApplicationPolicyType("ENCRYPTING_FILE_SYSTEM");
        public static TemplateApplicationPolicyType EndorsementKeyCertificate { get; } = new TemplateApplicationPolicyType("ENDORSEMENT_KEY_CERTIFICATE");
        public static TemplateApplicationPolicyType FileRecovery { get; } = new TemplateApplicationPolicyType("FILE_RECOVERY");
        public static TemplateApplicationPolicyType HalExtension { get; } = new TemplateApplicationPolicyType("HAL_EXTENSION");
        public static TemplateApplicationPolicyType IpSecurityEndSystem { get; } = new TemplateApplicationPolicyType("IP_SECURITY_END_SYSTEM");
        public static TemplateApplicationPolicyType IpSecurityIkeIntermediate { get; } = new TemplateApplicationPolicyType("IP_SECURITY_IKE_INTERMEDIATE");
        public static TemplateApplicationPolicyType IpSecurityTunnelTermination { get; } = new TemplateApplicationPolicyType("IP_SECURITY_TUNNEL_TERMINATION");
        public static TemplateApplicationPolicyType IpSecurityUser { get; } = new TemplateApplicationPolicyType("IP_SECURITY_USER");
        public static TemplateApplicationPolicyType IsolatedUserMode { get; } = new TemplateApplicationPolicyType("ISOLATED_USER_MODE");
        public static TemplateApplicationPolicyType KdcAuthentication { get; } = new TemplateApplicationPolicyType("KDC_AUTHENTICATION");
        public static TemplateApplicationPolicyType KernelModeCodeSigning { get; } = new TemplateApplicationPolicyType("KERNEL_MODE_CODE_SIGNING");
        public static TemplateApplicationPolicyType KeyPackLicenses { get; } = new TemplateApplicationPolicyType("KEY_PACK_LICENSES");
        public static TemplateApplicationPolicyType KeyRecovery { get; } = new TemplateApplicationPolicyType("KEY_RECOVERY");
        public static TemplateApplicationPolicyType KeyRecoveryAgent { get; } = new TemplateApplicationPolicyType("KEY_RECOVERY_AGENT");
        public static TemplateApplicationPolicyType LicenseServerVerification { get; } = new TemplateApplicationPolicyType("LICENSE_SERVER_VERIFICATION");
        public static TemplateApplicationPolicyType LifetimeSigning { get; } = new TemplateApplicationPolicyType("LIFETIME_SIGNING");
        public static TemplateApplicationPolicyType MicrosoftPublisher { get; } = new TemplateApplicationPolicyType("MICROSOFT_PUBLISHER");
        public static TemplateApplicationPolicyType MicrosoftTimeStamping { get; } = new TemplateApplicationPolicyType("MICROSOFT_TIME_STAMPING");
        public static TemplateApplicationPolicyType MicrosoftTrustListSigning { get; } = new TemplateApplicationPolicyType("MICROSOFT_TRUST_LIST_SIGNING");
        public static TemplateApplicationPolicyType OcspSigning { get; } = new TemplateApplicationPolicyType("OCSP_SIGNING");
        public static TemplateApplicationPolicyType OemWindowsSystemComponentVerification { get; } = new TemplateApplicationPolicyType("OEM_WINDOWS_SYSTEM_COMPONENT_VERIFICATION");
        public static TemplateApplicationPolicyType PlatformCertificate { get; } = new TemplateApplicationPolicyType("PLATFORM_CERTIFICATE");
        public static TemplateApplicationPolicyType PreviewBuildSigning { get; } = new TemplateApplicationPolicyType("PREVIEW_BUILD_SIGNING");
        public static TemplateApplicationPolicyType PrivateKeyArchival { get; } = new TemplateApplicationPolicyType("PRIVATE_KEY_ARCHIVAL");
        public static TemplateApplicationPolicyType ProtectedProcessLightVerification { get; } = new TemplateApplicationPolicyType("PROTECTED_PROCESS_LIGHT_VERIFICATION");
        public static TemplateApplicationPolicyType ProtectedProcessVerification { get; } = new TemplateApplicationPolicyType("PROTECTED_PROCESS_VERIFICATION");
        public static TemplateApplicationPolicyType QualifiedSubordination { get; } = new TemplateApplicationPolicyType("QUALIFIED_SUBORDINATION");
        public static TemplateApplicationPolicyType RevokedListSigner { get; } = new TemplateApplicationPolicyType("REVOKED_LIST_SIGNER");
        public static TemplateApplicationPolicyType RootProgramAutoUpdateCaRevocation { get; } = new TemplateApplicationPolicyType("ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION");
        public static TemplateApplicationPolicyType RootProgramAutoUpdateEndRevocation { get; } = new TemplateApplicationPolicyType("ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION");
        public static TemplateApplicationPolicyType RootProgramNoOscpFailoverToCrl { get; } = new TemplateApplicationPolicyType("ROOT_PROGRAM_NO_OSCP_FAILOVER_TO_CRL");
        public static TemplateApplicationPolicyType RootListSigner { get; } = new TemplateApplicationPolicyType("ROOT_LIST_SIGNER");
        public static TemplateApplicationPolicyType SecureEmail { get; } = new TemplateApplicationPolicyType("SECURE_EMAIL");
        public static TemplateApplicationPolicyType ServerAuthentication { get; } = new TemplateApplicationPolicyType("SERVER_AUTHENTICATION");
        public static TemplateApplicationPolicyType SmartCardLogin { get; } = new TemplateApplicationPolicyType("SMART_CARD_LOGIN");
        public static TemplateApplicationPolicyType SpcEncryptedDigestRetryCount { get; } = new TemplateApplicationPolicyType("SPC_ENCRYPTED_DIGEST_RETRY_COUNT");
        public static TemplateApplicationPolicyType SpcRelaxedPeMarkerCheck { get; } = new TemplateApplicationPolicyType("SPC_RELAXED_PE_MARKER_CHECK");
        public static TemplateApplicationPolicyType TimeStamping { get; } = new TemplateApplicationPolicyType("TIME_STAMPING");
        public static TemplateApplicationPolicyType WindowsHardwareDriverAttestedVerification { get; } = new TemplateApplicationPolicyType("WINDOWS_HARDWARE_DRIVER_ATTESTED_VERIFICATION");
        public static TemplateApplicationPolicyType WindowsHardwareDriverExtendedVerification { get; } = new TemplateApplicationPolicyType("WINDOWS_HARDWARE_DRIVER_EXTENDED_VERIFICATION");
        public static TemplateApplicationPolicyType WindowsHardwareDriverVerification { get; } = new TemplateApplicationPolicyType("WINDOWS_HARDWARE_DRIVER_VERIFICATION");
        public static TemplateApplicationPolicyType WindowsHelloRecoveryKeyEncryption { get; } = new TemplateApplicationPolicyType("WINDOWS_HELLO_RECOVERY_KEY_ENCRYPTION");
        public static TemplateApplicationPolicyType WindowsKitsComponent { get; } = new TemplateApplicationPolicyType("WINDOWS_KITS_COMPONENT");
        public static TemplateApplicationPolicyType WindowsRtVerification { get; } = new TemplateApplicationPolicyType("WINDOWS_RT_VERIFICATION");
        public static TemplateApplicationPolicyType WindowsSoftwareExtensionVerification { get; } = new TemplateApplicationPolicyType("WINDOWS_SOFTWARE_EXTENSION_VERIFICATION");
        public static TemplateApplicationPolicyType WindowsStore { get; } = new TemplateApplicationPolicyType("WINDOWS_STORE");
        public static TemplateApplicationPolicyType WindowsSystemComponentVerification { get; } = new TemplateApplicationPolicyType("WINDOWS_SYSTEM_COMPONENT_VERIFICATION");
        public static TemplateApplicationPolicyType WindowsTcbComponent { get; } = new TemplateApplicationPolicyType("WINDOWS_TCB_COMPONENT");
        public static TemplateApplicationPolicyType WindowsThirdPartyApplicationComponent { get; } = new TemplateApplicationPolicyType("WINDOWS_THIRD_PARTY_APPLICATION_COMPONENT");
        public static TemplateApplicationPolicyType WindowsUpdate { get; } = new TemplateApplicationPolicyType("WINDOWS_UPDATE");

        public static bool operator ==(TemplateApplicationPolicyType left, TemplateApplicationPolicyType right) => left.Equals(right);
        public static bool operator !=(TemplateApplicationPolicyType left, TemplateApplicationPolicyType right) => !left.Equals(right);

        public static explicit operator string(TemplateApplicationPolicyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateApplicationPolicyType other && Equals(other);
        public bool Equals(TemplateApplicationPolicyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateClientCompatibilityV2 : IEquatable<TemplateClientCompatibilityV2>
    {
        private readonly string _value;

        private TemplateClientCompatibilityV2(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateClientCompatibilityV2 WindowsServer2003 { get; } = new TemplateClientCompatibilityV2("WINDOWS_SERVER_2003");
        public static TemplateClientCompatibilityV2 WindowsServer2008 { get; } = new TemplateClientCompatibilityV2("WINDOWS_SERVER_2008");
        public static TemplateClientCompatibilityV2 WindowsServer2008r2 { get; } = new TemplateClientCompatibilityV2("WINDOWS_SERVER_2008_R2");
        public static TemplateClientCompatibilityV2 WindowsServer2012 { get; } = new TemplateClientCompatibilityV2("WINDOWS_SERVER_2012");
        public static TemplateClientCompatibilityV2 WindowsServer2012r2 { get; } = new TemplateClientCompatibilityV2("WINDOWS_SERVER_2012_R2");
        public static TemplateClientCompatibilityV2 WindowsServer2016 { get; } = new TemplateClientCompatibilityV2("WINDOWS_SERVER_2016");

        public static bool operator ==(TemplateClientCompatibilityV2 left, TemplateClientCompatibilityV2 right) => left.Equals(right);
        public static bool operator !=(TemplateClientCompatibilityV2 left, TemplateClientCompatibilityV2 right) => !left.Equals(right);

        public static explicit operator string(TemplateClientCompatibilityV2 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateClientCompatibilityV2 other && Equals(other);
        public bool Equals(TemplateClientCompatibilityV2 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateClientCompatibilityV3 : IEquatable<TemplateClientCompatibilityV3>
    {
        private readonly string _value;

        private TemplateClientCompatibilityV3(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateClientCompatibilityV3 WindowsServer2008 { get; } = new TemplateClientCompatibilityV3("WINDOWS_SERVER_2008");
        public static TemplateClientCompatibilityV3 WindowsServer2008r2 { get; } = new TemplateClientCompatibilityV3("WINDOWS_SERVER_2008_R2");
        public static TemplateClientCompatibilityV3 WindowsServer2012 { get; } = new TemplateClientCompatibilityV3("WINDOWS_SERVER_2012");
        public static TemplateClientCompatibilityV3 WindowsServer2012r2 { get; } = new TemplateClientCompatibilityV3("WINDOWS_SERVER_2012_R2");
        public static TemplateClientCompatibilityV3 WindowsServer2016 { get; } = new TemplateClientCompatibilityV3("WINDOWS_SERVER_2016");

        public static bool operator ==(TemplateClientCompatibilityV3 left, TemplateClientCompatibilityV3 right) => left.Equals(right);
        public static bool operator !=(TemplateClientCompatibilityV3 left, TemplateClientCompatibilityV3 right) => !left.Equals(right);

        public static explicit operator string(TemplateClientCompatibilityV3 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateClientCompatibilityV3 other && Equals(other);
        public bool Equals(TemplateClientCompatibilityV3 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateClientCompatibilityV4 : IEquatable<TemplateClientCompatibilityV4>
    {
        private readonly string _value;

        private TemplateClientCompatibilityV4(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateClientCompatibilityV4 WindowsServer2012 { get; } = new TemplateClientCompatibilityV4("WINDOWS_SERVER_2012");
        public static TemplateClientCompatibilityV4 WindowsServer2012r2 { get; } = new TemplateClientCompatibilityV4("WINDOWS_SERVER_2012_R2");
        public static TemplateClientCompatibilityV4 WindowsServer2016 { get; } = new TemplateClientCompatibilityV4("WINDOWS_SERVER_2016");

        public static bool operator ==(TemplateClientCompatibilityV4 left, TemplateClientCompatibilityV4 right) => left.Equals(right);
        public static bool operator !=(TemplateClientCompatibilityV4 left, TemplateClientCompatibilityV4 right) => !left.Equals(right);

        public static explicit operator string(TemplateClientCompatibilityV4 value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateClientCompatibilityV4 other && Equals(other);
        public bool Equals(TemplateClientCompatibilityV4 other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateGroupAccessControlEntryAccessRight : IEquatable<TemplateGroupAccessControlEntryAccessRight>
    {
        private readonly string _value;

        private TemplateGroupAccessControlEntryAccessRight(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateGroupAccessControlEntryAccessRight Allow { get; } = new TemplateGroupAccessControlEntryAccessRight("ALLOW");
        public static TemplateGroupAccessControlEntryAccessRight Deny { get; } = new TemplateGroupAccessControlEntryAccessRight("DENY");

        public static bool operator ==(TemplateGroupAccessControlEntryAccessRight left, TemplateGroupAccessControlEntryAccessRight right) => left.Equals(right);
        public static bool operator !=(TemplateGroupAccessControlEntryAccessRight left, TemplateGroupAccessControlEntryAccessRight right) => !left.Equals(right);

        public static explicit operator string(TemplateGroupAccessControlEntryAccessRight value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateGroupAccessControlEntryAccessRight other && Equals(other);
        public bool Equals(TemplateGroupAccessControlEntryAccessRight other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateHashAlgorithm : IEquatable<TemplateHashAlgorithm>
    {
        private readonly string _value;

        private TemplateHashAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateHashAlgorithm Sha256 { get; } = new TemplateHashAlgorithm("SHA256");
        public static TemplateHashAlgorithm Sha384 { get; } = new TemplateHashAlgorithm("SHA384");
        public static TemplateHashAlgorithm Sha512 { get; } = new TemplateHashAlgorithm("SHA512");

        public static bool operator ==(TemplateHashAlgorithm left, TemplateHashAlgorithm right) => left.Equals(right);
        public static bool operator !=(TemplateHashAlgorithm left, TemplateHashAlgorithm right) => !left.Equals(right);

        public static explicit operator string(TemplateHashAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateHashAlgorithm other && Equals(other);
        public bool Equals(TemplateHashAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateKeySpec : IEquatable<TemplateKeySpec>
    {
        private readonly string _value;

        private TemplateKeySpec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateKeySpec KeyExchange { get; } = new TemplateKeySpec("KEY_EXCHANGE");
        public static TemplateKeySpec Signature { get; } = new TemplateKeySpec("SIGNATURE");

        public static bool operator ==(TemplateKeySpec left, TemplateKeySpec right) => left.Equals(right);
        public static bool operator !=(TemplateKeySpec left, TemplateKeySpec right) => !left.Equals(right);

        public static explicit operator string(TemplateKeySpec value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateKeySpec other && Equals(other);
        public bool Equals(TemplateKeySpec other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateKeyUsagePropertyType : IEquatable<TemplateKeyUsagePropertyType>
    {
        private readonly string _value;

        private TemplateKeyUsagePropertyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateKeyUsagePropertyType All { get; } = new TemplateKeyUsagePropertyType("ALL");

        public static bool operator ==(TemplateKeyUsagePropertyType left, TemplateKeyUsagePropertyType right) => left.Equals(right);
        public static bool operator !=(TemplateKeyUsagePropertyType left, TemplateKeyUsagePropertyType right) => !left.Equals(right);

        public static explicit operator string(TemplateKeyUsagePropertyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateKeyUsagePropertyType other && Equals(other);
        public bool Equals(TemplateKeyUsagePropertyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplatePrivateKeyAlgorithm : IEquatable<TemplatePrivateKeyAlgorithm>
    {
        private readonly string _value;

        private TemplatePrivateKeyAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplatePrivateKeyAlgorithm Rsa { get; } = new TemplatePrivateKeyAlgorithm("RSA");
        public static TemplatePrivateKeyAlgorithm EcdhP256 { get; } = new TemplatePrivateKeyAlgorithm("ECDH_P256");
        public static TemplatePrivateKeyAlgorithm EcdhP384 { get; } = new TemplatePrivateKeyAlgorithm("ECDH_P384");
        public static TemplatePrivateKeyAlgorithm EcdhP521 { get; } = new TemplatePrivateKeyAlgorithm("ECDH_P521");

        public static bool operator ==(TemplatePrivateKeyAlgorithm left, TemplatePrivateKeyAlgorithm right) => left.Equals(right);
        public static bool operator !=(TemplatePrivateKeyAlgorithm left, TemplatePrivateKeyAlgorithm right) => !left.Equals(right);

        public static explicit operator string(TemplatePrivateKeyAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplatePrivateKeyAlgorithm other && Equals(other);
        public bool Equals(TemplatePrivateKeyAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct TemplateValidityPeriodType : IEquatable<TemplateValidityPeriodType>
    {
        private readonly string _value;

        private TemplateValidityPeriodType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static TemplateValidityPeriodType Hours { get; } = new TemplateValidityPeriodType("HOURS");
        public static TemplateValidityPeriodType Days { get; } = new TemplateValidityPeriodType("DAYS");
        public static TemplateValidityPeriodType Weeks { get; } = new TemplateValidityPeriodType("WEEKS");
        public static TemplateValidityPeriodType Months { get; } = new TemplateValidityPeriodType("MONTHS");
        public static TemplateValidityPeriodType Years { get; } = new TemplateValidityPeriodType("YEARS");

        public static bool operator ==(TemplateValidityPeriodType left, TemplateValidityPeriodType right) => left.Equals(right);
        public static bool operator !=(TemplateValidityPeriodType left, TemplateValidityPeriodType right) => !left.Equals(right);

        public static explicit operator string(TemplateValidityPeriodType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is TemplateValidityPeriodType other && Equals(other);
        public bool Equals(TemplateValidityPeriodType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
