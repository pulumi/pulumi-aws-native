// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    public static class GetSubnet
    {
        /// <summary>
        /// Resource Type definition for AWS::EC2::Subnet
        /// </summary>
        public static Task<GetSubnetResult> InvokeAsync(GetSubnetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("aws-native:ec2:getSubnet", args ?? new GetSubnetArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::EC2::Subnet
        /// </summary>
        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("aws-native:ec2:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetArgs : global::Pulumi.InvokeArgs
    {
        [Input("subnetId", required: true)]
        public string SubnetId { get; set; } = null!;

        public GetSubnetArgs()
        {
        }
        public static new GetSubnetArgs Empty => new GetSubnetArgs();
    }

    public sealed class GetSubnetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public GetSubnetInvokeArgs()
        {
        }
        public static new GetSubnetInvokeArgs Empty => new GetSubnetInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetResult
    {
        public readonly bool? AssignIpv6AddressOnCreation;
        public readonly bool? EnableDns64;
        /// <summary>
        /// The netmask length of the IPv4 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
        /// </summary>
        public readonly int? Ipv4NetmaskLength;
        public readonly string? Ipv6CidrBlock;
        public readonly ImmutableArray<string> Ipv6CidrBlocks;
        /// <summary>
        /// The netmask length of the IPv6 CIDR you want to allocate to this subnet from an Amazon VPC IP Address Manager (IPAM) pool
        /// </summary>
        public readonly int? Ipv6NetmaskLength;
        public readonly bool? MapPublicIpOnLaunch;
        public readonly string? NetworkAclAssociationId;
        public readonly Outputs.PrivateDnsNameOptionsOnLaunchProperties? PrivateDnsNameOptionsOnLaunch;
        public readonly string? SubnetId;
        public readonly ImmutableArray<Outputs.SubnetTag> Tags;

        [OutputConstructor]
        private GetSubnetResult(
            bool? assignIpv6AddressOnCreation,

            bool? enableDns64,

            int? ipv4NetmaskLength,

            string? ipv6CidrBlock,

            ImmutableArray<string> ipv6CidrBlocks,

            int? ipv6NetmaskLength,

            bool? mapPublicIpOnLaunch,

            string? networkAclAssociationId,

            Outputs.PrivateDnsNameOptionsOnLaunchProperties? privateDnsNameOptionsOnLaunch,

            string? subnetId,

            ImmutableArray<Outputs.SubnetTag> tags)
        {
            AssignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
            EnableDns64 = enableDns64;
            Ipv4NetmaskLength = ipv4NetmaskLength;
            Ipv6CidrBlock = ipv6CidrBlock;
            Ipv6CidrBlocks = ipv6CidrBlocks;
            Ipv6NetmaskLength = ipv6NetmaskLength;
            MapPublicIpOnLaunch = mapPublicIpOnLaunch;
            NetworkAclAssociationId = networkAclAssociationId;
            PrivateDnsNameOptionsOnLaunch = privateDnsNameOptionsOnLaunch;
            SubnetId = subnetId;
            Tags = tags;
        }
    }
}
