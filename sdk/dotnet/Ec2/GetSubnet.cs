// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    public static class GetSubnet
    {
        /// <summary>
        /// Specifies a subnet for the specified VPC.
        ///  For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block.
        ///  For more information, see [Subnets for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html) in the *Amazon VPC User Guide*.
        /// </summary>
        public static Task<GetSubnetResult> InvokeAsync(GetSubnetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("aws-native:ec2:getSubnet", args ?? new GetSubnetArgs(), options.WithDefaults());

        /// <summary>
        /// Specifies a subnet for the specified VPC.
        ///  For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block.
        ///  For more information, see [Subnets for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html) in the *Amazon VPC User Guide*.
        /// </summary>
        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("aws-native:ec2:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetArgs : global::Pulumi.InvokeArgs
    {
        [Input("subnetId", required: true)]
        public string SubnetId { get; set; } = null!;

        public GetSubnetArgs()
        {
        }
        public static new GetSubnetArgs Empty => new GetSubnetArgs();
    }

    public sealed class GetSubnetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public GetSubnetInvokeArgs()
        {
        }
        public static new GetSubnetInvokeArgs Empty => new GetSubnetInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetResult
    {
        /// <summary>
        /// Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
        ///  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        public readonly bool? AssignIpv6AddressOnCreation;
        /// <summary>
        /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.
        /// </summary>
        public readonly bool? EnableDns64;
        /// <summary>
        /// The IPv6 CIDR block.
        ///  If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        /// </summary>
        public readonly string? Ipv6CidrBlock;
        /// <summary>
        /// The IPv6 network ranges for the subnet, in CIDR notation.
        /// </summary>
        public readonly ImmutableArray<string> Ipv6CidrBlocks;
        /// <summary>
        /// Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.
        ///  AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
        /// </summary>
        public readonly bool? MapPublicIpOnLaunch;
        public readonly string? NetworkAclAssociationId;
        /// <summary>
        /// The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
        ///  Available options:
        ///   + EnableResourceNameDnsAAAARecord (true | false)
        ///  + EnableResourceNameDnsARecord (true | false)
        ///  + HostnameType (ip-name | resource-name)
        /// </summary>
        public readonly Outputs.PrivateDnsNameOptionsOnLaunchProperties? PrivateDnsNameOptionsOnLaunch;
        public readonly string? SubnetId;
        /// <summary>
        /// Any tags assigned to the subnet.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;

        [OutputConstructor]
        private GetSubnetResult(
            bool? assignIpv6AddressOnCreation,

            bool? enableDns64,

            string? ipv6CidrBlock,

            ImmutableArray<string> ipv6CidrBlocks,

            bool? mapPublicIpOnLaunch,

            string? networkAclAssociationId,

            Outputs.PrivateDnsNameOptionsOnLaunchProperties? privateDnsNameOptionsOnLaunch,

            string? subnetId,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags)
        {
            AssignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
            EnableDns64 = enableDns64;
            Ipv6CidrBlock = ipv6CidrBlock;
            Ipv6CidrBlocks = ipv6CidrBlocks;
            MapPublicIpOnLaunch = mapPublicIpOnLaunch;
            NetworkAclAssociationId = networkAclAssociationId;
            PrivateDnsNameOptionsOnLaunch = privateDnsNameOptionsOnLaunch;
            SubnetId = subnetId;
            Tags = tags;
        }
    }
}
