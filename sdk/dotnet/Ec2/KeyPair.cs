// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    /// <summary>
    /// Specifies a key pair for use with an EC2long instance as follows:
    ///   +  To import an existing key pair, include the ``PublicKeyMaterial`` property.
    ///   +  To create a new key pair, omit the ``PublicKeyMaterial`` property.
    /// 
    ///  When you import an existing key pair, you specify the public key material for the key. We assume that you have the private key material for the key. CFNlong does not create or return the private key material when you import a key pair.
    ///  When you create a new key pair, the private key is saved to SYSlong Parameter Store, using a parameter with the following name: ``/ec2/keypair/{key_pair_id}``. For more information about retrieving private key, and the required permissions, see [Create a key pair using](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html#create-key-pair-cloudformation) in the *User Guide*.
    ///  When CFN deletes a key pair that was created or imported by a stack, it also deletes the parameter that was used to store the private key material in Parameter Store.
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var newKeyPair = new AwsNative.Ec2.KeyPair("newKeyPair", new()
    ///     {
    ///         KeyName = "MyKeyPair",
    ///     });
    /// 
    ///     var ec2Instance = new AwsNative.Ec2.Instance("ec2Instance", new()
    ///     {
    ///         ImageId = "ami-02b92c281a4d3dc79",
    ///         KeyName = newKeyPair.Id,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var newKeyPair = new AwsNative.Ec2.KeyPair("newKeyPair", new()
    ///     {
    ///         KeyName = "MyKeyPair",
    ///     });
    /// 
    ///     var ec2Instance = new AwsNative.Ec2.Instance("ec2Instance", new()
    ///     {
    ///         ImageId = "ami-02b92c281a4d3dc79",
    ///         KeyName = newKeyPair.Id,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var importedKeyPair = new AwsNative.Ec2.KeyPair("importedKeyPair", new()
    ///     {
    ///         KeyName = "NameForMyImportedKeyPair",
    ///         PublicKeyMaterial = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICfp1F7DhdWZdqkYAUGCzcBsLmJeu9izpIyGpmmg7eCz example",
    ///     });
    /// 
    ///     var ec2Instance = new AwsNative.Ec2.Instance("ec2Instance", new()
    ///     {
    ///         ImageId = "ami-02b92c281a4d3dc79",
    ///         KeyName = importedKeyPair.Id,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var importedKeyPair = new AwsNative.Ec2.KeyPair("importedKeyPair", new()
    ///     {
    ///         KeyName = "NameForMyImportedKeyPair",
    ///         PublicKeyMaterial = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICfp1F7DhdWZdqkYAUGCzcBsLmJeu9izpIyGpmmg7eCz example",
    ///     });
    /// 
    ///     var ec2Instance = new AwsNative.Ec2.Instance("ec2Instance", new()
    ///     {
    ///         ImageId = "ami-02b92c281a4d3dc79",
    ///         KeyName = importedKeyPair.Id,
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:ec2:KeyPair")]
    public partial class KeyPair : global::Pulumi.CustomResource
    {
        [Output("keyFingerprint")]
        public Output<string> KeyFingerprint { get; private set; } = null!;

        /// <summary>
        /// The format of the key pair.
        ///  Default: ``pem``
        /// </summary>
        [Output("keyFormat")]
        public Output<Pulumi.AwsNative.Ec2.KeyPairKeyFormat?> KeyFormat { get; private set; } = null!;

        /// <summary>
        /// A unique name for the key pair.
        ///  Constraints: Up to 255 ASCII characters
        /// </summary>
        [Output("keyName")]
        public Output<string> KeyName { get; private set; } = null!;

        [Output("keyPairId")]
        public Output<string> KeyPairId { get; private set; } = null!;

        /// <summary>
        /// The type of key pair. Note that ED25519 keys are not supported for Windows instances.
        ///  If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial`` value.
        ///  Default: ``rsa``
        /// </summary>
        [Output("keyType")]
        public Output<Pulumi.AwsNative.Ec2.KeyPairKeyType?> KeyType { get; private set; } = null!;

        /// <summary>
        /// The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not specified, then a new key pair will be created.
        /// </summary>
        [Output("publicKeyMaterial")]
        public Output<string?> PublicKeyMaterial { get; private set; } = null!;

        /// <summary>
        /// The tags to apply to the key pair.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.CreateOnlyTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a KeyPair resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyPair(string name, KeyPairArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ec2:KeyPair", name, args ?? new KeyPairArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeyPair(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:KeyPair", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "keyFormat",
                    "keyName",
                    "keyType",
                    "publicKeyMaterial",
                    "tags[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyPair resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyPair Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new KeyPair(name, id, options);
        }
    }

    public sealed class KeyPairArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The format of the key pair.
        ///  Default: ``pem``
        /// </summary>
        [Input("keyFormat")]
        public Input<Pulumi.AwsNative.Ec2.KeyPairKeyFormat>? KeyFormat { get; set; }

        /// <summary>
        /// A unique name for the key pair.
        ///  Constraints: Up to 255 ASCII characters
        /// </summary>
        [Input("keyName", required: true)]
        public Input<string> KeyName { get; set; } = null!;

        /// <summary>
        /// The type of key pair. Note that ED25519 keys are not supported for Windows instances.
        ///  If the ``PublicKeyMaterial`` property is specified, the ``KeyType`` property is ignored, and the key type is inferred from the ``PublicKeyMaterial`` value.
        ///  Default: ``rsa``
        /// </summary>
        [Input("keyType")]
        public Input<Pulumi.AwsNative.Ec2.KeyPairKeyType>? KeyType { get; set; }

        /// <summary>
        /// The public key material. The ``PublicKeyMaterial`` property is used to import a key pair. If this property is not specified, then a new key pair will be created.
        /// </summary>
        [Input("publicKeyMaterial")]
        public Input<string>? PublicKeyMaterial { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs>? _tags;

        /// <summary>
        /// The tags to apply to the key pair.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.CreateOnlyTagArgs>());
            set => _tags = value;
        }

        public KeyPairArgs()
        {
        }
        public static new KeyPairArgs Empty => new KeyPairArgs();
    }
}
