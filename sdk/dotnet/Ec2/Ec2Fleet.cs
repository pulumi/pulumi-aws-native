// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    /// <summary>
    /// Resource Type definition for AWS::EC2::EC2Fleet
    /// </summary>
    [AwsNativeResourceType("aws-native:ec2:Ec2Fleet")]
    public partial class Ec2Fleet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Reserved.
        /// </summary>
        [Output("context")]
        public Output<string?> Context { get; private set; } = null!;

        /// <summary>
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        /// 
        /// Supported only for fleets of type `maintain` .
        /// </summary>
        [Output("excessCapacityTerminationPolicy")]
        public Output<Pulumi.AwsNative.Ec2.Ec2FleetExcessCapacityTerminationPolicy?> ExcessCapacityTerminationPolicy { get; private set; } = null!;

        /// <summary>
        /// The ID of the EC2 Fleet.
        /// </summary>
        [Output("fleetId")]
        public Output<string> FleetId { get; private set; } = null!;

        /// <summary>
        /// The configuration for the EC2 Fleet.
        /// </summary>
        [Output("launchTemplateConfigs")]
        public Output<ImmutableArray<Outputs.Ec2FleetFleetLaunchTemplateConfigRequest>> LaunchTemplateConfigs { get; private set; } = null!;

        /// <summary>
        /// Describes the configuration of On-Demand Instances in an EC2 Fleet.
        /// </summary>
        [Output("onDemandOptions")]
        public Output<Outputs.Ec2FleetOnDemandOptionsRequest?> OnDemandOptions { get; private set; } = null!;

        /// <summary>
        /// Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for fleets of type `maintain` . For more information, see [EC2 Fleet health checks](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks) in the *Amazon EC2 User Guide* .
        /// </summary>
        [Output("replaceUnhealthyInstances")]
        public Output<bool?> ReplaceUnhealthyInstances { get; private set; } = null!;

        /// <summary>
        /// Describes the configuration of Spot Instances in an EC2 Fleet.
        /// </summary>
        [Output("spotOptions")]
        public Output<Outputs.Ec2FleetSpotOptionsRequest?> SpotOptions { get; private set; } = null!;

        /// <summary>
        /// The key-value pair for tagging the EC2 Fleet request on creation. For more information, see [Tag your resources](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources) .
        /// 
        /// If the fleet type is `instant` , specify a resource type of `fleet` to tag the fleet or `instance` to tag the instances at launch.
        /// 
        /// If the fleet type is `maintain` or `request` , specify a resource type of `fleet` to tag the fleet. You cannot specify a resource type of `instance` . To tag instances at launch, specify the tags in a [launch template](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template) .
        /// </summary>
        [Output("tagSpecifications")]
        public Output<ImmutableArray<Outputs.Ec2FleetTagSpecification>> TagSpecifications { get; private set; } = null!;

        /// <summary>
        /// The number of units to request.
        /// </summary>
        [Output("targetCapacitySpecification")]
        public Output<Outputs.Ec2FleetTargetCapacitySpecificationRequest> TargetCapacitySpecification { get; private set; } = null!;

        /// <summary>
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires.
        /// </summary>
        [Output("terminateInstancesWithExpiration")]
        public Output<bool?> TerminateInstancesWithExpiration { get; private set; } = null!;

        /// <summary>
        /// The fleet type. The default value is `maintain` .
        /// 
        /// - `maintain` - The EC2 Fleet places an asynchronous request for your desired capacity, and continues to maintain your desired Spot capacity by replenishing interrupted Spot Instances.
        /// - `request` - The EC2 Fleet places an asynchronous one-time request for your desired capacity, but does submit Spot requests in alternative capacity pools if Spot capacity is unavailable, and does not maintain Spot capacity if Spot Instances are interrupted.
        /// - `instant` - The EC2 Fleet places a synchronous one-time request for your desired capacity, and returns errors for any instances that could not be launched.
        /// 
        /// For more information, see [EC2 Fleet request types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-request-type.html) in the *Amazon EC2 User Guide* .
        /// </summary>
        [Output("type")]
        public Output<Pulumi.AwsNative.Ec2.Ec2FleetType?> Type { get; private set; } = null!;

        /// <summary>
        /// The start date and time of the request, in UTC format (for example, *YYYY* - *MM* - *DD* T *HH* : *MM* : *SS* Z). The default is to start fulfilling the request immediately.
        /// </summary>
        [Output("validFrom")]
        public Output<string?> ValidFrom { get; private set; } = null!;

        /// <summary>
        /// The end date and time of the request, in UTC format (for example, *YYYY* - *MM* - *DD* T *HH* : *MM* : *SS* Z). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
        /// </summary>
        [Output("validUntil")]
        public Output<string?> ValidUntil { get; private set; } = null!;


        /// <summary>
        /// Create a Ec2Fleet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ec2Fleet(string name, Ec2FleetArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ec2:Ec2Fleet", name, args ?? new Ec2FleetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ec2Fleet(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:Ec2Fleet", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "launchTemplateConfigs[*]",
                    "onDemandOptions",
                    "replaceUnhealthyInstances",
                    "spotOptions",
                    "tagSpecifications[*]",
                    "terminateInstancesWithExpiration",
                    "type",
                    "validFrom",
                    "validUntil",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ec2Fleet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ec2Fleet Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Ec2Fleet(name, id, options);
        }
    }

    public sealed class Ec2FleetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Reserved.
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        /// <summary>
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        /// 
        /// Supported only for fleets of type `maintain` .
        /// </summary>
        [Input("excessCapacityTerminationPolicy")]
        public Input<Pulumi.AwsNative.Ec2.Ec2FleetExcessCapacityTerminationPolicy>? ExcessCapacityTerminationPolicy { get; set; }

        [Input("launchTemplateConfigs", required: true)]
        private InputList<Inputs.Ec2FleetFleetLaunchTemplateConfigRequestArgs>? _launchTemplateConfigs;

        /// <summary>
        /// The configuration for the EC2 Fleet.
        /// </summary>
        public InputList<Inputs.Ec2FleetFleetLaunchTemplateConfigRequestArgs> LaunchTemplateConfigs
        {
            get => _launchTemplateConfigs ?? (_launchTemplateConfigs = new InputList<Inputs.Ec2FleetFleetLaunchTemplateConfigRequestArgs>());
            set => _launchTemplateConfigs = value;
        }

        /// <summary>
        /// Describes the configuration of On-Demand Instances in an EC2 Fleet.
        /// </summary>
        [Input("onDemandOptions")]
        public Input<Inputs.Ec2FleetOnDemandOptionsRequestArgs>? OnDemandOptions { get; set; }

        /// <summary>
        /// Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for fleets of type `maintain` . For more information, see [EC2 Fleet health checks](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks) in the *Amazon EC2 User Guide* .
        /// </summary>
        [Input("replaceUnhealthyInstances")]
        public Input<bool>? ReplaceUnhealthyInstances { get; set; }

        /// <summary>
        /// Describes the configuration of Spot Instances in an EC2 Fleet.
        /// </summary>
        [Input("spotOptions")]
        public Input<Inputs.Ec2FleetSpotOptionsRequestArgs>? SpotOptions { get; set; }

        [Input("tagSpecifications")]
        private InputList<Inputs.Ec2FleetTagSpecificationArgs>? _tagSpecifications;

        /// <summary>
        /// The key-value pair for tagging the EC2 Fleet request on creation. For more information, see [Tag your resources](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources) .
        /// 
        /// If the fleet type is `instant` , specify a resource type of `fleet` to tag the fleet or `instance` to tag the instances at launch.
        /// 
        /// If the fleet type is `maintain` or `request` , specify a resource type of `fleet` to tag the fleet. You cannot specify a resource type of `instance` . To tag instances at launch, specify the tags in a [launch template](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template) .
        /// </summary>
        public InputList<Inputs.Ec2FleetTagSpecificationArgs> TagSpecifications
        {
            get => _tagSpecifications ?? (_tagSpecifications = new InputList<Inputs.Ec2FleetTagSpecificationArgs>());
            set => _tagSpecifications = value;
        }

        /// <summary>
        /// The number of units to request.
        /// </summary>
        [Input("targetCapacitySpecification", required: true)]
        public Input<Inputs.Ec2FleetTargetCapacitySpecificationRequestArgs> TargetCapacitySpecification { get; set; } = null!;

        /// <summary>
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires.
        /// </summary>
        [Input("terminateInstancesWithExpiration")]
        public Input<bool>? TerminateInstancesWithExpiration { get; set; }

        /// <summary>
        /// The fleet type. The default value is `maintain` .
        /// 
        /// - `maintain` - The EC2 Fleet places an asynchronous request for your desired capacity, and continues to maintain your desired Spot capacity by replenishing interrupted Spot Instances.
        /// - `request` - The EC2 Fleet places an asynchronous one-time request for your desired capacity, but does submit Spot requests in alternative capacity pools if Spot capacity is unavailable, and does not maintain Spot capacity if Spot Instances are interrupted.
        /// - `instant` - The EC2 Fleet places a synchronous one-time request for your desired capacity, and returns errors for any instances that could not be launched.
        /// 
        /// For more information, see [EC2 Fleet request types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-request-type.html) in the *Amazon EC2 User Guide* .
        /// </summary>
        [Input("type")]
        public Input<Pulumi.AwsNative.Ec2.Ec2FleetType>? Type { get; set; }

        /// <summary>
        /// The start date and time of the request, in UTC format (for example, *YYYY* - *MM* - *DD* T *HH* : *MM* : *SS* Z). The default is to start fulfilling the request immediately.
        /// </summary>
        [Input("validFrom")]
        public Input<string>? ValidFrom { get; set; }

        /// <summary>
        /// The end date and time of the request, in UTC format (for example, *YYYY* - *MM* - *DD* T *HH* : *MM* : *SS* Z). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
        /// </summary>
        [Input("validUntil")]
        public Input<string>? ValidUntil { get; set; }

        public Ec2FleetArgs()
        {
        }
        public static new Ec2FleetArgs Empty => new Ec2FleetArgs();
    }
}
