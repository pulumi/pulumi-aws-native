// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Ec2
{
    [EnumType]
    public readonly struct CapacityReservationFleetInstanceMatchCriteria : IEquatable<CapacityReservationFleetInstanceMatchCriteria>
    {
        private readonly string _value;

        private CapacityReservationFleetInstanceMatchCriteria(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CapacityReservationFleetInstanceMatchCriteria Open { get; } = new CapacityReservationFleetInstanceMatchCriteria("open");

        public static bool operator ==(CapacityReservationFleetInstanceMatchCriteria left, CapacityReservationFleetInstanceMatchCriteria right) => left.Equals(right);
        public static bool operator !=(CapacityReservationFleetInstanceMatchCriteria left, CapacityReservationFleetInstanceMatchCriteria right) => !left.Equals(right);

        public static explicit operator string(CapacityReservationFleetInstanceMatchCriteria value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CapacityReservationFleetInstanceMatchCriteria other && Equals(other);
        public bool Equals(CapacityReservationFleetInstanceMatchCriteria other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CapacityReservationFleetTenancy : IEquatable<CapacityReservationFleetTenancy>
    {
        private readonly string _value;

        private CapacityReservationFleetTenancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CapacityReservationFleetTenancy Default { get; } = new CapacityReservationFleetTenancy("default");

        public static bool operator ==(CapacityReservationFleetTenancy left, CapacityReservationFleetTenancy right) => left.Equals(right);
        public static bool operator !=(CapacityReservationFleetTenancy left, CapacityReservationFleetTenancy right) => !left.Equals(right);

        public static explicit operator string(CapacityReservationFleetTenancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CapacityReservationFleetTenancy other && Equals(other);
        public bool Equals(CapacityReservationFleetTenancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetCapacityRebalanceReplacementStrategy : IEquatable<Ec2FleetCapacityRebalanceReplacementStrategy>
    {
        private readonly string _value;

        private Ec2FleetCapacityRebalanceReplacementStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetCapacityRebalanceReplacementStrategy Launch { get; } = new Ec2FleetCapacityRebalanceReplacementStrategy("launch");
        public static Ec2FleetCapacityRebalanceReplacementStrategy LaunchBeforeTerminate { get; } = new Ec2FleetCapacityRebalanceReplacementStrategy("launch-before-terminate");

        public static bool operator ==(Ec2FleetCapacityRebalanceReplacementStrategy left, Ec2FleetCapacityRebalanceReplacementStrategy right) => left.Equals(right);
        public static bool operator !=(Ec2FleetCapacityRebalanceReplacementStrategy left, Ec2FleetCapacityRebalanceReplacementStrategy right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetCapacityRebalanceReplacementStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetCapacityRebalanceReplacementStrategy other && Equals(other);
        public bool Equals(Ec2FleetCapacityRebalanceReplacementStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetCapacityReservationOptionsRequestUsageStrategy : IEquatable<Ec2FleetCapacityReservationOptionsRequestUsageStrategy>
    {
        private readonly string _value;

        private Ec2FleetCapacityReservationOptionsRequestUsageStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetCapacityReservationOptionsRequestUsageStrategy UseCapacityReservationsFirst { get; } = new Ec2FleetCapacityReservationOptionsRequestUsageStrategy("use-capacity-reservations-first");

        public static bool operator ==(Ec2FleetCapacityReservationOptionsRequestUsageStrategy left, Ec2FleetCapacityReservationOptionsRequestUsageStrategy right) => left.Equals(right);
        public static bool operator !=(Ec2FleetCapacityReservationOptionsRequestUsageStrategy left, Ec2FleetCapacityReservationOptionsRequestUsageStrategy right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetCapacityReservationOptionsRequestUsageStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetCapacityReservationOptionsRequestUsageStrategy other && Equals(other);
        public bool Equals(Ec2FleetCapacityReservationOptionsRequestUsageStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetExcessCapacityTerminationPolicy : IEquatable<Ec2FleetExcessCapacityTerminationPolicy>
    {
        private readonly string _value;

        private Ec2FleetExcessCapacityTerminationPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetExcessCapacityTerminationPolicy Termination { get; } = new Ec2FleetExcessCapacityTerminationPolicy("termination");
        public static Ec2FleetExcessCapacityTerminationPolicy NoTermination { get; } = new Ec2FleetExcessCapacityTerminationPolicy("no-termination");

        public static bool operator ==(Ec2FleetExcessCapacityTerminationPolicy left, Ec2FleetExcessCapacityTerminationPolicy right) => left.Equals(right);
        public static bool operator !=(Ec2FleetExcessCapacityTerminationPolicy left, Ec2FleetExcessCapacityTerminationPolicy right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetExcessCapacityTerminationPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetExcessCapacityTerminationPolicy other && Equals(other);
        public bool Equals(Ec2FleetExcessCapacityTerminationPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem : IEquatable<Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem>
    {
        private readonly string _value;

        private Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem Nvidia { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem("nvidia");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem Amd { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem("amd");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem AmazonWebServices { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem("amazon-web-services");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem Xilinx { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem("xilinx");

        public static bool operator ==(Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem left, Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem right) => left.Equals(right);
        public static bool operator !=(Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem left, Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem other && Equals(other);
        public bool Equals(Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem : IEquatable<Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem>
    {
        private readonly string _value;

        private Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem A100 { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem("a100");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem V100 { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem("v100");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem K80 { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem("k80");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem T4 { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem("t4");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem M60 { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem("m60");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem RadeonProV520 { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem("radeon-pro-v520");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem Vu9p { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem("vu9p");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem Inferentia { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem("inferentia");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem K520 { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem("k520");

        public static bool operator ==(Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem left, Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem right) => left.Equals(right);
        public static bool operator !=(Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem left, Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem other && Equals(other);
        public bool Equals(Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem : IEquatable<Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem>
    {
        private readonly string _value;

        private Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem Gpu { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem("gpu");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem Fpga { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem("fpga");
        public static Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem Inference { get; } = new Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem("inference");

        public static bool operator ==(Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem left, Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem right) => left.Equals(right);
        public static bool operator !=(Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem left, Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem other && Equals(other);
        public bool Equals(Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetInstanceRequirementsRequestBareMetal : IEquatable<Ec2FleetInstanceRequirementsRequestBareMetal>
    {
        private readonly string _value;

        private Ec2FleetInstanceRequirementsRequestBareMetal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetInstanceRequirementsRequestBareMetal Included { get; } = new Ec2FleetInstanceRequirementsRequestBareMetal("included");
        public static Ec2FleetInstanceRequirementsRequestBareMetal Required { get; } = new Ec2FleetInstanceRequirementsRequestBareMetal("required");
        public static Ec2FleetInstanceRequirementsRequestBareMetal Excluded { get; } = new Ec2FleetInstanceRequirementsRequestBareMetal("excluded");

        public static bool operator ==(Ec2FleetInstanceRequirementsRequestBareMetal left, Ec2FleetInstanceRequirementsRequestBareMetal right) => left.Equals(right);
        public static bool operator !=(Ec2FleetInstanceRequirementsRequestBareMetal left, Ec2FleetInstanceRequirementsRequestBareMetal right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetInstanceRequirementsRequestBareMetal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetInstanceRequirementsRequestBareMetal other && Equals(other);
        public bool Equals(Ec2FleetInstanceRequirementsRequestBareMetal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetInstanceRequirementsRequestBurstablePerformance : IEquatable<Ec2FleetInstanceRequirementsRequestBurstablePerformance>
    {
        private readonly string _value;

        private Ec2FleetInstanceRequirementsRequestBurstablePerformance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetInstanceRequirementsRequestBurstablePerformance Included { get; } = new Ec2FleetInstanceRequirementsRequestBurstablePerformance("included");
        public static Ec2FleetInstanceRequirementsRequestBurstablePerformance Required { get; } = new Ec2FleetInstanceRequirementsRequestBurstablePerformance("required");
        public static Ec2FleetInstanceRequirementsRequestBurstablePerformance Excluded { get; } = new Ec2FleetInstanceRequirementsRequestBurstablePerformance("excluded");

        public static bool operator ==(Ec2FleetInstanceRequirementsRequestBurstablePerformance left, Ec2FleetInstanceRequirementsRequestBurstablePerformance right) => left.Equals(right);
        public static bool operator !=(Ec2FleetInstanceRequirementsRequestBurstablePerformance left, Ec2FleetInstanceRequirementsRequestBurstablePerformance right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetInstanceRequirementsRequestBurstablePerformance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetInstanceRequirementsRequestBurstablePerformance other && Equals(other);
        public bool Equals(Ec2FleetInstanceRequirementsRequestBurstablePerformance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetInstanceRequirementsRequestCpuManufacturersItem : IEquatable<Ec2FleetInstanceRequirementsRequestCpuManufacturersItem>
    {
        private readonly string _value;

        private Ec2FleetInstanceRequirementsRequestCpuManufacturersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetInstanceRequirementsRequestCpuManufacturersItem Intel { get; } = new Ec2FleetInstanceRequirementsRequestCpuManufacturersItem("intel");
        public static Ec2FleetInstanceRequirementsRequestCpuManufacturersItem Amd { get; } = new Ec2FleetInstanceRequirementsRequestCpuManufacturersItem("amd");
        public static Ec2FleetInstanceRequirementsRequestCpuManufacturersItem AmazonWebServices { get; } = new Ec2FleetInstanceRequirementsRequestCpuManufacturersItem("amazon-web-services");

        public static bool operator ==(Ec2FleetInstanceRequirementsRequestCpuManufacturersItem left, Ec2FleetInstanceRequirementsRequestCpuManufacturersItem right) => left.Equals(right);
        public static bool operator !=(Ec2FleetInstanceRequirementsRequestCpuManufacturersItem left, Ec2FleetInstanceRequirementsRequestCpuManufacturersItem right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetInstanceRequirementsRequestCpuManufacturersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetInstanceRequirementsRequestCpuManufacturersItem other && Equals(other);
        public bool Equals(Ec2FleetInstanceRequirementsRequestCpuManufacturersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem : IEquatable<Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem>
    {
        private readonly string _value;

        private Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem Current { get; } = new Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem("current");
        public static Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem Previous { get; } = new Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem("previous");

        public static bool operator ==(Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem left, Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem right) => left.Equals(right);
        public static bool operator !=(Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem left, Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem other && Equals(other);
        public bool Equals(Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetInstanceRequirementsRequestLocalStorage : IEquatable<Ec2FleetInstanceRequirementsRequestLocalStorage>
    {
        private readonly string _value;

        private Ec2FleetInstanceRequirementsRequestLocalStorage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetInstanceRequirementsRequestLocalStorage Included { get; } = new Ec2FleetInstanceRequirementsRequestLocalStorage("included");
        public static Ec2FleetInstanceRequirementsRequestLocalStorage Required { get; } = new Ec2FleetInstanceRequirementsRequestLocalStorage("required");
        public static Ec2FleetInstanceRequirementsRequestLocalStorage Excluded { get; } = new Ec2FleetInstanceRequirementsRequestLocalStorage("excluded");

        public static bool operator ==(Ec2FleetInstanceRequirementsRequestLocalStorage left, Ec2FleetInstanceRequirementsRequestLocalStorage right) => left.Equals(right);
        public static bool operator !=(Ec2FleetInstanceRequirementsRequestLocalStorage left, Ec2FleetInstanceRequirementsRequestLocalStorage right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetInstanceRequirementsRequestLocalStorage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetInstanceRequirementsRequestLocalStorage other && Equals(other);
        public bool Equals(Ec2FleetInstanceRequirementsRequestLocalStorage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem : IEquatable<Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem>
    {
        private readonly string _value;

        private Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem Hdd { get; } = new Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem("hdd");
        public static Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem Ssd { get; } = new Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem("ssd");

        public static bool operator ==(Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem left, Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem right) => left.Equals(right);
        public static bool operator !=(Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem left, Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem other && Equals(other);
        public bool Equals(Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetSpotOptionsRequestAllocationStrategy : IEquatable<Ec2FleetSpotOptionsRequestAllocationStrategy>
    {
        private readonly string _value;

        private Ec2FleetSpotOptionsRequestAllocationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetSpotOptionsRequestAllocationStrategy LowestPrice { get; } = new Ec2FleetSpotOptionsRequestAllocationStrategy("lowest-price");
        public static Ec2FleetSpotOptionsRequestAllocationStrategy Diversified { get; } = new Ec2FleetSpotOptionsRequestAllocationStrategy("diversified");
        public static Ec2FleetSpotOptionsRequestAllocationStrategy CapacityOptimized { get; } = new Ec2FleetSpotOptionsRequestAllocationStrategy("capacityOptimized");
        public static Ec2FleetSpotOptionsRequestAllocationStrategy CapacityOptimizedPrioritized { get; } = new Ec2FleetSpotOptionsRequestAllocationStrategy("capacityOptimizedPrioritized");
        public static Ec2FleetSpotOptionsRequestAllocationStrategy PriceCapacityOptimized { get; } = new Ec2FleetSpotOptionsRequestAllocationStrategy("priceCapacityOptimized");

        public static bool operator ==(Ec2FleetSpotOptionsRequestAllocationStrategy left, Ec2FleetSpotOptionsRequestAllocationStrategy right) => left.Equals(right);
        public static bool operator !=(Ec2FleetSpotOptionsRequestAllocationStrategy left, Ec2FleetSpotOptionsRequestAllocationStrategy right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetSpotOptionsRequestAllocationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetSpotOptionsRequestAllocationStrategy other && Equals(other);
        public bool Equals(Ec2FleetSpotOptionsRequestAllocationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior : IEquatable<Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior>
    {
        private readonly string _value;

        private Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior Hibernate { get; } = new Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior("hibernate");
        public static Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior Stop { get; } = new Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior("stop");
        public static Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior Terminate { get; } = new Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior("terminate");

        public static bool operator ==(Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior left, Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior right) => left.Equals(right);
        public static bool operator !=(Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior left, Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior other && Equals(other);
        public bool Equals(Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetTagSpecificationResourceType : IEquatable<Ec2FleetTagSpecificationResourceType>
    {
        private readonly string _value;

        private Ec2FleetTagSpecificationResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetTagSpecificationResourceType ClientVpnEndpoint { get; } = new Ec2FleetTagSpecificationResourceType("client-vpn-endpoint");
        public static Ec2FleetTagSpecificationResourceType CustomerGateway { get; } = new Ec2FleetTagSpecificationResourceType("customer-gateway");
        public static Ec2FleetTagSpecificationResourceType DedicatedHost { get; } = new Ec2FleetTagSpecificationResourceType("dedicated-host");
        public static Ec2FleetTagSpecificationResourceType DhcpOptions { get; } = new Ec2FleetTagSpecificationResourceType("dhcp-options");
        public static Ec2FleetTagSpecificationResourceType EgressOnlyInternetGateway { get; } = new Ec2FleetTagSpecificationResourceType("egress-only-internet-gateway");
        public static Ec2FleetTagSpecificationResourceType ElasticGpu { get; } = new Ec2FleetTagSpecificationResourceType("elastic-gpu");
        public static Ec2FleetTagSpecificationResourceType ElasticIp { get; } = new Ec2FleetTagSpecificationResourceType("elastic-ip");
        public static Ec2FleetTagSpecificationResourceType ExportImageTask { get; } = new Ec2FleetTagSpecificationResourceType("export-image-task");
        public static Ec2FleetTagSpecificationResourceType ExportInstanceTask { get; } = new Ec2FleetTagSpecificationResourceType("export-instance-task");
        public static Ec2FleetTagSpecificationResourceType Fleet { get; } = new Ec2FleetTagSpecificationResourceType("fleet");
        public static Ec2FleetTagSpecificationResourceType FpgaImage { get; } = new Ec2FleetTagSpecificationResourceType("fpga-image");
        public static Ec2FleetTagSpecificationResourceType HostReservation { get; } = new Ec2FleetTagSpecificationResourceType("host-reservation");
        public static Ec2FleetTagSpecificationResourceType Image { get; } = new Ec2FleetTagSpecificationResourceType("image");
        public static Ec2FleetTagSpecificationResourceType ImportImageTask { get; } = new Ec2FleetTagSpecificationResourceType("import-image-task");
        public static Ec2FleetTagSpecificationResourceType ImportSnapshotTask { get; } = new Ec2FleetTagSpecificationResourceType("import-snapshot-task");
        public static Ec2FleetTagSpecificationResourceType Instance { get; } = new Ec2FleetTagSpecificationResourceType("instance");
        public static Ec2FleetTagSpecificationResourceType InternetGateway { get; } = new Ec2FleetTagSpecificationResourceType("internet-gateway");
        public static Ec2FleetTagSpecificationResourceType KeyPair { get; } = new Ec2FleetTagSpecificationResourceType("key-pair");
        public static Ec2FleetTagSpecificationResourceType LaunchTemplate { get; } = new Ec2FleetTagSpecificationResourceType("launch-template");
        public static Ec2FleetTagSpecificationResourceType LocalGatewayRouteTableVpcAssociation { get; } = new Ec2FleetTagSpecificationResourceType("local-gateway-route-table-vpc-association");
        public static Ec2FleetTagSpecificationResourceType Natgateway { get; } = new Ec2FleetTagSpecificationResourceType("natgateway");
        public static Ec2FleetTagSpecificationResourceType NetworkAcl { get; } = new Ec2FleetTagSpecificationResourceType("network-acl");
        public static Ec2FleetTagSpecificationResourceType NetworkInsightsAnalysis { get; } = new Ec2FleetTagSpecificationResourceType("network-insights-analysis");
        public static Ec2FleetTagSpecificationResourceType NetworkInsightsPath { get; } = new Ec2FleetTagSpecificationResourceType("network-insights-path");
        public static Ec2FleetTagSpecificationResourceType NetworkInterface { get; } = new Ec2FleetTagSpecificationResourceType("network-interface");
        public static Ec2FleetTagSpecificationResourceType PlacementGroup { get; } = new Ec2FleetTagSpecificationResourceType("placement-group");
        public static Ec2FleetTagSpecificationResourceType ReservedInstances { get; } = new Ec2FleetTagSpecificationResourceType("reserved-instances");
        public static Ec2FleetTagSpecificationResourceType RouteTable { get; } = new Ec2FleetTagSpecificationResourceType("route-table");
        public static Ec2FleetTagSpecificationResourceType SecurityGroup { get; } = new Ec2FleetTagSpecificationResourceType("security-group");
        public static Ec2FleetTagSpecificationResourceType Snapshot { get; } = new Ec2FleetTagSpecificationResourceType("snapshot");
        public static Ec2FleetTagSpecificationResourceType SpotFleetRequest { get; } = new Ec2FleetTagSpecificationResourceType("spot-fleet-request");
        public static Ec2FleetTagSpecificationResourceType SpotInstancesRequest { get; } = new Ec2FleetTagSpecificationResourceType("spot-instances-request");
        public static Ec2FleetTagSpecificationResourceType Subnet { get; } = new Ec2FleetTagSpecificationResourceType("subnet");
        public static Ec2FleetTagSpecificationResourceType TrafficMirrorFilter { get; } = new Ec2FleetTagSpecificationResourceType("traffic-mirror-filter");
        public static Ec2FleetTagSpecificationResourceType TrafficMirrorSession { get; } = new Ec2FleetTagSpecificationResourceType("traffic-mirror-session");
        public static Ec2FleetTagSpecificationResourceType TrafficMirrorTarget { get; } = new Ec2FleetTagSpecificationResourceType("traffic-mirror-target");
        public static Ec2FleetTagSpecificationResourceType TransitGateway { get; } = new Ec2FleetTagSpecificationResourceType("transit-gateway");
        public static Ec2FleetTagSpecificationResourceType TransitGatewayAttachment { get; } = new Ec2FleetTagSpecificationResourceType("transit-gateway-attachment");
        public static Ec2FleetTagSpecificationResourceType TransitGatewayConnectPeer { get; } = new Ec2FleetTagSpecificationResourceType("transit-gateway-connect-peer");
        public static Ec2FleetTagSpecificationResourceType TransitGatewayMulticastDomain { get; } = new Ec2FleetTagSpecificationResourceType("transit-gateway-multicast-domain");
        public static Ec2FleetTagSpecificationResourceType TransitGatewayRouteTable { get; } = new Ec2FleetTagSpecificationResourceType("transit-gateway-route-table");
        public static Ec2FleetTagSpecificationResourceType Volume { get; } = new Ec2FleetTagSpecificationResourceType("volume");
        public static Ec2FleetTagSpecificationResourceType Vpc { get; } = new Ec2FleetTagSpecificationResourceType("vpc");
        public static Ec2FleetTagSpecificationResourceType VpcFlowLog { get; } = new Ec2FleetTagSpecificationResourceType("vpc-flow-log");
        public static Ec2FleetTagSpecificationResourceType VpcPeeringConnection { get; } = new Ec2FleetTagSpecificationResourceType("vpc-peering-connection");
        public static Ec2FleetTagSpecificationResourceType VpnConnection { get; } = new Ec2FleetTagSpecificationResourceType("vpn-connection");
        public static Ec2FleetTagSpecificationResourceType VpnGateway { get; } = new Ec2FleetTagSpecificationResourceType("vpn-gateway");

        public static bool operator ==(Ec2FleetTagSpecificationResourceType left, Ec2FleetTagSpecificationResourceType right) => left.Equals(right);
        public static bool operator !=(Ec2FleetTagSpecificationResourceType left, Ec2FleetTagSpecificationResourceType right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetTagSpecificationResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetTagSpecificationResourceType other && Equals(other);
        public bool Equals(Ec2FleetTagSpecificationResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType : IEquatable<Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType>
    {
        private readonly string _value;

        private Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType OnDemand { get; } = new Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType("on-demand");
        public static Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType Spot { get; } = new Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType("spot");

        public static bool operator ==(Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType left, Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType right) => left.Equals(right);
        public static bool operator !=(Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType left, Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType other && Equals(other);
        public bool Equals(Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType : IEquatable<Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType>
    {
        private readonly string _value;

        private Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType Vcpu { get; } = new Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType("vcpu");
        public static Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType MemoryMib { get; } = new Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType("memory-mib");
        public static Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType Units { get; } = new Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType("units");

        public static bool operator ==(Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType left, Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType right) => left.Equals(right);
        public static bool operator !=(Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType left, Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType other && Equals(other);
        public bool Equals(Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Ec2FleetType : IEquatable<Ec2FleetType>
    {
        private readonly string _value;

        private Ec2FleetType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Ec2FleetType Maintain { get; } = new Ec2FleetType("maintain");
        public static Ec2FleetType Request { get; } = new Ec2FleetType("request");
        public static Ec2FleetType Instant { get; } = new Ec2FleetType("instant");

        public static bool operator ==(Ec2FleetType left, Ec2FleetType right) => left.Equals(right);
        public static bool operator !=(Ec2FleetType left, Ec2FleetType right) => !left.Equals(right);

        public static explicit operator string(Ec2FleetType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Ec2FleetType other && Equals(other);
        public bool Equals(Ec2FleetType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FlowLogDestinationOptionsPropertiesFileFormat : IEquatable<FlowLogDestinationOptionsPropertiesFileFormat>
    {
        private readonly string _value;

        private FlowLogDestinationOptionsPropertiesFileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogDestinationOptionsPropertiesFileFormat PlainText { get; } = new FlowLogDestinationOptionsPropertiesFileFormat("plain-text");
        public static FlowLogDestinationOptionsPropertiesFileFormat Parquet { get; } = new FlowLogDestinationOptionsPropertiesFileFormat("parquet");

        public static bool operator ==(FlowLogDestinationOptionsPropertiesFileFormat left, FlowLogDestinationOptionsPropertiesFileFormat right) => left.Equals(right);
        public static bool operator !=(FlowLogDestinationOptionsPropertiesFileFormat left, FlowLogDestinationOptionsPropertiesFileFormat right) => !left.Equals(right);

        public static explicit operator string(FlowLogDestinationOptionsPropertiesFileFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogDestinationOptionsPropertiesFileFormat other && Equals(other);
        public bool Equals(FlowLogDestinationOptionsPropertiesFileFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogLogDestinationType : IEquatable<FlowLogLogDestinationType>
    {
        private readonly string _value;

        private FlowLogLogDestinationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogLogDestinationType CloudWatchLogs { get; } = new FlowLogLogDestinationType("cloud-watch-logs");
        public static FlowLogLogDestinationType S3 { get; } = new FlowLogLogDestinationType("s3");
        public static FlowLogLogDestinationType KinesisDataFirehose { get; } = new FlowLogLogDestinationType("kinesis-data-firehose");

        public static bool operator ==(FlowLogLogDestinationType left, FlowLogLogDestinationType right) => left.Equals(right);
        public static bool operator !=(FlowLogLogDestinationType left, FlowLogLogDestinationType right) => !left.Equals(right);

        public static explicit operator string(FlowLogLogDestinationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogLogDestinationType other && Equals(other);
        public bool Equals(FlowLogLogDestinationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogResourceType : IEquatable<FlowLogResourceType>
    {
        private readonly string _value;

        private FlowLogResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogResourceType NetworkInterface { get; } = new FlowLogResourceType("NetworkInterface");
        public static FlowLogResourceType Subnet { get; } = new FlowLogResourceType("Subnet");
        public static FlowLogResourceType Vpc { get; } = new FlowLogResourceType("VPC");
        public static FlowLogResourceType TransitGateway { get; } = new FlowLogResourceType("TransitGateway");
        public static FlowLogResourceType TransitGatewayAttachment { get; } = new FlowLogResourceType("TransitGatewayAttachment");

        public static bool operator ==(FlowLogResourceType left, FlowLogResourceType right) => left.Equals(right);
        public static bool operator !=(FlowLogResourceType left, FlowLogResourceType right) => !left.Equals(right);

        public static explicit operator string(FlowLogResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogResourceType other && Equals(other);
        public bool Equals(FlowLogResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
    /// </summary>
    [EnumType]
    public readonly struct FlowLogTrafficType : IEquatable<FlowLogTrafficType>
    {
        private readonly string _value;

        private FlowLogTrafficType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FlowLogTrafficType Accept { get; } = new FlowLogTrafficType("ACCEPT");
        public static FlowLogTrafficType All { get; } = new FlowLogTrafficType("ALL");
        public static FlowLogTrafficType Reject { get; } = new FlowLogTrafficType("REJECT");

        public static bool operator ==(FlowLogTrafficType left, FlowLogTrafficType right) => left.Equals(right);
        public static bool operator !=(FlowLogTrafficType left, FlowLogTrafficType right) => !left.Equals(right);

        public static explicit operator string(FlowLogTrafficType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FlowLogTrafficType other && Equals(other);
        public bool Equals(FlowLogTrafficType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Limits which service in Amazon Web Services that the pool can be used in.
    /// </summary>
    [EnumType]
    public readonly struct IpamPoolAwsService : IEquatable<IpamPoolAwsService>
    {
        private readonly string _value;

        private IpamPoolAwsService(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpamPoolAwsService Ec2 { get; } = new IpamPoolAwsService("ec2");

        public static bool operator ==(IpamPoolAwsService left, IpamPoolAwsService right) => left.Equals(right);
        public static bool operator !=(IpamPoolAwsService left, IpamPoolAwsService right) => !left.Equals(right);

        public static explicit operator string(IpamPoolAwsService value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpamPoolAwsService other && Equals(other);
        public bool Equals(IpamPoolAwsService other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines whether this scope contains publicly routable space or space for a private network
    /// </summary>
    [EnumType]
    public readonly struct IpamPoolIpamScopeType : IEquatable<IpamPoolIpamScopeType>
    {
        private readonly string _value;

        private IpamPoolIpamScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpamPoolIpamScopeType Public { get; } = new IpamPoolIpamScopeType("public");
        public static IpamPoolIpamScopeType Private { get; } = new IpamPoolIpamScopeType("private");

        public static bool operator ==(IpamPoolIpamScopeType left, IpamPoolIpamScopeType right) => left.Equals(right);
        public static bool operator !=(IpamPoolIpamScopeType left, IpamPoolIpamScopeType right) => !left.Equals(right);

        public static explicit operator string(IpamPoolIpamScopeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpamPoolIpamScopeType other && Equals(other);
        public bool Equals(IpamPoolIpamScopeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is `byoip`.
    /// </summary>
    [EnumType]
    public readonly struct IpamPoolPublicIpSource : IEquatable<IpamPoolPublicIpSource>
    {
        private readonly string _value;

        private IpamPoolPublicIpSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpamPoolPublicIpSource Byoip { get; } = new IpamPoolPublicIpSource("byoip");
        public static IpamPoolPublicIpSource Amazon { get; } = new IpamPoolPublicIpSource("amazon");

        public static bool operator ==(IpamPoolPublicIpSource left, IpamPoolPublicIpSource right) => left.Equals(right);
        public static bool operator !=(IpamPoolPublicIpSource left, IpamPoolPublicIpSource right) => !left.Equals(right);

        public static explicit operator string(IpamPoolPublicIpSource value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpamPoolPublicIpSource other && Equals(other);
        public bool Equals(IpamPoolPublicIpSource other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The state of this pool. This can be one of the following values: "create-in-progress", "create-complete", "modify-in-progress", "modify-complete", "delete-in-progress", or "delete-complete"
    /// </summary>
    [EnumType]
    public readonly struct IpamPoolState : IEquatable<IpamPoolState>
    {
        private readonly string _value;

        private IpamPoolState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpamPoolState CreateInProgress { get; } = new IpamPoolState("create-in-progress");
        public static IpamPoolState CreateComplete { get; } = new IpamPoolState("create-complete");
        public static IpamPoolState ModifyInProgress { get; } = new IpamPoolState("modify-in-progress");
        public static IpamPoolState ModifyComplete { get; } = new IpamPoolState("modify-complete");
        public static IpamPoolState DeleteInProgress { get; } = new IpamPoolState("delete-in-progress");
        public static IpamPoolState DeleteComplete { get; } = new IpamPoolState("delete-complete");

        public static bool operator ==(IpamPoolState left, IpamPoolState right) => left.Equals(right);
        public static bool operator !=(IpamPoolState left, IpamPoolState right) => !left.Equals(right);

        public static explicit operator string(IpamPoolState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpamPoolState other && Equals(other);
        public bool Equals(IpamPoolState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Determines whether this scope contains publicly routable space or space for a private network
    /// </summary>
    [EnumType]
    public readonly struct IpamScopeType : IEquatable<IpamScopeType>
    {
        private readonly string _value;

        private IpamScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpamScopeType Public { get; } = new IpamScopeType("public");
        public static IpamScopeType Private { get; } = new IpamScopeType("private");

        public static bool operator ==(IpamScopeType left, IpamScopeType right) => left.Equals(right);
        public static bool operator !=(IpamScopeType left, IpamScopeType right) => !left.Equals(right);

        public static explicit operator string(IpamScopeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpamScopeType other && Equals(other);
        public bool Equals(IpamScopeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tier of the IPAM.
    /// </summary>
    [EnumType]
    public readonly struct IpamTier : IEquatable<IpamTier>
    {
        private readonly string _value;

        private IpamTier(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IpamTier Free { get; } = new IpamTier("free");
        public static IpamTier Advanced { get; } = new IpamTier("advanced");

        public static bool operator ==(IpamTier left, IpamTier right) => left.Equals(right);
        public static bool operator !=(IpamTier left, IpamTier right) => !left.Equals(right);

        public static explicit operator string(IpamTier value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IpamTier other && Equals(other);
        public bool Equals(IpamTier other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The format of the private key
    /// </summary>
    [EnumType]
    public readonly struct KeyPairKeyFormat : IEquatable<KeyPairKeyFormat>
    {
        private readonly string _value;

        private KeyPairKeyFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyPairKeyFormat Pem { get; } = new KeyPairKeyFormat("pem");
        public static KeyPairKeyFormat Ppk { get; } = new KeyPairKeyFormat("ppk");

        public static bool operator ==(KeyPairKeyFormat left, KeyPairKeyFormat right) => left.Equals(right);
        public static bool operator !=(KeyPairKeyFormat left, KeyPairKeyFormat right) => !left.Equals(right);

        public static explicit operator string(KeyPairKeyFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyPairKeyFormat other && Equals(other);
        public bool Equals(KeyPairKeyFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The crypto-system used to generate a key pair.
    /// </summary>
    [EnumType]
    public readonly struct KeyPairKeyType : IEquatable<KeyPairKeyType>
    {
        private readonly string _value;

        private KeyPairKeyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyPairKeyType Rsa { get; } = new KeyPairKeyType("rsa");
        public static KeyPairKeyType Ed25519 { get; } = new KeyPairKeyType("ed25519");

        public static bool operator ==(KeyPairKeyType left, KeyPairKeyType right) => left.Equals(right);
        public static bool operator !=(KeyPairKeyType left, KeyPairKeyType right) => !left.Equals(right);

        public static explicit operator string(KeyPairKeyType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyPairKeyType other && Equals(other);
        public bool Equals(KeyPairKeyType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only.
    /// </summary>
    [EnumType]
    public readonly struct LaunchTemplateCpuOptionsAmdSevSnp : IEquatable<LaunchTemplateCpuOptionsAmdSevSnp>
    {
        private readonly string _value;

        private LaunchTemplateCpuOptionsAmdSevSnp(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LaunchTemplateCpuOptionsAmdSevSnp Enabled { get; } = new LaunchTemplateCpuOptionsAmdSevSnp("enabled");
        public static LaunchTemplateCpuOptionsAmdSevSnp Disabled { get; } = new LaunchTemplateCpuOptionsAmdSevSnp("disabled");

        public static bool operator ==(LaunchTemplateCpuOptionsAmdSevSnp left, LaunchTemplateCpuOptionsAmdSevSnp right) => left.Equals(right);
        public static bool operator !=(LaunchTemplateCpuOptionsAmdSevSnp left, LaunchTemplateCpuOptionsAmdSevSnp right) => !left.Equals(right);

        public static explicit operator string(LaunchTemplateCpuOptionsAmdSevSnp value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LaunchTemplateCpuOptionsAmdSevSnp other && Equals(other);
        public bool Equals(LaunchTemplateCpuOptionsAmdSevSnp other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkInsightsAccessScopeAnalysisFindingsFound : IEquatable<NetworkInsightsAccessScopeAnalysisFindingsFound>
    {
        private readonly string _value;

        private NetworkInsightsAccessScopeAnalysisFindingsFound(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkInsightsAccessScopeAnalysisFindingsFound True { get; } = new NetworkInsightsAccessScopeAnalysisFindingsFound("true");
        public static NetworkInsightsAccessScopeAnalysisFindingsFound False { get; } = new NetworkInsightsAccessScopeAnalysisFindingsFound("false");
        public static NetworkInsightsAccessScopeAnalysisFindingsFound Unknown { get; } = new NetworkInsightsAccessScopeAnalysisFindingsFound("unknown");

        public static bool operator ==(NetworkInsightsAccessScopeAnalysisFindingsFound left, NetworkInsightsAccessScopeAnalysisFindingsFound right) => left.Equals(right);
        public static bool operator !=(NetworkInsightsAccessScopeAnalysisFindingsFound left, NetworkInsightsAccessScopeAnalysisFindingsFound right) => !left.Equals(right);

        public static explicit operator string(NetworkInsightsAccessScopeAnalysisFindingsFound value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInsightsAccessScopeAnalysisFindingsFound other && Equals(other);
        public bool Equals(NetworkInsightsAccessScopeAnalysisFindingsFound other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkInsightsAccessScopeAnalysisStatus : IEquatable<NetworkInsightsAccessScopeAnalysisStatus>
    {
        private readonly string _value;

        private NetworkInsightsAccessScopeAnalysisStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkInsightsAccessScopeAnalysisStatus Running { get; } = new NetworkInsightsAccessScopeAnalysisStatus("running");
        public static NetworkInsightsAccessScopeAnalysisStatus Failed { get; } = new NetworkInsightsAccessScopeAnalysisStatus("failed");
        public static NetworkInsightsAccessScopeAnalysisStatus Succeeded { get; } = new NetworkInsightsAccessScopeAnalysisStatus("succeeded");

        public static bool operator ==(NetworkInsightsAccessScopeAnalysisStatus left, NetworkInsightsAccessScopeAnalysisStatus right) => left.Equals(right);
        public static bool operator !=(NetworkInsightsAccessScopeAnalysisStatus left, NetworkInsightsAccessScopeAnalysisStatus right) => !left.Equals(right);

        public static explicit operator string(NetworkInsightsAccessScopeAnalysisStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInsightsAccessScopeAnalysisStatus other && Equals(other);
        public bool Equals(NetworkInsightsAccessScopeAnalysisStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkInsightsAccessScopeProtocol : IEquatable<NetworkInsightsAccessScopeProtocol>
    {
        private readonly string _value;

        private NetworkInsightsAccessScopeProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkInsightsAccessScopeProtocol Tcp { get; } = new NetworkInsightsAccessScopeProtocol("tcp");
        public static NetworkInsightsAccessScopeProtocol Udp { get; } = new NetworkInsightsAccessScopeProtocol("udp");

        public static bool operator ==(NetworkInsightsAccessScopeProtocol left, NetworkInsightsAccessScopeProtocol right) => left.Equals(right);
        public static bool operator !=(NetworkInsightsAccessScopeProtocol left, NetworkInsightsAccessScopeProtocol right) => !left.Equals(right);

        public static explicit operator string(NetworkInsightsAccessScopeProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInsightsAccessScopeProtocol other && Equals(other);
        public bool Equals(NetworkInsightsAccessScopeProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkInsightsAnalysisStatus : IEquatable<NetworkInsightsAnalysisStatus>
    {
        private readonly string _value;

        private NetworkInsightsAnalysisStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkInsightsAnalysisStatus Running { get; } = new NetworkInsightsAnalysisStatus("running");
        public static NetworkInsightsAnalysisStatus Failed { get; } = new NetworkInsightsAnalysisStatus("failed");
        public static NetworkInsightsAnalysisStatus Succeeded { get; } = new NetworkInsightsAnalysisStatus("succeeded");

        public static bool operator ==(NetworkInsightsAnalysisStatus left, NetworkInsightsAnalysisStatus right) => left.Equals(right);
        public static bool operator !=(NetworkInsightsAnalysisStatus left, NetworkInsightsAnalysisStatus right) => !left.Equals(right);

        public static explicit operator string(NetworkInsightsAnalysisStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInsightsAnalysisStatus other && Equals(other);
        public bool Equals(NetworkInsightsAnalysisStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct NetworkInsightsPathProtocol : IEquatable<NetworkInsightsPathProtocol>
    {
        private readonly string _value;

        private NetworkInsightsPathProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static NetworkInsightsPathProtocol Tcp { get; } = new NetworkInsightsPathProtocol("tcp");
        public static NetworkInsightsPathProtocol Udp { get; } = new NetworkInsightsPathProtocol("udp");

        public static bool operator ==(NetworkInsightsPathProtocol left, NetworkInsightsPathProtocol right) => left.Equals(right);
        public static bool operator !=(NetworkInsightsPathProtocol left, NetworkInsightsPathProtocol right) => !left.Equals(right);

        public static explicit operator string(NetworkInsightsPathProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is NetworkInsightsPathProtocol other && Equals(other);
        public bool Equals(NetworkInsightsPathProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Ip Version of Prefix List.
    /// </summary>
    [EnumType]
    public readonly struct PrefixListAddressFamily : IEquatable<PrefixListAddressFamily>
    {
        private readonly string _value;

        private PrefixListAddressFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrefixListAddressFamily IPv4 { get; } = new PrefixListAddressFamily("IPv4");
        public static PrefixListAddressFamily IPv6 { get; } = new PrefixListAddressFamily("IPv6");

        public static bool operator ==(PrefixListAddressFamily left, PrefixListAddressFamily right) => left.Equals(right);
        public static bool operator !=(PrefixListAddressFamily left, PrefixListAddressFamily right) => !left.Equals(right);

        public static explicit operator string(PrefixListAddressFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrefixListAddressFamily other && Equals(other);
        public bool Equals(PrefixListAddressFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetEbsBlockDeviceVolumeType : IEquatable<SpotFleetEbsBlockDeviceVolumeType>
    {
        private readonly string _value;

        private SpotFleetEbsBlockDeviceVolumeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetEbsBlockDeviceVolumeType Gp2 { get; } = new SpotFleetEbsBlockDeviceVolumeType("gp2");
        public static SpotFleetEbsBlockDeviceVolumeType Gp3 { get; } = new SpotFleetEbsBlockDeviceVolumeType("gp3");
        public static SpotFleetEbsBlockDeviceVolumeType Io1 { get; } = new SpotFleetEbsBlockDeviceVolumeType("io1");
        public static SpotFleetEbsBlockDeviceVolumeType Io2 { get; } = new SpotFleetEbsBlockDeviceVolumeType("io2");
        public static SpotFleetEbsBlockDeviceVolumeType Sc1 { get; } = new SpotFleetEbsBlockDeviceVolumeType("sc1");
        public static SpotFleetEbsBlockDeviceVolumeType St1 { get; } = new SpotFleetEbsBlockDeviceVolumeType("st1");
        public static SpotFleetEbsBlockDeviceVolumeType Standard { get; } = new SpotFleetEbsBlockDeviceVolumeType("standard");

        public static bool operator ==(SpotFleetEbsBlockDeviceVolumeType left, SpotFleetEbsBlockDeviceVolumeType right) => left.Equals(right);
        public static bool operator !=(SpotFleetEbsBlockDeviceVolumeType left, SpotFleetEbsBlockDeviceVolumeType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetEbsBlockDeviceVolumeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetEbsBlockDeviceVolumeType other && Equals(other);
        public bool Equals(SpotFleetEbsBlockDeviceVolumeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem : IEquatable<SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem Nvidia { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem("nvidia");
        public static SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem Amd { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem("amd");
        public static SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem AmazonWebServices { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem("amazon-web-services");
        public static SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem Xilinx { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem("xilinx");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem left, SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem left, SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestAcceleratorNamesItem : IEquatable<SpotFleetInstanceRequirementsRequestAcceleratorNamesItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestAcceleratorNamesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem A100 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("a100");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem V100 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("v100");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem K80 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("k80");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem T4 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("t4");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem M60 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("m60");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem RadeonProV520 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("radeon-pro-v520");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem Vu9p { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("vu9p");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem Inferentia { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("inferentia");
        public static SpotFleetInstanceRequirementsRequestAcceleratorNamesItem K520 { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorNamesItem("k520");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestAcceleratorNamesItem left, SpotFleetInstanceRequirementsRequestAcceleratorNamesItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestAcceleratorNamesItem left, SpotFleetInstanceRequirementsRequestAcceleratorNamesItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestAcceleratorNamesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestAcceleratorNamesItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestAcceleratorNamesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestAcceleratorTypesItem : IEquatable<SpotFleetInstanceRequirementsRequestAcceleratorTypesItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestAcceleratorTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestAcceleratorTypesItem Gpu { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorTypesItem("gpu");
        public static SpotFleetInstanceRequirementsRequestAcceleratorTypesItem Fpga { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorTypesItem("fpga");
        public static SpotFleetInstanceRequirementsRequestAcceleratorTypesItem Inference { get; } = new SpotFleetInstanceRequirementsRequestAcceleratorTypesItem("inference");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestAcceleratorTypesItem left, SpotFleetInstanceRequirementsRequestAcceleratorTypesItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestAcceleratorTypesItem left, SpotFleetInstanceRequirementsRequestAcceleratorTypesItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestAcceleratorTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestAcceleratorTypesItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestAcceleratorTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestBareMetal : IEquatable<SpotFleetInstanceRequirementsRequestBareMetal>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestBareMetal(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestBareMetal Included { get; } = new SpotFleetInstanceRequirementsRequestBareMetal("included");
        public static SpotFleetInstanceRequirementsRequestBareMetal Required { get; } = new SpotFleetInstanceRequirementsRequestBareMetal("required");
        public static SpotFleetInstanceRequirementsRequestBareMetal Excluded { get; } = new SpotFleetInstanceRequirementsRequestBareMetal("excluded");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestBareMetal left, SpotFleetInstanceRequirementsRequestBareMetal right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestBareMetal left, SpotFleetInstanceRequirementsRequestBareMetal right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestBareMetal value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestBareMetal other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestBareMetal other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestBurstablePerformance : IEquatable<SpotFleetInstanceRequirementsRequestBurstablePerformance>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestBurstablePerformance(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestBurstablePerformance Included { get; } = new SpotFleetInstanceRequirementsRequestBurstablePerformance("included");
        public static SpotFleetInstanceRequirementsRequestBurstablePerformance Required { get; } = new SpotFleetInstanceRequirementsRequestBurstablePerformance("required");
        public static SpotFleetInstanceRequirementsRequestBurstablePerformance Excluded { get; } = new SpotFleetInstanceRequirementsRequestBurstablePerformance("excluded");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestBurstablePerformance left, SpotFleetInstanceRequirementsRequestBurstablePerformance right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestBurstablePerformance left, SpotFleetInstanceRequirementsRequestBurstablePerformance right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestBurstablePerformance value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestBurstablePerformance other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestBurstablePerformance other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestCpuManufacturersItem : IEquatable<SpotFleetInstanceRequirementsRequestCpuManufacturersItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestCpuManufacturersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestCpuManufacturersItem Intel { get; } = new SpotFleetInstanceRequirementsRequestCpuManufacturersItem("intel");
        public static SpotFleetInstanceRequirementsRequestCpuManufacturersItem Amd { get; } = new SpotFleetInstanceRequirementsRequestCpuManufacturersItem("amd");
        public static SpotFleetInstanceRequirementsRequestCpuManufacturersItem AmazonWebServices { get; } = new SpotFleetInstanceRequirementsRequestCpuManufacturersItem("amazon-web-services");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestCpuManufacturersItem left, SpotFleetInstanceRequirementsRequestCpuManufacturersItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestCpuManufacturersItem left, SpotFleetInstanceRequirementsRequestCpuManufacturersItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestCpuManufacturersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestCpuManufacturersItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestCpuManufacturersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestInstanceGenerationsItem : IEquatable<SpotFleetInstanceRequirementsRequestInstanceGenerationsItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestInstanceGenerationsItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestInstanceGenerationsItem Current { get; } = new SpotFleetInstanceRequirementsRequestInstanceGenerationsItem("current");
        public static SpotFleetInstanceRequirementsRequestInstanceGenerationsItem Previous { get; } = new SpotFleetInstanceRequirementsRequestInstanceGenerationsItem("previous");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestInstanceGenerationsItem left, SpotFleetInstanceRequirementsRequestInstanceGenerationsItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestInstanceGenerationsItem left, SpotFleetInstanceRequirementsRequestInstanceGenerationsItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestInstanceGenerationsItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestInstanceGenerationsItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestInstanceGenerationsItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestLocalStorage : IEquatable<SpotFleetInstanceRequirementsRequestLocalStorage>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestLocalStorage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestLocalStorage Included { get; } = new SpotFleetInstanceRequirementsRequestLocalStorage("included");
        public static SpotFleetInstanceRequirementsRequestLocalStorage Required { get; } = new SpotFleetInstanceRequirementsRequestLocalStorage("required");
        public static SpotFleetInstanceRequirementsRequestLocalStorage Excluded { get; } = new SpotFleetInstanceRequirementsRequestLocalStorage("excluded");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestLocalStorage left, SpotFleetInstanceRequirementsRequestLocalStorage right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestLocalStorage left, SpotFleetInstanceRequirementsRequestLocalStorage right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestLocalStorage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestLocalStorage other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestLocalStorage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetInstanceRequirementsRequestLocalStorageTypesItem : IEquatable<SpotFleetInstanceRequirementsRequestLocalStorageTypesItem>
    {
        private readonly string _value;

        private SpotFleetInstanceRequirementsRequestLocalStorageTypesItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetInstanceRequirementsRequestLocalStorageTypesItem Hdd { get; } = new SpotFleetInstanceRequirementsRequestLocalStorageTypesItem("hdd");
        public static SpotFleetInstanceRequirementsRequestLocalStorageTypesItem Ssd { get; } = new SpotFleetInstanceRequirementsRequestLocalStorageTypesItem("ssd");

        public static bool operator ==(SpotFleetInstanceRequirementsRequestLocalStorageTypesItem left, SpotFleetInstanceRequirementsRequestLocalStorageTypesItem right) => left.Equals(right);
        public static bool operator !=(SpotFleetInstanceRequirementsRequestLocalStorageTypesItem left, SpotFleetInstanceRequirementsRequestLocalStorageTypesItem right) => !left.Equals(right);

        public static explicit operator string(SpotFleetInstanceRequirementsRequestLocalStorageTypesItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetInstanceRequirementsRequestLocalStorageTypesItem other && Equals(other);
        public bool Equals(SpotFleetInstanceRequirementsRequestLocalStorageTypesItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataAllocationStrategy : IEquatable<SpotFleetRequestConfigDataAllocationStrategy>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataAllocationStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataAllocationStrategy CapacityOptimized { get; } = new SpotFleetRequestConfigDataAllocationStrategy("capacityOptimized");
        public static SpotFleetRequestConfigDataAllocationStrategy CapacityOptimizedPrioritized { get; } = new SpotFleetRequestConfigDataAllocationStrategy("capacityOptimizedPrioritized");
        public static SpotFleetRequestConfigDataAllocationStrategy Diversified { get; } = new SpotFleetRequestConfigDataAllocationStrategy("diversified");
        public static SpotFleetRequestConfigDataAllocationStrategy LowestPrice { get; } = new SpotFleetRequestConfigDataAllocationStrategy("lowestPrice");
        public static SpotFleetRequestConfigDataAllocationStrategy PriceCapacityOptimized { get; } = new SpotFleetRequestConfigDataAllocationStrategy("priceCapacityOptimized");

        public static bool operator ==(SpotFleetRequestConfigDataAllocationStrategy left, SpotFleetRequestConfigDataAllocationStrategy right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataAllocationStrategy left, SpotFleetRequestConfigDataAllocationStrategy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataAllocationStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataAllocationStrategy other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataAllocationStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataExcessCapacityTerminationPolicy : IEquatable<SpotFleetRequestConfigDataExcessCapacityTerminationPolicy>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataExcessCapacityTerminationPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataExcessCapacityTerminationPolicy Default { get; } = new SpotFleetRequestConfigDataExcessCapacityTerminationPolicy("Default");
        public static SpotFleetRequestConfigDataExcessCapacityTerminationPolicy NoTermination { get; } = new SpotFleetRequestConfigDataExcessCapacityTerminationPolicy("NoTermination");

        public static bool operator ==(SpotFleetRequestConfigDataExcessCapacityTerminationPolicy left, SpotFleetRequestConfigDataExcessCapacityTerminationPolicy right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataExcessCapacityTerminationPolicy left, SpotFleetRequestConfigDataExcessCapacityTerminationPolicy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataExcessCapacityTerminationPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataExcessCapacityTerminationPolicy other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataExcessCapacityTerminationPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataInstanceInterruptionBehavior : IEquatable<SpotFleetRequestConfigDataInstanceInterruptionBehavior>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataInstanceInterruptionBehavior(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataInstanceInterruptionBehavior Hibernate { get; } = new SpotFleetRequestConfigDataInstanceInterruptionBehavior("hibernate");
        public static SpotFleetRequestConfigDataInstanceInterruptionBehavior Stop { get; } = new SpotFleetRequestConfigDataInstanceInterruptionBehavior("stop");
        public static SpotFleetRequestConfigDataInstanceInterruptionBehavior Terminate { get; } = new SpotFleetRequestConfigDataInstanceInterruptionBehavior("terminate");

        public static bool operator ==(SpotFleetRequestConfigDataInstanceInterruptionBehavior left, SpotFleetRequestConfigDataInstanceInterruptionBehavior right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataInstanceInterruptionBehavior left, SpotFleetRequestConfigDataInstanceInterruptionBehavior right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataInstanceInterruptionBehavior value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataInstanceInterruptionBehavior other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataInstanceInterruptionBehavior other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataTargetCapacityUnitType : IEquatable<SpotFleetRequestConfigDataTargetCapacityUnitType>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataTargetCapacityUnitType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataTargetCapacityUnitType Vcpu { get; } = new SpotFleetRequestConfigDataTargetCapacityUnitType("vcpu");
        public static SpotFleetRequestConfigDataTargetCapacityUnitType MemoryMib { get; } = new SpotFleetRequestConfigDataTargetCapacityUnitType("memory-mib");
        public static SpotFleetRequestConfigDataTargetCapacityUnitType Units { get; } = new SpotFleetRequestConfigDataTargetCapacityUnitType("units");

        public static bool operator ==(SpotFleetRequestConfigDataTargetCapacityUnitType left, SpotFleetRequestConfigDataTargetCapacityUnitType right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataTargetCapacityUnitType left, SpotFleetRequestConfigDataTargetCapacityUnitType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataTargetCapacityUnitType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataTargetCapacityUnitType other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataTargetCapacityUnitType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetRequestConfigDataType : IEquatable<SpotFleetRequestConfigDataType>
    {
        private readonly string _value;

        private SpotFleetRequestConfigDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetRequestConfigDataType Maintain { get; } = new SpotFleetRequestConfigDataType("maintain");
        public static SpotFleetRequestConfigDataType Request { get; } = new SpotFleetRequestConfigDataType("request");

        public static bool operator ==(SpotFleetRequestConfigDataType left, SpotFleetRequestConfigDataType right) => left.Equals(right);
        public static bool operator !=(SpotFleetRequestConfigDataType left, SpotFleetRequestConfigDataType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetRequestConfigDataType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetRequestConfigDataType other && Equals(other);
        public bool Equals(SpotFleetRequestConfigDataType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotCapacityRebalanceReplacementStrategy : IEquatable<SpotFleetSpotCapacityRebalanceReplacementStrategy>
    {
        private readonly string _value;

        private SpotFleetSpotCapacityRebalanceReplacementStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotCapacityRebalanceReplacementStrategy Launch { get; } = new SpotFleetSpotCapacityRebalanceReplacementStrategy("launch");
        public static SpotFleetSpotCapacityRebalanceReplacementStrategy LaunchBeforeTerminate { get; } = new SpotFleetSpotCapacityRebalanceReplacementStrategy("launch-before-terminate");

        public static bool operator ==(SpotFleetSpotCapacityRebalanceReplacementStrategy left, SpotFleetSpotCapacityRebalanceReplacementStrategy right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotCapacityRebalanceReplacementStrategy left, SpotFleetSpotCapacityRebalanceReplacementStrategy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotCapacityRebalanceReplacementStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotCapacityRebalanceReplacementStrategy other && Equals(other);
        public bool Equals(SpotFleetSpotCapacityRebalanceReplacementStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetSpotPlacementTenancy : IEquatable<SpotFleetSpotPlacementTenancy>
    {
        private readonly string _value;

        private SpotFleetSpotPlacementTenancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetSpotPlacementTenancy Dedicated { get; } = new SpotFleetSpotPlacementTenancy("dedicated");
        public static SpotFleetSpotPlacementTenancy Default { get; } = new SpotFleetSpotPlacementTenancy("default");
        public static SpotFleetSpotPlacementTenancy Host { get; } = new SpotFleetSpotPlacementTenancy("host");

        public static bool operator ==(SpotFleetSpotPlacementTenancy left, SpotFleetSpotPlacementTenancy right) => left.Equals(right);
        public static bool operator !=(SpotFleetSpotPlacementTenancy left, SpotFleetSpotPlacementTenancy right) => !left.Equals(right);

        public static explicit operator string(SpotFleetSpotPlacementTenancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetSpotPlacementTenancy other && Equals(other);
        public bool Equals(SpotFleetSpotPlacementTenancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SpotFleetTagSpecificationResourceType : IEquatable<SpotFleetTagSpecificationResourceType>
    {
        private readonly string _value;

        private SpotFleetTagSpecificationResourceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SpotFleetTagSpecificationResourceType ClientVpnEndpoint { get; } = new SpotFleetTagSpecificationResourceType("client-vpn-endpoint");
        public static SpotFleetTagSpecificationResourceType CustomerGateway { get; } = new SpotFleetTagSpecificationResourceType("customer-gateway");
        public static SpotFleetTagSpecificationResourceType DedicatedHost { get; } = new SpotFleetTagSpecificationResourceType("dedicated-host");
        public static SpotFleetTagSpecificationResourceType DhcpOptions { get; } = new SpotFleetTagSpecificationResourceType("dhcp-options");
        public static SpotFleetTagSpecificationResourceType EgressOnlyInternetGateway { get; } = new SpotFleetTagSpecificationResourceType("egress-only-internet-gateway");
        public static SpotFleetTagSpecificationResourceType ElasticGpu { get; } = new SpotFleetTagSpecificationResourceType("elastic-gpu");
        public static SpotFleetTagSpecificationResourceType ElasticIp { get; } = new SpotFleetTagSpecificationResourceType("elastic-ip");
        public static SpotFleetTagSpecificationResourceType ExportImageTask { get; } = new SpotFleetTagSpecificationResourceType("export-image-task");
        public static SpotFleetTagSpecificationResourceType ExportInstanceTask { get; } = new SpotFleetTagSpecificationResourceType("export-instance-task");
        public static SpotFleetTagSpecificationResourceType Fleet { get; } = new SpotFleetTagSpecificationResourceType("fleet");
        public static SpotFleetTagSpecificationResourceType FpgaImage { get; } = new SpotFleetTagSpecificationResourceType("fpga-image");
        public static SpotFleetTagSpecificationResourceType HostReservation { get; } = new SpotFleetTagSpecificationResourceType("host-reservation");
        public static SpotFleetTagSpecificationResourceType Image { get; } = new SpotFleetTagSpecificationResourceType("image");
        public static SpotFleetTagSpecificationResourceType ImportImageTask { get; } = new SpotFleetTagSpecificationResourceType("import-image-task");
        public static SpotFleetTagSpecificationResourceType ImportSnapshotTask { get; } = new SpotFleetTagSpecificationResourceType("import-snapshot-task");
        public static SpotFleetTagSpecificationResourceType Instance { get; } = new SpotFleetTagSpecificationResourceType("instance");
        public static SpotFleetTagSpecificationResourceType InternetGateway { get; } = new SpotFleetTagSpecificationResourceType("internet-gateway");
        public static SpotFleetTagSpecificationResourceType KeyPair { get; } = new SpotFleetTagSpecificationResourceType("key-pair");
        public static SpotFleetTagSpecificationResourceType LaunchTemplate { get; } = new SpotFleetTagSpecificationResourceType("launch-template");
        public static SpotFleetTagSpecificationResourceType LocalGatewayRouteTableVpcAssociation { get; } = new SpotFleetTagSpecificationResourceType("local-gateway-route-table-vpc-association");
        public static SpotFleetTagSpecificationResourceType Natgateway { get; } = new SpotFleetTagSpecificationResourceType("natgateway");
        public static SpotFleetTagSpecificationResourceType NetworkAcl { get; } = new SpotFleetTagSpecificationResourceType("network-acl");
        public static SpotFleetTagSpecificationResourceType NetworkInsightsAnalysis { get; } = new SpotFleetTagSpecificationResourceType("network-insights-analysis");
        public static SpotFleetTagSpecificationResourceType NetworkInsightsPath { get; } = new SpotFleetTagSpecificationResourceType("network-insights-path");
        public static SpotFleetTagSpecificationResourceType NetworkInterface { get; } = new SpotFleetTagSpecificationResourceType("network-interface");
        public static SpotFleetTagSpecificationResourceType PlacementGroup { get; } = new SpotFleetTagSpecificationResourceType("placement-group");
        public static SpotFleetTagSpecificationResourceType ReservedInstances { get; } = new SpotFleetTagSpecificationResourceType("reserved-instances");
        public static SpotFleetTagSpecificationResourceType RouteTable { get; } = new SpotFleetTagSpecificationResourceType("route-table");
        public static SpotFleetTagSpecificationResourceType SecurityGroup { get; } = new SpotFleetTagSpecificationResourceType("security-group");
        public static SpotFleetTagSpecificationResourceType Snapshot { get; } = new SpotFleetTagSpecificationResourceType("snapshot");
        public static SpotFleetTagSpecificationResourceType SpotFleetRequest { get; } = new SpotFleetTagSpecificationResourceType("spot-fleet-request");
        public static SpotFleetTagSpecificationResourceType SpotInstancesRequest { get; } = new SpotFleetTagSpecificationResourceType("spot-instances-request");
        public static SpotFleetTagSpecificationResourceType Subnet { get; } = new SpotFleetTagSpecificationResourceType("subnet");
        public static SpotFleetTagSpecificationResourceType TrafficMirrorFilter { get; } = new SpotFleetTagSpecificationResourceType("traffic-mirror-filter");
        public static SpotFleetTagSpecificationResourceType TrafficMirrorSession { get; } = new SpotFleetTagSpecificationResourceType("traffic-mirror-session");
        public static SpotFleetTagSpecificationResourceType TrafficMirrorTarget { get; } = new SpotFleetTagSpecificationResourceType("traffic-mirror-target");
        public static SpotFleetTagSpecificationResourceType TransitGateway { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway");
        public static SpotFleetTagSpecificationResourceType TransitGatewayAttachment { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway-attachment");
        public static SpotFleetTagSpecificationResourceType TransitGatewayConnectPeer { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway-connect-peer");
        public static SpotFleetTagSpecificationResourceType TransitGatewayMulticastDomain { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway-multicast-domain");
        public static SpotFleetTagSpecificationResourceType TransitGatewayRouteTable { get; } = new SpotFleetTagSpecificationResourceType("transit-gateway-route-table");
        public static SpotFleetTagSpecificationResourceType Volume { get; } = new SpotFleetTagSpecificationResourceType("volume");
        public static SpotFleetTagSpecificationResourceType Vpc { get; } = new SpotFleetTagSpecificationResourceType("vpc");
        public static SpotFleetTagSpecificationResourceType VpcFlowLog { get; } = new SpotFleetTagSpecificationResourceType("vpc-flow-log");
        public static SpotFleetTagSpecificationResourceType VpcPeeringConnection { get; } = new SpotFleetTagSpecificationResourceType("vpc-peering-connection");
        public static SpotFleetTagSpecificationResourceType VpnConnection { get; } = new SpotFleetTagSpecificationResourceType("vpn-connection");
        public static SpotFleetTagSpecificationResourceType VpnGateway { get; } = new SpotFleetTagSpecificationResourceType("vpn-gateway");

        public static bool operator ==(SpotFleetTagSpecificationResourceType left, SpotFleetTagSpecificationResourceType right) => left.Equals(right);
        public static bool operator !=(SpotFleetTagSpecificationResourceType left, SpotFleetTagSpecificationResourceType right) => !left.Equals(right);

        public static explicit operator string(SpotFleetTagSpecificationResourceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SpotFleetTagSpecificationResourceType other && Equals(other);
        public bool Equals(SpotFleetTagSpecificationResourceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct VpcEndpointType : IEquatable<VpcEndpointType>
    {
        private readonly string _value;

        private VpcEndpointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VpcEndpointType Interface { get; } = new VpcEndpointType("Interface");
        public static VpcEndpointType Gateway { get; } = new VpcEndpointType("Gateway");
        public static VpcEndpointType GatewayLoadBalancer { get; } = new VpcEndpointType("GatewayLoadBalancer");

        public static bool operator ==(VpcEndpointType left, VpcEndpointType right) => left.Equals(right);
        public static bool operator !=(VpcEndpointType left, VpcEndpointType right) => !left.Equals(right);

        public static explicit operator string(VpcEndpointType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VpcEndpointType other && Equals(other);
        public bool Equals(VpcEndpointType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
