// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2.Outputs
{

    [OutputType]
    public sealed class NetworkInsightsAnalysisTransitGatewayRouteTableRoute
    {
        /// <summary>
        /// The ID of the route attachment.
        /// </summary>
        public readonly string? AttachmentId;
        /// <summary>
        /// The CIDR block used for destination matches.
        /// </summary>
        public readonly string? DestinationCidr;
        /// <summary>
        /// The ID of the prefix list.
        /// </summary>
        public readonly string? PrefixListId;
        /// <summary>
        /// The ID of the resource for the route attachment.
        /// </summary>
        public readonly string? ResourceId;
        /// <summary>
        /// The resource type for the route attachment.
        /// </summary>
        public readonly string? ResourceType;
        /// <summary>
        /// The route origin. The following are the possible values:
        /// 
        /// - static
        /// - propagated
        /// </summary>
        public readonly string? RouteOrigin;
        /// <summary>
        /// The state of the route.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private NetworkInsightsAnalysisTransitGatewayRouteTableRoute(
            string? attachmentId,

            string? destinationCidr,

            string? prefixListId,

            string? resourceId,

            string? resourceType,

            string? routeOrigin,

            string? state)
        {
            AttachmentId = attachmentId;
            DestinationCidr = destinationCidr;
            PrefixListId = prefixListId;
            ResourceId = resourceId;
            ResourceType = resourceType;
            RouteOrigin = routeOrigin;
            State = state;
        }
    }
}
