// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2.Outputs
{

    /// <summary>
    /// The tunnel options for a single VPN tunnel.
    /// </summary>
    [OutputType]
    public sealed class VpnConnectionVpnTunnelOptionsSpecification
    {
        /// <summary>
        /// The action to take after DPD timeout occurs. Specify ``restart`` to restart the IKE initiation. Specify ``clear`` to end the IKE session.
        ///  Valid Values: ``clear`` | ``none`` | ``restart`` 
        ///  Default: ``clear``
        /// </summary>
        public readonly Pulumi.AwsNative.Ec2.VpnConnectionVpnTunnelOptionsSpecificationDpdTimeoutAction? DpdTimeoutAction;
        /// <summary>
        /// The number of seconds after which a DPD timeout occurs.
        ///  Constraints: A value greater than or equal to 30.
        ///  Default: ``30``
        /// </summary>
        public readonly int? DpdTimeoutSeconds;
        /// <summary>
        /// Turn on or off tunnel endpoint lifecycle control feature.
        /// </summary>
        public readonly bool? EnableTunnelLifecycleControl;
        /// <summary>
        /// The IKE versions that are permitted for the VPN tunnel.
        ///  Valid values: ``ikev1`` | ``ikev2``
        /// </summary>
        public readonly ImmutableArray<Outputs.VpnConnectionIkeVersionsRequestListValue> IkeVersions;
        /// <summary>
        /// Options for logging VPN tunnel activity.
        /// </summary>
        public readonly Outputs.VpnConnectionVpnTunnelLogOptionsSpecification? LogOptions;
        /// <summary>
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.
        ///  Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``
        /// </summary>
        public readonly ImmutableArray<Outputs.VpnConnectionPhase1EncryptionAlgorithmsRequestListValue> Phase1EncryptionAlgorithms;
        /// <summary>
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.
        ///  Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``
        /// </summary>
        public readonly ImmutableArray<Outputs.VpnConnectionPhase1IntegrityAlgorithmsRequestListValue> Phase1IntegrityAlgorithms;
        /// <summary>
        /// The lifetime for phase 1 of the IKE negotiation, in seconds.
        ///  Constraints: A value between 900 and 28,800.
        ///  Default: ``28800``
        /// </summary>
        public readonly int? Phase1LifetimeSeconds;
        /// <summary>
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations.
        ///  Valid values: ``2`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``
        /// </summary>
        public readonly ImmutableArray<Outputs.VpnConnectionPhase1dhGroupNumbersRequestListValue> Phase1dhGroupNumbers;
        /// <summary>
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.
        ///  Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``
        /// </summary>
        public readonly ImmutableArray<Outputs.VpnConnectionPhase2EncryptionAlgorithmsRequestListValue> Phase2EncryptionAlgorithms;
        /// <summary>
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.
        ///  Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``
        /// </summary>
        public readonly ImmutableArray<Outputs.VpnConnectionPhase2IntegrityAlgorithmsRequestListValue> Phase2IntegrityAlgorithms;
        /// <summary>
        /// The lifetime for phase 2 of the IKE negotiation, in seconds.
        ///  Constraints: A value between 900 and 3,600. The value must be less than the value for ``Phase1LifetimeSeconds``.
        ///  Default: ``3600``
        /// </summary>
        public readonly int? Phase2LifetimeSeconds;
        /// <summary>
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations.
        ///  Valid values: ``2`` | ``5`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``
        /// </summary>
        public readonly ImmutableArray<Outputs.VpnConnectionPhase2dhGroupNumbersRequestListValue> Phase2dhGroupNumbers;
        /// <summary>
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway.
        ///  Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
        /// </summary>
        public readonly string? PreSharedKey;
        /// <summary>
        /// The percentage of the rekey window (determined by ``RekeyMarginTimeSeconds``) during which the rekey time is randomly selected.
        ///  Constraints: A value between 0 and 100.
        ///  Default: ``100``
        /// </summary>
        public readonly int? RekeyFuzzPercentage;
        /// <summary>
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for ``RekeyFuzzPercentage``.
        ///  Constraints: A value between 60 and half of ``Phase2LifetimeSeconds``.
        ///  Default: ``270``
        /// </summary>
        public readonly int? RekeyMarginTimeSeconds;
        /// <summary>
        /// The number of packets in an IKE replay window.
        ///  Constraints: A value between 64 and 2048.
        ///  Default: ``1024``
        /// </summary>
        public readonly int? ReplayWindowSize;
        /// <summary>
        /// The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify ``start`` for AWS to initiate the IKE negotiation.
        ///  Valid Values: ``add`` | ``start`` 
        ///  Default: ``add``
        /// </summary>
        public readonly Pulumi.AwsNative.Ec2.VpnConnectionVpnTunnelOptionsSpecificationStartupAction? StartupAction;
        /// <summary>
        /// The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. 
        ///  Constraints: A size /30 CIDR block from the ``169.254.0.0/16`` range. The following CIDR blocks are reserved and cannot be used:
        ///   +   ``169.254.0.0/30`` 
        ///   +   ``169.254.1.0/30`` 
        ///   +   ``169.254.2.0/30`` 
        ///   +   ``169.254.3.0/30`` 
        ///   +   ``169.254.4.0/30`` 
        ///   +   ``169.254.5.0/30`` 
        ///   +   ``169.254.169.252/30``
        /// </summary>
        public readonly string? TunnelInsideCidr;
        /// <summary>
        /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway.
        ///  Constraints: A size /126 CIDR block from the local ``fd00::/8`` range.
        /// </summary>
        public readonly string? TunnelInsideIpv6Cidr;

        [OutputConstructor]
        private VpnConnectionVpnTunnelOptionsSpecification(
            Pulumi.AwsNative.Ec2.VpnConnectionVpnTunnelOptionsSpecificationDpdTimeoutAction? dpdTimeoutAction,

            int? dpdTimeoutSeconds,

            bool? enableTunnelLifecycleControl,

            ImmutableArray<Outputs.VpnConnectionIkeVersionsRequestListValue> ikeVersions,

            Outputs.VpnConnectionVpnTunnelLogOptionsSpecification? logOptions,

            ImmutableArray<Outputs.VpnConnectionPhase1EncryptionAlgorithmsRequestListValue> phase1EncryptionAlgorithms,

            ImmutableArray<Outputs.VpnConnectionPhase1IntegrityAlgorithmsRequestListValue> phase1IntegrityAlgorithms,

            int? phase1LifetimeSeconds,

            ImmutableArray<Outputs.VpnConnectionPhase1dhGroupNumbersRequestListValue> phase1dhGroupNumbers,

            ImmutableArray<Outputs.VpnConnectionPhase2EncryptionAlgorithmsRequestListValue> phase2EncryptionAlgorithms,

            ImmutableArray<Outputs.VpnConnectionPhase2IntegrityAlgorithmsRequestListValue> phase2IntegrityAlgorithms,

            int? phase2LifetimeSeconds,

            ImmutableArray<Outputs.VpnConnectionPhase2dhGroupNumbersRequestListValue> phase2dhGroupNumbers,

            string? preSharedKey,

            int? rekeyFuzzPercentage,

            int? rekeyMarginTimeSeconds,

            int? replayWindowSize,

            Pulumi.AwsNative.Ec2.VpnConnectionVpnTunnelOptionsSpecificationStartupAction? startupAction,

            string? tunnelInsideCidr,

            string? tunnelInsideIpv6Cidr)
        {
            DpdTimeoutAction = dpdTimeoutAction;
            DpdTimeoutSeconds = dpdTimeoutSeconds;
            EnableTunnelLifecycleControl = enableTunnelLifecycleControl;
            IkeVersions = ikeVersions;
            LogOptions = logOptions;
            Phase1EncryptionAlgorithms = phase1EncryptionAlgorithms;
            Phase1IntegrityAlgorithms = phase1IntegrityAlgorithms;
            Phase1LifetimeSeconds = phase1LifetimeSeconds;
            Phase1dhGroupNumbers = phase1dhGroupNumbers;
            Phase2EncryptionAlgorithms = phase2EncryptionAlgorithms;
            Phase2IntegrityAlgorithms = phase2IntegrityAlgorithms;
            Phase2LifetimeSeconds = phase2LifetimeSeconds;
            Phase2dhGroupNumbers = phase2dhGroupNumbers;
            PreSharedKey = preSharedKey;
            RekeyFuzzPercentage = rekeyFuzzPercentage;
            RekeyMarginTimeSeconds = rekeyMarginTimeSeconds;
            ReplayWindowSize = replayWindowSize;
            StartupAction = startupAction;
            TunnelInsideCidr = tunnelInsideCidr;
            TunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr;
        }
    }
}
