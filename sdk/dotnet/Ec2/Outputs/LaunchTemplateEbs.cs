// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2.Outputs
{

    /// <summary>
    /// Parameters for a block device for an EBS volume in an Amazon EC2 launch template.
    ///   ``Ebs`` is a property of [AWS::EC2::LaunchTemplate BlockDeviceMapping](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping.html).
    /// </summary>
    [OutputType]
    public sealed class LaunchTemplateEbs
    {
        /// <summary>
        /// Indicates whether the EBS volume is deleted on instance termination.
        /// </summary>
        public readonly bool? DeleteOnTermination;
        /// <summary>
        /// Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
        /// </summary>
        public readonly bool? Encrypted;
        /// <summary>
        /// The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
        ///  The following are the supported values for each volume type:
        ///   +   ``gp3``: 3,000 - 16,000 IOPS
        ///   +   ``io1``: 100 - 64,000 IOPS
        ///   +   ``io2``: 100 - 256,000 IOPS
        ///   
        ///  For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). On other instances, you can achieve performance up to 32,000 IOPS.
        ///  This parameter is supported for ``io1``, ``io2``, and ``gp3`` volumes only.
        /// </summary>
        public readonly int? Iops;
        /// <summary>
        /// The ARN of the symmetric KMSlong (KMS) CMK used for encryption.
        /// </summary>
        public readonly string? KmsKeyId;
        /// <summary>
        /// The ID of the snapshot.
        /// </summary>
        public readonly string? SnapshotId;
        /// <summary>
        /// The throughput to provision for a ``gp3`` volume, with a maximum of 1,000 MiB/s.
        ///  Valid Range: Minimum value of 125. Maximum value of 1000.
        /// </summary>
        public readonly int? Throughput;
        /// <summary>
        /// The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type:
        ///   +   ``gp2`` and ``gp3``: 1 - 16,384 GiB
        ///   +   ``io1``: 4 - 16,384 GiB
        ///   +   ``io2``: 4 - 65,536 GiB
        ///   +   ``st1`` and ``sc1``: 125 - 16,384 GiB
        ///   +   ``standard``: 1 - 1024 GiB
        /// </summary>
        public readonly int? VolumeSize;
        /// <summary>
        /// The volume type. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the *Amazon Elastic Compute Cloud User Guide*.
        /// </summary>
        public readonly string? VolumeType;

        [OutputConstructor]
        private LaunchTemplateEbs(
            bool? deleteOnTermination,

            bool? encrypted,

            int? iops,

            string? kmsKeyId,

            string? snapshotId,

            int? throughput,

            int? volumeSize,

            string? volumeType)
        {
            DeleteOnTermination = deleteOnTermination;
            Encrypted = encrypted;
            Iops = iops;
            KmsKeyId = kmsKeyId;
            SnapshotId = snapshotId;
            Throughput = throughput;
            VolumeSize = volumeSize;
            VolumeType = volumeType;
        }
    }
}
