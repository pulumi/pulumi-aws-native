// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2.Outputs
{

    [OutputType]
    public sealed class SecurityGroupEgress
    {
        /// <summary>
        /// The IPv4 address range, in CIDR format.
        /// 
        /// You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `DestinationPrefixListId` , or `DestinationSecurityGroupId` .
        /// 
        /// For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *Amazon EC2 User Guide* .
        /// </summary>
        public readonly string? CidrIp;
        /// <summary>
        /// The IPv6 address range, in CIDR format.
        /// 
        /// You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `DestinationPrefixListId` , or `DestinationSecurityGroupId` .
        /// 
        /// For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *Amazon EC2 User Guide* .
        /// </summary>
        public readonly string? CidrIpv6;
        /// <summary>
        /// A description for the security group rule.
        /// 
        /// Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The prefix list IDs for the destination AWS service. This is the AWS service that you want to access through a VPC endpoint from instances associated with the security group.
        /// 
        /// You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `DestinationPrefixListId` , or `DestinationSecurityGroupId` .
        /// </summary>
        public readonly string? DestinationPrefixListId;
        /// <summary>
        /// The ID of the destination VPC security group.
        /// 
        /// You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `DestinationPrefixListId` , or `DestinationSecurityGroupId` .
        /// </summary>
        public readonly string? DestinationSecurityGroupId;
        /// <summary>
        /// If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
        /// </summary>
        public readonly int? FromPort;
        /// <summary>
        /// The IP protocol name ( `tcp` , `udp` , `icmp` , `icmpv6` ) or number (see [Protocol Numbers](https://docs.aws.amazon.com/http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) ).
        /// 
        /// Use `-1` to specify all protocols. When authorizing security group rules, specifying `-1` or a protocol number other than `tcp` , `udp` , `icmp` , or `icmpv6` allows traffic on all ports, regardless of any port range you specify. For `tcp` , `udp` , and `icmp` , you must specify a port range. For `icmpv6` , the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
        /// </summary>
        public readonly string IpProtocol;
        /// <summary>
        /// If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
        /// </summary>
        public readonly int? ToPort;

        [OutputConstructor]
        private SecurityGroupEgress(
            string? cidrIp,

            string? cidrIpv6,

            string? description,

            string? destinationPrefixListId,

            string? destinationSecurityGroupId,

            int? fromPort,

            string ipProtocol,

            int? toPort)
        {
            CidrIp = cidrIp;
            CidrIpv6 = cidrIpv6;
            Description = description;
            DestinationPrefixListId = destinationPrefixListId;
            DestinationSecurityGroupId = destinationSecurityGroupId;
            FromPort = fromPort;
            IpProtocol = ipProtocol;
            ToPort = toPort;
        }
    }
}
