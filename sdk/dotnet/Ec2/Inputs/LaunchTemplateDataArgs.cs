// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2.Inputs
{

    /// <summary>
    /// The information for the launch template.
    /// </summary>
    public sealed class LaunchTemplateDataArgs : global::Pulumi.ResourceArgs
    {
        [Input("blockDeviceMappings")]
        private InputList<Inputs.LaunchTemplateBlockDeviceMappingArgs>? _blockDeviceMappings;

        /// <summary>
        /// The block device mapping.
        /// </summary>
        public InputList<Inputs.LaunchTemplateBlockDeviceMappingArgs> BlockDeviceMappings
        {
            get => _blockDeviceMappings ?? (_blockDeviceMappings = new InputList<Inputs.LaunchTemplateBlockDeviceMappingArgs>());
            set => _blockDeviceMappings = value;
        }

        [Input("capacityReservationSpecification")]
        public Input<Inputs.LaunchTemplateCapacityReservationSpecificationArgs>? CapacityReservationSpecification { get; set; }

        [Input("cpuOptions")]
        public Input<Inputs.LaunchTemplateCpuOptionsArgs>? CpuOptions { get; set; }

        [Input("creditSpecification")]
        public Input<Inputs.LaunchTemplateCreditSpecificationArgs>? CreditSpecification { get; set; }

        /// <summary>
        /// Indicates whether to enable the instance for stop protection.
        /// </summary>
        [Input("disableApiStop")]
        public Input<bool>? DisableApiStop { get; set; }

        /// <summary>
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API.
        /// </summary>
        [Input("disableApiTermination")]
        public Input<bool>? DisableApiTermination { get; set; }

        /// <summary>
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        /// </summary>
        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        [Input("elasticGpuSpecifications")]
        private InputList<Inputs.LaunchTemplateElasticGpuSpecificationArgs>? _elasticGpuSpecifications;

        /// <summary>
        /// An elastic GPU to associate with the instance.
        /// </summary>
        public InputList<Inputs.LaunchTemplateElasticGpuSpecificationArgs> ElasticGpuSpecifications
        {
            get => _elasticGpuSpecifications ?? (_elasticGpuSpecifications = new InputList<Inputs.LaunchTemplateElasticGpuSpecificationArgs>());
            set => _elasticGpuSpecifications = value;
        }

        [Input("elasticInferenceAccelerators")]
        private InputList<Inputs.LaunchTemplateElasticInferenceAcceleratorArgs>? _elasticInferenceAccelerators;

        /// <summary>
        /// The elastic inference accelerator for the instance.
        /// </summary>
        public InputList<Inputs.LaunchTemplateElasticInferenceAcceleratorArgs> ElasticInferenceAccelerators
        {
            get => _elasticInferenceAccelerators ?? (_elasticInferenceAccelerators = new InputList<Inputs.LaunchTemplateElasticInferenceAcceleratorArgs>());
            set => _elasticInferenceAccelerators = value;
        }

        [Input("enclaveOptions")]
        public Input<Inputs.LaunchTemplateEnclaveOptionsArgs>? EnclaveOptions { get; set; }

        [Input("hibernationOptions")]
        public Input<Inputs.LaunchTemplateHibernationOptionsArgs>? HibernationOptions { get; set; }

        [Input("iamInstanceProfile")]
        public Input<Inputs.LaunchTemplateIamInstanceProfileArgs>? IamInstanceProfile { get; set; }

        /// <summary>
        /// The ID of the AMI. Alternatively, you can specify a Systems Manager parameter, which will resolve to an AMI ID on launch.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        /// </summary>
        [Input("instanceInitiatedShutdownBehavior")]
        public Input<string>? InstanceInitiatedShutdownBehavior { get; set; }

        [Input("instanceMarketOptions")]
        public Input<Inputs.LaunchTemplateInstanceMarketOptionsArgs>? InstanceMarketOptions { get; set; }

        [Input("instanceRequirements")]
        public Input<Inputs.LaunchTemplateInstanceRequirementsArgs>? InstanceRequirements { get; set; }

        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The ID of the kernel.
        /// </summary>
        [Input("kernelId")]
        public Input<string>? KernelId { get; set; }

        /// <summary>
        /// The name of the EC2 key pair
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        [Input("licenseSpecifications")]
        private InputList<Inputs.LaunchTemplateLicenseSpecificationArgs>? _licenseSpecifications;

        /// <summary>
        /// The license configurations.
        /// </summary>
        public InputList<Inputs.LaunchTemplateLicenseSpecificationArgs> LicenseSpecifications
        {
            get => _licenseSpecifications ?? (_licenseSpecifications = new InputList<Inputs.LaunchTemplateLicenseSpecificationArgs>());
            set => _licenseSpecifications = value;
        }

        [Input("maintenanceOptions")]
        public Input<Inputs.LaunchTemplateMaintenanceOptionsArgs>? MaintenanceOptions { get; set; }

        [Input("metadataOptions")]
        public Input<Inputs.LaunchTemplateMetadataOptionsArgs>? MetadataOptions { get; set; }

        [Input("monitoring")]
        public Input<Inputs.LaunchTemplateMonitoringArgs>? Monitoring { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.LaunchTemplateNetworkInterfaceArgs>? _networkInterfaces;

        /// <summary>
        /// If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
        /// </summary>
        public InputList<Inputs.LaunchTemplateNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.LaunchTemplateNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        [Input("placement")]
        public Input<Inputs.LaunchTemplatePlacementArgs>? Placement { get; set; }

        [Input("privateDnsNameOptions")]
        public Input<Inputs.LaunchTemplatePrivateDnsNameOptionsArgs>? PrivateDnsNameOptions { get; set; }

        [Input("ramDiskId")]
        public Input<string>? RamDiskId { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// One or more security group IDs. 
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// One or more security group names.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("tagSpecifications")]
        private InputList<Inputs.TagSpecificationArgs>? _tagSpecifications;

        /// <summary>
        /// The tags to apply to the resources that are created during instance launch.
        /// </summary>
        public InputList<Inputs.TagSpecificationArgs> TagSpecifications
        {
            get => _tagSpecifications ?? (_tagSpecifications = new InputList<Inputs.TagSpecificationArgs>());
            set => _tagSpecifications = value;
        }

        /// <summary>
        /// The user data to make available to the instance.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public LaunchTemplateDataArgs()
        {
        }
        public static new LaunchTemplateDataArgs Empty => new LaunchTemplateDataArgs();
    }
}
