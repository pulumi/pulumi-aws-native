// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2.Inputs
{

    /// <summary>
    /// The tunnel options for a single VPN tunnel.
    /// </summary>
    public sealed class VpnConnectionVpnTunnelOptionsSpecificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take after DPD timeout occurs. Specify ``restart`` to restart the IKE initiation. Specify ``clear`` to end the IKE session.
        ///  Valid Values: ``clear`` | ``none`` | ``restart`` 
        ///  Default: ``clear``
        /// </summary>
        [Input("dpdTimeoutAction")]
        public Input<Pulumi.AwsNative.Ec2.VpnConnectionVpnTunnelOptionsSpecificationDpdTimeoutAction>? DpdTimeoutAction { get; set; }

        /// <summary>
        /// The number of seconds after which a DPD timeout occurs.
        ///  Constraints: A value greater than or equal to 30.
        ///  Default: ``30``
        /// </summary>
        [Input("dpdTimeoutSeconds")]
        public Input<int>? DpdTimeoutSeconds { get; set; }

        /// <summary>
        /// Turn on or off tunnel endpoint lifecycle control feature.
        /// </summary>
        [Input("enableTunnelLifecycleControl")]
        public Input<bool>? EnableTunnelLifecycleControl { get; set; }

        [Input("ikeVersions")]
        private InputList<Inputs.VpnConnectionIkeVersionsRequestListValueArgs>? _ikeVersions;

        /// <summary>
        /// The IKE versions that are permitted for the VPN tunnel.
        ///  Valid values: ``ikev1`` | ``ikev2``
        /// </summary>
        public InputList<Inputs.VpnConnectionIkeVersionsRequestListValueArgs> IkeVersions
        {
            get => _ikeVersions ?? (_ikeVersions = new InputList<Inputs.VpnConnectionIkeVersionsRequestListValueArgs>());
            set => _ikeVersions = value;
        }

        /// <summary>
        /// Options for logging VPN tunnel activity.
        /// </summary>
        [Input("logOptions")]
        public Input<Inputs.VpnConnectionVpnTunnelLogOptionsSpecificationArgs>? LogOptions { get; set; }

        [Input("phase1EncryptionAlgorithms")]
        private InputList<Inputs.VpnConnectionPhase1EncryptionAlgorithmsRequestListValueArgs>? _phase1EncryptionAlgorithms;

        /// <summary>
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.
        ///  Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``
        /// </summary>
        public InputList<Inputs.VpnConnectionPhase1EncryptionAlgorithmsRequestListValueArgs> Phase1EncryptionAlgorithms
        {
            get => _phase1EncryptionAlgorithms ?? (_phase1EncryptionAlgorithms = new InputList<Inputs.VpnConnectionPhase1EncryptionAlgorithmsRequestListValueArgs>());
            set => _phase1EncryptionAlgorithms = value;
        }

        [Input("phase1IntegrityAlgorithms")]
        private InputList<Inputs.VpnConnectionPhase1IntegrityAlgorithmsRequestListValueArgs>? _phase1IntegrityAlgorithms;

        /// <summary>
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.
        ///  Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``
        /// </summary>
        public InputList<Inputs.VpnConnectionPhase1IntegrityAlgorithmsRequestListValueArgs> Phase1IntegrityAlgorithms
        {
            get => _phase1IntegrityAlgorithms ?? (_phase1IntegrityAlgorithms = new InputList<Inputs.VpnConnectionPhase1IntegrityAlgorithmsRequestListValueArgs>());
            set => _phase1IntegrityAlgorithms = value;
        }

        /// <summary>
        /// The lifetime for phase 1 of the IKE negotiation, in seconds.
        ///  Constraints: A value between 900 and 28,800.
        ///  Default: ``28800``
        /// </summary>
        [Input("phase1LifetimeSeconds")]
        public Input<int>? Phase1LifetimeSeconds { get; set; }

        [Input("phase1dhGroupNumbers")]
        private InputList<Inputs.VpnConnectionPhase1dhGroupNumbersRequestListValueArgs>? _phase1dhGroupNumbers;

        /// <summary>
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations.
        ///  Valid values: ``2`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``
        /// </summary>
        public InputList<Inputs.VpnConnectionPhase1dhGroupNumbersRequestListValueArgs> Phase1dhGroupNumbers
        {
            get => _phase1dhGroupNumbers ?? (_phase1dhGroupNumbers = new InputList<Inputs.VpnConnectionPhase1dhGroupNumbersRequestListValueArgs>());
            set => _phase1dhGroupNumbers = value;
        }

        [Input("phase2EncryptionAlgorithms")]
        private InputList<Inputs.VpnConnectionPhase2EncryptionAlgorithmsRequestListValueArgs>? _phase2EncryptionAlgorithms;

        /// <summary>
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.
        ///  Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``
        /// </summary>
        public InputList<Inputs.VpnConnectionPhase2EncryptionAlgorithmsRequestListValueArgs> Phase2EncryptionAlgorithms
        {
            get => _phase2EncryptionAlgorithms ?? (_phase2EncryptionAlgorithms = new InputList<Inputs.VpnConnectionPhase2EncryptionAlgorithmsRequestListValueArgs>());
            set => _phase2EncryptionAlgorithms = value;
        }

        [Input("phase2IntegrityAlgorithms")]
        private InputList<Inputs.VpnConnectionPhase2IntegrityAlgorithmsRequestListValueArgs>? _phase2IntegrityAlgorithms;

        /// <summary>
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.
        ///  Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``
        /// </summary>
        public InputList<Inputs.VpnConnectionPhase2IntegrityAlgorithmsRequestListValueArgs> Phase2IntegrityAlgorithms
        {
            get => _phase2IntegrityAlgorithms ?? (_phase2IntegrityAlgorithms = new InputList<Inputs.VpnConnectionPhase2IntegrityAlgorithmsRequestListValueArgs>());
            set => _phase2IntegrityAlgorithms = value;
        }

        /// <summary>
        /// The lifetime for phase 2 of the IKE negotiation, in seconds.
        ///  Constraints: A value between 900 and 3,600. The value must be less than the value for ``Phase1LifetimeSeconds``.
        ///  Default: ``3600``
        /// </summary>
        [Input("phase2LifetimeSeconds")]
        public Input<int>? Phase2LifetimeSeconds { get; set; }

        [Input("phase2dhGroupNumbers")]
        private InputList<Inputs.VpnConnectionPhase2dhGroupNumbersRequestListValueArgs>? _phase2dhGroupNumbers;

        /// <summary>
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations.
        ///  Valid values: ``2`` | ``5`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``
        /// </summary>
        public InputList<Inputs.VpnConnectionPhase2dhGroupNumbersRequestListValueArgs> Phase2dhGroupNumbers
        {
            get => _phase2dhGroupNumbers ?? (_phase2dhGroupNumbers = new InputList<Inputs.VpnConnectionPhase2dhGroupNumbersRequestListValueArgs>());
            set => _phase2dhGroupNumbers = value;
        }

        /// <summary>
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway.
        ///  Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
        /// </summary>
        [Input("preSharedKey")]
        public Input<string>? PreSharedKey { get; set; }

        /// <summary>
        /// The percentage of the rekey window (determined by ``RekeyMarginTimeSeconds``) during which the rekey time is randomly selected.
        ///  Constraints: A value between 0 and 100.
        ///  Default: ``100``
        /// </summary>
        [Input("rekeyFuzzPercentage")]
        public Input<int>? RekeyFuzzPercentage { get; set; }

        /// <summary>
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for ``RekeyFuzzPercentage``.
        ///  Constraints: A value between 60 and half of ``Phase2LifetimeSeconds``.
        ///  Default: ``270``
        /// </summary>
        [Input("rekeyMarginTimeSeconds")]
        public Input<int>? RekeyMarginTimeSeconds { get; set; }

        /// <summary>
        /// The number of packets in an IKE replay window.
        ///  Constraints: A value between 64 and 2048.
        ///  Default: ``1024``
        /// </summary>
        [Input("replayWindowSize")]
        public Input<int>? ReplayWindowSize { get; set; }

        /// <summary>
        /// The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify ``start`` for AWS to initiate the IKE negotiation.
        ///  Valid Values: ``add`` | ``start`` 
        ///  Default: ``add``
        /// </summary>
        [Input("startupAction")]
        public Input<Pulumi.AwsNative.Ec2.VpnConnectionVpnTunnelOptionsSpecificationStartupAction>? StartupAction { get; set; }

        /// <summary>
        /// The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. 
        ///  Constraints: A size /30 CIDR block from the ``169.254.0.0/16`` range. The following CIDR blocks are reserved and cannot be used:
        ///   +   ``169.254.0.0/30`` 
        ///   +   ``169.254.1.0/30`` 
        ///   +   ``169.254.2.0/30`` 
        ///   +   ``169.254.3.0/30`` 
        ///   +   ``169.254.4.0/30`` 
        ///   +   ``169.254.5.0/30`` 
        ///   +   ``169.254.169.252/30``
        /// </summary>
        [Input("tunnelInsideCidr")]
        public Input<string>? TunnelInsideCidr { get; set; }

        /// <summary>
        /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway.
        ///  Constraints: A size /126 CIDR block from the local ``fd00::/8`` range.
        /// </summary>
        [Input("tunnelInsideIpv6Cidr")]
        public Input<string>? TunnelInsideIpv6Cidr { get; set; }

        public VpnConnectionVpnTunnelOptionsSpecificationArgs()
        {
        }
        public static new VpnConnectionVpnTunnelOptionsSpecificationArgs Empty => new VpnConnectionVpnTunnelOptionsSpecificationArgs();
    }
}
