// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    /// <summary>
    /// The AWS::EC2::VerifiedAccessTrustProvider type describes a verified access trust provider
    /// </summary>
    [AwsNativeResourceType("aws-native:ec2:VerifiedAccessTrustProvider")]
    public partial class VerifiedAccessTrustProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// A description for the Amazon Web Services Verified Access trust provider.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("deviceOptions")]
        public Output<Outputs.VerifiedAccessTrustProviderDeviceOptions?> DeviceOptions { get; private set; } = null!;

        /// <summary>
        /// The type of device-based trust provider. Possible values: jamf|crowdstrike
        /// </summary>
        [Output("deviceTrustProviderType")]
        public Output<string?> DeviceTrustProviderType { get; private set; } = null!;

        /// <summary>
        /// The last updated time.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        [Output("oidcOptions")]
        public Output<Outputs.VerifiedAccessTrustProviderOidcOptions?> OidcOptions { get; private set; } = null!;

        /// <summary>
        /// The identifier to be used when working with policy rules.
        /// </summary>
        [Output("policyReferenceName")]
        public Output<string> PolicyReferenceName { get; private set; } = null!;

        /// <summary>
        /// The configuration options for customer provided KMS encryption.
        /// </summary>
        [Output("sseSpecification")]
        public Output<Outputs.SseSpecificationProperties?> SseSpecification { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.VerifiedAccessTrustProviderTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Type of trust provider. Possible values: user|device
        /// </summary>
        [Output("trustProviderType")]
        public Output<string> TrustProviderType { get; private set; } = null!;

        /// <summary>
        /// The type of device-based trust provider. Possible values: oidc|iam-identity-center
        /// </summary>
        [Output("userTrustProviderType")]
        public Output<string?> UserTrustProviderType { get; private set; } = null!;

        /// <summary>
        /// The ID of the Amazon Web Services Verified Access trust provider.
        /// </summary>
        [Output("verifiedAccessTrustProviderId")]
        public Output<string> VerifiedAccessTrustProviderId { get; private set; } = null!;


        /// <summary>
        /// Create a VerifiedAccessTrustProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VerifiedAccessTrustProvider(string name, VerifiedAccessTrustProviderArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ec2:VerifiedAccessTrustProvider", name, args ?? new VerifiedAccessTrustProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VerifiedAccessTrustProvider(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:VerifiedAccessTrustProvider", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "deviceOptions",
                    "deviceTrustProviderType",
                    "policyReferenceName",
                    "trustProviderType",
                    "userTrustProviderType",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VerifiedAccessTrustProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VerifiedAccessTrustProvider Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VerifiedAccessTrustProvider(name, id, options);
        }
    }

    public sealed class VerifiedAccessTrustProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the Amazon Web Services Verified Access trust provider.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceOptions")]
        public Input<Inputs.VerifiedAccessTrustProviderDeviceOptionsArgs>? DeviceOptions { get; set; }

        /// <summary>
        /// The type of device-based trust provider. Possible values: jamf|crowdstrike
        /// </summary>
        [Input("deviceTrustProviderType")]
        public Input<string>? DeviceTrustProviderType { get; set; }

        [Input("oidcOptions")]
        public Input<Inputs.VerifiedAccessTrustProviderOidcOptionsArgs>? OidcOptions { get; set; }

        /// <summary>
        /// The identifier to be used when working with policy rules.
        /// </summary>
        [Input("policyReferenceName", required: true)]
        public Input<string> PolicyReferenceName { get; set; } = null!;

        /// <summary>
        /// The configuration options for customer provided KMS encryption.
        /// </summary>
        [Input("sseSpecification")]
        public Input<Inputs.SseSpecificationPropertiesArgs>? SseSpecification { get; set; }

        [Input("tags")]
        private InputList<Inputs.VerifiedAccessTrustProviderTagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public InputList<Inputs.VerifiedAccessTrustProviderTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VerifiedAccessTrustProviderTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Type of trust provider. Possible values: user|device
        /// </summary>
        [Input("trustProviderType", required: true)]
        public Input<string> TrustProviderType { get; set; } = null!;

        /// <summary>
        /// The type of device-based trust provider. Possible values: oidc|iam-identity-center
        /// </summary>
        [Input("userTrustProviderType")]
        public Input<string>? UserTrustProviderType { get; set; }

        public VerifiedAccessTrustProviderArgs()
        {
        }
        public static new VerifiedAccessTrustProviderArgs Empty => new VerifiedAccessTrustProviderArgs();
    }
}
