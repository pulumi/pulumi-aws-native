// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    /// <summary>
    /// Resource Type definition for AWS::EC2::CapacityReservation
    /// </summary>
    [AwsNativeResourceType("aws-native:ec2:CapacityReservation")]
    public partial class CapacityReservation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Availability Zone in which to create the Capacity Reservation.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string?> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The Availability Zone ID of the Capacity Reservation.
        /// </summary>
        [Output("availabilityZoneId")]
        public Output<string?> AvailabilityZoneId { get; private set; } = null!;

        /// <summary>
        /// Returns the remaining capacity, which indicates the number of instances that can be launched in the Capacity Reservation. For example: `9` .
        /// </summary>
        [Output("availableInstanceCount")]
        public Output<int> AvailableInstanceCount { get; private set; } = null!;

        /// <summary>
        /// The ID of the Capacity Reservation.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        [Output("capacityAllocationSet")]
        public Output<ImmutableArray<Outputs.CapacityReservationCapacityAllocation>> CapacityAllocationSet { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Capacity Reservation.
        /// </summary>
        [Output("capacityReservationArn")]
        public Output<string> CapacityReservationArn { get; private set; } = null!;

        /// <summary>
        /// The ID of the Capacity Reservation Fleet to which the Capacity Reservation belongs. Only valid for Capacity Reservations that were created by a Capacity Reservation Fleet.
        /// </summary>
        [Output("capacityReservationFleetId")]
        public Output<string> CapacityReservationFleetId { get; private set; } = null!;

        [Output("commitmentInfo")]
        public Output<Outputs.CommitmentInfoProperties> CommitmentInfo { get; private set; } = null!;

        /// <summary>
        /// The date and time at which the Capacity Reservation was created.
        /// </summary>
        [Output("createDate")]
        public Output<string> CreateDate { get; private set; } = null!;

        /// <summary>
        /// The delivery method for a future-dated Capacity Reservation. `incremental` indicates that the requested capacity is delivered in addition to any running instances and reserved capacity that you have in your account at the requested date and time.
        /// </summary>
        [Output("deliveryPreference")]
        public Output<string> DeliveryPreference { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
        /// </summary>
        [Output("ebsOptimized")]
        public Output<bool?> EbsOptimized { get; private set; } = null!;

        /// <summary>
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.
        /// 
        /// You must provide an `EndDate` value if `EndDateType` is `limited` . Omit `EndDate` if `EndDateType` is `unlimited` .
        /// 
        /// If the `EndDateType` is `limited` , the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
        /// 
        /// If you are requesting a future-dated Capacity Reservation, you can't specify an end date and time that is within the commitment duration.
        /// </summary>
        [Output("endDate")]
        public Output<string?> EndDate { get; private set; } = null!;

        /// <summary>
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
        /// 
        /// - `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited` .
        /// - `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited` .
        /// </summary>
        [Output("endDateType")]
        public Output<string?> EndDateType { get; private set; } = null!;

        /// <summary>
        /// *Deprecated.*
        /// </summary>
        [Output("ephemeralStorage")]
        public Output<bool?> EphemeralStorage { get; private set; } = null!;

        /// <summary>
        /// The number of instances for which to reserve capacity.
        /// 
        /// &gt; You can request future-dated Capacity Reservations for an instance count with a minimum of 64 vCPUs. For example, if you request a future-dated Capacity Reservation for `m5.xlarge` instances, you must request at least 25 instances ( *16 * m5.xlarge = 64 vCPUs* ). 
        /// 
        /// Valid range: 1 - 1000
        /// </summary>
        [Output("instanceCount")]
        public Output<int> InstanceCount { get; private set; } = null!;

        /// <summary>
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
        /// 
        /// - `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.
        /// - `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
        /// 
        /// &gt; If you are requesting a future-dated Capacity Reservation, you must specify `targeted` . 
        /// 
        /// Default: `open`
        /// </summary>
        [Output("instanceMatchCriteria")]
        public Output<string?> InstanceMatchCriteria { get; private set; } = null!;

        /// <summary>
        /// The type of operating system for which to reserve capacity.
        /// </summary>
        [Output("instancePlatform")]
        public Output<string> InstancePlatform { get; private set; } = null!;

        /// <summary>
        /// The instance type for which to reserve capacity.
        /// 
        /// &gt; You can request future-dated Capacity Reservations for instance types in the C, M, R, I, T, and G instance families only. 
        /// 
        /// For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// &gt; Not supported for future-dated Capacity Reservations. 
        /// 
        /// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
        /// </summary>
        [Output("outPostArn")]
        public Output<string?> OutPostArn { get; private set; } = null!;

        /// <summary>
        /// The ID of the AWS account that owns the Capacity Reservation.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// &gt; Not supported for future-dated Capacity Reservations. 
        /// 
        /// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation. For more information, see [Capacity Reservations for cluster placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html) in the *Amazon EC2 User Guide* .
        /// </summary>
        [Output("placementGroupArn")]
        public Output<string?> PlacementGroupArn { get; private set; } = null!;

        /// <summary>
        /// The type of Capacity Reservation.
        /// </summary>
        [Output("reservationType")]
        public Output<string> ReservationType { get; private set; } = null!;

        /// <summary>
        /// The date and time at which the Capacity Reservation was started.
        /// </summary>
        [Output("startDate")]
        public Output<string> StartDate { get; private set; } = null!;

        /// <summary>
        /// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:
        /// 
        /// - `active` - The capacity is available for use.
        /// - `expired` - The Capacity Reservation expired automatically at the date and time specified in your reservation request. The reserved capacity is no longer available for your use.
        /// - `cancelled` - The Capacity Reservation was canceled. The reserved capacity is no longer available for your use.
        /// - `pending` - The Capacity Reservation request was successful but the capacity provisioning is still pending.
        /// - `failed` - The Capacity Reservation request has failed. A request can fail due to request parameters that are not valid, capacity constraints, or instance limit constraints. You can view a failed request for 60 minutes.
        /// - `scheduled` - ( *Future-dated Capacity Reservations* ) The future-dated Capacity Reservation request was approved and the Capacity Reservation is scheduled for delivery on the requested start date.
        /// - `payment-pending` - ( *Capacity Blocks* ) The upfront payment has not been processed yet.
        /// - `payment-failed` - ( *Capacity Blocks* ) The upfront payment was not processed in the 12-hour time frame. Your Capacity Block was released.
        /// - `assessing` - ( *Future-dated Capacity Reservations* ) Amazon EC2 is assessing your request for a future-dated Capacity Reservation.
        /// - `delayed` - ( *Future-dated Capacity Reservations* ) Amazon EC2 encountered a delay in provisioning the requested future-dated Capacity Reservation. Amazon EC2 is unable to deliver the requested capacity by the requested start date and time.
        /// - `unsupported` - ( *Future-dated Capacity Reservations* ) Amazon EC2 can't support the future-dated Capacity Reservation request due to capacity constraints. You can view unsupported requests for 30 days. The Capacity Reservation will not be delivered.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The tags to apply to the Capacity Reservation during launch.
        /// </summary>
        [Output("tagSpecifications")]
        public Output<ImmutableArray<Outputs.CapacityReservationTagSpecification>> TagSpecifications { get; private set; } = null!;

        /// <summary>
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:
        /// 
        /// - `default` - The Capacity Reservation is created on hardware that is shared with other AWS accounts .
        /// - `dedicated` - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account .
        /// </summary>
        [Output("tenancy")]
        public Output<string?> Tenancy { get; private set; } = null!;

        /// <summary>
        /// Returns the total number of instances for which the Capacity Reservation reserves capacity. For example: `15` .
        /// </summary>
        [Output("totalInstanceCount")]
        public Output<int> TotalInstanceCount { get; private set; } = null!;

        /// <summary>
        /// The ID of the AWS account to which to assign billing of the unused capacity of the Capacity Reservation. A request will be sent to the specified account. That account must accept the request for the billing to be assigned to their account. For more information, see [Billing assignment for shared Amazon EC2 Capacity Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html) .
        /// 
        /// You can assign billing only for shared Capacity Reservations. To share a Capacity Reservation, you must add it to a resource share. For more information, see [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html) .
        /// </summary>
        [Output("unusedReservationBillingOwnerId")]
        public Output<string?> UnusedReservationBillingOwnerId { get; private set; } = null!;


        /// <summary>
        /// Create a CapacityReservation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CapacityReservation(string name, CapacityReservationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ec2:CapacityReservation", name, args ?? new CapacityReservationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CapacityReservation(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:CapacityReservation", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "availabilityZone",
                    "availabilityZoneId",
                    "ebsOptimized",
                    "ephemeralStorage",
                    "instancePlatform",
                    "instanceType",
                    "outPostArn",
                    "placementGroupArn",
                    "tagSpecifications[*]",
                    "tenancy",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CapacityReservation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CapacityReservation Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new CapacityReservation(name, id, options);
        }
    }

    public sealed class CapacityReservationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Availability Zone in which to create the Capacity Reservation.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// The Availability Zone ID of the Capacity Reservation.
        /// </summary>
        [Input("availabilityZoneId")]
        public Input<string>? AvailabilityZoneId { get; set; }

        /// <summary>
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
        /// </summary>
        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        /// <summary>
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to `expired` when it reaches its end date and time.
        /// 
        /// You must provide an `EndDate` value if `EndDateType` is `limited` . Omit `EndDate` if `EndDateType` is `unlimited` .
        /// 
        /// If the `EndDateType` is `limited` , the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
        /// 
        /// If you are requesting a future-dated Capacity Reservation, you can't specify an end date and time that is within the commitment duration.
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:
        /// 
        /// - `unlimited` - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an `EndDate` if the `EndDateType` is `unlimited` .
        /// - `limited` - The Capacity Reservation expires automatically at a specified date and time. You must provide an `EndDate` value if the `EndDateType` value is `limited` .
        /// </summary>
        [Input("endDateType")]
        public Input<string>? EndDateType { get; set; }

        /// <summary>
        /// *Deprecated.*
        /// </summary>
        [Input("ephemeralStorage")]
        public Input<bool>? EphemeralStorage { get; set; }

        /// <summary>
        /// The number of instances for which to reserve capacity.
        /// 
        /// &gt; You can request future-dated Capacity Reservations for an instance count with a minimum of 64 vCPUs. For example, if you request a future-dated Capacity Reservation for `m5.xlarge` instances, you must request at least 25 instances ( *16 * m5.xlarge = 64 vCPUs* ). 
        /// 
        /// Valid range: 1 - 1000
        /// </summary>
        [Input("instanceCount", required: true)]
        public Input<int> InstanceCount { get; set; } = null!;

        /// <summary>
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:
        /// 
        /// - `open` - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.
        /// - `targeted` - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
        /// 
        /// &gt; If you are requesting a future-dated Capacity Reservation, you must specify `targeted` . 
        /// 
        /// Default: `open`
        /// </summary>
        [Input("instanceMatchCriteria")]
        public Input<string>? InstanceMatchCriteria { get; set; }

        /// <summary>
        /// The type of operating system for which to reserve capacity.
        /// </summary>
        [Input("instancePlatform", required: true)]
        public Input<string> InstancePlatform { get; set; } = null!;

        /// <summary>
        /// The instance type for which to reserve capacity.
        /// 
        /// &gt; You can request future-dated Capacity Reservations for instance types in the C, M, R, I, T, and G instance families only. 
        /// 
        /// For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// &gt; Not supported for future-dated Capacity Reservations. 
        /// 
        /// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
        /// </summary>
        [Input("outPostArn")]
        public Input<string>? OutPostArn { get; set; }

        /// <summary>
        /// &gt; Not supported for future-dated Capacity Reservations. 
        /// 
        /// The Amazon Resource Name (ARN) of the cluster placement group in which to create the Capacity Reservation. For more information, see [Capacity Reservations for cluster placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html) in the *Amazon EC2 User Guide* .
        /// </summary>
        [Input("placementGroupArn")]
        public Input<string>? PlacementGroupArn { get; set; }

        [Input("tagSpecifications")]
        private InputList<Inputs.CapacityReservationTagSpecificationArgs>? _tagSpecifications;

        /// <summary>
        /// The tags to apply to the Capacity Reservation during launch.
        /// </summary>
        public InputList<Inputs.CapacityReservationTagSpecificationArgs> TagSpecifications
        {
            get => _tagSpecifications ?? (_tagSpecifications = new InputList<Inputs.CapacityReservationTagSpecificationArgs>());
            set => _tagSpecifications = value;
        }

        /// <summary>
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:
        /// 
        /// - `default` - The Capacity Reservation is created on hardware that is shared with other AWS accounts .
        /// - `dedicated` - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account .
        /// </summary>
        [Input("tenancy")]
        public Input<string>? Tenancy { get; set; }

        /// <summary>
        /// The ID of the AWS account to which to assign billing of the unused capacity of the Capacity Reservation. A request will be sent to the specified account. That account must accept the request for the billing to be assigned to their account. For more information, see [Billing assignment for shared Amazon EC2 Capacity Reservations](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html) .
        /// 
        /// You can assign billing only for shared Capacity Reservations. To share a Capacity Reservation, you must add it to a resource share. For more information, see [AWS::RAM::ResourceShare](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html) .
        /// </summary>
        [Input("unusedReservationBillingOwnerId")]
        public Input<string>? UnusedReservationBillingOwnerId { get; set; }

        public CapacityReservationArgs()
        {
        }
        public static new CapacityReservationArgs Empty => new CapacityReservationArgs();
    }
}
