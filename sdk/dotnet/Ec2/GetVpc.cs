// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    public static class GetVpc
    {
        /// <summary>
        /// Resource Type definition for AWS::EC2::VPC
        /// </summary>
        public static Task<GetVpcResult> InvokeAsync(GetVpcArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcResult>("aws-native:ec2:getVpc", args ?? new GetVpcArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::EC2::VPC
        /// </summary>
        public static Output<GetVpcResult> Invoke(GetVpcInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcResult>("aws-native:ec2:getVpc", args ?? new GetVpcInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id for the model.
        /// </summary>
        [Input("vpcId", required: true)]
        public string VpcId { get; set; } = null!;

        public GetVpcArgs()
        {
        }
        public static new GetVpcArgs Empty => new GetVpcArgs();
    }

    public sealed class GetVpcInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id for the model.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public GetVpcInvokeArgs()
        {
        }
        public static new GetVpcInvokeArgs Empty => new GetVpcInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcResult
    {
        /// <summary>
        /// A list of IPv4 CIDR block association IDs for the VPC.
        /// </summary>
        public readonly ImmutableArray<string> CidrBlockAssociations;
        /// <summary>
        /// The default network ACL ID that is associated with the VPC.
        /// </summary>
        public readonly string? DefaultNetworkAcl;
        /// <summary>
        /// The default security group ID that is associated with the VPC.
        /// </summary>
        public readonly string? DefaultSecurityGroup;
        /// <summary>
        /// Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. Disabled by default for nondefault VPCs.
        /// </summary>
        public readonly bool? EnableDnsHostnames;
        /// <summary>
        /// Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. Enabled by default.
        /// </summary>
        public readonly bool? EnableDnsSupport;
        /// <summary>
        /// The allowed tenancy of instances launched into the VPC.
        /// 
        /// "default": An instance launched into the VPC runs on shared hardware by default, unless you explicitly specify a different tenancy during instance launch.
        /// 
        /// "dedicated": An instance launched into the VPC is a Dedicated Instance by default, unless you explicitly specify a tenancy of host during instance launch. You cannot specify a tenancy of default during instance launch.
        /// 
        /// Updating InstanceTenancy requires no replacement only if you are updating its value from "dedicated" to "default". Updating InstanceTenancy from "default" to "dedicated" requires replacement.
        /// </summary>
        public readonly string? InstanceTenancy;
        /// <summary>
        /// A list of IPv6 CIDR blocks that are associated with the VPC.
        /// </summary>
        public readonly ImmutableArray<string> Ipv6CidrBlocks;
        /// <summary>
        /// The tags for the VPC.
        /// </summary>
        public readonly ImmutableArray<Outputs.VpcTag> Tags;
        /// <summary>
        /// The Id for the model.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private GetVpcResult(
            ImmutableArray<string> cidrBlockAssociations,

            string? defaultNetworkAcl,

            string? defaultSecurityGroup,

            bool? enableDnsHostnames,

            bool? enableDnsSupport,

            string? instanceTenancy,

            ImmutableArray<string> ipv6CidrBlocks,

            ImmutableArray<Outputs.VpcTag> tags,

            string? vpcId)
        {
            CidrBlockAssociations = cidrBlockAssociations;
            DefaultNetworkAcl = defaultNetworkAcl;
            DefaultSecurityGroup = defaultSecurityGroup;
            EnableDnsHostnames = enableDnsHostnames;
            EnableDnsSupport = enableDnsSupport;
            InstanceTenancy = instanceTenancy;
            Ipv6CidrBlocks = ipv6CidrBlocks;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
