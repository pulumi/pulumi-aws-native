// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    /// <summary>
    /// Resource Type definition for AWS::EC2::EIP
    /// </summary>
    [AwsNativeResourceType("aws-native:ec2:Eip")]
    public partial class Eip : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Allocation ID of the EIP generated by resource.
        /// </summary>
        [Output("allocationId")]
        public Output<string> AllocationId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.
        /// </summary>
        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        /// <summary>
        /// The ID of the instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string?> InstanceId { get; private set; } = null!;

        /// <summary>
        /// A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
        /// </summary>
        [Output("networkBorderGroup")]
        public Output<string?> NetworkBorderGroup { get; private set; } = null!;

        /// <summary>
        /// The PublicIP of the EIP generated by resource.
        /// </summary>
        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        /// <summary>
        /// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
        /// </summary>
        [Output("publicIpv4Pool")]
        public Output<string?> PublicIpv4Pool { get; private set; } = null!;

        /// <summary>
        /// Any tags assigned to the EIP.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.EipTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The PublicIP of the EIP generated by resource through transfer from another account
        /// </summary>
        [Output("transferAddress")]
        public Output<string?> TransferAddress { get; private set; } = null!;


        /// <summary>
        /// Create a Eip resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Eip(string name, EipArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:ec2:Eip", name, args ?? new EipArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Eip(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:Eip", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "domain",
                    "networkBorderGroup",
                    "transferAddress",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Eip resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Eip Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Eip(name, id, options);
        }
    }

    public sealed class EipArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the Elastic IP address is for use with instances in a VPC or instance in EC2-Classic.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The ID of the instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses.
        /// </summary>
        [Input("networkBorderGroup")]
        public Input<string>? NetworkBorderGroup { get; set; }

        /// <summary>
        /// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
        /// </summary>
        [Input("publicIpv4Pool")]
        public Input<string>? PublicIpv4Pool { get; set; }

        [Input("tags")]
        private InputList<Inputs.EipTagArgs>? _tags;

        /// <summary>
        /// Any tags assigned to the EIP.
        /// </summary>
        public InputList<Inputs.EipTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.EipTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The PublicIP of the EIP generated by resource through transfer from another account
        /// </summary>
        [Input("transferAddress")]
        public Input<string>? TransferAddress { get; set; }

        public EipArgs()
        {
        }
        public static new EipArgs Empty => new EipArgs();
    }
}
