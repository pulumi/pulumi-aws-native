// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    /// <summary>
    /// The AWS::EC2::VerifiedAccessEndpoint resource creates an AWS EC2 Verified Access Endpoint.
    /// </summary>
    [AwsNativeResourceType("aws-native:ec2:VerifiedAccessEndpoint")]
    public partial class VerifiedAccessEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The DNS name for users to reach your application.
        /// </summary>
        [Output("applicationDomain")]
        public Output<string> ApplicationDomain { get; private set; } = null!;

        /// <summary>
        /// The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.
        /// </summary>
        [Output("attachmentType")]
        public Output<string> AttachmentType { get; private set; } = null!;

        /// <summary>
        /// The creation time.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// A description for the AWS Verified Access endpoint.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Returned if endpoint has a device trust provider attached.
        /// </summary>
        [Output("deviceValidationDomain")]
        public Output<string> DeviceValidationDomain { get; private set; } = null!;

        /// <summary>
        /// The ARN of a public TLS/SSL certificate imported into or created with ACM.
        /// </summary>
        [Output("domainCertificateArn")]
        public Output<string> DomainCertificateArn { get; private set; } = null!;

        /// <summary>
        /// A DNS name that is generated for the endpoint.
        /// </summary>
        [Output("endpointDomain")]
        public Output<string> EndpointDomain { get; private set; } = null!;

        /// <summary>
        /// A custom identifier that gets prepended to a DNS name that is generated for the endpoint.
        /// </summary>
        [Output("endpointDomainPrefix")]
        public Output<string> EndpointDomainPrefix { get; private set; } = null!;

        /// <summary>
        /// The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.
        /// </summary>
        [Output("endpointType")]
        public Output<string> EndpointType { get; private set; } = null!;

        /// <summary>
        /// The last updated time.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.
        /// </summary>
        [Output("loadBalancerOptions")]
        public Output<Outputs.VerifiedAccessEndpointLoadBalancerOptions?> LoadBalancerOptions { get; private set; } = null!;

        /// <summary>
        /// The options for network-interface type endpoint.
        /// </summary>
        [Output("networkInterfaceOptions")]
        public Output<Outputs.VerifiedAccessEndpointNetworkInterfaceOptions?> NetworkInterfaceOptions { get; private set; } = null!;

        /// <summary>
        /// The AWS Verified Access policy document.
        /// </summary>
        [Output("policyDocument")]
        public Output<string?> PolicyDocument { get; private set; } = null!;

        /// <summary>
        /// The status of the Verified Access policy.
        /// </summary>
        [Output("policyEnabled")]
        public Output<bool?> PolicyEnabled { get; private set; } = null!;

        /// <summary>
        /// The IDs of the security groups for the endpoint.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// The configuration options for customer provided KMS encryption.
        /// </summary>
        [Output("sseSpecification")]
        public Output<Outputs.VerifiedAccessEndpointSseSpecification?> SseSpecification { get; private set; } = null!;

        /// <summary>
        /// The endpoint status.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.VerifiedAccessEndpointTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of the AWS Verified Access endpoint.
        /// </summary>
        [Output("verifiedAccessEndpointId")]
        public Output<string> VerifiedAccessEndpointId { get; private set; } = null!;

        /// <summary>
        /// The ID of the AWS Verified Access group.
        /// </summary>
        [Output("verifiedAccessGroupId")]
        public Output<string> VerifiedAccessGroupId { get; private set; } = null!;

        /// <summary>
        /// The ID of the AWS Verified Access instance.
        /// </summary>
        [Output("verifiedAccessInstanceId")]
        public Output<string> VerifiedAccessInstanceId { get; private set; } = null!;


        /// <summary>
        /// Create a VerifiedAccessEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VerifiedAccessEndpoint(string name, VerifiedAccessEndpointArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ec2:VerifiedAccessEndpoint", name, args ?? new VerifiedAccessEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VerifiedAccessEndpoint(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:VerifiedAccessEndpoint", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "applicationDomain",
                    "attachmentType",
                    "domainCertificateArn",
                    "endpointDomainPrefix",
                    "endpointType",
                    "loadBalancerOptions.loadBalancerArn",
                    "networkInterfaceOptions.networkInterfaceId",
                    "securityGroupIds[*]",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VerifiedAccessEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VerifiedAccessEndpoint Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VerifiedAccessEndpoint(name, id, options);
        }
    }

    public sealed class VerifiedAccessEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The DNS name for users to reach your application.
        /// </summary>
        [Input("applicationDomain", required: true)]
        public Input<string> ApplicationDomain { get; set; } = null!;

        /// <summary>
        /// The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.
        /// </summary>
        [Input("attachmentType", required: true)]
        public Input<string> AttachmentType { get; set; } = null!;

        /// <summary>
        /// A description for the AWS Verified Access endpoint.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ARN of a public TLS/SSL certificate imported into or created with ACM.
        /// </summary>
        [Input("domainCertificateArn", required: true)]
        public Input<string> DomainCertificateArn { get; set; } = null!;

        /// <summary>
        /// A custom identifier that gets prepended to a DNS name that is generated for the endpoint.
        /// </summary>
        [Input("endpointDomainPrefix", required: true)]
        public Input<string> EndpointDomainPrefix { get; set; } = null!;

        /// <summary>
        /// The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.
        /// </summary>
        [Input("endpointType", required: true)]
        public Input<string> EndpointType { get; set; } = null!;

        /// <summary>
        /// The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.
        /// </summary>
        [Input("loadBalancerOptions")]
        public Input<Inputs.VerifiedAccessEndpointLoadBalancerOptionsArgs>? LoadBalancerOptions { get; set; }

        /// <summary>
        /// The options for network-interface type endpoint.
        /// </summary>
        [Input("networkInterfaceOptions")]
        public Input<Inputs.VerifiedAccessEndpointNetworkInterfaceOptionsArgs>? NetworkInterfaceOptions { get; set; }

        /// <summary>
        /// The AWS Verified Access policy document.
        /// </summary>
        [Input("policyDocument")]
        public Input<string>? PolicyDocument { get; set; }

        /// <summary>
        /// The status of the Verified Access policy.
        /// </summary>
        [Input("policyEnabled")]
        public Input<bool>? PolicyEnabled { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The IDs of the security groups for the endpoint.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The configuration options for customer provided KMS encryption.
        /// </summary>
        [Input("sseSpecification")]
        public Input<Inputs.VerifiedAccessEndpointSseSpecificationArgs>? SseSpecification { get; set; }

        [Input("tags")]
        private InputList<Inputs.VerifiedAccessEndpointTagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public InputList<Inputs.VerifiedAccessEndpointTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VerifiedAccessEndpointTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the AWS Verified Access group.
        /// </summary>
        [Input("verifiedAccessGroupId", required: true)]
        public Input<string> VerifiedAccessGroupId { get; set; } = null!;

        public VerifiedAccessEndpointArgs()
        {
        }
        public static new VerifiedAccessEndpointArgs Empty => new VerifiedAccessEndpointArgs();
    }
}
