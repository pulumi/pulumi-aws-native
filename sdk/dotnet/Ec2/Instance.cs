// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ec2
{
    /// <summary>
    /// Resource Type definition for AWS::EC2::Instance
    /// </summary>
    [AwsNativeResourceType("aws-native:ec2:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This property is reserved for internal use. If you use it, the stack fails with this error: Bad property set: [Testing this property] (Service: AmazonEC2; Status Code: 400; Error Code: InvalidParameterCombination; Request ID: 0XXXXXX-49c7-4b40-8bcc-76885dcXXXXX).
        /// </summary>
        [Output("additionalInfo")]
        public Output<string?> AdditionalInfo { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the instance is associated with a dedicated host. If you want the instance to always restart on the same host on which it was launched, specify host. If you want the instance to restart on any available host, but try to launch onto the last host it ran on (on a best-effort basis), specify default.
        /// </summary>
        [Output("affinity")]
        public Output<Pulumi.AwsNative.Ec2.InstanceAffinity?> Affinity { get; private set; } = null!;

        /// <summary>
        /// The Availability Zone of the instance.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string?> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The block device mapping entries that defines the block devices to attach to the instance at launch.
        /// </summary>
        [Output("blockDeviceMappings")]
        public Output<ImmutableArray<Outputs.InstanceBlockDeviceMapping>> BlockDeviceMappings { get; private set; } = null!;

        /// <summary>
        /// The CPU options for the instance.
        /// </summary>
        [Output("cpuOptions")]
        public Output<Outputs.CpuOptionsProperties?> CpuOptions { get; private set; } = null!;

        /// <summary>
        /// The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.
        /// </summary>
        [Output("creditSpecification")]
        public Output<Outputs.CreditSpecificationProperties?> CreditSpecification { get; private set; } = null!;

        /// <summary>
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can.
        /// </summary>
        [Output("disableApiTermination")]
        public Output<bool?> DisableApiTermination { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        /// </summary>
        [Output("ebsOptimized")]
        public Output<bool?> EbsOptimized { get; private set; } = null!;

        /// <summary>
        /// An elastic GPU to associate with the instance.
        /// </summary>
        [Output("elasticGpuSpecifications")]
        public Output<ImmutableArray<Outputs.InstanceElasticGpuSpecification>> ElasticGpuSpecifications { get; private set; } = null!;

        /// <summary>
        /// An elastic inference accelerator to associate with the instance.
        /// </summary>
        [Output("elasticInferenceAccelerators")]
        public Output<ImmutableArray<Outputs.InstanceElasticInferenceAccelerator>> ElasticInferenceAccelerators { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the instance is enabled for AWS Nitro Enclaves.
        /// </summary>
        [Output("enclaveOptions")]
        public Output<Outputs.EnclaveOptionsProperties?> EnclaveOptions { get; private set; } = null!;

        /// <summary>
        /// Indicates whether an instance is enabled for hibernation.
        /// </summary>
        [Output("hibernationOptions")]
        public Output<Outputs.HibernationOptionsProperties?> HibernationOptions { get; private set; } = null!;

        /// <summary>
        /// If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with. If you don't specify an ID, Amazon EC2 launches the instance onto any available, compatible dedicated host in your account.
        /// </summary>
        [Output("hostId")]
        public Output<string?> HostId { get; private set; } = null!;

        /// <summary>
        /// The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.
        /// </summary>
        [Output("hostResourceGroupArn")]
        public Output<string?> HostResourceGroupArn { get; private set; } = null!;

        /// <summary>
        /// The IAM instance profile.
        /// </summary>
        [Output("iamInstanceProfile")]
        public Output<string?> IamInstanceProfile { get; private set; } = null!;

        /// <summary>
        /// The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
        /// </summary>
        [Output("imageId")]
        public Output<string?> ImageId { get; private set; } = null!;

        /// <summary>
        /// The EC2 Instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        /// </summary>
        [Output("instanceInitiatedShutdownBehavior")]
        public Output<string?> InstanceInitiatedShutdownBehavior { get; private set; } = null!;

        /// <summary>
        /// The instance type.
        /// </summary>
        [Output("instanceType")]
        public Output<string?> InstanceType { get; private set; } = null!;

        /// <summary>
        /// [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
        /// </summary>
        [Output("ipv6AddressCount")]
        public Output<int?> Ipv6AddressCount { get; private set; } = null!;

        /// <summary>
        /// [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface.
        /// </summary>
        [Output("ipv6Addresses")]
        public Output<ImmutableArray<Outputs.InstanceIpv6Address>> Ipv6Addresses { get; private set; } = null!;

        /// <summary>
        /// The ID of the kernel.
        /// </summary>
        [Output("kernelId")]
        public Output<string?> KernelId { get; private set; } = null!;

        /// <summary>
        /// The name of the key pair.
        /// </summary>
        [Output("keyName")]
        public Output<string?> KeyName { get; private set; } = null!;

        /// <summary>
        /// The launch template to use to launch the instances.
        /// </summary>
        [Output("launchTemplate")]
        public Output<Outputs.InstanceLaunchTemplateSpecification?> LaunchTemplate { get; private set; } = null!;

        /// <summary>
        /// The license configurations.
        /// </summary>
        [Output("licenseSpecifications")]
        public Output<ImmutableArray<Outputs.InstanceLicenseSpecification>> LicenseSpecifications { get; private set; } = null!;

        /// <summary>
        /// Specifies whether detailed monitoring is enabled for the instance.
        /// </summary>
        [Output("monitoring")]
        public Output<bool?> Monitoring { get; private set; } = null!;

        /// <summary>
        /// The network interfaces to associate with the instance.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.InstanceNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// The name of an existing placement group that you want to launch the instance into (cluster | partition | spread).
        /// </summary>
        [Output("placementGroupName")]
        public Output<string?> PlacementGroupName { get; private set; } = null!;

        /// <summary>
        /// The private DNS name of the specified instance. For example: ip-10-24-34-0.ec2.internal.
        /// </summary>
        [Output("privateDnsName")]
        public Output<string> PrivateDnsName { get; private set; } = null!;

        /// <summary>
        /// The options for the instance hostname.
        /// </summary>
        [Output("privateDnsNameOptions")]
        public Output<Outputs.InstancePrivateDnsNameOptions?> PrivateDnsNameOptions { get; private set; } = null!;

        /// <summary>
        /// The private IP address of the specified instance. For example: 10.24.34.0.
        /// </summary>
        [Output("privateIp")]
        public Output<string> PrivateIp { get; private set; } = null!;

        /// <summary>
        /// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.
        /// </summary>
        [Output("privateIpAddress")]
        public Output<string?> PrivateIpAddress { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to assign the tags from the instance to all of the volumes attached to the instance at launch. If you specify true and you assign tags to the instance, those tags are automatically assigned to all of the volumes that you attach to the instance at launch. If you specify false, those tags are not assigned to the attached volumes.
        /// </summary>
        [Output("propagateTagsToVolumeOnCreation")]
        public Output<bool?> PropagateTagsToVolumeOnCreation { get; private set; } = null!;

        /// <summary>
        /// The public DNS name of the specified instance. For example: ec2-107-20-50-45.compute-1.amazonaws.com.
        /// </summary>
        [Output("publicDnsName")]
        public Output<string> PublicDnsName { get; private set; } = null!;

        /// <summary>
        /// The public IP address of the specified instance. For example: 192.0.2.0.
        /// </summary>
        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        /// <summary>
        /// The ID of the RAM disk to select.
        /// </summary>
        [Output("ramdiskId")]
        public Output<string?> RamdiskId { get; private set; } = null!;

        /// <summary>
        /// The IDs of the security groups.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// the names of the security groups. For a nondefault VPC, you must use security group IDs instead.
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to enable an instance launched in a VPC to perform NAT.
        /// </summary>
        [Output("sourceDestCheck")]
        public Output<bool?> SourceDestCheck { get; private set; } = null!;

        /// <summary>
        /// The SSM document and parameter values in AWS Systems Manager to associate with this instance.
        /// </summary>
        [Output("ssmAssociations")]
        public Output<ImmutableArray<Outputs.InstanceSsmAssociation>> SsmAssociations { get; private set; } = null!;

        /// <summary>
        /// [EC2-VPC] The ID of the subnet to launch the instance into.
        /// </summary>
        [Output("subnetId")]
        public Output<string?> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The tags to add to the instance.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Pulumi.AwsNative.Outputs.Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
        /// </summary>
        [Output("tenancy")]
        public Output<string?> Tenancy { get; private set; } = null!;

        /// <summary>
        /// The user data to make available to the instance.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// The volumes to attach to the instance.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<Outputs.InstanceVolume>> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:ec2:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ec2:Instance", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "availabilityZone",
                    "cpuOptions",
                    "elasticGpuSpecifications[*]",
                    "elasticInferenceAccelerators[*]",
                    "enclaveOptions",
                    "hibernationOptions",
                    "hostResourceGroupArn",
                    "imageId",
                    "ipv6AddressCount",
                    "ipv6Addresses[*]",
                    "keyName",
                    "launchTemplate",
                    "licenseSpecifications[*]",
                    "networkInterfaces[*]",
                    "placementGroupName",
                    "privateIpAddress",
                    "securityGroups[*]",
                    "subnetId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This property is reserved for internal use. If you use it, the stack fails with this error: Bad property set: [Testing this property] (Service: AmazonEC2; Status Code: 400; Error Code: InvalidParameterCombination; Request ID: 0XXXXXX-49c7-4b40-8bcc-76885dcXXXXX).
        /// </summary>
        [Input("additionalInfo")]
        public Input<string>? AdditionalInfo { get; set; }

        /// <summary>
        /// Indicates whether the instance is associated with a dedicated host. If you want the instance to always restart on the same host on which it was launched, specify host. If you want the instance to restart on any available host, but try to launch onto the last host it ran on (on a best-effort basis), specify default.
        /// </summary>
        [Input("affinity")]
        public Input<Pulumi.AwsNative.Ec2.InstanceAffinity>? Affinity { get; set; }

        /// <summary>
        /// The Availability Zone of the instance.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("blockDeviceMappings")]
        private InputList<Inputs.InstanceBlockDeviceMappingArgs>? _blockDeviceMappings;

        /// <summary>
        /// The block device mapping entries that defines the block devices to attach to the instance at launch.
        /// </summary>
        public InputList<Inputs.InstanceBlockDeviceMappingArgs> BlockDeviceMappings
        {
            get => _blockDeviceMappings ?? (_blockDeviceMappings = new InputList<Inputs.InstanceBlockDeviceMappingArgs>());
            set => _blockDeviceMappings = value;
        }

        /// <summary>
        /// The CPU options for the instance.
        /// </summary>
        [Input("cpuOptions")]
        public Input<Inputs.CpuOptionsPropertiesArgs>? CpuOptions { get; set; }

        /// <summary>
        /// The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.
        /// </summary>
        [Input("creditSpecification")]
        public Input<Inputs.CreditSpecificationPropertiesArgs>? CreditSpecification { get; set; }

        /// <summary>
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can.
        /// </summary>
        [Input("disableApiTermination")]
        public Input<bool>? DisableApiTermination { get; set; }

        /// <summary>
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        /// </summary>
        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        [Input("elasticGpuSpecifications")]
        private InputList<Inputs.InstanceElasticGpuSpecificationArgs>? _elasticGpuSpecifications;

        /// <summary>
        /// An elastic GPU to associate with the instance.
        /// </summary>
        public InputList<Inputs.InstanceElasticGpuSpecificationArgs> ElasticGpuSpecifications
        {
            get => _elasticGpuSpecifications ?? (_elasticGpuSpecifications = new InputList<Inputs.InstanceElasticGpuSpecificationArgs>());
            set => _elasticGpuSpecifications = value;
        }

        [Input("elasticInferenceAccelerators")]
        private InputList<Inputs.InstanceElasticInferenceAcceleratorArgs>? _elasticInferenceAccelerators;

        /// <summary>
        /// An elastic inference accelerator to associate with the instance.
        /// </summary>
        public InputList<Inputs.InstanceElasticInferenceAcceleratorArgs> ElasticInferenceAccelerators
        {
            get => _elasticInferenceAccelerators ?? (_elasticInferenceAccelerators = new InputList<Inputs.InstanceElasticInferenceAcceleratorArgs>());
            set => _elasticInferenceAccelerators = value;
        }

        /// <summary>
        /// Indicates whether the instance is enabled for AWS Nitro Enclaves.
        /// </summary>
        [Input("enclaveOptions")]
        public Input<Inputs.EnclaveOptionsPropertiesArgs>? EnclaveOptions { get; set; }

        /// <summary>
        /// Indicates whether an instance is enabled for hibernation.
        /// </summary>
        [Input("hibernationOptions")]
        public Input<Inputs.HibernationOptionsPropertiesArgs>? HibernationOptions { get; set; }

        /// <summary>
        /// If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with. If you don't specify an ID, Amazon EC2 launches the instance onto any available, compatible dedicated host in your account.
        /// </summary>
        [Input("hostId")]
        public Input<string>? HostId { get; set; }

        /// <summary>
        /// The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.
        /// </summary>
        [Input("hostResourceGroupArn")]
        public Input<string>? HostResourceGroupArn { get; set; }

        /// <summary>
        /// The IAM instance profile.
        /// </summary>
        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        /// <summary>
        /// The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        /// </summary>
        [Input("instanceInitiatedShutdownBehavior")]
        public Input<string>? InstanceInitiatedShutdownBehavior { get; set; }

        /// <summary>
        /// The instance type.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
        /// </summary>
        [Input("ipv6AddressCount")]
        public Input<int>? Ipv6AddressCount { get; set; }

        [Input("ipv6Addresses")]
        private InputList<Inputs.InstanceIpv6AddressArgs>? _ipv6Addresses;

        /// <summary>
        /// [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface.
        /// </summary>
        public InputList<Inputs.InstanceIpv6AddressArgs> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<Inputs.InstanceIpv6AddressArgs>());
            set => _ipv6Addresses = value;
        }

        /// <summary>
        /// The ID of the kernel.
        /// </summary>
        [Input("kernelId")]
        public Input<string>? KernelId { get; set; }

        /// <summary>
        /// The name of the key pair.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// The launch template to use to launch the instances.
        /// </summary>
        [Input("launchTemplate")]
        public Input<Inputs.InstanceLaunchTemplateSpecificationArgs>? LaunchTemplate { get; set; }

        [Input("licenseSpecifications")]
        private InputList<Inputs.InstanceLicenseSpecificationArgs>? _licenseSpecifications;

        /// <summary>
        /// The license configurations.
        /// </summary>
        public InputList<Inputs.InstanceLicenseSpecificationArgs> LicenseSpecifications
        {
            get => _licenseSpecifications ?? (_licenseSpecifications = new InputList<Inputs.InstanceLicenseSpecificationArgs>());
            set => _licenseSpecifications = value;
        }

        /// <summary>
        /// Specifies whether detailed monitoring is enabled for the instance.
        /// </summary>
        [Input("monitoring")]
        public Input<bool>? Monitoring { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.InstanceNetworkInterfaceArgs>? _networkInterfaces;

        /// <summary>
        /// The network interfaces to associate with the instance.
        /// </summary>
        public InputList<Inputs.InstanceNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.InstanceNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        /// <summary>
        /// The name of an existing placement group that you want to launch the instance into (cluster | partition | spread).
        /// </summary>
        [Input("placementGroupName")]
        public Input<string>? PlacementGroupName { get; set; }

        /// <summary>
        /// The options for the instance hostname.
        /// </summary>
        [Input("privateDnsNameOptions")]
        public Input<Inputs.InstancePrivateDnsNameOptionsArgs>? PrivateDnsNameOptions { get; set; }

        /// <summary>
        /// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.
        /// </summary>
        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        /// <summary>
        /// Indicates whether to assign the tags from the instance to all of the volumes attached to the instance at launch. If you specify true and you assign tags to the instance, those tags are automatically assigned to all of the volumes that you attach to the instance at launch. If you specify false, those tags are not assigned to the attached volumes.
        /// </summary>
        [Input("propagateTagsToVolumeOnCreation")]
        public Input<bool>? PropagateTagsToVolumeOnCreation { get; set; }

        /// <summary>
        /// The ID of the RAM disk to select.
        /// </summary>
        [Input("ramdiskId")]
        public Input<string>? RamdiskId { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The IDs of the security groups.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// the names of the security groups. For a nondefault VPC, you must use security group IDs instead.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Specifies whether to enable an instance launched in a VPC to perform NAT.
        /// </summary>
        [Input("sourceDestCheck")]
        public Input<bool>? SourceDestCheck { get; set; }

        [Input("ssmAssociations")]
        private InputList<Inputs.InstanceSsmAssociationArgs>? _ssmAssociations;

        /// <summary>
        /// The SSM document and parameter values in AWS Systems Manager to associate with this instance.
        /// </summary>
        public InputList<Inputs.InstanceSsmAssociationArgs> SsmAssociations
        {
            get => _ssmAssociations ?? (_ssmAssociations = new InputList<Inputs.InstanceSsmAssociationArgs>());
            set => _ssmAssociations = value;
        }

        /// <summary>
        /// [EC2-VPC] The ID of the subnet to launch the instance into.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Pulumi.AwsNative.Inputs.TagArgs>? _tags;

        /// <summary>
        /// The tags to add to the instance.
        /// </summary>
        public InputList<Pulumi.AwsNative.Inputs.TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Pulumi.AwsNative.Inputs.TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
        /// </summary>
        [Input("tenancy")]
        public Input<string>? Tenancy { get; set; }

        /// <summary>
        /// The user data to make available to the instance.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("volumes")]
        private InputList<Inputs.InstanceVolumeArgs>? _volumes;

        /// <summary>
        /// The volumes to attach to the instance.
        /// </summary>
        public InputList<Inputs.InstanceVolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.InstanceVolumeArgs>());
            set => _volumes = value;
        }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }
}
