// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GameLiftStreams
{
    /// <summary>
    /// Definition of AWS::GameLiftStreams::Application Resource Type
    /// </summary>
    [AwsNativeResourceType("aws-native:gameliftstreams:Application")]
    public partial class Application : global::Pulumi.CustomResource
    {
        [Output("applicationLogOutputUri")]
        public Output<string?> ApplicationLogOutputUri { get; private set; } = null!;

        [Output("applicationLogPaths")]
        public Output<ImmutableArray<string>> ApplicationLogPaths { get; private set; } = null!;

        [Output("applicationSourceUri")]
        public Output<string> ApplicationSourceUri { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("executablePath")]
        public Output<string> ExecutablePath { get; private set; } = null!;

        [Output("runtimeEnvironment")]
        public Output<Outputs.ApplicationRuntimeEnvironment> RuntimeEnvironment { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:gameliftstreams:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:gameliftstreams:Application", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "applicationSourceUri",
                    "executablePath",
                    "runtimeEnvironment",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Application(name, id, options);
        }
    }

    public sealed class ApplicationArgs : global::Pulumi.ResourceArgs
    {
        [Input("applicationLogOutputUri")]
        public Input<string>? ApplicationLogOutputUri { get; set; }

        [Input("applicationLogPaths")]
        private InputList<string>? _applicationLogPaths;
        public InputList<string> ApplicationLogPaths
        {
            get => _applicationLogPaths ?? (_applicationLogPaths = new InputList<string>());
            set => _applicationLogPaths = value;
        }

        [Input("applicationSourceUri", required: true)]
        public Input<string> ApplicationSourceUri { get; set; } = null!;

        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("executablePath", required: true)]
        public Input<string> ExecutablePath { get; set; } = null!;

        [Input("runtimeEnvironment", required: true)]
        public Input<Inputs.ApplicationRuntimeEnvironmentArgs> RuntimeEnvironment { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ApplicationArgs()
        {
        }
        public static new ApplicationArgs Empty => new ApplicationArgs();
    }
}
