// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.DataZone
{
    public static class GetEnvironment
    {
        /// <summary>
        /// Definition of AWS::DataZone::Environment Resource Type
        /// </summary>
        public static Task<GetEnvironmentResult> InvokeAsync(GetEnvironmentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvironmentResult>("aws-native:datazone:getEnvironment", args ?? new GetEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::DataZone::Environment Resource Type
        /// </summary>
        public static Output<GetEnvironmentResult> Invoke(GetEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvironmentResult>("aws-native:datazone:getEnvironment", args ?? new GetEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the Amazon DataZone domain in which the environment is created.
        /// </summary>
        [Input("domainId", required: true)]
        public string DomainId { get; set; } = null!;

        /// <summary>
        /// The ID of the Amazon DataZone environment.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetEnvironmentArgs()
        {
        }
        public static new GetEnvironmentArgs Empty => new GetEnvironmentArgs();
    }

    public sealed class GetEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identifier of the Amazon DataZone domain in which the environment is created.
        /// </summary>
        [Input("domainId", required: true)]
        public Input<string> DomainId { get; set; } = null!;

        /// <summary>
        /// The ID of the Amazon DataZone environment.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetEnvironmentInvokeArgs()
        {
        }
        public static new GetEnvironmentInvokeArgs Empty => new GetEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvironmentResult
    {
        /// <summary>
        /// The AWS account in which the Amazon DataZone environment is created.
        /// </summary>
        public readonly string? AwsAccountId;
        /// <summary>
        /// The AWS region in which the Amazon DataZone environment is created.
        /// </summary>
        public readonly string? AwsAccountRegion;
        /// <summary>
        /// The timestamp of when the environment was created.
        /// </summary>
        public readonly string? CreatedAt;
        /// <summary>
        /// The Amazon DataZone user who created the environment.
        /// </summary>
        public readonly string? CreatedBy;
        /// <summary>
        /// The description of the Amazon DataZone environment.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The identifier of the Amazon DataZone domain in which the environment is created.
        /// </summary>
        public readonly string? DomainId;
        /// <summary>
        /// The ID of the blueprint with which the Amazon DataZone environment was created.
        /// </summary>
        public readonly string? EnvironmentBlueprintId;
        /// <summary>
        /// The ID of the environment profile with which the Amazon DataZone environment was created.
        /// </summary>
        public readonly string? EnvironmentProfileId;
        /// <summary>
        /// The glossary terms that can be used in the Amazon DataZone environment.
        /// </summary>
        public readonly ImmutableArray<string> GlossaryTerms;
        /// <summary>
        /// The ID of the Amazon DataZone environment.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The name of the environment.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The ID of the Amazon DataZone project in which the environment is created.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The provider of the Amazon DataZone environment.
        /// </summary>
        public readonly string? Provider;
        /// <summary>
        /// The status of the Amazon DataZone environment.
        /// </summary>
        public readonly Pulumi.AwsNative.DataZone.EnvironmentStatus? Status;
        /// <summary>
        /// The timestamp of when the environment was updated.
        /// </summary>
        public readonly string? UpdatedAt;

        [OutputConstructor]
        private GetEnvironmentResult(
            string? awsAccountId,

            string? awsAccountRegion,

            string? createdAt,

            string? createdBy,

            string? description,

            string? domainId,

            string? environmentBlueprintId,

            string? environmentProfileId,

            ImmutableArray<string> glossaryTerms,

            string? id,

            string? name,

            string? projectId,

            string? provider,

            Pulumi.AwsNative.DataZone.EnvironmentStatus? status,

            string? updatedAt)
        {
            AwsAccountId = awsAccountId;
            AwsAccountRegion = awsAccountRegion;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            Description = description;
            DomainId = domainId;
            EnvironmentBlueprintId = environmentBlueprintId;
            EnvironmentProfileId = environmentProfileId;
            GlossaryTerms = glossaryTerms;
            Id = id;
            Name = name;
            ProjectId = projectId;
            Provider = provider;
            Status = status;
            UpdatedAt = updatedAt;
        }
    }
}
