// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.DataZone
{
    /// <summary>
    /// Authentication Type
    /// </summary>
    [EnumType]
    public readonly struct ConnectionAuthenticationType : IEquatable<ConnectionAuthenticationType>
    {
        private readonly string _value;

        private ConnectionAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionAuthenticationType Basic { get; } = new ConnectionAuthenticationType("BASIC");
        public static ConnectionAuthenticationType Oauth2 { get; } = new ConnectionAuthenticationType("OAUTH2");
        public static ConnectionAuthenticationType Custom { get; } = new ConnectionAuthenticationType("CUSTOM");

        public static bool operator ==(ConnectionAuthenticationType left, ConnectionAuthenticationType right) => left.Equals(right);
        public static bool operator !=(ConnectionAuthenticationType left, ConnectionAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(ConnectionAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionAuthenticationType other && Equals(other);
        public bool Equals(ConnectionAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// OAuth2 Grant Type
    /// </summary>
    [EnumType]
    public readonly struct ConnectionOAuth2GrantType : IEquatable<ConnectionOAuth2GrantType>
    {
        private readonly string _value;

        private ConnectionOAuth2GrantType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectionOAuth2GrantType AuthorizationCode { get; } = new ConnectionOAuth2GrantType("AUTHORIZATION_CODE");
        public static ConnectionOAuth2GrantType ClientCredentials { get; } = new ConnectionOAuth2GrantType("CLIENT_CREDENTIALS");
        public static ConnectionOAuth2GrantType JwtBearer { get; } = new ConnectionOAuth2GrantType("JWT_BEARER");

        public static bool operator ==(ConnectionOAuth2GrantType left, ConnectionOAuth2GrantType right) => left.Equals(right);
        public static bool operator !=(ConnectionOAuth2GrantType left, ConnectionOAuth2GrantType right) => !left.Equals(right);

        public static explicit operator string(ConnectionOAuth2GrantType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectionOAuth2GrantType other && Equals(other);
        public bool Equals(ConnectionOAuth2GrantType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether the data source is enabled.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceEnableSetting : IEquatable<DataSourceEnableSetting>
    {
        private readonly string _value;

        private DataSourceEnableSetting(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceEnableSetting Enabled { get; } = new DataSourceEnableSetting("ENABLED");
        public static DataSourceEnableSetting Disabled { get; } = new DataSourceEnableSetting("DISABLED");

        public static bool operator ==(DataSourceEnableSetting left, DataSourceEnableSetting right) => left.Equals(right);
        public static bool operator !=(DataSourceEnableSetting left, DataSourceEnableSetting right) => !left.Equals(right);

        public static explicit operator string(DataSourceEnableSetting value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceEnableSetting other && Equals(other);
        public bool Equals(DataSourceEnableSetting other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The search filter expression type.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceFilterExpressionType : IEquatable<DataSourceFilterExpressionType>
    {
        private readonly string _value;

        private DataSourceFilterExpressionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceFilterExpressionType Include { get; } = new DataSourceFilterExpressionType("INCLUDE");
        public static DataSourceFilterExpressionType Exclude { get; } = new DataSourceFilterExpressionType("EXCLUDE");

        public static bool operator ==(DataSourceFilterExpressionType left, DataSourceFilterExpressionType right) => left.Equals(right);
        public static bool operator !=(DataSourceFilterExpressionType left, DataSourceFilterExpressionType right) => !left.Equals(right);

        public static explicit operator string(DataSourceFilterExpressionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceFilterExpressionType other && Equals(other);
        public bool Equals(DataSourceFilterExpressionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the data source.
    /// </summary>
    [EnumType]
    public readonly struct DataSourceStatus : IEquatable<DataSourceStatus>
    {
        private readonly string _value;

        private DataSourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceStatus Creating { get; } = new DataSourceStatus("CREATING");
        public static DataSourceStatus FailedCreation { get; } = new DataSourceStatus("FAILED_CREATION");
        public static DataSourceStatus Ready { get; } = new DataSourceStatus("READY");
        public static DataSourceStatus Updating { get; } = new DataSourceStatus("UPDATING");
        public static DataSourceStatus FailedUpdate { get; } = new DataSourceStatus("FAILED_UPDATE");
        public static DataSourceStatus Running { get; } = new DataSourceStatus("RUNNING");
        public static DataSourceStatus Deleting { get; } = new DataSourceStatus("DELETING");
        public static DataSourceStatus FailedDeletion { get; } = new DataSourceStatus("FAILED_DELETION");

        public static bool operator ==(DataSourceStatus left, DataSourceStatus right) => left.Equals(right);
        public static bool operator !=(DataSourceStatus left, DataSourceStatus right) => !left.Equals(right);

        public static explicit operator string(DataSourceStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceStatus other && Equals(other);
        public bool Equals(DataSourceStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of single sign-on in Amazon DataZone.
    /// </summary>
    [EnumType]
    public readonly struct DomainAuthType : IEquatable<DomainAuthType>
    {
        private readonly string _value;

        private DomainAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainAuthType IamIdc { get; } = new DomainAuthType("IAM_IDC");
        public static DomainAuthType Disabled { get; } = new DomainAuthType("DISABLED");

        public static bool operator ==(DomainAuthType left, DomainAuthType right) => left.Equals(right);
        public static bool operator !=(DomainAuthType left, DomainAuthType right) => !left.Equals(right);

        public static explicit operator string(DomainAuthType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainAuthType other && Equals(other);
        public bool Equals(DomainAuthType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the Amazon DataZone domain.
    /// </summary>
    [EnumType]
    public readonly struct DomainStatus : IEquatable<DomainStatus>
    {
        private readonly string _value;

        private DomainStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainStatus Creating { get; } = new DomainStatus("CREATING");
        public static DomainStatus Available { get; } = new DomainStatus("AVAILABLE");
        public static DomainStatus CreationFailed { get; } = new DomainStatus("CREATION_FAILED");
        public static DomainStatus Deleting { get; } = new DomainStatus("DELETING");
        public static DomainStatus Deleted { get; } = new DomainStatus("DELETED");
        public static DomainStatus DeletionFailed { get; } = new DomainStatus("DELETION_FAILED");

        public static bool operator ==(DomainStatus left, DomainStatus right) => left.Equals(right);
        public static bool operator !=(DomainStatus left, DomainStatus right) => !left.Equals(right);

        public static explicit operator string(DomainStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainStatus other && Equals(other);
        public bool Equals(DomainStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The single sign-on user assignment in Amazon DataZone.
    /// </summary>
    [EnumType]
    public readonly struct DomainUserAssignment : IEquatable<DomainUserAssignment>
    {
        private readonly string _value;

        private DomainUserAssignment(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainUserAssignment Automatic { get; } = new DomainUserAssignment("AUTOMATIC");
        public static DomainUserAssignment Manual { get; } = new DomainUserAssignment("MANUAL");

        public static bool operator ==(DomainUserAssignment left, DomainUserAssignment right) => left.Equals(right);
        public static bool operator !=(DomainUserAssignment left, DomainUserAssignment right) => !left.Equals(right);

        public static explicit operator string(DomainUserAssignment value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainUserAssignment other && Equals(other);
        public bool Equals(DomainUserAssignment other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The version of the domain.
    /// </summary>
    [EnumType]
    public readonly struct DomainVersion : IEquatable<DomainVersion>
    {
        private readonly string _value;

        private DomainVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainVersion V1 { get; } = new DomainVersion("V1");
        public static DomainVersion V2 { get; } = new DomainVersion("V2");

        public static bool operator ==(DomainVersion left, DomainVersion right) => left.Equals(right);
        public static bool operator !=(DomainVersion left, DomainVersion right) => !left.Equals(right);

        public static explicit operator string(DomainVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainVersion other && Equals(other);
        public bool Equals(DomainVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the Amazon DataZone environment.
    /// </summary>
    [EnumType]
    public readonly struct EnvironmentStatus : IEquatable<EnvironmentStatus>
    {
        private readonly string _value;

        private EnvironmentStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvironmentStatus Active { get; } = new EnvironmentStatus("ACTIVE");
        public static EnvironmentStatus Creating { get; } = new EnvironmentStatus("CREATING");
        public static EnvironmentStatus Updating { get; } = new EnvironmentStatus("UPDATING");
        public static EnvironmentStatus Deleting { get; } = new EnvironmentStatus("DELETING");
        public static EnvironmentStatus CreateFailed { get; } = new EnvironmentStatus("CREATE_FAILED");
        public static EnvironmentStatus UpdateFailed { get; } = new EnvironmentStatus("UPDATE_FAILED");
        public static EnvironmentStatus DeleteFailed { get; } = new EnvironmentStatus("DELETE_FAILED");
        public static EnvironmentStatus ValidationFailed { get; } = new EnvironmentStatus("VALIDATION_FAILED");
        public static EnvironmentStatus Suspended { get; } = new EnvironmentStatus("SUSPENDED");
        public static EnvironmentStatus Disabled { get; } = new EnvironmentStatus("DISABLED");
        public static EnvironmentStatus Expired { get; } = new EnvironmentStatus("EXPIRED");
        public static EnvironmentStatus Deleted { get; } = new EnvironmentStatus("DELETED");
        public static EnvironmentStatus Inaccessible { get; } = new EnvironmentStatus("INACCESSIBLE");

        public static bool operator ==(EnvironmentStatus left, EnvironmentStatus right) => left.Equals(right);
        public static bool operator !=(EnvironmentStatus left, EnvironmentStatus right) => !left.Equals(right);

        public static explicit operator string(EnvironmentStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvironmentStatus other && Equals(other);
        public bool Equals(EnvironmentStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the group profile.
    /// </summary>
    [EnumType]
    public readonly struct GroupProfileStatus : IEquatable<GroupProfileStatus>
    {
        private readonly string _value;

        private GroupProfileStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GroupProfileStatus Assigned { get; } = new GroupProfileStatus("ASSIGNED");
        public static GroupProfileStatus NotAssigned { get; } = new GroupProfileStatus("NOT_ASSIGNED");

        public static bool operator ==(GroupProfileStatus left, GroupProfileStatus right) => left.Equals(right);
        public static bool operator !=(GroupProfileStatus left, GroupProfileStatus right) => !left.Equals(right);

        public static explicit operator string(GroupProfileStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GroupProfileStatus other && Equals(other);
        public bool Equals(GroupProfileStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ProjectMembershipUserDesignation : IEquatable<ProjectMembershipUserDesignation>
    {
        private readonly string _value;

        private ProjectMembershipUserDesignation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProjectMembershipUserDesignation ProjectOwner { get; } = new ProjectMembershipUserDesignation("PROJECT_OWNER");
        public static ProjectMembershipUserDesignation ProjectContributor { get; } = new ProjectMembershipUserDesignation("PROJECT_CONTRIBUTOR");
        public static ProjectMembershipUserDesignation ProjectCatalogViewer { get; } = new ProjectMembershipUserDesignation("PROJECT_CATALOG_VIEWER");
        public static ProjectMembershipUserDesignation ProjectCatalogConsumer { get; } = new ProjectMembershipUserDesignation("PROJECT_CATALOG_CONSUMER");
        public static ProjectMembershipUserDesignation ProjectCatalogSteward { get; } = new ProjectMembershipUserDesignation("PROJECT_CATALOG_STEWARD");

        public static bool operator ==(ProjectMembershipUserDesignation left, ProjectMembershipUserDesignation right) => left.Equals(right);
        public static bool operator !=(ProjectMembershipUserDesignation left, ProjectMembershipUserDesignation right) => !left.Equals(right);

        public static explicit operator string(ProjectMembershipUserDesignation value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProjectMembershipUserDesignation other && Equals(other);
        public bool Equals(ProjectMembershipUserDesignation other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the user profile.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileStatus : IEquatable<UserProfileStatus>
    {
        private readonly string _value;

        private UserProfileStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileStatus Assigned { get; } = new UserProfileStatus("ASSIGNED");
        public static UserProfileStatus NotAssigned { get; } = new UserProfileStatus("NOT_ASSIGNED");
        public static UserProfileStatus Activated { get; } = new UserProfileStatus("ACTIVATED");
        public static UserProfileStatus Deactivated { get; } = new UserProfileStatus("DEACTIVATED");

        public static bool operator ==(UserProfileStatus left, UserProfileStatus right) => left.Equals(right);
        public static bool operator !=(UserProfileStatus left, UserProfileStatus right) => !left.Equals(right);

        public static explicit operator string(UserProfileStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileStatus other && Equals(other);
        public bool Equals(UserProfileStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the user profile.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileType : IEquatable<UserProfileType>
    {
        private readonly string _value;

        private UserProfileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileType Iam { get; } = new UserProfileType("IAM");
        public static UserProfileType Sso { get; } = new UserProfileType("SSO");

        public static bool operator ==(UserProfileType left, UserProfileType right) => left.Equals(right);
        public static bool operator !=(UserProfileType left, UserProfileType right) => !left.Equals(right);

        public static explicit operator string(UserProfileType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileType other && Equals(other);
        public bool Equals(UserProfileType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the user.
    /// </summary>
    [EnumType]
    public readonly struct UserProfileUserType : IEquatable<UserProfileUserType>
    {
        private readonly string _value;

        private UserProfileUserType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserProfileUserType IamUser { get; } = new UserProfileUserType("IAM_USER");
        public static UserProfileUserType IamRole { get; } = new UserProfileUserType("IAM_ROLE");
        public static UserProfileUserType SsoUser { get; } = new UserProfileUserType("SSO_USER");

        public static bool operator ==(UserProfileUserType left, UserProfileUserType right) => left.Equals(right);
        public static bool operator !=(UserProfileUserType left, UserProfileUserType right) => !left.Equals(right);

        public static explicit operator string(UserProfileUserType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserProfileUserType other && Equals(other);
        public bool Equals(UserProfileUserType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
