// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.DataZone
{
    /// <summary>
    /// A domain unit enables you to easily organize your assets and other domain entities under specific business units and teams.
    /// </summary>
    [AwsNativeResourceType("aws-native:datazone:DomainUnit")]
    public partial class DomainUnit : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the domain unit.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which the domain unit was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the domain unit.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the domain where the domain unit was created.
        /// </summary>
        [Output("domainId")]
        public Output<string> DomainId { get; private set; } = null!;

        /// <summary>
        /// The ID of the domain where you want to create a domain unit.
        /// </summary>
        [Output("domainIdentifier")]
        public Output<string> DomainIdentifier { get; private set; } = null!;

        /// <summary>
        /// The identifier of the domain unit that you want to get.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// The timestamp at which the domain unit was last updated.
        /// </summary>
        [Output("lastUpdatedAt")]
        public Output<string> LastUpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The name of the domain unit.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the parent domain unit.
        /// </summary>
        [Output("parentDomainUnitId")]
        public Output<string> ParentDomainUnitId { get; private set; } = null!;

        /// <summary>
        /// The ID of the parent domain unit.
        /// </summary>
        [Output("parentDomainUnitIdentifier")]
        public Output<string> ParentDomainUnitIdentifier { get; private set; } = null!;


        /// <summary>
        /// Create a DomainUnit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainUnit(string name, DomainUnitArgs args, CustomResourceOptions? options = null)
            : base("aws-native:datazone:DomainUnit", name, args ?? new DomainUnitArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainUnit(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:datazone:DomainUnit", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "domainIdentifier",
                    "parentDomainUnitIdentifier",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainUnit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainUnit Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DomainUnit(name, id, options);
        }
    }

    public sealed class DomainUnitArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the domain unit.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the domain where you want to create a domain unit.
        /// </summary>
        [Input("domainIdentifier", required: true)]
        public Input<string> DomainIdentifier { get; set; } = null!;

        /// <summary>
        /// The name of the domain unit.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the parent domain unit.
        /// </summary>
        [Input("parentDomainUnitIdentifier", required: true)]
        public Input<string> ParentDomainUnitIdentifier { get; set; } = null!;

        public DomainUnitArgs()
        {
        }
        public static new DomainUnitArgs Empty => new DomainUnitArgs();
    }
}
