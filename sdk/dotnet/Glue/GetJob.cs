// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Glue
{
    public static class GetJob
    {
        /// <summary>
        /// Resource Type definition for AWS::Glue::Job
        /// </summary>
        public static Task<GetJobResult> InvokeAsync(GetJobArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetJobResult>("aws-native:glue:getJob", args ?? new GetJobArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Glue::Job
        /// </summary>
        public static Output<GetJobResult> Invoke(GetJobInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetJobResult>("aws-native:glue:getJob", args ?? new GetJobInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Glue::Job
        /// </summary>
        public static Output<GetJobResult> Invoke(GetJobInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetJobResult>("aws-native:glue:getJob", args ?? new GetJobInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetJobArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name you assign to the job definition
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetJobArgs()
        {
        }
        public static new GetJobArgs Empty => new GetJobArgs();
    }

    public sealed class GetJobInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name you assign to the job definition
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetJobInvokeArgs()
        {
        }
        public static new GetJobInvokeArgs Empty => new GetJobInvokeArgs();
    }


    [OutputType]
    public sealed class GetJobResult
    {
        /// <summary>
        /// The number of capacity units that are allocated to this job.
        /// </summary>
        public readonly double? AllocatedCapacity;
        /// <summary>
        /// The code that executes a job.
        /// </summary>
        public readonly Outputs.JobCommand? Command;
        /// <summary>
        /// Specifies the connections used by a job
        /// </summary>
        public readonly Outputs.JobConnectionsList? Connections;
        /// <summary>
        /// The default arguments for this job, specified as name-value pairs.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? DefaultArguments;
        /// <summary>
        /// A description of the job.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Indicates whether the job is run with a standard or flexible execution class.
        /// </summary>
        public readonly string? ExecutionClass;
        /// <summary>
        /// The maximum number of concurrent runs that are allowed for this job.
        /// </summary>
        public readonly Outputs.JobExecutionProperty? ExecutionProperty;
        /// <summary>
        /// Glue version determines the versions of Apache Spark and Python that AWS Glue supports.
        /// </summary>
        public readonly string? GlueVersion;
        /// <summary>
        /// Property description not available.
        /// </summary>
        public readonly string? JobMode;
        /// <summary>
        /// Property description not available.
        /// </summary>
        public readonly bool? JobRunQueuingEnabled;
        /// <summary>
        /// This field is reserved for future use.
        /// </summary>
        public readonly string? LogUri;
        /// <summary>
        /// Property description not available.
        /// </summary>
        public readonly string? MaintenanceWindow;
        /// <summary>
        /// The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs.
        /// </summary>
        public readonly double? MaxCapacity;
        /// <summary>
        /// The maximum number of times to retry this job after a JobRun fails
        /// </summary>
        public readonly double? MaxRetries;
        /// <summary>
        /// Non-overridable arguments for this job, specified as name-value pairs.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? NonOverridableArguments;
        /// <summary>
        /// Specifies configuration properties of a notification.
        /// </summary>
        public readonly Outputs.JobNotificationProperty? NotificationProperty;
        /// <summary>
        /// The number of workers of a defined workerType that are allocated when a job runs.
        /// </summary>
        public readonly int? NumberOfWorkers;
        /// <summary>
        /// The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
        /// </summary>
        public readonly string? Role;
        /// <summary>
        /// The name of the SecurityConfiguration structure to be used with this job.
        /// </summary>
        public readonly string? SecurityConfiguration;
        /// <summary>
        /// The tags to use with this job.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? Tags;
        /// <summary>
        /// The maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status.
        /// </summary>
        public readonly int? Timeout;
        /// <summary>
        /// TThe type of predefined worker that is allocated when a job runs.
        /// </summary>
        public readonly Pulumi.AwsNative.Glue.JobWorkerType? WorkerType;

        [OutputConstructor]
        private GetJobResult(
            double? allocatedCapacity,

            Outputs.JobCommand? command,

            Outputs.JobConnectionsList? connections,

            object? defaultArguments,

            string? description,

            string? executionClass,

            Outputs.JobExecutionProperty? executionProperty,

            string? glueVersion,

            string? jobMode,

            bool? jobRunQueuingEnabled,

            string? logUri,

            string? maintenanceWindow,

            double? maxCapacity,

            double? maxRetries,

            object? nonOverridableArguments,

            Outputs.JobNotificationProperty? notificationProperty,

            int? numberOfWorkers,

            string? role,

            string? securityConfiguration,

            object? tags,

            int? timeout,

            Pulumi.AwsNative.Glue.JobWorkerType? workerType)
        {
            AllocatedCapacity = allocatedCapacity;
            Command = command;
            Connections = connections;
            DefaultArguments = defaultArguments;
            Description = description;
            ExecutionClass = executionClass;
            ExecutionProperty = executionProperty;
            GlueVersion = glueVersion;
            JobMode = jobMode;
            JobRunQueuingEnabled = jobRunQueuingEnabled;
            LogUri = logUri;
            MaintenanceWindow = maintenanceWindow;
            MaxCapacity = maxCapacity;
            MaxRetries = maxRetries;
            NonOverridableArguments = nonOverridableArguments;
            NotificationProperty = notificationProperty;
            NumberOfWorkers = numberOfWorkers;
            Role = role;
            SecurityConfiguration = securityConfiguration;
            Tags = tags;
            Timeout = timeout;
            WorkerType = workerType;
        }
    }
}
