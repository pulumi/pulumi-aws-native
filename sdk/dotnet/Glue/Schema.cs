// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Glue
{
    /// <summary>
    /// This resource represents a schema of Glue Schema Registry.
    /// </summary>
    [AwsNativeResourceType("aws-native:glue:Schema")]
    public partial class Schema : Pulumi.CustomResource
    {
        /// <summary>
        /// Amazon Resource Name for the Schema.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("checkpointVersion")]
        public Output<Outputs.SchemaVersion?> CheckpointVersion { get; private set; } = null!;

        /// <summary>
        /// Compatibility setting for the schema.
        /// </summary>
        [Output("compatibility")]
        public Output<Pulumi.AwsNative.Glue.SchemaCompatibility> Compatibility { get; private set; } = null!;

        /// <summary>
        /// Data format name to use for the schema. Accepted values: 'AVRO', 'JSON'
        /// </summary>
        [Output("dataFormat")]
        public Output<Pulumi.AwsNative.Glue.SchemaDataFormat> DataFormat { get; private set; } = null!;

        /// <summary>
        /// A description of the schema. If description is not provided, there will not be any default value for this.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Represents the version ID associated with the initial schema version.
        /// </summary>
        [Output("initialSchemaVersionId")]
        public Output<string> InitialSchemaVersionId { get; private set; } = null!;

        /// <summary>
        /// Name of the schema.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("registry")]
        public Output<Outputs.SchemaRegistry?> Registry { get; private set; } = null!;

        /// <summary>
        /// Definition for the initial schema version in plain-text.
        /// </summary>
        [Output("schemaDefinition")]
        public Output<string> SchemaDefinition { get; private set; } = null!;

        /// <summary>
        /// List of tags to tag the schema
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.SchemaTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Schema resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Schema(string name, SchemaArgs args, CustomResourceOptions? options = null)
            : base("aws-native:glue:Schema", name, args ?? new SchemaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Schema(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:glue:Schema", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Schema resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Schema Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Schema(name, id, options);
        }
    }

    public sealed class SchemaArgs : Pulumi.ResourceArgs
    {
        [Input("checkpointVersion")]
        public Input<Inputs.SchemaVersionArgs>? CheckpointVersion { get; set; }

        /// <summary>
        /// Compatibility setting for the schema.
        /// </summary>
        [Input("compatibility", required: true)]
        public Input<Pulumi.AwsNative.Glue.SchemaCompatibility> Compatibility { get; set; } = null!;

        /// <summary>
        /// Data format name to use for the schema. Accepted values: 'AVRO', 'JSON'
        /// </summary>
        [Input("dataFormat", required: true)]
        public Input<Pulumi.AwsNative.Glue.SchemaDataFormat> DataFormat { get; set; } = null!;

        /// <summary>
        /// A description of the schema. If description is not provided, there will not be any default value for this.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the schema.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("registry")]
        public Input<Inputs.SchemaRegistryArgs>? Registry { get; set; }

        /// <summary>
        /// Definition for the initial schema version in plain-text.
        /// </summary>
        [Input("schemaDefinition", required: true)]
        public Input<string> SchemaDefinition { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.SchemaTagArgs>? _tags;

        /// <summary>
        /// List of tags to tag the schema
        /// </summary>
        public InputList<Inputs.SchemaTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SchemaTagArgs>());
            set => _tags = value;
        }

        public SchemaArgs()
        {
        }
    }
}
