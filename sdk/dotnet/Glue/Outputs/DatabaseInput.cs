// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Glue.Outputs
{

    /// <summary>
    /// The structure used to create or update a database.
    /// </summary>
    [OutputType]
    public sealed class DatabaseInput
    {
        /// <summary>
        /// Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.
        /// </summary>
        public readonly ImmutableArray<Outputs.DatabasePrincipalPrivileges> CreateTableDefaultPermissions;
        /// <summary>
        /// A description of the database.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.
        /// </summary>
        public readonly Outputs.DatabaseFederatedDatabase? FederatedDatabase;
        /// <summary>
        /// The location of the database (for example, an HDFS path).
        /// </summary>
        public readonly string? LocationUri;
        /// <summary>
        /// The name of the database. For hive compatibility, this is folded to lowercase when it is stored.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// These key-value pairs define parameters and properties of the database.
        /// </summary>
        public readonly object? Parameters;
        /// <summary>
        /// A DatabaseIdentifier structure that describes a target database for resource linking.
        /// </summary>
        public readonly Outputs.DatabaseIdentifier? TargetDatabase;

        [OutputConstructor]
        private DatabaseInput(
            ImmutableArray<Outputs.DatabasePrincipalPrivileges> createTableDefaultPermissions,

            string? description,

            Outputs.DatabaseFederatedDatabase? federatedDatabase,

            string? locationUri,

            string? name,

            object? parameters,

            Outputs.DatabaseIdentifier? targetDatabase)
        {
            CreateTableDefaultPermissions = createTableDefaultPermissions;
            Description = description;
            FederatedDatabase = federatedDatabase;
            LocationUri = locationUri;
            Name = name;
            Parameters = parameters;
            TargetDatabase = targetDatabase;
        }
    }
}
