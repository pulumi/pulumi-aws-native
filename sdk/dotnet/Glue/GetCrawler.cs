// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Glue
{
    public static class GetCrawler
    {
        /// <summary>
        /// Resource Type definition for AWS::Glue::Crawler
        /// </summary>
        public static Task<GetCrawlerResult> InvokeAsync(GetCrawlerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCrawlerResult>("aws-native:glue:getCrawler", args ?? new GetCrawlerArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Glue::Crawler
        /// </summary>
        public static Output<GetCrawlerResult> Invoke(GetCrawlerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCrawlerResult>("aws-native:glue:getCrawler", args ?? new GetCrawlerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Glue::Crawler
        /// </summary>
        public static Output<GetCrawlerResult> Invoke(GetCrawlerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCrawlerResult>("aws-native:glue:getCrawler", args ?? new GetCrawlerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCrawlerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the crawler.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetCrawlerArgs()
        {
        }
        public static new GetCrawlerArgs Empty => new GetCrawlerArgs();
    }

    public sealed class GetCrawlerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the crawler.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetCrawlerInvokeArgs()
        {
        }
        public static new GetCrawlerInvokeArgs Empty => new GetCrawlerInvokeArgs();
    }


    [OutputType]
    public sealed class GetCrawlerResult
    {
        /// <summary>
        /// A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler.
        /// </summary>
        public readonly ImmutableArray<string> Classifiers;
        /// <summary>
        /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior.
        /// </summary>
        public readonly string? Configuration;
        /// <summary>
        /// The name of the SecurityConfiguration structure to be used by this crawler.
        /// </summary>
        public readonly string? CrawlerSecurityConfiguration;
        /// <summary>
        /// The name of the database in which the crawler's output is stored.
        /// </summary>
        public readonly string? DatabaseName;
        /// <summary>
        /// A description of the crawler.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Specifies whether the crawler should use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
        /// </summary>
        public readonly Outputs.CrawlerLakeFormationConfiguration? LakeFormationConfiguration;
        /// <summary>
        /// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
        /// </summary>
        public readonly Outputs.CrawlerRecrawlPolicy? RecrawlPolicy;
        /// <summary>
        /// The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
        /// </summary>
        public readonly string? Role;
        /// <summary>
        /// For scheduled crawlers, the schedule when the crawler runs.
        /// </summary>
        public readonly Outputs.CrawlerSchedule? Schedule;
        /// <summary>
        /// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The `SchemaChangePolicy` does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the `SchemaChangePolicy` on a crawler.
        /// 
        /// The SchemaChangePolicy consists of two components, `UpdateBehavior` and `DeleteBehavior` .
        /// </summary>
        public readonly Outputs.CrawlerSchemaChangePolicy? SchemaChangePolicy;
        /// <summary>
        /// The prefix added to the names of tables that are created.
        /// </summary>
        public readonly string? TablePrefix;
        /// <summary>
        /// The tags to use with this crawler.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Crawler` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? Tags;
        /// <summary>
        /// A collection of targets to crawl.
        /// </summary>
        public readonly Outputs.CrawlerTargets? Targets;

        [OutputConstructor]
        private GetCrawlerResult(
            ImmutableArray<string> classifiers,

            string? configuration,

            string? crawlerSecurityConfiguration,

            string? databaseName,

            string? description,

            Outputs.CrawlerLakeFormationConfiguration? lakeFormationConfiguration,

            Outputs.CrawlerRecrawlPolicy? recrawlPolicy,

            string? role,

            Outputs.CrawlerSchedule? schedule,

            Outputs.CrawlerSchemaChangePolicy? schemaChangePolicy,

            string? tablePrefix,

            object? tags,

            Outputs.CrawlerTargets? targets)
        {
            Classifiers = classifiers;
            Configuration = configuration;
            CrawlerSecurityConfiguration = crawlerSecurityConfiguration;
            DatabaseName = databaseName;
            Description = description;
            LakeFormationConfiguration = lakeFormationConfiguration;
            RecrawlPolicy = recrawlPolicy;
            Role = role;
            Schedule = schedule;
            SchemaChangePolicy = schemaChangePolicy;
            TablePrefix = tablePrefix;
            Tags = tags;
            Targets = targets;
        }
    }
}
