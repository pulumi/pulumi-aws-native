// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Glue
{
    public static class GetTrigger
    {
        /// <summary>
        /// Resource Type definition for AWS::Glue::Trigger
        /// </summary>
        public static Task<GetTriggerResult> InvokeAsync(GetTriggerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTriggerResult>("aws-native:glue:getTrigger", args ?? new GetTriggerArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Glue::Trigger
        /// </summary>
        public static Output<GetTriggerResult> Invoke(GetTriggerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTriggerResult>("aws-native:glue:getTrigger", args ?? new GetTriggerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTriggerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTriggerArgs()
        {
        }
        public static new GetTriggerArgs Empty => new GetTriggerArgs();
    }

    public sealed class GetTriggerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTriggerInvokeArgs()
        {
        }
        public static new GetTriggerInvokeArgs Empty => new GetTriggerInvokeArgs();
    }


    [OutputType]
    public sealed class GetTriggerResult
    {
        /// <summary>
        /// The actions initiated by this trigger.
        /// </summary>
        public readonly ImmutableArray<Outputs.TriggerAction> Actions;
        /// <summary>
        /// A description of this trigger.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires.
        /// </summary>
        public readonly Outputs.TriggerEventBatchingCondition? EventBatchingCondition;
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The predicate of this trigger, which defines when it will fire.
        /// </summary>
        public readonly Outputs.TriggerPredicate? Predicate;
        /// <summary>
        /// A `cron` expression used to specify the schedule. For more information, see [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html) in the *AWS Glue Developer Guide* . For example, to run something every day at 12:15 UTC, specify `cron(15 12 * * ? *)` .
        /// </summary>
        public readonly string? Schedule;
        /// <summary>
        /// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
        /// </summary>
        public readonly bool? StartOnCreation;
        /// <summary>
        /// The tags to use with this trigger.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Trigger` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? Tags;

        [OutputConstructor]
        private GetTriggerResult(
            ImmutableArray<Outputs.TriggerAction> actions,

            string? description,

            Outputs.TriggerEventBatchingCondition? eventBatchingCondition,

            string? id,

            Outputs.TriggerPredicate? predicate,

            string? schedule,

            bool? startOnCreation,

            object? tags)
        {
            Actions = actions;
            Description = description;
            EventBatchingCondition = eventBatchingCondition;
            Id = id;
            Predicate = predicate;
            Schedule = schedule;
            StartOnCreation = startOnCreation;
            Tags = tags;
        }
    }
}
