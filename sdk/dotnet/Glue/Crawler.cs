// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Glue
{
    /// <summary>
    /// Resource Type definition for AWS::Glue::Crawler
    /// </summary>
    [AwsNativeResourceType("aws-native:glue:Crawler")]
    public partial class Crawler : global::Pulumi.CustomResource
    {
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler.
        /// </summary>
        [Output("classifiers")]
        public Output<ImmutableArray<string>> Classifiers { get; private set; } = null!;

        /// <summary>
        /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Configuring a Crawler](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html) .
        /// </summary>
        [Output("configuration")]
        public Output<string?> Configuration { get; private set; } = null!;

        /// <summary>
        /// The name of the `SecurityConfiguration` structure to be used by this crawler.
        /// </summary>
        [Output("crawlerSecurityConfiguration")]
        public Output<string?> CrawlerSecurityConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of the database in which the crawler's output is stored.
        /// </summary>
        [Output("databaseName")]
        public Output<string?> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// A description of the crawler.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the crawler should use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
        /// </summary>
        [Output("lakeFormationConfiguration")]
        public Output<Outputs.CrawlerLakeFormationConfiguration?> LakeFormationConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of the crawler.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
        /// </summary>
        [Output("recrawlPolicy")]
        public Output<Outputs.CrawlerRecrawlPolicy?> RecrawlPolicy { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// For scheduled crawlers, the schedule when the crawler runs.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.CrawlerSchedule?> Schedule { get; private set; } = null!;

        /// <summary>
        /// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The `SchemaChangePolicy` does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the `SchemaChangePolicy` on a crawler.
        /// 
        /// The SchemaChangePolicy consists of two components, `UpdateBehavior` and `DeleteBehavior` .
        /// </summary>
        [Output("schemaChangePolicy")]
        public Output<Outputs.CrawlerSchemaChangePolicy?> SchemaChangePolicy { get; private set; } = null!;

        /// <summary>
        /// The prefix added to the names of tables that are created.
        /// </summary>
        [Output("tablePrefix")]
        public Output<string?> TablePrefix { get; private set; } = null!;

        /// <summary>
        /// The tags to use with this crawler.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Crawler` for more information about the expected schema for this property.
        /// </summary>
        [Output("tags")]
        public Output<object?> Tags { get; private set; } = null!;

        /// <summary>
        /// A collection of targets to crawl.
        /// </summary>
        [Output("targets")]
        public Output<Outputs.CrawlerTargets> Targets { get; private set; } = null!;


        /// <summary>
        /// Create a Crawler resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Crawler(string name, CrawlerArgs args, CustomResourceOptions? options = null)
            : base("aws-native:glue:Crawler", name, args ?? new CrawlerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Crawler(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:glue:Crawler", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "name",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Crawler resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Crawler Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Crawler(name, id, options);
        }
    }

    public sealed class CrawlerArgs : global::Pulumi.ResourceArgs
    {
        [Input("classifiers")]
        private InputList<string>? _classifiers;

        /// <summary>
        /// A list of UTF-8 strings that specify the names of custom classifiers that are associated with the crawler.
        /// </summary>
        public InputList<string> Classifiers
        {
            get => _classifiers ?? (_classifiers = new InputList<string>());
            set => _classifiers = value;
        }

        /// <summary>
        /// Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see [Configuring a Crawler](https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html) .
        /// </summary>
        [Input("configuration")]
        public Input<string>? Configuration { get; set; }

        /// <summary>
        /// The name of the `SecurityConfiguration` structure to be used by this crawler.
        /// </summary>
        [Input("crawlerSecurityConfiguration")]
        public Input<string>? CrawlerSecurityConfiguration { get; set; }

        /// <summary>
        /// The name of the database in which the crawler's output is stored.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// A description of the crawler.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies whether the crawler should use AWS Lake Formation credentials for the crawler instead of the IAM role credentials.
        /// </summary>
        [Input("lakeFormationConfiguration")]
        public Input<Inputs.CrawlerLakeFormationConfigurationArgs>? LakeFormationConfiguration { get; set; }

        /// <summary>
        /// The name of the crawler.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.
        /// </summary>
        [Input("recrawlPolicy")]
        public Input<Inputs.CrawlerRecrawlPolicyArgs>? RecrawlPolicy { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources, such as Amazon Simple Storage Service (Amazon S3) data.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// For scheduled crawlers, the schedule when the crawler runs.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.CrawlerScheduleArgs>? Schedule { get; set; }

        /// <summary>
        /// The policy that specifies update and delete behaviors for the crawler. The policy tells the crawler what to do in the event that it detects a change in a table that already exists in the customer's database at the time of the crawl. The `SchemaChangePolicy` does not affect whether or how new tables and partitions are added. New tables and partitions are always created regardless of the `SchemaChangePolicy` on a crawler.
        /// 
        /// The SchemaChangePolicy consists of two components, `UpdateBehavior` and `DeleteBehavior` .
        /// </summary>
        [Input("schemaChangePolicy")]
        public Input<Inputs.CrawlerSchemaChangePolicyArgs>? SchemaChangePolicy { get; set; }

        /// <summary>
        /// The prefix added to the names of tables that are created.
        /// </summary>
        [Input("tablePrefix")]
        public Input<string>? TablePrefix { get; set; }

        /// <summary>
        /// The tags to use with this crawler.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Crawler` for more information about the expected schema for this property.
        /// </summary>
        [Input("tags")]
        public Input<object>? Tags { get; set; }

        /// <summary>
        /// A collection of targets to crawl.
        /// </summary>
        [Input("targets", required: true)]
        public Input<Inputs.CrawlerTargetsArgs> Targets { get; set; } = null!;

        public CrawlerArgs()
        {
        }
        public static new CrawlerArgs Empty => new CrawlerArgs();
    }
}
