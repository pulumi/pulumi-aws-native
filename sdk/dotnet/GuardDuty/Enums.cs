// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.GuardDuty
{
    [EnumType]
    public readonly struct DetectorCfnFeatureConfigurationName : IEquatable<DetectorCfnFeatureConfigurationName>
    {
        private readonly string _value;

        private DetectorCfnFeatureConfigurationName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DetectorCfnFeatureConfigurationName FlowLogs { get; } = new DetectorCfnFeatureConfigurationName("FLOW_LOGS");
        public static DetectorCfnFeatureConfigurationName CloudTrail { get; } = new DetectorCfnFeatureConfigurationName("CLOUD_TRAIL");
        public static DetectorCfnFeatureConfigurationName DnsLogs { get; } = new DetectorCfnFeatureConfigurationName("DNS_LOGS");
        public static DetectorCfnFeatureConfigurationName S3DataEvents { get; } = new DetectorCfnFeatureConfigurationName("S3_DATA_EVENTS");
        public static DetectorCfnFeatureConfigurationName EksAuditLogs { get; } = new DetectorCfnFeatureConfigurationName("EKS_AUDIT_LOGS");
        public static DetectorCfnFeatureConfigurationName EbsMalwareProtection { get; } = new DetectorCfnFeatureConfigurationName("EBS_MALWARE_PROTECTION");
        public static DetectorCfnFeatureConfigurationName RdsLoginEvents { get; } = new DetectorCfnFeatureConfigurationName("RDS_LOGIN_EVENTS");
        public static DetectorCfnFeatureConfigurationName LambdaNetworkLogs { get; } = new DetectorCfnFeatureConfigurationName("LAMBDA_NETWORK_LOGS");
        public static DetectorCfnFeatureConfigurationName EksRuntimeMonitoring { get; } = new DetectorCfnFeatureConfigurationName("EKS_RUNTIME_MONITORING");

        public static bool operator ==(DetectorCfnFeatureConfigurationName left, DetectorCfnFeatureConfigurationName right) => left.Equals(right);
        public static bool operator !=(DetectorCfnFeatureConfigurationName left, DetectorCfnFeatureConfigurationName right) => !left.Equals(right);

        public static explicit operator string(DetectorCfnFeatureConfigurationName value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DetectorCfnFeatureConfigurationName other && Equals(other);
        public bool Equals(DetectorCfnFeatureConfigurationName other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DetectorCfnFeatureConfigurationStatus : IEquatable<DetectorCfnFeatureConfigurationStatus>
    {
        private readonly string _value;

        private DetectorCfnFeatureConfigurationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DetectorCfnFeatureConfigurationStatus Enabled { get; } = new DetectorCfnFeatureConfigurationStatus("ENABLED");
        public static DetectorCfnFeatureConfigurationStatus Disabled { get; } = new DetectorCfnFeatureConfigurationStatus("DISABLED");

        public static bool operator ==(DetectorCfnFeatureConfigurationStatus left, DetectorCfnFeatureConfigurationStatus right) => left.Equals(right);
        public static bool operator !=(DetectorCfnFeatureConfigurationStatus left, DetectorCfnFeatureConfigurationStatus right) => !left.Equals(right);

        public static explicit operator string(DetectorCfnFeatureConfigurationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DetectorCfnFeatureConfigurationStatus other && Equals(other);
        public bool Equals(DetectorCfnFeatureConfigurationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
