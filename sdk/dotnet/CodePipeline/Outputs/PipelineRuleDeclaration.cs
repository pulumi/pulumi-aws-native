// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CodePipeline.Outputs
{

    /// <summary>
    /// Represents information about condition.
    /// </summary>
    [OutputType]
    public sealed class PipelineRuleDeclaration
    {
        /// <summary>
        /// The shell commands to run with your compute action in CodePipeline.
        /// </summary>
        public readonly ImmutableArray<string> Commands;
        /// <summary>
        /// The rule's configuration. These are key-value pairs that specify input values for a rule.
        /// </summary>
        public readonly object? Configuration;
        /// <summary>
        /// The input artifacts fields for the rule, such as specifying an input file for the rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipelineInputArtifact> InputArtifacts;
        /// <summary>
        /// The rule declaration's name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The rule declaration's AWS Region, such as us-east-1.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.
        /// </summary>
        public readonly string? RoleArn;
        /// <summary>
        /// The ID for the rule type, which is made up of the combined values for category, owner, provider, and version.
        /// </summary>
        public readonly Outputs.PipelineRuleTypeId? RuleTypeId;

        [OutputConstructor]
        private PipelineRuleDeclaration(
            ImmutableArray<string> commands,

            object? configuration,

            ImmutableArray<Outputs.PipelineInputArtifact> inputArtifacts,

            string? name,

            string? region,

            string? roleArn,

            Outputs.PipelineRuleTypeId? ruleTypeId)
        {
            Commands = commands;
            Configuration = configuration;
            InputArtifacts = inputArtifacts;
            Name = name;
            Region = region;
            RoleArn = roleArn;
            RuleTypeId = ruleTypeId;
        }
    }
}
