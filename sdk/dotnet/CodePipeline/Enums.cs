// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.CodePipeline
{
    /// <summary>
    /// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the values below.
    /// </summary>
    [EnumType]
    public readonly struct PipelineActionTypeIdCategory : IEquatable<PipelineActionTypeIdCategory>
    {
        private readonly string _value;

        private PipelineActionTypeIdCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineActionTypeIdCategory Source { get; } = new PipelineActionTypeIdCategory("Source");
        public static PipelineActionTypeIdCategory Build { get; } = new PipelineActionTypeIdCategory("Build");
        public static PipelineActionTypeIdCategory Test { get; } = new PipelineActionTypeIdCategory("Test");
        public static PipelineActionTypeIdCategory Deploy { get; } = new PipelineActionTypeIdCategory("Deploy");
        public static PipelineActionTypeIdCategory Invoke { get; } = new PipelineActionTypeIdCategory("Invoke");
        public static PipelineActionTypeIdCategory Approval { get; } = new PipelineActionTypeIdCategory("Approval");
        public static PipelineActionTypeIdCategory Compute { get; } = new PipelineActionTypeIdCategory("Compute");

        public static bool operator ==(PipelineActionTypeIdCategory left, PipelineActionTypeIdCategory right) => left.Equals(right);
        public static bool operator !=(PipelineActionTypeIdCategory left, PipelineActionTypeIdCategory right) => !left.Equals(right);

        public static explicit operator string(PipelineActionTypeIdCategory value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineActionTypeIdCategory other && Equals(other);
        public bool Equals(PipelineActionTypeIdCategory other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of the artifact store, such as S3.
    /// </summary>
    [EnumType]
    public readonly struct PipelineArtifactStoreType : IEquatable<PipelineArtifactStoreType>
    {
        private readonly string _value;

        private PipelineArtifactStoreType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineArtifactStoreType S3 { get; } = new PipelineArtifactStoreType("S3");

        public static bool operator ==(PipelineArtifactStoreType left, PipelineArtifactStoreType right) => left.Equals(right);
        public static bool operator !=(PipelineArtifactStoreType left, PipelineArtifactStoreType right) => !left.Equals(right);

        public static explicit operator string(PipelineArtifactStoreType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineArtifactStoreType other && Equals(other);
        public bool Equals(PipelineArtifactStoreType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Reserved for future use.
    /// </summary>
    [EnumType]
    public readonly struct PipelineBlockerDeclarationType : IEquatable<PipelineBlockerDeclarationType>
    {
        private readonly string _value;

        private PipelineBlockerDeclarationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineBlockerDeclarationType Schedule { get; } = new PipelineBlockerDeclarationType("Schedule");

        public static bool operator ==(PipelineBlockerDeclarationType left, PipelineBlockerDeclarationType right) => left.Equals(right);
        public static bool operator !=(PipelineBlockerDeclarationType left, PipelineBlockerDeclarationType right) => !left.Equals(right);

        public static explicit operator string(PipelineBlockerDeclarationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineBlockerDeclarationType other && Equals(other);
        public bool Equals(PipelineBlockerDeclarationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
    /// </summary>
    [EnumType]
    public readonly struct PipelineExecutionMode : IEquatable<PipelineExecutionMode>
    {
        private readonly string _value;

        private PipelineExecutionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineExecutionMode Queued { get; } = new PipelineExecutionMode("QUEUED");
        public static PipelineExecutionMode Superseded { get; } = new PipelineExecutionMode("SUPERSEDED");
        public static PipelineExecutionMode Parallel { get; } = new PipelineExecutionMode("PARALLEL");

        public static bool operator ==(PipelineExecutionMode left, PipelineExecutionMode right) => left.Equals(right);
        public static bool operator !=(PipelineExecutionMode left, PipelineExecutionMode right) => !left.Equals(right);

        public static explicit operator string(PipelineExecutionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineExecutionMode other && Equals(other);
        public bool Equals(PipelineExecutionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The specified result for when the failure conditions are met, such as rolling back the stage
    /// </summary>
    [EnumType]
    public readonly struct PipelineFailureConditionsResult : IEquatable<PipelineFailureConditionsResult>
    {
        private readonly string _value;

        private PipelineFailureConditionsResult(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineFailureConditionsResult Rollback { get; } = new PipelineFailureConditionsResult("ROLLBACK");

        public static bool operator ==(PipelineFailureConditionsResult left, PipelineFailureConditionsResult right) => left.Equals(right);
        public static bool operator !=(PipelineFailureConditionsResult left, PipelineFailureConditionsResult right) => !left.Equals(right);

        public static explicit operator string(PipelineFailureConditionsResult value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineFailureConditionsResult other && Equals(other);
        public bool Equals(PipelineFailureConditionsResult other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The source provider for the event, such as connections configured for a repository with Git tags, for the specified trigger configuration.
    /// </summary>
    [EnumType]
    public readonly struct PipelineTriggerDeclarationProviderType : IEquatable<PipelineTriggerDeclarationProviderType>
    {
        private readonly string _value;

        private PipelineTriggerDeclarationProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineTriggerDeclarationProviderType CodeStarSourceConnection { get; } = new PipelineTriggerDeclarationProviderType("CodeStarSourceConnection");

        public static bool operator ==(PipelineTriggerDeclarationProviderType left, PipelineTriggerDeclarationProviderType right) => left.Equals(right);
        public static bool operator !=(PipelineTriggerDeclarationProviderType left, PipelineTriggerDeclarationProviderType right) => !left.Equals(right);

        public static explicit operator string(PipelineTriggerDeclarationProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineTriggerDeclarationProviderType other && Equals(other);
        public bool Equals(PipelineTriggerDeclarationProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
    /// </summary>
    [EnumType]
    public readonly struct PipelineType : IEquatable<PipelineType>
    {
        private readonly string _value;

        private PipelineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PipelineType V1 { get; } = new PipelineType("V1");
        public static PipelineType V2 { get; } = new PipelineType("V2");

        public static bool operator ==(PipelineType left, PipelineType right) => left.Equals(right);
        public static bool operator !=(PipelineType left, PipelineType right) => !left.Equals(right);

        public static explicit operator string(PipelineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PipelineType other && Equals(other);
        public bool Equals(PipelineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
