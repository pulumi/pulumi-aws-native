// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.CodePipeline
{
    public static class GetPipeline
    {
        /// <summary>
        /// The AWS::CodePipeline::Pipeline resource creates a CodePipeline pipeline that describes how software changes go through a release process.
        /// </summary>
        public static Task<GetPipelineResult> InvokeAsync(GetPipelineArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPipelineResult>("aws-native:codepipeline:getPipeline", args ?? new GetPipelineArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::CodePipeline::Pipeline resource creates a CodePipeline pipeline that describes how software changes go through a release process.
        /// </summary>
        public static Output<GetPipelineResult> Invoke(GetPipelineInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPipelineResult>("aws-native:codepipeline:getPipeline", args ?? new GetPipelineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPipelineArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetPipelineArgs()
        {
        }
        public static new GetPipelineArgs Empty => new GetPipelineArgs();
    }

    public sealed class GetPipelineInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetPipelineInvokeArgs()
        {
        }
        public static new GetPipelineInvokeArgs Empty => new GetPipelineInvokeArgs();
    }


    [OutputType]
    public sealed class GetPipelineResult
    {
        /// <summary>
        /// The S3 bucket where artifacts for the pipeline are stored.
        /// </summary>
        public readonly Outputs.PipelineArtifactStore? ArtifactStore;
        /// <summary>
        /// A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipelineArtifactStoreMap> ArtifactStores;
        /// <summary>
        /// Represents the input of a DisableStageTransition action.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipelineStageTransition> DisableInboundStageTransitions;
        /// <summary>
        /// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.
        /// </summary>
        public readonly Pulumi.AwsNative.CodePipeline.PipelineExecutionMode? ExecutionMode;
        /// <summary>
        /// CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.
        /// </summary>
        public readonly Pulumi.AwsNative.CodePipeline.PipelineType? PipelineType;
        /// <summary>
        /// The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn
        /// </summary>
        public readonly string? RoleArn;
        /// <summary>
        /// Represents information about a stage and its definition.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipelineStageDeclaration> Stages;
        /// <summary>
        /// Specifies the tags applied to the pipeline.
        /// </summary>
        public readonly ImmutableArray<Pulumi.AwsNative.Outputs.Tag> Tags;
        /// <summary>
        /// The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipelineTriggerDeclaration> Triggers;
        /// <summary>
        /// A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\-_]+.
        /// </summary>
        public readonly ImmutableArray<Outputs.PipelineVariableDeclaration> Variables;
        /// <summary>
        /// The version of the pipeline.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GetPipelineResult(
            Outputs.PipelineArtifactStore? artifactStore,

            ImmutableArray<Outputs.PipelineArtifactStoreMap> artifactStores,

            ImmutableArray<Outputs.PipelineStageTransition> disableInboundStageTransitions,

            Pulumi.AwsNative.CodePipeline.PipelineExecutionMode? executionMode,

            Pulumi.AwsNative.CodePipeline.PipelineType? pipelineType,

            string? roleArn,

            ImmutableArray<Outputs.PipelineStageDeclaration> stages,

            ImmutableArray<Pulumi.AwsNative.Outputs.Tag> tags,

            ImmutableArray<Outputs.PipelineTriggerDeclaration> triggers,

            ImmutableArray<Outputs.PipelineVariableDeclaration> variables,

            string? version)
        {
            ArtifactStore = artifactStore;
            ArtifactStores = artifactStores;
            DisableInboundStageTransitions = disableInboundStageTransitions;
            ExecutionMode = executionMode;
            PipelineType = pipelineType;
            RoleArn = roleArn;
            Stages = stages;
            Tags = tags;
            Triggers = triggers;
            Variables = variables;
            Version = version;
        }
    }
}
