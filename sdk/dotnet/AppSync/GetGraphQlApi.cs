// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.AppSync
{
    public static class GetGraphQlApi
    {
        /// <summary>
        /// Resource Type definition for AWS::AppSync::GraphQLApi
        /// </summary>
        public static Task<GetGraphQlApiResult> InvokeAsync(GetGraphQlApiArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGraphQlApiResult>("aws-native:appsync:getGraphQlApi", args ?? new GetGraphQlApiArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::AppSync::GraphQLApi
        /// </summary>
        public static Output<GetGraphQlApiResult> Invoke(GetGraphQlApiInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGraphQlApiResult>("aws-native:appsync:getGraphQlApi", args ?? new GetGraphQlApiInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGraphQlApiArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetGraphQlApiArgs()
        {
        }
        public static new GetGraphQlApiArgs Empty => new GetGraphQlApiArgs();
    }

    public sealed class GetGraphQlApiInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetGraphQlApiInvokeArgs()
        {
        }
        public static new GetGraphQlApiInvokeArgs Empty => new GetGraphQlApiInvokeArgs();
    }


    [OutputType]
    public sealed class GetGraphQlApiResult
    {
        public readonly ImmutableArray<Outputs.GraphQlApiAdditionalAuthenticationProvider> AdditionalAuthenticationProviders;
        public readonly string? ApiId;
        public readonly string? ApiType;
        public readonly string? Arn;
        public readonly string? AuthenticationType;
        public readonly string? GraphQlDns;
        public readonly string? GraphQlUrl;
        public readonly string? Id;
        public readonly Outputs.GraphQlApiLambdaAuthorizerConfig? LambdaAuthorizerConfig;
        public readonly Outputs.GraphQlApiLogConfig? LogConfig;
        public readonly string? MergedApiExecutionRoleArn;
        public readonly string? Name;
        public readonly Outputs.GraphQlApiOpenIdConnectConfig? OpenIdConnectConfig;
        public readonly string? OwnerContact;
        public readonly string? RealtimeDns;
        public readonly string? RealtimeUrl;
        public readonly ImmutableArray<Outputs.GraphQlApiTag> Tags;
        public readonly Outputs.GraphQlApiUserPoolConfig? UserPoolConfig;
        public readonly string? Visibility;
        public readonly bool? XrayEnabled;

        [OutputConstructor]
        private GetGraphQlApiResult(
            ImmutableArray<Outputs.GraphQlApiAdditionalAuthenticationProvider> additionalAuthenticationProviders,

            string? apiId,

            string? apiType,

            string? arn,

            string? authenticationType,

            string? graphQlDns,

            string? graphQlUrl,

            string? id,

            Outputs.GraphQlApiLambdaAuthorizerConfig? lambdaAuthorizerConfig,

            Outputs.GraphQlApiLogConfig? logConfig,

            string? mergedApiExecutionRoleArn,

            string? name,

            Outputs.GraphQlApiOpenIdConnectConfig? openIdConnectConfig,

            string? ownerContact,

            string? realtimeDns,

            string? realtimeUrl,

            ImmutableArray<Outputs.GraphQlApiTag> tags,

            Outputs.GraphQlApiUserPoolConfig? userPoolConfig,

            string? visibility,

            bool? xrayEnabled)
        {
            AdditionalAuthenticationProviders = additionalAuthenticationProviders;
            ApiId = apiId;
            ApiType = apiType;
            Arn = arn;
            AuthenticationType = authenticationType;
            GraphQlDns = graphQlDns;
            GraphQlUrl = graphQlUrl;
            Id = id;
            LambdaAuthorizerConfig = lambdaAuthorizerConfig;
            LogConfig = logConfig;
            MergedApiExecutionRoleArn = mergedApiExecutionRoleArn;
            Name = name;
            OpenIdConnectConfig = openIdConnectConfig;
            OwnerContact = ownerContact;
            RealtimeDns = realtimeDns;
            RealtimeUrl = realtimeUrl;
            Tags = tags;
            UserPoolConfig = userPoolConfig;
            Visibility = visibility;
            XrayEnabled = xrayEnabled;
        }
    }
}
