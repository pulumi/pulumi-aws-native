// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.AppSync
{
    /// <summary>
    /// Enables or disables enhanced data source metrics for specified data sources. Note that `MetricsConfig` won't be used unless the `dataSourceLevelMetricsBehavior` value is set to `PER_DATA_SOURCE_METRICS` . If the `dataSourceLevelMetricsBehavior` is set to `FULL_REQUEST_DATA_SOURCE_METRICS` instead, `MetricsConfig` will be ignored. However, you can still set its value.
    /// 
    /// `MetricsConfig` can be `ENABLED` or `DISABLED` .
    /// </summary>
    [EnumType]
    public readonly struct DataSourceMetricsConfig : IEquatable<DataSourceMetricsConfig>
    {
        private readonly string _value;

        private DataSourceMetricsConfig(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataSourceMetricsConfig Disabled { get; } = new DataSourceMetricsConfig("DISABLED");
        public static DataSourceMetricsConfig Enabled { get; } = new DataSourceMetricsConfig("ENABLED");

        public static bool operator ==(DataSourceMetricsConfig left, DataSourceMetricsConfig right) => left.Equals(right);
        public static bool operator !=(DataSourceMetricsConfig left, DataSourceMetricsConfig right) => !left.Equals(right);

        public static explicit operator string(DataSourceMetricsConfig value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataSourceMetricsConfig other && Equals(other);
        public bool Equals(DataSourceMetricsConfig other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior`` is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its value.
    /// </summary>
    [EnumType]
    public readonly struct ResolverMetricsConfig : IEquatable<ResolverMetricsConfig>
    {
        private readonly string _value;

        private ResolverMetricsConfig(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ResolverMetricsConfig Enabled { get; } = new ResolverMetricsConfig("ENABLED");
        public static ResolverMetricsConfig Disabled { get; } = new ResolverMetricsConfig("DISABLED");

        public static bool operator ==(ResolverMetricsConfig left, ResolverMetricsConfig right) => left.Equals(right);
        public static bool operator !=(ResolverMetricsConfig left, ResolverMetricsConfig right) => !left.Equals(right);

        public static explicit operator string(ResolverMetricsConfig value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ResolverMetricsConfig other && Equals(other);
        public bool Equals(ResolverMetricsConfig other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
    /// </summary>
    [EnumType]
    public readonly struct SourceApiAssociationConfigMergeType : IEquatable<SourceApiAssociationConfigMergeType>
    {
        private readonly string _value;

        private SourceApiAssociationConfigMergeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceApiAssociationConfigMergeType AutoMerge { get; } = new SourceApiAssociationConfigMergeType("AUTO_MERGE");
        public static SourceApiAssociationConfigMergeType ManualMerge { get; } = new SourceApiAssociationConfigMergeType("MANUAL_MERGE");

        public static bool operator ==(SourceApiAssociationConfigMergeType left, SourceApiAssociationConfigMergeType right) => left.Equals(right);
        public static bool operator !=(SourceApiAssociationConfigMergeType left, SourceApiAssociationConfigMergeType right) => !left.Equals(right);

        public static explicit operator string(SourceApiAssociationConfigMergeType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceApiAssociationConfigMergeType other && Equals(other);
        public bool Equals(SourceApiAssociationConfigMergeType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Current status of SourceApiAssociation.
    /// </summary>
    [EnumType]
    public readonly struct SourceApiAssociationStatus : IEquatable<SourceApiAssociationStatus>
    {
        private readonly string _value;

        private SourceApiAssociationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SourceApiAssociationStatus MergeScheduled { get; } = new SourceApiAssociationStatus("MERGE_SCHEDULED");
        public static SourceApiAssociationStatus MergeFailed { get; } = new SourceApiAssociationStatus("MERGE_FAILED");
        public static SourceApiAssociationStatus MergeSuccess { get; } = new SourceApiAssociationStatus("MERGE_SUCCESS");
        public static SourceApiAssociationStatus MergeInProgress { get; } = new SourceApiAssociationStatus("MERGE_IN_PROGRESS");
        public static SourceApiAssociationStatus AutoMergeScheduleFailed { get; } = new SourceApiAssociationStatus("AUTO_MERGE_SCHEDULE_FAILED");
        public static SourceApiAssociationStatus DeletionScheduled { get; } = new SourceApiAssociationStatus("DELETION_SCHEDULED");
        public static SourceApiAssociationStatus DeletionInProgress { get; } = new SourceApiAssociationStatus("DELETION_IN_PROGRESS");
        public static SourceApiAssociationStatus DeletionFailed { get; } = new SourceApiAssociationStatus("DELETION_FAILED");

        public static bool operator ==(SourceApiAssociationStatus left, SourceApiAssociationStatus right) => left.Equals(right);
        public static bool operator !=(SourceApiAssociationStatus left, SourceApiAssociationStatus right) => !left.Equals(right);

        public static explicit operator string(SourceApiAssociationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SourceApiAssociationStatus other && Equals(other);
        public bool Equals(SourceApiAssociationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
