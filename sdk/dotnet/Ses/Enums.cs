// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Ses
{
    [EnumType]
    public readonly struct MailManagerArchiveArchiveState : IEquatable<MailManagerArchiveArchiveState>
    {
        private readonly string _value;

        private MailManagerArchiveArchiveState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerArchiveArchiveState Active { get; } = new MailManagerArchiveArchiveState("ACTIVE");
        public static MailManagerArchiveArchiveState PendingDeletion { get; } = new MailManagerArchiveArchiveState("PENDING_DELETION");

        public static bool operator ==(MailManagerArchiveArchiveState left, MailManagerArchiveArchiveState right) => left.Equals(right);
        public static bool operator !=(MailManagerArchiveArchiveState left, MailManagerArchiveArchiveState right) => !left.Equals(right);

        public static explicit operator string(MailManagerArchiveArchiveState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerArchiveArchiveState other && Equals(other);
        public bool Equals(MailManagerArchiveArchiveState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerArchiveRetentionPeriod : IEquatable<MailManagerArchiveRetentionPeriod>
    {
        private readonly string _value;

        private MailManagerArchiveRetentionPeriod(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerArchiveRetentionPeriod ThreeMonths { get; } = new MailManagerArchiveRetentionPeriod("THREE_MONTHS");
        public static MailManagerArchiveRetentionPeriod SixMonths { get; } = new MailManagerArchiveRetentionPeriod("SIX_MONTHS");
        public static MailManagerArchiveRetentionPeriod NineMonths { get; } = new MailManagerArchiveRetentionPeriod("NINE_MONTHS");
        public static MailManagerArchiveRetentionPeriod OneYear { get; } = new MailManagerArchiveRetentionPeriod("ONE_YEAR");
        public static MailManagerArchiveRetentionPeriod EighteenMonths { get; } = new MailManagerArchiveRetentionPeriod("EIGHTEEN_MONTHS");
        public static MailManagerArchiveRetentionPeriod TwoYears { get; } = new MailManagerArchiveRetentionPeriod("TWO_YEARS");
        public static MailManagerArchiveRetentionPeriod ThirtyMonths { get; } = new MailManagerArchiveRetentionPeriod("THIRTY_MONTHS");
        public static MailManagerArchiveRetentionPeriod ThreeYears { get; } = new MailManagerArchiveRetentionPeriod("THREE_YEARS");
        public static MailManagerArchiveRetentionPeriod FourYears { get; } = new MailManagerArchiveRetentionPeriod("FOUR_YEARS");
        public static MailManagerArchiveRetentionPeriod FiveYears { get; } = new MailManagerArchiveRetentionPeriod("FIVE_YEARS");
        public static MailManagerArchiveRetentionPeriod SixYears { get; } = new MailManagerArchiveRetentionPeriod("SIX_YEARS");
        public static MailManagerArchiveRetentionPeriod SevenYears { get; } = new MailManagerArchiveRetentionPeriod("SEVEN_YEARS");
        public static MailManagerArchiveRetentionPeriod EightYears { get; } = new MailManagerArchiveRetentionPeriod("EIGHT_YEARS");
        public static MailManagerArchiveRetentionPeriod NineYears { get; } = new MailManagerArchiveRetentionPeriod("NINE_YEARS");
        public static MailManagerArchiveRetentionPeriod TenYears { get; } = new MailManagerArchiveRetentionPeriod("TEN_YEARS");
        public static MailManagerArchiveRetentionPeriod Permanent { get; } = new MailManagerArchiveRetentionPeriod("PERMANENT");

        public static bool operator ==(MailManagerArchiveRetentionPeriod left, MailManagerArchiveRetentionPeriod right) => left.Equals(right);
        public static bool operator !=(MailManagerArchiveRetentionPeriod left, MailManagerArchiveRetentionPeriod right) => !left.Equals(right);

        public static explicit operator string(MailManagerArchiveRetentionPeriod value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerArchiveRetentionPeriod other && Equals(other);
        public bool Equals(MailManagerArchiveRetentionPeriod other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerIngressPointIngressPointStatus : IEquatable<MailManagerIngressPointIngressPointStatus>
    {
        private readonly string _value;

        private MailManagerIngressPointIngressPointStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerIngressPointIngressPointStatus Provisioning { get; } = new MailManagerIngressPointIngressPointStatus("PROVISIONING");
        public static MailManagerIngressPointIngressPointStatus Deprovisioning { get; } = new MailManagerIngressPointIngressPointStatus("DEPROVISIONING");
        public static MailManagerIngressPointIngressPointStatus Updating { get; } = new MailManagerIngressPointIngressPointStatus("UPDATING");
        public static MailManagerIngressPointIngressPointStatus Active { get; } = new MailManagerIngressPointIngressPointStatus("ACTIVE");
        public static MailManagerIngressPointIngressPointStatus Closed { get; } = new MailManagerIngressPointIngressPointStatus("CLOSED");
        public static MailManagerIngressPointIngressPointStatus Failed { get; } = new MailManagerIngressPointIngressPointStatus("FAILED");

        public static bool operator ==(MailManagerIngressPointIngressPointStatus left, MailManagerIngressPointIngressPointStatus right) => left.Equals(right);
        public static bool operator !=(MailManagerIngressPointIngressPointStatus left, MailManagerIngressPointIngressPointStatus right) => !left.Equals(right);

        public static explicit operator string(MailManagerIngressPointIngressPointStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerIngressPointIngressPointStatus other && Equals(other);
        public bool Equals(MailManagerIngressPointIngressPointStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerIngressPointIngressPointStatusToUpdate : IEquatable<MailManagerIngressPointIngressPointStatusToUpdate>
    {
        private readonly string _value;

        private MailManagerIngressPointIngressPointStatusToUpdate(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerIngressPointIngressPointStatusToUpdate Active { get; } = new MailManagerIngressPointIngressPointStatusToUpdate("ACTIVE");
        public static MailManagerIngressPointIngressPointStatusToUpdate Closed { get; } = new MailManagerIngressPointIngressPointStatusToUpdate("CLOSED");

        public static bool operator ==(MailManagerIngressPointIngressPointStatusToUpdate left, MailManagerIngressPointIngressPointStatusToUpdate right) => left.Equals(right);
        public static bool operator !=(MailManagerIngressPointIngressPointStatusToUpdate left, MailManagerIngressPointIngressPointStatusToUpdate right) => !left.Equals(right);

        public static explicit operator string(MailManagerIngressPointIngressPointStatusToUpdate value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerIngressPointIngressPointStatusToUpdate other && Equals(other);
        public bool Equals(MailManagerIngressPointIngressPointStatusToUpdate other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerIngressPointIngressPointType : IEquatable<MailManagerIngressPointIngressPointType>
    {
        private readonly string _value;

        private MailManagerIngressPointIngressPointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerIngressPointIngressPointType Open { get; } = new MailManagerIngressPointIngressPointType("OPEN");
        public static MailManagerIngressPointIngressPointType Auth { get; } = new MailManagerIngressPointIngressPointType("AUTH");

        public static bool operator ==(MailManagerIngressPointIngressPointType left, MailManagerIngressPointIngressPointType right) => left.Equals(right);
        public static bool operator !=(MailManagerIngressPointIngressPointType left, MailManagerIngressPointIngressPointType right) => !left.Equals(right);

        public static explicit operator string(MailManagerIngressPointIngressPointType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerIngressPointIngressPointType other && Equals(other);
        public bool Equals(MailManagerIngressPointIngressPointType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetActionFailurePolicy : IEquatable<MailManagerRuleSetActionFailurePolicy>
    {
        private readonly string _value;

        private MailManagerRuleSetActionFailurePolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetActionFailurePolicy Continue { get; } = new MailManagerRuleSetActionFailurePolicy("CONTINUE");
        public static MailManagerRuleSetActionFailurePolicy Drop { get; } = new MailManagerRuleSetActionFailurePolicy("DROP");

        public static bool operator ==(MailManagerRuleSetActionFailurePolicy left, MailManagerRuleSetActionFailurePolicy right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetActionFailurePolicy left, MailManagerRuleSetActionFailurePolicy right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetActionFailurePolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetActionFailurePolicy other && Equals(other);
        public bool Equals(MailManagerRuleSetActionFailurePolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetMailFrom : IEquatable<MailManagerRuleSetMailFrom>
    {
        private readonly string _value;

        private MailManagerRuleSetMailFrom(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetMailFrom Replace { get; } = new MailManagerRuleSetMailFrom("REPLACE");
        public static MailManagerRuleSetMailFrom Preserve { get; } = new MailManagerRuleSetMailFrom("PRESERVE");

        public static bool operator ==(MailManagerRuleSetMailFrom left, MailManagerRuleSetMailFrom right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetMailFrom left, MailManagerRuleSetMailFrom right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetMailFrom value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetMailFrom other && Equals(other);
        public bool Equals(MailManagerRuleSetMailFrom other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleBooleanEmailAttribute : IEquatable<MailManagerRuleSetRuleBooleanEmailAttribute>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleBooleanEmailAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleBooleanEmailAttribute ReadReceiptRequested { get; } = new MailManagerRuleSetRuleBooleanEmailAttribute("READ_RECEIPT_REQUESTED");
        public static MailManagerRuleSetRuleBooleanEmailAttribute Tls { get; } = new MailManagerRuleSetRuleBooleanEmailAttribute("TLS");
        public static MailManagerRuleSetRuleBooleanEmailAttribute TlsWrapped { get; } = new MailManagerRuleSetRuleBooleanEmailAttribute("TLS_WRAPPED");

        public static bool operator ==(MailManagerRuleSetRuleBooleanEmailAttribute left, MailManagerRuleSetRuleBooleanEmailAttribute right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleBooleanEmailAttribute left, MailManagerRuleSetRuleBooleanEmailAttribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleBooleanEmailAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleBooleanEmailAttribute other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleBooleanEmailAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleBooleanOperator : IEquatable<MailManagerRuleSetRuleBooleanOperator>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleBooleanOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleBooleanOperator IsTrue { get; } = new MailManagerRuleSetRuleBooleanOperator("IS_TRUE");
        public static MailManagerRuleSetRuleBooleanOperator IsFalse { get; } = new MailManagerRuleSetRuleBooleanOperator("IS_FALSE");

        public static bool operator ==(MailManagerRuleSetRuleBooleanOperator left, MailManagerRuleSetRuleBooleanOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleBooleanOperator left, MailManagerRuleSetRuleBooleanOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleBooleanOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleBooleanOperator other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleBooleanOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleDmarcOperator : IEquatable<MailManagerRuleSetRuleDmarcOperator>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleDmarcOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleDmarcOperator EqualsValue { get; } = new MailManagerRuleSetRuleDmarcOperator("EQUALS");
        public static MailManagerRuleSetRuleDmarcOperator NotEquals { get; } = new MailManagerRuleSetRuleDmarcOperator("NOT_EQUALS");

        public static bool operator ==(MailManagerRuleSetRuleDmarcOperator left, MailManagerRuleSetRuleDmarcOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleDmarcOperator left, MailManagerRuleSetRuleDmarcOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleDmarcOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleDmarcOperator other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleDmarcOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleDmarcPolicy : IEquatable<MailManagerRuleSetRuleDmarcPolicy>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleDmarcPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleDmarcPolicy None { get; } = new MailManagerRuleSetRuleDmarcPolicy("NONE");
        public static MailManagerRuleSetRuleDmarcPolicy Quarantine { get; } = new MailManagerRuleSetRuleDmarcPolicy("QUARANTINE");
        public static MailManagerRuleSetRuleDmarcPolicy Reject { get; } = new MailManagerRuleSetRuleDmarcPolicy("REJECT");

        public static bool operator ==(MailManagerRuleSetRuleDmarcPolicy left, MailManagerRuleSetRuleDmarcPolicy right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleDmarcPolicy left, MailManagerRuleSetRuleDmarcPolicy right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleDmarcPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleDmarcPolicy other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleDmarcPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleIpEmailAttribute : IEquatable<MailManagerRuleSetRuleIpEmailAttribute>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleIpEmailAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleIpEmailAttribute SourceIp { get; } = new MailManagerRuleSetRuleIpEmailAttribute("SOURCE_IP");

        public static bool operator ==(MailManagerRuleSetRuleIpEmailAttribute left, MailManagerRuleSetRuleIpEmailAttribute right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleIpEmailAttribute left, MailManagerRuleSetRuleIpEmailAttribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleIpEmailAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleIpEmailAttribute other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleIpEmailAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleIpOperator : IEquatable<MailManagerRuleSetRuleIpOperator>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleIpOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleIpOperator CidrMatches { get; } = new MailManagerRuleSetRuleIpOperator("CIDR_MATCHES");
        public static MailManagerRuleSetRuleIpOperator NotCidrMatches { get; } = new MailManagerRuleSetRuleIpOperator("NOT_CIDR_MATCHES");

        public static bool operator ==(MailManagerRuleSetRuleIpOperator left, MailManagerRuleSetRuleIpOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleIpOperator left, MailManagerRuleSetRuleIpOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleIpOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleIpOperator other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleIpOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleNumberEmailAttribute : IEquatable<MailManagerRuleSetRuleNumberEmailAttribute>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleNumberEmailAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleNumberEmailAttribute MessageSize { get; } = new MailManagerRuleSetRuleNumberEmailAttribute("MESSAGE_SIZE");

        public static bool operator ==(MailManagerRuleSetRuleNumberEmailAttribute left, MailManagerRuleSetRuleNumberEmailAttribute right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleNumberEmailAttribute left, MailManagerRuleSetRuleNumberEmailAttribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleNumberEmailAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleNumberEmailAttribute other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleNumberEmailAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleNumberOperator : IEquatable<MailManagerRuleSetRuleNumberOperator>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleNumberOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleNumberOperator EqualsValue { get; } = new MailManagerRuleSetRuleNumberOperator("EQUALS");
        public static MailManagerRuleSetRuleNumberOperator NotEquals { get; } = new MailManagerRuleSetRuleNumberOperator("NOT_EQUALS");
        public static MailManagerRuleSetRuleNumberOperator LessThan { get; } = new MailManagerRuleSetRuleNumberOperator("LESS_THAN");
        public static MailManagerRuleSetRuleNumberOperator GreaterThan { get; } = new MailManagerRuleSetRuleNumberOperator("GREATER_THAN");
        public static MailManagerRuleSetRuleNumberOperator LessThanOrEqual { get; } = new MailManagerRuleSetRuleNumberOperator("LESS_THAN_OR_EQUAL");
        public static MailManagerRuleSetRuleNumberOperator GreaterThanOrEqual { get; } = new MailManagerRuleSetRuleNumberOperator("GREATER_THAN_OR_EQUAL");

        public static bool operator ==(MailManagerRuleSetRuleNumberOperator left, MailManagerRuleSetRuleNumberOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleNumberOperator left, MailManagerRuleSetRuleNumberOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleNumberOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleNumberOperator other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleNumberOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleStringEmailAttribute : IEquatable<MailManagerRuleSetRuleStringEmailAttribute>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleStringEmailAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleStringEmailAttribute MailFrom { get; } = new MailManagerRuleSetRuleStringEmailAttribute("MAIL_FROM");
        public static MailManagerRuleSetRuleStringEmailAttribute Helo { get; } = new MailManagerRuleSetRuleStringEmailAttribute("HELO");
        public static MailManagerRuleSetRuleStringEmailAttribute Recipient { get; } = new MailManagerRuleSetRuleStringEmailAttribute("RECIPIENT");
        public static MailManagerRuleSetRuleStringEmailAttribute Sender { get; } = new MailManagerRuleSetRuleStringEmailAttribute("SENDER");
        public static MailManagerRuleSetRuleStringEmailAttribute From { get; } = new MailManagerRuleSetRuleStringEmailAttribute("FROM");
        public static MailManagerRuleSetRuleStringEmailAttribute Subject { get; } = new MailManagerRuleSetRuleStringEmailAttribute("SUBJECT");
        public static MailManagerRuleSetRuleStringEmailAttribute To { get; } = new MailManagerRuleSetRuleStringEmailAttribute("TO");
        public static MailManagerRuleSetRuleStringEmailAttribute Cc { get; } = new MailManagerRuleSetRuleStringEmailAttribute("CC");

        public static bool operator ==(MailManagerRuleSetRuleStringEmailAttribute left, MailManagerRuleSetRuleStringEmailAttribute right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleStringEmailAttribute left, MailManagerRuleSetRuleStringEmailAttribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleStringEmailAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleStringEmailAttribute other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleStringEmailAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleStringOperator : IEquatable<MailManagerRuleSetRuleStringOperator>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleStringOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleStringOperator EqualsValue { get; } = new MailManagerRuleSetRuleStringOperator("EQUALS");
        public static MailManagerRuleSetRuleStringOperator NotEquals { get; } = new MailManagerRuleSetRuleStringOperator("NOT_EQUALS");
        public static MailManagerRuleSetRuleStringOperator StartsWith { get; } = new MailManagerRuleSetRuleStringOperator("STARTS_WITH");
        public static MailManagerRuleSetRuleStringOperator EndsWith { get; } = new MailManagerRuleSetRuleStringOperator("ENDS_WITH");
        public static MailManagerRuleSetRuleStringOperator Contains { get; } = new MailManagerRuleSetRuleStringOperator("CONTAINS");

        public static bool operator ==(MailManagerRuleSetRuleStringOperator left, MailManagerRuleSetRuleStringOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleStringOperator left, MailManagerRuleSetRuleStringOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleStringOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleStringOperator other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleStringOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleVerdict : IEquatable<MailManagerRuleSetRuleVerdict>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleVerdict(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleVerdict Pass { get; } = new MailManagerRuleSetRuleVerdict("PASS");
        public static MailManagerRuleSetRuleVerdict Fail { get; } = new MailManagerRuleSetRuleVerdict("FAIL");
        public static MailManagerRuleSetRuleVerdict Gray { get; } = new MailManagerRuleSetRuleVerdict("GRAY");
        public static MailManagerRuleSetRuleVerdict ProcessingFailed { get; } = new MailManagerRuleSetRuleVerdict("PROCESSING_FAILED");

        public static bool operator ==(MailManagerRuleSetRuleVerdict left, MailManagerRuleSetRuleVerdict right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleVerdict left, MailManagerRuleSetRuleVerdict right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleVerdict value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleVerdict other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleVerdict other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleVerdictAttribute : IEquatable<MailManagerRuleSetRuleVerdictAttribute>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleVerdictAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleVerdictAttribute Spf { get; } = new MailManagerRuleSetRuleVerdictAttribute("SPF");
        public static MailManagerRuleSetRuleVerdictAttribute Dkim { get; } = new MailManagerRuleSetRuleVerdictAttribute("DKIM");

        public static bool operator ==(MailManagerRuleSetRuleVerdictAttribute left, MailManagerRuleSetRuleVerdictAttribute right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleVerdictAttribute left, MailManagerRuleSetRuleVerdictAttribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleVerdictAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleVerdictAttribute other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleVerdictAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerRuleSetRuleVerdictOperator : IEquatable<MailManagerRuleSetRuleVerdictOperator>
    {
        private readonly string _value;

        private MailManagerRuleSetRuleVerdictOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerRuleSetRuleVerdictOperator EqualsValue { get; } = new MailManagerRuleSetRuleVerdictOperator("EQUALS");
        public static MailManagerRuleSetRuleVerdictOperator NotEquals { get; } = new MailManagerRuleSetRuleVerdictOperator("NOT_EQUALS");

        public static bool operator ==(MailManagerRuleSetRuleVerdictOperator left, MailManagerRuleSetRuleVerdictOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerRuleSetRuleVerdictOperator left, MailManagerRuleSetRuleVerdictOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerRuleSetRuleVerdictOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerRuleSetRuleVerdictOperator other && Equals(other);
        public bool Equals(MailManagerRuleSetRuleVerdictOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyAcceptAction : IEquatable<MailManagerTrafficPolicyAcceptAction>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyAcceptAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyAcceptAction Allow { get; } = new MailManagerTrafficPolicyAcceptAction("ALLOW");
        public static MailManagerTrafficPolicyAcceptAction Deny { get; } = new MailManagerTrafficPolicyAcceptAction("DENY");

        public static bool operator ==(MailManagerTrafficPolicyAcceptAction left, MailManagerTrafficPolicyAcceptAction right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyAcceptAction left, MailManagerTrafficPolicyAcceptAction right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyAcceptAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyAcceptAction other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyAcceptAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyIngressBooleanOperator : IEquatable<MailManagerTrafficPolicyIngressBooleanOperator>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyIngressBooleanOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyIngressBooleanOperator IsTrue { get; } = new MailManagerTrafficPolicyIngressBooleanOperator("IS_TRUE");
        public static MailManagerTrafficPolicyIngressBooleanOperator IsFalse { get; } = new MailManagerTrafficPolicyIngressBooleanOperator("IS_FALSE");

        public static bool operator ==(MailManagerTrafficPolicyIngressBooleanOperator left, MailManagerTrafficPolicyIngressBooleanOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyIngressBooleanOperator left, MailManagerTrafficPolicyIngressBooleanOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyIngressBooleanOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyIngressBooleanOperator other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyIngressBooleanOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyIngressIpOperator : IEquatable<MailManagerTrafficPolicyIngressIpOperator>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyIngressIpOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyIngressIpOperator CidrMatches { get; } = new MailManagerTrafficPolicyIngressIpOperator("CIDR_MATCHES");
        public static MailManagerTrafficPolicyIngressIpOperator NotCidrMatches { get; } = new MailManagerTrafficPolicyIngressIpOperator("NOT_CIDR_MATCHES");

        public static bool operator ==(MailManagerTrafficPolicyIngressIpOperator left, MailManagerTrafficPolicyIngressIpOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyIngressIpOperator left, MailManagerTrafficPolicyIngressIpOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyIngressIpOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyIngressIpOperator other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyIngressIpOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyIngressIpv4Attribute : IEquatable<MailManagerTrafficPolicyIngressIpv4Attribute>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyIngressIpv4Attribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyIngressIpv4Attribute SenderIp { get; } = new MailManagerTrafficPolicyIngressIpv4Attribute("SENDER_IP");

        public static bool operator ==(MailManagerTrafficPolicyIngressIpv4Attribute left, MailManagerTrafficPolicyIngressIpv4Attribute right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyIngressIpv4Attribute left, MailManagerTrafficPolicyIngressIpv4Attribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyIngressIpv4Attribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyIngressIpv4Attribute other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyIngressIpv4Attribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyIngressIpv6Attribute : IEquatable<MailManagerTrafficPolicyIngressIpv6Attribute>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyIngressIpv6Attribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyIngressIpv6Attribute SenderIpv6 { get; } = new MailManagerTrafficPolicyIngressIpv6Attribute("SENDER_IPV6");

        public static bool operator ==(MailManagerTrafficPolicyIngressIpv6Attribute left, MailManagerTrafficPolicyIngressIpv6Attribute right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyIngressIpv6Attribute left, MailManagerTrafficPolicyIngressIpv6Attribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyIngressIpv6Attribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyIngressIpv6Attribute other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyIngressIpv6Attribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyIngressStringEmailAttribute : IEquatable<MailManagerTrafficPolicyIngressStringEmailAttribute>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyIngressStringEmailAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyIngressStringEmailAttribute Recipient { get; } = new MailManagerTrafficPolicyIngressStringEmailAttribute("RECIPIENT");

        public static bool operator ==(MailManagerTrafficPolicyIngressStringEmailAttribute left, MailManagerTrafficPolicyIngressStringEmailAttribute right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyIngressStringEmailAttribute left, MailManagerTrafficPolicyIngressStringEmailAttribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyIngressStringEmailAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyIngressStringEmailAttribute other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyIngressStringEmailAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyIngressStringOperator : IEquatable<MailManagerTrafficPolicyIngressStringOperator>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyIngressStringOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyIngressStringOperator EqualsValue { get; } = new MailManagerTrafficPolicyIngressStringOperator("EQUALS");
        public static MailManagerTrafficPolicyIngressStringOperator NotEquals { get; } = new MailManagerTrafficPolicyIngressStringOperator("NOT_EQUALS");
        public static MailManagerTrafficPolicyIngressStringOperator StartsWith { get; } = new MailManagerTrafficPolicyIngressStringOperator("STARTS_WITH");
        public static MailManagerTrafficPolicyIngressStringOperator EndsWith { get; } = new MailManagerTrafficPolicyIngressStringOperator("ENDS_WITH");
        public static MailManagerTrafficPolicyIngressStringOperator Contains { get; } = new MailManagerTrafficPolicyIngressStringOperator("CONTAINS");

        public static bool operator ==(MailManagerTrafficPolicyIngressStringOperator left, MailManagerTrafficPolicyIngressStringOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyIngressStringOperator left, MailManagerTrafficPolicyIngressStringOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyIngressStringOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyIngressStringOperator other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyIngressStringOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyIngressTlsAttribute : IEquatable<MailManagerTrafficPolicyIngressTlsAttribute>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyIngressTlsAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyIngressTlsAttribute TlsProtocol { get; } = new MailManagerTrafficPolicyIngressTlsAttribute("TLS_PROTOCOL");

        public static bool operator ==(MailManagerTrafficPolicyIngressTlsAttribute left, MailManagerTrafficPolicyIngressTlsAttribute right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyIngressTlsAttribute left, MailManagerTrafficPolicyIngressTlsAttribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyIngressTlsAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyIngressTlsAttribute other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyIngressTlsAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyIngressTlsProtocolAttribute : IEquatable<MailManagerTrafficPolicyIngressTlsProtocolAttribute>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyIngressTlsProtocolAttribute(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyIngressTlsProtocolAttribute Tls12 { get; } = new MailManagerTrafficPolicyIngressTlsProtocolAttribute("TLS1_2");
        public static MailManagerTrafficPolicyIngressTlsProtocolAttribute Tls13 { get; } = new MailManagerTrafficPolicyIngressTlsProtocolAttribute("TLS1_3");

        public static bool operator ==(MailManagerTrafficPolicyIngressTlsProtocolAttribute left, MailManagerTrafficPolicyIngressTlsProtocolAttribute right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyIngressTlsProtocolAttribute left, MailManagerTrafficPolicyIngressTlsProtocolAttribute right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyIngressTlsProtocolAttribute value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyIngressTlsProtocolAttribute other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyIngressTlsProtocolAttribute other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct MailManagerTrafficPolicyIngressTlsProtocolOperator : IEquatable<MailManagerTrafficPolicyIngressTlsProtocolOperator>
    {
        private readonly string _value;

        private MailManagerTrafficPolicyIngressTlsProtocolOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MailManagerTrafficPolicyIngressTlsProtocolOperator MinimumTlsVersion { get; } = new MailManagerTrafficPolicyIngressTlsProtocolOperator("MINIMUM_TLS_VERSION");
        public static MailManagerTrafficPolicyIngressTlsProtocolOperator Is { get; } = new MailManagerTrafficPolicyIngressTlsProtocolOperator("IS");

        public static bool operator ==(MailManagerTrafficPolicyIngressTlsProtocolOperator left, MailManagerTrafficPolicyIngressTlsProtocolOperator right) => left.Equals(right);
        public static bool operator !=(MailManagerTrafficPolicyIngressTlsProtocolOperator left, MailManagerTrafficPolicyIngressTlsProtocolOperator right) => !left.Equals(right);

        public static explicit operator string(MailManagerTrafficPolicyIngressTlsProtocolOperator value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MailManagerTrafficPolicyIngressTlsProtocolOperator other && Equals(other);
        public bool Equals(MailManagerTrafficPolicyIngressTlsProtocolOperator other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
