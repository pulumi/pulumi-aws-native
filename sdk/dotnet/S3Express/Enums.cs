// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.S3Express
{
    /// <summary>
    /// Specifies the number of Availability Zone that's used for redundancy for the bucket.
    /// </summary>
    [EnumType]
    public readonly struct DirectoryBucketDataRedundancy : IEquatable<DirectoryBucketDataRedundancy>
    {
        private readonly string _value;

        private DirectoryBucketDataRedundancy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DirectoryBucketDataRedundancy SingleAvailabilityZone { get; } = new DirectoryBucketDataRedundancy("SingleAvailabilityZone");

        public static bool operator ==(DirectoryBucketDataRedundancy left, DirectoryBucketDataRedundancy right) => left.Equals(right);
        public static bool operator !=(DirectoryBucketDataRedundancy left, DirectoryBucketDataRedundancy right) => !left.Equals(right);

        public static explicit operator string(DirectoryBucketDataRedundancy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DirectoryBucketDataRedundancy other && Equals(other);
        public bool Equals(DirectoryBucketDataRedundancy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If `Enabled` , the rule is currently being applied. If `Disabled` , the rule is not currently being applied.
    /// </summary>
    [EnumType]
    public readonly struct DirectoryBucketRuleStatus : IEquatable<DirectoryBucketRuleStatus>
    {
        private readonly string _value;

        private DirectoryBucketRuleStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DirectoryBucketRuleStatus Enabled { get; } = new DirectoryBucketRuleStatus("Enabled");
        public static DirectoryBucketRuleStatus Disabled { get; } = new DirectoryBucketRuleStatus("Disabled");

        public static bool operator ==(DirectoryBucketRuleStatus left, DirectoryBucketRuleStatus right) => left.Equals(right);
        public static bool operator !=(DirectoryBucketRuleStatus left, DirectoryBucketRuleStatus right) => !left.Equals(right);

        public static explicit operator string(DirectoryBucketRuleStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DirectoryBucketRuleStatus other && Equals(other);
        public bool Equals(DirectoryBucketRuleStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Server-side encryption algorithm to use for the default encryption.
    /// 
    /// &gt; For directory buckets, there are only two supported values for server-side encryption: `AES256` and `aws:kms` .
    /// </summary>
    [EnumType]
    public readonly struct DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm : IEquatable<DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm>
    {
        private readonly string _value;

        private DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm Awskms { get; } = new DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm("aws:kms");
        public static DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm Aes256 { get; } = new DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm("AES256");

        public static bool operator ==(DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm left, DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm right) => left.Equals(right);
        public static bool operator !=(DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm left, DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm right) => !left.Equals(right);

        public static explicit operator string(DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm other && Equals(other);
        public bool Equals(DirectoryBucketServerSideEncryptionByDefaultSseAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
