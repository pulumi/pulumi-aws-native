// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.FSx
{
    /// <summary>
    /// Resource Type definition for AWS::FSx::DataRepositoryAssociation
    /// </summary>
    [AwsNativeResourceType("aws-native:fsx:DataRepositoryAssociation")]
    public partial class DataRepositoryAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The system-generated, unique ID of the data repository association.
        /// </summary>
        [Output("associationId")]
        public Output<string> AssociationId { get; private set; } = null!;

        /// <summary>
        /// A boolean flag indicating whether an import data repository task to import metadata should run after the data repository association is created. The task runs if this flag is set to true.
        /// </summary>
        [Output("batchImportMetaDataOnCreate")]
        public Output<bool?> BatchImportMetaDataOnCreate { get; private set; } = null!;

        /// <summary>
        /// The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/ . This path specifies where in the S3 data repository files will be imported from or exported to.
        /// </summary>
        [Output("dataRepositoryPath")]
        public Output<string> DataRepositoryPath { get; private set; } = null!;

        /// <summary>
        /// The globally unique ID of the file system, assigned by Amazon FSx.
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
        /// </summary>
        [Output("fileSystemPath")]
        public Output<string> FileSystemPath { get; private set; } = null!;

        /// <summary>
        /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
        /// </summary>
        [Output("importedFileChunkSize")]
        public Output<int?> ImportedFileChunkSize { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        /// </summary>
        [Output("resourceArn")]
        public Output<string> ResourceArn { get; private set; } = null!;

        /// <summary>
        /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
        /// </summary>
        [Output("s3")]
        public Output<Outputs.DataRepositoryAssociationS3?> S3 { get; private set; } = null!;

        /// <summary>
        /// A list of Tag values, with a maximum of 50 elements.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.DataRepositoryAssociationTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DataRepositoryAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataRepositoryAssociation(string name, DataRepositoryAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws-native:fsx:DataRepositoryAssociation", name, args ?? new DataRepositoryAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataRepositoryAssociation(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:fsx:DataRepositoryAssociation", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "batchImportMetaDataOnCreate",
                    "dataRepositoryPath",
                    "fileSystemId",
                    "fileSystemPath",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataRepositoryAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataRepositoryAssociation Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new DataRepositoryAssociation(name, id, options);
        }
    }

    public sealed class DataRepositoryAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A boolean flag indicating whether an import data repository task to import metadata should run after the data repository association is created. The task runs if this flag is set to true.
        /// </summary>
        [Input("batchImportMetaDataOnCreate")]
        public Input<bool>? BatchImportMetaDataOnCreate { get; set; }

        /// <summary>
        /// The path to the Amazon S3 data repository that will be linked to the file system. The path can be an S3 bucket or prefix in the format s3://myBucket/myPrefix/ . This path specifies where in the S3 data repository files will be imported from or exported to.
        /// </summary>
        [Input("dataRepositoryPath", required: true)]
        public Input<string> DataRepositoryPath { get; set; } = null!;

        /// <summary>
        /// The globally unique ID of the file system, assigned by Amazon FSx.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
        /// </summary>
        [Input("fileSystemPath", required: true)]
        public Input<string> FileSystemPath { get; set; } = null!;

        /// <summary>
        /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
        /// </summary>
        [Input("importedFileChunkSize")]
        public Input<int>? ImportedFileChunkSize { get; set; }

        /// <summary>
        /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
        /// </summary>
        [Input("s3")]
        public Input<Inputs.DataRepositoryAssociationS3Args>? S3 { get; set; }

        [Input("tags")]
        private InputList<Inputs.DataRepositoryAssociationTagArgs>? _tags;

        /// <summary>
        /// A list of Tag values, with a maximum of 50 elements.
        /// </summary>
        public InputList<Inputs.DataRepositoryAssociationTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DataRepositoryAssociationTagArgs>());
            set => _tags = value;
        }

        public DataRepositoryAssociationArgs()
        {
        }
        public static new DataRepositoryAssociationArgs Empty => new DataRepositoryAssociationArgs();
    }
}
