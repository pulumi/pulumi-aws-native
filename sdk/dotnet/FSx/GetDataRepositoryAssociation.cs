// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.FSx
{
    public static class GetDataRepositoryAssociation
    {
        /// <summary>
        /// Resource Type definition for AWS::FSx::DataRepositoryAssociation
        /// </summary>
        public static Task<GetDataRepositoryAssociationResult> InvokeAsync(GetDataRepositoryAssociationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataRepositoryAssociationResult>("aws-native:fsx:getDataRepositoryAssociation", args ?? new GetDataRepositoryAssociationArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::FSx::DataRepositoryAssociation
        /// </summary>
        public static Output<GetDataRepositoryAssociationResult> Invoke(GetDataRepositoryAssociationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataRepositoryAssociationResult>("aws-native:fsx:getDataRepositoryAssociation", args ?? new GetDataRepositoryAssociationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataRepositoryAssociationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The system-generated, unique ID of the data repository association.
        /// </summary>
        [Input("associationId", required: true)]
        public string AssociationId { get; set; } = null!;

        public GetDataRepositoryAssociationArgs()
        {
        }
        public static new GetDataRepositoryAssociationArgs Empty => new GetDataRepositoryAssociationArgs();
    }

    public sealed class GetDataRepositoryAssociationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The system-generated, unique ID of the data repository association.
        /// </summary>
        [Input("associationId", required: true)]
        public Input<string> AssociationId { get; set; } = null!;

        public GetDataRepositoryAssociationInvokeArgs()
        {
        }
        public static new GetDataRepositoryAssociationInvokeArgs Empty => new GetDataRepositoryAssociationInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataRepositoryAssociationResult
    {
        /// <summary>
        /// The system-generated, unique ID of the data repository association.
        /// </summary>
        public readonly string? AssociationId;
        /// <summary>
        /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
        /// </summary>
        public readonly int? ImportedFileChunkSize;
        /// <summary>
        /// The Amazon Resource Name (ARN) for a given resource. ARNs uniquely identify Amazon Web Services resources. We require an ARN when you need to specify a resource unambiguously across all of Amazon Web Services. For more information, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        /// </summary>
        public readonly string? ResourceArn;
        /// <summary>
        /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
        /// </summary>
        public readonly Outputs.DataRepositoryAssociationS3? S3;
        /// <summary>
        /// A list of Tag values, with a maximum of 50 elements.
        /// </summary>
        public readonly ImmutableArray<Outputs.DataRepositoryAssociationTag> Tags;

        [OutputConstructor]
        private GetDataRepositoryAssociationResult(
            string? associationId,

            int? importedFileChunkSize,

            string? resourceArn,

            Outputs.DataRepositoryAssociationS3? s3,

            ImmutableArray<Outputs.DataRepositoryAssociationTag> tags)
        {
            AssociationId = associationId;
            ImportedFileChunkSize = importedFileChunkSize;
            ResourceArn = resourceArn;
            S3 = s3;
            Tags = tags;
        }
    }
}
