// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Transfer
{
    public static class GetCertificate
    {
        /// <summary>
        /// Resource Type definition for AWS::Transfer::Certificate
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("aws-native:transfer:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Transfer::Certificate
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("aws-native:transfer:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the certificate.
        /// </summary>
        [Input("certificateId", required: true)]
        public string CertificateId { get; set; } = null!;

        public GetCertificateArgs()
        {
        }
        public static new GetCertificateArgs Empty => new GetCertificateArgs();
    }

    public sealed class GetCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the certificate.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        public GetCertificateInvokeArgs()
        {
        }
        public static new GetCertificateInvokeArgs Empty => new GetCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// Specifies the active date for the certificate.
        /// </summary>
        public readonly string? ActiveDate;
        /// <summary>
        /// Specifies the unique Amazon Resource Name (ARN) for the agreement.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// A unique identifier for the certificate.
        /// </summary>
        public readonly string? CertificateId;
        /// <summary>
        /// A textual description for the certificate.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Specifies the inactive date for the certificate.
        /// </summary>
        public readonly string? InactiveDate;
        /// <summary>
        /// Specifies the not after date for the certificate.
        /// </summary>
        public readonly string? NotAfterDate;
        /// <summary>
        /// Specifies the not before date for the certificate.
        /// </summary>
        public readonly string? NotBeforeDate;
        /// <summary>
        /// Specifies Certificate's serial.
        /// </summary>
        public readonly string? Serial;
        /// <summary>
        /// A status description for the certificate.
        /// </summary>
        public readonly Pulumi.AwsNative.Transfer.CertificateStatus? Status;
        /// <summary>
        /// Key-value pairs that can be used to group and search for certificates. Tags are metadata attached to certificates for any purpose.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificateTag> Tags;
        /// <summary>
        /// Describing the type of certificate. With or without a private key.
        /// </summary>
        public readonly Pulumi.AwsNative.Transfer.CertificateType? Type;
        /// <summary>
        /// Specifies the usage type for the certificate.
        /// </summary>
        public readonly Pulumi.AwsNative.Transfer.CertificateUsage? Usage;

        [OutputConstructor]
        private GetCertificateResult(
            string? activeDate,

            string? arn,

            string? certificateId,

            string? description,

            string? inactiveDate,

            string? notAfterDate,

            string? notBeforeDate,

            string? serial,

            Pulumi.AwsNative.Transfer.CertificateStatus? status,

            ImmutableArray<Outputs.CertificateTag> tags,

            Pulumi.AwsNative.Transfer.CertificateType? type,

            Pulumi.AwsNative.Transfer.CertificateUsage? usage)
        {
            ActiveDate = activeDate;
            Arn = arn;
            CertificateId = certificateId;
            Description = description;
            InactiveDate = inactiveDate;
            NotAfterDate = notAfterDate;
            NotBeforeDate = notBeforeDate;
            Serial = serial;
            Status = status;
            Tags = tags;
            Type = type;
            Usage = usage;
        }
    }
}
