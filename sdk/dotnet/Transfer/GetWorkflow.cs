// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Transfer
{
    public static class GetWorkflow
    {
        /// <summary>
        /// Resource Type definition for AWS::Transfer::Workflow
        /// </summary>
        public static Task<GetWorkflowResult> InvokeAsync(GetWorkflowArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetWorkflowResult>("aws-native:transfer:getWorkflow", args ?? new GetWorkflowArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Transfer::Workflow
        /// </summary>
        public static Output<GetWorkflowResult> Invoke(GetWorkflowInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetWorkflowResult>("aws-native:transfer:getWorkflow", args ?? new GetWorkflowInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkflowArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the workflow.
        /// </summary>
        [Input("workflowId")]
        public string? WorkflowId { get; set; }

        public GetWorkflowArgs()
        {
        }
    }

    public sealed class GetWorkflowInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier for the workflow.
        /// </summary>
        [Input("workflowId")]
        public Input<string>? WorkflowId { get; set; }

        public GetWorkflowInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetWorkflowResult
    {
        /// <summary>
        /// Specifies the unique Amazon Resource Name (ARN) for the workflow.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
        /// </summary>
        public readonly ImmutableArray<Outputs.WorkflowTag> Tags;
        /// <summary>
        /// A unique identifier for the workflow.
        /// </summary>
        public readonly string? WorkflowId;

        [OutputConstructor]
        private GetWorkflowResult(
            string? arn,

            ImmutableArray<Outputs.WorkflowTag> tags,

            string? workflowId)
        {
            Arn = arn;
            Tags = tags;
            WorkflowId = workflowId;
        }
    }
}
