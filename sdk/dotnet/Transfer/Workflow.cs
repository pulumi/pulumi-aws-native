// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Transfer
{
    /// <summary>
    /// Resource Type definition for AWS::Transfer::Workflow
    /// </summary>
    [AwsNativeResourceType("aws-native:transfer:Workflow")]
    public partial class Workflow : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the unique Amazon Resource Name (ARN) for the workflow.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A textual description for the workflow.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
        /// </summary>
        [Output("onExceptionSteps")]
        public Output<ImmutableArray<Outputs.WorkflowStep>> OnExceptionSteps { get; private set; } = null!;

        /// <summary>
        /// Specifies the details for the steps that are in the specified workflow.
        /// </summary>
        [Output("steps")]
        public Output<ImmutableArray<Outputs.WorkflowStep>> Steps { get; private set; } = null!;

        /// <summary>
        /// Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.WorkflowTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for the workflow.
        /// </summary>
        [Output("workflowId")]
        public Output<string> WorkflowId { get; private set; } = null!;


        /// <summary>
        /// Create a Workflow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workflow(string name, WorkflowArgs args, CustomResourceOptions? options = null)
            : base("aws-native:transfer:Workflow", name, args ?? new WorkflowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workflow(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:transfer:Workflow", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workflow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workflow Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Workflow(name, id, options);
        }
    }

    public sealed class WorkflowArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A textual description for the workflow.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("onExceptionSteps")]
        private InputList<Inputs.WorkflowStepArgs>? _onExceptionSteps;

        /// <summary>
        /// Specifies the steps (actions) to take if any errors are encountered during execution of the workflow.
        /// </summary>
        public InputList<Inputs.WorkflowStepArgs> OnExceptionSteps
        {
            get => _onExceptionSteps ?? (_onExceptionSteps = new InputList<Inputs.WorkflowStepArgs>());
            set => _onExceptionSteps = value;
        }

        [Input("steps", required: true)]
        private InputList<Inputs.WorkflowStepArgs>? _steps;

        /// <summary>
        /// Specifies the details for the steps that are in the specified workflow.
        /// </summary>
        public InputList<Inputs.WorkflowStepArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.WorkflowStepArgs>());
            set => _steps = value;
        }

        [Input("tags")]
        private InputList<Inputs.WorkflowTagArgs>? _tags;

        /// <summary>
        /// Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose.
        /// </summary>
        public InputList<Inputs.WorkflowTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.WorkflowTagArgs>());
            set => _tags = value;
        }

        public WorkflowArgs()
        {
        }
    }
}
