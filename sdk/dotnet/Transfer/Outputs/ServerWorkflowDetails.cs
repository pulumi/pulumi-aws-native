// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Transfer.Outputs
{

    [OutputType]
    public sealed class ServerWorkflowDetails
    {
        /// <summary>
        /// A trigger that starts a workflow if a file is only partially uploaded. You can attach a workflow to a server that executes whenever there is a partial upload.
        /// 
        /// A *partial upload* occurs when a file is open when the session disconnects.
        /// 
        /// &gt; `OnPartialUpload` can contain a maximum of one `WorkflowDetail` object.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServerWorkflowDetail> OnPartialUpload;
        /// <summary>
        /// A trigger that starts a workflow: the workflow begins to execute after a file is uploaded.
        /// 
        /// To remove an associated workflow from a server, you can provide an empty `OnUpload` object, as in the following example.
        /// 
        /// `aws transfer update-server --server-id s-01234567890abcdef --workflow-details '{"OnUpload":[]}'`
        /// 
        /// &gt; `OnUpload` can contain a maximum of one `WorkflowDetail` object.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServerWorkflowDetail> OnUpload;

        [OutputConstructor]
        private ServerWorkflowDetails(
            ImmutableArray<Outputs.ServerWorkflowDetail> onPartialUpload,

            ImmutableArray<Outputs.ServerWorkflowDetail> onUpload)
        {
            OnPartialUpload = onPartialUpload;
            OnUpload = onUpload;
        }
    }
}
