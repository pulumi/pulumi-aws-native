// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Transfer
{
    /// <summary>
    /// Specifies whether to enforce an AS2 message is signed for this agreement.
    /// </summary>
    [EnumType]
    public readonly struct AgreementEnforceMessageSigning : IEquatable<AgreementEnforceMessageSigning>
    {
        private readonly string _value;

        private AgreementEnforceMessageSigning(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgreementEnforceMessageSigning Enabled { get; } = new AgreementEnforceMessageSigning("ENABLED");
        public static AgreementEnforceMessageSigning Disabled { get; } = new AgreementEnforceMessageSigning("DISABLED");

        public static bool operator ==(AgreementEnforceMessageSigning left, AgreementEnforceMessageSigning right) => left.Equals(right);
        public static bool operator !=(AgreementEnforceMessageSigning left, AgreementEnforceMessageSigning right) => !left.Equals(right);

        public static explicit operator string(AgreementEnforceMessageSigning value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgreementEnforceMessageSigning other && Equals(other);
        public bool Equals(AgreementEnforceMessageSigning other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether to preserve the filename received for this agreement.
    /// </summary>
    [EnumType]
    public readonly struct AgreementPreserveFilename : IEquatable<AgreementPreserveFilename>
    {
        private readonly string _value;

        private AgreementPreserveFilename(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgreementPreserveFilename Enabled { get; } = new AgreementPreserveFilename("ENABLED");
        public static AgreementPreserveFilename Disabled { get; } = new AgreementPreserveFilename("DISABLED");

        public static bool operator ==(AgreementPreserveFilename left, AgreementPreserveFilename right) => left.Equals(right);
        public static bool operator !=(AgreementPreserveFilename left, AgreementPreserveFilename right) => !left.Equals(right);

        public static explicit operator string(AgreementPreserveFilename value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgreementPreserveFilename other && Equals(other);
        public bool Equals(AgreementPreserveFilename other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the status of the agreement.
    /// </summary>
    [EnumType]
    public readonly struct AgreementStatus : IEquatable<AgreementStatus>
    {
        private readonly string _value;

        private AgreementStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AgreementStatus Active { get; } = new AgreementStatus("ACTIVE");
        public static AgreementStatus Inactive { get; } = new AgreementStatus("INACTIVE");

        public static bool operator ==(AgreementStatus left, AgreementStatus right) => left.Equals(right);
        public static bool operator !=(AgreementStatus left, AgreementStatus right) => !left.Equals(right);

        public static explicit operator string(AgreementStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AgreementStatus other && Equals(other);
        public bool Equals(AgreementStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A status description for the certificate.
    /// </summary>
    [EnumType]
    public readonly struct CertificateStatus : IEquatable<CertificateStatus>
    {
        private readonly string _value;

        private CertificateStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateStatus Active { get; } = new CertificateStatus("ACTIVE");
        public static CertificateStatus Pending { get; } = new CertificateStatus("PENDING");
        public static CertificateStatus Inactive { get; } = new CertificateStatus("INACTIVE");

        public static bool operator ==(CertificateStatus left, CertificateStatus right) => left.Equals(right);
        public static bool operator !=(CertificateStatus left, CertificateStatus right) => !left.Equals(right);

        public static explicit operator string(CertificateStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateStatus other && Equals(other);
        public bool Equals(CertificateStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Describing the type of certificate. With or without a private key.
    /// </summary>
    [EnumType]
    public readonly struct CertificateType : IEquatable<CertificateType>
    {
        private readonly string _value;

        private CertificateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateType Certificate { get; } = new CertificateType("CERTIFICATE");
        public static CertificateType CertificateWithPrivateKey { get; } = new CertificateType("CERTIFICATE_WITH_PRIVATE_KEY");

        public static bool operator ==(CertificateType left, CertificateType right) => left.Equals(right);
        public static bool operator !=(CertificateType left, CertificateType right) => !left.Equals(right);

        public static explicit operator string(CertificateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateType other && Equals(other);
        public bool Equals(CertificateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies the usage type for the certificate.
    /// </summary>
    [EnumType]
    public readonly struct CertificateUsage : IEquatable<CertificateUsage>
    {
        private readonly string _value;

        private CertificateUsage(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CertificateUsage Signing { get; } = new CertificateUsage("SIGNING");
        public static CertificateUsage Encryption { get; } = new CertificateUsage("ENCRYPTION");
        public static CertificateUsage Tls { get; } = new CertificateUsage("TLS");

        public static bool operator ==(CertificateUsage left, CertificateUsage right) => left.Equals(right);
        public static bool operator !=(CertificateUsage left, CertificateUsage right) => !left.Equals(right);

        public static explicit operator string(CertificateUsage value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CertificateUsage other && Equals(other);
        public bool Equals(CertificateUsage other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Compression setting for this AS2 connector configuration.
    /// </summary>
    [EnumType]
    public readonly struct ConnectorAs2ConfigPropertiesCompression : IEquatable<ConnectorAs2ConfigPropertiesCompression>
    {
        private readonly string _value;

        private ConnectorAs2ConfigPropertiesCompression(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorAs2ConfigPropertiesCompression Zlib { get; } = new ConnectorAs2ConfigPropertiesCompression("ZLIB");
        public static ConnectorAs2ConfigPropertiesCompression Disabled { get; } = new ConnectorAs2ConfigPropertiesCompression("DISABLED");

        public static bool operator ==(ConnectorAs2ConfigPropertiesCompression left, ConnectorAs2ConfigPropertiesCompression right) => left.Equals(right);
        public static bool operator !=(ConnectorAs2ConfigPropertiesCompression left, ConnectorAs2ConfigPropertiesCompression right) => !left.Equals(right);

        public static explicit operator string(ConnectorAs2ConfigPropertiesCompression value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorAs2ConfigPropertiesCompression other && Equals(other);
        public bool Equals(ConnectorAs2ConfigPropertiesCompression other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Encryption algorithm for this AS2 connector configuration.
    /// </summary>
    [EnumType]
    public readonly struct ConnectorAs2ConfigPropertiesEncryptionAlgorithm : IEquatable<ConnectorAs2ConfigPropertiesEncryptionAlgorithm>
    {
        private readonly string _value;

        private ConnectorAs2ConfigPropertiesEncryptionAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorAs2ConfigPropertiesEncryptionAlgorithm Aes128Cbc { get; } = new ConnectorAs2ConfigPropertiesEncryptionAlgorithm("AES128_CBC");
        public static ConnectorAs2ConfigPropertiesEncryptionAlgorithm Aes192Cbc { get; } = new ConnectorAs2ConfigPropertiesEncryptionAlgorithm("AES192_CBC");
        public static ConnectorAs2ConfigPropertiesEncryptionAlgorithm Aes256Cbc { get; } = new ConnectorAs2ConfigPropertiesEncryptionAlgorithm("AES256_CBC");
        public static ConnectorAs2ConfigPropertiesEncryptionAlgorithm None { get; } = new ConnectorAs2ConfigPropertiesEncryptionAlgorithm("NONE");
        public static ConnectorAs2ConfigPropertiesEncryptionAlgorithm DesEde3Cbc { get; } = new ConnectorAs2ConfigPropertiesEncryptionAlgorithm("DES_EDE3_CBC");

        public static bool operator ==(ConnectorAs2ConfigPropertiesEncryptionAlgorithm left, ConnectorAs2ConfigPropertiesEncryptionAlgorithm right) => left.Equals(right);
        public static bool operator !=(ConnectorAs2ConfigPropertiesEncryptionAlgorithm left, ConnectorAs2ConfigPropertiesEncryptionAlgorithm right) => !left.Equals(right);

        public static explicit operator string(ConnectorAs2ConfigPropertiesEncryptionAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorAs2ConfigPropertiesEncryptionAlgorithm other && Equals(other);
        public bool Equals(ConnectorAs2ConfigPropertiesEncryptionAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// MDN Response setting for this AS2 connector configuration.
    /// </summary>
    [EnumType]
    public readonly struct ConnectorAs2ConfigPropertiesMdnResponse : IEquatable<ConnectorAs2ConfigPropertiesMdnResponse>
    {
        private readonly string _value;

        private ConnectorAs2ConfigPropertiesMdnResponse(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorAs2ConfigPropertiesMdnResponse Sync { get; } = new ConnectorAs2ConfigPropertiesMdnResponse("SYNC");
        public static ConnectorAs2ConfigPropertiesMdnResponse None { get; } = new ConnectorAs2ConfigPropertiesMdnResponse("NONE");

        public static bool operator ==(ConnectorAs2ConfigPropertiesMdnResponse left, ConnectorAs2ConfigPropertiesMdnResponse right) => left.Equals(right);
        public static bool operator !=(ConnectorAs2ConfigPropertiesMdnResponse left, ConnectorAs2ConfigPropertiesMdnResponse right) => !left.Equals(right);

        public static explicit operator string(ConnectorAs2ConfigPropertiesMdnResponse value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorAs2ConfigPropertiesMdnResponse other && Equals(other);
        public bool Equals(ConnectorAs2ConfigPropertiesMdnResponse other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// MDN Signing algorithm for this AS2 connector configuration.
    /// </summary>
    [EnumType]
    public readonly struct ConnectorAs2ConfigPropertiesMdnSigningAlgorithm : IEquatable<ConnectorAs2ConfigPropertiesMdnSigningAlgorithm>
    {
        private readonly string _value;

        private ConnectorAs2ConfigPropertiesMdnSigningAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorAs2ConfigPropertiesMdnSigningAlgorithm Sha256 { get; } = new ConnectorAs2ConfigPropertiesMdnSigningAlgorithm("SHA256");
        public static ConnectorAs2ConfigPropertiesMdnSigningAlgorithm Sha384 { get; } = new ConnectorAs2ConfigPropertiesMdnSigningAlgorithm("SHA384");
        public static ConnectorAs2ConfigPropertiesMdnSigningAlgorithm Sha512 { get; } = new ConnectorAs2ConfigPropertiesMdnSigningAlgorithm("SHA512");
        public static ConnectorAs2ConfigPropertiesMdnSigningAlgorithm Sha1 { get; } = new ConnectorAs2ConfigPropertiesMdnSigningAlgorithm("SHA1");
        public static ConnectorAs2ConfigPropertiesMdnSigningAlgorithm None { get; } = new ConnectorAs2ConfigPropertiesMdnSigningAlgorithm("NONE");
        public static ConnectorAs2ConfigPropertiesMdnSigningAlgorithm Default { get; } = new ConnectorAs2ConfigPropertiesMdnSigningAlgorithm("DEFAULT");

        public static bool operator ==(ConnectorAs2ConfigPropertiesMdnSigningAlgorithm left, ConnectorAs2ConfigPropertiesMdnSigningAlgorithm right) => left.Equals(right);
        public static bool operator !=(ConnectorAs2ConfigPropertiesMdnSigningAlgorithm left, ConnectorAs2ConfigPropertiesMdnSigningAlgorithm right) => !left.Equals(right);

        public static explicit operator string(ConnectorAs2ConfigPropertiesMdnSigningAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorAs2ConfigPropertiesMdnSigningAlgorithm other && Equals(other);
        public bool Equals(ConnectorAs2ConfigPropertiesMdnSigningAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies whether to use the AWS S3 object content-type as the content-type for the AS2 message.
    /// </summary>
    [EnumType]
    public readonly struct ConnectorAs2ConfigPropertiesPreserveContentType : IEquatable<ConnectorAs2ConfigPropertiesPreserveContentType>
    {
        private readonly string _value;

        private ConnectorAs2ConfigPropertiesPreserveContentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorAs2ConfigPropertiesPreserveContentType Enabled { get; } = new ConnectorAs2ConfigPropertiesPreserveContentType("ENABLED");
        public static ConnectorAs2ConfigPropertiesPreserveContentType Disabled { get; } = new ConnectorAs2ConfigPropertiesPreserveContentType("DISABLED");

        public static bool operator ==(ConnectorAs2ConfigPropertiesPreserveContentType left, ConnectorAs2ConfigPropertiesPreserveContentType right) => left.Equals(right);
        public static bool operator !=(ConnectorAs2ConfigPropertiesPreserveContentType left, ConnectorAs2ConfigPropertiesPreserveContentType right) => !left.Equals(right);

        public static explicit operator string(ConnectorAs2ConfigPropertiesPreserveContentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorAs2ConfigPropertiesPreserveContentType other && Equals(other);
        public bool Equals(ConnectorAs2ConfigPropertiesPreserveContentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Signing algorithm for this AS2 connector configuration.
    /// </summary>
    [EnumType]
    public readonly struct ConnectorAs2ConfigPropertiesSigningAlgorithm : IEquatable<ConnectorAs2ConfigPropertiesSigningAlgorithm>
    {
        private readonly string _value;

        private ConnectorAs2ConfigPropertiesSigningAlgorithm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorAs2ConfigPropertiesSigningAlgorithm Sha256 { get; } = new ConnectorAs2ConfigPropertiesSigningAlgorithm("SHA256");
        public static ConnectorAs2ConfigPropertiesSigningAlgorithm Sha384 { get; } = new ConnectorAs2ConfigPropertiesSigningAlgorithm("SHA384");
        public static ConnectorAs2ConfigPropertiesSigningAlgorithm Sha512 { get; } = new ConnectorAs2ConfigPropertiesSigningAlgorithm("SHA512");
        public static ConnectorAs2ConfigPropertiesSigningAlgorithm Sha1 { get; } = new ConnectorAs2ConfigPropertiesSigningAlgorithm("SHA1");
        public static ConnectorAs2ConfigPropertiesSigningAlgorithm None { get; } = new ConnectorAs2ConfigPropertiesSigningAlgorithm("NONE");

        public static bool operator ==(ConnectorAs2ConfigPropertiesSigningAlgorithm left, ConnectorAs2ConfigPropertiesSigningAlgorithm right) => left.Equals(right);
        public static bool operator !=(ConnectorAs2ConfigPropertiesSigningAlgorithm left, ConnectorAs2ConfigPropertiesSigningAlgorithm right) => !left.Equals(right);

        public static explicit operator string(ConnectorAs2ConfigPropertiesSigningAlgorithm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorAs2ConfigPropertiesSigningAlgorithm other && Equals(other);
        public bool Equals(ConnectorAs2ConfigPropertiesSigningAlgorithm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConnectorEgressType : IEquatable<ConnectorEgressType>
    {
        private readonly string _value;

        private ConnectorEgressType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorEgressType ServiceManaged { get; } = new ConnectorEgressType("SERVICE_MANAGED");
        public static ConnectorEgressType VpcLattice { get; } = new ConnectorEgressType("VPC_LATTICE");

        public static bool operator ==(ConnectorEgressType left, ConnectorEgressType right) => left.Equals(right);
        public static bool operator !=(ConnectorEgressType left, ConnectorEgressType right) => !left.Equals(right);

        public static explicit operator string(ConnectorEgressType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorEgressType other && Equals(other);
        public bool Equals(ConnectorEgressType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ConnectorStatus : IEquatable<ConnectorStatus>
    {
        private readonly string _value;

        private ConnectorStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ConnectorStatus Active { get; } = new ConnectorStatus("ACTIVE");
        public static ConnectorStatus Pending { get; } = new ConnectorStatus("PENDING");
        public static ConnectorStatus Errored { get; } = new ConnectorStatus("ERRORED");

        public static bool operator ==(ConnectorStatus left, ConnectorStatus right) => left.Equals(right);
        public static bool operator !=(ConnectorStatus left, ConnectorStatus right) => !left.Equals(right);

        public static explicit operator string(ConnectorStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ConnectorStatus other && Equals(other);
        public bool Equals(ConnectorStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Enum specifying whether the profile is local or associated with a trading partner.
    /// </summary>
    [EnumType]
    public readonly struct ProfileType : IEquatable<ProfileType>
    {
        private readonly string _value;

        private ProfileType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ProfileType Local { get; } = new ProfileType("LOCAL");
        public static ProfileType Partner { get; } = new ProfileType("PARTNER");

        public static bool operator ==(ProfileType left, ProfileType right) => left.Equals(right);
        public static bool operator !=(ProfileType left, ProfileType right) => !left.Equals(right);

        public static explicit operator string(ProfileType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ProfileType other && Equals(other);
        public bool Equals(ProfileType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerAs2Transport : IEquatable<ServerAs2Transport>
    {
        private readonly string _value;

        private ServerAs2Transport(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerAs2Transport Http { get; } = new ServerAs2Transport("HTTP");

        public static bool operator ==(ServerAs2Transport left, ServerAs2Transport right) => left.Equals(right);
        public static bool operator !=(ServerAs2Transport left, ServerAs2Transport right) => !left.Equals(right);

        public static explicit operator string(ServerAs2Transport value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerAs2Transport other && Equals(other);
        public bool Equals(ServerAs2Transport other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Indicates whether optimization to directory listing on S3 servers is used. Disabled by default for compatibility.
    /// </summary>
    [EnumType]
    public readonly struct ServerDirectoryListingOptimization : IEquatable<ServerDirectoryListingOptimization>
    {
        private readonly string _value;

        private ServerDirectoryListingOptimization(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerDirectoryListingOptimization Enabled { get; } = new ServerDirectoryListingOptimization("ENABLED");
        public static ServerDirectoryListingOptimization Disabled { get; } = new ServerDirectoryListingOptimization("DISABLED");

        public static bool operator ==(ServerDirectoryListingOptimization left, ServerDirectoryListingOptimization right) => left.Equals(right);
        public static bool operator !=(ServerDirectoryListingOptimization left, ServerDirectoryListingOptimization right) => !left.Equals(right);

        public static explicit operator string(ServerDirectoryListingOptimization value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerDirectoryListingOptimization other && Equals(other);
        public bool Equals(ServerDirectoryListingOptimization other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerDomain : IEquatable<ServerDomain>
    {
        private readonly string _value;

        private ServerDomain(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerDomain S3 { get; } = new ServerDomain("S3");
        public static ServerDomain Efs { get; } = new ServerDomain("EFS");

        public static bool operator ==(ServerDomain left, ServerDomain right) => left.Equals(right);
        public static bool operator !=(ServerDomain left, ServerDomain right) => !left.Equals(right);

        public static explicit operator string(ServerDomain value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerDomain other && Equals(other);
        public bool Equals(ServerDomain other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerEndpointType : IEquatable<ServerEndpointType>
    {
        private readonly string _value;

        private ServerEndpointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerEndpointType Public { get; } = new ServerEndpointType("PUBLIC");
        public static ServerEndpointType Vpc { get; } = new ServerEndpointType("VPC");
        public static ServerEndpointType VpcEndpoint { get; } = new ServerEndpointType("VPC_ENDPOINT");

        public static bool operator ==(ServerEndpointType left, ServerEndpointType right) => left.Equals(right);
        public static bool operator !=(ServerEndpointType left, ServerEndpointType right) => !left.Equals(right);

        public static explicit operator string(ServerEndpointType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerEndpointType other && Equals(other);
        public bool Equals(ServerEndpointType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerIdentityProviderType : IEquatable<ServerIdentityProviderType>
    {
        private readonly string _value;

        private ServerIdentityProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerIdentityProviderType ServiceManaged { get; } = new ServerIdentityProviderType("SERVICE_MANAGED");
        public static ServerIdentityProviderType ApiGateway { get; } = new ServerIdentityProviderType("API_GATEWAY");
        public static ServerIdentityProviderType AwsDirectoryService { get; } = new ServerIdentityProviderType("AWS_DIRECTORY_SERVICE");
        public static ServerIdentityProviderType AwsLambda { get; } = new ServerIdentityProviderType("AWS_LAMBDA");

        public static bool operator ==(ServerIdentityProviderType left, ServerIdentityProviderType right) => left.Equals(right);
        public static bool operator !=(ServerIdentityProviderType left, ServerIdentityProviderType right) => !left.Equals(right);

        public static explicit operator string(ServerIdentityProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerIdentityProviderType other && Equals(other);
        public bool Equals(ServerIdentityProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerIpAddressType : IEquatable<ServerIpAddressType>
    {
        private readonly string _value;

        private ServerIpAddressType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerIpAddressType Ipv4 { get; } = new ServerIpAddressType("IPV4");
        public static ServerIpAddressType Dualstack { get; } = new ServerIpAddressType("DUALSTACK");

        public static bool operator ==(ServerIpAddressType left, ServerIpAddressType right) => left.Equals(right);
        public static bool operator !=(ServerIpAddressType left, ServerIpAddressType right) => !left.Equals(right);

        public static explicit operator string(ServerIpAddressType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerIpAddressType other && Equals(other);
        public bool Equals(ServerIpAddressType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerProtocol : IEquatable<ServerProtocol>
    {
        private readonly string _value;

        private ServerProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerProtocol Sftp { get; } = new ServerProtocol("SFTP");
        public static ServerProtocol Ftp { get; } = new ServerProtocol("FTP");
        public static ServerProtocol Ftps { get; } = new ServerProtocol("FTPS");
        public static ServerProtocol As2 { get; } = new ServerProtocol("AS2");

        public static bool operator ==(ServerProtocol left, ServerProtocol right) => left.Equals(right);
        public static bool operator !=(ServerProtocol left, ServerProtocol right) => !left.Equals(right);

        public static explicit operator string(ServerProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerProtocol other && Equals(other);
        public bool Equals(ServerProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerSetStatOption : IEquatable<ServerSetStatOption>
    {
        private readonly string _value;

        private ServerSetStatOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerSetStatOption Default { get; } = new ServerSetStatOption("DEFAULT");
        public static ServerSetStatOption EnableNoOp { get; } = new ServerSetStatOption("ENABLE_NO_OP");

        public static bool operator ==(ServerSetStatOption left, ServerSetStatOption right) => left.Equals(right);
        public static bool operator !=(ServerSetStatOption left, ServerSetStatOption right) => !left.Equals(right);

        public static explicit operator string(ServerSetStatOption value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerSetStatOption other && Equals(other);
        public bool Equals(ServerSetStatOption other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerSftpAuthenticationMethods : IEquatable<ServerSftpAuthenticationMethods>
    {
        private readonly string _value;

        private ServerSftpAuthenticationMethods(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerSftpAuthenticationMethods Password { get; } = new ServerSftpAuthenticationMethods("PASSWORD");
        public static ServerSftpAuthenticationMethods PublicKey { get; } = new ServerSftpAuthenticationMethods("PUBLIC_KEY");
        public static ServerSftpAuthenticationMethods PublicKeyOrPassword { get; } = new ServerSftpAuthenticationMethods("PUBLIC_KEY_OR_PASSWORD");
        public static ServerSftpAuthenticationMethods PublicKeyAndPassword { get; } = new ServerSftpAuthenticationMethods("PUBLIC_KEY_AND_PASSWORD");

        public static bool operator ==(ServerSftpAuthenticationMethods left, ServerSftpAuthenticationMethods right) => left.Equals(right);
        public static bool operator !=(ServerSftpAuthenticationMethods left, ServerSftpAuthenticationMethods right) => !left.Equals(right);

        public static explicit operator string(ServerSftpAuthenticationMethods value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerSftpAuthenticationMethods other && Equals(other);
        public bool Equals(ServerSftpAuthenticationMethods other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerState : IEquatable<ServerState>
    {
        private readonly string _value;

        private ServerState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerState Offline { get; } = new ServerState("OFFLINE");
        public static ServerState Online { get; } = new ServerState("ONLINE");
        public static ServerState Starting { get; } = new ServerState("STARTING");
        public static ServerState Stopping { get; } = new ServerState("STOPPING");
        public static ServerState StartFailed { get; } = new ServerState("START_FAILED");
        public static ServerState StopFailed { get; } = new ServerState("STOP_FAILED");

        public static bool operator ==(ServerState left, ServerState right) => left.Equals(right);
        public static bool operator !=(ServerState left, ServerState right) => !left.Equals(right);

        public static explicit operator string(ServerState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerState other && Equals(other);
        public bool Equals(ServerState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerTlsSessionResumptionMode : IEquatable<ServerTlsSessionResumptionMode>
    {
        private readonly string _value;

        private ServerTlsSessionResumptionMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerTlsSessionResumptionMode Disabled { get; } = new ServerTlsSessionResumptionMode("DISABLED");
        public static ServerTlsSessionResumptionMode Enabled { get; } = new ServerTlsSessionResumptionMode("ENABLED");
        public static ServerTlsSessionResumptionMode Enforced { get; } = new ServerTlsSessionResumptionMode("ENFORCED");

        public static bool operator ==(ServerTlsSessionResumptionMode left, ServerTlsSessionResumptionMode right) => left.Equals(right);
        public static bool operator !=(ServerTlsSessionResumptionMode left, ServerTlsSessionResumptionMode right) => !left.Equals(right);

        public static explicit operator string(ServerTlsSessionResumptionMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerTlsSessionResumptionMode other && Equals(other);
        public bool Equals(ServerTlsSessionResumptionMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct UserHomeDirectoryType : IEquatable<UserHomeDirectoryType>
    {
        private readonly string _value;

        private UserHomeDirectoryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserHomeDirectoryType Path { get; } = new UserHomeDirectoryType("PATH");
        public static UserHomeDirectoryType Logical { get; } = new UserHomeDirectoryType("LOGICAL");

        public static bool operator ==(UserHomeDirectoryType left, UserHomeDirectoryType right) => left.Equals(right);
        public static bool operator !=(UserHomeDirectoryType left, UserHomeDirectoryType right) => !left.Equals(right);

        public static explicit operator string(UserHomeDirectoryType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserHomeDirectoryType other && Equals(other);
        public bool Equals(UserHomeDirectoryType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct UserMapType : IEquatable<UserMapType>
    {
        private readonly string _value;

        private UserMapType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserMapType File { get; } = new UserMapType("FILE");
        public static UserMapType Directory { get; } = new UserMapType("DIRECTORY");

        public static bool operator ==(UserMapType left, UserMapType right) => left.Equals(right);
        public static bool operator !=(UserMapType left, UserMapType right) => !left.Equals(right);

        public static explicit operator string(UserMapType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserMapType other && Equals(other);
        public bool Equals(UserMapType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebAppEndpointPolicy : IEquatable<WebAppEndpointPolicy>
    {
        private readonly string _value;

        private WebAppEndpointPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebAppEndpointPolicy Standard { get; } = new WebAppEndpointPolicy("STANDARD");
        public static WebAppEndpointPolicy Fips { get; } = new WebAppEndpointPolicy("FIPS");

        public static bool operator ==(WebAppEndpointPolicy left, WebAppEndpointPolicy right) => left.Equals(right);
        public static bool operator !=(WebAppEndpointPolicy left, WebAppEndpointPolicy right) => !left.Equals(right);

        public static explicit operator string(WebAppEndpointPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebAppEndpointPolicy other && Equals(other);
        public bool Equals(WebAppEndpointPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
    /// </summary>
    [EnumType]
    public readonly struct WorkflowStepCopyStepDetailsPropertiesOverwriteExisting : IEquatable<WorkflowStepCopyStepDetailsPropertiesOverwriteExisting>
    {
        private readonly string _value;

        private WorkflowStepCopyStepDetailsPropertiesOverwriteExisting(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkflowStepCopyStepDetailsPropertiesOverwriteExisting True { get; } = new WorkflowStepCopyStepDetailsPropertiesOverwriteExisting("TRUE");
        public static WorkflowStepCopyStepDetailsPropertiesOverwriteExisting False { get; } = new WorkflowStepCopyStepDetailsPropertiesOverwriteExisting("FALSE");

        public static bool operator ==(WorkflowStepCopyStepDetailsPropertiesOverwriteExisting left, WorkflowStepCopyStepDetailsPropertiesOverwriteExisting right) => left.Equals(right);
        public static bool operator !=(WorkflowStepCopyStepDetailsPropertiesOverwriteExisting left, WorkflowStepCopyStepDetailsPropertiesOverwriteExisting right) => !left.Equals(right);

        public static explicit operator string(WorkflowStepCopyStepDetailsPropertiesOverwriteExisting value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkflowStepCopyStepDetailsPropertiesOverwriteExisting other && Equals(other);
        public bool Equals(WorkflowStepCopyStepDetailsPropertiesOverwriteExisting other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
    /// </summary>
    [EnumType]
    public readonly struct WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting : IEquatable<WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting>
    {
        private readonly string _value;

        private WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting True { get; } = new WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting("TRUE");
        public static WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting False { get; } = new WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting("FALSE");

        public static bool operator ==(WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting left, WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting right) => left.Equals(right);
        public static bool operator !=(WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting left, WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting right) => !left.Equals(right);

        public static explicit operator string(WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting other && Equals(other);
        public bool Equals(WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Specifies which encryption method to use.
    /// </summary>
    [EnumType]
    public readonly struct WorkflowStepDecryptStepDetailsPropertiesType : IEquatable<WorkflowStepDecryptStepDetailsPropertiesType>
    {
        private readonly string _value;

        private WorkflowStepDecryptStepDetailsPropertiesType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkflowStepDecryptStepDetailsPropertiesType Pgp { get; } = new WorkflowStepDecryptStepDetailsPropertiesType("PGP");

        public static bool operator ==(WorkflowStepDecryptStepDetailsPropertiesType left, WorkflowStepDecryptStepDetailsPropertiesType right) => left.Equals(right);
        public static bool operator !=(WorkflowStepDecryptStepDetailsPropertiesType left, WorkflowStepDecryptStepDetailsPropertiesType right) => !left.Equals(right);

        public static explicit operator string(WorkflowStepDecryptStepDetailsPropertiesType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkflowStepDecryptStepDetailsPropertiesType other && Equals(other);
        public bool Equals(WorkflowStepDecryptStepDetailsPropertiesType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WorkflowStepType : IEquatable<WorkflowStepType>
    {
        private readonly string _value;

        private WorkflowStepType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WorkflowStepType Copy { get; } = new WorkflowStepType("COPY");
        public static WorkflowStepType Custom { get; } = new WorkflowStepType("CUSTOM");
        public static WorkflowStepType Decrypt { get; } = new WorkflowStepType("DECRYPT");
        public static WorkflowStepType Delete { get; } = new WorkflowStepType("DELETE");
        public static WorkflowStepType Tag { get; } = new WorkflowStepType("TAG");

        public static bool operator ==(WorkflowStepType left, WorkflowStepType right) => left.Equals(right);
        public static bool operator !=(WorkflowStepType left, WorkflowStepType right) => !left.Equals(right);

        public static explicit operator string(WorkflowStepType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WorkflowStepType other && Equals(other);
        public bool Equals(WorkflowStepType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
