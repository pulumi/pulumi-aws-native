// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.OpsWorks
{
    public static class GetLayer
    {
        /// <summary>
        /// Resource Type definition for AWS::OpsWorks::Layer
        /// </summary>
        public static Task<GetLayerResult> InvokeAsync(GetLayerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLayerResult>("aws-native:opsworks:getLayer", args ?? new GetLayerArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::OpsWorks::Layer
        /// </summary>
        public static Output<GetLayerResult> Invoke(GetLayerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetLayerResult>("aws-native:opsworks:getLayer", args ?? new GetLayerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLayerArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetLayerArgs()
        {
        }
    }

    public sealed class GetLayerInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetLayerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLayerResult
    {
        public readonly object? Attributes;
        public readonly bool? AutoAssignElasticIps;
        public readonly bool? AutoAssignPublicIps;
        public readonly string? CustomInstanceProfileArn;
        public readonly object? CustomJson;
        public readonly Outputs.LayerRecipes? CustomRecipes;
        public readonly ImmutableArray<string> CustomSecurityGroupIds;
        public readonly bool? EnableAutoHealing;
        public readonly string? Id;
        public readonly bool? InstallUpdatesOnBoot;
        public readonly Outputs.LayerLifecycleEventConfiguration? LifecycleEventConfiguration;
        public readonly Outputs.LayerLoadBasedAutoScaling? LoadBasedAutoScaling;
        public readonly string? Name;
        public readonly ImmutableArray<string> Packages;
        public readonly string? Shortname;
        public readonly ImmutableArray<Outputs.LayerTag> Tags;
        public readonly bool? UseEbsOptimizedInstances;
        public readonly ImmutableArray<Outputs.LayerVolumeConfiguration> VolumeConfigurations;

        [OutputConstructor]
        private GetLayerResult(
            object? attributes,

            bool? autoAssignElasticIps,

            bool? autoAssignPublicIps,

            string? customInstanceProfileArn,

            object? customJson,

            Outputs.LayerRecipes? customRecipes,

            ImmutableArray<string> customSecurityGroupIds,

            bool? enableAutoHealing,

            string? id,

            bool? installUpdatesOnBoot,

            Outputs.LayerLifecycleEventConfiguration? lifecycleEventConfiguration,

            Outputs.LayerLoadBasedAutoScaling? loadBasedAutoScaling,

            string? name,

            ImmutableArray<string> packages,

            string? shortname,

            ImmutableArray<Outputs.LayerTag> tags,

            bool? useEbsOptimizedInstances,

            ImmutableArray<Outputs.LayerVolumeConfiguration> volumeConfigurations)
        {
            Attributes = attributes;
            AutoAssignElasticIps = autoAssignElasticIps;
            AutoAssignPublicIps = autoAssignPublicIps;
            CustomInstanceProfileArn = customInstanceProfileArn;
            CustomJson = customJson;
            CustomRecipes = customRecipes;
            CustomSecurityGroupIds = customSecurityGroupIds;
            EnableAutoHealing = enableAutoHealing;
            Id = id;
            InstallUpdatesOnBoot = installUpdatesOnBoot;
            LifecycleEventConfiguration = lifecycleEventConfiguration;
            LoadBasedAutoScaling = loadBasedAutoScaling;
            Name = name;
            Packages = packages;
            Shortname = shortname;
            Tags = tags;
            UseEbsOptimizedInstances = useEbsOptimizedInstances;
            VolumeConfigurations = volumeConfigurations;
        }
    }
}
