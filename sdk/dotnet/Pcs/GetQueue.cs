// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Pcs
{
    public static class GetQueue
    {
        /// <summary>
        /// AWS::PCS::Queue resource creates an AWS PCS queue.
        /// </summary>
        public static Task<GetQueueResult> InvokeAsync(GetQueueArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetQueueResult>("aws-native:pcs:getQueue", args ?? new GetQueueArgs(), options.WithDefaults());

        /// <summary>
        /// AWS::PCS::Queue resource creates an AWS PCS queue.
        /// </summary>
        public static Output<GetQueueResult> Invoke(GetQueueInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetQueueResult>("aws-native:pcs:getQueue", args ?? new GetQueueInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// AWS::PCS::Queue resource creates an AWS PCS queue.
        /// </summary>
        public static Output<GetQueueResult> Invoke(GetQueueInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetQueueResult>("aws-native:pcs:getQueue", args ?? new GetQueueInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQueueArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique Amazon Resource Name (ARN) of the queue.
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetQueueArgs()
        {
        }
        public static new GetQueueArgs Empty => new GetQueueArgs();
    }

    public sealed class GetQueueInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique Amazon Resource Name (ARN) of the queue.
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetQueueInvokeArgs()
        {
        }
        public static new GetQueueInvokeArgs Empty => new GetQueueInvokeArgs();
    }


    [OutputType]
    public sealed class GetQueueResult
    {
        /// <summary>
        /// The unique Amazon Resource Name (ARN) of the queue.
        /// </summary>
        public readonly string? Arn;
        /// <summary>
        /// The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.QueueComputeNodeGroupConfiguration> ComputeNodeGroupConfigurations;
        /// <summary>
        /// The list of errors that occurred during queue provisioning.
        /// </summary>
        public readonly ImmutableArray<Outputs.QueueErrorInfo> ErrorInfo;
        /// <summary>
        /// The generated unique ID of the queue.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
        /// </summary>
        public readonly Pulumi.AwsNative.Pcs.QueueStatus? Status;
        /// <summary>
        /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetQueueResult(
            string? arn,

            ImmutableArray<Outputs.QueueComputeNodeGroupConfiguration> computeNodeGroupConfigurations,

            ImmutableArray<Outputs.QueueErrorInfo> errorInfo,

            string? id,

            Pulumi.AwsNative.Pcs.QueueStatus? status,

            ImmutableDictionary<string, string>? tags)
        {
            Arn = arn;
            ComputeNodeGroupConfigurations = computeNodeGroupConfigurations;
            ErrorInfo = errorInfo;
            Id = id;
            Status = status;
            Tags = tags;
        }
    }
}
