// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Pcs
{
    /// <summary>
    /// AWS::PCS::Queue resource creates an AWS PCS queue.
    /// </summary>
    [AwsNativeResourceType("aws-native:pcs:Queue")]
    public partial class Queue : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique Amazon Resource Name (ARN) of the queue.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The generated unique ID of the queue.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The ID of the cluster of the queue.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
        /// </summary>
        [Output("computeNodeGroupConfigurations")]
        public Output<ImmutableArray<Outputs.QueueComputeNodeGroupConfiguration>> ComputeNodeGroupConfigurations { get; private set; } = null!;

        /// <summary>
        /// The list of errors that occurred during queue provisioning.
        /// </summary>
        [Output("errorInfo")]
        public Output<ImmutableArray<Outputs.QueueErrorInfo>> ErrorInfo { get; private set; } = null!;

        /// <summary>
        /// The name that identifies the queue.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
        /// </summary>
        [Output("status")]
        public Output<Pulumi.AwsNative.Pcs.QueueStatus> Status { get; private set; } = null!;

        /// <summary>
        /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Queue resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Queue(string name, QueueArgs args, CustomResourceOptions? options = null)
            : base("aws-native:pcs:Queue", name, args ?? new QueueArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Queue(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:pcs:Queue", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "clusterId",
                    "name",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Queue resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Queue Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Queue(name, id, options);
        }
    }

    public sealed class QueueArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the cluster of the queue.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("computeNodeGroupConfigurations")]
        private InputList<Inputs.QueueComputeNodeGroupConfigurationArgs>? _computeNodeGroupConfigurations;

        /// <summary>
        /// The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
        /// </summary>
        public InputList<Inputs.QueueComputeNodeGroupConfigurationArgs> ComputeNodeGroupConfigurations
        {
            get => _computeNodeGroupConfigurations ?? (_computeNodeGroupConfigurations = new InputList<Inputs.QueueComputeNodeGroupConfigurationArgs>());
            set => _computeNodeGroupConfigurations = value;
        }

        /// <summary>
        /// The name that identifies the queue.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public QueueArgs()
        {
        }
        public static new QueueArgs Empty => new QueueArgs();
    }
}
