// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Pcs
{
    /// <summary>
    /// AWS::PCS::ComputeNodeGroup resource creates an AWS PCS compute node group.
    /// </summary>
    [AwsNativeResourceType("aws-native:pcs:ComputeNodeGroup")]
    public partial class ComputeNodeGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
        /// </summary>
        [Output("amiId")]
        public Output<string?> AmiId { get; private set; } = null!;

        /// <summary>
        /// The unique Amazon Resource Name (ARN) of the compute node group.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The generated unique ID of the compute node group.
        /// </summary>
        [Output("awsId")]
        public Output<string> AwsId { get; private set; } = null!;

        /// <summary>
        /// The ID of the cluster of the compute node group.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
        /// </summary>
        [Output("customLaunchTemplate")]
        public Output<Outputs.CustomLaunchTemplateProperties> CustomLaunchTemplate { get; private set; } = null!;

        /// <summary>
        /// The list of errors that occurred during compute node group provisioning.
        /// </summary>
        [Output("errorInfo")]
        public Output<ImmutableArray<Outputs.ComputeNodeGroupErrorInfo>> ErrorInfo { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
        /// </summary>
        [Output("iamInstanceProfileArn")]
        public Output<string> IamInstanceProfileArn { get; private set; } = null!;

        /// <summary>
        /// A list of EC2 instance configurations that AWS PCS can provision in the compute node group.
        /// </summary>
        [Output("instanceConfigs")]
        public Output<ImmutableArray<Outputs.ComputeNodeGroupInstanceConfig>> InstanceConfigs { get; private set; } = null!;

        /// <summary>
        /// The name that identifies the compute node group.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand and Spot instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
        /// </summary>
        [Output("purchaseOption")]
        public Output<Pulumi.AwsNative.Pcs.ComputeNodeGroupPurchaseOption?> PurchaseOption { get; private set; } = null!;

        /// <summary>
        /// Specifies the boundaries of the compute node group auto scaling.
        /// </summary>
        [Output("scalingConfiguration")]
        public Output<Outputs.ScalingConfigurationProperties> ScalingConfiguration { get; private set; } = null!;

        /// <summary>
        /// Additional options related to the Slurm scheduler.
        /// </summary>
        [Output("slurmConfiguration")]
        public Output<Outputs.SlurmConfigurationProperties?> SlurmConfiguration { get; private set; } = null!;

        /// <summary>
        /// Additional configuration when you specify SPOT as the purchase option.
        /// </summary>
        [Output("spotOptions")]
        public Output<Outputs.SpotOptionsProperties?> SpotOptions { get; private set; } = null!;

        /// <summary>
        /// The provisioning status of the compute node group. The provisioning status doesn't indicate the overall health of the compute node group.
        /// </summary>
        [Output("status")]
        public Output<Pulumi.AwsNative.Pcs.ComputeNodeGroupStatus> Status { get; private set; } = null!;

        /// <summary>
        /// The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ComputeNodeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputeNodeGroup(string name, ComputeNodeGroupArgs args, CustomResourceOptions? options = null)
            : base("aws-native:pcs:ComputeNodeGroup", name, args ?? new ComputeNodeGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComputeNodeGroup(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:pcs:ComputeNodeGroup", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "clusterId",
                    "instanceConfigs[*]",
                    "name",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputeNodeGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputeNodeGroup Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ComputeNodeGroup(name, id, options);
        }
    }

    public sealed class ComputeNodeGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Amazon Machine Image (AMI) that AWS PCS uses to launch instances. If not provided, AWS PCS uses the AMI ID specified in the custom launch template.
        /// </summary>
        [Input("amiId")]
        public Input<string>? AmiId { get; set; }

        /// <summary>
        /// The ID of the cluster of the compute node group.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// An Amazon EC2 launch template AWS PCS uses to launch compute nodes.
        /// </summary>
        [Input("customLaunchTemplate", required: true)]
        public Input<Inputs.CustomLaunchTemplatePropertiesArgs> CustomLaunchTemplate { get; set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM instance profile used to pass an IAM role when launching EC2 instances. The role contained in your instance profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision instances correctly.
        /// </summary>
        [Input("iamInstanceProfileArn", required: true)]
        public Input<string> IamInstanceProfileArn { get; set; } = null!;

        [Input("instanceConfigs", required: true)]
        private InputList<Inputs.ComputeNodeGroupInstanceConfigArgs>? _instanceConfigs;

        /// <summary>
        /// A list of EC2 instance configurations that AWS PCS can provision in the compute node group.
        /// </summary>
        public InputList<Inputs.ComputeNodeGroupInstanceConfigArgs> InstanceConfigs
        {
            get => _instanceConfigs ?? (_instanceConfigs = new InputList<Inputs.ComputeNodeGroupInstanceConfigArgs>());
            set => _instanceConfigs = value;
        }

        /// <summary>
        /// The name that identifies the compute node group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies how EC2 instances are purchased on your behalf. AWS PCS supports On-Demand and Spot instances. For more information, see Instance purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide this option, it defaults to On-Demand.
        /// </summary>
        [Input("purchaseOption")]
        public Input<Pulumi.AwsNative.Pcs.ComputeNodeGroupPurchaseOption>? PurchaseOption { get; set; }

        /// <summary>
        /// Specifies the boundaries of the compute node group auto scaling.
        /// </summary>
        [Input("scalingConfiguration", required: true)]
        public Input<Inputs.ScalingConfigurationPropertiesArgs> ScalingConfiguration { get; set; } = null!;

        /// <summary>
        /// Additional options related to the Slurm scheduler.
        /// </summary>
        [Input("slurmConfiguration")]
        public Input<Inputs.SlurmConfigurationPropertiesArgs>? SlurmConfiguration { get; set; }

        /// <summary>
        /// Additional configuration when you specify SPOT as the purchase option.
        /// </summary>
        [Input("spotOptions")]
        public Input<Inputs.SpotOptionsPropertiesArgs>? SpotOptions { get; set; }

        [Input("subnetIds", required: true)]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// The list of subnet IDs where instances are provisioned by the compute node group. The subnets must be in the same VPC as the cluster.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ComputeNodeGroupArgs()
        {
        }
        public static new ComputeNodeGroupArgs Empty => new ComputeNodeGroupArgs();
    }
}
