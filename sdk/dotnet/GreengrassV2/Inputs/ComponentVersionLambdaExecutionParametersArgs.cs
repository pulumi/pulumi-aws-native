// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.GreengrassV2.Inputs
{

    public sealed class ComponentVersionLambdaExecutionParametersArgs : global::Pulumi.ResourceArgs
    {
        [Input("environmentVariables")]
        private InputMap<string>? _environmentVariables;

        /// <summary>
        /// The map of environment variables that are available to the Lambda function when it runs.
        /// </summary>
        public InputMap<string> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputMap<string>());
            set => _environmentVariables = value;
        }

        [Input("eventSources")]
        private InputList<Inputs.ComponentVersionLambdaEventSourceArgs>? _eventSources;

        /// <summary>
        /// The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and AWS IoT Core MQTT messages.
        /// </summary>
        public InputList<Inputs.ComponentVersionLambdaEventSourceArgs> EventSources
        {
            get => _eventSources ?? (_eventSources = new InputList<Inputs.ComponentVersionLambdaEventSourceArgs>());
            set => _eventSources = value;
        }

        [Input("execArgs")]
        private InputList<string>? _execArgs;

        /// <summary>
        /// The list of arguments to pass to the Lambda function when it runs.
        /// </summary>
        public InputList<string> ExecArgs
        {
            get => _execArgs ?? (_execArgs = new InputList<string>());
            set => _execArgs = value;
        }

        /// <summary>
        /// The encoding type that the Lambda function supports.
        /// 
        /// Default: `json`
        /// </summary>
        [Input("inputPayloadEncodingType")]
        public Input<Pulumi.AwsNative.GreengrassV2.ComponentVersionLambdaExecutionParametersInputPayloadEncodingType>? InputPayloadEncodingType { get; set; }

        /// <summary>
        /// The parameters for the Linux process that contains the Lambda function.
        /// </summary>
        [Input("linuxProcessParams")]
        public Input<Inputs.ComponentVersionLambdaLinuxProcessParamsArgs>? LinuxProcessParams { get; set; }

        /// <summary>
        /// The maximum amount of time in seconds that a non-pinned Lambda function can idle before the AWS IoT Greengrass Core software stops its process.
        /// </summary>
        [Input("maxIdleTimeInSeconds")]
        public Input<int>? MaxIdleTimeInSeconds { get; set; }

        /// <summary>
        /// The maximum number of instances that a non-pinned Lambda function can run at the same time.
        /// </summary>
        [Input("maxInstancesCount")]
        public Input<int>? MaxInstancesCount { get; set; }

        /// <summary>
        /// The maximum size of the message queue for the Lambda function component. The AWS IoT Greengrass core device stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.
        /// </summary>
        [Input("maxQueueSize")]
        public Input<int>? MaxQueueSize { get; set; }

        /// <summary>
        /// Whether or not the Lambda function is pinned, or long-lived.
        /// 
        /// - A pinned Lambda function starts when the AWS IoT Greengrass Core starts and keeps running in its own container.
        /// - A non-pinned Lambda function starts only when it receives a work item and exists after it idles for `maxIdleTimeInSeconds` . If the function has multiple work items, the AWS IoT Greengrass Core software creates multiple instances of the function.
        /// 
        /// Default: `true`
        /// </summary>
        [Input("pinned")]
        public Input<bool>? Pinned { get; set; }

        /// <summary>
        /// The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.
        /// </summary>
        [Input("statusTimeoutInSeconds")]
        public Input<int>? StatusTimeoutInSeconds { get; set; }

        /// <summary>
        /// The maximum amount of time in seconds that the Lambda function can process a work item.
        /// </summary>
        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        public ComponentVersionLambdaExecutionParametersArgs()
        {
        }
        public static new ComponentVersionLambdaExecutionParametersArgs Empty => new ComponentVersionLambdaExecutionParametersArgs();
    }
}
