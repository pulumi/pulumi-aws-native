// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.OSIS
{
    /// <summary>
    /// An OpenSearch Ingestion Service Data Prepper pipeline running Data Prepper.
    /// </summary>
    [AwsNativeResourceType("aws-native:osis:Pipeline")]
    public partial class Pipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of endpoints that can be used for ingesting data into a pipeline
        /// </summary>
        [Output("ingestEndpointUrls")]
        public Output<ImmutableArray<string>> IngestEndpointUrls { get; private set; } = null!;

        [Output("logPublishingOptions")]
        public Output<Outputs.PipelineLogPublishingOptions?> LogPublishingOptions { get; private set; } = null!;

        /// <summary>
        /// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Output("maxUnits")]
        public Output<int> MaxUnits { get; private set; } = null!;

        /// <summary>
        /// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Output("minUnits")]
        public Output<int> MinUnits { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the pipeline.
        /// </summary>
        [Output("pipelineArn")]
        public Output<string> PipelineArn { get; private set; } = null!;

        /// <summary>
        /// The Data Prepper pipeline configuration in YAML format.
        /// </summary>
        [Output("pipelineConfigurationBody")]
        public Output<string> PipelineConfigurationBody { get; private set; } = null!;

        /// <summary>
        /// Name of the OpenSearch Ingestion Service pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
        /// </summary>
        [Output("pipelineName")]
        public Output<string> PipelineName { get; private set; } = null!;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.PipelineTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The VPC interface endpoints that have access to the pipeline.
        /// </summary>
        [Output("vpcEndpoints")]
        public Output<ImmutableArray<Outputs.PipelineVpcEndpoint>> VpcEndpoints { get; private set; } = null!;

        [Output("vpcOptions")]
        public Output<Outputs.PipelineVpcOptions?> VpcOptions { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("aws-native:osis:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:osis:Pipeline", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, options);
        }
    }

    public sealed class PipelineArgs : global::Pulumi.ResourceArgs
    {
        [Input("logPublishingOptions")]
        public Input<Inputs.PipelineLogPublishingOptionsArgs>? LogPublishingOptions { get; set; }

        /// <summary>
        /// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Input("maxUnits", required: true)]
        public Input<int> MaxUnits { get; set; } = null!;

        /// <summary>
        /// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Input("minUnits", required: true)]
        public Input<int> MinUnits { get; set; } = null!;

        /// <summary>
        /// The Data Prepper pipeline configuration in YAML format.
        /// </summary>
        [Input("pipelineConfigurationBody", required: true)]
        public Input<string> PipelineConfigurationBody { get; set; } = null!;

        /// <summary>
        /// Name of the OpenSearch Ingestion Service pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
        /// </summary>
        [Input("pipelineName")]
        public Input<string>? PipelineName { get; set; }

        [Input("tags")]
        private InputList<Inputs.PipelineTagArgs>? _tags;

        /// <summary>
        /// An array of key-value pairs to apply to this resource.
        /// </summary>
        public InputList<Inputs.PipelineTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PipelineTagArgs>());
            set => _tags = value;
        }

        [Input("vpcOptions")]
        public Input<Inputs.PipelineVpcOptionsArgs>? VpcOptions { get; set; }

        public PipelineArgs()
        {
        }
        public static new PipelineArgs Empty => new PipelineArgs();
    }
}
