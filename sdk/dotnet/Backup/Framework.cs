// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Backup
{
    /// <summary>
    /// Contains detailed information about a framework. Frameworks contain controls, which evaluate and report on your backup events and resources. Frameworks generate daily compliance results.
    /// </summary>
    [AwsNativeResourceType("aws-native:backup:Framework")]
    public partial class Framework : Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC). The value of `CreationTime` is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
        /// </summary>
        [Output("creationTime")]
        public Output<double> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED`
        /// </summary>
        [Output("deploymentStatus")]
        public Output<string> DeploymentStatus { get; private set; } = null!;

        /// <summary>
        /// An Amazon Resource Name (ARN) that uniquely identifies Framework as a resource
        /// </summary>
        [Output("frameworkArn")]
        public Output<string> FrameworkArn { get; private set; } = null!;

        /// <summary>
        /// Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
        /// </summary>
        [Output("frameworkControls")]
        public Output<ImmutableArray<Outputs.FrameworkControl>> FrameworkControls { get; private set; } = null!;

        /// <summary>
        /// An optional description of the framework with a maximum 1,024 characters.
        /// </summary>
        [Output("frameworkDescription")]
        public Output<string?> FrameworkDescription { get; private set; } = null!;

        /// <summary>
        /// The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
        /// </summary>
        [Output("frameworkName")]
        public Output<string?> FrameworkName { get; private set; } = null!;

        /// <summary>
        /// A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are:
        /// 
        /// `ACTIVE` when recording is turned on for all resources governed by the framework.
        /// 
        /// `PARTIALLY_ACTIVE` when recording is turned off for at least one resource governed by the framework.
        /// 
        /// `INACTIVE` when recording is turned off for all resources governed by the framework.
        /// 
        /// `UNAVAILABLE` when AWS Backup is unable to validate recording status at this time.
        /// </summary>
        [Output("frameworkStatus")]
        public Output<string> FrameworkStatus { get; private set; } = null!;

        /// <summary>
        /// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
        /// </summary>
        [Output("frameworkTags")]
        public Output<ImmutableArray<Outputs.FrameworkTag>> FrameworkTags { get; private set; } = null!;


        /// <summary>
        /// Create a Framework resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Framework(string name, FrameworkArgs args, CustomResourceOptions? options = null)
            : base("aws-native:backup:Framework", name, args ?? new FrameworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Framework(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:backup:Framework", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Framework resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Framework Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Framework(name, id, options);
        }
    }

    public sealed class FrameworkArgs : Pulumi.ResourceArgs
    {
        [Input("frameworkControls", required: true)]
        private InputList<Inputs.FrameworkControlArgs>? _frameworkControls;

        /// <summary>
        /// Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.
        /// </summary>
        public InputList<Inputs.FrameworkControlArgs> FrameworkControls
        {
            get => _frameworkControls ?? (_frameworkControls = new InputList<Inputs.FrameworkControlArgs>());
            set => _frameworkControls = value;
        }

        /// <summary>
        /// An optional description of the framework with a maximum 1,024 characters.
        /// </summary>
        [Input("frameworkDescription")]
        public Input<string>? FrameworkDescription { get; set; }

        /// <summary>
        /// The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).
        /// </summary>
        [Input("frameworkName")]
        public Input<string>? FrameworkName { get; set; }

        [Input("frameworkTags")]
        private InputList<Inputs.FrameworkTagArgs>? _frameworkTags;

        /// <summary>
        /// Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.
        /// </summary>
        public InputList<Inputs.FrameworkTagArgs> FrameworkTags
        {
            get => _frameworkTags ?? (_frameworkTags = new InputList<Inputs.FrameworkTagArgs>());
            set => _frameworkTags = value;
        }

        public FrameworkArgs()
        {
        }
    }
}
