// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Backup
{
    public static class GetBackupVault
    {
        /// <summary>
        /// Resource Type definition for AWS::Backup::BackupVault
        /// </summary>
        public static Task<GetBackupVaultResult> InvokeAsync(GetBackupVaultArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupVaultResult>("aws-native:backup:getBackupVault", args ?? new GetBackupVaultArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Backup::BackupVault
        /// </summary>
        public static Output<GetBackupVaultResult> Invoke(GetBackupVaultInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupVaultResult>("aws-native:backup:getBackupVault", args ?? new GetBackupVaultInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resource Type definition for AWS::Backup::BackupVault
        /// </summary>
        public static Output<GetBackupVaultResult> Invoke(GetBackupVaultInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupVaultResult>("aws-native:backup:getBackupVault", args ?? new GetBackupVaultInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupVaultArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created.
        /// </summary>
        [Input("backupVaultName", required: true)]
        public string BackupVaultName { get; set; } = null!;

        public GetBackupVaultArgs()
        {
        }
        public static new GetBackupVaultArgs Empty => new GetBackupVaultArgs();
    }

    public sealed class GetBackupVaultInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created.
        /// </summary>
        [Input("backupVaultName", required: true)]
        public Input<string> BackupVaultName { get; set; } = null!;

        public GetBackupVaultInvokeArgs()
        {
        }
        public static new GetBackupVaultInvokeArgs Empty => new GetBackupVaultInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupVaultResult
    {
        /// <summary>
        /// A resource-based policy that is used to manage access permissions on the target backup vault.
        /// 
        /// Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Backup::BackupVault` for more information about the expected schema for this property.
        /// </summary>
        public readonly object? AccessPolicy;
        /// <summary>
        /// An Amazon Resource Name (ARN) that uniquely identifies a backup vault; for example, `arn:aws:backup:us-east-1:123456789012:backup-vault:aBackupVault` .
        /// </summary>
        public readonly string? BackupVaultArn;
        /// <summary>
        /// The tags to assign to the backup vault.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? BackupVaultTags;
        /// <summary>
        /// Configuration for [AWS Backup Vault Lock](https://docs.aws.amazon.com/aws-backup/latest/devguide/vault-lock.html) .
        /// </summary>
        public readonly Outputs.BackupVaultLockConfigurationType? LockConfiguration;
        /// <summary>
        /// The SNS event notifications for the specified backup vault.
        /// </summary>
        public readonly Outputs.BackupVaultNotificationObjectType? Notifications;

        [OutputConstructor]
        private GetBackupVaultResult(
            object? accessPolicy,

            string? backupVaultArn,

            ImmutableDictionary<string, string>? backupVaultTags,

            Outputs.BackupVaultLockConfigurationType? lockConfiguration,

            Outputs.BackupVaultNotificationObjectType? notifications)
        {
            AccessPolicy = accessPolicy;
            BackupVaultArn = backupVaultArn;
            BackupVaultTags = backupVaultTags;
            LockConfiguration = lockConfiguration;
            Notifications = notifications;
        }
    }
}
