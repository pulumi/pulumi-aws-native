// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.WorkSpacesWeb
{
    [EnumType]
    public readonly struct IdentityProviderType : IEquatable<IdentityProviderType>
    {
        private readonly string _value;

        private IdentityProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityProviderType Saml { get; } = new IdentityProviderType("SAML");
        public static IdentityProviderType Facebook { get; } = new IdentityProviderType("Facebook");
        public static IdentityProviderType Google { get; } = new IdentityProviderType("Google");
        public static IdentityProviderType LoginWithAmazon { get; } = new IdentityProviderType("LoginWithAmazon");
        public static IdentityProviderType SignInWithApple { get; } = new IdentityProviderType("SignInWithApple");
        public static IdentityProviderType Oidc { get; } = new IdentityProviderType("OIDC");

        public static bool operator ==(IdentityProviderType left, IdentityProviderType right) => left.Equals(right);
        public static bool operator !=(IdentityProviderType left, IdentityProviderType right) => !left.Equals(right);

        public static explicit operator string(IdentityProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityProviderType other && Equals(other);
        public bool Equals(IdentityProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PortalAuthenticationType : IEquatable<PortalAuthenticationType>
    {
        private readonly string _value;

        private PortalAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortalAuthenticationType Standard { get; } = new PortalAuthenticationType("Standard");
        public static PortalAuthenticationType IamIdentityCenter { get; } = new PortalAuthenticationType("IAM_Identity_Center");

        public static bool operator ==(PortalAuthenticationType left, PortalAuthenticationType right) => left.Equals(right);
        public static bool operator !=(PortalAuthenticationType left, PortalAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(PortalAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortalAuthenticationType other && Equals(other);
        public bool Equals(PortalAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PortalBrowserType : IEquatable<PortalBrowserType>
    {
        private readonly string _value;

        private PortalBrowserType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortalBrowserType Chrome { get; } = new PortalBrowserType("Chrome");

        public static bool operator ==(PortalBrowserType left, PortalBrowserType right) => left.Equals(right);
        public static bool operator !=(PortalBrowserType left, PortalBrowserType right) => !left.Equals(right);

        public static explicit operator string(PortalBrowserType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortalBrowserType other && Equals(other);
        public bool Equals(PortalBrowserType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PortalRendererType : IEquatable<PortalRendererType>
    {
        private readonly string _value;

        private PortalRendererType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortalRendererType AppStream { get; } = new PortalRendererType("AppStream");

        public static bool operator ==(PortalRendererType left, PortalRendererType right) => left.Equals(right);
        public static bool operator !=(PortalRendererType left, PortalRendererType right) => !left.Equals(right);

        public static explicit operator string(PortalRendererType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortalRendererType other && Equals(other);
        public bool Equals(PortalRendererType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PortalStatus : IEquatable<PortalStatus>
    {
        private readonly string _value;

        private PortalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortalStatus Incomplete { get; } = new PortalStatus("Incomplete");
        public static PortalStatus Pending { get; } = new PortalStatus("Pending");
        public static PortalStatus Active { get; } = new PortalStatus("Active");

        public static bool operator ==(PortalStatus left, PortalStatus right) => left.Equals(right);
        public static bool operator !=(PortalStatus left, PortalStatus right) => !left.Equals(right);

        public static explicit operator string(PortalStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortalStatus other && Equals(other);
        public bool Equals(PortalStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct UserSettingsEnabledType : IEquatable<UserSettingsEnabledType>
    {
        private readonly string _value;

        private UserSettingsEnabledType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserSettingsEnabledType Disabled { get; } = new UserSettingsEnabledType("Disabled");
        public static UserSettingsEnabledType Enabled { get; } = new UserSettingsEnabledType("Enabled");

        public static bool operator ==(UserSettingsEnabledType left, UserSettingsEnabledType right) => left.Equals(right);
        public static bool operator !=(UserSettingsEnabledType left, UserSettingsEnabledType right) => !left.Equals(right);

        public static explicit operator string(UserSettingsEnabledType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserSettingsEnabledType other && Equals(other);
        public bool Equals(UserSettingsEnabledType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
