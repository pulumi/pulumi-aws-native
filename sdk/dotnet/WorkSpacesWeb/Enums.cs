// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.WorkSpacesWeb
{
    [EnumType]
    public readonly struct DataProtectionSettingsRedactionPlaceHolderType : IEquatable<DataProtectionSettingsRedactionPlaceHolderType>
    {
        private readonly string _value;

        private DataProtectionSettingsRedactionPlaceHolderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DataProtectionSettingsRedactionPlaceHolderType CustomText { get; } = new DataProtectionSettingsRedactionPlaceHolderType("CustomText");

        public static bool operator ==(DataProtectionSettingsRedactionPlaceHolderType left, DataProtectionSettingsRedactionPlaceHolderType right) => left.Equals(right);
        public static bool operator !=(DataProtectionSettingsRedactionPlaceHolderType left, DataProtectionSettingsRedactionPlaceHolderType right) => !left.Equals(right);

        public static explicit operator string(DataProtectionSettingsRedactionPlaceHolderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DataProtectionSettingsRedactionPlaceHolderType other && Equals(other);
        public bool Equals(DataProtectionSettingsRedactionPlaceHolderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct IdentityProviderType : IEquatable<IdentityProviderType>
    {
        private readonly string _value;

        private IdentityProviderType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static IdentityProviderType Saml { get; } = new IdentityProviderType("SAML");
        public static IdentityProviderType Facebook { get; } = new IdentityProviderType("Facebook");
        public static IdentityProviderType Google { get; } = new IdentityProviderType("Google");
        public static IdentityProviderType LoginWithAmazon { get; } = new IdentityProviderType("LoginWithAmazon");
        public static IdentityProviderType SignInWithApple { get; } = new IdentityProviderType("SignInWithApple");
        public static IdentityProviderType Oidc { get; } = new IdentityProviderType("OIDC");

        public static bool operator ==(IdentityProviderType left, IdentityProviderType right) => left.Equals(right);
        public static bool operator !=(IdentityProviderType left, IdentityProviderType right) => !left.Equals(right);

        public static explicit operator string(IdentityProviderType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is IdentityProviderType other && Equals(other);
        public bool Equals(IdentityProviderType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PortalAuthenticationType : IEquatable<PortalAuthenticationType>
    {
        private readonly string _value;

        private PortalAuthenticationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortalAuthenticationType Standard { get; } = new PortalAuthenticationType("Standard");
        public static PortalAuthenticationType IamIdentityCenter { get; } = new PortalAuthenticationType("IAM_Identity_Center");

        public static bool operator ==(PortalAuthenticationType left, PortalAuthenticationType right) => left.Equals(right);
        public static bool operator !=(PortalAuthenticationType left, PortalAuthenticationType right) => !left.Equals(right);

        public static explicit operator string(PortalAuthenticationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortalAuthenticationType other && Equals(other);
        public bool Equals(PortalAuthenticationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PortalBrowserType : IEquatable<PortalBrowserType>
    {
        private readonly string _value;

        private PortalBrowserType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortalBrowserType Chrome { get; } = new PortalBrowserType("Chrome");

        public static bool operator ==(PortalBrowserType left, PortalBrowserType right) => left.Equals(right);
        public static bool operator !=(PortalBrowserType left, PortalBrowserType right) => !left.Equals(right);

        public static explicit operator string(PortalBrowserType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortalBrowserType other && Equals(other);
        public bool Equals(PortalBrowserType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PortalInstanceType : IEquatable<PortalInstanceType>
    {
        private readonly string _value;

        private PortalInstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortalInstanceType StandardRegular { get; } = new PortalInstanceType("standard.regular");
        public static PortalInstanceType StandardLarge { get; } = new PortalInstanceType("standard.large");
        public static PortalInstanceType StandardXlarge { get; } = new PortalInstanceType("standard.xlarge");

        public static bool operator ==(PortalInstanceType left, PortalInstanceType right) => left.Equals(right);
        public static bool operator !=(PortalInstanceType left, PortalInstanceType right) => !left.Equals(right);

        public static explicit operator string(PortalInstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortalInstanceType other && Equals(other);
        public bool Equals(PortalInstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PortalRendererType : IEquatable<PortalRendererType>
    {
        private readonly string _value;

        private PortalRendererType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortalRendererType AppStream { get; } = new PortalRendererType("AppStream");

        public static bool operator ==(PortalRendererType left, PortalRendererType right) => left.Equals(right);
        public static bool operator !=(PortalRendererType left, PortalRendererType right) => !left.Equals(right);

        public static explicit operator string(PortalRendererType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortalRendererType other && Equals(other);
        public bool Equals(PortalRendererType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PortalStatus : IEquatable<PortalStatus>
    {
        private readonly string _value;

        private PortalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PortalStatus Incomplete { get; } = new PortalStatus("Incomplete");
        public static PortalStatus Pending { get; } = new PortalStatus("Pending");
        public static PortalStatus Active { get; } = new PortalStatus("Active");

        public static bool operator ==(PortalStatus left, PortalStatus right) => left.Equals(right);
        public static bool operator !=(PortalStatus left, PortalStatus right) => !left.Equals(right);

        public static explicit operator string(PortalStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PortalStatus other && Equals(other);
        public bool Equals(PortalStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SessionLoggerEvent : IEquatable<SessionLoggerEvent>
    {
        private readonly string _value;

        private SessionLoggerEvent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionLoggerEvent WebsiteInteract { get; } = new SessionLoggerEvent("WebsiteInteract");
        public static SessionLoggerEvent FileDownloadFromSecureBrowserToRemoteDisk { get; } = new SessionLoggerEvent("FileDownloadFromSecureBrowserToRemoteDisk");
        public static SessionLoggerEvent FileTransferFromRemoteToLocalDisk { get; } = new SessionLoggerEvent("FileTransferFromRemoteToLocalDisk");
        public static SessionLoggerEvent FileTransferFromLocalToRemoteDisk { get; } = new SessionLoggerEvent("FileTransferFromLocalToRemoteDisk");
        public static SessionLoggerEvent FileUploadFromRemoteDiskToSecureBrowser { get; } = new SessionLoggerEvent("FileUploadFromRemoteDiskToSecureBrowser");
        public static SessionLoggerEvent ContentPasteToWebsite { get; } = new SessionLoggerEvent("ContentPasteToWebsite");
        public static SessionLoggerEvent ContentTransferFromLocalToRemoteClipboard { get; } = new SessionLoggerEvent("ContentTransferFromLocalToRemoteClipboard");
        public static SessionLoggerEvent ContentCopyFromWebsite { get; } = new SessionLoggerEvent("ContentCopyFromWebsite");
        public static SessionLoggerEvent UrlLoad { get; } = new SessionLoggerEvent("UrlLoad");
        public static SessionLoggerEvent TabOpen { get; } = new SessionLoggerEvent("TabOpen");
        public static SessionLoggerEvent TabClose { get; } = new SessionLoggerEvent("TabClose");
        public static SessionLoggerEvent PrintJobSubmit { get; } = new SessionLoggerEvent("PrintJobSubmit");
        public static SessionLoggerEvent SessionConnect { get; } = new SessionLoggerEvent("SessionConnect");
        public static SessionLoggerEvent SessionStart { get; } = new SessionLoggerEvent("SessionStart");
        public static SessionLoggerEvent SessionDisconnect { get; } = new SessionLoggerEvent("SessionDisconnect");
        public static SessionLoggerEvent SessionEnd { get; } = new SessionLoggerEvent("SessionEnd");
        public static SessionLoggerEvent UrlBlockByContentFilter { get; } = new SessionLoggerEvent("UrlBlockByContentFilter");

        public static bool operator ==(SessionLoggerEvent left, SessionLoggerEvent right) => left.Equals(right);
        public static bool operator !=(SessionLoggerEvent left, SessionLoggerEvent right) => !left.Equals(right);

        public static explicit operator string(SessionLoggerEvent value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionLoggerEvent other && Equals(other);
        public bool Equals(SessionLoggerEvent other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SessionLoggerFolderStructure : IEquatable<SessionLoggerFolderStructure>
    {
        private readonly string _value;

        private SessionLoggerFolderStructure(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionLoggerFolderStructure Flat { get; } = new SessionLoggerFolderStructure("Flat");
        public static SessionLoggerFolderStructure NestedByDate { get; } = new SessionLoggerFolderStructure("NestedByDate");

        public static bool operator ==(SessionLoggerFolderStructure left, SessionLoggerFolderStructure right) => left.Equals(right);
        public static bool operator !=(SessionLoggerFolderStructure left, SessionLoggerFolderStructure right) => !left.Equals(right);

        public static explicit operator string(SessionLoggerFolderStructure value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionLoggerFolderStructure other && Equals(other);
        public bool Equals(SessionLoggerFolderStructure other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SessionLoggerLogFileFormat : IEquatable<SessionLoggerLogFileFormat>
    {
        private readonly string _value;

        private SessionLoggerLogFileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SessionLoggerLogFileFormat JsonLines { get; } = new SessionLoggerLogFileFormat("JSONLines");
        public static SessionLoggerLogFileFormat Json { get; } = new SessionLoggerLogFileFormat("Json");

        public static bool operator ==(SessionLoggerLogFileFormat left, SessionLoggerLogFileFormat right) => left.Equals(right);
        public static bool operator !=(SessionLoggerLogFileFormat left, SessionLoggerLogFileFormat right) => !left.Equals(right);

        public static explicit operator string(SessionLoggerLogFileFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SessionLoggerLogFileFormat other && Equals(other);
        public bool Equals(SessionLoggerLogFileFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct UserSettingsEnabledType : IEquatable<UserSettingsEnabledType>
    {
        private readonly string _value;

        private UserSettingsEnabledType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserSettingsEnabledType Disabled { get; } = new UserSettingsEnabledType("Disabled");
        public static UserSettingsEnabledType Enabled { get; } = new UserSettingsEnabledType("Enabled");

        public static bool operator ==(UserSettingsEnabledType left, UserSettingsEnabledType right) => left.Equals(right);
        public static bool operator !=(UserSettingsEnabledType left, UserSettingsEnabledType right) => !left.Equals(right);

        public static explicit operator string(UserSettingsEnabledType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserSettingsEnabledType other && Equals(other);
        public bool Equals(UserSettingsEnabledType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct UserSettingsMaxDisplayResolution : IEquatable<UserSettingsMaxDisplayResolution>
    {
        private readonly string _value;

        private UserSettingsMaxDisplayResolution(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserSettingsMaxDisplayResolution Size4096x2160 { get; } = new UserSettingsMaxDisplayResolution("size4096X2160");
        public static UserSettingsMaxDisplayResolution Size3840x2160 { get; } = new UserSettingsMaxDisplayResolution("size3840X2160");
        public static UserSettingsMaxDisplayResolution Size3440x1440 { get; } = new UserSettingsMaxDisplayResolution("size3440X1440");
        public static UserSettingsMaxDisplayResolution Size2560x1440 { get; } = new UserSettingsMaxDisplayResolution("size2560X1440");
        public static UserSettingsMaxDisplayResolution Size1920x1080 { get; } = new UserSettingsMaxDisplayResolution("size1920X1080");
        public static UserSettingsMaxDisplayResolution Size1280x720 { get; } = new UserSettingsMaxDisplayResolution("size1280X720");
        public static UserSettingsMaxDisplayResolution Size1024x768 { get; } = new UserSettingsMaxDisplayResolution("size1024X768");
        public static UserSettingsMaxDisplayResolution Size800x600 { get; } = new UserSettingsMaxDisplayResolution("size800X600");

        public static bool operator ==(UserSettingsMaxDisplayResolution left, UserSettingsMaxDisplayResolution right) => left.Equals(right);
        public static bool operator !=(UserSettingsMaxDisplayResolution left, UserSettingsMaxDisplayResolution right) => !left.Equals(right);

        public static explicit operator string(UserSettingsMaxDisplayResolution value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserSettingsMaxDisplayResolution other && Equals(other);
        public bool Equals(UserSettingsMaxDisplayResolution other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct UserSettingsToolbarItem : IEquatable<UserSettingsToolbarItem>
    {
        private readonly string _value;

        private UserSettingsToolbarItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserSettingsToolbarItem Windows { get; } = new UserSettingsToolbarItem("Windows");
        public static UserSettingsToolbarItem DualMonitor { get; } = new UserSettingsToolbarItem("DualMonitor");
        public static UserSettingsToolbarItem FullScreen { get; } = new UserSettingsToolbarItem("FullScreen");
        public static UserSettingsToolbarItem Webcam { get; } = new UserSettingsToolbarItem("Webcam");
        public static UserSettingsToolbarItem Microphone { get; } = new UserSettingsToolbarItem("Microphone");

        public static bool operator ==(UserSettingsToolbarItem left, UserSettingsToolbarItem right) => left.Equals(right);
        public static bool operator !=(UserSettingsToolbarItem left, UserSettingsToolbarItem right) => !left.Equals(right);

        public static explicit operator string(UserSettingsToolbarItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserSettingsToolbarItem other && Equals(other);
        public bool Equals(UserSettingsToolbarItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct UserSettingsToolbarType : IEquatable<UserSettingsToolbarType>
    {
        private readonly string _value;

        private UserSettingsToolbarType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserSettingsToolbarType Floating { get; } = new UserSettingsToolbarType("Floating");
        public static UserSettingsToolbarType Docked { get; } = new UserSettingsToolbarType("Docked");

        public static bool operator ==(UserSettingsToolbarType left, UserSettingsToolbarType right) => left.Equals(right);
        public static bool operator !=(UserSettingsToolbarType left, UserSettingsToolbarType right) => !left.Equals(right);

        public static explicit operator string(UserSettingsToolbarType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserSettingsToolbarType other && Equals(other);
        public bool Equals(UserSettingsToolbarType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct UserSettingsVisualMode : IEquatable<UserSettingsVisualMode>
    {
        private readonly string _value;

        private UserSettingsVisualMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static UserSettingsVisualMode Dark { get; } = new UserSettingsVisualMode("Dark");
        public static UserSettingsVisualMode Light { get; } = new UserSettingsVisualMode("Light");

        public static bool operator ==(UserSettingsVisualMode left, UserSettingsVisualMode right) => left.Equals(right);
        public static bool operator !=(UserSettingsVisualMode left, UserSettingsVisualMode right) => !left.Equals(right);

        public static explicit operator string(UserSettingsVisualMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is UserSettingsVisualMode other && Equals(other);
        public bool Equals(UserSettingsVisualMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
