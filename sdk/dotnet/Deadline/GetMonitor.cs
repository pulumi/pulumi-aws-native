// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Deadline
{
    public static class GetMonitor
    {
        /// <summary>
        /// Definition of AWS::Deadline::Monitor Resource Type
        /// </summary>
        public static Task<GetMonitorResult> InvokeAsync(GetMonitorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMonitorResult>("aws-native:deadline:getMonitor", args ?? new GetMonitorArgs(), options.WithDefaults());

        /// <summary>
        /// Definition of AWS::Deadline::Monitor Resource Type
        /// </summary>
        public static Output<GetMonitorResult> Invoke(GetMonitorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitorResult>("aws-native:deadline:getMonitor", args ?? new GetMonitorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMonitorArgs : global::Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetMonitorArgs()
        {
        }
        public static new GetMonitorArgs Empty => new GetMonitorArgs();
    }

    public sealed class GetMonitorInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetMonitorInvokeArgs()
        {
        }
        public static new GetMonitorInvokeArgs Empty => new GetMonitorInvokeArgs();
    }


    [OutputType]
    public sealed class GetMonitorResult
    {
        public readonly string? Arn;
        public readonly string? DisplayName;
        public readonly string? IdentityCenterApplicationArn;
        public readonly string? MonitorId;
        public readonly string? RoleArn;
        public readonly string? Subdomain;
        public readonly string? Url;

        [OutputConstructor]
        private GetMonitorResult(
            string? arn,

            string? displayName,

            string? identityCenterApplicationArn,

            string? monitorId,

            string? roleArn,

            string? subdomain,

            string? url)
        {
            Arn = arn;
            DisplayName = displayName;
            IdentityCenterApplicationArn = identityCenterApplicationArn;
            MonitorId = monitorId;
            RoleArn = roleArn;
            Subdomain = subdomain;
            Url = url;
        }
    }
}
