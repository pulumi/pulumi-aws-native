// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Deadline
{
    [EnumType]
    public readonly struct FleetAcceleratorType : IEquatable<FleetAcceleratorType>
    {
        private readonly string _value;

        private FleetAcceleratorType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetAcceleratorType Gpu { get; } = new FleetAcceleratorType("gpu");

        public static bool operator ==(FleetAcceleratorType left, FleetAcceleratorType right) => left.Equals(right);
        public static bool operator !=(FleetAcceleratorType left, FleetAcceleratorType right) => !left.Equals(right);

        public static explicit operator string(FleetAcceleratorType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetAcceleratorType other && Equals(other);
        public bool Equals(FleetAcceleratorType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FleetAutoScalingMode : IEquatable<FleetAutoScalingMode>
    {
        private readonly string _value;

        private FleetAutoScalingMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetAutoScalingMode NoScaling { get; } = new FleetAutoScalingMode("NO_SCALING");
        public static FleetAutoScalingMode EventBasedAutoScaling { get; } = new FleetAutoScalingMode("EVENT_BASED_AUTO_SCALING");

        public static bool operator ==(FleetAutoScalingMode left, FleetAutoScalingMode right) => left.Equals(right);
        public static bool operator !=(FleetAutoScalingMode left, FleetAutoScalingMode right) => !left.Equals(right);

        public static explicit operator string(FleetAutoScalingMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetAutoScalingMode other && Equals(other);
        public bool Equals(FleetAutoScalingMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FleetCpuArchitectureType : IEquatable<FleetCpuArchitectureType>
    {
        private readonly string _value;

        private FleetCpuArchitectureType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetCpuArchitectureType X8664 { get; } = new FleetCpuArchitectureType("x86_64");
        public static FleetCpuArchitectureType Arm64 { get; } = new FleetCpuArchitectureType("arm64");

        public static bool operator ==(FleetCpuArchitectureType left, FleetCpuArchitectureType right) => left.Equals(right);
        public static bool operator !=(FleetCpuArchitectureType left, FleetCpuArchitectureType right) => !left.Equals(right);

        public static explicit operator string(FleetCpuArchitectureType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetCpuArchitectureType other && Equals(other);
        public bool Equals(FleetCpuArchitectureType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FleetCustomerManagedFleetOperatingSystemFamily : IEquatable<FleetCustomerManagedFleetOperatingSystemFamily>
    {
        private readonly string _value;

        private FleetCustomerManagedFleetOperatingSystemFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetCustomerManagedFleetOperatingSystemFamily Windows { get; } = new FleetCustomerManagedFleetOperatingSystemFamily("WINDOWS");
        public static FleetCustomerManagedFleetOperatingSystemFamily Linux { get; } = new FleetCustomerManagedFleetOperatingSystemFamily("LINUX");
        public static FleetCustomerManagedFleetOperatingSystemFamily Macos { get; } = new FleetCustomerManagedFleetOperatingSystemFamily("MACOS");

        public static bool operator ==(FleetCustomerManagedFleetOperatingSystemFamily left, FleetCustomerManagedFleetOperatingSystemFamily right) => left.Equals(right);
        public static bool operator !=(FleetCustomerManagedFleetOperatingSystemFamily left, FleetCustomerManagedFleetOperatingSystemFamily right) => !left.Equals(right);

        public static explicit operator string(FleetCustomerManagedFleetOperatingSystemFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetCustomerManagedFleetOperatingSystemFamily other && Equals(other);
        public bool Equals(FleetCustomerManagedFleetOperatingSystemFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FleetEc2MarketType : IEquatable<FleetEc2MarketType>
    {
        private readonly string _value;

        private FleetEc2MarketType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetEc2MarketType OnDemand { get; } = new FleetEc2MarketType("on-demand");
        public static FleetEc2MarketType Spot { get; } = new FleetEc2MarketType("spot");

        public static bool operator ==(FleetEc2MarketType left, FleetEc2MarketType right) => left.Equals(right);
        public static bool operator !=(FleetEc2MarketType left, FleetEc2MarketType right) => !left.Equals(right);

        public static explicit operator string(FleetEc2MarketType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetEc2MarketType other && Equals(other);
        public bool Equals(FleetEc2MarketType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FleetServiceManagedFleetOperatingSystemFamily : IEquatable<FleetServiceManagedFleetOperatingSystemFamily>
    {
        private readonly string _value;

        private FleetServiceManagedFleetOperatingSystemFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetServiceManagedFleetOperatingSystemFamily Windows { get; } = new FleetServiceManagedFleetOperatingSystemFamily("WINDOWS");
        public static FleetServiceManagedFleetOperatingSystemFamily Linux { get; } = new FleetServiceManagedFleetOperatingSystemFamily("LINUX");

        public static bool operator ==(FleetServiceManagedFleetOperatingSystemFamily left, FleetServiceManagedFleetOperatingSystemFamily right) => left.Equals(right);
        public static bool operator !=(FleetServiceManagedFleetOperatingSystemFamily left, FleetServiceManagedFleetOperatingSystemFamily right) => !left.Equals(right);

        public static explicit operator string(FleetServiceManagedFleetOperatingSystemFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetServiceManagedFleetOperatingSystemFamily other && Equals(other);
        public bool Equals(FleetServiceManagedFleetOperatingSystemFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct FleetStatus : IEquatable<FleetStatus>
    {
        private readonly string _value;

        private FleetStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FleetStatus Active { get; } = new FleetStatus("ACTIVE");
        public static FleetStatus CreateInProgress { get; } = new FleetStatus("CREATE_IN_PROGRESS");
        public static FleetStatus UpdateInProgress { get; } = new FleetStatus("UPDATE_IN_PROGRESS");
        public static FleetStatus CreateFailed { get; } = new FleetStatus("CREATE_FAILED");
        public static FleetStatus UpdateFailed { get; } = new FleetStatus("UPDATE_FAILED");

        public static bool operator ==(FleetStatus left, FleetStatus right) => left.Equals(right);
        public static bool operator !=(FleetStatus left, FleetStatus right) => !left.Equals(right);

        public static explicit operator string(FleetStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FleetStatus other && Equals(other);
        public bool Equals(FleetStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct LicenseEndpointStatus : IEquatable<LicenseEndpointStatus>
    {
        private readonly string _value;

        private LicenseEndpointStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LicenseEndpointStatus CreateInProgress { get; } = new LicenseEndpointStatus("CREATE_IN_PROGRESS");
        public static LicenseEndpointStatus DeleteInProgress { get; } = new LicenseEndpointStatus("DELETE_IN_PROGRESS");
        public static LicenseEndpointStatus Ready { get; } = new LicenseEndpointStatus("READY");
        public static LicenseEndpointStatus NotReady { get; } = new LicenseEndpointStatus("NOT_READY");

        public static bool operator ==(LicenseEndpointStatus left, LicenseEndpointStatus right) => left.Equals(right);
        public static bool operator !=(LicenseEndpointStatus left, LicenseEndpointStatus right) => !left.Equals(right);

        public static explicit operator string(LicenseEndpointStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LicenseEndpointStatus other && Equals(other);
        public bool Equals(LicenseEndpointStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct QueueDefaultQueueBudgetAction : IEquatable<QueueDefaultQueueBudgetAction>
    {
        private readonly string _value;

        private QueueDefaultQueueBudgetAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueueDefaultQueueBudgetAction None { get; } = new QueueDefaultQueueBudgetAction("NONE");
        public static QueueDefaultQueueBudgetAction StopSchedulingAndCompleteTasks { get; } = new QueueDefaultQueueBudgetAction("STOP_SCHEDULING_AND_COMPLETE_TASKS");
        public static QueueDefaultQueueBudgetAction StopSchedulingAndCancelTasks { get; } = new QueueDefaultQueueBudgetAction("STOP_SCHEDULING_AND_CANCEL_TASKS");

        public static bool operator ==(QueueDefaultQueueBudgetAction left, QueueDefaultQueueBudgetAction right) => left.Equals(right);
        public static bool operator !=(QueueDefaultQueueBudgetAction left, QueueDefaultQueueBudgetAction right) => !left.Equals(right);

        public static explicit operator string(QueueDefaultQueueBudgetAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueueDefaultQueueBudgetAction other && Equals(other);
        public bool Equals(QueueDefaultQueueBudgetAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct QueueEnvironmentEnvironmentTemplateType : IEquatable<QueueEnvironmentEnvironmentTemplateType>
    {
        private readonly string _value;

        private QueueEnvironmentEnvironmentTemplateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueueEnvironmentEnvironmentTemplateType Json { get; } = new QueueEnvironmentEnvironmentTemplateType("JSON");
        public static QueueEnvironmentEnvironmentTemplateType Yaml { get; } = new QueueEnvironmentEnvironmentTemplateType("YAML");

        public static bool operator ==(QueueEnvironmentEnvironmentTemplateType left, QueueEnvironmentEnvironmentTemplateType right) => left.Equals(right);
        public static bool operator !=(QueueEnvironmentEnvironmentTemplateType left, QueueEnvironmentEnvironmentTemplateType right) => !left.Equals(right);

        public static explicit operator string(QueueEnvironmentEnvironmentTemplateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueueEnvironmentEnvironmentTemplateType other && Equals(other);
        public bool Equals(QueueEnvironmentEnvironmentTemplateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct QueueRunAs : IEquatable<QueueRunAs>
    {
        private readonly string _value;

        private QueueRunAs(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QueueRunAs QueueConfiguredUser { get; } = new QueueRunAs("QUEUE_CONFIGURED_USER");
        public static QueueRunAs WorkerAgentUser { get; } = new QueueRunAs("WORKER_AGENT_USER");

        public static bool operator ==(QueueRunAs left, QueueRunAs right) => left.Equals(right);
        public static bool operator !=(QueueRunAs left, QueueRunAs right) => !left.Equals(right);

        public static explicit operator string(QueueRunAs value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QueueRunAs other && Equals(other);
        public bool Equals(QueueRunAs other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StorageProfileFileSystemLocationType : IEquatable<StorageProfileFileSystemLocationType>
    {
        private readonly string _value;

        private StorageProfileFileSystemLocationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageProfileFileSystemLocationType Shared { get; } = new StorageProfileFileSystemLocationType("SHARED");
        public static StorageProfileFileSystemLocationType Local { get; } = new StorageProfileFileSystemLocationType("LOCAL");

        public static bool operator ==(StorageProfileFileSystemLocationType left, StorageProfileFileSystemLocationType right) => left.Equals(right);
        public static bool operator !=(StorageProfileFileSystemLocationType left, StorageProfileFileSystemLocationType right) => !left.Equals(right);

        public static explicit operator string(StorageProfileFileSystemLocationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageProfileFileSystemLocationType other && Equals(other);
        public bool Equals(StorageProfileFileSystemLocationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StorageProfileOperatingSystemFamily : IEquatable<StorageProfileOperatingSystemFamily>
    {
        private readonly string _value;

        private StorageProfileOperatingSystemFamily(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageProfileOperatingSystemFamily Windows { get; } = new StorageProfileOperatingSystemFamily("WINDOWS");
        public static StorageProfileOperatingSystemFamily Linux { get; } = new StorageProfileOperatingSystemFamily("LINUX");
        public static StorageProfileOperatingSystemFamily Macos { get; } = new StorageProfileOperatingSystemFamily("MACOS");

        public static bool operator ==(StorageProfileOperatingSystemFamily left, StorageProfileOperatingSystemFamily right) => left.Equals(right);
        public static bool operator !=(StorageProfileOperatingSystemFamily left, StorageProfileOperatingSystemFamily right) => !left.Equals(right);

        public static explicit operator string(StorageProfileOperatingSystemFamily value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageProfileOperatingSystemFamily other && Equals(other);
        public bool Equals(StorageProfileOperatingSystemFamily other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
