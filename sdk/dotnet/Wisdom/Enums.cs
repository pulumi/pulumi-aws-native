// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Wisdom
{
    [EnumType]
    public readonly struct AssistantAssociationAssociationType : IEquatable<AssistantAssociationAssociationType>
    {
        private readonly string _value;

        private AssistantAssociationAssociationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssistantAssociationAssociationType KnowledgeBase { get; } = new AssistantAssociationAssociationType("KNOWLEDGE_BASE");

        public static bool operator ==(AssistantAssociationAssociationType left, AssistantAssociationAssociationType right) => left.Equals(right);
        public static bool operator !=(AssistantAssociationAssociationType left, AssistantAssociationAssociationType right) => !left.Equals(right);

        public static explicit operator string(AssistantAssociationAssociationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssistantAssociationAssociationType other && Equals(other);
        public bool Equals(AssistantAssociationAssociationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AssistantType : IEquatable<AssistantType>
    {
        private readonly string _value;

        private AssistantType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssistantType Agent { get; } = new AssistantType("AGENT");

        public static bool operator ==(AssistantType left, AssistantType right) => left.Equals(right);
        public static bool operator !=(AssistantType left, AssistantType right) => !left.Equals(right);

        public static explicit operator string(AssistantType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssistantType other && Equals(other);
        public bool Equals(AssistantType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnowledgeBaseType : IEquatable<KnowledgeBaseType>
    {
        private readonly string _value;

        private KnowledgeBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnowledgeBaseType External { get; } = new KnowledgeBaseType("EXTERNAL");
        public static KnowledgeBaseType Custom { get; } = new KnowledgeBaseType("CUSTOM");

        public static bool operator ==(KnowledgeBaseType left, KnowledgeBaseType right) => left.Equals(right);
        public static bool operator !=(KnowledgeBaseType left, KnowledgeBaseType right) => !left.Equals(right);

        public static explicit operator string(KnowledgeBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnowledgeBaseType other && Equals(other);
        public bool Equals(KnowledgeBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
