// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Wisdom
{
    [EnumType]
    public readonly struct AiAgentAiAgentAssociationConfigurationType : IEquatable<AiAgentAiAgentAssociationConfigurationType>
    {
        private readonly string _value;

        private AiAgentAiAgentAssociationConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiAgentAiAgentAssociationConfigurationType KnowledgeBase { get; } = new AiAgentAiAgentAssociationConfigurationType("KNOWLEDGE_BASE");

        public static bool operator ==(AiAgentAiAgentAssociationConfigurationType left, AiAgentAiAgentAssociationConfigurationType right) => left.Equals(right);
        public static bool operator !=(AiAgentAiAgentAssociationConfigurationType left, AiAgentAiAgentAssociationConfigurationType right) => !left.Equals(right);

        public static explicit operator string(AiAgentAiAgentAssociationConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiAgentAiAgentAssociationConfigurationType other && Equals(other);
        public bool Equals(AiAgentAiAgentAssociationConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiAgentAiAgentType : IEquatable<AiAgentAiAgentType>
    {
        private readonly string _value;

        private AiAgentAiAgentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiAgentAiAgentType ManualSearch { get; } = new AiAgentAiAgentType("MANUAL_SEARCH");
        public static AiAgentAiAgentType AnswerRecommendation { get; } = new AiAgentAiAgentType("ANSWER_RECOMMENDATION");

        public static bool operator ==(AiAgentAiAgentType left, AiAgentAiAgentType right) => left.Equals(right);
        public static bool operator !=(AiAgentAiAgentType left, AiAgentAiAgentType right) => !left.Equals(right);

        public static explicit operator string(AiAgentAiAgentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiAgentAiAgentType other && Equals(other);
        public bool Equals(AiAgentAiAgentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiAgentKnowledgeBaseSearchType : IEquatable<AiAgentKnowledgeBaseSearchType>
    {
        private readonly string _value;

        private AiAgentKnowledgeBaseSearchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiAgentKnowledgeBaseSearchType Hybrid { get; } = new AiAgentKnowledgeBaseSearchType("HYBRID");
        public static AiAgentKnowledgeBaseSearchType Semantic { get; } = new AiAgentKnowledgeBaseSearchType("SEMANTIC");

        public static bool operator ==(AiAgentKnowledgeBaseSearchType left, AiAgentKnowledgeBaseSearchType right) => left.Equals(right);
        public static bool operator !=(AiAgentKnowledgeBaseSearchType left, AiAgentKnowledgeBaseSearchType right) => !left.Equals(right);

        public static explicit operator string(AiAgentKnowledgeBaseSearchType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiAgentKnowledgeBaseSearchType other && Equals(other);
        public bool Equals(AiAgentKnowledgeBaseSearchType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiPromptAiPromptApiFormat : IEquatable<AiPromptAiPromptApiFormat>
    {
        private readonly string _value;

        private AiPromptAiPromptApiFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiPromptAiPromptApiFormat AnthropicClaudeMessages { get; } = new AiPromptAiPromptApiFormat("ANTHROPIC_CLAUDE_MESSAGES");
        public static AiPromptAiPromptApiFormat AnthropicClaudeTextCompletions { get; } = new AiPromptAiPromptApiFormat("ANTHROPIC_CLAUDE_TEXT_COMPLETIONS");

        public static bool operator ==(AiPromptAiPromptApiFormat left, AiPromptAiPromptApiFormat right) => left.Equals(right);
        public static bool operator !=(AiPromptAiPromptApiFormat left, AiPromptAiPromptApiFormat right) => !left.Equals(right);

        public static explicit operator string(AiPromptAiPromptApiFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiPromptAiPromptApiFormat other && Equals(other);
        public bool Equals(AiPromptAiPromptApiFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiPromptAiPromptTemplateType : IEquatable<AiPromptAiPromptTemplateType>
    {
        private readonly string _value;

        private AiPromptAiPromptTemplateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiPromptAiPromptTemplateType Text { get; } = new AiPromptAiPromptTemplateType("TEXT");

        public static bool operator ==(AiPromptAiPromptTemplateType left, AiPromptAiPromptTemplateType right) => left.Equals(right);
        public static bool operator !=(AiPromptAiPromptTemplateType left, AiPromptAiPromptTemplateType right) => !left.Equals(right);

        public static explicit operator string(AiPromptAiPromptTemplateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiPromptAiPromptTemplateType other && Equals(other);
        public bool Equals(AiPromptAiPromptTemplateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiPromptAiPromptType : IEquatable<AiPromptAiPromptType>
    {
        private readonly string _value;

        private AiPromptAiPromptType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiPromptAiPromptType AnswerGeneration { get; } = new AiPromptAiPromptType("ANSWER_GENERATION");
        public static AiPromptAiPromptType IntentLabelingGeneration { get; } = new AiPromptAiPromptType("INTENT_LABELING_GENERATION");
        public static AiPromptAiPromptType QueryReformulation { get; } = new AiPromptAiPromptType("QUERY_REFORMULATION");

        public static bool operator ==(AiPromptAiPromptType left, AiPromptAiPromptType right) => left.Equals(right);
        public static bool operator !=(AiPromptAiPromptType left, AiPromptAiPromptType right) => !left.Equals(right);

        public static explicit operator string(AiPromptAiPromptType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiPromptAiPromptType other && Equals(other);
        public bool Equals(AiPromptAiPromptType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AssistantAssociationAssociationType : IEquatable<AssistantAssociationAssociationType>
    {
        private readonly string _value;

        private AssistantAssociationAssociationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssistantAssociationAssociationType KnowledgeBase { get; } = new AssistantAssociationAssociationType("KNOWLEDGE_BASE");

        public static bool operator ==(AssistantAssociationAssociationType left, AssistantAssociationAssociationType right) => left.Equals(right);
        public static bool operator !=(AssistantAssociationAssociationType left, AssistantAssociationAssociationType right) => !left.Equals(right);

        public static explicit operator string(AssistantAssociationAssociationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssistantAssociationAssociationType other && Equals(other);
        public bool Equals(AssistantAssociationAssociationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AssistantType : IEquatable<AssistantType>
    {
        private readonly string _value;

        private AssistantType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssistantType Agent { get; } = new AssistantType("AGENT");

        public static bool operator ==(AssistantType left, AssistantType right) => left.Equals(right);
        public static bool operator !=(AssistantType left, AssistantType right) => !left.Equals(right);

        public static explicit operator string(AssistantType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssistantType other && Equals(other);
        public bool Equals(AssistantType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnowledgeBaseType : IEquatable<KnowledgeBaseType>
    {
        private readonly string _value;

        private KnowledgeBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnowledgeBaseType External { get; } = new KnowledgeBaseType("EXTERNAL");
        public static KnowledgeBaseType Custom { get; } = new KnowledgeBaseType("CUSTOM");
        public static KnowledgeBaseType MessageTemplates { get; } = new KnowledgeBaseType("MESSAGE_TEMPLATES");

        public static bool operator ==(KnowledgeBaseType left, KnowledgeBaseType right) => left.Equals(right);
        public static bool operator !=(KnowledgeBaseType left, KnowledgeBaseType right) => !left.Equals(right);

        public static explicit operator string(KnowledgeBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnowledgeBaseType other && Equals(other);
        public bool Equals(KnowledgeBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
