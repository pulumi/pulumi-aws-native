// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.AwsNative.Wisdom
{
    [EnumType]
    public readonly struct AiAgentAiAgentAssociationConfigurationType : IEquatable<AiAgentAiAgentAssociationConfigurationType>
    {
        private readonly string _value;

        private AiAgentAiAgentAssociationConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiAgentAiAgentAssociationConfigurationType KnowledgeBase { get; } = new AiAgentAiAgentAssociationConfigurationType("KNOWLEDGE_BASE");

        public static bool operator ==(AiAgentAiAgentAssociationConfigurationType left, AiAgentAiAgentAssociationConfigurationType right) => left.Equals(right);
        public static bool operator !=(AiAgentAiAgentAssociationConfigurationType left, AiAgentAiAgentAssociationConfigurationType right) => !left.Equals(right);

        public static explicit operator string(AiAgentAiAgentAssociationConfigurationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiAgentAiAgentAssociationConfigurationType other && Equals(other);
        public bool Equals(AiAgentAiAgentAssociationConfigurationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiAgentAiAgentType : IEquatable<AiAgentAiAgentType>
    {
        private readonly string _value;

        private AiAgentAiAgentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiAgentAiAgentType ManualSearch { get; } = new AiAgentAiAgentType("MANUAL_SEARCH");
        public static AiAgentAiAgentType AnswerRecommendation { get; } = new AiAgentAiAgentType("ANSWER_RECOMMENDATION");
        public static AiAgentAiAgentType SelfService { get; } = new AiAgentAiAgentType("SELF_SERVICE");

        public static bool operator ==(AiAgentAiAgentType left, AiAgentAiAgentType right) => left.Equals(right);
        public static bool operator !=(AiAgentAiAgentType left, AiAgentAiAgentType right) => !left.Equals(right);

        public static explicit operator string(AiAgentAiAgentType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiAgentAiAgentType other && Equals(other);
        public bool Equals(AiAgentAiAgentType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiAgentKnowledgeBaseSearchType : IEquatable<AiAgentKnowledgeBaseSearchType>
    {
        private readonly string _value;

        private AiAgentKnowledgeBaseSearchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiAgentKnowledgeBaseSearchType Hybrid { get; } = new AiAgentKnowledgeBaseSearchType("HYBRID");
        public static AiAgentKnowledgeBaseSearchType Semantic { get; } = new AiAgentKnowledgeBaseSearchType("SEMANTIC");

        public static bool operator ==(AiAgentKnowledgeBaseSearchType left, AiAgentKnowledgeBaseSearchType right) => left.Equals(right);
        public static bool operator !=(AiAgentKnowledgeBaseSearchType left, AiAgentKnowledgeBaseSearchType right) => !left.Equals(right);

        public static explicit operator string(AiAgentKnowledgeBaseSearchType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiAgentKnowledgeBaseSearchType other && Equals(other);
        public bool Equals(AiAgentKnowledgeBaseSearchType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of text to text filter in content policy
    /// </summary>
    [EnumType]
    public readonly struct AiGuardrailGuardrailContentFilterType : IEquatable<AiGuardrailGuardrailContentFilterType>
    {
        private readonly string _value;

        private AiGuardrailGuardrailContentFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiGuardrailGuardrailContentFilterType Sexual { get; } = new AiGuardrailGuardrailContentFilterType("SEXUAL");
        public static AiGuardrailGuardrailContentFilterType Violence { get; } = new AiGuardrailGuardrailContentFilterType("VIOLENCE");
        public static AiGuardrailGuardrailContentFilterType Hate { get; } = new AiGuardrailGuardrailContentFilterType("HATE");
        public static AiGuardrailGuardrailContentFilterType Insults { get; } = new AiGuardrailGuardrailContentFilterType("INSULTS");
        public static AiGuardrailGuardrailContentFilterType Misconduct { get; } = new AiGuardrailGuardrailContentFilterType("MISCONDUCT");
        public static AiGuardrailGuardrailContentFilterType PromptAttack { get; } = new AiGuardrailGuardrailContentFilterType("PROMPT_ATTACK");

        public static bool operator ==(AiGuardrailGuardrailContentFilterType left, AiGuardrailGuardrailContentFilterType right) => left.Equals(right);
        public static bool operator !=(AiGuardrailGuardrailContentFilterType left, AiGuardrailGuardrailContentFilterType right) => !left.Equals(right);

        public static explicit operator string(AiGuardrailGuardrailContentFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiGuardrailGuardrailContentFilterType other && Equals(other);
        public bool Equals(AiGuardrailGuardrailContentFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of contextual grounding filter
    /// </summary>
    [EnumType]
    public readonly struct AiGuardrailGuardrailContextualGroundingFilterType : IEquatable<AiGuardrailGuardrailContextualGroundingFilterType>
    {
        private readonly string _value;

        private AiGuardrailGuardrailContextualGroundingFilterType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiGuardrailGuardrailContextualGroundingFilterType Grounding { get; } = new AiGuardrailGuardrailContextualGroundingFilterType("GROUNDING");
        public static AiGuardrailGuardrailContextualGroundingFilterType Relevance { get; } = new AiGuardrailGuardrailContextualGroundingFilterType("RELEVANCE");

        public static bool operator ==(AiGuardrailGuardrailContextualGroundingFilterType left, AiGuardrailGuardrailContextualGroundingFilterType right) => left.Equals(right);
        public static bool operator !=(AiGuardrailGuardrailContextualGroundingFilterType left, AiGuardrailGuardrailContextualGroundingFilterType right) => !left.Equals(right);

        public static explicit operator string(AiGuardrailGuardrailContextualGroundingFilterType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiGuardrailGuardrailContextualGroundingFilterType other && Equals(other);
        public bool Equals(AiGuardrailGuardrailContextualGroundingFilterType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Strength for filters
    /// </summary>
    [EnumType]
    public readonly struct AiGuardrailGuardrailFilterStrength : IEquatable<AiGuardrailGuardrailFilterStrength>
    {
        private readonly string _value;

        private AiGuardrailGuardrailFilterStrength(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiGuardrailGuardrailFilterStrength None { get; } = new AiGuardrailGuardrailFilterStrength("NONE");
        public static AiGuardrailGuardrailFilterStrength Low { get; } = new AiGuardrailGuardrailFilterStrength("LOW");
        public static AiGuardrailGuardrailFilterStrength Medium { get; } = new AiGuardrailGuardrailFilterStrength("MEDIUM");
        public static AiGuardrailGuardrailFilterStrength High { get; } = new AiGuardrailGuardrailFilterStrength("HIGH");

        public static bool operator ==(AiGuardrailGuardrailFilterStrength left, AiGuardrailGuardrailFilterStrength right) => left.Equals(right);
        public static bool operator !=(AiGuardrailGuardrailFilterStrength left, AiGuardrailGuardrailFilterStrength right) => !left.Equals(right);

        public static explicit operator string(AiGuardrailGuardrailFilterStrength value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiGuardrailGuardrailFilterStrength other && Equals(other);
        public bool Equals(AiGuardrailGuardrailFilterStrength other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Options for managed words.
    /// </summary>
    [EnumType]
    public readonly struct AiGuardrailGuardrailManagedWordsType : IEquatable<AiGuardrailGuardrailManagedWordsType>
    {
        private readonly string _value;

        private AiGuardrailGuardrailManagedWordsType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiGuardrailGuardrailManagedWordsType Profanity { get; } = new AiGuardrailGuardrailManagedWordsType("PROFANITY");

        public static bool operator ==(AiGuardrailGuardrailManagedWordsType left, AiGuardrailGuardrailManagedWordsType right) => left.Equals(right);
        public static bool operator !=(AiGuardrailGuardrailManagedWordsType left, AiGuardrailGuardrailManagedWordsType right) => !left.Equals(right);

        public static explicit operator string(AiGuardrailGuardrailManagedWordsType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiGuardrailGuardrailManagedWordsType other && Equals(other);
        public bool Equals(AiGuardrailGuardrailManagedWordsType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The currently supported PII entities
    /// </summary>
    [EnumType]
    public readonly struct AiGuardrailGuardrailPiiEntityType : IEquatable<AiGuardrailGuardrailPiiEntityType>
    {
        private readonly string _value;

        private AiGuardrailGuardrailPiiEntityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiGuardrailGuardrailPiiEntityType Address { get; } = new AiGuardrailGuardrailPiiEntityType("ADDRESS");
        public static AiGuardrailGuardrailPiiEntityType Age { get; } = new AiGuardrailGuardrailPiiEntityType("AGE");
        public static AiGuardrailGuardrailPiiEntityType AwsAccessKey { get; } = new AiGuardrailGuardrailPiiEntityType("AWS_ACCESS_KEY");
        public static AiGuardrailGuardrailPiiEntityType AwsSecretKey { get; } = new AiGuardrailGuardrailPiiEntityType("AWS_SECRET_KEY");
        public static AiGuardrailGuardrailPiiEntityType CaHealthNumber { get; } = new AiGuardrailGuardrailPiiEntityType("CA_HEALTH_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType CaSocialInsuranceNumber { get; } = new AiGuardrailGuardrailPiiEntityType("CA_SOCIAL_INSURANCE_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType CreditDebitCardCvv { get; } = new AiGuardrailGuardrailPiiEntityType("CREDIT_DEBIT_CARD_CVV");
        public static AiGuardrailGuardrailPiiEntityType CreditDebitCardExpiry { get; } = new AiGuardrailGuardrailPiiEntityType("CREDIT_DEBIT_CARD_EXPIRY");
        public static AiGuardrailGuardrailPiiEntityType CreditDebitCardNumber { get; } = new AiGuardrailGuardrailPiiEntityType("CREDIT_DEBIT_CARD_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType DriverId { get; } = new AiGuardrailGuardrailPiiEntityType("DRIVER_ID");
        public static AiGuardrailGuardrailPiiEntityType Email { get; } = new AiGuardrailGuardrailPiiEntityType("EMAIL");
        public static AiGuardrailGuardrailPiiEntityType InternationalBankAccountNumber { get; } = new AiGuardrailGuardrailPiiEntityType("INTERNATIONAL_BANK_ACCOUNT_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType IpAddress { get; } = new AiGuardrailGuardrailPiiEntityType("IP_ADDRESS");
        public static AiGuardrailGuardrailPiiEntityType LicensePlate { get; } = new AiGuardrailGuardrailPiiEntityType("LICENSE_PLATE");
        public static AiGuardrailGuardrailPiiEntityType MacAddress { get; } = new AiGuardrailGuardrailPiiEntityType("MAC_ADDRESS");
        public static AiGuardrailGuardrailPiiEntityType Name { get; } = new AiGuardrailGuardrailPiiEntityType("NAME");
        public static AiGuardrailGuardrailPiiEntityType Password { get; } = new AiGuardrailGuardrailPiiEntityType("PASSWORD");
        public static AiGuardrailGuardrailPiiEntityType Phone { get; } = new AiGuardrailGuardrailPiiEntityType("PHONE");
        public static AiGuardrailGuardrailPiiEntityType Pin { get; } = new AiGuardrailGuardrailPiiEntityType("PIN");
        public static AiGuardrailGuardrailPiiEntityType SwiftCode { get; } = new AiGuardrailGuardrailPiiEntityType("SWIFT_CODE");
        public static AiGuardrailGuardrailPiiEntityType UkNationalHealthServiceNumber { get; } = new AiGuardrailGuardrailPiiEntityType("UK_NATIONAL_HEALTH_SERVICE_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType UkNationalInsuranceNumber { get; } = new AiGuardrailGuardrailPiiEntityType("UK_NATIONAL_INSURANCE_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType UkUniqueTaxpayerReferenceNumber { get; } = new AiGuardrailGuardrailPiiEntityType("UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType Url { get; } = new AiGuardrailGuardrailPiiEntityType("URL");
        public static AiGuardrailGuardrailPiiEntityType Username { get; } = new AiGuardrailGuardrailPiiEntityType("USERNAME");
        public static AiGuardrailGuardrailPiiEntityType UsBankAccountNumber { get; } = new AiGuardrailGuardrailPiiEntityType("US_BANK_ACCOUNT_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType UsBankRoutingNumber { get; } = new AiGuardrailGuardrailPiiEntityType("US_BANK_ROUTING_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType UsIndividualTaxIdentificationNumber { get; } = new AiGuardrailGuardrailPiiEntityType("US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType UsPassportNumber { get; } = new AiGuardrailGuardrailPiiEntityType("US_PASSPORT_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType UsSocialSecurityNumber { get; } = new AiGuardrailGuardrailPiiEntityType("US_SOCIAL_SECURITY_NUMBER");
        public static AiGuardrailGuardrailPiiEntityType VehicleIdentificationNumber { get; } = new AiGuardrailGuardrailPiiEntityType("VEHICLE_IDENTIFICATION_NUMBER");

        public static bool operator ==(AiGuardrailGuardrailPiiEntityType left, AiGuardrailGuardrailPiiEntityType right) => left.Equals(right);
        public static bool operator !=(AiGuardrailGuardrailPiiEntityType left, AiGuardrailGuardrailPiiEntityType right) => !left.Equals(right);

        public static explicit operator string(AiGuardrailGuardrailPiiEntityType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiGuardrailGuardrailPiiEntityType other && Equals(other);
        public bool Equals(AiGuardrailGuardrailPiiEntityType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Options for sensitive information action.
    /// </summary>
    [EnumType]
    public readonly struct AiGuardrailGuardrailSensitiveInformationAction : IEquatable<AiGuardrailGuardrailSensitiveInformationAction>
    {
        private readonly string _value;

        private AiGuardrailGuardrailSensitiveInformationAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiGuardrailGuardrailSensitiveInformationAction Block { get; } = new AiGuardrailGuardrailSensitiveInformationAction("BLOCK");
        public static AiGuardrailGuardrailSensitiveInformationAction Anonymize { get; } = new AiGuardrailGuardrailSensitiveInformationAction("ANONYMIZE");

        public static bool operator ==(AiGuardrailGuardrailSensitiveInformationAction left, AiGuardrailGuardrailSensitiveInformationAction right) => left.Equals(right);
        public static bool operator !=(AiGuardrailGuardrailSensitiveInformationAction left, AiGuardrailGuardrailSensitiveInformationAction right) => !left.Equals(right);

        public static explicit operator string(AiGuardrailGuardrailSensitiveInformationAction value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiGuardrailGuardrailSensitiveInformationAction other && Equals(other);
        public bool Equals(AiGuardrailGuardrailSensitiveInformationAction other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Type of topic in a policy
    /// </summary>
    [EnumType]
    public readonly struct AiGuardrailGuardrailTopicType : IEquatable<AiGuardrailGuardrailTopicType>
    {
        private readonly string _value;

        private AiGuardrailGuardrailTopicType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiGuardrailGuardrailTopicType Deny { get; } = new AiGuardrailGuardrailTopicType("DENY");

        public static bool operator ==(AiGuardrailGuardrailTopicType left, AiGuardrailGuardrailTopicType right) => left.Equals(right);
        public static bool operator !=(AiGuardrailGuardrailTopicType left, AiGuardrailGuardrailTopicType right) => !left.Equals(right);

        public static explicit operator string(AiGuardrailGuardrailTopicType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiGuardrailGuardrailTopicType other && Equals(other);
        public bool Equals(AiGuardrailGuardrailTopicType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiPromptAiPromptApiFormat : IEquatable<AiPromptAiPromptApiFormat>
    {
        private readonly string _value;

        private AiPromptAiPromptApiFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiPromptAiPromptApiFormat AnthropicClaudeMessages { get; } = new AiPromptAiPromptApiFormat("ANTHROPIC_CLAUDE_MESSAGES");
        public static AiPromptAiPromptApiFormat AnthropicClaudeTextCompletions { get; } = new AiPromptAiPromptApiFormat("ANTHROPIC_CLAUDE_TEXT_COMPLETIONS");
        public static AiPromptAiPromptApiFormat Messages { get; } = new AiPromptAiPromptApiFormat("MESSAGES");
        public static AiPromptAiPromptApiFormat TextCompletions { get; } = new AiPromptAiPromptApiFormat("TEXT_COMPLETIONS");

        public static bool operator ==(AiPromptAiPromptApiFormat left, AiPromptAiPromptApiFormat right) => left.Equals(right);
        public static bool operator !=(AiPromptAiPromptApiFormat left, AiPromptAiPromptApiFormat right) => !left.Equals(right);

        public static explicit operator string(AiPromptAiPromptApiFormat value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiPromptAiPromptApiFormat other && Equals(other);
        public bool Equals(AiPromptAiPromptApiFormat other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiPromptAiPromptTemplateType : IEquatable<AiPromptAiPromptTemplateType>
    {
        private readonly string _value;

        private AiPromptAiPromptTemplateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiPromptAiPromptTemplateType Text { get; } = new AiPromptAiPromptTemplateType("TEXT");

        public static bool operator ==(AiPromptAiPromptTemplateType left, AiPromptAiPromptTemplateType right) => left.Equals(right);
        public static bool operator !=(AiPromptAiPromptTemplateType left, AiPromptAiPromptTemplateType right) => !left.Equals(right);

        public static explicit operator string(AiPromptAiPromptTemplateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiPromptAiPromptTemplateType other && Equals(other);
        public bool Equals(AiPromptAiPromptTemplateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AiPromptAiPromptType : IEquatable<AiPromptAiPromptType>
    {
        private readonly string _value;

        private AiPromptAiPromptType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AiPromptAiPromptType AnswerGeneration { get; } = new AiPromptAiPromptType("ANSWER_GENERATION");
        public static AiPromptAiPromptType IntentLabelingGeneration { get; } = new AiPromptAiPromptType("INTENT_LABELING_GENERATION");
        public static AiPromptAiPromptType QueryReformulation { get; } = new AiPromptAiPromptType("QUERY_REFORMULATION");
        public static AiPromptAiPromptType SelfServicePreProcessing { get; } = new AiPromptAiPromptType("SELF_SERVICE_PRE_PROCESSING");
        public static AiPromptAiPromptType SelfServiceAnswerGeneration { get; } = new AiPromptAiPromptType("SELF_SERVICE_ANSWER_GENERATION");
        public static AiPromptAiPromptType EmailResponse { get; } = new AiPromptAiPromptType("EMAIL_RESPONSE");
        public static AiPromptAiPromptType EmailOverview { get; } = new AiPromptAiPromptType("EMAIL_OVERVIEW");
        public static AiPromptAiPromptType EmailGenerativeAnswer { get; } = new AiPromptAiPromptType("EMAIL_GENERATIVE_ANSWER");
        public static AiPromptAiPromptType EmailQueryReformulation { get; } = new AiPromptAiPromptType("EMAIL_QUERY_REFORMULATION");

        public static bool operator ==(AiPromptAiPromptType left, AiPromptAiPromptType right) => left.Equals(right);
        public static bool operator !=(AiPromptAiPromptType left, AiPromptAiPromptType right) => !left.Equals(right);

        public static explicit operator string(AiPromptAiPromptType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AiPromptAiPromptType other && Equals(other);
        public bool Equals(AiPromptAiPromptType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AssistantAssociationAssociationType : IEquatable<AssistantAssociationAssociationType>
    {
        private readonly string _value;

        private AssistantAssociationAssociationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssistantAssociationAssociationType KnowledgeBase { get; } = new AssistantAssociationAssociationType("KNOWLEDGE_BASE");

        public static bool operator ==(AssistantAssociationAssociationType left, AssistantAssociationAssociationType right) => left.Equals(right);
        public static bool operator !=(AssistantAssociationAssociationType left, AssistantAssociationAssociationType right) => !left.Equals(right);

        public static explicit operator string(AssistantAssociationAssociationType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssistantAssociationAssociationType other && Equals(other);
        public bool Equals(AssistantAssociationAssociationType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct AssistantType : IEquatable<AssistantType>
    {
        private readonly string _value;

        private AssistantType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static AssistantType Agent { get; } = new AssistantType("AGENT");

        public static bool operator ==(AssistantType left, AssistantType right) => left.Equals(right);
        public static bool operator !=(AssistantType left, AssistantType right) => !left.Equals(right);

        public static explicit operator string(AssistantType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is AssistantType other && Equals(other);
        public bool Equals(AssistantType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnowledgeBaseType : IEquatable<KnowledgeBaseType>
    {
        private readonly string _value;

        private KnowledgeBaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnowledgeBaseType External { get; } = new KnowledgeBaseType("EXTERNAL");
        public static KnowledgeBaseType Custom { get; } = new KnowledgeBaseType("CUSTOM");
        public static KnowledgeBaseType MessageTemplates { get; } = new KnowledgeBaseType("MESSAGE_TEMPLATES");
        public static KnowledgeBaseType Managed { get; } = new KnowledgeBaseType("MANAGED");
        public static KnowledgeBaseType QuickResponses { get; } = new KnowledgeBaseType("QUICK_RESPONSES");

        public static bool operator ==(KnowledgeBaseType left, KnowledgeBaseType right) => left.Equals(right);
        public static bool operator !=(KnowledgeBaseType left, KnowledgeBaseType right) => !left.Equals(right);

        public static explicit operator string(KnowledgeBaseType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnowledgeBaseType other && Equals(other);
        public bool Equals(KnowledgeBaseType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy : IEquatable<KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy>
    {
        private readonly string _value;

        private KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy FixedSize { get; } = new KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy("FIXED_SIZE");
        public static KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy None { get; } = new KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy("NONE");
        public static KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy Hierarchical { get; } = new KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy("HIERARCHICAL");
        public static KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy Semantic { get; } = new KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy("SEMANTIC");

        public static bool operator ==(KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy left, KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy right) => left.Equals(right);
        public static bool operator !=(KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy left, KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy right) => !left.Equals(right);

        public static explicit operator string(KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy other && Equals(other);
        public bool Equals(KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy : IEquatable<KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy>
    {
        private readonly string _value;

        private KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy BedrockFoundationModel { get; } = new KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy("BEDROCK_FOUNDATION_MODEL");

        public static bool operator ==(KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy left, KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy right) => left.Equals(right);
        public static bool operator !=(KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy left, KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy right) => !left.Equals(right);

        public static explicit operator string(KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy other && Equals(other);
        public bool Equals(KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KnowledgeBaseWebCrawlerConfigurationScope : IEquatable<KnowledgeBaseWebCrawlerConfigurationScope>
    {
        private readonly string _value;

        private KnowledgeBaseWebCrawlerConfigurationScope(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KnowledgeBaseWebCrawlerConfigurationScope HostOnly { get; } = new KnowledgeBaseWebCrawlerConfigurationScope("HOST_ONLY");
        public static KnowledgeBaseWebCrawlerConfigurationScope Subdomains { get; } = new KnowledgeBaseWebCrawlerConfigurationScope("SUBDOMAINS");

        public static bool operator ==(KnowledgeBaseWebCrawlerConfigurationScope left, KnowledgeBaseWebCrawlerConfigurationScope right) => left.Equals(right);
        public static bool operator !=(KnowledgeBaseWebCrawlerConfigurationScope left, KnowledgeBaseWebCrawlerConfigurationScope right) => !left.Equals(right);

        public static explicit operator string(KnowledgeBaseWebCrawlerConfigurationScope value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KnowledgeBaseWebCrawlerConfigurationScope other && Equals(other);
        public bool Equals(KnowledgeBaseWebCrawlerConfigurationScope other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The channel subtype this message template applies to.
    /// </summary>
    [EnumType]
    public readonly struct MessageTemplateChannelSubtype : IEquatable<MessageTemplateChannelSubtype>
    {
        private readonly string _value;

        private MessageTemplateChannelSubtype(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MessageTemplateChannelSubtype Email { get; } = new MessageTemplateChannelSubtype("EMAIL");
        public static MessageTemplateChannelSubtype Sms { get; } = new MessageTemplateChannelSubtype("SMS");

        public static bool operator ==(MessageTemplateChannelSubtype left, MessageTemplateChannelSubtype right) => left.Equals(right);
        public static bool operator !=(MessageTemplateChannelSubtype left, MessageTemplateChannelSubtype right) => !left.Equals(right);

        public static explicit operator string(MessageTemplateChannelSubtype value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MessageTemplateChannelSubtype other && Equals(other);
        public bool Equals(MessageTemplateChannelSubtype other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct QuickResponseChannelType : IEquatable<QuickResponseChannelType>
    {
        private readonly string _value;

        private QuickResponseChannelType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QuickResponseChannelType Chat { get; } = new QuickResponseChannelType("Chat");
        public static QuickResponseChannelType Email { get; } = new QuickResponseChannelType("Email");

        public static bool operator ==(QuickResponseChannelType left, QuickResponseChannelType right) => left.Equals(right);
        public static bool operator !=(QuickResponseChannelType left, QuickResponseChannelType right) => !left.Equals(right);

        public static explicit operator string(QuickResponseChannelType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QuickResponseChannelType other && Equals(other);
        public bool Equals(QuickResponseChannelType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The status of the quick response data.
    /// </summary>
    [EnumType]
    public readonly struct QuickResponseStatus : IEquatable<QuickResponseStatus>
    {
        private readonly string _value;

        private QuickResponseStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static QuickResponseStatus CreateInProgress { get; } = new QuickResponseStatus("CREATE_IN_PROGRESS");
        public static QuickResponseStatus CreateFailed { get; } = new QuickResponseStatus("CREATE_FAILED");
        public static QuickResponseStatus Created { get; } = new QuickResponseStatus("CREATED");
        public static QuickResponseStatus DeleteInProgress { get; } = new QuickResponseStatus("DELETE_IN_PROGRESS");
        public static QuickResponseStatus DeleteFailed { get; } = new QuickResponseStatus("DELETE_FAILED");
        public static QuickResponseStatus Deleted { get; } = new QuickResponseStatus("DELETED");
        public static QuickResponseStatus UpdateInProgress { get; } = new QuickResponseStatus("UPDATE_IN_PROGRESS");
        public static QuickResponseStatus UpdateFailed { get; } = new QuickResponseStatus("UPDATE_FAILED");

        public static bool operator ==(QuickResponseStatus left, QuickResponseStatus right) => left.Equals(right);
        public static bool operator !=(QuickResponseStatus left, QuickResponseStatus right) => !left.Equals(right);

        public static explicit operator string(QuickResponseStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is QuickResponseStatus other && Equals(other);
        public bool Equals(QuickResponseStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
