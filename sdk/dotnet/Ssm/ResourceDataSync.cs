// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ssm
{
    /// <summary>
    /// Resource Type definition for AWS::SSM::ResourceDataSync
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicResourceDataSync = new AwsNative.Ssm.ResourceDataSync("basicResourceDataSync", new()
    ///     {
    ///         SyncName = "test-sync",
    ///         SyncType = "SyncToDestination",
    ///         S3Destination = new AwsNative.Ssm.Inputs.ResourceDataSyncS3DestinationArgs
    ///         {
    ///             BucketName = "test-bucket",
    ///             BucketRegion = "us-east-2",
    ///             SyncFormat = "JsonSerDe",
    ///             BucketPrefix = "cfn",
    ///             KmsKeyArn = "kmsKeyARN",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicResourceDataSync = new AwsNative.Ssm.ResourceDataSync("basicResourceDataSync", new()
    ///     {
    ///         SyncName = "test-sync",
    ///         SyncType = "SyncToDestination",
    ///         S3Destination = new AwsNative.Ssm.Inputs.ResourceDataSyncS3DestinationArgs
    ///         {
    ///             BucketName = "test-bucket",
    ///             BucketRegion = "us-east-2",
    ///             SyncFormat = "JsonSerDe",
    ///             BucketPrefix = "cfn",
    ///             KmsKeyArn = "kmsKeyARN",
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicResourceDataSync = new AwsNative.Ssm.ResourceDataSync("basicResourceDataSync", new()
    ///     {
    ///         SyncName = "test-sync",
    ///         SyncType = "SyncFromSource",
    ///         SyncSource = new AwsNative.Ssm.Inputs.ResourceDataSyncSyncSourceArgs
    ///         {
    ///             SourceType = "SingleAccountMultiRegions",
    ///             SourceRegions = new[]
    ///             {
    ///                 "us-east-1",
    ///                 "us-west-1",
    ///                 "us-west-2",
    ///             },
    ///             IncludeFutureRegions = false,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicResourceDataSync = new AwsNative.Ssm.ResourceDataSync("basicResourceDataSync", new()
    ///     {
    ///         SyncName = "test-sync",
    ///         SyncType = "SyncFromSource",
    ///         SyncSource = new AwsNative.Ssm.Inputs.ResourceDataSyncSyncSourceArgs
    ///         {
    ///             SourceType = "SingleAccountMultiRegions",
    ///             SourceRegions = new[]
    ///             {
    ///                 "us-east-1",
    ///                 "us-west-1",
    ///                 "us-west-2",
    ///             },
    ///             IncludeFutureRegions = false,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicResourceDataSync = new AwsNative.Ssm.ResourceDataSync("basicResourceDataSync", new()
    ///     {
    ///         SyncName = "test-sync",
    ///         SyncType = "SyncFromSource",
    ///         SyncSource = new AwsNative.Ssm.Inputs.ResourceDataSyncSyncSourceArgs
    ///         {
    ///             SourceType = "AwsOrganizations",
    ///             AwsOrganizationsSource = new AwsNative.Ssm.Inputs.ResourceDataSyncAwsOrganizationsSourceArgs
    ///             {
    ///                 OrganizationSourceType = "EntireOrganization",
    ///             },
    ///             SourceRegions = new[]
    ///             {
    ///                 "us-west-1",
    ///             },
    ///             IncludeFutureRegions = false,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicResourceDataSync = new AwsNative.Ssm.ResourceDataSync("basicResourceDataSync", new()
    ///     {
    ///         SyncName = "test-sync",
    ///         SyncType = "SyncFromSource",
    ///         SyncSource = new AwsNative.Ssm.Inputs.ResourceDataSyncSyncSourceArgs
    ///         {
    ///             SourceType = "AwsOrganizations",
    ///             AwsOrganizationsSource = new AwsNative.Ssm.Inputs.ResourceDataSyncAwsOrganizationsSourceArgs
    ///             {
    ///                 OrganizationSourceType = "EntireOrganization",
    ///             },
    ///             SourceRegions = new[]
    ///             {
    ///                 "us-west-1",
    ///             },
    ///             IncludeFutureRegions = false,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicResourceDataSync = new AwsNative.Ssm.ResourceDataSync("basicResourceDataSync", new()
    ///     {
    ///         SyncName = "test-sync",
    ///         SyncType = "SyncFromSource",
    ///         SyncSource = new AwsNative.Ssm.Inputs.ResourceDataSyncSyncSourceArgs
    ///         {
    ///             SourceType = "AwsOrganizations",
    ///             AwsOrganizationsSource = new AwsNative.Ssm.Inputs.ResourceDataSyncAwsOrganizationsSourceArgs
    ///             {
    ///                 OrganizationSourceType = "OrganizationalUnits",
    ///                 OrganizationalUnits = new[]
    ///                 {
    ///                     "ou-12345",
    ///                 },
    ///             },
    ///             SourceRegions = new[]
    ///             {
    ///                 "us-west-1",
    ///             },
    ///             IncludeFutureRegions = false,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicResourceDataSync = new AwsNative.Ssm.ResourceDataSync("basicResourceDataSync", new()
    ///     {
    ///         SyncName = "test-sync",
    ///         SyncType = "SyncFromSource",
    ///         SyncSource = new AwsNative.Ssm.Inputs.ResourceDataSyncSyncSourceArgs
    ///         {
    ///             SourceType = "AwsOrganizations",
    ///             AwsOrganizationsSource = new AwsNative.Ssm.Inputs.ResourceDataSyncAwsOrganizationsSourceArgs
    ///             {
    ///                 OrganizationSourceType = "OrganizationalUnits",
    ///                 OrganizationalUnits = new[]
    ///                 {
    ///                     "ou-12345",
    ///                 },
    ///             },
    ///             SourceRegions = new[]
    ///             {
    ///                 "us-west-1",
    ///             },
    ///             IncludeFutureRegions = false,
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:ssm:ResourceDataSync")]
    public partial class ResourceDataSync : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the S3 bucket where the aggregated data is stored.
        /// </summary>
        [Output("bucketName")]
        public Output<string?> BucketName { get; private set; } = null!;

        /// <summary>
        /// An Amazon S3 prefix for the bucket.
        /// </summary>
        [Output("bucketPrefix")]
        public Output<string?> BucketPrefix { get; private set; } = null!;

        /// <summary>
        /// The AWS Region with the S3 bucket targeted by the resource data sync.
        /// </summary>
        [Output("bucketRegion")]
        public Output<string?> BucketRegion { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of an encryption key for a destination in Amazon S3 . You can use a KMS key to encrypt inventory data in Amazon S3 . You must specify a key that exist in the same AWS Region as the destination Amazon S3 bucket.
        /// </summary>
        [Output("kmsKeyArn")]
        public Output<string?> KmsKeyArn { get; private set; } = null!;

        /// <summary>
        /// Information about the target S3 bucket for the resource data sync.
        /// </summary>
        [Output("s3Destination")]
        public Output<Outputs.ResourceDataSyncS3Destination?> S3Destination { get; private set; } = null!;

        /// <summary>
        /// A supported sync format. The following format is currently supported: JsonSerDe
        /// </summary>
        [Output("syncFormat")]
        public Output<string?> SyncFormat { get; private set; } = null!;

        /// <summary>
        /// The name of the resource data sync.
        /// </summary>
        [Output("syncName")]
        public Output<string> SyncName { get; private set; } = null!;

        /// <summary>
        /// Information about the source of the data included in the resource data sync.
        /// </summary>
        [Output("syncSource")]
        public Output<Outputs.ResourceDataSyncSyncSource?> SyncSource { get; private set; } = null!;

        /// <summary>
        /// The type of resource data sync. If `SyncType` is `SyncToDestination` , then the resource data sync synchronizes data to an S3 bucket. If the `SyncType` is `SyncFromSource` then the resource data sync synchronizes data from AWS Organizations or from multiple AWS Regions .
        /// </summary>
        [Output("syncType")]
        public Output<string?> SyncType { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceDataSync resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceDataSync(string name, ResourceDataSyncArgs? args = null, CustomResourceOptions? options = null)
            : base("aws-native:ssm:ResourceDataSync", name, args ?? new ResourceDataSyncArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceDataSync(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ssm:ResourceDataSync", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "bucketName",
                    "bucketPrefix",
                    "bucketRegion",
                    "kmsKeyArn",
                    "s3Destination",
                    "syncFormat",
                    "syncName",
                    "syncType",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceDataSync resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceDataSync Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ResourceDataSync(name, id, options);
        }
    }

    public sealed class ResourceDataSyncArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the S3 bucket where the aggregated data is stored.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// An Amazon S3 prefix for the bucket.
        /// </summary>
        [Input("bucketPrefix")]
        public Input<string>? BucketPrefix { get; set; }

        /// <summary>
        /// The AWS Region with the S3 bucket targeted by the resource data sync.
        /// </summary>
        [Input("bucketRegion")]
        public Input<string>? BucketRegion { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of an encryption key for a destination in Amazon S3 . You can use a KMS key to encrypt inventory data in Amazon S3 . You must specify a key that exist in the same AWS Region as the destination Amazon S3 bucket.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        /// <summary>
        /// Information about the target S3 bucket for the resource data sync.
        /// </summary>
        [Input("s3Destination")]
        public Input<Inputs.ResourceDataSyncS3DestinationArgs>? S3Destination { get; set; }

        /// <summary>
        /// A supported sync format. The following format is currently supported: JsonSerDe
        /// </summary>
        [Input("syncFormat")]
        public Input<string>? SyncFormat { get; set; }

        /// <summary>
        /// The name of the resource data sync.
        /// </summary>
        [Input("syncName")]
        public Input<string>? SyncName { get; set; }

        /// <summary>
        /// Information about the source of the data included in the resource data sync.
        /// </summary>
        [Input("syncSource")]
        public Input<Inputs.ResourceDataSyncSyncSourceArgs>? SyncSource { get; set; }

        /// <summary>
        /// The type of resource data sync. If `SyncType` is `SyncToDestination` , then the resource data sync synchronizes data to an S3 bucket. If the `SyncType` is `SyncFromSource` then the resource data sync synchronizes data from AWS Organizations or from multiple AWS Regions .
        /// </summary>
        [Input("syncType")]
        public Input<string>? SyncType { get; set; }

        public ResourceDataSyncArgs()
        {
        }
        public static new ResourceDataSyncArgs Empty => new ResourceDataSyncArgs();
    }
}
