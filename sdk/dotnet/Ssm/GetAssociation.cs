// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ssm
{
    public static class GetAssociation
    {
        /// <summary>
        /// The AWS::SSM::Association resource associates an SSM document in AWS Systems Manager with EC2 instances that contain a configuration agent to process the document.
        /// </summary>
        public static Task<GetAssociationResult> InvokeAsync(GetAssociationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAssociationResult>("aws-native:ssm:getAssociation", args ?? new GetAssociationArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS::SSM::Association resource associates an SSM document in AWS Systems Manager with EC2 instances that contain a configuration agent to process the document.
        /// </summary>
        public static Output<GetAssociationResult> Invoke(GetAssociationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAssociationResult>("aws-native:ssm:getAssociation", args ?? new GetAssociationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAssociationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the association.
        /// </summary>
        [Input("associationId", required: true)]
        public string AssociationId { get; set; } = null!;

        public GetAssociationArgs()
        {
        }
        public static new GetAssociationArgs Empty => new GetAssociationArgs();
    }

    public sealed class GetAssociationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the association.
        /// </summary>
        [Input("associationId", required: true)]
        public Input<string> AssociationId { get; set; } = null!;

        public GetAssociationInvokeArgs()
        {
        }
        public static new GetAssociationInvokeArgs Empty => new GetAssociationInvokeArgs();
    }


    [OutputType]
    public sealed class GetAssociationResult
    {
        /// <summary>
        /// By default, when you create a new association, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter is not supported for rate expressions.
        /// </summary>
        public readonly bool? ApplyOnlyAtCronInterval;
        /// <summary>
        /// Unique identifier of the association.
        /// </summary>
        public readonly string? AssociationId;
        /// <summary>
        /// The name of the association.
        /// </summary>
        public readonly string? AssociationName;
        /// <summary>
        /// Choose the parameter that will define how your automation will branch out. This target is required for associations that use an Automation runbook and target resources by using rate controls. Automation is a capability of AWS Systems Manager .
        /// </summary>
        public readonly string? AutomationTargetParameterName;
        /// <summary>
        /// The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your associations are gated under. The associations only run when that Change Calendar is open. For more information, see [AWS Systems Manager Change Calendar](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar) .
        /// </summary>
        public readonly ImmutableArray<string> CalendarNames;
        /// <summary>
        /// The severity level that is assigned to the association.
        /// </summary>
        public readonly Pulumi.AwsNative.Ssm.AssociationComplianceSeverity? ComplianceSeverity;
        /// <summary>
        /// The version of the SSM document to associate with the target.
        /// </summary>
        public readonly string? DocumentVersion;
        /// <summary>
        /// The ID of the instance that the SSM document is associated with.
        /// </summary>
        public readonly string? InstanceId;
        /// <summary>
        /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.
        /// 
        /// If a new managed node starts and attempts to run an association while Systems Manager is running `MaxConcurrency` associations, the association is allowed to run. During the next association interval, the new managed node will process its association within the limit specified for `MaxConcurrency` .
        /// </summary>
        public readonly string? MaxConcurrency;
        /// <summary>
        /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 managed nodes and set `MaxError` to 10%, then the system stops sending the request when the sixth error is received.
        /// 
        /// Executions that are already running an association when `MaxErrors` is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set `MaxConcurrency` to 1 so that executions proceed one at a time.
        /// </summary>
        public readonly string? MaxErrors;
        /// <summary>
        /// The name of the SSM document.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// An Amazon Simple Storage Service (Amazon S3) bucket where you want to store the output details of the request.
        /// </summary>
        public readonly Outputs.AssociationInstanceAssociationOutputLocation? OutputLocation;
        /// <summary>
        /// Parameter values that the SSM document uses at runtime.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>>? Parameters;
        /// <summary>
        /// A Cron or Rate expression that specifies when the association is applied to the target.
        /// </summary>
        public readonly string? ScheduleExpression;
        /// <summary>
        /// Number of days to wait after the scheduled day to run an association.
        /// </summary>
        public readonly int? ScheduleOffset;
        /// <summary>
        /// The mode for generating association compliance. You can specify `AUTO` or `MANUAL` . In `AUTO` mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is `COMPLIANT` . If the association execution doesn't run successfully, the association is `NON-COMPLIANT` .
        /// 
        /// In `MANUAL` mode, you must specify the `AssociationId` as a parameter for the `PutComplianceItems` API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the `PutComplianceItems` API action.
        /// 
        /// By default, all associations use `AUTO` mode.
        /// </summary>
        public readonly Pulumi.AwsNative.Ssm.AssociationSyncCompliance? SyncCompliance;
        /// <summary>
        /// The targets that the SSM document sends commands to.
        /// </summary>
        public readonly ImmutableArray<Outputs.AssociationTarget> Targets;

        [OutputConstructor]
        private GetAssociationResult(
            bool? applyOnlyAtCronInterval,

            string? associationId,

            string? associationName,

            string? automationTargetParameterName,

            ImmutableArray<string> calendarNames,

            Pulumi.AwsNative.Ssm.AssociationComplianceSeverity? complianceSeverity,

            string? documentVersion,

            string? instanceId,

            string? maxConcurrency,

            string? maxErrors,

            string? name,

            Outputs.AssociationInstanceAssociationOutputLocation? outputLocation,

            ImmutableDictionary<string, ImmutableArray<string>>? parameters,

            string? scheduleExpression,

            int? scheduleOffset,

            Pulumi.AwsNative.Ssm.AssociationSyncCompliance? syncCompliance,

            ImmutableArray<Outputs.AssociationTarget> targets)
        {
            ApplyOnlyAtCronInterval = applyOnlyAtCronInterval;
            AssociationId = associationId;
            AssociationName = associationName;
            AutomationTargetParameterName = automationTargetParameterName;
            CalendarNames = calendarNames;
            ComplianceSeverity = complianceSeverity;
            DocumentVersion = documentVersion;
            InstanceId = instanceId;
            MaxConcurrency = maxConcurrency;
            MaxErrors = maxErrors;
            Name = name;
            OutputLocation = outputLocation;
            Parameters = parameters;
            ScheduleExpression = scheduleExpression;
            ScheduleOffset = scheduleOffset;
            SyncCompliance = syncCompliance;
            Targets = targets;
        }
    }
}
