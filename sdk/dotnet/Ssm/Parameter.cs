// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsNative.Ssm
{
    /// <summary>
    /// The ``AWS::SSM::Parameter`` resource creates an SSM parameter in SYSlong Parameter Store.
    ///   To create an SSM parameter, you must have the IAMlong (IAM) permissions ``ssm:PutParameter`` and ``ssm:AddTagsToResource``. On stack creation, CFNlong adds the following three tags to the parameter: ``aws:cloudformation:stack-name``, ``aws:cloudformation:logical-id``, and ``aws:cloudformation:stack-id``, in addition to any custom tags you specify.
    ///  To add, update, or remove tags during stack update, you must have IAM permissions for both ``ssm:AddTagsToResource`` and ``ssm:RemoveTagsFromResource``. For more information, see [Managing access using policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/security-iam.html#security_iam_access-manage) in the *User Guide*.
    ///   For information about valid values for parameters, see [About requirements and constraints for parameter names](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-su-create.html#sysman-parameter-name-constraints) in the *User Guide* and [PutParameter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PutParameter.html) in the *API Reference*.
    /// 
    /// ## Example Usage
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicParameter = new AwsNative.Ssm.Parameter("basicParameter", new()
    ///     {
    ///         Name = "command",
    ///         Type = AwsNative.Ssm.ParameterType.String,
    ///         Value = "date",
    ///         Description = "SSM Parameter for running date command.",
    ///         AllowedPattern = "^[a-zA-Z]{1,10}$",
    ///         Tags = 
    ///         {
    ///             { "environment", "DEV" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicParameter = new AwsNative.Ssm.Parameter("basicParameter", new()
    ///     {
    ///         Name = "command",
    ///         Type = AwsNative.Ssm.ParameterType.String,
    ///         Value = "date",
    ///         Description = "SSM Parameter for running date command.",
    ///         AllowedPattern = "^[a-zA-Z]{1,10}$",
    ///         Tags = 
    ///         {
    ///             { "environment", "DEV" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicParameter = new AwsNative.Ssm.Parameter("basicParameter", new()
    ///     {
    ///         Name = "commands",
    ///         Type = AwsNative.Ssm.ParameterType.StringList,
    ///         Value = "date,ls",
    ///         Description = "SSM Parameter of type StringList.",
    ///         AllowedPattern = "^[a-zA-Z]{1,10}$",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicParameter = new AwsNative.Ssm.Parameter("basicParameter", new()
    ///     {
    ///         Name = "commands",
    ///         Type = AwsNative.Ssm.ParameterType.StringList,
    ///         Value = "date,ls",
    ///         Description = "SSM Parameter of type StringList.",
    ///         AllowedPattern = "^[a-zA-Z]{1,10}$",
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicParameter = new AwsNative.Ssm.Parameter("basicParameter", new()
    ///     {
    ///         Name = "command",
    ///         Type = AwsNative.Ssm.ParameterType.String,
    ///         Value = "date",
    ///         Tier = AwsNative.Ssm.ParameterTier.Advanced,
    ///         Policies = "[{\"Type\":\"Expiration\",\"Version\":\"1.0\",\"Attributes\":{\"Timestamp\":\"2020-05-13T00:00:00.000Z\"}},{\"Type\":\"ExpirationNotification\",\"Version\":\"1.0\",\"Attributes\":{\"Before\":\"5\",\"Unit\":\"Days\"}},{\"Type\":\"NoChangeNotification\",\"Version\":\"1.0\",\"Attributes\":{\"After\":\"60\",\"Unit\":\"Days\"}}]",
    ///         Description = "SSM Parameter for running date command.",
    ///         AllowedPattern = "^[a-zA-Z]{1,10}$",
    ///         Tags = 
    ///         {
    ///             { "environment", "DEV" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// ### Example
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using AwsNative = Pulumi.AwsNative;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicParameter = new AwsNative.Ssm.Parameter("basicParameter", new()
    ///     {
    ///         Name = "command",
    ///         Type = AwsNative.Ssm.ParameterType.String,
    ///         Value = "date",
    ///         Tier = AwsNative.Ssm.ParameterTier.Advanced,
    ///         Policies = "[{\"Type\":\"Expiration\",\"Version\":\"1.0\",\"Attributes\":{\"Timestamp\":\"2020-05-13T00:00:00.000Z\"}},{\"Type\":\"ExpirationNotification\",\"Version\":\"1.0\",\"Attributes\":{\"Before\":\"5\",\"Unit\":\"Days\"}},{\"Type\":\"NoChangeNotification\",\"Version\":\"1.0\",\"Attributes\":{\"After\":\"60\",\"Unit\":\"Days\"}}]",
    ///         Description = "SSM Parameter for running date command.",
    ///         AllowedPattern = "^[a-zA-Z]{1,10}$",
    ///         Tags = 
    ///         {
    ///             { "environment", "DEV" },
    ///         },
    ///     });
    /// 
    /// });
    /// 
    /// 
    /// ```
    /// </summary>
    [AwsNativeResourceType("aws-native:ssm:Parameter")]
    public partial class Parameter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A regular expression used to validate the parameter value. For example, for ``String`` types with values restricted to numbers, you can specify the following: ``AllowedPattern=^\d+$``
        /// </summary>
        [Output("allowedPattern")]
        public Output<string?> AllowedPattern { get; private set; } = null!;

        /// <summary>
        /// The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
        /// </summary>
        [Output("dataType")]
        public Output<Pulumi.AwsNative.Ssm.ParameterDataType?> DataType { get; private set; } = null!;

        /// <summary>
        /// Information about the parameter.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the parameter.
        ///   The reported maximum length of 2048 characters for a parameter name includes 1037 characters that are reserved for internal use by SYS. The maximum length for a parameter name that you specify is 1011 characters.
        ///  This count of 1011 characters includes the characters in the ARN that precede the name you specify. This ARN length will vary depending on your partition and Region. For example, the following 45 characters count toward the 1011 character maximum for a parameter created in the US East (Ohio) Region: ``arn:aws:ssm:us-east-2:111122223333:parameter/``.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Information about the policies assigned to a parameter.
        ///  [Assigning parameter policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the *User Guide*.
        /// </summary>
        [Output("policies")]
        public Output<string?> Policies { get; private set; } = null!;

        /// <summary>
        /// Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a SYS parameter to identify the type of resource to which it applies, the environment, or the type of configuration data referenced by the parameter.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The parameter tier.
        /// </summary>
        [Output("tier")]
        public Output<Pulumi.AwsNative.Ssm.ParameterTier?> Tier { get; private set; } = null!;

        /// <summary>
        /// The type of parameter.
        ///   Parameters of type ``SecureString`` are not supported by CFNlong.
        /// </summary>
        [Output("type")]
        public Output<Pulumi.AwsNative.Ssm.ParameterType> Type { get; private set; } = null!;

        /// <summary>
        /// The parameter value.
        ///   If type is ``StringList``, the system returns a comma-separated string with no spaces between commas in the ``Value`` field.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a Parameter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Parameter(string name, ParameterArgs args, CustomResourceOptions? options = null)
            : base("aws-native:ssm:Parameter", name, args ?? new ParameterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Parameter(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("aws-native:ssm:Parameter", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                ReplaceOnChanges =
                {
                    "name",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Parameter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Parameter Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Parameter(name, id, options);
        }
    }

    public sealed class ParameterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A regular expression used to validate the parameter value. For example, for ``String`` types with values restricted to numbers, you can specify the following: ``AllowedPattern=^\d+$``
        /// </summary>
        [Input("allowedPattern")]
        public Input<string>? AllowedPattern { get; set; }

        /// <summary>
        /// The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
        /// </summary>
        [Input("dataType")]
        public Input<Pulumi.AwsNative.Ssm.ParameterDataType>? DataType { get; set; }

        /// <summary>
        /// Information about the parameter.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the parameter.
        ///   The reported maximum length of 2048 characters for a parameter name includes 1037 characters that are reserved for internal use by SYS. The maximum length for a parameter name that you specify is 1011 characters.
        ///  This count of 1011 characters includes the characters in the ARN that precede the name you specify. This ARN length will vary depending on your partition and Region. For example, the following 45 characters count toward the 1011 character maximum for a parameter created in the US East (Ohio) Region: ``arn:aws:ssm:us-east-2:111122223333:parameter/``.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Information about the policies assigned to a parameter.
        ///  [Assigning parameter policies](https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html) in the *User Guide*.
        /// </summary>
        [Input("policies")]
        public Input<string>? Policies { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Optional metadata that you assign to a resource in the form of an arbitrary set of tags (key-value pairs). Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a SYS parameter to identify the type of resource to which it applies, the environment, or the type of configuration data referenced by the parameter.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The parameter tier.
        /// </summary>
        [Input("tier")]
        public Input<Pulumi.AwsNative.Ssm.ParameterTier>? Tier { get; set; }

        /// <summary>
        /// The type of parameter.
        ///   Parameters of type ``SecureString`` are not supported by CFNlong.
        /// </summary>
        [Input("type", required: true)]
        public Input<Pulumi.AwsNative.Ssm.ParameterType> Type { get; set; } = null!;

        /// <summary>
        /// The parameter value.
        ///   If type is ``StringList``, the system returns a comma-separated string with no spaces between commas in the ``Value`` field.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ParameterArgs()
        {
        }
        public static new ParameterArgs Empty => new ParameterArgs();
    }
}
