// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * The AWS::RDS::EventSubscription resource allows you to receive notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service (Amazon SNS). For more information, see Using Amazon RDS Event Notification in the Amazon RDS User Guide.
 */
export function getEventSubscription(args: GetEventSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetEventSubscriptionResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:rds:getEventSubscription", {
        "subscriptionName": args.subscriptionName,
    }, opts);
}

export interface GetEventSubscriptionArgs {
    /**
     * The name of the subscription.
     */
    subscriptionName: string;
}

export interface GetEventSubscriptionResult {
    /**
     * A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it.
     */
    readonly enabled?: boolean;
    /**
     * A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action.
     */
    readonly eventCategories?: string[];
    /**
     * The list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it cannot end with a hyphen or contain two consecutive hyphens.
     */
    readonly sourceIds?: string[];
    /**
     * The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
     */
    readonly sourceType?: enums.rds.EventSubscriptionSourceType;
    /**
     * The name of the subscription.
     */
    readonly subscriptionName?: string;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly tags?: outputs.rds.EventSubscriptionTag[];
}

export function getEventSubscriptionOutput(args: GetEventSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventSubscriptionResult> {
    return pulumi.output(args).apply(a => getEventSubscription(a, opts))
}

export interface GetEventSubscriptionOutputArgs {
    /**
     * The name of the subscription.
     */
    subscriptionName: pulumi.Input<string>;
}
