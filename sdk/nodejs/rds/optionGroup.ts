// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The ``AWS::RDS::OptionGroup`` resource creates or updates an option group, to enable and configure features that are specific to a particular DB engine.
 */
export class OptionGroup extends pulumi.CustomResource {
    /**
     * Get an existing OptionGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): OptionGroup {
        return new OptionGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:rds:OptionGroup';

    /**
     * Returns true if the given object is an instance of OptionGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OptionGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OptionGroup.__pulumiType;
    }

    /**
     * Specifies the name of the engine that this option group should be associated with.
     *  Valid Values: 
     *   +   ``mariadb`` 
     *   +   ``mysql`` 
     *   +   ``oracle-ee`` 
     *   +   ``oracle-ee-cdb`` 
     *   +   ``oracle-se2`` 
     *   +   ``oracle-se2-cdb`` 
     *   +   ``postgres`` 
     *   +   ``sqlserver-ee`` 
     *   +   ``sqlserver-se`` 
     *   +   ``sqlserver-ex`` 
     *   +   ``sqlserver-web``
     */
    declare public readonly engineName: pulumi.Output<string>;
    /**
     * Specifies the major version of the engine that this option group should be associated with.
     */
    declare public readonly majorEngineVersion: pulumi.Output<string>;
    /**
     * A list of all available options for an option group.
     */
    declare public readonly optionConfigurations: pulumi.Output<outputs.rds.OptionGroupOptionConfiguration[] | undefined>;
    /**
     * The description of the option group.
     */
    declare public readonly optionGroupDescription: pulumi.Output<string>;
    /**
     * The name of the option group to be created.
     *  Constraints:
     *   +  Must be 1 to 255 letters, numbers, or hyphens
     *   +  First character must be a letter
     *   +  Can't end with a hyphen or contain two consecutive hyphens
     *   
     *  Example: ``myoptiongroup``
     *  If you don't specify a value for ``OptionGroupName`` property, a name is automatically created for the option group.
     *   This value is stored as a lowercase string.
     */
    declare public readonly optionGroupName: pulumi.Output<string | undefined>;
    /**
     * Tags to assign to the option group.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a OptionGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OptionGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.engineName === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineName'");
            }
            if (args?.majorEngineVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'majorEngineVersion'");
            }
            if (args?.optionGroupDescription === undefined && !opts.urn) {
                throw new Error("Missing required property 'optionGroupDescription'");
            }
            resourceInputs["engineName"] = args?.engineName;
            resourceInputs["majorEngineVersion"] = args?.majorEngineVersion;
            resourceInputs["optionConfigurations"] = args?.optionConfigurations;
            resourceInputs["optionGroupDescription"] = args?.optionGroupDescription;
            resourceInputs["optionGroupName"] = args?.optionGroupName;
            resourceInputs["tags"] = args?.tags;
        } else {
            resourceInputs["engineName"] = undefined /*out*/;
            resourceInputs["majorEngineVersion"] = undefined /*out*/;
            resourceInputs["optionConfigurations"] = undefined /*out*/;
            resourceInputs["optionGroupDescription"] = undefined /*out*/;
            resourceInputs["optionGroupName"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["engineName", "majorEngineVersion", "optionGroupDescription", "optionGroupName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(OptionGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a OptionGroup resource.
 */
export interface OptionGroupArgs {
    /**
     * Specifies the name of the engine that this option group should be associated with.
     *  Valid Values: 
     *   +   ``mariadb`` 
     *   +   ``mysql`` 
     *   +   ``oracle-ee`` 
     *   +   ``oracle-ee-cdb`` 
     *   +   ``oracle-se2`` 
     *   +   ``oracle-se2-cdb`` 
     *   +   ``postgres`` 
     *   +   ``sqlserver-ee`` 
     *   +   ``sqlserver-se`` 
     *   +   ``sqlserver-ex`` 
     *   +   ``sqlserver-web``
     */
    engineName: pulumi.Input<string>;
    /**
     * Specifies the major version of the engine that this option group should be associated with.
     */
    majorEngineVersion: pulumi.Input<string>;
    /**
     * A list of all available options for an option group.
     */
    optionConfigurations?: pulumi.Input<pulumi.Input<inputs.rds.OptionGroupOptionConfigurationArgs>[]>;
    /**
     * The description of the option group.
     */
    optionGroupDescription: pulumi.Input<string>;
    /**
     * The name of the option group to be created.
     *  Constraints:
     *   +  Must be 1 to 255 letters, numbers, or hyphens
     *   +  First character must be a letter
     *   +  Can't end with a hyphen or contain two consecutive hyphens
     *   
     *  Example: ``myoptiongroup``
     *  If you don't specify a value for ``OptionGroupName`` property, a name is automatically created for the option group.
     *   This value is stored as a lowercase string.
     */
    optionGroupName?: pulumi.Input<string>;
    /**
     * Tags to assign to the option group.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
