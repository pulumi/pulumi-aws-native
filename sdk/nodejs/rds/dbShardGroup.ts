// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::RDS::DBShardGroup resource creates an Amazon Aurora Limitless DB Shard Group.
 */
export class DbShardGroup extends pulumi.CustomResource {
    /**
     * Get an existing DbShardGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DbShardGroup {
        return new DbShardGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:rds:DbShardGroup';

    /**
     * Returns true if the given object is an instance of DbShardGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbShardGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbShardGroup.__pulumiType;
    }

    /**
     * Specifies whether to create standby instances for the DB shard group.
     */
    public readonly computeRedundancy!: pulumi.Output<number | undefined>;
    /**
     * The name of the primary DB cluster for the DB shard group.
     */
    public readonly dbClusterIdentifier!: pulumi.Output<string>;
    /**
     * The name of the DB shard group.
     */
    public readonly dbShardGroupIdentifier!: pulumi.Output<string | undefined>;
    /**
     * The Amazon Web Services Region-unique, immutable identifier for the DB shard group.
     */
    public /*out*/ readonly dbShardGroupResourceId!: pulumi.Output<string>;
    /**
     * The connection endpoint for the DB shard group.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    public readonly maxAcu!: pulumi.Output<number>;
    /**
     * The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    public readonly minAcu!: pulumi.Output<number | undefined>;
    /**
     * Indicates whether the DB shard group is publicly accessible.
     */
    public readonly publiclyAccessible!: pulumi.Output<boolean | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a DbShardGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbShardGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.dbClusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbClusterIdentifier'");
            }
            if ((!args || args.maxAcu === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxAcu'");
            }
            resourceInputs["computeRedundancy"] = args ? args.computeRedundancy : undefined;
            resourceInputs["dbClusterIdentifier"] = args ? args.dbClusterIdentifier : undefined;
            resourceInputs["dbShardGroupIdentifier"] = args ? args.dbShardGroupIdentifier : undefined;
            resourceInputs["maxAcu"] = args ? args.maxAcu : undefined;
            resourceInputs["minAcu"] = args ? args.minAcu : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["dbShardGroupResourceId"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
        } else {
            resourceInputs["computeRedundancy"] = undefined /*out*/;
            resourceInputs["dbClusterIdentifier"] = undefined /*out*/;
            resourceInputs["dbShardGroupIdentifier"] = undefined /*out*/;
            resourceInputs["dbShardGroupResourceId"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["maxAcu"] = undefined /*out*/;
            resourceInputs["minAcu"] = undefined /*out*/;
            resourceInputs["publiclyAccessible"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["dbClusterIdentifier", "dbShardGroupIdentifier", "publiclyAccessible"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DbShardGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DbShardGroup resource.
 */
export interface DbShardGroupArgs {
    /**
     * Specifies whether to create standby instances for the DB shard group.
     */
    computeRedundancy?: pulumi.Input<number>;
    /**
     * The name of the primary DB cluster for the DB shard group.
     */
    dbClusterIdentifier: pulumi.Input<string>;
    /**
     * The name of the DB shard group.
     */
    dbShardGroupIdentifier?: pulumi.Input<string>;
    /**
     * The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    maxAcu: pulumi.Input<number>;
    /**
     * The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
     */
    minAcu?: pulumi.Input<number>;
    /**
     * Indicates whether the DB shard group is publicly accessible.
     */
    publiclyAccessible?: pulumi.Input<boolean>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
