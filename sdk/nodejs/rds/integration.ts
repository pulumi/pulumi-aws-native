// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * A zero-ETL integration with Amazon Redshift.
 */
export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:rds:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * An optional set of non-secret key–value pairs that contains additional contextual information about the data. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the *Key Management Service Developer Guide*.
     *  You can only include this parameter if you specify the ``KMSKeyId`` parameter.
     */
    declare public readonly additionalEncryptionContext: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The time when the integration was created, in Universal Coordinated Time (UTC).
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Data filters for the integration. These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
     */
    declare public readonly dataFilter: pulumi.Output<string | undefined>;
    /**
     * A description of the integration.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ARN of the integration.
     */
    declare public /*out*/ readonly integrationArn: pulumi.Output<string>;
    /**
     * The name of the integration.
     */
    declare public readonly integrationName: pulumi.Output<string | undefined>;
    /**
     * The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, RDS uses a default AWS owned key.
     */
    declare public readonly kmsKeyId: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the database to use as the source for replication.
     */
    declare public readonly sourceArn: pulumi.Output<string>;
    /**
     * A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the *Amazon RDS User Guide.*.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The ARN of the Redshift data warehouse to use as the target for replication.
     */
    declare public readonly targetArn: pulumi.Output<string>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.sourceArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceArn'");
            }
            if (args?.targetArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetArn'");
            }
            resourceInputs["additionalEncryptionContext"] = args?.additionalEncryptionContext;
            resourceInputs["dataFilter"] = args?.dataFilter;
            resourceInputs["description"] = args?.description;
            resourceInputs["integrationName"] = args?.integrationName;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["sourceArn"] = args?.sourceArn;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["targetArn"] = args?.targetArn;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["integrationArn"] = undefined /*out*/;
        } else {
            resourceInputs["additionalEncryptionContext"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dataFilter"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["integrationArn"] = undefined /*out*/;
            resourceInputs["integrationName"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["sourceArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["targetArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["additionalEncryptionContext.*", "kmsKeyId", "sourceArn", "targetArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Integration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * An optional set of non-secret key–value pairs that contains additional contextual information about the data. For more information, see [Encryption context](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context) in the *Key Management Service Developer Guide*.
     *  You can only include this parameter if you specify the ``KMSKeyId`` parameter.
     */
    additionalEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Data filters for the integration. These filters determine which tables from the source database are sent to the target Amazon Redshift data warehouse.
     */
    dataFilter?: pulumi.Input<string>;
    /**
     * A description of the integration.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the integration.
     */
    integrationName?: pulumi.Input<string>;
    /**
     * The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the integration. If you don't specify an encryption key, RDS uses a default AWS owned key.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the database to use as the source for replication.
     */
    sourceArn: pulumi.Input<string>;
    /**
     * A list of tags. For more information, see [Tagging Amazon RDS Resources](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html) in the *Amazon RDS User Guide.*.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The ARN of the Redshift data warehouse to use as the target for replication.
     */
    targetArn: pulumi.Input<string>;
}
