// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DBClusterArgs } from "./dbcluster";
export type DBCluster = import("./dbcluster").DBCluster;
export const DBCluster: typeof import("./dbcluster").DBCluster = null as any;

export { DBClusterParameterGroupArgs } from "./dbclusterParameterGroup";
export type DBClusterParameterGroup = import("./dbclusterParameterGroup").DBClusterParameterGroup;
export const DBClusterParameterGroup: typeof import("./dbclusterParameterGroup").DBClusterParameterGroup = null as any;

export { DBInstanceArgs } from "./dbinstance";
export type DBInstance = import("./dbinstance").DBInstance;
export const DBInstance: typeof import("./dbinstance").DBInstance = null as any;

export { DBParameterGroupArgs } from "./dbparameterGroup";
export type DBParameterGroup = import("./dbparameterGroup").DBParameterGroup;
export const DBParameterGroup: typeof import("./dbparameterGroup").DBParameterGroup = null as any;

export { DBProxyArgs } from "./dbproxy";
export type DBProxy = import("./dbproxy").DBProxy;
export const DBProxy: typeof import("./dbproxy").DBProxy = null as any;

export { DBProxyEndpointArgs } from "./dbproxyEndpoint";
export type DBProxyEndpoint = import("./dbproxyEndpoint").DBProxyEndpoint;
export const DBProxyEndpoint: typeof import("./dbproxyEndpoint").DBProxyEndpoint = null as any;

export { DBProxyTargetGroupArgs } from "./dbproxyTargetGroup";
export type DBProxyTargetGroup = import("./dbproxyTargetGroup").DBProxyTargetGroup;
export const DBProxyTargetGroup: typeof import("./dbproxyTargetGroup").DBProxyTargetGroup = null as any;

export { DBSecurityGroupArgs } from "./dbsecurityGroup";
export type DBSecurityGroup = import("./dbsecurityGroup").DBSecurityGroup;
export const DBSecurityGroup: typeof import("./dbsecurityGroup").DBSecurityGroup = null as any;

export { DBSecurityGroupIngressArgs } from "./dbsecurityGroupIngress";
export type DBSecurityGroupIngress = import("./dbsecurityGroupIngress").DBSecurityGroupIngress;
export const DBSecurityGroupIngress: typeof import("./dbsecurityGroupIngress").DBSecurityGroupIngress = null as any;

export { DBSubnetGroupArgs } from "./dbsubnetGroup";
export type DBSubnetGroup = import("./dbsubnetGroup").DBSubnetGroup;
export const DBSubnetGroup: typeof import("./dbsubnetGroup").DBSubnetGroup = null as any;

export { EventSubscriptionArgs } from "./eventSubscription";
export type EventSubscription = import("./eventSubscription").EventSubscription;
export const EventSubscription: typeof import("./eventSubscription").EventSubscription = null as any;

export { GetDBClusterArgs, GetDBClusterResult, GetDBClusterOutputArgs } from "./getDBCluster";
export const getDBCluster: typeof import("./getDBCluster").getDBCluster = null as any;
export const getDBClusterOutput: typeof import("./getDBCluster").getDBClusterOutput = null as any;

export { GetDBClusterParameterGroupArgs, GetDBClusterParameterGroupResult, GetDBClusterParameterGroupOutputArgs } from "./getDBClusterParameterGroup";
export const getDBClusterParameterGroup: typeof import("./getDBClusterParameterGroup").getDBClusterParameterGroup = null as any;
export const getDBClusterParameterGroupOutput: typeof import("./getDBClusterParameterGroup").getDBClusterParameterGroupOutput = null as any;

export { GetDBInstanceArgs, GetDBInstanceResult, GetDBInstanceOutputArgs } from "./getDBInstance";
export const getDBInstance: typeof import("./getDBInstance").getDBInstance = null as any;
export const getDBInstanceOutput: typeof import("./getDBInstance").getDBInstanceOutput = null as any;

export { GetDBParameterGroupArgs, GetDBParameterGroupResult, GetDBParameterGroupOutputArgs } from "./getDBParameterGroup";
export const getDBParameterGroup: typeof import("./getDBParameterGroup").getDBParameterGroup = null as any;
export const getDBParameterGroupOutput: typeof import("./getDBParameterGroup").getDBParameterGroupOutput = null as any;

export { GetDBProxyArgs, GetDBProxyResult, GetDBProxyOutputArgs } from "./getDBProxy";
export const getDBProxy: typeof import("./getDBProxy").getDBProxy = null as any;
export const getDBProxyOutput: typeof import("./getDBProxy").getDBProxyOutput = null as any;

export { GetDBProxyEndpointArgs, GetDBProxyEndpointResult, GetDBProxyEndpointOutputArgs } from "./getDBProxyEndpoint";
export const getDBProxyEndpoint: typeof import("./getDBProxyEndpoint").getDBProxyEndpoint = null as any;
export const getDBProxyEndpointOutput: typeof import("./getDBProxyEndpoint").getDBProxyEndpointOutput = null as any;

export { GetDBProxyTargetGroupArgs, GetDBProxyTargetGroupResult, GetDBProxyTargetGroupOutputArgs } from "./getDBProxyTargetGroup";
export const getDBProxyTargetGroup: typeof import("./getDBProxyTargetGroup").getDBProxyTargetGroup = null as any;
export const getDBProxyTargetGroupOutput: typeof import("./getDBProxyTargetGroup").getDBProxyTargetGroupOutput = null as any;

export { GetDBSecurityGroupArgs, GetDBSecurityGroupResult, GetDBSecurityGroupOutputArgs } from "./getDBSecurityGroup";
export const getDBSecurityGroup: typeof import("./getDBSecurityGroup").getDBSecurityGroup = null as any;
export const getDBSecurityGroupOutput: typeof import("./getDBSecurityGroup").getDBSecurityGroupOutput = null as any;

export { GetDBSecurityGroupIngressArgs, GetDBSecurityGroupIngressResult, GetDBSecurityGroupIngressOutputArgs } from "./getDBSecurityGroupIngress";
export const getDBSecurityGroupIngress: typeof import("./getDBSecurityGroupIngress").getDBSecurityGroupIngress = null as any;
export const getDBSecurityGroupIngressOutput: typeof import("./getDBSecurityGroupIngress").getDBSecurityGroupIngressOutput = null as any;

export { GetDBSubnetGroupArgs, GetDBSubnetGroupResult, GetDBSubnetGroupOutputArgs } from "./getDBSubnetGroup";
export const getDBSubnetGroup: typeof import("./getDBSubnetGroup").getDBSubnetGroup = null as any;
export const getDBSubnetGroupOutput: typeof import("./getDBSubnetGroup").getDBSubnetGroupOutput = null as any;

export { GetEventSubscriptionArgs, GetEventSubscriptionResult, GetEventSubscriptionOutputArgs } from "./getEventSubscription";
export const getEventSubscription: typeof import("./getEventSubscription").getEventSubscription = null as any;
export const getEventSubscriptionOutput: typeof import("./getEventSubscription").getEventSubscriptionOutput = null as any;

export { GetGlobalClusterArgs, GetGlobalClusterResult, GetGlobalClusterOutputArgs } from "./getGlobalCluster";
export const getGlobalCluster: typeof import("./getGlobalCluster").getGlobalCluster = null as any;
export const getGlobalClusterOutput: typeof import("./getGlobalCluster").getGlobalClusterOutput = null as any;

export { GetOptionGroupArgs, GetOptionGroupResult, GetOptionGroupOutputArgs } from "./getOptionGroup";
export const getOptionGroup: typeof import("./getOptionGroup").getOptionGroup = null as any;
export const getOptionGroupOutput: typeof import("./getOptionGroup").getOptionGroupOutput = null as any;

export { GlobalClusterArgs } from "./globalCluster";
export type GlobalCluster = import("./globalCluster").GlobalCluster;
export const GlobalCluster: typeof import("./globalCluster").GlobalCluster = null as any;

export { OptionGroupArgs } from "./optionGroup";
export type OptionGroup = import("./optionGroup").OptionGroup;
export const OptionGroup: typeof import("./optionGroup").OptionGroup = null as any;

utilities.lazyLoad(exports, ["DBCluster"], () => require("./dbcluster"));
utilities.lazyLoad(exports, ["DBClusterParameterGroup"], () => require("./dbclusterParameterGroup"));
utilities.lazyLoad(exports, ["DBInstance"], () => require("./dbinstance"));
utilities.lazyLoad(exports, ["DBParameterGroup"], () => require("./dbparameterGroup"));
utilities.lazyLoad(exports, ["DBProxy"], () => require("./dbproxy"));
utilities.lazyLoad(exports, ["DBProxyEndpoint"], () => require("./dbproxyEndpoint"));
utilities.lazyLoad(exports, ["DBProxyTargetGroup"], () => require("./dbproxyTargetGroup"));
utilities.lazyLoad(exports, ["DBSecurityGroup"], () => require("./dbsecurityGroup"));
utilities.lazyLoad(exports, ["DBSecurityGroupIngress"], () => require("./dbsecurityGroupIngress"));
utilities.lazyLoad(exports, ["DBSubnetGroup"], () => require("./dbsubnetGroup"));
utilities.lazyLoad(exports, ["EventSubscription"], () => require("./eventSubscription"));
utilities.lazyLoad(exports, ["getDBCluster","getDBClusterOutput"], () => require("./getDBCluster"));
utilities.lazyLoad(exports, ["getDBClusterParameterGroup","getDBClusterParameterGroupOutput"], () => require("./getDBClusterParameterGroup"));
utilities.lazyLoad(exports, ["getDBInstance","getDBInstanceOutput"], () => require("./getDBInstance"));
utilities.lazyLoad(exports, ["getDBParameterGroup","getDBParameterGroupOutput"], () => require("./getDBParameterGroup"));
utilities.lazyLoad(exports, ["getDBProxy","getDBProxyOutput"], () => require("./getDBProxy"));
utilities.lazyLoad(exports, ["getDBProxyEndpoint","getDBProxyEndpointOutput"], () => require("./getDBProxyEndpoint"));
utilities.lazyLoad(exports, ["getDBProxyTargetGroup","getDBProxyTargetGroupOutput"], () => require("./getDBProxyTargetGroup"));
utilities.lazyLoad(exports, ["getDBSecurityGroup","getDBSecurityGroupOutput"], () => require("./getDBSecurityGroup"));
utilities.lazyLoad(exports, ["getDBSecurityGroupIngress","getDBSecurityGroupIngressOutput"], () => require("./getDBSecurityGroupIngress"));
utilities.lazyLoad(exports, ["getDBSubnetGroup","getDBSubnetGroupOutput"], () => require("./getDBSubnetGroup"));
utilities.lazyLoad(exports, ["getEventSubscription","getEventSubscriptionOutput"], () => require("./getEventSubscription"));
utilities.lazyLoad(exports, ["getGlobalCluster","getGlobalClusterOutput"], () => require("./getGlobalCluster"));
utilities.lazyLoad(exports, ["getOptionGroup","getOptionGroupOutput"], () => require("./getOptionGroup"));
utilities.lazyLoad(exports, ["GlobalCluster"], () => require("./globalCluster"));
utilities.lazyLoad(exports, ["OptionGroup"], () => require("./optionGroup"));

// Export enums:
export * from "../types/enums/rds";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:rds:DBCluster":
                return new DBCluster(name, <any>undefined, { urn })
            case "aws-native:rds:DBClusterParameterGroup":
                return new DBClusterParameterGroup(name, <any>undefined, { urn })
            case "aws-native:rds:DBInstance":
                return new DBInstance(name, <any>undefined, { urn })
            case "aws-native:rds:DBParameterGroup":
                return new DBParameterGroup(name, <any>undefined, { urn })
            case "aws-native:rds:DBProxy":
                return new DBProxy(name, <any>undefined, { urn })
            case "aws-native:rds:DBProxyEndpoint":
                return new DBProxyEndpoint(name, <any>undefined, { urn })
            case "aws-native:rds:DBProxyTargetGroup":
                return new DBProxyTargetGroup(name, <any>undefined, { urn })
            case "aws-native:rds:DBSecurityGroup":
                return new DBSecurityGroup(name, <any>undefined, { urn })
            case "aws-native:rds:DBSecurityGroupIngress":
                return new DBSecurityGroupIngress(name, <any>undefined, { urn })
            case "aws-native:rds:DBSubnetGroup":
                return new DBSubnetGroup(name, <any>undefined, { urn })
            case "aws-native:rds:EventSubscription":
                return new EventSubscription(name, <any>undefined, { urn })
            case "aws-native:rds:GlobalCluster":
                return new GlobalCluster(name, <any>undefined, { urn })
            case "aws-native:rds:OptionGroup":
                return new OptionGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "rds", _module)
