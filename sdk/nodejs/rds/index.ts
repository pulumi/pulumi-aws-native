// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CustomDbEngineVersionArgs } from "./customDbEngineVersion";
export type CustomDbEngineVersion = import("./customDbEngineVersion").CustomDbEngineVersion;
export const CustomDbEngineVersion: typeof import("./customDbEngineVersion").CustomDbEngineVersion = null as any;
utilities.lazyLoad(exports, ["CustomDbEngineVersion"], () => require("./customDbEngineVersion"));

export { DbClusterArgs } from "./dbCluster";
export type DbCluster = import("./dbCluster").DbCluster;
export const DbCluster: typeof import("./dbCluster").DbCluster = null as any;
utilities.lazyLoad(exports, ["DbCluster"], () => require("./dbCluster"));

export { DbClusterParameterGroupArgs } from "./dbClusterParameterGroup";
export type DbClusterParameterGroup = import("./dbClusterParameterGroup").DbClusterParameterGroup;
export const DbClusterParameterGroup: typeof import("./dbClusterParameterGroup").DbClusterParameterGroup = null as any;
utilities.lazyLoad(exports, ["DbClusterParameterGroup"], () => require("./dbClusterParameterGroup"));

export { DbInstanceArgs } from "./dbInstance";
export type DbInstance = import("./dbInstance").DbInstance;
export const DbInstance: typeof import("./dbInstance").DbInstance = null as any;
utilities.lazyLoad(exports, ["DbInstance"], () => require("./dbInstance"));

export { DbParameterGroupArgs } from "./dbParameterGroup";
export type DbParameterGroup = import("./dbParameterGroup").DbParameterGroup;
export const DbParameterGroup: typeof import("./dbParameterGroup").DbParameterGroup = null as any;
utilities.lazyLoad(exports, ["DbParameterGroup"], () => require("./dbParameterGroup"));

export { DbProxyArgs } from "./dbProxy";
export type DbProxy = import("./dbProxy").DbProxy;
export const DbProxy: typeof import("./dbProxy").DbProxy = null as any;
utilities.lazyLoad(exports, ["DbProxy"], () => require("./dbProxy"));

export { DbProxyEndpointArgs } from "./dbProxyEndpoint";
export type DbProxyEndpoint = import("./dbProxyEndpoint").DbProxyEndpoint;
export const DbProxyEndpoint: typeof import("./dbProxyEndpoint").DbProxyEndpoint = null as any;
utilities.lazyLoad(exports, ["DbProxyEndpoint"], () => require("./dbProxyEndpoint"));

export { DbProxyTargetGroupArgs } from "./dbProxyTargetGroup";
export type DbProxyTargetGroup = import("./dbProxyTargetGroup").DbProxyTargetGroup;
export const DbProxyTargetGroup: typeof import("./dbProxyTargetGroup").DbProxyTargetGroup = null as any;
utilities.lazyLoad(exports, ["DbProxyTargetGroup"], () => require("./dbProxyTargetGroup"));

export { DbSecurityGroupArgs } from "./dbSecurityGroup";
export type DbSecurityGroup = import("./dbSecurityGroup").DbSecurityGroup;
export const DbSecurityGroup: typeof import("./dbSecurityGroup").DbSecurityGroup = null as any;
utilities.lazyLoad(exports, ["DbSecurityGroup"], () => require("./dbSecurityGroup"));

export { DbSecurityGroupIngressArgs } from "./dbSecurityGroupIngress";
export type DbSecurityGroupIngress = import("./dbSecurityGroupIngress").DbSecurityGroupIngress;
export const DbSecurityGroupIngress: typeof import("./dbSecurityGroupIngress").DbSecurityGroupIngress = null as any;
utilities.lazyLoad(exports, ["DbSecurityGroupIngress"], () => require("./dbSecurityGroupIngress"));

export { DbSubnetGroupArgs } from "./dbSubnetGroup";
export type DbSubnetGroup = import("./dbSubnetGroup").DbSubnetGroup;
export const DbSubnetGroup: typeof import("./dbSubnetGroup").DbSubnetGroup = null as any;
utilities.lazyLoad(exports, ["DbSubnetGroup"], () => require("./dbSubnetGroup"));

export { EventSubscriptionArgs } from "./eventSubscription";
export type EventSubscription = import("./eventSubscription").EventSubscription;
export const EventSubscription: typeof import("./eventSubscription").EventSubscription = null as any;
utilities.lazyLoad(exports, ["EventSubscription"], () => require("./eventSubscription"));

export { GetCustomDbEngineVersionArgs, GetCustomDbEngineVersionResult, GetCustomDbEngineVersionOutputArgs } from "./getCustomDbEngineVersion";
export const getCustomDbEngineVersion: typeof import("./getCustomDbEngineVersion").getCustomDbEngineVersion = null as any;
export const getCustomDbEngineVersionOutput: typeof import("./getCustomDbEngineVersion").getCustomDbEngineVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCustomDbEngineVersion","getCustomDbEngineVersionOutput"], () => require("./getCustomDbEngineVersion"));

export { GetDbClusterArgs, GetDbClusterResult, GetDbClusterOutputArgs } from "./getDbCluster";
export const getDbCluster: typeof import("./getDbCluster").getDbCluster = null as any;
export const getDbClusterOutput: typeof import("./getDbCluster").getDbClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDbCluster","getDbClusterOutput"], () => require("./getDbCluster"));

export { GetDbClusterParameterGroupArgs, GetDbClusterParameterGroupResult, GetDbClusterParameterGroupOutputArgs } from "./getDbClusterParameterGroup";
export const getDbClusterParameterGroup: typeof import("./getDbClusterParameterGroup").getDbClusterParameterGroup = null as any;
export const getDbClusterParameterGroupOutput: typeof import("./getDbClusterParameterGroup").getDbClusterParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDbClusterParameterGroup","getDbClusterParameterGroupOutput"], () => require("./getDbClusterParameterGroup"));

export { GetDbInstanceArgs, GetDbInstanceResult, GetDbInstanceOutputArgs } from "./getDbInstance";
export const getDbInstance: typeof import("./getDbInstance").getDbInstance = null as any;
export const getDbInstanceOutput: typeof import("./getDbInstance").getDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstance","getDbInstanceOutput"], () => require("./getDbInstance"));

export { GetDbParameterGroupArgs, GetDbParameterGroupResult, GetDbParameterGroupOutputArgs } from "./getDbParameterGroup";
export const getDbParameterGroup: typeof import("./getDbParameterGroup").getDbParameterGroup = null as any;
export const getDbParameterGroupOutput: typeof import("./getDbParameterGroup").getDbParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDbParameterGroup","getDbParameterGroupOutput"], () => require("./getDbParameterGroup"));

export { GetDbProxyArgs, GetDbProxyResult, GetDbProxyOutputArgs } from "./getDbProxy";
export const getDbProxy: typeof import("./getDbProxy").getDbProxy = null as any;
export const getDbProxyOutput: typeof import("./getDbProxy").getDbProxyOutput = null as any;
utilities.lazyLoad(exports, ["getDbProxy","getDbProxyOutput"], () => require("./getDbProxy"));

export { GetDbProxyEndpointArgs, GetDbProxyEndpointResult, GetDbProxyEndpointOutputArgs } from "./getDbProxyEndpoint";
export const getDbProxyEndpoint: typeof import("./getDbProxyEndpoint").getDbProxyEndpoint = null as any;
export const getDbProxyEndpointOutput: typeof import("./getDbProxyEndpoint").getDbProxyEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDbProxyEndpoint","getDbProxyEndpointOutput"], () => require("./getDbProxyEndpoint"));

export { GetDbProxyTargetGroupArgs, GetDbProxyTargetGroupResult, GetDbProxyTargetGroupOutputArgs } from "./getDbProxyTargetGroup";
export const getDbProxyTargetGroup: typeof import("./getDbProxyTargetGroup").getDbProxyTargetGroup = null as any;
export const getDbProxyTargetGroupOutput: typeof import("./getDbProxyTargetGroup").getDbProxyTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDbProxyTargetGroup","getDbProxyTargetGroupOutput"], () => require("./getDbProxyTargetGroup"));

export { GetDbSecurityGroupArgs, GetDbSecurityGroupResult, GetDbSecurityGroupOutputArgs } from "./getDbSecurityGroup";
export const getDbSecurityGroup: typeof import("./getDbSecurityGroup").getDbSecurityGroup = null as any;
export const getDbSecurityGroupOutput: typeof import("./getDbSecurityGroup").getDbSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDbSecurityGroup","getDbSecurityGroupOutput"], () => require("./getDbSecurityGroup"));

export { GetDbSecurityGroupIngressArgs, GetDbSecurityGroupIngressResult, GetDbSecurityGroupIngressOutputArgs } from "./getDbSecurityGroupIngress";
export const getDbSecurityGroupIngress: typeof import("./getDbSecurityGroupIngress").getDbSecurityGroupIngress = null as any;
export const getDbSecurityGroupIngressOutput: typeof import("./getDbSecurityGroupIngress").getDbSecurityGroupIngressOutput = null as any;
utilities.lazyLoad(exports, ["getDbSecurityGroupIngress","getDbSecurityGroupIngressOutput"], () => require("./getDbSecurityGroupIngress"));

export { GetDbSubnetGroupArgs, GetDbSubnetGroupResult, GetDbSubnetGroupOutputArgs } from "./getDbSubnetGroup";
export const getDbSubnetGroup: typeof import("./getDbSubnetGroup").getDbSubnetGroup = null as any;
export const getDbSubnetGroupOutput: typeof import("./getDbSubnetGroup").getDbSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDbSubnetGroup","getDbSubnetGroupOutput"], () => require("./getDbSubnetGroup"));

export { GetEventSubscriptionArgs, GetEventSubscriptionResult, GetEventSubscriptionOutputArgs } from "./getEventSubscription";
export const getEventSubscription: typeof import("./getEventSubscription").getEventSubscription = null as any;
export const getEventSubscriptionOutput: typeof import("./getEventSubscription").getEventSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getEventSubscription","getEventSubscriptionOutput"], () => require("./getEventSubscription"));

export { GetGlobalClusterArgs, GetGlobalClusterResult, GetGlobalClusterOutputArgs } from "./getGlobalCluster";
export const getGlobalCluster: typeof import("./getGlobalCluster").getGlobalCluster = null as any;
export const getGlobalClusterOutput: typeof import("./getGlobalCluster").getGlobalClusterOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalCluster","getGlobalClusterOutput"], () => require("./getGlobalCluster"));

export { GetOptionGroupArgs, GetOptionGroupResult, GetOptionGroupOutputArgs } from "./getOptionGroup";
export const getOptionGroup: typeof import("./getOptionGroup").getOptionGroup = null as any;
export const getOptionGroupOutput: typeof import("./getOptionGroup").getOptionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getOptionGroup","getOptionGroupOutput"], () => require("./getOptionGroup"));

export { GlobalClusterArgs } from "./globalCluster";
export type GlobalCluster = import("./globalCluster").GlobalCluster;
export const GlobalCluster: typeof import("./globalCluster").GlobalCluster = null as any;
utilities.lazyLoad(exports, ["GlobalCluster"], () => require("./globalCluster"));

export { OptionGroupArgs } from "./optionGroup";
export type OptionGroup = import("./optionGroup").OptionGroup;
export const OptionGroup: typeof import("./optionGroup").OptionGroup = null as any;
utilities.lazyLoad(exports, ["OptionGroup"], () => require("./optionGroup"));


// Export enums:
export * from "../types/enums/rds";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:rds:CustomDbEngineVersion":
                return new CustomDbEngineVersion(name, <any>undefined, { urn })
            case "aws-native:rds:DbCluster":
                return new DbCluster(name, <any>undefined, { urn })
            case "aws-native:rds:DbClusterParameterGroup":
                return new DbClusterParameterGroup(name, <any>undefined, { urn })
            case "aws-native:rds:DbInstance":
                return new DbInstance(name, <any>undefined, { urn })
            case "aws-native:rds:DbParameterGroup":
                return new DbParameterGroup(name, <any>undefined, { urn })
            case "aws-native:rds:DbProxy":
                return new DbProxy(name, <any>undefined, { urn })
            case "aws-native:rds:DbProxyEndpoint":
                return new DbProxyEndpoint(name, <any>undefined, { urn })
            case "aws-native:rds:DbProxyTargetGroup":
                return new DbProxyTargetGroup(name, <any>undefined, { urn })
            case "aws-native:rds:DbSecurityGroup":
                return new DbSecurityGroup(name, <any>undefined, { urn })
            case "aws-native:rds:DbSecurityGroupIngress":
                return new DbSecurityGroupIngress(name, <any>undefined, { urn })
            case "aws-native:rds:DbSubnetGroup":
                return new DbSubnetGroup(name, <any>undefined, { urn })
            case "aws-native:rds:EventSubscription":
                return new EventSubscription(name, <any>undefined, { urn })
            case "aws-native:rds:GlobalCluster":
                return new GlobalCluster(name, <any>undefined, { urn })
            case "aws-native:rds:OptionGroup":
                return new OptionGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "rds", _module)
