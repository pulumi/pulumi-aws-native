// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::RUM::AppMonitor
 */
export function getAppMonitor(args: GetAppMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetAppMonitorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:rum:getAppMonitor", {
        "name": args.name,
    }, opts);
}

export interface GetAppMonitorArgs {
    /**
     * A name for the app monitor
     */
    name: string;
}

export interface GetAppMonitorResult {
    /**
     * This structure contains much of the configuration data for the app monitor.
     */
    readonly appMonitorConfiguration?: outputs.rum.AppMonitorConfiguration;
    /**
     * This structure specifies whether this app monitor allows the web client to define and send custom events.
     */
    readonly customEvents?: outputs.rum.AppMonitorCustomEvents;
    /**
     * Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
     */
    readonly cwLogEnabled?: boolean;
    /**
     * The top-level internet domain name for which your application has administrative authority.
     */
    readonly domain?: string;
    /**
     * The unique ID of the new app monitor.
     */
    readonly id?: string;
    /**
     * Assigns one or more tags (key-value pairs) to the app monitor.
     *
     * Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
     *
     * Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
     *
     * You can associate as many as 50 tags with an app monitor.
     *
     * For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
     */
    readonly tags?: outputs.Tag[];
}
/**
 * Resource Type definition for AWS::RUM::AppMonitor
 */
export function getAppMonitorOutput(args: GetAppMonitorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppMonitorResult> {
    return pulumi.output(args).apply((a: any) => getAppMonitor(a, opts))
}

export interface GetAppMonitorOutputArgs {
    /**
     * A name for the app monitor
     */
    name: pulumi.Input<string>;
}
