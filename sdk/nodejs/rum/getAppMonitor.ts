// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::RUM::AppMonitor
 */
export function getAppMonitor(args: GetAppMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetAppMonitorResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:rum:getAppMonitor", {
        "name": args.name,
    }, opts);
}

export interface GetAppMonitorArgs {
    /**
     * A name for the app monitor
     */
    name: string;
}

export interface GetAppMonitorResult {
    /**
     * A structure that contains much of the configuration data for the app monitor. If you are using Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the Amazon Cognito identity pool to use for authorization. If you don't include `AppMonitorConfiguration` , you must set up your own authorization method. For more information, see [Authorize your application to send data to AWS](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-get-started-authorization.html) .
     *
     * If you omit this argument, the sample rate used for CloudWatch RUM is set to 10% of the user sessions.
     */
    readonly appMonitorConfiguration?: outputs.rum.AppMonitorConfiguration;
    /**
     * Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are `DISABLED` .
     */
    readonly customEvents?: outputs.rum.AppMonitorCustomEvents;
    /**
     * Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to CWLlong in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur CWLlong charges. If you omit this parameter, the default is false
     */
    readonly cwLogEnabled?: boolean;
    readonly deobfuscationConfiguration?: outputs.rum.AppMonitorDeobfuscationConfiguration;
    /**
     * The top-level internet domain name for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
     */
    readonly domain?: string;
    /**
     * The top-level internet domain names for which your application has administrative authority. The CreateAppMonitor requires either the domain or the domain list.
     */
    readonly domainList?: any[];
    /**
     * The unique ID of the new app monitor.
     */
    readonly id?: string;
    /**
     * Use this structure to assign a resource-based policy to a CloudWatch RUM app monitor to control access to it. Each app monitor can have one resource-based policy. The maximum size of the policy is 4 KB. To learn more about using resource policies with RUM, see [Using resource-based policies with CloudWatch RUM](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-resource-policies.html) .
     */
    readonly resourcePolicy?: outputs.rum.AppMonitorResourcePolicy;
    /**
     * Assigns one or more tags (key-value pairs) to the app monitor.
     *
     * Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.
     *
     * Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.
     *
     * You can associate as many as 50 tags with an app monitor.
     *
     * For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) .
     */
    readonly tags?: outputs.Tag[];
}
/**
 * Resource Type definition for AWS::RUM::AppMonitor
 */
export function getAppMonitorOutput(args: GetAppMonitorOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAppMonitorResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:rum:getAppMonitor", {
        "name": args.name,
    }, opts);
}

export interface GetAppMonitorOutputArgs {
    /**
     * A name for the app monitor
     */
    name: pulumi.Input<string>;
}
