// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::SSMQuickSetup::LifecycleAutomation that executes SSM Automation documents in response to CloudFormation lifecycle events.
 */
export class LifecycleAutomation extends pulumi.CustomResource {
    /**
     * Get an existing LifecycleAutomation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LifecycleAutomation {
        return new LifecycleAutomation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ssmquicksetup:LifecycleAutomation';

    /**
     * Returns true if the given object is an instance of LifecycleAutomation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LifecycleAutomation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LifecycleAutomation.__pulumiType;
    }

    /**
     * The id from the association that is returned when creating the association
     */
    declare public /*out*/ readonly associationId: pulumi.Output<string>;
    /**
     * The name of the Automation document to execute
     */
    declare public readonly automationDocument: pulumi.Output<string>;
    declare public readonly automationParameters: pulumi.Output<{[key: string]: any}>;
    /**
     * A unique identifier used for generating a unique logical ID for the custom resource
     */
    declare public readonly resourceKey: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a LifecycleAutomation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LifecycleAutomationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.automationDocument === undefined && !opts.urn) {
                throw new Error("Missing required property 'automationDocument'");
            }
            if (args?.automationParameters === undefined && !opts.urn) {
                throw new Error("Missing required property 'automationParameters'");
            }
            if (args?.resourceKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceKey'");
            }
            resourceInputs["automationDocument"] = args?.automationDocument;
            resourceInputs["automationParameters"] = args?.automationParameters;
            resourceInputs["resourceKey"] = args?.resourceKey;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["associationId"] = undefined /*out*/;
        } else {
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["automationDocument"] = undefined /*out*/;
            resourceInputs["automationParameters"] = undefined /*out*/;
            resourceInputs["resourceKey"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["resourceKey"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(LifecycleAutomation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LifecycleAutomation resource.
 */
export interface LifecycleAutomationArgs {
    /**
     * The name of the Automation document to execute
     */
    automationDocument: pulumi.Input<string>;
    automationParameters: pulumi.Input<{[key: string]: any}>;
    /**
     * A unique identifier used for generating a unique logical ID for the custom resource
     */
    resourceKey: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
