// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::SSMQuickSetup::ConfigurationManager Resource Type
 */
export class ConfigurationManager extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ConfigurationManager {
        return new ConfigurationManager(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ssmquicksetup:ConfigurationManager';

    /**
     * Returns true if the given object is an instance of ConfigurationManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationManager.__pulumiType;
    }

    /**
     * The definition of the Quick Setup configuration that the configuration manager deploys.
     */
    public readonly configurationDefinitions!: pulumi.Output<outputs.ssmquicksetup.ConfigurationManagerConfigurationDefinition[]>;
    /**
     * The datetime stamp when the configuration manager was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the configuration.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The datetime stamp when the configuration manager was last updated.
     */
    public /*out*/ readonly lastModifiedAt!: pulumi.Output<string>;
    /**
     * The ARN of the Quick Setup configuration.
     */
    public /*out*/ readonly managerArn!: pulumi.Output<string>;
    /**
     * The name of the configuration
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Summaries of the state of the configuration manager. These summaries include an aggregate of the statuses from the configuration definition associated with the configuration manager. This includes deployment statuses, association statuses, drift statuses, health checks, and more.
     */
    public /*out*/ readonly statusSummaries!: pulumi.Output<outputs.ssmquicksetup.ConfigurationManagerStatusSummary[]>;
    /**
     * Key-value pairs of metadata to assign to the configuration manager.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ConfigurationManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationManagerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.configurationDefinitions === undefined && !opts.urn) {
                throw new Error("Missing required property 'configurationDefinitions'");
            }
            resourceInputs["configurationDefinitions"] = args?.configurationDefinitions;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastModifiedAt"] = undefined /*out*/;
            resourceInputs["managerArn"] = undefined /*out*/;
            resourceInputs["statusSummaries"] = undefined /*out*/;
        } else {
            resourceInputs["configurationDefinitions"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["lastModifiedAt"] = undefined /*out*/;
            resourceInputs["managerArn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["statusSummaries"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["configurationDefinitions[*].type", "configurationDefinitions[*].typeVersion"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ConfigurationManager.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ConfigurationManager resource.
 */
export interface ConfigurationManagerArgs {
    /**
     * The definition of the Quick Setup configuration that the configuration manager deploys.
     */
    configurationDefinitions: pulumi.Input<pulumi.Input<inputs.ssmquicksetup.ConfigurationManagerConfigurationDefinitionArgs>[]>;
    /**
     * The description of the configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the configuration
     */
    name?: pulumi.Input<string>;
    /**
     * Key-value pairs of metadata to assign to the configuration manager.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
