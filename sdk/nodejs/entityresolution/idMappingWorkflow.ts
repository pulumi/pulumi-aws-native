// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * IdMappingWorkflow defined in AWS Entity Resolution service
 */
export class IdMappingWorkflow extends pulumi.CustomResource {
    /**
     * Get an existing IdMappingWorkflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IdMappingWorkflow {
        return new IdMappingWorkflow(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:entityresolution:IdMappingWorkflow';

    /**
     * Returns true if the given object is an instance of IdMappingWorkflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdMappingWorkflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdMappingWorkflow.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the IdMappingWorkflow
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly idMappingTechniques!: pulumi.Output<outputs.entityresolution.IdMappingWorkflowIdMappingTechniques>;
    public readonly inputSourceConfig!: pulumi.Output<outputs.entityresolution.IdMappingWorkflowInputSource[]>;
    public readonly outputSourceConfig!: pulumi.Output<outputs.entityresolution.IdMappingWorkflowOutputSource[]>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public /*out*/ readonly workflowArn!: pulumi.Output<string>;
    /**
     * The name of the IdMappingWorkflow
     */
    public readonly workflowName!: pulumi.Output<string>;

    /**
     * Create a IdMappingWorkflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdMappingWorkflowArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.idMappingTechniques === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idMappingTechniques'");
            }
            if ((!args || args.inputSourceConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputSourceConfig'");
            }
            if ((!args || args.outputSourceConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputSourceConfig'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.workflowName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workflowName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["idMappingTechniques"] = args ? args.idMappingTechniques : undefined;
            resourceInputs["inputSourceConfig"] = args ? args.inputSourceConfig : undefined;
            resourceInputs["outputSourceConfig"] = args ? args.outputSourceConfig : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workflowName"] = args ? args.workflowName : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["workflowArn"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["idMappingTechniques"] = undefined /*out*/;
            resourceInputs["inputSourceConfig"] = undefined /*out*/;
            resourceInputs["outputSourceConfig"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["workflowArn"] = undefined /*out*/;
            resourceInputs["workflowName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["workflowName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(IdMappingWorkflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a IdMappingWorkflow resource.
 */
export interface IdMappingWorkflowArgs {
    /**
     * The description of the IdMappingWorkflow
     */
    description?: pulumi.Input<string>;
    idMappingTechniques: pulumi.Input<inputs.entityresolution.IdMappingWorkflowIdMappingTechniquesArgs>;
    inputSourceConfig: pulumi.Input<pulumi.Input<inputs.entityresolution.IdMappingWorkflowInputSourceArgs>[]>;
    outputSourceConfig: pulumi.Input<pulumi.Input<inputs.entityresolution.IdMappingWorkflowOutputSourceArgs>[]>;
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The name of the IdMappingWorkflow
     */
    workflowName: pulumi.Input<string>;
}
