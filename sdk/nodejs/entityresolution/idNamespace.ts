// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * IdNamespace defined in AWS Entity Resolution service
 */
export class IdNamespace extends pulumi.CustomResource {
    /**
     * Get an existing IdNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IdNamespace {
        return new IdNamespace(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:entityresolution:IdNamespace';

    /**
     * Returns true if the given object is an instance of IdNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdNamespace.__pulumiType;
    }

    /**
     * The date and time when the IdNamespace was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the ID namespace.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Determines the properties of `IdMappingWorflow` where this `IdNamespace` can be used as a `Source` or a `Target` .
     */
    public readonly idMappingWorkflowProperties!: pulumi.Output<outputs.entityresolution.IdNamespaceIdMappingWorkflowProperties[] | undefined>;
    /**
     * The arn associated with the IdNamespace
     */
    public /*out*/ readonly idNamespaceArn!: pulumi.Output<string>;
    /**
     * The name of the ID namespace.
     */
    public readonly idNamespaceName!: pulumi.Output<string>;
    /**
     * A list of `InputSource` objects, which have the fields `InputSourceARN` and `SchemaName` .
     */
    public readonly inputSourceConfig!: pulumi.Output<outputs.entityresolution.IdNamespaceInputSource[] | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access the resources defined in this `IdNamespace` on your behalf as part of the workflow run.
     */
    public readonly roleArn!: pulumi.Output<string | undefined>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
     *
     * The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
     *
     * The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
     */
    public readonly type!: pulumi.Output<enums.entityresolution.IdNamespaceType>;
    /**
     * The date and time when the IdNamespace was updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a IdNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdNamespaceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["idMappingWorkflowProperties"] = args?.idMappingWorkflowProperties;
            resourceInputs["idNamespaceName"] = args?.idNamespaceName;
            resourceInputs["inputSourceConfig"] = args?.inputSourceConfig;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["idNamespaceArn"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["idMappingWorkflowProperties"] = undefined /*out*/;
            resourceInputs["idNamespaceArn"] = undefined /*out*/;
            resourceInputs["idNamespaceName"] = undefined /*out*/;
            resourceInputs["inputSourceConfig"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["idNamespaceName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(IdNamespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a IdNamespace resource.
 */
export interface IdNamespaceArgs {
    /**
     * The description of the ID namespace.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines the properties of `IdMappingWorflow` where this `IdNamespace` can be used as a `Source` or a `Target` .
     */
    idMappingWorkflowProperties?: pulumi.Input<pulumi.Input<inputs.entityresolution.IdNamespaceIdMappingWorkflowPropertiesArgs>[]>;
    /**
     * The name of the ID namespace.
     */
    idNamespaceName?: pulumi.Input<string>;
    /**
     * A list of `InputSource` objects, which have the fields `InputSourceARN` and `SchemaName` .
     */
    inputSourceConfig?: pulumi.Input<pulumi.Input<inputs.entityresolution.IdNamespaceInputSourceArgs>[]>;
    /**
     * The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access the resources defined in this `IdNamespace` on your behalf as part of the workflow run.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The tags used to organize, track, or control access for this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
     *
     * The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
     *
     * The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
     */
    type: pulumi.Input<enums.entityresolution.IdNamespaceType>;
}
