// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::Chatbot::SlackChannelConfiguration.
 */
export class SlackChannelConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SlackChannelConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SlackChannelConfiguration {
        return new SlackChannelConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:chatbot:SlackChannelConfiguration';

    /**
     * Returns true if the given object is an instance of SlackChannelConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlackChannelConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlackChannelConfiguration.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the configuration
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The name of the configuration
     */
    public readonly configurationName!: pulumi.Output<string>;
    /**
     * ARNs of Custom Actions to associate with notifications in the provided chat channel.
     */
    public readonly customizationResourceArns!: pulumi.Output<string[] | undefined>;
    /**
     * The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is applied as a default if this is not set.
     */
    public readonly guardrailPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * The ARN of the IAM role that defines the permissions for AWS Chatbot
     */
    public readonly iamRoleArn!: pulumi.Output<string>;
    /**
     * Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs
     */
    public readonly loggingLevel!: pulumi.Output<string | undefined>;
    /**
     * The id of the Slack channel
     */
    public readonly slackChannelId!: pulumi.Output<string>;
    /**
     * The id of the Slack workspace
     */
    public readonly slackWorkspaceId!: pulumi.Output<string>;
    /**
     * ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
     */
    public readonly snsTopicArns!: pulumi.Output<string[] | undefined>;
    /**
     * The tags to add to the configuration
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Enables use of a user role requirement in your chat configuration
     */
    public readonly userRoleRequired!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SlackChannelConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlackChannelConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.iamRoleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'iamRoleArn'");
            }
            if (args?.slackChannelId === undefined && !opts.urn) {
                throw new Error("Missing required property 'slackChannelId'");
            }
            if (args?.slackWorkspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'slackWorkspaceId'");
            }
            resourceInputs["configurationName"] = args?.configurationName;
            resourceInputs["customizationResourceArns"] = args?.customizationResourceArns;
            resourceInputs["guardrailPolicies"] = args?.guardrailPolicies;
            resourceInputs["iamRoleArn"] = args?.iamRoleArn;
            resourceInputs["loggingLevel"] = args?.loggingLevel;
            resourceInputs["slackChannelId"] = args?.slackChannelId;
            resourceInputs["slackWorkspaceId"] = args?.slackWorkspaceId;
            resourceInputs["snsTopicArns"] = args?.snsTopicArns;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userRoleRequired"] = args?.userRoleRequired;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["configurationName"] = undefined /*out*/;
            resourceInputs["customizationResourceArns"] = undefined /*out*/;
            resourceInputs["guardrailPolicies"] = undefined /*out*/;
            resourceInputs["iamRoleArn"] = undefined /*out*/;
            resourceInputs["loggingLevel"] = undefined /*out*/;
            resourceInputs["slackChannelId"] = undefined /*out*/;
            resourceInputs["slackWorkspaceId"] = undefined /*out*/;
            resourceInputs["snsTopicArns"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["userRoleRequired"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["configurationName", "slackWorkspaceId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SlackChannelConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SlackChannelConfiguration resource.
 */
export interface SlackChannelConfigurationArgs {
    /**
     * The name of the configuration
     */
    configurationName?: pulumi.Input<string>;
    /**
     * ARNs of Custom Actions to associate with notifications in the provided chat channel.
     */
    customizationResourceArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed 'AdministratorAccess' policy is applied as a default if this is not set.
     */
    guardrailPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ARN of the IAM role that defines the permissions for AWS Chatbot
     */
    iamRoleArn: pulumi.Input<string>;
    /**
     * Specifies the logging level for this configuration:ERROR,INFO or NONE. This property affects the log entries pushed to Amazon CloudWatch logs
     */
    loggingLevel?: pulumi.Input<string>;
    /**
     * The id of the Slack channel
     */
    slackChannelId: pulumi.Input<string>;
    /**
     * The id of the Slack workspace
     */
    slackWorkspaceId: pulumi.Input<string>;
    /**
     * ARNs of SNS topics which delivers notifications to AWS Chatbot, for example CloudWatch alarm notifications.
     */
    snsTopicArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tags to add to the configuration
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * Enables use of a user role requirement in your chat configuration
     */
    userRoleRequired?: pulumi.Input<boolean>;
}
