// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
 */
export function getMonitoringSubscription(args: GetMonitoringSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitoringSubscriptionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:cloudfront:getMonitoringSubscription", {
        "distributionId": args.distributionId,
    }, opts);
}

export interface GetMonitoringSubscriptionArgs {
    /**
     * The ID of the distribution that you are enabling metrics for.
     */
    distributionId: string;
}

export interface GetMonitoringSubscriptionResult {
    /**
     * A subscription configuration for additional CloudWatch metrics.
     */
    readonly monitoringSubscription?: outputs.cloudfront.MonitoringSubscription;
}
/**
 * A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
 */
export function getMonitoringSubscriptionOutput(args: GetMonitoringSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitoringSubscriptionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:cloudfront:getMonitoringSubscription", {
        "distributionId": args.distributionId,
    }, opts);
}

export interface GetMonitoringSubscriptionOutputArgs {
    /**
     * The ID of the distribution that you are enabling metrics for.
     */
    distributionId: pulumi.Input<string>;
}
