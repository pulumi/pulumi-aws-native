// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::CE::CostCategory. Cost Category enables you to map your cost and usage into meaningful categories. You can use Cost Category to organize your costs using a rule-based engine.
 */
export class CostCategory extends pulumi.CustomResource {
    /**
     * Get an existing CostCategory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CostCategory {
        return new CostCategory(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ce:CostCategory';

    /**
     * Returns true if the given object is an instance of CostCategory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CostCategory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CostCategory.__pulumiType;
    }

    /**
     * Cost category ARN
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The default value for the cost category
     */
    declare public readonly defaultValue: pulumi.Output<string | undefined>;
    /**
     * The Cost Category's effective start date.
     */
    declare public /*out*/ readonly effectiveStart: pulumi.Output<string>;
    /**
     * The unique name of the Cost Category.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The rule schema version in this particular Cost Category.
     */
    declare public readonly ruleVersion: pulumi.Output<enums.ce.CostCategoryRuleVersion>;
    /**
     * JSON array format of Expression in Billing and Cost Management API
     */
    declare public readonly rules: pulumi.Output<string>;
    /**
     * Json array format of CostCategorySplitChargeRule in Billing and Cost Management API
     */
    declare public readonly splitChargeRules: pulumi.Output<string | undefined>;
    /**
     * Tags to assign to the cost category.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a CostCategory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CostCategoryArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.ruleVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleVersion'");
            }
            if (args?.rules === undefined && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["defaultValue"] = args?.defaultValue;
            resourceInputs["name"] = args?.name;
            resourceInputs["ruleVersion"] = args?.ruleVersion;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["splitChargeRules"] = args?.splitChargeRules;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["effectiveStart"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["defaultValue"] = undefined /*out*/;
            resourceInputs["effectiveStart"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["ruleVersion"] = undefined /*out*/;
            resourceInputs["rules"] = undefined /*out*/;
            resourceInputs["splitChargeRules"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CostCategory.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CostCategory resource.
 */
export interface CostCategoryArgs {
    /**
     * The default value for the cost category
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * The unique name of the Cost Category.
     */
    name?: pulumi.Input<string>;
    /**
     * The rule schema version in this particular Cost Category.
     */
    ruleVersion: pulumi.Input<enums.ce.CostCategoryRuleVersion>;
    /**
     * JSON array format of Expression in Billing and Cost Management API
     */
    rules: pulumi.Input<string>;
    /**
     * Json array format of CostCategorySplitChargeRule in Billing and Cost Management API
     */
    splitChargeRules?: pulumi.Input<string>;
    /**
     * Tags to assign to the cost category.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
