// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::CodeBuild::Project
 *
 * @deprecated Project is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Project {
        pulumi.log.warn("Project is deprecated: Project is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new Project(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:codebuild:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly artifacts!: pulumi.Output<outputs.codebuild.ProjectArtifacts>;
    public readonly badgeEnabled!: pulumi.Output<boolean | undefined>;
    public readonly buildBatchConfig!: pulumi.Output<outputs.codebuild.ProjectBuildBatchConfig | undefined>;
    public readonly cache!: pulumi.Output<outputs.codebuild.ProjectCache | undefined>;
    public readonly concurrentBuildLimit!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly encryptionKey!: pulumi.Output<string | undefined>;
    public readonly environment!: pulumi.Output<outputs.codebuild.ProjectEnvironment>;
    public readonly fileSystemLocations!: pulumi.Output<outputs.codebuild.ProjectFileSystemLocation[] | undefined>;
    public readonly logsConfig!: pulumi.Output<outputs.codebuild.ProjectLogsConfig | undefined>;
    public readonly name!: pulumi.Output<string | undefined>;
    public readonly queuedTimeoutInMinutes!: pulumi.Output<number | undefined>;
    public readonly resourceAccessRole!: pulumi.Output<string | undefined>;
    public readonly secondaryArtifacts!: pulumi.Output<outputs.codebuild.ProjectArtifacts[] | undefined>;
    public readonly secondarySourceVersions!: pulumi.Output<outputs.codebuild.ProjectSourceVersion[] | undefined>;
    public readonly secondarySources!: pulumi.Output<outputs.codebuild.ProjectSource[] | undefined>;
    public readonly serviceRole!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<outputs.codebuild.ProjectSource>;
    public readonly sourceVersion!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.codebuild.ProjectTag[] | undefined>;
    public readonly timeoutInMinutes!: pulumi.Output<number | undefined>;
    public readonly triggers!: pulumi.Output<outputs.codebuild.ProjectTriggers | undefined>;
    public readonly visibility!: pulumi.Output<string | undefined>;
    public readonly vpcConfig!: pulumi.Output<outputs.codebuild.ProjectVpcConfig | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Project is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Project is deprecated: Project is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.artifacts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'artifacts'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.serviceRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceRole'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["artifacts"] = args ? args.artifacts : undefined;
            resourceInputs["badgeEnabled"] = args ? args.badgeEnabled : undefined;
            resourceInputs["buildBatchConfig"] = args ? args.buildBatchConfig : undefined;
            resourceInputs["cache"] = args ? args.cache : undefined;
            resourceInputs["concurrentBuildLimit"] = args ? args.concurrentBuildLimit : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["fileSystemLocations"] = args ? args.fileSystemLocations : undefined;
            resourceInputs["logsConfig"] = args ? args.logsConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queuedTimeoutInMinutes"] = args ? args.queuedTimeoutInMinutes : undefined;
            resourceInputs["resourceAccessRole"] = args ? args.resourceAccessRole : undefined;
            resourceInputs["secondaryArtifacts"] = args ? args.secondaryArtifacts : undefined;
            resourceInputs["secondarySourceVersions"] = args ? args.secondarySourceVersions : undefined;
            resourceInputs["secondarySources"] = args ? args.secondarySources : undefined;
            resourceInputs["serviceRole"] = args ? args.serviceRole : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceVersion"] = args ? args.sourceVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeoutInMinutes"] = args ? args.timeoutInMinutes : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
            resourceInputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["artifacts"] = undefined /*out*/;
            resourceInputs["badgeEnabled"] = undefined /*out*/;
            resourceInputs["buildBatchConfig"] = undefined /*out*/;
            resourceInputs["cache"] = undefined /*out*/;
            resourceInputs["concurrentBuildLimit"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["encryptionKey"] = undefined /*out*/;
            resourceInputs["environment"] = undefined /*out*/;
            resourceInputs["fileSystemLocations"] = undefined /*out*/;
            resourceInputs["logsConfig"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["queuedTimeoutInMinutes"] = undefined /*out*/;
            resourceInputs["resourceAccessRole"] = undefined /*out*/;
            resourceInputs["secondaryArtifacts"] = undefined /*out*/;
            resourceInputs["secondarySourceVersions"] = undefined /*out*/;
            resourceInputs["secondarySources"] = undefined /*out*/;
            resourceInputs["serviceRole"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["sourceVersion"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["timeoutInMinutes"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
            resourceInputs["vpcConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    artifacts: pulumi.Input<inputs.codebuild.ProjectArtifactsArgs>;
    badgeEnabled?: pulumi.Input<boolean>;
    buildBatchConfig?: pulumi.Input<inputs.codebuild.ProjectBuildBatchConfigArgs>;
    cache?: pulumi.Input<inputs.codebuild.ProjectCacheArgs>;
    concurrentBuildLimit?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    environment: pulumi.Input<inputs.codebuild.ProjectEnvironmentArgs>;
    fileSystemLocations?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectFileSystemLocationArgs>[]>;
    logsConfig?: pulumi.Input<inputs.codebuild.ProjectLogsConfigArgs>;
    name?: pulumi.Input<string>;
    queuedTimeoutInMinutes?: pulumi.Input<number>;
    resourceAccessRole?: pulumi.Input<string>;
    secondaryArtifacts?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectArtifactsArgs>[]>;
    secondarySourceVersions?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectSourceVersionArgs>[]>;
    secondarySources?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectSourceArgs>[]>;
    serviceRole: pulumi.Input<string>;
    source: pulumi.Input<inputs.codebuild.ProjectSourceArgs>;
    sourceVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.codebuild.ProjectTagArgs>[]>;
    timeoutInMinutes?: pulumi.Input<number>;
    triggers?: pulumi.Input<inputs.codebuild.ProjectTriggersArgs>;
    visibility?: pulumi.Input<string>;
    vpcConfig?: pulumi.Input<inputs.codebuild.ProjectVpcConfigArgs>;
}
