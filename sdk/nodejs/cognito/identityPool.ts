// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Cognito::IdentityPool
 *
 * @deprecated IdentityPool is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class IdentityPool extends pulumi.CustomResource {
    /**
     * Get an existing IdentityPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): IdentityPool {
        pulumi.log.warn("IdentityPool is deprecated: IdentityPool is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new IdentityPool(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:cognito:IdentityPool';

    /**
     * Returns true if the given object is an instance of IdentityPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityPool.__pulumiType;
    }

    public readonly allowClassicFlow!: pulumi.Output<boolean | undefined>;
    public readonly allowUnauthenticatedIdentities!: pulumi.Output<boolean>;
    public readonly cognitoEvents!: pulumi.Output<any | undefined>;
    public readonly cognitoIdentityProviders!: pulumi.Output<outputs.cognito.IdentityPoolCognitoIdentityProvider[] | undefined>;
    public readonly cognitoStreams!: pulumi.Output<outputs.cognito.IdentityPoolCognitoStreams | undefined>;
    public readonly developerProviderName!: pulumi.Output<string | undefined>;
    public readonly identityPoolName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly openIdConnectProviderARNs!: pulumi.Output<string[] | undefined>;
    public readonly pushSync!: pulumi.Output<outputs.cognito.IdentityPoolPushSync | undefined>;
    public readonly samlProviderARNs!: pulumi.Output<string[] | undefined>;
    public readonly supportedLoginProviders!: pulumi.Output<any | undefined>;

    /**
     * Create a IdentityPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated IdentityPool is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: IdentityPoolArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("IdentityPool is deprecated: IdentityPool is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.allowUnauthenticatedIdentities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowUnauthenticatedIdentities'");
            }
            inputs["allowClassicFlow"] = args ? args.allowClassicFlow : undefined;
            inputs["allowUnauthenticatedIdentities"] = args ? args.allowUnauthenticatedIdentities : undefined;
            inputs["cognitoEvents"] = args ? args.cognitoEvents : undefined;
            inputs["cognitoIdentityProviders"] = args ? args.cognitoIdentityProviders : undefined;
            inputs["cognitoStreams"] = args ? args.cognitoStreams : undefined;
            inputs["developerProviderName"] = args ? args.developerProviderName : undefined;
            inputs["identityPoolName"] = args ? args.identityPoolName : undefined;
            inputs["openIdConnectProviderARNs"] = args ? args.openIdConnectProviderARNs : undefined;
            inputs["pushSync"] = args ? args.pushSync : undefined;
            inputs["samlProviderARNs"] = args ? args.samlProviderARNs : undefined;
            inputs["supportedLoginProviders"] = args ? args.supportedLoginProviders : undefined;
            inputs["name"] = undefined /*out*/;
        } else {
            inputs["allowClassicFlow"] = undefined /*out*/;
            inputs["allowUnauthenticatedIdentities"] = undefined /*out*/;
            inputs["cognitoEvents"] = undefined /*out*/;
            inputs["cognitoIdentityProviders"] = undefined /*out*/;
            inputs["cognitoStreams"] = undefined /*out*/;
            inputs["developerProviderName"] = undefined /*out*/;
            inputs["identityPoolName"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["openIdConnectProviderARNs"] = undefined /*out*/;
            inputs["pushSync"] = undefined /*out*/;
            inputs["samlProviderARNs"] = undefined /*out*/;
            inputs["supportedLoginProviders"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(IdentityPool.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a IdentityPool resource.
 */
export interface IdentityPoolArgs {
    allowClassicFlow?: pulumi.Input<boolean>;
    allowUnauthenticatedIdentities: pulumi.Input<boolean>;
    cognitoEvents?: any;
    cognitoIdentityProviders?: pulumi.Input<pulumi.Input<inputs.cognito.IdentityPoolCognitoIdentityProviderArgs>[]>;
    cognitoStreams?: pulumi.Input<inputs.cognito.IdentityPoolCognitoStreamsArgs>;
    developerProviderName?: pulumi.Input<string>;
    identityPoolName?: pulumi.Input<string>;
    openIdConnectProviderARNs?: pulumi.Input<pulumi.Input<string>[]>;
    pushSync?: pulumi.Input<inputs.cognito.IdentityPoolPushSyncArgs>;
    samlProviderARNs?: pulumi.Input<pulumi.Input<string>[]>;
    supportedLoginProviders?: any;
}
