// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Cognito::ManagedLoginBranding
 */
export class ManagedLoginBranding extends pulumi.CustomResource {
    /**
     * Get an existing ManagedLoginBranding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ManagedLoginBranding {
        return new ManagedLoginBranding(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:cognito:ManagedLoginBranding';

    /**
     * Returns true if the given object is an instance of ManagedLoginBranding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedLoginBranding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedLoginBranding.__pulumiType;
    }

    /**
     * An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
     */
    public readonly assets!: pulumi.Output<outputs.cognito.ManagedLoginBrandingAssetType[] | undefined>;
    /**
     * The app client that's assigned to the branding style that you want more information about.
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the managed login branding style.
     */
    public /*out*/ readonly managedLoginBrandingId!: pulumi.Output<string>;
    /**
     * When `true` , returns values for branding options that are unchanged from Amazon Cognito defaults. When `false` or when you omit this parameter, returns only values that you customized in your branding style.
     */
    public readonly returnMergedResources!: pulumi.Output<boolean | undefined>;
    /**
     * A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
     */
    public readonly settings!: pulumi.Output<any | undefined>;
    /**
     * When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding editor.
     *
     * When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
     */
    public readonly useCognitoProvidedValues!: pulumi.Output<boolean | undefined>;
    /**
     * The user pool where the branding style is assigned.
     */
    public readonly userPoolId!: pulumi.Output<string>;

    /**
     * Create a ManagedLoginBranding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedLoginBrandingArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.userPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPoolId'");
            }
            resourceInputs["assets"] = args ? args.assets : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["returnMergedResources"] = args ? args.returnMergedResources : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["useCognitoProvidedValues"] = args ? args.useCognitoProvidedValues : undefined;
            resourceInputs["userPoolId"] = args ? args.userPoolId : undefined;
            resourceInputs["managedLoginBrandingId"] = undefined /*out*/;
        } else {
            resourceInputs["assets"] = undefined /*out*/;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["managedLoginBrandingId"] = undefined /*out*/;
            resourceInputs["returnMergedResources"] = undefined /*out*/;
            resourceInputs["settings"] = undefined /*out*/;
            resourceInputs["useCognitoProvidedValues"] = undefined /*out*/;
            resourceInputs["userPoolId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["clientId", "userPoolId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ManagedLoginBranding.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ManagedLoginBranding resource.
 */
export interface ManagedLoginBrandingArgs {
    /**
     * An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
     */
    assets?: pulumi.Input<pulumi.Input<inputs.cognito.ManagedLoginBrandingAssetTypeArgs>[]>;
    /**
     * The app client that's assigned to the branding style that you want more information about.
     */
    clientId?: pulumi.Input<string>;
    /**
     * When `true` , returns values for branding options that are unchanged from Amazon Cognito defaults. When `false` or when you omit this parameter, returns only values that you customized in your branding style.
     */
    returnMergedResources?: pulumi.Input<boolean>;
    /**
     * A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
     */
    settings?: any;
    /**
     * When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding editor.
     *
     * When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
     */
    useCognitoProvidedValues?: pulumi.Input<boolean>;
    /**
     * The user pool where the branding style is assigned.
     */
    userPoolId: pulumi.Input<string>;
}
