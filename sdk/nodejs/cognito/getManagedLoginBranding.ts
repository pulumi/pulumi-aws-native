// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Cognito::ManagedLoginBranding
 */
export function getManagedLoginBranding(args: GetManagedLoginBrandingArgs, opts?: pulumi.InvokeOptions): Promise<GetManagedLoginBrandingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:cognito:getManagedLoginBranding", {
        "managedLoginBrandingId": args.managedLoginBrandingId,
        "userPoolId": args.userPoolId,
    }, opts);
}

export interface GetManagedLoginBrandingArgs {
    /**
     * The ID of the managed login branding style.
     */
    managedLoginBrandingId: string;
    /**
     * The user pool where the branding style is assigned.
     */
    userPoolId: string;
}

export interface GetManagedLoginBrandingResult {
    /**
     * An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.
     */
    readonly assets?: outputs.cognito.ManagedLoginBrandingAssetType[];
    /**
     * The ID of the managed login branding style.
     */
    readonly managedLoginBrandingId?: string;
    /**
     * A JSON file, encoded as a `Document` type, with the the settings that you want to apply to your style.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Cognito::ManagedLoginBranding` for more information about the expected schema for this property.
     */
    readonly settings?: any;
    /**
     * When true, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding editor.
     *
     * When you specify `true` for this option, you must also omit values for `Settings` and `Assets` in the request.
     */
    readonly useCognitoProvidedValues?: boolean;
}
/**
 * Resource Type definition for AWS::Cognito::ManagedLoginBranding
 */
export function getManagedLoginBrandingOutput(args: GetManagedLoginBrandingOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetManagedLoginBrandingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws-native:cognito:getManagedLoginBranding", {
        "managedLoginBrandingId": args.managedLoginBrandingId,
        "userPoolId": args.userPoolId,
    }, opts);
}

export interface GetManagedLoginBrandingOutputArgs {
    /**
     * The ID of the managed login branding style.
     */
    managedLoginBrandingId: pulumi.Input<string>;
    /**
     * The user pool where the branding style is assigned.
     */
    userPoolId: pulumi.Input<string>;
}
