// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::ServiceCatalog::CloudFormationProduct
 *
 * @deprecated CloudFormationProduct is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class CloudFormationProduct extends pulumi.CustomResource {
    /**
     * Get an existing CloudFormationProduct resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CloudFormationProduct {
        pulumi.log.warn("CloudFormationProduct is deprecated: CloudFormationProduct is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new CloudFormationProduct(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:servicecatalog:CloudFormationProduct';

    /**
     * Returns true if the given object is an instance of CloudFormationProduct.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudFormationProduct {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudFormationProduct.__pulumiType;
    }

    public readonly acceptLanguage!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly distributor!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly owner!: pulumi.Output<string>;
    public /*out*/ readonly productName!: pulumi.Output<string>;
    public /*out*/ readonly provisioningArtifactIds!: pulumi.Output<string>;
    public /*out*/ readonly provisioningArtifactNames!: pulumi.Output<string>;
    public readonly provisioningArtifactParameters!: pulumi.Output<outputs.servicecatalog.CloudFormationProductProvisioningArtifactProperties[]>;
    public readonly replaceProvisioningArtifacts!: pulumi.Output<boolean | undefined>;
    public readonly supportDescription!: pulumi.Output<string | undefined>;
    public readonly supportEmail!: pulumi.Output<string | undefined>;
    public readonly supportUrl!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.servicecatalog.CloudFormationProductTag[] | undefined>;

    /**
     * Create a CloudFormationProduct resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated CloudFormationProduct is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: CloudFormationProductArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("CloudFormationProduct is deprecated: CloudFormationProduct is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.provisioningArtifactParameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisioningArtifactParameters'");
            }
            inputs["acceptLanguage"] = args ? args.acceptLanguage : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["distributor"] = args ? args.distributor : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["owner"] = args ? args.owner : undefined;
            inputs["provisioningArtifactParameters"] = args ? args.provisioningArtifactParameters : undefined;
            inputs["replaceProvisioningArtifacts"] = args ? args.replaceProvisioningArtifacts : undefined;
            inputs["supportDescription"] = args ? args.supportDescription : undefined;
            inputs["supportEmail"] = args ? args.supportEmail : undefined;
            inputs["supportUrl"] = args ? args.supportUrl : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["productName"] = undefined /*out*/;
            inputs["provisioningArtifactIds"] = undefined /*out*/;
            inputs["provisioningArtifactNames"] = undefined /*out*/;
        } else {
            inputs["acceptLanguage"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["distributor"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["owner"] = undefined /*out*/;
            inputs["productName"] = undefined /*out*/;
            inputs["provisioningArtifactIds"] = undefined /*out*/;
            inputs["provisioningArtifactNames"] = undefined /*out*/;
            inputs["provisioningArtifactParameters"] = undefined /*out*/;
            inputs["replaceProvisioningArtifacts"] = undefined /*out*/;
            inputs["supportDescription"] = undefined /*out*/;
            inputs["supportEmail"] = undefined /*out*/;
            inputs["supportUrl"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(CloudFormationProduct.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a CloudFormationProduct resource.
 */
export interface CloudFormationProductArgs {
    acceptLanguage?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    distributor?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner: pulumi.Input<string>;
    provisioningArtifactParameters: pulumi.Input<pulumi.Input<inputs.servicecatalog.CloudFormationProductProvisioningArtifactPropertiesArgs>[]>;
    replaceProvisioningArtifacts?: pulumi.Input<boolean>;
    supportDescription?: pulumi.Input<string>;
    supportEmail?: pulumi.Input<string>;
    supportUrl?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.servicecatalog.CloudFormationProductTagArgs>[]>;
}
