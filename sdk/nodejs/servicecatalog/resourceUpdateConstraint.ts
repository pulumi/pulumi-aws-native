// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource type definition for AWS::ServiceCatalog::ResourceUpdateConstraint
 */
export class ResourceUpdateConstraint extends pulumi.CustomResource {
    /**
     * Get an existing ResourceUpdateConstraint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ResourceUpdateConstraint {
        return new ResourceUpdateConstraint(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:servicecatalog:ResourceUpdateConstraint';

    /**
     * Returns true if the given object is an instance of ResourceUpdateConstraint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceUpdateConstraint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceUpdateConstraint.__pulumiType;
    }

    /**
     * The language code
     */
    public readonly acceptLanguage!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier for the constraint
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * The description of the constraint
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The portfolio identifier
     */
    public readonly portfolioId!: pulumi.Output<string>;
    /**
     * The product identifier
     */
    public readonly productId!: pulumi.Output<string>;
    /**
     * ALLOWED or NOT_ALLOWED, to permit or prevent changes to the tags on provisioned instances of the specified portfolio / product combination
     */
    public readonly tagUpdateOnProvisionedProduct!: pulumi.Output<string>;

    /**
     * Create a ResourceUpdateConstraint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceUpdateConstraintArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.portfolioId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portfolioId'");
            }
            if ((!args || args.productId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productId'");
            }
            if ((!args || args.tagUpdateOnProvisionedProduct === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagUpdateOnProvisionedProduct'");
            }
            resourceInputs["acceptLanguage"] = args ? args.acceptLanguage : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["portfolioId"] = args ? args.portfolioId : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["tagUpdateOnProvisionedProduct"] = args ? args.tagUpdateOnProvisionedProduct : undefined;
            resourceInputs["awsId"] = undefined /*out*/;
        } else {
            resourceInputs["acceptLanguage"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["portfolioId"] = undefined /*out*/;
            resourceInputs["productId"] = undefined /*out*/;
            resourceInputs["tagUpdateOnProvisionedProduct"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["portfolioId", "productId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ResourceUpdateConstraint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ResourceUpdateConstraint resource.
 */
export interface ResourceUpdateConstraintArgs {
    /**
     * The language code
     */
    acceptLanguage?: pulumi.Input<string>;
    /**
     * The description of the constraint
     */
    description?: pulumi.Input<string>;
    /**
     * The portfolio identifier
     */
    portfolioId: pulumi.Input<string>;
    /**
     * The product identifier
     */
    productId: pulumi.Input<string>;
    /**
     * ALLOWED or NOT_ALLOWED, to permit or prevent changes to the tags on provisioned instances of the specified portfolio / product combination
     */
    tagUpdateOnProvisionedProduct: pulumi.Input<string>;
}
