// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CloudFormationProvisionedProductArgs } from "./cloudFormationProvisionedProduct";
export type CloudFormationProvisionedProduct = import("./cloudFormationProvisionedProduct").CloudFormationProvisionedProduct;
export const CloudFormationProvisionedProduct: typeof import("./cloudFormationProvisionedProduct").CloudFormationProvisionedProduct = null as any;
utilities.lazyLoad(exports, ["CloudFormationProvisionedProduct"], () => require("./cloudFormationProvisionedProduct"));

export { GetCloudFormationProvisionedProductArgs, GetCloudFormationProvisionedProductResult, GetCloudFormationProvisionedProductOutputArgs } from "./getCloudFormationProvisionedProduct";
export const getCloudFormationProvisionedProduct: typeof import("./getCloudFormationProvisionedProduct").getCloudFormationProvisionedProduct = null as any;
export const getCloudFormationProvisionedProductOutput: typeof import("./getCloudFormationProvisionedProduct").getCloudFormationProvisionedProductOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFormationProvisionedProduct","getCloudFormationProvisionedProductOutput"], () => require("./getCloudFormationProvisionedProduct"));

export { GetLaunchTemplateConstraintArgs, GetLaunchTemplateConstraintResult, GetLaunchTemplateConstraintOutputArgs } from "./getLaunchTemplateConstraint";
export const getLaunchTemplateConstraint: typeof import("./getLaunchTemplateConstraint").getLaunchTemplateConstraint = null as any;
export const getLaunchTemplateConstraintOutput: typeof import("./getLaunchTemplateConstraint").getLaunchTemplateConstraintOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchTemplateConstraint","getLaunchTemplateConstraintOutput"], () => require("./getLaunchTemplateConstraint"));

export { GetPortfolioShareArgs, GetPortfolioShareResult, GetPortfolioShareOutputArgs } from "./getPortfolioShare";
export const getPortfolioShare: typeof import("./getPortfolioShare").getPortfolioShare = null as any;
export const getPortfolioShareOutput: typeof import("./getPortfolioShare").getPortfolioShareOutput = null as any;
utilities.lazyLoad(exports, ["getPortfolioShare","getPortfolioShareOutput"], () => require("./getPortfolioShare"));

export { GetServiceActionArgs, GetServiceActionResult, GetServiceActionOutputArgs } from "./getServiceAction";
export const getServiceAction: typeof import("./getServiceAction").getServiceAction = null as any;
export const getServiceActionOutput: typeof import("./getServiceAction").getServiceActionOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAction","getServiceActionOutput"], () => require("./getServiceAction"));

export { GetTagOptionArgs, GetTagOptionResult, GetTagOptionOutputArgs } from "./getTagOption";
export const getTagOption: typeof import("./getTagOption").getTagOption = null as any;
export const getTagOptionOutput: typeof import("./getTagOption").getTagOptionOutput = null as any;
utilities.lazyLoad(exports, ["getTagOption","getTagOptionOutput"], () => require("./getTagOption"));

export { LaunchTemplateConstraintArgs } from "./launchTemplateConstraint";
export type LaunchTemplateConstraint = import("./launchTemplateConstraint").LaunchTemplateConstraint;
export const LaunchTemplateConstraint: typeof import("./launchTemplateConstraint").LaunchTemplateConstraint = null as any;
utilities.lazyLoad(exports, ["LaunchTemplateConstraint"], () => require("./launchTemplateConstraint"));

export { PortfolioProductAssociationArgs } from "./portfolioProductAssociation";
export type PortfolioProductAssociation = import("./portfolioProductAssociation").PortfolioProductAssociation;
export const PortfolioProductAssociation: typeof import("./portfolioProductAssociation").PortfolioProductAssociation = null as any;
utilities.lazyLoad(exports, ["PortfolioProductAssociation"], () => require("./portfolioProductAssociation"));

export { PortfolioShareArgs } from "./portfolioShare";
export type PortfolioShare = import("./portfolioShare").PortfolioShare;
export const PortfolioShare: typeof import("./portfolioShare").PortfolioShare = null as any;
utilities.lazyLoad(exports, ["PortfolioShare"], () => require("./portfolioShare"));

export { ServiceActionArgs } from "./serviceAction";
export type ServiceAction = import("./serviceAction").ServiceAction;
export const ServiceAction: typeof import("./serviceAction").ServiceAction = null as any;
utilities.lazyLoad(exports, ["ServiceAction"], () => require("./serviceAction"));

export { ServiceActionAssociationArgs } from "./serviceActionAssociation";
export type ServiceActionAssociation = import("./serviceActionAssociation").ServiceActionAssociation;
export const ServiceActionAssociation: typeof import("./serviceActionAssociation").ServiceActionAssociation = null as any;
utilities.lazyLoad(exports, ["ServiceActionAssociation"], () => require("./serviceActionAssociation"));

export { TagOptionArgs } from "./tagOption";
export type TagOption = import("./tagOption").TagOption;
export const TagOption: typeof import("./tagOption").TagOption = null as any;
utilities.lazyLoad(exports, ["TagOption"], () => require("./tagOption"));


// Export enums:
export * from "../types/enums/servicecatalog";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:servicecatalog:CloudFormationProvisionedProduct":
                return new CloudFormationProvisionedProduct(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:LaunchTemplateConstraint":
                return new LaunchTemplateConstraint(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:PortfolioProductAssociation":
                return new PortfolioProductAssociation(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:PortfolioShare":
                return new PortfolioShare(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:ServiceAction":
                return new ServiceAction(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:ServiceActionAssociation":
                return new ServiceActionAssociation(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:TagOption":
                return new TagOption(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "servicecatalog", _module)
