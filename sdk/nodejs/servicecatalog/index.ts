// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AcceptedPortfolioShareArgs } from "./acceptedPortfolioShare";
export type AcceptedPortfolioShare = import("./acceptedPortfolioShare").AcceptedPortfolioShare;
export const AcceptedPortfolioShare: typeof import("./acceptedPortfolioShare").AcceptedPortfolioShare = null as any;

export { CloudFormationProductArgs } from "./cloudFormationProduct";
export type CloudFormationProduct = import("./cloudFormationProduct").CloudFormationProduct;
export const CloudFormationProduct: typeof import("./cloudFormationProduct").CloudFormationProduct = null as any;

export { CloudFormationProvisionedProductArgs } from "./cloudFormationProvisionedProduct";
export type CloudFormationProvisionedProduct = import("./cloudFormationProvisionedProduct").CloudFormationProvisionedProduct;
export const CloudFormationProvisionedProduct: typeof import("./cloudFormationProvisionedProduct").CloudFormationProvisionedProduct = null as any;

export { GetAcceptedPortfolioShareArgs, GetAcceptedPortfolioShareResult, GetAcceptedPortfolioShareOutputArgs } from "./getAcceptedPortfolioShare";
export const getAcceptedPortfolioShare: typeof import("./getAcceptedPortfolioShare").getAcceptedPortfolioShare = null as any;
export const getAcceptedPortfolioShareOutput: typeof import("./getAcceptedPortfolioShare").getAcceptedPortfolioShareOutput = null as any;

export { GetCloudFormationProductArgs, GetCloudFormationProductResult, GetCloudFormationProductOutputArgs } from "./getCloudFormationProduct";
export const getCloudFormationProduct: typeof import("./getCloudFormationProduct").getCloudFormationProduct = null as any;
export const getCloudFormationProductOutput: typeof import("./getCloudFormationProduct").getCloudFormationProductOutput = null as any;

export { GetCloudFormationProvisionedProductArgs, GetCloudFormationProvisionedProductResult, GetCloudFormationProvisionedProductOutputArgs } from "./getCloudFormationProvisionedProduct";
export const getCloudFormationProvisionedProduct: typeof import("./getCloudFormationProvisionedProduct").getCloudFormationProvisionedProduct = null as any;
export const getCloudFormationProvisionedProductOutput: typeof import("./getCloudFormationProvisionedProduct").getCloudFormationProvisionedProductOutput = null as any;

export { GetLaunchNotificationConstraintArgs, GetLaunchNotificationConstraintResult, GetLaunchNotificationConstraintOutputArgs } from "./getLaunchNotificationConstraint";
export const getLaunchNotificationConstraint: typeof import("./getLaunchNotificationConstraint").getLaunchNotificationConstraint = null as any;
export const getLaunchNotificationConstraintOutput: typeof import("./getLaunchNotificationConstraint").getLaunchNotificationConstraintOutput = null as any;

export { GetLaunchRoleConstraintArgs, GetLaunchRoleConstraintResult, GetLaunchRoleConstraintOutputArgs } from "./getLaunchRoleConstraint";
export const getLaunchRoleConstraint: typeof import("./getLaunchRoleConstraint").getLaunchRoleConstraint = null as any;
export const getLaunchRoleConstraintOutput: typeof import("./getLaunchRoleConstraint").getLaunchRoleConstraintOutput = null as any;

export { GetLaunchTemplateConstraintArgs, GetLaunchTemplateConstraintResult, GetLaunchTemplateConstraintOutputArgs } from "./getLaunchTemplateConstraint";
export const getLaunchTemplateConstraint: typeof import("./getLaunchTemplateConstraint").getLaunchTemplateConstraint = null as any;
export const getLaunchTemplateConstraintOutput: typeof import("./getLaunchTemplateConstraint").getLaunchTemplateConstraintOutput = null as any;

export { GetPortfolioArgs, GetPortfolioResult, GetPortfolioOutputArgs } from "./getPortfolio";
export const getPortfolio: typeof import("./getPortfolio").getPortfolio = null as any;
export const getPortfolioOutput: typeof import("./getPortfolio").getPortfolioOutput = null as any;

export { GetPortfolioPrincipalAssociationArgs, GetPortfolioPrincipalAssociationResult, GetPortfolioPrincipalAssociationOutputArgs } from "./getPortfolioPrincipalAssociation";
export const getPortfolioPrincipalAssociation: typeof import("./getPortfolioPrincipalAssociation").getPortfolioPrincipalAssociation = null as any;
export const getPortfolioPrincipalAssociationOutput: typeof import("./getPortfolioPrincipalAssociation").getPortfolioPrincipalAssociationOutput = null as any;

export { GetPortfolioProductAssociationArgs, GetPortfolioProductAssociationResult, GetPortfolioProductAssociationOutputArgs } from "./getPortfolioProductAssociation";
export const getPortfolioProductAssociation: typeof import("./getPortfolioProductAssociation").getPortfolioProductAssociation = null as any;
export const getPortfolioProductAssociationOutput: typeof import("./getPortfolioProductAssociation").getPortfolioProductAssociationOutput = null as any;

export { GetPortfolioShareArgs, GetPortfolioShareResult, GetPortfolioShareOutputArgs } from "./getPortfolioShare";
export const getPortfolioShare: typeof import("./getPortfolioShare").getPortfolioShare = null as any;
export const getPortfolioShareOutput: typeof import("./getPortfolioShare").getPortfolioShareOutput = null as any;

export { GetResourceUpdateConstraintArgs, GetResourceUpdateConstraintResult, GetResourceUpdateConstraintOutputArgs } from "./getResourceUpdateConstraint";
export const getResourceUpdateConstraint: typeof import("./getResourceUpdateConstraint").getResourceUpdateConstraint = null as any;
export const getResourceUpdateConstraintOutput: typeof import("./getResourceUpdateConstraint").getResourceUpdateConstraintOutput = null as any;

export { GetServiceActionArgs, GetServiceActionResult, GetServiceActionOutputArgs } from "./getServiceAction";
export const getServiceAction: typeof import("./getServiceAction").getServiceAction = null as any;
export const getServiceActionOutput: typeof import("./getServiceAction").getServiceActionOutput = null as any;

export { GetStackSetConstraintArgs, GetStackSetConstraintResult, GetStackSetConstraintOutputArgs } from "./getStackSetConstraint";
export const getStackSetConstraint: typeof import("./getStackSetConstraint").getStackSetConstraint = null as any;
export const getStackSetConstraintOutput: typeof import("./getStackSetConstraint").getStackSetConstraintOutput = null as any;

export { GetTagOptionArgs, GetTagOptionResult, GetTagOptionOutputArgs } from "./getTagOption";
export const getTagOption: typeof import("./getTagOption").getTagOption = null as any;
export const getTagOptionOutput: typeof import("./getTagOption").getTagOptionOutput = null as any;

export { GetTagOptionAssociationArgs, GetTagOptionAssociationResult, GetTagOptionAssociationOutputArgs } from "./getTagOptionAssociation";
export const getTagOptionAssociation: typeof import("./getTagOptionAssociation").getTagOptionAssociation = null as any;
export const getTagOptionAssociationOutput: typeof import("./getTagOptionAssociation").getTagOptionAssociationOutput = null as any;

export { LaunchNotificationConstraintArgs } from "./launchNotificationConstraint";
export type LaunchNotificationConstraint = import("./launchNotificationConstraint").LaunchNotificationConstraint;
export const LaunchNotificationConstraint: typeof import("./launchNotificationConstraint").LaunchNotificationConstraint = null as any;

export { LaunchRoleConstraintArgs } from "./launchRoleConstraint";
export type LaunchRoleConstraint = import("./launchRoleConstraint").LaunchRoleConstraint;
export const LaunchRoleConstraint: typeof import("./launchRoleConstraint").LaunchRoleConstraint = null as any;

export { LaunchTemplateConstraintArgs } from "./launchTemplateConstraint";
export type LaunchTemplateConstraint = import("./launchTemplateConstraint").LaunchTemplateConstraint;
export const LaunchTemplateConstraint: typeof import("./launchTemplateConstraint").LaunchTemplateConstraint = null as any;

export { PortfolioArgs } from "./portfolio";
export type Portfolio = import("./portfolio").Portfolio;
export const Portfolio: typeof import("./portfolio").Portfolio = null as any;

export { PortfolioPrincipalAssociationArgs } from "./portfolioPrincipalAssociation";
export type PortfolioPrincipalAssociation = import("./portfolioPrincipalAssociation").PortfolioPrincipalAssociation;
export const PortfolioPrincipalAssociation: typeof import("./portfolioPrincipalAssociation").PortfolioPrincipalAssociation = null as any;

export { PortfolioProductAssociationArgs } from "./portfolioProductAssociation";
export type PortfolioProductAssociation = import("./portfolioProductAssociation").PortfolioProductAssociation;
export const PortfolioProductAssociation: typeof import("./portfolioProductAssociation").PortfolioProductAssociation = null as any;

export { PortfolioShareArgs } from "./portfolioShare";
export type PortfolioShare = import("./portfolioShare").PortfolioShare;
export const PortfolioShare: typeof import("./portfolioShare").PortfolioShare = null as any;

export { ResourceUpdateConstraintArgs } from "./resourceUpdateConstraint";
export type ResourceUpdateConstraint = import("./resourceUpdateConstraint").ResourceUpdateConstraint;
export const ResourceUpdateConstraint: typeof import("./resourceUpdateConstraint").ResourceUpdateConstraint = null as any;

export { ServiceActionArgs } from "./serviceAction";
export type ServiceAction = import("./serviceAction").ServiceAction;
export const ServiceAction: typeof import("./serviceAction").ServiceAction = null as any;

export { ServiceActionAssociationArgs } from "./serviceActionAssociation";
export type ServiceActionAssociation = import("./serviceActionAssociation").ServiceActionAssociation;
export const ServiceActionAssociation: typeof import("./serviceActionAssociation").ServiceActionAssociation = null as any;

export { StackSetConstraintArgs } from "./stackSetConstraint";
export type StackSetConstraint = import("./stackSetConstraint").StackSetConstraint;
export const StackSetConstraint: typeof import("./stackSetConstraint").StackSetConstraint = null as any;

export { TagOptionArgs } from "./tagOption";
export type TagOption = import("./tagOption").TagOption;
export const TagOption: typeof import("./tagOption").TagOption = null as any;

export { TagOptionAssociationArgs } from "./tagOptionAssociation";
export type TagOptionAssociation = import("./tagOptionAssociation").TagOptionAssociation;
export const TagOptionAssociation: typeof import("./tagOptionAssociation").TagOptionAssociation = null as any;

utilities.lazyLoad(exports, ["AcceptedPortfolioShare"], () => require("./acceptedPortfolioShare"));
utilities.lazyLoad(exports, ["CloudFormationProduct"], () => require("./cloudFormationProduct"));
utilities.lazyLoad(exports, ["CloudFormationProvisionedProduct"], () => require("./cloudFormationProvisionedProduct"));
utilities.lazyLoad(exports, ["getAcceptedPortfolioShare","getAcceptedPortfolioShareOutput"], () => require("./getAcceptedPortfolioShare"));
utilities.lazyLoad(exports, ["getCloudFormationProduct","getCloudFormationProductOutput"], () => require("./getCloudFormationProduct"));
utilities.lazyLoad(exports, ["getCloudFormationProvisionedProduct","getCloudFormationProvisionedProductOutput"], () => require("./getCloudFormationProvisionedProduct"));
utilities.lazyLoad(exports, ["getLaunchNotificationConstraint","getLaunchNotificationConstraintOutput"], () => require("./getLaunchNotificationConstraint"));
utilities.lazyLoad(exports, ["getLaunchRoleConstraint","getLaunchRoleConstraintOutput"], () => require("./getLaunchRoleConstraint"));
utilities.lazyLoad(exports, ["getLaunchTemplateConstraint","getLaunchTemplateConstraintOutput"], () => require("./getLaunchTemplateConstraint"));
utilities.lazyLoad(exports, ["getPortfolio","getPortfolioOutput"], () => require("./getPortfolio"));
utilities.lazyLoad(exports, ["getPortfolioPrincipalAssociation","getPortfolioPrincipalAssociationOutput"], () => require("./getPortfolioPrincipalAssociation"));
utilities.lazyLoad(exports, ["getPortfolioProductAssociation","getPortfolioProductAssociationOutput"], () => require("./getPortfolioProductAssociation"));
utilities.lazyLoad(exports, ["getPortfolioShare","getPortfolioShareOutput"], () => require("./getPortfolioShare"));
utilities.lazyLoad(exports, ["getResourceUpdateConstraint","getResourceUpdateConstraintOutput"], () => require("./getResourceUpdateConstraint"));
utilities.lazyLoad(exports, ["getServiceAction","getServiceActionOutput"], () => require("./getServiceAction"));
utilities.lazyLoad(exports, ["getStackSetConstraint","getStackSetConstraintOutput"], () => require("./getStackSetConstraint"));
utilities.lazyLoad(exports, ["getTagOption","getTagOptionOutput"], () => require("./getTagOption"));
utilities.lazyLoad(exports, ["getTagOptionAssociation","getTagOptionAssociationOutput"], () => require("./getTagOptionAssociation"));
utilities.lazyLoad(exports, ["LaunchNotificationConstraint"], () => require("./launchNotificationConstraint"));
utilities.lazyLoad(exports, ["LaunchRoleConstraint"], () => require("./launchRoleConstraint"));
utilities.lazyLoad(exports, ["LaunchTemplateConstraint"], () => require("./launchTemplateConstraint"));
utilities.lazyLoad(exports, ["Portfolio"], () => require("./portfolio"));
utilities.lazyLoad(exports, ["PortfolioPrincipalAssociation"], () => require("./portfolioPrincipalAssociation"));
utilities.lazyLoad(exports, ["PortfolioProductAssociation"], () => require("./portfolioProductAssociation"));
utilities.lazyLoad(exports, ["PortfolioShare"], () => require("./portfolioShare"));
utilities.lazyLoad(exports, ["ResourceUpdateConstraint"], () => require("./resourceUpdateConstraint"));
utilities.lazyLoad(exports, ["ServiceAction"], () => require("./serviceAction"));
utilities.lazyLoad(exports, ["ServiceActionAssociation"], () => require("./serviceActionAssociation"));
utilities.lazyLoad(exports, ["StackSetConstraint"], () => require("./stackSetConstraint"));
utilities.lazyLoad(exports, ["TagOption"], () => require("./tagOption"));
utilities.lazyLoad(exports, ["TagOptionAssociation"], () => require("./tagOptionAssociation"));

// Export enums:
export * from "../types/enums/servicecatalog";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:servicecatalog:AcceptedPortfolioShare":
                return new AcceptedPortfolioShare(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:CloudFormationProduct":
                return new CloudFormationProduct(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:CloudFormationProvisionedProduct":
                return new CloudFormationProvisionedProduct(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:LaunchNotificationConstraint":
                return new LaunchNotificationConstraint(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:LaunchRoleConstraint":
                return new LaunchRoleConstraint(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:LaunchTemplateConstraint":
                return new LaunchTemplateConstraint(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:Portfolio":
                return new Portfolio(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:PortfolioPrincipalAssociation":
                return new PortfolioPrincipalAssociation(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:PortfolioProductAssociation":
                return new PortfolioProductAssociation(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:PortfolioShare":
                return new PortfolioShare(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:ResourceUpdateConstraint":
                return new ResourceUpdateConstraint(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:ServiceAction":
                return new ServiceAction(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:ServiceActionAssociation":
                return new ServiceActionAssociation(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:StackSetConstraint":
                return new StackSetConstraint(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:TagOption":
                return new TagOption(name, <any>undefined, { urn })
            case "aws-native:servicecatalog:TagOptionAssociation":
                return new TagOptionAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "servicecatalog", _module)
