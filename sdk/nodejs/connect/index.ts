// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApprovedOriginArgs } from "./approvedOrigin";
export type ApprovedOrigin = import("./approvedOrigin").ApprovedOrigin;
export const ApprovedOrigin: typeof import("./approvedOrigin").ApprovedOrigin = null as any;
utilities.lazyLoad(exports, ["ApprovedOrigin"], () => require("./approvedOrigin"));

export { ContactFlowArgs } from "./contactFlow";
export type ContactFlow = import("./contactFlow").ContactFlow;
export const ContactFlow: typeof import("./contactFlow").ContactFlow = null as any;
utilities.lazyLoad(exports, ["ContactFlow"], () => require("./contactFlow"));

export { ContactFlowModuleArgs } from "./contactFlowModule";
export type ContactFlowModule = import("./contactFlowModule").ContactFlowModule;
export const ContactFlowModule: typeof import("./contactFlowModule").ContactFlowModule = null as any;
utilities.lazyLoad(exports, ["ContactFlowModule"], () => require("./contactFlowModule"));

export { EvaluationFormArgs } from "./evaluationForm";
export type EvaluationForm = import("./evaluationForm").EvaluationForm;
export const EvaluationForm: typeof import("./evaluationForm").EvaluationForm = null as any;
utilities.lazyLoad(exports, ["EvaluationForm"], () => require("./evaluationForm"));

export { GetContactFlowArgs, GetContactFlowResult, GetContactFlowOutputArgs } from "./getContactFlow";
export const getContactFlow: typeof import("./getContactFlow").getContactFlow = null as any;
export const getContactFlowOutput: typeof import("./getContactFlow").getContactFlowOutput = null as any;
utilities.lazyLoad(exports, ["getContactFlow","getContactFlowOutput"], () => require("./getContactFlow"));

export { GetContactFlowModuleArgs, GetContactFlowModuleResult, GetContactFlowModuleOutputArgs } from "./getContactFlowModule";
export const getContactFlowModule: typeof import("./getContactFlowModule").getContactFlowModule = null as any;
export const getContactFlowModuleOutput: typeof import("./getContactFlowModule").getContactFlowModuleOutput = null as any;
utilities.lazyLoad(exports, ["getContactFlowModule","getContactFlowModuleOutput"], () => require("./getContactFlowModule"));

export { GetEvaluationFormArgs, GetEvaluationFormResult, GetEvaluationFormOutputArgs } from "./getEvaluationForm";
export const getEvaluationForm: typeof import("./getEvaluationForm").getEvaluationForm = null as any;
export const getEvaluationFormOutput: typeof import("./getEvaluationForm").getEvaluationFormOutput = null as any;
utilities.lazyLoad(exports, ["getEvaluationForm","getEvaluationFormOutput"], () => require("./getEvaluationForm"));

export { GetHoursOfOperationArgs, GetHoursOfOperationResult, GetHoursOfOperationOutputArgs } from "./getHoursOfOperation";
export const getHoursOfOperation: typeof import("./getHoursOfOperation").getHoursOfOperation = null as any;
export const getHoursOfOperationOutput: typeof import("./getHoursOfOperation").getHoursOfOperationOutput = null as any;
utilities.lazyLoad(exports, ["getHoursOfOperation","getHoursOfOperationOutput"], () => require("./getHoursOfOperation"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstanceStorageConfigArgs, GetInstanceStorageConfigResult, GetInstanceStorageConfigOutputArgs } from "./getInstanceStorageConfig";
export const getInstanceStorageConfig: typeof import("./getInstanceStorageConfig").getInstanceStorageConfig = null as any;
export const getInstanceStorageConfigOutput: typeof import("./getInstanceStorageConfig").getInstanceStorageConfigOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceStorageConfig","getInstanceStorageConfigOutput"], () => require("./getInstanceStorageConfig"));

export { GetIntegrationAssociationArgs, GetIntegrationAssociationResult, GetIntegrationAssociationOutputArgs } from "./getIntegrationAssociation";
export const getIntegrationAssociation: typeof import("./getIntegrationAssociation").getIntegrationAssociation = null as any;
export const getIntegrationAssociationOutput: typeof import("./getIntegrationAssociation").getIntegrationAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrationAssociation","getIntegrationAssociationOutput"], () => require("./getIntegrationAssociation"));

export { GetPhoneNumberArgs, GetPhoneNumberResult, GetPhoneNumberOutputArgs } from "./getPhoneNumber";
export const getPhoneNumber: typeof import("./getPhoneNumber").getPhoneNumber = null as any;
export const getPhoneNumberOutput: typeof import("./getPhoneNumber").getPhoneNumberOutput = null as any;
utilities.lazyLoad(exports, ["getPhoneNumber","getPhoneNumberOutput"], () => require("./getPhoneNumber"));

export { GetPromptArgs, GetPromptResult, GetPromptOutputArgs } from "./getPrompt";
export const getPrompt: typeof import("./getPrompt").getPrompt = null as any;
export const getPromptOutput: typeof import("./getPrompt").getPromptOutput = null as any;
utilities.lazyLoad(exports, ["getPrompt","getPromptOutput"], () => require("./getPrompt"));

export { GetQueueArgs, GetQueueResult, GetQueueOutputArgs } from "./getQueue";
export const getQueue: typeof import("./getQueue").getQueue = null as any;
export const getQueueOutput: typeof import("./getQueue").getQueueOutput = null as any;
utilities.lazyLoad(exports, ["getQueue","getQueueOutput"], () => require("./getQueue"));

export { GetQuickConnectArgs, GetQuickConnectResult, GetQuickConnectOutputArgs } from "./getQuickConnect";
export const getQuickConnect: typeof import("./getQuickConnect").getQuickConnect = null as any;
export const getQuickConnectOutput: typeof import("./getQuickConnect").getQuickConnectOutput = null as any;
utilities.lazyLoad(exports, ["getQuickConnect","getQuickConnectOutput"], () => require("./getQuickConnect"));

export { GetRoutingProfileArgs, GetRoutingProfileResult, GetRoutingProfileOutputArgs } from "./getRoutingProfile";
export const getRoutingProfile: typeof import("./getRoutingProfile").getRoutingProfile = null as any;
export const getRoutingProfileOutput: typeof import("./getRoutingProfile").getRoutingProfileOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingProfile","getRoutingProfileOutput"], () => require("./getRoutingProfile"));

export { GetRuleArgs, GetRuleResult, GetRuleOutputArgs } from "./getRule";
export const getRule: typeof import("./getRule").getRule = null as any;
export const getRuleOutput: typeof import("./getRule").getRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRule","getRuleOutput"], () => require("./getRule"));

export { GetSecurityKeyArgs, GetSecurityKeyResult, GetSecurityKeyOutputArgs } from "./getSecurityKey";
export const getSecurityKey: typeof import("./getSecurityKey").getSecurityKey = null as any;
export const getSecurityKeyOutput: typeof import("./getSecurityKey").getSecurityKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityKey","getSecurityKeyOutput"], () => require("./getSecurityKey"));

export { GetSecurityProfileArgs, GetSecurityProfileResult, GetSecurityProfileOutputArgs } from "./getSecurityProfile";
export const getSecurityProfile: typeof import("./getSecurityProfile").getSecurityProfile = null as any;
export const getSecurityProfileOutput: typeof import("./getSecurityProfile").getSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityProfile","getSecurityProfileOutput"], () => require("./getSecurityProfile"));

export { GetTaskTemplateArgs, GetTaskTemplateResult, GetTaskTemplateOutputArgs } from "./getTaskTemplate";
export const getTaskTemplate: typeof import("./getTaskTemplate").getTaskTemplate = null as any;
export const getTaskTemplateOutput: typeof import("./getTaskTemplate").getTaskTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTaskTemplate","getTaskTemplateOutput"], () => require("./getTaskTemplate"));

export { GetTrafficDistributionGroupArgs, GetTrafficDistributionGroupResult, GetTrafficDistributionGroupOutputArgs } from "./getTrafficDistributionGroup";
export const getTrafficDistributionGroup: typeof import("./getTrafficDistributionGroup").getTrafficDistributionGroup = null as any;
export const getTrafficDistributionGroupOutput: typeof import("./getTrafficDistributionGroup").getTrafficDistributionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficDistributionGroup","getTrafficDistributionGroupOutput"], () => require("./getTrafficDistributionGroup"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserHierarchyGroupArgs, GetUserHierarchyGroupResult, GetUserHierarchyGroupOutputArgs } from "./getUserHierarchyGroup";
export const getUserHierarchyGroup: typeof import("./getUserHierarchyGroup").getUserHierarchyGroup = null as any;
export const getUserHierarchyGroupOutput: typeof import("./getUserHierarchyGroup").getUserHierarchyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserHierarchyGroup","getUserHierarchyGroupOutput"], () => require("./getUserHierarchyGroup"));

export { GetViewArgs, GetViewResult, GetViewOutputArgs } from "./getView";
export const getView: typeof import("./getView").getView = null as any;
export const getViewOutput: typeof import("./getView").getViewOutput = null as any;
utilities.lazyLoad(exports, ["getView","getViewOutput"], () => require("./getView"));

export { GetViewVersionArgs, GetViewVersionResult, GetViewVersionOutputArgs } from "./getViewVersion";
export const getViewVersion: typeof import("./getViewVersion").getViewVersion = null as any;
export const getViewVersionOutput: typeof import("./getViewVersion").getViewVersionOutput = null as any;
utilities.lazyLoad(exports, ["getViewVersion","getViewVersionOutput"], () => require("./getViewVersion"));

export { HoursOfOperationArgs } from "./hoursOfOperation";
export type HoursOfOperation = import("./hoursOfOperation").HoursOfOperation;
export const HoursOfOperation: typeof import("./hoursOfOperation").HoursOfOperation = null as any;
utilities.lazyLoad(exports, ["HoursOfOperation"], () => require("./hoursOfOperation"));

export { InstanceArgs } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceStorageConfigArgs } from "./instanceStorageConfig";
export type InstanceStorageConfig = import("./instanceStorageConfig").InstanceStorageConfig;
export const InstanceStorageConfig: typeof import("./instanceStorageConfig").InstanceStorageConfig = null as any;
utilities.lazyLoad(exports, ["InstanceStorageConfig"], () => require("./instanceStorageConfig"));

export { IntegrationAssociationArgs } from "./integrationAssociation";
export type IntegrationAssociation = import("./integrationAssociation").IntegrationAssociation;
export const IntegrationAssociation: typeof import("./integrationAssociation").IntegrationAssociation = null as any;
utilities.lazyLoad(exports, ["IntegrationAssociation"], () => require("./integrationAssociation"));

export { PhoneNumberArgs } from "./phoneNumber";
export type PhoneNumber = import("./phoneNumber").PhoneNumber;
export const PhoneNumber: typeof import("./phoneNumber").PhoneNumber = null as any;
utilities.lazyLoad(exports, ["PhoneNumber"], () => require("./phoneNumber"));

export { PromptArgs } from "./prompt";
export type Prompt = import("./prompt").Prompt;
export const Prompt: typeof import("./prompt").Prompt = null as any;
utilities.lazyLoad(exports, ["Prompt"], () => require("./prompt"));

export { QueueArgs } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));

export { QuickConnectArgs } from "./quickConnect";
export type QuickConnect = import("./quickConnect").QuickConnect;
export const QuickConnect: typeof import("./quickConnect").QuickConnect = null as any;
utilities.lazyLoad(exports, ["QuickConnect"], () => require("./quickConnect"));

export { RoutingProfileArgs } from "./routingProfile";
export type RoutingProfile = import("./routingProfile").RoutingProfile;
export const RoutingProfile: typeof import("./routingProfile").RoutingProfile = null as any;
utilities.lazyLoad(exports, ["RoutingProfile"], () => require("./routingProfile"));

export { RuleArgs } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { SecurityKeyArgs } from "./securityKey";
export type SecurityKey = import("./securityKey").SecurityKey;
export const SecurityKey: typeof import("./securityKey").SecurityKey = null as any;
utilities.lazyLoad(exports, ["SecurityKey"], () => require("./securityKey"));

export { SecurityProfileArgs } from "./securityProfile";
export type SecurityProfile = import("./securityProfile").SecurityProfile;
export const SecurityProfile: typeof import("./securityProfile").SecurityProfile = null as any;
utilities.lazyLoad(exports, ["SecurityProfile"], () => require("./securityProfile"));

export { TaskTemplateArgs } from "./taskTemplate";
export type TaskTemplate = import("./taskTemplate").TaskTemplate;
export const TaskTemplate: typeof import("./taskTemplate").TaskTemplate = null as any;
utilities.lazyLoad(exports, ["TaskTemplate"], () => require("./taskTemplate"));

export { TrafficDistributionGroupArgs } from "./trafficDistributionGroup";
export type TrafficDistributionGroup = import("./trafficDistributionGroup").TrafficDistributionGroup;
export const TrafficDistributionGroup: typeof import("./trafficDistributionGroup").TrafficDistributionGroup = null as any;
utilities.lazyLoad(exports, ["TrafficDistributionGroup"], () => require("./trafficDistributionGroup"));

export { UserArgs } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserHierarchyGroupArgs } from "./userHierarchyGroup";
export type UserHierarchyGroup = import("./userHierarchyGroup").UserHierarchyGroup;
export const UserHierarchyGroup: typeof import("./userHierarchyGroup").UserHierarchyGroup = null as any;
utilities.lazyLoad(exports, ["UserHierarchyGroup"], () => require("./userHierarchyGroup"));

export { ViewArgs } from "./view";
export type View = import("./view").View;
export const View: typeof import("./view").View = null as any;
utilities.lazyLoad(exports, ["View"], () => require("./view"));

export { ViewVersionArgs } from "./viewVersion";
export type ViewVersion = import("./viewVersion").ViewVersion;
export const ViewVersion: typeof import("./viewVersion").ViewVersion = null as any;
utilities.lazyLoad(exports, ["ViewVersion"], () => require("./viewVersion"));


// Export enums:
export * from "../types/enums/connect";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:connect:ApprovedOrigin":
                return new ApprovedOrigin(name, <any>undefined, { urn })
            case "aws-native:connect:ContactFlow":
                return new ContactFlow(name, <any>undefined, { urn })
            case "aws-native:connect:ContactFlowModule":
                return new ContactFlowModule(name, <any>undefined, { urn })
            case "aws-native:connect:EvaluationForm":
                return new EvaluationForm(name, <any>undefined, { urn })
            case "aws-native:connect:HoursOfOperation":
                return new HoursOfOperation(name, <any>undefined, { urn })
            case "aws-native:connect:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "aws-native:connect:InstanceStorageConfig":
                return new InstanceStorageConfig(name, <any>undefined, { urn })
            case "aws-native:connect:IntegrationAssociation":
                return new IntegrationAssociation(name, <any>undefined, { urn })
            case "aws-native:connect:PhoneNumber":
                return new PhoneNumber(name, <any>undefined, { urn })
            case "aws-native:connect:Prompt":
                return new Prompt(name, <any>undefined, { urn })
            case "aws-native:connect:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "aws-native:connect:QuickConnect":
                return new QuickConnect(name, <any>undefined, { urn })
            case "aws-native:connect:RoutingProfile":
                return new RoutingProfile(name, <any>undefined, { urn })
            case "aws-native:connect:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "aws-native:connect:SecurityKey":
                return new SecurityKey(name, <any>undefined, { urn })
            case "aws-native:connect:SecurityProfile":
                return new SecurityProfile(name, <any>undefined, { urn })
            case "aws-native:connect:TaskTemplate":
                return new TaskTemplate(name, <any>undefined, { urn })
            case "aws-native:connect:TrafficDistributionGroup":
                return new TrafficDistributionGroup(name, <any>undefined, { urn })
            case "aws-native:connect:User":
                return new User(name, <any>undefined, { urn })
            case "aws-native:connect:UserHierarchyGroup":
                return new UserHierarchyGroup(name, <any>undefined, { urn })
            case "aws-native:connect:View":
                return new View(name, <any>undefined, { urn })
            case "aws-native:connect:ViewVersion":
                return new ViewVersion(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "connect", _module)
