// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Connect::User
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:connect:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * The identifier of the user account in the directory used for identity management.
     */
    public readonly directoryUserId!: pulumi.Output<string | undefined>;
    /**
     * The identifier of the hierarchy group for the user.
     */
    public readonly hierarchyGroupArn!: pulumi.Output<string | undefined>;
    /**
     * The information about the identity of the user.
     */
    public readonly identityInfo!: pulumi.Output<outputs.connect.UserIdentityInfo | undefined>;
    /**
     * The identifier of the Amazon Connect instance.
     */
    public readonly instanceArn!: pulumi.Output<string>;
    /**
     * The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The phone settings for the user.
     */
    public readonly phoneConfig!: pulumi.Output<outputs.connect.UserPhoneConfig>;
    /**
     * The identifier of the routing profile for the user.
     */
    public readonly routingProfileArn!: pulumi.Output<string>;
    /**
     * One or more security profile arns for the user
     */
    public readonly securityProfileArns!: pulumi.Output<string[]>;
    /**
     * One or more tags.
     */
    public readonly tags!: pulumi.Output<outputs.connect.UserTag[] | undefined>;
    /**
     * The Amazon Resource Name (ARN) for the user.
     */
    public /*out*/ readonly userArn!: pulumi.Output<string>;
    /**
     * The user name for the account.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.instanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceArn'");
            }
            if ((!args || args.phoneConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phoneConfig'");
            }
            if ((!args || args.routingProfileArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingProfileArn'");
            }
            if ((!args || args.securityProfileArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityProfileArns'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            inputs["directoryUserId"] = args ? args.directoryUserId : undefined;
            inputs["hierarchyGroupArn"] = args ? args.hierarchyGroupArn : undefined;
            inputs["identityInfo"] = args ? args.identityInfo : undefined;
            inputs["instanceArn"] = args ? args.instanceArn : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["phoneConfig"] = args ? args.phoneConfig : undefined;
            inputs["routingProfileArn"] = args ? args.routingProfileArn : undefined;
            inputs["securityProfileArns"] = args ? args.securityProfileArns : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["userArn"] = undefined /*out*/;
        } else {
            inputs["directoryUserId"] = undefined /*out*/;
            inputs["hierarchyGroupArn"] = undefined /*out*/;
            inputs["identityInfo"] = undefined /*out*/;
            inputs["instanceArn"] = undefined /*out*/;
            inputs["password"] = undefined /*out*/;
            inputs["phoneConfig"] = undefined /*out*/;
            inputs["routingProfileArn"] = undefined /*out*/;
            inputs["securityProfileArns"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["userArn"] = undefined /*out*/;
            inputs["username"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(User.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * The identifier of the user account in the directory used for identity management.
     */
    directoryUserId?: pulumi.Input<string>;
    /**
     * The identifier of the hierarchy group for the user.
     */
    hierarchyGroupArn?: pulumi.Input<string>;
    /**
     * The information about the identity of the user.
     */
    identityInfo?: pulumi.Input<inputs.connect.UserIdentityInfoArgs>;
    /**
     * The identifier of the Amazon Connect instance.
     */
    instanceArn: pulumi.Input<string>;
    /**
     * The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
     */
    password?: pulumi.Input<string>;
    /**
     * The phone settings for the user.
     */
    phoneConfig: pulumi.Input<inputs.connect.UserPhoneConfigArgs>;
    /**
     * The identifier of the routing profile for the user.
     */
    routingProfileArn: pulumi.Input<string>;
    /**
     * One or more security profile arns for the user
     */
    securityProfileArns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.connect.UserTagArgs>[]>;
    /**
     * The user name for the account.
     */
    username: pulumi.Input<string>;
}
