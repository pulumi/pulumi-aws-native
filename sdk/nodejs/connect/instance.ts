// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Connect::Instance
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:connect:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * An instanceArn is automatically generated on creation based on instanceId.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The attributes for the instance.
     */
    public readonly attributes!: pulumi.Output<outputs.connect.InstanceAttributes>;
    /**
     * Timestamp of instance creation logged as part of instance creation.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * Existing directoryId user wants to map to the new Connect instance.
     */
    public readonly directoryId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the type of directory integration for new instance.
     */
    public readonly identityManagementType!: pulumi.Output<enums.connect.InstanceIdentityManagementType>;
    /**
     * Alias of the new directory created as part of new instance creation.
     */
    public readonly instanceAlias!: pulumi.Output<string | undefined>;
    /**
     * Specifies the creation status of new instance.
     */
    public /*out*/ readonly instanceStatus!: pulumi.Output<enums.connect.InstanceStatus>;
    /**
     * Service linked role created as part of instance creation.
     */
    public /*out*/ readonly serviceRole!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.attributes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attributes'");
            }
            if ((!args || args.identityManagementType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityManagementType'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["identityManagementType"] = args ? args.identityManagementType : undefined;
            resourceInputs["instanceAlias"] = args ? args.instanceAlias : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["instanceStatus"] = undefined /*out*/;
            resourceInputs["serviceRole"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["attributes"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["directoryId"] = undefined /*out*/;
            resourceInputs["identityManagementType"] = undefined /*out*/;
            resourceInputs["instanceAlias"] = undefined /*out*/;
            resourceInputs["instanceStatus"] = undefined /*out*/;
            resourceInputs["serviceRole"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["directoryId", "identityManagementType", "instanceAlias"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The attributes for the instance.
     */
    attributes: pulumi.Input<inputs.connect.InstanceAttributesArgs>;
    /**
     * Existing directoryId user wants to map to the new Connect instance.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * Specifies the type of directory integration for new instance.
     */
    identityManagementType: pulumi.Input<enums.connect.InstanceIdentityManagementType>;
    /**
     * Alias of the new directory created as part of new instance creation.
     */
    instanceAlias?: pulumi.Input<string>;
}
