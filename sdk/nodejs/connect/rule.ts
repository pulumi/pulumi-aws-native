// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS:Connect::Rule
 */
export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:connect:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * The list of actions that will be executed when a rule is triggered.
     */
    public readonly actions!: pulumi.Output<outputs.connect.RuleActions>;
    /**
     * The conditions of a rule.
     */
    public readonly function!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the instance.
     */
    public readonly instanceArn!: pulumi.Output<string>;
    /**
     * The name of the rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The publish status of a rule, either draft or published.
     */
    public readonly publishStatus!: pulumi.Output<enums.connect.RulePublishStatus>;
    /**
     * The Amazon Resource Name (ARN) of the rule.
     */
    public /*out*/ readonly ruleArn!: pulumi.Output<string>;
    /**
     * One or more tags.
     */
    public readonly tags!: pulumi.Output<outputs.connect.RuleTag[] | undefined>;
    /**
     * The event source that triggers the rule.
     */
    public readonly triggerEventSource!: pulumi.Output<outputs.connect.RuleTriggerEventSource>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.function === undefined) && !opts.urn) {
                throw new Error("Missing required property 'function'");
            }
            if ((!args || args.instanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceArn'");
            }
            if ((!args || args.publishStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publishStatus'");
            }
            if ((!args || args.triggerEventSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerEventSource'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["function"] = args ? args.function : undefined;
            resourceInputs["instanceArn"] = args ? args.instanceArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publishStatus"] = args ? args.publishStatus : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["triggerEventSource"] = args ? args.triggerEventSource : undefined;
            resourceInputs["ruleArn"] = undefined /*out*/;
        } else {
            resourceInputs["actions"] = undefined /*out*/;
            resourceInputs["function"] = undefined /*out*/;
            resourceInputs["instanceArn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["publishStatus"] = undefined /*out*/;
            resourceInputs["ruleArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["triggerEventSource"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["instanceArn", "triggerEventSource"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Rule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * The list of actions that will be executed when a rule is triggered.
     */
    actions: pulumi.Input<inputs.connect.RuleActionsArgs>;
    /**
     * The conditions of a rule.
     */
    function: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the instance.
     */
    instanceArn: pulumi.Input<string>;
    /**
     * The name of the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The publish status of a rule, either draft or published.
     */
    publishStatus: pulumi.Input<enums.connect.RulePublishStatus>;
    /**
     * One or more tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.connect.RuleTagArgs>[]>;
    /**
     * The event source that triggers the rule.
     */
    triggerEventSource: pulumi.Input<inputs.connect.RuleTriggerEventSourceArgs>;
}
