// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Connect::RoutingProfile
 */
export class RoutingProfile extends pulumi.CustomResource {
    /**
     * Get an existing RoutingProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RoutingProfile {
        return new RoutingProfile(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:connect:RoutingProfile';

    /**
     * Returns true if the given object is an instance of RoutingProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoutingProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutingProfile.__pulumiType;
    }

    /**
     * Whether agents with this routing profile will have their routing order calculated based on longest idle time or time since their last inbound contact.
     */
    public readonly agentAvailabilityTimer!: pulumi.Output<enums.connect.RoutingProfileAgentAvailabilityTimer | undefined>;
    /**
     * The identifier of the default outbound queue for this routing profile.
     */
    public readonly defaultOutboundQueueArn!: pulumi.Output<string>;
    /**
     * The description of the routing profile.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The identifier of the Amazon Connect instance.
     */
    public readonly instanceArn!: pulumi.Output<string>;
    /**
     * The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.
     */
    public readonly mediaConcurrencies!: pulumi.Output<outputs.connect.RoutingProfileMediaConcurrency[]>;
    /**
     * The name of the routing profile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The queues to associate with this routing profile.
     */
    public readonly queueConfigs!: pulumi.Output<outputs.connect.RoutingProfileQueueConfig[] | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the routing profile.
     */
    public /*out*/ readonly routingProfileArn!: pulumi.Output<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly tags!: pulumi.Output<outputs.connect.RoutingProfileTag[] | undefined>;

    /**
     * Create a RoutingProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutingProfileArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.defaultOutboundQueueArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultOutboundQueueArn'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.instanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceArn'");
            }
            if ((!args || args.mediaConcurrencies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaConcurrencies'");
            }
            resourceInputs["agentAvailabilityTimer"] = args ? args.agentAvailabilityTimer : undefined;
            resourceInputs["defaultOutboundQueueArn"] = args ? args.defaultOutboundQueueArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceArn"] = args ? args.instanceArn : undefined;
            resourceInputs["mediaConcurrencies"] = args ? args.mediaConcurrencies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queueConfigs"] = args ? args.queueConfigs : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["routingProfileArn"] = undefined /*out*/;
        } else {
            resourceInputs["agentAvailabilityTimer"] = undefined /*out*/;
            resourceInputs["defaultOutboundQueueArn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["instanceArn"] = undefined /*out*/;
            resourceInputs["mediaConcurrencies"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["queueConfigs"] = undefined /*out*/;
            resourceInputs["routingProfileArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoutingProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RoutingProfile resource.
 */
export interface RoutingProfileArgs {
    /**
     * Whether agents with this routing profile will have their routing order calculated based on longest idle time or time since their last inbound contact.
     */
    agentAvailabilityTimer?: pulumi.Input<enums.connect.RoutingProfileAgentAvailabilityTimer>;
    /**
     * The identifier of the default outbound queue for this routing profile.
     */
    defaultOutboundQueueArn: pulumi.Input<string>;
    /**
     * The description of the routing profile.
     */
    description: pulumi.Input<string>;
    /**
     * The identifier of the Amazon Connect instance.
     */
    instanceArn: pulumi.Input<string>;
    /**
     * The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.
     */
    mediaConcurrencies: pulumi.Input<pulumi.Input<inputs.connect.RoutingProfileMediaConcurrencyArgs>[]>;
    /**
     * The name of the routing profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The queues to associate with this routing profile.
     */
    queueConfigs?: pulumi.Input<pulumi.Input<inputs.connect.RoutingProfileQueueConfigArgs>[]>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.connect.RoutingProfileTagArgs>[]>;
}
