// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Connect::InstanceStorageConfig
 */
export class InstanceStorageConfig extends pulumi.CustomResource {
    /**
     * Get an existing InstanceStorageConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): InstanceStorageConfig {
        return new InstanceStorageConfig(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:connect:InstanceStorageConfig';

    /**
     * Returns true if the given object is an instance of InstanceStorageConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceStorageConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceStorageConfig.__pulumiType;
    }

    public /*out*/ readonly associationId!: pulumi.Output<string>;
    /**
     * Connect Instance ID with which the storage config will be associated
     */
    public readonly instanceArn!: pulumi.Output<string>;
    public readonly kinesisFirehoseConfig!: pulumi.Output<outputs.connect.InstanceStorageConfigKinesisFirehoseConfig | undefined>;
    public readonly kinesisStreamConfig!: pulumi.Output<outputs.connect.InstanceStorageConfigKinesisStreamConfig | undefined>;
    public readonly kinesisVideoStreamConfig!: pulumi.Output<outputs.connect.InstanceStorageConfigKinesisVideoStreamConfig | undefined>;
    public readonly resourceType!: pulumi.Output<enums.connect.InstanceStorageConfigInstanceStorageResourceType>;
    public readonly s3Config!: pulumi.Output<outputs.connect.InstanceStorageConfigS3Config | undefined>;
    public readonly storageType!: pulumi.Output<enums.connect.InstanceStorageConfigStorageType>;

    /**
     * Create a InstanceStorageConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceStorageConfigArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.instanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceArn'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["instanceArn"] = args ? args.instanceArn : undefined;
            resourceInputs["kinesisFirehoseConfig"] = args ? args.kinesisFirehoseConfig : undefined;
            resourceInputs["kinesisStreamConfig"] = args ? args.kinesisStreamConfig : undefined;
            resourceInputs["kinesisVideoStreamConfig"] = args ? args.kinesisVideoStreamConfig : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["s3Config"] = args ? args.s3Config : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["associationId"] = undefined /*out*/;
        } else {
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["instanceArn"] = undefined /*out*/;
            resourceInputs["kinesisFirehoseConfig"] = undefined /*out*/;
            resourceInputs["kinesisStreamConfig"] = undefined /*out*/;
            resourceInputs["kinesisVideoStreamConfig"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["s3Config"] = undefined /*out*/;
            resourceInputs["storageType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["instanceArn", "resourceType"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(InstanceStorageConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a InstanceStorageConfig resource.
 */
export interface InstanceStorageConfigArgs {
    /**
     * Connect Instance ID with which the storage config will be associated
     */
    instanceArn: pulumi.Input<string>;
    kinesisFirehoseConfig?: pulumi.Input<inputs.connect.InstanceStorageConfigKinesisFirehoseConfigArgs>;
    kinesisStreamConfig?: pulumi.Input<inputs.connect.InstanceStorageConfigKinesisStreamConfigArgs>;
    kinesisVideoStreamConfig?: pulumi.Input<inputs.connect.InstanceStorageConfigKinesisVideoStreamConfigArgs>;
    resourceType: pulumi.Input<enums.connect.InstanceStorageConfigInstanceStorageResourceType>;
    s3Config?: pulumi.Input<inputs.connect.InstanceStorageConfigS3ConfigArgs>;
    storageType: pulumi.Input<enums.connect.InstanceStorageConfigStorageType>;
}
