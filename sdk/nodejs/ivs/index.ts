// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ChannelArgs } from "./channel";
export type Channel = import("./channel").Channel;
export const Channel: typeof import("./channel").Channel = null as any;
utilities.lazyLoad(exports, ["Channel"], () => require("./channel"));

export { EncoderConfigurationArgs } from "./encoderConfiguration";
export type EncoderConfiguration = import("./encoderConfiguration").EncoderConfiguration;
export const EncoderConfiguration: typeof import("./encoderConfiguration").EncoderConfiguration = null as any;
utilities.lazyLoad(exports, ["EncoderConfiguration"], () => require("./encoderConfiguration"));

export { GetChannelArgs, GetChannelResult, GetChannelOutputArgs } from "./getChannel";
export const getChannel: typeof import("./getChannel").getChannel = null as any;
export const getChannelOutput: typeof import("./getChannel").getChannelOutput = null as any;
utilities.lazyLoad(exports, ["getChannel","getChannelOutput"], () => require("./getChannel"));

export { GetEncoderConfigurationArgs, GetEncoderConfigurationResult, GetEncoderConfigurationOutputArgs } from "./getEncoderConfiguration";
export const getEncoderConfiguration: typeof import("./getEncoderConfiguration").getEncoderConfiguration = null as any;
export const getEncoderConfigurationOutput: typeof import("./getEncoderConfiguration").getEncoderConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getEncoderConfiguration","getEncoderConfigurationOutput"], () => require("./getEncoderConfiguration"));

export { GetPlaybackKeyPairArgs, GetPlaybackKeyPairResult, GetPlaybackKeyPairOutputArgs } from "./getPlaybackKeyPair";
export const getPlaybackKeyPair: typeof import("./getPlaybackKeyPair").getPlaybackKeyPair = null as any;
export const getPlaybackKeyPairOutput: typeof import("./getPlaybackKeyPair").getPlaybackKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getPlaybackKeyPair","getPlaybackKeyPairOutput"], () => require("./getPlaybackKeyPair"));

export { GetPlaybackRestrictionPolicyArgs, GetPlaybackRestrictionPolicyResult, GetPlaybackRestrictionPolicyOutputArgs } from "./getPlaybackRestrictionPolicy";
export const getPlaybackRestrictionPolicy: typeof import("./getPlaybackRestrictionPolicy").getPlaybackRestrictionPolicy = null as any;
export const getPlaybackRestrictionPolicyOutput: typeof import("./getPlaybackRestrictionPolicy").getPlaybackRestrictionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPlaybackRestrictionPolicy","getPlaybackRestrictionPolicyOutput"], () => require("./getPlaybackRestrictionPolicy"));

export { GetRecordingConfigurationArgs, GetRecordingConfigurationResult, GetRecordingConfigurationOutputArgs } from "./getRecordingConfiguration";
export const getRecordingConfiguration: typeof import("./getRecordingConfiguration").getRecordingConfiguration = null as any;
export const getRecordingConfigurationOutput: typeof import("./getRecordingConfiguration").getRecordingConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getRecordingConfiguration","getRecordingConfigurationOutput"], () => require("./getRecordingConfiguration"));

export { GetStageArgs, GetStageResult, GetStageOutputArgs } from "./getStage";
export const getStage: typeof import("./getStage").getStage = null as any;
export const getStageOutput: typeof import("./getStage").getStageOutput = null as any;
utilities.lazyLoad(exports, ["getStage","getStageOutput"], () => require("./getStage"));

export { GetStorageConfigurationArgs, GetStorageConfigurationResult, GetStorageConfigurationOutputArgs } from "./getStorageConfiguration";
export const getStorageConfiguration: typeof import("./getStorageConfiguration").getStorageConfiguration = null as any;
export const getStorageConfigurationOutput: typeof import("./getStorageConfiguration").getStorageConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getStorageConfiguration","getStorageConfigurationOutput"], () => require("./getStorageConfiguration"));

export { GetStreamKeyArgs, GetStreamKeyResult, GetStreamKeyOutputArgs } from "./getStreamKey";
export const getStreamKey: typeof import("./getStreamKey").getStreamKey = null as any;
export const getStreamKeyOutput: typeof import("./getStreamKey").getStreamKeyOutput = null as any;
utilities.lazyLoad(exports, ["getStreamKey","getStreamKeyOutput"], () => require("./getStreamKey"));

export { PlaybackKeyPairArgs } from "./playbackKeyPair";
export type PlaybackKeyPair = import("./playbackKeyPair").PlaybackKeyPair;
export const PlaybackKeyPair: typeof import("./playbackKeyPair").PlaybackKeyPair = null as any;
utilities.lazyLoad(exports, ["PlaybackKeyPair"], () => require("./playbackKeyPair"));

export { PlaybackRestrictionPolicyArgs } from "./playbackRestrictionPolicy";
export type PlaybackRestrictionPolicy = import("./playbackRestrictionPolicy").PlaybackRestrictionPolicy;
export const PlaybackRestrictionPolicy: typeof import("./playbackRestrictionPolicy").PlaybackRestrictionPolicy = null as any;
utilities.lazyLoad(exports, ["PlaybackRestrictionPolicy"], () => require("./playbackRestrictionPolicy"));

export { RecordingConfigurationArgs } from "./recordingConfiguration";
export type RecordingConfiguration = import("./recordingConfiguration").RecordingConfiguration;
export const RecordingConfiguration: typeof import("./recordingConfiguration").RecordingConfiguration = null as any;
utilities.lazyLoad(exports, ["RecordingConfiguration"], () => require("./recordingConfiguration"));

export { StageArgs } from "./stage";
export type Stage = import("./stage").Stage;
export const Stage: typeof import("./stage").Stage = null as any;
utilities.lazyLoad(exports, ["Stage"], () => require("./stage"));

export { StorageConfigurationArgs } from "./storageConfiguration";
export type StorageConfiguration = import("./storageConfiguration").StorageConfiguration;
export const StorageConfiguration: typeof import("./storageConfiguration").StorageConfiguration = null as any;
utilities.lazyLoad(exports, ["StorageConfiguration"], () => require("./storageConfiguration"));

export { StreamKeyArgs } from "./streamKey";
export type StreamKey = import("./streamKey").StreamKey;
export const StreamKey: typeof import("./streamKey").StreamKey = null as any;
utilities.lazyLoad(exports, ["StreamKey"], () => require("./streamKey"));


// Export enums:
export * from "../types/enums/ivs";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:ivs:Channel":
                return new Channel(name, <any>undefined, { urn })
            case "aws-native:ivs:EncoderConfiguration":
                return new EncoderConfiguration(name, <any>undefined, { urn })
            case "aws-native:ivs:PlaybackKeyPair":
                return new PlaybackKeyPair(name, <any>undefined, { urn })
            case "aws-native:ivs:PlaybackRestrictionPolicy":
                return new PlaybackRestrictionPolicy(name, <any>undefined, { urn })
            case "aws-native:ivs:RecordingConfiguration":
                return new RecordingConfiguration(name, <any>undefined, { urn })
            case "aws-native:ivs:Stage":
                return new Stage(name, <any>undefined, { urn })
            case "aws-native:ivs:StorageConfiguration":
                return new StorageConfiguration(name, <any>undefined, { urn })
            case "aws-native:ivs:StreamKey":
                return new StreamKey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "ivs", _module)
