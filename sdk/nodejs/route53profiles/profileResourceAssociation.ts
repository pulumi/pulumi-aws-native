// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Route53Profiles::ProfileResourceAssociation
 */
export class ProfileResourceAssociation extends pulumi.CustomResource {
    /**
     * Get an existing ProfileResourceAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ProfileResourceAssociation {
        return new ProfileResourceAssociation(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:route53profiles:ProfileResourceAssociation';

    /**
     * Returns true if the given object is an instance of ProfileResourceAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfileResourceAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfileResourceAssociation.__pulumiType;
    }

    /**
     * Primary Identifier for  Profile Resource Association
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * The name of an association between the  Profile and resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the  profile that you associated the resource to that is specified by ResourceArn.
     */
    public readonly profileId!: pulumi.Output<string>;
    /**
     * The arn of the resource that you associated to the  Profile.
     */
    public readonly resourceArn!: pulumi.Output<string>;
    /**
     * A JSON-formatted string with key-value pairs specifying the properties of the associated resource.
     */
    public readonly resourceProperties!: pulumi.Output<string | undefined>;
    /**
     * The type of the resource associated to the  Profile.
     */
    public /*out*/ readonly resourceType!: pulumi.Output<string>;

    /**
     * Create a ProfileResourceAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileResourceAssociationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.profileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            if (args?.resourceArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceArn'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["profileId"] = args?.profileId;
            resourceInputs["resourceArn"] = args?.resourceArn;
            resourceInputs["resourceProperties"] = args?.resourceProperties;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
        } else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["profileId"] = undefined /*out*/;
            resourceInputs["resourceArn"] = undefined /*out*/;
            resourceInputs["resourceProperties"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "profileId", "resourceArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ProfileResourceAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ProfileResourceAssociation resource.
 */
export interface ProfileResourceAssociationArgs {
    /**
     * The name of an association between the  Profile and resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the  profile that you associated the resource to that is specified by ResourceArn.
     */
    profileId: pulumi.Input<string>;
    /**
     * The arn of the resource that you associated to the  Profile.
     */
    resourceArn: pulumi.Input<string>;
    /**
     * A JSON-formatted string with key-value pairs specifying the properties of the associated resource.
     */
    resourceProperties?: pulumi.Input<string>;
}
