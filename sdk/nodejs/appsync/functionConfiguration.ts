// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::AppSync::FunctionConfiguration
 *
 * @deprecated FunctionConfiguration is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class FunctionConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing FunctionConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): FunctionConfiguration {
        pulumi.log.warn("FunctionConfiguration is deprecated: FunctionConfiguration is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new FunctionConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:appsync:FunctionConfiguration';

    /**
     * Returns true if the given object is an instance of FunctionConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionConfiguration.__pulumiType;
    }

    public readonly apiId!: pulumi.Output<string>;
    public readonly dataSourceName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly functionArn!: pulumi.Output<string>;
    public /*out*/ readonly functionId!: pulumi.Output<string>;
    public readonly functionVersion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly requestMappingTemplate!: pulumi.Output<string | undefined>;
    public readonly requestMappingTemplateS3Location!: pulumi.Output<string | undefined>;
    public readonly responseMappingTemplate!: pulumi.Output<string | undefined>;
    public readonly responseMappingTemplateS3Location!: pulumi.Output<string | undefined>;
    public readonly syncConfig!: pulumi.Output<outputs.appsync.FunctionConfigurationSyncConfig | undefined>;

    /**
     * Create a FunctionConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated FunctionConfiguration is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: FunctionConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("FunctionConfiguration is deprecated: FunctionConfiguration is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.dataSourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceName'");
            }
            if ((!args || args.functionVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionVersion'");
            }
            inputs["apiId"] = args ? args.apiId : undefined;
            inputs["dataSourceName"] = args ? args.dataSourceName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["functionVersion"] = args ? args.functionVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["requestMappingTemplate"] = args ? args.requestMappingTemplate : undefined;
            inputs["requestMappingTemplateS3Location"] = args ? args.requestMappingTemplateS3Location : undefined;
            inputs["responseMappingTemplate"] = args ? args.responseMappingTemplate : undefined;
            inputs["responseMappingTemplateS3Location"] = args ? args.responseMappingTemplateS3Location : undefined;
            inputs["syncConfig"] = args ? args.syncConfig : undefined;
            inputs["functionArn"] = undefined /*out*/;
            inputs["functionId"] = undefined /*out*/;
        } else {
            inputs["apiId"] = undefined /*out*/;
            inputs["dataSourceName"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["functionArn"] = undefined /*out*/;
            inputs["functionId"] = undefined /*out*/;
            inputs["functionVersion"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["requestMappingTemplate"] = undefined /*out*/;
            inputs["requestMappingTemplateS3Location"] = undefined /*out*/;
            inputs["responseMappingTemplate"] = undefined /*out*/;
            inputs["responseMappingTemplateS3Location"] = undefined /*out*/;
            inputs["syncConfig"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FunctionConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a FunctionConfiguration resource.
 */
export interface FunctionConfigurationArgs {
    apiId: pulumi.Input<string>;
    dataSourceName: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    functionVersion: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    requestMappingTemplate?: pulumi.Input<string>;
    requestMappingTemplateS3Location?: pulumi.Input<string>;
    responseMappingTemplate?: pulumi.Input<string>;
    responseMappingTemplateS3Location?: pulumi.Input<string>;
    syncConfig?: pulumi.Input<inputs.appsync.FunctionConfigurationSyncConfigArgs>;
}
