// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiCacheArgs } from "./apiCache";
export type ApiCache = import("./apiCache").ApiCache;
export const ApiCache: typeof import("./apiCache").ApiCache = null as any;
utilities.lazyLoad(exports, ["ApiCache"], () => require("./apiCache"));

export { ApiKeyArgs } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { DataSourceArgs } from "./dataSource";
export type DataSource = import("./dataSource").DataSource;
export const DataSource: typeof import("./dataSource").DataSource = null as any;
utilities.lazyLoad(exports, ["DataSource"], () => require("./dataSource"));

export { DomainNameArgs } from "./domainName";
export type DomainName = import("./domainName").DomainName;
export const DomainName: typeof import("./domainName").DomainName = null as any;
utilities.lazyLoad(exports, ["DomainName"], () => require("./domainName"));

export { DomainNameApiAssociationArgs } from "./domainNameApiAssociation";
export type DomainNameApiAssociation = import("./domainNameApiAssociation").DomainNameApiAssociation;
export const DomainNameApiAssociation: typeof import("./domainNameApiAssociation").DomainNameApiAssociation = null as any;
utilities.lazyLoad(exports, ["DomainNameApiAssociation"], () => require("./domainNameApiAssociation"));

export { FunctionConfigurationArgs } from "./functionConfiguration";
export type FunctionConfiguration = import("./functionConfiguration").FunctionConfiguration;
export const FunctionConfiguration: typeof import("./functionConfiguration").FunctionConfiguration = null as any;
utilities.lazyLoad(exports, ["FunctionConfiguration"], () => require("./functionConfiguration"));

export { GetApiCacheArgs, GetApiCacheResult, GetApiCacheOutputArgs } from "./getApiCache";
export const getApiCache: typeof import("./getApiCache").getApiCache = null as any;
export const getApiCacheOutput: typeof import("./getApiCache").getApiCacheOutput = null as any;
utilities.lazyLoad(exports, ["getApiCache","getApiCacheOutput"], () => require("./getApiCache"));

export { GetApiKeyArgs, GetApiKeyResult, GetApiKeyOutputArgs } from "./getApiKey";
export const getApiKey: typeof import("./getApiKey").getApiKey = null as any;
export const getApiKeyOutput: typeof import("./getApiKey").getApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getApiKey","getApiKeyOutput"], () => require("./getApiKey"));

export { GetDataSourceArgs, GetDataSourceResult, GetDataSourceOutputArgs } from "./getDataSource";
export const getDataSource: typeof import("./getDataSource").getDataSource = null as any;
export const getDataSourceOutput: typeof import("./getDataSource").getDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getDataSource","getDataSourceOutput"], () => require("./getDataSource"));

export { GetDomainNameArgs, GetDomainNameResult, GetDomainNameOutputArgs } from "./getDomainName";
export const getDomainName: typeof import("./getDomainName").getDomainName = null as any;
export const getDomainNameOutput: typeof import("./getDomainName").getDomainNameOutput = null as any;
utilities.lazyLoad(exports, ["getDomainName","getDomainNameOutput"], () => require("./getDomainName"));

export { GetDomainNameApiAssociationArgs, GetDomainNameApiAssociationResult, GetDomainNameApiAssociationOutputArgs } from "./getDomainNameApiAssociation";
export const getDomainNameApiAssociation: typeof import("./getDomainNameApiAssociation").getDomainNameApiAssociation = null as any;
export const getDomainNameApiAssociationOutput: typeof import("./getDomainNameApiAssociation").getDomainNameApiAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getDomainNameApiAssociation","getDomainNameApiAssociationOutput"], () => require("./getDomainNameApiAssociation"));

export { GetFunctionConfigurationArgs, GetFunctionConfigurationResult, GetFunctionConfigurationOutputArgs } from "./getFunctionConfiguration";
export const getFunctionConfiguration: typeof import("./getFunctionConfiguration").getFunctionConfiguration = null as any;
export const getFunctionConfigurationOutput: typeof import("./getFunctionConfiguration").getFunctionConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionConfiguration","getFunctionConfigurationOutput"], () => require("./getFunctionConfiguration"));

export { GetGraphQlApiArgs, GetGraphQlApiResult, GetGraphQlApiOutputArgs } from "./getGraphQlApi";
export const getGraphQlApi: typeof import("./getGraphQlApi").getGraphQlApi = null as any;
export const getGraphQlApiOutput: typeof import("./getGraphQlApi").getGraphQlApiOutput = null as any;
utilities.lazyLoad(exports, ["getGraphQlApi","getGraphQlApiOutput"], () => require("./getGraphQlApi"));

export { GetGraphQlSchemaArgs, GetGraphQlSchemaResult, GetGraphQlSchemaOutputArgs } from "./getGraphQlSchema";
export const getGraphQlSchema: typeof import("./getGraphQlSchema").getGraphQlSchema = null as any;
export const getGraphQlSchemaOutput: typeof import("./getGraphQlSchema").getGraphQlSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getGraphQlSchema","getGraphQlSchemaOutput"], () => require("./getGraphQlSchema"));

export { GetResolverArgs, GetResolverResult, GetResolverOutputArgs } from "./getResolver";
export const getResolver: typeof import("./getResolver").getResolver = null as any;
export const getResolverOutput: typeof import("./getResolver").getResolverOutput = null as any;
utilities.lazyLoad(exports, ["getResolver","getResolverOutput"], () => require("./getResolver"));

export { GetSourceApiAssociationArgs, GetSourceApiAssociationResult, GetSourceApiAssociationOutputArgs } from "./getSourceApiAssociation";
export const getSourceApiAssociation: typeof import("./getSourceApiAssociation").getSourceApiAssociation = null as any;
export const getSourceApiAssociationOutput: typeof import("./getSourceApiAssociation").getSourceApiAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getSourceApiAssociation","getSourceApiAssociationOutput"], () => require("./getSourceApiAssociation"));

export { GraphQlApiArgs } from "./graphQlApi";
export type GraphQlApi = import("./graphQlApi").GraphQlApi;
export const GraphQlApi: typeof import("./graphQlApi").GraphQlApi = null as any;
utilities.lazyLoad(exports, ["GraphQlApi"], () => require("./graphQlApi"));

export { GraphQlSchemaArgs } from "./graphQlSchema";
export type GraphQlSchema = import("./graphQlSchema").GraphQlSchema;
export const GraphQlSchema: typeof import("./graphQlSchema").GraphQlSchema = null as any;
utilities.lazyLoad(exports, ["GraphQlSchema"], () => require("./graphQlSchema"));

export { ResolverArgs } from "./resolver";
export type Resolver = import("./resolver").Resolver;
export const Resolver: typeof import("./resolver").Resolver = null as any;
utilities.lazyLoad(exports, ["Resolver"], () => require("./resolver"));

export { SourceApiAssociationArgs } from "./sourceApiAssociation";
export type SourceApiAssociation = import("./sourceApiAssociation").SourceApiAssociation;
export const SourceApiAssociation: typeof import("./sourceApiAssociation").SourceApiAssociation = null as any;
utilities.lazyLoad(exports, ["SourceApiAssociation"], () => require("./sourceApiAssociation"));


// Export enums:
export * from "../types/enums/appsync";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:appsync:ApiCache":
                return new ApiCache(name, <any>undefined, { urn })
            case "aws-native:appsync:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "aws-native:appsync:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "aws-native:appsync:DomainName":
                return new DomainName(name, <any>undefined, { urn })
            case "aws-native:appsync:DomainNameApiAssociation":
                return new DomainNameApiAssociation(name, <any>undefined, { urn })
            case "aws-native:appsync:FunctionConfiguration":
                return new FunctionConfiguration(name, <any>undefined, { urn })
            case "aws-native:appsync:GraphQlApi":
                return new GraphQlApi(name, <any>undefined, { urn })
            case "aws-native:appsync:GraphQlSchema":
                return new GraphQlSchema(name, <any>undefined, { urn })
            case "aws-native:appsync:Resolver":
                return new Resolver(name, <any>undefined, { urn })
            case "aws-native:appsync:SourceApiAssociation":
                return new SourceApiAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "appsync", _module)
