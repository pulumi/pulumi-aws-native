// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AppSync ChannelNamespace
 */
export class ChannelNamespace extends pulumi.CustomResource {
    /**
     * Get an existing ChannelNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ChannelNamespace {
        return new ChannelNamespace(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:appsync:ChannelNamespace';

    /**
     * Returns true if the given object is an instance of ChannelNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ChannelNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChannelNamespace.__pulumiType;
    }

    /**
     * AppSync Api Id that this Channel Namespace belongs to.
     */
    public readonly apiId!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the channel namespace.
     */
    public /*out*/ readonly channelNamespaceArn!: pulumi.Output<string>;
    /**
     * The event handler functions that run custom business logic to process published events and subscribe requests.
     */
    public readonly codeHandlers!: pulumi.Output<string | undefined>;
    /**
     * The Amazon S3 endpoint where the code is located.
     */
    public readonly codeS3Location!: pulumi.Output<string | undefined>;
    /**
     * The name of the channel namespace. This name must be unique within the `Api` .
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of AuthModes supported for Publish operations.
     */
    public readonly publishAuthModes!: pulumi.Output<outputs.appsync.ChannelNamespaceAuthMode[] | undefined>;
    /**
     * List of AuthModes supported for Subscribe operations.
     */
    public readonly subscribeAuthModes!: pulumi.Output<outputs.appsync.ChannelNamespaceAuthMode[] | undefined>;
    /**
     * A set of tags (key-value pairs) for this channel namespace.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a ChannelNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChannelNamespaceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["codeHandlers"] = args ? args.codeHandlers : undefined;
            resourceInputs["codeS3Location"] = args ? args.codeS3Location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publishAuthModes"] = args ? args.publishAuthModes : undefined;
            resourceInputs["subscribeAuthModes"] = args ? args.subscribeAuthModes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["channelNamespaceArn"] = undefined /*out*/;
        } else {
            resourceInputs["apiId"] = undefined /*out*/;
            resourceInputs["channelNamespaceArn"] = undefined /*out*/;
            resourceInputs["codeHandlers"] = undefined /*out*/;
            resourceInputs["codeS3Location"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["publishAuthModes"] = undefined /*out*/;
            resourceInputs["subscribeAuthModes"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["apiId", "name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(ChannelNamespace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ChannelNamespace resource.
 */
export interface ChannelNamespaceArgs {
    /**
     * AppSync Api Id that this Channel Namespace belongs to.
     */
    apiId: pulumi.Input<string>;
    /**
     * The event handler functions that run custom business logic to process published events and subscribe requests.
     */
    codeHandlers?: pulumi.Input<string>;
    /**
     * The Amazon S3 endpoint where the code is located.
     */
    codeS3Location?: pulumi.Input<string>;
    /**
     * The name of the channel namespace. This name must be unique within the `Api` .
     */
    name?: pulumi.Input<string>;
    /**
     * List of AuthModes supported for Publish operations.
     */
    publishAuthModes?: pulumi.Input<pulumi.Input<inputs.appsync.ChannelNamespaceAuthModeArgs>[]>;
    /**
     * List of AuthModes supported for Subscribe operations.
     */
    subscribeAuthModes?: pulumi.Input<pulumi.Input<inputs.appsync.ChannelNamespaceAuthModeArgs>[]>;
    /**
     * A set of tags (key-value pairs) for this channel namespace.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
