// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::CodeStarNotifications::NotificationRule
 */
export class NotificationRule extends pulumi.CustomResource {
    /**
     * Get an existing NotificationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): NotificationRule {
        return new NotificationRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:codestarnotifications:NotificationRule';

    /**
     * Returns true if the given object is an instance of NotificationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationRule.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly createdBy!: pulumi.Output<string | undefined>;
    public readonly detailType!: pulumi.Output<enums.codestarnotifications.NotificationRuleDetailType>;
    public readonly eventTypeId!: pulumi.Output<string | undefined>;
    public readonly eventTypeIds!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly resource!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<enums.codestarnotifications.NotificationRuleStatus | undefined>;
    public readonly tags!: pulumi.Output<any | undefined>;
    public readonly targetAddress!: pulumi.Output<string | undefined>;
    public readonly targets!: pulumi.Output<outputs.codestarnotifications.NotificationRuleTarget[]>;

    /**
     * Create a NotificationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationRuleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.detailType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'detailType'");
            }
            if ((!args || args.eventTypeIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventTypeIds'");
            }
            if ((!args || args.resource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["detailType"] = args ? args.detailType : undefined;
            resourceInputs["eventTypeId"] = args ? args.eventTypeId : undefined;
            resourceInputs["eventTypeIds"] = args ? args.eventTypeIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetAddress"] = args ? args.targetAddress : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["detailType"] = undefined /*out*/;
            resourceInputs["eventTypeId"] = undefined /*out*/;
            resourceInputs["eventTypeIds"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["resource"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["targetAddress"] = undefined /*out*/;
            resourceInputs["targets"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a NotificationRule resource.
 */
export interface NotificationRuleArgs {
    createdBy?: pulumi.Input<string>;
    detailType: pulumi.Input<enums.codestarnotifications.NotificationRuleDetailType>;
    eventTypeId?: pulumi.Input<string>;
    eventTypeIds: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    resource: pulumi.Input<string>;
    status?: pulumi.Input<enums.codestarnotifications.NotificationRuleStatus>;
    tags?: any;
    targetAddress?: pulumi.Input<string>;
    targets: pulumi.Input<pulumi.Input<inputs.codestarnotifications.NotificationRuleTargetArgs>[]>;
}
