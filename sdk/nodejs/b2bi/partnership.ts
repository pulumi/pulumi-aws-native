// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::B2BI::Partnership Resource Type
 */
export class Partnership extends pulumi.CustomResource {
    /**
     * Get an existing Partnership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Partnership {
        return new Partnership(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:b2bi:Partnership';

    /**
     * Returns true if the given object is an instance of Partnership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Partnership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Partnership.__pulumiType;
    }

    /**
     * Returns one or more capabilities associated with this partnership.
     */
    declare public readonly capabilities: pulumi.Output<string[]>;
    /**
     * Contains the details for an Outbound EDI capability.
     */
    declare public readonly capabilityOptions: pulumi.Output<outputs.b2bi.PartnershipCapabilityOptions | undefined>;
    /**
     * Returns a timestamp for creation date and time of the partnership.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Specifies the email address associated with this trading partner.
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * Returns a timestamp that identifies the most recent date and time that the partnership was modified.
     */
    declare public /*out*/ readonly modifiedAt: pulumi.Output<string>;
    /**
     * Returns the name of the partnership.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Returns an Amazon Resource Name (ARN) for a specific AWS resource, such as a capability, partnership, profile, or transformer.
     */
    declare public /*out*/ readonly partnershipArn: pulumi.Output<string>;
    /**
     * Returns the unique, system-generated identifier for a partnership.
     */
    declare public /*out*/ readonly partnershipId: pulumi.Output<string>;
    /**
     * Specifies the phone number associated with the partnership.
     */
    declare public readonly phone: pulumi.Output<string | undefined>;
    /**
     * Returns the unique, system-generated identifier for the profile connected to this partnership.
     */
    declare public readonly profileId: pulumi.Output<string>;
    /**
     * A key-value pair for a specific partnership. Tags are metadata that you can use to search for and group capabilities for various purposes.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Returns the unique, system-generated identifier for a trading partner.
     */
    declare public /*out*/ readonly tradingPartnerId: pulumi.Output<string>;

    /**
     * Create a Partnership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartnershipArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.capabilities === undefined && !opts.urn) {
                throw new Error("Missing required property 'capabilities'");
            }
            if (args?.email === undefined && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if (args?.profileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            resourceInputs["capabilities"] = args?.capabilities;
            resourceInputs["capabilityOptions"] = args?.capabilityOptions;
            resourceInputs["email"] = args?.email;
            resourceInputs["name"] = args?.name;
            resourceInputs["phone"] = args?.phone;
            resourceInputs["profileId"] = args?.profileId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["partnershipArn"] = undefined /*out*/;
            resourceInputs["partnershipId"] = undefined /*out*/;
            resourceInputs["tradingPartnerId"] = undefined /*out*/;
        } else {
            resourceInputs["capabilities"] = undefined /*out*/;
            resourceInputs["capabilityOptions"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["email"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["partnershipArn"] = undefined /*out*/;
            resourceInputs["partnershipId"] = undefined /*out*/;
            resourceInputs["phone"] = undefined /*out*/;
            resourceInputs["profileId"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["tradingPartnerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["email", "phone", "profileId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Partnership.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Partnership resource.
 */
export interface PartnershipArgs {
    /**
     * Returns one or more capabilities associated with this partnership.
     */
    capabilities: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Contains the details for an Outbound EDI capability.
     */
    capabilityOptions?: pulumi.Input<inputs.b2bi.PartnershipCapabilityOptionsArgs>;
    /**
     * Specifies the email address associated with this trading partner.
     */
    email: pulumi.Input<string>;
    /**
     * Returns the name of the partnership.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the phone number associated with the partnership.
     */
    phone?: pulumi.Input<string>;
    /**
     * Returns the unique, system-generated identifier for the profile connected to this partnership.
     */
    profileId: pulumi.Input<string>;
    /**
     * A key-value pair for a specific partnership. Tags are metadata that you can use to search for and group capabilities for various purposes.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
