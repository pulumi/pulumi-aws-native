// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * AWS::PCS::Cluster resource creates an AWS PCS cluster.
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:pcs:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The unique Amazon Resource Name (ARN) of the cluster.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The generated unique ID of the cluster.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * The list of endpoints available for interaction with the scheduler.
     */
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.pcs.ClusterEndpoint[]>;
    /**
     * The list of errors that occurred during cluster provisioning.
     */
    public /*out*/ readonly errorInfo!: pulumi.Output<outputs.pcs.ClusterErrorInfo[]>;
    /**
     * The name that identifies the cluster.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The networking configuration for the cluster's control plane.
     */
    public readonly networking!: pulumi.Output<outputs.pcs.NetworkingProperties>;
    /**
     * The cluster management and job scheduling software associated with the cluster.
     */
    public readonly scheduler!: pulumi.Output<outputs.pcs.SchedulerProperties>;
    /**
     * The size of the cluster.
     */
    public readonly size!: pulumi.Output<enums.pcs.ClusterSize>;
    /**
     * Additional options related to the Slurm scheduler.
     */
    public readonly slurmConfiguration!: pulumi.Output<outputs.pcs.SlurmConfigurationProperties | undefined>;
    /**
     * The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.pcs.ClusterStatus>;
    /**
     * 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.networking === undefined && !opts.urn) {
                throw new Error("Missing required property 'networking'");
            }
            if (args?.scheduler === undefined && !opts.urn) {
                throw new Error("Missing required property 'scheduler'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["networking"] = args?.networking;
            resourceInputs["scheduler"] = args?.scheduler;
            resourceInputs["size"] = args?.size;
            resourceInputs["slurmConfiguration"] = args?.slurmConfiguration;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["errorInfo"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["errorInfo"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networking"] = undefined /*out*/;
            resourceInputs["scheduler"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["slurmConfiguration"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "networking", "scheduler", "size", "slurmConfiguration"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The name that identifies the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The networking configuration for the cluster's control plane.
     */
    networking: pulumi.Input<inputs.pcs.NetworkingPropertiesArgs>;
    /**
     * The cluster management and job scheduling software associated with the cluster.
     */
    scheduler: pulumi.Input<inputs.pcs.SchedulerPropertiesArgs>;
    /**
     * The size of the cluster.
     */
    size: pulumi.Input<enums.pcs.ClusterSize>;
    /**
     * Additional options related to the Slurm scheduler.
     */
    slurmConfiguration?: pulumi.Input<inputs.pcs.SlurmConfigurationPropertiesArgs>;
    /**
     * 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
