// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * AWS::PCS::Queue resource creates an AWS PCS queue.
 */
export class Queue extends pulumi.CustomResource {
    /**
     * Get an existing Queue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Queue {
        return new Queue(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:pcs:Queue';

    /**
     * Returns true if the given object is an instance of Queue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Queue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Queue.__pulumiType;
    }

    /**
     * The unique Amazon Resource Name (ARN) of the queue.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The generated unique ID of the queue.
     */
    public /*out*/ readonly awsId!: pulumi.Output<string>;
    /**
     * The ID of the cluster of the queue.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
     */
    public readonly computeNodeGroupConfigurations!: pulumi.Output<outputs.pcs.QueueComputeNodeGroupConfiguration[] | undefined>;
    /**
     * The list of errors that occurred during queue provisioning.
     */
    public /*out*/ readonly errorInfo!: pulumi.Output<outputs.pcs.QueueErrorInfo[]>;
    /**
     * The name that identifies the queue.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The provisioning status of the queue. The provisioning status doesn't indicate the overall health of the queue.
     */
    public /*out*/ readonly status!: pulumi.Output<enums.pcs.QueueStatus>;
    /**
     * 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Queue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueueArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["computeNodeGroupConfigurations"] = args ? args.computeNodeGroupConfigurations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["errorInfo"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["computeNodeGroupConfigurations"] = undefined /*out*/;
            resourceInputs["errorInfo"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["clusterId", "name"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Queue.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Queue resource.
 */
export interface QueueArgs {
    /**
     * The ID of the cluster of the queue.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The list of compute node group configurations associated with the queue. Queues assign jobs to associated compute node groups.
     */
    computeNodeGroupConfigurations?: pulumi.Input<pulumi.Input<inputs.pcs.QueueComputeNodeGroupConfigurationArgs>[]>;
    /**
     * The name that identifies the queue.
     */
    name?: pulumi.Input<string>;
    /**
     * 1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
