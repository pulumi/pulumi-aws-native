// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * This is a CloudFormation resource for activating the first-party AWS::Hooks::GuardHook.
 */
export class GuardHook extends pulumi.CustomResource {
    /**
     * Get an existing GuardHook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): GuardHook {
        return new GuardHook(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:cloudformation:GuardHook';

    /**
     * Returns true if the given object is an instance of GuardHook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GuardHook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GuardHook.__pulumiType;
    }

    /**
     * The typename alias for the hook.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * The execution role ARN assumed by hooks to read Guard rules from S3 and write Guard outputs to S3.
     */
    public readonly executionRole!: pulumi.Output<string>;
    /**
     * Attribute to specify CloudFormation behavior on hook failure.
     */
    public readonly failureMode!: pulumi.Output<enums.cloudformation.GuardHookFailureMode>;
    /**
     * The Amazon Resource Name (ARN) of the activated hook
     */
    public /*out*/ readonly hookArn!: pulumi.Output<string>;
    /**
     * Attribute to specify which stacks this hook applies to or should get invoked for
     */
    public readonly hookStatus!: pulumi.Output<enums.cloudformation.GuardHookHookStatus>;
    /**
     * S3 Bucket where the guard validate report will be uploaded to
     */
    public readonly logBucket!: pulumi.Output<string | undefined>;
    /**
     * Specifies the S3 location of your input parameters.
     */
    public readonly options!: pulumi.Output<outputs.cloudformation.OptionsProperties | undefined>;
    /**
     * Specifies the S3 location of your Guard rules.
     */
    public readonly ruleLocation!: pulumi.Output<outputs.cloudformation.GuardHookS3Location>;
    /**
     * Filters to allow hooks to target specific stack attributes
     */
    public readonly stackFilters!: pulumi.Output<outputs.cloudformation.StackFiltersProperties | undefined>;
    /**
     * Attribute to specify which targets should invoke the hook
     */
    public readonly targetFilters!: pulumi.Output<outputs.cloudformation.TargetFilters0Properties | outputs.cloudformation.TargetFilters1Properties | undefined>;
    /**
     * Which operations should this Hook run against? Resource changes, stacks or change sets.
     */
    public readonly targetOperations!: pulumi.Output<enums.cloudformation.GuardHookTargetOperation[]>;

    /**
     * Create a GuardHook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GuardHookArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if ((!args || args.executionRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionRole'");
            }
            if ((!args || args.failureMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'failureMode'");
            }
            if ((!args || args.hookStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hookStatus'");
            }
            if ((!args || args.ruleLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleLocation'");
            }
            if ((!args || args.targetOperations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetOperations'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["executionRole"] = args ? args.executionRole : undefined;
            resourceInputs["failureMode"] = args ? args.failureMode : undefined;
            resourceInputs["hookStatus"] = args ? args.hookStatus : undefined;
            resourceInputs["logBucket"] = args ? args.logBucket : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["ruleLocation"] = args ? args.ruleLocation : undefined;
            resourceInputs["stackFilters"] = args ? args.stackFilters : undefined;
            resourceInputs["targetFilters"] = args ? args.targetFilters : undefined;
            resourceInputs["targetOperations"] = args ? args.targetOperations : undefined;
            resourceInputs["hookArn"] = undefined /*out*/;
        } else {
            resourceInputs["alias"] = undefined /*out*/;
            resourceInputs["executionRole"] = undefined /*out*/;
            resourceInputs["failureMode"] = undefined /*out*/;
            resourceInputs["hookArn"] = undefined /*out*/;
            resourceInputs["hookStatus"] = undefined /*out*/;
            resourceInputs["logBucket"] = undefined /*out*/;
            resourceInputs["options"] = undefined /*out*/;
            resourceInputs["ruleLocation"] = undefined /*out*/;
            resourceInputs["stackFilters"] = undefined /*out*/;
            resourceInputs["targetFilters"] = undefined /*out*/;
            resourceInputs["targetOperations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["alias", "executionRole"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(GuardHook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a GuardHook resource.
 */
export interface GuardHookArgs {
    /**
     * The typename alias for the hook.
     */
    alias: pulumi.Input<string>;
    /**
     * The execution role ARN assumed by hooks to read Guard rules from S3 and write Guard outputs to S3.
     */
    executionRole: pulumi.Input<string>;
    /**
     * Attribute to specify CloudFormation behavior on hook failure.
     */
    failureMode: pulumi.Input<enums.cloudformation.GuardHookFailureMode>;
    /**
     * Attribute to specify which stacks this hook applies to or should get invoked for
     */
    hookStatus: pulumi.Input<enums.cloudformation.GuardHookHookStatus>;
    /**
     * S3 Bucket where the guard validate report will be uploaded to
     */
    logBucket?: pulumi.Input<string>;
    /**
     * Specifies the S3 location of your input parameters.
     */
    options?: pulumi.Input<inputs.cloudformation.OptionsPropertiesArgs>;
    /**
     * Specifies the S3 location of your Guard rules.
     */
    ruleLocation: pulumi.Input<inputs.cloudformation.GuardHookS3LocationArgs>;
    /**
     * Filters to allow hooks to target specific stack attributes
     */
    stackFilters?: pulumi.Input<inputs.cloudformation.StackFiltersPropertiesArgs>;
    /**
     * Attribute to specify which targets should invoke the hook
     */
    targetFilters?: pulumi.Input<inputs.cloudformation.TargetFilters0PropertiesArgs | inputs.cloudformation.TargetFilters1PropertiesArgs>;
    /**
     * Which operations should this Hook run against? Resource changes, stacks or change sets.
     */
    targetOperations: pulumi.Input<pulumi.Input<enums.cloudformation.GuardHookTargetOperation>[]>;
}
