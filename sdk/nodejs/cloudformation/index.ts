// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CustomResourceEmulatorArgs } from "./customResourceEmulator";
export type CustomResourceEmulator = import("./customResourceEmulator").CustomResourceEmulator;
export const CustomResourceEmulator: typeof import("./customResourceEmulator").CustomResourceEmulator = null as any;
utilities.lazyLoad(exports, ["CustomResourceEmulator"], () => require("./customResourceEmulator"));

export { GetHookDefaultVersionArgs, GetHookDefaultVersionResult, GetHookDefaultVersionOutputArgs } from "./getHookDefaultVersion";
export const getHookDefaultVersion: typeof import("./getHookDefaultVersion").getHookDefaultVersion = null as any;
export const getHookDefaultVersionOutput: typeof import("./getHookDefaultVersion").getHookDefaultVersionOutput = null as any;
utilities.lazyLoad(exports, ["getHookDefaultVersion","getHookDefaultVersionOutput"], () => require("./getHookDefaultVersion"));

export { GetHookTypeConfigArgs, GetHookTypeConfigResult, GetHookTypeConfigOutputArgs } from "./getHookTypeConfig";
export const getHookTypeConfig: typeof import("./getHookTypeConfig").getHookTypeConfig = null as any;
export const getHookTypeConfigOutput: typeof import("./getHookTypeConfig").getHookTypeConfigOutput = null as any;
utilities.lazyLoad(exports, ["getHookTypeConfig","getHookTypeConfigOutput"], () => require("./getHookTypeConfig"));

export { GetHookVersionArgs, GetHookVersionResult, GetHookVersionOutputArgs } from "./getHookVersion";
export const getHookVersion: typeof import("./getHookVersion").getHookVersion = null as any;
export const getHookVersionOutput: typeof import("./getHookVersion").getHookVersionOutput = null as any;
utilities.lazyLoad(exports, ["getHookVersion","getHookVersionOutput"], () => require("./getHookVersion"));

export { GetModuleVersionArgs, GetModuleVersionResult, GetModuleVersionOutputArgs } from "./getModuleVersion";
export const getModuleVersion: typeof import("./getModuleVersion").getModuleVersion = null as any;
export const getModuleVersionOutput: typeof import("./getModuleVersion").getModuleVersionOutput = null as any;
utilities.lazyLoad(exports, ["getModuleVersion","getModuleVersionOutput"], () => require("./getModuleVersion"));

export { GetPublicTypeVersionArgs, GetPublicTypeVersionResult, GetPublicTypeVersionOutputArgs } from "./getPublicTypeVersion";
export const getPublicTypeVersion: typeof import("./getPublicTypeVersion").getPublicTypeVersion = null as any;
export const getPublicTypeVersionOutput: typeof import("./getPublicTypeVersion").getPublicTypeVersionOutput = null as any;
utilities.lazyLoad(exports, ["getPublicTypeVersion","getPublicTypeVersionOutput"], () => require("./getPublicTypeVersion"));

export { GetPublisherArgs, GetPublisherResult, GetPublisherOutputArgs } from "./getPublisher";
export const getPublisher: typeof import("./getPublisher").getPublisher = null as any;
export const getPublisherOutput: typeof import("./getPublisher").getPublisherOutput = null as any;
utilities.lazyLoad(exports, ["getPublisher","getPublisherOutput"], () => require("./getPublisher"));

export { GetResourceDefaultVersionArgs, GetResourceDefaultVersionResult, GetResourceDefaultVersionOutputArgs } from "./getResourceDefaultVersion";
export const getResourceDefaultVersion: typeof import("./getResourceDefaultVersion").getResourceDefaultVersion = null as any;
export const getResourceDefaultVersionOutput: typeof import("./getResourceDefaultVersion").getResourceDefaultVersionOutput = null as any;
utilities.lazyLoad(exports, ["getResourceDefaultVersion","getResourceDefaultVersionOutput"], () => require("./getResourceDefaultVersion"));

export { GetResourceVersionArgs, GetResourceVersionResult, GetResourceVersionOutputArgs } from "./getResourceVersion";
export const getResourceVersion: typeof import("./getResourceVersion").getResourceVersion = null as any;
export const getResourceVersionOutput: typeof import("./getResourceVersion").getResourceVersionOutput = null as any;
utilities.lazyLoad(exports, ["getResourceVersion","getResourceVersionOutput"], () => require("./getResourceVersion"));

export { GetStackArgs, GetStackResult, GetStackOutputArgs } from "./getStack";
export const getStack: typeof import("./getStack").getStack = null as any;
export const getStackOutput: typeof import("./getStack").getStackOutput = null as any;
utilities.lazyLoad(exports, ["getStack","getStackOutput"], () => require("./getStack"));

export { GetStackSetArgs, GetStackSetResult, GetStackSetOutputArgs } from "./getStackSet";
export const getStackSet: typeof import("./getStackSet").getStackSet = null as any;
export const getStackSetOutput: typeof import("./getStackSet").getStackSetOutput = null as any;
utilities.lazyLoad(exports, ["getStackSet","getStackSetOutput"], () => require("./getStackSet"));

export { GetTypeActivationArgs, GetTypeActivationResult, GetTypeActivationOutputArgs } from "./getTypeActivation";
export const getTypeActivation: typeof import("./getTypeActivation").getTypeActivation = null as any;
export const getTypeActivationOutput: typeof import("./getTypeActivation").getTypeActivationOutput = null as any;
utilities.lazyLoad(exports, ["getTypeActivation","getTypeActivationOutput"], () => require("./getTypeActivation"));

export { HookDefaultVersionArgs } from "./hookDefaultVersion";
export type HookDefaultVersion = import("./hookDefaultVersion").HookDefaultVersion;
export const HookDefaultVersion: typeof import("./hookDefaultVersion").HookDefaultVersion = null as any;
utilities.lazyLoad(exports, ["HookDefaultVersion"], () => require("./hookDefaultVersion"));

export { HookTypeConfigArgs } from "./hookTypeConfig";
export type HookTypeConfig = import("./hookTypeConfig").HookTypeConfig;
export const HookTypeConfig: typeof import("./hookTypeConfig").HookTypeConfig = null as any;
utilities.lazyLoad(exports, ["HookTypeConfig"], () => require("./hookTypeConfig"));

export { HookVersionArgs } from "./hookVersion";
export type HookVersion = import("./hookVersion").HookVersion;
export const HookVersion: typeof import("./hookVersion").HookVersion = null as any;
utilities.lazyLoad(exports, ["HookVersion"], () => require("./hookVersion"));

export { ModuleDefaultVersionArgs } from "./moduleDefaultVersion";
export type ModuleDefaultVersion = import("./moduleDefaultVersion").ModuleDefaultVersion;
export const ModuleDefaultVersion: typeof import("./moduleDefaultVersion").ModuleDefaultVersion = null as any;
utilities.lazyLoad(exports, ["ModuleDefaultVersion"], () => require("./moduleDefaultVersion"));

export { ModuleVersionArgs } from "./moduleVersion";
export type ModuleVersion = import("./moduleVersion").ModuleVersion;
export const ModuleVersion: typeof import("./moduleVersion").ModuleVersion = null as any;
utilities.lazyLoad(exports, ["ModuleVersion"], () => require("./moduleVersion"));

export { PublicTypeVersionArgs } from "./publicTypeVersion";
export type PublicTypeVersion = import("./publicTypeVersion").PublicTypeVersion;
export const PublicTypeVersion: typeof import("./publicTypeVersion").PublicTypeVersion = null as any;
utilities.lazyLoad(exports, ["PublicTypeVersion"], () => require("./publicTypeVersion"));

export { PublisherArgs } from "./publisher";
export type Publisher = import("./publisher").Publisher;
export const Publisher: typeof import("./publisher").Publisher = null as any;
utilities.lazyLoad(exports, ["Publisher"], () => require("./publisher"));

export { ResourceDefaultVersionArgs } from "./resourceDefaultVersion";
export type ResourceDefaultVersion = import("./resourceDefaultVersion").ResourceDefaultVersion;
export const ResourceDefaultVersion: typeof import("./resourceDefaultVersion").ResourceDefaultVersion = null as any;
utilities.lazyLoad(exports, ["ResourceDefaultVersion"], () => require("./resourceDefaultVersion"));

export { ResourceVersionArgs } from "./resourceVersion";
export type ResourceVersion = import("./resourceVersion").ResourceVersion;
export const ResourceVersion: typeof import("./resourceVersion").ResourceVersion = null as any;
utilities.lazyLoad(exports, ["ResourceVersion"], () => require("./resourceVersion"));

export { StackArgs } from "./stack";
export type Stack = import("./stack").Stack;
export const Stack: typeof import("./stack").Stack = null as any;
utilities.lazyLoad(exports, ["Stack"], () => require("./stack"));

export { StackSetArgs } from "./stackSet";
export type StackSet = import("./stackSet").StackSet;
export const StackSet: typeof import("./stackSet").StackSet = null as any;
utilities.lazyLoad(exports, ["StackSet"], () => require("./stackSet"));

export { TypeActivationArgs } from "./typeActivation";
export type TypeActivation = import("./typeActivation").TypeActivation;
export const TypeActivation: typeof import("./typeActivation").TypeActivation = null as any;
utilities.lazyLoad(exports, ["TypeActivation"], () => require("./typeActivation"));


// Export enums:
export * from "../types/enums/cloudformation";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:cloudformation:CustomResourceEmulator":
                return new CustomResourceEmulator(name, <any>undefined, { urn })
            case "aws-native:cloudformation:HookDefaultVersion":
                return new HookDefaultVersion(name, <any>undefined, { urn })
            case "aws-native:cloudformation:HookTypeConfig":
                return new HookTypeConfig(name, <any>undefined, { urn })
            case "aws-native:cloudformation:HookVersion":
                return new HookVersion(name, <any>undefined, { urn })
            case "aws-native:cloudformation:ModuleDefaultVersion":
                return new ModuleDefaultVersion(name, <any>undefined, { urn })
            case "aws-native:cloudformation:ModuleVersion":
                return new ModuleVersion(name, <any>undefined, { urn })
            case "aws-native:cloudformation:PublicTypeVersion":
                return new PublicTypeVersion(name, <any>undefined, { urn })
            case "aws-native:cloudformation:Publisher":
                return new Publisher(name, <any>undefined, { urn })
            case "aws-native:cloudformation:ResourceDefaultVersion":
                return new ResourceDefaultVersion(name, <any>undefined, { urn })
            case "aws-native:cloudformation:ResourceVersion":
                return new ResourceVersion(name, <any>undefined, { urn })
            case "aws-native:cloudformation:Stack":
                return new Stack(name, <any>undefined, { urn })
            case "aws-native:cloudformation:StackSet":
                return new StackSet(name, <any>undefined, { urn })
            case "aws-native:cloudformation:TypeActivation":
                return new TypeActivation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "cloudformation", _module)
