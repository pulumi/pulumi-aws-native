// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::IAM::SAMLProvider
 */
export class SamlProvider extends pulumi.CustomResource {
    /**
     * Get an existing SamlProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SamlProvider {
        return new SamlProvider(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:iam:SamlProvider';

    /**
     * Returns true if the given object is an instance of SamlProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlProvider.__pulumiType;
    }

    /**
     * The private key from your external identity provider
     */
    declare public readonly addPrivateKey: pulumi.Output<string | undefined>;
    /**
     * Amazon Resource Name (ARN) of the SAML provider
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The encryption setting for the SAML provider
     */
    declare public readonly assertionEncryptionMode: pulumi.Output<enums.iam.SamlProviderAssertionEncryptionMode | undefined>;
    /**
     * The name of the provider to create.
     *
     * This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
     */
    declare public readonly name: pulumi.Output<string | undefined>;
    /**
     * The private key metadata for the SAML provider.
     */
    declare public readonly privateKeyList: pulumi.Output<outputs.iam.SamlProviderSamlPrivateKey[] | undefined>;
    /**
     * The Key ID of the private key to remove
     */
    declare public readonly removePrivateKey: pulumi.Output<string | undefined>;
    /**
     * An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
     *
     * For more information, see [About SAML 2.0-based federation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html) in the *IAM User Guide*
     */
    declare public readonly samlMetadataDocument: pulumi.Output<string | undefined>;
    /**
     * The unique identifier assigned to the SAML provider
     */
    declare public /*out*/ readonly samlProviderUuid: pulumi.Output<string>;
    /**
     * A list of tags that you want to attach to the new IAM SAML provider. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide* .
     *
     * > If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a SamlProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SamlProviderArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["addPrivateKey"] = args?.addPrivateKey;
            resourceInputs["assertionEncryptionMode"] = args?.assertionEncryptionMode;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateKeyList"] = args?.privateKeyList;
            resourceInputs["removePrivateKey"] = args?.removePrivateKey;
            resourceInputs["samlMetadataDocument"] = args?.samlMetadataDocument;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["samlProviderUuid"] = undefined /*out*/;
        } else {
            resourceInputs["addPrivateKey"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["assertionEncryptionMode"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["privateKeyList"] = undefined /*out*/;
            resourceInputs["removePrivateKey"] = undefined /*out*/;
            resourceInputs["samlMetadataDocument"] = undefined /*out*/;
            resourceInputs["samlProviderUuid"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["addPrivateKey", "name", "removePrivateKey"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(SamlProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a SamlProvider resource.
 */
export interface SamlProviderArgs {
    /**
     * The private key from your external identity provider
     */
    addPrivateKey?: pulumi.Input<string>;
    /**
     * The encryption setting for the SAML provider
     */
    assertionEncryptionMode?: pulumi.Input<enums.iam.SamlProviderAssertionEncryptionMode>;
    /**
     * The name of the provider to create.
     *
     * This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) ) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
     */
    name?: pulumi.Input<string>;
    /**
     * The private key metadata for the SAML provider.
     */
    privateKeyList?: pulumi.Input<pulumi.Input<inputs.iam.SamlProviderSamlPrivateKeyArgs>[]>;
    /**
     * The Key ID of the private key to remove
     */
    removePrivateKey?: pulumi.Input<string>;
    /**
     * An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
     *
     * For more information, see [About SAML 2.0-based federation](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html) in the *IAM User Guide*
     */
    samlMetadataDocument?: pulumi.Input<string>;
    /**
     * A list of tags that you want to attach to the new IAM SAML provider. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide* .
     *
     * > If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
