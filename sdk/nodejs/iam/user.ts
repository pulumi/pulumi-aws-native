// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::IAM::User
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:iam:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs and how to use ARNs in policies, see IAM Identifiers in the IAM User Guide.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A list of group names to which you want to add the user.
     */
    public readonly groups!: pulumi.Output<string[] | undefined>;
    /**
     * Creates a password for the specified IAM user. A password allows an IAM user to access AWS services through the AWS Management Console.
     */
    public readonly loginProfile!: pulumi.Output<outputs.iam.UserLoginProfile | undefined>;
    /**
     * A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
     */
    public readonly managedPolicyArns!: pulumi.Output<string[] | undefined>;
    /**
     * The path to the user. For more information about paths, see IAM identifiers in the IAM User Guide. The ARN of the policy used to set the permissions boundary for the user.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * The ARN of the policy that is used to set the permissions boundary for the user.
     */
    public readonly permissionsBoundary!: pulumi.Output<string | undefined>;
    /**
     * Adds or updates an inline policy document that is embedded in the specified IAM role.
     */
    public readonly policies!: pulumi.Output<outputs.iam.UserPolicy[] | undefined>;
    /**
     * A list of tags that are associated with the user. For more information about tagging, see Tagging IAM resources in the IAM User Guide.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * The friendly name identifying the user.
     */
    public readonly userName!: pulumi.Output<string | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["loginProfile"] = args ? args.loginProfile : undefined;
            resourceInputs["managedPolicyArns"] = args ? args.managedPolicyArns : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["permissionsBoundary"] = args ? args.permissionsBoundary : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["groups"] = undefined /*out*/;
            resourceInputs["loginProfile"] = undefined /*out*/;
            resourceInputs["managedPolicyArns"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["permissionsBoundary"] = undefined /*out*/;
            resourceInputs["policies"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["userName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["userName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * A list of group names to which you want to add the user.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Creates a password for the specified IAM user. A password allows an IAM user to access AWS services through the AWS Management Console.
     */
    loginProfile?: pulumi.Input<inputs.iam.UserLoginProfileArgs>;
    /**
     * A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
     */
    managedPolicyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The path to the user. For more information about paths, see IAM identifiers in the IAM User Guide. The ARN of the policy used to set the permissions boundary for the user.
     */
    path?: pulumi.Input<string>;
    /**
     * The ARN of the policy that is used to set the permissions boundary for the user.
     */
    permissionsBoundary?: pulumi.Input<string>;
    /**
     * Adds or updates an inline policy document that is embedded in the specified IAM role.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.iam.UserPolicyArgs>[]>;
    /**
     * A list of tags that are associated with the user. For more information about tagging, see Tagging IAM resources in the IAM User Guide.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * The friendly name identifying the user.
     */
    userName?: pulumi.Input<string>;
}
