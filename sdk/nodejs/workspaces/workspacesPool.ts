// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::WorkSpaces::WorkspacesPool
 */
export class WorkspacesPool extends pulumi.CustomResource {
    /**
     * Get an existing WorkspacesPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WorkspacesPool {
        return new WorkspacesPool(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:workspaces:WorkspacesPool';

    /**
     * Returns true if the given object is an instance of WorkspacesPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspacesPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspacesPool.__pulumiType;
    }

    public readonly applicationSettings!: pulumi.Output<outputs.workspaces.WorkspacesPoolApplicationSettings | undefined>;
    public readonly bundleId!: pulumi.Output<string>;
    public readonly capacity!: pulumi.Output<outputs.workspaces.WorkspacesPoolCapacity>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly directoryId!: pulumi.Output<string>;
    public /*out*/ readonly poolArn!: pulumi.Output<string>;
    public /*out*/ readonly poolId!: pulumi.Output<string>;
    public readonly poolName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;
    public readonly timeoutSettings!: pulumi.Output<outputs.workspaces.WorkspacesPoolTimeoutSettings | undefined>;

    /**
     * Create a WorkspacesPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspacesPoolArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.bundleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bundleId'");
            }
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            resourceInputs["applicationSettings"] = args ? args.applicationSettings : undefined;
            resourceInputs["bundleId"] = args ? args.bundleId : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeoutSettings"] = args ? args.timeoutSettings : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["poolArn"] = undefined /*out*/;
            resourceInputs["poolId"] = undefined /*out*/;
        } else {
            resourceInputs["applicationSettings"] = undefined /*out*/;
            resourceInputs["bundleId"] = undefined /*out*/;
            resourceInputs["capacity"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["directoryId"] = undefined /*out*/;
            resourceInputs["poolArn"] = undefined /*out*/;
            resourceInputs["poolId"] = undefined /*out*/;
            resourceInputs["poolName"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["timeoutSettings"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["poolName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(WorkspacesPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a WorkspacesPool resource.
 */
export interface WorkspacesPoolArgs {
    applicationSettings?: pulumi.Input<inputs.workspaces.WorkspacesPoolApplicationSettingsArgs>;
    bundleId: pulumi.Input<string>;
    capacity: pulumi.Input<inputs.workspaces.WorkspacesPoolCapacityArgs>;
    description?: pulumi.Input<string>;
    directoryId: pulumi.Input<string>;
    poolName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    timeoutSettings?: pulumi.Input<inputs.workspaces.WorkspacesPoolTimeoutSettingsArgs>;
}
