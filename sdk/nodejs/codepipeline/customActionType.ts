// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * The AWS::CodePipeline::CustomActionType resource creates a custom action for activities that aren't included in the CodePipeline default actions, such as running an internally developed build process or a test suite. You can use these custom actions in the stage of a pipeline.
 */
export class CustomActionType extends pulumi.CustomResource {
    /**
     * Get an existing CustomActionType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): CustomActionType {
        return new CustomActionType(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:codepipeline:CustomActionType';

    /**
     * Returns true if the given object is an instance of CustomActionType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomActionType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomActionType.__pulumiType;
    }

    /**
     * The category of the custom action, such as a build action or a test action.
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * The configuration properties for the custom action.
     */
    public readonly configurationProperties!: pulumi.Output<outputs.codepipeline.CustomActionTypeConfigurationProperties[] | undefined>;
    /**
     * The details of the input artifact for the action, such as its commit ID.
     */
    public readonly inputArtifactDetails!: pulumi.Output<outputs.codepipeline.CustomActionTypeArtifactDetails>;
    /**
     * The details of the output artifact of the action, such as its commit ID.
     */
    public readonly outputArtifactDetails!: pulumi.Output<outputs.codepipeline.CustomActionTypeArtifactDetails>;
    /**
     * The provider of the service used in the custom action, such as AWS CodeDeploy.
     */
    public readonly provider!: pulumi.Output<string>;
    /**
     * URLs that provide users information about this custom action.
     */
    public readonly settings!: pulumi.Output<outputs.codepipeline.CustomActionTypeSettings | undefined>;
    /**
     * Any tags assigned to the custom action.
     */
    public readonly tags!: pulumi.Output<outputs.codepipeline.CustomActionTypeTag[] | undefined>;
    /**
     * The version identifier of the custom action.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a CustomActionType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomActionTypeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.inputArtifactDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputArtifactDetails'");
            }
            if ((!args || args.outputArtifactDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputArtifactDetails'");
            }
            if ((!args || args.provider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provider'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["configurationProperties"] = args ? args.configurationProperties : undefined;
            resourceInputs["inputArtifactDetails"] = args ? args.inputArtifactDetails : undefined;
            resourceInputs["outputArtifactDetails"] = args ? args.outputArtifactDetails : undefined;
            resourceInputs["provider"] = args ? args.provider : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        } else {
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["configurationProperties"] = undefined /*out*/;
            resourceInputs["inputArtifactDetails"] = undefined /*out*/;
            resourceInputs["outputArtifactDetails"] = undefined /*out*/;
            resourceInputs["provider"] = undefined /*out*/;
            resourceInputs["settings"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["category", "configurationProperties[*]", "inputArtifactDetails", "outputArtifactDetails", "provider", "settings", "version"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(CustomActionType.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a CustomActionType resource.
 */
export interface CustomActionTypeArgs {
    /**
     * The category of the custom action, such as a build action or a test action.
     */
    category: pulumi.Input<string>;
    /**
     * The configuration properties for the custom action.
     */
    configurationProperties?: pulumi.Input<pulumi.Input<inputs.codepipeline.CustomActionTypeConfigurationPropertiesArgs>[]>;
    /**
     * The details of the input artifact for the action, such as its commit ID.
     */
    inputArtifactDetails: pulumi.Input<inputs.codepipeline.CustomActionTypeArtifactDetailsArgs>;
    /**
     * The details of the output artifact of the action, such as its commit ID.
     */
    outputArtifactDetails: pulumi.Input<inputs.codepipeline.CustomActionTypeArtifactDetailsArgs>;
    /**
     * The provider of the service used in the custom action, such as AWS CodeDeploy.
     */
    provider: pulumi.Input<string>;
    /**
     * URLs that provide users information about this custom action.
     */
    settings?: pulumi.Input<inputs.codepipeline.CustomActionTypeSettingsArgs>;
    /**
     * Any tags assigned to the custom action.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.codepipeline.CustomActionTypeTagArgs>[]>;
    /**
     * The version identifier of the custom action.
     */
    version: pulumi.Input<string>;
}
