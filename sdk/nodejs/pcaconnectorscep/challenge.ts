// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Represents a SCEP Challenge that is used for certificate enrollment
 */
export class Challenge extends pulumi.CustomResource {
    /**
     * Get an existing Challenge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Challenge {
        return new Challenge(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:pcaconnectorscep:Challenge';

    /**
     * Returns true if the given object is an instance of Challenge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Challenge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Challenge.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the challenge.
     */
    public /*out*/ readonly challengeArn!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the connector.
     */
    public readonly connectorArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Challenge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChallengeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.connectorArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'connectorArn'");
            }
            resourceInputs["connectorArn"] = args?.connectorArn;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["challengeArn"] = undefined /*out*/;
        } else {
            resourceInputs["challengeArn"] = undefined /*out*/;
            resourceInputs["connectorArn"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["connectorArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Challenge.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Challenge resource.
 */
export interface ChallengeArgs {
    /**
     * The Amazon Resource Name (ARN) of the connector.
     */
    connectorArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
