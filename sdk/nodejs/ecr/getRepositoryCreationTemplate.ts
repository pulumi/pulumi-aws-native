// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * AWS::ECR::RepositoryCreationTemplate is used to create repository with configuration from a pre-defined template.
 */
export function getRepositoryCreationTemplate(args: GetRepositoryCreationTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryCreationTemplateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:ecr:getRepositoryCreationTemplate", {
        "prefix": args.prefix,
    }, opts);
}

export interface GetRepositoryCreationTemplateArgs {
    /**
     * The prefix use to match the repository name and apply the template.
     */
    prefix: string;
}

export interface GetRepositoryCreationTemplateResult {
    /**
     * A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
     */
    readonly appliedFor?: enums.ecr.RepositoryCreationTemplateAppliedForItem[];
    /**
     * Create timestamp of the template.
     */
    readonly createdAt?: string;
    /**
     * The description of the template.
     */
    readonly description?: string;
    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
     *
     * By default, when no encryption configuration is set or the `AES256` encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
     *
     * For more control over the encryption of the contents of your repository, you can use server-side encryption with AWS Key Management Service key stored in AWS Key Management Service ( AWS KMS ) to encrypt your images. For more information, see [Amazon ECR encryption at rest](https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html) in the *Amazon Elastic Container Registry User Guide* .
     */
    readonly encryptionConfiguration?: outputs.ecr.RepositoryCreationTemplateEncryptionConfiguration;
    /**
     * The image tag mutability setting for the repository.
     */
    readonly imageTagMutability?: enums.ecr.RepositoryCreationTemplateImageTagMutability;
    /**
     * The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
     */
    readonly lifecyclePolicy?: string;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
     */
    readonly repositoryPolicy?: string;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    readonly resourceTags?: outputs.ecr.RepositoryCreationTemplateTag[];
    /**
     * Update timestamp of the template.
     */
    readonly updatedAt?: string;
}
/**
 * AWS::ECR::RepositoryCreationTemplate is used to create repository with configuration from a pre-defined template.
 */
export function getRepositoryCreationTemplateOutput(args: GetRepositoryCreationTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryCreationTemplateResult> {
    return pulumi.output(args).apply((a: any) => getRepositoryCreationTemplate(a, opts))
}

export interface GetRepositoryCreationTemplateOutputArgs {
    /**
     * The prefix use to match the repository name and apply the template.
     */
    prefix: pulumi.Input<string>;
}
