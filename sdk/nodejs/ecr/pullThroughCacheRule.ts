// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The ``AWS::ECR::PullThroughCacheRule`` resource creates or updates a pull through cache rule. A pull through cache rule provides a way to cache images from an upstream registry in your Amazon ECR private registry.
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myECRPullThroughCacheRule = new aws_native.ecr.PullThroughCacheRule("myECRPullThroughCacheRule", {
 *     ecrRepositoryPrefix: "my-ecr",
 *     upstreamRegistryUrl: "public.ecr.aws",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const myECRPullThroughCacheRule = new aws_native.ecr.PullThroughCacheRule("myECRPullThroughCacheRule", {
 *     ecrRepositoryPrefix: "my-ecr",
 *     upstreamRegistryUrl: "public.ecr.aws",
 * });
 *
 * ```
 */
export class PullThroughCacheRule extends pulumi.CustomResource {
    /**
     * Get an existing PullThroughCacheRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PullThroughCacheRule {
        return new PullThroughCacheRule(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ecr:PullThroughCacheRule';

    /**
     * Returns true if the given object is an instance of PullThroughCacheRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PullThroughCacheRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PullThroughCacheRule.__pulumiType;
    }

    /**
     * The ARN of the Secrets Manager secret associated with the pull through cache rule.
     */
    public readonly credentialArn!: pulumi.Output<string | undefined>;
    public readonly customRoleArn!: pulumi.Output<string | undefined>;
    /**
     * The Amazon ECR repository prefix associated with the pull through cache rule.
     */
    public readonly ecrRepositoryPrefix!: pulumi.Output<string | undefined>;
    /**
     * The name of the upstream source registry associated with the pull through cache rule.
     */
    public readonly upstreamRegistry!: pulumi.Output<string | undefined>;
    /**
     * The upstream registry URL associated with the pull through cache rule.
     */
    public readonly upstreamRegistryUrl!: pulumi.Output<string | undefined>;
    public readonly upstreamRepositoryPrefix!: pulumi.Output<string | undefined>;

    /**
     * Create a PullThroughCacheRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PullThroughCacheRuleArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["credentialArn"] = args ? args.credentialArn : undefined;
            resourceInputs["customRoleArn"] = args ? args.customRoleArn : undefined;
            resourceInputs["ecrRepositoryPrefix"] = args ? args.ecrRepositoryPrefix : undefined;
            resourceInputs["upstreamRegistry"] = args ? args.upstreamRegistry : undefined;
            resourceInputs["upstreamRegistryUrl"] = args ? args.upstreamRegistryUrl : undefined;
            resourceInputs["upstreamRepositoryPrefix"] = args ? args.upstreamRepositoryPrefix : undefined;
        } else {
            resourceInputs["credentialArn"] = undefined /*out*/;
            resourceInputs["customRoleArn"] = undefined /*out*/;
            resourceInputs["ecrRepositoryPrefix"] = undefined /*out*/;
            resourceInputs["upstreamRegistry"] = undefined /*out*/;
            resourceInputs["upstreamRegistryUrl"] = undefined /*out*/;
            resourceInputs["upstreamRepositoryPrefix"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["credentialArn", "customRoleArn", "ecrRepositoryPrefix", "upstreamRegistry", "upstreamRegistryUrl", "upstreamRepositoryPrefix"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(PullThroughCacheRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PullThroughCacheRule resource.
 */
export interface PullThroughCacheRuleArgs {
    /**
     * The ARN of the Secrets Manager secret associated with the pull through cache rule.
     */
    credentialArn?: pulumi.Input<string>;
    customRoleArn?: pulumi.Input<string>;
    /**
     * The Amazon ECR repository prefix associated with the pull through cache rule.
     */
    ecrRepositoryPrefix?: pulumi.Input<string>;
    /**
     * The name of the upstream source registry associated with the pull through cache rule.
     */
    upstreamRegistry?: pulumi.Input<string>;
    /**
     * The upstream registry URL associated with the pull through cache rule.
     */
    upstreamRegistryUrl?: pulumi.Input<string>;
    upstreamRepositoryPrefix?: pulumi.Input<string>;
}
