// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * AWS::ECR::RepositoryCreationTemplate is used to create repository with configuration from a pre-defined template.
 */
export class RepositoryCreationTemplate extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryCreationTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RepositoryCreationTemplate {
        return new RepositoryCreationTemplate(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:ecr:RepositoryCreationTemplate';

    /**
     * Returns true if the given object is an instance of RepositoryCreationTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryCreationTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryCreationTemplate.__pulumiType;
    }

    /**
     * A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
     */
    public readonly appliedFor!: pulumi.Output<enums.ecr.RepositoryCreationTemplateAppliedForItem[]>;
    /**
     * Create timestamp of the template.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the template.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
     *
     * By default, when no encryption configuration is set or the `AES256` encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
     *
     * For more control over the encryption of the contents of your repository, you can use server-side encryption with AWS Key Management Service key stored in AWS Key Management Service ( AWS KMS ) to encrypt your images. For more information, see [Amazon ECR encryption at rest](https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html) in the *Amazon Elastic Container Registry User Guide* .
     */
    public readonly encryptionConfiguration!: pulumi.Output<outputs.ecr.RepositoryCreationTemplateEncryptionConfiguration | undefined>;
    /**
     * The image tag mutability setting for the repository.
     */
    public readonly imageTagMutability!: pulumi.Output<enums.ecr.RepositoryCreationTemplateImageTagMutability | undefined>;
    /**
     * The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
     */
    public readonly lifecyclePolicy!: pulumi.Output<string | undefined>;
    /**
     * The prefix use to match the repository name and apply the template.
     */
    public readonly prefix!: pulumi.Output<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
     */
    public readonly repositoryPolicy!: pulumi.Output<string | undefined>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    public readonly resourceTags!: pulumi.Output<outputs.ecr.RepositoryCreationTemplateTag[] | undefined>;
    /**
     * Update timestamp of the template.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a RepositoryCreationTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryCreationTemplateArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.appliedFor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appliedFor'");
            }
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            resourceInputs["appliedFor"] = args ? args.appliedFor : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionConfiguration"] = args ? args.encryptionConfiguration : undefined;
            resourceInputs["imageTagMutability"] = args ? args.imageTagMutability : undefined;
            resourceInputs["lifecyclePolicy"] = args ? args.lifecyclePolicy : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["repositoryPolicy"] = args ? args.repositoryPolicy : undefined;
            resourceInputs["resourceTags"] = args ? args.resourceTags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["appliedFor"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["encryptionConfiguration"] = undefined /*out*/;
            resourceInputs["imageTagMutability"] = undefined /*out*/;
            resourceInputs["lifecyclePolicy"] = undefined /*out*/;
            resourceInputs["prefix"] = undefined /*out*/;
            resourceInputs["repositoryPolicy"] = undefined /*out*/;
            resourceInputs["resourceTags"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["prefix"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(RepositoryCreationTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RepositoryCreationTemplate resource.
 */
export interface RepositoryCreationTemplateArgs {
    /**
     * A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.
     */
    appliedFor: pulumi.Input<pulumi.Input<enums.ecr.RepositoryCreationTemplateAppliedForItem>[]>;
    /**
     * The description of the template.
     */
    description?: pulumi.Input<string>;
    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
     *
     * By default, when no encryption configuration is set or the `AES256` encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
     *
     * For more control over the encryption of the contents of your repository, you can use server-side encryption with AWS Key Management Service key stored in AWS Key Management Service ( AWS KMS ) to encrypt your images. For more information, see [Amazon ECR encryption at rest](https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html) in the *Amazon Elastic Container Registry User Guide* .
     */
    encryptionConfiguration?: pulumi.Input<inputs.ecr.RepositoryCreationTemplateEncryptionConfigurationArgs>;
    /**
     * The image tag mutability setting for the repository.
     */
    imageTagMutability?: pulumi.Input<enums.ecr.RepositoryCreationTemplateImageTagMutability>;
    /**
     * The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
     */
    lifecyclePolicy?: pulumi.Input<string>;
    /**
     * The prefix use to match the repository name and apply the template.
     */
    prefix: pulumi.Input<string>;
    /**
     * The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html
     */
    repositoryPolicy?: pulumi.Input<string>;
    /**
     * An array of key-value pairs to apply to this resource.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.ecr.RepositoryCreationTemplateTagArgs>[]>;
}
