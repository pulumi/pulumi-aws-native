// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::Cassandra::Type
 */
export class Type extends pulumi.CustomResource {
    /**
     * Get an existing Type resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Type {
        return new Type(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:cassandra:Type';

    /**
     * Returns true if the given object is an instance of Type.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Type {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Type.__pulumiType;
    }

    /**
     * List of parent User-Defined Types that directly reference the User-Defined Type in their fields.
     */
    declare public /*out*/ readonly directParentTypes: pulumi.Output<string[]>;
    /**
     * List of Tables that directly reference the User-Defined Type in their columns.
     */
    declare public /*out*/ readonly directReferringTables: pulumi.Output<string[]>;
    /**
     * Field definitions of the User-Defined Type
     */
    declare public readonly fields: pulumi.Output<outputs.cassandra.TypeField[]>;
    /**
     * ARN of the Keyspace which contains the User-Defined Type.
     */
    declare public /*out*/ readonly keyspaceArn: pulumi.Output<string>;
    /**
     * Name of the Keyspace which contains the User-Defined Type.
     */
    declare public readonly keyspaceName: pulumi.Output<string>;
    /**
     * Timestamp of the last time the User-Defined Type's meta data was modified.
     */
    declare public /*out*/ readonly lastModifiedTimestamp: pulumi.Output<number>;
    /**
     * Maximum nesting depth of the User-Defined Type across the field types.
     */
    declare public /*out*/ readonly maxNestingDepth: pulumi.Output<number>;
    /**
     * Name of the User-Defined Type.
     */
    declare public readonly typeName: pulumi.Output<string>;

    /**
     * Create a Type resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TypeArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.fields === undefined && !opts.urn) {
                throw new Error("Missing required property 'fields'");
            }
            if (args?.keyspaceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyspaceName'");
            }
            resourceInputs["fields"] = args?.fields;
            resourceInputs["keyspaceName"] = args?.keyspaceName;
            resourceInputs["typeName"] = args?.typeName;
            resourceInputs["directParentTypes"] = undefined /*out*/;
            resourceInputs["directReferringTables"] = undefined /*out*/;
            resourceInputs["keyspaceArn"] = undefined /*out*/;
            resourceInputs["lastModifiedTimestamp"] = undefined /*out*/;
            resourceInputs["maxNestingDepth"] = undefined /*out*/;
        } else {
            resourceInputs["directParentTypes"] = undefined /*out*/;
            resourceInputs["directReferringTables"] = undefined /*out*/;
            resourceInputs["fields"] = undefined /*out*/;
            resourceInputs["keyspaceArn"] = undefined /*out*/;
            resourceInputs["keyspaceName"] = undefined /*out*/;
            resourceInputs["lastModifiedTimestamp"] = undefined /*out*/;
            resourceInputs["maxNestingDepth"] = undefined /*out*/;
            resourceInputs["typeName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["fields[*]", "keyspaceName", "typeName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Type.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Type resource.
 */
export interface TypeArgs {
    /**
     * Field definitions of the User-Defined Type
     */
    fields: pulumi.Input<pulumi.Input<inputs.cassandra.TypeFieldArgs>[]>;
    /**
     * Name of the Keyspace which contains the User-Defined Type.
     */
    keyspaceName: pulumi.Input<string>;
    /**
     * Name of the User-Defined Type.
     */
    typeName?: pulumi.Input<string>;
}
