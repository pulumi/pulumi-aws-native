// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AMZN::SDC::Deployment
 *
 * @deprecated Deployment is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Deployment {
        pulumi.log.warn("Deployment is deprecated: Deployment is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        return new Deployment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:sdc:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    public readonly configName!: pulumi.Output<string>;
    public readonly dimension!: pulumi.Output<string>;
    public readonly pipelineId!: pulumi.Output<string | undefined>;
    public readonly s3Bucket!: pulumi.Output<string>;
    public readonly s3Key!: pulumi.Output<string>;
    public readonly stage!: pulumi.Output<string>;
    public readonly targetRegionOverride!: pulumi.Output<string | undefined>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Deployment is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Deployment is deprecated: Deployment is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.configName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configName'");
            }
            if ((!args || args.dimension === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dimension'");
            }
            if ((!args || args.s3Bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3Bucket'");
            }
            if ((!args || args.s3Key === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3Key'");
            }
            if ((!args || args.stage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stage'");
            }
            resourceInputs["configName"] = args ? args.configName : undefined;
            resourceInputs["dimension"] = args ? args.dimension : undefined;
            resourceInputs["pipelineId"] = args ? args.pipelineId : undefined;
            resourceInputs["s3Bucket"] = args ? args.s3Bucket : undefined;
            resourceInputs["s3Key"] = args ? args.s3Key : undefined;
            resourceInputs["stage"] = args ? args.stage : undefined;
            resourceInputs["targetRegionOverride"] = args ? args.targetRegionOverride : undefined;
        } else {
            resourceInputs["configName"] = undefined /*out*/;
            resourceInputs["dimension"] = undefined /*out*/;
            resourceInputs["pipelineId"] = undefined /*out*/;
            resourceInputs["s3Bucket"] = undefined /*out*/;
            resourceInputs["s3Key"] = undefined /*out*/;
            resourceInputs["stage"] = undefined /*out*/;
            resourceInputs["targetRegionOverride"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["s3Key"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Deployment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    configName: pulumi.Input<string>;
    dimension: pulumi.Input<string>;
    pipelineId?: pulumi.Input<string>;
    s3Bucket: pulumi.Input<string>;
    s3Key: pulumi.Input<string>;
    stage: pulumi.Input<string>;
    targetRegionOverride?: pulumi.Input<string>;
}
