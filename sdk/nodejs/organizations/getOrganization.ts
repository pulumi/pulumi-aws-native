// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::Organizations::Organization
 */
export function getOrganization(args: GetOrganizationArgs, opts?: pulumi.InvokeOptions): Promise<GetOrganizationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws-native:organizations:getOrganization", {
        "id": args.id,
    }, opts);
}

export interface GetOrganizationArgs {
    /**
     * The unique identifier (ID) of an organization.
     */
    id: string;
}

export interface GetOrganizationResult {
    /**
     * The Amazon Resource Name (ARN) of an organization.
     */
    readonly arn?: string;
    /**
     * Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.
     */
    readonly featureSet?: enums.organizations.OrganizationFeatureSet;
    /**
     * The unique identifier (ID) of an organization.
     */
    readonly id?: string;
    /**
     * The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.
     */
    readonly managementAccountArn?: string;
    /**
     * The email address that is associated with the AWS account that is designated as the management account for the organization.
     */
    readonly managementAccountEmail?: string;
    /**
     * The unique identifier (ID) of the management account of an organization.
     */
    readonly managementAccountId?: string;
    /**
     * The unique identifier (ID) for the root.
     */
    readonly rootId?: string;
}
/**
 * Resource schema for AWS::Organizations::Organization
 */
export function getOrganizationOutput(args: GetOrganizationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOrganizationResult> {
    return pulumi.output(args).apply((a: any) => getOrganization(a, opts))
}

export interface GetOrganizationOutputArgs {
    /**
     * The unique identifier (ID) of an organization.
     */
    id: pulumi.Input<string>;
}
