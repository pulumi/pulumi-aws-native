// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::Backup::LogicallyAirGappedBackupVault
 */
export class LogicallyAirGappedBackupVault extends pulumi.CustomResource {
    /**
     * Get an existing LogicallyAirGappedBackupVault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LogicallyAirGappedBackupVault {
        return new LogicallyAirGappedBackupVault(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:backup:LogicallyAirGappedBackupVault';

    /**
     * Returns true if the given object is an instance of LogicallyAirGappedBackupVault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogicallyAirGappedBackupVault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogicallyAirGappedBackupVault.__pulumiType;
    }

    /**
     * The backup vault access policy document in JSON format.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Backup::LogicallyAirGappedBackupVault` for more information about the expected schema for this property.
     */
    public readonly accessPolicy!: pulumi.Output<any | undefined>;
    public /*out*/ readonly backupVaultArn!: pulumi.Output<string>;
    /**
     * The name of a logical container where backups are stored. Logically air-gapped backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.
     */
    public readonly backupVaultName!: pulumi.Output<string>;
    /**
     * The tags to assign to the vault.
     */
    public readonly backupVaultTags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly encryptionKeyArn!: pulumi.Output<string>;
    /**
     * The maximum retention period that the vault retains its recovery points.
     */
    public readonly maxRetentionDays!: pulumi.Output<number>;
    /**
     * This setting specifies the minimum retention period that the vault retains its recovery points.
     *
     * The minimum value accepted is 7 days.
     */
    public readonly minRetentionDays!: pulumi.Output<number>;
    /**
     * Returns event notifications for the specified backup vault.
     */
    public readonly notifications!: pulumi.Output<outputs.backup.LogicallyAirGappedBackupVaultNotificationObjectType | undefined>;
    /**
     * The current state of the vault.
     */
    public /*out*/ readonly vaultState!: pulumi.Output<string>;
    /**
     * The type of vault described.
     */
    public /*out*/ readonly vaultType!: pulumi.Output<string>;

    /**
     * Create a LogicallyAirGappedBackupVault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogicallyAirGappedBackupVaultArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.maxRetentionDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxRetentionDays'");
            }
            if ((!args || args.minRetentionDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minRetentionDays'");
            }
            resourceInputs["accessPolicy"] = args ? args.accessPolicy : undefined;
            resourceInputs["backupVaultName"] = args ? args.backupVaultName : undefined;
            resourceInputs["backupVaultTags"] = args ? args.backupVaultTags : undefined;
            resourceInputs["maxRetentionDays"] = args ? args.maxRetentionDays : undefined;
            resourceInputs["minRetentionDays"] = args ? args.minRetentionDays : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["backupVaultArn"] = undefined /*out*/;
            resourceInputs["encryptionKeyArn"] = undefined /*out*/;
            resourceInputs["vaultState"] = undefined /*out*/;
            resourceInputs["vaultType"] = undefined /*out*/;
        } else {
            resourceInputs["accessPolicy"] = undefined /*out*/;
            resourceInputs["backupVaultArn"] = undefined /*out*/;
            resourceInputs["backupVaultName"] = undefined /*out*/;
            resourceInputs["backupVaultTags"] = undefined /*out*/;
            resourceInputs["encryptionKeyArn"] = undefined /*out*/;
            resourceInputs["maxRetentionDays"] = undefined /*out*/;
            resourceInputs["minRetentionDays"] = undefined /*out*/;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["vaultState"] = undefined /*out*/;
            resourceInputs["vaultType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["backupVaultName", "maxRetentionDays", "minRetentionDays"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(LogicallyAirGappedBackupVault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LogicallyAirGappedBackupVault resource.
 */
export interface LogicallyAirGappedBackupVaultArgs {
    /**
     * The backup vault access policy document in JSON format.
     *
     * Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Backup::LogicallyAirGappedBackupVault` for more information about the expected schema for this property.
     */
    accessPolicy?: any;
    /**
     * The name of a logical container where backups are stored. Logically air-gapped backup vaults are identified by names that are unique to the account used to create them and the Region where they are created.
     */
    backupVaultName?: pulumi.Input<string>;
    /**
     * The tags to assign to the vault.
     */
    backupVaultTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The maximum retention period that the vault retains its recovery points.
     */
    maxRetentionDays: pulumi.Input<number>;
    /**
     * This setting specifies the minimum retention period that the vault retains its recovery points.
     *
     * The minimum value accepted is 7 days.
     */
    minRetentionDays: pulumi.Input<number>;
    /**
     * Returns event notifications for the specified backup vault.
     */
    notifications?: pulumi.Input<inputs.backup.LogicallyAirGappedBackupVaultNotificationObjectTypeArgs>;
}
