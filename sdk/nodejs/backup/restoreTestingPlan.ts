// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Definition of AWS::Backup::RestoreTestingPlan Resource Type
 */
export class RestoreTestingPlan extends pulumi.CustomResource {
    /**
     * Get an existing RestoreTestingPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RestoreTestingPlan {
        return new RestoreTestingPlan(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:backup:RestoreTestingPlan';

    /**
     * Returns true if the given object is an instance of RestoreTestingPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RestoreTestingPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RestoreTestingPlan.__pulumiType;
    }

    /**
     * `RecoveryPointSelection` has five parameters (three required and two optional). The values you specify determine which recovery point is included in the restore test. You must indicate with `Algorithm` if you want the latest recovery point within your `SelectionWindowDays` or if you want a random recovery point, and you must indicate through `IncludeVaults` from which vaults the recovery points can be chosen.
     *
     * `Algorithm` ( *required* ) Valid values: " `LATEST_WITHIN_WINDOW` " or " `RANDOM_WITHIN_WINDOW` ".
     *
     * `Recovery point types` ( *required* ) Valid values: " `SNAPSHOT` " and/or " `CONTINUOUS` ". Include `SNAPSHOT` to restore only snapshot recovery points; include `CONTINUOUS` to restore continuous recovery points (point in time restore / PITR); use both to restore either a snapshot or a continuous recovery point. The recovery point will be determined by the value for `Algorithm` .
     *
     * `IncludeVaults` ( *required* ). You must include one or more backup vaults. Use the wildcard ["*"] or specific ARNs.
     *
     * `SelectionWindowDays` ( *optional* ) Value must be an integer (in days) from 1 to 365. If not included, the value defaults to `30` .
     *
     * `ExcludeVaults` ( *optional* ). You can choose to input one or more specific backup vault ARNs to exclude those vaults' contents from restore eligibility. Or, you can include a list of selectors. If this parameter and its value are not included, it defaults to empty list.
     */
    public readonly recoveryPointSelection!: pulumi.Output<outputs.backup.RestoreTestingPlanRestoreTestingRecoveryPointSelection>;
    /**
     * An Amazon Resource Name (ARN) that uniquely identifies a restore testing plan.
     */
    public /*out*/ readonly restoreTestingPlanArn!: pulumi.Output<string>;
    /**
     * The RestoreTestingPlanName is a unique string that is the name of the restore testing plan. This cannot be changed after creation, and it must consist of only alphanumeric characters and underscores.
     */
    public readonly restoreTestingPlanName!: pulumi.Output<string>;
    /**
     * A CRON expression in specified timezone when a restore testing plan is executed.
     */
    public readonly scheduleExpression!: pulumi.Output<string>;
    /**
     * Optional. This is the timezone in which the schedule expression is set. By default, ScheduleExpressions are in UTC. You can modify this to a specified timezone.
     */
    public readonly scheduleExpressionTimezone!: pulumi.Output<string | undefined>;
    /**
     * Defaults to 24 hours.
     *
     * A value in hours after a restore test is scheduled before a job will be canceled if it doesn't start successfully. This value is optional. If this value is included, this parameter has a maximum value of 168 hours (one week).
     */
    public readonly startWindowHours!: pulumi.Output<number | undefined>;
    /**
     * The tags to assign to the restore testing plan.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a RestoreTestingPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RestoreTestingPlanArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.recoveryPointSelection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryPointSelection'");
            }
            if ((!args || args.scheduleExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduleExpression'");
            }
            resourceInputs["recoveryPointSelection"] = args ? args.recoveryPointSelection : undefined;
            resourceInputs["restoreTestingPlanName"] = args ? args.restoreTestingPlanName : undefined;
            resourceInputs["scheduleExpression"] = args ? args.scheduleExpression : undefined;
            resourceInputs["scheduleExpressionTimezone"] = args ? args.scheduleExpressionTimezone : undefined;
            resourceInputs["startWindowHours"] = args ? args.startWindowHours : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["restoreTestingPlanArn"] = undefined /*out*/;
        } else {
            resourceInputs["recoveryPointSelection"] = undefined /*out*/;
            resourceInputs["restoreTestingPlanArn"] = undefined /*out*/;
            resourceInputs["restoreTestingPlanName"] = undefined /*out*/;
            resourceInputs["scheduleExpression"] = undefined /*out*/;
            resourceInputs["scheduleExpressionTimezone"] = undefined /*out*/;
            resourceInputs["startWindowHours"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["restoreTestingPlanName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(RestoreTestingPlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RestoreTestingPlan resource.
 */
export interface RestoreTestingPlanArgs {
    /**
     * `RecoveryPointSelection` has five parameters (three required and two optional). The values you specify determine which recovery point is included in the restore test. You must indicate with `Algorithm` if you want the latest recovery point within your `SelectionWindowDays` or if you want a random recovery point, and you must indicate through `IncludeVaults` from which vaults the recovery points can be chosen.
     *
     * `Algorithm` ( *required* ) Valid values: " `LATEST_WITHIN_WINDOW` " or " `RANDOM_WITHIN_WINDOW` ".
     *
     * `Recovery point types` ( *required* ) Valid values: " `SNAPSHOT` " and/or " `CONTINUOUS` ". Include `SNAPSHOT` to restore only snapshot recovery points; include `CONTINUOUS` to restore continuous recovery points (point in time restore / PITR); use both to restore either a snapshot or a continuous recovery point. The recovery point will be determined by the value for `Algorithm` .
     *
     * `IncludeVaults` ( *required* ). You must include one or more backup vaults. Use the wildcard ["*"] or specific ARNs.
     *
     * `SelectionWindowDays` ( *optional* ) Value must be an integer (in days) from 1 to 365. If not included, the value defaults to `30` .
     *
     * `ExcludeVaults` ( *optional* ). You can choose to input one or more specific backup vault ARNs to exclude those vaults' contents from restore eligibility. Or, you can include a list of selectors. If this parameter and its value are not included, it defaults to empty list.
     */
    recoveryPointSelection: pulumi.Input<inputs.backup.RestoreTestingPlanRestoreTestingRecoveryPointSelectionArgs>;
    /**
     * The RestoreTestingPlanName is a unique string that is the name of the restore testing plan. This cannot be changed after creation, and it must consist of only alphanumeric characters and underscores.
     */
    restoreTestingPlanName?: pulumi.Input<string>;
    /**
     * A CRON expression in specified timezone when a restore testing plan is executed.
     */
    scheduleExpression: pulumi.Input<string>;
    /**
     * Optional. This is the timezone in which the schedule expression is set. By default, ScheduleExpressions are in UTC. You can modify this to a specified timezone.
     */
    scheduleExpressionTimezone?: pulumi.Input<string>;
    /**
     * Defaults to 24 hours.
     *
     * A value in hours after a restore test is scheduled before a job will be canceled if it doesn't start successfully. This value is optional. If this value is included, this parameter has a maximum value of 168 hours (one week).
     */
    startWindowHours?: pulumi.Input<number>;
    /**
     * The tags to assign to the restore testing plan.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
