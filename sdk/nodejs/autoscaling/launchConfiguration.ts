// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::AutoScaling::LaunchConfiguration
 */
export class LaunchConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing LaunchConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LaunchConfiguration {
        return new LaunchConfiguration(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:autoscaling:LaunchConfiguration';

    /**
     * Returns true if the given object is an instance of LaunchConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LaunchConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LaunchConfiguration.__pulumiType;
    }

    public readonly associatePublicIpAddress!: pulumi.Output<boolean | undefined>;
    public readonly blockDeviceMappings!: pulumi.Output<outputs.autoscaling.LaunchConfigurationBlockDeviceMapping[] | undefined>;
    public readonly classicLinkVPCId!: pulumi.Output<string | undefined>;
    public readonly classicLinkVPCSecurityGroups!: pulumi.Output<string[] | undefined>;
    public readonly ebsOptimized!: pulumi.Output<boolean | undefined>;
    public readonly iamInstanceProfile!: pulumi.Output<string | undefined>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly instanceId!: pulumi.Output<string | undefined>;
    public readonly instanceMonitoring!: pulumi.Output<boolean | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly kernelId!: pulumi.Output<string | undefined>;
    public readonly keyName!: pulumi.Output<string | undefined>;
    public readonly launchConfigurationName!: pulumi.Output<string | undefined>;
    public readonly metadataOptions!: pulumi.Output<outputs.autoscaling.LaunchConfigurationMetadataOptions | undefined>;
    public readonly placementTenancy!: pulumi.Output<string | undefined>;
    public readonly ramDiskId!: pulumi.Output<string | undefined>;
    public readonly securityGroups!: pulumi.Output<string[] | undefined>;
    public readonly spotPrice!: pulumi.Output<string | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;

    /**
     * Create a LaunchConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LaunchConfigurationArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            inputs["associatePublicIpAddress"] = args ? args.associatePublicIpAddress : undefined;
            inputs["blockDeviceMappings"] = args ? args.blockDeviceMappings : undefined;
            inputs["classicLinkVPCId"] = args ? args.classicLinkVPCId : undefined;
            inputs["classicLinkVPCSecurityGroups"] = args ? args.classicLinkVPCSecurityGroups : undefined;
            inputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            inputs["iamInstanceProfile"] = args ? args.iamInstanceProfile : undefined;
            inputs["imageId"] = args ? args.imageId : undefined;
            inputs["instanceId"] = args ? args.instanceId : undefined;
            inputs["instanceMonitoring"] = args ? args.instanceMonitoring : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["kernelId"] = args ? args.kernelId : undefined;
            inputs["keyName"] = args ? args.keyName : undefined;
            inputs["launchConfigurationName"] = args ? args.launchConfigurationName : undefined;
            inputs["metadataOptions"] = args ? args.metadataOptions : undefined;
            inputs["placementTenancy"] = args ? args.placementTenancy : undefined;
            inputs["ramDiskId"] = args ? args.ramDiskId : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["spotPrice"] = args ? args.spotPrice : undefined;
            inputs["userData"] = args ? args.userData : undefined;
        } else {
            inputs["associatePublicIpAddress"] = undefined /*out*/;
            inputs["blockDeviceMappings"] = undefined /*out*/;
            inputs["classicLinkVPCId"] = undefined /*out*/;
            inputs["classicLinkVPCSecurityGroups"] = undefined /*out*/;
            inputs["ebsOptimized"] = undefined /*out*/;
            inputs["iamInstanceProfile"] = undefined /*out*/;
            inputs["imageId"] = undefined /*out*/;
            inputs["instanceId"] = undefined /*out*/;
            inputs["instanceMonitoring"] = undefined /*out*/;
            inputs["instanceType"] = undefined /*out*/;
            inputs["kernelId"] = undefined /*out*/;
            inputs["keyName"] = undefined /*out*/;
            inputs["launchConfigurationName"] = undefined /*out*/;
            inputs["metadataOptions"] = undefined /*out*/;
            inputs["placementTenancy"] = undefined /*out*/;
            inputs["ramDiskId"] = undefined /*out*/;
            inputs["securityGroups"] = undefined /*out*/;
            inputs["spotPrice"] = undefined /*out*/;
            inputs["userData"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LaunchConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a LaunchConfiguration resource.
 */
export interface LaunchConfigurationArgs {
    associatePublicIpAddress?: pulumi.Input<boolean>;
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.autoscaling.LaunchConfigurationBlockDeviceMappingArgs>[]>;
    classicLinkVPCId?: pulumi.Input<string>;
    classicLinkVPCSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    ebsOptimized?: pulumi.Input<boolean>;
    iamInstanceProfile?: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    instanceMonitoring?: pulumi.Input<boolean>;
    instanceType: pulumi.Input<string>;
    kernelId?: pulumi.Input<string>;
    keyName?: pulumi.Input<string>;
    launchConfigurationName?: pulumi.Input<string>;
    metadataOptions?: pulumi.Input<inputs.autoscaling.LaunchConfigurationMetadataOptionsArgs>;
    placementTenancy?: pulumi.Input<string>;
    ramDiskId?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    spotPrice?: pulumi.Input<string>;
    userData?: pulumi.Input<string>;
}
