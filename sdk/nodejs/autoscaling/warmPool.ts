// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource schema for AWS::AutoScaling::WarmPool.
 */
export class WarmPool extends pulumi.CustomResource {
    /**
     * Get an existing WarmPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): WarmPool {
        return new WarmPool(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:autoscaling:WarmPool';

    /**
     * Returns true if the given object is an instance of WarmPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WarmPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WarmPool.__pulumiType;
    }

    /**
     * The name of the Auto Scaling group.
     */
    public readonly autoScalingGroupName!: pulumi.Output<string>;
    /**
     * Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
     */
    public readonly instanceReusePolicy!: pulumi.Output<outputs.autoscaling.WarmPoolInstanceReusePolicy | undefined>;
    /**
     * Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except `Terminated` for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group's maximum capacity and its desired capacity.
     *
     * > If a value for `MaxGroupPreparedCapacity` is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group's maximum capacity and its desired capacity. If you specify a value for `MaxGroupPreparedCapacity` , Amazon EC2 Auto Scaling uses the difference between the `MaxGroupPreparedCapacity` and the desired capacity instead.
     * > 
     * > The size of the warm pool is dynamic. Only when `MaxGroupPreparedCapacity` and `MinSize` are set to the same value does the warm pool have an absolute size. 
     *
     * If the desired capacity of the Auto Scaling group is higher than the `MaxGroupPreparedCapacity` , the capacity of the warm pool is 0, unless you specify a value for `MinSize` . To remove a value that you previously set, include the property but specify -1 for the value.
     */
    public readonly maxGroupPreparedCapacity!: pulumi.Output<number | undefined>;
    /**
     * Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
     */
    public readonly minSize!: pulumi.Output<number | undefined>;
    /**
     * Sets the instance state to transition to after the lifecycle actions are complete. Default is `Stopped` .
     */
    public readonly poolState!: pulumi.Output<string | undefined>;

    /**
     * Create a WarmPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WarmPoolArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.autoScalingGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'autoScalingGroupName'");
            }
            resourceInputs["autoScalingGroupName"] = args?.autoScalingGroupName;
            resourceInputs["instanceReusePolicy"] = args?.instanceReusePolicy;
            resourceInputs["maxGroupPreparedCapacity"] = args?.maxGroupPreparedCapacity;
            resourceInputs["minSize"] = args?.minSize;
            resourceInputs["poolState"] = args?.poolState;
        } else {
            resourceInputs["autoScalingGroupName"] = undefined /*out*/;
            resourceInputs["instanceReusePolicy"] = undefined /*out*/;
            resourceInputs["maxGroupPreparedCapacity"] = undefined /*out*/;
            resourceInputs["minSize"] = undefined /*out*/;
            resourceInputs["poolState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["autoScalingGroupName"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(WarmPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a WarmPool resource.
 */
export interface WarmPoolArgs {
    /**
     * The name of the Auto Scaling group.
     */
    autoScalingGroupName: pulumi.Input<string>;
    /**
     * Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
     */
    instanceReusePolicy?: pulumi.Input<inputs.autoscaling.WarmPoolInstanceReusePolicyArgs>;
    /**
     * Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except `Terminated` for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group's maximum capacity and its desired capacity.
     *
     * > If a value for `MaxGroupPreparedCapacity` is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group's maximum capacity and its desired capacity. If you specify a value for `MaxGroupPreparedCapacity` , Amazon EC2 Auto Scaling uses the difference between the `MaxGroupPreparedCapacity` and the desired capacity instead.
     * > 
     * > The size of the warm pool is dynamic. Only when `MaxGroupPreparedCapacity` and `MinSize` are set to the same value does the warm pool have an absolute size. 
     *
     * If the desired capacity of the Auto Scaling group is higher than the `MaxGroupPreparedCapacity` , the capacity of the warm pool is 0, unless you specify a value for `MinSize` . To remove a value that you previously set, include the property but specify -1 for the value.
     */
    maxGroupPreparedCapacity?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
     */
    minSize?: pulumi.Input<number>;
    /**
     * Sets the instance state to transition to after the lifecycle actions are complete. Default is `Stopped` .
     */
    poolState?: pulumi.Input<string>;
}
