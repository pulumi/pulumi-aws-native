// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource type definition for AWS::AmazonMQ::Broker
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicBroker = new aws_native.amazonmq.Broker("basicBroker", {
 *     autoMinorVersionUpgrade: false,
 *     brokerName: "MyBasicActiveBroker",
 *     deploymentMode: aws_native.amazonmq.BrokerDeploymentMode.SingleInstance,
 *     engineType: "ActiveMQ",
 *     engineVersion: "5.15.0",
 *     hostInstanceType: "mq.t2.micro",
 *     publiclyAccessible: true,
 *     users: [{
 *         consoleAccess: true,
 *         groups: ["MyGroup"],
 *         password: "AmazonMqPassword",
 *         username: "AmazonMqUsername",
 *     }],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicBroker = new aws_native.amazonmq.Broker("basicBroker", {
 *     autoMinorVersionUpgrade: false,
 *     brokerName: "MyBasicRabbitBroker",
 *     deploymentMode: aws_native.amazonmq.BrokerDeploymentMode.SingleInstance,
 *     engineType: "RabbitMQ",
 *     engineVersion: "3.8.6",
 *     hostInstanceType: "mq.t3.micro",
 *     publiclyAccessible: true,
 *     users: [{
 *         password: "AmazonMqPassword",
 *         username: "AmazonMqUsername",
 *     }],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicBroker = new aws_native.amazonmq.Broker("basicBroker", {
 *     autoMinorVersionUpgrade: false,
 *     brokerName: "MyBasicActiveBroker",
 *     deploymentMode: aws_native.amazonmq.BrokerDeploymentMode.SingleInstance,
 *     engineType: "ActiveMQ",
 *     engineVersion: "5.15.0",
 *     hostInstanceType: "mq.t2.micro",
 *     publiclyAccessible: true,
 *     users: [{
 *         consoleAccess: true,
 *         groups: ["MyGroup"],
 *         password: "AmazonMqPassword",
 *         username: "AmazonMqUsername",
 *     }],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const basicBroker = new aws_native.amazonmq.Broker("basicBroker", {
 *     autoMinorVersionUpgrade: false,
 *     brokerName: "MyBasicRabbitBroker",
 *     deploymentMode: aws_native.amazonmq.BrokerDeploymentMode.SingleInstance,
 *     engineType: "RabbitMQ",
 *     engineVersion: "3.8.6",
 *     hostInstanceType: "mq.t3.micro",
 *     publiclyAccessible: true,
 *     users: [{
 *         password: "AmazonMqPassword",
 *         username: "AmazonMqUsername",
 *     }],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const complexBroker = new aws_native.amazonmq.Broker("complexBroker", {
 *     autoMinorVersionUpgrade: true,
 *     brokerName: "MyComplexRabbitBroker",
 *     deploymentMode: aws_native.amazonmq.BrokerDeploymentMode.SingleInstance,
 *     engineType: "RabbitMQ",
 *     engineVersion: "3.8.6",
 *     hostInstanceType: "mq.t3.micro",
 *     logs: {
 *         general: true,
 *     },
 *     maintenanceWindowStartTime: {
 *         dayOfWeek: "Monday",
 *         timeOfDay: "22:45",
 *         timeZone: "America/Los_Angeles",
 *     },
 *     publiclyAccessible: false,
 *     securityGroups: ["sg-1a234b5cd6efgh7i8"],
 *     subnetIds: ["subnet-123456b7891abcd1f"],
 *     users: [{
 *         password: "AmazonMqPassword",
 *         username: "AmazonMqUsername",
 *     }],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const complexBroker = new aws_native.amazonmq.Broker("complexBroker", {
 *     autoMinorVersionUpgrade: false,
 *     brokerName: "MyComplexRabbitBroker",
 *     deploymentMode: aws_native.amazonmq.BrokerDeploymentMode.SingleInstance,
 *     engineType: "RabbitMQ",
 *     engineVersion: "3.8.6",
 *     hostInstanceType: "mq.t3.micro",
 *     logs: {
 *         general: true,
 *     },
 *     maintenanceWindowStartTime: {
 *         dayOfWeek: "Monday",
 *         timeOfDay: "22:45",
 *         timeZone: "America/Los_Angeles",
 *     },
 *     publiclyAccessible: false,
 *     securityGroups: ["sg-1a234b5cd6efgh7i8"],
 *     subnetIds: ["subnet-123456b7891abcd1f"],
 *     users: [{
 *         password: "AmazonMqPassword",
 *         username: "AmazonMqUsername",
 *     }],
 * });
 *
 * ```
 */
export class Broker extends pulumi.CustomResource {
    /**
     * Get an existing Broker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Broker {
        return new Broker(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:amazonmq:Broker';

    /**
     * Returns true if the given object is an instance of Broker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Broker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Broker.__pulumiType;
    }

    /**
     * The AMQP endpoints of each broker instance as a list of strings.
     *
     * `amqp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:5671`
     */
    declare public /*out*/ readonly amqpEndpoints: pulumi.Output<string[]>;
    /**
     * The Amazon Resource Name (ARN) of the Amazon MQ broker.
     *
     * `arn:aws:mq:us-east-2:123456789012:broker:MyBroker:b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9`
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
     */
    declare public readonly authenticationStrategy: pulumi.Output<string | undefined>;
    /**
     * Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
     */
    declare public readonly autoMinorVersionUpgrade: pulumi.Output<boolean | undefined>;
    /**
     * Required. The unique ID that Amazon MQ generates for the configuration.
     */
    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
     *
     * > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
     */
    declare public readonly brokerName: pulumi.Output<string>;
    /**
     * The intended configuration (ID and revision) to be set when creating or updating.
     * This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
     */
    declare public readonly configuration: pulumi.Output<outputs.amazonmq.BrokerConfigurationId | undefined>;
    /**
     * The ID of the current actual configuration.
     */
    declare public /*out*/ readonly configurationId: pulumi.Output<string>;
    /**
     * The revision of the current actual configuration.
     */
    declare public /*out*/ readonly configurationRevision: pulumi.Output<string>;
    declare public /*out*/ readonly consoleUrls: pulumi.Output<string[]>;
    /**
     * Defines whether this broker is a part of a data replication pair.
     */
    declare public readonly dataReplicationMode: pulumi.Output<enums.amazonmq.BrokerDataReplicationMode | string | undefined>;
    /**
     * The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
     * This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
     * Information on the current primary is available on the DataReplicationMetadata object returned by the API.
     */
    declare public readonly dataReplicationPrimaryBrokerArn: pulumi.Output<string | undefined>;
    /**
     * The deployment mode of the broker. Available values:
     *
     * - `SINGLE_INSTANCE`
     * - `ACTIVE_STANDBY_MULTI_AZ`
     * - `CLUSTER_MULTI_AZ`
     */
    declare public readonly deploymentMode: pulumi.Output<enums.amazonmq.BrokerDeploymentMode | string>;
    /**
     * Encryption options for the broker. Does not apply to RabbitMQ brokers.
     */
    declare public readonly encryptionOptions: pulumi.Output<outputs.amazonmq.BrokerEncryptionOptions | undefined>;
    /**
     * The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
     */
    declare public readonly engineType: pulumi.Output<enums.amazonmq.BrokerEngineType | string>;
    /**
     * The version specified to use. See also EngineVersionCurrent.
     */
    declare public readonly engineVersion: pulumi.Output<string | undefined>;
    /**
     * The version in use. This may have more precision than the specified EngineVersion.
     */
    declare public /*out*/ readonly engineVersionCurrent: pulumi.Output<string>;
    /**
     * The broker's instance type.
     */
    declare public readonly hostInstanceType: pulumi.Output<string>;
    /**
     * The IP addresses of each broker instance as a list of strings. Does not apply to RabbitMQ brokers.
     *
     * `['198.51.100.2', '203.0.113.9']`
     */
    declare public /*out*/ readonly ipAddresses: pulumi.Output<string[]>;
    /**
     * Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
     */
    declare public readonly ldapServerMetadata: pulumi.Output<outputs.amazonmq.BrokerLdapServerMetadata | undefined>;
    /**
     * Enables Amazon CloudWatch logging for brokers.
     */
    declare public readonly logs: pulumi.Output<outputs.amazonmq.BrokerLogList | undefined>;
    /**
     * The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
     */
    declare public readonly maintenanceWindowStartTime: pulumi.Output<outputs.amazonmq.BrokerMaintenanceWindow | undefined>;
    /**
     * The MQTT endpoints of each broker instance as a list of strings.
     *
     * `mqtt+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:8883`
     */
    declare public /*out*/ readonly mqttEndpoints: pulumi.Output<string[]>;
    /**
     * The OpenWire endpoints of each broker instance as a list of strings.
     *
     * `ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61617`
     */
    declare public /*out*/ readonly openWireEndpoints: pulumi.Output<string[]>;
    /**
     * Enables connections from applications outside of the VPC that hosts the broker's subnets.
     */
    declare public readonly publiclyAccessible: pulumi.Output<boolean>;
    /**
     * The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
     */
    declare public readonly securityGroups: pulumi.Output<string[] | undefined>;
    /**
     * The STOMP endpoints of each broker instance as a list of strings.
     *
     * `stomp+ssl://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61614`
     */
    declare public /*out*/ readonly stompEndpoints: pulumi.Output<string[]>;
    /**
     * The broker's storage type.
     */
    declare public readonly storageType: pulumi.Output<enums.amazonmq.BrokerStorageType | string | undefined>;
    /**
     * The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
     *
     * > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
     */
    declare public readonly subnetIds: pulumi.Output<string[] | undefined>;
    /**
     * An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;
    /**
     * Users to configure on the broker. 
     * For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
     * For ActiveMQ, changes to anything but Password are detected and will trigger an update,
     * but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
     */
    declare public readonly users: pulumi.Output<outputs.amazonmq.BrokerUser[] | undefined>;
    /**
     * The WSS endpoints of each broker instance as a list of strings.
     *
     * `wss://b-4aada85d-a80c-4be0-9d30-e344a01b921e-1.mq.eu-central-amazonaws.com:61619`
     */
    declare public /*out*/ readonly wssEndpoints: pulumi.Output<string[]>;

    /**
     * Create a Broker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BrokerArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.deploymentMode === undefined && !opts.urn) {
                throw new Error("Missing required property 'deploymentMode'");
            }
            if (args?.engineType === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineType'");
            }
            if (args?.hostInstanceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'hostInstanceType'");
            }
            if (args?.publiclyAccessible === undefined && !opts.urn) {
                throw new Error("Missing required property 'publiclyAccessible'");
            }
            resourceInputs["authenticationStrategy"] = args?.authenticationStrategy;
            resourceInputs["autoMinorVersionUpgrade"] = args?.autoMinorVersionUpgrade;
            resourceInputs["brokerName"] = args?.brokerName;
            resourceInputs["configuration"] = args?.configuration;
            resourceInputs["dataReplicationMode"] = args?.dataReplicationMode;
            resourceInputs["dataReplicationPrimaryBrokerArn"] = args?.dataReplicationPrimaryBrokerArn;
            resourceInputs["deploymentMode"] = args?.deploymentMode;
            resourceInputs["encryptionOptions"] = args?.encryptionOptions;
            resourceInputs["engineType"] = args?.engineType;
            resourceInputs["engineVersion"] = args?.engineVersion;
            resourceInputs["hostInstanceType"] = args?.hostInstanceType;
            resourceInputs["ldapServerMetadata"] = args?.ldapServerMetadata;
            resourceInputs["logs"] = args?.logs;
            resourceInputs["maintenanceWindowStartTime"] = args?.maintenanceWindowStartTime;
            resourceInputs["publiclyAccessible"] = args?.publiclyAccessible;
            resourceInputs["securityGroups"] = args?.securityGroups;
            resourceInputs["storageType"] = args?.storageType;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["users"] = args?.users;
            resourceInputs["amqpEndpoints"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["configurationId"] = undefined /*out*/;
            resourceInputs["configurationRevision"] = undefined /*out*/;
            resourceInputs["consoleUrls"] = undefined /*out*/;
            resourceInputs["engineVersionCurrent"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["mqttEndpoints"] = undefined /*out*/;
            resourceInputs["openWireEndpoints"] = undefined /*out*/;
            resourceInputs["stompEndpoints"] = undefined /*out*/;
            resourceInputs["wssEndpoints"] = undefined /*out*/;
        } else {
            resourceInputs["amqpEndpoints"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["authenticationStrategy"] = undefined /*out*/;
            resourceInputs["autoMinorVersionUpgrade"] = undefined /*out*/;
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["brokerName"] = undefined /*out*/;
            resourceInputs["configuration"] = undefined /*out*/;
            resourceInputs["configurationId"] = undefined /*out*/;
            resourceInputs["configurationRevision"] = undefined /*out*/;
            resourceInputs["consoleUrls"] = undefined /*out*/;
            resourceInputs["dataReplicationMode"] = undefined /*out*/;
            resourceInputs["dataReplicationPrimaryBrokerArn"] = undefined /*out*/;
            resourceInputs["deploymentMode"] = undefined /*out*/;
            resourceInputs["encryptionOptions"] = undefined /*out*/;
            resourceInputs["engineType"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["engineVersionCurrent"] = undefined /*out*/;
            resourceInputs["hostInstanceType"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["ldapServerMetadata"] = undefined /*out*/;
            resourceInputs["logs"] = undefined /*out*/;
            resourceInputs["maintenanceWindowStartTime"] = undefined /*out*/;
            resourceInputs["mqttEndpoints"] = undefined /*out*/;
            resourceInputs["openWireEndpoints"] = undefined /*out*/;
            resourceInputs["publiclyAccessible"] = undefined /*out*/;
            resourceInputs["securityGroups"] = undefined /*out*/;
            resourceInputs["stompEndpoints"] = undefined /*out*/;
            resourceInputs["storageType"] = undefined /*out*/;
            resourceInputs["subnetIds"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["users"] = undefined /*out*/;
            resourceInputs["wssEndpoints"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["authenticationStrategy", "brokerName", "deploymentMode", "encryptionOptions", "engineType", "publiclyAccessible", "storageType", "subnetIds[*]"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Broker.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Broker resource.
 */
export interface BrokerArgs {
    /**
     * Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
     */
    authenticationStrategy?: pulumi.Input<string>;
    /**
     * Enables automatic upgrades to new minor versions for brokers, as new broker engine versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.
     */
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    /**
     * The name of the broker. This value must be unique in your AWS account , 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.
     *
     * > Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other AWS services, including C CloudWatch Logs . Broker names are not intended to be used for private or sensitive data.
     */
    brokerName?: pulumi.Input<string>;
    /**
     * The intended configuration (ID and revision) to be set when creating or updating.
     * This property is write-only so that applications of a ConfigurationAssociation do not cause drift.
     */
    configuration?: pulumi.Input<inputs.amazonmq.BrokerConfigurationIdArgs>;
    /**
     * Defines whether this broker is a part of a data replication pair.
     */
    dataReplicationMode?: pulumi.Input<enums.amazonmq.BrokerDataReplicationMode | string>;
    /**
     * The ARN of the primary broker that is used to replicate data from in a data replication pair when creating a replica.
     * This field is only used at creation-time. Changes to it subsequently are ignored by CloudFormation.
     * Information on the current primary is available on the DataReplicationMetadata object returned by the API.
     */
    dataReplicationPrimaryBrokerArn?: pulumi.Input<string>;
    /**
     * The deployment mode of the broker. Available values:
     *
     * - `SINGLE_INSTANCE`
     * - `ACTIVE_STANDBY_MULTI_AZ`
     * - `CLUSTER_MULTI_AZ`
     */
    deploymentMode: pulumi.Input<enums.amazonmq.BrokerDeploymentMode | string>;
    /**
     * Encryption options for the broker. Does not apply to RabbitMQ brokers.
     */
    encryptionOptions?: pulumi.Input<inputs.amazonmq.BrokerEncryptionOptionsArgs>;
    /**
     * The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
     */
    engineType: pulumi.Input<enums.amazonmq.BrokerEngineType | string>;
    /**
     * The version specified to use. See also EngineVersionCurrent.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The broker's instance type.
     */
    hostInstanceType: pulumi.Input<string>;
    /**
     * Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.
     */
    ldapServerMetadata?: pulumi.Input<inputs.amazonmq.BrokerLdapServerMetadataArgs>;
    /**
     * Enables Amazon CloudWatch logging for brokers.
     */
    logs?: pulumi.Input<inputs.amazonmq.BrokerLogListArgs>;
    /**
     * The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
     */
    maintenanceWindowStartTime?: pulumi.Input<inputs.amazonmq.BrokerMaintenanceWindowArgs>;
    /**
     * Enables connections from applications outside of the VPC that hosts the broker's subnets.
     */
    publiclyAccessible: pulumi.Input<boolean>;
    /**
     * The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The broker's storage type.
     */
    storageType?: pulumi.Input<enums.amazonmq.BrokerStorageType | string>;
    /**
     * The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment (ACTIVEMQ) requires two subnets. A CLUSTER_MULTI_AZ deployment (RABBITMQ) has no subnet requirements when deployed with public accessibility, deployment without public accessibility requires at least one subnet.
     *
     * > If you specify subnets in a shared VPC for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account . Amazon MQ will not be able to create VPC enpoints in VPCs that are not owned by your AWS account .
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html) in the *Billing and Cost Management User Guide* .
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
    /**
     * Users to configure on the broker. 
     * For RabbitMQ, this should be one user, created when the broker is created, and changes thereafter are ignored.
     * For ActiveMQ, changes to anything but Password are detected and will trigger an update,
     * but changes to Password cannot be detected so updates to Password may not take effect unless there is some other change.
     */
    users?: pulumi.Input<pulumi.Input<inputs.amazonmq.BrokerUserArgs>[]>;
}
