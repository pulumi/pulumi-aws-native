// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Amazon OpenSearchServerless vpc endpoint resource
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testAOSSVpcEndpoint = new aws_native.opensearchserverless.VpcEndpoint("testAOSSVpcEndpoint", {
 *     name: "test-vpcendpoint",
 *     vpcId: "vpc-0d728b8430292b3f4",
 *     subnetIds: ["subnet-0e855f5722a9598ee"],
 *     securityGroupIds: ["sg-03843b03f369eb245"],
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const testAOSSVpcEndpoint = new aws_native.opensearchserverless.VpcEndpoint("testAOSSVpcEndpoint", {
 *     name: "test-vpcendpoint",
 *     vpcId: "vpc-0d728b8430292b3f4",
 *     subnetIds: ["subnet-0e855f5722a9598ee"],
 *     securityGroupIds: ["sg-03843b03f369eb245"],
 * });
 *
 * ```
 */
export class VpcEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing VpcEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): VpcEndpoint {
        return new VpcEndpoint(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:opensearchserverless:VpcEndpoint';

    /**
     * Returns true if the given object is an instance of VpcEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEndpoint.__pulumiType;
    }

    /**
     * The identifier of the VPC Endpoint
     */
    declare public /*out*/ readonly awsId: pulumi.Output<string>;
    /**
     * The name of the VPC Endpoint
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The ID of one or more security groups to associate with the endpoint network interface
     */
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    /**
     * The ID of one or more subnets in which to create an endpoint network interface
     */
    declare public readonly subnetIds: pulumi.Output<string[]>;
    /**
     * The ID of the VPC in which the endpoint will be used.
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a VpcEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcEndpointArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.subnetIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["awsId"] = undefined /*out*/;
        } else {
            resourceInputs["awsId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["securityGroupIds"] = undefined /*out*/;
            resourceInputs["subnetIds"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["name", "vpcId"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(VpcEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a VpcEndpoint resource.
 */
export interface VpcEndpointArgs {
    /**
     * The name of the VPC Endpoint
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of one or more security groups to associate with the endpoint network interface
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of one or more subnets in which to create an endpoint network interface
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the VPC in which the endpoint will be used.
     */
    vpcId: pulumi.Input<string>;
}
