// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplicationArgs } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ConfigurationProfileArgs } from "./configurationProfile";
export type ConfigurationProfile = import("./configurationProfile").ConfigurationProfile;
export const ConfigurationProfile: typeof import("./configurationProfile").ConfigurationProfile = null as any;
utilities.lazyLoad(exports, ["ConfigurationProfile"], () => require("./configurationProfile"));

export { DeploymentArgs } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { DeploymentStrategyArgs } from "./deploymentStrategy";
export type DeploymentStrategy = import("./deploymentStrategy").DeploymentStrategy;
export const DeploymentStrategy: typeof import("./deploymentStrategy").DeploymentStrategy = null as any;
utilities.lazyLoad(exports, ["DeploymentStrategy"], () => require("./deploymentStrategy"));

export { EnvironmentArgs } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetConfigurationProfileArgs, GetConfigurationProfileResult, GetConfigurationProfileOutputArgs } from "./getConfigurationProfile";
export const getConfigurationProfile: typeof import("./getConfigurationProfile").getConfigurationProfile = null as any;
export const getConfigurationProfileOutput: typeof import("./getConfigurationProfile").getConfigurationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationProfile","getConfigurationProfileOutput"], () => require("./getConfigurationProfile"));

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));

export { GetDeploymentStrategyArgs, GetDeploymentStrategyResult, GetDeploymentStrategyOutputArgs } from "./getDeploymentStrategy";
export const getDeploymentStrategy: typeof import("./getDeploymentStrategy").getDeploymentStrategy = null as any;
export const getDeploymentStrategyOutput: typeof import("./getDeploymentStrategy").getDeploymentStrategyOutput = null as any;
utilities.lazyLoad(exports, ["getDeploymentStrategy","getDeploymentStrategyOutput"], () => require("./getDeploymentStrategy"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetHostedConfigurationVersionArgs, GetHostedConfigurationVersionResult, GetHostedConfigurationVersionOutputArgs } from "./getHostedConfigurationVersion";
export const getHostedConfigurationVersion: typeof import("./getHostedConfigurationVersion").getHostedConfigurationVersion = null as any;
export const getHostedConfigurationVersionOutput: typeof import("./getHostedConfigurationVersion").getHostedConfigurationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getHostedConfigurationVersion","getHostedConfigurationVersionOutput"], () => require("./getHostedConfigurationVersion"));

export { HostedConfigurationVersionArgs } from "./hostedConfigurationVersion";
export type HostedConfigurationVersion = import("./hostedConfigurationVersion").HostedConfigurationVersion;
export const HostedConfigurationVersion: typeof import("./hostedConfigurationVersion").HostedConfigurationVersion = null as any;
utilities.lazyLoad(exports, ["HostedConfigurationVersion"], () => require("./hostedConfigurationVersion"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-native:appconfig:Application":
                return new Application(name, <any>undefined, { urn })
            case "aws-native:appconfig:ConfigurationProfile":
                return new ConfigurationProfile(name, <any>undefined, { urn })
            case "aws-native:appconfig:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "aws-native:appconfig:DeploymentStrategy":
                return new DeploymentStrategy(name, <any>undefined, { urn })
            case "aws-native:appconfig:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "aws-native:appconfig:HostedConfigurationVersion":
                return new HostedConfigurationVersion(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "appconfig", _module)
