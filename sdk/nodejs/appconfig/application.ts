// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource Type definition for AWS::AppConfig::Application
 *
 * ## Example Usage
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const dependentApplication = new aws_native.appconfig.Application("dependentApplication", {name: "MyApplication"});
 * const dependentConfigurationProfile = new aws_native.appconfig.ConfigurationProfile("dependentConfigurationProfile", {
 *     applicationId: "DependentApplication",
 *     name: "MyTestProfile",
 *     locationUri: "hosted",
 * });
 * const basicHostedConfigurationVersion = new aws_native.appconfig.HostedConfigurationVersion("basicHostedConfigurationVersion", {
 *     applicationId: "DependentApplication",
 *     configurationProfileId: "DependentConfigurationProfile",
 *     description: "A sample hosted configuration version",
 *     content: "My hosted configuration content",
 *     contentType: "text/plain",
 * });
 *
 * ```
 * ### Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws_native from "@pulumi/aws-native";
 *
 * const dependentApplication = new aws_native.appconfig.Application("dependentApplication", {name: "MyApplication"});
 * const dependentConfigurationProfile = new aws_native.appconfig.ConfigurationProfile("dependentConfigurationProfile", {
 *     applicationId: dependentApplication.id,
 *     name: "MyTestProfile",
 *     locationUri: "hosted",
 * });
 * const basicHostedConfigurationVersion = new aws_native.appconfig.HostedConfigurationVersion("basicHostedConfigurationVersion", {
 *     applicationId: dependentApplication.id,
 *     configurationProfileId: dependentConfigurationProfile.id,
 *     description: "A sample hosted configuration version",
 *     content: "My hosted configuration content",
 *     contentType: "text/plain",
 * });
 *
 * ```
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:appconfig:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * The application Id
     */
    declare public /*out*/ readonly applicationId: pulumi.Output<string>;
    /**
     * A description of the application.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * A name for the application.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
     */
    declare public readonly tags: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["applicationId"] = undefined /*out*/;
        } else {
            resourceInputs["applicationId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * A description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * A name for the application.
     */
    name?: pulumi.Input<string>;
    /**
     * Metadata to assign to the application. Tags help organize and categorize your AWS AppConfig resources. Each tag consists of a key and an optional value, both of which you define.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
