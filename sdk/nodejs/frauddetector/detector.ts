// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * A resource schema for a Detector in Amazon Fraud Detector.
 */
export class Detector extends pulumi.CustomResource {
    /**
     * Get an existing Detector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Detector {
        return new Detector(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:frauddetector:Detector';

    /**
     * Returns true if the given object is an instance of Detector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Detector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Detector.__pulumiType;
    }

    /**
     * The ARN of the detector.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The models to associate with this detector.
     */
    public readonly associatedModels!: pulumi.Output<outputs.frauddetector.DetectorModel[] | undefined>;
    /**
     * The time when the detector was created.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The description of the detector.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the detector
     */
    public readonly detectorId!: pulumi.Output<string>;
    /**
     * The active version ID of the detector
     */
    public /*out*/ readonly detectorVersionId!: pulumi.Output<string>;
    /**
     * The desired detector version status for the detector
     */
    public readonly detectorVersionStatus!: pulumi.Output<enums.frauddetector.DetectorVersionStatus | undefined>;
    /**
     * The event type to associate this detector with.
     */
    public readonly eventType!: pulumi.Output<outputs.frauddetector.DetectorEventType>;
    /**
     * The time when the detector was last updated.
     */
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    public readonly ruleExecutionMode!: pulumi.Output<enums.frauddetector.DetectorRuleExecutionMode | undefined>;
    public readonly rules!: pulumi.Output<outputs.frauddetector.DetectorRule[]>;
    /**
     * Tags associated with this detector.
     */
    public readonly tags!: pulumi.Output<outputs.frauddetector.DetectorTag[] | undefined>;

    /**
     * Create a Detector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DetectorArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.detectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'detectorId'");
            }
            if ((!args || args.eventType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventType'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            inputs["associatedModels"] = args ? args.associatedModels : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["detectorId"] = args ? args.detectorId : undefined;
            inputs["detectorVersionStatus"] = args ? args.detectorVersionStatus : undefined;
            inputs["eventType"] = args ? args.eventType : undefined;
            inputs["ruleExecutionMode"] = args ? args.ruleExecutionMode : undefined;
            inputs["rules"] = args ? args.rules : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["detectorVersionId"] = undefined /*out*/;
            inputs["lastUpdatedTime"] = undefined /*out*/;
        } else {
            inputs["arn"] = undefined /*out*/;
            inputs["associatedModels"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["detectorId"] = undefined /*out*/;
            inputs["detectorVersionId"] = undefined /*out*/;
            inputs["detectorVersionStatus"] = undefined /*out*/;
            inputs["eventType"] = undefined /*out*/;
            inputs["lastUpdatedTime"] = undefined /*out*/;
            inputs["ruleExecutionMode"] = undefined /*out*/;
            inputs["rules"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Detector.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Detector resource.
 */
export interface DetectorArgs {
    /**
     * The models to associate with this detector.
     */
    associatedModels?: pulumi.Input<pulumi.Input<inputs.frauddetector.DetectorModelArgs>[]>;
    /**
     * The description of the detector.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the detector
     */
    detectorId: pulumi.Input<string>;
    /**
     * The desired detector version status for the detector
     */
    detectorVersionStatus?: pulumi.Input<enums.frauddetector.DetectorVersionStatus>;
    /**
     * The event type to associate this detector with.
     */
    eventType: pulumi.Input<inputs.frauddetector.DetectorEventTypeArgs>;
    ruleExecutionMode?: pulumi.Input<enums.frauddetector.DetectorRuleExecutionMode>;
    rules: pulumi.Input<pulumi.Input<inputs.frauddetector.DetectorRuleArgs>[]>;
    /**
     * Tags associated with this detector.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.frauddetector.DetectorTagArgs>[]>;
}
