// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * AWS::DeviceFarm::DevicePool creates a new Device Pool for a given DF Project
 */
export class DevicePool extends pulumi.CustomResource {
    /**
     * Get an existing DevicePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DevicePool {
        return new DevicePool(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws-native:devicefarm:DevicePool';

    /**
     * Returns true if the given object is an instance of DevicePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DevicePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevicePool.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the device pool. See [Amazon resource names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference guide* .
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The device pool's description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and meet the criteria that you assign for the `rules` parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter.
     *
     * By specifying the maximum number of devices, you can control the costs that you incur by running tests.
     */
    public readonly maxDevices!: pulumi.Output<number | undefined>;
    /**
     * The device pool's name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ARN of the project for the device pool.
     */
    public readonly projectArn!: pulumi.Output<string>;
    /**
     * Represents a condition for a device pool.
     */
    public readonly rules!: pulumi.Output<outputs.devicefarm.DevicePoolRule[]>;
    /**
     * The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
     */
    public readonly tags!: pulumi.Output<outputs.Tag[] | undefined>;

    /**
     * Create a DevicePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DevicePoolArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.projectArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectArn'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["maxDevices"] = args ? args.maxDevices : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectArn"] = args ? args.projectArn : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        } else {
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["maxDevices"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["projectArn"] = undefined /*out*/;
            resourceInputs["rules"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["projectArn"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(DevicePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DevicePool resource.
 */
export interface DevicePoolArgs {
    /**
     * The device pool's description.
     */
    description?: pulumi.Input<string>;
    /**
     * The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and meet the criteria that you assign for the `rules` parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter.
     *
     * By specifying the maximum number of devices, you can control the costs that you incur by running tests.
     */
    maxDevices?: pulumi.Input<number>;
    /**
     * The device pool's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of the project for the device pool.
     */
    projectArn: pulumi.Input<string>;
    /**
     * Represents a condition for a device pool.
     */
    rules: pulumi.Input<pulumi.Input<inputs.devicefarm.DevicePoolRuleArgs>[]>;
    /**
     * The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.TagArgs>[]>;
}
