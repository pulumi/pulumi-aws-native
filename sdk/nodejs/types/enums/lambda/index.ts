// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeployment = {
    Warn: "Warn",
    Enforce: "Enforce",
} as const;

/**
 * Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
 */
export type CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeployment = (typeof CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeployment)[keyof typeof CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeployment];

export const EventSourceMappingDocumentDbEventSourceConfigFullDocument = {
    UpdateLookup: "UpdateLookup",
    Default: "Default",
} as const;

/**
 * Include full document in change stream response. The default option will only send the changes made to documents to Lambda. If you want the complete document sent to Lambda, set this to UpdateLookup.
 */
export type EventSourceMappingDocumentDbEventSourceConfigFullDocument = (typeof EventSourceMappingDocumentDbEventSourceConfigFullDocument)[keyof typeof EventSourceMappingDocumentDbEventSourceConfigFullDocument];

export const EventSourceMappingFunctionResponseTypesItem = {
    ReportBatchItemFailures: "ReportBatchItemFailures",
} as const;

export type EventSourceMappingFunctionResponseTypesItem = (typeof EventSourceMappingFunctionResponseTypesItem)[keyof typeof EventSourceMappingFunctionResponseTypesItem];

export const EventSourceMappingSourceAccessConfigurationType = {
    BasicAuth: "BASIC_AUTH",
    VpcSubnet: "VPC_SUBNET",
    VpcSecurityGroup: "VPC_SECURITY_GROUP",
    SaslScram512Auth: "SASL_SCRAM_512_AUTH",
    SaslScram256Auth: "SASL_SCRAM_256_AUTH",
    VirtualHost: "VIRTUAL_HOST",
    ClientCertificateTlsAuth: "CLIENT_CERTIFICATE_TLS_AUTH",
    ServerRootCaCertificate: "SERVER_ROOT_CA_CERTIFICATE",
} as const;

/**
 * The type of source access configuration.
 */
export type EventSourceMappingSourceAccessConfigurationType = (typeof EventSourceMappingSourceAccessConfigurationType)[keyof typeof EventSourceMappingSourceAccessConfigurationType];

export const FunctionArchitecturesItem = {
    X8664: "x86_64",
    Arm64: "arm64",
} as const;

export type FunctionArchitecturesItem = (typeof FunctionArchitecturesItem)[keyof typeof FunctionArchitecturesItem];

export const FunctionLoggingConfigApplicationLogLevel = {
    Trace: "TRACE",
    Debug: "DEBUG",
    Info: "INFO",
    Warn: "WARN",
    Error: "ERROR",
    Fatal: "FATAL",
} as const;

/**
 * Set this property to filter the application logs for your function that Lambda sends to CloudWatch. Lambda only sends application logs at the selected level of detail and lower, where ``TRACE`` is the highest level and ``FATAL`` is the lowest.
 */
export type FunctionLoggingConfigApplicationLogLevel = (typeof FunctionLoggingConfigApplicationLogLevel)[keyof typeof FunctionLoggingConfigApplicationLogLevel];

export const FunctionLoggingConfigLogFormat = {
    Text: "Text",
    Json: "JSON",
} as const;

/**
 * The format in which Lambda sends your function's application and system logs to CloudWatch. Select between plain text and structured JSON.
 */
export type FunctionLoggingConfigLogFormat = (typeof FunctionLoggingConfigLogFormat)[keyof typeof FunctionLoggingConfigLogFormat];

export const FunctionLoggingConfigSystemLogLevel = {
    Debug: "DEBUG",
    Info: "INFO",
    Warn: "WARN",
} as const;

/**
 * Set this property to filter the system logs for your function that Lambda sends to CloudWatch. Lambda only sends system logs at the selected level of detail and lower, where ``DEBUG`` is the highest level and ``WARN`` is the lowest.
 */
export type FunctionLoggingConfigSystemLogLevel = (typeof FunctionLoggingConfigSystemLogLevel)[keyof typeof FunctionLoggingConfigSystemLogLevel];

export const FunctionPackageType = {
    Image: "Image",
    Zip: "Zip",
} as const;

/**
 * The type of deployment package. Set to ``Image`` for container image and set ``Zip`` for .zip file archive.
 */
export type FunctionPackageType = (typeof FunctionPackageType)[keyof typeof FunctionPackageType];

export const FunctionRuntimeManagementConfigUpdateRuntimeOn = {
    Auto: "Auto",
    FunctionUpdate: "FunctionUpdate",
    Manual: "Manual",
} as const;

/**
 * Specify the runtime update mode.
 *   + *Auto (default)* - Automatically update to the most recent and secure runtime version using a [Two-phase runtime version rollout](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-two-phase). This is the best choice for most customers to ensure they always benefit from runtime updates.
 *  + *FunctionUpdate* - LAM updates the runtime of you function to the most recent and secure runtime version when you update your function. This approach synchronizes runtime updates with function deployments, giving you control over when runtime updates are applied and allowing you to detect and mitigate rare runtime update incompatibilities early. When using this setting, you need to regularly update your functions to keep their runtime up-to-date.
 *  + *Manual* - You specify a runtime version in your function configuration. The function will use this runtime version indefinitely. In the rare case where a new runtime version is incomp
 */
export type FunctionRuntimeManagementConfigUpdateRuntimeOn = (typeof FunctionRuntimeManagementConfigUpdateRuntimeOn)[keyof typeof FunctionRuntimeManagementConfigUpdateRuntimeOn];

export const FunctionSnapStartApplyOn = {
    PublishedVersions: "PublishedVersions",
    None: "None",
} as const;

/**
 * Set ``ApplyOn`` to ``PublishedVersions`` to create a snapshot of the initialized execution environment when you publish a function version.
 */
export type FunctionSnapStartApplyOn = (typeof FunctionSnapStartApplyOn)[keyof typeof FunctionSnapStartApplyOn];

export const FunctionSnapStartResponseApplyOn = {
    PublishedVersions: "PublishedVersions",
    None: "None",
} as const;

/**
 * When set to ``PublishedVersions``, Lambda creates a snapshot of the execution environment when you publish a function version.
 */
export type FunctionSnapStartResponseApplyOn = (typeof FunctionSnapStartResponseApplyOn)[keyof typeof FunctionSnapStartResponseApplyOn];

export const FunctionSnapStartResponseOptimizationStatus = {
    On: "On",
    Off: "Off",
} as const;

/**
 * When you provide a [qualified Amazon Resource Name (ARN)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using), this response element indicates whether SnapStart is activated for the specified function version.
 */
export type FunctionSnapStartResponseOptimizationStatus = (typeof FunctionSnapStartResponseOptimizationStatus)[keyof typeof FunctionSnapStartResponseOptimizationStatus];

export const FunctionTracingConfigMode = {
    Active: "Active",
    PassThrough: "PassThrough",
} as const;

/**
 * The tracing mode.
 */
export type FunctionTracingConfigMode = (typeof FunctionTracingConfigMode)[keyof typeof FunctionTracingConfigMode];

export const PermissionFunctionUrlAuthType = {
    AwsIam: "AWS_IAM",
    None: "NONE",
} as const;

/**
 * The type of authentication that your function URL uses. Set to ``AWS_IAM`` if you want to restrict access to authenticated users only. Set to ``NONE`` if you want to bypass IAM authentication to create a public endpoint. For more information, see [Security and auth model for Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
 */
export type PermissionFunctionUrlAuthType = (typeof PermissionFunctionUrlAuthType)[keyof typeof PermissionFunctionUrlAuthType];

export const UrlAllowMethodsItem = {
    Get: "GET",
    Put: "PUT",
    Head: "HEAD",
    Post: "POST",
    Patch: "PATCH",
    Delete: "DELETE",
    Asterisk: "*",
} as const;

export type UrlAllowMethodsItem = (typeof UrlAllowMethodsItem)[keyof typeof UrlAllowMethodsItem];

export const UrlAuthType = {
    AwsIam: "AWS_IAM",
    None: "NONE",
} as const;

/**
 * Can be either AWS_IAM if the requests are authorized via IAM, or NONE if no authorization is configured on the Function URL.
 */
export type UrlAuthType = (typeof UrlAuthType)[keyof typeof UrlAuthType];

export const UrlInvokeMode = {
    Buffered: "BUFFERED",
    ResponseStream: "RESPONSE_STREAM",
} as const;

/**
 * The invocation mode for the functionâ€™s URL. Set to BUFFERED if you want to buffer responses before returning them to the client. Set to RESPONSE_STREAM if you want to stream responses, allowing faster time to first byte and larger response payload sizes. If not set, defaults to BUFFERED.
 */
export type UrlInvokeMode = (typeof UrlInvokeMode)[keyof typeof UrlInvokeMode];
