// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AuthorizerStatus = {
    Active: "ACTIVE",
    Inactive: "INACTIVE",
} as const;

/**
 * The status of the authorizer.
 *
 * Valid values: `ACTIVE` | `INACTIVE`
 */
export type AuthorizerStatus = (typeof AuthorizerStatus)[keyof typeof AuthorizerStatus];

export const CaCertificateAutoRegistrationStatus = {
    Enable: "ENABLE",
    Disable: "DISABLE",
} as const;

/**
 * Whether the CA certificate is configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE".
 */
export type CaCertificateAutoRegistrationStatus = (typeof CaCertificateAutoRegistrationStatus)[keyof typeof CaCertificateAutoRegistrationStatus];

export const CaCertificateCertificateMode = {
    Default: "DEFAULT",
    SniOnly: "SNI_ONLY",
} as const;

/**
 * The mode of the CA.
 *
 * All the device certificates that are registered using this CA will be registered in the same mode as the CA. For more information about certificate mode for device certificates, see [certificate mode](https://docs.aws.amazon.com//iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode) .
 *
 * Valid values are "DEFAULT" and "SNI_ONLY".
 */
export type CaCertificateCertificateMode = (typeof CaCertificateCertificateMode)[keyof typeof CaCertificateCertificateMode];

export const CaCertificateStatus = {
    Active: "ACTIVE",
    Inactive: "INACTIVE",
} as const;

/**
 * The status of the CA certificate.
 *
 * Valid values are "ACTIVE" and "INACTIVE".
 */
export type CaCertificateStatus = (typeof CaCertificateStatus)[keyof typeof CaCertificateStatus];

export const CertificateMode = {
    Default: "DEFAULT",
    SniOnly: "SNI_ONLY",
} as const;

/**
 * Specifies which mode of certificate registration to use with this resource. Valid options are DEFAULT with CaCertificatePem and CertificatePem, SNI_ONLY with CertificatePem, and Default with CertificateSigningRequest.
 *
 * `DEFAULT` : A certificate in `DEFAULT` mode is either generated by AWS IoT Core or registered with an issuer certificate authority (CA). Devices with certificates in `DEFAULT` mode aren't required to send the Server Name Indication (SNI) extension when connecting to AWS IoT Core . However, to use features such as custom domains and VPC endpoints, we recommend that you use the SNI extension when connecting to AWS IoT Core .
 *
 * `SNI_ONLY` : A certificate in `SNI_ONLY` mode is registered without an issuer CA. Devices with certificates in `SNI_ONLY` mode must send the SNI extension when connecting to AWS IoT Core .
 */
export type CertificateMode = (typeof CertificateMode)[keyof typeof CertificateMode];

export const CertificateProviderOperation = {
    CreateCertificateFromCsr: "CreateCertificateFromCsr",
} as const;

export type CertificateProviderOperation = (typeof CertificateProviderOperation)[keyof typeof CertificateProviderOperation];

export const CertificateStatus = {
    Active: "ACTIVE",
    Inactive: "INACTIVE",
    Revoked: "REVOKED",
    PendingTransfer: "PENDING_TRANSFER",
    PendingActivation: "PENDING_ACTIVATION",
} as const;

/**
 * The status of the certificate.
 *
 * Valid values are ACTIVE, INACTIVE, REVOKED, PENDING_TRANSFER, and PENDING_ACTIVATION.
 *
 * The status value REGISTER_INACTIVE is deprecated and should not be used.
 */
export type CertificateStatus = (typeof CertificateStatus)[keyof typeof CertificateStatus];

export const CustomMetricMetricType = {
    StringList: "string-list",
    IpAddressList: "ip-address-list",
    NumberList: "number-list",
    Number: "number",
} as const;

/**
 * The type of the custom metric. Types include string-list, ip-address-list, number-list, and number.
 */
export type CustomMetricMetricType = (typeof CustomMetricMetricType)[keyof typeof CustomMetricMetricType];

export const DimensionType = {
    TopicFilter: "TOPIC_FILTER",
} as const;

/**
 * Specifies the type of the dimension.
 */
export type DimensionType = (typeof DimensionType)[keyof typeof DimensionType];

export const DomainConfigurationApplicationProtocol = {
    SecureMqtt: "SECURE_MQTT",
    MqttWss: "MQTT_WSS",
    Https: "HTTPS",
    Default: "DEFAULT",
} as const;

/**
 * An enumerated string that speciﬁes the application-layer protocol.
 */
export type DomainConfigurationApplicationProtocol = (typeof DomainConfigurationApplicationProtocol)[keyof typeof DomainConfigurationApplicationProtocol];

export const DomainConfigurationAuthenticationType = {
    AwsX509: "AWS_X509",
    CustomAuth: "CUSTOM_AUTH",
    AwsSigv4: "AWS_SIGV4",
    CustomAuthX509: "CUSTOM_AUTH_X509",
    Default: "DEFAULT",
} as const;

/**
 * An enumerated string that speciﬁes the authentication type.
 */
export type DomainConfigurationAuthenticationType = (typeof DomainConfigurationAuthenticationType)[keyof typeof DomainConfigurationAuthenticationType];

export const DomainConfigurationDomainType = {
    Endpoint: "ENDPOINT",
    AwsManaged: "AWS_MANAGED",
    CustomerManaged: "CUSTOMER_MANAGED",
} as const;

/**
 * The type of service delivered by the domain.
 */
export type DomainConfigurationDomainType = (typeof DomainConfigurationDomainType)[keyof typeof DomainConfigurationDomainType];

export const DomainConfigurationServerCertificateSummaryServerCertificateStatus = {
    Invalid: "INVALID",
    Valid: "VALID",
} as const;

/**
 * The status of the server certificate.
 */
export type DomainConfigurationServerCertificateSummaryServerCertificateStatus = (typeof DomainConfigurationServerCertificateSummaryServerCertificateStatus)[keyof typeof DomainConfigurationServerCertificateSummaryServerCertificateStatus];

export const DomainConfigurationServiceType = {
    Data: "DATA",
    CredentialProvider: "CREDENTIAL_PROVIDER",
    Jobs: "JOBS",
} as const;

/**
 * The type of service delivered by the endpoint.
 *
 * > AWS IoT Core currently supports only the `DATA` service type.
 */
export type DomainConfigurationServiceType = (typeof DomainConfigurationServiceType)[keyof typeof DomainConfigurationServiceType];

export const DomainConfigurationStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * The status to which the domain configuration should be updated.
 *
 * Valid values: `ENABLED` | `DISABLED`
 */
export type DomainConfigurationStatus = (typeof DomainConfigurationStatus)[keyof typeof DomainConfigurationStatus];

export const JobTemplateAction = {
    Cancel: "CANCEL",
} as const;

export type JobTemplateAction = (typeof JobTemplateAction)[keyof typeof JobTemplateAction];

export const JobTemplateFailureType = {
    Failed: "FAILED",
    Rejected: "REJECTED",
    TimedOut: "TIMED_OUT",
    All: "ALL",
} as const;

export type JobTemplateFailureType = (typeof JobTemplateFailureType)[keyof typeof JobTemplateFailureType];

export const JobTemplateJobRetryFailureType = {
    Failed: "FAILED",
    TimedOut: "TIMED_OUT",
    All: "ALL",
} as const;

export type JobTemplateJobRetryFailureType = (typeof JobTemplateJobRetryFailureType)[keyof typeof JobTemplateJobRetryFailureType];

export const LoggingDefaultLogLevel = {
    Error: "ERROR",
    Warn: "WARN",
    Info: "INFO",
    Debug: "DEBUG",
    Disabled: "DISABLED",
} as const;

/**
 * The log level to use. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
 */
export type LoggingDefaultLogLevel = (typeof LoggingDefaultLogLevel)[keyof typeof LoggingDefaultLogLevel];

export const MitigationActionEnableIoTLoggingParamsLogLevel = {
    Debug: "DEBUG",
    Info: "INFO",
    Error: "ERROR",
    Warn: "WARN",
    UnsetValue: "UNSET_VALUE",
} as const;

/**
 *  Specifies which types of information are logged.
 */
export type MitigationActionEnableIoTLoggingParamsLogLevel = (typeof MitigationActionEnableIoTLoggingParamsLogLevel)[keyof typeof MitigationActionEnableIoTLoggingParamsLogLevel];

export const MitigationActionReplaceDefaultPolicyVersionParamsTemplateName = {
    BlankPolicy: "BLANK_POLICY",
    UnsetValue: "UNSET_VALUE",
} as const;

/**
 * The name of the template to be applied. The only supported value is `BLANK_POLICY` .
 */
export type MitigationActionReplaceDefaultPolicyVersionParamsTemplateName = (typeof MitigationActionReplaceDefaultPolicyVersionParamsTemplateName)[keyof typeof MitigationActionReplaceDefaultPolicyVersionParamsTemplateName];

export const MitigationActionUpdateCaCertificateParamsAction = {
    Deactivate: "DEACTIVATE",
    UnsetValue: "UNSET_VALUE",
} as const;

/**
 * The action that you want to apply to the CA certificate. The only supported value is `DEACTIVATE` .
 */
export type MitigationActionUpdateCaCertificateParamsAction = (typeof MitigationActionUpdateCaCertificateParamsAction)[keyof typeof MitigationActionUpdateCaCertificateParamsAction];

export const MitigationActionUpdateDeviceCertificateParamsAction = {
    Deactivate: "DEACTIVATE",
    UnsetValue: "UNSET_VALUE",
} as const;

/**
 * The action that you want to apply to the device certificate. The only supported value is `DEACTIVATE` .
 */
export type MitigationActionUpdateDeviceCertificateParamsAction = (typeof MitigationActionUpdateDeviceCertificateParamsAction)[keyof typeof MitigationActionUpdateDeviceCertificateParamsAction];

export const ProvisioningTemplateTemplateType = {
    FleetProvisioning: "FLEET_PROVISIONING",
    Jitp: "JITP",
} as const;

/**
 * The type of the provisioning template.
 */
export type ProvisioningTemplateTemplateType = (typeof ProvisioningTemplateTemplateType)[keyof typeof ProvisioningTemplateTemplateType];

export const ResourceSpecificLoggingLogLevel = {
    Error: "ERROR",
    Warn: "WARN",
    Info: "INFO",
    Debug: "DEBUG",
    Disabled: "DISABLED",
} as const;

/**
 * The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.
 */
export type ResourceSpecificLoggingLogLevel = (typeof ResourceSpecificLoggingLogLevel)[keyof typeof ResourceSpecificLoggingLogLevel];

export const ResourceSpecificLoggingTargetType = {
    ThingGroup: "THING_GROUP",
    ClientId: "CLIENT_ID",
    SourceIp: "SOURCE_IP",
    PrincipalId: "PRINCIPAL_ID",
    EventType: "EVENT_TYPE",
} as const;

/**
 * The target type. Value must be THING_GROUP, CLIENT_ID, SOURCE_IP, PRINCIPAL_ID, or EVENT_TYPE.
 */
export type ResourceSpecificLoggingTargetType = (typeof ResourceSpecificLoggingTargetType)[keyof typeof ResourceSpecificLoggingTargetType];

export const ScheduledAuditDayOfWeek = {
    Sun: "SUN",
    Mon: "MON",
    Tue: "TUE",
    Wed: "WED",
    Thu: "THU",
    Fri: "FRI",
    Sat: "SAT",
    UnsetValue: "UNSET_VALUE",
} as const;

/**
 * The day of the week on which the scheduled audit takes place. Can be one of SUN, MON, TUE,WED, THU, FRI, or SAT. This field is required if the frequency parameter is set to WEEKLY or BIWEEKLY.
 */
export type ScheduledAuditDayOfWeek = (typeof ScheduledAuditDayOfWeek)[keyof typeof ScheduledAuditDayOfWeek];

export const ScheduledAuditFrequency = {
    Daily: "DAILY",
    Weekly: "WEEKLY",
    Biweekly: "BIWEEKLY",
    Monthly: "MONTHLY",
} as const;

/**
 * How often the scheduled audit takes place. Can be one of DAILY, WEEKLY, BIWEEKLY, or MONTHLY.
 */
export type ScheduledAuditFrequency = (typeof ScheduledAuditFrequency)[keyof typeof ScheduledAuditFrequency];

export const SecurityProfileBehaviorCriteriaComparisonOperator = {
    LessThan: "less-than",
    LessThanEquals: "less-than-equals",
    GreaterThan: "greater-than",
    GreaterThanEquals: "greater-than-equals",
    InCidrSet: "in-cidr-set",
    NotInCidrSet: "not-in-cidr-set",
    InPortSet: "in-port-set",
    NotInPortSet: "not-in-port-set",
    InSet: "in-set",
    NotInSet: "not-in-set",
} as const;

/**
 * The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold).
 */
export type SecurityProfileBehaviorCriteriaComparisonOperator = (typeof SecurityProfileBehaviorCriteriaComparisonOperator)[keyof typeof SecurityProfileBehaviorCriteriaComparisonOperator];

export const SecurityProfileMachineLearningDetectionConfigConfidenceLevel = {
    Low: "LOW",
    Medium: "MEDIUM",
    High: "HIGH",
} as const;

/**
 * The sensitivity of anomalous behavior evaluation. Can be Low, Medium, or High.
 */
export type SecurityProfileMachineLearningDetectionConfigConfidenceLevel = (typeof SecurityProfileMachineLearningDetectionConfigConfidenceLevel)[keyof typeof SecurityProfileMachineLearningDetectionConfigConfidenceLevel];

export const SecurityProfileMetricDimensionOperator = {
    In: "IN",
    NotIn: "NOT_IN",
} as const;

/**
 * Defines how the dimensionValues of a dimension are interpreted.
 */
export type SecurityProfileMetricDimensionOperator = (typeof SecurityProfileMetricDimensionOperator)[keyof typeof SecurityProfileMetricDimensionOperator];

export const SecurityProfileStatisticalThresholdStatistic = {
    Average: "Average",
    P0: "p0",
    P01: "p0.1",
    P001: "p0.01",
    P1: "p1",
    P10: "p10",
    P50: "p50",
    P90: "p90",
    P99: "p99",
    P999: "p99.9",
    P9999: "p99.99",
    P100: "p100",
} as const;

/**
 * The percentile which resolves to a threshold value by which compliance with a behavior is determined
 */
export type SecurityProfileStatisticalThresholdStatistic = (typeof SecurityProfileStatisticalThresholdStatistic)[keyof typeof SecurityProfileStatisticalThresholdStatistic];

export const SoftwarePackageVersionPackageVersionStatus = {
    Draft: "DRAFT",
    Published: "PUBLISHED",
    Deprecated: "DEPRECATED",
} as const;

export type SoftwarePackageVersionPackageVersionStatus = (typeof SoftwarePackageVersionPackageVersionStatus)[keyof typeof SoftwarePackageVersionPackageVersionStatus];

export const ThingTypePropagatingAttributeConnectionAttribute = {
    IotClientId: "iot:ClientId",
    IotThingThingName: "iot:Thing.ThingName",
} as const;

export type ThingTypePropagatingAttributeConnectionAttribute = (typeof ThingTypePropagatingAttributeConnectionAttribute)[keyof typeof ThingTypePropagatingAttributeConnectionAttribute];

export const TopicRuleCannedAccessControlList = {
    Private: "private",
    PublicRead: "public-read",
    PublicReadWrite: "public-read-write",
    AwsExecRead: "aws-exec-read",
    AuthenticatedRead: "authenticated-read",
    BucketOwnerRead: "bucket-owner-read",
    BucketOwnerFullControl: "bucket-owner-full-control",
    LogDeliveryWrite: "log-delivery-write",
} as const;

export type TopicRuleCannedAccessControlList = (typeof TopicRuleCannedAccessControlList)[keyof typeof TopicRuleCannedAccessControlList];

export const TopicRuleDestinationStatus = {
    Enabled: "ENABLED",
    InProgress: "IN_PROGRESS",
    Disabled: "DISABLED",
} as const;

export type TopicRuleDestinationStatus = (typeof TopicRuleDestinationStatus)[keyof typeof TopicRuleDestinationStatus];
