// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AgentActionGroupSignature = {
    AmazonUserInput: "AMAZON.UserInput",
} as const;

/**
 * Action Group Signature for a BuiltIn Action
 */
export type AgentActionGroupSignature = (typeof AgentActionGroupSignature)[keyof typeof AgentActionGroupSignature];

export const AgentActionGroupState = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * State of the action group
 */
export type AgentActionGroupState = (typeof AgentActionGroupState)[keyof typeof AgentActionGroupState];

export const AgentAliasStatus = {
    Creating: "CREATING",
    Prepared: "PREPARED",
    Failed: "FAILED",
    Updating: "UPDATING",
    Deleting: "DELETING",
} as const;

/**
 * The statuses an Agent Alias can be in.
 */
export type AgentAliasStatus = (typeof AgentAliasStatus)[keyof typeof AgentAliasStatus];

export const AgentCreationMode = {
    Default: "DEFAULT",
    Overridden: "OVERRIDDEN",
} as const;

/**
 * Creation Mode for Prompt Configuration.
 */
export type AgentCreationMode = (typeof AgentCreationMode)[keyof typeof AgentCreationMode];

export const AgentKnowledgeBaseState = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * State of the knowledge base; whether it is enabled or disabled
 */
export type AgentKnowledgeBaseState = (typeof AgentKnowledgeBaseState)[keyof typeof AgentKnowledgeBaseState];

export const AgentPromptState = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Prompt State.
 */
export type AgentPromptState = (typeof AgentPromptState)[keyof typeof AgentPromptState];

export const AgentPromptType = {
    PreProcessing: "PRE_PROCESSING",
    Orchestration: "ORCHESTRATION",
    PostProcessing: "POST_PROCESSING",
    KnowledgeBaseResponseGeneration: "KNOWLEDGE_BASE_RESPONSE_GENERATION",
} as const;

/**
 * Prompt Type.
 */
export type AgentPromptType = (typeof AgentPromptType)[keyof typeof AgentPromptType];

export const AgentStatus = {
    Creating: "CREATING",
    Preparing: "PREPARING",
    Prepared: "PREPARED",
    NotPrepared: "NOT_PREPARED",
    Deleting: "DELETING",
    Failed: "FAILED",
    Versioning: "VERSIONING",
    Updating: "UPDATING",
} as const;

/**
 * Schema Type for Action APIs.
 */
export type AgentStatus = (typeof AgentStatus)[keyof typeof AgentStatus];

export const DataSourceChunkingStrategy = {
    FixedSize: "FIXED_SIZE",
    None: "NONE",
} as const;

/**
 * Knowledge base can split your source data into chunks. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried. You have the following options for chunking your data. If you opt for NONE, then you may want to pre-process your files by splitting them up such that each file corresponds to a chunk.
 */
export type DataSourceChunkingStrategy = (typeof DataSourceChunkingStrategy)[keyof typeof DataSourceChunkingStrategy];

export const DataSourceStatus = {
    Available: "AVAILABLE",
    Deleting: "DELETING",
} as const;

/**
 * The status of a data source.
 */
export type DataSourceStatus = (typeof DataSourceStatus)[keyof typeof DataSourceStatus];

export const DataSourceType = {
    S3: "S3",
} as const;

/**
 * The type of the data source location.
 */
export type DataSourceType = (typeof DataSourceType)[keyof typeof DataSourceType];

export const GuardrailContentFilterType = {
    Sexual: "SEXUAL",
    Violence: "VIOLENCE",
    Hate: "HATE",
    Insults: "INSULTS",
    Misconduct: "MISCONDUCT",
    PromptAttack: "PROMPT_ATTACK",
} as const;

/**
 * Type of filter in content policy
 */
export type GuardrailContentFilterType = (typeof GuardrailContentFilterType)[keyof typeof GuardrailContentFilterType];

export const GuardrailFilterStrength = {
    None: "NONE",
    Low: "LOW",
    Medium: "MEDIUM",
    High: "HIGH",
} as const;

/**
 * Strength for filters
 */
export type GuardrailFilterStrength = (typeof GuardrailFilterStrength)[keyof typeof GuardrailFilterStrength];

export const GuardrailManagedWordsType = {
    Profanity: "PROFANITY",
} as const;

/**
 * Options for managed words.
 */
export type GuardrailManagedWordsType = (typeof GuardrailManagedWordsType)[keyof typeof GuardrailManagedWordsType];

export const GuardrailPiiEntityType = {
    Address: "ADDRESS",
    Age: "AGE",
    AwsAccessKey: "AWS_ACCESS_KEY",
    AwsSecretKey: "AWS_SECRET_KEY",
    CaHealthNumber: "CA_HEALTH_NUMBER",
    CaSocialInsuranceNumber: "CA_SOCIAL_INSURANCE_NUMBER",
    CreditDebitCardCvv: "CREDIT_DEBIT_CARD_CVV",
    CreditDebitCardExpiry: "CREDIT_DEBIT_CARD_EXPIRY",
    CreditDebitCardNumber: "CREDIT_DEBIT_CARD_NUMBER",
    DriverId: "DRIVER_ID",
    Email: "EMAIL",
    InternationalBankAccountNumber: "INTERNATIONAL_BANK_ACCOUNT_NUMBER",
    IpAddress: "IP_ADDRESS",
    LicensePlate: "LICENSE_PLATE",
    MacAddress: "MAC_ADDRESS",
    Name: "NAME",
    Password: "PASSWORD",
    Phone: "PHONE",
    Pin: "PIN",
    SwiftCode: "SWIFT_CODE",
    UkNationalHealthServiceNumber: "UK_NATIONAL_HEALTH_SERVICE_NUMBER",
    UkNationalInsuranceNumber: "UK_NATIONAL_INSURANCE_NUMBER",
    UkUniqueTaxpayerReferenceNumber: "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",
    Url: "URL",
    Username: "USERNAME",
    UsBankAccountNumber: "US_BANK_ACCOUNT_NUMBER",
    UsBankRoutingNumber: "US_BANK_ROUTING_NUMBER",
    UsIndividualTaxIdentificationNumber: "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",
    UsPassportNumber: "US_PASSPORT_NUMBER",
    UsSocialSecurityNumber: "US_SOCIAL_SECURITY_NUMBER",
    VehicleIdentificationNumber: "VEHICLE_IDENTIFICATION_NUMBER",
} as const;

/**
 * The currently supported PII entities
 */
export type GuardrailPiiEntityType = (typeof GuardrailPiiEntityType)[keyof typeof GuardrailPiiEntityType];

export const GuardrailSensitiveInformationAction = {
    Block: "BLOCK",
    Anonymize: "ANONYMIZE",
} as const;

/**
 * Options for sensitive information action.
 */
export type GuardrailSensitiveInformationAction = (typeof GuardrailSensitiveInformationAction)[keyof typeof GuardrailSensitiveInformationAction];

export const GuardrailStatus = {
    Creating: "CREATING",
    Updating: "UPDATING",
    Versioning: "VERSIONING",
    Ready: "READY",
    Failed: "FAILED",
    Deleting: "DELETING",
} as const;

/**
 * Status of the guardrail
 */
export type GuardrailStatus = (typeof GuardrailStatus)[keyof typeof GuardrailStatus];

export const GuardrailTopicType = {
    Deny: "DENY",
} as const;

/**
 * Type of topic in a policy
 */
export type GuardrailTopicType = (typeof GuardrailTopicType)[keyof typeof GuardrailTopicType];

export const KnowledgeBaseStatus = {
    Creating: "CREATING",
    Active: "ACTIVE",
    Deleting: "DELETING",
    Updating: "UPDATING",
    Failed: "FAILED",
} as const;

/**
 * The status of a knowledge base.
 */
export type KnowledgeBaseStatus = (typeof KnowledgeBaseStatus)[keyof typeof KnowledgeBaseStatus];

export const KnowledgeBaseStorageType = {
    OpensearchServerless: "OPENSEARCH_SERVERLESS",
    Pinecone: "PINECONE",
    Rds: "RDS",
} as const;

/**
 * The storage type of a knowledge base.
 */
export type KnowledgeBaseStorageType = (typeof KnowledgeBaseStorageType)[keyof typeof KnowledgeBaseStorageType];

export const KnowledgeBaseType = {
    Vector: "VECTOR",
} as const;

/**
 * The type of a knowledge base.
 */
export type KnowledgeBaseType = (typeof KnowledgeBaseType)[keyof typeof KnowledgeBaseType];
