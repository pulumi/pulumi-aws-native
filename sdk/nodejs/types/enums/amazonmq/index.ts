// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BrokerAuthenticationStrategy = {
    Simple: "SIMPLE",
    Ldap: "LDAP",
} as const;

/**
 * Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
 */
export type BrokerAuthenticationStrategy = (typeof BrokerAuthenticationStrategy)[keyof typeof BrokerAuthenticationStrategy];

export const BrokerAuthenticationStrategy0 = {
    Simple: "SIMPLE",
    Ldap: "LDAP",
} as const;

/**
 * Optional. The authentication strategy used to secure the broker. The default is `SIMPLE` .
 */
export type BrokerAuthenticationStrategy0 = (typeof BrokerAuthenticationStrategy0)[keyof typeof BrokerAuthenticationStrategy0];

export const BrokerDataReplicationMode = {
    None: "NONE",
    Crdr: "CRDR",
} as const;

/**
 * Defines whether this broker is a part of a data replication pair.
 */
export type BrokerDataReplicationMode = (typeof BrokerDataReplicationMode)[keyof typeof BrokerDataReplicationMode];

export const BrokerDataReplicationMode0 = {
    None: "NONE",
    Crdr: "CRDR",
} as const;

/**
 * Defines whether this broker is a part of a data replication pair.
 */
export type BrokerDataReplicationMode0 = (typeof BrokerDataReplicationMode0)[keyof typeof BrokerDataReplicationMode0];

export const BrokerDeploymentMode = {
    SingleInstance: "SINGLE_INSTANCE",
    ActiveStandbyMultiAz: "ACTIVE_STANDBY_MULTI_AZ",
    ClusterMultiAz: "CLUSTER_MULTI_AZ",
} as const;

/**
 * The deployment mode of the broker. Available values:
 *
 * - `SINGLE_INSTANCE`
 * - `ACTIVE_STANDBY_MULTI_AZ`
 * - `CLUSTER_MULTI_AZ`
 */
export type BrokerDeploymentMode = (typeof BrokerDeploymentMode)[keyof typeof BrokerDeploymentMode];

export const BrokerDeploymentMode0 = {
    SingleInstance: "SINGLE_INSTANCE",
    ActiveStandbyMultiAz: "ACTIVE_STANDBY_MULTI_AZ",
    ClusterMultiAz: "CLUSTER_MULTI_AZ",
} as const;

/**
 * The deployment mode of the broker. Available values:
 *
 * - `SINGLE_INSTANCE`
 * - `ACTIVE_STANDBY_MULTI_AZ`
 * - `CLUSTER_MULTI_AZ`
 */
export type BrokerDeploymentMode0 = (typeof BrokerDeploymentMode0)[keyof typeof BrokerDeploymentMode0];

export const BrokerEngineType = {
    Activemq: "ACTIVEMQ",
    Rabbitmq: "RABBITMQ",
} as const;

/**
 * The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
 */
export type BrokerEngineType = (typeof BrokerEngineType)[keyof typeof BrokerEngineType];

export const BrokerEngineType0 = {
    Activemq: "ACTIVEMQ",
    Rabbitmq: "RABBITMQ",
} as const;

/**
 * The type of broker engine. Currently, Amazon MQ supports `ACTIVEMQ` and `RABBITMQ` .
 */
export type BrokerEngineType0 = (typeof BrokerEngineType0)[keyof typeof BrokerEngineType0];

export const BrokerMaintenanceWindowDayOfWeek = {
    Monday: "MONDAY",
    Tuesday: "TUESDAY",
    Wednesday: "WEDNESDAY",
    Thursday: "THURSDAY",
    Friday: "FRIDAY",
    Saturday: "SATURDAY",
    Sunday: "SUNDAY",
} as const;

/**
 * _Allowed Values_: <code>MONDAY</code> | <code>TUESDAY</code> | <code>WEDNESDAY</code> | <code>THURSDAY</code> | <code>FRIDAY</code> | <code>SATURDAY</code> | <code>SUNDAY</code>
 */
export type BrokerMaintenanceWindowDayOfWeek = (typeof BrokerMaintenanceWindowDayOfWeek)[keyof typeof BrokerMaintenanceWindowDayOfWeek];

export const BrokerMaintenanceWindowDayOfWeek0 = {
    Monday: "MONDAY",
    Tuesday: "TUESDAY",
    Wednesday: "WEDNESDAY",
    Thursday: "THURSDAY",
    Friday: "FRIDAY",
    Saturday: "SATURDAY",
    Sunday: "SUNDAY",
} as const;

/**
 * _Allowed Values_: <code>MONDAY</code> | <code>TUESDAY</code> | <code>WEDNESDAY</code> | <code>THURSDAY</code> | <code>FRIDAY</code> | <code>SATURDAY</code> | <code>SUNDAY</code>
 */
export type BrokerMaintenanceWindowDayOfWeek0 = (typeof BrokerMaintenanceWindowDayOfWeek0)[keyof typeof BrokerMaintenanceWindowDayOfWeek0];

export const BrokerStorageType = {
    Ebs: "EBS",
    Efs: "EFS",
} as const;

/**
 * The broker's storage type.
 */
export type BrokerStorageType = (typeof BrokerStorageType)[keyof typeof BrokerStorageType];

export const BrokerStorageType0 = {
    Ebs: "EBS",
    Efs: "EFS",
} as const;

/**
 * The broker's storage type.
 */
export type BrokerStorageType0 = (typeof BrokerStorageType0)[keyof typeof BrokerStorageType0];
