// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ProactiveEngagementStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * If `ENABLED`, the Shield Response Team (SRT) will use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.
 * If `DISABLED`, the SRT will not proactively notify contacts about escalations or to initiate proactive customer support.
 */
export type ProactiveEngagementStatus = (typeof ProactiveEngagementStatus)[keyof typeof ProactiveEngagementStatus];

export const ProtectionApplicationLayerAutomaticResponseConfigurationStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Indicates whether automatic application layer DDoS mitigation is enabled for the protection.
 */
export type ProtectionApplicationLayerAutomaticResponseConfigurationStatus = (typeof ProtectionApplicationLayerAutomaticResponseConfigurationStatus)[keyof typeof ProtectionApplicationLayerAutomaticResponseConfigurationStatus];

export const ProtectionGroupAggregation = {
    Sum: "SUM",
    Mean: "MEAN",
    Max: "MAX",
} as const;

/**
 * Defines how AWS Shield combines resource data for the group in order to detect, mitigate, and report events.
 * * Sum - Use the total traffic across the group. This is a good choice for most cases. Examples include Elastic IP addresses for EC2 instances that scale manually or automatically.
 * * Mean - Use the average of the traffic across the group. This is a good choice for resources that share traffic uniformly. Examples include accelerators and load balancers.
 * * Max - Use the highest traffic from each resource. This is useful for resources that don't share traffic and for resources that share that traffic in a non-uniform way. Examples include Amazon CloudFront and origin resources for CloudFront distributions.
 */
export type ProtectionGroupAggregation = (typeof ProtectionGroupAggregation)[keyof typeof ProtectionGroupAggregation];

export const ProtectionGroupPattern = {
    All: "ALL",
    Arbitrary: "ARBITRARY",
    ByResourceType: "BY_RESOURCE_TYPE",
} as const;

/**
 * The criteria to use to choose the protected resources for inclusion in the group. You can include all resources that have protections, provide a list of resource Amazon Resource Names (ARNs), or include all resources of a specified resource type.
 */
export type ProtectionGroupPattern = (typeof ProtectionGroupPattern)[keyof typeof ProtectionGroupPattern];

export const ProtectionGroupResourceType = {
    CloudfrontDistribution: "CLOUDFRONT_DISTRIBUTION",
    Route53HostedZone: "ROUTE_53_HOSTED_ZONE",
    ElasticIpAllocation: "ELASTIC_IP_ALLOCATION",
    ClassicLoadBalancer: "CLASSIC_LOAD_BALANCER",
    ApplicationLoadBalancer: "APPLICATION_LOAD_BALANCER",
    GlobalAccelerator: "GLOBAL_ACCELERATOR",
} as const;

/**
 * The resource type to include in the protection group. All protected resources of this type are included in the protection group. Newly protected resources of this type are automatically added to the group. You must set this when you set `Pattern` to `BY_RESOURCE_TYPE` and you must not set it for any other `Pattern` setting.
 */
export type ProtectionGroupResourceType = (typeof ProtectionGroupResourceType)[keyof typeof ProtectionGroupResourceType];
