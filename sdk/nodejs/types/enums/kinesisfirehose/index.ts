// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const DeliveryStreamAmazonOpenSearchServerlessDestinationConfigurationS3BackupMode = {
    FailedDocumentsOnly: "FailedDocumentsOnly",
    AllDocuments: "AllDocuments",
} as const;

/**
 * Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with AmazonOpenSearchService-failed/ appended to the key prefix. When set to AllDocuments, Firehose delivers all incoming records to Amazon S3, and also writes failed documents with AmazonOpenSearchService-failed/ appended to the prefix.
 */
export type DeliveryStreamAmazonOpenSearchServerlessDestinationConfigurationS3BackupMode = (typeof DeliveryStreamAmazonOpenSearchServerlessDestinationConfigurationS3BackupMode)[keyof typeof DeliveryStreamAmazonOpenSearchServerlessDestinationConfigurationS3BackupMode];

export const DeliveryStreamAmazonopensearchserviceDestinationConfigurationIndexRotationPeriod = {
    NoRotation: "NoRotation",
    OneHour: "OneHour",
    OneDay: "OneDay",
    OneWeek: "OneWeek",
    OneMonth: "OneMonth",
} as const;

/**
 * The Amazon OpenSearch Service index rotation period. Index rotation appends a timestamp to the IndexName to facilitate the expiration of old data.
 */
export type DeliveryStreamAmazonopensearchserviceDestinationConfigurationIndexRotationPeriod = (typeof DeliveryStreamAmazonopensearchserviceDestinationConfigurationIndexRotationPeriod)[keyof typeof DeliveryStreamAmazonopensearchserviceDestinationConfigurationIndexRotationPeriod];

export const DeliveryStreamAmazonopensearchserviceDestinationConfigurationS3BackupMode = {
    FailedDocumentsOnly: "FailedDocumentsOnly",
    AllDocuments: "AllDocuments",
} as const;

/**
 * Defines how documents should be delivered to Amazon S3.
 */
export type DeliveryStreamAmazonopensearchserviceDestinationConfigurationS3BackupMode = (typeof DeliveryStreamAmazonopensearchserviceDestinationConfigurationS3BackupMode)[keyof typeof DeliveryStreamAmazonopensearchserviceDestinationConfigurationS3BackupMode];

export const DeliveryStreamAuthenticationConfigurationConnectivity = {
    Public: "PUBLIC",
    Private: "PRIVATE",
} as const;

/**
 * The type of connectivity used to access the Amazon MSK cluster.
 */
export type DeliveryStreamAuthenticationConfigurationConnectivity = (typeof DeliveryStreamAuthenticationConfigurationConnectivity)[keyof typeof DeliveryStreamAuthenticationConfigurationConnectivity];

export const DeliveryStreamDocumentIdOptionsDefaultDocumentIdFormat = {
    FirehoseDefault: "FIREHOSE_DEFAULT",
    NoDocumentId: "NO_DOCUMENT_ID",
} as const;

/**
 * When the `FIREHOSE_DEFAULT` option is chosen, Firehose generates a unique document ID for each record based on a unique internal identifier. The generated document ID is stable across multiple delivery attempts, which helps prevent the same record from being indexed multiple times with different document IDs.
 *
 * When the `NO_DOCUMENT_ID` option is chosen, Firehose does not include any document IDs in the requests it sends to the Amazon OpenSearch Service. This causes the Amazon OpenSearch Service domain to generate document IDs. In case of multiple delivery attempts, this may cause the same record to be indexed more than once with different document IDs. This option enables write-heavy operations, such as the ingestion of logs and observability data, to consume less resources in the Amazon OpenSearch Service domain, resulting in improved performance.
 */
export type DeliveryStreamDocumentIdOptionsDefaultDocumentIdFormat = (typeof DeliveryStreamDocumentIdOptionsDefaultDocumentIdFormat)[keyof typeof DeliveryStreamDocumentIdOptionsDefaultDocumentIdFormat];

export const DeliveryStreamElasticsearchDestinationConfigurationIndexRotationPeriod = {
    NoRotation: "NoRotation",
    OneHour: "OneHour",
    OneDay: "OneDay",
    OneWeek: "OneWeek",
    OneMonth: "OneMonth",
} as const;

/**
 * The frequency of Elasticsearch index rotation. If you enable index rotation, Kinesis Data Firehose appends a portion of the UTC arrival timestamp to the specified index name, and rotates the appended timestamp accordingly. For more information, see [Index Rotation for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-index-rotation) in the *Amazon Kinesis Data Firehose Developer Guide* .
 */
export type DeliveryStreamElasticsearchDestinationConfigurationIndexRotationPeriod = (typeof DeliveryStreamElasticsearchDestinationConfigurationIndexRotationPeriod)[keyof typeof DeliveryStreamElasticsearchDestinationConfigurationIndexRotationPeriod];

export const DeliveryStreamElasticsearchDestinationConfigurationS3BackupMode = {
    FailedDocumentsOnly: "FailedDocumentsOnly",
    AllDocuments: "AllDocuments",
} as const;

/**
 * The condition under which Kinesis Data Firehose delivers data to Amazon Simple Storage Service (Amazon S3). You can send Amazon S3 all documents (all data) or only the documents that Kinesis Data Firehose could not deliver to the Amazon ES destination. For more information and valid values, see the `S3BackupMode` content for the [ElasticsearchDestinationConfiguration](https://docs.aws.amazon.com/firehose/latest/APIReference/API_ElasticsearchDestinationConfiguration.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
 */
export type DeliveryStreamElasticsearchDestinationConfigurationS3BackupMode = (typeof DeliveryStreamElasticsearchDestinationConfigurationS3BackupMode)[keyof typeof DeliveryStreamElasticsearchDestinationConfigurationS3BackupMode];

export const DeliveryStreamEncryptionConfigurationInputKeyType = {
    AwsOwnedCmk: "AWS_OWNED_CMK",
    CustomerManagedCmk: "CUSTOMER_MANAGED_CMK",
} as const;

/**
 * Indicates the type of customer master key (CMK) to use for encryption. The default setting is `AWS_OWNED_CMK` . For more information about CMKs, see [Customer Master Keys (CMKs)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys) .
 *
 * You can use a CMK of type CUSTOMER_MANAGED_CMK to encrypt up to 500 delivery streams.
 *
 * > To encrypt your delivery stream, use symmetric CMKs. Kinesis Data Firehose doesn't support asymmetric CMKs. For information about symmetric and asymmetric CMKs, see [About Symmetric and Asymmetric CMKs](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html) in the AWS Key Management Service developer guide.
 */
export type DeliveryStreamEncryptionConfigurationInputKeyType = (typeof DeliveryStreamEncryptionConfigurationInputKeyType)[keyof typeof DeliveryStreamEncryptionConfigurationInputKeyType];

export const DeliveryStreamEncryptionConfigurationNoEncryptionConfig = {
    NoEncryption: "NoEncryption",
} as const;

/**
 * Disables encryption. For valid values, see the `NoEncryptionConfig` content for the [EncryptionConfiguration](https://docs.aws.amazon.com/firehose/latest/APIReference/API_EncryptionConfiguration.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
 */
export type DeliveryStreamEncryptionConfigurationNoEncryptionConfig = (typeof DeliveryStreamEncryptionConfigurationNoEncryptionConfig)[keyof typeof DeliveryStreamEncryptionConfigurationNoEncryptionConfig];

export const DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat = {
    Uncompressed: "UNCOMPRESSED",
    Gzip: "GZIP",
    Zip: "ZIP",
    Snappy: "Snappy",
    HadoopSnappy: "HADOOP_SNAPPY",
} as const;

/**
 * The compression format. If no value is specified, the default is `UNCOMPRESSED` .
 */
export type DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat = (typeof DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat)[keyof typeof DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat];

export const DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode = {
    Disabled: "Disabled",
    Enabled: "Enabled",
} as const;

/**
 * The Amazon S3 backup mode. After you create a Firehose stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the Firehose stream to disable it.
 */
export type DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode = (typeof DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode)[keyof typeof DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode];

export const DeliveryStreamHttpEndpointRequestConfigurationContentEncoding = {
    None: "NONE",
    Gzip: "GZIP",
} as const;

/**
 * Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. For more information, see Content-Encoding in MDN Web Docs, the official Mozilla documentation.
 */
export type DeliveryStreamHttpEndpointRequestConfigurationContentEncoding = (typeof DeliveryStreamHttpEndpointRequestConfigurationContentEncoding)[keyof typeof DeliveryStreamHttpEndpointRequestConfigurationContentEncoding];

export const DeliveryStreamIcebergDestinationConfigurations3BackupMode = {
    AllData: "AllData",
    FailedDataOnly: "FailedDataOnly",
} as const;

/**
 * Describes how Firehose will backup records. Currently,S3 backup only supports `FailedDataOnly` .
 */
export type DeliveryStreamIcebergDestinationConfigurations3BackupMode = (typeof DeliveryStreamIcebergDestinationConfigurations3BackupMode)[keyof typeof DeliveryStreamIcebergDestinationConfigurations3BackupMode];

export const DeliveryStreamProcessorType = {
    RecordDeAggregation: "RecordDeAggregation",
    Decompression: "Decompression",
    CloudWatchLogProcessing: "CloudWatchLogProcessing",
    Lambda: "Lambda",
    MetadataExtraction: "MetadataExtraction",
    AppendDelimiterToRecord: "AppendDelimiterToRecord",
} as const;

/**
 * The type of processor. Valid values: `Lambda` .
 */
export type DeliveryStreamProcessorType = (typeof DeliveryStreamProcessorType)[keyof typeof DeliveryStreamProcessorType];

export const DeliveryStreamRedshiftDestinationConfigurationS3BackupMode = {
    Disabled: "Disabled",
    Enabled: "Enabled",
} as const;

/**
 * The Amazon S3 backup mode. After you create a Firehose stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the Firehose stream to disable it.
 */
export type DeliveryStreamRedshiftDestinationConfigurationS3BackupMode = (typeof DeliveryStreamRedshiftDestinationConfigurationS3BackupMode)[keyof typeof DeliveryStreamRedshiftDestinationConfigurationS3BackupMode];

export const DeliveryStreamS3DestinationConfigurationCompressionFormat = {
    Uncompressed: "UNCOMPRESSED",
    Gzip: "GZIP",
    Zip: "ZIP",
    Snappy: "Snappy",
    HadoopSnappy: "HADOOP_SNAPPY",
} as const;

/**
 * The type of compression that Kinesis Data Firehose uses to compress the data that it delivers to the Amazon S3 bucket. For valid values, see the `CompressionFormat` content for the [S3DestinationConfiguration](https://docs.aws.amazon.com/firehose/latest/APIReference/API_S3DestinationConfiguration.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
 */
export type DeliveryStreamS3DestinationConfigurationCompressionFormat = (typeof DeliveryStreamS3DestinationConfigurationCompressionFormat)[keyof typeof DeliveryStreamS3DestinationConfigurationCompressionFormat];

export const DeliveryStreamSnowflakeDestinationConfigurationDataLoadingOption = {
    JsonMapping: "JSON_MAPPING",
    VariantContentMapping: "VARIANT_CONTENT_MAPPING",
    VariantContentAndMetadataMapping: "VARIANT_CONTENT_AND_METADATA_MAPPING",
} as const;

/**
 * Choose to load JSON keys mapped to table column names or choose to split the JSON payload where content is mapped to a record content column and source metadata is mapped to a record metadata column.
 */
export type DeliveryStreamSnowflakeDestinationConfigurationDataLoadingOption = (typeof DeliveryStreamSnowflakeDestinationConfigurationDataLoadingOption)[keyof typeof DeliveryStreamSnowflakeDestinationConfigurationDataLoadingOption];

export const DeliveryStreamSnowflakeDestinationConfigurationS3BackupMode = {
    FailedDataOnly: "FailedDataOnly",
    AllData: "AllData",
} as const;

/**
 * Choose an S3 backup mode
 */
export type DeliveryStreamSnowflakeDestinationConfigurationS3BackupMode = (typeof DeliveryStreamSnowflakeDestinationConfigurationS3BackupMode)[keyof typeof DeliveryStreamSnowflakeDestinationConfigurationS3BackupMode];

export const DeliveryStreamSplunkDestinationConfigurationHecEndpointType = {
    Raw: "Raw",
    Event: "Event",
} as const;

/**
 * This type can be either `Raw` or `Event` .
 */
export type DeliveryStreamSplunkDestinationConfigurationHecEndpointType = (typeof DeliveryStreamSplunkDestinationConfigurationHecEndpointType)[keyof typeof DeliveryStreamSplunkDestinationConfigurationHecEndpointType];

export const DeliveryStreamType = {
    DirectPut: "DirectPut",
    KinesisStreamAsSource: "KinesisStreamAsSource",
    MskasSource: "MSKAsSource",
} as const;

/**
 * The Firehose stream type. This can be one of the following values:
 *
 * - `DirectPut` : Provider applications access the Firehose stream directly.
 * - `KinesisStreamAsSource` : The Firehose stream uses a Kinesis data stream as a source.
 */
export type DeliveryStreamType = (typeof DeliveryStreamType)[keyof typeof DeliveryStreamType];
