// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy = {
    Allow: "ALLOW",
    Skip: "SKIP",
} as const;

/**
 * Conflict resolution strategy for centralization if the encryption strategy is set to CUSTOMER_MANAGED and the destination log group is encrypted with an AWS_OWNED KMS Key. ALLOW lets centralization go through while SKIP prevents centralization into the destination log group.
 */
export type OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy = (typeof OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy)[keyof typeof OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy];

export const OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy = {
    CustomerManaged: "CUSTOMER_MANAGED",
    AwsOwned: "AWS_OWNED",
} as const;

/**
 * Configuration that determines the encryption strategy of the destination log groups. CUSTOMER_MANAGED uses the configured KmsKeyArn to encrypt newly created destination log groups.
 */
export type OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy = (typeof OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy)[keyof typeof OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy];

export const OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy = {
    Allow: "ALLOW",
    Skip: "SKIP",
} as const;

/**
 * A strategy determining whether to centralize source log groups that are encrypted with customer managed KMS keys (CMK). ALLOW will consider CMK encrypted source log groups for centralization while SKIP will skip CMK encrypted source log groups from centralization.
 */
export type OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy = (typeof OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy)[keyof typeof OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy];

export const OrganizationTelemetryRuleDestinationType = {
    CloudWatchLogs: "cloud-watch-logs",
} as const;

/**
 * Type of telemetry destination
 */
export type OrganizationTelemetryRuleDestinationType = (typeof OrganizationTelemetryRuleDestinationType)[keyof typeof OrganizationTelemetryRuleDestinationType];

export const OrganizationTelemetryRuleResourceType = {
    Awsec2vpc: "AWS::EC2::VPC",
} as const;

/**
 * Resource Type associated with the Organization Telemetry Rule
 */
export type OrganizationTelemetryRuleResourceType = (typeof OrganizationTelemetryRuleResourceType)[keyof typeof OrganizationTelemetryRuleResourceType];

export const OrganizationTelemetryRuleTelemetryType = {
    Logs: "Logs",
} as const;

/**
 * Telemetry Type associated with the Organization Telemetry Rule
 */
export type OrganizationTelemetryRuleTelemetryType = (typeof OrganizationTelemetryRuleTelemetryType)[keyof typeof OrganizationTelemetryRuleTelemetryType];

export const TelemetryRuleDestinationType = {
    CloudWatchLogs: "cloud-watch-logs",
} as const;

/**
 * Type of telemetry destination
 */
export type TelemetryRuleDestinationType = (typeof TelemetryRuleDestinationType)[keyof typeof TelemetryRuleDestinationType];

export const TelemetryRuleResourceType = {
    Awsec2vpc: "AWS::EC2::VPC",
} as const;

/**
 * Resource Type associated with the Telemetry Rule
 */
export type TelemetryRuleResourceType = (typeof TelemetryRuleResourceType)[keyof typeof TelemetryRuleResourceType];

export const TelemetryRuleTelemetryType = {
    Logs: "Logs",
} as const;

/**
 * Telemetry Type associated with the Telemetry Rule
 */
export type TelemetryRuleTelemetryType = (typeof TelemetryRuleTelemetryType)[keyof typeof TelemetryRuleTelemetryType];
