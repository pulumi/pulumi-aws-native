// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ModuleVersionVisibility = {
    Private: "PRIVATE",
} as const;

/**
 * The scope at which the type is visible and usable in CloudFormation operations.
 *
 * The only allowed value at present is:
 *
 * PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.
 */
export type ModuleVersionVisibility = (typeof ModuleVersionVisibility)[keyof typeof ModuleVersionVisibility];

export const PublicTypeVersionType = {
    Resource: "RESOURCE",
    Module: "MODULE",
} as const;

/**
 * The kind of extension
 */
export type PublicTypeVersionType = (typeof PublicTypeVersionType)[keyof typeof PublicTypeVersionType];

export const PublisherIdentityProvider = {
    AWSMarketplace: "AWS_Marketplace",
    GitHub: "GitHub",
    Bitbucket: "Bitbucket",
} as const;

/**
 * The type of account used as the identity provider when registering this publisher with CloudFormation.
 */
export type PublisherIdentityProvider = (typeof PublisherIdentityProvider)[keyof typeof PublisherIdentityProvider];

export const PublisherPublisherStatus = {
    Verified: "VERIFIED",
    Unverified: "UNVERIFIED",
} as const;

/**
 * Whether the publisher is verified.
 */
export type PublisherPublisherStatus = (typeof PublisherPublisherStatus)[keyof typeof PublisherPublisherStatus];

export const ResourceVersionProvisioningType = {
    NonProvisionable: "NON_PROVISIONABLE",
    Immutable: "IMMUTABLE",
    FullyMutable: "FULLY_MUTABLE",
} as const;

/**
 * The provisioning behavior of the type. AWS CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.
 */
export type ResourceVersionProvisioningType = (typeof ResourceVersionProvisioningType)[keyof typeof ResourceVersionProvisioningType];

export const ResourceVersionVisibility = {
    Public: "PUBLIC",
    Private: "PRIVATE",
} as const;

/**
 * The scope at which the type is visible and usable in CloudFormation operations.
 *
 * Valid values include:
 *
 * PRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.
 *
 * PUBLIC: The type is publically visible and usable within any Amazon account.
 */
export type ResourceVersionVisibility = (typeof ResourceVersionVisibility)[keyof typeof ResourceVersionVisibility];

export const StackSetCallAs = {
    Self: "SELF",
    DelegatedAdmin: "DELEGATED_ADMIN",
} as const;

/**
 * Specifies the AWS account that you are acting from. By default, SELF is specified. For self-managed permissions, specify SELF; for service-managed permissions, if you are signed in to the organization's management account, specify SELF. If you are signed in to a delegated administrator account, specify DELEGATED_ADMIN.
 */
export type StackSetCallAs = (typeof StackSetCallAs)[keyof typeof StackSetCallAs];

export const StackSetCapability = {
    CapabilityIam: "CAPABILITY_IAM",
    CapabilityNamedIam: "CAPABILITY_NAMED_IAM",
    CapabilityAutoExpand: "CAPABILITY_AUTO_EXPAND",
} as const;

export type StackSetCapability = (typeof StackSetCapability)[keyof typeof StackSetCapability];

export const StackSetPermissionModel = {
    ServiceManaged: "SERVICE_MANAGED",
    SelfManaged: "SELF_MANAGED",
} as const;

/**
 * Describes how the IAM roles required for stack set operations are created. By default, SELF-MANAGED is specified.
 */
export type StackSetPermissionModel = (typeof StackSetPermissionModel)[keyof typeof StackSetPermissionModel];

export const StackSetRegionConcurrencyType = {
    Sequential: "SEQUENTIAL",
    Parallel: "PARALLEL",
} as const;

/**
 * The concurrency type of deploying StackSets operations in regions, could be in parallel or one region at a time
 */
export type StackSetRegionConcurrencyType = (typeof StackSetRegionConcurrencyType)[keyof typeof StackSetRegionConcurrencyType];

export const TypeActivationType = {
    Resource: "RESOURCE",
    Module: "MODULE",
} as const;

/**
 * The kind of extension
 */
export type TypeActivationType = (typeof TypeActivationType)[keyof typeof TypeActivationType];

export const TypeActivationVersionBump = {
    Major: "MAJOR",
    Minor: "MINOR",
} as const;

/**
 * Manually updates a previously-enabled type to a new major or minor version, if available. You can also use this parameter to update the value of AutoUpdateEnabled
 */
export type TypeActivationVersionBump = (typeof TypeActivationVersionBump)[keyof typeof TypeActivationVersionBump];
