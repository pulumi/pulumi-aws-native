// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BrowserCustomBrowserNetworkMode = {
    Public: "PUBLIC",
    Vpc: "VPC",
} as const;

/**
 * Network modes supported by browser
 */
export type BrowserCustomBrowserNetworkMode = (typeof BrowserCustomBrowserNetworkMode)[keyof typeof BrowserCustomBrowserNetworkMode];

export const BrowserCustomBrowserStatus = {
    Creating: "CREATING",
    CreateFailed: "CREATE_FAILED",
    Ready: "READY",
    Deleting: "DELETING",
    DeleteFailed: "DELETE_FAILED",
    Deleted: "DELETED",
} as const;

/**
 * Status of browser
 */
export type BrowserCustomBrowserStatus = (typeof BrowserCustomBrowserStatus)[keyof typeof BrowserCustomBrowserStatus];

export const CodeInterpreterCustomCodeInterpreterNetworkMode = {
    Public: "PUBLIC",
    Sandbox: "SANDBOX",
    Vpc: "VPC",
} as const;

/**
 * Network modes supported by code interpreter
 */
export type CodeInterpreterCustomCodeInterpreterNetworkMode = (typeof CodeInterpreterCustomCodeInterpreterNetworkMode)[keyof typeof CodeInterpreterCustomCodeInterpreterNetworkMode];

export const CodeInterpreterCustomCodeInterpreterStatus = {
    Creating: "CREATING",
    CreateFailed: "CREATE_FAILED",
    Ready: "READY",
    Deleting: "DELETING",
    DeleteFailed: "DELETE_FAILED",
    Deleted: "DELETED",
} as const;

/**
 * Status of Code interpreter
 */
export type CodeInterpreterCustomCodeInterpreterStatus = (typeof CodeInterpreterCustomCodeInterpreterStatus)[keyof typeof CodeInterpreterCustomCodeInterpreterStatus];

export const GatewayAuthorizerType = {
    CustomJwt: "CUSTOM_JWT",
    AwsIam: "AWS_IAM",
} as const;

export type GatewayAuthorizerType = (typeof GatewayAuthorizerType)[keyof typeof GatewayAuthorizerType];

export const GatewayExceptionLevel = {
    Debug: "DEBUG",
} as const;

export type GatewayExceptionLevel = (typeof GatewayExceptionLevel)[keyof typeof GatewayExceptionLevel];

export const GatewayProtocolType = {
    Mcp: "MCP",
} as const;

export type GatewayProtocolType = (typeof GatewayProtocolType)[keyof typeof GatewayProtocolType];

export const GatewaySearchType = {
    Semantic: "SEMANTIC",
} as const;

export type GatewaySearchType = (typeof GatewaySearchType)[keyof typeof GatewaySearchType];

export const GatewayStatus = {
    Creating: "CREATING",
    Updating: "UPDATING",
    UpdateUnsuccessful: "UPDATE_UNSUCCESSFUL",
    Deleting: "DELETING",
    Ready: "READY",
    Failed: "FAILED",
} as const;

export type GatewayStatus = (typeof GatewayStatus)[keyof typeof GatewayStatus];

export const GatewayTargetApiKeyCredentialLocation = {
    Header: "HEADER",
    QueryParameter: "QUERY_PARAMETER",
} as const;

export type GatewayTargetApiKeyCredentialLocation = (typeof GatewayTargetApiKeyCredentialLocation)[keyof typeof GatewayTargetApiKeyCredentialLocation];

export const GatewayTargetCredentialProviderType = {
    GatewayIamRole: "GATEWAY_IAM_ROLE",
    Oauth: "OAUTH",
    ApiKey: "API_KEY",
} as const;

export type GatewayTargetCredentialProviderType = (typeof GatewayTargetCredentialProviderType)[keyof typeof GatewayTargetCredentialProviderType];

export const GatewayTargetSchemaType = {
    String: "string",
    Number: "number",
    Object: "object",
    Array: "array",
    Boolean: "boolean",
    Integer: "integer",
} as const;

export type GatewayTargetSchemaType = (typeof GatewayTargetSchemaType)[keyof typeof GatewayTargetSchemaType];

export const GatewayTargetTargetStatus = {
    Creating: "CREATING",
    Updating: "UPDATING",
    UpdateUnsuccessful: "UPDATE_UNSUCCESSFUL",
    Deleting: "DELETING",
    Ready: "READY",
    Failed: "FAILED",
} as const;

export type GatewayTargetTargetStatus = (typeof GatewayTargetTargetStatus)[keyof typeof GatewayTargetTargetStatus];

export const MemoryCustomMemoryStrategyStatus = {
    Creating: "CREATING",
    Active: "ACTIVE",
    Deleting: "DELETING",
    Failed: "FAILED",
} as const;

/**
 * Status of the memory strategy
 */
export type MemoryCustomMemoryStrategyStatus = (typeof MemoryCustomMemoryStrategyStatus)[keyof typeof MemoryCustomMemoryStrategyStatus];

export const MemoryCustomMemoryStrategyType = {
    Semantic: "SEMANTIC",
    Summarization: "SUMMARIZATION",
    UserPreference: "USER_PREFERENCE",
    Custom: "CUSTOM",
} as const;

/**
 * Type of memory strategy
 */
export type MemoryCustomMemoryStrategyType = (typeof MemoryCustomMemoryStrategyType)[keyof typeof MemoryCustomMemoryStrategyType];

export const MemorySemanticMemoryStrategyStatus = {
    Creating: "CREATING",
    Active: "ACTIVE",
    Deleting: "DELETING",
    Failed: "FAILED",
} as const;

/**
 * Status of the memory strategy
 */
export type MemorySemanticMemoryStrategyStatus = (typeof MemorySemanticMemoryStrategyStatus)[keyof typeof MemorySemanticMemoryStrategyStatus];

export const MemorySemanticMemoryStrategyType = {
    Semantic: "SEMANTIC",
    Summarization: "SUMMARIZATION",
    UserPreference: "USER_PREFERENCE",
    Custom: "CUSTOM",
} as const;

/**
 * Type of memory strategy
 */
export type MemorySemanticMemoryStrategyType = (typeof MemorySemanticMemoryStrategyType)[keyof typeof MemorySemanticMemoryStrategyType];

export const MemoryStatus = {
    Creating: "CREATING",
    Active: "ACTIVE",
    Failed: "FAILED",
    Deleting: "DELETING",
} as const;

/**
 * Status of the Memory resource
 */
export type MemoryStatus = (typeof MemoryStatus)[keyof typeof MemoryStatus];

export const MemorySummaryMemoryStrategyStatus = {
    Creating: "CREATING",
    Active: "ACTIVE",
    Deleting: "DELETING",
    Failed: "FAILED",
} as const;

/**
 * Status of the memory strategy
 */
export type MemorySummaryMemoryStrategyStatus = (typeof MemorySummaryMemoryStrategyStatus)[keyof typeof MemorySummaryMemoryStrategyStatus];

export const MemorySummaryMemoryStrategyType = {
    Semantic: "SEMANTIC",
    Summarization: "SUMMARIZATION",
    UserPreference: "USER_PREFERENCE",
    Custom: "CUSTOM",
} as const;

/**
 * Type of memory strategy
 */
export type MemorySummaryMemoryStrategyType = (typeof MemorySummaryMemoryStrategyType)[keyof typeof MemorySummaryMemoryStrategyType];

export const MemoryUserPreferenceMemoryStrategyStatus = {
    Creating: "CREATING",
    Active: "ACTIVE",
    Deleting: "DELETING",
    Failed: "FAILED",
} as const;

/**
 * Status of the memory strategy
 */
export type MemoryUserPreferenceMemoryStrategyStatus = (typeof MemoryUserPreferenceMemoryStrategyStatus)[keyof typeof MemoryUserPreferenceMemoryStrategyStatus];

export const MemoryUserPreferenceMemoryStrategyType = {
    Semantic: "SEMANTIC",
    Summarization: "SUMMARIZATION",
    UserPreference: "USER_PREFERENCE",
    Custom: "CUSTOM",
} as const;

/**
 * Type of memory strategy
 */
export type MemoryUserPreferenceMemoryStrategyType = (typeof MemoryUserPreferenceMemoryStrategyType)[keyof typeof MemoryUserPreferenceMemoryStrategyType];

export const RuntimeAgentStatus = {
    Creating: "CREATING",
    CreateFailed: "CREATE_FAILED",
    Updating: "UPDATING",
    UpdateFailed: "UPDATE_FAILED",
    Ready: "READY",
    Deleting: "DELETING",
} as const;

export type RuntimeAgentStatus = (typeof RuntimeAgentStatus)[keyof typeof RuntimeAgentStatus];

export const RuntimeEndpointAgentRuntimeEndpointStatus = {
    Creating: "CREATING",
    CreateFailed: "CREATE_FAILED",
    Updating: "UPDATING",
    UpdateFailed: "UPDATE_FAILED",
    Ready: "READY",
    Deleting: "DELETING",
} as const;

export type RuntimeEndpointAgentRuntimeEndpointStatus = (typeof RuntimeEndpointAgentRuntimeEndpointStatus)[keyof typeof RuntimeEndpointAgentRuntimeEndpointStatus];

export const RuntimeNetworkMode = {
    Public: "PUBLIC",
    Vpc: "VPC",
} as const;

/**
 * Network mode configuration type
 */
export type RuntimeNetworkMode = (typeof RuntimeNetworkMode)[keyof typeof RuntimeNetworkMode];

export const RuntimeProtocolConfiguration = {
    Mcp: "MCP",
    Http: "HTTP",
    A2a: "A2A",
} as const;

export type RuntimeProtocolConfiguration = (typeof RuntimeProtocolConfiguration)[keyof typeof RuntimeProtocolConfiguration];
