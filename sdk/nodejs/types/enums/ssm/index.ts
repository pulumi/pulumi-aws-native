// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AssociationComplianceSeverity = {
    Critical: "CRITICAL",
    High: "HIGH",
    Medium: "MEDIUM",
    Low: "LOW",
    Unspecified: "UNSPECIFIED",
} as const;

export type AssociationComplianceSeverity = (typeof AssociationComplianceSeverity)[keyof typeof AssociationComplianceSeverity];

export const AssociationSyncCompliance = {
    Auto: "AUTO",
    Manual: "MANUAL",
} as const;

export type AssociationSyncCompliance = (typeof AssociationSyncCompliance)[keyof typeof AssociationSyncCompliance];

export const DocumentAttachmentsSourceKey = {
    SourceUrl: "SourceUrl",
    S3FileUrl: "S3FileUrl",
    AttachmentReference: "AttachmentReference",
} as const;

/**
 * The key of a key-value pair that identifies the location of an attachment to a document.
 */
export type DocumentAttachmentsSourceKey = (typeof DocumentAttachmentsSourceKey)[keyof typeof DocumentAttachmentsSourceKey];

export const DocumentFormat = {
    Yaml: "YAML",
    Json: "JSON",
    Text: "TEXT",
} as const;

/**
 * Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
 */
export type DocumentFormat = (typeof DocumentFormat)[keyof typeof DocumentFormat];

export const DocumentType = {
    ApplicationConfiguration: "ApplicationConfiguration",
    ApplicationConfigurationSchema: "ApplicationConfigurationSchema",
    Automation: "Automation",
    AutomationChangeTemplate: "Automation.ChangeTemplate",
    ChangeCalendar: "ChangeCalendar",
    CloudFormation: "CloudFormation",
    Command: "Command",
    DeploymentStrategy: "DeploymentStrategy",
    Package: "Package",
    Policy: "Policy",
    ProblemAnalysis: "ProblemAnalysis",
    ProblemAnalysisTemplate: "ProblemAnalysisTemplate",
    Session: "Session",
    OpsPack: "OpsPack",
} as const;

/**
 * The type of document to create.
 */
export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType];

export const DocumentUpdateMethod = {
    Replace: "Replace",
    NewVersion: "NewVersion",
} as const;

/**
 * Update method - when set to 'Replace', the update will replace the existing document; when set to 'NewVersion', the update will create a new version.
 */
export type DocumentUpdateMethod = (typeof DocumentUpdateMethod)[keyof typeof DocumentUpdateMethod];

export const ParameterDataType = {
    Text: "text",
    Awsec2image: "aws:ec2:image",
} as const;

/**
 * The corresponding DataType of the parameter.
 */
export type ParameterDataType = (typeof ParameterDataType)[keyof typeof ParameterDataType];

export const ParameterTier = {
    Standard: "Standard",
    Advanced: "Advanced",
    IntelligentTiering: "Intelligent-Tiering",
} as const;

/**
 * The corresponding tier of the parameter.
 */
export type ParameterTier = (typeof ParameterTier)[keyof typeof ParameterTier];

export const ParameterType = {
    String: "String",
    StringList: "StringList",
    SecureString: "SecureString",
} as const;

/**
 * The type of the parameter.
 */
export type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];

export const PatchBaselineApprovedPatchesComplianceLevel = {
    Critical: "CRITICAL",
    High: "HIGH",
    Medium: "MEDIUM",
    Low: "LOW",
    Informational: "INFORMATIONAL",
    Unspecified: "UNSPECIFIED",
} as const;

/**
 * Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.
 */
export type PatchBaselineApprovedPatchesComplianceLevel = (typeof PatchBaselineApprovedPatchesComplianceLevel)[keyof typeof PatchBaselineApprovedPatchesComplianceLevel];

export const PatchBaselineOperatingSystem = {
    Windows: "WINDOWS",
    AmazonLinux: "AMAZON_LINUX",
    AmazonLinux2: "AMAZON_LINUX_2",
    AmazonLinux2022: "AMAZON_LINUX_2022",
    AmazonLinux2023: "AMAZON_LINUX_2023",
    Ubuntu: "UBUNTU",
    RedhatEnterpriseLinux: "REDHAT_ENTERPRISE_LINUX",
    Suse: "SUSE",
    Centos: "CENTOS",
    OracleLinux: "ORACLE_LINUX",
    Debian: "DEBIAN",
    Macos: "MACOS",
    Raspbian: "RASPBIAN",
    RockyLinux: "ROCKY_LINUX",
} as const;

/**
 * Defines the operating system the patch baseline applies to. The Default value is WINDOWS.
 */
export type PatchBaselineOperatingSystem = (typeof PatchBaselineOperatingSystem)[keyof typeof PatchBaselineOperatingSystem];

export const PatchBaselinePatchFilterKey = {
    AdvisoryId: "ADVISORY_ID",
    Arch: "ARCH",
    BugzillaId: "BUGZILLA_ID",
    Classification: "CLASSIFICATION",
    CveId: "CVE_ID",
    Epoch: "EPOCH",
    MsrcSeverity: "MSRC_SEVERITY",
    Name: "NAME",
    PatchId: "PATCH_ID",
    PatchSet: "PATCH_SET",
    Priority: "PRIORITY",
    Product: "PRODUCT",
    ProductFamily: "PRODUCT_FAMILY",
    Release: "RELEASE",
    Repository: "REPOSITORY",
    Section: "SECTION",
    Security: "SECURITY",
    Severity: "SEVERITY",
    Version: "VERSION",
} as const;

export type PatchBaselinePatchFilterKey = (typeof PatchBaselinePatchFilterKey)[keyof typeof PatchBaselinePatchFilterKey];

export const PatchBaselineRejectedPatchesAction = {
    AllowAsDependency: "ALLOW_AS_DEPENDENCY",
    Block: "BLOCK",
} as const;

/**
 * The action for Patch Manager to take on patches included in the RejectedPackages list.
 */
export type PatchBaselineRejectedPatchesAction = (typeof PatchBaselineRejectedPatchesAction)[keyof typeof PatchBaselineRejectedPatchesAction];

export const PatchBaselineRuleComplianceLevel = {
    Critical: "CRITICAL",
    High: "HIGH",
    Informational: "INFORMATIONAL",
    Low: "LOW",
    Medium: "MEDIUM",
    Unspecified: "UNSPECIFIED",
} as const;

export type PatchBaselineRuleComplianceLevel = (typeof PatchBaselineRuleComplianceLevel)[keyof typeof PatchBaselineRuleComplianceLevel];
