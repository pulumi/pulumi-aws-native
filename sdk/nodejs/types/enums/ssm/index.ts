// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AssociationComplianceSeverity = {
    Critical: "CRITICAL",
    High: "HIGH",
    Medium: "MEDIUM",
    Low: "LOW",
    Unspecified: "UNSPECIFIED",
} as const;

/**
 * The severity level that is assigned to the association.
 */
export type AssociationComplianceSeverity = (typeof AssociationComplianceSeverity)[keyof typeof AssociationComplianceSeverity];

export const AssociationSyncCompliance = {
    Auto: "AUTO",
    Manual: "MANUAL",
} as const;

/**
 * The mode for generating association compliance. You can specify `AUTO` or `MANUAL` . In `AUTO` mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is `COMPLIANT` . If the association execution doesn't run successfully, the association is `NON-COMPLIANT` .
 *
 * In `MANUAL` mode, you must specify the `AssociationId` as a parameter for the `PutComplianceItems` API action. In this case, compliance data is not managed by State Manager. It is managed by your direct call to the `PutComplianceItems` API action.
 *
 * By default, all associations use `AUTO` mode.
 */
export type AssociationSyncCompliance = (typeof AssociationSyncCompliance)[keyof typeof AssociationSyncCompliance];

export const DocumentAttachmentsSourceKey = {
    SourceUrl: "SourceUrl",
    S3FileUrl: "S3FileUrl",
    AttachmentReference: "AttachmentReference",
} as const;

/**
 * The key of a key-value pair that identifies the location of an attachment to a document.
 */
export type DocumentAttachmentsSourceKey = (typeof DocumentAttachmentsSourceKey)[keyof typeof DocumentAttachmentsSourceKey];

export const DocumentFormat = {
    Yaml: "YAML",
    Json: "JSON",
    Text: "TEXT",
} as const;

/**
 * Specify the document format for the request. The document format can be either JSON or YAML. JSON is the default format.
 */
export type DocumentFormat = (typeof DocumentFormat)[keyof typeof DocumentFormat];

export const DocumentType = {
    ApplicationConfiguration: "ApplicationConfiguration",
    ApplicationConfigurationSchema: "ApplicationConfigurationSchema",
    Automation: "Automation",
    AutomationChangeTemplate: "Automation.ChangeTemplate",
    AutoApprovalPolicy: "AutoApprovalPolicy",
    ChangeCalendar: "ChangeCalendar",
    CloudFormation: "CloudFormation",
    Command: "Command",
    DeploymentStrategy: "DeploymentStrategy",
    ManualApprovalPolicy: "ManualApprovalPolicy",
    Package: "Package",
    Policy: "Policy",
    ProblemAnalysis: "ProblemAnalysis",
    ProblemAnalysisTemplate: "ProblemAnalysisTemplate",
    Session: "Session",
} as const;

/**
 * The type of document to create.
 */
export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType];

export const DocumentUpdateMethod = {
    Replace: "Replace",
    NewVersion: "NewVersion",
} as const;

/**
 * Update method - when set to 'Replace', the update will replace the existing document; when set to 'NewVersion', the update will create a new version.
 */
export type DocumentUpdateMethod = (typeof DocumentUpdateMethod)[keyof typeof DocumentUpdateMethod];

export const ParameterDataType = {
    Text: "text",
    Awsec2image: "aws:ec2:image",
} as const;

/**
 * The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The default is ``text``.
 */
export type ParameterDataType = (typeof ParameterDataType)[keyof typeof ParameterDataType];

export const ParameterTier = {
    Standard: "Standard",
    Advanced: "Advanced",
    IntelligentTiering: "Intelligent-Tiering",
} as const;

/**
 * The parameter tier.
 */
export type ParameterTier = (typeof ParameterTier)[keyof typeof ParameterTier];

export const ParameterType = {
    String: "String",
    StringList: "StringList",
} as const;

/**
 * The type of parameter.
 *   Parameters of type ``SecureString`` are not supported by CFNlong.
 */
export type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];

export const PatchBaselineApprovedPatchesComplianceLevel = {
    Critical: "CRITICAL",
    High: "HIGH",
    Medium: "MEDIUM",
    Low: "LOW",
    Informational: "INFORMATIONAL",
    Unspecified: "UNSPECIFIED",
} as const;

/**
 * Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.
 */
export type PatchBaselineApprovedPatchesComplianceLevel = (typeof PatchBaselineApprovedPatchesComplianceLevel)[keyof typeof PatchBaselineApprovedPatchesComplianceLevel];

export const PatchBaselineAvailableSecurityUpdatesComplianceStatus = {
    NonCompliant: "NON_COMPLIANT",
    Compliant: "COMPLIANT",
} as const;

/**
 * The compliance status for vendor recommended security updates that are not approved by this patch baseline.
 */
export type PatchBaselineAvailableSecurityUpdatesComplianceStatus = (typeof PatchBaselineAvailableSecurityUpdatesComplianceStatus)[keyof typeof PatchBaselineAvailableSecurityUpdatesComplianceStatus];

export const PatchBaselineOperatingSystem = {
    Windows: "WINDOWS",
    AmazonLinux: "AMAZON_LINUX",
    AmazonLinux2: "AMAZON_LINUX_2",
    AmazonLinux2022: "AMAZON_LINUX_2022",
    AmazonLinux2023: "AMAZON_LINUX_2023",
    Ubuntu: "UBUNTU",
    RedhatEnterpriseLinux: "REDHAT_ENTERPRISE_LINUX",
    Suse: "SUSE",
    Centos: "CENTOS",
    OracleLinux: "ORACLE_LINUX",
    Debian: "DEBIAN",
    Macos: "MACOS",
    Raspbian: "RASPBIAN",
    RockyLinux: "ROCKY_LINUX",
    AlmaLinux: "ALMA_LINUX",
} as const;

/**
 * Defines the operating system the patch baseline applies to. The Default value is WINDOWS.
 */
export type PatchBaselineOperatingSystem = (typeof PatchBaselineOperatingSystem)[keyof typeof PatchBaselineOperatingSystem];

export const PatchBaselinePatchFilterKey = {
    AdvisoryId: "ADVISORY_ID",
    Arch: "ARCH",
    BugzillaId: "BUGZILLA_ID",
    Classification: "CLASSIFICATION",
    CveId: "CVE_ID",
    Epoch: "EPOCH",
    MsrcSeverity: "MSRC_SEVERITY",
    Name: "NAME",
    PatchId: "PATCH_ID",
    PatchSet: "PATCH_SET",
    Priority: "PRIORITY",
    Product: "PRODUCT",
    ProductFamily: "PRODUCT_FAMILY",
    Release: "RELEASE",
    Repository: "REPOSITORY",
    Section: "SECTION",
    Security: "SECURITY",
    Severity: "SEVERITY",
    Version: "VERSION",
} as const;

/**
 * The key for the filter.
 *
 * For information about valid keys, see [PatchFilter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html) in the *AWS Systems Manager API Reference* .
 */
export type PatchBaselinePatchFilterKey = (typeof PatchBaselinePatchFilterKey)[keyof typeof PatchBaselinePatchFilterKey];

export const PatchBaselineRejectedPatchesAction = {
    AllowAsDependency: "ALLOW_AS_DEPENDENCY",
    Block: "BLOCK",
} as const;

/**
 * The action for Patch Manager to take on patches included in the RejectedPackages list.
 */
export type PatchBaselineRejectedPatchesAction = (typeof PatchBaselineRejectedPatchesAction)[keyof typeof PatchBaselineRejectedPatchesAction];

export const PatchBaselineRuleComplianceLevel = {
    Critical: "CRITICAL",
    High: "HIGH",
    Informational: "INFORMATIONAL",
    Low: "LOW",
    Medium: "MEDIUM",
    Unspecified: "UNSPECIFIED",
} as const;

/**
 * A compliance severity level for all approved patches in a patch baseline. Valid compliance severity levels include the following: `UNSPECIFIED` , `CRITICAL` , `HIGH` , `MEDIUM` , `LOW` , and `INFORMATIONAL` .
 */
export type PatchBaselineRuleComplianceLevel = (typeof PatchBaselineRuleComplianceLevel)[keyof typeof PatchBaselineRuleComplianceLevel];
