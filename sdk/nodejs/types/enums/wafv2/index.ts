// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const IpSetIpAddressVersion = {
    Ipv4: "IPV4",
    Ipv6: "IPV6",
} as const;

/**
 * Type of addresses in the IPSet, use IPV4 for IPV4 IP addresses, IPV6 for IPV6 address.
 */
export type IpSetIpAddressVersion = (typeof IpSetIpAddressVersion)[keyof typeof IpSetIpAddressVersion];

export const IpSetScope = {
    Cloudfront: "CLOUDFRONT",
    Regional: "REGIONAL",
} as const;

/**
 * Use CLOUDFRONT for CloudFront IPSet, use REGIONAL for Application Load Balancer and API Gateway.
 */
export type IpSetScope = (typeof IpSetScope)[keyof typeof IpSetScope];

export const LoggingConfigurationConditionActionConditionPropertiesAction = {
    Allow: "ALLOW",
    Block: "BLOCK",
    Count: "COUNT",
    Captcha: "CAPTCHA",
    Challenge: "CHALLENGE",
    ExcludedAsCount: "EXCLUDED_AS_COUNT",
} as const;

/**
 * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
 */
export type LoggingConfigurationConditionActionConditionPropertiesAction = (typeof LoggingConfigurationConditionActionConditionPropertiesAction)[keyof typeof LoggingConfigurationConditionActionConditionPropertiesAction];

export const LoggingConfigurationFieldToMatchJsonBodyPropertiesInvalidFallbackBehavior = {
    Match: "MATCH",
    NoMatch: "NO_MATCH",
    EvaluateAsString: "EVALUATE_AS_STRING",
} as const;

/**
 * What AWS WAF should do if it fails to completely parse the JSON body.
 */
export type LoggingConfigurationFieldToMatchJsonBodyPropertiesInvalidFallbackBehavior = (typeof LoggingConfigurationFieldToMatchJsonBodyPropertiesInvalidFallbackBehavior)[keyof typeof LoggingConfigurationFieldToMatchJsonBodyPropertiesInvalidFallbackBehavior];

export const LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchScope = {
    All: "ALL",
    Key: "KEY",
    Value: "VALUE",
} as const;

/**
 * The parts of the JSON to match against using the MatchPattern. If you specify All, AWS WAF matches against keys and values. 
 */
export type LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchScope = (typeof LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchScope)[keyof typeof LoggingConfigurationFieldToMatchJsonBodyPropertiesMatchScope];

export const LoggingConfigurationFilterBehavior = {
    Keep: "KEEP",
    Drop: "DROP",
} as const;

/**
 * How to handle logs that satisfy the filter's conditions and requirement. 
 */
export type LoggingConfigurationFilterBehavior = (typeof LoggingConfigurationFilterBehavior)[keyof typeof LoggingConfigurationFilterBehavior];

export const LoggingConfigurationFilterRequirement = {
    MeetsAll: "MEETS_ALL",
    MeetsAny: "MEETS_ANY",
} as const;

/**
 * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
 */
export type LoggingConfigurationFilterRequirement = (typeof LoggingConfigurationFilterRequirement)[keyof typeof LoggingConfigurationFilterRequirement];

export const LoggingConfigurationLoggingFilterPropertiesDefaultBehavior = {
    Keep: "KEEP",
    Drop: "DROP",
} as const;

/**
 * Default handling for logs that don't match any of the specified filtering conditions.
 */
export type LoggingConfigurationLoggingFilterPropertiesDefaultBehavior = (typeof LoggingConfigurationLoggingFilterPropertiesDefaultBehavior)[keyof typeof LoggingConfigurationLoggingFilterPropertiesDefaultBehavior];

export const RegexPatternSetScope = {
    Cloudfront: "CLOUDFRONT",
    Regional: "REGIONAL",
} as const;

/**
 * Use CLOUDFRONT for CloudFront RegexPatternSet, use REGIONAL for Application Load Balancer and API Gateway.
 */
export type RegexPatternSetScope = (typeof RegexPatternSetScope)[keyof typeof RegexPatternSetScope];

export const RuleGroupBodyParsingFallbackBehavior = {
    Match: "MATCH",
    NoMatch: "NO_MATCH",
    EvaluateAsString: "EVALUATE_AS_STRING",
} as const;

/**
 * The inspection behavior to fall back to if the JSON in the request body is invalid.
 */
export type RuleGroupBodyParsingFallbackBehavior = (typeof RuleGroupBodyParsingFallbackBehavior)[keyof typeof RuleGroupBodyParsingFallbackBehavior];

export const RuleGroupForwardedIpConfigurationFallbackBehavior = {
    Match: "MATCH",
    NoMatch: "NO_MATCH",
} as const;

export type RuleGroupForwardedIpConfigurationFallbackBehavior = (typeof RuleGroupForwardedIpConfigurationFallbackBehavior)[keyof typeof RuleGroupForwardedIpConfigurationFallbackBehavior];

export const RuleGroupIpSetForwardedIpConfigurationFallbackBehavior = {
    Match: "MATCH",
    NoMatch: "NO_MATCH",
} as const;

export type RuleGroupIpSetForwardedIpConfigurationFallbackBehavior = (typeof RuleGroupIpSetForwardedIpConfigurationFallbackBehavior)[keyof typeof RuleGroupIpSetForwardedIpConfigurationFallbackBehavior];

export const RuleGroupIpSetForwardedIpConfigurationPosition = {
    First: "FIRST",
    Last: "LAST",
    Any: "ANY",
} as const;

export type RuleGroupIpSetForwardedIpConfigurationPosition = (typeof RuleGroupIpSetForwardedIpConfigurationPosition)[keyof typeof RuleGroupIpSetForwardedIpConfigurationPosition];

export const RuleGroupJsonMatchScope = {
    All: "ALL",
    Key: "KEY",
    Value: "VALUE",
} as const;

/**
 * The parts of the JSON to match against using the MatchPattern.
 */
export type RuleGroupJsonMatchScope = (typeof RuleGroupJsonMatchScope)[keyof typeof RuleGroupJsonMatchScope];

export const RuleGroupLabelMatchScope = {
    Label: "LABEL",
    Namespace: "NAMESPACE",
} as const;

export type RuleGroupLabelMatchScope = (typeof RuleGroupLabelMatchScope)[keyof typeof RuleGroupLabelMatchScope];

export const RuleGroupMapMatchScope = {
    All: "ALL",
    Key: "KEY",
    Value: "VALUE",
} as const;

/**
 * The parts of the request to match against using the MatchPattern.
 */
export type RuleGroupMapMatchScope = (typeof RuleGroupMapMatchScope)[keyof typeof RuleGroupMapMatchScope];

export const RuleGroupOversizeHandling = {
    Continue: "CONTINUE",
    Match: "MATCH",
    NoMatch: "NO_MATCH",
} as const;

/**
 * Handling of requests containing oversize fields
 */
export type RuleGroupOversizeHandling = (typeof RuleGroupOversizeHandling)[keyof typeof RuleGroupOversizeHandling];

export const RuleGroupPositionalConstraint = {
    Exactly: "EXACTLY",
    StartsWith: "STARTS_WITH",
    EndsWith: "ENDS_WITH",
    Contains: "CONTAINS",
    ContainsWord: "CONTAINS_WORD",
} as const;

/**
 * Position of the evaluation in the FieldToMatch of request.
 */
export type RuleGroupPositionalConstraint = (typeof RuleGroupPositionalConstraint)[keyof typeof RuleGroupPositionalConstraint];

export const RuleGroupRateBasedStatementAggregateKeyType = {
    Ip: "IP",
    ForwardedIp: "FORWARDED_IP",
    Constant: "CONSTANT",
    CustomKeys: "CUSTOM_KEYS",
} as const;

export type RuleGroupRateBasedStatementAggregateKeyType = (typeof RuleGroupRateBasedStatementAggregateKeyType)[keyof typeof RuleGroupRateBasedStatementAggregateKeyType];

export const RuleGroupScope = {
    Cloudfront: "CLOUDFRONT",
    Regional: "REGIONAL",
} as const;

/**
 * Use CLOUDFRONT for CloudFront RuleGroup, use REGIONAL for Application Load Balancer and API Gateway.
 */
export type RuleGroupScope = (typeof RuleGroupScope)[keyof typeof RuleGroupScope];

export const RuleGroupSensitivityLevel = {
    Low: "LOW",
    High: "HIGH",
} as const;

/**
 * Sensitivity Level current only used for sqli match statements.
 */
export type RuleGroupSensitivityLevel = (typeof RuleGroupSensitivityLevel)[keyof typeof RuleGroupSensitivityLevel];

export const RuleGroupSizeConstraintStatementComparisonOperator = {
    Eq: "EQ",
    Ne: "NE",
    Le: "LE",
    Lt: "LT",
    Ge: "GE",
    Gt: "GT",
} as const;

export type RuleGroupSizeConstraintStatementComparisonOperator = (typeof RuleGroupSizeConstraintStatementComparisonOperator)[keyof typeof RuleGroupSizeConstraintStatementComparisonOperator];

export const RuleGroupTextTransformationType = {
    None: "NONE",
    CompressWhiteSpace: "COMPRESS_WHITE_SPACE",
    HtmlEntityDecode: "HTML_ENTITY_DECODE",
    Lowercase: "LOWERCASE",
    CmdLine: "CMD_LINE",
    UrlDecode: "URL_DECODE",
    Base64Decode: "BASE64_DECODE",
    HexDecode: "HEX_DECODE",
    Md5: "MD5",
    ReplaceComments: "REPLACE_COMMENTS",
    EscapeSeqDecode: "ESCAPE_SEQ_DECODE",
    SqlHexDecode: "SQL_HEX_DECODE",
    CssDecode: "CSS_DECODE",
    JsDecode: "JS_DECODE",
    NormalizePath: "NORMALIZE_PATH",
    NormalizePathWin: "NORMALIZE_PATH_WIN",
    RemoveNulls: "REMOVE_NULLS",
    ReplaceNulls: "REPLACE_NULLS",
    Base64DecodeExt: "BASE64_DECODE_EXT",
    UrlDecodeUni: "URL_DECODE_UNI",
    Utf8ToUnicode: "UTF8_TO_UNICODE",
} as const;

/**
 * Type of text transformation.
 */
export type RuleGroupTextTransformationType = (typeof RuleGroupTextTransformationType)[keyof typeof RuleGroupTextTransformationType];

export const WebAclAwsManagedRulesBotControlRuleSetInspectionLevel = {
    Common: "COMMON",
    Targeted: "TARGETED",
} as const;

export type WebAclAwsManagedRulesBotControlRuleSetInspectionLevel = (typeof WebAclAwsManagedRulesBotControlRuleSetInspectionLevel)[keyof typeof WebAclAwsManagedRulesBotControlRuleSetInspectionLevel];

export const WebAclBodyParsingFallbackBehavior = {
    Match: "MATCH",
    NoMatch: "NO_MATCH",
    EvaluateAsString: "EVALUATE_AS_STRING",
} as const;

/**
 * The inspection behavior to fall back to if the JSON in the request body is invalid.
 */
export type WebAclBodyParsingFallbackBehavior = (typeof WebAclBodyParsingFallbackBehavior)[keyof typeof WebAclBodyParsingFallbackBehavior];

export const WebAclForwardedIpConfigurationFallbackBehavior = {
    Match: "MATCH",
    NoMatch: "NO_MATCH",
} as const;

export type WebAclForwardedIpConfigurationFallbackBehavior = (typeof WebAclForwardedIpConfigurationFallbackBehavior)[keyof typeof WebAclForwardedIpConfigurationFallbackBehavior];

export const WebAclIpSetForwardedIpConfigurationFallbackBehavior = {
    Match: "MATCH",
    NoMatch: "NO_MATCH",
} as const;

export type WebAclIpSetForwardedIpConfigurationFallbackBehavior = (typeof WebAclIpSetForwardedIpConfigurationFallbackBehavior)[keyof typeof WebAclIpSetForwardedIpConfigurationFallbackBehavior];

export const WebAclIpSetForwardedIpConfigurationPosition = {
    First: "FIRST",
    Last: "LAST",
    Any: "ANY",
} as const;

export type WebAclIpSetForwardedIpConfigurationPosition = (typeof WebAclIpSetForwardedIpConfigurationPosition)[keyof typeof WebAclIpSetForwardedIpConfigurationPosition];

export const WebAclJsonMatchScope = {
    All: "ALL",
    Key: "KEY",
    Value: "VALUE",
} as const;

/**
 * The parts of the JSON to match against using the MatchPattern.
 */
export type WebAclJsonMatchScope = (typeof WebAclJsonMatchScope)[keyof typeof WebAclJsonMatchScope];

export const WebAclLabelMatchScope = {
    Label: "LABEL",
    Namespace: "NAMESPACE",
} as const;

export type WebAclLabelMatchScope = (typeof WebAclLabelMatchScope)[keyof typeof WebAclLabelMatchScope];

export const WebAclManagedRuleGroupConfigPayloadType = {
    Json: "JSON",
    FormEncoded: "FORM_ENCODED",
} as const;

export type WebAclManagedRuleGroupConfigPayloadType = (typeof WebAclManagedRuleGroupConfigPayloadType)[keyof typeof WebAclManagedRuleGroupConfigPayloadType];

export const WebAclMapMatchScope = {
    All: "ALL",
    Key: "KEY",
    Value: "VALUE",
} as const;

/**
 * The parts of the request to match against using the MatchPattern.
 */
export type WebAclMapMatchScope = (typeof WebAclMapMatchScope)[keyof typeof WebAclMapMatchScope];

export const WebAclOversizeHandling = {
    Continue: "CONTINUE",
    Match: "MATCH",
    NoMatch: "NO_MATCH",
} as const;

/**
 * Handling of requests containing oversize fields
 */
export type WebAclOversizeHandling = (typeof WebAclOversizeHandling)[keyof typeof WebAclOversizeHandling];

export const WebAclPositionalConstraint = {
    Exactly: "EXACTLY",
    StartsWith: "STARTS_WITH",
    EndsWith: "ENDS_WITH",
    Contains: "CONTAINS",
    ContainsWord: "CONTAINS_WORD",
} as const;

/**
 * Position of the evaluation in the FieldToMatch of request.
 */
export type WebAclPositionalConstraint = (typeof WebAclPositionalConstraint)[keyof typeof WebAclPositionalConstraint];

export const WebAclRateBasedStatementAggregateKeyType = {
    Constant: "CONSTANT",
    Ip: "IP",
    ForwardedIp: "FORWARDED_IP",
    CustomKeys: "CUSTOM_KEYS",
} as const;

export type WebAclRateBasedStatementAggregateKeyType = (typeof WebAclRateBasedStatementAggregateKeyType)[keyof typeof WebAclRateBasedStatementAggregateKeyType];

export const WebAclRequestInspectionAcfpPayloadType = {
    Json: "JSON",
    FormEncoded: "FORM_ENCODED",
} as const;

export type WebAclRequestInspectionAcfpPayloadType = (typeof WebAclRequestInspectionAcfpPayloadType)[keyof typeof WebAclRequestInspectionAcfpPayloadType];

export const WebAclRequestInspectionPayloadType = {
    Json: "JSON",
    FormEncoded: "FORM_ENCODED",
} as const;

export type WebAclRequestInspectionPayloadType = (typeof WebAclRequestInspectionPayloadType)[keyof typeof WebAclRequestInspectionPayloadType];

export const WebAclScope = {
    Cloudfront: "CLOUDFRONT",
    Regional: "REGIONAL",
} as const;

/**
 * Use CLOUDFRONT for CloudFront WebACL, use REGIONAL for Application Load Balancer and API Gateway.
 */
export type WebAclScope = (typeof WebAclScope)[keyof typeof WebAclScope];

export const WebAclSensitivityLevel = {
    Low: "LOW",
    High: "HIGH",
} as const;

/**
 * Sensitivity Level current only used for sqli match statements.
 */
export type WebAclSensitivityLevel = (typeof WebAclSensitivityLevel)[keyof typeof WebAclSensitivityLevel];

export const WebAclSizeConstraintStatementComparisonOperator = {
    Eq: "EQ",
    Ne: "NE",
    Le: "LE",
    Lt: "LT",
    Ge: "GE",
    Gt: "GT",
} as const;

export type WebAclSizeConstraintStatementComparisonOperator = (typeof WebAclSizeConstraintStatementComparisonOperator)[keyof typeof WebAclSizeConstraintStatementComparisonOperator];

export const WebAclTextTransformationType = {
    None: "NONE",
    CompressWhiteSpace: "COMPRESS_WHITE_SPACE",
    HtmlEntityDecode: "HTML_ENTITY_DECODE",
    Lowercase: "LOWERCASE",
    CmdLine: "CMD_LINE",
    UrlDecode: "URL_DECODE",
    Base64Decode: "BASE64_DECODE",
    HexDecode: "HEX_DECODE",
    Md5: "MD5",
    ReplaceComments: "REPLACE_COMMENTS",
    EscapeSeqDecode: "ESCAPE_SEQ_DECODE",
    SqlHexDecode: "SQL_HEX_DECODE",
    CssDecode: "CSS_DECODE",
    JsDecode: "JS_DECODE",
    NormalizePath: "NORMALIZE_PATH",
    NormalizePathWin: "NORMALIZE_PATH_WIN",
    RemoveNulls: "REMOVE_NULLS",
    ReplaceNulls: "REPLACE_NULLS",
    Base64DecodeExt: "BASE64_DECODE_EXT",
    UrlDecodeUni: "URL_DECODE_UNI",
    Utf8ToUnicode: "UTF8_TO_UNICODE",
} as const;

/**
 * Type of text transformation.
 */
export type WebAclTextTransformationType = (typeof WebAclTextTransformationType)[keyof typeof WebAclTextTransformationType];
