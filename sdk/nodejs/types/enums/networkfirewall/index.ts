// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const FirewallPolicyOverrideAction = {
    DropToAlert: "DROP_TO_ALERT",
} as const;

export type FirewallPolicyOverrideAction = (typeof FirewallPolicyOverrideAction)[keyof typeof FirewallPolicyOverrideAction];

export const FirewallPolicyRuleOrder = {
    DefaultActionOrder: "DEFAULT_ACTION_ORDER",
    StrictOrder: "STRICT_ORDER",
} as const;

export type FirewallPolicyRuleOrder = (typeof FirewallPolicyRuleOrder)[keyof typeof FirewallPolicyRuleOrder];

export const FirewallPolicyStreamExceptionPolicy = {
    Drop: "DROP",
    Continue: "CONTINUE",
    Reject: "REJECT",
} as const;

export type FirewallPolicyStreamExceptionPolicy = (typeof FirewallPolicyStreamExceptionPolicy)[keyof typeof FirewallPolicyStreamExceptionPolicy];

export const LoggingConfigurationLogDestinationConfigLogDestinationType = {
    S3: "S3",
    CloudWatchLogs: "CloudWatchLogs",
    KinesisDataFirehose: "KinesisDataFirehose",
} as const;

/**
 * The type of storage destination to send these logs to. You can send logs to an Amazon S3 bucket, a CloudWatch log group, or a Firehose delivery stream.
 */
export type LoggingConfigurationLogDestinationConfigLogDestinationType = (typeof LoggingConfigurationLogDestinationConfigLogDestinationType)[keyof typeof LoggingConfigurationLogDestinationConfigLogDestinationType];

export const LoggingConfigurationLogDestinationConfigLogType = {
    Alert: "ALERT",
    Flow: "FLOW",
    Tls: "TLS",
} as const;

/**
 * The type of log to record. You can record the following types of logs from your Network Firewall stateful engine.
 *
 * - `ALERT` - Logs for traffic that matches your stateful rules and that have an action that sends an alert. A stateful rule sends alerts for the rule actions DROP, ALERT, and REJECT. For more information, see the `StatefulRule` property.
 * - `FLOW` - Standard network traffic flow logs. The stateful rules engine records flow logs for all network traffic that it receives. Each flow log record captures the network flow for a specific standard stateless rule group.
 * - `TLS` - Logs for events that are related to TLS inspection. For more information, see [Inspecting SSL/TLS traffic with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-configurations.html) in the *Network Firewall Developer Guide* .
 */
export type LoggingConfigurationLogDestinationConfigLogType = (typeof LoggingConfigurationLogDestinationConfigLogType)[keyof typeof LoggingConfigurationLogDestinationConfigLogType];

export const RuleGroupGeneratedRulesType = {
    Allowlist: "ALLOWLIST",
    Denylist: "DENYLIST",
} as const;

export type RuleGroupGeneratedRulesType = (typeof RuleGroupGeneratedRulesType)[keyof typeof RuleGroupGeneratedRulesType];

export const RuleGroupHeaderDirection = {
    Forward: "FORWARD",
    Any: "ANY",
} as const;

/**
 * The direction of traffic flow to inspect. If set to `ANY` , the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to `FORWARD` , the inspection only matches traffic going from the source to the destination.
 */
export type RuleGroupHeaderDirection = (typeof RuleGroupHeaderDirection)[keyof typeof RuleGroupHeaderDirection];

export const RuleGroupHeaderProtocol = {
    Ip: "IP",
    Tcp: "TCP",
    Udp: "UDP",
    Icmp: "ICMP",
    Http: "HTTP",
    Ftp: "FTP",
    Tls: "TLS",
    Smb: "SMB",
    Dns: "DNS",
    Dcerpc: "DCERPC",
    Ssh: "SSH",
    Smtp: "SMTP",
    Imap: "IMAP",
    Msn: "MSN",
    Krb5: "KRB5",
    Ikev2: "IKEV2",
    Tftp: "TFTP",
    Ntp: "NTP",
    Dhcp: "DHCP",
} as const;

/**
 * The protocol to inspect for. To specify all, you can use `IP` , because all traffic on AWS and on the internet is IP.
 */
export type RuleGroupHeaderProtocol = (typeof RuleGroupHeaderProtocol)[keyof typeof RuleGroupHeaderProtocol];

export const RuleGroupRuleOrder = {
    DefaultActionOrder: "DEFAULT_ACTION_ORDER",
    StrictOrder: "STRICT_ORDER",
} as const;

export type RuleGroupRuleOrder = (typeof RuleGroupRuleOrder)[keyof typeof RuleGroupRuleOrder];

export const RuleGroupStatefulRuleAction = {
    Pass: "PASS",
    Drop: "DROP",
    Alert: "ALERT",
    Reject: "REJECT",
} as const;

/**
 * Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow.
 *
 * The actions for a stateful rule are defined as follows:
 *
 * - *PASS* - Permits the packets to go to the intended destination.
 * - *DROP* - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the `Firewall` `LoggingConfiguration` .
 * - *REJECT* - Drops traffic that matches the conditions of the stateful rule and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a `RST` bit contained in the TCP header flags. `REJECT` is available only for TCP traffic.
 * - *ALERT* - Permits the packets to go to the intended destination and sends an alert log message, if alert logging is configured in the `Firewall` `LoggingConfiguration` .
 *
 * You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with `ALERT` action, verify in the logs that the rule is filtering as you want, then change the action to `DROP` .
 * - *REJECT* - Drops TCP traffic that matches the conditions of the stateful rule, and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a `RST` bit contained in the TCP header flags. Also sends an alert log mesage if alert logging is configured in the `Firewall` `LoggingConfiguration` .
 *
 * `REJECT` isn't currently available for use with IMAP and FTP protocols.
 */
export type RuleGroupStatefulRuleAction = (typeof RuleGroupStatefulRuleAction)[keyof typeof RuleGroupStatefulRuleAction];

export const RuleGroupTargetType = {
    TlsSni: "TLS_SNI",
    HttpHost: "HTTP_HOST",
} as const;

export type RuleGroupTargetType = (typeof RuleGroupTargetType)[keyof typeof RuleGroupTargetType];

export const RuleGroupTcpFlag = {
    Fin: "FIN",
    Syn: "SYN",
    Rst: "RST",
    Psh: "PSH",
    Ack: "ACK",
    Urg: "URG",
    Ece: "ECE",
    Cwr: "CWR",
} as const;

export type RuleGroupTcpFlag = (typeof RuleGroupTcpFlag)[keyof typeof RuleGroupTcpFlag];

export const RuleGroupTypeEnum = {
    Stateless: "STATELESS",
    Stateful: "STATEFUL",
} as const;

/**
 * Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains
 * stateless rules. If it is stateful, it contains stateful rules.
 */
export type RuleGroupTypeEnum = (typeof RuleGroupTypeEnum)[keyof typeof RuleGroupTypeEnum];

export const TlsInspectionConfigurationRevokedStatusAction = {
    Pass: "PASS",
    Drop: "DROP",
    Reject: "REJECT",
} as const;

export type TlsInspectionConfigurationRevokedStatusAction = (typeof TlsInspectionConfigurationRevokedStatusAction)[keyof typeof TlsInspectionConfigurationRevokedStatusAction];

export const TlsInspectionConfigurationUnknownStatusAction = {
    Pass: "PASS",
    Drop: "DROP",
    Reject: "REJECT",
} as const;

export type TlsInspectionConfigurationUnknownStatusAction = (typeof TlsInspectionConfigurationUnknownStatusAction)[keyof typeof TlsInspectionConfigurationUnknownStatusAction];
