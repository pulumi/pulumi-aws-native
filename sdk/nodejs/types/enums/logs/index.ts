// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AccountPolicyPolicyType = {
    DataProtectionPolicy: "DATA_PROTECTION_POLICY",
    SubscriptionFilterPolicy: "SUBSCRIPTION_FILTER_POLICY",
    FieldIndexPolicy: "FIELD_INDEX_POLICY",
    TransformerPolicy: "TRANSFORMER_POLICY",
} as const;

/**
 * Type of the policy.
 */
export type AccountPolicyPolicyType = (typeof AccountPolicyPolicyType)[keyof typeof AccountPolicyPolicyType];

export const AccountPolicyScope = {
    All: "ALL",
} as const;

/**
 * Scope for policy application
 */
export type AccountPolicyScope = (typeof AccountPolicyScope)[keyof typeof AccountPolicyScope];

export const IntegrationStatus = {
    Provisioning: "PROVISIONING",
    Active: "ACTIVE",
    Failed: "FAILED",
} as const;

/**
 * Status of creation for the Integration and its resources
 */
export type IntegrationStatus = (typeof IntegrationStatus)[keyof typeof IntegrationStatus];

export const IntegrationType = {
    Opensearch: "OPENSEARCH",
} as const;

/**
 * The type of the Integration.
 */
export type IntegrationType = (typeof IntegrationType)[keyof typeof IntegrationType];

export const LogAnomalyDetectorEvaluationFrequency = {
    FiveMin: "FIVE_MIN",
    TenMin: "TEN_MIN",
    FifteenMin: "FIFTEEN_MIN",
    ThirtyMin: "THIRTY_MIN",
    OneHour: "ONE_HOUR",
} as const;

/**
 * How often log group is evaluated
 */
export type LogAnomalyDetectorEvaluationFrequency = (typeof LogAnomalyDetectorEvaluationFrequency)[keyof typeof LogAnomalyDetectorEvaluationFrequency];

export const LogGroupClass = {
    Standard: "STANDARD",
    InfrequentAccess: "INFREQUENT_ACCESS",
} as const;

/**
 * Specifies the log group class for this log group. There are two classes:
 *   +  The ``Standard`` log class supports all CWL features.
 *   +  The ``Infrequent Access`` log class supports a subset of CWL features and incurs lower costs.
 *   
 *  For details about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
 */
export type LogGroupClass = (typeof LogGroupClass)[keyof typeof LogGroupClass];

export const MetricFilterMetricTransformationUnit = {
    Seconds: "Seconds",
    Microseconds: "Microseconds",
    Milliseconds: "Milliseconds",
    Bytes: "Bytes",
    Kilobytes: "Kilobytes",
    Megabytes: "Megabytes",
    Gigabytes: "Gigabytes",
    Terabytes: "Terabytes",
    Bits: "Bits",
    Kilobits: "Kilobits",
    Megabits: "Megabits",
    Gigabits: "Gigabits",
    Terabits: "Terabits",
    Percent: "Percent",
    Count: "Count",
    BytesSecond: "Bytes/Second",
    KilobytesSecond: "Kilobytes/Second",
    MegabytesSecond: "Megabytes/Second",
    GigabytesSecond: "Gigabytes/Second",
    TerabytesSecond: "Terabytes/Second",
    BitsSecond: "Bits/Second",
    KilobitsSecond: "Kilobits/Second",
    MegabitsSecond: "Megabits/Second",
    GigabitsSecond: "Gigabits/Second",
    TerabitsSecond: "Terabits/Second",
    CountSecond: "Count/Second",
    None: "None",
} as const;

/**
 * The unit to assign to the metric. If you omit this, the unit is set as ``None``.
 */
export type MetricFilterMetricTransformationUnit = (typeof MetricFilterMetricTransformationUnit)[keyof typeof MetricFilterMetricTransformationUnit];

export const QueryDefinitionQueryLanguage = {
    Cwli: "CWLI",
    Sql: "SQL",
    Ppl: "PPL",
} as const;

/**
 * Query language of the query string. Possible values are CWLI, SQL, PPL, with CWLI being the default.
 */
export type QueryDefinitionQueryLanguage = (typeof QueryDefinitionQueryLanguage)[keyof typeof QueryDefinitionQueryLanguage];

export const SubscriptionFilterDistribution = {
    Random: "Random",
    ByLogStream: "ByLogStream",
} as const;

/**
 * The method used to distribute log data to the destination, which can be either random or grouped by log stream.
 */
export type SubscriptionFilterDistribution = (typeof SubscriptionFilterDistribution)[keyof typeof SubscriptionFilterDistribution];

export const TransformerProcessorListToMapPropertiesFlattenedElement = {
    First: "first",
    Last: "last",
} as const;

export type TransformerProcessorListToMapPropertiesFlattenedElement = (typeof TransformerProcessorListToMapPropertiesFlattenedElement)[keyof typeof TransformerProcessorListToMapPropertiesFlattenedElement];

export const TransformerTypeConverterEntryType = {
    Boolean: "boolean",
    Integer: "integer",
    Double: "double",
    String: "string",
} as const;

export type TransformerTypeConverterEntryType = (typeof TransformerTypeConverterEntryType)[keyof typeof TransformerTypeConverterEntryType];
