// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AccessEntryAccessScopeType = {
    Namespace: "namespace",
    Cluster: "cluster",
} as const;

/**
 * The type of the access scope.
 */
export type AccessEntryAccessScopeType = (typeof AccessEntryAccessScopeType)[keyof typeof AccessEntryAccessScopeType];

export const AddonResolveConflicts = {
    None: "NONE",
    Overwrite: "OVERWRITE",
    Preserve: "PRESERVE",
} as const;

/**
 * Resolve parameter value conflicts
 */
export type AddonResolveConflicts = (typeof AddonResolveConflicts)[keyof typeof AddonResolveConflicts];

export const ClusterAccessConfigAuthenticationMode = {
    ConfigMap: "CONFIG_MAP",
    ApiAndConfigMap: "API_AND_CONFIG_MAP",
    Api: "API",
} as const;

/**
 * Specify the authentication mode that should be used to create your cluster.
 */
export type ClusterAccessConfigAuthenticationMode = (typeof ClusterAccessConfigAuthenticationMode)[keyof typeof ClusterAccessConfigAuthenticationMode];

export const ClusterKubernetesNetworkConfigIpFamily = {
    Ipv4: "ipv4",
    Ipv6: "ipv6",
} as const;

/**
 * Ipv4 or Ipv6. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on
 */
export type ClusterKubernetesNetworkConfigIpFamily = (typeof ClusterKubernetesNetworkConfigIpFamily)[keyof typeof ClusterKubernetesNetworkConfigIpFamily];

export const ClusterLoggingTypeConfigType = {
    Api: "api",
    Audit: "audit",
    Authenticator: "authenticator",
    ControllerManager: "controllerManager",
    Scheduler: "scheduler",
} as const;

/**
 * name of the log type
 */
export type ClusterLoggingTypeConfigType = (typeof ClusterLoggingTypeConfigType)[keyof typeof ClusterLoggingTypeConfigType];

export const ClusterUpgradePolicySupportType = {
    Standard: "STANDARD",
    Extended: "EXTENDED",
} as const;

/**
 * Specify the support type for your cluster.
 */
export type ClusterUpgradePolicySupportType = (typeof ClusterUpgradePolicySupportType)[keyof typeof ClusterUpgradePolicySupportType];

export const IdentityProviderConfigType = {
    Oidc: "oidc",
} as const;

/**
 * The type of the identity provider configuration.
 */
export type IdentityProviderConfigType = (typeof IdentityProviderConfigType)[keyof typeof IdentityProviderConfigType];

export const NodegroupNodeRepairConfigOverridesRepairAction = {
    Replace: "Replace",
    Reboot: "Reboot",
    NoAction: "NoAction",
} as const;

/**
 * Specify the repair action to take for nodes when all of the specified conditions are met.
 */
export type NodegroupNodeRepairConfigOverridesRepairAction = (typeof NodegroupNodeRepairConfigOverridesRepairAction)[keyof typeof NodegroupNodeRepairConfigOverridesRepairAction];
