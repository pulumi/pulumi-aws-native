// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ContactFlowState = {
    Active: "ACTIVE",
    Archived: "ARCHIVED",
} as const;

/**
 * The state of the contact flow.
 */
export type ContactFlowState = (typeof ContactFlowState)[keyof typeof ContactFlowState];

export const ContactFlowType = {
    ContactFlow: "CONTACT_FLOW",
    CustomerQueue: "CUSTOMER_QUEUE",
    CustomerHold: "CUSTOMER_HOLD",
    CustomerWhisper: "CUSTOMER_WHISPER",
    AgentHold: "AGENT_HOLD",
    AgentWhisper: "AGENT_WHISPER",
    OutboundWhisper: "OUTBOUND_WHISPER",
    AgentTransfer: "AGENT_TRANSFER",
    QueueTransfer: "QUEUE_TRANSFER",
} as const;

/**
 * The type of the contact flow.
 */
export type ContactFlowType = (typeof ContactFlowType)[keyof typeof ContactFlowType];

export const EvaluationFormNumericQuestionPropertyValueAutomationLabel = {
    OverallCustomerSentimentScore: "OVERALL_CUSTOMER_SENTIMENT_SCORE",
    OverallAgentSentimentScore: "OVERALL_AGENT_SENTIMENT_SCORE",
    NonTalkTime: "NON_TALK_TIME",
    NonTalkTimePercentage: "NON_TALK_TIME_PERCENTAGE",
    NumberOfInterruptions: "NUMBER_OF_INTERRUPTIONS",
    ContactDuration: "CONTACT_DURATION",
    AgentInteractionDuration: "AGENT_INTERACTION_DURATION",
    CustomerHoldTime: "CUSTOMER_HOLD_TIME",
} as const;

/**
 * The automation property label.
 */
export type EvaluationFormNumericQuestionPropertyValueAutomationLabel = (typeof EvaluationFormNumericQuestionPropertyValueAutomationLabel)[keyof typeof EvaluationFormNumericQuestionPropertyValueAutomationLabel];

export const EvaluationFormQuestionQuestionType = {
    Numeric: "NUMERIC",
    Singleselect: "SINGLESELECT",
    Text: "TEXT",
} as const;

/**
 * The type of the question.
 */
export type EvaluationFormQuestionQuestionType = (typeof EvaluationFormQuestionQuestionType)[keyof typeof EvaluationFormQuestionQuestionType];

export const EvaluationFormScoringStrategyMode = {
    QuestionOnly: "QUESTION_ONLY",
    SectionOnly: "SECTION_ONLY",
} as const;

/**
 * The scoring mode.
 */
export type EvaluationFormScoringStrategyMode = (typeof EvaluationFormScoringStrategyMode)[keyof typeof EvaluationFormScoringStrategyMode];

export const EvaluationFormScoringStrategyStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * The scoring status.
 */
export type EvaluationFormScoringStrategyStatus = (typeof EvaluationFormScoringStrategyStatus)[keyof typeof EvaluationFormScoringStrategyStatus];

export const EvaluationFormSingleSelectQuestionPropertiesDisplayAs = {
    Dropdown: "DROPDOWN",
    Radio: "RADIO",
} as const;

/**
 * The display mode of the single-select question.
 */
export type EvaluationFormSingleSelectQuestionPropertiesDisplayAs = (typeof EvaluationFormSingleSelectQuestionPropertiesDisplayAs)[keyof typeof EvaluationFormSingleSelectQuestionPropertiesDisplayAs];

export const EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition = {
    Present: "PRESENT",
    NotPresent: "NOT_PRESENT",
} as const;

/**
 * The automation condition applied on contact categories.
 */
export type EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition = (typeof EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition)[keyof typeof EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition];

export const EvaluationFormStatus = {
    Draft: "DRAFT",
    Active: "ACTIVE",
} as const;

/**
 * The status of the evaluation form.
 */
export type EvaluationFormStatus = (typeof EvaluationFormStatus)[keyof typeof EvaluationFormStatus];

export const HoursOfOperationConfigDay = {
    Sunday: "SUNDAY",
    Monday: "MONDAY",
    Tuesday: "TUESDAY",
    Wednesday: "WEDNESDAY",
    Thursday: "THURSDAY",
    Friday: "FRIDAY",
    Saturday: "SATURDAY",
} as const;

/**
 * The day that the hours of operation applies to.
 */
export type HoursOfOperationConfigDay = (typeof HoursOfOperationConfigDay)[keyof typeof HoursOfOperationConfigDay];

export const InstanceIdentityManagementType = {
    Saml: "SAML",
    ConnectManaged: "CONNECT_MANAGED",
    ExistingDirectory: "EXISTING_DIRECTORY",
} as const;

/**
 * Specifies the type of directory integration for new instance.
 */
export type InstanceIdentityManagementType = (typeof InstanceIdentityManagementType)[keyof typeof InstanceIdentityManagementType];

export const InstanceStatus = {
    CreationInProgress: "CREATION_IN_PROGRESS",
    CreationFailed: "CREATION_FAILED",
    Active: "ACTIVE",
} as const;

/**
 * Specifies the creation status of new instance.
 */
export type InstanceStatus = (typeof InstanceStatus)[keyof typeof InstanceStatus];

export const InstanceStorageConfigEncryptionType = {
    Kms: "KMS",
} as const;

/**
 * Specifies default encryption using AWS KMS-Managed Keys
 */
export type InstanceStorageConfigEncryptionType = (typeof InstanceStorageConfigEncryptionType)[keyof typeof InstanceStorageConfigEncryptionType];

export const InstanceStorageConfigInstanceStorageResourceType = {
    ChatTranscripts: "CHAT_TRANSCRIPTS",
    CallRecordings: "CALL_RECORDINGS",
    ScheduledReports: "SCHEDULED_REPORTS",
    MediaStreams: "MEDIA_STREAMS",
    ContactTraceRecords: "CONTACT_TRACE_RECORDS",
    AgentEvents: "AGENT_EVENTS",
} as const;

/**
 * Specifies the type of storage resource available for the instance
 */
export type InstanceStorageConfigInstanceStorageResourceType = (typeof InstanceStorageConfigInstanceStorageResourceType)[keyof typeof InstanceStorageConfigInstanceStorageResourceType];

export const InstanceStorageConfigStorageType = {
    S3: "S3",
    KinesisVideoStream: "KINESIS_VIDEO_STREAM",
    KinesisStream: "KINESIS_STREAM",
    KinesisFirehose: "KINESIS_FIREHOSE",
} as const;

/**
 * Specifies the storage type to be associated with the instance
 */
export type InstanceStorageConfigStorageType = (typeof InstanceStorageConfigStorageType)[keyof typeof InstanceStorageConfigStorageType];

export const IntegrationAssociationIntegrationType = {
    LexBot: "LEX_BOT",
    LambdaFunction: "LAMBDA_FUNCTION",
} as const;

/**
 * Specifies the integration type to be associated with the instance
 */
export type IntegrationAssociationIntegrationType = (typeof IntegrationAssociationIntegrationType)[keyof typeof IntegrationAssociationIntegrationType];

export const QueueStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * The status of the queue.
 */
export type QueueStatus = (typeof QueueStatus)[keyof typeof QueueStatus];

export const QueueType = {
    Standard: "STANDARD",
    Agent: "AGENT",
} as const;

/**
 * The type of queue.
 */
export type QueueType = (typeof QueueType)[keyof typeof QueueType];

export const QuickConnectType = {
    PhoneNumber: "PHONE_NUMBER",
    Queue: "QUEUE",
    User: "USER",
} as const;

/**
 * The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
 */
export type QuickConnectType = (typeof QuickConnectType)[keyof typeof QuickConnectType];

export const RoutingProfileAgentAvailabilityTimer = {
    TimeSinceLastActivity: "TIME_SINCE_LAST_ACTIVITY",
    TimeSinceLastInbound: "TIME_SINCE_LAST_INBOUND",
} as const;

/**
 * Whether agents with this routing profile will have their routing order calculated based on longest idle time or time since their last inbound contact.
 */
export type RoutingProfileAgentAvailabilityTimer = (typeof RoutingProfileAgentAvailabilityTimer)[keyof typeof RoutingProfileAgentAvailabilityTimer];

export const RoutingProfileBehaviorType = {
    RouteCurrentChannelOnly: "ROUTE_CURRENT_CHANNEL_ONLY",
    RouteAnyChannel: "ROUTE_ANY_CHANNEL",
} as const;

/**
 * Specifies the other channels that can be routed to an agent handling their current channel.
 */
export type RoutingProfileBehaviorType = (typeof RoutingProfileBehaviorType)[keyof typeof RoutingProfileBehaviorType];

export const RoutingProfileChannel = {
    Voice: "VOICE",
    Chat: "CHAT",
    Task: "TASK",
} as const;

/**
 * The channels that agents can handle in the Contact Control Panel (CCP).
 */
export type RoutingProfileChannel = (typeof RoutingProfileChannel)[keyof typeof RoutingProfileChannel];

export const RulePublishStatus = {
    Draft: "DRAFT",
    Published: "PUBLISHED",
} as const;

/**
 * The publish status of a rule, either draft or published.
 */
export type RulePublishStatus = (typeof RulePublishStatus)[keyof typeof RulePublishStatus];

export const RuleSendNotificationActionContentType = {
    PlainText: "PLAIN_TEXT",
} as const;

/**
 * The type of content.
 */
export type RuleSendNotificationActionContentType = (typeof RuleSendNotificationActionContentType)[keyof typeof RuleSendNotificationActionContentType];

export const RuleSendNotificationActionDeliveryMethod = {
    Email: "EMAIL",
} as const;

/**
 * The means of delivery.
 */
export type RuleSendNotificationActionDeliveryMethod = (typeof RuleSendNotificationActionDeliveryMethod)[keyof typeof RuleSendNotificationActionDeliveryMethod];

export const RuleTriggerEventSourceEventSourceName = {
    OnContactEvaluationSubmit: "OnContactEvaluationSubmit",
    OnPostCallAnalysisAvailable: "OnPostCallAnalysisAvailable",
    OnRealTimeCallAnalysisAvailable: "OnRealTimeCallAnalysisAvailable",
    OnPostChatAnalysisAvailable: "OnPostChatAnalysisAvailable",
    OnZendeskTicketCreate: "OnZendeskTicketCreate",
    OnZendeskTicketStatusUpdate: "OnZendeskTicketStatusUpdate",
    OnSalesforceCaseCreate: "OnSalesforceCaseCreate",
    OnMetricDataUpdate: "OnMetricDataUpdate",
} as const;

/**
 * The name of event source.
 */
export type RuleTriggerEventSourceEventSourceName = (typeof RuleTriggerEventSourceEventSourceName)[keyof typeof RuleTriggerEventSourceEventSourceName];

export const TaskTemplateFieldType = {
    Name: "NAME",
    Description: "DESCRIPTION",
    ScheduledTime: "SCHEDULED_TIME",
    QuickConnect: "QUICK_CONNECT",
    Url: "URL",
    Number: "NUMBER",
    Text: "TEXT",
    TextArea: "TEXT_AREA",
    DateTime: "DATE_TIME",
    Boolean: "BOOLEAN",
    SingleSelect: "SINGLE_SELECT",
    Email: "EMAIL",
} as const;

/**
 * The type of the task template's field
 */
export type TaskTemplateFieldType = (typeof TaskTemplateFieldType)[keyof typeof TaskTemplateFieldType];

export const TaskTemplateStatus = {
    Active: "ACTIVE",
    Inactive: "INACTIVE",
} as const;

/**
 * The status of the task template
 */
export type TaskTemplateStatus = (typeof TaskTemplateStatus)[keyof typeof TaskTemplateStatus];

export const TrafficDistributionGroupStatus = {
    CreationInProgress: "CREATION_IN_PROGRESS",
    Active: "ACTIVE",
    CreationFailed: "CREATION_FAILED",
    PendingDeletion: "PENDING_DELETION",
    DeletionFailed: "DELETION_FAILED",
    UpdateInProgress: "UPDATE_IN_PROGRESS",
} as const;

/**
 * The status of the traffic distribution group.
 */
export type TrafficDistributionGroupStatus = (typeof TrafficDistributionGroupStatus)[keyof typeof TrafficDistributionGroupStatus];

export const UserPhoneType = {
    SoftPhone: "SOFT_PHONE",
    DeskPhone: "DESK_PHONE",
} as const;

/**
 * The phone type.
 */
export type UserPhoneType = (typeof UserPhoneType)[keyof typeof UserPhoneType];
