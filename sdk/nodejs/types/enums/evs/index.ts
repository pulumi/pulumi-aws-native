// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const EnvironmentCheckResult = {
    Passed: "PASSED",
    Failed: "FAILED",
    Unknown: "UNKNOWN",
} as const;

export type EnvironmentCheckResult = (typeof EnvironmentCheckResult)[keyof typeof EnvironmentCheckResult];

export const EnvironmentCheckType = {
    KeyReuse: "KEY_REUSE",
    KeyCoverage: "KEY_COVERAGE",
    Reachability: "REACHABILITY",
    VcfVersion: "VCF_VERSION",
    HostCount: "HOST_COUNT",
} as const;

/**
 * The check type. Amazon EVS performs the following checks.
 *
 * - `KEY_REUSE` : checks that the VCF license key is not used by another Amazon EVS environment. This check fails if a used license is added to the environment.
 * - `KEY_COVERAGE` : checks that your VCF license key allocates sufficient vCPU cores for all deployed hosts. The check fails when any assigned hosts in the EVS environment are not covered by license keys, or when any unassigned hosts cannot be covered by available vCPU cores in keys.
 * - `REACHABILITY` : checks that the Amazon EVS control plane has a persistent connection to SDDC Manager. If Amazon EVS cannot reach the environment, this check fails.
 * - `HOST_COUNT` : Checks that your environment has a minimum of 4 hosts, which is a requirement for VCF 5.2.1.
 *
 * If this check fails, you will need to add hosts so that your environment meets this minimum requirement. Amazon EVS only supports environments with 4-16 hosts.
 */
export type EnvironmentCheckType = (typeof EnvironmentCheckType)[keyof typeof EnvironmentCheckType];

export const EnvironmentHostInfoForCreateInstanceType = {
    I4iMetal: "i4i.metal",
} as const;

/**
 * The EC2 instance type that represents the host.
 */
export type EnvironmentHostInfoForCreateInstanceType = (typeof EnvironmentHostInfoForCreateInstanceType)[keyof typeof EnvironmentHostInfoForCreateInstanceType];

export const EnvironmentState = {
    Creating: "CREATING",
    Created: "CREATED",
    Deleting: "DELETING",
    Deleted: "DELETED",
    CreateFailed: "CREATE_FAILED",
} as const;

export type EnvironmentState = (typeof EnvironmentState)[keyof typeof EnvironmentState];

export const EnvironmentVcfVersion = {
    Vcf521: "VCF-5.2.1",
} as const;

/**
 * The VCF version of the environment.
 */
export type EnvironmentVcfVersion = (typeof EnvironmentVcfVersion)[keyof typeof EnvironmentVcfVersion];
