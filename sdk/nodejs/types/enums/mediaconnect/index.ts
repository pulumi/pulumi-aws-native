// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BridgeFailoverConfigStateEnum = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

export type BridgeFailoverConfigStateEnum = (typeof BridgeFailoverConfigStateEnum)[keyof typeof BridgeFailoverConfigStateEnum];

export const BridgeFailoverModeEnum = {
    Failover: "FAILOVER",
} as const;

export type BridgeFailoverModeEnum = (typeof BridgeFailoverModeEnum)[keyof typeof BridgeFailoverModeEnum];

export const BridgeOutputResourceBridgeNetworkOutputProtocol = {
    RtpFec: "rtp-fec",
    Rtp: "rtp",
    Udp: "udp",
} as const;

/**
 * The network output protocol.
 */
export type BridgeOutputResourceBridgeNetworkOutputProtocol = (typeof BridgeOutputResourceBridgeNetworkOutputProtocol)[keyof typeof BridgeOutputResourceBridgeNetworkOutputProtocol];

export const BridgeProtocolEnum = {
    RtpFec: "rtp-fec",
    Rtp: "rtp",
    Udp: "udp",
} as const;

export type BridgeProtocolEnum = (typeof BridgeProtocolEnum)[keyof typeof BridgeProtocolEnum];

export const BridgeSourceProtocolEnum = {
    RtpFec: "rtp-fec",
    Rtp: "rtp",
    Udp: "udp",
} as const;

export type BridgeSourceProtocolEnum = (typeof BridgeSourceProtocolEnum)[keyof typeof BridgeSourceProtocolEnum];

export const BridgeStateEnum = {
    Creating: "CREATING",
    Standby: "STANDBY",
    Starting: "STARTING",
    Deploying: "DEPLOYING",
    Active: "ACTIVE",
    Stopping: "STOPPING",
    Deleting: "DELETING",
    Deleted: "DELETED",
    StartFailed: "START_FAILED",
    StartPending: "START_PENDING",
    Updating: "UPDATING",
} as const;

export type BridgeStateEnum = (typeof BridgeStateEnum)[keyof typeof BridgeStateEnum];

export const FlowEncryptionAlgorithm = {
    Aes128: "aes128",
    Aes192: "aes192",
    Aes256: "aes256",
} as const;

/**
 * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
 */
export type FlowEncryptionAlgorithm = (typeof FlowEncryptionAlgorithm)[keyof typeof FlowEncryptionAlgorithm];

export const FlowEncryptionKeyType = {
    Speke: "speke",
    StaticKey: "static-key",
    SrtPassword: "srt-password",
} as const;

/**
 * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
 */
export type FlowEncryptionKeyType = (typeof FlowEncryptionKeyType)[keyof typeof FlowEncryptionKeyType];

export const FlowEntitlementEncryptionAlgorithm = {
    Aes128: "aes128",
    Aes192: "aes192",
    Aes256: "aes256",
} as const;

/**
 * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
 */
export type FlowEntitlementEncryptionAlgorithm = (typeof FlowEntitlementEncryptionAlgorithm)[keyof typeof FlowEntitlementEncryptionAlgorithm];

export const FlowEntitlementEncryptionKeyType = {
    Speke: "speke",
    StaticKey: "static-key",
} as const;

/**
 * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
 */
export type FlowEntitlementEncryptionKeyType = (typeof FlowEntitlementEncryptionKeyType)[keyof typeof FlowEntitlementEncryptionKeyType];

export const FlowEntitlementEntitlementStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 *  An indication of whether the entitlement is enabled.
 */
export type FlowEntitlementEntitlementStatus = (typeof FlowEntitlementEntitlementStatus)[keyof typeof FlowEntitlementEntitlementStatus];

export const FlowFailoverConfigFailoverMode = {
    Merge: "MERGE",
    Failover: "FAILOVER",
} as const;

/**
 * The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.
 */
export type FlowFailoverConfigFailoverMode = (typeof FlowFailoverConfigFailoverMode)[keyof typeof FlowFailoverConfigFailoverMode];

export const FlowFailoverConfigState = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
 */
export type FlowFailoverConfigState = (typeof FlowFailoverConfigState)[keyof typeof FlowFailoverConfigState];

export const FlowFmtpColorimetry = {
    Bt601: "BT601",
    Bt709: "BT709",
    Bt2020: "BT2020",
    Bt2100: "BT2100",
    St20651: "ST2065-1",
    St20653: "ST2065-3",
    Xyz: "XYZ",
} as const;

/**
 * The format used for the representation of color.
 */
export type FlowFmtpColorimetry = (typeof FlowFmtpColorimetry)[keyof typeof FlowFmtpColorimetry];

export const FlowFmtpRange = {
    Narrow: "NARROW",
    Full: "FULL",
    Fullprotect: "FULLPROTECT",
} as const;

/**
 * The encoding range of the video.
 */
export type FlowFmtpRange = (typeof FlowFmtpRange)[keyof typeof FlowFmtpRange];

export const FlowFmtpScanMode = {
    Progressive: "progressive",
    Interlace: "interlace",
    ProgressiveSegmentedFrame: "progressive-segmented-frame",
} as const;

/**
 * The type of compression that was used to smooth the video's appearance.
 */
export type FlowFmtpScanMode = (typeof FlowFmtpScanMode)[keyof typeof FlowFmtpScanMode];

export const FlowFmtpTcs = {
    Sdr: "SDR",
    Pq: "PQ",
    Hlg: "HLG",
    Linear: "LINEAR",
    Bt2100linpq: "BT2100LINPQ",
    Bt2100linhlg: "BT2100LINHLG",
    St20651: "ST2065-1",
    St4281: "ST428-1",
    Density: "DENSITY",
} as const;

/**
 * The transfer characteristic system (TCS) that is used in the video.
 */
export type FlowFmtpTcs = (typeof FlowFmtpTcs)[keyof typeof FlowFmtpTcs];

export const FlowMaintenanceMaintenanceDay = {
    Monday: "Monday",
    Tuesday: "Tuesday",
    Wednesday: "Wednesday",
    Thursday: "Thursday",
    Friday: "Friday",
    Saturday: "Saturday",
    Sunday: "Sunday",
} as const;

/**
 * A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
 */
export type FlowMaintenanceMaintenanceDay = (typeof FlowMaintenanceMaintenanceDay)[keyof typeof FlowMaintenanceMaintenanceDay];

export const FlowMediaStreamMediaStreamType = {
    Video: "video",
    Audio: "audio",
    AncillaryData: "ancillary-data",
} as const;

/**
 * The type of media stream.
 */
export type FlowMediaStreamMediaStreamType = (typeof FlowMediaStreamMediaStreamType)[keyof typeof FlowMediaStreamMediaStreamType];

export const FlowMediaStreamSourceConfigurationEncodingName = {
    Jxsv: "jxsv",
    Raw: "raw",
    Smpte291: "smpte291",
    Pcm: "pcm",
} as const;

/**
 * The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
 */
export type FlowMediaStreamSourceConfigurationEncodingName = (typeof FlowMediaStreamSourceConfigurationEncodingName)[keyof typeof FlowMediaStreamSourceConfigurationEncodingName];

export const FlowMediaStreamVideoFormat = {
    FlowMediaStreamVideoFormat_2160p: "2160p",
    FlowMediaStreamVideoFormat_1080p: "1080p",
    FlowMediaStreamVideoFormat_1080i: "1080i",
    FlowMediaStreamVideoFormat_720p: "720p",
    FlowMediaStreamVideoFormat_480p: "480p",
} as const;

/**
 * The resolution of the video.
 */
export type FlowMediaStreamVideoFormat = (typeof FlowMediaStreamVideoFormat)[keyof typeof FlowMediaStreamVideoFormat];

export const FlowOutputEncodingParametersEncoderProfile = {
    Main: "main",
    High: "high",
} as const;

/**
 * A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.
 */
export type FlowOutputEncodingParametersEncoderProfile = (typeof FlowOutputEncodingParametersEncoderProfile)[keyof typeof FlowOutputEncodingParametersEncoderProfile];

export const FlowOutputEncryptionAlgorithm = {
    Aes128: "aes128",
    Aes192: "aes192",
    Aes256: "aes256",
} as const;

/**
 * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
 */
export type FlowOutputEncryptionAlgorithm = (typeof FlowOutputEncryptionAlgorithm)[keyof typeof FlowOutputEncryptionAlgorithm];

export const FlowOutputEncryptionKeyType = {
    StaticKey: "static-key",
    SrtPassword: "srt-password",
} as const;

/**
 * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
 */
export type FlowOutputEncryptionKeyType = (typeof FlowOutputEncryptionKeyType)[keyof typeof FlowOutputEncryptionKeyType];

export const FlowOutputMediaStreamOutputConfigurationEncodingName = {
    Jxsv: "jxsv",
    Raw: "raw",
    Smpte291: "smpte291",
    Pcm: "pcm",
} as const;

/**
 * The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video streams on sources or outputs that use the CDI protocol, set the encoding name to raw. For video streams on sources or outputs that use the ST 2110 JPEG XS protocol, set the encoding name to jxsv.
 */
export type FlowOutputMediaStreamOutputConfigurationEncodingName = (typeof FlowOutputMediaStreamOutputConfigurationEncodingName)[keyof typeof FlowOutputMediaStreamOutputConfigurationEncodingName];

export const FlowOutputProtocol = {
    ZixiPush: "zixi-push",
    RtpFec: "rtp-fec",
    Rtp: "rtp",
    ZixiPull: "zixi-pull",
    Rist: "rist",
    FujitsuQos: "fujitsu-qos",
    SrtListener: "srt-listener",
    SrtCaller: "srt-caller",
    St2110Jpegxs: "st2110-jpegxs",
    Cdi: "cdi",
} as const;

/**
 * The protocol that is used by the source or output.
 */
export type FlowOutputProtocol = (typeof FlowOutputProtocol)[keyof typeof FlowOutputProtocol];

export const FlowSourceEncryptionAlgorithm = {
    Aes128: "aes128",
    Aes192: "aes192",
    Aes256: "aes256",
} as const;

/**
 * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
 */
export type FlowSourceEncryptionAlgorithm = (typeof FlowSourceEncryptionAlgorithm)[keyof typeof FlowSourceEncryptionAlgorithm];

export const FlowSourceEncryptionKeyType = {
    Speke: "speke",
    StaticKey: "static-key",
    SrtPassword: "srt-password",
} as const;

/**
 * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
 */
export type FlowSourceEncryptionKeyType = (typeof FlowSourceEncryptionKeyType)[keyof typeof FlowSourceEncryptionKeyType];

export const FlowSourceProtocol = {
    ZixiPush: "zixi-push",
    RtpFec: "rtp-fec",
    Rtp: "rtp",
    Rist: "rist",
    FujitsuQos: "fujitsu-qos",
    SrtListener: "srt-listener",
    SrtCaller: "srt-caller",
    St2110Jpegxs: "st2110-jpegxs",
    Cdi: "cdi",
} as const;

/**
 * The protocol that is used by the source.
 */
export type FlowSourceProtocol = (typeof FlowSourceProtocol)[keyof typeof FlowSourceProtocol];

export const FlowVpcInterfaceNetworkInterfaceType = {
    Ena: "ena",
    Efa: "efa",
} as const;

/**
 * The type of network adapter that you want MediaConnect to use on this interface. If you don't set this value, it defaults to ENA.
 */
export type FlowVpcInterfaceNetworkInterfaceType = (typeof FlowVpcInterfaceNetworkInterfaceType)[keyof typeof FlowVpcInterfaceNetworkInterfaceType];

export const GatewayState = {
    Creating: "CREATING",
    Active: "ACTIVE",
    Updating: "UPDATING",
    Error: "ERROR",
    Deleting: "DELETING",
    Deleted: "DELETED",
} as const;

/**
 * The current status of the gateway.
 */
export type GatewayState = (typeof GatewayState)[keyof typeof GatewayState];
