// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ClusterEncryptionInTransitClientBroker = {
    Tls: "TLS",
    TlsPlaintext: "TLS_PLAINTEXT",
    Plaintext: "PLAINTEXT",
} as const;

/**
 * Indicates the encryption setting for data in transit between clients and brokers. You must set it to one of the following values.
 *
 * `TLS` means that client-broker communication is enabled with TLS only.
 *
 * `TLS_PLAINTEXT` means that client-broker communication is enabled for both TLS-encrypted, as well as plaintext data.
 *
 * `PLAINTEXT` means that client-broker communication is enabled in plaintext only.
 *
 * The default value is `TLS` .
 */
export type ClusterEncryptionInTransitClientBroker = (typeof ClusterEncryptionInTransitClientBroker)[keyof typeof ClusterEncryptionInTransitClientBroker];

export const ClusterEnhancedMonitoring = {
    Default: "DEFAULT",
    PerBroker: "PER_BROKER",
    PerTopicPerBroker: "PER_TOPIC_PER_BROKER",
    PerTopicPerPartition: "PER_TOPIC_PER_PARTITION",
} as const;

/**
 * Specifies the level of monitoring for the MSK cluster. The possible values are `DEFAULT` , `PER_BROKER` , and `PER_TOPIC_PER_BROKER` .
 */
export type ClusterEnhancedMonitoring = (typeof ClusterEnhancedMonitoring)[keyof typeof ClusterEnhancedMonitoring];

export const ClusterStorageMode = {
    Local: "LOCAL",
    Tiered: "TIERED",
} as const;

/**
 * This controls storage mode for supported storage tiers.
 */
export type ClusterStorageMode = (typeof ClusterStorageMode)[keyof typeof ClusterStorageMode];

export const ReplicatorReplicationInfoTargetCompressionType = {
    None: "NONE",
    Gzip: "GZIP",
    Snappy: "SNAPPY",
    Lz4: "LZ4",
    Zstd: "ZSTD",
} as const;

/**
 * The type of compression to use writing records to target Kafka cluster.
 */
export type ReplicatorReplicationInfoTargetCompressionType = (typeof ReplicatorReplicationInfoTargetCompressionType)[keyof typeof ReplicatorReplicationInfoTargetCompressionType];

export const ReplicatorReplicationStartingPositionType = {
    Latest: "LATEST",
    Earliest: "EARLIEST",
} as const;

/**
 * The type of replication starting position.
 */
export type ReplicatorReplicationStartingPositionType = (typeof ReplicatorReplicationStartingPositionType)[keyof typeof ReplicatorReplicationStartingPositionType];

export const VpcConnectionAuthentication = {
    SaslIam: "SASL_IAM",
    SaslScram: "SASL_SCRAM",
    Tls: "TLS",
} as const;

/**
 * The type of private link authentication
 */
export type VpcConnectionAuthentication = (typeof VpcConnectionAuthentication)[keyof typeof VpcConnectionAuthentication];
