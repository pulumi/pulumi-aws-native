// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AutomationRuleDateRangeUnit = {
    Days: "DAYS",
} as const;

/**
 * A date range unit for the date filter.
 */
export type AutomationRuleDateRangeUnit = (typeof AutomationRuleDateRangeUnit)[keyof typeof AutomationRuleDateRangeUnit];

export const AutomationRuleMapFilterComparison = {
    Equals: "EQUALS",
    NotEquals: "NOT_EQUALS",
    Contains: "CONTAINS",
    NotContains: "NOT_CONTAINS",
} as const;

/**
 * The condition to apply to the key value when filtering Security Hub findings with a map filter.
 *  To search for values that have the filter value, use one of the following comparison operators:
 *   +  To search for values that include the filter value, use ``CONTAINS``. For example, for the ``ResourceTags`` field, the filter ``Department CONTAINS Security`` matches findings that include the value ``Security`` for the ``Department`` tag. In the same example, a finding with a value of ``Security team`` for the ``Department`` tag is a match.
 *   +  To search for values that exactly match the filter value, use ``EQUALS``. For example, for the ``ResourceTags`` field, the filter ``Department EQUALS Security`` matches findings that have the value ``Security`` for the ``Department`` tag.
 *   
 *   ``CONTAINS`` and ``EQUALS`` filters on the same field are joined by ``OR``. A finding matches if it matches any one of those filters. For example, the filters ``Department CONTAINS Security OR Department CONTAINS Finance`` match a finding that includes either ``Security``, ``Finance``, or both values.
 *  To search for values that don't have the filter value, use one of the following comparison operators:
 *   +  To search for values that exclude the filter value, use ``NOT_CONTAINS``. For example, for the ``ResourceTags`` field, the filter ``Department NOT_CONTAINS Finance`` matches findings that exclude the value ``Finance`` for the ``Department`` tag.
 *   +  To search for values other than the filter value, use ``NOT_EQUALS``. For example, for the ``ResourceTags`` field, the filter ``Department NOT_EQUALS Finance`` matches findings that don’t have the value ``Finance`` for the ``Department`` tag.
 *   
 *   ``NOT_CONTAINS`` and ``NOT_EQUALS`` filters on the same field are joined by ``AND``. A finding matches only if it matches all of those filters. For example, the filters ``Department NOT_CONTAINS Security AND Department NOT_CONTAINS Finance`` match a finding that excludes both the ``Security`` and ``Finance`` values.
 *   ``CONTAINS`` filters can only be used with other ``CONTAINS`` filters. ``NOT_CONTAINS`` filters can only be used with other ``NOT_CONTAINS`` filters.
 *  You can’t have both a ``CONTAINS`` filter and a ``NOT_CONTAINS`` filter on the same field. Similarly, you can’t have both an ``EQUALS`` filter and a ``NOT_EQUALS`` filter on the same field. Combining filters in this way returns an error. 
 *   ``CONTAINS`` and ``NOT_CONTAINS`` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *User Guide*.
 */
export type AutomationRuleMapFilterComparison = (typeof AutomationRuleMapFilterComparison)[keyof typeof AutomationRuleMapFilterComparison];

export const AutomationRuleRuleStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Whether the rule is active after it is created. If this parameter is equal to ``ENABLED``, ASH applies the rule to findings and finding updates after the rule is created.
 */
export type AutomationRuleRuleStatus = (typeof AutomationRuleRuleStatus)[keyof typeof AutomationRuleRuleStatus];

export const AutomationRuleSeverityUpdateLabel = {
    Informational: "INFORMATIONAL",
    Low: "LOW",
    Medium: "MEDIUM",
    High: "HIGH",
    Critical: "CRITICAL",
} as const;

/**
 * The severity value of the finding. The allowed values are the following.
 *   +   ``INFORMATIONAL`` - No issue was found.
 *   +   ``LOW`` - The issue does not require action on its own.
 *   +   ``MEDIUM`` - The issue must be addressed but not urgently.
 *   +   ``HIGH`` - The issue must be addressed as a priority.
 *   +   ``CRITICAL`` - The issue must be remediated immediately to avoid it escalating.
 */
export type AutomationRuleSeverityUpdateLabel = (typeof AutomationRuleSeverityUpdateLabel)[keyof typeof AutomationRuleSeverityUpdateLabel];

export const AutomationRuleStringFilterComparison = {
    Equals: "EQUALS",
    Prefix: "PREFIX",
    NotEquals: "NOT_EQUALS",
    PrefixNotEquals: "PREFIX_NOT_EQUALS",
    Contains: "CONTAINS",
    NotContains: "NOT_CONTAINS",
} as const;

/**
 * The condition to apply to a string value when filtering Security Hub findings.
 */
export type AutomationRuleStringFilterComparison = (typeof AutomationRuleStringFilterComparison)[keyof typeof AutomationRuleStringFilterComparison];

export const AutomationRuleWorkflowUpdateStatus = {
    New: "NEW",
    Notified: "NOTIFIED",
    Resolved: "RESOLVED",
    Suppressed: "SUPPRESSED",
} as const;

/**
 * The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to ``SUPPRESSED`` or ``RESOLVED`` does not prevent a new finding for the same issue.
 *  The allowed values are the following.
 *   +   ``NEW`` - The initial state of a finding, before it is reviewed.
 *  Security Hub also resets ``WorkFlowStatus`` from ``NOTIFIED`` or ``RESOLVED`` to ``NEW`` in the following cases:
 *   +  The record state changes from ``ARCHIVED`` to ``ACTIVE``.
 *   +  The compliance status changes from ``PASSED`` to either ``WARNING``, ``FAILED``, or ``NOT_AVAILABLE``.
 *   
 *   +   ``NOTIFIED`` - Indicates that you notified the resource owner about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.
 *   +   ``RESOLVED`` - The finding was reviewed and remediated and is now considered resolved.
 *   +   ``SUPPRESSED`` - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.
 */
export type AutomationRuleWorkflowUpdateStatus = (typeof AutomationRuleWorkflowUpdateStatus)[keyof typeof AutomationRuleWorkflowUpdateStatus];

export const AutomationRulesActionType = {
    FindingFieldsUpdate: "FINDING_FIELDS_UPDATE",
} as const;

/**
 * Specifies that the rule action should update the ``Types`` finding field. The ``Types`` finding field classifies findings in the format of namespace/category/classifier. For more information, see [Types taxonomy for ASFF](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html) in the *User Guide*.
 */
export type AutomationRulesActionType = (typeof AutomationRulesActionType)[keyof typeof AutomationRulesActionType];

export const AutomationRulesFindingFieldsUpdateVerificationState = {
    Unknown: "UNKNOWN",
    TruePositive: "TRUE_POSITIVE",
    FalsePositive: "FALSE_POSITIVE",
    BenignPositive: "BENIGN_POSITIVE",
} as const;

/**
 * The rule action updates the ``VerificationState`` field of a finding.
 */
export type AutomationRulesFindingFieldsUpdateVerificationState = (typeof AutomationRulesFindingFieldsUpdateVerificationState)[keyof typeof AutomationRulesFindingFieldsUpdateVerificationState];

export const ConfigurationPolicyParameterConfigurationValueType = {
    Default: "DEFAULT",
    Custom: "CUSTOM",
} as const;

/**
 * Identifies whether a control parameter uses a custom user-defined value or subscribes to the default AWS Security Hub behavior.
 */
export type ConfigurationPolicyParameterConfigurationValueType = (typeof ConfigurationPolicyParameterConfigurationValueType)[keyof typeof ConfigurationPolicyParameterConfigurationValueType];

export const DelegatedAdminStatus = {
    Enabled: "ENABLED",
    DisableInProgress: "DISABLE_IN_PROGRESS",
} as const;

/**
 * Whether the delegated Security Hub administrator is set for the organization.
 */
export type DelegatedAdminStatus = (typeof DelegatedAdminStatus)[keyof typeof DelegatedAdminStatus];

export const FindingAggregatorRegionLinkingMode = {
    AllRegions: "ALL_REGIONS",
    AllRegionsExceptSpecified: "ALL_REGIONS_EXCEPT_SPECIFIED",
    SpecifiedRegions: "SPECIFIED_REGIONS",
} as const;

/**
 * Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
 *  The selected option also determines how to use the Regions provided in the Regions list.
 *  The options are as follows:
 *   +   ``ALL_REGIONS`` - Aggregates findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. 
 *   +   ``ALL_REGIONS_EXCEPT_SPECIFIED`` - Aggregates findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the ``Regions`` parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. 
 *   +   ``SPECIFIED_REGIONS`` - Aggregates findings only from the Regions listed in the ``Regions`` parameter. Security Hub does not automatically aggregate findings from new Regions. 
 *   +   ``NO_REGIONS`` - Aggregates no data because no Regions are selected as linked Regions.
 */
export type FindingAggregatorRegionLinkingMode = (typeof FindingAggregatorRegionLinkingMode)[keyof typeof FindingAggregatorRegionLinkingMode];

export const InsightDateRangeUnit = {
    Days: "DAYS",
} as const;

/**
 * A date range unit for the date filter.
 */
export type InsightDateRangeUnit = (typeof InsightDateRangeUnit)[keyof typeof InsightDateRangeUnit];

export const InsightMapFilterComparison = {
    Equals: "EQUALS",
    NotEquals: "NOT_EQUALS",
} as const;

/**
 * The condition to apply to the key value when filtering Security Hub findings with a map filter.
 */
export type InsightMapFilterComparison = (typeof InsightMapFilterComparison)[keyof typeof InsightMapFilterComparison];

export const InsightStringFilterComparison = {
    Equals: "EQUALS",
    Prefix: "PREFIX",
    NotEquals: "NOT_EQUALS",
    PrefixNotEquals: "PREFIX_NOT_EQUALS",
} as const;

/**
 * The condition to apply to a string value when filtering Security Hub findings.
 */
export type InsightStringFilterComparison = (typeof InsightStringFilterComparison)[keyof typeof InsightStringFilterComparison];

export const OrganizationConfigurationAutoEnableStandards = {
    Default: "DEFAULT",
    None: "NONE",
} as const;

/**
 * Whether to automatically enable Security Hub default standards in new member accounts when they join the organization.
 */
export type OrganizationConfigurationAutoEnableStandards = (typeof OrganizationConfigurationAutoEnableStandards)[keyof typeof OrganizationConfigurationAutoEnableStandards];

export const OrganizationConfigurationConfigurationType = {
    Central: "CENTRAL",
    Local: "LOCAL",
} as const;

/**
 * Indicates whether the organization uses local or central configuration.
 */
export type OrganizationConfigurationConfigurationType = (typeof OrganizationConfigurationConfigurationType)[keyof typeof OrganizationConfigurationConfigurationType];

export const OrganizationConfigurationStatus = {
    Pending: "PENDING",
    Enabled: "ENABLED",
    Failed: "FAILED",
} as const;

/**
 * Describes whether central configuration could be enabled as the ConfigurationType for the organization.
 */
export type OrganizationConfigurationStatus = (typeof OrganizationConfigurationStatus)[keyof typeof OrganizationConfigurationStatus];

export const PolicyAssociationAssociationStatus = {
    Success: "SUCCESS",
    Pending: "PENDING",
    Failed: "FAILED",
} as const;

/**
 * The current status of the association between the specified target and the configuration
 */
export type PolicyAssociationAssociationStatus = (typeof PolicyAssociationAssociationStatus)[keyof typeof PolicyAssociationAssociationStatus];

export const PolicyAssociationAssociationType = {
    Applied: "APPLIED",
    Inherited: "INHERITED",
} as const;

/**
 * Indicates whether the association between the specified target and the configuration was directly applied by the Security Hub delegated administrator or inherited from a parent
 */
export type PolicyAssociationAssociationType = (typeof PolicyAssociationAssociationType)[keyof typeof PolicyAssociationAssociationType];

export const PolicyAssociationTargetType = {
    Account: "ACCOUNT",
    OrganizationalUnit: "ORGANIZATIONAL_UNIT",
    Root: "ROOT",
} as const;

/**
 * Indicates whether the target is an AWS account, organizational unit, or the organization root
 */
export type PolicyAssociationTargetType = (typeof PolicyAssociationTargetType)[keyof typeof PolicyAssociationTargetType];

export const SecurityControlParameterConfigurationValueType = {
    Default: "DEFAULT",
    Custom: "CUSTOM",
} as const;

/**
 * Identifies whether a control parameter uses a custom user-defined value or subscribes to the default AWS Security Hub behavior.
 *
 * When `ValueType` is set equal to `DEFAULT` , the default behavior can be a specific Security Hub default value, or the default behavior can be to ignore a specific parameter. When `ValueType` is set equal to `DEFAULT` , Security Hub ignores user-provided input for the `Value` field.
 *
 * When `ValueType` is set equal to `CUSTOM` , the `Value` field can't be empty.
 */
export type SecurityControlParameterConfigurationValueType = (typeof SecurityControlParameterConfigurationValueType)[keyof typeof SecurityControlParameterConfigurationValueType];
