// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ScheduleAssignPublicIp = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Specifies whether the task's elastic network interface receives a public IP address. You can specify ENABLED only when LaunchType in EcsParameters is set to FARGATE.
 */
export type ScheduleAssignPublicIp = (typeof ScheduleAssignPublicIp)[keyof typeof ScheduleAssignPublicIp];

export const ScheduleFlexibleTimeWindowMode = {
    Off: "OFF",
    Flexible: "FLEXIBLE",
} as const;

/**
 * Determines whether the schedule is executed within a flexible time window.
 */
export type ScheduleFlexibleTimeWindowMode = (typeof ScheduleFlexibleTimeWindowMode)[keyof typeof ScheduleFlexibleTimeWindowMode];

export const ScheduleGroupState = {
    Active: "ACTIVE",
    Deleting: "DELETING",
} as const;

/**
 * Specifies the state of the schedule group.
 */
export type ScheduleGroupState = (typeof ScheduleGroupState)[keyof typeof ScheduleGroupState];

export const ScheduleLaunchType = {
    Ec2: "EC2",
    Fargate: "FARGATE",
    External: "EXTERNAL",
} as const;

/**
 * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The FARGATE value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see AWS Fargate on Amazon ECS in the Amazon Elastic Container Service Developer Guide.
 */
export type ScheduleLaunchType = (typeof ScheduleLaunchType)[keyof typeof ScheduleLaunchType];

export const SchedulePlacementConstraintType = {
    DistinctInstance: "distinctInstance",
    MemberOf: "memberOf",
} as const;

/**
 * The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
 */
export type SchedulePlacementConstraintType = (typeof SchedulePlacementConstraintType)[keyof typeof SchedulePlacementConstraintType];

export const SchedulePlacementStrategyType = {
    Random: "random",
    Spread: "spread",
    Binpack: "binpack",
} as const;

/**
 * The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
 */
export type SchedulePlacementStrategyType = (typeof SchedulePlacementStrategyType)[keyof typeof SchedulePlacementStrategyType];

export const SchedulePropagateTags = {
    TaskDefinition: "TASK_DEFINITION",
} as const;

/**
 * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
 */
export type SchedulePropagateTags = (typeof SchedulePropagateTags)[keyof typeof SchedulePropagateTags];

export const ScheduleState = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Specifies whether the schedule is enabled or disabled.
 */
export type ScheduleState = (typeof ScheduleState)[keyof typeof ScheduleState];
