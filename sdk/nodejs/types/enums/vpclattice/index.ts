// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AccessLogSubscriptionServiceNetworkLogType = {
    Service: "SERVICE",
    Resource: "RESOURCE",
} as const;

/**
 * Log type of the service network.
 */
export type AccessLogSubscriptionServiceNetworkLogType = (typeof AccessLogSubscriptionServiceNetworkLogType)[keyof typeof AccessLogSubscriptionServiceNetworkLogType];

export const AuthPolicyState = {
    Active: "ACTIVE",
    Inactive: "INACTIVE",
} as const;

/**
 * The state of the auth policy. The auth policy is only active when the auth type is set to `AWS _IAM` . If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the auth type is `NONE` , then any auth policy you provide will remain inactive.
 */
export type AuthPolicyState = (typeof AuthPolicyState)[keyof typeof AuthPolicyState];

export const ListenerProtocol = {
    Http: "HTTP",
    Https: "HTTPS",
    TlsPassthrough: "TLS_PASSTHROUGH",
} as const;

/**
 * The listener protocol.
 */
export type ListenerProtocol = (typeof ListenerProtocol)[keyof typeof ListenerProtocol];

export const ResourceConfigurationAuthType = {
    None: "NONE",
    AwsIam: "AWS_IAM",
} as const;

export type ResourceConfigurationAuthType = (typeof ResourceConfigurationAuthType)[keyof typeof ResourceConfigurationAuthType];

export const ResourceConfigurationDnsResourceIpAddressType = {
    Ipv4: "IPV4",
    Ipv6: "IPV6",
    Dualstack: "DUALSTACK",
} as const;

export type ResourceConfigurationDnsResourceIpAddressType = (typeof ResourceConfigurationDnsResourceIpAddressType)[keyof typeof ResourceConfigurationDnsResourceIpAddressType];

export const ResourceConfigurationProtocolType = {
    Tcp: "TCP",
} as const;

export type ResourceConfigurationProtocolType = (typeof ResourceConfigurationProtocolType)[keyof typeof ResourceConfigurationProtocolType];

export const ResourceConfigurationType = {
    Group: "GROUP",
    Child: "CHILD",
    Single: "SINGLE",
    Arn: "ARN",
} as const;

export type ResourceConfigurationType = (typeof ResourceConfigurationType)[keyof typeof ResourceConfigurationType];

export const ResourceGatewayIpAddressType = {
    Ipv4: "IPV4",
    Ipv6: "IPV6",
    Dualstack: "DUALSTACK",
} as const;

/**
 * The type of IP address used by the resource gateway.
 */
export type ResourceGatewayIpAddressType = (typeof ResourceGatewayIpAddressType)[keyof typeof ResourceGatewayIpAddressType];

export const RuleHttpMatchMethod = {
    Connect: "CONNECT",
    Delete: "DELETE",
    Get: "GET",
    Head: "HEAD",
    Options: "OPTIONS",
    Post: "POST",
    Put: "PUT",
    Trace: "TRACE",
} as const;

/**
 * The HTTP method type.
 */
export type RuleHttpMatchMethod = (typeof RuleHttpMatchMethod)[keyof typeof RuleHttpMatchMethod];

export const ServiceAuthType = {
    None: "NONE",
    AwsIam: "AWS_IAM",
} as const;

/**
 * The type of IAM policy.
 *
 * - `NONE` : The resource does not use an IAM policy. This is the default.
 * - `AWS_IAM` : The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.
 */
export type ServiceAuthType = (typeof ServiceAuthType)[keyof typeof ServiceAuthType];

export const ServiceNetworkAuthType = {
    None: "NONE",
    AwsIam: "AWS_IAM",
} as const;

/**
 * The type of IAM policy.
 *
 * - `NONE` : The resource does not use an IAM policy. This is the default.
 * - `AWS_IAM` : The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.
 */
export type ServiceNetworkAuthType = (typeof ServiceNetworkAuthType)[keyof typeof ServiceNetworkAuthType];

export const ServiceNetworkServiceAssociationStatus = {
    CreateInProgress: "CREATE_IN_PROGRESS",
    Active: "ACTIVE",
    DeleteInProgress: "DELETE_IN_PROGRESS",
    CreateFailed: "CREATE_FAILED",
    DeleteFailed: "DELETE_FAILED",
} as const;

/**
 * The status of the association between the service network and the service.
 */
export type ServiceNetworkServiceAssociationStatus = (typeof ServiceNetworkServiceAssociationStatus)[keyof typeof ServiceNetworkServiceAssociationStatus];

export const ServiceNetworkVpcAssociationStatus = {
    CreateInProgress: "CREATE_IN_PROGRESS",
    Active: "ACTIVE",
    UpdateInProgress: "UPDATE_IN_PROGRESS",
    DeleteInProgress: "DELETE_IN_PROGRESS",
    CreateFailed: "CREATE_FAILED",
    DeleteFailed: "DELETE_FAILED",
} as const;

/**
 * The status of the association.
 */
export type ServiceNetworkVpcAssociationStatus = (typeof ServiceNetworkVpcAssociationStatus)[keyof typeof ServiceNetworkVpcAssociationStatus];

export const ServiceStatus = {
    Active: "ACTIVE",
    CreateInProgress: "CREATE_IN_PROGRESS",
    DeleteInProgress: "DELETE_IN_PROGRESS",
    CreateFailed: "CREATE_FAILED",
    DeleteFailed: "DELETE_FAILED",
} as const;

/**
 * The status of the service.
 */
export type ServiceStatus = (typeof ServiceStatus)[keyof typeof ServiceStatus];

export const TargetGroupConfigIpAddressType = {
    Ipv4: "IPV4",
    Ipv6: "IPV6",
} as const;

/**
 * The type of IP address used for the target group. Supported only if the target group type is `IP` . The default is `IPV4` .
 */
export type TargetGroupConfigIpAddressType = (typeof TargetGroupConfigIpAddressType)[keyof typeof TargetGroupConfigIpAddressType];

export const TargetGroupConfigLambdaEventStructureVersion = {
    V1: "V1",
    V2: "V2",
} as const;

/**
 * The version of the event structure that your Lambda function receives. Supported only if the target group type is `LAMBDA` . The default is `V1` .
 */
export type TargetGroupConfigLambdaEventStructureVersion = (typeof TargetGroupConfigLambdaEventStructureVersion)[keyof typeof TargetGroupConfigLambdaEventStructureVersion];

export const TargetGroupConfigProtocol = {
    Http: "HTTP",
    Https: "HTTPS",
    Tcp: "TCP",
} as const;

/**
 * The protocol to use for routing traffic to the targets. The default is the protocol of the target group. Not supported if the target group type is `LAMBDA` .
 */
export type TargetGroupConfigProtocol = (typeof TargetGroupConfigProtocol)[keyof typeof TargetGroupConfigProtocol];

export const TargetGroupConfigProtocolVersion = {
    Http1: "HTTP1",
    Http2: "HTTP2",
    Grpc: "GRPC",
} as const;

/**
 * The protocol version. The default is `HTTP1` . Not supported if the target group type is `LAMBDA` .
 */
export type TargetGroupConfigProtocolVersion = (typeof TargetGroupConfigProtocolVersion)[keyof typeof TargetGroupConfigProtocolVersion];

export const TargetGroupHealthCheckConfigProtocol = {
    Http: "HTTP",
    Https: "HTTPS",
} as const;

/**
 * The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS` . The default is `HTTP` .
 */
export type TargetGroupHealthCheckConfigProtocol = (typeof TargetGroupHealthCheckConfigProtocol)[keyof typeof TargetGroupHealthCheckConfigProtocol];

export const TargetGroupHealthCheckConfigProtocolVersion = {
    Http1: "HTTP1",
    Http2: "HTTP2",
} as const;

/**
 * The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2` .
 */
export type TargetGroupHealthCheckConfigProtocolVersion = (typeof TargetGroupHealthCheckConfigProtocolVersion)[keyof typeof TargetGroupHealthCheckConfigProtocolVersion];

export const TargetGroupStatus = {
    CreateInProgress: "CREATE_IN_PROGRESS",
    Active: "ACTIVE",
    DeleteInProgress: "DELETE_IN_PROGRESS",
    CreateFailed: "CREATE_FAILED",
    DeleteFailed: "DELETE_FAILED",
} as const;

/**
 * The operation's status. You can retry the operation if the status is `CREATE_FAILED` . However, if you retry it while the status is `CREATE_IN_PROGRESS` , there is no change in the status.
 */
export type TargetGroupStatus = (typeof TargetGroupStatus)[keyof typeof TargetGroupStatus];

export const TargetGroupType = {
    Ip: "IP",
    Lambda: "LAMBDA",
    Instance: "INSTANCE",
    Alb: "ALB",
} as const;

/**
 * The type of target group.
 */
export type TargetGroupType = (typeof TargetGroupType)[keyof typeof TargetGroupType];
