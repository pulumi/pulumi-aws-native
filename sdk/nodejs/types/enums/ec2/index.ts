// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const CapacityReservationFleetInstanceMatchCriteria = {
    Open: "open",
} as const;

export type CapacityReservationFleetInstanceMatchCriteria = (typeof CapacityReservationFleetInstanceMatchCriteria)[keyof typeof CapacityReservationFleetInstanceMatchCriteria];

export const CapacityReservationFleetTenancy = {
    Default: "default",
} as const;

export type CapacityReservationFleetTenancy = (typeof CapacityReservationFleetTenancy)[keyof typeof CapacityReservationFleetTenancy];

export const Ec2FleetCapacityRebalanceReplacementStrategy = {
    Launch: "launch",
    LaunchBeforeTerminate: "launch-before-terminate",
} as const;

export type Ec2FleetCapacityRebalanceReplacementStrategy = (typeof Ec2FleetCapacityRebalanceReplacementStrategy)[keyof typeof Ec2FleetCapacityRebalanceReplacementStrategy];

export const Ec2FleetCapacityReservationOptionsRequestUsageStrategy = {
    UseCapacityReservationsFirst: "use-capacity-reservations-first",
} as const;

export type Ec2FleetCapacityReservationOptionsRequestUsageStrategy = (typeof Ec2FleetCapacityReservationOptionsRequestUsageStrategy)[keyof typeof Ec2FleetCapacityReservationOptionsRequestUsageStrategy];

export const Ec2FleetExcessCapacityTerminationPolicy = {
    Termination: "termination",
    NoTermination: "no-termination",
} as const;

export type Ec2FleetExcessCapacityTerminationPolicy = (typeof Ec2FleetExcessCapacityTerminationPolicy)[keyof typeof Ec2FleetExcessCapacityTerminationPolicy];

export const Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem = {
    Nvidia: "nvidia",
    Amd: "amd",
    AmazonWebServices: "amazon-web-services",
    Xilinx: "xilinx",
} as const;

export type Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem = (typeof Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem)[keyof typeof Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem];

export const Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem = {
    A100: "a100",
    V100: "v100",
    K80: "k80",
    T4: "t4",
    M60: "m60",
    RadeonProV520: "radeon-pro-v520",
    Vu9p: "vu9p",
    Inferentia: "inferentia",
    K520: "k520",
} as const;

export type Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem = (typeof Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem)[keyof typeof Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem];

export const Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem = {
    Gpu: "gpu",
    Fpga: "fpga",
    Inference: "inference",
} as const;

export type Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem = (typeof Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem)[keyof typeof Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem];

export const Ec2FleetInstanceRequirementsRequestBareMetal = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
} as const;

export type Ec2FleetInstanceRequirementsRequestBareMetal = (typeof Ec2FleetInstanceRequirementsRequestBareMetal)[keyof typeof Ec2FleetInstanceRequirementsRequestBareMetal];

export const Ec2FleetInstanceRequirementsRequestBurstablePerformance = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
} as const;

export type Ec2FleetInstanceRequirementsRequestBurstablePerformance = (typeof Ec2FleetInstanceRequirementsRequestBurstablePerformance)[keyof typeof Ec2FleetInstanceRequirementsRequestBurstablePerformance];

export const Ec2FleetInstanceRequirementsRequestCpuManufacturersItem = {
    Intel: "intel",
    Amd: "amd",
    AmazonWebServices: "amazon-web-services",
} as const;

export type Ec2FleetInstanceRequirementsRequestCpuManufacturersItem = (typeof Ec2FleetInstanceRequirementsRequestCpuManufacturersItem)[keyof typeof Ec2FleetInstanceRequirementsRequestCpuManufacturersItem];

export const Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem = {
    Current: "current",
    Previous: "previous",
} as const;

export type Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem = (typeof Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem)[keyof typeof Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem];

export const Ec2FleetInstanceRequirementsRequestLocalStorage = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
} as const;

export type Ec2FleetInstanceRequirementsRequestLocalStorage = (typeof Ec2FleetInstanceRequirementsRequestLocalStorage)[keyof typeof Ec2FleetInstanceRequirementsRequestLocalStorage];

export const Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem = {
    Hdd: "hdd",
    Ssd: "ssd",
} as const;

export type Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem = (typeof Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem)[keyof typeof Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem];

export const Ec2FleetSpotOptionsRequestAllocationStrategy = {
    LowestPrice: "lowest-price",
    Diversified: "diversified",
    CapacityOptimized: "capacityOptimized",
    CapacityOptimizedPrioritized: "capacityOptimizedPrioritized",
    PriceCapacityOptimized: "priceCapacityOptimized",
} as const;

export type Ec2FleetSpotOptionsRequestAllocationStrategy = (typeof Ec2FleetSpotOptionsRequestAllocationStrategy)[keyof typeof Ec2FleetSpotOptionsRequestAllocationStrategy];

export const Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior = {
    Hibernate: "hibernate",
    Stop: "stop",
    Terminate: "terminate",
} as const;

export type Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior = (typeof Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior)[keyof typeof Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior];

export const Ec2FleetTagSpecificationResourceType = {
    ClientVpnEndpoint: "client-vpn-endpoint",
    CustomerGateway: "customer-gateway",
    DedicatedHost: "dedicated-host",
    DhcpOptions: "dhcp-options",
    EgressOnlyInternetGateway: "egress-only-internet-gateway",
    ElasticGpu: "elastic-gpu",
    ElasticIp: "elastic-ip",
    ExportImageTask: "export-image-task",
    ExportInstanceTask: "export-instance-task",
    Fleet: "fleet",
    FpgaImage: "fpga-image",
    HostReservation: "host-reservation",
    Image: "image",
    ImportImageTask: "import-image-task",
    ImportSnapshotTask: "import-snapshot-task",
    Instance: "instance",
    InternetGateway: "internet-gateway",
    KeyPair: "key-pair",
    LaunchTemplate: "launch-template",
    LocalGatewayRouteTableVpcAssociation: "local-gateway-route-table-vpc-association",
    Natgateway: "natgateway",
    NetworkAcl: "network-acl",
    NetworkInsightsAnalysis: "network-insights-analysis",
    NetworkInsightsPath: "network-insights-path",
    NetworkInterface: "network-interface",
    PlacementGroup: "placement-group",
    ReservedInstances: "reserved-instances",
    RouteTable: "route-table",
    SecurityGroup: "security-group",
    Snapshot: "snapshot",
    SpotFleetRequest: "spot-fleet-request",
    SpotInstancesRequest: "spot-instances-request",
    Subnet: "subnet",
    TrafficMirrorFilter: "traffic-mirror-filter",
    TrafficMirrorSession: "traffic-mirror-session",
    TrafficMirrorTarget: "traffic-mirror-target",
    TransitGateway: "transit-gateway",
    TransitGatewayAttachment: "transit-gateway-attachment",
    TransitGatewayConnectPeer: "transit-gateway-connect-peer",
    TransitGatewayMulticastDomain: "transit-gateway-multicast-domain",
    TransitGatewayRouteTable: "transit-gateway-route-table",
    Volume: "volume",
    Vpc: "vpc",
    VpcFlowLog: "vpc-flow-log",
    VpcPeeringConnection: "vpc-peering-connection",
    VpnConnection: "vpn-connection",
    VpnGateway: "vpn-gateway",
} as const;

export type Ec2FleetTagSpecificationResourceType = (typeof Ec2FleetTagSpecificationResourceType)[keyof typeof Ec2FleetTagSpecificationResourceType];

export const Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType = {
    OnDemand: "on-demand",
    Spot: "spot",
} as const;

export type Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType = (typeof Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType)[keyof typeof Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType];

export const Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType = {
    Vcpu: "vcpu",
    MemoryMib: "memory-mib",
    Units: "units",
} as const;

export type Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType = (typeof Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType)[keyof typeof Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType];

export const Ec2FleetType = {
    Maintain: "maintain",
    Request: "request",
    Instant: "instant",
} as const;

export type Ec2FleetType = (typeof Ec2FleetType)[keyof typeof Ec2FleetType];

export const FlowLogDestinationOptionsPropertiesFileFormat = {
    PlainText: "plain-text",
    Parquet: "parquet",
} as const;

export type FlowLogDestinationOptionsPropertiesFileFormat = (typeof FlowLogDestinationOptionsPropertiesFileFormat)[keyof typeof FlowLogDestinationOptionsPropertiesFileFormat];

export const FlowLogLogDestinationType = {
    CloudWatchLogs: "cloud-watch-logs",
    S3: "s3",
    KinesisDataFirehose: "kinesis-data-firehose",
} as const;

/**
 * Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.
 */
export type FlowLogLogDestinationType = (typeof FlowLogLogDestinationType)[keyof typeof FlowLogLogDestinationType];

export const FlowLogResourceType = {
    NetworkInterface: "NetworkInterface",
    Subnet: "Subnet",
    Vpc: "VPC",
    TransitGateway: "TransitGateway",
    TransitGatewayAttachment: "TransitGatewayAttachment",
} as const;

/**
 * The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
 */
export type FlowLogResourceType = (typeof FlowLogResourceType)[keyof typeof FlowLogResourceType];

export const FlowLogTrafficType = {
    Accept: "ACCEPT",
    All: "ALL",
    Reject: "REJECT",
} as const;

/**
 * The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
 */
export type FlowLogTrafficType = (typeof FlowLogTrafficType)[keyof typeof FlowLogTrafficType];

export const IpamPoolAwsService = {
    Ec2: "ec2",
} as const;

/**
 * Limits which service in Amazon Web Services that the pool can be used in.
 */
export type IpamPoolAwsService = (typeof IpamPoolAwsService)[keyof typeof IpamPoolAwsService];

export const IpamPoolIpamScopeType = {
    Public: "public",
    Private: "private",
} as const;

/**
 * Determines whether this scope contains publicly routable space or space for a private network
 */
export type IpamPoolIpamScopeType = (typeof IpamPoolIpamScopeType)[keyof typeof IpamPoolIpamScopeType];

export const IpamPoolPublicIpSource = {
    Byoip: "byoip",
    Amazon: "amazon",
} as const;

/**
 * The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is `byoip`.
 */
export type IpamPoolPublicIpSource = (typeof IpamPoolPublicIpSource)[keyof typeof IpamPoolPublicIpSource];

export const IpamPoolState = {
    CreateInProgress: "create-in-progress",
    CreateComplete: "create-complete",
    ModifyInProgress: "modify-in-progress",
    ModifyComplete: "modify-complete",
    DeleteInProgress: "delete-in-progress",
    DeleteComplete: "delete-complete",
} as const;

/**
 * The state of this pool. This can be one of the following values: "create-in-progress", "create-complete", "modify-in-progress", "modify-complete", "delete-in-progress", or "delete-complete"
 */
export type IpamPoolState = (typeof IpamPoolState)[keyof typeof IpamPoolState];

export const IpamScopeType = {
    Public: "public",
    Private: "private",
} as const;

/**
 * Determines whether this scope contains publicly routable space or space for a private network
 */
export type IpamScopeType = (typeof IpamScopeType)[keyof typeof IpamScopeType];

export const KeyPairKeyFormat = {
    Pem: "pem",
    Ppk: "ppk",
} as const;

/**
 * The format of the private key
 */
export type KeyPairKeyFormat = (typeof KeyPairKeyFormat)[keyof typeof KeyPairKeyFormat];

export const KeyPairKeyType = {
    Rsa: "rsa",
    Ed25519: "ed25519",
} as const;

/**
 * The crypto-system used to generate a key pair.
 */
export type KeyPairKeyType = (typeof KeyPairKeyType)[keyof typeof KeyPairKeyType];

export const LaunchTemplateCpuOptionsAmdSevSnp = {
    Enabled: "enabled",
    Disabled: "disabled",
} as const;

/**
 * Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only.
 */
export type LaunchTemplateCpuOptionsAmdSevSnp = (typeof LaunchTemplateCpuOptionsAmdSevSnp)[keyof typeof LaunchTemplateCpuOptionsAmdSevSnp];

export const NetworkInsightsAccessScopeAnalysisFindingsFound = {
    True: "true",
    False: "false",
    Unknown: "unknown",
} as const;

export type NetworkInsightsAccessScopeAnalysisFindingsFound = (typeof NetworkInsightsAccessScopeAnalysisFindingsFound)[keyof typeof NetworkInsightsAccessScopeAnalysisFindingsFound];

export const NetworkInsightsAccessScopeAnalysisStatus = {
    Running: "running",
    Failed: "failed",
    Succeeded: "succeeded",
} as const;

export type NetworkInsightsAccessScopeAnalysisStatus = (typeof NetworkInsightsAccessScopeAnalysisStatus)[keyof typeof NetworkInsightsAccessScopeAnalysisStatus];

export const NetworkInsightsAccessScopeProtocol = {
    Tcp: "tcp",
    Udp: "udp",
} as const;

export type NetworkInsightsAccessScopeProtocol = (typeof NetworkInsightsAccessScopeProtocol)[keyof typeof NetworkInsightsAccessScopeProtocol];

export const NetworkInsightsAnalysisStatus = {
    Running: "running",
    Failed: "failed",
    Succeeded: "succeeded",
} as const;

export type NetworkInsightsAnalysisStatus = (typeof NetworkInsightsAnalysisStatus)[keyof typeof NetworkInsightsAnalysisStatus];

export const NetworkInsightsPathProtocol = {
    Tcp: "tcp",
    Udp: "udp",
} as const;

export type NetworkInsightsPathProtocol = (typeof NetworkInsightsPathProtocol)[keyof typeof NetworkInsightsPathProtocol];

export const PrefixListAddressFamily = {
    IPv4: "IPv4",
    IPv6: "IPv6",
} as const;

/**
 * Ip Version of Prefix List.
 */
export type PrefixListAddressFamily = (typeof PrefixListAddressFamily)[keyof typeof PrefixListAddressFamily];

export const SpotFleetEbsBlockDeviceVolumeType = {
    Gp2: "gp2",
    Gp3: "gp3",
    Io1: "io1",
    Io2: "io2",
    Sc1: "sc1",
    St1: "st1",
    Standard: "standard",
} as const;

export type SpotFleetEbsBlockDeviceVolumeType = (typeof SpotFleetEbsBlockDeviceVolumeType)[keyof typeof SpotFleetEbsBlockDeviceVolumeType];

export const SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem = {
    Nvidia: "nvidia",
    Amd: "amd",
    AmazonWebServices: "amazon-web-services",
    Xilinx: "xilinx",
} as const;

export type SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem = (typeof SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem)[keyof typeof SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem];

export const SpotFleetInstanceRequirementsRequestAcceleratorNamesItem = {
    A100: "a100",
    V100: "v100",
    K80: "k80",
    T4: "t4",
    M60: "m60",
    RadeonProV520: "radeon-pro-v520",
    Vu9p: "vu9p",
    Inferentia: "inferentia",
    K520: "k520",
} as const;

export type SpotFleetInstanceRequirementsRequestAcceleratorNamesItem = (typeof SpotFleetInstanceRequirementsRequestAcceleratorNamesItem)[keyof typeof SpotFleetInstanceRequirementsRequestAcceleratorNamesItem];

export const SpotFleetInstanceRequirementsRequestAcceleratorTypesItem = {
    Gpu: "gpu",
    Fpga: "fpga",
    Inference: "inference",
} as const;

export type SpotFleetInstanceRequirementsRequestAcceleratorTypesItem = (typeof SpotFleetInstanceRequirementsRequestAcceleratorTypesItem)[keyof typeof SpotFleetInstanceRequirementsRequestAcceleratorTypesItem];

export const SpotFleetInstanceRequirementsRequestBareMetal = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
} as const;

export type SpotFleetInstanceRequirementsRequestBareMetal = (typeof SpotFleetInstanceRequirementsRequestBareMetal)[keyof typeof SpotFleetInstanceRequirementsRequestBareMetal];

export const SpotFleetInstanceRequirementsRequestBurstablePerformance = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
} as const;

export type SpotFleetInstanceRequirementsRequestBurstablePerformance = (typeof SpotFleetInstanceRequirementsRequestBurstablePerformance)[keyof typeof SpotFleetInstanceRequirementsRequestBurstablePerformance];

export const SpotFleetInstanceRequirementsRequestCpuManufacturersItem = {
    Intel: "intel",
    Amd: "amd",
    AmazonWebServices: "amazon-web-services",
} as const;

export type SpotFleetInstanceRequirementsRequestCpuManufacturersItem = (typeof SpotFleetInstanceRequirementsRequestCpuManufacturersItem)[keyof typeof SpotFleetInstanceRequirementsRequestCpuManufacturersItem];

export const SpotFleetInstanceRequirementsRequestInstanceGenerationsItem = {
    Current: "current",
    Previous: "previous",
} as const;

export type SpotFleetInstanceRequirementsRequestInstanceGenerationsItem = (typeof SpotFleetInstanceRequirementsRequestInstanceGenerationsItem)[keyof typeof SpotFleetInstanceRequirementsRequestInstanceGenerationsItem];

export const SpotFleetInstanceRequirementsRequestLocalStorage = {
    Included: "included",
    Required: "required",
    Excluded: "excluded",
} as const;

export type SpotFleetInstanceRequirementsRequestLocalStorage = (typeof SpotFleetInstanceRequirementsRequestLocalStorage)[keyof typeof SpotFleetInstanceRequirementsRequestLocalStorage];

export const SpotFleetInstanceRequirementsRequestLocalStorageTypesItem = {
    Hdd: "hdd",
    Ssd: "ssd",
} as const;

export type SpotFleetInstanceRequirementsRequestLocalStorageTypesItem = (typeof SpotFleetInstanceRequirementsRequestLocalStorageTypesItem)[keyof typeof SpotFleetInstanceRequirementsRequestLocalStorageTypesItem];

export const SpotFleetRequestConfigDataAllocationStrategy = {
    CapacityOptimized: "capacityOptimized",
    CapacityOptimizedPrioritized: "capacityOptimizedPrioritized",
    Diversified: "diversified",
    LowestPrice: "lowestPrice",
    PriceCapacityOptimized: "priceCapacityOptimized",
} as const;

export type SpotFleetRequestConfigDataAllocationStrategy = (typeof SpotFleetRequestConfigDataAllocationStrategy)[keyof typeof SpotFleetRequestConfigDataAllocationStrategy];

export const SpotFleetRequestConfigDataExcessCapacityTerminationPolicy = {
    Default: "Default",
    NoTermination: "NoTermination",
} as const;

export type SpotFleetRequestConfigDataExcessCapacityTerminationPolicy = (typeof SpotFleetRequestConfigDataExcessCapacityTerminationPolicy)[keyof typeof SpotFleetRequestConfigDataExcessCapacityTerminationPolicy];

export const SpotFleetRequestConfigDataInstanceInterruptionBehavior = {
    Hibernate: "hibernate",
    Stop: "stop",
    Terminate: "terminate",
} as const;

export type SpotFleetRequestConfigDataInstanceInterruptionBehavior = (typeof SpotFleetRequestConfigDataInstanceInterruptionBehavior)[keyof typeof SpotFleetRequestConfigDataInstanceInterruptionBehavior];

export const SpotFleetRequestConfigDataTargetCapacityUnitType = {
    Vcpu: "vcpu",
    MemoryMib: "memory-mib",
    Units: "units",
} as const;

export type SpotFleetRequestConfigDataTargetCapacityUnitType = (typeof SpotFleetRequestConfigDataTargetCapacityUnitType)[keyof typeof SpotFleetRequestConfigDataTargetCapacityUnitType];

export const SpotFleetRequestConfigDataType = {
    Maintain: "maintain",
    Request: "request",
} as const;

export type SpotFleetRequestConfigDataType = (typeof SpotFleetRequestConfigDataType)[keyof typeof SpotFleetRequestConfigDataType];

export const SpotFleetSpotCapacityRebalanceReplacementStrategy = {
    Launch: "launch",
    LaunchBeforeTerminate: "launch-before-terminate",
} as const;

export type SpotFleetSpotCapacityRebalanceReplacementStrategy = (typeof SpotFleetSpotCapacityRebalanceReplacementStrategy)[keyof typeof SpotFleetSpotCapacityRebalanceReplacementStrategy];

export const SpotFleetSpotPlacementTenancy = {
    Dedicated: "dedicated",
    Default: "default",
    Host: "host",
} as const;

export type SpotFleetSpotPlacementTenancy = (typeof SpotFleetSpotPlacementTenancy)[keyof typeof SpotFleetSpotPlacementTenancy];

export const SpotFleetTagSpecificationResourceType = {
    ClientVpnEndpoint: "client-vpn-endpoint",
    CustomerGateway: "customer-gateway",
    DedicatedHost: "dedicated-host",
    DhcpOptions: "dhcp-options",
    EgressOnlyInternetGateway: "egress-only-internet-gateway",
    ElasticGpu: "elastic-gpu",
    ElasticIp: "elastic-ip",
    ExportImageTask: "export-image-task",
    ExportInstanceTask: "export-instance-task",
    Fleet: "fleet",
    FpgaImage: "fpga-image",
    HostReservation: "host-reservation",
    Image: "image",
    ImportImageTask: "import-image-task",
    ImportSnapshotTask: "import-snapshot-task",
    Instance: "instance",
    InternetGateway: "internet-gateway",
    KeyPair: "key-pair",
    LaunchTemplate: "launch-template",
    LocalGatewayRouteTableVpcAssociation: "local-gateway-route-table-vpc-association",
    Natgateway: "natgateway",
    NetworkAcl: "network-acl",
    NetworkInsightsAnalysis: "network-insights-analysis",
    NetworkInsightsPath: "network-insights-path",
    NetworkInterface: "network-interface",
    PlacementGroup: "placement-group",
    ReservedInstances: "reserved-instances",
    RouteTable: "route-table",
    SecurityGroup: "security-group",
    Snapshot: "snapshot",
    SpotFleetRequest: "spot-fleet-request",
    SpotInstancesRequest: "spot-instances-request",
    Subnet: "subnet",
    TrafficMirrorFilter: "traffic-mirror-filter",
    TrafficMirrorSession: "traffic-mirror-session",
    TrafficMirrorTarget: "traffic-mirror-target",
    TransitGateway: "transit-gateway",
    TransitGatewayAttachment: "transit-gateway-attachment",
    TransitGatewayConnectPeer: "transit-gateway-connect-peer",
    TransitGatewayMulticastDomain: "transit-gateway-multicast-domain",
    TransitGatewayRouteTable: "transit-gateway-route-table",
    Volume: "volume",
    Vpc: "vpc",
    VpcFlowLog: "vpc-flow-log",
    VpcPeeringConnection: "vpc-peering-connection",
    VpnConnection: "vpn-connection",
    VpnGateway: "vpn-gateway",
} as const;

export type SpotFleetTagSpecificationResourceType = (typeof SpotFleetTagSpecificationResourceType)[keyof typeof SpotFleetTagSpecificationResourceType];

export const VpcEndpointType = {
    Interface: "Interface",
    Gateway: "Gateway",
    GatewayLoadBalancer: "GatewayLoadBalancer",
} as const;

export type VpcEndpointType = (typeof VpcEndpointType)[keyof typeof VpcEndpointType];
