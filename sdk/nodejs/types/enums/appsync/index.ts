// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ApiAuthenticationType = {
    AmazonCognitoUserPools: "AMAZON_COGNITO_USER_POOLS",
    AwsIam: "AWS_IAM",
    ApiKey: "API_KEY",
    OpenidConnect: "OPENID_CONNECT",
    AwsLambda: "AWS_LAMBDA",
} as const;

/**
 * Security configuration for your AppSync API.
 */
export type ApiAuthenticationType = (typeof ApiAuthenticationType)[keyof typeof ApiAuthenticationType];

export const ApiEventLogLevel = {
    None: "NONE",
    Error: "ERROR",
    All: "ALL",
    Info: "INFO",
    Debug: "DEBUG",
} as const;

/**
 * Logging level for the AppSync API.
 */
export type ApiEventLogLevel = (typeof ApiEventLogLevel)[keyof typeof ApiEventLogLevel];

export const ChannelNamespaceAuthenticationType = {
    AmazonCognitoUserPools: "AMAZON_COGNITO_USER_POOLS",
    AwsIam: "AWS_IAM",
    ApiKey: "API_KEY",
    OpenidConnect: "OPENID_CONNECT",
    AwsLambda: "AWS_LAMBDA",
} as const;

/**
 * Security configuration for your AppSync API.
 */
export type ChannelNamespaceAuthenticationType = (typeof ChannelNamespaceAuthenticationType)[keyof typeof ChannelNamespaceAuthenticationType];

export const ChannelNamespaceHandlerBehavior = {
    Code: "CODE",
    Direct: "DIRECT",
} as const;

/**
 * Integration behavior for a handler configuration.
 */
export type ChannelNamespaceHandlerBehavior = (typeof ChannelNamespaceHandlerBehavior)[keyof typeof ChannelNamespaceHandlerBehavior];

export const ChannelNamespaceInvokeType = {
    RequestResponse: "REQUEST_RESPONSE",
    Event: "EVENT",
} as const;

/**
 * Invocation type for direct lambda integrations.
 */
export type ChannelNamespaceInvokeType = (typeof ChannelNamespaceInvokeType)[keyof typeof ChannelNamespaceInvokeType];

export const DataSourceMetricsConfig = {
    Disabled: "DISABLED",
    Enabled: "ENABLED",
} as const;

/**
 * Enables or disables enhanced data source metrics for specified data sources. Note that `MetricsConfig` won't be used unless the `dataSourceLevelMetricsBehavior` value is set to `PER_DATA_SOURCE_METRICS` . If the `dataSourceLevelMetricsBehavior` is set to `FULL_REQUEST_DATA_SOURCE_METRICS` instead, `MetricsConfig` will be ignored. However, you can still set its value.
 *
 * `MetricsConfig` can be `ENABLED` or `DISABLED` .
 */
export type DataSourceMetricsConfig = (typeof DataSourceMetricsConfig)[keyof typeof DataSourceMetricsConfig];

export const ResolverMetricsConfig = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Enables or disables enhanced resolver metrics for specified resolvers. Note that ``MetricsConfig`` won't be used unless the ``resolverLevelMetricsBehavior`` value is set to ``PER_RESOLVER_METRICS``. If the ``resolverLevelMetricsBehavior`` is set to ``FULL_REQUEST_RESOLVER_METRICS`` instead, ``MetricsConfig`` will be ignored. However, you can still set its value.
 */
export type ResolverMetricsConfig = (typeof ResolverMetricsConfig)[keyof typeof ResolverMetricsConfig];

export const SourceApiAssociationConfigMergeType = {
    AutoMerge: "AUTO_MERGE",
    ManualMerge: "MANUAL_MERGE",
} as const;

/**
 * Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
 */
export type SourceApiAssociationConfigMergeType = (typeof SourceApiAssociationConfigMergeType)[keyof typeof SourceApiAssociationConfigMergeType];

export const SourceApiAssociationStatus = {
    MergeScheduled: "MERGE_SCHEDULED",
    MergeFailed: "MERGE_FAILED",
    MergeSuccess: "MERGE_SUCCESS",
    MergeInProgress: "MERGE_IN_PROGRESS",
    AutoMergeScheduleFailed: "AUTO_MERGE_SCHEDULE_FAILED",
    DeletionScheduled: "DELETION_SCHEDULED",
    DeletionInProgress: "DELETION_IN_PROGRESS",
    DeletionFailed: "DELETION_FAILED",
} as const;

/**
 * Current status of SourceApiAssociation.
 */
export type SourceApiAssociationStatus = (typeof SourceApiAssociationStatus)[keyof typeof SourceApiAssociationStatus];
