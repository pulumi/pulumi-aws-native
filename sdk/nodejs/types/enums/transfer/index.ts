// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AgreementEnforceMessageSigning = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Specifies whether to enforce an AS2 message is signed for this agreement.
 */
export type AgreementEnforceMessageSigning = (typeof AgreementEnforceMessageSigning)[keyof typeof AgreementEnforceMessageSigning];

export const AgreementPreserveFilename = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Specifies whether to preserve the filename received for this agreement.
 */
export type AgreementPreserveFilename = (typeof AgreementPreserveFilename)[keyof typeof AgreementPreserveFilename];

export const AgreementStatus = {
    Active: "ACTIVE",
    Inactive: "INACTIVE",
} as const;

/**
 * Specifies the status of the agreement.
 */
export type AgreementStatus = (typeof AgreementStatus)[keyof typeof AgreementStatus];

export const CertificateStatus = {
    Active: "ACTIVE",
    Pending: "PENDING",
    Inactive: "INACTIVE",
} as const;

/**
 * A status description for the certificate.
 */
export type CertificateStatus = (typeof CertificateStatus)[keyof typeof CertificateStatus];

export const CertificateType = {
    Certificate: "CERTIFICATE",
    CertificateWithPrivateKey: "CERTIFICATE_WITH_PRIVATE_KEY",
} as const;

/**
 * Describing the type of certificate. With or without a private key.
 */
export type CertificateType = (typeof CertificateType)[keyof typeof CertificateType];

export const CertificateUsage = {
    Signing: "SIGNING",
    Encryption: "ENCRYPTION",
    Tls: "TLS",
} as const;

/**
 * Specifies the usage type for the certificate.
 */
export type CertificateUsage = (typeof CertificateUsage)[keyof typeof CertificateUsage];

export const ConnectorAs2ConfigPropertiesCompression = {
    Zlib: "ZLIB",
    Disabled: "DISABLED",
} as const;

/**
 * Compression setting for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesCompression = (typeof ConnectorAs2ConfigPropertiesCompression)[keyof typeof ConnectorAs2ConfigPropertiesCompression];

export const ConnectorAs2ConfigPropertiesEncryptionAlgorithm = {
    Aes128Cbc: "AES128_CBC",
    Aes192Cbc: "AES192_CBC",
    Aes256Cbc: "AES256_CBC",
    None: "NONE",
    DesEde3Cbc: "DES_EDE3_CBC",
} as const;

/**
 * Encryption algorithm for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesEncryptionAlgorithm = (typeof ConnectorAs2ConfigPropertiesEncryptionAlgorithm)[keyof typeof ConnectorAs2ConfigPropertiesEncryptionAlgorithm];

export const ConnectorAs2ConfigPropertiesMdnResponse = {
    Sync: "SYNC",
    None: "NONE",
} as const;

/**
 * MDN Response setting for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesMdnResponse = (typeof ConnectorAs2ConfigPropertiesMdnResponse)[keyof typeof ConnectorAs2ConfigPropertiesMdnResponse];

export const ConnectorAs2ConfigPropertiesMdnSigningAlgorithm = {
    Sha256: "SHA256",
    Sha384: "SHA384",
    Sha512: "SHA512",
    Sha1: "SHA1",
    None: "NONE",
    Default: "DEFAULT",
} as const;

/**
 * MDN Signing algorithm for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesMdnSigningAlgorithm = (typeof ConnectorAs2ConfigPropertiesMdnSigningAlgorithm)[keyof typeof ConnectorAs2ConfigPropertiesMdnSigningAlgorithm];

export const ConnectorAs2ConfigPropertiesPreserveContentType = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Specifies whether to use the AWS S3 object content-type as the content-type for the AS2 message.
 */
export type ConnectorAs2ConfigPropertiesPreserveContentType = (typeof ConnectorAs2ConfigPropertiesPreserveContentType)[keyof typeof ConnectorAs2ConfigPropertiesPreserveContentType];

export const ConnectorAs2ConfigPropertiesSigningAlgorithm = {
    Sha256: "SHA256",
    Sha384: "SHA384",
    Sha512: "SHA512",
    Sha1: "SHA1",
    None: "NONE",
} as const;

/**
 * Signing algorithm for this AS2 connector configuration.
 */
export type ConnectorAs2ConfigPropertiesSigningAlgorithm = (typeof ConnectorAs2ConfigPropertiesSigningAlgorithm)[keyof typeof ConnectorAs2ConfigPropertiesSigningAlgorithm];

export const ProfileType = {
    Local: "LOCAL",
    Partner: "PARTNER",
} as const;

/**
 * Enum specifying whether the profile is local or associated with a trading partner.
 */
export type ProfileType = (typeof ProfileType)[keyof typeof ProfileType];

export const ServerAs2Transport = {
    Http: "HTTP",
} as const;

export type ServerAs2Transport = (typeof ServerAs2Transport)[keyof typeof ServerAs2Transport];

export const ServerDirectoryListingOptimization = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Indicates whether optimization to directory listing on S3 servers is used. Disabled by default for compatibility.
 */
export type ServerDirectoryListingOptimization = (typeof ServerDirectoryListingOptimization)[keyof typeof ServerDirectoryListingOptimization];

export const ServerDomain = {
    S3: "S3",
    Efs: "EFS",
} as const;

export type ServerDomain = (typeof ServerDomain)[keyof typeof ServerDomain];

export const ServerEndpointType = {
    Public: "PUBLIC",
    Vpc: "VPC",
    VpcEndpoint: "VPC_ENDPOINT",
} as const;

export type ServerEndpointType = (typeof ServerEndpointType)[keyof typeof ServerEndpointType];

export const ServerIdentityProviderType = {
    ServiceManaged: "SERVICE_MANAGED",
    ApiGateway: "API_GATEWAY",
    AwsDirectoryService: "AWS_DIRECTORY_SERVICE",
    AwsLambda: "AWS_LAMBDA",
} as const;

export type ServerIdentityProviderType = (typeof ServerIdentityProviderType)[keyof typeof ServerIdentityProviderType];

export const ServerProtocol = {
    Sftp: "SFTP",
    Ftp: "FTP",
    Ftps: "FTPS",
    As2: "AS2",
} as const;

export type ServerProtocol = (typeof ServerProtocol)[keyof typeof ServerProtocol];

export const ServerSetStatOption = {
    Default: "DEFAULT",
    EnableNoOp: "ENABLE_NO_OP",
} as const;

export type ServerSetStatOption = (typeof ServerSetStatOption)[keyof typeof ServerSetStatOption];

export const ServerSftpAuthenticationMethods = {
    Password: "PASSWORD",
    PublicKey: "PUBLIC_KEY",
    PublicKeyOrPassword: "PUBLIC_KEY_OR_PASSWORD",
    PublicKeyAndPassword: "PUBLIC_KEY_AND_PASSWORD",
} as const;

export type ServerSftpAuthenticationMethods = (typeof ServerSftpAuthenticationMethods)[keyof typeof ServerSftpAuthenticationMethods];

export const ServerState = {
    Offline: "OFFLINE",
    Online: "ONLINE",
    Starting: "STARTING",
    Stopping: "STOPPING",
    StartFailed: "START_FAILED",
    StopFailed: "STOP_FAILED",
} as const;

export type ServerState = (typeof ServerState)[keyof typeof ServerState];

export const ServerTlsSessionResumptionMode = {
    Disabled: "DISABLED",
    Enabled: "ENABLED",
    Enforced: "ENFORCED",
} as const;

export type ServerTlsSessionResumptionMode = (typeof ServerTlsSessionResumptionMode)[keyof typeof ServerTlsSessionResumptionMode];

export const UserHomeDirectoryType = {
    Path: "PATH",
    Logical: "LOGICAL",
} as const;

export type UserHomeDirectoryType = (typeof UserHomeDirectoryType)[keyof typeof UserHomeDirectoryType];

export const UserMapType = {
    File: "FILE",
    Directory: "DIRECTORY",
} as const;

export type UserMapType = (typeof UserMapType)[keyof typeof UserMapType];

export const WebAppEndpointPolicy = {
    Standard: "STANDARD",
    Fips: "FIPS",
} as const;

export type WebAppEndpointPolicy = (typeof WebAppEndpointPolicy)[keyof typeof WebAppEndpointPolicy];

export const WorkflowStepCopyStepDetailsPropertiesOverwriteExisting = {
    True: "TRUE",
    False: "FALSE",
} as const;

/**
 * A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
 */
export type WorkflowStepCopyStepDetailsPropertiesOverwriteExisting = (typeof WorkflowStepCopyStepDetailsPropertiesOverwriteExisting)[keyof typeof WorkflowStepCopyStepDetailsPropertiesOverwriteExisting];

export const WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting = {
    True: "TRUE",
    False: "FALSE",
} as const;

/**
 * A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
 */
export type WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting = (typeof WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting)[keyof typeof WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting];

export const WorkflowStepDecryptStepDetailsPropertiesType = {
    Pgp: "PGP",
} as const;

/**
 * Specifies which encryption method to use.
 */
export type WorkflowStepDecryptStepDetailsPropertiesType = (typeof WorkflowStepDecryptStepDetailsPropertiesType)[keyof typeof WorkflowStepDecryptStepDetailsPropertiesType];

export const WorkflowStepType = {
    Copy: "COPY",
    Custom: "CUSTOM",
    Decrypt: "DECRYPT",
    Delete: "DELETE",
    Tag: "TAG",
} as const;

export type WorkflowStepType = (typeof WorkflowStepType)[keyof typeof WorkflowStepType];
