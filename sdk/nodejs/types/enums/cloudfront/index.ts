// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const ContinuousDeploymentPolicyConfigType = {
    SingleWeight: "SingleWeight",
    SingleHeader: "SingleHeader",
} as const;

/**
 * The type of traffic configuration.
 */
export type ContinuousDeploymentPolicyConfigType = (typeof ContinuousDeploymentPolicyConfigType)[keyof typeof ContinuousDeploymentPolicyConfigType];

export const ContinuousDeploymentPolicyTrafficConfigType = {
    SingleWeight: "SingleWeight",
    SingleHeader: "SingleHeader",
} as const;

/**
 * The type of traffic configuration.
 */
export type ContinuousDeploymentPolicyTrafficConfigType = (typeof ContinuousDeploymentPolicyTrafficConfigType)[keyof typeof ContinuousDeploymentPolicyTrafficConfigType];

export const DistributionConnectionMode = {
    Direct: "direct",
    TenantOnly: "tenant-only",
} as const;

export type DistributionConnectionMode = (typeof DistributionConnectionMode)[keyof typeof DistributionConnectionMode];

export const DistributionCustomOriginConfigIpAddressType = {
    Ipv4: "ipv4",
    Ipv6: "ipv6",
    Dualstack: "dualstack",
} as const;

/**
 * Specifies which IP protocol CloudFront uses when connecting to your origin. If your origin uses both IPv4 and IPv6 protocols, you can choose `dualstack` to help optimize reliability.
 */
export type DistributionCustomOriginConfigIpAddressType = (typeof DistributionCustomOriginConfigIpAddressType)[keyof typeof DistributionCustomOriginConfigIpAddressType];

export const DistributionOriginGroupSelectionCriteria = {
    Default: "default",
    MediaQualityBased: "media-quality-based",
} as const;

export type DistributionOriginGroupSelectionCriteria = (typeof DistributionOriginGroupSelectionCriteria)[keyof typeof DistributionOriginGroupSelectionCriteria];

export const DistributionTenantDomainResultStatus = {
    Active: "active",
    Inactive: "inactive",
} as const;

/**
 * Whether the domain is active or inactive.
 */
export type DistributionTenantDomainResultStatus = (typeof DistributionTenantDomainResultStatus)[keyof typeof DistributionTenantDomainResultStatus];

export const DistributionTenantGeoRestrictionCustomizationRestrictionType = {
    Blacklist: "blacklist",
    Whitelist: "whitelist",
    None: "none",
} as const;

/**
 * The method that you want to use to restrict distribution of your content by country:
 *   +  ``none``: No geographic restriction is enabled, meaning access to content is not restricted by client geo location.
 *   +  ``blacklist``: The ``Location`` elements specify the countries in which you don't want CloudFront to distribute your content.
 *   +  ``whitelist``: The ``Location`` elements specify the countries in which you want CloudFront to distribute your content.
 */
export type DistributionTenantGeoRestrictionCustomizationRestrictionType = (typeof DistributionTenantGeoRestrictionCustomizationRestrictionType)[keyof typeof DistributionTenantGeoRestrictionCustomizationRestrictionType];

export const DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference = {
    Enabled: "enabled",
    Disabled: "disabled",
} as const;

/**
 * You can opt out of certificate transparency logging by specifying the ``disabled`` option. Opt in by specifying ``enabled``. For more information, see [Certificate Transparency Logging](https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency) in the *User Guide*.
 */
export type DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference = (typeof DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference)[keyof typeof DistributionTenantManagedCertificateRequestCertificateTransparencyLoggingPreference];

export const DistributionTenantManagedCertificateRequestValidationTokenHost = {
    Cloudfront: "cloudfront",
    SelfHosted: "self-hosted",
} as const;

/**
 * Specify how the HTTP validation token will be served when requesting the CloudFront managed ACM certificate.
 *   +  For ``cloudfront``, CloudFront will automatically serve the validation token. Choose this mode if you can point the domain's DNS to CloudFront immediately.
 *   +  For ``self-hosted``, you serve the validation token from your existing infrastructure. Choose this mode when you need to maintain current traffic flow while your certificate is being issued. You can place the validation token at the well-known path on your existing web server, wait for ACM to validate and issue the certificate, and then update your DNS to point to CloudFront.
 */
export type DistributionTenantManagedCertificateRequestValidationTokenHost = (typeof DistributionTenantManagedCertificateRequestValidationTokenHost)[keyof typeof DistributionTenantManagedCertificateRequestValidationTokenHost];

export const DistributionTenantWebAclCustomizationAction = {
    Override: "override",
    Disable: "disable",
} as const;

/**
 * The action for the WAF web ACL customization. You can specify ``override`` to specify a separate WAF web ACL for the distribution tenant. If you specify ``disable``, the distribution tenant won't have WAF web ACL protections and won't inherit from the multi-tenant distribution.
 */
export type DistributionTenantWebAclCustomizationAction = (typeof DistributionTenantWebAclCustomizationAction)[keyof typeof DistributionTenantWebAclCustomizationAction];

export const MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus = {
    Enabled: "Enabled",
    Disabled: "Disabled",
} as const;

/**
 * A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
 */
export type MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus = (typeof MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus)[keyof typeof MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus];
