// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AliasRoutingStrategyType = {
    Simple: "SIMPLE",
    Terminal: "TERMINAL",
} as const;

/**
 * Simple routing strategy. The alias resolves to one specific fleet. Use this type when routing to active fleets.
 */
export type AliasRoutingStrategyType = (typeof AliasRoutingStrategyType)[keyof typeof AliasRoutingStrategyType];

export const BuildOperatingSystem = {
    AmazonLinux: "AMAZON_LINUX",
    AmazonLinux2: "AMAZON_LINUX_2",
    AmazonLinux2023: "AMAZON_LINUX_2023",
    Windows2012: "WINDOWS_2012",
    Windows2016: "WINDOWS_2016",
} as const;

/**
 * The operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system. If an operating system is not specified when creating a build, Amazon GameLift uses the default value (WINDOWS_2012). This value cannot be changed later.
 */
export type BuildOperatingSystem = (typeof BuildOperatingSystem)[keyof typeof BuildOperatingSystem];

export const ContainerFleetBillingType = {
    OnDemand: "ON_DEMAND",
    Spot: "SPOT",
} as const;

/**
 * Indicates whether to use On-Demand instances or Spot instances for this fleet. If empty, the default is ON_DEMAND. Both categories of instances use identical hardware and configurations based on the instance type selected for this fleet.
 */
export type ContainerFleetBillingType = (typeof ContainerFleetBillingType)[keyof typeof ContainerFleetBillingType];

export const ContainerFleetDeploymentConfigurationImpairmentStrategy = {
    Maintain: "MAINTAIN",
    Rollback: "ROLLBACK",
} as const;

/**
 * The strategy to apply in case of impairment; defaults to MAINTAIN.
 */
export type ContainerFleetDeploymentConfigurationImpairmentStrategy = (typeof ContainerFleetDeploymentConfigurationImpairmentStrategy)[keyof typeof ContainerFleetDeploymentConfigurationImpairmentStrategy];

export const ContainerFleetDeploymentConfigurationProtectionStrategy = {
    WithProtection: "WITH_PROTECTION",
    IgnoreProtection: "IGNORE_PROTECTION",
} as const;

/**
 * The protection strategy for deployment on the container fleet; defaults to WITH_PROTECTION.
 */
export type ContainerFleetDeploymentConfigurationProtectionStrategy = (typeof ContainerFleetDeploymentConfigurationProtectionStrategy)[keyof typeof ContainerFleetDeploymentConfigurationProtectionStrategy];

export const ContainerFleetIpPermissionProtocol = {
    Tcp: "TCP",
    Udp: "UDP",
} as const;

/**
 * The network communication protocol used by the fleet.
 */
export type ContainerFleetIpPermissionProtocol = (typeof ContainerFleetIpPermissionProtocol)[keyof typeof ContainerFleetIpPermissionProtocol];

export const ContainerFleetLogDestination = {
    None: "NONE",
    Cloudwatch: "CLOUDWATCH",
    S3: "S3",
} as const;

/**
 * Configures the service that provides logs.
 */
export type ContainerFleetLogDestination = (typeof ContainerFleetLogDestination)[keyof typeof ContainerFleetLogDestination];

export const ContainerFleetNewGameSessionProtectionPolicy = {
    FullProtection: "FullProtection",
    NoProtection: "NoProtection",
} as const;

/**
 * A game session protection policy to apply to all game sessions hosted on instances in this fleet. When protected, active game sessions cannot be terminated during a scale-down event. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy to affect future game sessions on the fleet. You can also set protection for individual game sessions.
 */
export type ContainerFleetNewGameSessionProtectionPolicy = (typeof ContainerFleetNewGameSessionProtectionPolicy)[keyof typeof ContainerFleetNewGameSessionProtectionPolicy];

export const ContainerFleetScalingPolicyComparisonOperator = {
    GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
    GreaterThanThreshold: "GreaterThanThreshold",
    LessThanThreshold: "LessThanThreshold",
    LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
} as const;

/**
 * Comparison operator to use when measuring a metric against the threshold value.
 */
export type ContainerFleetScalingPolicyComparisonOperator = (typeof ContainerFleetScalingPolicyComparisonOperator)[keyof typeof ContainerFleetScalingPolicyComparisonOperator];

export const ContainerFleetScalingPolicyMetricName = {
    ActivatingGameSessions: "ActivatingGameSessions",
    ActiveGameSessions: "ActiveGameSessions",
    ActiveInstances: "ActiveInstances",
    AvailableGameSessions: "AvailableGameSessions",
    AvailablePlayerSessions: "AvailablePlayerSessions",
    CurrentPlayerSessions: "CurrentPlayerSessions",
    IdleInstances: "IdleInstances",
    PercentAvailableGameSessions: "PercentAvailableGameSessions",
    PercentIdleInstances: "PercentIdleInstances",
    QueueDepth: "QueueDepth",
    WaitTime: "WaitTime",
    ConcurrentActivatableGameSessions: "ConcurrentActivatableGameSessions",
} as const;

/**
 * Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment.
 */
export type ContainerFleetScalingPolicyMetricName = (typeof ContainerFleetScalingPolicyMetricName)[keyof typeof ContainerFleetScalingPolicyMetricName];

export const ContainerFleetScalingPolicyPolicyType = {
    RuleBased: "RuleBased",
    TargetBased: "TargetBased",
} as const;

/**
 * The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
 */
export type ContainerFleetScalingPolicyPolicyType = (typeof ContainerFleetScalingPolicyPolicyType)[keyof typeof ContainerFleetScalingPolicyPolicyType];

export const ContainerFleetScalingPolicyScalingAdjustmentType = {
    ChangeInCapacity: "ChangeInCapacity",
    ExactCapacity: "ExactCapacity",
    PercentChangeInCapacity: "PercentChangeInCapacity",
} as const;

/**
 * The type of adjustment to make to a fleet's instance count.
 */
export type ContainerFleetScalingPolicyScalingAdjustmentType = (typeof ContainerFleetScalingPolicyScalingAdjustmentType)[keyof typeof ContainerFleetScalingPolicyScalingAdjustmentType];

export const ContainerFleetStatus = {
    Pending: "PENDING",
    Creating: "CREATING",
    Created: "CREATED",
    Activating: "ACTIVATING",
    Active: "ACTIVE",
    Updating: "UPDATING",
    Deleting: "DELETING",
} as const;

/**
 * The current status of the container fleet.
 */
export type ContainerFleetStatus = (typeof ContainerFleetStatus)[keyof typeof ContainerFleetStatus];

export const ContainerFleetStoppedActionsItem = {
    AutoScaling: "AUTO_SCALING",
} as const;

export type ContainerFleetStoppedActionsItem = (typeof ContainerFleetStoppedActionsItem)[keyof typeof ContainerFleetStoppedActionsItem];

export const ContainerGroupDefinitionContainerDependencyCondition = {
    Start: "START",
    Complete: "COMPLETE",
    Success: "SUCCESS",
    Healthy: "HEALTHY",
} as const;

/**
 * The type of dependency.
 */
export type ContainerGroupDefinitionContainerDependencyCondition = (typeof ContainerGroupDefinitionContainerDependencyCondition)[keyof typeof ContainerGroupDefinitionContainerDependencyCondition];

export const ContainerGroupDefinitionContainerGroupType = {
    GameServer: "GAME_SERVER",
    PerInstance: "PER_INSTANCE",
} as const;

/**
 * The scope of the container group
 */
export type ContainerGroupDefinitionContainerGroupType = (typeof ContainerGroupDefinitionContainerGroupType)[keyof typeof ContainerGroupDefinitionContainerGroupType];

export const ContainerGroupDefinitionContainerMountPointAccessLevel = {
    ReadOnly: "READ_ONLY",
    ReadAndWrite: "READ_AND_WRITE",
} as const;

/**
 * The access permissions for the mounted path.
 */
export type ContainerGroupDefinitionContainerMountPointAccessLevel = (typeof ContainerGroupDefinitionContainerMountPointAccessLevel)[keyof typeof ContainerGroupDefinitionContainerMountPointAccessLevel];

export const ContainerGroupDefinitionContainerPortRangeProtocol = {
    Tcp: "TCP",
    Udp: "UDP",
} as const;

/**
 * Defines the protocol of these ports.
 */
export type ContainerGroupDefinitionContainerPortRangeProtocol = (typeof ContainerGroupDefinitionContainerPortRangeProtocol)[keyof typeof ContainerGroupDefinitionContainerPortRangeProtocol];

export const ContainerGroupDefinitionOperatingSystem = {
    AmazonLinux2023: "AMAZON_LINUX_2023",
} as const;

/**
 * The operating system of the container group
 */
export type ContainerGroupDefinitionOperatingSystem = (typeof ContainerGroupDefinitionOperatingSystem)[keyof typeof ContainerGroupDefinitionOperatingSystem];

export const ContainerGroupDefinitionStatus = {
    Ready: "READY",
    Copying: "COPYING",
    Failed: "FAILED",
} as const;

/**
 * A string indicating ContainerGroupDefinition status.
 */
export type ContainerGroupDefinitionStatus = (typeof ContainerGroupDefinitionStatus)[keyof typeof ContainerGroupDefinitionStatus];

export const FleetApplyCapacity = {
    OnUpdate: "ON_UPDATE",
    OnCreateAndUpdate: "ON_CREATE_AND_UPDATE",
    OnCreateAndUpdateWithAutoscaling: "ON_CREATE_AND_UPDATE_WITH_AUTOSCALING",
} as const;

/**
 * Determines when and how to apply fleet or location capacities. If you choose ON_CREATE_AND_UPDATE_WITH_AUTOSCALING, MinSize and MaxSize will still be applied on creation and on updates, but DesiredEC2Instances will only be applied once on fleet creation and will be ignored during updates to prevent conflicts with auto-scaling.
 */
export type FleetApplyCapacity = (typeof FleetApplyCapacity)[keyof typeof FleetApplyCapacity];

export const FleetCertificateConfigurationCertificateType = {
    Disabled: "DISABLED",
    Generated: "GENERATED",
} as const;

/**
 * Indicates whether a TLS/SSL certificate is generated for a fleet.
 *
 * Valid values include:
 *
 * - *GENERATED* - Generate a TLS/SSL certificate for this fleet.
 * - *DISABLED* - (default) Do not generate a TLS/SSL certificate for this fleet.
 */
export type FleetCertificateConfigurationCertificateType = (typeof FleetCertificateConfigurationCertificateType)[keyof typeof FleetCertificateConfigurationCertificateType];

export const FleetComputeType = {
    Ec2: "EC2",
    Anywhere: "ANYWHERE",
} as const;

/**
 * ComputeType to differentiate EC2 hardware managed by GameLift and Anywhere hardware managed by the customer.
 */
export type FleetComputeType = (typeof FleetComputeType)[keyof typeof FleetComputeType];

export const FleetInstanceRoleCredentialsProvider = {
    SharedCredentialFile: "SHARED_CREDENTIAL_FILE",
} as const;

/**
 * Credentials provider implementation that loads credentials from the Amazon EC2 Instance Metadata Service.
 */
export type FleetInstanceRoleCredentialsProvider = (typeof FleetInstanceRoleCredentialsProvider)[keyof typeof FleetInstanceRoleCredentialsProvider];

export const FleetIpPermissionProtocol = {
    Tcp: "TCP",
    Udp: "UDP",
} as const;

/**
 * The network communication protocol used by the fleet.
 */
export type FleetIpPermissionProtocol = (typeof FleetIpPermissionProtocol)[keyof typeof FleetIpPermissionProtocol];

export const FleetNewGameSessionProtectionPolicy = {
    FullProtection: "FullProtection",
    NoProtection: "NoProtection",
} as const;

/**
 * A game session protection policy to apply to all game sessions hosted on instances in this fleet. When protected, active game sessions cannot be terminated during a scale-down event. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy to affect future game sessions on the fleet. You can also set protection for individual game sessions.
 */
export type FleetNewGameSessionProtectionPolicy = (typeof FleetNewGameSessionProtectionPolicy)[keyof typeof FleetNewGameSessionProtectionPolicy];

export const FleetScalingPolicyComparisonOperator = {
    GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
    GreaterThanThreshold: "GreaterThanThreshold",
    LessThanThreshold: "LessThanThreshold",
    LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
} as const;

/**
 * Comparison operator to use when measuring a metric against the threshold value.
 */
export type FleetScalingPolicyComparisonOperator = (typeof FleetScalingPolicyComparisonOperator)[keyof typeof FleetScalingPolicyComparisonOperator];

export const FleetScalingPolicyMetricName = {
    ActivatingGameSessions: "ActivatingGameSessions",
    ActiveGameSessions: "ActiveGameSessions",
    ActiveInstances: "ActiveInstances",
    AvailableGameSessions: "AvailableGameSessions",
    AvailablePlayerSessions: "AvailablePlayerSessions",
    CurrentPlayerSessions: "CurrentPlayerSessions",
    IdleInstances: "IdleInstances",
    PercentAvailableGameSessions: "PercentAvailableGameSessions",
    PercentIdleInstances: "PercentIdleInstances",
    QueueDepth: "QueueDepth",
    WaitTime: "WaitTime",
    ConcurrentActivatableGameSessions: "ConcurrentActivatableGameSessions",
} as const;

/**
 * Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment.
 */
export type FleetScalingPolicyMetricName = (typeof FleetScalingPolicyMetricName)[keyof typeof FleetScalingPolicyMetricName];

export const FleetScalingPolicyPolicyType = {
    RuleBased: "RuleBased",
    TargetBased: "TargetBased",
} as const;

/**
 * The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
 */
export type FleetScalingPolicyPolicyType = (typeof FleetScalingPolicyPolicyType)[keyof typeof FleetScalingPolicyPolicyType];

export const FleetScalingPolicyScalingAdjustmentType = {
    ChangeInCapacity: "ChangeInCapacity",
    ExactCapacity: "ExactCapacity",
    PercentChangeInCapacity: "PercentChangeInCapacity",
} as const;

/**
 * The type of adjustment to make to a fleet's instance count.
 */
export type FleetScalingPolicyScalingAdjustmentType = (typeof FleetScalingPolicyScalingAdjustmentType)[keyof typeof FleetScalingPolicyScalingAdjustmentType];

export const FleetScalingPolicyStatus = {
    Active: "ACTIVE",
    UpdateRequested: "UPDATE_REQUESTED",
    Updating: "UPDATING",
    DeleteRequested: "DELETE_REQUESTED",
    Deleting: "DELETING",
    Deleted: "DELETED",
    Error: "ERROR",
} as const;

/**
 * Current status of the scaling policy. The scaling policy can be in force only when in an ACTIVE status. Scaling policies can be suspended for individual fleets. If the policy is suspended for a fleet, the policy status does not change.
 */
export type FleetScalingPolicyStatus = (typeof FleetScalingPolicyStatus)[keyof typeof FleetScalingPolicyStatus];

export const FleetScalingPolicyUpdateStatus = {
    PendingUpdate: "PENDING_UPDATE",
} as const;

/**
 * The current status of the fleet's scaling policies in a requested fleet location. The status PENDING_UPDATE indicates that an update was requested for the fleet but has not yet been completed for the location.
 */
export type FleetScalingPolicyUpdateStatus = (typeof FleetScalingPolicyUpdateStatus)[keyof typeof FleetScalingPolicyUpdateStatus];

export const FleetType = {
    OnDemand: "ON_DEMAND",
    Spot: "SPOT",
} as const;

/**
 * Indicates whether to use On-Demand instances or Spot instances for this fleet. If empty, the default is ON_DEMAND. Both categories of instances use identical hardware and configurations based on the instance type selected for this fleet.
 */
export type FleetType = (typeof FleetType)[keyof typeof FleetType];

export const GameServerGroupBalancingStrategy = {
    SpotOnly: "SPOT_ONLY",
    SpotPreferred: "SPOT_PREFERRED",
    OnDemandOnly: "ON_DEMAND_ONLY",
} as const;

/**
 * The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.
 */
export type GameServerGroupBalancingStrategy = (typeof GameServerGroupBalancingStrategy)[keyof typeof GameServerGroupBalancingStrategy];

export const GameServerGroupDeleteOption = {
    SafeDelete: "SAFE_DELETE",
    ForceDelete: "FORCE_DELETE",
    Retain: "RETAIN",
} as const;

/**
 * The type of delete to perform.
 */
export type GameServerGroupDeleteOption = (typeof GameServerGroupDeleteOption)[keyof typeof GameServerGroupDeleteOption];

export const GameServerGroupGameServerProtectionPolicy = {
    NoProtection: "NO_PROTECTION",
    FullProtection: "FULL_PROTECTION",
} as const;

/**
 * A flag that indicates whether instances in the game server group are protected from early termination.
 */
export type GameServerGroupGameServerProtectionPolicy = (typeof GameServerGroupGameServerProtectionPolicy)[keyof typeof GameServerGroupGameServerProtectionPolicy];

export const GameSessionQueuePriorityOrderItem = {
    Latency: "LATENCY",
    Cost: "COST",
    Destination: "DESTINATION",
    Location: "LOCATION",
} as const;

export type GameSessionQueuePriorityOrderItem = (typeof GameSessionQueuePriorityOrderItem)[keyof typeof GameSessionQueuePriorityOrderItem];

export const MatchmakingConfigurationBackfillMode = {
    Automatic: "AUTOMATIC",
    Manual: "MANUAL",
} as const;

/**
 * The method used to backfill game sessions created with this matchmaking configuration.
 */
export type MatchmakingConfigurationBackfillMode = (typeof MatchmakingConfigurationBackfillMode)[keyof typeof MatchmakingConfigurationBackfillMode];

export const MatchmakingConfigurationFlexMatchMode = {
    Standalone: "STANDALONE",
    WithQueue: "WITH_QUEUE",
} as const;

/**
 * Indicates whether this matchmaking configuration is being used with Amazon GameLift hosting or as a standalone matchmaking solution.
 */
export type MatchmakingConfigurationFlexMatchMode = (typeof MatchmakingConfigurationFlexMatchMode)[keyof typeof MatchmakingConfigurationFlexMatchMode];
