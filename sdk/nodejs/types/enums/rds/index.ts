// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const DBClusterEngine = {
    Aurora: "aurora",
    AuroraMysql: "aurora-mysql",
    AuroraPostgresql: "aurora-postgresql",
    Mysql: "mysql",
    Postgres: "postgres",
} as const;

/**
 * The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql
 */
export type DBClusterEngine = (typeof DBClusterEngine)[keyof typeof DBClusterEngine];

export const DBClusterEngineMode = {
    Provisioned: "provisioned",
    Serverless: "serverless",
    Parallelquery: "parallelquery",
    Global: "global",
    Multimaster: "multimaster",
} as const;

/**
 * The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery, global, or multimaster.
 */
export type DBClusterEngineMode = (typeof DBClusterEngineMode)[keyof typeof DBClusterEngineMode];

export const DBClusterRestoreType = {
    FullCopy: "full-copy",
    CopyOnWrite: "copy-on-write",
} as const;

/**
 * The type of restore to be performed. You can specify one of the following values:
 * full-copy - The new DB cluster is restored as a full copy of the source DB cluster.
 * copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.
 */
export type DBClusterRestoreType = (typeof DBClusterRestoreType)[keyof typeof DBClusterRestoreType];

export const DBClusterStorageType = {
    Io1: "io1",
} as const;

/**
 * Specifies the storage type to be associated with the DB cluster.
 */
export type DBClusterStorageType = (typeof DBClusterStorageType)[keyof typeof DBClusterStorageType];

export const DBProxyAuthFormatAuthScheme = {
    Secrets: "SECRETS",
} as const;

/**
 * The type of authentication that the proxy uses for connections from the proxy to the underlying database. 
 */
export type DBProxyAuthFormatAuthScheme = (typeof DBProxyAuthFormatAuthScheme)[keyof typeof DBProxyAuthFormatAuthScheme];

export const DBProxyAuthFormatIAMAuth = {
    Disabled: "DISABLED",
    Required: "REQUIRED",
} as const;

/**
 * Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. 
 */
export type DBProxyAuthFormatIAMAuth = (typeof DBProxyAuthFormatIAMAuth)[keyof typeof DBProxyAuthFormatIAMAuth];

export const DBProxyEndpointTargetRole = {
    ReadWrite: "READ_WRITE",
    ReadOnly: "READ_ONLY",
} as const;

/**
 * A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.
 */
export type DBProxyEndpointTargetRole = (typeof DBProxyEndpointTargetRole)[keyof typeof DBProxyEndpointTargetRole];

export const DBProxyEngineFamily = {
    Mysql: "MYSQL",
    Postgresql: "POSTGRESQL",
} as const;

/**
 * The kinds of databases that the proxy can connect to.
 */
export type DBProxyEngineFamily = (typeof DBProxyEngineFamily)[keyof typeof DBProxyEngineFamily];

export const DBProxyTargetGroupTargetGroupName = {
    Default: "default",
} as const;

/**
 * The identifier for the DBProxyTargetGroup
 */
export type DBProxyTargetGroupTargetGroupName = (typeof DBProxyTargetGroupTargetGroupName)[keyof typeof DBProxyTargetGroupTargetGroupName];

export const EventSubscriptionSourceType = {
    CustomEngineVersion: "custom-engine-version",
    DbCluster: "db-cluster",
    DbClusterSnapshot: "db-cluster-snapshot",
    DbInstance: "db-instance",
    DbProxy: "db-proxy",
    DbParameterGroup: "db-parameter-group",
    DbSecurityGroup: "db-security-group",
    DbSnapshot: "db-snapshot",
} as const;

/**
 * The type of source that will be generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.
 */
export type EventSubscriptionSourceType = (typeof EventSubscriptionSourceType)[keyof typeof EventSubscriptionSourceType];

export const GlobalClusterEngine = {
    Aurora: "aurora",
    AuroraMysql: "aurora-mysql",
    AuroraPostgresql: "aurora-postgresql",
} as const;

/**
 * The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora).
 * If you specify the SourceDBClusterIdentifier property, don't specify this property. The value is inherited from the cluster.
 */
export type GlobalClusterEngine = (typeof GlobalClusterEngine)[keyof typeof GlobalClusterEngine];
