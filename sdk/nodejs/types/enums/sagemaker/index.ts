// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AppResourceSpecInstanceType = {
    System: "system",
    MlT3Micro: "ml.t3.micro",
    MlT3Small: "ml.t3.small",
    MlT3Medium: "ml.t3.medium",
    MlT3Large: "ml.t3.large",
    MlT3Xlarge: "ml.t3.xlarge",
    MlT32xlarge: "ml.t3.2xlarge",
    MlM5Large: "ml.m5.large",
    MlM5Xlarge: "ml.m5.xlarge",
    MlM52xlarge: "ml.m5.2xlarge",
    MlM54xlarge: "ml.m5.4xlarge",
    MlM58xlarge: "ml.m5.8xlarge",
    MlM512xlarge: "ml.m5.12xlarge",
    MlM516xlarge: "ml.m5.16xlarge",
    MlM524xlarge: "ml.m5.24xlarge",
    MlM5dLarge: "ml.m5d.large",
    MlM5dXlarge: "ml.m5d.xlarge",
    MlM5d2xlarge: "ml.m5d.2xlarge",
    MlM5d4xlarge: "ml.m5d.4xlarge",
    MlM5d8xlarge: "ml.m5d.8xlarge",
    MlM5d12xlarge: "ml.m5d.12xlarge",
    MlM5d16xlarge: "ml.m5d.16xlarge",
    MlM5d24xlarge: "ml.m5d.24xlarge",
    MlC5Large: "ml.c5.large",
    MlC5Xlarge: "ml.c5.xlarge",
    MlC52xlarge: "ml.c5.2xlarge",
    MlC54xlarge: "ml.c5.4xlarge",
    MlC59xlarge: "ml.c5.9xlarge",
    MlC512xlarge: "ml.c5.12xlarge",
    MlC518xlarge: "ml.c5.18xlarge",
    MlC524xlarge: "ml.c5.24xlarge",
    MlP32xlarge: "ml.p3.2xlarge",
    MlP38xlarge: "ml.p3.8xlarge",
    MlP316xlarge: "ml.p3.16xlarge",
    MlP3dn24xlarge: "ml.p3dn.24xlarge",
    MlG4dnXlarge: "ml.g4dn.xlarge",
    MlG4dn2xlarge: "ml.g4dn.2xlarge",
    MlG4dn4xlarge: "ml.g4dn.4xlarge",
    MlG4dn8xlarge: "ml.g4dn.8xlarge",
    MlG4dn12xlarge: "ml.g4dn.12xlarge",
    MlG4dn16xlarge: "ml.g4dn.16xlarge",
    MlR5Large: "ml.r5.large",
    MlR5Xlarge: "ml.r5.xlarge",
    MlR52xlarge: "ml.r5.2xlarge",
    MlR54xlarge: "ml.r5.4xlarge",
    MlR58xlarge: "ml.r5.8xlarge",
    MlR512xlarge: "ml.r5.12xlarge",
    MlR516xlarge: "ml.r5.16xlarge",
    MlR524xlarge: "ml.r5.24xlarge",
    MlG5Xlarge: "ml.g5.xlarge",
    MlG52xlarge: "ml.g5.2xlarge",
    MlG54xlarge: "ml.g5.4xlarge",
    MlG58xlarge: "ml.g5.8xlarge",
    MlG512xlarge: "ml.g5.12xlarge",
    MlG516xlarge: "ml.g5.16xlarge",
    MlG524xlarge: "ml.g5.24xlarge",
    MlG548xlarge: "ml.g5.48xlarge",
    MlG6Xlarge: "ml.g6.xlarge",
    MlG62xlarge: "ml.g6.2xlarge",
    MlG64xlarge: "ml.g6.4xlarge",
    MlG68xlarge: "ml.g6.8xlarge",
    MlG612xlarge: "ml.g6.12xlarge",
    MlG616xlarge: "ml.g6.16xlarge",
    MlG624xlarge: "ml.g6.24xlarge",
    MlG648xlarge: "ml.g6.48xlarge",
    MlG6eXlarge: "ml.g6e.xlarge",
    MlG6e2xlarge: "ml.g6e.2xlarge",
    MlG6e4xlarge: "ml.g6e.4xlarge",
    MlG6e8xlarge: "ml.g6e.8xlarge",
    MlG6e12xlarge: "ml.g6e.12xlarge",
    MlG6e16xlarge: "ml.g6e.16xlarge",
    MlG6e24xlarge: "ml.g6e.24xlarge",
    MlG6e48xlarge: "ml.g6e.48xlarge",
    MlGeospatialInteractive: "ml.geospatial.interactive",
    MlP4d24xlarge: "ml.p4d.24xlarge",
    MlP4de24xlarge: "ml.p4de.24xlarge",
    MlTrn12xlarge: "ml.trn1.2xlarge",
    MlTrn132xlarge: "ml.trn1.32xlarge",
    MlTrn1n32xlarge: "ml.trn1n.32xlarge",
    MlP548xlarge: "ml.p5.48xlarge",
    MlP5e48xlarge: "ml.p5e.48xlarge",
    MlP5en48xlarge: "ml.p5en.48xlarge",
    MlM6iLarge: "ml.m6i.large",
    MlM6iXlarge: "ml.m6i.xlarge",
    MlM6i2xlarge: "ml.m6i.2xlarge",
    MlM6i4xlarge: "ml.m6i.4xlarge",
    MlM6i8xlarge: "ml.m6i.8xlarge",
    MlM6i12xlarge: "ml.m6i.12xlarge",
    MlM6i16xlarge: "ml.m6i.16xlarge",
    MlM6i24xlarge: "ml.m6i.24xlarge",
    MlM6i32xlarge: "ml.m6i.32xlarge",
    MlM7iLarge: "ml.m7i.large",
    MlM7iXlarge: "ml.m7i.xlarge",
    MlM7i2xlarge: "ml.m7i.2xlarge",
    MlM7i4xlarge: "ml.m7i.4xlarge",
    MlM7i8xlarge: "ml.m7i.8xlarge",
    MlM7i12xlarge: "ml.m7i.12xlarge",
    MlM7i16xlarge: "ml.m7i.16xlarge",
    MlM7i24xlarge: "ml.m7i.24xlarge",
    MlM7i48xlarge: "ml.m7i.48xlarge",
    MlC6iLarge: "ml.c6i.large",
    MlC6iXlarge: "ml.c6i.xlarge",
    MlC6i2xlarge: "ml.c6i.2xlarge",
    MlC6i4xlarge: "ml.c6i.4xlarge",
    MlC6i8xlarge: "ml.c6i.8xlarge",
    MlC6i12xlarge: "ml.c6i.12xlarge",
    MlC6i16xlarge: "ml.c6i.16xlarge",
    MlC6i24xlarge: "ml.c6i.24xlarge",
    MlC6i32xlarge: "ml.c6i.32xlarge",
    MlC7iLarge: "ml.c7i.large",
    MlC7iXlarge: "ml.c7i.xlarge",
    MlC7i2xlarge: "ml.c7i.2xlarge",
    MlC7i4xlarge: "ml.c7i.4xlarge",
    MlC7i8xlarge: "ml.c7i.8xlarge",
    MlC7i12xlarge: "ml.c7i.12xlarge",
    MlC7i16xlarge: "ml.c7i.16xlarge",
    MlC7i24xlarge: "ml.c7i.24xlarge",
    MlC7i48xlarge: "ml.c7i.48xlarge",
    MlR6iLarge: "ml.r6i.large",
    MlR6iXlarge: "ml.r6i.xlarge",
    MlR6i2xlarge: "ml.r6i.2xlarge",
    MlR6i4xlarge: "ml.r6i.4xlarge",
    MlR6i8xlarge: "ml.r6i.8xlarge",
    MlR6i12xlarge: "ml.r6i.12xlarge",
    MlR6i16xlarge: "ml.r6i.16xlarge",
    MlR6i24xlarge: "ml.r6i.24xlarge",
    MlR6i32xlarge: "ml.r6i.32xlarge",
    MlR7iLarge: "ml.r7i.large",
    MlR7iXlarge: "ml.r7i.xlarge",
    MlR7i2xlarge: "ml.r7i.2xlarge",
    MlR7i4xlarge: "ml.r7i.4xlarge",
    MlR7i8xlarge: "ml.r7i.8xlarge",
    MlR7i12xlarge: "ml.r7i.12xlarge",
    MlR7i16xlarge: "ml.r7i.16xlarge",
    MlR7i24xlarge: "ml.r7i.24xlarge",
    MlR7i48xlarge: "ml.r7i.48xlarge",
    MlM6idLarge: "ml.m6id.large",
    MlM6idXlarge: "ml.m6id.xlarge",
    MlM6id2xlarge: "ml.m6id.2xlarge",
    MlM6id4xlarge: "ml.m6id.4xlarge",
    MlM6id8xlarge: "ml.m6id.8xlarge",
    MlM6id12xlarge: "ml.m6id.12xlarge",
    MlM6id16xlarge: "ml.m6id.16xlarge",
    MlM6id24xlarge: "ml.m6id.24xlarge",
    MlM6id32xlarge: "ml.m6id.32xlarge",
    MlC6idLarge: "ml.c6id.large",
    MlC6idXlarge: "ml.c6id.xlarge",
    MlC6id2xlarge: "ml.c6id.2xlarge",
    MlC6id4xlarge: "ml.c6id.4xlarge",
    MlC6id8xlarge: "ml.c6id.8xlarge",
    MlC6id12xlarge: "ml.c6id.12xlarge",
    MlC6id16xlarge: "ml.c6id.16xlarge",
    MlC6id24xlarge: "ml.c6id.24xlarge",
    MlC6id32xlarge: "ml.c6id.32xlarge",
    MlR6idLarge: "ml.r6id.large",
    MlR6idXlarge: "ml.r6id.xlarge",
    MlR6id2xlarge: "ml.r6id.2xlarge",
    MlR6id4xlarge: "ml.r6id.4xlarge",
    MlR6id8xlarge: "ml.r6id.8xlarge",
    MlR6id12xlarge: "ml.r6id.12xlarge",
    MlR6id16xlarge: "ml.r6id.16xlarge",
    MlR6id24xlarge: "ml.r6id.24xlarge",
    MlR6id32xlarge: "ml.r6id.32xlarge",
} as const;

/**
 * The instance type that the image version runs on.
 */
export type AppResourceSpecInstanceType = (typeof AppResourceSpecInstanceType)[keyof typeof AppResourceSpecInstanceType];

export const AppType = {
    JupyterServer: "JupyterServer",
    KernelGateway: "KernelGateway",
    RStudioServerPro: "RStudioServerPro",
    RSessionGateway: "RSessionGateway",
    Canvas: "Canvas",
} as const;

/**
 * The type of app.
 */
export type AppType = (typeof AppType)[keyof typeof AppType];

export const ClusterAutoScalingConfigAutoScalerType = {
    Karpenter: "Karpenter",
} as const;

/**
 * The type of auto-scaler to use
 */
export type ClusterAutoScalingConfigAutoScalerType = (typeof ClusterAutoScalingConfigAutoScalerType)[keyof typeof ClusterAutoScalingConfigAutoScalerType];

export const ClusterAutoScalingConfigMode = {
    Enable: "Enable",
    Disable: "Disable",
} as const;

/**
 * The auto-scaling mode for the cluster
 */
export type ClusterAutoScalingConfigMode = (typeof ClusterAutoScalingConfigMode)[keyof typeof ClusterAutoScalingConfigMode];

export const ClusterDeepHealthCheckType = {
    InstanceStress: "InstanceStress",
    InstanceConnectivity: "InstanceConnectivity",
} as const;

/**
 * The type of deep health check(s) to be performed on the instances in the SageMaker HyperPod cluster instance group.
 */
export type ClusterDeepHealthCheckType = (typeof ClusterDeepHealthCheckType)[keyof typeof ClusterDeepHealthCheckType];

export const ClusterNodeProvisioningMode = {
    Continuous: "Continuous",
} as const;

/**
 * Determines the scaling strategy for the SageMaker HyperPod cluster. When set to 'Continuous', enables continuous scaling which dynamically manages node provisioning. If the parameter is omitted, uses the standard scaling approach in previous release.
 */
export type ClusterNodeProvisioningMode = (typeof ClusterNodeProvisioningMode)[keyof typeof ClusterNodeProvisioningMode];

export const ClusterNodeRecovery = {
    Automatic: "Automatic",
    None: "None",
} as const;

/**
 * If node auto-recovery is set to true, faulty nodes will be replaced or rebooted when a failure is detected. If set to false, nodes will be labelled when a fault is detected.
 */
export type ClusterNodeRecovery = (typeof ClusterNodeRecovery)[keyof typeof ClusterNodeRecovery];

export const ClusterStatus = {
    Creating: "Creating",
    Deleting: "Deleting",
    Failed: "Failed",
    InService: "InService",
    RollingBack: "RollingBack",
    SystemUpdating: "SystemUpdating",
    Updating: "Updating",
} as const;

/**
 * The status of the HyperPod Cluster.
 */
export type ClusterStatus = (typeof ClusterStatus)[keyof typeof ClusterStatus];

export const DataQualityJobDefinitionBatchTransformInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type DataQualityJobDefinitionBatchTransformInputS3DataDistributionType = (typeof DataQualityJobDefinitionBatchTransformInputS3DataDistributionType)[keyof typeof DataQualityJobDefinitionBatchTransformInputS3DataDistributionType];

export const DataQualityJobDefinitionBatchTransformInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type DataQualityJobDefinitionBatchTransformInputS3InputMode = (typeof DataQualityJobDefinitionBatchTransformInputS3InputMode)[keyof typeof DataQualityJobDefinitionBatchTransformInputS3InputMode];

export const DataQualityJobDefinitionEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type DataQualityJobDefinitionEndpointInputS3DataDistributionType = (typeof DataQualityJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof DataQualityJobDefinitionEndpointInputS3DataDistributionType];

export const DataQualityJobDefinitionEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type DataQualityJobDefinitionEndpointInputS3InputMode = (typeof DataQualityJobDefinitionEndpointInputS3InputMode)[keyof typeof DataQualityJobDefinitionEndpointInputS3InputMode];

export const DataQualityJobDefinitionS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type DataQualityJobDefinitionS3OutputS3UploadMode = (typeof DataQualityJobDefinitionS3OutputS3UploadMode)[keyof typeof DataQualityJobDefinitionS3OutputS3UploadMode];

export const DomainAppInstanceType = {
    System: "system",
    MlT3Micro: "ml.t3.micro",
    MlT3Small: "ml.t3.small",
    MlT3Medium: "ml.t3.medium",
    MlT3Large: "ml.t3.large",
    MlT3Xlarge: "ml.t3.xlarge",
    MlT32xlarge: "ml.t3.2xlarge",
    MlM5Large: "ml.m5.large",
    MlM5Xlarge: "ml.m5.xlarge",
    MlM52xlarge: "ml.m5.2xlarge",
    MlM54xlarge: "ml.m5.4xlarge",
    MlM58xlarge: "ml.m5.8xlarge",
    MlM512xlarge: "ml.m5.12xlarge",
    MlM516xlarge: "ml.m5.16xlarge",
    MlM524xlarge: "ml.m5.24xlarge",
    MlM5dLarge: "ml.m5d.large",
    MlM5dXlarge: "ml.m5d.xlarge",
    MlM5d2xlarge: "ml.m5d.2xlarge",
    MlM5d4xlarge: "ml.m5d.4xlarge",
    MlM5d8xlarge: "ml.m5d.8xlarge",
    MlM5d12xlarge: "ml.m5d.12xlarge",
    MlM5d16xlarge: "ml.m5d.16xlarge",
    MlM5d24xlarge: "ml.m5d.24xlarge",
    MlC5Large: "ml.c5.large",
    MlC5Xlarge: "ml.c5.xlarge",
    MlC52xlarge: "ml.c5.2xlarge",
    MlC54xlarge: "ml.c5.4xlarge",
    MlC59xlarge: "ml.c5.9xlarge",
    MlC512xlarge: "ml.c5.12xlarge",
    MlC518xlarge: "ml.c5.18xlarge",
    MlC524xlarge: "ml.c5.24xlarge",
    MlP32xlarge: "ml.p3.2xlarge",
    MlP38xlarge: "ml.p3.8xlarge",
    MlP316xlarge: "ml.p3.16xlarge",
    MlP3dn24xlarge: "ml.p3dn.24xlarge",
    MlG4dnXlarge: "ml.g4dn.xlarge",
    MlG4dn2xlarge: "ml.g4dn.2xlarge",
    MlG4dn4xlarge: "ml.g4dn.4xlarge",
    MlG4dn8xlarge: "ml.g4dn.8xlarge",
    MlG4dn12xlarge: "ml.g4dn.12xlarge",
    MlG4dn16xlarge: "ml.g4dn.16xlarge",
    MlR5Large: "ml.r5.large",
    MlR5Xlarge: "ml.r5.xlarge",
    MlR52xlarge: "ml.r5.2xlarge",
    MlR54xlarge: "ml.r5.4xlarge",
    MlR58xlarge: "ml.r5.8xlarge",
    MlR512xlarge: "ml.r5.12xlarge",
    MlR516xlarge: "ml.r5.16xlarge",
    MlR524xlarge: "ml.r5.24xlarge",
    MlG5Xlarge: "ml.g5.xlarge",
    MlG52xlarge: "ml.g5.2xlarge",
    MlG54xlarge: "ml.g5.4xlarge",
    MlG58xlarge: "ml.g5.8xlarge",
    MlG512xlarge: "ml.g5.12xlarge",
    MlG516xlarge: "ml.g5.16xlarge",
    MlG524xlarge: "ml.g5.24xlarge",
    MlG548xlarge: "ml.g5.48xlarge",
    MlG6Xlarge: "ml.g6.xlarge",
    MlG62xlarge: "ml.g6.2xlarge",
    MlG64xlarge: "ml.g6.4xlarge",
    MlG68xlarge: "ml.g6.8xlarge",
    MlG612xlarge: "ml.g6.12xlarge",
    MlG616xlarge: "ml.g6.16xlarge",
    MlG624xlarge: "ml.g6.24xlarge",
    MlG648xlarge: "ml.g6.48xlarge",
    MlG6eXlarge: "ml.g6e.xlarge",
    MlG6e2xlarge: "ml.g6e.2xlarge",
    MlG6e4xlarge: "ml.g6e.4xlarge",
    MlG6e8xlarge: "ml.g6e.8xlarge",
    MlG6e12xlarge: "ml.g6e.12xlarge",
    MlG6e16xlarge: "ml.g6e.16xlarge",
    MlG6e24xlarge: "ml.g6e.24xlarge",
    MlG6e48xlarge: "ml.g6e.48xlarge",
    MlGeospatialInteractive: "ml.geospatial.interactive",
    MlP4d24xlarge: "ml.p4d.24xlarge",
    MlP4de24xlarge: "ml.p4de.24xlarge",
    MlTrn12xlarge: "ml.trn1.2xlarge",
    MlTrn132xlarge: "ml.trn1.32xlarge",
    MlTrn1n32xlarge: "ml.trn1n.32xlarge",
    MlP548xlarge: "ml.p5.48xlarge",
    MlP5e48xlarge: "ml.p5e.48xlarge",
    MlP5en48xlarge: "ml.p5en.48xlarge",
    MlM6iLarge: "ml.m6i.large",
    MlM6iXlarge: "ml.m6i.xlarge",
    MlM6i2xlarge: "ml.m6i.2xlarge",
    MlM6i4xlarge: "ml.m6i.4xlarge",
    MlM6i8xlarge: "ml.m6i.8xlarge",
    MlM6i12xlarge: "ml.m6i.12xlarge",
    MlM6i16xlarge: "ml.m6i.16xlarge",
    MlM6i24xlarge: "ml.m6i.24xlarge",
    MlM6i32xlarge: "ml.m6i.32xlarge",
    MlM7iLarge: "ml.m7i.large",
    MlM7iXlarge: "ml.m7i.xlarge",
    MlM7i2xlarge: "ml.m7i.2xlarge",
    MlM7i4xlarge: "ml.m7i.4xlarge",
    MlM7i8xlarge: "ml.m7i.8xlarge",
    MlM7i12xlarge: "ml.m7i.12xlarge",
    MlM7i16xlarge: "ml.m7i.16xlarge",
    MlM7i24xlarge: "ml.m7i.24xlarge",
    MlM7i48xlarge: "ml.m7i.48xlarge",
    MlC6iLarge: "ml.c6i.large",
    MlC6iXlarge: "ml.c6i.xlarge",
    MlC6i2xlarge: "ml.c6i.2xlarge",
    MlC6i4xlarge: "ml.c6i.4xlarge",
    MlC6i8xlarge: "ml.c6i.8xlarge",
    MlC6i12xlarge: "ml.c6i.12xlarge",
    MlC6i16xlarge: "ml.c6i.16xlarge",
    MlC6i24xlarge: "ml.c6i.24xlarge",
    MlC6i32xlarge: "ml.c6i.32xlarge",
    MlC7iLarge: "ml.c7i.large",
    MlC7iXlarge: "ml.c7i.xlarge",
    MlC7i2xlarge: "ml.c7i.2xlarge",
    MlC7i4xlarge: "ml.c7i.4xlarge",
    MlC7i8xlarge: "ml.c7i.8xlarge",
    MlC7i12xlarge: "ml.c7i.12xlarge",
    MlC7i16xlarge: "ml.c7i.16xlarge",
    MlC7i24xlarge: "ml.c7i.24xlarge",
    MlC7i48xlarge: "ml.c7i.48xlarge",
    MlR6iLarge: "ml.r6i.large",
    MlR6iXlarge: "ml.r6i.xlarge",
    MlR6i2xlarge: "ml.r6i.2xlarge",
    MlR6i4xlarge: "ml.r6i.4xlarge",
    MlR6i8xlarge: "ml.r6i.8xlarge",
    MlR6i12xlarge: "ml.r6i.12xlarge",
    MlR6i16xlarge: "ml.r6i.16xlarge",
    MlR6i24xlarge: "ml.r6i.24xlarge",
    MlR6i32xlarge: "ml.r6i.32xlarge",
    MlR7iLarge: "ml.r7i.large",
    MlR7iXlarge: "ml.r7i.xlarge",
    MlR7i2xlarge: "ml.r7i.2xlarge",
    MlR7i4xlarge: "ml.r7i.4xlarge",
    MlR7i8xlarge: "ml.r7i.8xlarge",
    MlR7i12xlarge: "ml.r7i.12xlarge",
    MlR7i16xlarge: "ml.r7i.16xlarge",
    MlR7i24xlarge: "ml.r7i.24xlarge",
    MlR7i48xlarge: "ml.r7i.48xlarge",
    MlM6idLarge: "ml.m6id.large",
    MlM6idXlarge: "ml.m6id.xlarge",
    MlM6id2xlarge: "ml.m6id.2xlarge",
    MlM6id4xlarge: "ml.m6id.4xlarge",
    MlM6id8xlarge: "ml.m6id.8xlarge",
    MlM6id12xlarge: "ml.m6id.12xlarge",
    MlM6id16xlarge: "ml.m6id.16xlarge",
    MlM6id24xlarge: "ml.m6id.24xlarge",
    MlM6id32xlarge: "ml.m6id.32xlarge",
    MlC6idLarge: "ml.c6id.large",
    MlC6idXlarge: "ml.c6id.xlarge",
    MlC6id2xlarge: "ml.c6id.2xlarge",
    MlC6id4xlarge: "ml.c6id.4xlarge",
    MlC6id8xlarge: "ml.c6id.8xlarge",
    MlC6id12xlarge: "ml.c6id.12xlarge",
    MlC6id16xlarge: "ml.c6id.16xlarge",
    MlC6id24xlarge: "ml.c6id.24xlarge",
    MlC6id32xlarge: "ml.c6id.32xlarge",
    MlR6idLarge: "ml.r6id.large",
    MlR6idXlarge: "ml.r6id.xlarge",
    MlR6id2xlarge: "ml.r6id.2xlarge",
    MlR6id4xlarge: "ml.r6id.4xlarge",
    MlR6id8xlarge: "ml.r6id.8xlarge",
    MlR6id12xlarge: "ml.r6id.12xlarge",
    MlR6id16xlarge: "ml.r6id.16xlarge",
    MlR6id24xlarge: "ml.r6id.24xlarge",
    MlR6id32xlarge: "ml.r6id.32xlarge",
} as const;

/**
 * The instance type that the image version runs on.
 */
export type DomainAppInstanceType = (typeof DomainAppInstanceType)[keyof typeof DomainAppInstanceType];

export const DomainAppNetworkAccessType = {
    PublicInternetOnly: "PublicInternetOnly",
    VpcOnly: "VpcOnly",
} as const;

/**
 * Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
 */
export type DomainAppNetworkAccessType = (typeof DomainAppNetworkAccessType)[keyof typeof DomainAppNetworkAccessType];

export const DomainAppSecurityGroupManagement = {
    Service: "Service",
    Customer: "Customer",
} as const;

/**
 * The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required when CreateDomain.AppNetworkAccessType is VPCOnly and DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided.
 */
export type DomainAppSecurityGroupManagement = (typeof DomainAppSecurityGroupManagement)[keyof typeof DomainAppSecurityGroupManagement];

export const DomainAppType = {
    JupyterServer: "JupyterServer",
    TensorBoard: "TensorBoard",
    RStudioServerPro: "RStudioServerPro",
    JupyterLab: "JupyterLab",
    CodeEditor: "CodeEditor",
    DetailedProfiler: "DetailedProfiler",
    Canvas: "Canvas",
} as const;

export type DomainAppType = (typeof DomainAppType)[keyof typeof DomainAppType];

export const DomainAuthMode = {
    Sso: "SSO",
    Iam: "IAM",
} as const;

/**
 * The mode of authentication that members use to access the domain.
 */
export type DomainAuthMode = (typeof DomainAuthMode)[keyof typeof DomainAuthMode];

export const DomainDockerSettingsEnableDockerAccess = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * The flag to enable/disable docker-proxy server
 */
export type DomainDockerSettingsEnableDockerAccess = (typeof DomainDockerSettingsEnableDockerAccess)[keyof typeof DomainDockerSettingsEnableDockerAccess];

export const DomainHiddenSageMakerImageSageMakerImageName = {
    SagemakerDistribution: "sagemaker_distribution",
} as const;

/**
 * The SageMaker image name that you are hiding from the Studio user interface.
 */
export type DomainHiddenSageMakerImageSageMakerImageName = (typeof DomainHiddenSageMakerImageSageMakerImageName)[keyof typeof DomainHiddenSageMakerImageSageMakerImageName];

export const DomainIpAddressType = {
    Ipv4: "IPV4",
    Dualstack: "DUALSTACK",
} as const;

/**
 * A setting to indicate if IPv6 routing should be enabled along with IPv4 or not
 */
export type DomainIpAddressType = (typeof DomainIpAddressType)[keyof typeof DomainIpAddressType];

export const DomainLifecycleManagement = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * A flag to enable/disable AppLifecycleManagement settings
 */
export type DomainLifecycleManagement = (typeof DomainLifecycleManagement)[keyof typeof DomainLifecycleManagement];

export const DomainMlTools = {
    DataWrangler: "DataWrangler",
    FeatureStore: "FeatureStore",
    EmrClusters: "EmrClusters",
    AutoMl: "AutoMl",
    Experiments: "Experiments",
    Training: "Training",
    ModelEvaluation: "ModelEvaluation",
    Pipelines: "Pipelines",
    Models: "Models",
    JumpStart: "JumpStart",
    InferenceRecommender: "InferenceRecommender",
    Endpoints: "Endpoints",
    Projects: "Projects",
    InferenceOptimization: "InferenceOptimization",
    HyperPodClusters: "HyperPodClusters",
    Comet: "Comet",
    DeepchecksLlmEvaluation: "DeepchecksLLMEvaluation",
    Fiddler: "Fiddler",
    LakeraGuard: "LakeraGuard",
    PerformanceEvaluation: "PerformanceEvaluation",
} as const;

export type DomainMlTools = (typeof DomainMlTools)[keyof typeof DomainMlTools];

export const DomainRStudioServerProAppSettingsAccessStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Indicates whether the current user has access to the RStudioServerPro app.
 */
export type DomainRStudioServerProAppSettingsAccessStatus = (typeof DomainRStudioServerProAppSettingsAccessStatus)[keyof typeof DomainRStudioServerProAppSettingsAccessStatus];

export const DomainRStudioServerProAppSettingsUserGroup = {
    RStudioAdmin: "R_STUDIO_ADMIN",
    RStudioUser: "R_STUDIO_USER",
} as const;

/**
 * The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
 */
export type DomainRStudioServerProAppSettingsUserGroup = (typeof DomainRStudioServerProAppSettingsUserGroup)[keyof typeof DomainRStudioServerProAppSettingsUserGroup];

export const DomainSettingsExecutionRoleIdentityConfig = {
    UserProfileName: "USER_PROFILE_NAME",
    Disabled: "DISABLED",
} as const;

/**
 * The configuration for attaching a SageMaker user profile name to the execution role as a sts:SourceIdentity key.
 */
export type DomainSettingsExecutionRoleIdentityConfig = (typeof DomainSettingsExecutionRoleIdentityConfig)[keyof typeof DomainSettingsExecutionRoleIdentityConfig];

export const DomainSharingSettingsNotebookOutputOption = {
    Allowed: "Allowed",
    Disabled: "Disabled",
} as const;

/**
 * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
 */
export type DomainSharingSettingsNotebookOutputOption = (typeof DomainSharingSettingsNotebookOutputOption)[keyof typeof DomainSharingSettingsNotebookOutputOption];

export const DomainTagPropagation = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Indicates whether the tags added to Domain, User Profile and Space entity is propagated to all SageMaker resources.
 */
export type DomainTagPropagation = (typeof DomainTagPropagation)[keyof typeof DomainTagPropagation];

export const DomainUnifiedStudioSettingsStudioWebPortalAccess = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Sets whether you can access the domain in Amazon SageMaker Studio:
 *
 * ENABLED
 * You can access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it in both studio interfaces.
 * DISABLED
 * You can't access the domain in Amazon SageMaker Studio. If you migrate the domain to Amazon SageMaker Unified Studio, you can access it only in that studio interface.
 */
export type DomainUnifiedStudioSettingsStudioWebPortalAccess = (typeof DomainUnifiedStudioSettingsStudioWebPortalAccess)[keyof typeof DomainUnifiedStudioSettingsStudioWebPortalAccess];

export const DomainUserSettingsAutoMountHomeEfs = {
    Enabled: "Enabled",
    Disabled: "Disabled",
    DefaultAsDomain: "DefaultAsDomain",
} as const;

/**
 * Indicates whether auto-mounting of an EFS volume is supported for the user profile. 
 */
export type DomainUserSettingsAutoMountHomeEfs = (typeof DomainUserSettingsAutoMountHomeEfs)[keyof typeof DomainUserSettingsAutoMountHomeEfs];

export const DomainUserSettingsStudioWebPortal = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Indicates whether the Studio experience is available to users. If not, users cannot access Studio.
 */
export type DomainUserSettingsStudioWebPortal = (typeof DomainUserSettingsStudioWebPortal)[keyof typeof DomainUserSettingsStudioWebPortal];

export const FeatureGroupFeatureDefinitionFeatureType = {
    Integral: "Integral",
    Fractional: "Fractional",
    String: "String",
} as const;

/**
 * The value type of a feature. Valid values are Integral, Fractional, or String.
 */
export type FeatureGroupFeatureDefinitionFeatureType = (typeof FeatureGroupFeatureDefinitionFeatureType)[keyof typeof FeatureGroupFeatureDefinitionFeatureType];

export const FeatureGroupStorageType = {
    Standard: "Standard",
    InMemory: "InMemory",
} as const;

export type FeatureGroupStorageType = (typeof FeatureGroupStorageType)[keyof typeof FeatureGroupStorageType];

export const FeatureGroupTableFormat = {
    Iceberg: "Iceberg",
    Glue: "Glue",
} as const;

/**
 * Format for the offline store feature group. Iceberg is the optimal format for feature groups shared between offline and online stores.
 */
export type FeatureGroupTableFormat = (typeof FeatureGroupTableFormat)[keyof typeof FeatureGroupTableFormat];

export const FeatureGroupThroughputMode = {
    OnDemand: "OnDemand",
    Provisioned: "Provisioned",
} as const;

/**
 * Throughput mode configuration of the feature group
 */
export type FeatureGroupThroughputMode = (typeof FeatureGroupThroughputMode)[keyof typeof FeatureGroupThroughputMode];

export const FeatureGroupUnit = {
    Seconds: "Seconds",
    Minutes: "Minutes",
    Hours: "Hours",
    Days: "Days",
    Weeks: "Weeks",
} as const;

/**
 * Unit of ttl configuration
 */
export type FeatureGroupUnit = (typeof FeatureGroupUnit)[keyof typeof FeatureGroupUnit];

export const ImageVersionJobType = {
    Training: "TRAINING",
    Inference: "INFERENCE",
    NotebookKernel: "NOTEBOOK_KERNEL",
} as const;

/**
 * Indicates SageMaker job type compatibility.
 */
export type ImageVersionJobType = (typeof ImageVersionJobType)[keyof typeof ImageVersionJobType];

export const ImageVersionProcessor = {
    Cpu: "CPU",
    Gpu: "GPU",
} as const;

/**
 * Indicates CPU or GPU compatibility.
 */
export type ImageVersionProcessor = (typeof ImageVersionProcessor)[keyof typeof ImageVersionProcessor];

export const ImageVersionVendorGuidance = {
    NotProvided: "NOT_PROVIDED",
    Stable: "STABLE",
    ToBeArchived: "TO_BE_ARCHIVED",
    Archived: "ARCHIVED",
} as const;

/**
 * The availability of the image version specified by the maintainer.
 */
export type ImageVersionVendorGuidance = (typeof ImageVersionVendorGuidance)[keyof typeof ImageVersionVendorGuidance];

export const InferenceComponentCapacitySizeType = {
    CopyCount: "COPY_COUNT",
    CapacityPercent: "CAPACITY_PERCENT",
} as const;

export type InferenceComponentCapacitySizeType = (typeof InferenceComponentCapacitySizeType)[keyof typeof InferenceComponentCapacitySizeType];

export const InferenceComponentStatus = {
    InService: "InService",
    Creating: "Creating",
    Updating: "Updating",
    Failed: "Failed",
    Deleting: "Deleting",
} as const;

export type InferenceComponentStatus = (typeof InferenceComponentStatus)[keyof typeof InferenceComponentStatus];

export const InferenceExperimentDesiredState = {
    Running: "Running",
    Completed: "Completed",
    Cancelled: "Cancelled",
} as const;

/**
 * The desired state of the experiment after starting or stopping operation.
 */
export type InferenceExperimentDesiredState = (typeof InferenceExperimentDesiredState)[keyof typeof InferenceExperimentDesiredState];

export const InferenceExperimentEndpointMetadataEndpointStatus = {
    Creating: "Creating",
    Updating: "Updating",
    SystemUpdating: "SystemUpdating",
    RollingBack: "RollingBack",
    InService: "InService",
    OutOfService: "OutOfService",
    Deleting: "Deleting",
    Failed: "Failed",
} as const;

/**
 * The status of the endpoint. For possible values of the status of an endpoint.
 */
export type InferenceExperimentEndpointMetadataEndpointStatus = (typeof InferenceExperimentEndpointMetadataEndpointStatus)[keyof typeof InferenceExperimentEndpointMetadataEndpointStatus];

export const InferenceExperimentModelInfrastructureConfigInfrastructureType = {
    RealTimeInference: "RealTimeInference",
} as const;

/**
 * The type of the inference experiment that you want to run.
 */
export type InferenceExperimentModelInfrastructureConfigInfrastructureType = (typeof InferenceExperimentModelInfrastructureConfigInfrastructureType)[keyof typeof InferenceExperimentModelInfrastructureConfigInfrastructureType];

export const InferenceExperimentStatus = {
    Creating: "Creating",
    Created: "Created",
    Updating: "Updating",
    Starting: "Starting",
    Stopping: "Stopping",
    Running: "Running",
    Completed: "Completed",
    Cancelled: "Cancelled",
} as const;

/**
 * The status of the inference experiment.
 */
export type InferenceExperimentStatus = (typeof InferenceExperimentStatus)[keyof typeof InferenceExperimentStatus];

export const InferenceExperimentType = {
    ShadowMode: "ShadowMode",
} as const;

/**
 * The type of the inference experiment that you want to run.
 */
export type InferenceExperimentType = (typeof InferenceExperimentType)[keyof typeof InferenceExperimentType];

export const MlflowTrackingServerTrackingServerSize = {
    Small: "Small",
    Medium: "Medium",
    Large: "Large",
} as const;

/**
 * The size of the MLFlow Tracking Server.
 */
export type MlflowTrackingServerTrackingServerSize = (typeof MlflowTrackingServerTrackingServerSize)[keyof typeof MlflowTrackingServerTrackingServerSize];

export const ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType = (typeof ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType)[keyof typeof ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType];

export const ModelBiasJobDefinitionBatchTransformInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type ModelBiasJobDefinitionBatchTransformInputS3InputMode = (typeof ModelBiasJobDefinitionBatchTransformInputS3InputMode)[keyof typeof ModelBiasJobDefinitionBatchTransformInputS3InputMode];

export const ModelBiasJobDefinitionEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type ModelBiasJobDefinitionEndpointInputS3DataDistributionType = (typeof ModelBiasJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof ModelBiasJobDefinitionEndpointInputS3DataDistributionType];

export const ModelBiasJobDefinitionEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type ModelBiasJobDefinitionEndpointInputS3InputMode = (typeof ModelBiasJobDefinitionEndpointInputS3InputMode)[keyof typeof ModelBiasJobDefinitionEndpointInputS3InputMode];

export const ModelBiasJobDefinitionS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type ModelBiasJobDefinitionS3OutputS3UploadMode = (typeof ModelBiasJobDefinitionS3OutputS3UploadMode)[keyof typeof ModelBiasJobDefinitionS3OutputS3UploadMode];

export const ModelCardBarChartMetricType = {
    BarChart: "bar_chart",
} as const;

export type ModelCardBarChartMetricType = (typeof ModelCardBarChartMetricType)[keyof typeof ModelCardBarChartMetricType];

export const ModelCardLinearGraphMetricType = {
    LinearGraph: "linear_graph",
} as const;

export type ModelCardLinearGraphMetricType = (typeof ModelCardLinearGraphMetricType)[keyof typeof ModelCardLinearGraphMetricType];

export const ModelCardMatrixMetricType = {
    Matrix: "matrix",
} as const;

export type ModelCardMatrixMetricType = (typeof ModelCardMatrixMetricType)[keyof typeof ModelCardMatrixMetricType];

export const ModelCardModelPackageDetailsModelApprovalStatus = {
    Approved: "Approved",
    Rejected: "Rejected",
    PendingManualApproval: "PendingManualApproval",
} as const;

/**
 * Current approval status of model package
 */
export type ModelCardModelPackageDetailsModelApprovalStatus = (typeof ModelCardModelPackageDetailsModelApprovalStatus)[keyof typeof ModelCardModelPackageDetailsModelApprovalStatus];

export const ModelCardModelPackageDetailsModelPackageStatus = {
    Pending: "Pending",
    InProgress: "InProgress",
    Completed: "Completed",
    Failed: "Failed",
    Deleting: "Deleting",
} as const;

/**
 * Current status of model package
 */
export type ModelCardModelPackageDetailsModelPackageStatus = (typeof ModelCardModelPackageDetailsModelPackageStatus)[keyof typeof ModelCardModelPackageDetailsModelPackageStatus];

export const ModelCardObjectiveFunctionFunctionPropertiesFunction = {
    Maximize: "Maximize",
    Minimize: "Minimize",
} as const;

export type ModelCardObjectiveFunctionFunctionPropertiesFunction = (typeof ModelCardObjectiveFunctionFunctionPropertiesFunction)[keyof typeof ModelCardObjectiveFunctionFunctionPropertiesFunction];

export const ModelCardProcessingStatus = {
    UnsetValue: "UnsetValue",
    DeleteInProgress: "DeleteInProgress",
    DeletePending: "DeletePending",
    ContentDeleted: "ContentDeleted",
    ExportJobsDeleted: "ExportJobsDeleted",
    DeleteCompleted: "DeleteCompleted",
    DeleteFailed: "DeleteFailed",
} as const;

/**
 * The processing status of model card deletion. The ModelCardProcessingStatus updates throughout the different deletion steps.
 */
export type ModelCardProcessingStatus = (typeof ModelCardProcessingStatus)[keyof typeof ModelCardProcessingStatus];

export const ModelCardRiskRating = {
    High: "High",
    Medium: "Medium",
    Low: "Low",
    Unknown: "Unknown",
} as const;

/**
 * Risk rating of model.
 */
export type ModelCardRiskRating = (typeof ModelCardRiskRating)[keyof typeof ModelCardRiskRating];

export const ModelCardSimpleMetricType = {
    Number: "number",
    String: "string",
    Boolean: "boolean",
} as const;

export type ModelCardSimpleMetricType = (typeof ModelCardSimpleMetricType)[keyof typeof ModelCardSimpleMetricType];

export const ModelCardStatus = {
    Draft: "Draft",
    PendingReview: "PendingReview",
    Approved: "Approved",
    Archived: "Archived",
} as const;

/**
 * The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.
 */
export type ModelCardStatus = (typeof ModelCardStatus)[keyof typeof ModelCardStatus];

export const ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType = (typeof ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType)[keyof typeof ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType];

export const ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode = (typeof ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode)[keyof typeof ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode];

export const ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType = (typeof ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType];

export const ModelExplainabilityJobDefinitionEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type ModelExplainabilityJobDefinitionEndpointInputS3InputMode = (typeof ModelExplainabilityJobDefinitionEndpointInputS3InputMode)[keyof typeof ModelExplainabilityJobDefinitionEndpointInputS3InputMode];

export const ModelExplainabilityJobDefinitionS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type ModelExplainabilityJobDefinitionS3OutputS3UploadMode = (typeof ModelExplainabilityJobDefinitionS3OutputS3UploadMode)[keyof typeof ModelExplainabilityJobDefinitionS3OutputS3UploadMode];

export const ModelPackageGroupStatus = {
    Pending: "Pending",
    InProgress: "InProgress",
    Completed: "Completed",
    Failed: "Failed",
    Deleting: "Deleting",
    DeleteFailed: "DeleteFailed",
} as const;

/**
 * The status of a modelpackage group job.
 */
export type ModelPackageGroupStatus = (typeof ModelPackageGroupStatus)[keyof typeof ModelPackageGroupStatus];

export const ModelPackageModelApprovalStatus = {
    Approved: "Approved",
    Rejected: "Rejected",
    PendingManualApproval: "PendingManualApproval",
} as const;

/**
 * The approval status of the model package.
 */
export type ModelPackageModelApprovalStatus = (typeof ModelPackageModelApprovalStatus)[keyof typeof ModelPackageModelApprovalStatus];

export const ModelPackageModelCardModelCardStatus = {
    Draft: "Draft",
    PendingReview: "PendingReview",
    Approved: "Approved",
    Archived: "Archived",
} as const;

/**
 * The approval status of the model card within your organization.
 */
export type ModelPackageModelCardModelCardStatus = (typeof ModelPackageModelCardModelCardStatus)[keyof typeof ModelPackageModelCardModelCardStatus];

export const ModelPackageS3DataSourceS3DataType = {
    ManifestFile: "ManifestFile",
    S3Prefix: "S3Prefix",
    AugmentedManifestFile: "AugmentedManifestFile",
} as const;

/**
 * The S3 Data Source Type
 */
export type ModelPackageS3DataSourceS3DataType = (typeof ModelPackageS3DataSourceS3DataType)[keyof typeof ModelPackageS3DataSourceS3DataType];

export const ModelPackageS3ModelDataSourceCompressionType = {
    None: "None",
    Gzip: "Gzip",
} as const;

/**
 * Specifies how the ML model data is prepared.
 */
export type ModelPackageS3ModelDataSourceCompressionType = (typeof ModelPackageS3ModelDataSourceCompressionType)[keyof typeof ModelPackageS3ModelDataSourceCompressionType];

export const ModelPackageS3ModelDataSourceS3DataType = {
    S3Prefix: "S3Prefix",
    S3Object: "S3Object",
} as const;

/**
 * Specifies the type of ML model data to deploy.
 */
export type ModelPackageS3ModelDataSourceS3DataType = (typeof ModelPackageS3ModelDataSourceS3DataType)[keyof typeof ModelPackageS3ModelDataSourceS3DataType];

export const ModelPackageSkipModelValidation = {
    None: "None",
    All: "All",
} as const;

/**
 * Indicates if you want to skip model validation.
 */
export type ModelPackageSkipModelValidation = (typeof ModelPackageSkipModelValidation)[keyof typeof ModelPackageSkipModelValidation];

export const ModelPackageStatus = {
    Pending: "Pending",
    Deleting: "Deleting",
    InProgress: "InProgress",
    Completed: "Completed",
    Failed: "Failed",
} as const;

/**
 * The current status of the model package.
 */
export type ModelPackageStatus = (typeof ModelPackageStatus)[keyof typeof ModelPackageStatus];

export const ModelPackageStatusItemStatus = {
    NotStarted: "NotStarted",
    Failed: "Failed",
    InProgress: "InProgress",
    Completed: "Completed",
} as const;

/**
 * The current status.
 */
export type ModelPackageStatusItemStatus = (typeof ModelPackageStatusItemStatus)[keyof typeof ModelPackageStatusItemStatus];

export const ModelPackageTransformInputCompressionType = {
    None: "None",
    Gzip: "Gzip",
} as const;

/**
 * If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
 */
export type ModelPackageTransformInputCompressionType = (typeof ModelPackageTransformInputCompressionType)[keyof typeof ModelPackageTransformInputCompressionType];

export const ModelPackageTransformInputSplitType = {
    None: "None",
    TfRecord: "TFRecord",
    Line: "Line",
    RecordIo: "RecordIO",
} as const;

/**
 * The method to use to split the transform job's data files into smaller batches. 
 */
export type ModelPackageTransformInputSplitType = (typeof ModelPackageTransformInputSplitType)[keyof typeof ModelPackageTransformInputSplitType];

export const ModelPackageTransformJobDefinitionBatchStrategy = {
    MultiRecord: "MultiRecord",
    SingleRecord: "SingleRecord",
} as const;

/**
 * A string that determines the number of records included in a single mini-batch.
 */
export type ModelPackageTransformJobDefinitionBatchStrategy = (typeof ModelPackageTransformJobDefinitionBatchStrategy)[keyof typeof ModelPackageTransformJobDefinitionBatchStrategy];

export const ModelPackageTransformOutputAssembleWith = {
    None: "None",
    Line: "Line",
} as const;

/**
 * Defines how to assemble the results of the transform job as a single S3 object.
 */
export type ModelPackageTransformOutputAssembleWith = (typeof ModelPackageTransformOutputAssembleWith)[keyof typeof ModelPackageTransformOutputAssembleWith];

export const ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType = (typeof ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType)[keyof typeof ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType];

export const ModelQualityJobDefinitionBatchTransformInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type ModelQualityJobDefinitionBatchTransformInputS3InputMode = (typeof ModelQualityJobDefinitionBatchTransformInputS3InputMode)[keyof typeof ModelQualityJobDefinitionBatchTransformInputS3InputMode];

export const ModelQualityJobDefinitionEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type ModelQualityJobDefinitionEndpointInputS3DataDistributionType = (typeof ModelQualityJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof ModelQualityJobDefinitionEndpointInputS3DataDistributionType];

export const ModelQualityJobDefinitionEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type ModelQualityJobDefinitionEndpointInputS3InputMode = (typeof ModelQualityJobDefinitionEndpointInputS3InputMode)[keyof typeof ModelQualityJobDefinitionEndpointInputS3InputMode];

export const ModelQualityJobDefinitionProblemType = {
    BinaryClassification: "BinaryClassification",
    MulticlassClassification: "MulticlassClassification",
    Regression: "Regression",
} as const;

/**
 * The status of the monitoring job.
 */
export type ModelQualityJobDefinitionProblemType = (typeof ModelQualityJobDefinitionProblemType)[keyof typeof ModelQualityJobDefinitionProblemType];

export const ModelQualityJobDefinitionS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type ModelQualityJobDefinitionS3OutputS3UploadMode = (typeof ModelQualityJobDefinitionS3OutputS3UploadMode)[keyof typeof ModelQualityJobDefinitionS3OutputS3UploadMode];

export const MonitoringScheduleBatchTransformInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type MonitoringScheduleBatchTransformInputS3DataDistributionType = (typeof MonitoringScheduleBatchTransformInputS3DataDistributionType)[keyof typeof MonitoringScheduleBatchTransformInputS3DataDistributionType];

export const MonitoringScheduleBatchTransformInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type MonitoringScheduleBatchTransformInputS3InputMode = (typeof MonitoringScheduleBatchTransformInputS3InputMode)[keyof typeof MonitoringScheduleBatchTransformInputS3InputMode];

export const MonitoringScheduleEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type MonitoringScheduleEndpointInputS3DataDistributionType = (typeof MonitoringScheduleEndpointInputS3DataDistributionType)[keyof typeof MonitoringScheduleEndpointInputS3DataDistributionType];

export const MonitoringScheduleEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type MonitoringScheduleEndpointInputS3InputMode = (typeof MonitoringScheduleEndpointInputS3InputMode)[keyof typeof MonitoringScheduleEndpointInputS3InputMode];

export const MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus = {
    Pending: "Pending",
    Completed: "Completed",
    CompletedWithViolations: "CompletedWithViolations",
    InProgress: "InProgress",
    Failed: "Failed",
    Stopping: "Stopping",
    Stopped: "Stopped",
} as const;

/**
 * The status of the monitoring job.
 */
export type MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus = (typeof MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus)[keyof typeof MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus];

export const MonitoringScheduleMonitoringType = {
    DataQuality: "DataQuality",
    ModelQuality: "ModelQuality",
    ModelBias: "ModelBias",
    ModelExplainability: "ModelExplainability",
} as const;

/**
 * The type of monitoring job.
 */
export type MonitoringScheduleMonitoringType = (typeof MonitoringScheduleMonitoringType)[keyof typeof MonitoringScheduleMonitoringType];

export const MonitoringScheduleS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type MonitoringScheduleS3OutputS3UploadMode = (typeof MonitoringScheduleS3OutputS3UploadMode)[keyof typeof MonitoringScheduleS3OutputS3UploadMode];

export const MonitoringScheduleStatus = {
    Pending: "Pending",
    Failed: "Failed",
    Scheduled: "Scheduled",
    Stopped: "Stopped",
} as const;

/**
 * The status of a schedule job.
 */
export type MonitoringScheduleStatus = (typeof MonitoringScheduleStatus)[keyof typeof MonitoringScheduleStatus];

export const PartnerAppAuthType = {
    Iam: "IAM",
} as const;

/**
 * The Auth type of PartnerApp.
 */
export type PartnerAppAuthType = (typeof PartnerAppAuthType)[keyof typeof PartnerAppAuthType];

export const PartnerAppType = {
    LakeraGuard: "lakera-guard",
    Comet: "comet",
    DeepchecksLlmEvaluation: "deepchecks-llm-evaluation",
    Fiddler: "fiddler",
} as const;

/**
 * The type of PartnerApp.
 */
export type PartnerAppType = (typeof PartnerAppType)[keyof typeof PartnerAppType];

export const ProcessingJobAthenaDatasetDefinitionOutputCompression = {
    Gzip: "GZIP",
    Snappy: "SNAPPY",
    Zlib: "ZLIB",
} as const;

/**
 * The compression used for Athena query results.
 */
export type ProcessingJobAthenaDatasetDefinitionOutputCompression = (typeof ProcessingJobAthenaDatasetDefinitionOutputCompression)[keyof typeof ProcessingJobAthenaDatasetDefinitionOutputCompression];

export const ProcessingJobAthenaDatasetDefinitionOutputFormat = {
    Parquet: "PARQUET",
    Avro: "AVRO",
    Orc: "ORC",
    Json: "JSON",
    Textfile: "TEXTFILE",
} as const;

/**
 * The data storage format for Athena query results.
 */
export type ProcessingJobAthenaDatasetDefinitionOutputFormat = (typeof ProcessingJobAthenaDatasetDefinitionOutputFormat)[keyof typeof ProcessingJobAthenaDatasetDefinitionOutputFormat];

export const ProcessingJobClusterConfigInstanceType = {
    MlT3Medium: "ml.t3.medium",
    MlT3Large: "ml.t3.large",
    MlT3Xlarge: "ml.t3.xlarge",
    MlT32xlarge: "ml.t3.2xlarge",
    MlM4Xlarge: "ml.m4.xlarge",
    MlM42xlarge: "ml.m4.2xlarge",
    MlM44xlarge: "ml.m4.4xlarge",
    MlM410xlarge: "ml.m4.10xlarge",
    MlM416xlarge: "ml.m4.16xlarge",
    MlC4Xlarge: "ml.c4.xlarge",
    MlC42xlarge: "ml.c4.2xlarge",
    MlC44xlarge: "ml.c4.4xlarge",
    MlC48xlarge: "ml.c4.8xlarge",
    MlC5Xlarge: "ml.c5.xlarge",
    MlC52xlarge: "ml.c5.2xlarge",
    MlC54xlarge: "ml.c5.4xlarge",
    MlC59xlarge: "ml.c5.9xlarge",
    MlC518xlarge: "ml.c5.18xlarge",
    MlM5Large: "ml.m5.large",
    MlM5Xlarge: "ml.m5.xlarge",
    MlM52xlarge: "ml.m5.2xlarge",
    MlM54xlarge: "ml.m5.4xlarge",
    MlM512xlarge: "ml.m5.12xlarge",
    MlM524xlarge: "ml.m5.24xlarge",
    MlR5Large: "ml.r5.large",
    MlR5Xlarge: "ml.r5.xlarge",
    MlR52xlarge: "ml.r5.2xlarge",
    MlR54xlarge: "ml.r5.4xlarge",
    MlR58xlarge: "ml.r5.8xlarge",
    MlR512xlarge: "ml.r5.12xlarge",
    MlR516xlarge: "ml.r5.16xlarge",
    MlR524xlarge: "ml.r5.24xlarge",
    MlG4dnXlarge: "ml.g4dn.xlarge",
    MlG4dn2xlarge: "ml.g4dn.2xlarge",
    MlG4dn4xlarge: "ml.g4dn.4xlarge",
    MlG4dn8xlarge: "ml.g4dn.8xlarge",
    MlG4dn12xlarge: "ml.g4dn.12xlarge",
    MlG4dn16xlarge: "ml.g4dn.16xlarge",
    MlG5Xlarge: "ml.g5.xlarge",
    MlG52xlarge: "ml.g5.2xlarge",
    MlG54xlarge: "ml.g5.4xlarge",
    MlG58xlarge: "ml.g5.8xlarge",
    MlG516xlarge: "ml.g5.16xlarge",
    MlG512xlarge: "ml.g5.12xlarge",
    MlG524xlarge: "ml.g5.24xlarge",
    MlG548xlarge: "ml.g5.48xlarge",
    MlR5dLarge: "ml.r5d.large",
    MlR5dXlarge: "ml.r5d.xlarge",
    MlR5d2xlarge: "ml.r5d.2xlarge",
    MlR5d4xlarge: "ml.r5d.4xlarge",
    MlR5d8xlarge: "ml.r5d.8xlarge",
    MlR5d12xlarge: "ml.r5d.12xlarge",
    MlR5d16xlarge: "ml.r5d.16xlarge",
    MlR5d24xlarge: "ml.r5d.24xlarge",
    MlG6Xlarge: "ml.g6.xlarge",
    MlG62xlarge: "ml.g6.2xlarge",
    MlG64xlarge: "ml.g6.4xlarge",
    MlG68xlarge: "ml.g6.8xlarge",
    MlG612xlarge: "ml.g6.12xlarge",
    MlG616xlarge: "ml.g6.16xlarge",
    MlG624xlarge: "ml.g6.24xlarge",
    MlG648xlarge: "ml.g6.48xlarge",
    MlG6eXlarge: "ml.g6e.xlarge",
    MlG6e2xlarge: "ml.g6e.2xlarge",
    MlG6e4xlarge: "ml.g6e.4xlarge",
    MlG6e8xlarge: "ml.g6e.8xlarge",
    MlG6e12xlarge: "ml.g6e.12xlarge",
    MlG6e16xlarge: "ml.g6e.16xlarge",
    MlG6e24xlarge: "ml.g6e.24xlarge",
    MlG6e48xlarge: "ml.g6e.48xlarge",
    MlM6iLarge: "ml.m6i.large",
    MlM6iXlarge: "ml.m6i.xlarge",
    MlM6i2xlarge: "ml.m6i.2xlarge",
    MlM6i4xlarge: "ml.m6i.4xlarge",
    MlM6i8xlarge: "ml.m6i.8xlarge",
    MlM6i12xlarge: "ml.m6i.12xlarge",
    MlM6i16xlarge: "ml.m6i.16xlarge",
    MlM6i24xlarge: "ml.m6i.24xlarge",
    MlM6i32xlarge: "ml.m6i.32xlarge",
    MlC6iXlarge: "ml.c6i.xlarge",
    MlC6i2xlarge: "ml.c6i.2xlarge",
    MlC6i4xlarge: "ml.c6i.4xlarge",
    MlC6i8xlarge: "ml.c6i.8xlarge",
    MlC6i12xlarge: "ml.c6i.12xlarge",
    MlC6i16xlarge: "ml.c6i.16xlarge",
    MlC6i24xlarge: "ml.c6i.24xlarge",
    MlC6i32xlarge: "ml.c6i.32xlarge",
    MlM7iLarge: "ml.m7i.large",
    MlM7iXlarge: "ml.m7i.xlarge",
    MlM7i2xlarge: "ml.m7i.2xlarge",
    MlM7i4xlarge: "ml.m7i.4xlarge",
    MlM7i8xlarge: "ml.m7i.8xlarge",
    MlM7i12xlarge: "ml.m7i.12xlarge",
    MlM7i16xlarge: "ml.m7i.16xlarge",
    MlM7i24xlarge: "ml.m7i.24xlarge",
    MlM7i48xlarge: "ml.m7i.48xlarge",
    MlC7iLarge: "ml.c7i.large",
    MlC7iXlarge: "ml.c7i.xlarge",
    MlC7i2xlarge: "ml.c7i.2xlarge",
    MlC7i4xlarge: "ml.c7i.4xlarge",
    MlC7i8xlarge: "ml.c7i.8xlarge",
    MlC7i12xlarge: "ml.c7i.12xlarge",
    MlC7i16xlarge: "ml.c7i.16xlarge",
    MlC7i24xlarge: "ml.c7i.24xlarge",
    MlC7i48xlarge: "ml.c7i.48xlarge",
    MlR7iLarge: "ml.r7i.large",
    MlR7iXlarge: "ml.r7i.xlarge",
    MlR7i2xlarge: "ml.r7i.2xlarge",
    MlR7i4xlarge: "ml.r7i.4xlarge",
    MlR7i8xlarge: "ml.r7i.8xlarge",
    MlR7i12xlarge: "ml.r7i.12xlarge",
    MlR7i16xlarge: "ml.r7i.16xlarge",
    MlR7i24xlarge: "ml.r7i.24xlarge",
    MlR7i48xlarge: "ml.r7i.48xlarge",
} as const;

/**
 * The ML compute instance type for the processing job.
 */
export type ProcessingJobClusterConfigInstanceType = (typeof ProcessingJobClusterConfigInstanceType)[keyof typeof ProcessingJobClusterConfigInstanceType];

export const ProcessingJobDatasetDefinitionDataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether the generated dataset is FullyReplicated or ShardedByS3Key (default).
 */
export type ProcessingJobDatasetDefinitionDataDistributionType = (typeof ProcessingJobDatasetDefinitionDataDistributionType)[keyof typeof ProcessingJobDatasetDefinitionDataDistributionType];

export const ProcessingJobDatasetDefinitionInputMode = {
    File: "File",
    Pipe: "Pipe",
} as const;

/**
 * Whether to use File or Pipe input mode. In File (default) mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In Pipe mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.
 */
export type ProcessingJobDatasetDefinitionInputMode = (typeof ProcessingJobDatasetDefinitionInputMode)[keyof typeof ProcessingJobDatasetDefinitionInputMode];

export const ProcessingJobRedshiftDatasetDefinitionOutputCompression = {
    None: "None",
    Gzip: "GZIP",
    Snappy: "SNAPPY",
    Zstd: "ZSTD",
    Bzip2: "BZIP2",
} as const;

/**
 * The compression used for Redshift query results.
 */
export type ProcessingJobRedshiftDatasetDefinitionOutputCompression = (typeof ProcessingJobRedshiftDatasetDefinitionOutputCompression)[keyof typeof ProcessingJobRedshiftDatasetDefinitionOutputCompression];

export const ProcessingJobRedshiftDatasetDefinitionOutputFormat = {
    Parquet: "PARQUET",
    Csv: "CSV",
} as const;

/**
 * The data storage format for Redshift query results.
 */
export type ProcessingJobRedshiftDatasetDefinitionOutputFormat = (typeof ProcessingJobRedshiftDatasetDefinitionOutputFormat)[keyof typeof ProcessingJobRedshiftDatasetDefinitionOutputFormat];

export const ProcessingJobS3InputS3CompressionType = {
    None: "None",
    Gzip: "Gzip",
} as const;

/**
 * Whether to GZIP-decompress the data in Amazon S3 as it is streamed into the processing container. `Gzip` can only be used when `Pipe` mode is specified as the `S3InputMode`. In `Pipe` mode, Amazon SageMaker streams input data from the source directly to your container without using the EBS volume.
 */
export type ProcessingJobS3InputS3CompressionType = (typeof ProcessingJobS3InputS3CompressionType)[keyof typeof ProcessingJobS3InputS3CompressionType];

export const ProcessingJobS3InputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether to distribute the data from Amazon S3 to all processing instances with `FullyReplicated`, or whether the data from Amazon S3 is shared by Amazon S3 key, downloading one shard of data to each processing instance.
 */
export type ProcessingJobS3InputS3DataDistributionType = (typeof ProcessingJobS3InputS3DataDistributionType)[keyof typeof ProcessingJobS3InputS3DataDistributionType];

export const ProcessingJobS3InputS3DataType = {
    ManifestFile: "ManifestFile",
    S3Prefix: "S3Prefix",
} as const;

/**
 * Whether you use an S3Prefix or a ManifestFile for the data type. If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for the processing job. If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for the processing job.
 */
export type ProcessingJobS3InputS3DataType = (typeof ProcessingJobS3InputS3DataType)[keyof typeof ProcessingJobS3InputS3DataType];

export const ProcessingJobS3InputS3InputMode = {
    File: "File",
    Pipe: "Pipe",
} as const;

/**
 * Whether to use File or Pipe input mode. In File mode, Amazon SageMaker copies the data from the input source onto the local ML storage volume before starting your processing container. This is the most commonly used input mode. In Pipe mode, Amazon SageMaker streams input data from the source directly to your processing container into named pipes without using the ML storage volume.
 */
export type ProcessingJobS3InputS3InputMode = (typeof ProcessingJobS3InputS3InputMode)[keyof typeof ProcessingJobS3InputS3InputMode];

export const ProcessingJobS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the processing job continuously or after the job completes.
 */
export type ProcessingJobS3OutputS3UploadMode = (typeof ProcessingJobS3OutputS3UploadMode)[keyof typeof ProcessingJobS3OutputS3UploadMode];

export const ProcessingJobStatus = {
    Completed: "Completed",
    InProgress: "InProgress",
    Stopping: "Stopping",
    Stopped: "Stopped",
    Failed: "Failed",
} as const;

/**
 * Provides the status of a processing job.
 */
export type ProcessingJobStatus = (typeof ProcessingJobStatus)[keyof typeof ProcessingJobStatus];

export const ProjectStatus = {
    Pending: "Pending",
    CreateInProgress: "CreateInProgress",
    CreateCompleted: "CreateCompleted",
    CreateFailed: "CreateFailed",
    DeleteInProgress: "DeleteInProgress",
    DeleteFailed: "DeleteFailed",
    DeleteCompleted: "DeleteCompleted",
} as const;

/**
 * The status of a project.
 */
export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus];

export const SpaceAppType = {
    JupyterServer: "JupyterServer",
    KernelGateway: "KernelGateway",
    TensorBoard: "TensorBoard",
    RStudioServerPro: "RStudioServerPro",
    RSessionGateway: "RSessionGateway",
    JupyterLab: "JupyterLab",
    CodeEditor: "CodeEditor",
} as const;

export type SpaceAppType = (typeof SpaceAppType)[keyof typeof SpaceAppType];

export const SpaceManagedResources = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * The flag to enable/disable creation of space managed resources.
 */
export type SpaceManagedResources = (typeof SpaceManagedResources)[keyof typeof SpaceManagedResources];

export const SpaceRemoteAccess = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * The flag to enable/disable remote access for a space.
 */
export type SpaceRemoteAccess = (typeof SpaceRemoteAccess)[keyof typeof SpaceRemoteAccess];

export const SpaceResourceSpecInstanceType = {
    System: "system",
    MlT3Micro: "ml.t3.micro",
    MlT3Small: "ml.t3.small",
    MlT3Medium: "ml.t3.medium",
    MlT3Large: "ml.t3.large",
    MlT3Xlarge: "ml.t3.xlarge",
    MlT32xlarge: "ml.t3.2xlarge",
    MlM5Large: "ml.m5.large",
    MlM5Xlarge: "ml.m5.xlarge",
    MlM52xlarge: "ml.m5.2xlarge",
    MlM54xlarge: "ml.m5.4xlarge",
    MlM58xlarge: "ml.m5.8xlarge",
    MlM512xlarge: "ml.m5.12xlarge",
    MlM516xlarge: "ml.m5.16xlarge",
    MlM524xlarge: "ml.m5.24xlarge",
    MlM5dLarge: "ml.m5d.large",
    MlM5dXlarge: "ml.m5d.xlarge",
    MlM5d2xlarge: "ml.m5d.2xlarge",
    MlM5d4xlarge: "ml.m5d.4xlarge",
    MlM5d8xlarge: "ml.m5d.8xlarge",
    MlM5d12xlarge: "ml.m5d.12xlarge",
    MlM5d16xlarge: "ml.m5d.16xlarge",
    MlM5d24xlarge: "ml.m5d.24xlarge",
    MlC5Large: "ml.c5.large",
    MlC5Xlarge: "ml.c5.xlarge",
    MlC52xlarge: "ml.c5.2xlarge",
    MlC54xlarge: "ml.c5.4xlarge",
    MlC59xlarge: "ml.c5.9xlarge",
    MlC512xlarge: "ml.c5.12xlarge",
    MlC518xlarge: "ml.c5.18xlarge",
    MlC524xlarge: "ml.c5.24xlarge",
    MlP32xlarge: "ml.p3.2xlarge",
    MlP38xlarge: "ml.p3.8xlarge",
    MlP316xlarge: "ml.p3.16xlarge",
    MlP3dn24xlarge: "ml.p3dn.24xlarge",
    MlG4dnXlarge: "ml.g4dn.xlarge",
    MlG4dn2xlarge: "ml.g4dn.2xlarge",
    MlG4dn4xlarge: "ml.g4dn.4xlarge",
    MlG4dn8xlarge: "ml.g4dn.8xlarge",
    MlG4dn12xlarge: "ml.g4dn.12xlarge",
    MlG4dn16xlarge: "ml.g4dn.16xlarge",
    MlR5Large: "ml.r5.large",
    MlR5Xlarge: "ml.r5.xlarge",
    MlR52xlarge: "ml.r5.2xlarge",
    MlR54xlarge: "ml.r5.4xlarge",
    MlR58xlarge: "ml.r5.8xlarge",
    MlR512xlarge: "ml.r5.12xlarge",
    MlR516xlarge: "ml.r5.16xlarge",
    MlR524xlarge: "ml.r5.24xlarge",
    MlG5Xlarge: "ml.g5.xlarge",
    MlG52xlarge: "ml.g5.2xlarge",
    MlG54xlarge: "ml.g5.4xlarge",
    MlG58xlarge: "ml.g5.8xlarge",
    MlG512xlarge: "ml.g5.12xlarge",
    MlG516xlarge: "ml.g5.16xlarge",
    MlG524xlarge: "ml.g5.24xlarge",
    MlG548xlarge: "ml.g5.48xlarge",
    MlG6Xlarge: "ml.g6.xlarge",
    MlG62xlarge: "ml.g6.2xlarge",
    MlG64xlarge: "ml.g6.4xlarge",
    MlG68xlarge: "ml.g6.8xlarge",
    MlG612xlarge: "ml.g6.12xlarge",
    MlG616xlarge: "ml.g6.16xlarge",
    MlG624xlarge: "ml.g6.24xlarge",
    MlG648xlarge: "ml.g6.48xlarge",
    MlG6eXlarge: "ml.g6e.xlarge",
    MlG6e2xlarge: "ml.g6e.2xlarge",
    MlG6e4xlarge: "ml.g6e.4xlarge",
    MlG6e8xlarge: "ml.g6e.8xlarge",
    MlG6e12xlarge: "ml.g6e.12xlarge",
    MlG6e16xlarge: "ml.g6e.16xlarge",
    MlG6e24xlarge: "ml.g6e.24xlarge",
    MlG6e48xlarge: "ml.g6e.48xlarge",
    MlGeospatialInteractive: "ml.geospatial.interactive",
    MlP4d24xlarge: "ml.p4d.24xlarge",
    MlP4de24xlarge: "ml.p4de.24xlarge",
    MlTrn12xlarge: "ml.trn1.2xlarge",
    MlTrn132xlarge: "ml.trn1.32xlarge",
    MlTrn1n32xlarge: "ml.trn1n.32xlarge",
    MlP548xlarge: "ml.p5.48xlarge",
    MlP5e48xlarge: "ml.p5e.48xlarge",
    MlP5en48xlarge: "ml.p5en.48xlarge",
    MlM6iLarge: "ml.m6i.large",
    MlM6iXlarge: "ml.m6i.xlarge",
    MlM6i2xlarge: "ml.m6i.2xlarge",
    MlM6i4xlarge: "ml.m6i.4xlarge",
    MlM6i8xlarge: "ml.m6i.8xlarge",
    MlM6i12xlarge: "ml.m6i.12xlarge",
    MlM6i16xlarge: "ml.m6i.16xlarge",
    MlM6i24xlarge: "ml.m6i.24xlarge",
    MlM6i32xlarge: "ml.m6i.32xlarge",
    MlM7iLarge: "ml.m7i.large",
    MlM7iXlarge: "ml.m7i.xlarge",
    MlM7i2xlarge: "ml.m7i.2xlarge",
    MlM7i4xlarge: "ml.m7i.4xlarge",
    MlM7i8xlarge: "ml.m7i.8xlarge",
    MlM7i12xlarge: "ml.m7i.12xlarge",
    MlM7i16xlarge: "ml.m7i.16xlarge",
    MlM7i24xlarge: "ml.m7i.24xlarge",
    MlM7i48xlarge: "ml.m7i.48xlarge",
    MlC6iLarge: "ml.c6i.large",
    MlC6iXlarge: "ml.c6i.xlarge",
    MlC6i2xlarge: "ml.c6i.2xlarge",
    MlC6i4xlarge: "ml.c6i.4xlarge",
    MlC6i8xlarge: "ml.c6i.8xlarge",
    MlC6i12xlarge: "ml.c6i.12xlarge",
    MlC6i16xlarge: "ml.c6i.16xlarge",
    MlC6i24xlarge: "ml.c6i.24xlarge",
    MlC6i32xlarge: "ml.c6i.32xlarge",
    MlC7iLarge: "ml.c7i.large",
    MlC7iXlarge: "ml.c7i.xlarge",
    MlC7i2xlarge: "ml.c7i.2xlarge",
    MlC7i4xlarge: "ml.c7i.4xlarge",
    MlC7i8xlarge: "ml.c7i.8xlarge",
    MlC7i12xlarge: "ml.c7i.12xlarge",
    MlC7i16xlarge: "ml.c7i.16xlarge",
    MlC7i24xlarge: "ml.c7i.24xlarge",
    MlC7i48xlarge: "ml.c7i.48xlarge",
    MlR6iLarge: "ml.r6i.large",
    MlR6iXlarge: "ml.r6i.xlarge",
    MlR6i2xlarge: "ml.r6i.2xlarge",
    MlR6i4xlarge: "ml.r6i.4xlarge",
    MlR6i8xlarge: "ml.r6i.8xlarge",
    MlR6i12xlarge: "ml.r6i.12xlarge",
    MlR6i16xlarge: "ml.r6i.16xlarge",
    MlR6i24xlarge: "ml.r6i.24xlarge",
    MlR6i32xlarge: "ml.r6i.32xlarge",
    MlR7iLarge: "ml.r7i.large",
    MlR7iXlarge: "ml.r7i.xlarge",
    MlR7i2xlarge: "ml.r7i.2xlarge",
    MlR7i4xlarge: "ml.r7i.4xlarge",
    MlR7i8xlarge: "ml.r7i.8xlarge",
    MlR7i12xlarge: "ml.r7i.12xlarge",
    MlR7i16xlarge: "ml.r7i.16xlarge",
    MlR7i24xlarge: "ml.r7i.24xlarge",
    MlR7i48xlarge: "ml.r7i.48xlarge",
    MlM6idLarge: "ml.m6id.large",
    MlM6idXlarge: "ml.m6id.xlarge",
    MlM6id2xlarge: "ml.m6id.2xlarge",
    MlM6id4xlarge: "ml.m6id.4xlarge",
    MlM6id8xlarge: "ml.m6id.8xlarge",
    MlM6id12xlarge: "ml.m6id.12xlarge",
    MlM6id16xlarge: "ml.m6id.16xlarge",
    MlM6id24xlarge: "ml.m6id.24xlarge",
    MlM6id32xlarge: "ml.m6id.32xlarge",
    MlC6idLarge: "ml.c6id.large",
    MlC6idXlarge: "ml.c6id.xlarge",
    MlC6id2xlarge: "ml.c6id.2xlarge",
    MlC6id4xlarge: "ml.c6id.4xlarge",
    MlC6id8xlarge: "ml.c6id.8xlarge",
    MlC6id12xlarge: "ml.c6id.12xlarge",
    MlC6id16xlarge: "ml.c6id.16xlarge",
    MlC6id24xlarge: "ml.c6id.24xlarge",
    MlC6id32xlarge: "ml.c6id.32xlarge",
    MlR6idLarge: "ml.r6id.large",
    MlR6idXlarge: "ml.r6id.xlarge",
    MlR6id2xlarge: "ml.r6id.2xlarge",
    MlR6id4xlarge: "ml.r6id.4xlarge",
    MlR6id8xlarge: "ml.r6id.8xlarge",
    MlR6id12xlarge: "ml.r6id.12xlarge",
    MlR6id16xlarge: "ml.r6id.16xlarge",
    MlR6id24xlarge: "ml.r6id.24xlarge",
    MlR6id32xlarge: "ml.r6id.32xlarge",
} as const;

/**
 * The instance type that the image version runs on.
 */
export type SpaceResourceSpecInstanceType = (typeof SpaceResourceSpecInstanceType)[keyof typeof SpaceResourceSpecInstanceType];

export const SpaceSharingSettingsSharingType = {
    Private: "Private",
    Shared: "Shared",
} as const;

/**
 * Specifies the sharing type of the space.
 */
export type SpaceSharingSettingsSharingType = (typeof SpaceSharingSettingsSharingType)[keyof typeof SpaceSharingSettingsSharingType];

export const StudioLifecycleConfigAppType = {
    JupyterServer: "JupyterServer",
    KernelGateway: "KernelGateway",
    CodeEditor: "CodeEditor",
    JupyterLab: "JupyterLab",
} as const;

/**
 * The App type that the Lifecycle Configuration is attached to.
 */
export type StudioLifecycleConfigAppType = (typeof StudioLifecycleConfigAppType)[keyof typeof StudioLifecycleConfigAppType];

export const UserProfileAppInstanceType = {
    System: "system",
    MlT3Micro: "ml.t3.micro",
    MlT3Small: "ml.t3.small",
    MlT3Medium: "ml.t3.medium",
    MlT3Large: "ml.t3.large",
    MlT3Xlarge: "ml.t3.xlarge",
    MlT32xlarge: "ml.t3.2xlarge",
    MlM5Large: "ml.m5.large",
    MlM5Xlarge: "ml.m5.xlarge",
    MlM52xlarge: "ml.m5.2xlarge",
    MlM54xlarge: "ml.m5.4xlarge",
    MlM58xlarge: "ml.m5.8xlarge",
    MlM512xlarge: "ml.m5.12xlarge",
    MlM516xlarge: "ml.m5.16xlarge",
    MlM524xlarge: "ml.m5.24xlarge",
    MlM5dLarge: "ml.m5d.large",
    MlM5dXlarge: "ml.m5d.xlarge",
    MlM5d2xlarge: "ml.m5d.2xlarge",
    MlM5d4xlarge: "ml.m5d.4xlarge",
    MlM5d8xlarge: "ml.m5d.8xlarge",
    MlM5d12xlarge: "ml.m5d.12xlarge",
    MlM5d16xlarge: "ml.m5d.16xlarge",
    MlM5d24xlarge: "ml.m5d.24xlarge",
    MlC5Large: "ml.c5.large",
    MlC5Xlarge: "ml.c5.xlarge",
    MlC52xlarge: "ml.c5.2xlarge",
    MlC54xlarge: "ml.c5.4xlarge",
    MlC59xlarge: "ml.c5.9xlarge",
    MlC512xlarge: "ml.c5.12xlarge",
    MlC518xlarge: "ml.c5.18xlarge",
    MlC524xlarge: "ml.c5.24xlarge",
    MlP32xlarge: "ml.p3.2xlarge",
    MlP38xlarge: "ml.p3.8xlarge",
    MlP316xlarge: "ml.p3.16xlarge",
    MlP3dn24xlarge: "ml.p3dn.24xlarge",
    MlG4dnXlarge: "ml.g4dn.xlarge",
    MlG4dn2xlarge: "ml.g4dn.2xlarge",
    MlG4dn4xlarge: "ml.g4dn.4xlarge",
    MlG4dn8xlarge: "ml.g4dn.8xlarge",
    MlG4dn12xlarge: "ml.g4dn.12xlarge",
    MlG4dn16xlarge: "ml.g4dn.16xlarge",
    MlR5Large: "ml.r5.large",
    MlR5Xlarge: "ml.r5.xlarge",
    MlR52xlarge: "ml.r5.2xlarge",
    MlR54xlarge: "ml.r5.4xlarge",
    MlR58xlarge: "ml.r5.8xlarge",
    MlR512xlarge: "ml.r5.12xlarge",
    MlR516xlarge: "ml.r5.16xlarge",
    MlR524xlarge: "ml.r5.24xlarge",
    MlG5Xlarge: "ml.g5.xlarge",
    MlG52xlarge: "ml.g5.2xlarge",
    MlG54xlarge: "ml.g5.4xlarge",
    MlG58xlarge: "ml.g5.8xlarge",
    MlG512xlarge: "ml.g5.12xlarge",
    MlG516xlarge: "ml.g5.16xlarge",
    MlG524xlarge: "ml.g5.24xlarge",
    MlG548xlarge: "ml.g5.48xlarge",
    MlG6Xlarge: "ml.g6.xlarge",
    MlG62xlarge: "ml.g6.2xlarge",
    MlG64xlarge: "ml.g6.4xlarge",
    MlG68xlarge: "ml.g6.8xlarge",
    MlG612xlarge: "ml.g6.12xlarge",
    MlG616xlarge: "ml.g6.16xlarge",
    MlG624xlarge: "ml.g6.24xlarge",
    MlG648xlarge: "ml.g6.48xlarge",
    MlG6eXlarge: "ml.g6e.xlarge",
    MlG6e2xlarge: "ml.g6e.2xlarge",
    MlG6e4xlarge: "ml.g6e.4xlarge",
    MlG6e8xlarge: "ml.g6e.8xlarge",
    MlG6e12xlarge: "ml.g6e.12xlarge",
    MlG6e16xlarge: "ml.g6e.16xlarge",
    MlG6e24xlarge: "ml.g6e.24xlarge",
    MlG6e48xlarge: "ml.g6e.48xlarge",
    MlGeospatialInteractive: "ml.geospatial.interactive",
    MlP4d24xlarge: "ml.p4d.24xlarge",
    MlP4de24xlarge: "ml.p4de.24xlarge",
    MlTrn12xlarge: "ml.trn1.2xlarge",
    MlTrn132xlarge: "ml.trn1.32xlarge",
    MlTrn1n32xlarge: "ml.trn1n.32xlarge",
    MlP548xlarge: "ml.p5.48xlarge",
    MlM6iLarge: "ml.m6i.large",
    MlM6iXlarge: "ml.m6i.xlarge",
    MlM6i2xlarge: "ml.m6i.2xlarge",
    MlM6i4xlarge: "ml.m6i.4xlarge",
    MlM6i8xlarge: "ml.m6i.8xlarge",
    MlM6i12xlarge: "ml.m6i.12xlarge",
    MlM6i16xlarge: "ml.m6i.16xlarge",
    MlM6i24xlarge: "ml.m6i.24xlarge",
    MlM6i32xlarge: "ml.m6i.32xlarge",
    MlM7iLarge: "ml.m7i.large",
    MlM7iXlarge: "ml.m7i.xlarge",
    MlM7i2xlarge: "ml.m7i.2xlarge",
    MlM7i4xlarge: "ml.m7i.4xlarge",
    MlM7i8xlarge: "ml.m7i.8xlarge",
    MlM7i12xlarge: "ml.m7i.12xlarge",
    MlM7i16xlarge: "ml.m7i.16xlarge",
    MlM7i24xlarge: "ml.m7i.24xlarge",
    MlM7i48xlarge: "ml.m7i.48xlarge",
    MlC6iLarge: "ml.c6i.large",
    MlC6iXlarge: "ml.c6i.xlarge",
    MlC6i2xlarge: "ml.c6i.2xlarge",
    MlC6i4xlarge: "ml.c6i.4xlarge",
    MlC6i8xlarge: "ml.c6i.8xlarge",
    MlC6i12xlarge: "ml.c6i.12xlarge",
    MlC6i16xlarge: "ml.c6i.16xlarge",
    MlC6i24xlarge: "ml.c6i.24xlarge",
    MlC6i32xlarge: "ml.c6i.32xlarge",
    MlC7iLarge: "ml.c7i.large",
    MlC7iXlarge: "ml.c7i.xlarge",
    MlC7i2xlarge: "ml.c7i.2xlarge",
    MlC7i4xlarge: "ml.c7i.4xlarge",
    MlC7i8xlarge: "ml.c7i.8xlarge",
    MlC7i12xlarge: "ml.c7i.12xlarge",
    MlC7i16xlarge: "ml.c7i.16xlarge",
    MlC7i24xlarge: "ml.c7i.24xlarge",
    MlC7i48xlarge: "ml.c7i.48xlarge",
    MlR6iLarge: "ml.r6i.large",
    MlR6iXlarge: "ml.r6i.xlarge",
    MlR6i2xlarge: "ml.r6i.2xlarge",
    MlR6i4xlarge: "ml.r6i.4xlarge",
    MlR6i8xlarge: "ml.r6i.8xlarge",
    MlR6i12xlarge: "ml.r6i.12xlarge",
    MlR6i16xlarge: "ml.r6i.16xlarge",
    MlR6i24xlarge: "ml.r6i.24xlarge",
    MlR6i32xlarge: "ml.r6i.32xlarge",
    MlR7iLarge: "ml.r7i.large",
    MlR7iXlarge: "ml.r7i.xlarge",
    MlR7i2xlarge: "ml.r7i.2xlarge",
    MlR7i4xlarge: "ml.r7i.4xlarge",
    MlR7i8xlarge: "ml.r7i.8xlarge",
    MlR7i12xlarge: "ml.r7i.12xlarge",
    MlR7i16xlarge: "ml.r7i.16xlarge",
    MlR7i24xlarge: "ml.r7i.24xlarge",
    MlR7i48xlarge: "ml.r7i.48xlarge",
    MlM6idLarge: "ml.m6id.large",
    MlM6idXlarge: "ml.m6id.xlarge",
    MlM6id2xlarge: "ml.m6id.2xlarge",
    MlM6id4xlarge: "ml.m6id.4xlarge",
    MlM6id8xlarge: "ml.m6id.8xlarge",
    MlM6id12xlarge: "ml.m6id.12xlarge",
    MlM6id16xlarge: "ml.m6id.16xlarge",
    MlM6id24xlarge: "ml.m6id.24xlarge",
    MlM6id32xlarge: "ml.m6id.32xlarge",
    MlC6idLarge: "ml.c6id.large",
    MlC6idXlarge: "ml.c6id.xlarge",
    MlC6id2xlarge: "ml.c6id.2xlarge",
    MlC6id4xlarge: "ml.c6id.4xlarge",
    MlC6id8xlarge: "ml.c6id.8xlarge",
    MlC6id12xlarge: "ml.c6id.12xlarge",
    MlC6id16xlarge: "ml.c6id.16xlarge",
    MlC6id24xlarge: "ml.c6id.24xlarge",
    MlC6id32xlarge: "ml.c6id.32xlarge",
    MlR6idLarge: "ml.r6id.large",
    MlR6idXlarge: "ml.r6id.xlarge",
    MlR6id2xlarge: "ml.r6id.2xlarge",
    MlR6id4xlarge: "ml.r6id.4xlarge",
    MlR6id8xlarge: "ml.r6id.8xlarge",
    MlR6id12xlarge: "ml.r6id.12xlarge",
    MlR6id16xlarge: "ml.r6id.16xlarge",
    MlR6id24xlarge: "ml.r6id.24xlarge",
    MlR6id32xlarge: "ml.r6id.32xlarge",
} as const;

/**
 * The instance type that the image version runs on.
 */
export type UserProfileAppInstanceType = (typeof UserProfileAppInstanceType)[keyof typeof UserProfileAppInstanceType];

export const UserProfileAppType = {
    JupyterServer: "JupyterServer",
    TensorBoard: "TensorBoard",
    RStudioServerPro: "RStudioServerPro",
    JupyterLab: "JupyterLab",
    CodeEditor: "CodeEditor",
    DetailedProfiler: "DetailedProfiler",
    Canvas: "Canvas",
} as const;

export type UserProfileAppType = (typeof UserProfileAppType)[keyof typeof UserProfileAppType];

export const UserProfileHiddenSageMakerImageSageMakerImageName = {
    SagemakerDistribution: "sagemaker_distribution",
} as const;

/**
 * The SageMaker image name that you are hiding from the Studio user interface.
 */
export type UserProfileHiddenSageMakerImageSageMakerImageName = (typeof UserProfileHiddenSageMakerImageSageMakerImageName)[keyof typeof UserProfileHiddenSageMakerImageSageMakerImageName];

export const UserProfileLifecycleManagement = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * A flag to enable/disable AppLifecycleManagement settings
 */
export type UserProfileLifecycleManagement = (typeof UserProfileLifecycleManagement)[keyof typeof UserProfileLifecycleManagement];

export const UserProfileMlTools = {
    DataWrangler: "DataWrangler",
    FeatureStore: "FeatureStore",
    EmrClusters: "EmrClusters",
    AutoMl: "AutoMl",
    Experiments: "Experiments",
    Training: "Training",
    ModelEvaluation: "ModelEvaluation",
    Pipelines: "Pipelines",
    Models: "Models",
    JumpStart: "JumpStart",
    InferenceRecommender: "InferenceRecommender",
    Endpoints: "Endpoints",
    Projects: "Projects",
    InferenceOptimization: "InferenceOptimization",
    HyperPodClusters: "HyperPodClusters",
    Comet: "Comet",
    DeepchecksLlmEvaluation: "DeepchecksLLMEvaluation",
    Fiddler: "Fiddler",
    LakeraGuard: "LakeraGuard",
    PerformanceEvaluation: "PerformanceEvaluation",
} as const;

export type UserProfileMlTools = (typeof UserProfileMlTools)[keyof typeof UserProfileMlTools];

export const UserProfileRStudioServerProAppSettingsAccessStatus = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Indicates whether the current user has access to the RStudioServerPro app.
 */
export type UserProfileRStudioServerProAppSettingsAccessStatus = (typeof UserProfileRStudioServerProAppSettingsAccessStatus)[keyof typeof UserProfileRStudioServerProAppSettingsAccessStatus];

export const UserProfileRStudioServerProAppSettingsUserGroup = {
    RStudioAdmin: "R_STUDIO_ADMIN",
    RStudioUser: "R_STUDIO_USER",
} as const;

/**
 * The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
 */
export type UserProfileRStudioServerProAppSettingsUserGroup = (typeof UserProfileRStudioServerProAppSettingsUserGroup)[keyof typeof UserProfileRStudioServerProAppSettingsUserGroup];

export const UserProfileResourceSpecInstanceType = {
    System: "system",
    MlT3Micro: "ml.t3.micro",
    MlT3Small: "ml.t3.small",
    MlT3Medium: "ml.t3.medium",
    MlT3Large: "ml.t3.large",
    MlT3Xlarge: "ml.t3.xlarge",
    MlT32xlarge: "ml.t3.2xlarge",
    MlM5Large: "ml.m5.large",
    MlM5Xlarge: "ml.m5.xlarge",
    MlM52xlarge: "ml.m5.2xlarge",
    MlM54xlarge: "ml.m5.4xlarge",
    MlM58xlarge: "ml.m5.8xlarge",
    MlM512xlarge: "ml.m5.12xlarge",
    MlM516xlarge: "ml.m5.16xlarge",
    MlM524xlarge: "ml.m5.24xlarge",
    MlM5dLarge: "ml.m5d.large",
    MlM5dXlarge: "ml.m5d.xlarge",
    MlM5d2xlarge: "ml.m5d.2xlarge",
    MlM5d4xlarge: "ml.m5d.4xlarge",
    MlM5d8xlarge: "ml.m5d.8xlarge",
    MlM5d12xlarge: "ml.m5d.12xlarge",
    MlM5d16xlarge: "ml.m5d.16xlarge",
    MlM5d24xlarge: "ml.m5d.24xlarge",
    MlC5Large: "ml.c5.large",
    MlC5Xlarge: "ml.c5.xlarge",
    MlC52xlarge: "ml.c5.2xlarge",
    MlC54xlarge: "ml.c5.4xlarge",
    MlC59xlarge: "ml.c5.9xlarge",
    MlC512xlarge: "ml.c5.12xlarge",
    MlC518xlarge: "ml.c5.18xlarge",
    MlC524xlarge: "ml.c5.24xlarge",
    MlP32xlarge: "ml.p3.2xlarge",
    MlP38xlarge: "ml.p3.8xlarge",
    MlP316xlarge: "ml.p3.16xlarge",
    MlP3dn24xlarge: "ml.p3dn.24xlarge",
    MlG4dnXlarge: "ml.g4dn.xlarge",
    MlG4dn2xlarge: "ml.g4dn.2xlarge",
    MlG4dn4xlarge: "ml.g4dn.4xlarge",
    MlG4dn8xlarge: "ml.g4dn.8xlarge",
    MlG4dn12xlarge: "ml.g4dn.12xlarge",
    MlG4dn16xlarge: "ml.g4dn.16xlarge",
    MlR5Large: "ml.r5.large",
    MlR5Xlarge: "ml.r5.xlarge",
    MlR52xlarge: "ml.r5.2xlarge",
    MlR54xlarge: "ml.r5.4xlarge",
    MlR58xlarge: "ml.r5.8xlarge",
    MlR512xlarge: "ml.r5.12xlarge",
    MlR516xlarge: "ml.r5.16xlarge",
    MlR524xlarge: "ml.r5.24xlarge",
    MlG5Xlarge: "ml.g5.xlarge",
    MlG52xlarge: "ml.g5.2xlarge",
    MlG54xlarge: "ml.g5.4xlarge",
    MlG58xlarge: "ml.g5.8xlarge",
    MlG512xlarge: "ml.g5.12xlarge",
    MlG516xlarge: "ml.g5.16xlarge",
    MlG524xlarge: "ml.g5.24xlarge",
    MlG548xlarge: "ml.g5.48xlarge",
    MlG6Xlarge: "ml.g6.xlarge",
    MlG62xlarge: "ml.g6.2xlarge",
    MlG64xlarge: "ml.g6.4xlarge",
    MlG68xlarge: "ml.g6.8xlarge",
    MlG612xlarge: "ml.g6.12xlarge",
    MlG616xlarge: "ml.g6.16xlarge",
    MlG624xlarge: "ml.g6.24xlarge",
    MlG648xlarge: "ml.g6.48xlarge",
    MlG6eXlarge: "ml.g6e.xlarge",
    MlG6e2xlarge: "ml.g6e.2xlarge",
    MlG6e4xlarge: "ml.g6e.4xlarge",
    MlG6e8xlarge: "ml.g6e.8xlarge",
    MlG6e12xlarge: "ml.g6e.12xlarge",
    MlG6e16xlarge: "ml.g6e.16xlarge",
    MlG6e24xlarge: "ml.g6e.24xlarge",
    MlG6e48xlarge: "ml.g6e.48xlarge",
    MlGeospatialInteractive: "ml.geospatial.interactive",
    MlP4d24xlarge: "ml.p4d.24xlarge",
    MlP4de24xlarge: "ml.p4de.24xlarge",
    MlTrn12xlarge: "ml.trn1.2xlarge",
    MlTrn132xlarge: "ml.trn1.32xlarge",
    MlTrn1n32xlarge: "ml.trn1n.32xlarge",
    MlP548xlarge: "ml.p5.48xlarge",
    MlP5e48xlarge: "ml.p5e.48xlarge",
    MlP5en48xlarge: "ml.p5en.48xlarge",
    MlM6iLarge: "ml.m6i.large",
    MlM6iXlarge: "ml.m6i.xlarge",
    MlM6i2xlarge: "ml.m6i.2xlarge",
    MlM6i4xlarge: "ml.m6i.4xlarge",
    MlM6i8xlarge: "ml.m6i.8xlarge",
    MlM6i12xlarge: "ml.m6i.12xlarge",
    MlM6i16xlarge: "ml.m6i.16xlarge",
    MlM6i24xlarge: "ml.m6i.24xlarge",
    MlM6i32xlarge: "ml.m6i.32xlarge",
    MlM7iLarge: "ml.m7i.large",
    MlM7iXlarge: "ml.m7i.xlarge",
    MlM7i2xlarge: "ml.m7i.2xlarge",
    MlM7i4xlarge: "ml.m7i.4xlarge",
    MlM7i8xlarge: "ml.m7i.8xlarge",
    MlM7i12xlarge: "ml.m7i.12xlarge",
    MlM7i16xlarge: "ml.m7i.16xlarge",
    MlM7i24xlarge: "ml.m7i.24xlarge",
    MlM7i48xlarge: "ml.m7i.48xlarge",
    MlC6iLarge: "ml.c6i.large",
    MlC6iXlarge: "ml.c6i.xlarge",
    MlC6i2xlarge: "ml.c6i.2xlarge",
    MlC6i4xlarge: "ml.c6i.4xlarge",
    MlC6i8xlarge: "ml.c6i.8xlarge",
    MlC6i12xlarge: "ml.c6i.12xlarge",
    MlC6i16xlarge: "ml.c6i.16xlarge",
    MlC6i24xlarge: "ml.c6i.24xlarge",
    MlC6i32xlarge: "ml.c6i.32xlarge",
    MlC7iLarge: "ml.c7i.large",
    MlC7iXlarge: "ml.c7i.xlarge",
    MlC7i2xlarge: "ml.c7i.2xlarge",
    MlC7i4xlarge: "ml.c7i.4xlarge",
    MlC7i8xlarge: "ml.c7i.8xlarge",
    MlC7i12xlarge: "ml.c7i.12xlarge",
    MlC7i16xlarge: "ml.c7i.16xlarge",
    MlC7i24xlarge: "ml.c7i.24xlarge",
    MlC7i48xlarge: "ml.c7i.48xlarge",
    MlR6iLarge: "ml.r6i.large",
    MlR6iXlarge: "ml.r6i.xlarge",
    MlR6i2xlarge: "ml.r6i.2xlarge",
    MlR6i4xlarge: "ml.r6i.4xlarge",
    MlR6i8xlarge: "ml.r6i.8xlarge",
    MlR6i12xlarge: "ml.r6i.12xlarge",
    MlR6i16xlarge: "ml.r6i.16xlarge",
    MlR6i24xlarge: "ml.r6i.24xlarge",
    MlR6i32xlarge: "ml.r6i.32xlarge",
    MlR7iLarge: "ml.r7i.large",
    MlR7iXlarge: "ml.r7i.xlarge",
    MlR7i2xlarge: "ml.r7i.2xlarge",
    MlR7i4xlarge: "ml.r7i.4xlarge",
    MlR7i8xlarge: "ml.r7i.8xlarge",
    MlR7i12xlarge: "ml.r7i.12xlarge",
    MlR7i16xlarge: "ml.r7i.16xlarge",
    MlR7i24xlarge: "ml.r7i.24xlarge",
    MlR7i48xlarge: "ml.r7i.48xlarge",
    MlM6idLarge: "ml.m6id.large",
    MlM6idXlarge: "ml.m6id.xlarge",
    MlM6id2xlarge: "ml.m6id.2xlarge",
    MlM6id4xlarge: "ml.m6id.4xlarge",
    MlM6id8xlarge: "ml.m6id.8xlarge",
    MlM6id12xlarge: "ml.m6id.12xlarge",
    MlM6id16xlarge: "ml.m6id.16xlarge",
    MlM6id24xlarge: "ml.m6id.24xlarge",
    MlM6id32xlarge: "ml.m6id.32xlarge",
    MlC6idLarge: "ml.c6id.large",
    MlC6idXlarge: "ml.c6id.xlarge",
    MlC6id2xlarge: "ml.c6id.2xlarge",
    MlC6id4xlarge: "ml.c6id.4xlarge",
    MlC6id8xlarge: "ml.c6id.8xlarge",
    MlC6id12xlarge: "ml.c6id.12xlarge",
    MlC6id16xlarge: "ml.c6id.16xlarge",
    MlC6id24xlarge: "ml.c6id.24xlarge",
    MlC6id32xlarge: "ml.c6id.32xlarge",
    MlR6idLarge: "ml.r6id.large",
    MlR6idXlarge: "ml.r6id.xlarge",
    MlR6id2xlarge: "ml.r6id.2xlarge",
    MlR6id4xlarge: "ml.r6id.4xlarge",
    MlR6id8xlarge: "ml.r6id.8xlarge",
    MlR6id12xlarge: "ml.r6id.12xlarge",
    MlR6id16xlarge: "ml.r6id.16xlarge",
    MlR6id24xlarge: "ml.r6id.24xlarge",
    MlR6id32xlarge: "ml.r6id.32xlarge",
} as const;

/**
 * The instance type that the image version runs on.
 */
export type UserProfileResourceSpecInstanceType = (typeof UserProfileResourceSpecInstanceType)[keyof typeof UserProfileResourceSpecInstanceType];

export const UserProfileSharingSettingsNotebookOutputOption = {
    Allowed: "Allowed",
    Disabled: "Disabled",
} as const;

/**
 * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
 */
export type UserProfileSharingSettingsNotebookOutputOption = (typeof UserProfileSharingSettingsNotebookOutputOption)[keyof typeof UserProfileSharingSettingsNotebookOutputOption];

export const UserProfileUserSettingsAutoMountHomeEfs = {
    Enabled: "Enabled",
    Disabled: "Disabled",
    DefaultAsDomain: "DefaultAsDomain",
} as const;

/**
 * Indicates whether auto-mounting of an EFS volume is supported for the user profile. 
 */
export type UserProfileUserSettingsAutoMountHomeEfs = (typeof UserProfileUserSettingsAutoMountHomeEfs)[keyof typeof UserProfileUserSettingsAutoMountHomeEfs];

export const UserProfileUserSettingsStudioWebPortal = {
    Enabled: "ENABLED",
    Disabled: "DISABLED",
} as const;

/**
 * Indicates whether the Studio experience is available to users. If not, users cannot access Studio.
 */
export type UserProfileUserSettingsStudioWebPortal = (typeof UserProfileUserSettingsStudioWebPortal)[keyof typeof UserProfileUserSettingsStudioWebPortal];
