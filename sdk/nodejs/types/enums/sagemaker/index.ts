// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const AppAppType = {
    JupyterServer: "JupyterServer",
    KernelGateway: "KernelGateway",
} as const;

/**
 * The type of app.
 */
export type AppAppType = (typeof AppAppType)[keyof typeof AppAppType];

export const AppResourceSpecInstanceType = {
    System: "system",
    MlT3Micro: "ml.t3.micro",
    MlT3Small: "ml.t3.small",
    MlT3Medium: "ml.t3.medium",
    MlT3Large: "ml.t3.large",
    MlT3Xlarge: "ml.t3.xlarge",
    MlT32xlarge: "ml.t3.2xlarge",
    MlM5Large: "ml.m5.large",
    MlM5Xlarge: "ml.m5.xlarge",
    MlM52xlarge: "ml.m5.2xlarge",
    MlM54xlarge: "ml.m5.4xlarge",
    MlM58xlarge: "ml.m5.8xlarge",
    MlM512xlarge: "ml.m5.12xlarge",
    MlM516xlarge: "ml.m5.16xlarge",
    MlM524xlarge: "ml.m5.24xlarge",
    MlC5Large: "ml.c5.large",
    MlC5Xlarge: "ml.c5.xlarge",
    MlC52xlarge: "ml.c5.2xlarge",
    MlC54xlarge: "ml.c5.4xlarge",
    MlC59xlarge: "ml.c5.9xlarge",
    MlC512xlarge: "ml.c5.12xlarge",
    MlC518xlarge: "ml.c5.18xlarge",
    MlC524xlarge: "ml.c5.24xlarge",
    MlP32xlarge: "ml.p3.2xlarge",
    MlP38xlarge: "ml.p3.8xlarge",
    MlP316xlarge: "ml.p3.16xlarge",
    MlG4dnXlarge: "ml.g4dn.xlarge",
    MlG4dn2xlarge: "ml.g4dn.2xlarge",
    MlG4dn4xlarge: "ml.g4dn.4xlarge",
    MlG4dn8xlarge: "ml.g4dn.8xlarge",
    MlG4dn12xlarge: "ml.g4dn.12xlarge",
    MlG4dn16xlarge: "ml.g4dn.16xlarge",
} as const;

/**
 * The instance type that the image version runs on.
 */
export type AppResourceSpecInstanceType = (typeof AppResourceSpecInstanceType)[keyof typeof AppResourceSpecInstanceType];

export const DataQualityJobDefinitionEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type DataQualityJobDefinitionEndpointInputS3DataDistributionType = (typeof DataQualityJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof DataQualityJobDefinitionEndpointInputS3DataDistributionType];

export const DataQualityJobDefinitionEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type DataQualityJobDefinitionEndpointInputS3InputMode = (typeof DataQualityJobDefinitionEndpointInputS3InputMode)[keyof typeof DataQualityJobDefinitionEndpointInputS3InputMode];

export const DataQualityJobDefinitionS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type DataQualityJobDefinitionS3OutputS3UploadMode = (typeof DataQualityJobDefinitionS3OutputS3UploadMode)[keyof typeof DataQualityJobDefinitionS3OutputS3UploadMode];

export const DomainAppNetworkAccessType = {
    PublicInternetOnly: "PublicInternetOnly",
    VpcOnly: "VpcOnly",
} as const;

/**
 * Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
 */
export type DomainAppNetworkAccessType = (typeof DomainAppNetworkAccessType)[keyof typeof DomainAppNetworkAccessType];

export const DomainAuthMode = {
    Sso: "SSO",
    Iam: "IAM",
} as const;

/**
 * The mode of authentication that members use to access the domain.
 */
export type DomainAuthMode = (typeof DomainAuthMode)[keyof typeof DomainAuthMode];

export const DomainResourceSpecInstanceType = {
    System: "system",
    MlT3Micro: "ml.t3.micro",
    MlT3Small: "ml.t3.small",
    MlT3Medium: "ml.t3.medium",
    MlT3Large: "ml.t3.large",
    MlT3Xlarge: "ml.t3.xlarge",
    MlT32xlarge: "ml.t3.2xlarge",
    MlM5Large: "ml.m5.large",
    MlM5Xlarge: "ml.m5.xlarge",
    MlM52xlarge: "ml.m5.2xlarge",
    MlM54xlarge: "ml.m5.4xlarge",
    MlM58xlarge: "ml.m5.8xlarge",
    MlM512xlarge: "ml.m5.12xlarge",
    MlM516xlarge: "ml.m5.16xlarge",
    MlM524xlarge: "ml.m5.24xlarge",
    MlC5Large: "ml.c5.large",
    MlC5Xlarge: "ml.c5.xlarge",
    MlC52xlarge: "ml.c5.2xlarge",
    MlC54xlarge: "ml.c5.4xlarge",
    MlC59xlarge: "ml.c5.9xlarge",
    MlC512xlarge: "ml.c5.12xlarge",
    MlC518xlarge: "ml.c5.18xlarge",
    MlC524xlarge: "ml.c5.24xlarge",
    MlP32xlarge: "ml.p3.2xlarge",
    MlP38xlarge: "ml.p3.8xlarge",
    MlP316xlarge: "ml.p3.16xlarge",
    MlG4dnXlarge: "ml.g4dn.xlarge",
    MlG4dn2xlarge: "ml.g4dn.2xlarge",
    MlG4dn4xlarge: "ml.g4dn.4xlarge",
    MlG4dn8xlarge: "ml.g4dn.8xlarge",
    MlG4dn12xlarge: "ml.g4dn.12xlarge",
    MlG4dn16xlarge: "ml.g4dn.16xlarge",
} as const;

/**
 * The instance type that the image version runs on.
 */
export type DomainResourceSpecInstanceType = (typeof DomainResourceSpecInstanceType)[keyof typeof DomainResourceSpecInstanceType];

export const DomainSharingSettingsNotebookOutputOption = {
    Allowed: "Allowed",
    Disabled: "Disabled",
} as const;

/**
 * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
 */
export type DomainSharingSettingsNotebookOutputOption = (typeof DomainSharingSettingsNotebookOutputOption)[keyof typeof DomainSharingSettingsNotebookOutputOption];

export const FeatureGroupFeatureDefinitionFeatureType = {
    Integral: "Integral",
    Fractional: "Fractional",
    String: "String",
} as const;

export type FeatureGroupFeatureDefinitionFeatureType = (typeof FeatureGroupFeatureDefinitionFeatureType)[keyof typeof FeatureGroupFeatureDefinitionFeatureType];

export const ModelBiasJobDefinitionEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type ModelBiasJobDefinitionEndpointInputS3DataDistributionType = (typeof ModelBiasJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof ModelBiasJobDefinitionEndpointInputS3DataDistributionType];

export const ModelBiasJobDefinitionEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type ModelBiasJobDefinitionEndpointInputS3InputMode = (typeof ModelBiasJobDefinitionEndpointInputS3InputMode)[keyof typeof ModelBiasJobDefinitionEndpointInputS3InputMode];

export const ModelBiasJobDefinitionS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type ModelBiasJobDefinitionS3OutputS3UploadMode = (typeof ModelBiasJobDefinitionS3OutputS3UploadMode)[keyof typeof ModelBiasJobDefinitionS3OutputS3UploadMode];

export const ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType = (typeof ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType];

export const ModelExplainabilityJobDefinitionEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type ModelExplainabilityJobDefinitionEndpointInputS3InputMode = (typeof ModelExplainabilityJobDefinitionEndpointInputS3InputMode)[keyof typeof ModelExplainabilityJobDefinitionEndpointInputS3InputMode];

export const ModelExplainabilityJobDefinitionS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type ModelExplainabilityJobDefinitionS3OutputS3UploadMode = (typeof ModelExplainabilityJobDefinitionS3OutputS3UploadMode)[keyof typeof ModelExplainabilityJobDefinitionS3OutputS3UploadMode];

export const ModelPackageGroupModelPackageGroupStatus = {
    Pending: "Pending",
    InProgress: "InProgress",
    Completed: "Completed",
    Failed: "Failed",
    Deleting: "Deleting",
    DeleteFailed: "DeleteFailed",
} as const;

/**
 * The status of a modelpackage group job.
 */
export type ModelPackageGroupModelPackageGroupStatus = (typeof ModelPackageGroupModelPackageGroupStatus)[keyof typeof ModelPackageGroupModelPackageGroupStatus];

export const ModelQualityJobDefinitionEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type ModelQualityJobDefinitionEndpointInputS3DataDistributionType = (typeof ModelQualityJobDefinitionEndpointInputS3DataDistributionType)[keyof typeof ModelQualityJobDefinitionEndpointInputS3DataDistributionType];

export const ModelQualityJobDefinitionEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type ModelQualityJobDefinitionEndpointInputS3InputMode = (typeof ModelQualityJobDefinitionEndpointInputS3InputMode)[keyof typeof ModelQualityJobDefinitionEndpointInputS3InputMode];

export const ModelQualityJobDefinitionProblemType = {
    BinaryClassification: "BinaryClassification",
    MulticlassClassification: "MulticlassClassification",
    Regression: "Regression",
} as const;

/**
 * The status of the monitoring job.
 */
export type ModelQualityJobDefinitionProblemType = (typeof ModelQualityJobDefinitionProblemType)[keyof typeof ModelQualityJobDefinitionProblemType];

export const ModelQualityJobDefinitionS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type ModelQualityJobDefinitionS3OutputS3UploadMode = (typeof ModelQualityJobDefinitionS3OutputS3UploadMode)[keyof typeof ModelQualityJobDefinitionS3OutputS3UploadMode];

export const MonitoringScheduleEndpointInputS3DataDistributionType = {
    FullyReplicated: "FullyReplicated",
    ShardedByS3Key: "ShardedByS3Key",
} as const;

/**
 * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
 */
export type MonitoringScheduleEndpointInputS3DataDistributionType = (typeof MonitoringScheduleEndpointInputS3DataDistributionType)[keyof typeof MonitoringScheduleEndpointInputS3DataDistributionType];

export const MonitoringScheduleEndpointInputS3InputMode = {
    Pipe: "Pipe",
    File: "File",
} as const;

/**
 * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
 */
export type MonitoringScheduleEndpointInputS3InputMode = (typeof MonitoringScheduleEndpointInputS3InputMode)[keyof typeof MonitoringScheduleEndpointInputS3InputMode];

export const MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus = {
    Pending: "Pending",
    Completed: "Completed",
    CompletedWithViolations: "CompletedWithViolations",
    InProgress: "InProgress",
    Failed: "Failed",
    Stopping: "Stopping",
    Stopped: "Stopped",
} as const;

/**
 * The status of the monitoring job.
 */
export type MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus = (typeof MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus)[keyof typeof MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus];

export const MonitoringScheduleMonitoringScheduleStatus = {
    Pending: "Pending",
    Failed: "Failed",
    Scheduled: "Scheduled",
    Stopped: "Stopped",
} as const;

/**
 * The status of a schedule job.
 */
export type MonitoringScheduleMonitoringScheduleStatus = (typeof MonitoringScheduleMonitoringScheduleStatus)[keyof typeof MonitoringScheduleMonitoringScheduleStatus];

export const MonitoringScheduleMonitoringType = {
    DataQuality: "DataQuality",
    ModelQuality: "ModelQuality",
    ModelBias: "ModelBias",
    ModelExplainability: "ModelExplainability",
} as const;

/**
 * The type of monitoring job.
 */
export type MonitoringScheduleMonitoringType = (typeof MonitoringScheduleMonitoringType)[keyof typeof MonitoringScheduleMonitoringType];

export const MonitoringScheduleS3OutputS3UploadMode = {
    Continuous: "Continuous",
    EndOfJob: "EndOfJob",
} as const;

/**
 * Whether to upload the results of the monitoring job continuously or after the job completes.
 */
export type MonitoringScheduleS3OutputS3UploadMode = (typeof MonitoringScheduleS3OutputS3UploadMode)[keyof typeof MonitoringScheduleS3OutputS3UploadMode];

export const ProjectProjectStatus = {
    Pending: "Pending",
    CreateInProgress: "CreateInProgress",
    CreateCompleted: "CreateCompleted",
    CreateFailed: "CreateFailed",
    DeleteInProgress: "DeleteInProgress",
    DeleteFailed: "DeleteFailed",
    DeleteCompleted: "DeleteCompleted",
} as const;

/**
 * The status of a project.
 */
export type ProjectProjectStatus = (typeof ProjectProjectStatus)[keyof typeof ProjectProjectStatus];

export const UserProfileResourceSpecInstanceType = {
    System: "system",
    MlT3Micro: "ml.t3.micro",
    MlT3Small: "ml.t3.small",
    MlT3Medium: "ml.t3.medium",
    MlT3Large: "ml.t3.large",
    MlT3Xlarge: "ml.t3.xlarge",
    MlT32xlarge: "ml.t3.2xlarge",
    MlM5Large: "ml.m5.large",
    MlM5Xlarge: "ml.m5.xlarge",
    MlM52xlarge: "ml.m5.2xlarge",
    MlM54xlarge: "ml.m5.4xlarge",
    MlM58xlarge: "ml.m5.8xlarge",
    MlM512xlarge: "ml.m5.12xlarge",
    MlM516xlarge: "ml.m5.16xlarge",
    MlM524xlarge: "ml.m5.24xlarge",
    MlC5Large: "ml.c5.large",
    MlC5Xlarge: "ml.c5.xlarge",
    MlC52xlarge: "ml.c5.2xlarge",
    MlC54xlarge: "ml.c5.4xlarge",
    MlC59xlarge: "ml.c5.9xlarge",
    MlC512xlarge: "ml.c5.12xlarge",
    MlC518xlarge: "ml.c5.18xlarge",
    MlC524xlarge: "ml.c5.24xlarge",
    MlP32xlarge: "ml.p3.2xlarge",
    MlP38xlarge: "ml.p3.8xlarge",
    MlP316xlarge: "ml.p3.16xlarge",
    MlG4dnXlarge: "ml.g4dn.xlarge",
    MlG4dn2xlarge: "ml.g4dn.2xlarge",
    MlG4dn4xlarge: "ml.g4dn.4xlarge",
    MlG4dn8xlarge: "ml.g4dn.8xlarge",
    MlG4dn12xlarge: "ml.g4dn.12xlarge",
    MlG4dn16xlarge: "ml.g4dn.16xlarge",
} as const;

/**
 * The instance type that the image version runs on.
 */
export type UserProfileResourceSpecInstanceType = (typeof UserProfileResourceSpecInstanceType)[keyof typeof UserProfileResourceSpecInstanceType];

export const UserProfileSharingSettingsNotebookOutputOption = {
    Allowed: "Allowed",
    Disabled: "Disabled",
} as const;

/**
 * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
 */
export type UserProfileSharingSettingsNotebookOutputOption = (typeof UserProfileSharingSettingsNotebookOutputOption)[keyof typeof UserProfileSharingSettingsNotebookOutputOption];
