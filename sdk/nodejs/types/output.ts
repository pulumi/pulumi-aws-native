// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

/**
 * A set of tags to apply to the resource.
 */
export interface CreateOnlyTag {
    /**
     * The key name of the tag
     */
    key: string;
    /**
     * The value of the tag
     */
    value: string;
}

/**
 * A set of tags to apply to the resource.
 */
export interface Tag {
    /**
     * The key name of the tag
     */
    key: string;
    /**
     * The value of the tag
     */
    value: string;
}

export namespace accessanalyzer {
    /**
     * An Access Analyzer archive rule. Archive rules automatically archive new findings that meet the criteria you define when you create the rule.
     */
    export interface AnalyzerArchiveRule {
        /**
         * The criteria for the rule.
         */
        filter: outputs.accessanalyzer.AnalyzerFilter[];
        /**
         * The archive rule name
         */
        ruleName: string;
    }

    /**
     * The configuration for the analyzer
     */
    export interface AnalyzerConfigurationProperties {
        /**
         * Specifies the configuration of an unused access analyzer for an AWS organization or account. External access analyzers do not support any configuration.
         */
        unusedAccessConfiguration?: outputs.accessanalyzer.AnalyzerUnusedAccessConfiguration;
    }

    export interface AnalyzerFilter {
        /**
         * A "contains" condition to match for the rule.
         */
        contains?: string[];
        /**
         * An "equals" condition to match for the rule.
         */
        eq?: string[];
        /**
         * An "exists" condition to match for the rule.
         */
        exists?: boolean;
        /**
         * A "not equal" condition to match for the rule.
         */
        neq?: string[];
        /**
         * The property used to define the criteria in the filter for the rule.
         */
        property: string;
    }

    /**
     * The Configuration for Unused Access Analyzer
     */
    export interface AnalyzerUnusedAccessConfiguration {
        /**
         * The specified access age in days for which to generate findings for unused access. For example, if you specify 90 days, the analyzer will generate findings for IAM entities within the accounts of the selected organization for any access that hasn't been used in 90 or more days since the analyzer's last scan. You can choose a value between 1 and 180 days.
         */
        unusedAccessAge?: number;
    }

}

export namespace acmpca {
    /**
     * Contains X.509 certificate information to be placed in an issued certificate. An ``APIPassthrough`` or ``APICSRPassthrough`` template variant must be selected, or else this parameter is ignored. 
     *  If conflicting or duplicate certificate information is supplied from other sources, AWS Private CA applies [order of operation rules](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html#template-order-of-operations) to determine what information is used.
     */
    export interface CertificateApiPassthrough {
        /**
         * Specifies X.509 extension information for a certificate.
         */
        extensions?: outputs.acmpca.CertificateExtensions;
        /**
         * Contains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
         */
        subject?: outputs.acmpca.CertificateSubject;
    }

    /**
     * Structure that contains X.509 AccessDescription information.
     */
    export interface CertificateAuthorityAccessDescription {
        accessLocation: outputs.acmpca.CertificateAuthorityGeneralName;
        accessMethod: outputs.acmpca.CertificateAuthorityAccessMethod;
    }

    /**
     * Structure that contains X.509 AccessMethod information. Assign one and ONLY one field.
     */
    export interface CertificateAuthorityAccessMethod {
        accessMethodType?: string;
        customObjectIdentifier?: string;
    }

    /**
     * Your certificate authority can create and maintain a certificate revocation list (CRL). A CRL contains information about certificates that have been revoked.
     */
    export interface CertificateAuthorityCrlConfiguration {
        /**
         * Configures the default behavior of the CRL Distribution Point extension for certificates issued by your CA. If this field is not provided, then the CRL Distribution Point extension will be present and contain the default CRL URL.
         */
        crlDistributionPointExtensionConfiguration?: outputs.acmpca.CertificateAuthorityCrlDistributionPointExtensionConfiguration;
        /**
         * Name inserted into the certificate *CRL Distribution Points* extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public.
         *
         * > The content of a Canonical Name (CNAME) record must conform to [RFC2396](https://docs.aws.amazon.com/https://www.ietf.org/rfc/rfc2396.txt) restrictions on the use of special characters in URIs. Additionally, the value of the CNAME must not include a protocol prefix such as "http://" or "https://".
         */
        customCname?: string;
        /**
         * Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. You can use this value to enable certificate revocation for a new CA when you call the `CreateCertificateAuthority` operation or for an existing CA when you call the `UpdateCertificateAuthority` operation.
         */
        enabled: boolean;
        /**
         * Validity period of the CRL in days.
         */
        expirationInDays?: number;
        /**
         * Name of the S3 bucket that contains the CRL. If you do not provide a value for the *CustomCname* argument, the name of your S3 bucket is placed into the *CRL Distribution Points* extension of the issued certificate. You can change the name of your bucket by calling the [UpdateCertificateAuthority](https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html) operation. You must specify a [bucket policy](https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#s3-policies) that allows AWS Private CA to write the CRL to your bucket.
         *
         * > The `S3BucketName` parameter must conform to the [S3 bucket naming rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html) .
         */
        s3BucketName?: string;
        /**
         * Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. If you choose PUBLIC_READ, the CRL will be accessible over the public internet. If you choose BUCKET_OWNER_FULL_CONTROL, only the owner of the CRL S3 bucket can access the CRL, and your PKI clients may need an alternative method of access.
         *
         * If no value is specified, the default is PUBLIC_READ.
         *
         * *Note:* This default can cause CA creation to fail in some circumstances. If you have have enabled the Block Public Access (BPA) feature in your S3 account, then you must specify the value of this parameter as `BUCKET_OWNER_FULL_CONTROL` , and not doing so results in an error. If you have disabled BPA in S3, then you can specify either `BUCKET_OWNER_FULL_CONTROL` or `PUBLIC_READ` as the value.
         *
         * For more information, see [Blocking public access to the S3 bucket](https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#s3-bpa) .
         */
        s3ObjectAcl?: string;
    }

    /**
     * Configures the default behavior of the CRL Distribution Point extension for certificates issued by your certificate authority
     */
    export interface CertificateAuthorityCrlDistributionPointExtensionConfiguration {
        /**
         * Configures whether the CRL Distribution Point extension should be populated with the default URL to the CRL. If set to `true` , then the CDP extension will not be present in any certificates issued by that CA unless otherwise specified through CSR or API passthrough.
         *
         * > Only set this if you have another way to distribute the CRL Distribution Points for certificates issued by your CA, such as the Matter Distributed Compliance Ledger.
         * > 
         * > This configuration cannot be enabled with a custom CNAME set.
         */
        omitExtension: boolean;
    }

    /**
     * Structure that contains CSR pass though extensions information.
     */
    export interface CertificateAuthorityCsrExtensions {
        /**
         * Indicates the purpose of the certificate and of the key contained in the certificate.
         */
        keyUsage?: outputs.acmpca.CertificateAuthorityKeyUsage;
        /**
         * For CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see [Subject Information Access](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.2) in RFC 5280.
         */
        subjectInformationAccess?: outputs.acmpca.CertificateAuthorityAccessDescription[];
    }

    /**
     * Structure that contains X.500 attribute type and value.
     */
    export interface CertificateAuthorityCustomAttribute {
        objectIdentifier: string;
        value: string;
    }

    /**
     * Structure that contains X.509 EdiPartyName information.
     */
    export interface CertificateAuthorityEdiPartyName {
        nameAssigner?: string;
        partyName: string;
    }

    /**
     * Structure that contains X.509 GeneralName information. Assign one and ONLY one field.
     */
    export interface CertificateAuthorityGeneralName {
        directoryName?: outputs.acmpca.CertificateAuthoritySubject;
        dnsName?: string;
        ediPartyName?: outputs.acmpca.CertificateAuthorityEdiPartyName;
        ipAddress?: string;
        otherName?: outputs.acmpca.CertificateAuthorityOtherName;
        registeredId?: string;
        rfc822Name?: string;
        uniformResourceIdentifier?: string;
    }

    /**
     * Structure that contains X.509 KeyUsage information.
     */
    export interface CertificateAuthorityKeyUsage {
        /**
         * Key can be used to sign CRLs.
         */
        crlSign?: boolean;
        /**
         * Key can be used to decipher data.
         */
        dataEncipherment?: boolean;
        /**
         * Key can be used only to decipher data.
         */
        decipherOnly?: boolean;
        /**
         * Key can be used for digital signing.
         */
        digitalSignature?: boolean;
        /**
         * Key can be used only to encipher data.
         */
        encipherOnly?: boolean;
        /**
         * Key can be used in a key-agreement protocol.
         */
        keyAgreement?: boolean;
        /**
         * Key can be used to sign certificates.
         */
        keyCertSign?: boolean;
        /**
         * Key can be used to encipher data.
         */
        keyEncipherment?: boolean;
        /**
         * Key can be used for non-repudiation.
         */
        nonRepudiation?: boolean;
    }

    /**
     * Helps to configure online certificate status protocol (OCSP) responder for your certificate authority
     */
    export interface CertificateAuthorityOcspConfiguration {
        /**
         * Flag enabling use of the Online Certificate Status Protocol (OCSP) for validating certificate revocation status.
         */
        enabled: boolean;
        /**
         * By default, AWS Private CA injects an Amazon domain into certificates being validated by the Online Certificate Status Protocol (OCSP). A customer can alternatively use this object to define a CNAME specifying a customized OCSP domain.
         *
         * > The content of a Canonical Name (CNAME) record must conform to [RFC2396](https://docs.aws.amazon.com/https://www.ietf.org/rfc/rfc2396.txt) restrictions on the use of special characters in URIs. Additionally, the value of the CNAME must not include a protocol prefix such as "http://" or "https://".
         */
        ocspCustomCname?: string;
    }

    /**
     * Structure that contains X.509 OtherName information.
     */
    export interface CertificateAuthorityOtherName {
        typeId: string;
        value: string;
    }

    /**
     * Certificate Authority revocation information.
     */
    export interface CertificateAuthorityRevocationConfiguration {
        /**
         * Configuration of the certificate revocation list (CRL), if any, maintained by your private CA.
         */
        crlConfiguration?: outputs.acmpca.CertificateAuthorityCrlConfiguration;
        /**
         * Configuration of Online Certificate Status Protocol (OCSP) support, if any, maintained by your private CA.
         */
        ocspConfiguration?: outputs.acmpca.CertificateAuthorityOcspConfiguration;
    }

    /**
     * Structure that contains X.500 distinguished name information for your CA.
     */
    export interface CertificateAuthoritySubject {
        commonName?: string;
        country?: string;
        customAttributes?: outputs.acmpca.CertificateAuthorityCustomAttribute[];
        distinguishedNameQualifier?: string;
        generationQualifier?: string;
        givenName?: string;
        initials?: string;
        locality?: string;
        organization?: string;
        organizationalUnit?: string;
        pseudonym?: string;
        serialNumber?: string;
        state?: string;
        surname?: string;
        title?: string;
    }

    /**
     * Defines the X.500 relative distinguished name (RDN).
     */
    export interface CertificateCustomAttribute {
        /**
         * Specifies the object identifier (OID) of the attribute type of the relative distinguished name (RDN).
         */
        objectIdentifier: string;
        /**
         * Specifies the attribute value of relative distinguished name (RDN).
         */
        value: string;
    }

    /**
     * Specifies the X.509 extension information for a certificate.
     *  Extensions present in ``CustomExtensions`` follow the ``ApiPassthrough`` [template rules](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html#template-order-of-operations).
     */
    export interface CertificateCustomExtension {
        /**
         * Specifies the critical flag of the X.509 extension.
         */
        critical?: boolean;
        /**
         * Specifies the object identifier (OID) of the X.509 extension. For more information, see the [Global OID reference database.](https://docs.aws.amazon.com/https://oidref.com/2.5.29)
         */
        objectIdentifier: string;
        /**
         * Specifies the base64-encoded value of the X.509 extension.
         */
        value: string;
    }

    /**
     * Describes an Electronic Data Interchange (EDI) entity as described in as defined in [Subject Alternative Name](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc5280) in RFC 5280.
     */
    export interface CertificateEdiPartyName {
        /**
         * Specifies the name assigner.
         */
        nameAssigner: string;
        /**
         * Specifies the party name.
         */
        partyName: string;
    }

    /**
     * Specifies additional purposes for which the certified public key may be used other than basic purposes indicated in the ``KeyUsage`` extension.
     */
    export interface CertificateExtendedKeyUsage {
        /**
         * Specifies a custom ``ExtendedKeyUsage`` with an object identifier (OID).
         */
        extendedKeyUsageObjectIdentifier?: string;
        /**
         * Specifies a standard ``ExtendedKeyUsage`` as defined as in [RFC 5280](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12).
         */
        extendedKeyUsageType?: string;
    }

    /**
     * Contains X.509 extension information for a certificate.
     */
    export interface CertificateExtensions {
        /**
         * Contains a sequence of one or more policy information terms, each of which consists of an object identifier (OID) and optional qualifiers. For more information, see NIST's definition of [Object Identifier (OID)](https://docs.aws.amazon.com/https://csrc.nist.gov/glossary/term/Object_Identifier).
         *  In an end-entity certificate, these terms indicate the policy under which the certificate was issued and the purposes for which it may be used. In a CA certificate, these terms limit the set of policies for certification paths that include this certificate.
         */
        certificatePolicies?: outputs.acmpca.CertificatePolicyInformation[];
        /**
         * Contains a sequence of one or more X.509 extensions, each of which consists of an object identifier (OID), a base64-encoded value, and the critical flag. For more information, see the [Global OID reference database.](https://docs.aws.amazon.com/https://oidref.com/2.5.29)
         */
        customExtensions?: outputs.acmpca.CertificateCustomExtension[];
        /**
         * Specifies additional purposes for which the certified public key may be used other than basic purposes indicated in the ``KeyUsage`` extension.
         */
        extendedKeyUsage?: outputs.acmpca.CertificateExtendedKeyUsage[];
        /**
         * Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
         */
        keyUsage?: outputs.acmpca.CertificateKeyUsage;
        /**
         * The subject alternative name extension allows identities to be bound to the subject of the certificate. These identities may be included in addition to or in place of the identity in the subject field of the certificate.
         */
        subjectAlternativeNames?: outputs.acmpca.CertificateGeneralName[];
    }

    /**
     * Describes an ASN.1 X.400 ``GeneralName`` as defined in [RFC 5280](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc5280). Only one of the following naming options should be provided. Providing more than one option results in an ``InvalidArgsException`` error.
     */
    export interface CertificateGeneralName {
        /**
         * Contains information about the certificate subject. The certificate can be one issued by your private certificate authority (CA) or it can be your private CA certificate. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate. The DN must be unique for each entity, but your private CA can issue more than one certificate with the same DN to the same entity.
         */
        directoryName?: outputs.acmpca.CertificateSubject;
        /**
         * Represents ``GeneralName`` as a DNS name.
         */
        dnsName?: string;
        /**
         * Represents ``GeneralName`` as an ``EdiPartyName`` object.
         */
        ediPartyName?: outputs.acmpca.CertificateEdiPartyName;
        /**
         * Represents ``GeneralName`` as an IPv4 or IPv6 address.
         */
        ipAddress?: string;
        /**
         * Represents ``GeneralName`` using an ``OtherName`` object.
         */
        otherName?: outputs.acmpca.CertificateOtherName;
        /**
         * Represents ``GeneralName`` as an object identifier (OID).
         */
        registeredId?: string;
        /**
         * Represents ``GeneralName`` as an [RFC 822](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc822) email address.
         */
        rfc822Name?: string;
        /**
         * Represents ``GeneralName`` as a URI.
         */
        uniformResourceIdentifier?: string;
    }

    /**
     * Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.
     */
    export interface CertificateKeyUsage {
        /**
         * Key can be used to sign CRLs.
         */
        crlSign?: boolean;
        /**
         * Key can be used to decipher data.
         */
        dataEncipherment?: boolean;
        /**
         * Key can be used only to decipher data.
         */
        decipherOnly?: boolean;
        /**
         * Key can be used for digital signing.
         */
        digitalSignature?: boolean;
        /**
         * Key can be used only to encipher data.
         */
        encipherOnly?: boolean;
        /**
         * Key can be used in a key-agreement protocol.
         */
        keyAgreement?: boolean;
        /**
         * Key can be used to sign certificates.
         */
        keyCertSign?: boolean;
        /**
         * Key can be used to encipher data.
         */
        keyEncipherment?: boolean;
        /**
         * Key can be used for non-repudiation.
         */
        nonRepudiation?: boolean;
    }

    /**
     * Defines a custom ASN.1 X.400 ``GeneralName`` using an object identifier (OID) and value. The OID must satisfy the regular expression shown below. For more information, see NIST's definition of [Object Identifier (OID)](https://docs.aws.amazon.com/https://csrc.nist.gov/glossary/term/Object_Identifier).
     */
    export interface CertificateOtherName {
        /**
         * Specifies an OID.
         */
        typeId: string;
        /**
         * Specifies an OID value.
         */
        value: string;
    }

    /**
     * Defines the X.509 ``CertificatePolicies`` extension.
     */
    export interface CertificatePolicyInformation {
        /**
         * Specifies the object identifier (OID) of the certificate policy under which the certificate was issued. For more information, see NIST's definition of [Object Identifier (OID)](https://docs.aws.amazon.com/https://csrc.nist.gov/glossary/term/Object_Identifier).
         */
        certPolicyId: string;
        /**
         * Modifies the given ``CertPolicyId`` with a qualifier. AWS Private CA supports the certification practice statement (CPS) qualifier.
         */
        policyQualifiers?: outputs.acmpca.CertificatePolicyQualifierInfo[];
    }

    /**
     * Modifies the ``CertPolicyId`` of a ``PolicyInformation`` object with a qualifier. AWS Private CA supports the certification practice statement (CPS) qualifier.
     */
    export interface CertificatePolicyQualifierInfo {
        /**
         * Identifies the qualifier modifying a ``CertPolicyId``.
         */
        policyQualifierId: string;
        /**
         * Defines the qualifier type. AWS Private CA supports the use of a URI for a CPS qualifier in this field.
         */
        qualifier: outputs.acmpca.CertificateQualifier;
    }

    /**
     * Defines a ``PolicyInformation`` qualifier. AWS Private CA supports the [certification practice statement (CPS) qualifier](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.4) defined in RFC 5280.
     */
    export interface CertificateQualifier {
        /**
         * Contains a pointer to a certification practice statement (CPS) published by the CA.
         */
        cpsUri: string;
    }

    /**
     * Contains information about the certificate subject. The ``Subject`` field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The ``Subject``must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
     */
    export interface CertificateSubject {
        /**
         * For CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.
         *  Note: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.
         */
        commonName?: string;
        /**
         * Two-digit code that specifies the country in which the certificate subject located.
         */
        country?: string;
        /**
         * Contains a sequence of one or more X.500 relative distinguished names (RDNs), each of which consists of an object identifier (OID) and a value. For more information, see NIST’s definition of [Object Identifier (OID)](https://docs.aws.amazon.com/https://csrc.nist.gov/glossary/term/Object_Identifier).
         *   Custom attributes cannot be used in combination with standard attributes.
         */
        customAttributes?: outputs.acmpca.CertificateCustomAttribute[];
        /**
         * Disambiguating information for the certificate subject.
         */
        distinguishedNameQualifier?: string;
        /**
         * Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.
         */
        generationQualifier?: string;
        /**
         * First name.
         */
        givenName?: string;
        /**
         * Concatenation that typically contains the first letter of the *GivenName*, the first letter of the middle name if one exists, and the first letter of the *Surname*.
         */
        initials?: string;
        /**
         * The locality (such as a city or town) in which the certificate subject is located.
         */
        locality?: string;
        /**
         * Legal name of the organization with which the certificate subject is affiliated.
         */
        organization?: string;
        /**
         * A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.
         */
        organizationalUnit?: string;
        /**
         * Typically a shortened version of a longer *GivenName*. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.
         */
        pseudonym?: string;
        /**
         * The certificate serial number.
         */
        serialNumber?: string;
        /**
         * State in which the subject of the certificate is located.
         */
        state?: string;
        /**
         * Family name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.
         */
        surname?: string;
        /**
         * A title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.
         */
        title?: string;
    }

    /**
     * Length of time for which the certificate issued by your private certificate authority (CA), or by the private CA itself, is valid in days, months, or years. You can issue a certificate by calling the ``IssueCertificate`` operation.
     */
    export interface CertificateValidity {
        /**
         * Specifies whether the ``Value`` parameter represents days, months, or years.
         */
        type: string;
        /**
         * A long integer interpreted according to the value of ``Type``, below.
         */
        value: number;
    }

}

export namespace amplify {
    export interface AppAutoBranchCreationConfig {
        /**
         * Automated branch creation glob patterns for the Amplify app.
         */
        autoBranchCreationPatterns?: string[];
        /**
         * Sets password protection for your auto created branch.
         */
        basicAuthConfig?: outputs.amplify.AppBasicAuthConfig;
        /**
         * The build specification (build spec) for the autocreated branch.
         */
        buildSpec?: string;
        /**
         * Enables automated branch creation for the Amplify app.
         */
        enableAutoBranchCreation?: boolean;
        /**
         * Enables auto building for the auto created branch.
         */
        enableAutoBuild?: boolean;
        /**
         * Enables performance mode for the branch.
         *
         * Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out.
         */
        enablePerformanceMode?: boolean;
        /**
         * Sets whether pull request previews are enabled for each branch that Amplify Hosting automatically creates for your app. Amplify creates previews by deploying your app to a unique URL whenever a pull request is opened for the branch. Development and QA teams can use this preview to test the pull request before it's merged into a production or integration branch.
         *
         * To provide backend support for your preview, Amplify Hosting automatically provisions a temporary backend environment that it deletes when the pull request is closed. If you want to specify a dedicated backend environment for your previews, use the `PullRequestEnvironmentName` property.
         *
         * For more information, see [Web Previews](https://docs.aws.amazon.com/amplify/latest/userguide/pr-previews.html) in the *AWS Amplify Hosting User Guide* .
         */
        enablePullRequestPreview?: boolean;
        /**
         * The environment variables for the autocreated branch.
         */
        environmentVariables?: outputs.amplify.AppEnvironmentVariable[];
        /**
         * The framework for the autocreated branch.
         */
        framework?: string;
        /**
         * If pull request previews are enabled, you can use this property to specify a dedicated backend environment for your previews. For example, you could specify an environment named `prod` , `test` , or `dev` that you initialized with the Amplify CLI.
         *
         * To enable pull request previews, set the `EnablePullRequestPreview` property to `true` .
         *
         * If you don't specify an environment, Amplify Hosting provides backend support for each preview by automatically provisioning a temporary backend environment. Amplify deletes this environment when the pull request is closed.
         *
         * For more information about creating backend environments, see [Feature Branch Deployments and Team Workflows](https://docs.aws.amazon.com/amplify/latest/userguide/multi-environments.html) in the *AWS Amplify Hosting User Guide* .
         */
        pullRequestEnvironmentName?: string;
        /**
         * Stage for the auto created branch.
         */
        stage?: enums.amplify.AppAutoBranchCreationConfigStage;
    }

    export interface AppBasicAuthConfig {
        /**
         * Enables basic authorization for the Amplify app's branches.
         */
        enableBasicAuth?: boolean;
        /**
         * The password for basic authorization.
         */
        password?: string;
        /**
         * The user name for basic authorization.
         */
        username?: string;
    }

    export interface AppCustomRule {
        /**
         * The condition for a URL rewrite or redirect rule, such as a country code.
         */
        condition?: string;
        /**
         * The source pattern for a URL rewrite or redirect rule.
         */
        source: string;
        /**
         * The status code for a URL rewrite or redirect rule.
         *
         * - **200** - Represents a 200 rewrite rule.
         * - **301** - Represents a 301 (moved pemanently) redirect rule. This and all future requests should be directed to the target URL.
         * - **302** - Represents a 302 temporary redirect rule.
         * - **404** - Represents a 404 redirect rule.
         * - **404-200** - Represents a 404 rewrite rule.
         */
        status?: string;
        /**
         * The target pattern for a URL rewrite or redirect rule.
         */
        target: string;
    }

    export interface AppEnvironmentVariable {
        /**
         * The environment variable name.
         */
        name: string;
        /**
         * The environment variable value.
         */
        value: string;
    }

    export interface BranchBackend {
        /**
         * The Amazon Resource Name (ARN) for the AWS CloudFormation stack.
         */
        stackArn?: string;
    }

    export interface BranchBasicAuthConfig {
        /**
         * Enables basic authorization for the branch.
         */
        enableBasicAuth?: boolean;
        /**
         * The password for basic authorization.
         */
        password: string;
        username: string;
    }

    export interface BranchEnvironmentVariable {
        /**
         * The environment variable name.
         */
        name: string;
        /**
         * The environment variable value.
         */
        value: string;
    }

    export interface DomainCertificate {
        /**
         * The Amazon resource name (ARN) for a custom certificate that you have already added to AWS Certificate Manager in your AWS account .
         *
         * This field is required only when the certificate type is `CUSTOM` .
         */
        certificateArn?: string;
        /**
         * The type of SSL/TLS certificate that you want to use.
         *
         * Specify `AMPLIFY_MANAGED` to use the default certificate that Amplify provisions for you.
         *
         * Specify `CUSTOM` to use your own certificate that you have already added to AWS Certificate Manager in your AWS account . Make sure you request (or import) the certificate in the US East (N. Virginia) Region (us-east-1). For more information about using ACM, see [Importing certificates into AWS Certificate Manager](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the *ACM User guide* .
         */
        certificateType?: enums.amplify.DomainCertificateCertificateType;
        /**
         * The DNS record for certificate verification.
         */
        certificateVerificationDnsRecord?: string;
    }

    export interface DomainCertificateSettings {
        /**
         * The certificate type.
         *
         * Specify `AMPLIFY_MANAGED` to use the default certificate that Amplify provisions for you.
         *
         * Specify `CUSTOM` to use your own certificate that you have already added to AWS Certificate Manager in your AWS account . Make sure you request (or import) the certificate in the US East (N. Virginia) Region (us-east-1). For more information about using ACM, see [Importing certificates into AWS Certificate Manager](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the *ACM User guide* .
         */
        certificateType?: enums.amplify.DomainCertificateSettingsCertificateType;
        /**
         * The Amazon resource name (ARN) for the custom certificate that you have already added to AWS Certificate Manager in your AWS account .
         *
         * This field is required only when the certificate type is `CUSTOM` .
         */
        customCertificateArn?: string;
    }

    export interface DomainSubDomainSetting {
        /**
         * The branch name setting for the subdomain.
         *
         * *Length Constraints:* Minimum length of 1. Maximum length of 255.
         *
         * *Pattern:* (?s).+
         */
        branchName: string;
        /**
         * The prefix setting for the subdomain.
         */
        prefix: string;
    }

}

export namespace amplifyuibuilder {
    export interface ComponentActionParameters {
        /**
         * The HTML anchor link to the location to open. Specify this value for a navigation action.
         */
        anchor?: outputs.amplifyuibuilder.ComponentProperty;
        /**
         * A dictionary of key-value pairs mapping Amplify Studio properties to fields in a data model. Use when the action performs an operation on an Amplify DataStore model.
         */
        fields?: {[key: string]: outputs.amplifyuibuilder.ComponentProperty};
        /**
         * Specifies whether the user should be signed out globally. Specify this value for an auth sign out action.
         */
        global?: outputs.amplifyuibuilder.ComponentProperty;
        /**
         * The unique ID of the component that the `ActionParameters` apply to.
         */
        id?: outputs.amplifyuibuilder.ComponentProperty;
        /**
         * The name of the data model. Use when the action performs an operation on an Amplify DataStore model.
         */
        model?: string;
        /**
         * A key-value pair that specifies the state property name and its initial value.
         */
        state?: outputs.amplifyuibuilder.ComponentMutationActionSetStateParameter;
        /**
         * The element within the same component to modify when the action occurs.
         */
        target?: outputs.amplifyuibuilder.ComponentProperty;
        /**
         * The type of navigation action. Valid values are `url` and `anchor` . This value is required for a navigation action.
         */
        type?: outputs.amplifyuibuilder.ComponentProperty;
        /**
         * The URL to the location to open. Specify this value for a navigation action.
         */
        url?: outputs.amplifyuibuilder.ComponentProperty;
    }

    export interface ComponentBindingPropertiesValue {
        /**
         * Describes the properties to customize with data at runtime.
         */
        bindingProperties?: outputs.amplifyuibuilder.ComponentBindingPropertiesValueProperties;
        /**
         * The default value of the property.
         */
        defaultValue?: string;
        /**
         * The property type.
         */
        type?: string;
    }

    export interface ComponentBindingPropertiesValueProperties {
        /**
         * An Amazon S3 bucket.
         */
        bucket?: string;
        /**
         * The default value to assign to the property.
         */
        defaultValue?: string;
        /**
         * The field to bind the data to.
         */
        field?: string;
        /**
         * The storage key for an Amazon S3 bucket.
         */
        key?: string;
        /**
         * An Amplify DataStore model.
         */
        model?: string;
        /**
         * A list of predicates for binding a component's properties to data.
         */
        predicates?: outputs.amplifyuibuilder.ComponentPredicate[];
        /**
         * The name of a component slot.
         */
        slotName?: string;
        /**
         * An authenticated user attribute.
         */
        userAttribute?: string;
    }

    export interface ComponentChild {
        /**
         * The list of `ComponentChild` instances for this component.
         */
        children?: outputs.amplifyuibuilder.ComponentChild[];
        /**
         * The type of the child component.
         */
        componentType: string;
        /**
         * Describes the events that can be raised on the child component. Use for the workflow feature in Amplify Studio that allows you to bind events and actions to components.
         */
        events?: {[key: string]: outputs.amplifyuibuilder.ComponentEvent};
        /**
         * The name of the child component.
         */
        name: string;
        /**
         * Describes the properties of the child component. You can't specify `tags` as a valid property for `properties` .
         */
        properties: {[key: string]: outputs.amplifyuibuilder.ComponentProperty};
        /**
         * The unique ID of the child component in its original source system, such as Figma.
         */
        sourceId?: string;
    }

    export interface ComponentConditionProperty {
        /**
         * The value to assign to the property if the condition is not met.
         */
        else?: outputs.amplifyuibuilder.ComponentProperty;
        /**
         * The name of a field. Specify this when the property is a data model.
         */
        field?: string;
        /**
         * The value of the property to evaluate.
         */
        operand?: string;
        /**
         * The type of the property to evaluate.
         */
        operandType?: string;
        /**
         * The operator to use to perform the evaluation, such as `eq` to represent equals.
         */
        operator?: string;
        /**
         * The name of the conditional property.
         */
        property?: string;
        /**
         * The value to assign to the property if the condition is met.
         */
        then?: outputs.amplifyuibuilder.ComponentProperty;
    }

    export interface ComponentDataConfiguration {
        /**
         * A list of IDs to use to bind data to a component. Use this property to bind specifically chosen data, rather than data retrieved from a query.
         */
        identifiers?: string[];
        /**
         * The name of the data model to use to bind data to a component.
         */
        model: string;
        /**
         * Represents the conditional logic to use when binding data to a component. Use this property to retrieve only a subset of the data in a collection.
         */
        predicate?: outputs.amplifyuibuilder.ComponentPredicate;
        /**
         * Describes how to sort the component's properties.
         */
        sort?: outputs.amplifyuibuilder.ComponentSortProperty[];
    }

    export interface ComponentEvent {
        /**
         * The action to perform when a specific event is raised.
         */
        action?: string;
        /**
         * Binds an event to an action on a component. When you specify a `bindingEvent` , the event is called when the action is performed.
         */
        bindingEvent?: string;
        /**
         * Describes information about the action.
         */
        parameters?: outputs.amplifyuibuilder.ComponentActionParameters;
    }

    export interface ComponentFormBindingElement {
        /**
         * The name of the component to retrieve a value from.
         */
        element: string;
        /**
         * The property to retrieve a value from.
         */
        property: string;
    }

    export interface ComponentMutationActionSetStateParameter {
        /**
         * The name of the component that is being modified.
         */
        componentName: string;
        /**
         * The name of the component property to apply the state configuration to.
         */
        property: string;
        /**
         * The state configuration to assign to the property.
         */
        set: outputs.amplifyuibuilder.ComponentProperty;
    }

    export interface ComponentPredicate {
        /**
         * A list of predicates to combine logically.
         */
        and?: outputs.amplifyuibuilder.ComponentPredicate[];
        /**
         * The field to query.
         */
        field?: string;
        /**
         * The value to use when performing the evaluation.
         */
        operand?: string;
        /**
         * The type of value to use when performing the evaluation.
         */
        operandType?: string;
        /**
         * The operator to use to perform the evaluation.
         */
        operator?: string;
        /**
         * A list of predicates to combine logically.
         */
        or?: outputs.amplifyuibuilder.ComponentPredicate[];
    }

    export interface ComponentProperty {
        /**
         * The information to bind the component property to data at runtime.
         */
        bindingProperties?: outputs.amplifyuibuilder.ComponentPropertyBindingProperties;
        /**
         * The information to bind the component property to form data.
         */
        bindings?: {[key: string]: outputs.amplifyuibuilder.ComponentFormBindingElement};
        /**
         * The information to bind the component property to data at runtime. Use this for collection components.
         */
        collectionBindingProperties?: outputs.amplifyuibuilder.ComponentPropertyBindingProperties;
        /**
         * The name of the component that is affected by an event.
         */
        componentName?: string;
        /**
         * A list of component properties to concatenate to create the value to assign to this component property.
         */
        concat?: outputs.amplifyuibuilder.ComponentProperty[];
        /**
         * The conditional expression to use to assign a value to the component property.
         */
        condition?: outputs.amplifyuibuilder.ComponentConditionProperty;
        /**
         * Specifies whether the user configured the property in Amplify Studio after importing it.
         */
        configured?: boolean;
        /**
         * The default value to assign to the component property.
         */
        defaultValue?: string;
        /**
         * An event that occurs in your app. Use this for workflow data binding.
         */
        event?: string;
        /**
         * The default value assigned to the property when the component is imported into an app.
         */
        importedValue?: string;
        /**
         * The data model to use to assign a value to the component property.
         */
        model?: string;
        /**
         * The name of the component's property that is affected by an event.
         */
        property?: string;
        /**
         * The component type.
         */
        type?: string;
        /**
         * An authenticated user attribute to use to assign a value to the component property.
         */
        userAttribute?: string;
        /**
         * The value to assign to the component property.
         */
        value?: string;
    }

    export interface ComponentPropertyBindingProperties {
        /**
         * The data field to bind the property to.
         */
        field?: string;
        /**
         * The component property to bind to the data field.
         */
        property: string;
    }

    export interface ComponentSortProperty {
        /**
         * The direction of the sort, either ascending or descending.
         */
        direction: enums.amplifyuibuilder.ComponentSortDirection;
        /**
         * The field to perform the sort on.
         */
        field: string;
    }

    export interface ComponentVariant {
        /**
         * The properties of the component variant that can be overriden when customizing an instance of the component. You can't specify `tags` as a valid property for `overrides` .
         */
        overrides?: {[key: string]: any};
        /**
         * The combination of variants that comprise this variant.
         */
        variantValues?: {[key: string]: string};
    }

    export interface FormButton {
        /**
         * Describes the button's properties.
         */
        children?: string;
        /**
         * Specifies whether the button is visible on the form.
         */
        excluded?: boolean;
        /**
         * The position of the button.
         */
        position?: outputs.amplifyuibuilder.FormFieldPosition0Properties | outputs.amplifyuibuilder.FormFieldPosition1Properties | outputs.amplifyuibuilder.FormFieldPosition2Properties;
    }

    export interface FormCta {
        /**
         * Displays a cancel button.
         */
        cancel?: outputs.amplifyuibuilder.FormButton;
        /**
         * Displays a clear button.
         */
        clear?: outputs.amplifyuibuilder.FormButton;
        /**
         * The position of the button.
         */
        position?: enums.amplifyuibuilder.FormButtonsPosition;
        /**
         * Displays a submit button.
         */
        submit?: outputs.amplifyuibuilder.FormButton;
    }

    export interface FormDataTypeConfig {
        /**
         * The data source type, either an Amplify DataStore model or a custom data type.
         */
        dataSourceType: enums.amplifyuibuilder.FormDataSourceType;
        /**
         * The unique name of the data type you are using as the data source for the form.
         */
        dataTypeName: string;
    }

    export interface FormFieldConfig {
        /**
         * Specifies whether to hide a field.
         */
        excluded?: boolean;
        /**
         * Describes the configuration for the default input value to display for a field.
         */
        inputType?: outputs.amplifyuibuilder.FormFieldInputConfig;
        /**
         * The label for the field.
         */
        label?: string;
        /**
         * Specifies the field position.
         */
        position?: outputs.amplifyuibuilder.FormFieldPosition0Properties | outputs.amplifyuibuilder.FormFieldPosition1Properties | outputs.amplifyuibuilder.FormFieldPosition2Properties;
        /**
         * The validations to perform on the value in the field.
         */
        validations?: outputs.amplifyuibuilder.FormFieldValidationConfiguration[];
    }

    export interface FormFieldInputConfig {
        /**
         * Specifies whether a field has a default value.
         */
        defaultChecked?: boolean;
        /**
         * The default country code for a phone number.
         */
        defaultCountryCode?: string;
        /**
         * The default value for the field.
         */
        defaultValue?: string;
        /**
         * The text to display to describe the field.
         */
        descriptiveText?: string;
        /**
         * The configuration for the file uploader field.
         */
        fileUploaderConfig?: outputs.amplifyuibuilder.FormFileUploaderFieldConfig;
        /**
         * Specifies whether to render the field as an array. This property is ignored if the `dataSourceType` for the form is a Data Store.
         */
        isArray?: boolean;
        /**
         * The maximum value to display for the field.
         */
        maxValue?: number;
        /**
         * The minimum value to display for the field.
         */
        minValue?: number;
        /**
         * The name of the field.
         */
        name?: string;
        /**
         * The text to display as a placeholder for the field.
         */
        placeholder?: string;
        /**
         * Specifies a read only field.
         */
        readOnly?: boolean;
        /**
         * Specifies a field that requires input.
         */
        required?: boolean;
        /**
         * The stepping increment for a numeric value in a field.
         */
        step?: number;
        /**
         * The input type for the field.
         */
        type: string;
        /**
         * The value for the field.
         */
        value?: string;
        /**
         * The information to use to customize the input fields with data at runtime.
         */
        valueMappings?: outputs.amplifyuibuilder.FormValueMappings;
    }

    export interface FormFieldPosition0Properties {
        fixed: enums.amplifyuibuilder.FormFixedPosition;
    }

    export interface FormFieldPosition1Properties {
        rightOf: string;
    }

    export interface FormFieldPosition2Properties {
        below: string;
    }

    export interface FormFieldValidationConfiguration {
        /**
         * The validation to perform on a number value.
         */
        numValues?: number[];
        /**
         * The validation to perform on a string value.
         */
        strValues?: string[];
        /**
         * The validation to perform on an object type. ``
         */
        type: string;
        /**
         * The validation message to display.
         */
        validationMessage?: string;
    }

    export interface FormFileUploaderFieldConfig {
        /**
         * The file types that are allowed to be uploaded by the file uploader. Provide this information in an array of strings specifying the valid file extensions.
         */
        acceptedFileTypes: string[];
        /**
         * The access level to assign to the uploaded files in the Amazon S3 bucket where they are stored. The valid values for this property are `private` , `protected` , or `public` . For detailed information about the permissions associated with each access level, see [File access levels](https://docs.aws.amazon.com/https://docs.amplify.aws/lib/storage/configureaccess/q/platform/js/) in the *Amplify documentation* .
         */
        accessLevel: enums.amplifyuibuilder.FormStorageAccessLevel;
        /**
         * Allows the file upload operation to be paused and resumed. The default value is `false` .
         *
         * When `isResumable` is set to `true` , the file uploader uses a multipart upload to break the files into chunks before upload. The progress of the upload isn't continuous, because the file uploader uploads a chunk at a time.
         */
        isResumable?: boolean;
        /**
         * Specifies the maximum number of files that can be selected to upload. The default value is an unlimited number of files.
         */
        maxFileCount?: number;
        /**
         * The maximum file size in bytes that the file uploader will accept. The default value is an unlimited file size.
         */
        maxSize?: number;
        /**
         * Specifies whether to display or hide the image preview after selecting a file for upload. The default value is `true` to display the image preview.
         */
        showThumbnails?: boolean;
    }

    export interface FormInputBindingPropertiesValue {
        /**
         * Describes the properties to customize with data at runtime.
         */
        bindingProperties?: outputs.amplifyuibuilder.FormInputBindingPropertiesValueProperties;
        /**
         * The property type.
         */
        type?: string;
    }

    export interface FormInputBindingPropertiesValueProperties {
        /**
         * An Amplify DataStore model.
         */
        model?: string;
    }

    export interface FormInputValueProperty {
        /**
         * The information to bind fields to data at runtime.
         */
        bindingProperties?: outputs.amplifyuibuilder.FormInputValuePropertyBindingProperties;
        /**
         * A list of form properties to concatenate to create the value to assign to this field property.
         */
        concat?: outputs.amplifyuibuilder.FormInputValueProperty[];
        /**
         * The value to assign to the input field.
         */
        value?: string;
    }

    export interface FormInputValuePropertyBindingProperties {
        /**
         * The data field to bind the property to.
         */
        field?: string;
        /**
         * The form property to bind to the data field.
         */
        property: string;
    }

    export interface FormSectionalElement {
        /**
         * Excludes a sectional element that was generated by default for a specified data model.
         */
        excluded?: boolean;
        /**
         * Specifies the size of the font for a `Heading` sectional element. Valid values are `1 | 2 | 3 | 4 | 5 | 6` .
         */
        level?: number;
        /**
         * Specifies the orientation for a `Divider` sectional element. Valid values are `horizontal` or `vertical` .
         */
        orientation?: string;
        /**
         * Specifies the position of the text in a field for a `Text` sectional element.
         */
        position?: outputs.amplifyuibuilder.FormFieldPosition0Properties | outputs.amplifyuibuilder.FormFieldPosition1Properties | outputs.amplifyuibuilder.FormFieldPosition2Properties;
        /**
         * The text for a `Text` sectional element.
         */
        text?: string;
        /**
         * The type of sectional element. Valid values are `Heading` , `Text` , and `Divider` .
         */
        type: string;
    }

    export interface FormStyle {
        /**
         * The spacing for the horizontal gap.
         */
        horizontalGap?: outputs.amplifyuibuilder.FormStyleConfig0Properties | outputs.amplifyuibuilder.FormStyleConfig1Properties;
        /**
         * The size of the outer padding for the form.
         */
        outerPadding?: outputs.amplifyuibuilder.FormStyleConfig0Properties | outputs.amplifyuibuilder.FormStyleConfig1Properties;
        /**
         * The spacing for the vertical gap.
         */
        verticalGap?: outputs.amplifyuibuilder.FormStyleConfig0Properties | outputs.amplifyuibuilder.FormStyleConfig1Properties;
    }

    export interface FormStyleConfig0Properties {
        tokenReference: string;
    }

    export interface FormStyleConfig1Properties {
        value: string;
    }

    export interface FormValueMapping {
        /**
         * The value to display for the complex object.
         */
        displayValue?: outputs.amplifyuibuilder.FormInputValueProperty;
        /**
         * The complex object.
         */
        value: outputs.amplifyuibuilder.FormInputValueProperty;
    }

    export interface FormValueMappings {
        /**
         * The information to bind fields to data at runtime.
         */
        bindingProperties?: {[key: string]: outputs.amplifyuibuilder.FormInputBindingPropertiesValue};
        /**
         * The value and display value pairs.
         */
        values: outputs.amplifyuibuilder.FormValueMapping[];
    }

    export interface ThemeValue {
        /**
         * A list of key-value pairs that define the theme's properties.
         */
        children?: outputs.amplifyuibuilder.ThemeValues[];
        /**
         * The value of a theme property.
         */
        value?: string;
    }

    export interface ThemeValues {
        /**
         * The name of the property.
         */
        key?: string;
        /**
         * The value of the property.
         */
        value?: outputs.amplifyuibuilder.ThemeValue;
    }

}

export namespace apigateway {
    /**
     * ``StageKey`` is a property of the [AWS::ApiGateway::ApiKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-apikey.html) resource that specifies the stage to associate with the API key. This association allows only clients with the key to make requests to methods in that stage.
     */
    export interface ApiKeyStageKey {
        /**
         * The string identifier of the associated RestApi.
         */
        restApiId?: string;
        /**
         * The stage name associated with the stage key.
         */
        stageName?: string;
    }

    /**
     * The ``AccessLogSetting`` property type specifies settings for logging access in this stage.
     *   ``AccessLogSetting`` is a property of the [StageDescription](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-deployment-stagedescription.html) property type.
     */
    export interface DeploymentAccessLogSetting {
        /**
         * The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with ``amazon-apigateway-``.
         */
        destinationArn?: string;
        /**
         * A single line format of the access logs of data, as specified by selected $context variables. The format must include at least ``$context.requestId``.
         */
        format?: string;
    }

    /**
     * The ``CanarySetting`` property type specifies settings for the canary deployment in this stage.
     *  ``CanarySetting`` is a property of the [StageDescription](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-deployment-stagedescription.html) property type.
     */
    export interface DeploymentCanarySetting {
        /**
         * The percent (0-100) of traffic diverted to a canary deployment.
         */
        percentTraffic?: number;
        /**
         * Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
         */
        stageVariableOverrides?: {[key: string]: string};
        /**
         * A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
         */
        useStageCache?: boolean;
    }

    /**
     * The ``DeploymentCanarySettings`` property type specifies settings for the canary deployment.
     */
    export interface DeploymentCanarySettings {
        /**
         * The percentage (0.0-100.0) of traffic routed to the canary deployment.
         */
        percentTraffic?: number;
        /**
         * A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
         */
        stageVariableOverrides?: {[key: string]: string};
        /**
         * A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
         */
        useStageCache?: boolean;
    }

    /**
     * The ``MethodSetting`` property type configures settings for all methods in a stage.
     *  The ``MethodSettings`` property of the [Amazon API Gateway Deployment StageDescription](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-deployment-stagedescription.html) property type contains a list of ``MethodSetting`` property types.
     */
    export interface DeploymentMethodSetting {
        /**
         * Specifies whether the cached responses are encrypted.
         */
        cacheDataEncrypted?: boolean;
        /**
         * Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
         */
        cacheTtlInSeconds?: number;
        /**
         * Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
         */
        cachingEnabled?: boolean;
        /**
         * Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend that you don't enable this option for production APIs.
         */
        dataTraceEnabled?: boolean;
        /**
         * The HTTP method.
         */
        httpMethod?: string;
        /**
         * Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to CloudWatch Logs, or choose ``INFO`` to include all ``ERROR`` events as well as extra informational events.
         */
        loggingLevel?: string;
        /**
         * Specifies whether Amazon CloudWatch metrics are enabled for this method.
         */
        metricsEnabled?: boolean;
        /**
         * The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``).
         */
        resourcePath?: string;
        /**
         * Specifies the throttling burst limit.
         */
        throttlingBurstLimit?: number;
        /**
         * Specifies the throttling rate limit.
         */
        throttlingRateLimit?: number;
    }

    /**
     * ``StageDescription`` is a property of the [AWS::ApiGateway::Deployment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html) resource that configures a deployment stage.
     */
    export interface DeploymentStageDescription {
        /**
         * Specifies settings for logging access in this stage.
         */
        accessLogSetting?: outputs.apigateway.DeploymentAccessLogSetting;
        /**
         * Specifies whether a cache cluster is enabled for the stage.
         */
        cacheClusterEnabled?: boolean;
        /**
         * The size of the stage's cache cluster. For more information, see [cacheClusterSize](https://docs.aws.amazon.com/apigateway/latest/api/API_CreateStage.html#apigw-CreateStage-request-cacheClusterSize) in the *API Gateway API Reference*.
         */
        cacheClusterSize?: string;
        /**
         * Indicates whether the cached responses are encrypted.
         */
        cacheDataEncrypted?: boolean;
        /**
         * The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
         */
        cacheTtlInSeconds?: number;
        /**
         * Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses. For more information, see [Enable API Gateway Caching in a Stage to Enhance API Performance](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html) in the *API Gateway Developer Guide*.
         */
        cachingEnabled?: boolean;
        /**
         * Specifies settings for the canary deployment in this stage.
         */
        canarySetting?: outputs.apigateway.DeploymentCanarySetting;
        /**
         * The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage.
         */
        clientCertificateId?: string;
        /**
         * Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
         */
        dataTraceEnabled?: boolean;
        /**
         * A description of the purpose of the stage.
         */
        description?: string;
        /**
         * The version identifier of the API documentation snapshot.
         */
        documentationVersion?: string;
        /**
         * The logging level for this method. For valid values, see the ``loggingLevel`` property of the [MethodSetting](https://docs.aws.amazon.com/apigateway/latest/api/API_MethodSetting.html) resource in the *Amazon API Gateway API Reference*.
         */
        loggingLevel?: string;
        /**
         * Configures settings for all of the stage's methods.
         */
        methodSettings?: outputs.apigateway.DeploymentMethodSetting[];
        /**
         * Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
         */
        metricsEnabled?: boolean;
        /**
         * An array of arbitrary tags (key-value pairs) to associate with the stage.
         */
        tags?: outputs.apigateway.DeploymentTag[];
        /**
         * The target request burst rate limit. This allows more requests through for a period of time than the target rate limit. For more information, see [Manage API Request Throttling](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html) in the *API Gateway Developer Guide*.
         */
        throttlingBurstLimit?: number;
        /**
         * The target request steady-state rate limit. For more information, see [Manage API Request Throttling](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html) in the *API Gateway Developer Guide*.
         */
        throttlingRateLimit?: number;
        /**
         * Specifies whether active tracing with X-ray is enabled for this stage.
         *  For more information, see [Trace API Gateway API Execution with X-Ray](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-xray.html) in the *API Gateway Developer Guide*.
         */
        tracingEnabled?: boolean;
        /**
         * A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: ``[A-Za-z0-9-._~:/?#&=,]+``.
         */
        variables?: {[key: string]: string};
    }

    export interface DeploymentTag {
        /**
         * The key name of the tag
         */
        key: string;
        /**
         * The value for the tag
         */
        value: string;
    }

    /**
     * The ``Location`` property specifies the location of the Amazon API Gateway API entity that the documentation applies to. ``Location`` is a property of the [AWS::ApiGateway::DocumentationPart](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-documentationpart.html) resource.
     *  For more information about each property, including constraints and valid values, see [DocumentationPart](https://docs.aws.amazon.com/apigateway/latest/api/API_DocumentationPartLocation.html) in the *Amazon API Gateway REST API Reference*.
     */
    export interface DocumentationPartLocation {
        /**
         * The HTTP verb of a method. It is a valid field for the API entity types of ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. The default value is ``*`` for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other ``location`` attributes, the child entity's ``method`` attribute must match that of the parent entity exactly.
         */
        method?: string;
        /**
         * The name of the targeted API entity. It is a valid and required field for the API entity types of ``AUTHORIZER``, ``MODEL``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY`` and ``RESPONSE_HEADER``. It is an invalid field for any other entity type.
         */
        name?: string;
        /**
         * The URL path of the target. It is a valid field for the API entity types of ``RESOURCE``, ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. The default value is ``/`` for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other ``location`` attributes, the child entity's ``path`` attribute must match that of the parent entity as a prefix.
         */
        path?: string;
        /**
         * The HTTP status code of a response. It is a valid field for the API entity types of ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. The default value is ``*`` for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other ``location`` attributes, the child entity's ``statusCode`` attribute must match that of the parent entity exactly.
         */
        statusCode?: string;
        /**
         * The type of API entity to which the documentation content applies. Valid values are ``API``, ``AUTHORIZER``, ``MODEL``, ``RESOURCE``, ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. Content inheritance does not apply to any entity of the ``API``, ``AUTHORIZER``, ``METHOD``, ``MODEL``, ``REQUEST_BODY``, or ``RESOURCE`` type.
         */
        type?: enums.apigateway.DocumentationPartLocationType;
    }

    export interface DomainNameEndpointConfiguration {
        /**
         * A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is `"EDGE"` . For a regional API and its custom domain name, the endpoint type is `REGIONAL` . For a private API, the endpoint type is `PRIVATE` .
         */
        types?: string[];
    }

    export interface DomainNameMutualTlsAuthentication {
        /**
         * An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example `s3://bucket-name/key-name` . The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
         */
        truststoreUri?: string;
        /**
         * The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
         */
        truststoreVersion?: string;
    }

    /**
     * ``Integration`` is a property of the [AWS::ApiGateway::Method](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html) resource that specifies information about the target backend that a method calls.
     */
    export interface MethodIntegration {
        /**
         * A list of request parameters whose values API Gateway caches. To be valid values for ``cacheKeyParameters``, these parameters must also be specified for Method ``requestParameters``.
         */
        cacheKeyParameters?: string[];
        /**
         * Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the ``cacheNamespace``. You can specify the same ``cacheNamespace`` across resources to return the same cached data for requests to different resources.
         */
        cacheNamespace?: string;
        /**
         * The ID of the VpcLink used for the integration when ``connectionType=VPC_LINK`` and undefined, otherwise.
         */
        connectionId?: string;
        /**
         * The type of the network connection to the integration endpoint. The valid value is ``INTERNET`` for connections through the public routable internet or ``VPC_LINK`` for private connections between API Gateway and a network load balancer in a VPC. The default value is ``INTERNET``.
         */
        connectionType?: enums.apigateway.MethodIntegrationConnectionType;
        /**
         * Specifies how to handle request payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
         *  If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the ``passthroughBehavior`` is configured to support payload pass-through.
         */
        contentHandling?: enums.apigateway.MethodIntegrationContentHandling;
        /**
         * Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string ``arn:aws:iam::\*:user/\*``. To use resource-based permissions on supported AWS services, specify null.
         */
        credentials?: string;
        /**
         * Specifies the integration's HTTP method type. For the Type property, if you specify ``MOCK``, this property is optional. For Lambda integrations, you must set the integration method to ``POST``. For all other types, you must specify this property.
         */
        integrationHttpMethod?: string;
        /**
         * Specifies the integration's responses.
         */
        integrationResponses?: outputs.apigateway.MethodIntegrationResponse[];
        /**
         * Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in ``requestTemplates``. The valid value is one of the following: ``WHEN_NO_MATCH``: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. ``WHEN_NO_TEMPLATES``: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. ``NEVER``: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.
         */
        passthroughBehavior?: enums.apigateway.MethodIntegrationPassthroughBehavior;
        /**
         * A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of ``method.request.{location}.{name}``, where ``location`` is ``querystring``, ``path``, or ``header`` and ``name`` must be a valid and unique method request parameter name.
         */
        requestParameters?: {[key: string]: string};
        /**
         * Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
         */
        requestTemplates?: {[key: string]: string};
        /**
         * Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
         */
        timeoutInMillis?: number;
        /**
         * Specifies an API method integration type. The valid value is one of the following:
         *  For the HTTP and HTTP proxy integrations, each integration can specify a protocol (``http/https``), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a ``connectionType`` of ``VPC_LINK`` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
         */
        type: enums.apigateway.MethodIntegrationType;
        /**
         * Specifies Uniform Resource Identifier (URI) of the integration endpoint.
         *  For ``HTTP`` or ``HTTP_PROXY`` integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If ``connectionType`` is ``VPC_LINK`` specify the Network Load Balancer DNS name. For ``AWS`` or ``AWS_PROXY`` integrations, the URI is of the form ``arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}``. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either ``arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key}`` or ``arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}``
         */
        uri?: string;
    }

    /**
     * ``IntegrationResponse`` is a property of the [Amazon API Gateway Method Integration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apitgateway-method-integration.html) property type that specifies the response that API Gateway sends after a method's backend finishes processing a request.
     */
    export interface MethodIntegrationResponse {
        /**
         * Specifies how to handle response payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
         *  If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
         */
        contentHandling?: enums.apigateway.MethodIntegrationResponseContentHandling;
        /**
         * A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of ``method.response.header.{name}``, where ``name`` is a valid and unique header name. The mapped non-static value must match the pattern of ``integration.response.header.{name}`` or ``integration.response.body.{JSON-expression}``, where ``name`` is a valid and unique response header name and ``JSON-expression`` is a valid JSON expression without the ``$`` prefix.
         */
        responseParameters?: {[key: string]: string};
        /**
         * Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
         */
        responseTemplates?: {[key: string]: string};
        /**
         * Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the ``.+`` regex to match error response. However, make sure that the error response does not contain any newline (``\n``) character in such cases. If the back end is an LAMlong function, the LAMlong function error header is matched. For all other HTTP and AWS back ends, the HTTP status code is matched.
         */
        selectionPattern?: string;
        /**
         * Specifies the status code that is used to map the integration response to an existing MethodResponse.
         */
        statusCode: string;
    }

    /**
     * Represents a method response of a given HTTP status code returned to the client. The method response is passed from the back end through the associated integration response that can be transformed using a mapping template.
     */
    export interface MethodResponse {
        /**
         * Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.
         */
        responseModels?: {[key: string]: string};
        /**
         * A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern ``method.response.header.{name}``, where ``name`` is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in ``integration.response.header.{name}``, a static value enclosed within a pair of single quotes (e.g., ``'application/json'``), or a JSON expression from the back-end response payload in the form of ``integration.response.body.{JSON-expression}``, where ``JSON-expression`` is a valid JSON expression without the ``$`` prefix.)
         */
        responseParameters?: {[key: string]: boolean | string};
        /**
         * The method response's status code.
         */
        statusCode: string;
    }

    /**
     * The ``EndpointConfiguration`` property type specifies the endpoint types of a REST API.
     *  ``EndpointConfiguration`` is a property of the [AWS::ApiGateway::RestApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html) resource.
     */
    export interface RestApiEndpointConfiguration {
        /**
         * A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is ``"EDGE"``. For a regional API and its custom domain name, the endpoint type is ``REGIONAL``. For a private API, the endpoint type is ``PRIVATE``.
         */
        types?: string[];
        /**
         * A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for ``PRIVATE`` endpoint type.
         */
        vpcEndpointIds?: string[];
    }

    /**
     * ``S3Location`` is a property of the [AWS::ApiGateway::RestApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html) resource that specifies the Amazon S3 location of a OpenAPI (formerly Swagger) file that defines a set of RESTful APIs in JSON or YAML.
     *  On January 1, 2016, the Swagger Specification was donated to the [OpenAPI initiative](https://docs.aws.amazon.com/https://www.openapis.org/), becoming the foundation of the OpenAPI Specification.
     */
    export interface RestApiS3Location {
        /**
         * The name of the S3 bucket where the OpenAPI file is stored.
         */
        bucket?: string;
        /**
         * The Amazon S3 ETag (a file checksum) of the OpenAPI file. If you don't specify a value, API Gateway skips ETag validation of your OpenAPI file.
         */
        eTag?: string;
        /**
         * The file name of the OpenAPI file (Amazon S3 object name).
         */
        key?: string;
        /**
         * For versioning-enabled buckets, a specific version of the OpenAPI file.
         */
        version?: string;
    }

    /**
     * The ``AccessLogSetting`` property type specifies settings for logging access in this stage.
     *   ``AccessLogSetting`` is a property of the [AWS::ApiGateway::Stage](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-stage.html) resource.
     */
    export interface StageAccessLogSetting {
        /**
         * The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with ``amazon-apigateway-``. This parameter is required to enable access logging.
         */
        destinationArn?: string;
        /**
         * A single line format of the access logs of data, as specified by selected [$context variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference). The format must include at least ``$context.requestId``. This parameter is required to enable access logging.
         */
        format?: string;
    }

    /**
     * Configuration settings of a canary deployment.
     */
    export interface StageCanarySetting {
        /**
         * The ID of the canary deployment.
         */
        deploymentId?: string;
        /**
         * The percent (0-100) of traffic diverted to a canary deployment.
         */
        percentTraffic?: number;
        /**
         * Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
         */
        stageVariableOverrides?: {[key: string]: string};
        /**
         * A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
         */
        useStageCache?: boolean;
    }

    /**
     * The ``MethodSetting`` property type configures settings for all methods in a stage.
     *  The ``MethodSettings`` property of the ``AWS::ApiGateway::Stage`` resource contains a list of ``MethodSetting`` property types.
     */
    export interface StageMethodSetting {
        /**
         * Specifies whether the cached responses are encrypted.
         */
        cacheDataEncrypted?: boolean;
        /**
         * Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
         */
        cacheTtlInSeconds?: number;
        /**
         * Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
         */
        cachingEnabled?: boolean;
        /**
         * Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend that you don't enable this option for production APIs.
         */
        dataTraceEnabled?: boolean;
        /**
         * The HTTP method. To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
         */
        httpMethod?: string;
        /**
         * Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to CloudWatch Logs, or choose ``INFO`` to include all ``ERROR`` events as well as extra informational events.
         */
        loggingLevel?: string;
        /**
         * Specifies whether Amazon CloudWatch metrics are enabled for this method.
         */
        metricsEnabled?: boolean;
        /**
         * The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``). To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
         */
        resourcePath?: string;
        /**
         * Specifies the throttling burst limit.
         */
        throttlingBurstLimit?: number;
        /**
         * Specifies the throttling rate limit.
         */
        throttlingRateLimit?: number;
    }

    /**
     * API stage name of the associated API stage in a usage plan.
     */
    export interface UsagePlanApiStage {
        /**
         * API Id of the associated API stage in a usage plan.
         */
        apiId?: string;
        /**
         * API stage name of the associated API stage in a usage plan.
         */
        stage?: string;
        /**
         * Map containing method level throttling information for API stage in a usage plan.
         */
        throttle?: {[key: string]: outputs.apigateway.UsagePlanThrottleSettings};
    }

    /**
     * ``QuotaSettings`` is a property of the [AWS::ApiGateway::UsagePlan](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html) resource that specifies a target for the maximum number of requests users can make to your REST APIs.
     *  In some cases clients can exceed the targets that you set. Don’t rely on usage plans to control costs. Consider using [](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html) to monitor costs and [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) to manage API requests.
     */
    export interface UsagePlanQuotaSettings {
        /**
         * The target maximum number of requests that can be made in a given time period.
         */
        limit?: number;
        /**
         * The number of requests subtracted from the given limit in the initial time period.
         */
        offset?: number;
        /**
         * The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
         */
        period?: string;
    }

    /**
     * ``ThrottleSettings`` is a property of the [AWS::ApiGateway::UsagePlan](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html) resource that specifies the overall request rate (average requests per second) and burst capacity when users call your REST APIs.
     */
    export interface UsagePlanThrottleSettings {
        /**
         * The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.
         */
        burstLimit?: number;
        /**
         * The API target request rate limit.
         */
        rateLimit?: number;
    }

}

export namespace apigatewayv2 {
    /**
     * The ``BodyS3Location`` property specifies an S3 location from which to import an OpenAPI definition. Supported only for HTTP APIs.
     */
    export interface ApiBodyS3Location {
        /**
         * The S3 bucket that contains the OpenAPI definition to import. Required if you specify a ``BodyS3Location`` for an API.
         */
        bucket?: string;
        /**
         * The Etag of the S3 object.
         */
        etag?: string;
        /**
         * The key of the S3 object. Required if you specify a ``BodyS3Location`` for an API.
         */
        key?: string;
        /**
         * The version of the S3 object.
         */
        version?: string;
    }

    /**
     * The ``Cors`` property specifies a CORS configuration for an API. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
     */
    export interface ApiCors {
        /**
         * Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
         */
        allowCredentials?: boolean;
        /**
         * Represents a collection of allowed headers. Supported only for HTTP APIs.
         */
        allowHeaders?: string[];
        /**
         * Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
         */
        allowMethods?: string[];
        /**
         * Represents a collection of allowed origins. Supported only for HTTP APIs.
         */
        allowOrigins?: string[];
        /**
         * Represents a collection of exposed headers. Supported only for HTTP APIs.
         */
        exposeHeaders?: string[];
        /**
         * The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
         */
        maxAge?: number;
    }

    /**
     * The ``JWTConfiguration`` property specifies the configuration of a JWT authorizer. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
     */
    export interface AuthorizerJwtConfiguration {
        /**
         * A list of the intended recipients of the JWT. A valid JWT must provide an ``aud`` that matches at least one entry in this list. See [RFC 7519](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc7519#section-4.1.3). Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
         */
        audience?: string[];
        /**
         * The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: ``https://cognito-idp.{region}.amazonaws.com/{userPoolId}``. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
         */
        issuer?: string;
    }

    /**
     * The ``DomainNameConfiguration`` property type specifies the configuration for an API's domain name.
     *  ``DomainNameConfiguration`` is a property of the [AWS::ApiGatewayV2::DomainName](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html) resource.
     */
    export interface DomainNameConfiguration {
        /**
         * An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
         */
        certificateArn?: string;
        /**
         * The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
         */
        certificateName?: string;
        /**
         * The endpoint type.
         */
        endpointType?: string;
        /**
         * The Amazon resource name (ARN) for the public certificate issued by ACMlong. This ARN is used to validate custom domain ownership. It's required only if you configure mutual TLS and use either an ACM-imported or a private CA certificate ARN as the regionalCertificateArn.
         */
        ownershipVerificationCertificateArn?: string;
        /**
         * The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are ``TLS_1_0`` and ``TLS_1_2``.
         */
        securityPolicy?: string;
    }

    /**
     * If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
     */
    export interface DomainNameMutualTlsAuthentication {
        /**
         * An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, ``s3://bucket-name/key-name``. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
         */
        truststoreUri?: string;
        /**
         * The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
         */
        truststoreVersion?: string;
    }

    export interface RouteParameterConstraints {
        required: boolean;
    }

    /**
     * Specifies whether the parameter is required.
     */
    export interface RouteResponseParameterConstraints {
        /**
         * Specifies whether the parameter is required.
         */
        required: boolean;
    }

}

export namespace appconfig {
    /**
     * A list of methods for validating the configuration.
     */
    export interface ConfigurationProfileValidators {
        /**
         * Either the JSON Schema content or the Amazon Resource Name (ARN) of an Lambda function.
         */
        content?: string;
        /**
         * AWS AppConfig supports validators of type JSON_SCHEMA and LAMBDA.
         */
        type?: string;
    }

    /**
     * Amazon CloudWatch alarm to monitor during the deployment process.
     */
    export interface EnvironmentMonitor {
        /**
         * Amazon Resource Name (ARN) of the Amazon CloudWatch alarm.
         */
        alarmArn: string;
        /**
         * ARN of an AWS Identity and Access Management (IAM) role for AWS AppConfig to monitor AlarmArn.
         */
        alarmRoleArn?: string;
    }

    /**
     * An action for an extension to take at a specific action point.
     */
    export interface ExtensionAction {
        /**
         * The description of the extension Action.
         */
        description?: string;
        /**
         * The name of the extension action.
         */
        name: string;
        /**
         * The ARN of the role for invoking the extension action.
         */
        roleArn?: string;
        /**
         * The URI of the extension action.
         */
        uri: string;
    }

    /**
     * A parameter for the extension to send to a specific action.
     */
    export interface ExtensionParameter {
        /**
         * The description of the extension Parameter.
         */
        description?: string;
        dynamic?: boolean;
        required: boolean;
    }

}

export namespace appflow {
    /**
     * Contains information about the configuration of the lambda which is being registered as the connector.
     */
    export interface ConnectorLambdaConnectorProvisioningConfig {
        /**
         * Lambda ARN of the connector being registered.
         */
        lambdaArn: string;
    }

    export interface ConnectorProfileAmplitudeConnectorProfileCredentials {
        /**
         * A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
         */
        apiKey: string;
        /**
         * The Secret Access Key portion of the credentials.
         */
        secretKey: string;
    }

    export interface ConnectorProfileApiKeyCredentials {
        /**
         * The API key required for API key authentication.
         */
        apiKey: string;
        /**
         * The API secret key required for API key authentication.
         */
        apiSecretKey?: string;
    }

    export interface ConnectorProfileBasicAuthCredentials {
        /**
         * The password to use to connect to a resource.
         */
        password: string;
        /**
         * The username to use to connect to a resource.
         */
        username: string;
    }

    /**
     * Connector specific configurations needed to create connector profile
     */
    export interface ConnectorProfileConfig {
        /**
         * The connector-specific credentials required by each connector.
         */
        connectorProfileCredentials?: outputs.appflow.ConnectorProfileCredentials;
        /**
         * The connector-specific properties of the profile configuration.
         */
        connectorProfileProperties?: outputs.appflow.ConnectorProfileProperties;
    }

    export interface ConnectorProfileConnectorOAuthRequest {
        /**
         * The code provided by the connector when it has been authenticated via the connected app.
         */
        authCode?: string;
        /**
         * The URL to which the authentication server redirects the browser after authorization has been
         * granted.
         */
        redirectUri?: string;
    }

    /**
     * Connector specific configuration needed to create connector profile based on Authentication mechanism
     */
    export interface ConnectorProfileCredentials {
        /**
         * The connector-specific credentials required when using Amplitude.
         */
        amplitude?: outputs.appflow.ConnectorProfileAmplitudeConnectorProfileCredentials;
        /**
         * The connector-specific profile credentials that are required when using the custom connector.
         */
        customConnector?: outputs.appflow.ConnectorProfileCustomConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Datadog.
         */
        datadog?: outputs.appflow.ConnectorProfileDatadogConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Dynatrace.
         */
        dynatrace?: outputs.appflow.ConnectorProfileDynatraceConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Google Analytics.
         */
        googleAnalytics?: outputs.appflow.ConnectorProfileGoogleAnalyticsConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Infor Nexus.
         */
        inforNexus?: outputs.appflow.ConnectorProfileInforNexusConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Marketo.
         */
        marketo?: outputs.appflow.ConnectorProfileMarketoConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Salesforce Pardot.
         */
        pardot?: outputs.appflow.ConnectorProfilePardotConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Amazon Redshift.
         */
        redshift?: outputs.appflow.ConnectorProfileRedshiftConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Salesforce.
         */
        salesforce?: outputs.appflow.ConnectorProfileSalesforceConnectorProfileCredentials;
        /**
         * The connector-specific profile credentials required when using SAPOData.
         */
        sapoData?: outputs.appflow.ConnectorProfileSapoDataConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using ServiceNow.
         */
        serviceNow?: outputs.appflow.ConnectorProfileServiceNowConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Singular.
         */
        singular?: outputs.appflow.ConnectorProfileSingularConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Slack.
         */
        slack?: outputs.appflow.ConnectorProfileSlackConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Snowflake.
         */
        snowflake?: outputs.appflow.ConnectorProfileSnowflakeConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Trend Micro.
         */
        trendmicro?: outputs.appflow.ConnectorProfileTrendmicroConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Veeva.
         */
        veeva?: outputs.appflow.ConnectorProfileVeevaConnectorProfileCredentials;
        /**
         * The connector-specific credentials required when using Zendesk.
         */
        zendesk?: outputs.appflow.ConnectorProfileZendeskConnectorProfileCredentials;
    }

    export interface ConnectorProfileCustomAuthCredentials {
        /**
         * A map that holds custom authentication credentials.
         */
        credentialsMap?: {[key: string]: string};
        /**
         * The custom authentication type that the connector uses.
         */
        customAuthenticationType: string;
    }

    export interface ConnectorProfileCustomConnectorProfileCredentials {
        /**
         * The API keys required for the authentication of the user.
         */
        apiKey?: outputs.appflow.ConnectorProfileApiKeyCredentials;
        /**
         * The authentication type that the custom connector uses for authenticating while creating a connector profile.
         */
        authenticationType: enums.appflow.ConnectorProfileAuthenticationType;
        /**
         * The basic credentials that are required for the authentication of the user.
         */
        basic?: outputs.appflow.ConnectorProfileBasicAuthCredentials;
        /**
         * If the connector uses the custom authentication mechanism, this holds the required credentials.
         */
        custom?: outputs.appflow.ConnectorProfileCustomAuthCredentials;
        /**
         * The OAuth 2.0 credentials required for the authentication of the user.
         */
        oauth2?: outputs.appflow.ConnectorProfileOAuth2Credentials;
    }

    export interface ConnectorProfileCustomConnectorProfileProperties {
        /**
         * The OAuth 2.0 properties required for OAuth 2.0 authentication.
         */
        oAuth2Properties?: outputs.appflow.ConnectorProfileOAuth2Properties;
        /**
         * A map of properties that are required to create a profile for the custom connector.
         */
        profileProperties?: {[key: string]: string};
    }

    export interface ConnectorProfileDatadogConnectorProfileCredentials {
        /**
         * A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
         */
        apiKey: string;
        /**
         * Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
         */
        applicationKey: string;
    }

    export interface ConnectorProfileDatadogConnectorProfileProperties {
        /**
         * The location of the Datadog resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileDynatraceConnectorProfileCredentials {
        /**
         * The API tokens used by Dynatrace API to authenticate various API calls.
         */
        apiToken: string;
    }

    export interface ConnectorProfileDynatraceConnectorProfileProperties {
        /**
         * The location of the Dynatrace resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileGoogleAnalyticsConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The identiﬁer for the desired client.
         */
        clientId: string;
        /**
         * The client secret used by the oauth client to authenticate to the authorization server.
         */
        clientSecret: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        /**
         * The credentials used to acquire new access tokens.
         */
        refreshToken?: string;
    }

    export interface ConnectorProfileInforNexusConnectorProfileCredentials {
        /**
         * The Access Key portion of the credentials.
         */
        accessKeyId: string;
        /**
         * The encryption keys used to encrypt data.
         */
        datakey: string;
        /**
         * The secret key used to sign requests.
         */
        secretAccessKey: string;
        /**
         * The identiﬁer for the user.
         */
        userId: string;
    }

    export interface ConnectorProfileInforNexusConnectorProfileProperties {
        /**
         * The location of the InforNexus resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileMarketoConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The identiﬁer for the desired client.
         */
        clientId: string;
        /**
         * The client secret used by the oauth client to authenticate to the authorization server.
         */
        clientSecret: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
    }

    export interface ConnectorProfileMarketoConnectorProfileProperties {
        /**
         * The location of the Marketo resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileOAuth2Credentials {
        /**
         * The access token used to access the connector on your behalf.
         */
        accessToken?: string;
        /**
         * The identifier for the desired client.
         */
        clientId?: string;
        /**
         * The client secret used by the OAuth client to authenticate to the authorization server.
         */
        clientSecret?: string;
        oAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        /**
         * The refresh token used to refresh an expired access token.
         */
        refreshToken?: string;
    }

    export interface ConnectorProfileOAuth2Properties {
        /**
         * The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication.
         */
        oAuth2GrantType?: enums.appflow.ConnectorProfileOAuth2GrantType;
        /**
         * The token URL required for OAuth 2.0 authentication.
         */
        tokenUrl?: string;
        /**
         * Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.
         */
        tokenUrlCustomProperties?: {[key: string]: string};
    }

    export interface ConnectorProfileOAuthProperties {
        /**
         * The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
         */
        authCodeUrl?: string;
        /**
         * The OAuth scopes required for OAuth type authentication.
         */
        oAuthScopes?: string[];
        /**
         * The token url required to fetch access/refresh tokens using authorization code and also to refresh expired access token using refresh token.
         */
        tokenUrl?: string;
    }

    export interface ConnectorProfilePardotConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The client credentials to fetch access token and refresh token.
         */
        clientCredentialsArn?: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        /**
         * The credentials used to acquire new access tokens.
         */
        refreshToken?: string;
    }

    export interface ConnectorProfilePardotConnectorProfileProperties {
        /**
         * The Business unit id of Salesforce Pardot instance to be connected
         */
        businessUnitId: string;
        /**
         * The location of the Salesforce Pardot resource
         */
        instanceUrl?: string;
        /**
         * Indicates whether the connector profile applies to a demo or production environment
         */
        isSandboxEnvironment?: boolean;
    }

    /**
     * Connector specific properties needed to create connector profile - currently not needed for Amplitude, Trendmicro, Googleanalytics and Singular
     */
    export interface ConnectorProfileProperties {
        /**
         * The properties required by the custom connector.
         */
        customConnector?: outputs.appflow.ConnectorProfileCustomConnectorProfileProperties;
        /**
         * The connector-specific properties required by Datadog.
         */
        datadog?: outputs.appflow.ConnectorProfileDatadogConnectorProfileProperties;
        /**
         * The connector-specific properties required by Dynatrace.
         */
        dynatrace?: outputs.appflow.ConnectorProfileDynatraceConnectorProfileProperties;
        /**
         * The connector-specific properties required by Infor Nexus.
         */
        inforNexus?: outputs.appflow.ConnectorProfileInforNexusConnectorProfileProperties;
        /**
         * The connector-specific properties required by Marketo.
         */
        marketo?: outputs.appflow.ConnectorProfileMarketoConnectorProfileProperties;
        /**
         * The connector-specific properties required by Salesforce Pardot.
         */
        pardot?: outputs.appflow.ConnectorProfilePardotConnectorProfileProperties;
        /**
         * The connector-specific properties required by Amazon Redshift.
         */
        redshift?: outputs.appflow.ConnectorProfileRedshiftConnectorProfileProperties;
        /**
         * The connector-specific properties required by Salesforce.
         */
        salesforce?: outputs.appflow.ConnectorProfileSalesforceConnectorProfileProperties;
        /**
         * The connector-specific profile properties required when using SAPOData.
         */
        sapoData?: outputs.appflow.ConnectorProfileSapoDataConnectorProfileProperties;
        /**
         * The connector-specific properties required by serviceNow.
         */
        serviceNow?: outputs.appflow.ConnectorProfileServiceNowConnectorProfileProperties;
        /**
         * The connector-specific properties required by Slack.
         */
        slack?: outputs.appflow.ConnectorProfileSlackConnectorProfileProperties;
        /**
         * The connector-specific properties required by Snowflake.
         */
        snowflake?: outputs.appflow.ConnectorProfileSnowflakeConnectorProfileProperties;
        /**
         * The connector-specific properties required by Veeva.
         */
        veeva?: outputs.appflow.ConnectorProfileVeevaConnectorProfileProperties;
        /**
         * The connector-specific properties required by Zendesk.
         */
        zendesk?: outputs.appflow.ConnectorProfileZendeskConnectorProfileProperties;
    }

    export interface ConnectorProfileRedshiftConnectorProfileCredentials {
        /**
         * The password that corresponds to the username.
         */
        password?: string;
        /**
         * The name of the user.
         */
        username?: string;
    }

    export interface ConnectorProfileRedshiftConnectorProfileProperties {
        /**
         * The name of the Amazon S3 bucket associated with Redshift.
         */
        bucketName: string;
        /**
         * The object key for the destination bucket in which Amazon AppFlow will place the ﬁles.
         */
        bucketPrefix?: string;
        /**
         * The unique identifier of the Amazon Redshift cluster.
         */
        clusterIdentifier?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that grants Amazon AppFlow access to the data through the Amazon Redshift Data API.
         */
        dataApiRoleArn?: string;
        /**
         * The name of the Amazon Redshift database that will store the transferred data.
         */
        databaseName?: string;
        /**
         * The JDBC URL of the Amazon Redshift cluster.
         */
        databaseUrl?: string;
        /**
         * If Amazon AppFlow will connect to Amazon Redshift Serverless or Amazon Redshift cluster.
         */
        isRedshiftServerless?: boolean;
        /**
         * The Amazon Resource Name (ARN) of the IAM role.
         */
        roleArn: string;
        /**
         * The name of the Amazon Redshift serverless workgroup
         */
        workgroupName?: string;
    }

    export interface ConnectorProfileSalesforceConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The client credentials to fetch access token and refresh token.
         */
        clientCredentialsArn?: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        /**
         * The credentials used to access your Salesforce records
         */
        jwtToken?: string;
        /**
         * The grant types to fetch an access token
         */
        oAuth2GrantType?: enums.appflow.ConnectorProfileOAuth2GrantType;
        /**
         * The credentials used to acquire new access tokens.
         */
        refreshToken?: string;
    }

    export interface ConnectorProfileSalesforceConnectorProfileProperties {
        /**
         * The location of the Salesforce resource
         */
        instanceUrl?: string;
        /**
         * Indicates whether the connector profile applies to a sandbox or production environment
         */
        isSandboxEnvironment?: boolean;
        /**
         * Indicates whether to make Metadata And Authorization calls over Pivate Network
         */
        usePrivateLinkForMetadataAndAuthorization?: boolean;
    }

    export interface ConnectorProfileSapoDataConnectorProfileCredentials {
        /**
         * The SAPOData basic authentication credentials.
         */
        basicAuthCredentials?: outputs.appflow.ConnectorProfileBasicAuthCredentials;
        /**
         * The SAPOData OAuth type authentication credentials.
         */
        oAuthCredentials?: outputs.appflow.ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsProperties;
    }

    /**
     * The SAPOData OAuth type authentication credentials.
     */
    export interface ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsProperties {
        accessToken?: string;
        clientId?: string;
        clientSecret?: string;
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
        refreshToken?: string;
    }

    export interface ConnectorProfileSapoDataConnectorProfileProperties {
        /**
         * The location of the SAPOData resource.
         */
        applicationHostUrl?: string;
        /**
         * The application path to catalog service.
         */
        applicationServicePath?: string;
        /**
         * The client number for the client creating the connection.
         */
        clientNumber?: string;
        /**
         * If you set this parameter to true, Amazon AppFlow bypasses the single sign-on (SSO) settings in your SAP account when it accesses your SAP OData instance.
         */
        disableSso?: boolean;
        /**
         * The logon language of SAPOData instance.
         */
        logonLanguage?: string;
        /**
         * The SAPOData OAuth properties required for OAuth type authentication.
         */
        oAuthProperties?: outputs.appflow.ConnectorProfileOAuthProperties;
        /**
         * The port number of the SAPOData instance.
         */
        portNumber?: number;
        /**
         * The SAPOData Private Link service name to be used for private data transfers.
         */
        privateLinkServiceName?: string;
    }

    export interface ConnectorProfileServiceNowConnectorProfileCredentials {
        /**
         * The OAuth 2.0 credentials required to authenticate the user.
         */
        oAuth2Credentials?: outputs.appflow.ConnectorProfileOAuth2Credentials;
        /**
         * The password that corresponds to the username.
         */
        password?: string;
        /**
         * The name of the user.
         */
        username?: string;
    }

    export interface ConnectorProfileServiceNowConnectorProfileProperties {
        /**
         * The location of the ServiceNow resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileSingularConnectorProfileCredentials {
        /**
         * A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
         */
        apiKey: string;
    }

    export interface ConnectorProfileSlackConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The identiﬁer for the desired client.
         */
        clientId: string;
        /**
         * The client secret used by the oauth client to authenticate to the authorization server.
         */
        clientSecret: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
    }

    export interface ConnectorProfileSlackConnectorProfileProperties {
        /**
         * The location of the Slack resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileSnowflakeConnectorProfileCredentials {
        /**
         * The password that corresponds to the username.
         */
        password: string;
        /**
         * The name of the user.
         */
        username: string;
    }

    export interface ConnectorProfileSnowflakeConnectorProfileProperties {
        /**
         * The name of the account.
         */
        accountName?: string;
        /**
         * The name of the Amazon S3 bucket associated with Snowﬂake.
         */
        bucketName: string;
        /**
         * The bucket prefix that refers to the Amazon S3 bucket associated with Snowﬂake.
         */
        bucketPrefix?: string;
        /**
         * The Snowﬂake Private Link service name to be used for private data transfers.
         */
        privateLinkServiceName?: string;
        /**
         * The region of the Snowﬂake account.
         */
        region?: string;
        /**
         * The name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the
         * Snowﬂake account. This is written in the following format: < Database>< Schema><Stage Name>.
         */
        stage: string;
        /**
         * The name of the Snowﬂake warehouse.
         */
        warehouse: string;
    }

    export interface ConnectorProfileTrendmicroConnectorProfileCredentials {
        /**
         * The Secret Access Key portion of the credentials.
         */
        apiSecretKey: string;
    }

    export interface ConnectorProfileVeevaConnectorProfileCredentials {
        /**
         * The password that corresponds to the username.
         */
        password: string;
        /**
         * The name of the user.
         */
        username: string;
    }

    export interface ConnectorProfileVeevaConnectorProfileProperties {
        /**
         * The location of the Veeva resource
         */
        instanceUrl: string;
    }

    export interface ConnectorProfileZendeskConnectorProfileCredentials {
        /**
         * The credentials used to access protected resources.
         */
        accessToken?: string;
        /**
         * The identiﬁer for the desired client.
         */
        clientId: string;
        /**
         * The client secret used by the oauth client to authenticate to the authorization server.
         */
        clientSecret: string;
        /**
         * The oauth needed to request security tokens from the connector endpoint.
         */
        connectorOAuthRequest?: outputs.appflow.ConnectorProfileConnectorOAuthRequest;
    }

    export interface ConnectorProfileZendeskConnectorProfileProperties {
        /**
         * The location of the Zendesk resource
         */
        instanceUrl: string;
    }

    /**
     * Contains information about the configuration of the connector being registered.
     */
    export interface ConnectorProvisioningConfig {
        /**
         * Contains information about the configuration of the lambda which is being registered as the connector.
         */
        lambda?: outputs.appflow.ConnectorLambdaConnectorProvisioningConfig;
    }

    export interface FlowAggregationConfig {
        /**
         * Specifies whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated.
         */
        aggregationType?: enums.appflow.FlowAggregationType;
        /**
         * The desired file size, in MB, for each output file that Amazon AppFlow writes to the flow destination. For each file, Amazon AppFlow attempts to achieve the size that you specify. The actual file sizes might differ from this target based on the number and size of the records that each file contains.
         */
        targetFileSize?: number;
    }

    export interface FlowAmplitudeSourceProperties {
        /**
         * The object specified in the Amplitude flow source.
         */
        object: string;
    }

    /**
     * Operation to be performed on provided source fields
     */
    export interface FlowConnectorOperator {
        /**
         * The operation to be performed on the provided Amplitude source fields.
         */
        amplitude?: enums.appflow.FlowAmplitudeConnectorOperator;
        /**
         * Operators supported by the custom connector.
         */
        customConnector?: enums.appflow.FlowOperator;
        /**
         * The operation to be performed on the provided Datadog source fields.
         */
        datadog?: enums.appflow.FlowDatadogConnectorOperator;
        /**
         * The operation to be performed on the provided Dynatrace source fields.
         */
        dynatrace?: enums.appflow.FlowDynatraceConnectorOperator;
        /**
         * The operation to be performed on the provided Google Analytics source fields.
         */
        googleAnalytics?: enums.appflow.FlowGoogleAnalyticsConnectorOperator;
        /**
         * The operation to be performed on the provided Infor Nexus source fields.
         */
        inforNexus?: enums.appflow.FlowInforNexusConnectorOperator;
        /**
         * The operation to be performed on the provided Marketo source fields.
         */
        marketo?: enums.appflow.FlowMarketoConnectorOperator;
        /**
         * The operation to be performed on the provided Salesforce Pardot source fields.
         */
        pardot?: enums.appflow.FlowPardotConnectorOperator;
        /**
         * The operation to be performed on the provided Amazon S3 source fields.
         */
        s3?: enums.appflow.FlowS3ConnectorOperator;
        /**
         * The operation to be performed on the provided Salesforce source fields.
         */
        salesforce?: enums.appflow.FlowSalesforceConnectorOperator;
        /**
         * The operation to be performed on the provided SAPOData source fields.
         */
        sapoData?: enums.appflow.FlowSapoDataConnectorOperator;
        /**
         * The operation to be performed on the provided ServiceNow source fields.
         */
        serviceNow?: enums.appflow.FlowServiceNowConnectorOperator;
        /**
         * The operation to be performed on the provided Singular source fields.
         */
        singular?: enums.appflow.FlowSingularConnectorOperator;
        /**
         * The operation to be performed on the provided Slack source fields.
         */
        slack?: enums.appflow.FlowSlackConnectorOperator;
        /**
         * The operation to be performed on the provided Trend Micro source fields.
         */
        trendmicro?: enums.appflow.FlowTrendmicroConnectorOperator;
        /**
         * The operation to be performed on the provided Veeva source fields.
         */
        veeva?: enums.appflow.FlowVeevaConnectorOperator;
        /**
         * The operation to be performed on the provided Zendesk source fields.
         */
        zendesk?: enums.appflow.FlowZendeskConnectorOperator;
    }

    export interface FlowCustomConnectorDestinationProperties {
        /**
         * The custom properties that are specific to the connector when it's used as a destination in the flow.
         */
        customProperties?: {[key: string]: string};
        /**
         * The entity specified in the custom connector as a destination in the flow.
         */
        entityName: string;
        /**
         * The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.
         */
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * List of fields used as ID when performing a write operation.
         */
        idFieldNames?: string[];
        /**
         * Specifies the type of write operation to be performed in the custom connector when it's used as destination.
         */
        writeOperationType?: enums.appflow.FlowWriteOperationType;
    }

    export interface FlowCustomConnectorSourceProperties {
        /**
         * Custom properties that are required to use the custom connector as a source.
         */
        customProperties?: {[key: string]: string};
        /**
         * The API of the connector application that Amazon AppFlow uses to transfer your data.
         */
        dataTransferApi?: outputs.appflow.FlowCustomConnectorSourcePropertiesDataTransferApiProperties;
        /**
         * The entity specified in the custom connector as a source in the flow.
         */
        entityName: string;
    }

    /**
     * The API of the connector application that Amazon AppFlow uses to transfer your data.
     */
    export interface FlowCustomConnectorSourcePropertiesDataTransferApiProperties {
        name: string;
        type: enums.appflow.FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesType;
    }

    export interface FlowDatadogSourceProperties {
        /**
         * The object specified in the Datadog flow source.
         */
        object: string;
    }

    /**
     * Destination connector details
     */
    export interface FlowDestinationConnectorProperties {
        /**
         * The properties that are required to query the custom Connector.
         */
        customConnector?: outputs.appflow.FlowCustomConnectorDestinationProperties;
        /**
         * The properties required to query Amazon EventBridge.
         */
        eventBridge?: outputs.appflow.FlowEventBridgeDestinationProperties;
        /**
         * The properties required to query Amazon Lookout for Metrics.
         */
        lookoutMetrics?: outputs.appflow.FlowLookoutMetricsDestinationProperties;
        /**
         * The properties required to query Marketo.
         */
        marketo?: outputs.appflow.FlowMarketoDestinationProperties;
        /**
         * The properties required to query Amazon Redshift.
         */
        redshift?: outputs.appflow.FlowRedshiftDestinationProperties;
        /**
         * The properties required to query Amazon S3.
         */
        s3?: outputs.appflow.FlowS3DestinationProperties;
        /**
         * The properties required to query Salesforce.
         */
        salesforce?: outputs.appflow.FlowSalesforceDestinationProperties;
        /**
         * The properties required to query SAPOData.
         */
        sapoData?: outputs.appflow.FlowSapoDataDestinationProperties;
        /**
         * The properties required to query Snowflake.
         */
        snowflake?: outputs.appflow.FlowSnowflakeDestinationProperties;
        /**
         * The properties required to query Upsolver.
         */
        upsolver?: outputs.appflow.FlowUpsolverDestinationProperties;
        /**
         * The properties required to query Zendesk.
         */
        zendesk?: outputs.appflow.FlowZendeskDestinationProperties;
    }

    /**
     * Configurations of destination connector.
     */
    export interface FlowDestinationFlowConfig {
        /**
         * The API version that the destination connector uses.
         */
        apiVersion?: string;
        /**
         * Name of destination connector profile
         */
        connectorProfileName?: string;
        /**
         * Destination connector type
         */
        connectorType: enums.appflow.FlowConnectorType;
        /**
         * Destination connector details
         */
        destinationConnectorProperties: outputs.appflow.FlowDestinationConnectorProperties;
    }

    export interface FlowDynatraceSourceProperties {
        /**
         * The object specified in the Dynatrace flow source.
         */
        object: string;
    }

    export interface FlowErrorHandlingConfig {
        /**
         * Specifies the name of the Amazon S3 bucket.
         */
        bucketName?: string;
        /**
         * Specifies the Amazon S3 bucket prefix.
         */
        bucketPrefix?: string;
        /**
         * Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
         */
        failOnFirstError?: boolean;
    }

    export interface FlowEventBridgeDestinationProperties {
        /**
         * The object specified in the Amplitude flow source.
         */
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * The object specified in the Amazon EventBridge flow destination.
         */
        object: string;
    }

    /**
     * Trigger settings of the flow.
     */
    export interface FlowGlueDataCatalog {
        /**
         * A string containing the value for the tag
         */
        databaseName: string;
        /**
         * A string containing the value for the tag
         */
        roleArn: string;
        /**
         * A string containing the value for the tag
         */
        tablePrefix: string;
    }

    export interface FlowGoogleAnalyticsSourceProperties {
        /**
         * The object specified in the Google Analytics flow source.
         */
        object: string;
    }

    /**
     * Configuration for scheduled incremental data pull
     */
    export interface FlowIncrementalPullConfig {
        /**
         * A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
         */
        datetimeTypeFieldName?: string;
    }

    export interface FlowInforNexusSourceProperties {
        /**
         * The object specified in the Infor Nexus flow source.
         */
        object: string;
    }

    export interface FlowLookoutMetricsDestinationProperties {
        /**
         * The object specified in the Amazon Lookout for Metrics flow destination.
         */
        object?: string;
    }

    export interface FlowMarketoDestinationProperties {
        /**
         * The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
         */
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * The object specified in the Marketo flow destination.
         */
        object: string;
    }

    export interface FlowMarketoSourceProperties {
        /**
         * The object specified in the Marketo flow source.
         */
        object: string;
    }

    /**
     * Configurations of metadata catalog of the flow.
     */
    export interface FlowMetadataCatalogConfig {
        /**
         * Configurations of glue data catalog of the flow.
         */
        glueDataCatalog?: outputs.appflow.FlowGlueDataCatalog;
    }

    export interface FlowPardotSourceProperties {
        /**
         * The object specified in the Salesforce Pardot flow source.
         */
        object: string;
    }

    export interface FlowPrefixConfig {
        /**
         * Specifies whether the destination file path includes either or both of the following elements:
         *
         * - **EXECUTION_ID** - The ID that Amazon AppFlow assigns to the flow run.
         * - **SCHEMA_VERSION** - The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:
         *
         * - Source-to-destination field mappings
         * - Field data types
         * - Partition keys
         */
        pathPrefixHierarchy?: enums.appflow.FlowPathPrefix[];
        /**
         * Determines the level of granularity for the date and time that's included in the prefix.
         */
        prefixFormat?: enums.appflow.FlowPrefixFormat;
        /**
         * Determines the format of the prefix, and whether it applies to the file name, file path, or both.
         */
        prefixType?: enums.appflow.FlowPrefixType;
    }

    export interface FlowRedshiftDestinationProperties {
        /**
         * The object key for the bucket in which Amazon AppFlow places the destination files.
         */
        bucketPrefix?: string;
        /**
         * The settings that determine how Amazon AppFlow handles an error when placing data in the Amazon Redshift destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
         */
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * The intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
         */
        intermediateBucketName: string;
        /**
         * The object specified in the Amazon Redshift flow destination.
         */
        object: string;
    }

    export interface FlowS3DestinationProperties {
        /**
         * The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
         */
        bucketName: string;
        /**
         * The object key for the destination bucket in which Amazon AppFlow places the files.
         */
        bucketPrefix?: string;
        /**
         * The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination.
         */
        s3OutputFormatConfig?: outputs.appflow.FlowS3OutputFormatConfig;
    }

    export interface FlowS3InputFormatConfig {
        /**
         * The file type that Amazon AppFlow gets from your Amazon S3 bucket.
         */
        s3InputFileType?: enums.appflow.FlowS3InputFormatConfigS3InputFileType;
    }

    export interface FlowS3OutputFormatConfig {
        /**
         * The aggregation settings that you can use to customize the output format of your flow data.
         */
        aggregationConfig?: outputs.appflow.FlowAggregationConfig;
        /**
         * Indicates the file type that Amazon AppFlow places in the Amazon S3 bucket.
         */
        fileType?: enums.appflow.FlowFileType;
        /**
         * Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date.
         */
        prefixConfig?: outputs.appflow.FlowPrefixConfig;
        /**
         * If your file output format is Parquet, use this parameter to set whether Amazon AppFlow preserves the data types in your source data when it writes the output to Amazon S3.
         *
         * - `true` : Amazon AppFlow preserves the data types when it writes to Amazon S3. For example, an integer or `1` in your source data is still an integer in your output.
         * - `false` : Amazon AppFlow converts all of the source data into strings when it writes to Amazon S3. For example, an integer of `1` in your source data becomes the string `"1"` in the output.
         */
        preserveSourceDataTyping?: boolean;
    }

    export interface FlowS3SourceProperties {
        /**
         * The Amazon S3 bucket name where the source files are stored.
         */
        bucketName: string;
        /**
         * The object key for the Amazon S3 bucket in which the source files are stored.
         */
        bucketPrefix: string;
        /**
         * When you use Amazon S3 as the source, the configuration format that you provide the flow input data.
         */
        s3InputFormatConfig?: outputs.appflow.FlowS3InputFormatConfig;
    }

    export interface FlowSalesforceDestinationProperties {
        /**
         * Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data to Salesforce.
         *
         * - **AUTOMATIC** - The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers to Salesforce. If your flow transfers fewer than 1,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.
         *
         * Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900 records, and it might use Bulk API 2.0 on the next day to transfer 1,100 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.
         *
         * By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.
         * - **BULKV2** - Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.
         *
         * Note that Bulk API 2.0 does not transfer Salesforce compound fields.
         * - **REST_SYNC** - Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail with a timed out error.
         */
        dataTransferApi?: enums.appflow.FlowDataTransferApi;
        /**
         * The settings that determine how Amazon AppFlow handles an error when placing data in the Salesforce destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
         */
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * List of fields used as ID when performing a write operation.
         */
        idFieldNames?: string[];
        /**
         * The object specified in the Salesforce flow destination.
         */
        object: string;
        /**
         * This specifies the type of write operation to be performed in Salesforce. When the value is `UPSERT` , then `idFieldNames` is required.
         */
        writeOperationType?: enums.appflow.FlowWriteOperationType;
    }

    export interface FlowSalesforceSourceProperties {
        /**
         * Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data from Salesforce.
         *
         * - **AUTOMATIC** - The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers from Salesforce. If your flow transfers fewer than 1,000,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.
         *
         * Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900,000 records, and it might use Bulk API 2.0 on the next day to transfer 1,100,000 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.
         *
         * By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.
         * - **BULKV2** - Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.
         *
         * Note that Bulk API 2.0 does not transfer Salesforce compound fields.
         * - **REST_SYNC** - Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail wituh a timed out error.
         */
        dataTransferApi?: enums.appflow.FlowDataTransferApi;
        /**
         * The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
         */
        enableDynamicFieldUpdate?: boolean;
        /**
         * Indicates whether Amazon AppFlow includes deleted files in the flow run.
         */
        includeDeletedRecords?: boolean;
        /**
         * The object specified in the Salesforce flow source.
         */
        object: string;
    }

    export interface FlowSapoDataDestinationProperties {
        /**
         * The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
         */
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * List of fields used as ID when performing a write operation.
         */
        idFieldNames?: string[];
        /**
         * The object path specified in the SAPOData flow destination.
         */
        objectPath: string;
        /**
         * Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.
         *
         * For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.
         */
        successResponseHandlingConfig?: outputs.appflow.FlowSuccessResponseHandlingConfig;
        /**
         * The possible write operations in the destination connector. When this value is not provided, this defaults to the `INSERT` operation.
         */
        writeOperationType?: enums.appflow.FlowWriteOperationType;
    }

    /**
     * SAP Source connector page size
     */
    export interface FlowSapoDataPaginationConfig {
        maxPageSize: number;
    }

    /**
     * SAP Source connector parallelism factor
     */
    export interface FlowSapoDataParallelismConfig {
        maxParallelism: number;
    }

    export interface FlowSapoDataSourceProperties {
        /**
         * The object path specified in the SAPOData flow source.
         */
        objectPath: string;
        paginationConfig?: outputs.appflow.FlowSapoDataPaginationConfig;
        parallelismConfig?: outputs.appflow.FlowSapoDataParallelismConfig;
    }

    /**
     * Details required for scheduled trigger type
     */
    export interface FlowScheduledTriggerProperties {
        /**
         * Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run.
         */
        dataPullMode?: enums.appflow.FlowScheduledTriggerPropertiesDataPullMode;
        /**
         * Specifies the date range for the records to import from the connector in the first flow run.
         */
        firstExecutionFrom?: number;
        /**
         * Defines how many times a scheduled flow fails consecutively before Amazon AppFlow deactivates it.
         */
        flowErrorDeactivationThreshold?: number;
        /**
         * The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as `2022-04-27T13:00:00-07:00` .
         */
        scheduleEndTime?: number;
        /**
         * The scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)` .
         */
        scheduleExpression: string;
        /**
         * Specifies the optional offset that is added to the time interval for a schedule-triggered flow.
         */
        scheduleOffset?: number;
        /**
         * The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as `2022-04-26T13:00:00-07:00` .
         */
        scheduleStartTime?: number;
        /**
         * Specifies the time zone used when referring to the dates and times of a scheduled flow, such as `America/New_York` . This time zone is only a descriptive label. It doesn't affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow.
         *
         * If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the `America/New_York` timezone are `-04:00` EDT and `-05:00 EST` .
         */
        timeZone?: string;
    }

    export interface FlowServiceNowSourceProperties {
        /**
         * The object specified in the ServiceNow flow source.
         */
        object: string;
    }

    export interface FlowSingularSourceProperties {
        /**
         * The object specified in the Singular flow source.
         */
        object: string;
    }

    export interface FlowSlackSourceProperties {
        /**
         * The object specified in the Slack flow source.
         */
        object: string;
    }

    export interface FlowSnowflakeDestinationProperties {
        /**
         * The object key for the destination bucket in which Amazon AppFlow places the files.
         */
        bucketPrefix?: string;
        /**
         * The settings that determine how Amazon AppFlow handles an error when placing data in the Snowflake destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
         */
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * The intermediate bucket that Amazon AppFlow uses when moving data into Snowflake.
         */
        intermediateBucketName: string;
        /**
         * The object specified in the Snowflake flow destination.
         */
        object: string;
    }

    /**
     * Source connector details required to query a connector
     */
    export interface FlowSourceConnectorProperties {
        /**
         * Specifies the information that is required for querying Amplitude.
         */
        amplitude?: outputs.appflow.FlowAmplitudeSourceProperties;
        /**
         * The properties that are applied when the custom connector is being used as a source.
         */
        customConnector?: outputs.appflow.FlowCustomConnectorSourceProperties;
        /**
         * Specifies the information that is required for querying Datadog.
         */
        datadog?: outputs.appflow.FlowDatadogSourceProperties;
        /**
         * Specifies the information that is required for querying Dynatrace.
         */
        dynatrace?: outputs.appflow.FlowDynatraceSourceProperties;
        /**
         * Specifies the information that is required for querying Google Analytics.
         */
        googleAnalytics?: outputs.appflow.FlowGoogleAnalyticsSourceProperties;
        /**
         * Specifies the information that is required for querying Infor Nexus.
         */
        inforNexus?: outputs.appflow.FlowInforNexusSourceProperties;
        /**
         * Specifies the information that is required for querying Marketo.
         */
        marketo?: outputs.appflow.FlowMarketoSourceProperties;
        /**
         * Specifies the information that is required for querying Salesforce Pardot.
         */
        pardot?: outputs.appflow.FlowPardotSourceProperties;
        /**
         * Specifies the information that is required for querying Amazon S3.
         */
        s3?: outputs.appflow.FlowS3SourceProperties;
        /**
         * Specifies the information that is required for querying Salesforce.
         */
        salesforce?: outputs.appflow.FlowSalesforceSourceProperties;
        /**
         * The properties that are applied when using SAPOData as a flow source.
         */
        sapoData?: outputs.appflow.FlowSapoDataSourceProperties;
        /**
         * Specifies the information that is required for querying ServiceNow.
         */
        serviceNow?: outputs.appflow.FlowServiceNowSourceProperties;
        /**
         * Specifies the information that is required for querying Singular.
         */
        singular?: outputs.appflow.FlowSingularSourceProperties;
        /**
         * Specifies the information that is required for querying Slack.
         */
        slack?: outputs.appflow.FlowSlackSourceProperties;
        /**
         * Specifies the information that is required for querying Trend Micro.
         */
        trendmicro?: outputs.appflow.FlowTrendmicroSourceProperties;
        /**
         * Specifies the information that is required for querying Veeva.
         */
        veeva?: outputs.appflow.FlowVeevaSourceProperties;
        /**
         * Specifies the information that is required for querying Zendesk.
         */
        zendesk?: outputs.appflow.FlowZendeskSourceProperties;
    }

    /**
     * Configurations of Source connector of the flow.
     */
    export interface FlowSourceFlowConfig {
        /**
         * The API version that the destination connector uses.
         */
        apiVersion?: string;
        /**
         * Name of source connector profile
         */
        connectorProfileName?: string;
        /**
         * Type of source connector
         */
        connectorType: enums.appflow.FlowConnectorType;
        /**
         * Configuration for scheduled incremental data pull
         */
        incrementalPullConfig?: outputs.appflow.FlowIncrementalPullConfig;
        /**
         * Source connector details required to query a connector
         */
        sourceConnectorProperties: outputs.appflow.FlowSourceConnectorProperties;
    }

    export interface FlowSuccessResponseHandlingConfig {
        /**
         * The name of the Amazon S3 bucket.
         */
        bucketName?: string;
        /**
         * The Amazon S3 bucket prefix.
         */
        bucketPrefix?: string;
    }

    export interface FlowTask {
        /**
         * Operation to be performed on provided source fields
         */
        connectorOperator?: outputs.appflow.FlowConnectorOperator;
        /**
         * A field value on which source field should be validated
         */
        destinationField?: string;
        /**
         * Source fields on which particular task will be applied
         */
        sourceFields: string[];
        /**
         * A Map used to store task related info
         */
        taskProperties?: outputs.appflow.FlowTaskPropertiesObject[];
        /**
         * Type of task
         */
        taskType: enums.appflow.FlowTaskType;
    }

    /**
     * An object used to store task related info
     */
    export interface FlowTaskPropertiesObject {
        /**
         * The task property key.
         */
        key: enums.appflow.FlowOperatorPropertiesKeys;
        /**
         * The task property value.
         */
        value: string;
    }

    export interface FlowTrendmicroSourceProperties {
        /**
         * The object specified in the Trend Micro flow source.
         */
        object: string;
    }

    /**
     * Trigger settings of the flow.
     */
    export interface FlowTriggerConfig {
        /**
         * Details required based on the type of trigger
         */
        triggerProperties?: outputs.appflow.FlowScheduledTriggerProperties;
        /**
         * Trigger type of the flow
         */
        triggerType: enums.appflow.FlowTriggerType;
    }

    export interface FlowUpsolverDestinationProperties {
        /**
         * The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
         */
        bucketName: string;
        /**
         * The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files.
         */
        bucketPrefix?: string;
        /**
         * The configuration that determines how data is formatted when Upsolver is used as the flow destination.
         */
        s3OutputFormatConfig: outputs.appflow.FlowUpsolverS3OutputFormatConfig;
    }

    export interface FlowUpsolverS3OutputFormatConfig {
        /**
         * The aggregation settings that you can use to customize the output format of your flow data.
         */
        aggregationConfig?: outputs.appflow.FlowAggregationConfig;
        /**
         * Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket.
         */
        fileType?: enums.appflow.FlowFileType;
        /**
         * Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.
         */
        prefixConfig: outputs.appflow.FlowPrefixConfig;
    }

    export interface FlowVeevaSourceProperties {
        /**
         * The document type specified in the Veeva document extract flow.
         */
        documentType?: string;
        /**
         * Boolean value to include All Versions of files in Veeva document extract flow.
         */
        includeAllVersions?: boolean;
        /**
         * Boolean value to include file renditions in Veeva document extract flow.
         */
        includeRenditions?: boolean;
        /**
         * Boolean value to include source files in Veeva document extract flow.
         */
        includeSourceFiles?: boolean;
        /**
         * The object specified in the Veeva flow source.
         */
        object: string;
    }

    export interface FlowZendeskDestinationProperties {
        /**
         * The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
         */
        errorHandlingConfig?: outputs.appflow.FlowErrorHandlingConfig;
        /**
         * List of fields used as ID when performing a write operation.
         */
        idFieldNames?: string[];
        /**
         * The object specified in the Zendesk flow destination.
         */
        object: string;
        /**
         * The possible write operations in the destination connector. When this value is not provided, this defaults to the `INSERT` operation.
         */
        writeOperationType?: enums.appflow.FlowWriteOperationType;
    }

    export interface FlowZendeskSourceProperties {
        /**
         * The object specified in the Zendesk flow source.
         */
        object: string;
    }

}

export namespace appintegrations {
    export interface ApplicationExternalUrlConfig {
        /**
         * The URL to access the application.
         */
        accessUrl: string;
        /**
         * Additional URLs to allow list if different than the access URL.
         */
        approvedOrigins?: string[];
    }

    /**
     * Application source config
     */
    export interface ApplicationSourceConfigProperties {
        /**
         * The external URL source for the application.
         */
        externalUrlConfig: outputs.appintegrations.ApplicationExternalUrlConfig;
    }

    /**
     * The configuration for what files should be pulled from the source.
     */
    export interface DataIntegrationFileConfiguration {
        /**
         * Restrictions for what files should be pulled from the source.
         */
        filters?: {[key: string]: string[]};
        /**
         * Identifiers for the source folders to pull all files from recursively.
         */
        folders: string[];
    }

    export interface DataIntegrationScheduleConfig {
        /**
         * The start date for objects to import in the first flow run. Epoch or ISO timestamp format is supported.
         */
        firstExecutionFrom?: string;
        /**
         * The name of the object to pull from the data source.
         */
        object?: string;
        /**
         * How often the data should be pulled from data source.
         */
        scheduleExpression: string;
    }

    export interface EventIntegrationEventFilter {
        /**
         * The source of the events.
         */
        source: string;
    }

}

export namespace applicationautoscaling {
    /**
     * ``ScalableTargetAction`` specifies the minimum and maximum capacity for the ``ScalableTargetAction`` property of the [AWS::ApplicationAutoScaling::ScalableTarget ScheduledAction](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-applicationautoscaling-scalabletarget-scheduledaction.html) property type.
     */
    export interface ScalableTargetAction {
        /**
         * The maximum capacity.
         */
        maxCapacity?: number;
        /**
         * The minimum capacity.
         */
        minCapacity?: number;
    }

    /**
     * ``ScheduledAction`` is a property of the [AWS::ApplicationAutoScaling::ScalableTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalabletarget.html) resource that specifies a scheduled action for a scalable target. 
     *  For more information, see [Scheduled scaling](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-scheduled-scaling.html) in the *Application Auto Scaling User Guide*.
     */
    export interface ScalableTargetScheduledAction {
        /**
         * The date and time that the action is scheduled to end, in UTC.
         */
        endTime?: string;
        /**
         * The new minimum and maximum capacity. You can set both values or just one. At the scheduled time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto Scaling scales in to the maximum capacity.
         */
        scalableTargetAction?: outputs.applicationautoscaling.ScalableTargetAction;
        /**
         * The schedule for this action. The following formats are supported:
         *   +  At expressions - "``at(yyyy-mm-ddThh:mm:ss)``"
         *   +  Rate expressions - "``rate(value unit)``"
         *   +  Cron expressions - "``cron(fields)``"
         *   
         *  At expressions are useful for one-time schedules. Cron expressions are useful for scheduled actions that run periodically at a specified date and time, and rate expressions are useful for scheduled actions that run at a regular interval.
         *  At and cron expressions use Universal Coordinated Time (UTC) by default.
         *  The cron format consists of six fields separated by white spaces: [Minutes] [Hours] [Day_of_Month] [Month] [Day_of_Week] [Year].
         *  For rate expressions, *value* is a positive integer and *unit* is ``minute`` | ``minutes`` | ``hour`` | ``hours`` | ``day`` | ``days``.
         */
        schedule: string;
        /**
         * The name of the scheduled action. This name must be unique among all other scheduled actions on the specified scalable target.
         */
        scheduledActionName: string;
        /**
         * The date and time that the action is scheduled to begin, in UTC.
         */
        startTime?: string;
        /**
         * The time zone used when referring to the date and time of a scheduled action, when the scheduled action uses an at or cron expression.
         */
        timezone?: string;
    }

    /**
     * ``SuspendedState`` is a property of the [AWS::ApplicationAutoScaling::ScalableTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalabletarget.html) resource that specifies whether the scaling activities for a scalable target are in a suspended state.
     *  For more information, see [Suspending and resuming scaling](https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-suspend-resume-scaling.html) in the *Application Auto Scaling User Guide*.
     */
    export interface ScalableTargetSuspendedState {
        /**
         * Whether scale in by a target tracking scaling policy or a step scaling policy is suspended. Set the value to ``true`` if you don't want Application Auto Scaling to remove capacity when a scaling policy is triggered. The default is ``false``.
         */
        dynamicScalingInSuspended?: boolean;
        /**
         * Whether scale out by a target tracking scaling policy or a step scaling policy is suspended. Set the value to ``true`` if you don't want Application Auto Scaling to add capacity when a scaling policy is triggered. The default is ``false``.
         */
        dynamicScalingOutSuspended?: boolean;
        /**
         * Whether scheduled scaling is suspended. Set the value to ``true`` if you don't want Application Auto Scaling to add or remove capacity by initiating scheduled actions. The default is ``false``.
         */
        scheduledScalingSuspended?: boolean;
    }

    /**
     * Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use with Application Auto Scaling.
     */
    export interface ScalingPolicyCustomizedMetricSpecification {
        /**
         * The dimensions of the metric.
         */
        dimensions?: outputs.applicationautoscaling.ScalingPolicyMetricDimension[];
        /**
         * The name of the metric. To get the exact metric name, namespace, and dimensions, inspect the Metric object that is returned by a call to ListMetrics.
         */
        metricName?: string;
        /**
         * The metrics to include in the target tracking scaling policy, as a metric data query. This can include both raw metric and metric math expressions.
         */
        metrics?: outputs.applicationautoscaling.ScalingPolicyTargetTrackingMetricDataQuery[];
        /**
         * The namespace of the metric.
         */
        namespace?: string;
        /**
         * The statistic of the metric.
         */
        statistic?: string;
        /**
         * The unit of the metric. For a complete list of the units that CloudWatch supports, see the MetricDatum data type in the Amazon CloudWatch API Reference.
         */
        unit?: string;
    }

    /**
     * Describes the dimension names and values associated with a metric.
     */
    export interface ScalingPolicyMetricDimension {
        /**
         * The name of the dimension.
         */
        name: string;
        /**
         * The value of the dimension.
         */
        value: string;
    }

    /**
     * Represents a predefined metric for a target tracking scaling policy to use with Application Auto Scaling.
     */
    export interface ScalingPolicyPredefinedMetricSpecification {
        /**
         * The metric type. The ALBRequestCountPerTarget metric type applies only to Spot Fleets and ECS services.
         */
        predefinedMetricType: string;
        /**
         * Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group attached to the Spot Fleet or ECS service.
         */
        resourceLabel?: string;
    }

    /**
     * Represents a step adjustment for a StepScalingPolicyConfiguration. Describes an adjustment based on the difference between the value of the aggregated CloudWatch metric and the breach threshold that you've defined for the alarm.
     */
    export interface ScalingPolicyStepAdjustment {
        /**
         * The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
         */
        metricIntervalLowerBound?: number;
        /**
         * The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.
         */
        metricIntervalUpperBound?: number;
        /**
         * The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.
         */
        scalingAdjustment: number;
    }

    /**
     * A step scaling policy.
     */
    export interface ScalingPolicyStepScalingPolicyConfiguration {
        /**
         * Specifies how the ScalingAdjustment value in a StepAdjustment is interpreted.
         */
        adjustmentType?: string;
        /**
         * The amount of time, in seconds, to wait for a previous scaling activity to take effect.
         */
        cooldown?: number;
        /**
         * The aggregation type for the CloudWatch metrics. Valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average
         */
        metricAggregationType?: string;
        /**
         * The minimum value to scale by when the adjustment type is PercentChangeInCapacity.
         */
        minAdjustmentMagnitude?: number;
        /**
         * A set of adjustments that enable you to scale based on the size of the alarm breach.
         */
        stepAdjustments?: outputs.applicationautoscaling.ScalingPolicyStepAdjustment[];
    }

    /**
     * Represents a specific metric.
     */
    export interface ScalingPolicyTargetTrackingMetric {
        /**
         * The dimensions for the metric.
         */
        dimensions?: outputs.applicationautoscaling.ScalingPolicyTargetTrackingMetricDimension[];
        /**
         * The name of the metric.
         */
        metricName?: string;
        /**
         * The namespace of the metric.
         */
        namespace?: string;
    }

    /**
     * The metric data to return. Also defines whether this call is returning data for one metric only, or whether it is performing a math expression on the values of returned metric statistics to create a new time series. A time series is a series of data points, each of which is associated with a timestamp.
     */
    export interface ScalingPolicyTargetTrackingMetricDataQuery {
        /**
         * The math expression to perform on the returned data, if this object is performing a math expression.
         */
        expression?: string;
        /**
         * A short name that identifies the object's results in the response.
         */
        id?: string;
        /**
         * A human-readable label for this metric or expression. This is especially useful if this is a math expression, so that you know what the value represents.
         */
        label?: string;
        /**
         * Information about the metric data to return.
         */
        metricStat?: outputs.applicationautoscaling.ScalingPolicyTargetTrackingMetricStat;
        /**
         * Indicates whether to return the timestamps and raw data values of this metric.
         */
        returnData?: boolean;
    }

    /**
     * Describes the dimension of a metric.
     */
    export interface ScalingPolicyTargetTrackingMetricDimension {
        /**
         * The name of the dimension.
         */
        name?: string;
        /**
         * The value of the dimension.
         */
        value?: string;
    }

    /**
     * This structure defines the CloudWatch metric to return, along with the statistic, period, and unit.
     */
    export interface ScalingPolicyTargetTrackingMetricStat {
        /**
         * The CloudWatch metric to return, including the metric name, namespace, and dimensions. 
         */
        metric?: outputs.applicationautoscaling.ScalingPolicyTargetTrackingMetric;
        /**
         * The statistic to return. It can include any CloudWatch statistic or extended statistic.
         */
        stat?: string;
        /**
         * The unit to use for the returned data points.
         */
        unit?: string;
    }

    /**
     * A target tracking scaling policy.
     */
    export interface ScalingPolicyTargetTrackingScalingPolicyConfiguration {
        /**
         * A customized metric. You can specify either a predefined metric or a customized metric.
         */
        customizedMetricSpecification?: outputs.applicationautoscaling.ScalingPolicyCustomizedMetricSpecification;
        /**
         * Indicates whether scale in by the target tracking scaling policy is disabled. If the value is true, scale in is disabled and the target tracking scaling policy won't remove capacity from the scalable target. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable target. The default value is false.
         */
        disableScaleIn?: boolean;
        /**
         * A predefined metric. You can specify either a predefined metric or a customized metric.
         */
        predefinedMetricSpecification?: outputs.applicationautoscaling.ScalingPolicyPredefinedMetricSpecification;
        /**
         * The amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start.
         */
        scaleInCooldown?: number;
        /**
         * The amount of time, in seconds, to wait for a previous scale-out activity to take effect.
         */
        scaleOutCooldown?: number;
        /**
         * The target value for the metric. Although this property accepts numbers of type Double, it won't accept values that are either too small or too large. Values must be in the range of -2^360 to 2^360. The value must be a valid number based on the choice of metric. For example, if the metric is CPU utilization, then the target value is a percent value that represents how much of the CPU can be used before scaling out.
         */
        targetValue: number;
    }

}

export namespace applicationinsights {
    /**
     * A CloudWatch alarm to be monitored for the component.
     */
    export interface ApplicationAlarm {
        /**
         * The name of the CloudWatch alarm to be monitored for the component.
         */
        alarmName: string;
        /**
         * Indicates the degree of outage when the alarm goes off.
         */
        severity?: enums.applicationinsights.ApplicationAlarmSeverity;
    }

    /**
     * A metric to be monitored for the component.
     */
    export interface ApplicationAlarmMetric {
        /**
         * The name of the metric to be monitored for the component.
         */
        alarmMetricName: string;
    }

    /**
     * The configuration settings of the component.
     */
    export interface ApplicationComponentConfiguration {
        /**
         * The configuration settings
         */
        configurationDetails?: outputs.applicationinsights.ApplicationConfigurationDetails;
        /**
         * Sub component configurations of the component.
         */
        subComponentTypeConfigurations?: outputs.applicationinsights.ApplicationSubComponentTypeConfiguration[];
    }

    /**
     * The monitoring setting of the component.
     */
    export interface ApplicationComponentMonitoringSetting {
        /**
         * The ARN of the compnonent.
         */
        componentArn?: string;
        /**
         * The component monitoring configuration mode.
         */
        componentConfigurationMode: enums.applicationinsights.ApplicationComponentMonitoringSettingComponentConfigurationMode;
        /**
         * The name of the component.
         */
        componentName?: string;
        /**
         * The monitoring configuration of the component.
         */
        customComponentConfiguration?: outputs.applicationinsights.ApplicationComponentConfiguration;
        /**
         * The overwritten settings on default component monitoring configuration.
         */
        defaultOverwriteComponentConfiguration?: outputs.applicationinsights.ApplicationComponentConfiguration;
        /**
         * The tier of the application component.
         */
        tier: string;
    }

    /**
     * The configuration settings.
     */
    export interface ApplicationConfigurationDetails {
        /**
         * A list of metrics to monitor for the component.
         */
        alarmMetrics?: outputs.applicationinsights.ApplicationAlarmMetric[];
        /**
         * A list of alarms to monitor for the component.
         */
        alarms?: outputs.applicationinsights.ApplicationAlarm[];
        /**
         * The HA cluster Prometheus Exporter settings.
         */
        haClusterPrometheusExporter?: outputs.applicationinsights.ApplicationHaClusterPrometheusExporter;
        /**
         * The HANA DB Prometheus Exporter settings.
         */
        hanaPrometheusExporter?: outputs.applicationinsights.ApplicationHanaPrometheusExporter;
        /**
         * The JMX Prometheus Exporter settings.
         */
        jmxPrometheusExporter?: outputs.applicationinsights.ApplicationJmxPrometheusExporter;
        /**
         * A list of logs to monitor for the component.
         */
        logs?: outputs.applicationinsights.ApplicationLog[];
        /**
         * The NetWeaver Prometheus Exporter settings.
         */
        netWeaverPrometheusExporter?: outputs.applicationinsights.ApplicationNetWeaverPrometheusExporter;
        /**
         * A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.
         */
        processes?: outputs.applicationinsights.ApplicationProcess[];
        /**
         * The SQL Prometheus Exporter settings.
         */
        sqlServerPrometheusExporter?: outputs.applicationinsights.ApplicationSqlServerPrometheusExporter;
        /**
         * A list of Windows Events to log.
         */
        windowsEvents?: outputs.applicationinsights.ApplicationWindowsEvent[];
    }

    /**
     * The custom grouped component.
     */
    export interface ApplicationCustomComponent {
        /**
         * The name of the component.
         */
        componentName: string;
        /**
         * The list of resource ARNs that belong to the component.
         */
        resourceList: string[];
    }

    /**
     * The HA cluster Prometheus Exporter settings.
     */
    export interface ApplicationHaClusterPrometheusExporter {
        /**
         * Prometheus exporter port.
         */
        prometheusPort?: string;
    }

    /**
     * The HANA DB Prometheus Exporter settings.
     */
    export interface ApplicationHanaPrometheusExporter {
        /**
         * A flag which indicates agreeing to install SAP HANA DB client.
         */
        agreeToInstallHanadbClient: boolean;
        /**
         * The HANA DB port.
         */
        hanaPort: string;
        /**
         * The secret name which manages the HANA DB credentials e.g. {
         *   "username": "<>",
         *   "password": "<>"
         * }.
         */
        hanaSecretName: string;
        /**
         * HANA DB SID.
         */
        hanasid: string;
        /**
         * Prometheus exporter port.
         */
        prometheusPort?: string;
    }

    /**
     * The JMX Prometheus Exporter settings.
     */
    export interface ApplicationJmxPrometheusExporter {
        /**
         * Java agent host port
         */
        hostPort?: string;
        /**
         * JMX service URL.
         */
        jmxurl?: string;
        /**
         * Prometheus exporter port.
         */
        prometheusPort?: string;
    }

    /**
     * A log to be monitored for the component.
     */
    export interface ApplicationLog {
        /**
         * The type of encoding of the logs to be monitored.
         */
        encoding?: enums.applicationinsights.ApplicationLogEncoding;
        /**
         * The CloudWatch log group name to be associated to the monitored log.
         */
        logGroupName?: string;
        /**
         * The path of the logs to be monitored.
         */
        logPath?: string;
        /**
         * The log type decides the log patterns against which Application Insights analyzes the log.
         */
        logType: string;
        /**
         * The name of the log pattern set.
         */
        patternSet?: string;
    }

    /**
     * The log pattern.
     */
    export interface ApplicationLogPattern {
        /**
         * The log pattern.
         */
        pattern: string;
        /**
         * The name of the log pattern.
         */
        patternName: string;
        /**
         * Rank of the log pattern.
         */
        rank: number;
    }

    /**
     * The log pattern set.
     */
    export interface ApplicationLogPatternSet {
        /**
         * The log patterns of a set.
         */
        logPatterns: outputs.applicationinsights.ApplicationLogPattern[];
        /**
         * The name of the log pattern set.
         */
        patternSetName: string;
    }

    /**
     * The NetWeaver Prometheus Exporter Settings.
     */
    export interface ApplicationNetWeaverPrometheusExporter {
        /**
         * SAP instance numbers for ASCS, ERS, and App Servers.
         */
        instanceNumbers: string[];
        /**
         * Prometheus exporter port.
         */
        prometheusPort?: string;
        /**
         * SAP NetWeaver SID.
         */
        sapsid: string;
    }

    /**
     * A process to be monitored for the component.
     */
    export interface ApplicationProcess {
        /**
         * A list of metrics to monitor for the component.
         */
        alarmMetrics: outputs.applicationinsights.ApplicationAlarmMetric[];
        /**
         * The name of the process to be monitored for the component.
         */
        processName: string;
    }

    /**
     * The SQL prometheus exporter settings.
     */
    export interface ApplicationSqlServerPrometheusExporter {
        /**
         * Prometheus exporter port.
         */
        prometheusPort: string;
        /**
         * Secret name which managers SQL exporter connection. e.g. {"data_source_name": "sqlserver://<USERNAME>:<PASSWORD>@localhost:1433"}
         */
        sqlSecretName: string;
    }

    /**
     * The configuration settings of sub components.
     */
    export interface ApplicationSubComponentConfigurationDetails {
        /**
         * A list of metrics to monitor for the component.
         */
        alarmMetrics?: outputs.applicationinsights.ApplicationAlarmMetric[];
        /**
         * A list of logs to monitor for the component.
         */
        logs?: outputs.applicationinsights.ApplicationLog[];
        /**
         * A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.
         */
        processes?: outputs.applicationinsights.ApplicationProcess[];
        /**
         * A list of Windows Events to log.
         */
        windowsEvents?: outputs.applicationinsights.ApplicationWindowsEvent[];
    }

    /**
     * One type sub component configurations for the component.
     */
    export interface ApplicationSubComponentTypeConfiguration {
        /**
         * The configuration settings of sub components.
         */
        subComponentConfigurationDetails: outputs.applicationinsights.ApplicationSubComponentConfigurationDetails;
        /**
         * The sub component type.
         */
        subComponentType: enums.applicationinsights.ApplicationSubComponentTypeConfigurationSubComponentType;
    }

    /**
     * A Windows Event to be monitored for the component.
     */
    export interface ApplicationWindowsEvent {
        /**
         * The levels of event to log. 
         */
        eventLevels: enums.applicationinsights.ApplicationEventLevel[];
        /**
         * The type of Windows Events to log.
         */
        eventName: string;
        /**
         * The CloudWatch log group name to be associated to the monitored log.
         */
        logGroupName: string;
        /**
         * The name of the log pattern set.
         */
        patternSet?: string;
    }

}

export namespace apprunner {
    /**
     * Describes the configuration of the tracing feature within an AWS App Runner observability configuration.
     */
    export interface ObservabilityConfigurationTraceConfiguration {
        /**
         * The implementation provider chosen for tracing App Runner services.
         */
        vendor: enums.apprunner.ObservabilityConfigurationTraceConfigurationVendor;
    }

    /**
     * Authentication Configuration
     */
    export interface ServiceAuthenticationConfiguration {
        /**
         * Access Role Arn
         */
        accessRoleArn?: string;
        /**
         * Connection Arn
         */
        connectionArn?: string;
    }

    /**
     * Code Configuration
     */
    export interface ServiceCodeConfiguration {
        /**
         * The basic configuration for building and running the App Runner service. Use it to quickly launch an App Runner service without providing a `apprunner.yaml` file in the source code repository (or ignoring the file if it exists).
         */
        codeConfigurationValues?: outputs.apprunner.ServiceCodeConfigurationValues;
        /**
         * Configuration Source
         */
        configurationSource: enums.apprunner.ServiceCodeConfigurationConfigurationSource;
    }

    /**
     * Code Configuration Values
     */
    export interface ServiceCodeConfigurationValues {
        /**
         * Build Command
         */
        buildCommand?: string;
        /**
         * Port
         */
        port?: string;
        /**
         * Runtime
         */
        runtime: enums.apprunner.ServiceCodeConfigurationValuesRuntime;
        /**
         * The secrets and parameters that get referenced by your service as environment variables
         */
        runtimeEnvironmentSecrets?: outputs.apprunner.ServiceKeyValuePair[];
        /**
         * The environment variables that are available to your running AWS App Runner service. An array of key-value pairs.
         */
        runtimeEnvironmentVariables?: outputs.apprunner.ServiceKeyValuePair[];
        /**
         * Start Command
         */
        startCommand?: string;
    }

    /**
     * Source Code Repository
     */
    export interface ServiceCodeRepository {
        /**
         * Configuration for building and running the service from a source code repository.
         *
         * > `CodeConfiguration` is required only for `CreateService` request.
         */
        codeConfiguration?: outputs.apprunner.ServiceCodeConfiguration;
        /**
         * Repository Url
         */
        repositoryUrl: string;
        /**
         * The version that should be used within the source code repository.
         */
        sourceCodeVersion: outputs.apprunner.ServiceSourceCodeVersion;
        /**
         * Source Directory
         */
        sourceDirectory?: string;
    }

    /**
     * Network egress configuration
     */
    export interface ServiceEgressConfiguration {
        /**
         * Network egress type.
         */
        egressType: enums.apprunner.ServiceEgressConfigurationEgressType;
        /**
         * The Amazon Resource Name (ARN) of the App Runner VpcConnector.
         */
        vpcConnectorArn?: string;
    }

    /**
     * Encryption configuration (KMS key)
     */
    export interface ServiceEncryptionConfiguration {
        /**
         * The KMS Key
         */
        kmsKey: string;
    }

    /**
     * Health check configuration
     */
    export interface ServiceHealthCheckConfiguration {
        /**
         * Health check Healthy Threshold
         */
        healthyThreshold?: number;
        /**
         * Health check Interval
         */
        interval?: number;
        /**
         * Health check Path
         */
        path?: string;
        /**
         * Health Check Protocol
         */
        protocol?: enums.apprunner.ServiceHealthCheckConfigurationProtocol;
        /**
         * Health check Timeout
         */
        timeout?: number;
        /**
         * Health check Unhealthy Threshold
         */
        unhealthyThreshold?: number;
    }

    /**
     * Image Configuration
     */
    export interface ServiceImageConfiguration {
        /**
         * Port
         */
        port?: string;
        /**
         * The secrets and parameters that get referenced by your service as environment variables
         */
        runtimeEnvironmentSecrets?: outputs.apprunner.ServiceKeyValuePair[];
        /**
         * Environment variables that are available to your running App Runner service. An array of key-value pairs.
         */
        runtimeEnvironmentVariables?: outputs.apprunner.ServiceKeyValuePair[];
        /**
         * Start Command
         */
        startCommand?: string;
    }

    /**
     * Image Repository
     */
    export interface ServiceImageRepository {
        /**
         * Configuration for running the identified image.
         */
        imageConfiguration?: outputs.apprunner.ServiceImageConfiguration;
        /**
         * Image Identifier
         */
        imageIdentifier: string;
        /**
         * Image Repository Type
         */
        imageRepositoryType: enums.apprunner.ServiceImageRepositoryImageRepositoryType;
    }

    /**
     * Network ingress configuration
     */
    export interface ServiceIngressConfiguration {
        /**
         * It's set to true if the Apprunner service is publicly accessible. It's set to false otherwise.
         */
        isPubliclyAccessible: boolean;
    }

    /**
     * Instance Configuration
     */
    export interface ServiceInstanceConfiguration {
        /**
         * CPU
         */
        cpu?: string;
        /**
         * Instance Role Arn
         */
        instanceRoleArn?: string;
        /**
         * Memory
         */
        memory?: string;
    }

    export interface ServiceKeyValuePair {
        /**
         * The key name string to map to a value.
         */
        name?: string;
        /**
         * The value string to which the key name is mapped.
         */
        value?: string;
    }

    /**
     * Network configuration
     */
    export interface ServiceNetworkConfiguration {
        /**
         * Network configuration settings for outbound message traffic.
         */
        egressConfiguration?: outputs.apprunner.ServiceEgressConfiguration;
        /**
         * Network configuration settings for inbound message traffic.
         */
        ingressConfiguration?: outputs.apprunner.ServiceIngressConfiguration;
        /**
         * App Runner service endpoint IP address type
         */
        ipAddressType?: enums.apprunner.ServiceNetworkConfigurationIpAddressType;
    }

    /**
     * Service observability configuration
     */
    export interface ServiceObservabilityConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the App Runner ObservabilityConfiguration.
         */
        observabilityConfigurationArn?: string;
        /**
         * Observability enabled
         */
        observabilityEnabled: boolean;
    }

    /**
     * Source Code Version
     */
    export interface ServiceSourceCodeVersion {
        /**
         * Source Code Version Type
         */
        type: enums.apprunner.ServiceSourceCodeVersionType;
        /**
         * Source Code Version Value
         */
        value: string;
    }

    /**
     * Source Code configuration
     */
    export interface ServiceSourceConfiguration {
        /**
         * Describes the resources that are needed to authenticate access to some source repositories.
         */
        authenticationConfiguration?: outputs.apprunner.ServiceAuthenticationConfiguration;
        /**
         * Auto Deployment enabled
         */
        autoDeploymentsEnabled?: boolean;
        /**
         * The description of a source code repository.
         *
         * You must provide either this member or `ImageRepository` (but not both).
         */
        codeRepository?: outputs.apprunner.ServiceCodeRepository;
        /**
         * The description of a source image repository.
         *
         * You must provide either this member or `CodeRepository` (but not both).
         */
        imageRepository?: outputs.apprunner.ServiceImageRepository;
    }

    /**
     * The configuration of customer’s VPC and related VPC endpoint
     */
    export interface VpcIngressConnectionIngressVpcConfiguration {
        /**
         * The ID of the VPC endpoint that your App Runner service connects to.
         */
        vpcEndpointId: string;
        /**
         * The ID of the VPC that the VPC endpoint is used in.
         */
        vpcId: string;
    }

}

export namespace appstream {
    export interface AppBlockBuilderAccessEndpoint {
        /**
         * The type of interface endpoint.
         */
        endpointType: string;
        /**
         * The identifier (ID) of the VPC in which the interface endpoint is used.
         */
        vpceId: string;
    }

    export interface AppBlockBuilderVpcConfig {
        /**
         * The identifiers of the security groups for the fleet or image builder.
         */
        securityGroupIds?: string[];
        /**
         * The identifiers of the subnets to which a network interface is attached from the fleet instance or image builder instance. Fleet instances use one or more subnets. Image builder instances use one subnet.
         */
        subnetIds?: string[];
    }

    export interface AppBlockS3Location {
        /**
         * The S3 bucket of the app block.
         */
        s3Bucket: string;
        /**
         * The S3 key of the S3 object of the virtual hard disk.
         *
         * This is required when it's used by `SetupScriptDetails` and `PostSetupScriptDetails` .
         */
        s3Key?: string;
    }

    export interface AppBlockScriptDetails {
        /**
         * The parameters used in the run path for the script.
         */
        executableParameters?: string;
        /**
         * The run path for the script.
         */
        executablePath: string;
        /**
         * The S3 object location of the script.
         */
        scriptS3Location: outputs.appstream.AppBlockS3Location;
        /**
         * The run timeout, in seconds, for the script.
         */
        timeoutInSeconds: number;
    }

    export interface AppBlockTag0Properties {
        key: string;
        value: string;
    }

    export interface AppBlockTag1Properties {
        tagKey: string;
        tagValue: string;
    }

    export interface ApplicationS3Location {
        /**
         * The S3 bucket of the S3 object.
         */
        s3Bucket: string;
        /**
         * The S3 key of the S3 object.
         */
        s3Key: string;
    }

    export interface ApplicationTag0Properties {
        key: string;
        value: string;
    }

    export interface ApplicationTag1Properties {
        tagKey: string;
        tagValue: string;
    }

    export interface DirectoryConfigCertificateBasedAuthProperties {
        /**
         * The ARN of the AWS Certificate Manager Private CA resource.
         */
        certificateAuthorityArn?: string;
        /**
         * The status of the certificate-based authentication properties. Fallback is turned on by default when certificate-based authentication is *Enabled* . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. *Enabled_no_directory_login_fallback* enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates.
         */
        status?: string;
    }

    export interface DirectoryConfigServiceAccountCredentials {
        /**
         * The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified.
         */
        accountName: string;
        /**
         * The password for the account.
         */
        accountPassword: string;
    }

    export interface EntitlementAttribute {
        /**
         * A supported AWS IAM SAML PrincipalTag attribute that is matched to a value when a user identity federates to an AppStream 2.0 SAML application.
         *
         * The following are supported values:
         *
         * - roles
         * - department
         * - organization
         * - groups
         * - title
         * - costCenter
         * - userType
         */
        name: string;
        /**
         * A value that is matched to a supported SAML attribute name when a user identity federates to an AppStream 2.0 SAML application.
         */
        value: string;
    }

    export interface ImageBuilderAccessEndpoint {
        /**
         * The type of interface endpoint.
         */
        endpointType: string;
        /**
         * The identifier (ID) of the VPC in which the interface endpoint is used.
         */
        vpceId: string;
    }

    export interface ImageBuilderDomainJoinInfo {
        /**
         * The fully qualified name of the directory (for example, corp.example.com).
         */
        directoryName?: string;
        /**
         * The distinguished name of the organizational unit for computer accounts.
         */
        organizationalUnitDistinguishedName?: string;
    }

    export interface ImageBuilderVpcConfig {
        /**
         * The identifiers of the security groups for the image builder.
         */
        securityGroupIds?: string[];
        /**
         * The identifier of the subnet to which a network interface is attached from the image builder instance. An image builder instance can use one subnet.
         */
        subnetIds?: string[];
    }

}

export namespace appsync {
    /**
     * Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
     */
    export interface FunctionConfigurationAppSyncRuntime {
        /**
         * The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
         */
        name: string;
        /**
         * The version of the runtime to use. Currently, the only allowed version is 1.0.0.
         */
        runtimeVersion: string;
    }

    /**
     * The LambdaConflictHandlerConfig when configuring LAMBDA as the Conflict Handler.
     */
    export interface FunctionConfigurationLambdaConflictHandlerConfig {
        /**
         * The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
         */
        lambdaConflictHandlerArn?: string;
    }

    /**
     * Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
     */
    export interface FunctionConfigurationSyncConfig {
        /**
         * The Conflict Detection strategy to use.
         */
        conflictDetection: string;
        /**
         * The Conflict Resolution strategy to perform in the event of a conflict.
         */
        conflictHandler?: string;
        /**
         * The `LambdaConflictHandlerConfig` when configuring `LAMBDA` as the Conflict Handler.
         */
        lambdaConflictHandlerConfig?: outputs.appsync.FunctionConfigurationLambdaConflictHandlerConfig;
    }

    /**
     * Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
     */
    export interface ResolverAppSyncRuntime {
        /**
         * The ``name`` of the runtime to use. Currently, the only allowed value is ``APPSYNC_JS``.
         */
        name: string;
        /**
         * The ``version`` of the runtime to use. Currently, the only allowed version is ``1.0.0``.
         */
        runtimeVersion: string;
    }

    /**
     * The caching configuration for a resolver that has caching activated.
     */
    export interface ResolverCachingConfig {
        /**
         * The caching keys for a resolver that has caching activated.
         *  Valid values are entries from the ``$context.arguments``, ``$context.source``, and ``$context.identity`` maps.
         */
        cachingKeys?: string[];
        /**
         * The TTL in seconds for a resolver that has caching activated.
         *  Valid values are 1–3,600 seconds.
         */
        ttl: number;
    }

    /**
     * The ``LambdaConflictHandlerConfig`` when configuring LAMBDA as the Conflict Handler.
     */
    export interface ResolverLambdaConflictHandlerConfig {
        /**
         * The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
         */
        lambdaConflictHandlerArn?: string;
    }

    /**
     * Use the ``PipelineConfig`` property type to specify ``PipelineConfig`` for an APSYlong resolver.
     *   ``PipelineConfig`` is a property of the [AWS::AppSync::Resolver](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html) resource.
     */
    export interface ResolverPipelineConfig {
        /**
         * A list of ``Function`` objects.
         */
        functions?: string[];
    }

    /**
     * Describes a Sync configuration for a resolver.
     *  Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
     */
    export interface ResolverSyncConfig {
        /**
         * The Conflict Detection strategy to use.
         *   +   *VERSION*: Detect conflicts based on object versions for this resolver.
         *   +   *NONE*: Do not detect conflicts when invoking this resolver.
         */
        conflictDetection: string;
        /**
         * The Conflict Resolution strategy to perform in the event of a conflict.
         *   +   *OPTIMISTIC_CONCURRENCY*: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.
         *   +   *AUTOMERGE*: Resolve conflicts with the Automerge conflict resolution strategy.
         *   +   *LAMBDA*: Resolve conflicts with an LAMlong function supplied in the ``LambdaConflictHandlerConfig``.
         */
        conflictHandler?: string;
        /**
         * The ``LambdaConflictHandlerConfig`` when configuring ``LAMBDA`` as the Conflict Handler.
         */
        lambdaConflictHandlerConfig?: outputs.appsync.ResolverLambdaConflictHandlerConfig;
    }

    export interface SourceApiAssociationConfig {
        /**
         * Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
         */
        mergeType?: enums.appsync.SourceApiAssociationConfigMergeType;
    }

}

export namespace aps {
    /**
     * Scraper metrics destination
     */
    export interface ScraperDestination {
        /**
         * Configuration for Amazon Managed Prometheus metrics destination
         */
        ampConfiguration?: outputs.aps.ScraperDestinationAmpConfigurationProperties;
    }

    /**
     * Configuration for Amazon Managed Prometheus metrics destination
     */
    export interface ScraperDestinationAmpConfigurationProperties {
        /**
         * ARN of an Amazon Managed Prometheus workspace
         */
        workspaceArn: string;
    }

    /**
     * Scraper configuration
     */
    export interface ScraperScrapeConfiguration {
        /**
         * Prometheus compatible scrape configuration in base64 encoded blob format
         */
        configurationBlob?: string;
    }

    /**
     * Scraper metrics source
     */
    export interface ScraperSource {
        /**
         * Configuration for EKS metrics source
         */
        eksConfiguration?: outputs.aps.ScraperSourceEksConfigurationProperties;
    }

    /**
     * Configuration for EKS metrics source
     */
    export interface ScraperSourceEksConfigurationProperties {
        /**
         * ARN of an EKS cluster
         */
        clusterArn: string;
        /**
         * List of security group IDs
         */
        securityGroupIds?: string[];
        /**
         * List of subnet IDs
         */
        subnetIds: string[];
    }

    /**
     * Logging configuration
     */
    export interface WorkspaceLoggingConfiguration {
        /**
         * CloudWatch log group ARN
         */
        logGroupArn?: string;
    }

}

export namespace arczonalshift {
    export interface ZonalAutoshiftConfigurationControlCondition {
        /**
         * The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.
         */
        alarmIdentifier: string;
        /**
         * The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is `CLOUDWATCH` .
         */
        type: enums.arczonalshift.ZonalAutoshiftConfigurationControlConditionType;
    }

    export interface ZonalAutoshiftConfigurationPracticeRunConfiguration {
        /**
         * An array of one or more dates that you can specify when AWS does not start practice runs for a resource. Dates are in UTC.
         *
         * Specify blocked dates in the format `YYYY-MM-DD` , separated by spaces.
         */
        blockedDates?: string[];
        /**
         * An array of one or more days and times that you can specify when Route 53 ARC does not start practice runs for a resource. Days and times are in UTC.
         *
         * Specify blocked windows in the format `DAY:HH:MM-DAY:HH:MM` , separated by spaces. For example, `MON:18:30-MON:19:30 TUE:18:30-TUE:19:30` .
         */
        blockedWindows?: string[];
        /**
         * An optional alarm that you can specify that blocks practice runs when the alarm is in an `ALARM` state. When a blocking alarm goes into an `ALARM` state, it prevents practice runs from being started, and ends practice runs that are in progress.
         */
        blockingAlarms?: outputs.arczonalshift.ZonalAutoshiftConfigurationControlCondition[];
        /**
         * The alarm that you specify to monitor the health of your application during practice runs. When the outcome alarm goes into an `ALARM` state, the practice run is ended and the outcome is set to `FAILED` .
         */
        outcomeAlarms: outputs.arczonalshift.ZonalAutoshiftConfigurationControlCondition[];
    }

}

export namespace athena {
    export interface CapacityReservationCapacityAssignment {
        workgroupNames: string[];
    }

    /**
     * Assignment configuration to assign workgroups to a reservation
     */
    export interface CapacityReservationCapacityAssignmentConfiguration {
        /**
         * The list of assignments that make up the capacity assignment configuration.
         */
        capacityAssignments: outputs.athena.CapacityReservationCapacityAssignment[];
    }

    /**
     * Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results
     */
    export interface WorkGroupAclConfiguration {
        /**
         * The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is `BUCKET_OWNER_FULL_CONTROL` . If a query runs in a workgroup and the workgroup overrides client-side settings, then the Amazon S3 canned ACL specified in the workgroup's settings is used for all queries that run in the workgroup. For more information about Amazon S3 canned ACLs, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) in the *Amazon S3 User Guide* .
         */
        s3AclOption: enums.athena.WorkGroupS3AclOption;
    }

    export interface WorkGroupConfiguration {
        /**
         * Specifies a user defined JSON string that is passed to the session engine.
         */
        additionalConfiguration?: string;
        /**
         * The upper limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. No default is defined.
         *
         * > This property currently supports integer types. Support for long values is planned.
         */
        bytesScannedCutoffPerQuery?: number;
        /**
         * Specifies the KMS key that is used to encrypt the user's data stores in Athena. This setting does not apply to Athena SQL workgroups.
         */
        customerContentEncryptionConfiguration?: outputs.athena.WorkGroupCustomerContentEncryptionConfiguration;
        /**
         * If set to "true", the settings for the workgroup override client-side settings. If set to "false", client-side settings are used. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html) .
         */
        enforceWorkGroupConfiguration?: boolean;
        /**
         * The engine version that all queries running on the workgroup use.
         */
        engineVersion?: outputs.athena.WorkGroupEngineVersion;
        /**
         * Role used to access user resources in an Athena for Apache Spark session. This property applies only to Spark-enabled workgroups in Athena.
         */
        executionRole?: string;
        /**
         * Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.
         */
        publishCloudWatchMetricsEnabled?: boolean;
        /**
         * If set to `true` , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to `false` , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is `false` . For more information about Requester Pays buckets, see [Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) in the *Amazon Simple Storage Service Developer Guide* .
         */
        requesterPaysEnabled?: boolean;
        /**
         * Specifies the location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. For more information, see [Working with Query Results, Output Files, and Query History](https://docs.aws.amazon.com/athena/latest/ug/querying.html) .
         */
        resultConfiguration?: outputs.athena.WorkGroupResultConfiguration;
    }

    /**
     * The configuration information that will be updated for this workgroup, which includes the location in Amazon S3 where query results are stored, the encryption option, if any, used for query results, whether the Amazon CloudWatch Metrics are enabled for the workgroup, whether the workgroup settings override the client-side settings, and the data usage limit for the amount of bytes scanned per query, if it is specified. 
     */
    export interface WorkGroupConfigurationUpdates {
        additionalConfiguration?: string;
        bytesScannedCutoffPerQuery?: number;
        customerContentEncryptionConfiguration?: outputs.athena.WorkGroupCustomerContentEncryptionConfiguration;
        enforceWorkGroupConfiguration?: boolean;
        engineVersion?: outputs.athena.WorkGroupEngineVersion;
        executionRole?: string;
        publishCloudWatchMetricsEnabled?: boolean;
        removeBytesScannedCutoffPerQuery?: boolean;
        removeCustomerContentEncryptionConfiguration?: boolean;
        requesterPaysEnabled?: boolean;
        resultConfigurationUpdates?: outputs.athena.WorkGroupResultConfigurationUpdates;
    }

    /**
     * Indicates the KMS key for encrypting notebook content.
     */
    export interface WorkGroupCustomerContentEncryptionConfiguration {
        /**
         * The customer managed KMS key that is used to encrypt the user's data stores in Athena.
         */
        kmsKey: string;
    }

    /**
     * If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.
     */
    export interface WorkGroupEncryptionConfiguration {
        /**
         * Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys ( `SSE_S3` ), server-side encryption with KMS-managed keys ( `SSE_KMS` ), or client-side encryption with KMS-managed keys ( `CSE_KMS` ) is used.
         *
         * If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
         */
        encryptionOption: enums.athena.WorkGroupEncryptionOption;
        /**
         * For `SSE_KMS` and `CSE_KMS` , this is the KMS key ARN or ID.
         */
        kmsKey?: string;
    }

    /**
     * The Athena engine version for running queries.
     */
    export interface WorkGroupEngineVersion {
        /**
         * Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a `CreateWorkGroup` or `UpdateWorkGroup` operation, the `EffectiveEngineVersion` field is ignored.
         */
        effectiveEngineVersion?: string;
        /**
         * The engine version requested by the user. Possible values are determined by the output of `ListEngineVersions` , including AUTO. The default is AUTO.
         */
        selectedEngineVersion?: string;
    }

    /**
     * The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as "client-side settings". If workgroup settings override client-side settings, then the query uses the workgroup settings.
     */
    export interface WorkGroupResultConfiguration {
        /**
         * Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results. Currently the only supported canned ACL is `BUCKET_OWNER_FULL_CONTROL` . This is a client-side setting. If workgroup settings override client-side settings, then the query uses the ACL configuration that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See `EnforceWorkGroupConfiguration` .
         */
        aclConfiguration?: outputs.athena.WorkGroupAclConfiguration;
        /**
         * If query results are encrypted in Amazon S3, indicates the encryption option used (for example, `SSE_KMS` or `CSE_KMS` ) and key information. This is a client-side setting. If workgroup settings override client-side settings, then the query uses the encryption configuration that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See `EnforceWorkGroupConfiguration` and [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html) .
         */
        encryptionConfiguration?: outputs.athena.WorkGroupEncryptionConfiguration;
        /**
         * The account ID that you expect to be the owner of the Amazon S3 bucket specified by `ResultConfiguration:OutputLocation` . If set, Athena uses the value for `ExpectedBucketOwner` when it makes Amazon S3 calls to your specified output location. If the `ExpectedBucketOwner` account ID does not match the actual owner of the Amazon S3 bucket, the call fails with a permissions error.
         *
         * This is a client-side setting. If workgroup settings override client-side settings, then the query uses the `ExpectedBucketOwner` setting that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See `EnforceWorkGroupConfiguration` .
         */
        expectedBucketOwner?: string;
        /**
         * The location in Amazon S3 where your query results are stored, such as `s3://path/to/query/bucket/` . To run a query, you must specify the query results location using either a client-side setting for individual queries or a location specified by the workgroup. If workgroup settings override client-side settings, then the query uses the location specified for the workgroup. If no query location is set, Athena issues an error. For more information, see [Working with Query Results, Output Files, and Query History](https://docs.aws.amazon.com/athena/latest/ug/querying.html) and `EnforceWorkGroupConfiguration` .
         */
        outputLocation?: string;
    }

    /**
     * The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results. 
     */
    export interface WorkGroupResultConfigurationUpdates {
        /**
         * The ACL configuration for the query results.
         */
        aclConfiguration?: outputs.athena.WorkGroupAclConfiguration;
        /**
         * The encryption configuration for the query results.
         */
        encryptionConfiguration?: outputs.athena.WorkGroupEncryptionConfiguration;
        /**
         * The AWS account ID that you expect to be the owner of the Amazon S3 bucket specified by `ResultConfiguration$OutputLocation` . If set, Athena uses the value for `ExpectedBucketOwner` when it makes Amazon S3 calls to your specified output location. If the `ExpectedBucketOwner` AWS account ID does not match the actual owner of the Amazon S3 bucket, the call fails with a permissions error.
         *
         * If workgroup settings override client-side settings, then the query uses the `ExpectedBucketOwner` setting that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See `WorkGroupConfiguration$EnforceWorkGroupConfiguration` and [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html) .
         */
        expectedBucketOwner?: string;
        /**
         * The location in Amazon S3 where your query results are stored, such as `s3://path/to/query/bucket/` . For more information, see [Query Results](https://docs.aws.amazon.com/athena/latest/ug/querying.html) If workgroup settings override client-side settings, then the query uses the location for the query results and the encryption configuration that are specified for the workgroup. The "workgroup settings override" is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See `EnforceWorkGroupConfiguration` .
         */
        outputLocation?: string;
        /**
         * If set to `true` , indicates that the previously-specified ACL configuration for queries in this workgroup should be ignored and set to null. If set to `false` or not set, and a value is present in the `AclConfiguration` of `ResultConfigurationUpdates` , the `AclConfiguration` in the workgroup's `ResultConfiguration` is updated with the new value. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html) .
         */
        removeAclConfiguration?: boolean;
        /**
         * If set to "true", indicates that the previously-specified encryption configuration (also known as the client-side setting) for queries in this workgroup should be ignored and set to null. If set to "false" or not set, and a value is present in the EncryptionConfiguration in ResultConfigurationUpdates (the client-side setting), the EncryptionConfiguration in the workgroup's ResultConfiguration will be updated with the new value. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html) .
         */
        removeEncryptionConfiguration?: boolean;
        /**
         * If set to "true", removes the AWS account ID previously specified for `ResultConfiguration$ExpectedBucketOwner` . If set to "false" or not set, and a value is present in the `ExpectedBucketOwner` in `ResultConfigurationUpdates` (the client-side setting), the `ExpectedBucketOwner` in the workgroup's `ResultConfiguration` is updated with the new value. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html) .
         */
        removeExpectedBucketOwner?: boolean;
        /**
         * If set to "true", indicates that the previously-specified query results location (also known as a client-side setting) for queries in this workgroup should be ignored and set to null. If set to "false" or not set, and a value is present in the OutputLocation in ResultConfigurationUpdates (the client-side setting), the OutputLocation in the workgroup's ResultConfiguration will be updated with the new value. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html) .
         */
        removeOutputLocation?: boolean;
    }

}

export namespace auditmanager {
    /**
     * The AWS account associated with the assessment.
     */
    export interface AssessmentAwsAccount {
        /**
         * The email address that's associated with the AWS account .
         */
        emailAddress?: string;
        /**
         * The identifier for the AWS account .
         */
        id?: string;
        /**
         * The name of the AWS account .
         */
        name?: string;
    }

    /**
     * An AWS service such as Amazon S3, AWS CloudTrail, and so on.
     */
    export interface AssessmentAwsService {
        /**
         * The name of the AWS service .
         */
        serviceName?: string;
    }

    /**
     * The assignment of a control set to a delegate for review.
     */
    export interface AssessmentDelegation {
        /**
         * The identifier for the assessment that's associated with the delegation.
         */
        assessmentId?: string;
        /**
         * The name of the assessment that's associated with the delegation.
         */
        assessmentName?: string;
        /**
         * The comment that's related to the delegation.
         */
        comment?: string;
        /**
         * The identifier for the control set that's associated with the delegation.
         */
        controlSetId?: string;
        /**
         * The user or role that created the delegation.
         *
         * *Minimum* : `1`
         *
         * *Maximum* : `100`
         *
         * *Pattern* : `^[a-zA-Z0-9-_()\\[\\]\\s]+$`
         */
        createdBy?: string;
        /**
         * Specifies when the delegation was created.
         */
        creationTime?: number;
        /**
         * The unique identifier for the delegation.
         */
        id?: string;
        /**
         * Specifies when the delegation was last updated.
         */
        lastUpdated?: number;
        /**
         * The Amazon Resource Name (ARN) of the IAM role.
         */
        roleArn?: string;
        /**
         * The type of customer persona.
         *
         * > In `CreateAssessment` , `roleType` can only be `PROCESS_OWNER` .
         * > 
         * > In `UpdateSettings` , `roleType` can only be `PROCESS_OWNER` .
         * > 
         * > In `BatchCreateDelegationByAssessment` , `roleType` can only be `RESOURCE_OWNER` .
         */
        roleType?: enums.auditmanager.AssessmentRoleType;
        /**
         * The status of the delegation.
         */
        status?: enums.auditmanager.AssessmentDelegationStatus;
    }

    /**
     * The destination in which evidence reports are stored for the specified assessment.
     */
    export interface AssessmentReportsDestination {
        /**
         * The destination bucket where Audit Manager stores assessment reports.
         */
        destination?: string;
        /**
         * The destination type, such as Amazon S3.
         */
        destinationType?: enums.auditmanager.AssessmentReportDestinationType;
    }

    /**
     * The wrapper that contains AWS Audit Manager role information, such as the role type and IAM ARN.
     */
    export interface AssessmentRole {
        /**
         * The Amazon Resource Name (ARN) of the IAM role.
         */
        roleArn?: string;
        /**
         * The type of customer persona.
         *
         * > In `CreateAssessment` , `roleType` can only be `PROCESS_OWNER` .
         * > 
         * > In `UpdateSettings` , `roleType` can only be `PROCESS_OWNER` .
         * > 
         * > In `BatchCreateDelegationByAssessment` , `roleType` can only be `RESOURCE_OWNER` .
         */
        roleType?: enums.auditmanager.AssessmentRoleType;
    }

    /**
     * The wrapper that contains the AWS accounts and AWS services in scope for the assessment.
     */
    export interface AssessmentScope {
        /**
         * The AWS accounts included in scope.
         */
        awsAccounts?: outputs.auditmanager.AssessmentAwsAccount[];
        /**
         * The AWS services included in scope.
         */
        awsServices?: outputs.auditmanager.AssessmentAwsService[];
    }

}

export namespace autoscaling {
    /**
     * ``AcceleratorCountRequest`` is a property of the ``InstanceRequirements`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property type that describes the minimum and maximum number of accelerators for an instance type.
     */
    export interface AutoScalingGroupAcceleratorCountRequest {
        /**
         * The maximum value.
         */
        max?: number;
        /**
         * The minimum value.
         */
        min?: number;
    }

    /**
     * ``AcceleratorTotalMemoryMiBRequest`` is a property of the ``InstanceRequirements`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property type that describes the minimum and maximum total memory size for the accelerators for an instance type, in MiB.
     */
    export interface AutoScalingGroupAcceleratorTotalMemoryMiBRequest {
        /**
         * The memory maximum in MiB.
         */
        max?: number;
        /**
         * The memory minimum in MiB.
         */
        min?: number;
    }

    /**
     * ``BaselineEbsBandwidthMbpsRequest`` is a property of the ``InstanceRequirements`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property type that describes the minimum and maximum baseline bandwidth performance for an instance type, in Mbps.
     */
    export interface AutoScalingGroupBaselineEbsBandwidthMbpsRequest {
        /**
         * The maximum value in Mbps.
         */
        max?: number;
        /**
         * The minimum value in Mbps.
         */
        min?: number;
    }

    /**
     * ``InstanceMaintenancePolicy`` is a property of the [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html) resource.
     *  For more information, see [Instance maintenance policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html) in the *Amazon EC2 Auto Scaling User Guide*.
     */
    export interface AutoScalingGroupInstanceMaintenancePolicy {
        /**
         * Specifies the upper threshold as a percentage of the desired capacity of the Auto Scaling group. It represents the maximum percentage of the group that can be in service and healthy, or pending, to support your workload when replacing instances. Value range is 100 to 200. To clear a previously set value, specify a value of ``-1``.
         *  Both ``MinHealthyPercentage`` and ``MaxHealthyPercentage`` must be specified, and the difference between them cannot be greater than 100. A large range increases the number of instances that can be replaced at the same time.
         */
        maxHealthyPercentage?: number;
        /**
         * Specifies the lower threshold as a percentage of the desired capacity of the Auto Scaling group. It represents the minimum percentage of the group to keep in service, healthy, and ready to use to support your workload when replacing instances. Value range is 0 to 100. To clear a previously set value, specify a value of ``-1``.
         */
        minHealthyPercentage?: number;
    }

    /**
     * The attributes for the instance types for a mixed instances policy. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types.
     *  When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values.
     *  To limit the list of instance types from which Amazon EC2 Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both in the same request:
     *   +   ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.
     *   +   ``ExcludedInstanceTypes`` - The instance types to exclude from the list, even if they match your specified attributes.
     *   
     *   You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to its default.
     *   For an example template, see [Configure Amazon EC2 Auto Scaling resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ec2-auto-scaling.html).
     *  For more information, see [Creating an Auto Scaling group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html) in the *Amazon EC2 Auto Scaling User Guide*. For help determining which instance types match your attributes before you apply them to your Auto Scaling group, see [Preview instance types with specified attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements) in the *Amazon EC2 User Guide for Linux Instances*.
     *   ``InstanceRequirements`` is a property of the ``LaunchTemplateOverrides`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html) property type.
     */
    export interface AutoScalingGroupInstanceRequirements {
        /**
         * The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips) for an instance type.
         *  To exclude accelerator-enabled instance types, set ``Max`` to ``0``.
         *  Default: No minimum or maximum limits
         */
        acceleratorCount?: outputs.autoscaling.AutoScalingGroupAcceleratorCountRequest;
        /**
         * Indicates whether instance types must have accelerators by specific manufacturers.
         *   +  For instance types with NVIDIA devices, specify ``nvidia``.
         *   +  For instance types with AMD devices, specify ``amd``.
         *   +  For instance types with AWS devices, specify ``amazon-web-services``.
         *   +  For instance types with Xilinx devices, specify ``xilinx``.
         *   
         *  Default: Any manufacturer
         */
        acceleratorManufacturers?: string[];
        /**
         * Lists the accelerators that must be on an instance type.
         *   +  For instance types with NVIDIA A100 GPUs, specify ``a100``.
         *   +  For instance types with NVIDIA V100 GPUs, specify ``v100``.
         *   +  For instance types with NVIDIA K80 GPUs, specify ``k80``.
         *   +  For instance types with NVIDIA T4 GPUs, specify ``t4``.
         *   +  For instance types with NVIDIA M60 GPUs, specify ``m60``.
         *   +  For instance types with AMD Radeon Pro V520 GPUs, specify ``radeon-pro-v520``.
         *   +  For instance types with Xilinx VU9P FPGAs, specify ``vu9p``.
         *   
         *  Default: Any accelerator
         */
        acceleratorNames?: string[];
        /**
         * The minimum and maximum total memory size for the accelerators on an instance type, in MiB.
         *  Default: No minimum or maximum limits
         */
        acceleratorTotalMemoryMiB?: outputs.autoscaling.AutoScalingGroupAcceleratorTotalMemoryMiBRequest;
        /**
         * Lists the accelerator types that must be on an instance type.
         *   +  For instance types with GPU accelerators, specify ``gpu``.
         *   +  For instance types with FPGA accelerators, specify ``fpga``.
         *   +  For instance types with inference accelerators, specify ``inference``.
         *   
         *  Default: Any accelerator type
         */
        acceleratorTypes?: string[];
        /**
         * The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes.
         *  You can use strings with one or more wild cards, represented by an asterisk (``*``), to allow an instance type, size, or generation. The following are examples: ``m5.8xlarge``, ``c5*.*``, ``m5a.*``, ``r*``, ``*3*``.
         *  For example, if you specify ``c5*``, Amazon EC2 Auto Scaling will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify ``m5a.*``, Amazon EC2 Auto Scaling will allow all the M5a instance types, but not the M5n instance types.
         *   If you specify ``AllowedInstanceTypes``, you can't specify ``ExcludedInstanceTypes``.
         *   Default: All instance types
         */
        allowedInstanceTypes?: string[];
        /**
         * Indicates whether bare metal instance types are included, excluded, or required.
         *  Default: ``excluded``
         */
        bareMetal?: string;
        /**
         * The minimum and maximum baseline bandwidth performance for an instance type, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the *Amazon EC2 User Guide for Linux Instances*.
         *  Default: No minimum or maximum limits
         */
        baselineEbsBandwidthMbps?: outputs.autoscaling.AutoScalingGroupBaselineEbsBandwidthMbpsRequest;
        /**
         * Indicates whether burstable performance instance types are included, excluded, or required. For more information, see [Burstable performance instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html) in the *Amazon EC2 User Guide for Linux Instances*.
         *  Default: ``excluded``
         */
        burstablePerformance?: string;
        /**
         * Lists which specific CPU manufacturers to include.
         *   +  For instance types with Intel CPUs, specify ``intel``.
         *   +  For instance types with AMD CPUs, specify ``amd``.
         *   +  For instance types with AWS CPUs, specify ``amazon-web-services``.
         *   
         *   Don't confuse the CPU hardware manufacturer with the CPU hardware architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template. 
         *   Default: Any manufacturer
         */
        cpuManufacturers?: string[];
        /**
         * The instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (``*``), to exclude an instance family, type, size, or generation. The following are examples: ``m5.8xlarge``, ``c5*.*``, ``m5a.*``, ``r*``, ``*3*``. 
         *  For example, if you specify ``c5*``, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify ``m5a.*``, Amazon EC2 Auto Scaling will exclude all the M5a instance types, but not the M5n instance types.
         *   If you specify ``ExcludedInstanceTypes``, you can't specify ``AllowedInstanceTypes``.
         *   Default: No excluded instance types
         */
        excludedInstanceTypes?: string[];
        /**
         * Indicates whether current or previous generation instance types are included.
         *   +  For current generation instance types, specify ``current``. The current generation includes EC2 instance types currently recommended for use. This typically includes the latest two to three generations in each instance family. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide for Linux Instances*.
         *   +  For previous generation instance types, specify ``previous``.
         *   
         *  Default: Any current or previous generation
         */
        instanceGenerations?: string[];
        /**
         * Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, see [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the *Amazon EC2 User Guide for Linux Instances*.
         *  Default: ``included``
         */
        localStorage?: string;
        /**
         * Indicates the type of local storage that is required.
         *   +  For instance types with hard disk drive (HDD) storage, specify ``hdd``.
         *   +  For instance types with solid state drive (SSD) storage, specify ``ssd``.
         *   
         *  Default: Any local storage type
         */
        localStorageTypes?: string[];
        /**
         * [Price protection] The price protection threshold for Spot Instances, as a percentage of an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold.
         *  The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage.
         *  If you set ``DesiredCapacityType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is based on the per-vCPU or per-memory price instead of the per instance price. 
         *   Only one of ``SpotMaxPricePercentageOverLowestPrice`` or ``MaxSpotPriceAsPercentageOfOptimalOnDemandPrice`` can be specified. If you don't specify either, Amazon EC2 Auto Scaling will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as ``999999``.
         */
        maxSpotPriceAsPercentageOfOptimalOnDemandPrice?: number;
        /**
         * The minimum and maximum amount of memory per vCPU for an instance type, in GiB.
         *  Default: No minimum or maximum limits
         */
        memoryGiBPerVCpu?: outputs.autoscaling.AutoScalingGroupMemoryGiBPerVCpuRequest;
        /**
         * The minimum and maximum instance memory size for an instance type, in MiB.
         */
        memoryMiB: outputs.autoscaling.AutoScalingGroupMemoryMiBRequest;
        /**
         * The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).
         *  Default: No minimum or maximum limits
         */
        networkBandwidthGbps?: outputs.autoscaling.AutoScalingGroupNetworkBandwidthGbpsRequest;
        /**
         * The minimum and maximum number of network interfaces for an instance type.
         *  Default: No minimum or maximum limits
         */
        networkInterfaceCount?: outputs.autoscaling.AutoScalingGroupNetworkInterfaceCountRequest;
        /**
         * [Price protection] The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold. 
         *  The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage.
         *  To turn off price protection, specify a high value, such as ``999999``. 
         *  If you set ``DesiredCapacityType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per instance price. 
         *  Default: ``20``
         */
        onDemandMaxPricePercentageOverLowestPrice?: number;
        /**
         * Indicates whether instance types must provide On-Demand Instance hibernation support.
         *  Default: ``false``
         */
        requireHibernateSupport?: boolean;
        /**
         * [Price protection] The price protection threshold for Spot Instances, as a percentage higher than an identified Spot price. The identified Spot price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold.
         *  The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. 
         *  If you set ``DesiredCapacityType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is based on the per-vCPU or per-memory price instead of the per instance price. 
         *   Only one of ``SpotMaxPricePercentageOverLowestPrice`` or ``MaxSpotPriceAsPercentageOfOptimalOnDemandPrice`` can be specified. If you don't specify either, Amazon EC2 Auto Scaling will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as ``999999``.
         */
        spotMaxPricePercentageOverLowestPrice?: number;
        /**
         * The minimum and maximum total local storage size for an instance type, in GB.
         *  Default: No minimum or maximum limits
         */
        totalLocalStorageGb?: outputs.autoscaling.AutoScalingGroupTotalLocalStorageGbRequest;
        /**
         * The minimum and maximum number of vCPUs for an instance type.
         */
        vCpuCount: outputs.autoscaling.AutoScalingGroupVCpuCountRequest;
    }

    /**
     * Use this structure to specify the distribution of On-Demand Instances and Spot Instances and the allocation strategies used to fulfill On-Demand and Spot capacities for a mixed instances policy.
     *  For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the *Amazon EC2 Auto Scaling User Guide*.
     *   ``InstancesDistribution`` is a property of the [AWS::AutoScaling::AutoScalingGroup MixedInstancesPolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-mixedinstancespolicy.html) property type.
     */
    export interface AutoScalingGroupInstancesDistribution {
        /**
         * The allocation strategy to apply to your On-Demand Instances when they are launched. Possible instance types are determined by the launch template overrides that you specify.
         *  The following lists the valid values:
         *   + lowest-price Uses price to determine which instance types are the highest priority, launching the lowest priced instance types within an Availability Zone first. This is the default value for Auto Scaling groups that specify InstanceRequirements. + prioritized You set the order of instance types for the launch template overrides from highest to lowest priority (from first to last in the list). Amazon EC2 Auto Scaling launches your highest priority instance types first. If all your On-Demand capacity cannot be fulfilled using your highest priority instance type, then Amazon EC2 Auto Scaling launches the remaining capacity using the second priority instance type, and so on. This is the default value for Auto Scaling groups that don't specify InstanceRequirements and cannot be used for groups that do.
         */
        onDemandAllocationStrategy?: string;
        /**
         * The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is launched first as your group scales.
         *  This number has the same unit of measurement as the group's desired capacity. If you change the default unit of measurement (number of instances) by specifying weighted capacity values in your launch template overrides list, or by changing the default desired capacity type setting of the group, you must specify this number using the same unit of measurement.
         *  Default: 0
         *   An update to this setting means a gradual replacement of instances to adjust the current On-Demand Instance levels. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the previous ones.
         */
        onDemandBaseCapacity?: number;
        /**
         * Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond ``OnDemandBaseCapacity``. Expressed as a number (for example, 20 specifies 20% On-Demand Instances, 80% Spot Instances). If set to 100, only On-Demand Instances are used.
         *  Default: 100
         *   An update to this setting means a gradual replacement of instances to adjust the current On-Demand and Spot Instance levels for your additional capacity higher than the base capacity. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the previous ones.
         */
        onDemandPercentageAboveBaseCapacity?: number;
        /**
         * The allocation strategy to apply to your Spot Instances when they are launched. Possible instance types are determined by the launch template overrides that you specify.
         *  The following lists the valid values:
         *   + capacity-optimized Requests Spot Instances using pools that are optimally chosen based on the available Spot capacity. This strategy has the lowest risk of interruption. To give certain instance types a higher chance of launching first, use capacity-optimized-prioritized. + capacity-optimized-prioritized You set the order of instance types for the launch template overrides from highest to lowest priority (from first to last in the list). Amazon EC2 Auto Scaling honors the instance type priorities on a best effort basis but optimizes for capacity first. Note that if the On-Demand allocation strategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity. This is not a valid value for Auto Scaling groups that specify InstanceRequirements. + lowest-price Requests Spot Instances using the lowest priced pools within an Availability Zone, across the number of Spot pools that you specify for the SpotInstancePools property. To ensure that your desired capacity is met, you might receive Spot Instances from several pools. This is the default value, but it might lead to high interruption rates because this strategy only considers instance price and not available capacity. + price-capacity-optimized (recommended) The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price.
         */
        spotAllocationStrategy?: string;
        /**
         * The number of Spot Instance pools across which to allocate your Spot Instances. The Spot pools are determined from the different instance types in the overrides. Valid only when the ``SpotAllocationStrategy`` is ``lowest-price``. Value must be in the range of 1–20.
         *  Default: 2
         */
        spotInstancePools?: number;
        /**
         * The maximum price per unit hour that you are willing to pay for a Spot Instance. If your maximum price is lower than the Spot price for the instance types that you selected, your Spot Instances are not launched. We do not recommend specifying a maximum price because it can lead to increased interruptions. When Spot Instances launch, you pay the current Spot price. To remove a maximum price that you previously set, include the property but specify an empty string ("") for the value.
         *   If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify one.
         *   Valid Range: Minimum value of 0.001
         */
        spotMaxPrice?: string;
    }

    /**
     * Use this structure to specify the launch templates and instance types (overrides) for a mixed instances policy.
     *   ``LaunchTemplate`` is a property of the [AWS::AutoScaling::AutoScalingGroup MixedInstancesPolicy](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-mixedinstancespolicy.html) property type.
     */
    export interface AutoScalingGroupLaunchTemplate {
        /**
         * The launch template.
         */
        launchTemplateSpecification: outputs.autoscaling.AutoScalingGroupLaunchTemplateSpecification;
        /**
         * Any properties that you specify override the same properties in the launch template.
         */
        overrides?: outputs.autoscaling.AutoScalingGroupLaunchTemplateOverrides[];
    }

    /**
     * Use this structure to let Amazon EC2 Auto Scaling do the following when the Auto Scaling group has a mixed instances policy:
     *   +  Override the instance type that is specified in the launch template.
     *   +  Use multiple instance types.
     *   
     *  Specify the instance types that you want, or define your instance requirements instead and let Amazon EC2 Auto Scaling provision the available instance types that meet your requirements. This can provide Amazon EC2 Auto Scaling with a larger selection of instance types to choose from when fulfilling Spot and On-Demand capacities. You can view which instance types are matched before you apply the instance requirements to your Auto Scaling group.
     *  After you define your instance requirements, you don't have to keep updating these settings to get new EC2 instance types automatically. Amazon EC2 Auto Scaling uses the instance requirements of the Auto Scaling group to determine whether a new EC2 instance type can be used.
     *   ``LaunchTemplateOverrides`` is a property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html) property type.
     */
    export interface AutoScalingGroupLaunchTemplateOverrides {
        /**
         * The instance requirements. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types.
         *  You can specify up to four separate sets of instance requirements per Auto Scaling group. This is useful for provisioning instances from different Amazon Machine Images (AMIs) in the same Auto Scaling group. To do this, create the AMIs and create a new launch template for each AMI. Then, create a compatible set of instance requirements for each launch template. 
         *   If you specify ``InstanceRequirements``, you can't specify ``InstanceType``.
         */
        instanceRequirements?: outputs.autoscaling.AutoScalingGroupInstanceRequirements;
        /**
         * The instance type, such as ``m3.xlarge``. You must specify an instance type that is supported in your requested Region and Availability Zones. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide for Linux Instances*.
         *  You can specify up to 40 instance types per Auto Scaling group.
         */
        instanceType?: string;
        /**
         * Provides a launch template for the specified instance type or set of instance requirements. For example, some instance types might require a launch template with a different AMI. If not provided, Amazon EC2 Auto Scaling uses the launch template that's specified in the ``LaunchTemplate`` definition. For more information, see [Specifying a different launch template for an instance type](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-launch-template-overrides.html) in the *Amazon EC2 Auto Scaling User Guide*. 
         *  You can specify up to 20 launch templates per Auto Scaling group. The launch templates specified in the overrides and in the ``LaunchTemplate`` definition count towards this limit.
         */
        launchTemplateSpecification?: outputs.autoscaling.AutoScalingGroupLaunchTemplateSpecification;
        /**
         * If you provide a list of instance types to use, you can specify the number of capacity units provided by each instance type in terms of virtual CPUs, memory, storage, throughput, or other relative performance characteristic. When a Spot or On-Demand Instance is launched, the capacity units count toward the desired capacity. Amazon EC2 Auto Scaling launches instances until the desired capacity is totally fulfilled, even if this results in an overage. For example, if there are two units remaining to fulfill capacity, and Amazon EC2 Auto Scaling can only launch an instance with a ``WeightedCapacity`` of five units, the instance is launched, and the desired capacity is exceeded by three units. For more information, see [Configure instance weighting for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html) in the *Amazon EC2 Auto Scaling User Guide*. Value must be in the range of 1-999. 
         *  If you specify a value for ``WeightedCapacity`` for one instance type, you must specify a value for ``WeightedCapacity`` for all of them.
         *   Every Auto Scaling group has three size parameters (``DesiredCapacity``, ``MaxSize``, and ``MinSize``). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.
         */
        weightedCapacity?: string;
    }

    /**
     * Specifies a launch template to use when provisioning EC2 instances for an Auto Scaling group.
     *  You must specify the following:
     *   +  The ID or the name of the launch template, but not both.
     *   +  The version of the launch template.
     *   
     *   ``LaunchTemplateSpecification`` is property of the [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html) resource. It is also a property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html) and [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property types.
     *  For information about creating a launch template, see [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html) and [Create a launch template for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the *Amazon EC2 Auto Scaling User Guide*.
     *  For examples of launch templates, see [Create launch templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ec2-launch-templates.html).
     */
    export interface AutoScalingGroupLaunchTemplateSpecification {
        /**
         * The ID of the launch template.
         *  You must specify the ``LaunchTemplateID`` or the ``LaunchTemplateName``, but not both.
         */
        launchTemplateId?: string;
        /**
         * The name of the launch template.
         *  You must specify the ``LaunchTemplateName`` or the ``LaunchTemplateID``, but not both.
         */
        launchTemplateName?: string;
        /**
         * The version number of the launch template.
         *  Specifying ``$Latest`` or ``$Default`` for the template version number is not supported. However, you can specify ``LatestVersionNumber`` or ``DefaultVersionNumber`` using the ``Fn::GetAtt`` intrinsic function. For more information, see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html).
         *   For an example of using the ``Fn::GetAtt`` function, see the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html#aws-resource-autoscaling-autoscalinggroup--examples) section of the ``AWS::AutoScaling::AutoScalingGroup`` resource.
         */
        version: string;
    }

    /**
     * ``LifecycleHookSpecification`` specifies a lifecycle hook for the ``LifecycleHookSpecificationList`` property of the [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html) resource. A lifecycle hook specifies actions to perform when Amazon EC2 Auto Scaling launches or terminates instances. 
     *  For more information, see [Amazon EC2 Auto Scaling lifecycle hooks](https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html) in the *Amazon EC2 Auto Scaling User Guide*. You can find a sample template snippet in the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-lifecyclehook.html#aws-resource-as-lifecyclehook--examples) section of the ``AWS::AutoScaling::LifecycleHook`` resource.
     */
    export interface AutoScalingGroupLifecycleHookSpecification {
        /**
         * The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is ``ABANDON``.
         *  Valid values: ``CONTINUE`` | ``ABANDON``
         */
        defaultResult?: string;
        /**
         * The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from ``30`` to ``7200`` seconds. The default value is ``3600`` seconds (1 hour).
         */
        heartbeatTimeout?: number;
        /**
         * The name of the lifecycle hook.
         */
        lifecycleHookName: string;
        /**
         * The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.
         *   +  To create a lifecycle hook for scale-out events, specify ``autoscaling:EC2_INSTANCE_LAUNCHING``.
         *   +  To create a lifecycle hook for scale-in events, specify ``autoscaling:EC2_INSTANCE_TERMINATING``.
         */
        lifecycleTransition: string;
        /**
         * Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
         */
        notificationMetadata?: string;
        /**
         * The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook. You can specify an Amazon SNS topic or an Amazon SQS queue.
         */
        notificationTargetArn?: string;
        /**
         * The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. For information about creating this role, see [Prepare to add a lifecycle hook to your Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/prepare-for-lifecycle-notifications.html) in the *Amazon EC2 Auto Scaling User Guide*.
         *  Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue.
         */
        roleArn?: string;
    }

    /**
     * ``MemoryGiBPerVCpuRequest`` is a property of the ``InstanceRequirements`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property type that describes the minimum and maximum amount of memory per vCPU for an instance type, in GiB.
     */
    export interface AutoScalingGroupMemoryGiBPerVCpuRequest {
        /**
         * The memory maximum in GiB.
         */
        max?: number;
        /**
         * The memory minimum in GiB.
         */
        min?: number;
    }

    /**
     * ``MemoryMiBRequest`` is a property of the ``InstanceRequirements`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property type that describes the minimum and maximum instance memory size for an instance type, in MiB.
     */
    export interface AutoScalingGroupMemoryMiBRequest {
        /**
         * The memory maximum in MiB.
         */
        max?: number;
        /**
         * The memory minimum in MiB.
         */
        min?: number;
    }

    /**
     * ``MetricsCollection`` is a property of the [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html) resource that describes the group metrics that an Amazon EC2 Auto Scaling group sends to Amazon CloudWatch. These metrics describe the group rather than any of its instances. 
     *  For more information, see [Monitor CloudWatch metrics for your Auto Scaling groups and instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-monitoring.html) in the *Amazon EC2 Auto Scaling User Guide*. You can find a sample template snippet in the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html#aws-resource-autoscaling-autoscalinggroup--examples) section of the ``AWS::AutoScaling::AutoScalingGroup`` resource.
     */
    export interface AutoScalingGroupMetricsCollection {
        /**
         * The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is ``1Minute``.
         */
        granularity: string;
        /**
         * Identifies the metrics to enable.
         *  You can specify one or more of the following metrics:
         *   +   ``GroupMinSize`` 
         *   +   ``GroupMaxSize`` 
         *   +   ``GroupDesiredCapacity`` 
         *   +   ``GroupInServiceInstances`` 
         *   +   ``GroupPendingInstances`` 
         *   +   ``GroupStandbyInstances`` 
         *   +   ``GroupTerminatingInstances`` 
         *   +   ``GroupTotalInstances`` 
         *   +   ``GroupInServiceCapacity`` 
         *   +   ``GroupPendingCapacity`` 
         *   +   ``GroupStandbyCapacity`` 
         *   +   ``GroupTerminatingCapacity`` 
         *   +   ``GroupTotalCapacity`` 
         *   +   ``WarmPoolDesiredCapacity`` 
         *   +   ``WarmPoolWarmedCapacity`` 
         *   +   ``WarmPoolPendingCapacity`` 
         *   +   ``WarmPoolTerminatingCapacity`` 
         *   +   ``WarmPoolTotalCapacity`` 
         *   +   ``GroupAndWarmPoolDesiredCapacity`` 
         *   +   ``GroupAndWarmPoolTotalCapacity`` 
         *   
         *  If you specify ``Granularity`` and don't specify any metrics, all metrics are enabled.
         *  For more information, see [Amazon CloudWatch metrics for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-metrics.html) in the *Amazon EC2 Auto Scaling User Guide*.
         */
        metrics?: string[];
    }

    /**
     * Use this structure to launch multiple instance types and On-Demand Instances and Spot Instances within a single Auto Scaling group.
     *  A mixed instances policy contains information that Amazon EC2 Auto Scaling can use to launch instances and help optimize your costs. For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the *Amazon EC2 Auto Scaling User Guide*.
     *  You can create a mixed instances policy for new and existing Auto Scaling groups. You must use a launch template to configure the policy. You cannot use a launch configuration.
     *  There are key differences between Spot Instances and On-Demand Instances:
     *   +  The price for Spot Instances varies based on demand
     *   +  Amazon EC2 can terminate an individual Spot Instance as the availability of, or price for, Spot Instances changes
     *   
     *  When a Spot Instance is terminated, Amazon EC2 Auto Scaling group attempts to launch a replacement instance to maintain the desired capacity for the group. 
     *   ``MixedInstancesPolicy`` is a property of the [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html) resource.
     */
    export interface AutoScalingGroupMixedInstancesPolicy {
        /**
         * The instances distribution.
         */
        instancesDistribution?: outputs.autoscaling.AutoScalingGroupInstancesDistribution;
        /**
         * One or more launch templates and the instance types (overrides) that are used to launch EC2 instances to fulfill On-Demand and Spot capacities.
         */
        launchTemplate: outputs.autoscaling.AutoScalingGroupLaunchTemplate;
    }

    /**
     * ``NetworkBandwidthGbpsRequest`` is a property of the ``InstanceRequirements`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property type that describes the minimum and maximum network bandwidth for an instance type, in Gbps.
     *   Setting the minimum bandwidth does not guarantee that your instance will achieve the minimum bandwidth. Amazon EC2 will identify instance types that support the specified minimum bandwidth, but the actual bandwidth of your instance might go below the specified minimum at times. For more information, see [Available instance bandwidth](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html#available-instance-bandwidth) in the *Amazon EC2 User Guide for Linux Instances*.
     */
    export interface AutoScalingGroupNetworkBandwidthGbpsRequest {
        /**
         * The maximum amount of network bandwidth, in gigabits per second (Gbps).
         */
        max?: number;
        /**
         * The minimum amount of network bandwidth, in gigabits per second (Gbps).
         */
        min?: number;
    }

    /**
     * ``NetworkInterfaceCountRequest`` is a property of the ``InstanceRequirements`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property type that describes the minimum and maximum number of network interfaces for an instance type.
     */
    export interface AutoScalingGroupNetworkInterfaceCountRequest {
        /**
         * The maximum number of network interfaces.
         */
        max?: number;
        /**
         * The minimum number of network interfaces.
         */
        min?: number;
    }

    /**
     * A structure that specifies an Amazon SNS notification configuration for the ``NotificationConfigurations`` property of the [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html) resource.
     *  For an example template snippet, see [Configure Amazon EC2 Auto Scaling resources](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ec2-auto-scaling.html).
     *  For more information, see [Get Amazon SNS notifications when your Auto Scaling group scales](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html) in the *Amazon EC2 Auto Scaling User Guide*.
     */
    export interface AutoScalingGroupNotificationConfiguration {
        /**
         * A list of event types that send a notification. Event types can include any of the following types. 
         *   *Allowed values*:
         *   +   ``autoscaling:EC2_INSTANCE_LAUNCH`` 
         *   +   ``autoscaling:EC2_INSTANCE_LAUNCH_ERROR`` 
         *   +   ``autoscaling:EC2_INSTANCE_TERMINATE`` 
         *   +   ``autoscaling:EC2_INSTANCE_TERMINATE_ERROR`` 
         *   +   ``autoscaling:TEST_NOTIFICATION``
         */
        notificationTypes?: string[];
        /**
         * The Amazon Resource Name (ARN) of the Amazon SNS topic.
         */
        topicArn: string[];
    }

    /**
     * A structure that specifies a tag for the ``Tags`` property of [AWS::AutoScaling::AutoScalingGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html) resource.
     *  For more information, see [Tag Auto Scaling groups and instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html) in the *Amazon EC2 Auto Scaling User Guide*. You can find a sample template snippet in the [Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html#aws-resource-autoscaling-autoscalinggroup--examples) section of the ``AWS::AutoScaling::AutoScalingGroup`` resource.
     *  CloudFormation adds the following tags to all Auto Scaling groups and associated instances: 
     *   +  aws:cloudformation:stack-name
     *   +  aws:cloudformation:stack-id
     *   +  aws:cloudformation:logical-id
     */
    export interface AutoScalingGroupTagProperty {
        /**
         * The tag key.
         */
        key: string;
        /**
         * Set to ``true`` if you want CloudFormation to copy the tag to EC2 instances that are launched as part of the Auto Scaling group. Set to ``false`` if you want the tag attached only to the Auto Scaling group and not copied to any instances launched as part of the Auto Scaling group.
         */
        propagateAtLaunch: boolean;
        /**
         * The tag value.
         */
        value: string;
    }

    /**
     * ``TotalLocalStorageGBRequest`` is a property of the ``InstanceRequirements`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property type that describes the minimum and maximum total local storage size for an instance type, in GB.
     */
    export interface AutoScalingGroupTotalLocalStorageGbRequest {
        /**
         * The storage maximum in GB.
         */
        max?: number;
        /**
         * The storage minimum in GB.
         */
        min?: number;
    }

    /**
     * ``VCpuCountRequest`` is a property of the ``InstanceRequirements`` property of the [AWS::AutoScaling::AutoScalingGroup LaunchTemplateOverrides](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html) property type that describes the minimum and maximum number of vCPUs for an instance type.
     */
    export interface AutoScalingGroupVCpuCountRequest {
        /**
         * The maximum number of vCPUs.
         */
        max?: number;
        /**
         * The minimum number of vCPUs.
         */
        min?: number;
    }

    /**
     * BlockDevice is a subproperty of BlockDeviceMapping that describes an Amazon EBS volume.
     */
    export interface LaunchConfigurationBlockDevice {
        /**
         * Indicates whether the volume is deleted on instance termination. 
         */
        deleteOnTermination?: boolean;
        /**
         * Specifies whether the volume should be encrypted. 
         */
        encrypted?: boolean;
        /**
         * The number of input/output (I/O) operations per second (IOPS) to provision for the volume. 
         */
        iops?: number;
        /**
         * The snapshot ID of the volume to use.
         */
        snapshotId?: string;
        /**
         * The throughput (MiBps) to provision for a gp3 volume.
         */
        throughput?: number;
        /**
         * The volume size, in GiBs.
         */
        volumeSize?: number;
        /**
         * The volume type.
         */
        volumeType?: string;
    }

    /**
     * BlockDeviceMapping is a property of AWS::AutoScaling::LaunchConfiguration that describes a block device mapping for an Auto Scaling group.
     */
    export interface LaunchConfigurationBlockDeviceMapping {
        /**
         * The device name exposed to the EC2 instance (for example, /dev/sdh or xvdh). 
         */
        deviceName: string;
        /**
         * Parameters used to automatically set up EBS volumes when an instance is launched.
         */
        ebs?: outputs.autoscaling.LaunchConfigurationBlockDevice;
        /**
         * Setting this value to true suppresses the specified device included in the block device mapping of the AMI.
         */
        noDevice?: boolean;
        /**
         * The name of the virtual device.
         */
        virtualName?: string;
    }

    /**
     * MetadataOptions is a property of AWS::AutoScaling::LaunchConfiguration that describes metadata options for the instances.
     */
    export interface LaunchConfigurationMetadataOptions {
        /**
         * This parameter enables or disables the HTTP metadata endpoint on your instances.
         */
        httpEndpoint?: string;
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests.
         */
        httpPutResponseHopLimit?: number;
        /**
         * The state of token usage for your instance metadata requests.
         */
        httpTokens?: string;
    }

    export interface ScalingPolicyCustomizedMetricSpecification {
        /**
         * The dimensions of the metric.
         *
         * Conditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.
         */
        dimensions?: outputs.autoscaling.ScalingPolicyMetricDimension[];
        /**
         * The name of the metric. To get the exact metric name, namespace, and dimensions, inspect the [Metric](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Metric.html) object that is returned by a call to [ListMetrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html) .
         */
        metricName: string;
        /**
         * The namespace of the metric.
         */
        namespace: string;
        /**
         * The statistic of the metric.
         */
        statistic: string;
        /**
         * The unit of the metric. For a complete list of the units that CloudWatch supports, see the [MetricDatum](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) data type in the *Amazon CloudWatch API Reference* .
         */
        unit?: string;
    }

    export interface ScalingPolicyMetric {
        /**
         * The dimensions for the metric. For the list of available dimensions, see the AWS documentation available from the table in [AWS services that publish CloudWatch metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html) in the *Amazon CloudWatch User Guide* .
         *
         * Conditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.
         */
        dimensions?: outputs.autoscaling.ScalingPolicyMetricDimension[];
        /**
         * The name of the metric.
         */
        metricName: string;
        /**
         * The namespace of the metric. For more information, see the table in [AWS services that publish CloudWatch metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html) in the *Amazon CloudWatch User Guide* .
         */
        namespace: string;
    }

    export interface ScalingPolicyMetricDataQuery {
        /**
         * The math expression to perform on the returned data, if this object is performing a math expression. This expression can use the `Id` of the other metrics to refer to those metrics, and can also use the `Id` of other expressions to use the result of those expressions.
         *
         * Conditional: Within each `MetricDataQuery` object, you must specify either `Expression` or `MetricStat` , but not both.
         */
        expression?: string;
        /**
         * A short name that identifies the object's results in the response. This name must be unique among all `MetricDataQuery` objects specified for a single scaling policy. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscores. The first character must be a lowercase letter.
         */
        id: string;
        /**
         * A human-readable label for this metric or expression. This is especially useful if this is a math expression, so that you know what the value represents.
         */
        label?: string;
        /**
         * Information about the metric data to return.
         *
         * Conditional: Within each `MetricDataQuery` object, you must specify either `Expression` or `MetricStat` , but not both.
         */
        metricStat?: outputs.autoscaling.ScalingPolicyMetricStat;
        /**
         * Indicates whether to return the timestamps and raw data values of this metric.
         *
         * If you use any math expressions, specify `true` for this value for only the final math expression that the metric specification is based on. You must specify `false` for `ReturnData` for all the other metrics and expressions used in the metric specification.
         *
         * If you are only retrieving metrics and not performing any math expressions, do not specify anything for `ReturnData` . This sets it to its default ( `true` ).
         */
        returnData?: boolean;
    }

    export interface ScalingPolicyMetricDimension {
        /**
         * The name of the dimension.
         */
        name: string;
        /**
         * The value of the dimension.
         */
        value: string;
    }

    export interface ScalingPolicyMetricStat {
        /**
         * The CloudWatch metric to return, including the metric name, namespace, and dimensions. To get the exact metric name, namespace, and dimensions, inspect the [Metric](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Metric.html) object that is returned by a call to [ListMetrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html) .
         */
        metric: outputs.autoscaling.ScalingPolicyMetric;
        /**
         * The statistic to return. It can include any CloudWatch statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *Amazon CloudWatch User Guide* .
         *
         * The most commonly used metrics for predictive scaling are `Average` and `Sum` .
         */
        stat: string;
        /**
         * The unit to use for the returned data points. For a complete list of the units that CloudWatch supports, see the [MetricDatum](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) data type in the *Amazon CloudWatch API Reference* .
         */
        unit?: string;
    }

    export interface ScalingPolicyPredefinedMetricSpecification {
        /**
         * The metric type. The following predefined metrics are available:
         *
         * - `ASGAverageCPUUtilization` - Average CPU utilization of the Auto Scaling group.
         * - `ASGAverageNetworkIn` - Average number of bytes received on all network interfaces by the Auto Scaling group.
         * - `ASGAverageNetworkOut` - Average number of bytes sent out on all network interfaces by the Auto Scaling group.
         * - `ALBRequestCountPerTarget` - Average Application Load Balancer request count per target for your Auto Scaling group.
         */
        predefinedMetricType: string;
        /**
         * A label that uniquely identifies a specific Application Load Balancer target group from which to determine the average request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group.
         *
         * You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is:
         *
         * `app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff` .
         *
         * Where:
         *
         * - app/<load-balancer-name>/<load-balancer-id> is the final portion of the load balancer ARN
         * - targetgroup/<target-group-name>/<target-group-id> is the final portion of the target group ARN.
         *
         * To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
         */
        resourceLabel?: string;
    }

    export interface ScalingPolicyPredictiveScalingConfiguration {
        /**
         * Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Defaults to `HonorMaxCapacity` if not specified.
         *
         * The following are possible values:
         *
         * - `HonorMaxCapacity` - Amazon EC2 Auto Scaling can't increase the maximum capacity of the group when the forecast capacity is close to or exceeds the maximum capacity.
         * - `IncreaseMaxCapacity` - Amazon EC2 Auto Scaling can increase the maximum capacity of the group when the forecast capacity is close to or exceeds the maximum capacity. The upper limit is determined by the forecasted capacity and the value for `MaxCapacityBuffer` .
         *
         * > Use caution when allowing the maximum capacity to be automatically increased. This can lead to more instances being launched than intended if the increased maximum capacity is not monitored and managed. The increased maximum capacity then becomes the new normal maximum capacity for the Auto Scaling group until you manually update it. The maximum capacity does not automatically decrease back to the original maximum.
         */
        maxCapacityBreachBehavior?: string;
        /**
         * The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55.
         *
         * If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity.
         *
         * Required if the `MaxCapacityBreachBehavior` property is set to `IncreaseMaxCapacity` , and cannot be used otherwise.
         */
        maxCapacityBuffer?: number;
        /**
         * This structure includes the metrics and target utilization to use for predictive scaling.
         *
         * This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.
         */
        metricSpecifications: outputs.autoscaling.ScalingPolicyPredictiveScalingMetricSpecification[];
        /**
         * The predictive scaling mode. Defaults to `ForecastOnly` if not specified.
         */
        mode?: string;
        /**
         * The amount of time, in seconds, by which the instance launch time can be advanced. For example, the forecast says to add capacity at 10:00 AM, and you choose to pre-launch instances by 5 minutes. In that case, the instances will be launched at 9:55 AM. The intention is to give resources time to be provisioned. It can take a few minutes to launch an EC2 instance. The actual amount of time required depends on several factors, such as the size of the instance and whether there are startup scripts to complete.
         *
         * The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified.
         */
        schedulingBufferTime?: number;
    }

    export interface ScalingPolicyPredictiveScalingCustomizedCapacityMetric {
        /**
         * One or more metric data queries to provide the data points for a capacity metric. Use multiple metric data queries only if you are performing a math expression on returned data.
         */
        metricDataQueries: outputs.autoscaling.ScalingPolicyMetricDataQuery[];
    }

    export interface ScalingPolicyPredictiveScalingCustomizedLoadMetric {
        /**
         * One or more metric data queries to provide the data points for a load metric. Use multiple metric data queries only if you are performing a math expression on returned data.
         */
        metricDataQueries: outputs.autoscaling.ScalingPolicyMetricDataQuery[];
    }

    export interface ScalingPolicyPredictiveScalingCustomizedScalingMetric {
        /**
         * One or more metric data queries to provide the data points for a scaling metric. Use multiple metric data queries only if you are performing a math expression on returned data.
         */
        metricDataQueries: outputs.autoscaling.ScalingPolicyMetricDataQuery[];
    }

    export interface ScalingPolicyPredictiveScalingMetricSpecification {
        /**
         * The customized capacity metric specification.
         */
        customizedCapacityMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingCustomizedCapacityMetric;
        /**
         * The customized load metric specification.
         */
        customizedLoadMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingCustomizedLoadMetric;
        /**
         * The customized scaling metric specification.
         */
        customizedScalingMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingCustomizedScalingMetric;
        /**
         * The predefined load metric specification.
         */
        predefinedLoadMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingPredefinedLoadMetric;
        /**
         * The predefined metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
         */
        predefinedMetricPairSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingPredefinedMetricPair;
        /**
         * The predefined scaling metric specification.
         */
        predefinedScalingMetricSpecification?: outputs.autoscaling.ScalingPolicyPredictiveScalingPredefinedScalingMetric;
        /**
         * Specifies the target utilization.
         *
         * > Some metrics are based on a count instead of a percentage, such as the request count for an Application Load Balancer or the number of messages in an SQS queue. If the scaling policy specifies one of these metrics, specify the target utilization as the optimal average request or message count per instance during any one-minute interval.
         */
        targetValue: number;
    }

    export interface ScalingPolicyPredictiveScalingPredefinedLoadMetric {
        /**
         * The metric type.
         */
        predefinedMetricType: string;
        /**
         * A label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group.
         *
         * You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is:
         *
         * `app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff` .
         *
         * Where:
         *
         * - app/<load-balancer-name>/<load-balancer-id> is the final portion of the load balancer ARN
         * - targetgroup/<target-group-name>/<target-group-id> is the final portion of the target group ARN.
         *
         * To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
         */
        resourceLabel?: string;
    }

    export interface ScalingPolicyPredictiveScalingPredefinedMetricPair {
        /**
         * Indicates which metrics to use. There are two different types of metrics for each metric type: one is a load metric and one is a scaling metric. For example, if the metric type is `ASGCPUUtilization` , the Auto Scaling group's total CPU metric is used as the load metric, and the average CPU metric is used for the scaling metric.
         */
        predefinedMetricType: string;
        /**
         * A label that uniquely identifies a specific Application Load Balancer target group from which to determine the total and average request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group.
         *
         * You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is:
         *
         * `app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff` .
         *
         * Where:
         *
         * - app/<load-balancer-name>/<load-balancer-id> is the final portion of the load balancer ARN
         * - targetgroup/<target-group-name>/<target-group-id> is the final portion of the target group ARN.
         *
         * To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
         */
        resourceLabel?: string;
    }

    export interface ScalingPolicyPredictiveScalingPredefinedScalingMetric {
        /**
         * The metric type.
         */
        predefinedMetricType: string;
        /**
         * A label that uniquely identifies a specific Application Load Balancer target group from which to determine the average request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group.
         *
         * You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is:
         *
         * `app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff` .
         *
         * Where:
         *
         * - app/<load-balancer-name>/<load-balancer-id> is the final portion of the load balancer ARN
         * - targetgroup/<target-group-name>/<target-group-id> is the final portion of the target group ARN.
         *
         * To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
         */
        resourceLabel?: string;
    }

    export interface ScalingPolicyStepAdjustment {
        /**
         * The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
         */
        metricIntervalLowerBound?: number;
        /**
         * The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.
         *
         * The upper bound must be greater than the lower bound.
         */
        metricIntervalUpperBound?: number;
        /**
         * The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.
         */
        scalingAdjustment: number;
    }

    export interface ScalingPolicyTargetTrackingConfiguration {
        /**
         * A customized metric. You must specify either a predefined metric or a customized metric.
         */
        customizedMetricSpecification?: outputs.autoscaling.ScalingPolicyCustomizedMetricSpecification;
        /**
         * Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is `false` .
         */
        disableScaleIn?: boolean;
        /**
         * A predefined metric. You must specify either a predefined metric or a customized metric.
         */
        predefinedMetricSpecification?: outputs.autoscaling.ScalingPolicyPredefinedMetricSpecification;
        /**
         * The target value for the metric.
         *
         * > Some metrics are based on a count instead of a percentage, such as the request count for an Application Load Balancer or the number of messages in an SQS queue. If the scaling policy specifies one of these metrics, specify the target utilization as the optimal average request or message count per instance during any one-minute interval.
         */
        targetValue: number;
    }

    export interface WarmPoolInstanceReusePolicy {
        /**
         * Specifies whether instances in the Auto Scaling group can be returned to the warm pool on scale in.
         */
        reuseOnScaleIn?: boolean;
    }

}

export namespace b2bi {
    export interface CapabilityConfigurationProperties {
        edi: outputs.b2bi.CapabilityEdiConfiguration;
    }

    export interface CapabilityEdiConfiguration {
        inputLocation: outputs.b2bi.CapabilityS3Location;
        outputLocation: outputs.b2bi.CapabilityS3Location;
        transformerId: string;
        type: outputs.b2bi.CapabilityEdiTypeProperties;
    }

    export interface CapabilityEdiTypeProperties {
        x12Details: outputs.b2bi.CapabilityX12Details;
    }

    export interface CapabilityS3Location {
        bucketName?: string;
        key?: string;
    }

    export interface CapabilityX12Details {
        transactionSet?: enums.b2bi.CapabilityX12TransactionSet;
        version?: enums.b2bi.CapabilityX12Version;
    }

    export interface TransformerEdiTypeProperties {
        x12Details: outputs.b2bi.TransformerX12Details;
    }

    export interface TransformerX12Details {
        transactionSet?: enums.b2bi.TransformerX12TransactionSet;
        version?: enums.b2bi.TransformerX12Version;
    }

}

export namespace backup {
    export interface BackupPlanAdvancedBackupSettingResourceType {
        /**
         * The backup option for the resource. Each option is a key-value pair. This option is only available for Windows VSS backup jobs.
         *
         * Valid values:
         *
         * Set to `"WindowsVSS":"enabled"` to enable the `WindowsVSS` backup option and create a Windows VSS backup.
         *
         * Set to `"WindowsVSS":"disabled"` to create a regular backup. The `WindowsVSS` option is not enabled by default.
         *
         * If you specify an invalid option, you get an `InvalidParameterValueException` exception.
         *
         * For more information about Windows VSS backups, see [Creating a VSS-Enabled Windows Backup](https://docs.aws.amazon.com/aws-backup/latest/devguide/windows-backups.html) .
         */
        backupOptions: any;
        /**
         * The name of a resource type. The only supported resource type is EC2.
         */
        resourceType: string;
    }

    export interface BackupPlanBackupRuleResourceType {
        /**
         * A value in minutes after a backup job is successfully started before it must be completed or it is canceled by AWS Backup .
         */
        completionWindowMinutes?: number;
        /**
         * An array of CopyAction objects, which contains the details of the copy operation.
         */
        copyActions?: outputs.backup.BackupPlanCopyActionResourceType[];
        /**
         * Enables continuous backup and point-in-time restores (PITR).
         */
        enableContinuousBackup?: boolean;
        /**
         * The lifecycle defines when a protected resource is transitioned to cold storage and when it expires. AWS Backup transitions and expires backups automatically according to the lifecycle that you define.
         */
        lifecycle?: outputs.backup.BackupPlanLifecycleResourceType;
        /**
         * The tags to assign to the resources.
         */
        recoveryPointTags?: {[key: string]: string};
        /**
         * A display name for a backup rule.
         */
        ruleName: string;
        /**
         * A CRON expression specifying when AWS Backup initiates a backup job.
         */
        scheduleExpression?: string;
        /**
         * This is the timezone in which the schedule expression is set. By default, ScheduleExpressions are in UTC. You can modify this to a specified timezone.
         */
        scheduleExpressionTimezone?: string;
        /**
         * An optional value that specifies a period of time in minutes after a backup is scheduled before a job is canceled if it doesn't start successfully.
         *
         * If this value is included, it must be at least 60 minutes to avoid errors.
         */
        startWindowMinutes?: number;
        /**
         * The name of a logical container where backups are stored. Backup vaults are identified by names that are unique to the account used to create them and the AWS Region where they are created. They consist of letters, numbers, and hyphens.
         */
        targetBackupVault: string;
    }

    export interface BackupPlanCopyActionResourceType {
        /**
         * An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup. For example, `arn:aws:backup:us-east-1:123456789012:vault:aBackupVault.`
         */
        destinationBackupVaultArn: string;
        /**
         * Defines when a protected resource is transitioned to cold storage and when it expires. AWS Backup transitions and expires backups automatically according to the lifecycle that you define. If you do not specify a lifecycle, AWS Backup applies the lifecycle policy of the source backup to the destination backup.
         *
         * Backups transitioned to cold storage must be stored in cold storage for a minimum of 90 days.
         */
        lifecycle?: outputs.backup.BackupPlanLifecycleResourceType;
    }

    export interface BackupPlanLifecycleResourceType {
        /**
         * Specifies the number of days after creation that a recovery point is deleted. Must be greater than `MoveToColdStorageAfterDays` .
         */
        deleteAfterDays?: number;
        /**
         * Specifies the number of days after creation that a recovery point is moved to cold storage.
         */
        moveToColdStorageAfterDays?: number;
        /**
         * If the value is true, your backup plan transitions supported resources to archive (cold) storage tier in accordance with your lifecycle settings.
         */
        optInToArchiveForSupportedResources?: boolean;
    }

    export interface BackupPlanResourceType {
        /**
         * A list of backup options for each resource type.
         */
        advancedBackupSettings?: outputs.backup.BackupPlanAdvancedBackupSettingResourceType[];
        /**
         * The display name of a backup plan.
         */
        backupPlanName: string;
        /**
         * An array of `BackupRule` objects, each of which specifies a scheduled task that is used to back up a selection of resources.
         */
        backupPlanRule: outputs.backup.BackupPlanBackupRuleResourceType[];
    }

    export interface BackupSelectionConditionParameter {
        /**
         * The key in a key-value pair. For example, in the tag `Department: Accounting` , `Department` is the key.
         */
        conditionKey?: string;
        /**
         * The value in a key-value pair. For example, in the tag `Department: Accounting` , `Accounting` is the value.
         */
        conditionValue?: string;
    }

    export interface BackupSelectionConditionResourceType {
        /**
         * The key in a key-value pair. For example, in `"Department": "accounting"` , `"Department"` is the key.
         */
        conditionKey: string;
        /**
         * An operation, such as `STRINGEQUALS` , that is applied to a key-value pair used to filter resources in a selection.
         */
        conditionType: string;
        /**
         * The value in a key-value pair. For example, in `"Department": "accounting"` , `"accounting"` is the value.
         */
        conditionValue: string;
    }

    export interface BackupSelectionResourceType {
        /**
         * A list of conditions that you define to assign resources to your backup plans using tags. For example, `"StringEquals": { "ConditionKey": "aws:ResourceTag/CreatedByCryo", "ConditionValue": "true" },` . Condition operators are case sensitive.
         *
         * `Conditions` differs from `ListOfTags` as follows:
         *
         * - When you specify more than one condition, you only assign the resources that match ALL conditions (using AND logic).
         * - `Conditions` supports `StringEquals` , `StringLike` , `StringNotEquals` , and `StringNotLike` . `ListOfTags` only supports `StringEquals` .
         */
        conditions?: outputs.backup.BackupSelectionResourceTypeConditionsProperties;
        /**
         * The ARN of the IAM role that AWS Backup uses to authenticate when backing up the target resource; for example, `arn:aws:iam::123456789012:role/S3Access` .
         */
        iamRoleArn: string;
        /**
         * A list of conditions that you define to assign resources to your backup plans using tags. For example, `"StringEquals": { "ConditionKey": "aws:ResourceTag/CreatedByCryo", "ConditionValue": "true" },` . Condition operators are case sensitive.
         *
         * `ListOfTags` differs from `Conditions` as follows:
         *
         * - When you specify more than one condition, you assign all resources that match AT LEAST ONE condition (using OR logic).
         * - `ListOfTags` only supports `StringEquals` . `Conditions` supports `StringEquals` , `StringLike` , `StringNotEquals` , and `StringNotLike` .
         */
        listOfTags?: outputs.backup.BackupSelectionConditionResourceType[];
        /**
         * A list of Amazon Resource Names (ARNs) to exclude from a backup plan. The maximum number of ARNs is 500 without wildcards, or 30 ARNs with wildcards.
         *
         * If you need to exclude many resources from a backup plan, consider a different resource selection strategy, such as assigning only one or a few resource types or refining your resource selection using tags.
         */
        notResources?: string[];
        /**
         * An array of strings that contain Amazon Resource Names (ARNs) of resources to assign to a backup plan.
         */
        resources?: string[];
        /**
         * The display name of a resource selection document.
         */
        selectionName: string;
    }

    /**
     * A list of conditions that you define to assign resources to your backup plans using tags. For example, `"StringEquals": { "ConditionKey": "aws:ResourceTag/CreatedByCryo", "ConditionValue": "true" },` . Condition operators are case sensitive.
     *
     * `Conditions` differs from `ListOfTags` as follows:
     *
     * - When you specify more than one condition, you only assign the resources that match ALL conditions (using AND logic).
     * - `Conditions` supports `StringEquals` , `StringLike` , `StringNotEquals` , and `StringNotLike` . `ListOfTags` only supports `StringEquals` .
     */
    export interface BackupSelectionResourceTypeConditionsProperties {
        stringEquals?: outputs.backup.BackupSelectionConditionParameter[];
        stringLike?: outputs.backup.BackupSelectionConditionParameter[];
        stringNotEquals?: outputs.backup.BackupSelectionConditionParameter[];
        stringNotLike?: outputs.backup.BackupSelectionConditionParameter[];
    }

    export interface BackupVaultLockConfigurationType {
        /**
         * The AWS Backup Vault Lock configuration that specifies the number of days before the lock date. For example, setting `ChangeableForDays` to 30 on Jan. 1, 2022 at 8pm UTC will set the lock date to Jan. 31, 2022 at 8pm UTC.
         *
         * AWS Backup enforces a 72-hour cooling-off period before Vault Lock takes effect and becomes immutable. Therefore, you must set `ChangeableForDays` to 3 or greater.
         *
         * Before the lock date, you can delete Vault Lock from the vault using `DeleteBackupVaultLockConfiguration` or change the Vault Lock configuration using `PutBackupVaultLockConfiguration` . On and after the lock date, the Vault Lock becomes immutable and cannot be changed or deleted.
         *
         * If this parameter is not specified, you can delete Vault Lock from the vault using `DeleteBackupVaultLockConfiguration` or change the Vault Lock configuration using `PutBackupVaultLockConfiguration` at any time.
         */
        changeableForDays?: number;
        /**
         * The AWS Backup Vault Lock configuration that specifies the maximum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to destroy certain data after retaining it for four years (1460 days).
         *
         * If this parameter is not included, Vault Lock does not enforce a maximum retention period on the recovery points in the vault. If this parameter is included without a value, Vault Lock will not enforce a maximum retention period.
         *
         * If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or shorter than the maximum retention period. If the job's retention period is longer than that maximum retention period, then the vault fails the backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already saved in the vault prior to Vault Lock are not affected.
         */
        maxRetentionDays?: number;
        /**
         * The AWS Backup Vault Lock configuration that specifies the minimum retention period that the vault retains its recovery points. This setting can be useful if, for example, your organization's policies require you to retain certain data for at least seven years (2555 days).
         *
         * If this parameter is not specified, Vault Lock will not enforce a minimum retention period.
         *
         * If this parameter is specified, any backup or copy job to the vault must have a lifecycle policy with a retention period equal to or longer than the minimum retention period. If the job's retention period is shorter than that minimum retention period, then the vault fails that backup or copy job, and you should either modify your lifecycle settings or use a different vault. Recovery points already saved in the vault prior to Vault Lock are not affected.
         */
        minRetentionDays: number;
    }

    export interface BackupVaultNotificationObjectType {
        /**
         * An array of events that indicate the status of jobs to back up resources to the backup vault. For valid events, see [BackupVaultEvents](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_PutBackupVaultNotifications.html#API_PutBackupVaultNotifications_RequestSyntax) in the *AWS Backup API Guide* .
         */
        backupVaultEvents: string[];
        /**
         * An ARN that uniquely identifies an Amazon Simple Notification Service (Amazon SNS) topic; for example, `arn:aws:sns:us-west-2:111122223333:MyTopic` .
         */
        snsTopicArn: string;
    }

    export interface FrameworkControl {
        /**
         * A list of ParameterName and ParameterValue pairs.
         */
        controlInputParameters?: outputs.backup.FrameworkControlInputParameter[];
        /**
         * The name of a control. This name is between 1 and 256 characters.
         */
        controlName: string;
        /**
         * The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.
         */
        controlScope?: outputs.backup.FrameworkControlControlScopeProperties;
    }

    /**
     * The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.
     */
    export interface FrameworkControlControlScopeProperties {
        /**
         * The ID of the only AWS resource that you want your control scope to contain.
         */
        complianceResourceIds?: string[];
        /**
         * Describes whether the control scope includes one or more types of resources, such as `EFS` or `RDS`.
         */
        complianceResourceTypes?: string[];
        /**
         * Describes whether the control scope includes resources with one or more tags. Each tag is a key-value pair.
         */
        tags?: outputs.backup.FrameworkTag[];
    }

    export interface FrameworkControlInputParameter {
        /**
         * The name of a parameter, for example, `BackupPlanFrequency` .
         */
        parameterName: string;
        /**
         * The value of parameter, for example, `hourly` .
         */
        parameterValue: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface FrameworkTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key?: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * A structure that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports.
     */
    export interface ReportDeliveryChannelProperties {
        /**
         * A list of the format of your reports: CSV, JSON, or both. If not specified, the default format is CSV.
         */
        formats?: string[];
        /**
         * The unique name of the S3 bucket that receives your reports.
         */
        s3BucketName: string;
        /**
         * The prefix for where AWS Backup Audit Manager delivers your reports to Amazon S3. The prefix is this part of the following path: s3://your-bucket-name/prefix/Backup/us-west-2/year/month/day/report-name. If not specified, there is no prefix.
         */
        s3KeyPrefix?: string;
    }

    /**
     * Identifies the report template for the report. Reports are built using a report template.
     */
    export interface ReportSettingProperties {
        /**
         * The list of AWS accounts that a report covers.
         */
        accounts?: string[];
        /**
         * The Amazon Resource Names (ARNs) of the frameworks a report covers.
         */
        frameworkArns?: string[];
        /**
         * The list of AWS organization units that a report covers.
         */
        organizationUnits?: string[];
        /**
         * The list of AWS regions that a report covers.
         */
        regions?: string[];
        /**
         * Identifies the report template for the report. Reports are built using a report template. The report templates are: `BACKUP_JOB_REPORT | COPY_JOB_REPORT | RESTORE_JOB_REPORT`
         */
        reportTemplate: string;
    }

    export interface RestoreTestingPlanRestoreTestingRecoveryPointSelection {
        /**
         * Acceptable values include "LATEST_WITHIN_WINDOW" or "RANDOM_WITHIN_WINDOW"
         */
        algorithm: enums.backup.RestoreTestingPlanRestoreTestingRecoveryPointSelectionAlgorithm;
        /**
         * Accepted values include specific ARNs or list of selectors. Defaults to empty list if not listed.
         */
        excludeVaults?: string[];
        /**
         * Accepted values include wildcard ["*"] or by specific ARNs or ARN wilcard replacement ["arn:aws:backup:us-west-2:123456789012:backup-vault:asdf", ...] ["arn:aws:backup:*:*:backup-vault:asdf-*", ...]
         */
        includeVaults: string[];
        /**
         * These are the types of recovery points.
         *
         * Include `SNAPSHOT` to restore only snapshot recovery points; include `CONTINUOUS` to restore continuous recovery points (point in time restore / PITR); use both to restore either a snapshot or a continuous recovery point. The recovery point will be determined by the value for `Algorithm` .
         */
        recoveryPointTypes: enums.backup.RestoreTestingPlanRestoreTestingRecoveryPointType[];
        /**
         * Accepted values are integers from 1 to 365.
         */
        selectionWindowDays?: number;
    }

    export interface RestoreTestingSelectionKeyValue {
        /**
         * The tag key.
         */
        key: string;
        /**
         * The tag value.
         */
        value: string;
    }

    export interface RestoreTestingSelectionProtectedResourceConditions {
        /**
         * Filters the values of your tagged resources for only those resources that you tagged with the same value. Also called "exact matching."
         */
        stringEquals?: outputs.backup.RestoreTestingSelectionKeyValue[];
        /**
         * Filters the values of your tagged resources for only those resources that you tagged that do not have the same value. Also called "negated matching."
         */
        stringNotEquals?: outputs.backup.RestoreTestingSelectionKeyValue[];
    }

}

export namespace backupgateway {
}

export namespace batch {
    export interface ComputeEnvironmentComputeResources {
        /**
         * The allocation strategy to use for the compute resource if not enough instances of the best fitting instance type can be allocated. This might be because of availability of the instance type in the Region or [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) . For more information, see [Allocation strategies](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) in the *AWS Batch User Guide* .
         *
         * When updating a compute environment, changing the allocation strategy requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . `BEST_FIT` is not supported when updating a compute environment.
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified. 
         *
         * - **BEST_FIT (default)** - AWS Batch selects an instance type that best fits the needs of the jobs with a preference for the lowest-cost instance type. If additional instances of the selected instance type aren't available, AWS Batch waits for the additional instances to be available. If there aren't enough instances available, or if the user is reaching [Amazon EC2 service limits](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html) then additional jobs aren't run until the currently running jobs have completed. This allocation strategy keeps costs lower but can limit scaling. If you are using Spot Fleets with `BEST_FIT` then the Spot Fleet IAM role must be specified.
         * - **BEST_FIT_PROGRESSIVE** - AWS Batch will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types with a lower cost per unit vCPU. If additional instances of the previously selected instance types aren't available, AWS Batch will select new instance types.
         * - **SPOT_CAPACITY_OPTIMIZED** - AWS Batch will select one or more instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types that are less likely to be interrupted. This allocation strategy is only available for Spot Instance compute resources.
         * - **SPOT_PRICE_CAPACITY_OPTIMIZED** - The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price. This allocation strategy is only available for Spot Instance compute resources.
         *
         * > We recommend that you use `SPOT_PRICE_CAPACITY_OPTIMIZED` rather than `SPOT_CAPACITY_OPTIMIZED` in most instances.
         *
         * With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` , and `SPOT_PRICE_CAPACITY_OPTIMIZED` allocation strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to go above `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
         */
        allocationStrategy?: string;
        /**
         * The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, the Spot price must be less than 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. For most use cases, we recommend leaving this field empty.
         *
         * When updating a compute environment, changing the bid percentage requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
         */
        bidPercentage?: number;
        /**
         * The desired number of vCPUS in the compute environment. AWS Batch modifies this value between the minimum and maximum values based on job queue demand.
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > AWS Batch doesn't support changing the desired number of vCPUs of an existing compute environment. Don't specify this parameter for compute environments using Amazon EKS clusters. > When you update the `desiredvCpus` setting, the value must be between the `minvCpus` and `maxvCpus` values.
         * > 
         * > Additionally, the updated `desiredvCpus` value must be greater than or equal to the current `desiredvCpus` value. For more information, see [Troubleshooting AWS Batch](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#error-desired-vcpus-update) in the *AWS Batch User Guide* .
         */
        desiredvCpus?: number;
        /**
         * Provides information used to select Amazon Machine Images (AMIs) for Amazon EC2 instances in the compute environment. If `Ec2Configuration` isn't specified, the default is `ECS_AL2` .
         *
         * When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . To remove the Amazon EC2 configuration and any custom AMI ID specified in `imageIdOverride` , set this value to an empty string.
         *
         * One or two values can be provided.
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
         */
        ec2Configuration?: outputs.batch.ComputeEnvironmentEc2ConfigurationObject[];
        /**
         * The Amazon EC2 key pair that's used for instances launched in the compute environment. You can use this key pair to log in to your instances with SSH. To remove the Amazon EC2 key pair, set this value to an empty string.
         *
         * When updating a compute environment, changing the Amazon EC2 key pair requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
         */
        ec2KeyPair?: string;
        /**
         * The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter is overridden by the `imageIdOverride` member of the `Ec2Configuration` structure. To remove the custom AMI ID and use the default AMI ID, set this value to an empty string.
         *
         * When updating a compute environment, changing the AMI ID requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        imageId?: string;
        /**
         * The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. Required for Amazon EC2 instances. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, `*ecsInstanceRole*` or `arn:aws:iam:: *<aws_account_id>* :instance-profile/ *ecsInstanceRole*` . For more information, see [Amazon ECS instance role](https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html) in the *AWS Batch User Guide* .
         *
         * When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
         */
        instanceRole?: string;
        /**
         * The instances types that can be launched. You can specify instance families to launch any instance type within those families (for example, `c5` or `p3` ), or you can specify specific sizes within a family (such as `c5.8xlarge` ). You can also choose `optimal` to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues.
         *
         * When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > When you create a compute environment, the instance types that you select for the compute environment must share the same architecture. For example, you can't mix x86 and ARM instances in the same compute environment. > Currently, `optimal` uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5, and R5 instance families are used.
         */
        instanceTypes?: string[];
        /**
         * The launch template to use for your compute resources. Any other compute resource parameters that you specify in a [CreateComputeEnvironment](https://docs.aws.amazon.com/batch/latest/APIReference/API_CreateComputeEnvironment.html) API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see [Launch Template Support](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the ** . Removing the launch template from a compute environment will not remove the AMI specified in the launch template. In order to update the AMI specified in a launch template, the `updateToLatestImageVersion` parameter must be set to `true` .
         *
         * When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the ** .
         *
         * > This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
         */
        launchTemplate?: outputs.batch.ComputeEnvironmentLaunchTemplateSpecification;
        /**
         * The maximum number of Amazon EC2 vCPUs that an environment can reach.
         *
         * > With `BEST_FIT_PROGRESSIVE` , `SPOT_CAPACITY_OPTIMIZED` and `SPOT_PRICE_CAPACITY_OPTIMIZED` (recommended) strategies using On-Demand or Spot Instances, and the `BEST_FIT` strategy using Spot Instances, AWS Batch might need to exceed `maxvCpus` to meet your capacity requirements. In this event, AWS Batch never exceeds `maxvCpus` by more than a single instance.
         */
        maxvCpus: number;
        /**
         * The minimum number of vCPUs that an environment should maintain (even if the compute environment is `DISABLED` ).
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
         */
        minvCpus?: number;
        /**
         * The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the *Amazon EC2 User Guide for Linux Instances* .
         *
         * When updating a compute environment, changing the placement group requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it.
         */
        placementGroup?: string;
        /**
         * The Amazon EC2 security groups that are associated with instances launched in the compute environment. This parameter is required for Fargate compute resources, where it can contain up to 5 security groups. For Fargate compute resources, providing an empty list is handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the security groups from the compute resource.
         *
         * When updating a compute environment, changing the Amazon EC2 security groups requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         */
        securityGroupIds?: string[];
        /**
         * The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a `SPOT` compute environment. This role is required if the allocation strategy set to `BEST_FIT` or if the allocation strategy isn't specified. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't specify it. > To tag your Spot Instances on creation, the Spot Fleet IAM role specified here must use the newer *AmazonEC2SpotFleetTaggingRole* managed policy. The previously recommended *AmazonEC2SpotFleetRole* managed policy doesn't have the required permissions to tag Spot Instances. For more information, see [Spot instances not tagged on creation](https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#spot-instance-no-tag) in the *AWS Batch User Guide* .
         */
        spotIamFleetRole?: string;
        /**
         * The VPC subnets where the compute resources are launched. Fargate compute resources can contain up to 16 subnets. For Fargate compute resources, providing an empty list will be handled as if this parameter wasn't specified and no change is made. For Amazon EC2 compute resources, providing an empty list removes the VPC subnets from the compute resource. For more information, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the *Amazon VPC User Guide* .
         *
         * When updating a compute environment, changing the VPC subnets requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         *
         * > AWS Batch on Amazon EC2 and AWS Batch on Amazon EKS support Local Zones. For more information, see [Local Zones](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-local-zones) in the *Amazon EC2 User Guide for Linux Instances* , [Amazon EKS and AWS Local Zones](https://docs.aws.amazon.com/eks/latest/userguide/local-zones.html) in the *Amazon EKS User Guide* and [Amazon ECS clusters in Local Zones, Wavelength Zones, and AWS Outposts](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-regions-zones.html#clusters-local-zones) in the *Amazon ECS Developer Guide* .
         * > 
         * > AWS Batch on Fargate doesn't currently support Local Zones.
         */
        subnets: string[];
        /**
         * A key-value pair to associate with a resource.
         */
        tags?: {[key: string]: string};
        /**
         * The type of compute environment: `EC2` , `SPOT` , `FARGATE` , or `FARGATE_SPOT` . For more information, see [Compute environments](https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html) in the *AWS Batch User Guide* .
         *
         * If you choose `SPOT` , you must also specify an Amazon EC2 Spot Fleet role with the `spotIamFleetRole` parameter. For more information, see [Amazon EC2 spot fleet role](https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html) in the *AWS Batch User Guide* .
         *
         * When updating compute environment, changing the type of a compute environment requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         *
         * When updating the type of a compute environment, changing between `EC2` and `SPOT` or between `FARGATE` and `FARGATE_SPOT` will initiate an infrastructure update, but if you switch between `EC2` and `FARGATE` , AWS CloudFormation will create a new compute environment.
         */
        type: string;
        /**
         * Specifies whether the AMI ID is updated to the latest one that's supported by AWS Batch when the compute environment has an infrastructure update. The default value is `false` .
         *
         * > An AMI ID can either be specified in the `imageId` or `imageIdOverride` parameters or be determined by the launch template that's specified in the `launchTemplate` parameter. If an AMI ID is specified any of these ways, this parameter is ignored. For more information about to update AMI IDs during an infrastructure update, see [Updating the AMI ID](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html#updating-compute-environments-ami) in the *AWS Batch User Guide* . 
         *
         * When updating a compute environment, changing this setting requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* .
         */
        updateToLatestImageVersion?: boolean;
    }

    export interface ComputeEnvironmentEc2ConfigurationObject {
        /**
         * The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the `imageId` set in the `computeResource` object.
         *
         * > The AMI that you choose for a compute environment must match the architecture of the instance types that you intend to use for that compute environment. For example, if your compute environment uses A1 instance types, the compute resource AMI that you choose must support ARM instances. Amazon ECS vends both x86 and ARM versions of the Amazon ECS-optimized Amazon Linux 2 AMI. For more information, see [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#ecs-optimized-ami-linux-variants.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        imageIdOverride?: string;
        /**
         * The Kubernetes version for the compute environment. If you don't specify a value, the latest version that AWS Batch supports is used.
         */
        imageKubernetesVersion?: string;
        /**
         * The image type to match with the instance type to select an AMI. The supported values are different for `ECS` and `EKS` resources.
         *
         * - **ECS** - If the `imageIdOverride` parameter isn't specified, then a recent [Amazon ECS-optimized Amazon Linux 2 AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) ( `ECS_AL2` ) is used. If a new image type is specified in an update, but neither an `imageId` nor a `imageIdOverride` parameter is specified, then the latest Amazon ECS optimized AMI for that image type that's supported by AWS Batch is used.
         *
         * - **ECS_AL2** - [Amazon Linux 2](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#al2ami) : Default for all non-GPU instance families.
         * - **ECS_AL2_NVIDIA** - [Amazon Linux 2 (GPU)](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#gpuami) : Default for all GPU instance families (for example `P4` and `G4` ) and can be used for all non AWS Graviton-based instance types.
         * - **ECS_AL2023** - [Amazon Linux 2023](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) : AWS Batch supports Amazon Linux 2023.
         *
         * > Amazon Linux 2023 does not support `A1` instances.
         * - **ECS_AL1** - [Amazon Linux](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html#alami) . Amazon Linux has reached the end-of-life of standard support. For more information, see [Amazon Linux AMI](https://docs.aws.amazon.com/amazon-linux-ami/) .
         * - **EKS** - If the `imageIdOverride` parameter isn't specified, then a recent [Amazon EKS-optimized Amazon Linux AMI](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) ( `EKS_AL2` ) is used. If a new image type is specified in an update, but neither an `imageId` nor a `imageIdOverride` parameter is specified, then the latest Amazon EKS optimized AMI for that image type that AWS Batch supports is used.
         *
         * - **EKS_AL2** - [Amazon Linux 2](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) : Default for all non-GPU instance families.
         * - **EKS_AL2_NVIDIA** - [Amazon Linux 2 (accelerated)](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html) : Default for all GPU instance families (for example, `P4` and `G4` ) and can be used for all non AWS Graviton-based instance types.
         */
        imageType: string;
    }

    export interface ComputeEnvironmentEksConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the Amazon EKS cluster. An example is `arn: *aws* :eks: *us-east-1* : *123456789012* :cluster/ *ClusterForBatch*` .
         */
        eksClusterArn: string;
        /**
         * The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace. The value can't left empty or null. It must be fewer than 64 characters long, can't be set to `default` , can't start with " `kube-` ," and must match this regular expression: `^[a-z0-9]([-a-z0-9]*[a-z0-9])?$` . For more information, see [Namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) in the Kubernetes documentation.
         */
        kubernetesNamespace: string;
    }

    export interface ComputeEnvironmentLaunchTemplateSpecification {
        /**
         * The ID of the launch template.
         */
        launchTemplateId?: string;
        /**
         * The name of the launch template.
         */
        launchTemplateName?: string;
        /**
         * The version number of the launch template, `$Latest` , or `$Default` .
         *
         * If the value is `$Latest` , the latest version of the launch template is used. If the value is `$Default` , the default version of the launch template is used.
         *
         * > If the AMI ID that's used in a compute environment is from the launch template, the AMI isn't changed when the compute environment is updated. It's only changed if the `updateToLatestImageVersion` parameter for the compute environment is set to `true` . During an infrastructure update, if either `$Latest` or `$Default` is specified, AWS Batch re-evaluates the launch template version, and it might use a different version of the launch template. This is the case even if the launch template isn't specified in the update. When updating a compute environment, changing the launch template requires an infrastructure update of the compute environment. For more information, see [Updating compute environments](https://docs.aws.amazon.com/batch/latest/userguide/updating-compute-environments.html) in the *AWS Batch User Guide* . 
         *
         * Default: `$Default` .
         */
        version?: string;
    }

    export interface ComputeEnvironmentUpdatePolicy {
        /**
         * Specifies the job timeout (in minutes) when the compute environment infrastructure is updated. The default value is 30.
         */
        jobExecutionTimeoutMinutes?: number;
        /**
         * Specifies whether jobs are automatically terminated when the computer environment infrastructure is updated. The default value is `false` .
         */
        terminateJobsOnUpdate?: boolean;
    }

    export interface JobDefinitionAuthorizationConfig {
        /**
         * The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the `EFSVolumeConfiguration` must either be omitted or set to `/` which enforces the path set on the EFS access point. If an access point is used, transit encryption must be enabled in the `EFSVolumeConfiguration` . For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide* .
         */
        accessPointId?: string;
        /**
         * Whether or not to use the AWS Batch job IAM role defined in a job definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the `EFSVolumeConfiguration` . If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html#efs-volume-accesspoints) in the *AWS Batch User Guide* . EFS IAM authorization requires that `TransitEncryption` be `ENABLED` and that a `JobRoleArn` is specified.
         */
        iam?: string;
    }

    export interface JobDefinitionContainerProperties {
        /**
         * The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
         */
        command?: string[];
        /**
         * The environment variables to pass to a container. This parameter maps to `Env` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
         */
        environment?: outputs.batch.JobDefinitionEnvironment[];
        /**
         * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
         */
        ephemeralStorage?: outputs.batch.JobDefinitionEphemeralStorage;
        /**
         * The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
         */
        executionRoleArn?: string;
        /**
         * The platform configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
         */
        fargatePlatformConfiguration?: outputs.batch.JobDefinitionFargatePlatformConfiguration;
        /**
         * Required. The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with `*repository-url* / *image* : *tag*` . It can be 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), underscores (_), colons (:), periods (.), forward slashes (/), and number signs (#). This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `IMAGE` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * > Docker image architecture must match the processor architecture of the compute resources that they're scheduled on. For example, ARM-based Docker images can only run on ARM-based compute resources. 
         *
         * - Images in Amazon ECR Public repositories use the full `registry/repository[:tag]` or `registry/repository[@digest]` naming conventions. For example, `public.ecr.aws/ *registry_alias* / *my-web-app* : *latest*` .
         * - Images in Amazon ECR repositories use the full registry and repository URI (for example, `123456789012.dkr.ecr.<region-name>.amazonaws.com/<repository-name>` ).
         * - Images in official repositories on Docker Hub use a single name (for example, `ubuntu` or `mongo` ).
         * - Images in other repositories on Docker Hub are qualified with an organization name (for example, `amazon/amazon-ecs-agent` ).
         * - Images in other online repositories are qualified further by a domain name (for example, `quay.io/assemblyline/ubuntu` ).
         */
        image: string;
        /**
         * The instance type to use for a multi-node parallel job. All node groups in a multi-node parallel job must use the same instance type.
         *
         * > This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
         */
        instanceType?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions. For more information, see [IAM roles for tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        jobRoleArn?: string;
        /**
         * Linux-specific modifications that are applied to the container, such as details for device mappings.
         */
        linuxParameters?: outputs.batch.JobDefinitionLinuxParameters;
        /**
         * The log configuration specification for the container.
         *
         * This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . By default, containers use the same logging driver that the Docker daemon uses. However the container might use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
         *
         * > AWS Batch currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-jobdefinition-containerproperties-logconfiguration.html) data type). 
         *
         * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
         *
         * > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        logConfiguration?: outputs.batch.JobDefinitionLogConfiguration;
        /**
         * This parameter is deprecated, use `resourceRequirements` to specify the memory requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs that run on Amazon EC2 resources, it specifies the memory hard limit (in MiB) for a container. If your container attempts to exceed the specified number, it's terminated. You must specify at least 4 MiB of memory for a job using this parameter. The memory hard limit can be specified in several places. It must be specified for each node at least once.
         */
        memory?: number;
        /**
         * The mount points for data volumes in your container. This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--volume` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         */
        mountPoints?: outputs.batch.JobDefinitionMountPoints[];
        /**
         * The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
         */
        networkConfiguration?: outputs.batch.JobDefinitionNetworkConfiguration;
        /**
         * When this parameter is true, the container is given elevated permissions on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The default value is false.
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided, or specified as false.
         */
        privileged?: boolean;
        /**
         * When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--read-only` option to `docker run` .
         */
        readonlyRootFilesystem?: boolean;
        /**
         * The private repository authentication credentials to use.
         */
        repositoryCredentials?: outputs.batch.JobDefinitionRepositoryCredentials;
        /**
         * The type and amount of resources to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
         */
        resourceRequirements?: outputs.batch.JobDefinitionResourceRequirement[];
        /**
         * An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
         */
        runtimePlatform?: outputs.batch.JobDefinitionRuntimePlatform;
        /**
         * The secrets for the container. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
         */
        secrets?: outputs.batch.JobDefinitionSecret[];
        /**
         * A list of `ulimits` to set in the container. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
         */
        ulimits?: outputs.batch.JobDefinitionUlimit[];
        /**
         * The user name to use inside the container. This parameter maps to `User` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--user` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         */
        user?: string;
        /**
         * This parameter is deprecated, use `resourceRequirements` to specify the vCPU requirements for the job definition. It's not supported for jobs running on Fargate resources. For jobs running on Amazon EC2 resources, it specifies the number of vCPUs reserved for the job.
         *
         * Each vCPU is equivalent to 1,024 CPU shares. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . The number of vCPUs must be specified but can be specified in several places. You must specify it at least once for each node.
         */
        vcpus?: number;
        /**
         * A list of data volumes used in a job.
         */
        volumes?: outputs.batch.JobDefinitionVolumes[];
    }

    export interface JobDefinitionDevice {
        /**
         * The path inside the container that's used to expose the host device. By default, the `hostPath` value is used.
         */
        containerPath?: string;
        /**
         * The path for the device on the host container instance.
         */
        hostPath?: string;
        /**
         * The explicit permissions to provide to the container for the device. By default, the container has permissions for `read` , `write` , and `mknod` for the device.
         */
        permissions?: string[];
    }

    export interface JobDefinitionEcsProperties {
        /**
         * An object that contains the properties for the Amazon ECS task definition of a job.
         *
         * > This object is currently limited to one element.
         */
        taskProperties: outputs.batch.JobDefinitionEcsTaskProperties[];
    }

    export interface JobDefinitionEcsTaskProperties {
        /**
         * This object is a list of containers.
         */
        containers?: outputs.batch.JobDefinitionTaskContainerProperties[];
        /**
         * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate .
         */
        ephemeralStorage?: outputs.batch.JobDefinitionEphemeralStorage;
        /**
         * The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role. For more information, see [AWS Batch execution IAM role](https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html) in the *AWS Batch User Guide* .
         */
        executionRoleArn?: string;
        /**
         * The IPC resource namespace to use for the containers in the task. The valid values are `host` , `task` , or `none` .
         *
         * If `host` is specified, all containers within the tasks that specified the `host` IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance.
         *
         * If `task` is specified, all containers within the specified `task` share the same IPC resources.
         *
         * If `none` is specified, the IPC resources within the containers of a task are private, and are not shared with other containers in a task or on the container instance.
         *
         * If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see [IPC settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#ipc-settings---ipc) in the Docker run reference.
         */
        ipcMode?: string;
        /**
         * The network configuration for jobs that are running on Fargate resources. Jobs that are running on Amazon EC2 resources must not specify this parameter.
         */
        networkConfiguration?: outputs.batch.JobDefinitionNetworkConfiguration;
        /**
         * The process namespace to use for the containers in the task. The valid values are `host` or `task` . For example, monitoring sidecars might need `pidMode` to access information about other containers running in the same task.
         *
         * If `host` is specified, all containers within the tasks that specified the `host` PID mode on the same container instance share the process namespace with the host Amazon EC2 instance.
         *
         * If `task` is specified, all containers within the specified task share the same process namespace.
         *
         * If no value is specified, the default is a private namespace for each container. For more information, see [PID settings](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#pid-settings---pid) in the Docker run reference.
         */
        pidMode?: string;
        /**
         * The Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the `LATEST` platform version is used by default. This uses a recent, approved version of the Fargate platform for compute resources. For more information, see [AWS Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        platformVersion?: string;
        /**
         * An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
         */
        runtimePlatform?: outputs.batch.JobDefinitionRuntimePlatform;
        /**
         * The Amazon Resource Name (ARN) that's associated with the Amazon ECS task.
         *
         * > This is object is comparable to [ContainerProperties:jobRoleArn](https://docs.aws.amazon.com/batch/latest/APIReference/API_ContainerProperties.html) .
         */
        taskRoleArn?: string;
        /**
         * A list of volumes that are associated with the job.
         */
        volumes?: outputs.batch.JobDefinitionVolumes[];
    }

    export interface JobDefinitionEfsVolumeConfiguration {
        /**
         * The authorization configuration details for the Amazon EFS file system.
         */
        authorizationConfig?: outputs.batch.JobDefinitionAuthorizationConfig;
        /**
         * The Amazon EFS file system ID to use.
         */
        fileSystemId: string;
        /**
         * The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume is used instead. Specifying `/` has the same effect as omitting this parameter. The maximum length is 4,096 characters.
         *
         * > If an EFS access point is specified in the `authorizationConfig` , the root directory parameter must either be omitted or set to `/` , which enforces the path set on the Amazon EFS access point.
         */
        rootDirectory?: string;
        /**
         * Determines whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of `DISABLED` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide* .
         */
        transitEncryption?: string;
        /**
         * The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you don't specify a transit encryption port, it uses the port selection strategy that the Amazon EFS mount helper uses. The value must be between 0 and 65,535. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide* .
         */
        transitEncryptionPort?: number;
    }

    export interface JobDefinitionEksContainer {
        /**
         * An array of arguments to the entrypoint. If this isn't specified, the `CMD` of the container image is used. This corresponds to the `args` member in the [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) portion of the [Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/) in Kubernetes. Environment variable references are expanded using the container's environment.
         *
         * If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` , and the resulting string isn't expanded. For example, `$$(VAR_NAME)` is passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. For more information, see [Dockerfile reference: CMD](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) and [Define a command and arguments for a pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) in the *Kubernetes documentation* .
         */
        args?: string[];
        /**
         * The entrypoint for the container. This isn't run within a shell. If this isn't specified, the `ENTRYPOINT` of the container image is used. Environment variable references are expanded using the container's environment.
         *
         * If the referenced environment variable doesn't exist, the reference in the command isn't changed. For example, if the reference is to " `$(NAME1)` " and the `NAME1` environment variable doesn't exist, the command string will remain " `$(NAME1)` ." `$$` is replaced with `$` and the resulting string isn't expanded. For example, `$$(VAR_NAME)` will be passed as `$(VAR_NAME)` whether or not the `VAR_NAME` environment variable exists. The entrypoint can't be updated. For more information, see [ENTRYPOINT](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint) in the *Dockerfile reference* and [Define a command and arguments for a container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/) and [Entrypoint](https://docs.aws.amazon.com/https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#entrypoint) in the *Kubernetes documentation* .
         */
        command?: string[];
        /**
         * The environment variables to pass to a container.
         *
         * > Environment variables cannot start with " `AWS_BATCH` ". This naming convention is reserved for variables that AWS Batch sets.
         */
        env?: outputs.batch.JobDefinitionEksContainerEnvironmentVariable[];
        /**
         * The Docker image used to start the container.
         */
        image: string;
        /**
         * The image pull policy for the container. Supported values are `Always` , `IfNotPresent` , and `Never` . This parameter defaults to `IfNotPresent` . However, if the `:latest` tag is specified, it defaults to `Always` . For more information, see [Updating images](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/containers/images/#updating-images) in the *Kubernetes documentation* .
         */
        imagePullPolicy?: string;
        /**
         * The name of the container. If the name isn't specified, the default name " `Default` " is used. Each container in a pod must have a unique name.
         */
        name?: string;
        /**
         * The type and amount of resources to assign to a container. The supported resources include `memory` , `cpu` , and `nvidia.com/gpu` . For more information, see [Resource management for pods and containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the *Kubernetes documentation* .
         */
        resources?: outputs.batch.JobDefinitionEksContainerResourceRequirements;
        /**
         * The security context for a job. For more information, see [Configure a security context for a pod or container](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) in the *Kubernetes documentation* .
         */
        securityContext?: outputs.batch.JobDefinitionEksContainerSecurityContext;
        /**
         * The volume mounts for the container. AWS Batch supports `emptyDir` , `hostPath` , and `secret` volume types. For more information about volumes and volume mounts in Kubernetes, see [Volumes](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/) in the *Kubernetes documentation* .
         */
        volumeMounts?: outputs.batch.JobDefinitionEksContainerVolumeMount[];
    }

    export interface JobDefinitionEksContainerEnvironmentVariable {
        /**
         * The name of the environment variable.
         */
        name: string;
        /**
         * The value of the environment variable.
         */
        value?: string;
    }

    export interface JobDefinitionEksContainerResourceRequirements {
        /**
         * The type and quantity of the resources to reserve for the container. The values vary based on the `name` that's specified. Resources can be requested using either the `limits` or the `requests` objects.
         *
         * - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
         *
         * > To maximize your resource utilization, provide your jobs with as much memory as possible for the specific instance type that you are using. To learn how, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
         * - **cpu** - The number of CPUs that's reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both places, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
         * - **nvidia.com/gpu** - The number of GPUs that's reserved for the container. Values must be a whole integer. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both places, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
         */
        limits?: any;
        /**
         * The type and quantity of the resources to request for the container. The values vary based on the `name` that's specified. Resources can be requested by using either the `limits` or the `requests` objects.
         *
         * - **memory** - The memory hard limit (in MiB) for the container, using whole integers, with a "Mi" suffix. If your container attempts to exceed the memory specified, the container is terminated. You must specify at least 4 MiB of memory for a job. `memory` can be specified in `limits` , `requests` , or both. If `memory` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
         *
         * > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* .
         * - **cpu** - The number of CPUs that are reserved for the container. Values must be an even multiple of `0.25` . `cpu` can be specified in `limits` , `requests` , or both. If `cpu` is specified in both, then the value that's specified in `limits` must be at least as large as the value that's specified in `requests` .
         * - **nvidia.com/gpu** - The number of GPUs that are reserved for the container. Values must be a whole integer. `nvidia.com/gpu` can be specified in `limits` , `requests` , or both. If `nvidia.com/gpu` is specified in both, then the value that's specified in `limits` must be equal to the value that's specified in `requests` .
         */
        requests?: any;
    }

    export interface JobDefinitionEksContainerSecurityContext {
        /**
         * Whether or not a container or a Kubernetes pod is allowed to gain more privileges than its parent process. The default value is `false` .
         */
        allowPrivilegeEscalation?: boolean;
        /**
         * When this parameter is `true` , the container is given elevated permissions on the host container instance. The level of permissions are similar to the `root` user permissions. The default value is `false` . This parameter maps to `privileged` policy in the [Privileged pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#privileged) in the *Kubernetes documentation* .
         */
        privileged?: boolean;
        /**
         * When this parameter is `true` , the container is given read-only access to its root file system. The default value is `false` . This parameter maps to `ReadOnlyRootFilesystem` policy in the [Volumes and file systems pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#volumes-and-file-systems) in the *Kubernetes documentation* .
         */
        readOnlyRootFilesystem?: boolean;
        /**
         * When this parameter is specified, the container is run as the specified group ID ( `gid` ). If this parameter isn't specified, the default is the group that's specified in the image metadata. This parameter maps to `RunAsGroup` and `MustRunAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
         */
        runAsGroup?: number;
        /**
         * When this parameter is specified, the container is run as a user with a `uid` other than 0. If this parameter isn't specified, so such rule is enforced. This parameter maps to `RunAsUser` and `MustRunAsNonRoot` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
         */
        runAsNonRoot?: boolean;
        /**
         * When this parameter is specified, the container is run as the specified user ID ( `uid` ). If this parameter isn't specified, the default is the user that's specified in the image metadata. This parameter maps to `RunAsUser` and `MustRanAs` policy in the [Users and groups pod security policies](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#users-and-groups) in the *Kubernetes documentation* .
         */
        runAsUser?: number;
    }

    export interface JobDefinitionEksContainerVolumeMount {
        /**
         * The path on the container where the volume is mounted.
         */
        mountPath?: string;
        /**
         * The name the volume mount. This must match the name of one of the volumes in the pod.
         */
        name?: string;
        /**
         * If this value is `true` , the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is `false` .
         */
        readOnly?: boolean;
    }

    export interface JobDefinitionEksEmptyDir {
        /**
         * The medium to store the volume. The default value is an empty string, which uses the storage of the node.
         *
         * - **""** - *(Default)* Use the disk storage of the node.
         * - **"Memory"** - Use the `tmpfs` volume that's backed by the RAM of the node. Contents of the volume are lost when the node reboots, and any storage on the volume counts against the container's memory limit.
         */
        medium?: string;
        /**
         * The maximum size of the volume. By default, there's no maximum size defined.
         */
        sizeLimit?: string;
    }

    export interface JobDefinitionEksHostPath {
        /**
         * The path of the file or directory on the host to mount into containers on the pod.
         */
        path?: string;
    }

    export interface JobDefinitionEksProperties {
        /**
         * The properties for the Kubernetes pod resources of a job.
         */
        podProperties?: outputs.batch.JobDefinitionPodProperties;
    }

    export interface JobDefinitionEksSecret {
        /**
         * Specifies whether the secret or the secret's keys must be defined.
         */
        optional?: boolean;
        /**
         * The name of the secret. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the *Kubernetes documentation* .
         */
        secretName: string;
    }

    export interface JobDefinitionEksVolume {
        /**
         * Specifies the configuration of a Kubernetes `emptyDir` volume. For more information, see [emptyDir](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) in the *Kubernetes documentation* .
         */
        emptyDir?: outputs.batch.JobDefinitionEksEmptyDir;
        /**
         * Specifies the configuration of a Kubernetes `hostPath` volume. For more information, see [hostPath](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) in the *Kubernetes documentation* .
         */
        hostPath?: outputs.batch.JobDefinitionEksHostPath;
        /**
         * The name of the volume. The name must be allowed as a DNS subdomain name. For more information, see [DNS subdomain names](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names) in the *Kubernetes documentation* .
         */
        name: string;
        /**
         * Specifies the configuration of a Kubernetes `secret` volume. For more information, see [secret](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/storage/volumes/#secret) in the *Kubernetes documentation* .
         */
        secret?: outputs.batch.JobDefinitionEksSecret;
    }

    export interface JobDefinitionEnvironment {
        /**
         * The name of the environment variable.
         */
        name?: string;
        /**
         * The value of the environment variable.
         */
        value?: string;
    }

    export interface JobDefinitionEphemeralStorage {
        /**
         * The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
         */
        sizeInGiB: number;
    }

    export interface JobDefinitionEvaluateOnExit {
        /**
         * Specifies the action to take if all of the specified conditions ( `onStatusReason` , `onReason` , and `onExitCode` ) are met. The values aren't case sensitive.
         */
        action: string;
        /**
         * Contains a glob pattern to match against the decimal representation of the `ExitCode` returned for a job. The pattern can be up to 512 characters long. It can contain only numbers, and can end with an asterisk (*) so that only the start of the string needs to be an exact match.
         *
         * The string can contain up to 512 characters.
         */
        onExitCode?: string;
        /**
         * Contains a glob pattern to match against the `Reason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white space (including spaces and tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
         */
        onReason?: string;
        /**
         * Contains a glob pattern to match against the `StatusReason` returned for a job. The pattern can contain up to 512 characters. It can contain letters, numbers, periods (.), colons (:), and white spaces (including spaces or tabs). It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.
         */
        onStatusReason?: string;
    }

    export interface JobDefinitionFargatePlatformConfiguration {
        /**
         * The AWS Fargate platform version where the jobs are running. A platform version is specified only for jobs that are running on Fargate resources. If one isn't specified, the `LATEST` platform version is used by default. This uses a recent, approved version of the AWS Fargate platform for compute resources. For more information, see [AWS Fargate platform versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        platformVersion?: string;
    }

    export interface JobDefinitionImagePullSecret {
        /**
         * Provides a unique identifier for the `ImagePullSecret` . This object is required when `EksPodProperties$imagePullSecrets` is used.
         */
        name: string;
    }

    export interface JobDefinitionLinuxParameters {
        /**
         * Any of the host devices to expose to the container. This parameter maps to `Devices` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--device` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
         */
        devices?: outputs.batch.JobDefinitionDevice[];
        /**
         * If true, run an `init` process inside the container that forwards signals and reaps processes. This parameter maps to the `--init` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
         */
        initProcessEnabled?: boolean;
        /**
         * The total amount of swap memory (in MiB) a container can use. This parameter is translated to the `--memory-swap` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) where the value is the sum of the container memory plus the `maxSwap` value. For more information, see [`--memory-swap` details](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/resource_constraints/#--memory-swap-details) in the Docker documentation.
         *
         * If a `maxSwap` value of `0` is specified, the container doesn't use swap. Accepted values are `0` or any positive integer. If the `maxSwap` parameter is omitted, the container doesn't use the swap configuration for the container instance that it's running on. A `maxSwap` value must be set for the `swappiness` parameter to be used.
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
         */
        maxSwap?: number;
        /**
         * The value for the size (in MiB) of the `/dev/shm` volume. This parameter maps to the `--shm-size` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
         */
        sharedMemorySize?: number;
        /**
         * You can use this parameter to tune a container's memory swappiness behavior. A `swappiness` value of `0` causes swapping to not occur unless absolutely necessary. A `swappiness` value of `100` causes pages to be swapped aggressively. Valid values are whole numbers between `0` and `100` . If the `swappiness` parameter isn't specified, a default value of `60` is used. If a value isn't specified for `maxSwap` , then this parameter is ignored. If `maxSwap` is set to 0, the container doesn't use swap. This parameter maps to the `--memory-swappiness` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * Consider the following when you use a per-container swap configuration.
         *
         * - Swap space must be enabled and allocated on the container instance for the containers to use.
         *
         * > By default, the Amazon ECS optimized AMIs don't have swap enabled. You must enable swap on the instance to use this feature. For more information, see [Instance store swap volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-store-swap-volumes.html) in the *Amazon EC2 User Guide for Linux Instances* or [How do I allocate memory to work as swap space in an Amazon EC2 instance by using a swap file?](https://docs.aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/)
         * - The swap space parameters are only supported for job definitions using EC2 resources.
         * - If the `maxSwap` and `swappiness` parameters are omitted from a job definition, each container has a default `swappiness` value of 60. Moreover, the total swap usage is limited to two times the memory reservation of the container.
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide it for these jobs.
         */
        swappiness?: number;
        /**
         * The container path, mount options, and size (in MiB) of the `tmpfs` mount. This parameter maps to the `--tmpfs` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources. Don't provide this parameter for this resource type.
         */
        tmpfs?: outputs.batch.JobDefinitionTmpfs[];
    }

    export interface JobDefinitionLogConfiguration {
        /**
         * The log driver to use for the container. The valid values that are listed for this parameter are log drivers that the Amazon ECS container agent can communicate with by default.
         *
         * The supported log drivers are `awslogs` , `fluentd` , `gelf` , `json-file` , `journald` , `logentries` , `syslog` , and `splunk` .
         *
         * > Jobs that are running on Fargate resources are restricted to the `awslogs` and `splunk` log drivers. 
         *
         * - **awslogs** - Specifies the Amazon CloudWatch Logs logging driver. For more information, see [Using the awslogs log driver](https://docs.aws.amazon.com/batch/latest/userguide/using_awslogs.html) in the *AWS Batch User Guide* and [Amazon CloudWatch Logs logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/awslogs/) in the Docker documentation.
         * - **fluentd** - Specifies the Fluentd logging driver. For more information including usage and options, see [Fluentd logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/fluentd/) in the *Docker documentation* .
         * - **gelf** - Specifies the Graylog Extended Format (GELF) logging driver. For more information including usage and options, see [Graylog Extended Format logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/gelf/) in the *Docker documentation* .
         * - **journald** - Specifies the journald logging driver. For more information including usage and options, see [Journald logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/journald/) in the *Docker documentation* .
         * - **json-file** - Specifies the JSON file logging driver. For more information including usage and options, see [JSON File logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/json-file/) in the *Docker documentation* .
         * - **splunk** - Specifies the Splunk logging driver. For more information including usage and options, see [Splunk logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/splunk/) in the *Docker documentation* .
         * - **syslog** - Specifies the syslog logging driver. For more information including usage and options, see [Syslog logging driver](https://docs.aws.amazon.com/https://docs.docker.com/config/containers/logging/syslog/) in the *Docker documentation* .
         *
         * > If you have a custom driver that's not listed earlier that you want to work with the Amazon ECS container agent, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you want to have included. However, Amazon Web Services doesn't currently support running modified copies of this software. 
         *
         * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
         */
        logDriver: string;
        /**
         * The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: `sudo docker version | grep "Server API version"`
         */
        options?: any;
        /**
         * The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/batch/latest/userguide/specifying-sensitive-data.html) in the *AWS Batch User Guide* .
         */
        secretOptions?: outputs.batch.JobDefinitionSecret[];
    }

    export interface JobDefinitionMetadata {
        /**
         * Key-value pairs used to identify, sort, and organize cube resources. Can contain up to 63 uppercase letters, lowercase letters, numbers, hyphens (-), and underscores (_). Labels can be added or modified at any time. Each resource can have multiple labels, but each key must be unique for a given object.
         */
        labels?: any;
    }

    export interface JobDefinitionMountPoints {
        /**
         * The path on the container where the host volume is mounted.
         */
        containerPath?: string;
        /**
         * If this value is `true` , the container has read-only access to the volume. Otherwise, the container can write to the volume. The default value is `false` .
         */
        readOnly?: boolean;
        /**
         * The name of the volume to mount.
         */
        sourceVolume?: string;
    }

    export interface JobDefinitionNetworkConfiguration {
        /**
         * Indicates whether the job has a public IP address. For a job that's running on Fargate resources in a private subnet to send outbound traffic to the internet (for example, to pull container images), the private subnet requires a NAT gateway be attached to route requests to the internet. For more information, see [Amazon ECS task networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html) in the *Amazon Elastic Container Service Developer Guide* . The default value is " `DISABLED` ".
         */
        assignPublicIp?: string;
    }

    export interface JobDefinitionNodeProperties {
        /**
         * Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
         */
        mainNode: number;
        /**
         * A list of node ranges and their properties that are associated with a multi-node parallel job.
         */
        nodeRangeProperties: outputs.batch.JobDefinitionNodeRangeProperty[];
        /**
         * The number of nodes that are associated with a multi-node parallel job.
         */
        numNodes: number;
    }

    export interface JobDefinitionNodeRangeProperty {
        /**
         * The container details for the node range.
         */
        container?: outputs.batch.JobDefinitionContainerProperties;
        /**
         * This is an object that represents the properties of the node range for a multi-node parallel job.
         */
        ecsProperties?: outputs.batch.JobDefinitionEcsProperties;
        /**
         * The instance types of the underlying host infrastructure of a multi-node parallel job.
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources.
         * > 
         * > In addition, this list object is currently limited to one element.
         */
        instanceTypes?: string[];
        /**
         * The range of nodes, using node index values. A range of `0:3` indicates nodes with index values of `0` through `3` . If the starting range value is omitted ( `:n` ), then `0` is used to start the range. If the ending range value is omitted ( `n:` ), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes ( `0:n` ). You can nest node ranges (for example, `0:10` and `4:5` ). In this case, the `4:5` range properties override the `0:10` properties.
         */
        targetNodes: string;
    }

    export interface JobDefinitionPodProperties {
        /**
         * The properties of the container that's used on the Amazon EKS pod.
         */
        containers?: outputs.batch.JobDefinitionEksContainer[];
        /**
         * The DNS policy for the pod. The default value is `ClusterFirst` . If the `hostNetwork` parameter is not specified, the default is `ClusterFirstWithHostNet` . `ClusterFirst` indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see [Pod's DNS policy](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) in the *Kubernetes documentation* .
         *
         * Valid values: `Default` | `ClusterFirst` | `ClusterFirstWithHostNet`
         */
        dnsPolicy?: string;
        /**
         * Indicates if the pod uses the hosts' network IP address. The default value is `true` . Setting this to `false` enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections. For more information, see [Host namespaces](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/security/pod-security-policy/#host-namespaces) and [Pod networking](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/#pod-networking) in the *Kubernetes documentation* .
         */
        hostNetwork?: boolean;
        imagePullSecrets?: outputs.batch.JobDefinitionImagePullSecret[];
        /**
         * These containers run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. For more information, see [Init Containers](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) in the *Kubernetes documentation* .
         *
         * > This object is limited to 10 elements
         */
        initContainers?: outputs.batch.JobDefinitionEksContainer[];
        /**
         * Metadata about the Kubernetes pod. For more information, see [Understanding Kubernetes Objects](https://docs.aws.amazon.com/https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/) in the *Kubernetes documentation* .
         */
        metadata?: outputs.batch.JobDefinitionMetadata;
        /**
         * The name of the service account that's used to run the pod. For more information, see [Kubernetes service accounts](https://docs.aws.amazon.com/eks/latest/userguide/service-accounts.html) and [Configure a Kubernetes service account to assume an IAM role](https://docs.aws.amazon.com/eks/latest/userguide/associate-service-account-role.html) in the *Amazon EKS User Guide* and [Configure service accounts for pods](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) in the *Kubernetes documentation* .
         */
        serviceAccountName?: string;
        /**
         * Indicates if the processes in a container are shared, or visible, to other containers in the same pod. For more information, see [Share Process Namespace between Containers in a Pod](https://docs.aws.amazon.com/https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/) .
         */
        shareProcessNamespace?: boolean;
        /**
         * Specifies the volumes for a job definition that uses Amazon EKS resources.
         */
        volumes?: outputs.batch.JobDefinitionEksVolume[];
    }

    export interface JobDefinitionRepositoryCredentials {
        /**
         * The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
         */
        credentialsParameter: string;
    }

    export interface JobDefinitionResourceRequirement {
        /**
         * The type of resource to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
         */
        type?: string;
        /**
         * The quantity of the specified resource to reserve for the container. The values vary based on the `type` specified.
         *
         * - **type="GPU"** - The number of physical GPUs to reserve for the container. Make sure that the number of GPUs reserved for all containers in a job doesn't exceed the number of available GPUs on the compute resource that the job is launched on.
         *
         * > GPUs aren't available for jobs that are running on Fargate resources.
         * - **type="MEMORY"** - The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on Amazon EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* . 
         *
         * For jobs that are running on Fargate resources, then `value` is the hard limit (in MiB), and must match one of the supported values and the `VCPU` values must be one of the values supported for that memory value.
         *
         * - **value = 512** - `VCPU` = 0.25
         * - **value = 1024** - `VCPU` = 0.25 or 0.5
         * - **value = 2048** - `VCPU` = 0.25, 0.5, or 1
         * - **value = 3072** - `VCPU` = 0.5, or 1
         * - **value = 4096** - `VCPU` = 0.5, 1, or 2
         * - **value = 5120, 6144, or 7168** - `VCPU` = 1 or 2
         * - **value = 8192** - `VCPU` = 1, 2, or 4
         * - **value = 9216, 10240, 11264, 12288, 13312, 14336, or 15360** - `VCPU` = 2 or 4
         * - **value = 16384** - `VCPU` = 2, 4, or 8
         * - **value = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624, 27648, 29696, or 30720** - `VCPU` = 4
         * - **value = 20480, 24576, or 28672** - `VCPU` = 4 or 8
         * - **value = 36864, 45056, 53248, or 61440** - `VCPU` = 8
         * - **value = 32768, 40960, 49152, or 57344** - `VCPU` = 8 or 16
         * - **value = 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880** - `VCPU` = 16
         * - **type="VCPU"** - The number of vCPUs reserved for the container. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . Each vCPU is equivalent to 1,024 CPU shares. For Amazon EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once.
         *
         * The default for the Fargate On-Demand vCPU resource count quota is 6 vCPUs. For more information about Fargate quotas, see [AWS Fargate quotas](https://docs.aws.amazon.com/general/latest/gr/ecs-service.html#service-quotas-fargate) in the *AWS General Reference* .
         *
         * For jobs that are running on Fargate resources, then `value` must match one of the supported values and the `MEMORY` values must be one of the values supported for that `VCPU` value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and 16
         *
         * - **value = 0.25** - `MEMORY` = 512, 1024, or 2048
         * - **value = 0.5** - `MEMORY` = 1024, 2048, 3072, or 4096
         * - **value = 1** - `MEMORY` = 2048, 3072, 4096, 5120, 6144, 7168, or 8192
         * - **value = 2** - `MEMORY` = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
         * - **value = 4** - `MEMORY` = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
         * - **value = 8** - `MEMORY` = 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, or 61440
         * - **value = 16** - `MEMORY` = 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880
         */
        value?: string;
    }

    export interface JobDefinitionRetryStrategy {
        /**
         * The number of times to move a job to the `RUNNABLE` status. You can specify between 1 and 10 attempts. If the value of `attempts` is greater than one, the job is retried on failure the same number of attempts as the value.
         */
        attempts?: number;
        /**
         * Array of up to 5 objects that specify the conditions where jobs are retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. If none of the listed conditions match, then the job is retried.
         */
        evaluateOnExit?: outputs.batch.JobDefinitionEvaluateOnExit[];
    }

    export interface JobDefinitionRuntimePlatform {
        /**
         * The vCPU architecture. The default value is `X86_64` . Valid values are `X86_64` and `ARM64` .
         *
         * > This parameter must be set to `X86_64` for Windows containers. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
         */
        cpuArchitecture?: string;
        /**
         * The operating system for the compute environment. Valid values are: `LINUX` (default), `WINDOWS_SERVER_2019_CORE` , `WINDOWS_SERVER_2019_FULL` , `WINDOWS_SERVER_2022_CORE` , and `WINDOWS_SERVER_2022_FULL` .
         *
         * > The following parameters can’t be set for Windows containers: `linuxParameters` , `privileged` , `user` , `ulimits` , `readonlyRootFilesystem` , and `efsVolumeConfiguration` . > The AWS Batch Scheduler checks the compute environments that are attached to the job queue before registering a task definition with Fargate. In this scenario, the job queue is where the job is submitted. If the job requires a Windows container and the first compute environment is `LINUX` , the compute environment is skipped and the next compute environment is checked until a Windows-based compute environment is found. > Fargate Spot is not supported for `ARM64` and Windows-based containers on Fargate. A job queue will be blocked if a Fargate `ARM64` or Windows job is submitted to a job queue with only Fargate Spot compute environments. However, you can attach both `FARGATE` and `FARGATE_SPOT` compute environments to the same job queue.
         */
        operatingSystemFamily?: string;
    }

    export interface JobDefinitionSecret {
        /**
         * The name of the secret.
         */
        name: string;
        /**
         * The secret to expose to the container. The supported values are either the full Amazon Resource Name (ARN) of the AWS Secrets Manager secret or the full ARN of the parameter in the AWS Systems Manager Parameter Store.
         *
         * > If the AWS Systems Manager Parameter Store parameter exists in the same Region as the job you're launching, then you can use either the full Amazon Resource Name (ARN) or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
         */
        valueFrom: string;
    }

    export interface JobDefinitionTaskContainerDependency {
        /**
         * The dependency condition of the container. The following are the available conditions and their behavior:
         *
         * - `START` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
         * - `COMPLETE` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
         * - `SUCCESS` - This condition is the same as `COMPLETE` , but it also requires that the container exits with a zero status. This condition can't be set on an essential container.
         */
        condition: string;
        /**
         * A unique identifier for the container.
         */
        containerName: string;
    }

    export interface JobDefinitionTaskContainerProperties {
        /**
         * The command that's passed to the container. This parameter maps to `Cmd` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `COMMAND` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . For more information, see [Dockerfile reference: CMD](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd) .
         */
        command?: string[];
        /**
         * A list of containers that this container depends on.
         */
        dependsOn?: outputs.batch.JobDefinitionTaskContainerDependency[];
        /**
         * The environment variables to pass to a container. This parameter maps to Env inthe [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--env` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * > We don't recommend using plaintext environment variables for sensitive information, such as credential data. > Environment variables cannot start with `AWS_BATCH` . This naming convention is reserved for variables that AWS Batch sets.
         */
        environment?: outputs.batch.JobDefinitionEnvironment[];
        /**
         * If the essential parameter of a container is marked as `true` , and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the `essential` parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
         *
         * All jobs must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        essential?: boolean;
        /**
         * The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either `repository-url/image:tag` or `repository-url/image@digest` . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to `Image` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `IMAGE` parameter of the [*docker run*](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
         */
        image: string;
        /**
         * Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information, see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html) .
         */
        linuxParameters?: outputs.batch.JobDefinitionLinuxParameters;
        /**
         * The log configuration specification for the container.
         *
         * This parameter maps to `LogConfig` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--log-driver` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
         *
         * By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information about the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the *Docker documentation* .
         *
         * > Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the `LogConfiguration` data type). Additional log drivers may be available in future releases of the Amazon ECS container agent. 
         *
         * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version `--format '{{.Server.APIVersion}}'`
         *
         * > The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the `ECS_AVAILABLE_LOGGING_DRIVERS` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        logConfiguration?: outputs.batch.JobDefinitionLogConfiguration;
        /**
         * The mount points for data volumes in your container.
         *
         * This parameter maps to `Volumes` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the [--volume](https://docs.aws.amazon.com/) option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
         *
         * Windows containers can mount whole directories on the same drive as `$env:ProgramData` . Windows containers can't mount directories on a different drive, and mount point can't be across drives.
         */
        mountPoints?: outputs.batch.JobDefinitionMountPoints[];
        /**
         * The name of a container. The name can be used as a unique identifier to target your `dependsOn` and `Overrides` objects.
         */
        name?: string;
        /**
         * When this parameter is `true` , the container is given elevated privileges on the host container instance (similar to the `root` user). This parameter maps to `Privileged` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--privileged` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
         *
         * > This parameter is not supported for Windows containers or tasks run on Fargate.
         */
        privileged?: boolean;
        /**
         * When this parameter is true, the container is given read-only access to its root file system. This parameter maps to `ReadonlyRootfs` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--read-only` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
         *
         * > This parameter is not supported for Windows containers.
         */
        readonlyRootFilesystem?: boolean;
        /**
         * The private repository authentication credentials to use.
         */
        repositoryCredentials?: outputs.batch.JobDefinitionRepositoryCredentials;
        /**
         * The type and amount of a resource to assign to a container. The only supported resource is a GPU.
         */
        resourceRequirements?: outputs.batch.JobDefinitionResourceRequirement[];
        /**
         * The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the Amazon Elastic Container Service Developer Guide.
         */
        secrets?: outputs.batch.JobDefinitionSecret[];
        /**
         * A list of `ulimits` to set in the container. If a `ulimit` value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to `Ulimits` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the `--ulimit` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) .
         *
         * Amazon ECS tasks hosted on Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which Fargate overrides. The `nofile` resource limit sets a restriction on the number of open files that a container can use. The default `nofile` soft limit is `1024` and the default hard limit is `65535` .
         *
         * This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version `--format '{{.Server.APIVersion}}'`
         *
         * > This parameter is not supported for Windows containers.
         */
        ulimits?: outputs.batch.JobDefinitionUlimit[];
        /**
         * The user to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.
         *
         * > When running tasks using the `host` network mode, don't run containers using the `root user (UID 0)` . We recommend using a non-root user for better security. 
         *
         * You can specify the `user` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
         *
         * - `user`
         * - `user:group`
         * - `uid`
         * - `uid:gid`
         * - `user:gi`
         * - `uid:group`
         *
         * > This parameter is not supported for Windows containers.
         */
        user?: string;
    }

    export interface JobDefinitionTimeout {
        /**
         * The job timeout time (in seconds) that's measured from the job attempt's `startedAt` timestamp. After this time passes, AWS Batch terminates your jobs if they aren't finished. The minimum value for the timeout is 60 seconds.
         *
         * For array jobs, the timeout applies to the child jobs, not to the parent array job.
         *
         * For multi-node parallel (MNP) jobs, the timeout applies to the whole job, not to the individual nodes.
         */
        attemptDurationSeconds?: number;
    }

    export interface JobDefinitionTmpfs {
        /**
         * The absolute file path in the container where the `tmpfs` volume is mounted.
         */
        containerPath: string;
        /**
         * The list of `tmpfs` volume mount options.
         *
         * Valid values: " `defaults` " | " `ro` " | " `rw` " | " `suid` " | " `nosuid` " | " `dev` " | " `nodev` " | " `exec` " | " `noexec` " | " `sync` " | " `async` " | " `dirsync` " | " `remount` " | " `mand` " | " `nomand` " | " `atime` " | " `noatime` " | " `diratime` " | " `nodiratime` " | " `bind` " | " `rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime` " | " `norelatime` " | " `strictatime` " | " `nostrictatime` " | " `mode` " | " `uid` " | " `gid` " | " `nr_inodes` " | " `nr_blocks` " | " `mpol` "
         */
        mountOptions?: string[];
        /**
         * The size (in MiB) of the `tmpfs` volume.
         */
        size: number;
    }

    export interface JobDefinitionUlimit {
        /**
         * The hard limit for the `ulimit` type.
         */
        hardLimit: number;
        /**
         * The `type` of the `ulimit` . Valid values are: `core` | `cpu` | `data` | `fsize` | `locks` | `memlock` | `msgqueue` | `nice` | `nofile` | `nproc` | `rss` | `rtprio` | `rttime` | `sigpending` | `stack` .
         */
        name: string;
        /**
         * The soft limit for the `ulimit` type.
         */
        softLimit: number;
    }

    export interface JobDefinitionVolumes {
        /**
         * This is used when you're using an Amazon Elastic File System file system for job storage. For more information, see [Amazon EFS Volumes](https://docs.aws.amazon.com/batch/latest/userguide/efs-volumes.html) in the *AWS Batch User Guide* .
         */
        efsVolumeConfiguration?: outputs.batch.JobDefinitionEfsVolumeConfiguration;
        /**
         * The contents of the `host` parameter determine whether your data volume persists on the host container instance and where it's stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
         *
         * > This parameter isn't applicable to jobs that are running on Fargate resources and shouldn't be provided.
         */
        host?: outputs.batch.JobDefinitionVolumesHost;
        /**
         * The name of the volume. It can be up to 255 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_). This name is referenced in the `sourceVolume` parameter of container definition `mountPoints` .
         */
        name?: string;
    }

    export interface JobDefinitionVolumesHost {
        /**
         * The path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
         *
         * > This parameter isn't applicable to jobs that run on Fargate resources. Don't provide this for these jobs.
         */
        sourcePath?: string;
    }

    export interface JobQueueComputeEnvironmentOrder {
        /**
         * The Amazon Resource Name (ARN) of the compute environment.
         */
        computeEnvironment: string;
        /**
         * The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower `order` integer value is tried for job placement first.
         */
        order: number;
    }

    export interface JobQueueJobStateTimeLimitAction {
        /**
         * The action to take when a job is at the head of the job queue in the specified state for the specified period of time. The only supported value is `CANCEL` , which will cancel the job.
         */
        action: enums.batch.JobQueueJobStateTimeLimitActionAction;
        /**
         * The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. The minimum value is 600 (10 minutes) and the maximum value is 86,400 (24 hours).
         */
        maxTimeSeconds: number;
        /**
         * The reason to log for the action being taken.
         */
        reason: string;
        /**
         * The state of the job needed to trigger the action. The only supported value is `RUNNABLE` .
         */
        state: enums.batch.JobQueueJobStateTimeLimitActionState;
    }

    /**
     * Fair Share Policy for the Job Queue.
     */
    export interface SchedulingPolicyFairsharePolicy {
        /**
         * A value used to reserve some of the available maximum vCPU for fair share identifiers that aren't already used.
         *
         * The reserved ratio is `( *computeReservation* /100)^ *ActiveFairShares*` where `*ActiveFairShares*` is the number of active fair share identifiers.
         *
         * For example, a `computeReservation` value of 50 indicates that AWS Batch reserves 50% of the maximum available vCPU if there's only one fair share identifier. It reserves 25% if there are two fair share identifiers. It reserves 12.5% if there are three fair share identifiers. A `computeReservation` value of 25 indicates that AWS Batch should reserve 25% of the maximum available vCPU if there's only one fair share identifier, 6.25% if there are two fair share identifiers, and 1.56% if there are three fair share identifiers.
         *
         * The minimum value is 0 and the maximum value is 99.
         */
        computeReservation?: number;
        /**
         * The amount of time (in seconds) to use to calculate a fair share percentage for each fair share identifier in use. A value of zero (0) indicates that only current usage is measured. The decay allows for more recently run jobs to have more weight than jobs that ran earlier. The maximum supported value is 604800 (1 week).
         */
        shareDecaySeconds?: number;
        /**
         * List of Share Attributes
         */
        shareDistribution?: outputs.batch.SchedulingPolicyShareAttributes[];
    }

    export interface SchedulingPolicyShareAttributes {
        /**
         * A fair share identifier or fair share identifier prefix. If the string ends with an asterisk (*), this entry specifies the weight factor to use for fair share identifiers that start with that prefix. The list of fair share identifiers in a fair share policy can't overlap. For example, you can't have one that specifies a `shareIdentifier` of `UserA*` and another that specifies a `shareIdentifier` of `UserA-1` .
         *
         * There can be no more than 500 fair share identifiers active in a job queue.
         *
         * The string is limited to 255 alphanumeric characters, and can be followed by an asterisk (*).
         */
        shareIdentifier?: string;
        /**
         * The weight factor for the fair share identifier. The default value is 1.0. A lower value has a higher priority for compute resources. For example, jobs that use a share identifier with a weight factor of 0.125 (1/8) get 8 times the compute resources of jobs that use a share identifier with a weight factor of 1.
         *
         * The smallest supported value is 0.0001, and the largest supported value is 999.9999.
         */
        weightFactor?: number;
    }

}

export namespace bedrock {
    /**
     * Contains the information of an Agent Action Group
     */
    export interface AgentActionGroup {
        /**
         * The Amazon Resource Name (ARN) of the Lambda function containing the business logic that is carried out upon invoking the action or the custom control method for handling the information elicited from the user.
         */
        actionGroupExecutor?: outputs.bedrock.AgentActionGroupExecutor0Properties | outputs.bedrock.AgentActionGroupExecutor1Properties;
        /**
         * Name of the action group
         */
        actionGroupName: string;
        /**
         * Specifies whether the action group is available for the agent to invoke or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html) request.
         */
        actionGroupState?: enums.bedrock.AgentActionGroupState;
        /**
         * Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html) .
         */
        apiSchema?: outputs.bedrock.AgentApiSchema0Properties | outputs.bedrock.AgentApiSchema1Properties;
        /**
         * Description of action group
         */
        description?: string;
        /**
         * Defines functions that each define parameters that the agent needs to invoke from the user. Each function represents an action in an action group.
         */
        functionSchema?: outputs.bedrock.AgentFunctionSchema;
        /**
         * If this field is set as `AMAZON.UserInput` , the agent can request the user for additional information when trying to complete a task. The `description` , `apiSchema` , and `actionGroupExecutor` fields must be blank for this action group.
         *
         * During orchestration, if the agent determines that it needs to invoke an API in an action group, but doesn't have enough information to complete the API request, it will invoke this action group instead and return an [Observation](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Observation.html) reprompting the user for more information.
         */
        parentActionGroupSignature?: enums.bedrock.AgentActionGroupSignature;
        /**
         * Specifies whether to allow deleting action group while it is in use.
         */
        skipResourceInUseCheckOnDelete?: boolean;
    }

    /**
     * Type of Executors for an Action Group
     */
    export interface AgentActionGroupExecutor0Properties {
        /**
         * ARN of a Lambda.
         */
        lambda: string;
    }

    /**
     * Type of Executors for an Action Group
     */
    export interface AgentActionGroupExecutor1Properties {
        customControl: enums.bedrock.AgentCustomControlMethod;
    }

    /**
     * History event for an alias for an Agent.
     */
    export interface AgentAliasHistoryEvent {
        /**
         * Time Stamp.
         */
        endDate?: string;
        /**
         * Routing configuration for an Agent alias.
         */
        routingConfiguration?: outputs.bedrock.AgentAliasRoutingConfigurationListItem[];
        /**
         * Time Stamp.
         */
        startDate?: string;
    }

    /**
     * Details about the routing configuration for an Agent alias.
     */
    export interface AgentAliasRoutingConfigurationListItem {
        /**
         * Agent Version.
         */
        agentVersion: string;
    }

    /**
     * Contains information about the API Schema for the Action Group
     */
    export interface AgentApiSchema0Properties {
        s3: outputs.bedrock.AgentS3Identifier;
    }

    /**
     * Contains information about the API Schema for the Action Group
     */
    export interface AgentApiSchema1Properties {
        /**
         * String OpenAPI Payload
         */
        payload: string;
    }

    /**
     * Function definition
     */
    export interface AgentFunction {
        /**
         * Description of function
         */
        description?: string;
        /**
         * Name for a resource.
         */
        name: string;
        /**
         * The parameters that the agent elicits from the user to fulfill the function.
         */
        parameters?: {[key: string]: outputs.bedrock.AgentParameterDetail};
    }

    /**
     * Schema of Functions
     */
    export interface AgentFunctionSchema {
        /**
         * List of Function definitions
         */
        functions: outputs.bedrock.AgentFunction[];
    }

    /**
     * Configuration for inference in prompt configuration
     */
    export interface AgentInferenceConfiguration {
        /**
         * Maximum length of output
         */
        maximumLength?: number;
        /**
         * List of stop sequences
         */
        stopSequences?: string[];
        /**
         * Controls randomness, higher values increase diversity
         */
        temperature?: number;
        /**
         * Sample from the k most likely next tokens
         */
        topK?: number;
        /**
         * Cumulative probability cutoff for token selection
         */
        topP?: number;
    }

    /**
     * Agent Knowledge Base
     */
    export interface AgentKnowledgeBase {
        /**
         * Description of the Resource.
         */
        description: string;
        /**
         * Identifier for a resource.
         */
        knowledgeBaseId: string;
        /**
         * Specifies whether to use the knowledge base or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html) request.
         */
        knowledgeBaseState?: enums.bedrock.AgentKnowledgeBaseState;
    }

    /**
     * Parameter detail
     */
    export interface AgentParameterDetail {
        /**
         * Description of function parameter.
         */
        description?: string;
        /**
         * Information about if a parameter is required for function call. Default to false.
         */
        required?: boolean;
        /**
         * The data type of the parameter.
         */
        type: enums.bedrock.AgentType;
    }

    /**
     * BasePromptConfiguration per Prompt Type.
     */
    export interface AgentPromptConfiguration {
        /**
         * Base Prompt Template.
         */
        basePromptTemplate?: string;
        /**
         * Contains inference parameters to use when the agent invokes a foundation model in the part of the agent sequence defined by the `promptType` . For more information, see [Inference parameters for foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html) .
         */
        inferenceConfiguration?: outputs.bedrock.AgentInferenceConfiguration;
        /**
         * Specifies whether to override the default parser Lambda function when parsing the raw foundation model output in the part of the agent sequence defined by the `promptType` . If you set the field as `OVERRIDEN` , the `overrideLambda` field in the [PromptOverrideConfiguration](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_PromptOverrideConfiguration.html) must be specified with the ARN of a Lambda function.
         */
        parserMode?: enums.bedrock.AgentCreationMode;
        /**
         * Specifies whether to override the default prompt template for this `promptType` . Set this value to `OVERRIDDEN` to use the prompt that you provide in the `basePromptTemplate` . If you leave it as `DEFAULT` , the agent uses a default prompt template.
         */
        promptCreationMode?: enums.bedrock.AgentCreationMode;
        /**
         * Specifies whether to allow the agent to carry out the step specified in the `promptType` . If you set this value to `DISABLED` , the agent skips that step. The default state for each `promptType` is as follows.
         *
         * - `PRE_PROCESSING` – `ENABLED`
         * - `ORCHESTRATION` – `ENABLED`
         * - `KNOWLEDGE_BASE_RESPONSE_GENERATION` – `ENABLED`
         * - `POST_PROCESSING` – `DISABLED`
         */
        promptState?: enums.bedrock.AgentPromptState;
        /**
         * The step in the agent sequence that this prompt configuration applies to.
         */
        promptType?: enums.bedrock.AgentPromptType;
    }

    /**
     * Configuration for prompt override.
     */
    export interface AgentPromptOverrideConfiguration {
        /**
         * ARN of a Lambda.
         */
        overrideLambda?: string;
        /**
         * List of BasePromptConfiguration
         */
        promptConfigurations: outputs.bedrock.AgentPromptConfiguration[];
    }

    /**
     * The identifier for the S3 resource.
     */
    export interface AgentS3Identifier {
        /**
         * A bucket in S3.
         */
        s3BucketName?: string;
        /**
         * A object key in S3.
         */
        s3ObjectKey?: string;
    }

    /**
     * Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried.
     */
    export interface DataSourceChunkingConfiguration {
        /**
         * Knowledge base can split your source data into chunks. A *chunk* refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried. You have the following options for chunking your data. If you opt for `NONE` , then you may want to pre-process your files by splitting them up such that each file corresponds to a chunk.
         *
         * - `FIXED_SIZE` – Amazon Bedrock splits your source data into chunks of the approximate size that you set in the `fixedSizeChunkingConfiguration` .
         * - `NONE` – Amazon Bedrock treats each file as one chunk. If you choose this option, you may want to pre-process your documents by splitting them into separate files.
         */
        chunkingStrategy: enums.bedrock.DataSourceChunkingStrategy;
        /**
         * Configurations for when you choose fixed-size chunking. If you set the `chunkingStrategy` as `NONE` , exclude this field.
         */
        fixedSizeChunkingConfiguration?: outputs.bedrock.DataSourceFixedSizeChunkingConfiguration;
    }

    /**
     * Specifies a raw data source location to ingest.
     */
    export interface DataSourceConfiguration {
        /**
         * Contains details about the configuration of the S3 object containing the data source.
         */
        s3Configuration: outputs.bedrock.DataSourceS3DataSourceConfiguration;
        /**
         * The type of storage for the data source.
         */
        type: enums.bedrock.DataSourceType;
    }

    /**
     * Configurations for when you choose fixed-size chunking. If you set the chunkingStrategy as NONE, exclude this field.
     */
    export interface DataSourceFixedSizeChunkingConfiguration {
        /**
         * The maximum number of tokens to include in a chunk.
         */
        maxTokens: number;
        /**
         * The percentage of overlap between adjacent chunks of a data source.
         */
        overlapPercentage: number;
    }

    /**
     * Contains information about the S3 configuration of the data source.
     */
    export interface DataSourceS3DataSourceConfiguration {
        /**
         * The ARN of the bucket that contains the data source.
         */
        bucketArn: string;
        /**
         * The account ID for the owner of the S3 bucket.
         */
        bucketOwnerAccountId?: string;
        /**
         * A list of S3 prefixes that define the object containing the data sources.
         */
        inclusionPrefixes?: string[];
    }

    /**
     * Contains details about the server-side encryption for the data source.
     */
    export interface DataSourceServerSideEncryptionConfiguration {
        /**
         * The ARN of the AWS KMS key used to encrypt the resource.
         */
        kmsKeyArn?: string;
    }

    /**
     * Details about how to chunk the documents in the data source. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried.
     */
    export interface DataSourceVectorIngestionConfiguration {
        /**
         * Details about how to chunk the documents in the data source. A *chunk* refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried.
         */
        chunkingConfiguration?: outputs.bedrock.DataSourceChunkingConfiguration;
    }

    /**
     * Content filter config in content policy.
     */
    export interface GuardrailContentFilterConfig {
        inputStrength: enums.bedrock.GuardrailFilterStrength;
        outputStrength: enums.bedrock.GuardrailFilterStrength;
        type: enums.bedrock.GuardrailContentFilterType;
    }

    /**
     * Content policy config for a guardrail.
     */
    export interface GuardrailContentPolicyConfig {
        /**
         * List of content filter configs in content policy.
         */
        filtersConfig: outputs.bedrock.GuardrailContentFilterConfig[];
    }

    /**
     * A managed words config.
     */
    export interface GuardrailManagedWordsConfig {
        type: enums.bedrock.GuardrailManagedWordsType;
    }

    /**
     * Pii entity configuration.
     */
    export interface GuardrailPiiEntityConfig {
        action: enums.bedrock.GuardrailSensitiveInformationAction;
        type: enums.bedrock.GuardrailPiiEntityType;
    }

    /**
     * A regex configuration.
     */
    export interface GuardrailRegexConfig {
        action: enums.bedrock.GuardrailSensitiveInformationAction;
        /**
         * The regex description.
         */
        description?: string;
        /**
         * The regex name.
         */
        name: string;
        /**
         * The regex pattern.
         */
        pattern: string;
    }

    /**
     * Sensitive information policy config for a guardrail.
     */
    export interface GuardrailSensitiveInformationPolicyConfig {
        /**
         * List of entities.
         */
        piiEntitiesConfig?: outputs.bedrock.GuardrailPiiEntityConfig[];
        /**
         * List of regex.
         */
        regexesConfig?: outputs.bedrock.GuardrailRegexConfig[];
    }

    /**
     * Topic config in topic policy.
     */
    export interface GuardrailTopicConfig {
        /**
         * Definition of topic in topic policy
         */
        definition: string;
        /**
         * List of text examples
         */
        examples?: string[];
        /**
         * Name of topic in topic policy
         */
        name: string;
        type: enums.bedrock.GuardrailTopicType;
    }

    /**
     * Topic policy config for a guardrail.
     */
    export interface GuardrailTopicPolicyConfig {
        /**
         * List of topic configs in topic policy.
         */
        topicsConfig: outputs.bedrock.GuardrailTopicConfig[];
    }

    /**
     * A custom word config.
     */
    export interface GuardrailWordConfig {
        /**
         * The custom word text.
         */
        text: string;
    }

    /**
     * Word policy config for a guardrail.
     */
    export interface GuardrailWordPolicyConfig {
        /**
         * A config for the list of managed words.
         */
        managedWordListsConfig?: outputs.bedrock.GuardrailManagedWordsConfig[];
        /**
         * List of custom word configs.
         */
        wordsConfig?: outputs.bedrock.GuardrailWordConfig[];
    }

    /**
     * Contains details about the embeddings model used for the knowledge base.
     */
    export interface KnowledgeBaseConfiguration {
        /**
         * The type of data that the data source is converted into for the knowledge base.
         */
        type: enums.bedrock.KnowledgeBaseType;
        /**
         * Contains details about the embeddings model that'sused to convert the data source.
         */
        vectorKnowledgeBaseConfiguration: outputs.bedrock.KnowledgeBaseVectorKnowledgeBaseConfiguration;
    }

    /**
     * Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.
     */
    export interface KnowledgeBaseOpenSearchServerlessConfiguration {
        /**
         * The ARN of the OpenSearch Service vector store.
         */
        collectionArn: string;
        /**
         * Contains the names of the fields to which to map information about the vector store.
         */
        fieldMapping: outputs.bedrock.KnowledgeBaseOpenSearchServerlessFieldMapping;
        /**
         * The name of the vector store.
         */
        vectorIndexName: string;
    }

    /**
     * A mapping of Bedrock Knowledge Base fields to OpenSearch Serverless field names
     */
    export interface KnowledgeBaseOpenSearchServerlessFieldMapping {
        /**
         * The name of the field in which Amazon Bedrock stores metadata about the vector store.
         */
        metadataField: string;
        /**
         * The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
         */
        textField: string;
        /**
         * The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
         */
        vectorField: string;
    }

    /**
     * Contains the storage configuration of the knowledge base in Pinecone.
     */
    export interface KnowledgeBasePineconeConfiguration {
        /**
         * The endpoint URL for your index management page.
         */
        connectionString: string;
        /**
         * The ARN of the secret that you created in AWS Secrets Manager that is linked to your Pinecone API key.
         */
        credentialsSecretArn: string;
        /**
         * Contains the names of the fields to which to map information about the vector store.
         */
        fieldMapping: outputs.bedrock.KnowledgeBasePineconeFieldMapping;
        /**
         * The namespace to be used to write new data to your database.
         */
        namespace?: string;
    }

    /**
     * Contains the names of the fields to which to map information about the vector store.
     */
    export interface KnowledgeBasePineconeFieldMapping {
        /**
         * The name of the field in which Amazon Bedrock stores metadata about the vector store.
         */
        metadataField: string;
        /**
         * The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
         */
        textField: string;
    }

    /**
     * Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see Create a vector index in Amazon RDS.
     */
    export interface KnowledgeBaseRdsConfiguration {
        /**
         * The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon RDS database.
         */
        credentialsSecretArn: string;
        /**
         * The name of your Amazon RDS database.
         */
        databaseName: string;
        /**
         * Contains the names of the fields to which to map information about the vector store.
         */
        fieldMapping: outputs.bedrock.KnowledgeBaseRdsFieldMapping;
        /**
         * The ARN of the vector store.
         */
        resourceArn: string;
        /**
         * The name of the table in the database.
         */
        tableName: string;
    }

    /**
     * Contains the names of the fields to which to map information about the vector store.
     */
    export interface KnowledgeBaseRdsFieldMapping {
        /**
         * The name of the field in which Amazon Bedrock stores metadata about the vector store.
         */
        metadataField: string;
        /**
         * The name of the field in which Amazon Bedrock stores the ID for each entry.
         */
        primaryKeyField: string;
        /**
         * The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
         */
        textField: string;
        /**
         * The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
         */
        vectorField: string;
    }

    /**
     * The vector store service in which the knowledge base is stored.
     */
    export interface KnowledgeBaseStorageConfiguration {
        /**
         * Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.
         */
        opensearchServerlessConfiguration?: outputs.bedrock.KnowledgeBaseOpenSearchServerlessConfiguration;
        /**
         * Contains the storage configuration of the knowledge base in Pinecone.
         */
        pineconeConfiguration?: outputs.bedrock.KnowledgeBasePineconeConfiguration;
        /**
         * Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see [Create a vector index in Amazon RDS](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-rds.html) .
         */
        rdsConfiguration?: outputs.bedrock.KnowledgeBaseRdsConfiguration;
        /**
         * The vector store service in which the knowledge base is stored.
         */
        type: enums.bedrock.KnowledgeBaseStorageType;
    }

    /**
     * Contains details about the model used to create vector embeddings for the knowledge base.
     */
    export interface KnowledgeBaseVectorKnowledgeBaseConfiguration {
        /**
         * The ARN of the model used to create vector embeddings for the knowledge base.
         */
        embeddingModelArn: string;
    }

}

export namespace budgets {
    export interface BudgetsActionActionThreshold {
        /**
         * The type of threshold for a notification.
         */
        type: enums.budgets.BudgetsActionActionThresholdType;
        /**
         * The threshold of a notification.
         */
        value: number;
    }

    export interface BudgetsActionDefinition {
        /**
         * The AWS Identity and Access Management ( IAM ) action definition details.
         */
        iamActionDefinition?: outputs.budgets.BudgetsActionIamActionDefinition;
        /**
         * The service control policies (SCP) action definition details.
         */
        scpActionDefinition?: outputs.budgets.BudgetsActionScpActionDefinition;
        /**
         * The Amazon EC2 Systems Manager ( SSM ) action definition details.
         */
        ssmActionDefinition?: outputs.budgets.BudgetsActionSsmActionDefinition;
    }

    export interface BudgetsActionIamActionDefinition {
        /**
         * A list of groups to be attached. There must be at least one group.
         */
        groups?: string[];
        /**
         * The Amazon Resource Name (ARN) of the policy to be attached.
         */
        policyArn: string;
        /**
         * A list of roles to be attached. There must be at least one role.
         */
        roles?: string[];
        /**
         * A list of users to be attached. There must be at least one user.
         */
        users?: string[];
    }

    export interface BudgetsActionScpActionDefinition {
        /**
         * The policy ID attached.
         */
        policyId: string;
        /**
         * A list of target IDs.
         */
        targetIds: string[];
    }

    export interface BudgetsActionSsmActionDefinition {
        /**
         * The EC2 and RDS instance IDs.
         */
        instanceIds: string[];
        /**
         * The Region to run the ( SSM ) document.
         */
        region: string;
        /**
         * The action subType.
         */
        subtype: enums.budgets.BudgetsActionSsmActionDefinitionSubtype;
    }

    export interface BudgetsActionSubscriber {
        /**
         * The address that AWS sends budget notifications to, either an SNS topic or an email.
         *
         * When you create a subscriber, the value of `Address` can't contain line breaks.
         */
        address: string;
        /**
         * The type of notification that AWS sends to a subscriber.
         */
        type: enums.budgets.BudgetsActionSubscriberType;
    }

}

export namespace cassandra {
    export interface KeyspaceReplicationSpecification {
        /**
         * Specifies the AWS Regions that the keyspace is replicated in. You must specify at least two and up to six Regions, including the Region that the keyspace is being created in.
         */
        regionList?: enums.cassandra.KeyspaceRegionListItem[];
        /**
         * The options are:
         *
         * - `SINGLE_REGION` (optional)
         * - `MULTI_REGION`
         *
         * If no value is specified, the default is `SINGLE_REGION` . If `MULTI_REGION` is specified, `RegionList` is required.
         */
        replicationStrategy?: enums.cassandra.KeyspaceReplicationSpecificationReplicationStrategy;
    }

    /**
     * Represents configuration for auto scaling.
     */
    export interface TableAutoScalingSetting {
        /**
         * This optional parameter enables auto scaling for the table if set to `false` .
         */
        autoScalingDisabled?: boolean;
        /**
         * Manage costs by specifying the maximum amount of throughput to provision. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
         */
        maximumUnits?: number;
        /**
         * The minimum level of throughput the table should always be ready to support. The value must be between 1 and the max throughput per second quota for your account (40,000 by default).
         */
        minimumUnits?: number;
        /**
         * Amazon Keyspaces supports the `target tracking` auto scaling policy. With this policy, Amazon Keyspaces auto scaling ensures that the table's ratio of consumed to provisioned capacity stays at or near the target value that you specify. You define the target value as a percentage between 20 and 90.
         */
        scalingPolicy?: outputs.cassandra.TableScalingPolicy;
    }

    /**
     * Represents the read and write settings used for AutoScaling.
     */
    export interface TableAutoScalingSpecification {
        /**
         * The auto scaling settings for the table's read capacity.
         */
        readCapacityAutoScaling?: outputs.cassandra.TableAutoScalingSetting;
        /**
         * The auto scaling settings for the table's write capacity.
         */
        writeCapacityAutoScaling?: outputs.cassandra.TableAutoScalingSetting;
    }

    export interface TableBillingMode {
        /**
         * The billing mode for the table:
         *
         * - On-demand mode - `ON_DEMAND`
         * - Provisioned mode - `PROVISIONED`
         *
         * > If you choose `PROVISIONED` mode, then you also need to specify provisioned throughput (read and write capacity) for the table.
         *
         * Valid values: `ON_DEMAND` | `PROVISIONED`
         */
        mode: enums.cassandra.TableMode;
        /**
         * The provisioned read capacity and write capacity for the table. For more information, see [Provisioned throughput capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html#ReadWriteCapacityMode.Provisioned) in the *Amazon Keyspaces Developer Guide* .
         */
        provisionedThroughput?: outputs.cassandra.TableProvisionedThroughput;
    }

    export interface TableClusteringKeyColumn {
        /**
         * The name and data type of this clustering key column.
         */
        column: outputs.cassandra.TableColumn;
        /**
         * The order in which this column's data is stored:
         *
         * - `ASC` (default) - The column's data is stored in ascending order.
         * - `DESC` - The column's data is stored in descending order.
         */
        orderBy?: enums.cassandra.TableClusteringKeyColumnOrderBy;
    }

    export interface TableColumn {
        /**
         * The name of the column. For more information, see [Identifiers](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.elements.identifier) in the *Amazon Keyspaces Developer Guide* .
         */
        columnName: string;
        /**
         * The data type of the column. For more information, see [Data types](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) in the *Amazon Keyspaces Developer Guide* .
         */
        columnType: string;
    }

    /**
     * Represents the settings used to enable server-side encryption
     */
    export interface TableEncryptionSpecification {
        /**
         * The encryption at rest options for the table.
         *
         * - *AWS owned key* (default) - `AWS_OWNED_KMS_KEY`
         * - *Customer managed key* - `CUSTOMER_MANAGED_KMS_KEY`
         *
         * > If you choose `CUSTOMER_MANAGED_KMS_KEY` , a `kms_key_identifier` in the format of a key ARN is required.
         *
         * Valid values: `CUSTOMER_MANAGED_KMS_KEY` | `AWS_OWNED_KMS_KEY` .
         */
        encryptionType: enums.cassandra.TableEncryptionType;
        /**
         * Requires a `kms_key_identifier` in the format of a key ARN.
         */
        kmsKeyIdentifier?: string;
    }

    /**
     * Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits
     */
    export interface TableProvisionedThroughput {
        /**
         * The amount of read capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
         */
        readCapacityUnits: number;
        /**
         * The amount of write capacity that's provisioned for the table. For more information, see [Read/write capacity mode](https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html) in the *Amazon Keyspaces Developer Guide* .
         */
        writeCapacityUnits: number;
    }

    /**
     * Represents replica specifications.
     */
    export interface TableReplicaSpecification {
        /**
         * The read capacity auto scaling settings for the multi-Region table in the specified AWS Region.
         */
        readCapacityAutoScaling?: outputs.cassandra.TableAutoScalingSetting;
        /**
         * The provisioned read capacity units for the multi-Region table in the specified AWS Region.
         */
        readCapacityUnits?: number;
        /**
         * The AWS Region.
         */
        region: string;
    }

    /**
     * Represents scaling policy.
     */
    export interface TableScalingPolicy {
        /**
         * The auto scaling policy that scales a table based on the ratio of consumed to provisioned capacity.
         */
        targetTrackingScalingPolicyConfiguration?: outputs.cassandra.TableTargetTrackingScalingPolicyConfiguration;
    }

    /**
     * Represents configuration for target tracking scaling policy.
     */
    export interface TableTargetTrackingScalingPolicyConfiguration {
        /**
         * Specifies if `scale-in` is enabled.
         *
         * When auto scaling automatically decreases capacity for a table, the table *scales in* . When scaling policies are set, they can't scale in the table lower than its minimum capacity.
         */
        disableScaleIn?: boolean;
        /**
         * Specifies a `scale-in` cool down period.
         *
         * A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
         */
        scaleInCooldown?: number;
        /**
         * Specifies a scale out cool down period.
         *
         * A cooldown period in seconds between scaling activities that lets the table stabilize before another scaling activity starts.
         */
        scaleOutCooldown?: number;
        /**
         * Specifies the target value for the target tracking auto scaling policy.
         *
         * Amazon Keyspaces auto scaling scales up capacity automatically when traffic exceeds this target utilization rate, and then back down when it falls below the target. This ensures that the ratio of consumed capacity to provisioned capacity stays at or near this value. You define `targetValue` as a percentage. An `integer` between 20 and 90.
         */
        targetValue: number;
    }

}

export namespace ce {
    /**
     * A key-value pair to associate with a resource.
     */
    export interface AnomalyMonitorResourceTag {
        /**
         * The key name for the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface AnomalySubscriptionResourceTag {
        /**
         * The key name for the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    export interface AnomalySubscriptionSubscriber {
        /**
         * The email address or SNS Topic Amazon Resource Name (ARN), depending on the `Type` .
         */
        address: string;
        /**
         * Indicates if the subscriber accepts the notifications.
         */
        status?: enums.ce.AnomalySubscriptionSubscriberStatus;
        /**
         * The notification delivery channel.
         */
        type: enums.ce.AnomalySubscriptionSubscriberType;
    }

}

export namespace certificatemanager {
    export interface AccountExpiryEventsConfiguration {
        /**
         * This option specifies the number of days prior to certificate expiration when ACM starts generating `EventBridge` events. ACM sends one event per day per certificate until the certificate expires. By default, accounts receive events starting 45 days before certificate expiration.
         */
        daysBeforeExpiry?: number;
    }

}

export namespace chatbot {
}

export namespace cleanrooms {
    export interface AnalysisTemplateAnalysisParameter {
        /**
         * Optional. The default value that is applied in the analysis template. The member who can query can override this value in the query editor.
         */
        defaultValue?: string;
        /**
         * The name of the parameter. The name must use only alphanumeric, underscore (_), or hyphen (-) characters but cannot start or end with a hyphen.
         */
        name: string;
        /**
         * The type of parameter.
         */
        type: enums.cleanrooms.AnalysisTemplateAnalysisParameterType;
    }

    export interface AnalysisTemplateAnalysisSchema {
        /**
         * The tables referenced in the analysis schema.
         */
        referencedTables: string[];
    }

    export interface AnalysisTemplateAnalysisSource {
        /**
         * The query text.
         */
        text: string;
    }

    export interface CollaborationDataEncryptionMetadata {
        /**
         * Indicates whether encrypted tables can contain cleartext data ( `TRUE` ) or are to cryptographically process every column ( `FALSE` ).
         */
        allowCleartext: boolean;
        /**
         * Indicates whether Fingerprint columns can contain duplicate entries ( `TRUE` ) or are to contain only non-repeated values ( `FALSE` ).
         */
        allowDuplicates: boolean;
        /**
         * Indicates whether Fingerprint columns can be joined on any other Fingerprint column with a different name ( `TRUE` ) or can only be joined on Fingerprint columns of the same name ( `FALSE` ).
         */
        allowJoinsOnColumnsWithDifferentNames: boolean;
        /**
         * Indicates whether NULL values are to be copied as NULL to encrypted tables ( `TRUE` ) or cryptographically processed ( `FALSE` ).
         */
        preserveNulls: boolean;
    }

    export interface CollaborationMemberSpecification {
        /**
         * The identifier used to reference members of the collaboration. Currently only supports AWS account ID.
         */
        accountId: string;
        /**
         * The member's display name.
         */
        displayName: string;
        /**
         * The abilities granted to the collaboration member.
         *
         * *Allowed Values* : `CAN_QUERY` | `CAN_RECEIVE_RESULTS`
         */
        memberAbilities: enums.cleanrooms.CollaborationMemberAbility[];
        /**
         * The collaboration member's payment responsibilities set by the collaboration creator.
         *
         * If the collaboration creator hasn't speciﬁed anyone as the member paying for query compute costs, then the member who can query is the default payer.
         */
        paymentConfiguration?: outputs.cleanrooms.CollaborationPaymentConfiguration;
    }

    export interface CollaborationPaymentConfiguration {
        /**
         * The collaboration member's payment responsibilities set by the collaboration creator for query compute costs.
         */
        queryCompute: outputs.cleanrooms.CollaborationQueryComputePaymentConfig;
    }

    export interface CollaborationQueryComputePaymentConfig {
        /**
         * Indicates whether the collaboration creator has configured the collaboration member to pay for query compute costs ( `TRUE` ) or has not configured the collaboration member to pay for query compute costs ( `FALSE` ).
         *
         * Exactly one member can be configured to pay for query compute costs. An error is returned if the collaboration creator sets a `TRUE` value for more than one member in the collaboration.
         *
         * If the collaboration creator hasn't specified anyone as the member paying for query compute costs, then the member who can query is the default payer. An error is returned if the collaboration creator sets a `FALSE` value for the member who can query.
         */
        isResponsible: boolean;
    }

    export interface ConfiguredTableAggregateColumn {
        columnNames: string[];
        function: enums.cleanrooms.ConfiguredTableAggregateFunctionName;
    }

    export interface ConfiguredTableAggregationConstraint {
        columnName: string;
        minimum: number;
        type: enums.cleanrooms.ConfiguredTableAggregationType;
    }

    export interface ConfiguredTableAnalysisRule {
        /**
         * A policy that describes the associated data usage limitations.
         */
        policy: outputs.cleanrooms.ConfiguredTableAnalysisRulePolicy;
        /**
         * The type of analysis rule.
         */
        type: enums.cleanrooms.ConfiguredTableAnalysisRuleType;
    }

    export interface ConfiguredTableAnalysisRuleAggregation {
        aggregateColumns: outputs.cleanrooms.ConfiguredTableAggregateColumn[];
        allowedJoinOperators?: enums.cleanrooms.ConfiguredTableJoinOperator[];
        dimensionColumns: string[];
        joinColumns: string[];
        joinRequired?: enums.cleanrooms.ConfiguredTableJoinRequiredOption;
        outputConstraints: outputs.cleanrooms.ConfiguredTableAggregationConstraint[];
        scalarFunctions: enums.cleanrooms.ConfiguredTableScalarFunctions[];
    }

    export interface ConfiguredTableAnalysisRuleCustom {
        allowedAnalyses: string[];
        allowedAnalysisProviders?: string[];
        differentialPrivacy?: outputs.cleanrooms.ConfiguredTableDifferentialPrivacy;
    }

    export interface ConfiguredTableAnalysisRuleList {
        allowedJoinOperators?: enums.cleanrooms.ConfiguredTableJoinOperator[];
        joinColumns: string[];
        listColumns: string[];
    }

    export interface ConfiguredTableAnalysisRulePolicy {
        /**
         * Controls on the query specifications that can be run on a configured table.
         */
        v1: outputs.cleanrooms.ConfiguredTableAnalysisRulePolicyV10Properties | outputs.cleanrooms.ConfiguredTableAnalysisRulePolicyV11Properties | outputs.cleanrooms.ConfiguredTableAnalysisRulePolicyV12Properties;
    }

    export interface ConfiguredTableAnalysisRulePolicyV10Properties {
        list: outputs.cleanrooms.ConfiguredTableAnalysisRuleList;
    }

    export interface ConfiguredTableAnalysisRulePolicyV11Properties {
        aggregation: outputs.cleanrooms.ConfiguredTableAnalysisRuleAggregation;
    }

    export interface ConfiguredTableAnalysisRulePolicyV12Properties {
        custom: outputs.cleanrooms.ConfiguredTableAnalysisRuleCustom;
    }

    export interface ConfiguredTableDifferentialPrivacy {
        columns: outputs.cleanrooms.ConfiguredTableDifferentialPrivacyColumn[];
    }

    export interface ConfiguredTableDifferentialPrivacyColumn {
        name: string;
    }

    export interface ConfiguredTableGlueTableReference {
        /**
         * The name of the database the AWS Glue table belongs to.
         */
        databaseName: string;
        /**
         * The name of the AWS Glue table.
         */
        tableName: string;
    }

    export interface ConfiguredTableTableReference {
        /**
         * If present, a reference to the AWS Glue table referred to by this table reference.
         */
        glue: outputs.cleanrooms.ConfiguredTableGlueTableReference;
    }

    export interface MembershipPaymentConfiguration {
        /**
         * The payment responsibilities accepted by the collaboration member for query compute costs.
         */
        queryCompute: outputs.cleanrooms.MembershipQueryComputePaymentConfig;
    }

    export interface MembershipProtectedQueryOutputConfiguration {
        /**
         * Required configuration for a protected query with an `S3` output type.
         */
        s3: outputs.cleanrooms.MembershipProtectedQueryS3OutputConfiguration;
    }

    export interface MembershipProtectedQueryResultConfiguration {
        /**
         * Configuration for protected query results.
         */
        outputConfiguration: outputs.cleanrooms.MembershipProtectedQueryOutputConfiguration;
        /**
         * The unique ARN for an IAM role that is used by AWS Clean Rooms to write protected query results to the result location, given by the member who can receive results.
         */
        roleArn?: string;
    }

    export interface MembershipProtectedQueryS3OutputConfiguration {
        /**
         * The S3 bucket to unload the protected query results.
         */
        bucket: string;
        /**
         * The S3 prefix to unload the protected query results.
         */
        keyPrefix?: string;
        /**
         * Intended file format of the result.
         */
        resultFormat: enums.cleanrooms.MembershipResultFormat;
    }

    export interface MembershipQueryComputePaymentConfig {
        /**
         * Indicates whether the collaboration member has accepted to pay for query compute costs ( `TRUE` ) or has not accepted to pay for query compute costs ( `FALSE` ).
         *
         * If the collaboration creator has not specified anyone to pay for query compute costs, then the member who can query is the default payer.
         *
         * An error message is returned for the following reasons:
         *
         * - If you set the value to `FALSE` but you are responsible to pay for query compute costs.
         * - If you set the value to `TRUE` but you are not responsible to pay for query compute costs.
         */
        isResponsible: boolean;
    }

    /**
     * Specifies the epislon and noise parameters for the privacy budget template.
     */
    export interface ParametersProperties {
        /**
         * The epsilon value that you want to use.
         */
        epsilon: number;
        /**
         * Noise added per query is measured in terms of the number of users whose contributions you want to obscure. This value governs the rate at which the privacy budget is depleted.
         */
        usersNoisePerQuery: number;
    }

}

export namespace cleanroomsml {
    export interface TrainingDatasetColumnSchema {
        /**
         * The name of a column.
         */
        columnName: string;
        /**
         * The data type of column.
         */
        columnTypes: enums.cleanroomsml.TrainingDatasetColumnType[];
    }

    export interface TrainingDatasetDataSource {
        /**
         * A GlueDataSource object that defines the catalog ID, database name, and table name for the training data.
         */
        glueDataSource: outputs.cleanroomsml.TrainingDatasetGlueDataSource;
    }

    export interface TrainingDatasetDataset {
        /**
         * A DatasetInputConfig object that defines the data source and schema mapping.
         */
        inputConfig: outputs.cleanroomsml.TrainingDatasetDatasetInputConfig;
        /**
         * What type of information is found in the dataset.
         */
        type: enums.cleanroomsml.TrainingDatasetDatasetType;
    }

    export interface TrainingDatasetDatasetInputConfig {
        /**
         * A DataSource object that specifies the Glue data source for the training data.
         */
        dataSource: outputs.cleanroomsml.TrainingDatasetDataSource;
        /**
         * The schema information for the training data.
         */
        schema: outputs.cleanroomsml.TrainingDatasetColumnSchema[];
    }

    export interface TrainingDatasetGlueDataSource {
        /**
         * The Glue catalog that contains the training data.
         */
        catalogId?: string;
        /**
         * The Glue database that contains the training data.
         */
        databaseName: string;
        /**
         * The Glue table that contains the training data.
         */
        tableName: string;
    }

}

export namespace cloudformation {
    export interface HookVersionLoggingConfig {
        /**
         * The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
         */
        logGroupName?: string;
        /**
         * The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
         */
        logRoleArn?: string;
    }

    /**
     * Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations.
     */
    export interface ManagedExecutionProperties {
        /**
         * When `true` , StackSets performs non-conflicting operations concurrently and queues conflicting operations. After conflicting operations finish, StackSets starts queued operations in request order.
         *
         * > If there are already running or queued operations, StackSets queues all incoming operations even if they are non-conflicting.
         * > 
         * > You can't modify your stack set's execution configuration while there are running or queued operations for that stack set. 
         *
         * When `false` (default), StackSets performs one operation at a time in request order.
         */
        active?: boolean;
    }

    export interface ResourceVersionLoggingConfig {
        /**
         * The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
         */
        logGroupName?: string;
        /**
         * The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
         */
        logRoleArn?: string;
    }

    export interface StackOutput {
        /**
         * User defined description associated with the output.
         */
        description?: string;
        /**
         * The name of the export associated with the output.
         */
        exportName?: string;
        /**
         * The key associated with the output.
         */
        outputKey?: string;
        /**
         * The value associated with the output.
         */
        outputValue?: string;
    }

    export interface StackSetAutoDeployment {
        /**
         * If set to true, StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.
         */
        enabled?: boolean;
        /**
         * If set to true, stack resources are retained when an account is removed from a target organization or OU. If set to false, stack resources are deleted. Specify only if Enabled is set to True.
         */
        retainStacksOnAccountRemoval?: boolean;
    }

    /**
     *  The AWS OrganizationalUnitIds or Accounts for which to create stack instances in the specified Regions.
     */
    export interface StackSetDeploymentTargets {
        /**
         * The filter type you want to apply on organizational units and accounts.
         */
        accountFilterType?: enums.cloudformation.StackSetDeploymentTargetsAccountFilterType;
        /**
         * AWS accounts that you want to create stack instances in the specified Region(s) for.
         */
        accounts?: string[];
        /**
         * Returns the value of the AccountsUrl property.
         */
        accountsUrl?: string;
        /**
         * The organization root ID or organizational unit (OU) IDs to which StackSets deploys.
         */
        organizationalUnitIds?: string[];
    }

    /**
     * The user-specified preferences for how AWS CloudFormation performs a stack set operation.
     */
    export interface StackSetOperationPreferences {
        /**
         * The number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region. If the operation is stopped in a Region, AWS CloudFormation doesn't attempt the operation in any subsequent Regions.
         *
         * Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` (but not both).
         */
        failureToleranceCount?: number;
        /**
         * The percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region. If the operation is stopped in a Region, AWS CloudFormation doesn't attempt the operation in any subsequent Regions.
         *
         * When calculating the number of accounts based on the specified percentage, AWS CloudFormation rounds *down* to the next whole number.
         *
         * Conditional: You must specify either `FailureToleranceCount` or `FailureTolerancePercentage` , but not both.
         */
        failureTolerancePercentage?: number;
        /**
         * The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of `FailureToleranceCount` . `MaxConcurrentCount` is at most one more than the `FailureToleranceCount` .
         *
         * Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
         *
         * Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
         */
        maxConcurrentCount?: number;
        /**
         * The maximum percentage of accounts in which to perform this operation at one time.
         *
         * When calculating the number of accounts based on the specified percentage, AWS CloudFormation rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, CloudFormation sets the number as one instead.
         *
         * Note that this setting lets you specify the *maximum* for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
         *
         * Conditional: You must specify either `MaxConcurrentCount` or `MaxConcurrentPercentage` , but not both.
         */
        maxConcurrentPercentage?: number;
        /**
         * The concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time.
         */
        regionConcurrencyType?: enums.cloudformation.StackSetRegionConcurrencyType;
        /**
         * The order of the Regions where you want to perform the stack operation.
         *
         * > `RegionOrder` isn't followed if `AutoDeployment` is enabled.
         */
        regionOrder?: string[];
    }

    export interface StackSetParameter {
        /**
         * The key associated with the parameter. If you don't specify a key and value for a particular parameter, AWS CloudFormation uses the default value that is specified in your template.
         */
        parameterKey: string;
        /**
         * The input value associated with the parameter.
         */
        parameterValue: string;
    }

    /**
     * Stack instances in some specific accounts and Regions.
     */
    export interface StackSetStackInstances {
        /**
         * The AWS `OrganizationalUnitIds` or `Accounts` for which to create stack instances in the specified Regions.
         */
        deploymentTargets: outputs.cloudformation.StackSetDeploymentTargets;
        /**
         * A list of stack set parameters whose values you want to override in the selected stack instances.
         */
        parameterOverrides?: outputs.cloudformation.StackSetParameter[];
        /**
         * The names of one or more Regions where you want to create stack instances using the specified AWS account(s).
         */
        regions: string[];
    }

    export interface TypeActivationLoggingConfig {
        /**
         * The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.
         */
        logGroupName?: string;
        /**
         * The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.
         */
        logRoleArn?: string;
    }

}

export namespace cloudfront {
    export interface CachePolicyConfig {
        /**
         * A comment to describe the cache policy. The comment cannot be longer than 128 characters.
         */
        comment?: string;
        /**
         * The default amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated. CloudFront uses this value as the object's time to live (TTL) only when the origin does *not* send `Cache-Control` or `Expires` headers with the object. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide* .
         *
         * The default value for this field is 86400 seconds (one day). If the value of `MinTTL` is more than 86400 seconds, then the default value for this field is the same as the value of `MinTTL` .
         */
        defaultTtl: number;
        /**
         * The maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated. CloudFront uses this value only when the origin sends `Cache-Control` or `Expires` headers with the object. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide* .
         *
         * The default value for this field is 31536000 seconds (one year). If the value of `MinTTL` or `DefaultTTL` is more than 31536000 seconds, then the default value for this field is the same as the value of `DefaultTTL` .
         */
        maxTtl: number;
        /**
         * The minimum amount of time, in seconds, that you want objects to stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide* .
         */
        minTtl: number;
        /**
         * A unique name to identify the cache policy.
         */
        name: string;
        /**
         * The HTTP headers, cookies, and URL query strings to include in the cache key. The values included in the cache key are also included in requests that CloudFront sends to the origin.
         */
        parametersInCacheKeyAndForwardedToOrigin: outputs.cloudfront.CachePolicyParametersInCacheKeyAndForwardedToOrigin;
    }

    export interface CachePolicyCookiesConfig {
        /**
         * Determines whether any cookies in viewer requests are included in the cache key and in requests that CloudFront sends to the origin. Valid values are:
         *
         * - `none` – No cookies in viewer requests are included in the cache key or in requests that CloudFront sends to the origin. Even when this field is set to `none` , any cookies that are listed in an `OriginRequestPolicy` *are* included in origin requests.
         * - `whitelist` – Only the cookies in viewer requests that are listed in the `CookieNames` type are included in the cache key and in requests that CloudFront sends to the origin.
         * - `allExcept` – All cookies in viewer requests are included in the cache key and in requests that CloudFront sends to the origin, **except** for those that are listed in the `CookieNames` type, which are not included.
         * - `all` – All cookies in viewer requests are included in the cache key and in requests that CloudFront sends to the origin.
         */
        cookieBehavior: string;
        /**
         * Contains a list of cookie names.
         */
        cookies?: string[];
    }

    export interface CachePolicyHeadersConfig {
        /**
         * Determines whether any HTTP headers are included in the cache key and in requests that CloudFront sends to the origin. Valid values are:
         *
         * - `none` – No HTTP headers are included in the cache key or in requests that CloudFront sends to the origin. Even when this field is set to `none` , any headers that are listed in an `OriginRequestPolicy` *are* included in origin requests.
         * - `whitelist` – Only the HTTP headers that are listed in the `Headers` type are included in the cache key and in requests that CloudFront sends to the origin.
         */
        headerBehavior: string;
        /**
         * Contains a list of HTTP header names.
         */
        headers?: string[];
    }

    export interface CachePolicyParametersInCacheKeyAndForwardedToOrigin {
        /**
         * An object that determines whether any cookies in viewer requests (and if so, which cookies) are included in the cache key and in requests that CloudFront sends to the origin.
         */
        cookiesConfig: outputs.cloudfront.CachePolicyCookiesConfig;
        /**
         * A flag that can affect whether the `Accept-Encoding` HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
         *
         * This field is related to the `EnableAcceptEncodingGzip` field. If one or both of these fields is `true` *and* the viewer request includes the `Accept-Encoding` header, then CloudFront does the following:
         *
         * - Normalizes the value of the viewer's `Accept-Encoding` header
         * - Includes the normalized header in the cache key
         * - Includes the normalized header in the request to the origin, if a request is necessary
         *
         * For more information, see [Compression support](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-policy-compressed-objects) in the *Amazon CloudFront Developer Guide* .
         *
         * If you set this value to `true` , and this cache behavior also has an origin request policy attached, do not include the `Accept-Encoding` header in the origin request policy. CloudFront always includes the `Accept-Encoding` header in origin requests when the value of this field is `true` , so including this header in an origin request policy has no effect.
         *
         * If both of these fields are `false` , then CloudFront treats the `Accept-Encoding` header the same as any other HTTP header in the viewer request. By default, it's not included in the cache key and it's not included in origin requests. In this case, you can manually add `Accept-Encoding` to the headers whitelist like any other HTTP header.
         */
        enableAcceptEncodingBrotli?: boolean;
        /**
         * A flag that can affect whether the `Accept-Encoding` HTTP header is included in the cache key and included in requests that CloudFront sends to the origin.
         *
         * This field is related to the `EnableAcceptEncodingBrotli` field. If one or both of these fields is `true` *and* the viewer request includes the `Accept-Encoding` header, then CloudFront does the following:
         *
         * - Normalizes the value of the viewer's `Accept-Encoding` header
         * - Includes the normalized header in the cache key
         * - Includes the normalized header in the request to the origin, if a request is necessary
         *
         * For more information, see [Compression support](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-policy-compressed-objects) in the *Amazon CloudFront Developer Guide* .
         *
         * If you set this value to `true` , and this cache behavior also has an origin request policy attached, do not include the `Accept-Encoding` header in the origin request policy. CloudFront always includes the `Accept-Encoding` header in origin requests when the value of this field is `true` , so including this header in an origin request policy has no effect.
         *
         * If both of these fields are `false` , then CloudFront treats the `Accept-Encoding` header the same as any other HTTP header in the viewer request. By default, it's not included in the cache key and it's not included in origin requests. In this case, you can manually add `Accept-Encoding` to the headers whitelist like any other HTTP header.
         */
        enableAcceptEncodingGzip: boolean;
        /**
         * An object that determines whether any HTTP headers (and if so, which headers) are included in the cache key and in requests that CloudFront sends to the origin.
         */
        headersConfig: outputs.cloudfront.CachePolicyHeadersConfig;
        /**
         * An object that determines whether any URL query strings in viewer requests (and if so, which query strings) are included in the cache key and in requests that CloudFront sends to the origin.
         */
        queryStringsConfig: outputs.cloudfront.CachePolicyQueryStringsConfig;
    }

    export interface CachePolicyQueryStringsConfig {
        /**
         * Determines whether any URL query strings in viewer requests are included in the cache key and in requests that CloudFront sends to the origin. Valid values are:
         *
         * - `none` – No query strings in viewer requests are included in the cache key or in requests that CloudFront sends to the origin. Even when this field is set to `none` , any query strings that are listed in an `OriginRequestPolicy` *are* included in origin requests.
         * - `whitelist` – Only the query strings in viewer requests that are listed in the `QueryStringNames` type are included in the cache key and in requests that CloudFront sends to the origin.
         * - `allExcept` – All query strings in viewer requests are included in the cache key and in requests that CloudFront sends to the origin, **except** those that are listed in the `QueryStringNames` type, which are not included.
         * - `all` – All query strings in viewer requests are included in the cache key and in requests that CloudFront sends to the origin.
         */
        queryStringBehavior: string;
        /**
         * Contains a list of query string names.
         */
        queryStrings?: string[];
    }

    export interface CloudFrontOriginAccessIdentityConfig {
        /**
         * A comment to describe the origin access identity. The comment cannot be longer than 128 characters.
         */
        comment: string;
    }

    export interface ContinuousDeploymentPolicyConfig {
        /**
         * A Boolean that indicates whether this continuous deployment policy is enabled (in effect). When this value is `true` , this policy is enabled and in effect. When this value is `false` , this policy is not enabled and has no effect.
         */
        enabled: boolean;
        /**
         * This configuration determines which HTTP requests are sent to the staging distribution. If the HTTP request contains a header and value that matches what you specify here, the request is sent to the staging distribution. Otherwise the request is sent to the primary distribution.
         */
        singleHeaderPolicyConfig?: outputs.cloudfront.ContinuousDeploymentPolicyConfigSingleHeaderPolicyConfigProperties;
        /**
         * This configuration determines the percentage of HTTP requests that are sent to the staging distribution.
         */
        singleWeightPolicyConfig?: outputs.cloudfront.ContinuousDeploymentPolicyConfigSingleWeightPolicyConfigProperties;
        /**
         * The CloudFront domain name of the staging distribution. For example: `d111111abcdef8.cloudfront.net` .
         */
        stagingDistributionDnsNames: string[];
        /**
         * Contains the parameters for routing production traffic from your primary to staging distributions.
         */
        trafficConfig?: outputs.cloudfront.ContinuousDeploymentPolicyTrafficConfig;
        /**
         * The type of traffic configuration.
         */
        type?: enums.cloudfront.ContinuousDeploymentPolicyConfigType;
    }

    /**
     * This configuration determines which HTTP requests are sent to the staging distribution. If the HTTP request contains a header and value that matches what you specify here, the request is sent to the staging distribution. Otherwise the request is sent to the primary distribution.
     */
    export interface ContinuousDeploymentPolicyConfigSingleHeaderPolicyConfigProperties {
        header: string;
        value: string;
    }

    /**
     * This configuration determines the percentage of HTTP requests that are sent to the staging distribution.
     */
    export interface ContinuousDeploymentPolicyConfigSingleWeightPolicyConfigProperties {
        sessionStickinessConfig?: outputs.cloudfront.ContinuousDeploymentPolicySessionStickinessConfig;
        weight: number;
    }

    export interface ContinuousDeploymentPolicySessionStickinessConfig {
        /**
         * The amount of time after which you want sessions to cease if no requests are received. Allowed values are 300–3600 seconds (5–60 minutes).
         */
        idleTtl: number;
        /**
         * The maximum amount of time to consider requests from the viewer as being part of the same session. Allowed values are 300–3600 seconds (5–60 minutes).
         */
        maximumTtl: number;
    }

    export interface ContinuousDeploymentPolicySingleHeaderConfig {
        /**
         * The request header name that you want CloudFront to send to your staging distribution. The header must contain the prefix `aws-cf-cd-` .
         */
        header: string;
        /**
         * The request header value.
         */
        value: string;
    }

    export interface ContinuousDeploymentPolicySingleWeightConfig {
        /**
         * Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to your staging distribution, while others are sent to your primary distribution. Define the session duration using TTL values.
         */
        sessionStickinessConfig?: outputs.cloudfront.ContinuousDeploymentPolicySessionStickinessConfig;
        /**
         * The percentage of traffic to send to a staging distribution, expressed as a decimal number between 0 and 0.15. For example, a value of 0.10 means 10% of traffic is sent to the staging distribution.
         */
        weight: number;
    }

    export interface ContinuousDeploymentPolicyTrafficConfig {
        /**
         * Determines which HTTP requests are sent to the staging distribution.
         */
        singleHeaderConfig?: outputs.cloudfront.ContinuousDeploymentPolicySingleHeaderConfig;
        /**
         * Contains the percentage of traffic to send to the staging distribution.
         */
        singleWeightConfig?: outputs.cloudfront.ContinuousDeploymentPolicySingleWeightConfig;
        /**
         * The type of traffic configuration.
         */
        type: enums.cloudfront.ContinuousDeploymentPolicyTrafficConfigType;
    }

    /**
     * A complex type that describes how CloudFront processes requests.
     *  You must create at least as many cache behaviors (including the default cache behavior) as you have origins if you want CloudFront to serve objects from all of the origins. Each cache behavior specifies the one origin from which you want CloudFront to get objects. If you have two origins and only the default cache behavior, the default cache behavior will cause CloudFront to get objects from one of the origins, but the other origin is never used.
     *  For the current quota (formerly known as limit) on the number of cache behaviors that you can add to a distribution, see [Quotas](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html) in the *Amazon CloudFront Developer Guide*.
     *  If you don't want to specify any cache behaviors, include only an empty ``CacheBehaviors`` element. Don't include an empty ``CacheBehavior`` element because this is invalid.
     *  To delete all cache behaviors in an existing distribution, update the distribution configuration and include only an empty ``CacheBehaviors`` element.
     *  To add, change, or remove one or more cache behaviors, update the distribution configuration and specify all of the cache behaviors that you want to include in the updated distribution.
     *  For more information about cache behaviors, see [Cache Behavior Settings](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior) in the *Amazon CloudFront Developer Guide*.
     */
    export interface DistributionCacheBehavior {
        /**
         * A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:
         *   +  CloudFront forwards only ``GET`` and ``HEAD`` requests.
         *   +  CloudFront forwards only ``GET``, ``HEAD``, and ``OPTIONS`` requests.
         *   +  CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST``, and ``DELETE`` requests.
         *   
         *  If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.
         */
        allowedMethods?: string[];
        /**
         * The unique identifier of the cache policy that is attached to this cache behavior. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  A ``CacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``. We recommend that you use a ``CachePolicyId``.
         */
        cachePolicyId?: string;
        /**
         * A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices:
         *   +  CloudFront caches responses to ``GET`` and ``HEAD`` requests.
         *   +  CloudFront caches responses to ``GET``, ``HEAD``, and ``OPTIONS`` requests.
         *   
         *  If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
         */
        cachedMethods?: string[];
        /**
         * Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify true; if not, specify false. For more information, see [Serving Compressed Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html) in the *Amazon CloudFront Developer Guide*.
         */
        compress?: boolean;
        /**
         * This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as ``Cache-Control max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.
         */
        defaultTtl?: number;
        /**
         * The value of ``ID`` for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for this cache behavior.
         */
        fieldLevelEncryptionId?: string;
        /**
         * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. For more information, see [Working with policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  If you want to include values in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  A ``CacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``. We recommend that you use a ``CachePolicyId``.
         *  A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
         */
        forwardedValues?: outputs.cloudfront.DistributionForwardedValues;
        /**
         * A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to the ``LIVE`` stage to associate them with a cache behavior.
         */
        functionAssociations?: outputs.cloudfront.DistributionFunctionAssociation[];
        /**
         * A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.
         */
        lambdaFunctionAssociations?: outputs.cloudfront.DistributionLambdaFunctionAssociation[];
        /**
         * This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as ``Cache-Control max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.
         */
        maxTtl?: number;
        /**
         * This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.
         *  You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward all headers to your origin (under ``Headers``, if you specify ``1`` for ``Quantity`` and ``*`` for ``Name``).
         */
        minTtl?: number;
        /**
         * The unique identifier of the origin request policy that is attached to this cache behavior. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html) in the *Amazon CloudFront Developer Guide*.
         */
        originRequestPolicyId?: string;
        /**
         * The pattern (for example, ``images/*.jpg``) that specifies which requests to apply the behavior to. When CloudFront receives a viewer request, the requested path is compared with path patterns in the order in which cache behaviors are listed in the distribution.
         *   You can optionally include a slash (``/``) at the beginning of the path pattern. For example, ``/images/*.jpg``. CloudFront behavior is the same with or without the leading ``/``.
         *   The path pattern for the default cache behavior is ``*`` and cannot be changed. If the request for an object does not match the path pattern for any cache behaviors, CloudFront applies the behavior in the default cache behavior.
         *  For more information, see [Path Pattern](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern) in the *Amazon CloudFront Developer Guide*.
         */
        pathPattern: string;
        /**
         * The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information, see [Real-time logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the *Amazon CloudFront Developer Guide*.
         */
        realtimeLogConfigArn?: string;
        /**
         * The identifier for a response headers policy.
         */
        responseHeadersPolicyId?: string;
        /**
         * Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify ``true``; if not, specify ``false``. If you specify ``true`` for ``SmoothStreaming``, you can still distribute other content using this cache behavior if the content matches the value of ``PathPattern``.
         */
        smoothStreaming?: boolean;
        /**
         * The value of ``ID`` for the origin that you want CloudFront to route requests to when they match this cache behavior.
         */
        targetOriginId: string;
        /**
         * A list of key groups that CloudFront can use to validate signed URLs or signed cookies.
         *  When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon CloudFront Developer Guide*.
         */
        trustedKeyGroups?: string[];
        /**
         * We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners``.
         *   A list of AWS-account IDs whose public keys CloudFront can use to validate signed URLs or signed cookies.
         *  When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with the private key of a CloudFront key pair in the trusted signer's AWS-account. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon CloudFront Developer Guide*.
         */
        trustedSigners?: string[];
        /**
         * The protocol that viewers can use to access the files in the origin specified by ``TargetOriginId`` when a request matches the path pattern in ``PathPattern``. You can specify the following options:
         *   +   ``allow-all``: Viewers can use HTTP or HTTPS.
         *   +   ``redirect-to-https``: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.
         *   +   ``https-only``: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).
         *   
         *  For more information about requiring the HTTPS protocol, see [Requiring HTTPS Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html) in the *Amazon CloudFront Developer Guide*.
         *   The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see [Managing Cache Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.
         */
        viewerProtocolPolicy: string;
    }

    /**
     * A distribution configuration.
     */
    export interface DistributionConfig {
        /**
         * A complex type that contains information about CNAMEs (alternate domain names), if any, for this distribution.
         */
        aliases?: string[];
        /**
         * A complex type that contains zero or more ``CacheBehavior`` elements.
         */
        cacheBehaviors?: outputs.cloudfront.DistributionCacheBehavior[];
        cnames?: string[];
        /**
         * A comment to describe the distribution. The comment cannot be longer than 128 characters.
         */
        comment?: string;
        /**
         * The identifier of a continuous deployment policy. For more information, see ``CreateContinuousDeploymentPolicy``.
         */
        continuousDeploymentPolicyId?: string;
        /**
         * A complex type that controls the following:
         *   +  Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.
         *   +  How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
         *   
         *  For more information about custom error pages, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the *Amazon CloudFront Developer Guide*.
         */
        customErrorResponses?: outputs.cloudfront.DistributionCustomErrorResponse[];
        customOrigin?: outputs.cloudfront.DistributionLegacyCustomOrigin;
        /**
         * A complex type that describes the default cache behavior if you don't specify a ``CacheBehavior`` element or if files don't match any of the values of ``PathPattern`` in ``CacheBehavior`` elements. You must create exactly one default cache behavior.
         */
        defaultCacheBehavior: outputs.cloudfront.DistributionDefaultCacheBehavior;
        /**
         * The object that you want CloudFront to request from your origin (for example, ``index.html``) when a viewer requests the root URL for your distribution (``https://www.example.com``) instead of an object in your distribution (``https://www.example.com/product-description.html``). Specifying a default root object avoids exposing the contents of your distribution.
         *  Specify only the object name, for example, ``index.html``. Don't add a ``/`` before the object name.
         *  If you don't want to specify a default root object when you create a distribution, include an empty ``DefaultRootObject`` element.
         *  To delete the default root object from an existing distribution, update the distribution configuration and include an empty ``DefaultRootObject`` element.
         *  To replace the default root object, update the distribution configuration and specify the new object.
         *  For more information about the default root object, see [Creating a Default Root Object](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DefaultRootObject.html) in the *Amazon CloudFront Developer Guide*.
         */
        defaultRootObject?: string;
        /**
         * From this field, you can enable or disable the selected distribution.
         */
        enabled: boolean;
        /**
         * (Optional) Specify the maximum HTTP version(s) that you want viewers to use to communicate with CF. The default value for new distributions is ``http1.1``.
         *  For viewers and CF to use HTTP/2, viewers must support TLSv1.2 or later, and must support Server Name Indication (SNI).
         *  For viewers and CF to use HTTP/3, viewers must support TLSv1.3 and Server Name Indication (SNI). CF supports HTTP/3 connection migration to allow the viewer to switch networks without losing connection. For more information about connection migration, see [Connection Migration](https://docs.aws.amazon.com/https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-migration) at RFC 9000. For more information about supported TLSv1.3 ciphers, see [Supported protocols and ciphers between viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html).
         */
        httpVersion?: string;
        /**
         * If you want CloudFront to respond to IPv6 DNS requests with an IPv6 address for your distribution, specify ``true``. If you specify ``false``, CloudFront responds to IPv6 DNS requests with the DNS response code ``NOERROR`` and with no IP addresses. This allows viewers to submit a second request, for an IPv4 address for your distribution.
         *  In general, you should enable IPv6 if you have users on IPv6 networks who want to access your content. However, if you're using signed URLs or signed cookies to restrict access to your content, and if you're using a custom policy that includes the ``IpAddress`` parameter to restrict the IP addresses that can access your content, don't enable IPv6. If you want to restrict access to some content by IP address and not restrict access to other content (or restrict access but not by IP address), you can create two distributions. For more information, see [Creating a Signed URL Using a Custom Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-custom-policy.html) in the *Amazon CloudFront Developer Guide*.
         *  If you're using an R53AWSIntlong alias resource record set to route traffic to your CloudFront distribution, you need to create a second alias resource record set when both of the following are true:
         *   +  You enable IPv6 for the distribution
         *   +  You're using alternate domain names in the URLs for your objects
         *   
         *  For more information, see [Routing Traffic to an Amazon CloudFront Web Distribution by Using Your Domain Name](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html) in the *Developer Guide*.
         *  If you created a CNAME resource record set, either with R53AWSIntlong or with another DNS service, you don't need to make any changes. A CNAME record will route traffic to your distribution regardless of the IP address format of the viewer request.
         */
        ipv6Enabled?: boolean;
        /**
         * A complex type that controls whether access logs are written for the distribution.
         *  For more information about logging, see [Access Logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html) in the *Amazon CloudFront Developer Guide*.
         */
        logging?: outputs.cloudfront.DistributionLogging;
        /**
         * A complex type that contains information about origin groups for this distribution.
         */
        originGroups?: outputs.cloudfront.DistributionOriginGroups;
        /**
         * A complex type that contains information about origins for this distribution.
         */
        origins?: outputs.cloudfront.DistributionOrigin[];
        /**
         * The price class that corresponds with the maximum price that you want to pay for CloudFront service. If you specify ``PriceClass_All``, CloudFront responds to requests for your objects from all CloudFront edge locations.
         *  If you specify a price class other than ``PriceClass_All``, CloudFront serves your objects from the CloudFront edge location that has the lowest latency among the edge locations in your price class. Viewers who are in or near regions that are excluded from your specified price class may encounter slower performance.
         *  For more information about price classes, see [Choosing the Price Class for a CloudFront Distribution](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html) in the *Amazon CloudFront Developer Guide*. For information about CloudFront pricing, including how price classes (such as Price Class 100) map to CloudFront regions, see [Amazon CloudFront Pricing](https://docs.aws.amazon.com/cloudfront/pricing/).
         */
        priceClass?: string;
        /**
         * A complex type that identifies ways in which you want to restrict distribution of your content.
         */
        restrictions?: outputs.cloudfront.DistributionRestrictions;
        s3Origin?: outputs.cloudfront.DistributionLegacyS3Origin;
        /**
         * A Boolean that indicates whether this is a staging distribution. When this value is ``true``, this is a staging distribution. When this value is ``false``, this is not a staging distribution.
         */
        staging?: boolean;
        /**
         * A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.
         */
        viewerCertificate?: outputs.cloudfront.DistributionViewerCertificate;
        /**
         * A unique identifier that specifies the WAF web ACL, if any, to associate with this distribution. To specify a web ACL created using the latest version of WAF, use the ACL ARN, for example ``arn:aws:wafv2:us-east-1:123456789012:global/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a``. To specify a web ACL created using WAF Classic, use the ACL ID, for example ``473e64fd-f30b-4765-81a0-62ad96dd167a``.
         *   WAF is a web application firewall that lets you monitor the HTTP and HTTPS requests that are forwarded to CloudFront, and lets you control access to your content. Based on conditions that you specify, such as the IP addresses that requests originate from or the values of query strings, CloudFront responds to requests either with the requested content or with an HTTP 403 status code (Forbidden). You can also configure CloudFront to return a custom error page when a request is blocked. For more information about WAF, see the [Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html).
         */
        webAclId?: string;
    }

    /**
     * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
     *  If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*.
     *  If you want to send cookies to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.
     *  A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see [How CloudFront Forwards, Caches, and Logs Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the *Amazon CloudFront Developer Guide*.
     */
    export interface DistributionCookies {
        /**
         * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
         *  If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*.
         *  If you want to send cookies to the origin but not include them in the cache key, use origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.
         *  Specifies which cookies to forward to the origin for this cache behavior: all, none, or the list of cookies specified in the ``WhitelistedNames`` complex type.
         *  Amazon S3 doesn't process cookies. When the cache behavior is forwarding requests to an Amazon S3 origin, specify none for the ``Forward`` element.
         */
        forward: string;
        /**
         * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
         *  If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*.
         *  If you want to send cookies to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.
         *  Required if you specify ``whitelist`` for the value of ``Forward``. A complex type that specifies how many different cookies you want CloudFront to forward to the origin for this cache behavior and, if you want to forward selected cookies, the names of those cookies.
         *  If you specify ``all`` or ``none`` for the value of ``Forward``, omit ``WhitelistedNames``. If you change the value of ``Forward`` from ``whitelist`` to ``all`` or ``none`` and you don't delete the ``WhitelistedNames`` element and its child elements, CloudFront deletes them automatically.
         *  For the current limit on the number of cookie names that you can whitelist for each cache behavior, see [CloudFront Limits](https://docs.aws.amazon.com/general/latest/gr/xrefaws_service_limits.html#limits_cloudfront) in the *General Reference*.
         */
        whitelistedNames?: string[];
    }

    /**
     * A complex type that controls:
     *   +  Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.
     *   +  How long CloudFront caches HTTP status codes in the 4xx and 5xx range.
     *   
     *  For more information about custom error pages, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the *Amazon CloudFront Developer Guide*.
     */
    export interface DistributionCustomErrorResponse {
        /**
         * The minimum amount of time, in seconds, that you want CloudFront to cache the HTTP status code specified in ``ErrorCode``. When this time period has elapsed, CloudFront queries your origin to see whether the problem that caused the error has been resolved and the requested object is now available.
         *  For more information, see [Customizing Error Responses](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/custom-error-pages.html) in the *Amazon CloudFront Developer Guide*.
         */
        errorCachingMinTtl?: number;
        /**
         * The HTTP status code for which you want to specify a custom error page and/or a caching duration.
         */
        errorCode: number;
        /**
         * The HTTP status code that you want CloudFront to return to the viewer along with the custom error page. There are a variety of reasons that you might want CloudFront to return a status code different from the status code that your origin returned to CloudFront, for example:
         *   +  Some Internet devices (some firewalls and corporate proxies, for example) intercept HTTP 4xx and 5xx and prevent the response from being returned to the viewer. If you substitute ``200``, the response typically won't be intercepted.
         *   +  If you don't care about distinguishing among different client errors or server errors, you can specify ``400`` or ``500`` as the ``ResponseCode`` for all 4xx or 5xx errors.
         *   +  You might want to return a ``200`` status code (OK) and static website so your customers don't know that your website is down.
         *   
         *  If you specify a value for ``ResponseCode``, you must also specify a value for ``ResponsePagePath``.
         */
        responseCode?: number;
        /**
         * The path to the custom error page that you want CloudFront to return to a viewer when your origin returns the HTTP status code specified by ``ErrorCode``, for example, ``/4xx-errors/403-forbidden.html``. If you want to store your objects and your custom error pages in different locations, your distribution must include a cache behavior for which the following is true:
         *   +  The value of ``PathPattern`` matches the path to your custom error messages. For example, suppose you saved custom error pages for 4xx errors in an Amazon S3 bucket in a directory named ``/4xx-errors``. Your distribution must include a cache behavior for which the path pattern routes requests for your custom error pages to that location, for example, ``/4xx-errors/*``.
         *   +  The value of ``TargetOriginId`` specifies the value of the ``ID`` element for the origin that contains your custom error pages.
         *   
         *  If you specify a value for ``ResponsePagePath``, you must also specify a value for ``ResponseCode``.
         *  We recommend that you store custom error pages in an Amazon S3 bucket. If you store custom error pages on an HTTP server and the server starts to return 5xx errors, CloudFront can't get the files that you want to return to viewers because the origin server is unavailable.
         */
        responsePagePath?: string;
    }

    /**
     * A custom origin. A custom origin is any origin that is *not* an Amazon S3 bucket, with one exception. An Amazon S3 bucket that is [configured with static website hosting](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html) *is* a custom origin.
     */
    export interface DistributionCustomOriginConfig {
        /**
         * The HTTP port that CloudFront uses to connect to the origin. Specify the HTTP port that the origin listens on.
         */
        httpPort?: number;
        /**
         * The HTTPS port that CloudFront uses to connect to the origin. Specify the HTTPS port that the origin listens on.
         */
        httpsPort?: number;
        /**
         * Specifies how long, in seconds, CloudFront persists its connection to the origin. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 5 seconds.
         *  For more information, see [Origin Keep-alive Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginKeepaliveTimeout) in the *Amazon CloudFront Developer Guide*.
         */
        originKeepaliveTimeout?: number;
        /**
         * Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Valid values are:
         *   +   ``http-only`` – CloudFront always uses HTTP to connect to the origin.
         *   +   ``match-viewer`` – CloudFront connects to the origin using the same protocol that the viewer used to connect to CloudFront.
         *   +   ``https-only`` – CloudFront always uses HTTPS to connect to the origin.
         */
        originProtocolPolicy: string;
        /**
         * Specifies how long, in seconds, CloudFront waits for a response from the origin. This is also known as the *origin response timeout*. The minimum timeout is 1 second, the maximum is 60 seconds, and the default (if you don't specify otherwise) is 30 seconds.
         *  For more information, see [Origin Response Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout) in the *Amazon CloudFront Developer Guide*.
         */
        originReadTimeout?: number;
        /**
         * Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting to your origin over HTTPS. Valid values include ``SSLv3``, ``TLSv1``, ``TLSv1.1``, and ``TLSv1.2``.
         *  For more information, see [Minimum Origin SSL Protocol](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginSSLProtocols) in the *Amazon CloudFront Developer Guide*.
         */
        originSslProtocols?: string[];
    }

    /**
     * A complex type that describes the default cache behavior if you don't specify a ``CacheBehavior`` element or if request URLs don't match any of the values of ``PathPattern`` in ``CacheBehavior`` elements. You must create exactly one default cache behavior.
     */
    export interface DistributionDefaultCacheBehavior {
        /**
         * A complex type that controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. There are three choices:
         *   +  CloudFront forwards only ``GET`` and ``HEAD`` requests.
         *   +  CloudFront forwards only ``GET``, ``HEAD``, and ``OPTIONS`` requests.
         *   +  CloudFront forwards ``GET, HEAD, OPTIONS, PUT, PATCH, POST``, and ``DELETE`` requests.
         *   
         *  If you pick the third choice, you may need to restrict access to your Amazon S3 bucket or to your custom origin so users can't perform operations that you don't want them to. For example, you might not want users to have permissions to delete objects from your origin.
         */
        allowedMethods?: string[];
        /**
         * The unique identifier of the cache policy that is attached to the default cache behavior. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``. We recommend that you use a ``CachePolicyId``.
         */
        cachePolicyId?: string;
        /**
         * A complex type that controls whether CloudFront caches the response to requests using the specified HTTP methods. There are two choices:
         *   +  CloudFront caches responses to ``GET`` and ``HEAD`` requests.
         *   +  CloudFront caches responses to ``GET``, ``HEAD``, and ``OPTIONS`` requests.
         *   
         *  If you pick the second choice for your Amazon S3 Origin, you may need to forward Access-Control-Request-Method, Access-Control-Request-Headers, and Origin headers for the responses to be cached correctly.
         */
        cachedMethods?: string[];
        /**
         * Whether you want CloudFront to automatically compress certain files for this cache behavior. If so, specify ``true``; if not, specify ``false``. For more information, see [Serving Compressed Files](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html) in the *Amazon CloudFront Developer Guide*.
         */
        compress?: boolean;
        /**
         * This field is deprecated. We recommend that you use the ``DefaultTTL`` field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  The default amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin does not add HTTP headers such as ``Cache-Control max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.
         */
        defaultTtl?: number;
        /**
         * The value of ``ID`` for the field-level encryption configuration that you want CloudFront to use for encrypting specific fields of data for the default cache behavior.
         */
        fieldLevelEncryptionId?: string;
        /**
         * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field. For more information, see [Working with policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/working-with-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  If you want to include values in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  A ``DefaultCacheBehavior`` must include either a ``CachePolicyId`` or ``ForwardedValues``. We recommend that you use a ``CachePolicyId``.
         *  A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
         */
        forwardedValues?: outputs.cloudfront.DistributionForwardedValues;
        /**
         * A list of CloudFront functions that are associated with this cache behavior. CloudFront functions must be published to the ``LIVE`` stage to associate them with a cache behavior.
         */
        functionAssociations?: outputs.cloudfront.DistributionFunctionAssociation[];
        /**
         * A complex type that contains zero or more Lambda@Edge function associations for a cache behavior.
         */
        lambdaFunctionAssociations?: outputs.cloudfront.DistributionLambdaFunctionAssociation[];
        /**
         * This field is deprecated. We recommend that you use the ``MaxTTL`` field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  The maximum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. The value that you specify applies only when your origin adds HTTP headers such as ``Cache-Control max-age``, ``Cache-Control s-maxage``, and ``Expires`` to objects. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.
         */
        maxTtl?: number;
        /**
         * This field is deprecated. We recommend that you use the ``MinTTL`` field in a cache policy instead of this field. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) or [Using the managed cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html) in the *Amazon CloudFront Developer Guide*.
         *  The minimum amount of time that you want objects to stay in CloudFront caches before CloudFront forwards another request to your origin to determine whether the object has been updated. For more information, see [Managing How Long Content Stays in an Edge Cache (Expiration)](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.
         *  You must specify ``0`` for ``MinTTL`` if you configure CloudFront to forward all headers to your origin (under ``Headers``, if you specify ``1`` for ``Quantity`` and ``*`` for ``Name``).
         */
        minTtl?: number;
        /**
         * The unique identifier of the origin request policy that is attached to the default cache behavior. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) or [Using the managed origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html) in the *Amazon CloudFront Developer Guide*.
         */
        originRequestPolicyId?: string;
        /**
         * The Amazon Resource Name (ARN) of the real-time log configuration that is attached to this cache behavior. For more information, see [Real-time logs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html) in the *Amazon CloudFront Developer Guide*.
         */
        realtimeLogConfigArn?: string;
        /**
         * The identifier for a response headers policy.
         */
        responseHeadersPolicyId?: string;
        /**
         * Indicates whether you want to distribute media files in the Microsoft Smooth Streaming format using the origin that is associated with this cache behavior. If so, specify ``true``; if not, specify ``false``. If you specify ``true`` for ``SmoothStreaming``, you can still distribute other content using this cache behavior if the content matches the value of ``PathPattern``.
         */
        smoothStreaming?: boolean;
        /**
         * The value of ``ID`` for the origin that you want CloudFront to route requests to when they use the default cache behavior.
         */
        targetOriginId: string;
        /**
         * A list of key groups that CloudFront can use to validate signed URLs or signed cookies.
         *  When a cache behavior contains trusted key groups, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with a private key whose corresponding public key is in the key group. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon CloudFront Developer Guide*.
         */
        trustedKeyGroups?: string[];
        /**
         * We recommend using ``TrustedKeyGroups`` instead of ``TrustedSigners``.
         *   A list of AWS-account IDs whose public keys CloudFront can use to validate signed URLs or signed cookies.
         *  When a cache behavior contains trusted signers, CloudFront requires signed URLs or signed cookies for all requests that match the cache behavior. The URLs or cookies must be signed with the private key of a CloudFront key pair in a trusted signer's AWS-account. The signed URL or cookie contains information about which public key CloudFront should use to verify the signature. For more information, see [Serving private content](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon CloudFront Developer Guide*.
         */
        trustedSigners?: string[];
        /**
         * The protocol that viewers can use to access the files in the origin specified by ``TargetOriginId`` when a request matches the path pattern in ``PathPattern``. You can specify the following options:
         *   +   ``allow-all``: Viewers can use HTTP or HTTPS.
         *   +   ``redirect-to-https``: If a viewer submits an HTTP request, CloudFront returns an HTTP status code of 301 (Moved Permanently) to the viewer along with the HTTPS URL. The viewer then resubmits the request using the new URL.
         *   +   ``https-only``: If a viewer sends an HTTP request, CloudFront returns an HTTP status code of 403 (Forbidden).
         *   
         *  For more information about requiring the HTTPS protocol, see [Requiring HTTPS Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html) in the *Amazon CloudFront Developer Guide*.
         *   The only way to guarantee that viewers retrieve an object that was fetched from the origin using HTTPS is never to use any other protocol to fetch the object. If you have recently changed from HTTP to HTTPS, we recommend that you clear your objects' cache because cached objects are protocol agnostic. That means that an edge location will return an object from the cache regardless of whether the current request protocol matches the protocol used previously. For more information, see [Managing Cache Expiration](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html) in the *Amazon CloudFront Developer Guide*.
         */
        viewerProtocolPolicy: string;
    }

    /**
     * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
     *  If you want to include values in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*.
     *  If you want to send values to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.
     *  A complex type that specifies how CloudFront handles query strings, cookies, and HTTP headers.
     */
    export interface DistributionForwardedValues {
        /**
         * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
         *  If you want to include cookies in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*.
         *  If you want to send cookies to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.
         *  A complex type that specifies whether you want CloudFront to forward cookies to the origin and, if so, which ones. For more information about forwarding cookies to the origin, see [How CloudFront Forwards, Caches, and Logs Cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html) in the *Amazon CloudFront Developer Guide*.
         */
        cookies?: outputs.cloudfront.DistributionCookies;
        /**
         * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
         *  If you want to include headers in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*.
         *  If you want to send headers to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.
         *  A complex type that specifies the ``Headers``, if any, that you want CloudFront to forward to the origin for this cache behavior (whitelisted headers). For the headers that you specify, CloudFront also caches separate versions of a specified object that is based on the header values in viewer requests.
         *  For more information, see [Caching Content Based on Request Headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html) in the *Amazon CloudFront Developer Guide*.
         */
        headers?: string[];
        /**
         * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
         *  If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*.
         *  If you want to send query strings to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.
         *  Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior and cache based on the query string parameters. CloudFront behavior depends on the value of ``QueryString`` and on the values that you specify for ``QueryStringCacheKeys``, if any:
         *  If you specify true for ``QueryString`` and you don't specify any values for ``QueryStringCacheKeys``, CloudFront forwards all query string parameters to the origin and caches based on all query string parameters. Depending on how many query string parameters and values you have, this can adversely affect performance because CloudFront must forward more requests to the origin.
         *  If you specify true for ``QueryString`` and you specify one or more values for ``QueryStringCacheKeys``, CloudFront forwards all query string parameters to the origin, but it only caches based on the query string parameters that you specify.
         *  If you specify false for ``QueryString``, CloudFront doesn't forward any query string parameters to the origin, and doesn't cache based on query string parameters.
         *  For more information, see [Configuring CloudFront to Cache Based on Query String Parameters](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/QueryStringParameters.html) in the *Amazon CloudFront Developer Guide*.
         */
        queryString: boolean;
        /**
         * This field is deprecated. We recommend that you use a cache policy or an origin request policy instead of this field.
         *  If you want to include query strings in the cache key, use a cache policy. For more information, see [Creating cache policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html#cache-key-create-cache-policy) in the *Amazon CloudFront Developer Guide*.
         *  If you want to send query strings to the origin but not include them in the cache key, use an origin request policy. For more information, see [Creating origin request policies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-origin-requests.html#origin-request-create-origin-request-policy) in the *Amazon CloudFront Developer Guide*.
         *  A complex type that contains information about the query string parameters that you want CloudFront to use for caching for this cache behavior.
         */
        queryStringCacheKeys?: string[];
    }

    /**
     * A CloudFront function that is associated with a cache behavior in a CloudFront distribution.
     */
    export interface DistributionFunctionAssociation {
        /**
         * The event type of the function, either ``viewer-request`` or ``viewer-response``. You cannot use origin-facing event types (``origin-request`` and ``origin-response``) with a CloudFront function.
         */
        eventType?: string;
        /**
         * The Amazon Resource Name (ARN) of the function.
         */
        functionArn?: string;
    }

    /**
     * A complex type that controls the countries in which your content is distributed. CF determines the location of your users using ``MaxMind`` GeoIP databases. To disable geo restriction, remove the [Restrictions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-distributionconfig.html#cfn-cloudfront-distribution-distributionconfig-restrictions) property from your stack template.
     */
    export interface DistributionGeoRestriction {
        /**
         * A complex type that contains a ``Location`` element for each country in which you want CloudFront either to distribute your content (``whitelist``) or not distribute your content (``blacklist``).
         *  The ``Location`` element is a two-letter, uppercase country code for a country that you want to include in your ``blacklist`` or ``whitelist``. Include one ``Location`` element for each country.
         *  CloudFront and ``MaxMind`` both use ``ISO 3166`` country codes. For the current list of countries and the corresponding codes, see ``ISO 3166-1-alpha-2`` code on the *International Organization for Standardization* website. You can also refer to the country list on the CloudFront console, which includes both country names and codes.
         */
        locations?: string[];
        /**
         * The method that you want to use to restrict distribution of your content by country:
         *   +   ``none``: No geo restriction is enabled, meaning access to content is not restricted by client geo location.
         *   +   ``blacklist``: The ``Location`` elements specify the countries in which you don't want CloudFront to distribute your content.
         *   +   ``whitelist``: The ``Location`` elements specify the countries in which you want CloudFront to distribute your content.
         */
        restrictionType: string;
    }

    /**
     * A complex type that contains a Lambda@Edge function association.
     */
    export interface DistributionLambdaFunctionAssociation {
        /**
         * Specifies the event type that triggers a Lambda@Edge function invocation. You can specify the following values:
         *   +   ``viewer-request``: The function executes when CloudFront receives a request from a viewer and before it checks to see whether the requested object is in the edge cache.
         *   +   ``origin-request``: The function executes only when CloudFront sends a request to your origin. When the requested object is in the edge cache, the function doesn't execute.
         *   +   ``origin-response``: The function executes after CloudFront receives a response from the origin and before it caches the object in the response. When the requested object is in the edge cache, the function doesn't execute.
         *   +   ``viewer-response``: The function executes before CloudFront returns the requested object to the viewer. The function executes regardless of whether the object was already in the edge cache.
         *  If the origin returns an HTTP status code other than HTTP 200 (OK), the function doesn't execute.
         */
        eventType?: string;
        /**
         * A flag that allows a Lambda@Edge function to have read access to the body content. For more information, see [Accessing the Request Body by Choosing the Include Body Option](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-include-body-access.html) in the Amazon CloudFront Developer Guide.
         */
        includeBody?: boolean;
        /**
         * The ARN of the Lambda@Edge function. You must specify the ARN of a function version; you can't specify an alias or $LATEST.
         */
        lambdaFunctionArn?: string;
    }

    export interface DistributionLegacyCustomOrigin {
        dnsName: string;
        httpPort?: number;
        httpsPort?: number;
        originProtocolPolicy: string;
        originSslProtocols: string[];
    }

    export interface DistributionLegacyS3Origin {
        dnsName: string;
        originAccessIdentity?: string;
    }

    /**
     * A complex type that controls whether access logs are written for the distribution.
     */
    export interface DistributionLogging {
        /**
         * The Amazon S3 bucket to store the access logs in, for example, ``myawslogbucket.s3.amazonaws.com``.
         */
        bucket: string;
        /**
         * Specifies whether you want CloudFront to include cookies in access logs, specify ``true`` for ``IncludeCookies``. If you choose to include cookies in logs, CloudFront logs all cookies regardless of how you configure the cache behaviors for this distribution. If you don't want to include cookies when you create a distribution or if you want to disable include cookies for an existing distribution, specify ``false`` for ``IncludeCookies``.
         */
        includeCookies?: boolean;
        /**
         * An optional string that you want CloudFront to prefix to the access log ``filenames`` for this distribution, for example, ``myprefix/``. If you want to enable logging, but you don't want to specify a prefix, you still must include an empty ``Prefix`` element in the ``Logging`` element.
         */
        prefix?: string;
    }

    /**
     * An origin.
     *  An origin is the location where content is stored, and from which CloudFront gets content to serve to viewers. To specify an origin:
     *   +  Use ``S3OriginConfig`` to specify an Amazon S3 bucket that is not configured with static website hosting.
     *   +  Use ``CustomOriginConfig`` to specify all other kinds of origins, including:
     *   +  An Amazon S3 bucket that is configured with static website hosting
     *   +  An Elastic Load Balancing load balancer
     *   +  An EMPlong endpoint
     *   +  An EMSlong container
     *   +  Any other HTTP server, running on an Amazon EC2 instance or any other kind of host
     *   
     *   
     *  For the current maximum number of origins that you can specify per distribution, see [General Quotas on Web Distributions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-web-distributions) in the *Amazon CloudFront Developer Guide* (quotas were formerly referred to as limits).
     */
    export interface DistributionOrigin {
        /**
         * The number of times that CloudFront attempts to connect to the origin. The minimum number is 1, the maximum is 3, and the default (if you don't specify otherwise) is 3.
         *  For a custom origin (including an Amazon S3 bucket that's configured with static website hosting), this value also specifies the number of times that CloudFront attempts to get a response from the origin, in the case of an [Origin Response Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginResponseTimeout).
         *  For more information, see [Origin Connection Attempts](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#origin-connection-attempts) in the *Amazon CloudFront Developer Guide*.
         */
        connectionAttempts?: number;
        /**
         * The number of seconds that CloudFront waits when trying to establish a connection to the origin. The minimum timeout is 1 second, the maximum is 10 seconds, and the default (if you don't specify otherwise) is 10 seconds.
         *  For more information, see [Origin Connection Timeout](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#origin-connection-timeout) in the *Amazon CloudFront Developer Guide*.
         */
        connectionTimeout?: number;
        /**
         * Use this type to specify an origin that is not an Amazon S3 bucket, with one exception. If the Amazon S3 bucket is configured with static website hosting, use this type. If the Amazon S3 bucket is not configured with static website hosting, use the ``S3OriginConfig`` type instead.
         */
        customOriginConfig?: outputs.cloudfront.DistributionCustomOriginConfig;
        /**
         * The domain name for the origin.
         *  For more information, see [Origin Domain Name](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesDomainName) in the *Amazon CloudFront Developer Guide*.
         */
        domainName: string;
        /**
         * A unique identifier for the origin. This value must be unique within the distribution.
         *  Use this value to specify the ``TargetOriginId`` in a ``CacheBehavior`` or ``DefaultCacheBehavior``.
         */
        id: string;
        /**
         * The unique identifier of an origin access control for this origin.
         *  For more information, see [Restricting access to an Amazon S3 origin](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html) in the *Amazon CloudFront Developer Guide*.
         */
        originAccessControlId?: string;
        /**
         * A list of HTTP header names and values that CloudFront adds to the requests that it sends to the origin.
         *  For more information, see [Adding Custom Headers to Origin Requests](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/add-origin-custom-headers.html) in the *Amazon CloudFront Developer Guide*.
         */
        originCustomHeaders?: outputs.cloudfront.DistributionOriginCustomHeader[];
        /**
         * An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin.
         *  For more information, see [Origin Path](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginPath) in the *Amazon CloudFront Developer Guide*.
         */
        originPath?: string;
        /**
         * CloudFront Origin Shield. Using Origin Shield can help reduce the load on your origin.
         *  For more information, see [Using Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the *Amazon CloudFront Developer Guide*.
         */
        originShield?: outputs.cloudfront.DistributionOriginShield;
        /**
         * Use this type to specify an origin that is an Amazon S3 bucket that is not configured with static website hosting. To specify any other type of origin, including an Amazon S3 bucket that is configured with static website hosting, use the ``CustomOriginConfig`` type instead.
         */
        s3OriginConfig?: outputs.cloudfront.DistributionS3OriginConfig;
    }

    /**
     * A complex type that contains ``HeaderName`` and ``HeaderValue`` elements, if any, for this distribution.
     */
    export interface DistributionOriginCustomHeader {
        /**
         * The name of a header that you want CloudFront to send to your origin. For more information, see [Adding Custom Headers to Origin Requests](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/forward-custom-headers.html) in the *Amazon CloudFront Developer Guide*.
         */
        headerName: string;
        /**
         * The value for the header that you specified in the ``HeaderName`` field.
         */
        headerValue: string;
    }

    /**
     * An origin group includes two origins (a primary origin and a second origin to failover to) and a failover criteria that you specify. You create an origin group to support origin failover in CloudFront. When you create or update a distribution, you can specify the origin group instead of a single origin, and CloudFront will failover from the primary origin to the second origin under the failover conditions that you've chosen.
     */
    export interface DistributionOriginGroup {
        /**
         * A complex type that contains information about the failover criteria for an origin group.
         */
        failoverCriteria: outputs.cloudfront.DistributionOriginGroupFailoverCriteria;
        /**
         * The origin group's ID.
         */
        id: string;
        /**
         * A complex type that contains information about the origins in an origin group.
         */
        members: outputs.cloudfront.DistributionOriginGroupMembers;
    }

    /**
     * A complex data type that includes information about the failover criteria for an origin group, including the status codes for which CloudFront will failover from the primary origin to the second origin.
     */
    export interface DistributionOriginGroupFailoverCriteria {
        /**
         * The status codes that, when returned from the primary origin, will trigger CloudFront to failover to the second origin.
         */
        statusCodes: outputs.cloudfront.DistributionStatusCodes;
    }

    /**
     * An origin in an origin group.
     */
    export interface DistributionOriginGroupMember {
        /**
         * The ID for an origin in an origin group.
         */
        originId: string;
    }

    /**
     * A complex data type for the origins included in an origin group.
     */
    export interface DistributionOriginGroupMembers {
        /**
         * Items (origins) in an origin group.
         */
        items: outputs.cloudfront.DistributionOriginGroupMember[];
        /**
         * The number of origins in an origin group.
         */
        quantity: number;
    }

    /**
     * A complex data type for the origin groups specified for a distribution.
     */
    export interface DistributionOriginGroups {
        /**
         * The items (origin groups) in a distribution.
         */
        items?: outputs.cloudfront.DistributionOriginGroup[];
        /**
         * The number of origin groups.
         */
        quantity: number;
    }

    /**
     * CloudFront Origin Shield.
     *  Using Origin Shield can help reduce the load on your origin. For more information, see [Using Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the *Amazon CloudFront Developer Guide*.
     */
    export interface DistributionOriginShield {
        /**
         * A flag that specifies whether Origin Shield is enabled.
         *  When it's enabled, CloudFront routes all requests through Origin Shield, which can help protect your origin. When it's disabled, CloudFront might send requests directly to your origin from multiple edge locations or regional edge caches.
         */
        enabled?: boolean;
        /**
         * The AWS-Region for Origin Shield.
         *  Specify the AWS-Region that has the lowest latency to your origin. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as ``us-east-2``.
         *  When you enable CloudFront Origin Shield, you must specify the AWS-Region for Origin Shield. For the list of AWS-Regions that you can specify, and for help choosing the best Region for your origin, see [Choosing the for Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html#choose-origin-shield-region) in the *Amazon CloudFront Developer Guide*.
         */
        originShieldRegion?: string;
    }

    /**
     * A complex type that identifies ways in which you want to restrict distribution of your content.
     */
    export interface DistributionRestrictions {
        /**
         * A complex type that controls the countries in which your content is distributed. CF determines the location of your users using ``MaxMind`` GeoIP databases. To disable geo restriction, remove the [Restrictions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-distributionconfig.html#cfn-cloudfront-distribution-distributionconfig-restrictions) property from your stack template.
         */
        geoRestriction: outputs.cloudfront.DistributionGeoRestriction;
    }

    /**
     * A complex type that contains information about the Amazon S3 origin. If the origin is a custom origin or an S3 bucket that is configured as a website endpoint, use the ``CustomOriginConfig`` element instead.
     */
    export interface DistributionS3OriginConfig {
        /**
         * The CloudFront origin access identity to associate with the origin. Use an origin access identity to configure the origin so that viewers can *only* access objects in an Amazon S3 bucket through CloudFront. The format of the value is:
         *  origin-access-identity/cloudfront/*ID-of-origin-access-identity* 
         *  where ``ID-of-origin-access-identity`` is the value that CloudFront returned in the ``ID`` element when you created the origin access identity.
         *  If you want viewers to be able to access objects using either the CloudFront URL or the Amazon S3 URL, specify an empty ``OriginAccessIdentity`` element.
         *  To delete the origin access identity from an existing distribution, update the distribution configuration and include an empty ``OriginAccessIdentity`` element.
         *  To replace the origin access identity, update the distribution configuration and specify the new origin access identity.
         *  For more information about the origin access identity, see [Serving Private Content through CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) in the *Amazon CloudFront Developer Guide*.
         */
        originAccessIdentity?: string;
    }

    /**
     * A complex data type for the status codes that you specify that, when returned by a primary origin, trigger CloudFront to failover to a second origin.
     */
    export interface DistributionStatusCodes {
        /**
         * The items (status codes) for an origin group.
         */
        items: number[];
        /**
         * The number of status codes.
         */
        quantity: number;
    }

    /**
     * A complex type that determines the distribution's SSL/TLS configuration for communicating with viewers.
     *  If the distribution doesn't use ``Aliases`` (also known as alternate domain names or CNAMEs)—that is, if the distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net``—set ``CloudFrontDefaultCertificate`` to ``true`` and leave all other fields empty.
     *  If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), use the fields in this type to specify the following settings:
     *   +  Which viewers the distribution accepts HTTPS connections from: only viewers that support [server name indication (SNI)](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Server_Name_Indication) (recommended), or all viewers including those that don't support SNI.
     *   +  To accept HTTPS connections from only viewers that support SNI, set ``SSLSupportMethod`` to ``sni-only``. This is recommended. Most browsers and clients support SNI. (In CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.)
     *   +  To accept HTTPS connections from all viewers, including those that don't support SNI, set ``SSLSupportMethod`` to ``vip``. This is not recommended, and results in additional monthly charges from CloudFront. (In CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.)
     *   
     *   +  The minimum SSL/TLS protocol version that the distribution can use to communicate with viewers. To specify a minimum version, choose a value for ``MinimumProtocolVersion``. For more information, see [Security Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy) in the *Amazon CloudFront Developer Guide*.
     *   +  The location of the SSL/TLS certificate, [(ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html) (recommended) or [(IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html). You specify the location by setting a value in one of the following fields (not both):
     *   +   ``ACMCertificateArn`` (In CloudFormation, this field name is ``AcmCertificateArn``. Note the different capitalization.)
     *   +   ``IAMCertificateId`` (In CloudFormation, this field name is ``IamCertificateId``. Note the different capitalization.)
     *   
     *   
     *  All distributions support HTTPS connections from viewers. To require viewers to use HTTPS only, or to redirect them from HTTP to HTTPS, use ``ViewerProtocolPolicy`` in the ``CacheBehavior`` or ``DefaultCacheBehavior``. To specify how CloudFront should use SSL/TLS to communicate with your custom origin, use ``CustomOriginConfig``.
     *  For more information, see [Using HTTPS with CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https.html) and [Using Alternate Domain Names and HTTPS](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html) in the *Amazon CloudFront Developer Guide*.
     */
    export interface DistributionViewerCertificate {
        /**
         * In CloudFormation, this field name is ``AcmCertificateArn``. Note the different capitalization.
         *   If the distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS certificate is stored in [(ACM)](https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html), provide the Amazon Resource Name (ARN) of the ACM certificate. CloudFront only supports ACM certificates in the US East (N. Virginia) Region (``us-east-1``).
         *  If you specify an ACM certificate ARN, you must also specify values for ``MinimumProtocolVersion`` and ``SSLSupportMethod``. (In CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.)
         */
        acmCertificateArn?: string;
        /**
         * If the distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net``, set this field to ``true``.
         *  If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), omit this field and specify values for the following fields:
         *   +   ``AcmCertificateArn`` or ``IamCertificateId`` (specify a value for one, not both) 
         *   +   ``MinimumProtocolVersion`` 
         *   +   ``SslSupportMethod``
         */
        cloudFrontDefaultCertificate?: boolean;
        /**
         * In CloudFormation, this field name is ``IamCertificateId``. Note the different capitalization.
         *   If the distribution uses ``Aliases`` (alternate domain names or CNAMEs) and the SSL/TLS certificate is stored in [(IAM)](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html), provide the ID of the IAM certificate.
         *  If you specify an IAM certificate ID, you must also specify values for ``MinimumProtocolVersion`` and ``SSLSupportMethod``. (In CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.)
         */
        iamCertificateId?: string;
        /**
         * If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), specify the security policy that you want CloudFront to use for HTTPS connections with viewers. The security policy determines two settings:
         *   +  The minimum SSL/TLS protocol that CloudFront can use to communicate with viewers.
         *   +  The ciphers that CloudFront can use to encrypt the content that it returns to viewers.
         *   
         *  For more information, see [Security Policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy) and [Supported Protocols and Ciphers Between Viewers and CloudFront](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html#secure-connections-supported-ciphers) in the *Amazon CloudFront Developer Guide*.
         *   On the CloudFront console, this setting is called *Security Policy*.
         *   When you're using SNI only (you set ``SSLSupportMethod`` to ``sni-only``), you must specify ``TLSv1`` or higher. (In CloudFormation, the field name is ``SslSupportMethod``. Note the different capitalization.)
         *  If the distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net`` (you set ``CloudFrontDefaultCertificate`` to ``true``), CloudFront automatically sets the security policy to ``TLSv1`` regardless of the value that you set here.
         */
        minimumProtocolVersion?: string;
        /**
         * In CloudFormation, this field name is ``SslSupportMethod``. Note the different capitalization.
         *   If the distribution uses ``Aliases`` (alternate domain names or CNAMEs), specify which viewers the distribution accepts HTTPS connections from.
         *   +   ``sni-only`` – The distribution accepts HTTPS connections from only viewers that support [server name indication (SNI)](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Server_Name_Indication). This is recommended. Most browsers and clients support SNI.
         *   +   ``vip`` – The distribution accepts HTTPS connections from all viewers including those that don't support SNI. This is not recommended, and results in additional monthly charges from CloudFront.
         *   +   ``static-ip`` - Do not specify this value unless your distribution has been enabled for this feature by the CloudFront team. If you have a use case that requires static IP addresses for a distribution, contact CloudFront through the [Center](https://docs.aws.amazon.com/support/home).
         *   
         *  If the distribution uses the CloudFront domain name such as ``d111111abcdef8.cloudfront.net``, don't set a value for this field.
         */
        sslSupportMethod?: string;
    }

    export interface FunctionConfig {
        /**
         * A comment to describe the function.
         */
        comment: string;
        /**
         * The configuration for the key value store associations.
         */
        keyValueStoreAssociations?: outputs.cloudfront.FunctionKeyValueStoreAssociation[];
        /**
         * The function's runtime environment version.
         */
        runtime: string;
    }

    export interface FunctionKeyValueStoreAssociation {
        /**
         * The Amazon Resource Name (ARN) of the key value store association.
         */
        keyValueStoreArn: string;
    }

    export interface FunctionMetadata {
        /**
         * The Amazon Resource Name (ARN) of the function. The ARN uniquely identifies the function.
         */
        functionArn?: string;
    }

    export interface KeyGroupConfig {
        /**
         * A comment to describe the key group. The comment cannot be longer than 128 characters.
         */
        comment?: string;
        /**
         * A list of the identifiers of the public keys in the key group.
         */
        items: string[];
        /**
         * A name to identify the key group.
         */
        name: string;
    }

    export interface KeyValueStoreImportSource {
        /**
         * The Amazon Resource Name (ARN) of the import source for the key value store.
         */
        sourceArn: string;
        /**
         * The source type of the import source for the key value store.
         */
        sourceType: string;
    }

    export interface MonitoringSubscription {
        /**
         * A subscription configuration for additional CloudWatch metrics.
         */
        realtimeMetricsSubscriptionConfig?: outputs.cloudfront.MonitoringSubscriptionRealtimeMetricsSubscriptionConfig;
    }

    export interface MonitoringSubscriptionRealtimeMetricsSubscriptionConfig {
        /**
         * A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
         */
        realtimeMetricsSubscriptionStatus: enums.cloudfront.MonitoringSubscriptionRealtimeMetricsSubscriptionConfigRealtimeMetricsSubscriptionStatus;
    }

    export interface OriginAccessControlConfig {
        /**
         * A description of the origin access control.
         */
        description?: string;
        /**
         * A name to identify the origin access control. You can specify up to 64 characters.
         */
        name: string;
        /**
         * The type of origin that this origin access control is for.
         */
        originAccessControlOriginType: string;
        /**
         * Specifies which requests CloudFront signs (adds authentication information to). Specify `always` for the most common use case. For more information, see [origin access control advanced settings](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html#oac-advanced-settings) in the *Amazon CloudFront Developer Guide* .
         *
         * This field can have one of the following values:
         *
         * - `always` – CloudFront signs all origin requests, overwriting the `Authorization` header from the viewer request if one exists.
         * - `never` – CloudFront doesn't sign any origin requests. This value turns off origin access control for all origins in all distributions that use this origin access control.
         * - `no-override` – If the viewer request doesn't contain the `Authorization` header, then CloudFront signs the origin request. If the viewer request contains the `Authorization` header, then CloudFront doesn't sign the origin request and instead passes along the `Authorization` header from the viewer request. *WARNING: To pass along the `Authorization` header from the viewer request, you *must* add the `Authorization` header to a [cache policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/controlling-the-cache-key.html) for all cache behaviors that use origins associated with this origin access control.*
         */
        signingBehavior: string;
        /**
         * The signing protocol of the origin access control, which determines how CloudFront signs (authenticates) requests. The only valid value is `sigv4` .
         */
        signingProtocol: string;
    }

    export interface OriginRequestPolicyConfig {
        /**
         * A comment to describe the origin request policy. The comment cannot be longer than 128 characters.
         */
        comment?: string;
        /**
         * The cookies from viewer requests to include in origin requests.
         */
        cookiesConfig: outputs.cloudfront.OriginRequestPolicyCookiesConfig;
        /**
         * The HTTP headers to include in origin requests. These can include headers from viewer requests and additional headers added by CloudFront.
         */
        headersConfig: outputs.cloudfront.OriginRequestPolicyHeadersConfig;
        /**
         * A unique name to identify the origin request policy.
         */
        name: string;
        /**
         * The URL query strings from viewer requests to include in origin requests.
         */
        queryStringsConfig: outputs.cloudfront.OriginRequestPolicyQueryStringsConfig;
    }

    export interface OriginRequestPolicyCookiesConfig {
        /**
         * Determines whether cookies in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:
         *
         * - `none` – No cookies in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to `none` , any cookies that are listed in a `CachePolicy` *are* included in origin requests.
         * - `whitelist` – Only the cookies in viewer requests that are listed in the `CookieNames` type are included in requests that CloudFront sends to the origin.
         * - `all` – All cookies in viewer requests are included in requests that CloudFront sends to the origin.
         * - `allExcept` – All cookies in viewer requests are included in requests that CloudFront sends to the origin, **except** for those listed in the `CookieNames` type, which are not included.
         */
        cookieBehavior: string;
        /**
         * Contains a list of cookie names.
         */
        cookies?: string[];
    }

    export interface OriginRequestPolicyHeadersConfig {
        /**
         * Determines whether any HTTP headers are included in requests that CloudFront sends to the origin. Valid values are:
         *
         * - `none` – No HTTP headers in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to `none` , any headers that are listed in a `CachePolicy` *are* included in origin requests.
         * - `whitelist` – Only the HTTP headers that are listed in the `Headers` type are included in requests that CloudFront sends to the origin.
         * - `allViewer` – All HTTP headers in viewer requests are included in requests that CloudFront sends to the origin.
         * - `allViewerAndWhitelistCloudFront` – All HTTP headers in viewer requests and the additional CloudFront headers that are listed in the `Headers` type are included in requests that CloudFront sends to the origin. The additional headers are added by CloudFront.
         * - `allExcept` – All HTTP headers in viewer requests are included in requests that CloudFront sends to the origin, **except** for those listed in the `Headers` type, which are not included.
         */
        headerBehavior: string;
        /**
         * Contains a list of HTTP header names.
         */
        headers?: string[];
    }

    export interface OriginRequestPolicyQueryStringsConfig {
        /**
         * Determines whether any URL query strings in viewer requests are included in requests that CloudFront sends to the origin. Valid values are:
         *
         * - `none` – No query strings in viewer requests are included in requests that CloudFront sends to the origin. Even when this field is set to `none` , any query strings that are listed in a `CachePolicy` *are* included in origin requests.
         * - `whitelist` – Only the query strings in viewer requests that are listed in the `QueryStringNames` type are included in requests that CloudFront sends to the origin.
         * - `all` – All query strings in viewer requests are included in requests that CloudFront sends to the origin.
         * - `allExcept` – All query strings in viewer requests are included in requests that CloudFront sends to the origin, **except** for those listed in the `QueryStringNames` type, which are not included.
         */
        queryStringBehavior: string;
        /**
         * Contains a list of query string names.
         */
        queryStrings?: string[];
    }

    export interface PublicKeyConfig {
        /**
         * A string included in the request to help make sure that the request can't be replayed.
         */
        callerReference: string;
        /**
         * A comment to describe the public key. The comment cannot be longer than 128 characters.
         */
        comment?: string;
        /**
         * The public key that you can use with [signed URLs and signed cookies](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html) , or with [field-level encryption](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html) .
         */
        encodedKey: string;
        /**
         * A name to help identify the public key.
         */
        name: string;
    }

    export interface RealtimeLogConfigEndPoint {
        /**
         * Contains information about the Amazon Kinesis data stream where you are sending real-time log data.
         */
        kinesisStreamConfig: outputs.cloudfront.RealtimeLogConfigKinesisStreamConfig;
        /**
         * The type of data stream where you are sending real-time log data. The only valid value is `Kinesis` .
         */
        streamType: string;
    }

    export interface RealtimeLogConfigKinesisStreamConfig {
        /**
         * The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that CloudFront can use to send real-time log data to your Kinesis data stream.
         *
         * For more information the IAM role, see [Real-time log configuration IAM role](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-iam-role) in the *Amazon CloudFront Developer Guide* .
         */
        roleArn: string;
        /**
         * The Amazon Resource Name (ARN) of the Kinesis data stream where you are sending real-time log data.
         */
        streamArn: string;
    }

    export interface ResponseHeadersPolicyAccessControlAllowHeaders {
        /**
         * The list of HTTP header names. You can specify `*` to allow all headers.
         */
        items: string[];
    }

    export interface ResponseHeadersPolicyAccessControlAllowMethods {
        /**
         * The list of HTTP methods. Valid values are:
         *
         * - `GET`
         * - `DELETE`
         * - `HEAD`
         * - `OPTIONS`
         * - `PATCH`
         * - `POST`
         * - `PUT`
         * - `ALL`
         *
         * `ALL` is a special value that includes all of the listed HTTP methods.
         */
        items: string[];
    }

    export interface ResponseHeadersPolicyAccessControlAllowOrigins {
        /**
         * The list of origins (domain names). You can specify `*` to allow all origins.
         */
        items: string[];
    }

    export interface ResponseHeadersPolicyAccessControlExposeHeaders {
        /**
         * The list of HTTP headers. You can specify `*` to expose all headers.
         */
        items: string[];
    }

    export interface ResponseHeadersPolicyConfig {
        /**
         * A comment to describe the response headers policy.
         *
         * The comment cannot be longer than 128 characters.
         */
        comment?: string;
        /**
         * A configuration for a set of HTTP response headers that are used for cross-origin resource sharing (CORS).
         */
        corsConfig?: outputs.cloudfront.ResponseHeadersPolicyCorsConfig;
        /**
         * A configuration for a set of custom HTTP response headers.
         */
        customHeadersConfig?: outputs.cloudfront.ResponseHeadersPolicyCustomHeadersConfig;
        /**
         * A name to identify the response headers policy.
         *
         * The name must be unique for response headers policies in this AWS account .
         */
        name: string;
        /**
         * A configuration for a set of HTTP headers to remove from the HTTP response.
         */
        removeHeadersConfig?: outputs.cloudfront.ResponseHeadersPolicyRemoveHeadersConfig;
        /**
         * A configuration for a set of security-related HTTP response headers.
         */
        securityHeadersConfig?: outputs.cloudfront.ResponseHeadersPolicySecurityHeadersConfig;
        /**
         * A configuration for enabling the `Server-Timing` header in HTTP responses sent from CloudFront.
         */
        serverTimingHeadersConfig?: outputs.cloudfront.ResponseHeadersPolicyServerTimingHeadersConfig;
    }

    export interface ResponseHeadersPolicyContentSecurityPolicy {
        /**
         * The policy directives and their values that CloudFront includes as values for the `Content-Security-Policy` HTTP response header.
         */
        contentSecurityPolicy: string;
        /**
         * A Boolean that determines whether CloudFront overrides the `Content-Security-Policy` HTTP response header received from the origin with the one specified in this response headers policy.
         */
        override: boolean;
    }

    export interface ResponseHeadersPolicyContentTypeOptions {
        /**
         * A Boolean that determines whether CloudFront overrides the `X-Content-Type-Options` HTTP response header received from the origin with the one specified in this response headers policy.
         */
        override: boolean;
    }

    export interface ResponseHeadersPolicyCorsConfig {
        /**
         * A Boolean that CloudFront uses as the value for the `Access-Control-Allow-Credentials` HTTP response header.
         *
         * For more information about the `Access-Control-Allow-Credentials` HTTP response header, see [Access-Control-Allow-Credentials](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials) in the MDN Web Docs.
         */
        accessControlAllowCredentials: boolean;
        /**
         * A list of HTTP header names that CloudFront includes as values for the `Access-Control-Allow-Headers` HTTP response header.
         *
         * For more information about the `Access-Control-Allow-Headers` HTTP response header, see [Access-Control-Allow-Headers](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers) in the MDN Web Docs.
         */
        accessControlAllowHeaders: outputs.cloudfront.ResponseHeadersPolicyAccessControlAllowHeaders;
        /**
         * A list of HTTP methods that CloudFront includes as values for the `Access-Control-Allow-Methods` HTTP response header.
         *
         * For more information about the `Access-Control-Allow-Methods` HTTP response header, see [Access-Control-Allow-Methods](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods) in the MDN Web Docs.
         */
        accessControlAllowMethods: outputs.cloudfront.ResponseHeadersPolicyAccessControlAllowMethods;
        /**
         * A list of origins (domain names) that CloudFront can use as the value for the `Access-Control-Allow-Origin` HTTP response header.
         *
         * For more information about the `Access-Control-Allow-Origin` HTTP response header, see [Access-Control-Allow-Origin](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) in the MDN Web Docs.
         */
        accessControlAllowOrigins: outputs.cloudfront.ResponseHeadersPolicyAccessControlAllowOrigins;
        /**
         * A list of HTTP headers that CloudFront includes as values for the `Access-Control-Expose-Headers` HTTP response header.
         *
         * For more information about the `Access-Control-Expose-Headers` HTTP response header, see [Access-Control-Expose-Headers](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers) in the MDN Web Docs.
         */
        accessControlExposeHeaders?: outputs.cloudfront.ResponseHeadersPolicyAccessControlExposeHeaders;
        /**
         * A number that CloudFront uses as the value for the `Access-Control-Max-Age` HTTP response header.
         *
         * For more information about the `Access-Control-Max-Age` HTTP response header, see [Access-Control-Max-Age](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age) in the MDN Web Docs.
         */
        accessControlMaxAgeSec?: number;
        /**
         * A Boolean that determines whether CloudFront overrides HTTP response headers received from the origin with the ones specified in this response headers policy.
         */
        originOverride: boolean;
    }

    export interface ResponseHeadersPolicyCustomHeader {
        /**
         * The HTTP response header name.
         */
        header: string;
        /**
         * A Boolean that determines whether CloudFront overrides a response header with the same name received from the origin with the header specified here.
         */
        override: boolean;
        /**
         * The value for the HTTP response header.
         */
        value: string;
    }

    export interface ResponseHeadersPolicyCustomHeadersConfig {
        /**
         * The list of HTTP response headers and their values.
         */
        items: outputs.cloudfront.ResponseHeadersPolicyCustomHeader[];
    }

    export interface ResponseHeadersPolicyFrameOptions {
        /**
         * The value of the `X-Frame-Options` HTTP response header. Valid values are `DENY` and `SAMEORIGIN` .
         *
         * For more information about these values, see [X-Frame-Options](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) in the MDN Web Docs.
         */
        frameOption: string;
        /**
         * A Boolean that determines whether CloudFront overrides the `X-Frame-Options` HTTP response header received from the origin with the one specified in this response headers policy.
         */
        override: boolean;
    }

    export interface ResponseHeadersPolicyReferrerPolicy {
        /**
         * A Boolean that determines whether CloudFront overrides the `Referrer-Policy` HTTP response header received from the origin with the one specified in this response headers policy.
         */
        override: boolean;
        /**
         * The value of the `Referrer-Policy` HTTP response header. Valid values are:
         *
         * - `no-referrer`
         * - `no-referrer-when-downgrade`
         * - `origin`
         * - `origin-when-cross-origin`
         * - `same-origin`
         * - `strict-origin`
         * - `strict-origin-when-cross-origin`
         * - `unsafe-url`
         *
         * For more information about these values, see [Referrer-Policy](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) in the MDN Web Docs.
         */
        referrerPolicy: string;
    }

    export interface ResponseHeadersPolicyRemoveHeader {
        /**
         * The HTTP header name.
         */
        header: string;
    }

    export interface ResponseHeadersPolicyRemoveHeadersConfig {
        /**
         * The list of HTTP header names.
         */
        items: outputs.cloudfront.ResponseHeadersPolicyRemoveHeader[];
    }

    export interface ResponseHeadersPolicySecurityHeadersConfig {
        /**
         * The policy directives and their values that CloudFront includes as values for the `Content-Security-Policy` HTTP response header.
         *
         * For more information about the `Content-Security-Policy` HTTP response header, see [Content-Security-Policy](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) in the MDN Web Docs.
         */
        contentSecurityPolicy?: outputs.cloudfront.ResponseHeadersPolicyContentSecurityPolicy;
        /**
         * Determines whether CloudFront includes the `X-Content-Type-Options` HTTP response header with its value set to `nosniff` .
         *
         * For more information about the `X-Content-Type-Options` HTTP response header, see [X-Content-Type-Options](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options) in the MDN Web Docs.
         */
        contentTypeOptions?: outputs.cloudfront.ResponseHeadersPolicyContentTypeOptions;
        /**
         * Determines whether CloudFront includes the `X-Frame-Options` HTTP response header and the header's value.
         *
         * For more information about the `X-Frame-Options` HTTP response header, see [X-Frame-Options](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options) in the MDN Web Docs.
         */
        frameOptions?: outputs.cloudfront.ResponseHeadersPolicyFrameOptions;
        /**
         * Determines whether CloudFront includes the `Referrer-Policy` HTTP response header and the header's value.
         *
         * For more information about the `Referrer-Policy` HTTP response header, see [Referrer-Policy](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy) in the MDN Web Docs.
         */
        referrerPolicy?: outputs.cloudfront.ResponseHeadersPolicyReferrerPolicy;
        /**
         * Determines whether CloudFront includes the `Strict-Transport-Security` HTTP response header and the header's value.
         *
         * For more information about the `Strict-Transport-Security` HTTP response header, see [Security headers](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/understanding-response-headers-policies.html#understanding-response-headers-policies-security) in the *Amazon CloudFront Developer Guide* and [Strict-Transport-Security](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security) in the MDN Web Docs.
         */
        strictTransportSecurity?: outputs.cloudfront.ResponseHeadersPolicyStrictTransportSecurity;
        /**
         * Determines whether CloudFront includes the `X-XSS-Protection` HTTP response header and the header's value.
         *
         * For more information about the `X-XSS-Protection` HTTP response header, see [X-XSS-Protection](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
         */
        xssProtection?: outputs.cloudfront.ResponseHeadersPolicyXssProtection;
    }

    export interface ResponseHeadersPolicyServerTimingHeadersConfig {
        /**
         * A Boolean that determines whether CloudFront adds the `Server-Timing` header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
         */
        enabled: boolean;
        /**
         * A number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the `Server-Timing` header to. When you set the sampling rate to 100, CloudFront adds the `Server-Timing` header to the HTTP response for every request that matches the cache behavior that this response headers policy is attached to. When you set it to 50, CloudFront adds the header to 50% of the responses for requests that match the cache behavior. You can set the sampling rate to any number 0–100 with up to four decimal places.
         */
        samplingRate?: number;
    }

    export interface ResponseHeadersPolicyStrictTransportSecurity {
        /**
         * A number that CloudFront uses as the value for the `max-age` directive in the `Strict-Transport-Security` HTTP response header.
         */
        accessControlMaxAgeSec: number;
        /**
         * A Boolean that determines whether CloudFront includes the `includeSubDomains` directive in the `Strict-Transport-Security` HTTP response header.
         */
        includeSubdomains?: boolean;
        /**
         * A Boolean that determines whether CloudFront overrides the `Strict-Transport-Security` HTTP response header received from the origin with the one specified in this response headers policy.
         */
        override: boolean;
        /**
         * A Boolean that determines whether CloudFront includes the `preload` directive in the `Strict-Transport-Security` HTTP response header.
         */
        preload?: boolean;
    }

    export interface ResponseHeadersPolicyXssProtection {
        /**
         * A Boolean that determines whether CloudFront includes the `mode=block` directive in the `X-XSS-Protection` header.
         *
         * For more information about this directive, see [X-XSS-Protection](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
         */
        modeBlock?: boolean;
        /**
         * A Boolean that determines whether CloudFront overrides the `X-XSS-Protection` HTTP response header received from the origin with the one specified in this response headers policy.
         */
        override: boolean;
        /**
         * A Boolean that determines the value of the `X-XSS-Protection` HTTP response header. When this setting is `true` , the value of the `X-XSS-Protection` header is `1` . When this setting is `false` , the value of the `X-XSS-Protection` header is `0` .
         *
         * For more information about these settings, see [X-XSS-Protection](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
         */
        protection: boolean;
        /**
         * A reporting URI, which CloudFront uses as the value of the `report` directive in the `X-XSS-Protection` header.
         *
         * You cannot specify a `ReportUri` when `ModeBlock` is `true` .
         *
         * For more information about using a reporting URL, see [X-XSS-Protection](https://docs.aws.amazon.com/https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection) in the MDN Web Docs.
         */
        reportUri?: string;
    }

}

export namespace cloudtrail {
    /**
     * The resource that receives events arriving from a channel.
     */
    export interface ChannelDestination {
        /**
         * The ARN of a resource that receives events from a channel.
         */
        location: string;
        /**
         * The type of destination for events arriving from a channel.
         */
        type: enums.cloudtrail.ChannelDestinationType;
    }

    /**
     * Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
     */
    export interface EventDataStoreAdvancedEventSelector {
        /**
         * Contains all selector statements in an advanced event selector.
         */
        fieldSelectors: outputs.cloudtrail.EventDataStoreAdvancedFieldSelector[];
        /**
         * An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
         */
        name?: string;
    }

    /**
     * A single selector statement in an advanced event selector.
     */
    export interface EventDataStoreAdvancedFieldSelector {
        /**
         * An operator that includes events that match the last few characters of the event record field specified as the value of Field.
         */
        endsWith?: string[];
        /**
         * An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
         */
        equals?: string[];
        /**
         * A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
         */
        field: string;
        /**
         * An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
         */
        notEndsWith?: string[];
        /**
         * An operator that excludes events that match the exact value of the event record field specified as the value of Field.
         */
        notEquals?: string[];
        /**
         * An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
         */
        notStartsWith?: string[];
        /**
         * An operator that includes events that match the first few characters of the event record field specified as the value of Field.
         */
        startsWith?: string[];
    }

    /**
     * A string that contains Insights types that are logged on an event data store.
     */
    export interface EventDataStoreInsightSelector {
        /**
         * The type of Insights to log on an event data store.
         */
        insightType?: string;
    }

    /**
     * Advanced event selectors let you create fine-grained selectors for the following AWS CloudTrail event record ﬁelds. They help you control costs by logging only those events that are important to you.
     */
    export interface TrailAdvancedEventSelector {
        /**
         * Contains all selector statements in an advanced event selector.
         */
        fieldSelectors: outputs.cloudtrail.TrailAdvancedFieldSelector[];
        /**
         * An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
         */
        name?: string;
    }

    /**
     * A single selector statement in an advanced event selector.
     */
    export interface TrailAdvancedFieldSelector {
        /**
         * An operator that includes events that match the last few characters of the event record field specified as the value of Field.
         */
        endsWith?: string[];
        /**
         * An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
         */
        equals?: string[];
        /**
         * A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory, eventSource (for management events), eventName, resources.type, and resources.ARN.
         */
        field: string;
        /**
         * An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
         */
        notEndsWith?: string[];
        /**
         * An operator that excludes events that match the exact value of the event record field specified as the value of Field.
         */
        notEquals?: string[];
        /**
         * An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
         */
        notStartsWith?: string[];
        /**
         * An operator that includes events that match the first few characters of the event record field specified as the value of Field.
         */
        startsWith?: string[];
    }

    /**
     * CloudTrail supports data event logging for Amazon S3 objects and AWS Lambda functions. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
     */
    export interface TrailDataResource {
        /**
         * The resource type in which you want to log data events. You can specify AWS::S3::Object or AWS::Lambda::Function resources.
         */
        type: string;
        /**
         * An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.
         */
        values?: string[];
    }

    /**
     * The type of email sending events to publish to the event destination.
     */
    export interface TrailEventSelector {
        /**
         * CloudTrail supports data event logging for Amazon S3 objects, AWS Lambda functions, and Amazon DynamoDB tables with basic event selectors. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events.
         *
         * For more information, see [Data Events](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html) and [Limits in AWS CloudTrail](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html) in the *AWS CloudTrail User Guide* .
         */
        dataResources?: outputs.cloudtrail.TrailDataResource[];
        /**
         * An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter), or it can filter out AWS Key Management Service events by containing "kms.amazonaws.com". By default, ExcludeManagementEventSources is empty, and AWS KMS events are included in events that are logged to your trail.
         */
        excludeManagementEventSources?: string[];
        /**
         * Specify if you want your event selector to include management events for your trail.
         */
        includeManagementEvents?: boolean;
        /**
         * Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.
         */
        readWriteType?: enums.cloudtrail.TrailEventSelectorReadWriteType;
    }

    /**
     * A string that contains insight types that are logged on a trail.
     */
    export interface TrailInsightSelector {
        /**
         * The type of insight to log on a trail.
         */
        insightType?: string;
    }

}

export namespace cloudwatch {
    /**
     * Dimension is an embedded property of the ``AWS::CloudWatch::Alarm`` type. Dimensions are name/value pairs that can be associated with a CW metric. You can specify a maximum of 10 dimensions for a given metric.
     */
    export interface AlarmDimension {
        /**
         * The name of the dimension, from 1–255 characters in length. This dimension name must have been included when the metric was published.
         */
        name: string;
        /**
         * The value for the dimension, from 1–255 characters in length.
         */
        value: string;
    }

    /**
     * The ``Metric`` property type represents a specific metric. ``Metric`` is a property of the [MetricStat](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricstat.html) property type.
     */
    export interface AlarmMetric {
        /**
         * The metric dimensions that you want to be used for the metric that the alarm will watch.
         */
        dimensions?: outputs.cloudwatch.AlarmDimension[];
        /**
         * The name of the metric that you want the alarm to watch. This is a required field.
         */
        metricName?: string;
        /**
         * The namespace of the metric that the alarm will watch.
         */
        namespace?: string;
    }

    /**
     * The ``MetricDataQuery`` property type specifies the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data. 
     *  Any expression used must return a single time series. For more information, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *User Guide*.
     */
    export interface AlarmMetricDataQuery {
        /**
         * The ID of the account where the metrics are located, if this is a cross-account alarm.
         */
        accountId?: string;
        /**
         * The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the ``Id`` of the other metrics to refer to those metrics, and can also use the ``Id`` of other expressions to use the result of those expressions. For more information about metric math expressions, see [Metric Math Syntax and Functions](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax) in the *User Guide*.
         *  Within each MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both.
         */
        expression?: string;
        /**
         * A short name used to tie this object to the results in the response. This name must be unique within a single call to ``GetMetricData``. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
         */
        id: string;
        /**
         * A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CW dashboard widget, the label is shown. If ``Label`` is omitted, CW generates a default.
         */
        label?: string;
        /**
         * The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
         *  Within one MetricDataQuery object, you must specify either ``Expression`` or ``MetricStat`` but not both.
         */
        metricStat?: outputs.cloudwatch.AlarmMetricStat;
        /**
         * The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` operation that includes a ``StorageResolution of 1 second``.
         */
        period?: number;
        /**
         * This option indicates whether to return the timestamps and raw data values of this metric.
         *  When you create an alarm based on a metric math expression, specify ``True`` for this value for only the one math expression that the alarm is based on. You must specify ``False`` for ``ReturnData`` for all the other metrics and expressions used in the alarm.
         *  This field is required.
         */
        returnData?: boolean;
    }

    /**
     * This structure defines the metric to be returned, along with the statistics, period, and units.
     *   ``MetricStat`` is a property of the [MetricDataQuery](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudwatch-alarm-metricdataquery.html) property type.
     */
    export interface AlarmMetricStat {
        /**
         * The metric to return, including the metric name, namespace, and dimensions.
         */
        metric: outputs.cloudwatch.AlarmMetric;
        /**
         * The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a ``PutMetricData`` call that includes a ``StorageResolution`` of 1 second.
         *  If the ``StartTime`` parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:
         *   +  Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).
         *   +  Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).
         *   +  Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).
         */
        period: number;
        /**
         * The statistic to return. It can include any CW statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the *User Guide*.
         */
        stat: string;
        /**
         * The unit to use for the returned data points. 
         *  Valid values are: Seconds, Microseconds, Milliseconds, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes, Bits, Kilobits, Megabits, Gigabits, Terabits, Percent, Count, Bytes/Second, Kilobytes/Second, Megabytes/Second, Gigabytes/Second, Terabytes/Second, Bits/Second, Kilobits/Second, Megabits/Second, Gigabits/Second, Terabits/Second, Count/Second, or None.
         */
        unit?: string;
    }

    /**
     * This structure defines the metrics that will be streamed.
     */
    export interface MetricStreamFilter {
        /**
         * Only metrics with MetricNames matching these values will be streamed. Must be set together with Namespace.
         */
        metricNames?: string[];
        /**
         * Only metrics with Namespace matching this value will be streamed.
         */
        namespace: string;
    }

    /**
     * This structure specifies a list of additional statistics to stream, and the metrics to stream those additional statistics for. All metrics that match the combination of metric name and namespace will be streamed with the extended statistics, no matter their dimensions.
     */
    export interface MetricStreamStatisticsConfiguration {
        /**
         * The additional statistics to stream for the metrics listed in IncludeMetrics.
         */
        additionalStatistics: string[];
        /**
         * An array that defines the metrics that are to have additional statistics streamed.
         */
        includeMetrics: outputs.cloudwatch.MetricStreamStatisticsMetric[];
    }

    /**
     * A structure that specifies the metric name and namespace for one metric that is going to have additional statistics included in the stream.
     */
    export interface MetricStreamStatisticsMetric {
        /**
         * The name of the metric.
         */
        metricName: string;
        /**
         * The namespace of the metric.
         */
        namespace: string;
    }

}

export namespace codeartifact {
    export interface PackageGroupOriginConfiguration {
        /**
         * The origin configuration that is applied to the package group.
         */
        restrictions: outputs.codeartifact.PackageGroupRestrictions;
    }

    export interface PackageGroupRestrictionType {
        /**
         * The repositories to add to the allowed repositories list. The allowed repositories list is used when the `RestrictionMode` is set to `ALLOW_SPECIFIC_REPOSITORIES` .
         */
        repositories?: string[];
        /**
         * The package group origin restriction setting. When the value is `INHERIT` , the value is set to the value of the first parent package group which does not have a value of `INHERIT` .
         */
        restrictionMode: enums.codeartifact.PackageGroupRestrictionTypeRestrictionMode;
    }

    export interface PackageGroupRestrictions {
        /**
         * The external upstream restriction determines if new package versions can be ingested or retained from external connections.
         */
        externalUpstream?: outputs.codeartifact.PackageGroupRestrictionType;
        /**
         * The internal upstream restriction determines if new package versions can be ingested or retained from upstream repositories.
         */
        internalUpstream?: outputs.codeartifact.PackageGroupRestrictionType;
        /**
         * The publish restriction determines if new package versions can be published.
         */
        publish?: outputs.codeartifact.PackageGroupRestrictionType;
    }

}

export namespace codebuild {
    export interface FleetVpcConfig {
        securityGroupIds?: string[];
        subnets?: string[];
        vpcId?: string;
    }

}

export namespace codeconnections {
}

export namespace codedeploy {
    export interface DeploymentConfigMinimumHealthyHosts {
        /**
         * The minimum healthy instance type:
         *
         * - HOST_COUNT: The minimum number of healthy instance as an absolute value.
         * - FLEET_PERCENT: The minimum number of healthy instance as a percentage of the total number of instance in the deployment.
         *
         * In an example of nine instance, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instance at a time. The deployment is successful if four or more instance are deployed to successfully. Otherwise, the deployment fails.
         *
         * > In a call to `GetDeploymentConfig` , CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, AWS CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful. 
         *
         * For more information, see [AWS CodeDeploy Instance Health](https://docs.aws.amazon.com//codedeploy/latest/userguide/instances-health.html) in the *AWS CodeDeploy User Guide* .
         */
        type: string;
        /**
         * The minimum healthy instance value.
         */
        value: number;
    }

    export interface DeploymentConfigMinimumHealthyHostsPerZone {
        /**
         * The `type` associated with the `MinimumHealthyHostsPerZone` option.
         */
        type: string;
        /**
         * The `value` associated with the `MinimumHealthyHostsPerZone` option.
         */
        value: number;
    }

    export interface DeploymentConfigTimeBasedCanary {
        /**
         * The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
         */
        canaryInterval: number;
        /**
         * The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
         */
        canaryPercentage: number;
    }

    export interface DeploymentConfigTimeBasedLinear {
        /**
         * The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
         */
        linearInterval: number;
        /**
         * The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
         */
        linearPercentage: number;
    }

    export interface DeploymentConfigTrafficRoutingConfig {
        /**
         * A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
         */
        timeBasedCanary?: outputs.codedeploy.DeploymentConfigTimeBasedCanary;
        /**
         * A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or Amazon ECS task sets are specified in the deployment's AppSpec file.
         */
        timeBasedLinear?: outputs.codedeploy.DeploymentConfigTimeBasedLinear;
        /**
         * The type of traffic shifting ( `TimeBasedCanary` or `TimeBasedLinear` ) used by a deployment configuration.
         */
        type: string;
    }

    export interface DeploymentConfigZonalConfig {
        /**
         * The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the *first* Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. You might set this option if you want to allow extra bake time for the first Availability Zone. If you don't specify a value for `firstZoneMonitorDurationInSeconds` , then CodeDeploy uses the `monitorDurationInSeconds` value for the first Availability Zone.
         *
         * For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
         */
        firstZoneMonitorDurationInSeconds?: number;
        /**
         * The number or percentage of instances that must remain available per Availability Zone during a deployment. This option works in conjunction with the `MinimumHealthyHosts` option. For more information, see [About the minimum number of healthy hosts per Availability Zone](https://docs.aws.amazon.com//codedeploy/latest/userguide/instances-health.html#minimum-healthy-hosts-az) in the *CodeDeploy User Guide* .
         *
         * If you don't specify the `minimumHealthyHostsPerZone` option, then CodeDeploy uses a default value of `0` percent.
         *
         * For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
         */
        minimumHealthyHostsPerZone?: outputs.codedeploy.DeploymentConfigMinimumHealthyHostsPerZone;
        /**
         * The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. Consider adding a monitor duration to give the deployment some time to prove itself (or 'bake') in one Availability Zone before it is released in the next zone. If you don't specify a `monitorDurationInSeconds` , CodeDeploy starts deploying to the next Availability Zone immediately.
         *
         * For more information about the zonal configuration feature, see [zonal configuration](https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations-create.html#zonal-config) in the *CodeDeploy User Guide* .
         */
        monitorDurationInSeconds?: number;
    }

}

export namespace codeguruprofiler {
    /**
     * The agent permissions attached to this profiling group.
     */
    export interface AgentPermissionsProperties {
        /**
         * The principals for the agent permissions.
         */
        principals: string[];
    }

    /**
     * Notification medium for users to get alerted for events that occur in application profile. We support SNS topic as a notification channel.
     */
    export interface ProfilingGroupChannel {
        /**
         * The channel ID.
         */
        channelId?: string;
        /**
         * The channel URI.
         */
        channelUri: string;
    }

}

export namespace codegurureviewer {
}

export namespace codepipeline {
    /**
     * Returns information about the details of an artifact.
     */
    export interface CustomActionTypeArtifactDetails {
        /**
         * The maximum number of artifacts allowed for the action type.
         */
        maximumCount: number;
        /**
         * The minimum number of artifacts allowed for the action type.
         */
        minimumCount: number;
    }

    /**
     * The configuration properties for the custom action.
     */
    export interface CustomActionTypeConfigurationProperties {
        /**
         * The description of the action configuration property that is displayed to users. 
         */
        description?: string;
        /**
         * Whether the configuration property is a key.
         */
        key: boolean;
        /**
         * The name of the action configuration property.
         */
        name: string;
        /**
         * Indicates that the property is used with PollForJobs. When creating a custom action, an action can have up to one queryable property. If it has one, that property must be both required and not secret.If you create a pipeline with a custom action type, and that custom action contains a queryable property, the value for that configuration property is subject to other restrictions. The value must be less than or equal to twenty (20) characters. The value can contain only alphanumeric characters, underscores, and hyphens. 
         */
        queryable?: boolean;
        /**
         * Whether the configuration property is a required value.
         */
        required: boolean;
        /**
         * Whether the configuration property is secret. Secrets are hidden from all calls except for GetJobDetails, GetThirdPartyJobDetails, PollForJobs, and PollForThirdPartyJobs.
         */
        secret: boolean;
        /**
         * The type of the configuration property.
         */
        type?: string;
    }

    /**
     * Settings is a property of the AWS::CodePipeline::CustomActionType resource that provides URLs that users can access to view information about the CodePipeline custom action. 
     */
    export interface CustomActionTypeSettings {
        /**
         * The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group. This link is provided as part of the action display in the pipeline. 
         */
        entityUrlTemplate?: string;
        /**
         * The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system, such as the console page for AWS CodeDeploy. This link is shown on the pipeline view page in the AWS CodePipeline console and provides a link to the execution entity of the external action. 
         */
        executionUrlTemplate?: string;
        /**
         * The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action. 
         */
        revisionUrlTemplate?: string;
        /**
         * The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
         */
        thirdPartyConfigurationUrl?: string;
    }

}

export namespace codestarconnections {
}

export namespace codestarnotifications {
    export interface NotificationRuleTarget {
        /**
         * The Amazon Resource Name (ARN) of the AWS Chatbot topic or AWS Chatbot client.
         */
        targetAddress: string;
        /**
         * The target type. Can be an Amazon Simple Notification Service topic or AWS Chatbot client.
         *
         * - Amazon Simple Notification Service topics are specified as `SNS` .
         * - AWS Chatbot clients are specified as `AWSChatbotSlack` .
         * - AWS Chatbot clients for Microsoft Teams are specified as `AWSChatbotMicrosoftTeams` .
         */
        targetType: string;
    }

}

export namespace cognito {
    export interface IdentityPoolCognitoIdentityProvider {
        /**
         * The client ID for the Amazon Cognito user pool.
         */
        clientId: string;
        /**
         * The provider name for an Amazon Cognito user pool. For example: `cognito-idp.us-east-2.amazonaws.com/us-east-2_123456789` .
         */
        providerName: string;
        /**
         * TRUE if server-side token validation is enabled for the identity provider’s token.
         *
         * After you set the `ServerSideTokenCheck` to TRUE for an identity pool, that identity pool checks with the integrated user pools to make sure the user has not been globally signed out or deleted before the identity pool provides an OIDC token or AWS credentials for the user.
         *
         * If the user is signed out or deleted, the identity pool returns a 400 Not Authorized error.
         */
        serverSideTokenCheck?: boolean;
    }

    export interface IdentityPoolCognitoStreams {
        /**
         * The Amazon Resource Name (ARN) of the role Amazon Cognito can assume to publish to the stream. This role must grant access to Amazon Cognito (cognito-sync) to invoke `PutRecord` on your Amazon Cognito stream.
         */
        roleArn?: string;
        /**
         * The name of the Amazon Cognito stream to receive updates. This stream must be in the developer's account and in the same Region as the identity pool.
         */
        streamName?: string;
        /**
         * Status of the Amazon Cognito streams. Valid values are: `ENABLED` or `DISABLED` .
         */
        streamingStatus?: string;
    }

    export interface IdentityPoolPushSync {
        /**
         * The ARNs of the Amazon SNS platform applications that could be used by clients.
         */
        applicationArns?: string[];
        /**
         * An IAM role configured to allow Amazon Cognito to call Amazon SNS on behalf of the developer.
         */
        roleArn?: string;
    }

    export interface IdentityPoolRoleAttachmentMappingRule {
        claim: string;
        matchType: string;
        roleArn: string;
        value: string;
    }

    export interface IdentityPoolRoleAttachmentRoleMapping {
        ambiguousRoleResolution?: string;
        identityProvider?: string;
        rulesConfiguration?: outputs.cognito.IdentityPoolRoleAttachmentRulesConfigurationType;
        type: string;
    }

    export interface IdentityPoolRoleAttachmentRulesConfigurationType {
        rules: outputs.cognito.IdentityPoolRoleAttachmentMappingRule[];
    }

    export interface LogDeliveryConfigurationCloudWatchLogsConfiguration {
        logGroupArn?: string;
    }

    export interface LogDeliveryConfigurationLogConfiguration {
        cloudWatchLogsConfiguration?: outputs.cognito.LogDeliveryConfigurationCloudWatchLogsConfiguration;
        eventSource?: string;
        logLevel?: string;
    }

    export interface UserPoolAccountRecoverySetting {
        /**
         * The list of `RecoveryOptionTypes` .
         */
        recoveryMechanisms?: outputs.cognito.UserPoolRecoveryOption[];
    }

    export interface UserPoolAddOns {
        /**
         * The operating mode of advanced security features in your user pool.
         */
        advancedSecurityMode?: string;
    }

    export interface UserPoolAdminCreateUserConfig {
        /**
         * Set to `True` if only the administrator is allowed to create user profiles. Set to `False` if users can sign themselves up via an app.
         */
        allowAdminCreateUserOnly?: boolean;
        /**
         * The message template to be used for the welcome message to new users.
         *
         * See also [Customizing User Invitation Messages](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization) .
         */
        inviteMessageTemplate?: outputs.cognito.UserPoolInviteMessageTemplate;
        /**
         * The user account expiration limit, in days, after which a new account that hasn't signed in is no longer usable. To reset the account after that time limit, you must call `AdminCreateUser` again, specifying `"RESEND"` for the `MessageAction` parameter. The default value for this parameter is 7.
         *
         * > If you set a value for `TemporaryPasswordValidityDays` in `PasswordPolicy` , that value will be used, and `UnusedAccountValidityDays` will be no longer be an available parameter for that user pool.
         */
        unusedAccountValidityDays?: number;
    }

    export interface UserPoolClientAnalyticsConfiguration {
        /**
         * The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project for integration with the chosen user pool client. Amazon Cognito publishes events to the Amazon Pinpoint project that the app ARN declares.
         */
        applicationArn?: string;
        /**
         * The application ID for an Amazon Pinpoint application.
         */
        applicationId?: string;
        /**
         * The external ID.
         */
        externalId?: string;
        /**
         * The ARN of an AWS Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
         */
        roleArn?: string;
        /**
         * If `UserDataShared` is `true` , Amazon Cognito includes user data in the events that it publishes to Amazon Pinpoint analytics.
         */
        userDataShared?: boolean;
    }

    export interface UserPoolClientTokenValidityUnits {
        /**
         * A time unit of `seconds` , `minutes` , `hours` , or `days` for the value that you set in the `AccessTokenValidity` parameter. The default `AccessTokenValidity` time unit is hours. `AccessTokenValidity` duration can range from five minutes to one day.
         */
        accessToken?: string;
        /**
         * A time unit of `seconds` , `minutes` , `hours` , or `days` for the value that you set in the `IdTokenValidity` parameter. The default `IdTokenValidity` time unit is hours. `IdTokenValidity` duration can range from five minutes to one day.
         */
        idToken?: string;
        /**
         * A time unit of `seconds` , `minutes` , `hours` , or `days` for the value that you set in the `RefreshTokenValidity` parameter. The default `RefreshTokenValidity` time unit is days. `RefreshTokenValidity` duration can range from 60 minutes to 10 years.
         */
        refreshToken?: string;
    }

    export interface UserPoolCustomEmailSender {
        /**
         * The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon Cognito triggers to send email notifications to users.
         */
        lambdaArn?: string;
        /**
         * The Lambda version represents the signature of the "request" attribute in the "event" information that Amazon Cognito passes to your custom email sender AWS Lambda function. The only supported value is `V1_0` .
         */
        lambdaVersion?: string;
    }

    export interface UserPoolCustomSmsSender {
        /**
         * The Amazon Resource Name (ARN) of the AWS Lambda function that Amazon Cognito triggers to send SMS notifications to users.
         */
        lambdaArn?: string;
        /**
         * The Lambda version represents the signature of the "request" attribute in the "event" information Amazon Cognito passes to your custom SMS sender Lambda function. The only supported value is `V1_0` .
         */
        lambdaVersion?: string;
    }

    export interface UserPoolDeviceConfiguration {
        /**
         * When true, a remembered device can sign in with device authentication instead of SMS and time-based one-time password (TOTP) factors for multi-factor authentication (MFA).
         *
         * > Whether or not `ChallengeRequiredOnNewDevice` is true, users who sign in with devices that have not been confirmed or remembered must still provide a second factor in a user pool that requires MFA.
         */
        challengeRequiredOnNewDevice?: boolean;
        /**
         * When true, Amazon Cognito doesn't automatically remember a user's device when your app sends a [ConfirmDevice](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmDevice.html) API request. In your app, create a prompt for your user to choose whether they want to remember their device. Return the user's choice in an [UpdateDeviceStatus](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateDeviceStatus.html) API request.
         *
         * When `DeviceOnlyRememberedOnUserPrompt` is `false` , Amazon Cognito immediately remembers devices that you register in a `ConfirmDevice` API request.
         */
        deviceOnlyRememberedOnUserPrompt?: boolean;
    }

    export interface UserPoolDomainCustomDomainConfigType {
        /**
         * The Amazon Resource Name (ARN) of an AWS Certificate Manager SSL certificate. You use this certificate for the subdomain of your custom domain.
         */
        certificateArn?: string;
    }

    export interface UserPoolEmailConfiguration {
        /**
         * The set of configuration rules that can be applied to emails sent using Amazon SES. A configuration set is applied to an email by including a reference to the configuration set in the headers of the email. Once applied, all of the rules in that configuration set are applied to the email. Configuration sets can be used to apply the following types of rules to emails:
         *
         * - Event publishing – Amazon SES can track the number of send, delivery, open, click, bounce, and complaint events for each email sent. Use event publishing to send information about these events to other AWS services such as SNS and CloudWatch.
         * - IP pool management – When leasing dedicated IP addresses with Amazon SES, you can create groups of IP addresses, called dedicated IP pools. You can then associate the dedicated IP pools with configuration sets.
         */
        configurationSet?: string;
        /**
         * Specifies whether Amazon Cognito uses its built-in functionality to send your users email messages, or uses your Amazon Simple Email Service email configuration. Specify one of the following values:
         *
         * - **COGNITO_DEFAULT** - When Amazon Cognito emails your users, it uses its built-in email functionality. When you use the default option, Amazon Cognito allows only a limited number of emails each day for your user pool. For typical production environments, the default email limit is less than the required delivery volume. To achieve a higher delivery volume, specify DEVELOPER to use your Amazon SES email configuration.
         *
         * To look up the email delivery limit for the default option, see [Limits](https://docs.aws.amazon.com/cognito/latest/developerguide/limits.html) in the *Amazon Cognito Developer Guide* .
         *
         * The default FROM address is `no-reply@verificationemail.com` . To customize the FROM address, provide the Amazon Resource Name (ARN) of an Amazon SES verified email address for the `SourceArn` parameter.
         * - **DEVELOPER** - When Amazon Cognito emails your users, it uses your Amazon SES configuration. Amazon Cognito calls Amazon SES on your behalf to send email from your verified email address. When you use this option, the email delivery limits are the same limits that apply to your Amazon SES verified email address in your AWS account .
         *
         * If you use this option, provide the ARN of an Amazon SES verified email address for the `SourceArn` parameter.
         *
         * Before Amazon Cognito can email your users, it requires additional permissions to call Amazon SES on your behalf. When you update your user pool with this option, Amazon Cognito creates a *service-linked role* , which is a type of role in your AWS account . This role contains the permissions that allow you to access Amazon SES and send email messages from your email address. For more information about the service-linked role that Amazon Cognito creates, see [Using Service-Linked Roles for Amazon Cognito](https://docs.aws.amazon.com/cognito/latest/developerguide/using-service-linked-roles.html) in the *Amazon Cognito Developer Guide* .
         */
        emailSendingAccount?: string;
        /**
         * Identifies either the sender's email address or the sender's name with their email address. For example, `testuser@example.com` or `Test User <testuser@example.com>` . This address appears before the body of the email.
         */
        from?: string;
        /**
         * The destination to which the receiver of the email should reply.
         */
        replyToEmailAddress?: string;
        /**
         * The ARN of a verified email address or an address from a verified domain in Amazon SES. You can set a `SourceArn` email from a verified domain only with an API request. You can set a verified email address, but not an address in a verified domain, in the Amazon Cognito console. Amazon Cognito uses the email address that you provide in one of the following ways, depending on the value that you specify for the `EmailSendingAccount` parameter:
         *
         * - If you specify `COGNITO_DEFAULT` , Amazon Cognito uses this address as the custom FROM address when it emails your users using its built-in email account.
         * - If you specify `DEVELOPER` , Amazon Cognito emails your users with this address by calling Amazon SES on your behalf.
         *
         * The Region value of the `SourceArn` parameter must indicate a supported AWS Region of your user pool. Typically, the Region in the `SourceArn` and the user pool Region are the same. For more information, see [Amazon SES email configuration regions](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html#user-pool-email-developer-region-mapping) in the [Amazon Cognito Developer Guide](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html) .
         */
        sourceArn?: string;
    }

    export interface UserPoolInviteMessageTemplate {
        /**
         * The message template for email messages. EmailMessage is allowed only if [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER.
         */
        emailMessage?: string;
        /**
         * The subject line for email messages. EmailSubject is allowed only if [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is DEVELOPER.
         */
        emailSubject?: string;
        /**
         * The message template for SMS messages.
         */
        smsMessage?: string;
    }

    export interface UserPoolLambdaConfig {
        /**
         * Creates an authentication challenge.
         */
        createAuthChallenge?: string;
        /**
         * A custom email sender AWS Lambda trigger.
         */
        customEmailSender?: outputs.cognito.UserPoolCustomEmailSender;
        /**
         * A custom Message AWS Lambda trigger.
         */
        customMessage?: string;
        /**
         * A custom SMS sender AWS Lambda trigger.
         */
        customSmsSender?: outputs.cognito.UserPoolCustomSmsSender;
        /**
         * Defines the authentication challenge.
         */
        defineAuthChallenge?: string;
        /**
         * The Amazon Resource Name of a AWS Key Management Service ( AWS KMS ) key. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to `CustomEmailSender` and `CustomSMSSender` .
         */
        kmsKeyId?: string;
        /**
         * A post-authentication AWS Lambda trigger.
         */
        postAuthentication?: string;
        /**
         * A post-confirmation AWS Lambda trigger.
         */
        postConfirmation?: string;
        /**
         * A pre-authentication AWS Lambda trigger.
         */
        preAuthentication?: string;
        /**
         * A pre-registration AWS Lambda trigger.
         */
        preSignUp?: string;
        /**
         * The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger.
         *
         * Set this parameter for legacy purposes. If you also set an ARN in `PreTokenGenerationConfig` , its value must be identical to `PreTokenGeneration` . For new instances of pre token generation triggers, set the `LambdaArn` of `PreTokenGenerationConfig` .
         *
         * You can set ``
         */
        preTokenGeneration?: string;
        /**
         * The detailed configuration of a pre token generation trigger. If you also set an ARN in `PreTokenGeneration` , its value must be identical to `PreTokenGenerationConfig` .
         */
        preTokenGenerationConfig?: outputs.cognito.UserPoolPreTokenGenerationConfig;
        /**
         * The user migration Lambda config type.
         */
        userMigration?: string;
        /**
         * Verifies the authentication challenge response.
         */
        verifyAuthChallengeResponse?: string;
    }

    export interface UserPoolNumberAttributeConstraints {
        /**
         * The maximum length of a number attribute value. Must be a number less than or equal to `2^1023` , represented as a string with a length of 131072 characters or fewer.
         */
        maxValue?: string;
        /**
         * The minimum value of an attribute that is of the number data type.
         */
        minValue?: string;
    }

    export interface UserPoolPasswordPolicy {
        /**
         * The minimum length of the password in the policy that you have set. This value can't be less than 6.
         */
        minimumLength?: number;
        /**
         * In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.
         */
        requireLowercase?: boolean;
        /**
         * In the password policy that you have set, refers to whether you have required users to use at least one number in their password.
         */
        requireNumbers?: boolean;
        /**
         * In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.
         */
        requireSymbols?: boolean;
        /**
         * In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.
         */
        requireUppercase?: boolean;
        /**
         * The number of days a temporary password is valid in the password policy. If the user doesn't sign in during this time, an administrator must reset their password. Defaults to `7` . If you submit a value of `0` , Amazon Cognito treats it as a null value and sets `TemporaryPasswordValidityDays` to its default value.
         *
         * > When you set `TemporaryPasswordValidityDays` for a user pool, you can no longer set a value for the legacy `UnusedAccountValidityDays` parameter in that user pool.
         */
        temporaryPasswordValidityDays?: number;
    }

    export interface UserPoolPolicies {
        /**
         * The password policy.
         */
        passwordPolicy?: outputs.cognito.UserPoolPasswordPolicy;
    }

    export interface UserPoolPreTokenGenerationConfig {
        /**
         * The Amazon Resource Name (ARN) of the function that you want to assign to your Lambda trigger.
         *
         * This parameter and the `PreTokenGeneration` property of `LambdaConfig` have the same value. For new instances of pre token generation triggers, set `LambdaArn` .
         */
        lambdaArn?: string;
        /**
         * The user pool trigger version of the request that Amazon Cognito sends to your Lambda function. Higher-numbered versions add fields that support new features.
         */
        lambdaVersion?: string;
    }

    export interface UserPoolRecoveryOption {
        /**
         * Specifies the recovery method for a user.
         */
        name?: string;
        /**
         * A positive integer specifying priority of a method with 1 being the highest priority.
         */
        priority?: number;
    }

    export interface UserPoolResourceServerResourceServerScopeType {
        /**
         * A description of the scope.
         */
        scopeDescription: string;
        /**
         * The name of the scope.
         */
        scopeName: string;
    }

    export interface UserPoolRiskConfigurationAttachmentAccountTakeoverActionType {
        /**
         * The action to take in response to the account takeover action. Valid values are as follows:
         *
         * - `BLOCK` Choosing this action will block the request.
         * - `MFA_IF_CONFIGURED` Present an MFA challenge if user has configured it, else allow the request.
         * - `MFA_REQUIRED` Present an MFA challenge if user has configured it, else block the request.
         * - `NO_ACTION` Allow the user to sign in.
         */
        eventAction: string;
        /**
         * Flag specifying whether to send a notification.
         */
        notify: boolean;
    }

    export interface UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType {
        /**
         * Action to take for a high risk.
         */
        highAction?: outputs.cognito.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType;
        /**
         * Action to take for a low risk.
         */
        lowAction?: outputs.cognito.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType;
        /**
         * Action to take for a medium risk.
         */
        mediumAction?: outputs.cognito.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType;
    }

    export interface UserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType {
        /**
         * Account takeover risk configuration actions.
         */
        actions: outputs.cognito.UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType;
        /**
         * The notify configuration used to construct email notifications.
         */
        notifyConfiguration?: outputs.cognito.UserPoolRiskConfigurationAttachmentNotifyConfigurationType;
    }

    export interface UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType {
        /**
         * The event action.
         */
        eventAction: string;
    }

    export interface UserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType {
        /**
         * The compromised credentials risk configuration actions.
         */
        actions: outputs.cognito.UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType;
        /**
         * Perform the action for these events. The default is to perform all events if no event filter is specified.
         */
        eventFilter?: string[];
    }

    export interface UserPoolRiskConfigurationAttachmentNotifyConfigurationType {
        /**
         * Email template used when a detected risk event is blocked.
         */
        blockEmail?: outputs.cognito.UserPoolRiskConfigurationAttachmentNotifyEmailType;
        /**
         * The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
         */
        from?: string;
        /**
         * The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk.
         */
        mfaEmail?: outputs.cognito.UserPoolRiskConfigurationAttachmentNotifyEmailType;
        /**
         * The email template used when a detected risk event is allowed.
         */
        noActionEmail?: outputs.cognito.UserPoolRiskConfigurationAttachmentNotifyEmailType;
        /**
         * The destination to which the receiver of an email should reply to.
         */
        replyTo?: string;
        /**
         * The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the `From` parameter.
         */
        sourceArn: string;
    }

    export interface UserPoolRiskConfigurationAttachmentNotifyEmailType {
        /**
         * The email HTML body.
         */
        htmlBody?: string;
        /**
         * The email subject.
         */
        subject: string;
        /**
         * The email text body.
         */
        textBody?: string;
    }

    export interface UserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType {
        /**
         * Overrides the risk decision to always block the pre-authentication requests. The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
         */
        blockedIpRangeList?: string[];
        /**
         * Risk detection isn't performed on the IP addresses in this range list. The IP range is in CIDR notation.
         */
        skippedIpRangeList?: string[];
    }

    export interface UserPoolSchemaAttribute {
        /**
         * The data format of the values for your attribute. When you choose an `AttributeDataType` , Amazon Cognito validates the input against the data type. A custom attribute value in your user's ID token is always a string, for example `"custom:isMember" : "true"` or `"custom:YearsAsMember" : "12"` .
         */
        attributeDataType?: string;
        /**
         * > We recommend that you use [WriteAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserPoolClientType.html#CognitoUserPools-Type-UserPoolClientType-WriteAttributes) in the user pool client to control how attributes can be mutated for new use cases instead of using `DeveloperOnlyAttribute` . 
         *
         * Specifies whether the attribute type is developer only. This attribute can only be modified by an administrator. Users will not be able to modify this attribute using their access token.
         */
        developerOnlyAttribute?: boolean;
        /**
         * Specifies whether the value of the attribute can be changed.
         *
         * Any user pool attribute whose value you map from an IdP attribute must be mutable, with a parameter value of `true` . Amazon Cognito updates mapped attributes when users sign in to your application through an IdP. If an attribute is immutable, Amazon Cognito throws an error when it attempts to update the attribute. For more information, see [Specifying Identity Provider Attribute Mappings for Your User Pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html) .
         */
        mutable?: boolean;
        /**
         * The name of your user pool attribute. When you create or update a user pool, adding a schema attribute creates a custom or developer-only attribute. When you add an attribute with a `Name` value of `MyAttribute` , Amazon Cognito creates the custom attribute `custom:MyAttribute` . When `DeveloperOnlyAttribute` is `true` , Amazon Cognito creates your attribute as `dev:MyAttribute` . In an operation that describes a user pool, Amazon Cognito returns this value as `value` for standard attributes, `custom:value` for custom attributes, and `dev:value` for developer-only attributes..
         */
        name?: string;
        /**
         * Specifies the constraints for an attribute of the number type.
         */
        numberAttributeConstraints?: outputs.cognito.UserPoolNumberAttributeConstraints;
        /**
         * Specifies whether a user pool attribute is required. If the attribute is required and the user doesn't provide a value, registration or sign-in will fail.
         */
        required?: boolean;
        /**
         * Specifies the constraints for an attribute of the string type.
         */
        stringAttributeConstraints?: outputs.cognito.UserPoolStringAttributeConstraints;
    }

    export interface UserPoolSmsConfiguration {
        /**
         * The external ID is a value. We recommend you use `ExternalId` to add security to your IAM role, which is used to call Amazon SNS to send SMS messages for your user pool. If you provide an `ExternalId` , the Cognito User Pool uses it when attempting to assume your IAM role. You can also set your roles trust policy to require the `ExternalID` . If you use the Cognito Management Console to create a role for SMS MFA, Cognito creates a role with the required permissions and a trust policy that uses `ExternalId` .
         */
        externalId?: string;
        /**
         * The Amazon Resource Name (ARN) of the Amazon SNS caller. This is the ARN of the IAM role in your AWS account that Amazon Cognito will use to send SMS messages. SMS messages are subject to a [spending limit](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html) .
         */
        snsCallerArn?: string;
        /**
         * The AWS Region to use with Amazon SNS integration. You can choose the same Region as your user pool, or a supported *Legacy Amazon SNS alternate Region* .
         *
         * Amazon Cognito resources in the Asia Pacific (Seoul) AWS Region must use your Amazon SNS configuration in the Asia Pacific (Tokyo) Region. For more information, see [SMS message settings for Amazon Cognito user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html) .
         */
        snsRegion?: string;
    }

    export interface UserPoolStringAttributeConstraints {
        /**
         * The maximum length of a string attribute value. Must be a number less than or equal to `2^1023` , represented as a string with a length of 131072 characters or fewer.
         */
        maxLength?: string;
        /**
         * The minimum length.
         */
        minLength?: string;
    }

    export interface UserPoolUserAttributeType {
        /**
         * The name of the attribute.
         */
        name?: string;
        /**
         * The value of the attribute.
         */
        value?: string;
    }

    export interface UserPoolUserAttributeUpdateSettings {
        /**
         * Requires that your user verifies their email address, phone number, or both before Amazon Cognito updates the value of that attribute. When you update a user attribute that has this option activated, Amazon Cognito sends a verification message to the new phone number or email address. Amazon Cognito doesn’t change the value of the attribute until your user responds to the verification message and confirms the new value.
         *
         * You can verify an updated email address or phone number with a [VerifyUserAttribute](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifyUserAttribute.html) API request. You can also call the [AdminUpdateUserAttributes](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html) API and set `email_verified` or `phone_number_verified` to true.
         *
         * When `AttributesRequireVerificationBeforeUpdate` is false, your user pool doesn't require that your users verify attribute changes before Amazon Cognito updates them. In a user pool where `AttributesRequireVerificationBeforeUpdate` is false, API operations that change attribute values can immediately update a user’s `email` or `phone_number` attribute.
         */
        attributesRequireVerificationBeforeUpdate: string[];
    }

    export interface UserPoolUsernameConfiguration {
        /**
         * Specifies whether user name case sensitivity will be applied for all users in the user pool through Amazon Cognito APIs. For most use cases, set case sensitivity to `False` (case insensitive) as a best practice. When usernames and email addresses are case insensitive, users can sign in as the same user when they enter a different capitalization of their user name.
         *
         * Valid values include:
         *
         * - **True** - Enables case sensitivity for all username input. When this option is set to `True` , users must sign in using the exact capitalization of their given username, such as "UserName". This is the default value.
         * - **False** - Enables case insensitivity for all username input. For example, when this option is set to `False` , users can sign in using `username` , `USERNAME` , or `UserName` . This option also enables both `preferred_username` and `email` alias to be case insensitive, in addition to the `username` attribute.
         */
        caseSensitive?: boolean;
    }

    export interface UserPoolVerificationMessageTemplate {
        /**
         * The default email option.
         */
        defaultEmailOption?: string;
        /**
         * The template for email messages that Amazon Cognito sends to your users. You can set an `EmailMessage` template only if the value of [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is `DEVELOPER` . When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is `DEVELOPER` , your user pool sends email messages with your own Amazon SES configuration.
         */
        emailMessage?: string;
        /**
         * The email message template for sending a confirmation link to the user. You can set an `EmailMessageByLink` template only if the value of [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is `DEVELOPER` . When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is `DEVELOPER` , your user pool sends email messages with your own Amazon SES configuration.
         */
        emailMessageByLink?: string;
        /**
         * The subject line for the email message template. You can set an `EmailSubject` template only if the value of [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is `DEVELOPER` . When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is `DEVELOPER` , your user pool sends email messages with your own Amazon SES configuration.
         */
        emailSubject?: string;
        /**
         * The subject line for the email message template for sending a confirmation link to the user. You can set an `EmailSubjectByLink` template only if the value of [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is `DEVELOPER` . When your [EmailSendingAccount](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount) is `DEVELOPER` , your user pool sends email messages with your own Amazon SES configuration.
         */
        emailSubjectByLink?: string;
        /**
         * The template for SMS messages that Amazon Cognito sends to your users.
         */
        smsMessage?: string;
    }

}

export namespace comprehend {
    export interface DocumentClassifierAugmentedManifestsListItem {
        /**
         * The JSON attribute that contains the annotations for your training documents. The number of attribute names that you specify depends on whether your augmented manifest file is the output of a single labeling job or a chained labeling job.
         *
         * If your file is the output of a single labeling job, specify the LabelAttributeName key that was used when the job was created in Ground Truth.
         *
         * If your file is the output of a chained labeling job, specify the LabelAttributeName key for one or more jobs in the chain. Each LabelAttributeName key provides the annotations from an individual job.
         */
        attributeNames: string[];
        /**
         * The Amazon S3 location of the augmented manifest file.
         */
        s3Uri: string;
        /**
         * The purpose of the data you've provided in the augmented manifest. You can either train or test this data. If you don't specify, the default is train.
         *
         * TRAIN - all of the documents in the manifest will be used for training. If no test documents are provided, Amazon Comprehend will automatically reserve a portion of the training documents for testing.
         *
         * TEST - all of the documents in the manifest will be used for testing.
         */
        split?: enums.comprehend.DocumentClassifierAugmentedManifestsListItemSplit;
    }

    export interface DocumentClassifierDocumentReaderConfig {
        /**
         * This field defines the Amazon Textract API operation that Amazon Comprehend uses to extract text from PDF files and image files. Enter one of the following values:
         *
         * - `TEXTRACT_DETECT_DOCUMENT_TEXT` - The Amazon Comprehend service uses the `DetectDocumentText` API operation.
         * - `TEXTRACT_ANALYZE_DOCUMENT` - The Amazon Comprehend service uses the `AnalyzeDocument` API operation.
         */
        documentReadAction: enums.comprehend.DocumentClassifierDocumentReaderConfigDocumentReadAction;
        /**
         * Determines the text extraction actions for PDF files. Enter one of the following values:
         *
         * - `SERVICE_DEFAULT` - use the Amazon Comprehend service defaults for PDF files.
         * - `FORCE_DOCUMENT_READ_ACTION` - Amazon Comprehend uses the Textract API specified by DocumentReadAction for all PDF files, including digital PDF files.
         */
        documentReadMode?: enums.comprehend.DocumentClassifierDocumentReaderConfigDocumentReadMode;
        /**
         * Specifies the type of Amazon Textract features to apply. If you chose `TEXTRACT_ANALYZE_DOCUMENT` as the read action, you must specify one or both of the following values:
         *
         * - `TABLES` - Returns additional information about any tables that are detected in the input document.
         * - `FORMS` - Returns additional information about any forms that are detected in the input document.
         */
        featureTypes?: enums.comprehend.DocumentClassifierDocumentReaderConfigFeatureTypesItem[];
    }

    export interface DocumentClassifierDocuments {
        /**
         * The S3 URI location of the training documents specified in the S3Uri CSV file.
         */
        s3Uri: string;
        /**
         * The S3 URI location of the test documents included in the TestS3Uri CSV file. This field is not required if you do not specify a test CSV file.
         */
        testS3Uri?: string;
    }

    export interface DocumentClassifierInputDataConfig {
        /**
         * A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.
         *
         * This parameter is required if you set `DataFormat` to `AUGMENTED_MANIFEST` .
         */
        augmentedManifests?: outputs.comprehend.DocumentClassifierAugmentedManifestsListItem[];
        /**
         * The format of your training data:
         *
         * - `COMPREHEND_CSV` : A two-column CSV file, where labels are provided in the first column, and documents are provided in the second. If you use this value, you must provide the `S3Uri` parameter in your request.
         * - `AUGMENTED_MANIFEST` : A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its associated labels.
         *
         * If you use this value, you must provide the `AugmentedManifests` parameter in your request.
         *
         * If you don't specify a value, Amazon Comprehend uses `COMPREHEND_CSV` as the default.
         */
        dataFormat?: enums.comprehend.DocumentClassifierInputDataConfigDataFormat;
        documentReaderConfig?: outputs.comprehend.DocumentClassifierDocumentReaderConfig;
        /**
         * The type of input documents for training the model. Provide plain-text documents to create a plain-text model, and provide semi-structured documents to create a native document model.
         */
        documentType?: enums.comprehend.DocumentClassifierInputDataConfigDocumentType;
        /**
         * The S3 location of the training documents. This parameter is required in a request to create a native document model.
         */
        documents?: outputs.comprehend.DocumentClassifierDocuments;
        /**
         * Indicates the delimiter used to separate each label for training a multi-label classifier. The default delimiter between labels is a pipe (|). You can use a different character as a delimiter (if it's an allowed character) by specifying it under Delimiter for labels. If the training documents use a delimiter other than the default or the delimiter you specify, the labels on that line will be combined to make a single unique label, such as LABELLABELLABEL.
         */
        labelDelimiter?: string;
        /**
         * The Amazon S3 URI for the input data. The S3 bucket must be in the same Region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files.
         *
         * For example, if you use the URI `S3://bucketName/prefix` , if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.
         *
         * This parameter is required if you set `DataFormat` to `COMPREHEND_CSV` .
         */
        s3Uri?: string;
        /**
         * This specifies the Amazon S3 location that contains the test annotations for the document classifier. The URI must be in the same AWS Region as the API endpoint that you are calling.
         */
        testS3Uri?: string;
    }

    export interface DocumentClassifierOutputDataConfig {
        /**
         * ID for the AWS Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job. The KmsKeyId can be one of the following formats:
         *
         * - KMS Key ID: `"1234abcd-12ab-34cd-56ef-1234567890ab"`
         * - Amazon Resource Name (ARN) of a KMS Key: `"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"`
         * - KMS Key Alias: `"alias/ExampleAlias"`
         * - ARN of a KMS Key Alias: `"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"`
         */
        kmsKeyId?: string;
        /**
         * When you use the `OutputDataConfig` object while creating a custom classifier, you specify the Amazon S3 location where you want to write the confusion matrix and other output files. The URI must be in the same Region as the API endpoint that you are calling. The location is used as the prefix for the actual location of this output file.
         *
         * When the custom classifier job is finished, the service creates the output file in a directory specific to the job. The `S3Uri` field contains the location of the output file, called `output.tar.gz` . It is a compressed archive that contains the confusion matrix.
         */
        s3Uri?: string;
    }

    export interface DocumentClassifierVpcConfig {
        /**
         * The ID number for a security group on an instance of your private VPC. Security groups on your VPC function serve as a virtual firewall to control inbound and outbound traffic and provides security for the resources that you’ll be accessing on the VPC. This ID number is preceded by "sg-", for instance: "sg-03b388029b0a285ea". For more information, see [Security Groups for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) .
         */
        securityGroupIds: string[];
        /**
         * The ID for each subnet being used in your private VPC. This subnet is a subset of the a range of IPv4 addresses used by the VPC and is specific to a given availability zone in the VPC’s Region. This ID number is preceded by "subnet-", for instance: "subnet-04ccf456919e69055". For more information, see [VPCs and Subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) .
         */
        subnets: string[];
    }

    export interface FlywheelDataSecurityConfig {
        /**
         * ID for the AWS KMS key that Amazon Comprehend uses to encrypt the data in the data lake.
         */
        dataLakeKmsKeyId?: string;
        /**
         * ID for the AWS KMS key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
         *
         * - KMS Key ID: `"1234abcd-12ab-34cd-56ef-1234567890ab"`
         * - Amazon Resource Name (ARN) of a KMS Key: `"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"`
         */
        modelKmsKeyId?: string;
        /**
         * ID for the AWS KMS key that Amazon Comprehend uses to encrypt the volume.
         */
        volumeKmsKeyId?: string;
        /**
         * Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html) .
         */
        vpcConfig?: outputs.comprehend.FlywheelVpcConfig;
    }

    export interface FlywheelDocumentClassificationConfig {
        /**
         * One or more labels to associate with the custom classifier.
         */
        labels?: string[];
        /**
         * Classification mode indicates whether the documents are `MULTI_CLASS` or `MULTI_LABEL` .
         */
        mode: enums.comprehend.FlywheelDocumentClassificationConfigMode;
    }

    export interface FlywheelEntityRecognitionConfig {
        /**
         * Up to 25 entity types that the model is trained to recognize.
         */
        entityTypes?: outputs.comprehend.FlywheelEntityTypesListItem[];
    }

    export interface FlywheelEntityTypesListItem {
        /**
         * An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer.
         *
         * Entity types must not contain the following invalid characters: \n (line break), \\n (escaped line break, \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab), and , (comma).
         */
        type: string;
    }

    export interface FlywheelTaskConfig {
        /**
         * Configuration required for a document classification model.
         */
        documentClassificationConfig?: outputs.comprehend.FlywheelDocumentClassificationConfig;
        /**
         * Configuration required for an entity recognition model.
         */
        entityRecognitionConfig?: outputs.comprehend.FlywheelEntityRecognitionConfig;
        /**
         * Language code for the language that the model supports.
         */
        languageCode: enums.comprehend.FlywheelTaskConfigLanguageCode;
    }

    export interface FlywheelVpcConfig {
        /**
         * The ID number for a security group on an instance of your private VPC. Security groups on your VPC function serve as a virtual firewall to control inbound and outbound traffic and provides security for the resources that you’ll be accessing on the VPC. This ID number is preceded by "sg-", for instance: "sg-03b388029b0a285ea". For more information, see [Security Groups for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) .
         */
        securityGroupIds: string[];
        /**
         * The ID for each subnet being used in your private VPC. This subnet is a subset of the a range of IPv4 addresses used by the VPC and is specific to a given availability zone in the VPC’s Region. This ID number is preceded by "subnet-", for instance: "subnet-04ccf456919e69055". For more information, see [VPCs and Subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) .
         */
        subnets: string[];
    }

}

export namespace config {
    /**
     * The configuration for a Provider to assume a role.
     */
    export interface AssumeRole {
        /**
         * Number of seconds to restrict the assume role session duration.
         */
        durationSeconds?: number;
        /**
         * External identifier to use when assuming the role.
         */
        externalId?: string;
        /**
         * IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.
         */
        policy?: string;
        /**
         * Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the role.
         */
        policyArns?: string[];
        /**
         * Amazon Resource Name (ARN) of the IAM Role to assume.
         */
        roleArn?: string;
        /**
         * Session name to use when assuming the role.
         */
        sessionName?: string;
        /**
         * Map of assume role session tags.
         */
        tags?: {[key: string]: string};
        /**
         * A list of keys for session tags that you want to set as transitive. If you set a tag key as transitive, the corresponding key and value passes to subsequent sessions in a role chain.
         */
        transitiveTagKeys?: string[];
    }

    /**
     * The configuration with resource tag settings to apply across all resources handled by this provider. This is designed to replace redundant per-resource `tags` configurations. Provider tags can be overridden with new values, but not excluded from specific resources. To override provider tag values, use the `tags` argument within a resource to configure new tag values for matching keys.
     */
    export interface DefaultTags {
        /**
         * A group of tags to set across all resources.
         */
        tags?: {[key: string]: string};
    }

    /**
     * The configuration for for customizing service endpoints.
     */
    export interface Endpoints {
        /**
         * Override the default endpoint for AWS CloudControl
         */
        cloudcontrol?: string;
        /**
         * Override the default endpoint for AWS CloudFormation
         */
        cloudformation?: string;
        /**
         * Override the default endpoint for AWS Elastic Compute Cloud (EC2)
         */
        ec2?: string;
        /**
         * Override the default endpoint for AWS Systems Manager
         */
        ssm?: string;
        /**
         * Override the default endpoint for AWS Security Token Service (STS)
         */
        sts?: string;
    }

    /**
     * The configuration with resource tag settings to ignore across all resources handled by this provider (except any individual service tag resources such as `ec2.Tag`) for situations where external systems are managing certain resource tags.
     */
    export interface IgnoreTags {
        /**
         * List of exact resource tag keys to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning the tag in any `tags` attributes and displaying any configuration difference for the tag value. If any resource configuration still has this tag key configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
         */
        keyPrefixes?: string[];
        /**
         * List of resource tag key prefixes to ignore across all resources handled by this provider. This configuration prevents Pulumi from returning any tag key matching the prefixes in any `tags` attributes and displaying any configuration difference for those tag values. If any resource configuration still has a tag matching one of the prefixes configured in the `tags` argument, it will display a perpetual difference until the tag is removed from the argument or `ignoreChanges` is also used.
         */
        keys?: string[];
    }

}

export namespace configuration {
    /**
     * Indicates whether an AWS resource or CC rule is compliant and provides the number of contributors that affect the compliance.
     */
    export interface ComplianceProperties {
        /**
         * Compliance type determined by the Config rule
         */
        type?: string;
    }

    /**
     * Provides the CustomPolicyDetails, the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the events that cause the evaluation of your AWS resources.
     */
    export interface ConfigRuleCustomPolicyDetails {
        /**
         * The boolean expression for enabling debug logging for your CC Custom Policy rule. The default value is ``false``.
         */
        enableDebugLogDelivery?: boolean;
        /**
         * The runtime system for your CC Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by CC Custom Policy rules. For more information about Guard, see the [Guard GitHub Repository](https://docs.aws.amazon.com/https://github.com/aws-cloudformation/cloudformation-guard).
         */
        policyRuntime?: string;
        /**
         * The policy definition containing the logic for your CC Custom Policy rule.
         */
        policyText?: string;
    }

    /**
     * The configuration object for CC rule evaluation mode. The supported valid values are Detective or Proactive.
     */
    export interface ConfigRuleEvaluationModeConfiguration {
        /**
         * The mode of an evaluation. The valid values are Detective or Proactive.
         */
        mode?: string;
    }

    /**
     * Defines which resources trigger an evaluation for an CC rule. The scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. Specify a scope to constrain which resources trigger an evaluation for a rule. Otherwise, evaluations for the rule are triggered when any resource in your recording group changes in configuration.
     */
    export interface ConfigRuleScope {
        /**
         * The ID of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for ``ComplianceResourceTypes``.
         */
        complianceResourceId?: string;
        /**
         * The resource types of only those AWS resources that you want to trigger an evaluation for the rule. You can only specify one type if you also specify a resource ID for ``ComplianceResourceId``.
         */
        complianceResourceTypes?: string[];
        /**
         * The tag key that is applied to only those AWS resources that you want to trigger an evaluation for the rule.
         */
        tagKey?: string;
        /**
         * The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule. If you specify a value for ``TagValue``, you must also specify a value for ``TagKey``.
         */
        tagValue?: string;
    }

    /**
     * Provides the CustomPolicyDetails, the rule owner (```` for managed rules, ``CUSTOM_POLICY`` for Custom Policy rules, and ``CUSTOM_LAMBDA`` for Custom Lambda rules), the rule identifier, and the events that cause the evaluation of your AWS resources.
     */
    export interface ConfigRuleSource {
        /**
         * Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to ``CUSTOM_POLICY``.
         */
        customPolicyDetails?: outputs.configuration.ConfigRuleCustomPolicyDetails;
        /**
         * Indicates whether AWS or the customer owns and manages the CC rule.
         *   CC Managed Rules are predefined rules owned by AWS. For more information, see [Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html) in the *developer guide*.
         *   CC Custom Rules are rules that you can develop either with Guard (``CUSTOM_POLICY``) or LAMlong (``CUSTOM_LAMBDA``). For more information, see [Custom Rules](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html) in the *developer guide*.
         */
        owner: string;
        /**
         * Provides the source and the message types that cause CC to evaluate your AWS resources against a rule. It also provides the frequency with which you want CC to run evaluations for the rule if the trigger type is periodic.
         *  If the owner is set to ``CUSTOM_POLICY``, the only acceptable values for the CC rule trigger message type are ``ConfigurationItemChangeNotification`` and ``OversizedConfigurationItemChangeNotification``.
         */
        sourceDetails?: outputs.configuration.ConfigRuleSourceDetail[];
        /**
         * For CC Managed rules, a predefined identifier from a list. For example, ``IAM_PASSWORD_POLICY`` is a managed rule. To reference a managed rule, see [List of Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html).
         *  For CC Custom Lambda rules, the identifier is the Amazon Resource Name (ARN) of the rule's LAMlong function, such as ``arn:aws:lambda:us-east-2:123456789012:function:custom_rule_name``.
         *  For CC Custom Policy rules, this field will be ignored.
         */
        sourceIdentifier?: string;
    }

    /**
     * Provides the source and the message types that trigger CC to evaluate your AWS resources against a rule. It also provides the frequency with which you want CC to run evaluations for the rule if the trigger type is periodic. You can specify the parameter values for ``SourceDetail`` only for custom rules.
     */
    export interface ConfigRuleSourceDetail {
        /**
         * The source of the event, such as an AWS service, that triggers CC to evaluate your AWS resources.
         */
        eventSource: string;
        /**
         * The frequency at which you want CC to run evaluations for a custom rule with a periodic trigger. If you specify a value for ``MaximumExecutionFrequency``, then ``MessageType`` must use the ``ScheduledNotification`` value.
         *   By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the ``MaximumExecutionFrequency`` parameter.
         *  Based on the valid value you choose, CC runs evaluations once for each valid value. For example, if you choose ``Three_Hours``, CC runs evaluations once every three hours. In this case, ``Three_Hours`` is the frequency of this rule.
         */
        maximumExecutionFrequency?: string;
        /**
         * The type of notification that triggers CC to run an evaluation for a rule. You can specify the following notification types:
         *   +   ``ConfigurationItemChangeNotification`` - Triggers an evaluation when CC delivers a configuration item as a result of a resource change.
         *   +   ``OversizedConfigurationItemChangeNotification`` - Triggers an evaluation when CC delivers an oversized configuration item. CC may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.
         *   +   ``ScheduledNotification`` - Triggers a periodic evaluation at the frequency specified for ``MaximumExecutionFrequency``.
         *   +   ``ConfigurationSnapshotDeliveryCompleted`` - Triggers a periodic evaluation when CC delivers a configuration snapshot.
         *   
         *  If you want your custom rule to be triggered by configuration changes, specify two SourceDetail objects, one for ``ConfigurationItemChangeNotification`` and one for ``OversizedConfigurationItemChangeNotification``.
         */
        messageType: string;
    }

    export interface ConfigurationAggregatorAccountAggregationSource {
        /**
         * The 12-digit account ID of the account being aggregated.
         */
        accountIds: string[];
        /**
         * If true, aggregate existing AWS Config regions and future regions.
         */
        allAwsRegions?: boolean;
        /**
         * The source regions being aggregated.
         */
        awsRegions?: string[];
    }

    export interface ConfigurationAggregatorOrganizationAggregationSource {
        /**
         * If true, aggregate existing AWS Config regions and future regions.
         */
        allAwsRegions?: boolean;
        /**
         * The source regions being aggregated.
         */
        awsRegions?: string[];
        /**
         * ARN of the IAM role used to retrieve AWS Organizations details associated with the aggregator account.
         */
        roleArn: string;
    }

    /**
     * Input parameters in the form of key-value pairs for the conformance pack.
     */
    export interface ConformancePackInputParameter {
        /**
         * One part of a key-value pair.
         */
        parameterName: string;
        /**
         * Another part of the key-value pair.
         */
        parameterValue: string;
    }

    /**
     * Input parameters in the form of key-value pairs for the conformance pack.
     */
    export interface OrganizationConformancePackConformancePackInputParameter {
        /**
         * One part of a key-value pair.
         */
        parameterName: string;
        /**
         * One part of a key-value pair.
         */
        parameterValue: string;
    }

    /**
     * The TemplateSSMDocumentDetails object contains the name of the SSM document and the version of the SSM document.
     */
    export interface TemplateSsmDocumentDetailsProperties {
        /**
         * The name or Amazon Resource Name (ARN) of the SSM document to use to create a conformance pack. If you use the document name, AWS Config checks only your account and AWS Region for the SSM document.
         */
        documentName?: string;
        /**
         * The version of the SSM document to use to create a conformance pack. By default, AWS Config uses the latest version.
         *
         * > This field is optional.
         */
        documentVersion?: string;
    }

}

export namespace connect {
    /**
     * The constraints for the task template
     */
    export interface ConstraintsProperties {
        /**
         * Lists the fields that are invisible to agents.
         */
        invisibleFields?: outputs.connect.TaskTemplateInvisibleFieldInfo[];
        /**
         * Lists the fields that are read-only to agents, and cannot be edited.
         */
        readOnlyFields?: outputs.connect.TaskTemplateReadOnlyFieldInfo[];
        /**
         * Lists the fields that are required to be filled by agents.
         */
        requiredFields?: outputs.connect.TaskTemplateRequiredFieldInfo[];
    }

    /**
     * The evaluation form base item.
     */
    export interface EvaluationFormBaseItem {
        /**
         * The evaluation form section item
         */
        section: outputs.connect.EvaluationFormSection;
    }

    /**
     * The evaluation form item.
     */
    export interface EvaluationFormItem {
        /**
         * The evaluation form question item
         */
        question?: outputs.connect.EvaluationFormQuestion;
        /**
         * The evaluation form section item
         */
        section?: outputs.connect.EvaluationFormSection;
    }

    /**
     * The automation properties for the numeric question.
     */
    export interface EvaluationFormNumericQuestionAutomation {
        /**
         * The automation property name of the question.
         */
        propertyValue: outputs.connect.EvaluationFormNumericQuestionPropertyValueAutomation;
    }

    /**
     * The option ranges used for scoring in numeric questions.
     */
    export interface EvaluationFormNumericQuestionOption {
        /**
         * The flag to mark the option as automatic fail.
         */
        automaticFail?: boolean;
        /**
         * The maximum value of the option range.
         */
        maxValue: number;
        /**
         * The minimum value of the option range.
         */
        minValue: number;
        /**
         * The score of the option range.
         */
        score?: number;
    }

    /**
     * The properties of the numeric question.
     */
    export interface EvaluationFormNumericQuestionProperties {
        /**
         * The automation properties for the numeric question.
         */
        automation?: outputs.connect.EvaluationFormNumericQuestionAutomation;
        /**
         * The maximum value for answers of the question.
         */
        maxValue: number;
        /**
         * The minimum value for answers of the question.
         */
        minValue: number;
        /**
         * The list of option ranges used for scoring.
         */
        options?: outputs.connect.EvaluationFormNumericQuestionOption[];
    }

    /**
     * The automation property name of the question.
     */
    export interface EvaluationFormNumericQuestionPropertyValueAutomation {
        /**
         * The automation property label.
         */
        label: enums.connect.EvaluationFormNumericQuestionPropertyValueAutomationLabel;
    }

    /**
     * The evaluation form question.
     */
    export interface EvaluationFormQuestion {
        /**
         * The instructions for the question.
         */
        instructions?: string;
        /**
         * The flag to enable not applicable answers to the question.
         */
        notApplicableEnabled?: boolean;
        /**
         * The type of the question.
         */
        questionType: enums.connect.EvaluationFormQuestionQuestionType;
        /**
         * The properties of the question
         */
        questionTypeProperties?: outputs.connect.EvaluationFormQuestionTypeProperties;
        /**
         * The identifier used to reference the question.
         */
        refId: string;
        /**
         * The title of the question.
         */
        title: string;
        /**
         * The question weight used for scoring.
         */
        weight?: number;
    }

    /**
     * The properties of the question.
     */
    export interface EvaluationFormQuestionTypeProperties {
        /**
         * The properties of the numeric question.
         */
        numeric?: outputs.connect.EvaluationFormNumericQuestionProperties;
        /**
         * The properties of the single-select question.
         */
        singleSelect?: outputs.connect.EvaluationFormSingleSelectQuestionProperties;
    }

    /**
     * The scoring strategy.
     */
    export interface EvaluationFormScoringStrategy {
        /**
         * The scoring mode.
         */
        mode: enums.connect.EvaluationFormScoringStrategyMode;
        /**
         * The scoring status.
         */
        status: enums.connect.EvaluationFormScoringStrategyStatus;
    }

    /**
     * The evaluation form section.
     */
    export interface EvaluationFormSection {
        /**
         * The instructions for the section.
         */
        instructions?: string;
        /**
         * The list of section items.
         */
        items?: outputs.connect.EvaluationFormItem[];
        /**
         * The identifier to reference the section.
         */
        refId: string;
        /**
         * The title of the section.
         */
        title: string;
        /**
         * The item weight used for scoring.
         */
        weight?: number;
    }

    /**
     * The automation properties for the single-select question.
     */
    export interface EvaluationFormSingleSelectQuestionAutomation {
        /**
         * The option reference identifier of the default answer.
         */
        defaultOptionRefId?: string;
        /**
         * The answer options for the automation.
         */
        options: outputs.connect.EvaluationFormSingleSelectQuestionAutomationOption[];
    }

    /**
     * The automation option for the single-select question.
     */
    export interface EvaluationFormSingleSelectQuestionAutomationOption {
        /**
         * The automation option based on Rules categories.
         */
        ruleCategory: outputs.connect.EvaluationFormSingleSelectQuestionRuleCategoryAutomation;
    }

    /**
     * The option for a question.
     */
    export interface EvaluationFormSingleSelectQuestionOption {
        /**
         * The flag to mark the option as automatic fail.
         */
        automaticFail?: boolean;
        /**
         * The identifier used to reference the option.
         */
        refId: string;
        /**
         * The score of the option.
         */
        score?: number;
        /**
         * The title of the option.
         */
        text: string;
    }

    /**
     * The properties of the single-select question.
     */
    export interface EvaluationFormSingleSelectQuestionProperties {
        /**
         * The automation properties for the single-select question.
         */
        automation?: outputs.connect.EvaluationFormSingleSelectQuestionAutomation;
        /**
         * The display mode of the single-select question.
         */
        displayAs?: enums.connect.EvaluationFormSingleSelectQuestionPropertiesDisplayAs;
        /**
         * The list of options for the question.
         */
        options: outputs.connect.EvaluationFormSingleSelectQuestionOption[];
    }

    /**
     * The automation option based on Rules categories.
     */
    export interface EvaluationFormSingleSelectQuestionRuleCategoryAutomation {
        /**
         * The category name as defined in Rules.
         */
        category: string;
        /**
         * The automation condition applied on contact categories.
         */
        condition: enums.connect.EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition;
        /**
         * The option identifier referencing the option to be selected when the automation option is triggered.
         */
        optionRefId: string;
    }

    /**
     * Contains information about the hours of operation.
     */
    export interface HoursOfOperationConfig {
        /**
         * The day that the hours of operation applies to.
         */
        day: enums.connect.HoursOfOperationConfigDay;
        /**
         * The end time that your contact center closes.
         */
        endTime: outputs.connect.HoursOfOperationTimeSlice;
        /**
         * The start time that your contact center opens.
         */
        startTime: outputs.connect.HoursOfOperationTimeSlice;
    }

    /**
     * The start time or end time for an hours of operation.
     */
    export interface HoursOfOperationTimeSlice {
        /**
         * The hours.
         */
        hours: number;
        /**
         * The minutes.
         */
        minutes: number;
    }

    export interface InstanceAttributes {
        autoResolveBestVoices?: boolean;
        contactLens?: boolean;
        contactflowLogs?: boolean;
        earlyMedia?: boolean;
        inboundCalls: boolean;
        outboundCalls: boolean;
        useCustomTtsVoices?: boolean;
    }

    export interface InstanceStorageConfigEncryptionConfig {
        /**
         * The type of encryption.
         */
        encryptionType: enums.connect.InstanceStorageConfigEncryptionType;
        /**
         * The full ARN of the encryption key.
         *
         * > Be sure to provide the full ARN of the encryption key, not just the ID.
         * > 
         * > Amazon Connect supports only KMS keys with the default key spec of [`SYMMETRIC_DEFAULT`](https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-symmetric-default) .
         */
        keyId: string;
    }

    export interface InstanceStorageConfigKinesisFirehoseConfig {
        /**
         * The Amazon Resource Name (ARN) of the delivery stream.
         */
        firehoseArn: string;
    }

    export interface InstanceStorageConfigKinesisStreamConfig {
        /**
         * The Amazon Resource Name (ARN) of the data stream.
         */
        streamArn: string;
    }

    export interface InstanceStorageConfigKinesisVideoStreamConfig {
        /**
         * The encryption configuration.
         */
        encryptionConfig: outputs.connect.InstanceStorageConfigEncryptionConfig;
        /**
         * The prefix of the video stream.
         */
        prefix: string;
        /**
         * The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.
         *
         * The default value is 0, indicating that the stream does not persist data.
         */
        retentionPeriodHours: number;
    }

    export interface InstanceStorageConfigS3Config {
        /**
         * The S3 bucket name.
         */
        bucketName: string;
        /**
         * The S3 bucket prefix.
         */
        bucketPrefix: string;
        /**
         * The Amazon S3 encryption configuration.
         */
        encryptionConfig?: outputs.connect.InstanceStorageConfigEncryptionConfig;
    }

    /**
     * The outbound caller ID name, number, and outbound whisper flow.
     */
    export interface QueueOutboundCallerConfig {
        /**
         * The caller ID name.
         */
        outboundCallerIdName?: string;
        /**
         * The Amazon Resource Name (ARN) of the outbound caller ID number.
         *
         * > Only use the phone number ARN format that doesn't contain `instance` in the path, for example, `arn:aws:connect:us-east-1:1234567890:phone-number/uuid` . This is the same ARN format that is returned when you create a phone number using CloudFormation , or when you call the [ListPhoneNumbersV2](https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html) API.
         */
        outboundCallerIdNumberArn?: string;
        /**
         * The Amazon Resource Name (ARN) of the outbound flow.
         */
        outboundFlowArn?: string;
    }

    /**
     * Configuration settings for the quick connect.
     */
    export interface QuickConnectConfig {
        /**
         * The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
         */
        phoneConfig?: outputs.connect.QuickConnectPhoneNumberQuickConnectConfig;
        /**
         * The queue configuration. This is required only if QuickConnectType is QUEUE.
         */
        queueConfig?: outputs.connect.QuickConnectQueueQuickConnectConfig;
        /**
         * The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
         */
        quickConnectType: enums.connect.QuickConnectType;
        /**
         * The user configuration. This is required only if QuickConnectType is USER.
         */
        userConfig?: outputs.connect.QuickConnectUserQuickConnectConfig;
    }

    /**
     * The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
     */
    export interface QuickConnectPhoneNumberQuickConnectConfig {
        /**
         * The phone number in E.164 format.
         */
        phoneNumber: string;
    }

    /**
     * The queue configuration. This is required only if QuickConnectType is QUEUE.
     */
    export interface QuickConnectQueueQuickConnectConfig {
        /**
         * The Amazon Resource Name (ARN) of the flow.
         */
        contactFlowArn: string;
        /**
         * The Amazon Resource Name (ARN) of the queue.
         */
        queueArn: string;
    }

    /**
     * The user configuration. This is required only if QuickConnectType is USER.
     */
    export interface QuickConnectUserQuickConnectConfig {
        /**
         * The Amazon Resource Name (ARN) of the flow.
         */
        contactFlowArn: string;
        /**
         * The Amazon Resource Name (ARN) of the user.
         */
        userArn: string;
    }

    /**
     * Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.
     */
    export interface RoutingProfileCrossChannelBehavior {
        /**
         * Specifies the other channels that can be routed to an agent handling their current channel.
         */
        behaviorType: enums.connect.RoutingProfileBehaviorType;
    }

    /**
     * Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
     */
    export interface RoutingProfileMediaConcurrency {
        /**
         * The channels that agents can handle in the Contact Control Panel (CCP).
         */
        channel: enums.connect.RoutingProfileChannel;
        /**
         * The number of contacts an agent can have on a channel simultaneously.
         *
         * Valid Range for `VOICE` : Minimum value of 1. Maximum value of 1.
         *
         * Valid Range for `CHAT` : Minimum value of 1. Maximum value of 10.
         *
         * Valid Range for `TASK` : Minimum value of 1. Maximum value of 10.
         */
        concurrency: number;
        /**
         * Defines the cross-channel routing behavior for each channel that is enabled for this Routing Profile. For example, this allows you to offer an agent a different contact from another channel when they are currently working with a contact from a Voice channel.
         */
        crossChannelBehavior?: outputs.connect.RoutingProfileCrossChannelBehavior;
    }

    /**
     * Contains information about the queue and channel for which priority and delay can be set.
     */
    export interface RoutingProfileQueueConfig {
        /**
         * The delay, in seconds, a contact should be in the queue before they are routed to an available agent. For more information, see [Queues: priority and delay](https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html) in the *Amazon Connect Administrator Guide* .
         */
        delay: number;
        /**
         * The order in which contacts are to be handled for the queue. For more information, see [Queues: priority and delay](https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html) .
         */
        priority: number;
        /**
         * Contains information about a queue resource.
         */
        queueReference: outputs.connect.RoutingProfileQueueReference;
    }

    /**
     * Contains the channel and queue identifier for a routing profile.
     */
    export interface RoutingProfileQueueReference {
        /**
         * The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.
         */
        channel: enums.connect.RoutingProfileChannel;
        /**
         * The Amazon Resource Name (ARN) of the queue.
         */
        queueArn: string;
    }

    /**
     * The list of actions that will be executed when a rule is triggered.
     */
    export interface RuleActions {
        /**
         * Information about the contact category action. The syntax can be empty, for example, `{}` .
         */
        assignContactCategoryActions?: outputs.connect.RuleAssignContactCategoryAction[];
        createCaseActions?: outputs.connect.RuleCreateCaseAction[];
        endAssociatedTasksActions?: outputs.connect.RuleEndAssociatedTasksAction[];
        /**
         * Information about the EventBridge action.
         */
        eventBridgeActions?: outputs.connect.RuleEventBridgeAction[];
        /**
         * Information about the send notification action.
         */
        sendNotificationActions?: outputs.connect.RuleSendNotificationAction[];
        /**
         * Information about the task action. This field is required if `TriggerEventSource` is one of the following values: `OnZendeskTicketCreate` | `OnZendeskTicketStatusUpdate` | `OnSalesforceCaseCreate`
         */
        taskActions?: outputs.connect.RuleTaskAction[];
        updateCaseActions?: outputs.connect.RuleUpdateCaseAction[];
    }

    /**
     * The definition for assigning contact category action.
     */
    export interface RuleAssignContactCategoryAction {
    }

    /**
     * The definition for create case action.
     */
    export interface RuleCreateCaseAction {
        fields: outputs.connect.RuleField[];
        /**
         * The Id of template.
         */
        templateId: string;
    }

    /**
     * The definition for ending associated task action.
     */
    export interface RuleEndAssociatedTasksAction {
    }

    /**
     * The definition for event bridge action.
     */
    export interface RuleEventBridgeAction {
        /**
         * The name of the event bridge action.
         */
        name: string;
    }

    /**
     * The field of the case.
     */
    export interface RuleField {
        /**
         * The Id of the field
         */
        id: string;
        value: outputs.connect.RuleFieldValue;
    }

    /**
     * The value of the field.
     */
    export interface RuleFieldValue {
        booleanValue?: boolean;
        doubleValue?: number;
        emptyValue?: any;
        stringValue?: string;
    }

    /**
     * The type of notification recipient.
     */
    export interface RuleNotificationRecipientType {
        /**
         * The list of recipients by user arns.
         */
        userArns?: string[];
        /**
         * The collection of recipients who are identified by user tags
         */
        userTags?: {[key: string]: string};
    }

    /**
     * A contact reference.
     */
    export interface RuleReference {
        type: enums.connect.RuleReferenceType;
        value: string;
    }

    /**
     * The definition for sending notification action.
     */
    export interface RuleSendNotificationAction {
        /**
         * The content of notification.
         */
        content: string;
        /**
         * The type of content.
         */
        contentType: enums.connect.RuleSendNotificationActionContentType;
        /**
         * The means of delivery.
         */
        deliveryMethod: enums.connect.RuleSendNotificationActionDeliveryMethod;
        recipient: outputs.connect.RuleNotificationRecipientType;
        /**
         * The subject of notification.
         */
        subject?: string;
    }

    /**
     * The definition of task action.
     */
    export interface RuleTaskAction {
        /**
         * The Amazon Resource Name (ARN) of the contact flow.
         */
        contactFlowArn: string;
        /**
         * The description which appears in the agent's Contact Control Panel (CCP).
         */
        description?: string;
        /**
         * The name which appears in the agent's Contact Control Panel (CCP).
         */
        name: string;
        /**
         * A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
         */
        references?: {[key: string]: outputs.connect.RuleReference};
    }

    /**
     * The event source that will trigger the rule.
     */
    export interface RuleTriggerEventSource {
        /**
         * The name of event source.
         */
        eventSourceName: enums.connect.RuleTriggerEventSourceEventSourceName;
        /**
         * The Amazon Resource Name (ARN) for the AppIntegration association.
         */
        integrationAssociationArn?: string;
    }

    /**
     * The definition for update case action.
     */
    export interface RuleUpdateCaseAction {
        fields: outputs.connect.RuleField[];
    }

    /**
     * A third-party application's metadata.
     */
    export interface SecurityProfileApplication {
        /**
         * The permissions that the agent is granted on the application
         */
        applicationPermissions: string[];
        /**
         * Namespace of the application that you want to give access to.
         */
        namespace: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SecurityProfileTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * the default value for the task template's field
     */
    export interface TaskTemplateDefaultFieldValue {
        /**
         * Default value for the field.
         */
        defaultValue: string;
        /**
         * Identifier of a field.
         */
        id: outputs.connect.TaskTemplateFieldIdentifier;
    }

    /**
     * A task template field object.
     */
    export interface TaskTemplateField {
        /**
         * The description of the task template's field
         */
        description?: string;
        /**
         * The unique identifier for the field.
         */
        id: outputs.connect.TaskTemplateFieldIdentifier;
        /**
         * list of field options to be used with single select
         */
        singleSelectOptions?: string[];
        /**
         * Indicates the type of field. Following are the valid field types: `NAME` `DESCRIPTION` | `SCHEDULED_TIME` | `QUICK_CONNECT` | `URL` | `NUMBER` | `TEXT` | `TEXT_AREA` | `DATE_TIME` | `BOOLEAN` | `SINGLE_SELECT` | `EMAIL`
         */
        type: enums.connect.TaskTemplateFieldType;
    }

    /**
     * the identifier (name) for the task template field
     */
    export interface TaskTemplateFieldIdentifier {
        /**
         * The name of the task template field
         */
        name: string;
    }

    /**
     * Invisible field info
     */
    export interface TaskTemplateInvisibleFieldInfo {
        id: outputs.connect.TaskTemplateFieldIdentifier;
    }

    /**
     * ReadOnly field info
     */
    export interface TaskTemplateReadOnlyFieldInfo {
        id: outputs.connect.TaskTemplateFieldIdentifier;
    }

    /**
     * Required field info
     */
    export interface TaskTemplateRequiredFieldInfo {
        id: outputs.connect.TaskTemplateFieldIdentifier;
    }

    /**
     * Contains information about the identity of a user.
     */
    export interface UserIdentityInfo {
        /**
         * The email address. If you are using SAML for identity management and include this parameter, an error is returned.
         */
        email?: string;
        /**
         * The first name. This is required if you are using Amazon Connect or SAML for identity management.
         */
        firstName?: string;
        /**
         * The last name. This is required if you are using Amazon Connect or SAML for identity management.
         */
        lastName?: string;
        /**
         * The user's mobile number.
         */
        mobile?: string;
        /**
         * The user's secondary email address. If you provide a secondary email, the user receives email notifications -- other than password reset notifications -- to this email address instead of to their primary email address.
         *
         * *Pattern* : `(?=^.{0,265}$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,63}`
         */
        secondaryEmail?: string;
    }

    /**
     * Contains information about the phone configuration settings for a user.
     */
    export interface UserPhoneConfig {
        /**
         * The After Call Work (ACW) timeout setting, in seconds. This parameter has a minimum value of 0 and a maximum value of 2,000,000 seconds (24 days). Enter 0 if you don't want to allocate a specific amount of ACW time. It essentially means an indefinite amount of time. When the conversation ends, ACW starts; the agent must choose Close contact to end ACW.
         *
         * > When returned by a `SearchUsers` call, `AfterContactWorkTimeLimit` is returned in milliseconds.
         */
        afterContactWorkTimeLimit?: number;
        /**
         * The Auto accept setting.
         */
        autoAccept?: boolean;
        /**
         * The phone number for the user's desk phone.
         */
        deskPhoneNumber?: string;
        /**
         * The phone type.
         */
        phoneType: enums.connect.UserPhoneType;
    }

    /**
     * Proficiency of a user.
     */
    export interface UserProficiency {
        /**
         * The name of user’s proficiency. You must use a predefined attribute name that is present in the Amazon Connect instance.
         */
        attributeName: string;
        /**
         * The value of user’s proficiency. You must use a predefined attribute value that is present in the Amazon Connect instance.
         */
        attributeValue: string;
        /**
         * The level of the proficiency. The valid values are 1, 2, 3, 4 and 5.
         */
        level: number;
    }

    /**
     * The values of a predefined attribute.
     */
    export interface ValuesProperties {
        /**
         * Predefined attribute values of type string list.
         */
        stringList?: string[];
    }

}

export namespace connectcampaigns {
    /**
     * Agentless Dialer config
     */
    export interface CampaignAgentlessDialerConfig {
        /**
         * Allocates dialing capacity for this campaign between multiple active campaigns.
         */
        dialingCapacity?: number;
    }

    /**
     * The configuration used for answering machine detection during outbound calls
     */
    export interface CampaignAnswerMachineDetectionConfig {
        /**
         * Enables detection of prompts (e.g., beep after after a voicemail greeting)
         */
        awaitAnswerMachinePrompt?: boolean;
        /**
         * Flag to decided whether outbound calls should have answering machine detection enabled or not
         */
        enableAnswerMachineDetection: boolean;
    }

    /**
     * The possible types of dialer config parameters
     */
    export interface CampaignDialerConfig {
        /**
         * The configuration of the agentless dialer.
         */
        agentlessDialerConfig?: outputs.connectcampaigns.CampaignAgentlessDialerConfig;
        /**
         * The configuration of the predictive dialer.
         */
        predictiveDialerConfig?: outputs.connectcampaigns.CampaignPredictiveDialerConfig;
        /**
         * The configuration of the progressive dialer.
         */
        progressiveDialerConfig?: outputs.connectcampaigns.CampaignProgressiveDialerConfig;
    }

    /**
     * The configuration used for outbound calls.
     */
    export interface CampaignOutboundCallConfig {
        /**
         * Whether answering machine detection has been enabled.
         */
        answerMachineDetectionConfig?: outputs.connectcampaigns.CampaignAnswerMachineDetectionConfig;
        /**
         * The identifier of the contact flow for the outbound call.
         */
        connectContactFlowArn: string;
        /**
         * The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
         */
        connectQueueArn?: string;
        /**
         * The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
         */
        connectSourcePhoneNumber?: string;
    }

    /**
     * Predictive Dialer config
     */
    export interface CampaignPredictiveDialerConfig {
        /**
         * The bandwidth allocation of a queue resource.
         */
        bandwidthAllocation: number;
        /**
         * Allocates dialing capacity for this campaign between multiple active campaigns.
         */
        dialingCapacity?: number;
    }

    /**
     * Progressive Dialer config
     */
    export interface CampaignProgressiveDialerConfig {
        /**
         * The bandwidth allocation of a queue resource.
         */
        bandwidthAllocation: number;
        /**
         * Allocates dialing capacity for this campaign between multiple active campaigns.
         */
        dialingCapacity?: number;
    }

}

export namespace controltower {
    export interface EnabledBaselineParameter {
        /**
         * A string denoting the parameter key.
         */
        key?: string;
        /**
         * A low-level `Document` object of any type (for example, a Java Object).
         */
        value?: string | any | number | (boolean | number | any | string)[] | boolean;
    }

    export interface EnabledControlParameter {
        /**
         * The key of a key/value pair. It is of type `string` .
         */
        key: string;
        /**
         * The value of a key/value pair. It can be of type `array` , `string` , `number` , `object` , or `boolean` . [Note: The *Type* field that follows may show a single type such as Number, which is only one possible type.]
         */
        value: (string | number | any | boolean)[] | string | number | any | boolean;
    }

}

export namespace customerprofiles {
    /**
     * Mathematical expression and a list of attribute items specified in that expression.
     */
    export interface CalculatedAttributeDefinitionAttributeDetails {
        /**
         * Mathematical expression and a list of attribute items specified in that expression.
         */
        attributes: outputs.customerprofiles.CalculatedAttributeDefinitionAttributeItem[];
        /**
         * Mathematical expression that is performed on attribute items provided in the attribute list. Each element in the expression should follow the structure of \"{ObjectTypeName.AttributeName}\".
         */
        expression: string;
    }

    /**
     * The details of a single attribute item specified in the mathematical expression.
     */
    export interface CalculatedAttributeDefinitionAttributeItem {
        name: string;
    }

    /**
     * The conditions including range, object count, and threshold for the calculated attribute.
     */
    export interface CalculatedAttributeDefinitionConditions {
        /**
         * The number of profile objects used for the calculated attribute.
         */
        objectCount?: number;
        /**
         * The relative time period over which data is included in the aggregation.
         */
        range?: outputs.customerprofiles.CalculatedAttributeDefinitionRange;
        /**
         * The threshold for the calculated attribute.
         */
        threshold?: outputs.customerprofiles.CalculatedAttributeDefinitionThreshold;
    }

    /**
     * The relative time period over which data is included in the aggregation.
     */
    export interface CalculatedAttributeDefinitionRange {
        /**
         * The unit of time.
         */
        unit: enums.customerprofiles.CalculatedAttributeDefinitionRangeUnit;
        /**
         * The amount of time of the specified unit.
         */
        value: number;
    }

    /**
     * The threshold for the calculated attribute.
     */
    export interface CalculatedAttributeDefinitionThreshold {
        /**
         * The operator of the threshold.
         */
        operator: enums.customerprofiles.CalculatedAttributeDefinitionThresholdOperator;
        /**
         * The value of the threshold.
         */
        value: string;
    }

    /**
     * Details regarding the Kinesis stream.
     */
    export interface DestinationDetailsProperties {
        /**
         * The status of enabling the Kinesis stream as a destination for export.
         */
        status: enums.customerprofiles.EventStreamStatus;
        /**
         * The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.
         */
        uri: string;
    }

    /**
     * Configures information about the AttributeTypesSelector where the rule-based identity resolution uses to match profiles.
     */
    export interface DomainAttributeTypesSelector {
        /**
         * The Address type. You can choose from Address, BusinessAddress, MaillingAddress, and ShippingAddress. You only can use the Address type in the MatchingRule. For example, if you want to match profile based on BusinessAddress.City or MaillingAddress.City, you need to choose the BusinessAddress and the MaillingAddress to represent the Address type and specify the Address.City on the matching rule.
         */
        address?: string[];
        /**
         * Configures the AttributeMatchingModel, you can either choose ONE_TO_ONE or MANY_TO_MANY.
         */
        attributeMatchingModel: enums.customerprofiles.DomainAttributeTypesSelectorAttributeMatchingModel;
        /**
         * The Email type. You can choose from EmailAddress, BusinessEmailAddress and PersonalEmailAddress. You only can use the EmailAddress type in the MatchingRule. For example, if you want to match profile based on PersonalEmailAddress or BusinessEmailAddress, you need to choose the PersonalEmailAddress and the BusinessEmailAddress to represent the EmailAddress type and only specify the EmailAddress on the matching rule.
         */
        emailAddress?: string[];
        /**
         * The PhoneNumber type. You can choose from PhoneNumber, HomePhoneNumber, and MobilePhoneNumber. You only can use the PhoneNumber type in the MatchingRule. For example, if you want to match a profile based on Phone or HomePhone, you need to choose the Phone and the HomePhone to represent the PhoneNumber type and only specify the PhoneNumber on the matching rule.
         */
        phoneNumber?: string[];
    }

    /**
     * Configuration information about the auto-merging process.
     */
    export interface DomainAutoMerging {
        /**
         * Determines how the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same `FirstName` and `LastName` , `ConflictResolution` specifies which `EmailAddress` should be used.
         */
        conflictResolution?: outputs.customerprofiles.DomainConflictResolution;
        /**
         * A list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged.
         */
        consolidation?: outputs.customerprofiles.DomainConsolidation;
        /**
         * The flag that enables the auto-merging of duplicate profiles.
         */
        enabled: boolean;
        /**
         * A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles.
         */
        minAllowedConfidenceScoreForMerging?: number;
    }

    /**
     * How the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same FirstName and LastName (and that is the matching criteria), which EmailAddress should be used? 
     */
    export interface DomainConflictResolution {
        /**
         * How the auto-merging process should resolve conflicts between different profiles.
         */
        conflictResolvingModel: enums.customerprofiles.DomainConflictResolutionConflictResolvingModel;
        /**
         * The ObjectType name that is used to resolve profile merging conflicts when choosing SOURCE as the ConflictResolvingModel.
         */
        sourceName?: string;
    }

    /**
     * A list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged.
     */
    export interface DomainConsolidation {
        /**
         * A list of matching criteria.
         */
        matchingAttributesList: string[][];
    }

    /**
     * Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.
     */
    export interface DomainExportingConfig {
        s3Exporting?: outputs.customerprofiles.DomainS3ExportingConfig;
    }

    /**
     * The day and time when do you want to start the Identity Resolution Job every week.
     */
    export interface DomainJobSchedule {
        /**
         * The day when the Identity Resolution Job should run every week.
         */
        dayOfTheWeek: enums.customerprofiles.DomainJobScheduleDayOfTheWeek;
        /**
         * The time when the Identity Resolution Job should run every week.
         */
        time: string;
    }

    /**
     * The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. After the Identity Resolution Job completes, use the GetMatches API to return and review the results. Or, if you have configured ExportingConfig in the MatchingRequest, you can download the results from S3.
     */
    export interface DomainMatching {
        /**
         * Configuration information about the auto-merging process.
         */
        autoMerging?: outputs.customerprofiles.DomainAutoMerging;
        /**
         * The flag that enables the matching process of duplicate profiles.
         */
        enabled: boolean;
        /**
         * The S3 location where Identity Resolution Jobs write result files.
         */
        exportingConfig?: outputs.customerprofiles.DomainExportingConfig;
        /**
         * The day and time when do you want to start the Identity Resolution Job every week.
         */
        jobSchedule?: outputs.customerprofiles.DomainJobSchedule;
    }

    /**
     * Specifies how does the rule-based matching process should match profiles.
     */
    export interface DomainMatchingRule {
        /**
         * A single rule level of the `MatchRules` . Configures how the rule-based matching process should match profiles.
         */
        rule: string[];
    }

    /**
     * The process of matching duplicate profiles using the Rule-Based matching. If RuleBasedMatching = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the RuleBasedMatchingRequest. You can use the ListRuleBasedMatches and GetSimilarProfiles API to return and review the results. Also, if you have configured ExportingConfig in the RuleBasedMatchingRequest, you can download the results from S3.
     */
    export interface DomainRuleBasedMatching {
        /**
         * Configures information about the `AttributeTypesSelector` where the rule-based identity resolution uses to match profiles.
         */
        attributeTypesSelector?: outputs.customerprofiles.DomainAttributeTypesSelector;
        /**
         * Determines how the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same `FirstName` and `LastName` , `ConflictResolution` specifies which `EmailAddress` should be used.
         */
        conflictResolution?: outputs.customerprofiles.DomainConflictResolution;
        /**
         * The flag that enables the rule-based matching process of duplicate profiles.
         */
        enabled: boolean;
        /**
         * The S3 location where Identity Resolution Jobs write result files.
         */
        exportingConfig?: outputs.customerprofiles.DomainExportingConfig;
        /**
         * Configures how the rule-based matching process should match profiles. You can have up to 15 MatchingRule in the MatchingRules.
         */
        matchingRules?: outputs.customerprofiles.DomainMatchingRule[];
        /**
         * Indicates the maximum allowed rule level for matching.
         */
        maxAllowedRuleLevelForMatching?: number;
        /**
         * Indicates the maximum allowed rule level for merging.
         */
        maxAllowedRuleLevelForMerging?: number;
        /**
         * The status of rule-based matching rule.
         */
        status?: enums.customerprofiles.DomainRuleBasedMatchingStatus;
    }

    /**
     * The S3 location where Identity Resolution Jobs write result files.
     */
    export interface DomainS3ExportingConfig {
        /**
         * The name of the S3 bucket where Identity Resolution Jobs write result files.
         */
        s3BucketName: string;
        /**
         * The S3 key name of the location where Identity Resolution Jobs write result files.
         */
        s3KeyName?: string;
    }

    /**
     * Usage-specific statistics about the domain.
     */
    export interface DomainStats {
        /**
         * The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.
         */
        meteringProfileCount?: number;
        /**
         * The total number of objects in domain.
         */
        objectCount?: number;
        /**
         * The total number of profiles currently in the domain.
         */
        profileCount?: number;
        /**
         * The total size, in bytes, of all objects in the domain.
         */
        totalSize?: number;
    }

    export interface IntegrationConnectorOperator {
        /**
         * The operation to be performed on the provided Marketo source fields.
         */
        marketo?: enums.customerprofiles.IntegrationMarketoConnectorOperator;
        /**
         * The operation to be performed on the provided Amazon S3 source fields.
         */
        s3?: enums.customerprofiles.IntegrationS3ConnectorOperator;
        /**
         * The operation to be performed on the provided Salesforce source fields.
         */
        salesforce?: enums.customerprofiles.IntegrationSalesforceConnectorOperator;
        /**
         * The operation to be performed on the provided ServiceNow source fields.
         */
        serviceNow?: enums.customerprofiles.IntegrationServiceNowConnectorOperator;
        /**
         * The operation to be performed on the provided Zendesk source fields.
         */
        zendesk?: enums.customerprofiles.IntegrationZendeskConnectorOperator;
    }

    export interface IntegrationFlowDefinition {
        /**
         * A description of the flow you want to create.
         */
        description?: string;
        /**
         * The specified name of the flow. Use underscores (_) or hyphens (-) only. Spaces are not allowed.
         */
        flowName: string;
        /**
         * The Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key you provide for encryption.
         */
        kmsArn: string;
        /**
         * The configuration that controls how Customer Profiles retrieves data from the source.
         */
        sourceFlowConfig: outputs.customerprofiles.IntegrationSourceFlowConfig;
        /**
         * A list of tasks that Customer Profiles performs while transferring the data in the flow run.
         */
        tasks: outputs.customerprofiles.IntegrationTask[];
        /**
         * The trigger settings that determine how and when the flow runs.
         */
        triggerConfig: outputs.customerprofiles.IntegrationTriggerConfig;
    }

    export interface IntegrationIncrementalPullConfig {
        /**
         * A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
         */
        datetimeTypeFieldName?: string;
    }

    export interface IntegrationMarketoSourceProperties {
        /**
         * The object specified in the Marketo flow source.
         */
        object: string;
    }

    export interface IntegrationObjectTypeMapping {
        /**
         * The key.
         */
        key: string;
        /**
         * The value.
         */
        value: string;
    }

    export interface IntegrationS3SourceProperties {
        /**
         * The Amazon S3 bucket name where the source files are stored.
         */
        bucketName: string;
        /**
         * The object key for the Amazon S3 bucket in which the source files are stored.
         */
        bucketPrefix?: string;
    }

    export interface IntegrationSalesforceSourceProperties {
        /**
         * The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
         */
        enableDynamicFieldUpdate?: boolean;
        /**
         * Indicates whether Amazon AppFlow includes deleted files in the flow run.
         */
        includeDeletedRecords?: boolean;
        /**
         * The object specified in the Salesforce flow source.
         */
        object: string;
    }

    export interface IntegrationScheduledTriggerProperties {
        /**
         * Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run.
         */
        dataPullMode?: enums.customerprofiles.IntegrationScheduledTriggerPropertiesDataPullMode;
        /**
         * Specifies the date range for the records to import from the connector in the first flow run.
         */
        firstExecutionFrom?: number;
        /**
         * Specifies the scheduled end time for a scheduled-trigger flow.
         */
        scheduleEndTime?: number;
        /**
         * The scheduling expression that determines the rate at which the schedule will run, for example rate (5 minutes).
         */
        scheduleExpression: string;
        /**
         * Specifies the optional offset that is added to the time interval for a schedule-triggered flow.
         */
        scheduleOffset?: number;
        /**
         * Specifies the scheduled start time for a scheduled-trigger flow.
         */
        scheduleStartTime?: number;
        /**
         * Specifies the time zone used when referring to the date and time of a scheduled-triggered flow, such as America/New_York.
         */
        timezone?: string;
    }

    export interface IntegrationServiceNowSourceProperties {
        /**
         * The object specified in the ServiceNow flow source.
         */
        object: string;
    }

    export interface IntegrationSourceConnectorProperties {
        /**
         * The properties that are applied when Marketo is being used as a source.
         */
        marketo?: outputs.customerprofiles.IntegrationMarketoSourceProperties;
        /**
         * The properties that are applied when Amazon S3 is being used as the flow source.
         */
        s3?: outputs.customerprofiles.IntegrationS3SourceProperties;
        /**
         * The properties that are applied when Salesforce is being used as a source.
         */
        salesforce?: outputs.customerprofiles.IntegrationSalesforceSourceProperties;
        /**
         * The properties that are applied when ServiceNow is being used as a source.
         */
        serviceNow?: outputs.customerprofiles.IntegrationServiceNowSourceProperties;
        /**
         * The properties that are applied when using Zendesk as a flow source.
         */
        zendesk?: outputs.customerprofiles.IntegrationZendeskSourceProperties;
    }

    export interface IntegrationSourceFlowConfig {
        /**
         * The name of the Amazon AppFlow connector profile. This name must be unique for each connector profile in the AWS account .
         */
        connectorProfileName?: string;
        /**
         * The type of connector, such as Salesforce, Marketo, and so on.
         */
        connectorType: enums.customerprofiles.IntegrationConnectorType;
        /**
         * Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull.
         */
        incrementalPullConfig?: outputs.customerprofiles.IntegrationIncrementalPullConfig;
        /**
         * Specifies the information that is required to query a particular source connector.
         */
        sourceConnectorProperties: outputs.customerprofiles.IntegrationSourceConnectorProperties;
    }

    export interface IntegrationTask {
        /**
         * The operation to be performed on the provided source fields.
         */
        connectorOperator?: outputs.customerprofiles.IntegrationConnectorOperator;
        /**
         * A field in a destination connector, or a field value against which Amazon AppFlow validates a source field.
         */
        destinationField?: string;
        /**
         * The source fields to which a particular task is applied.
         */
        sourceFields: string[];
        /**
         * A map used to store task-related information. The service looks for particular information based on the TaskType.
         */
        taskProperties?: outputs.customerprofiles.IntegrationTaskPropertiesMap[];
        /**
         * Specifies the particular task implementation that Amazon AppFlow performs.
         */
        taskType: enums.customerprofiles.IntegrationTaskType;
    }

    export interface IntegrationTaskPropertiesMap {
        /**
         * The task property key.
         */
        operatorPropertyKey: enums.customerprofiles.IntegrationOperatorPropertiesKeys;
        /**
         * The task property value.
         */
        property: string;
    }

    export interface IntegrationTriggerConfig {
        /**
         * Specifies the configuration details of a schedule-triggered flow that you define. Currently, these settings only apply to the Scheduled trigger type.
         */
        triggerProperties?: outputs.customerprofiles.IntegrationTriggerProperties;
        /**
         * Specifies the type of flow trigger. It can be OnDemand, Scheduled, or Event.
         */
        triggerType: enums.customerprofiles.IntegrationTriggerType;
    }

    export interface IntegrationTriggerProperties {
        /**
         * Specifies the configuration details of a schedule-triggered flow that you define.
         */
        scheduled?: outputs.customerprofiles.IntegrationScheduledTriggerProperties;
    }

    export interface IntegrationZendeskSourceProperties {
        /**
         * The object specified in the Zendesk flow source.
         */
        object: string;
    }

    /**
     * Represents a field in a ProfileObjectType.
     */
    export interface ObjectTypeField {
        /**
         * The content type of the field. Used for determining equality when searching.
         */
        contentType?: enums.customerprofiles.ObjectTypeFieldContentType;
        /**
         * A field of a ProfileObject. For example: _source.FirstName, where "_source" is a ProfileObjectType of a Zendesk user and "FirstName" is a field in that ObjectType.
         */
        source?: string;
        /**
         * The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.
         */
        target?: string;
    }

    export interface ObjectTypeFieldMap {
        /**
         * Name of the field.
         */
        name?: string;
        /**
         * Represents a field in a ProfileObjectType.
         */
        objectTypeField?: outputs.customerprofiles.ObjectTypeField;
    }

    /**
     * An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
     */
    export interface ObjectTypeKey {
        /**
         * The reference for the key name of the fields map. 
         */
        fieldNames?: string[];
        /**
         * The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.
         */
        standardIdentifiers?: enums.customerprofiles.ObjectTypeKeyStandardIdentifiersItem[];
    }

    export interface ObjectTypeKeyMap {
        /**
         * Name of the key.
         */
        name?: string;
        /**
         * A list of ObjectTypeKey.
         */
        objectTypeKeyList?: outputs.customerprofiles.ObjectTypeKey[];
    }

}

export namespace databrew {
    /**
     * Csv options
     */
    export interface DatasetCsvOptions {
        /**
         * A single character that specifies the delimiter being used in the CSV file.
         */
        delimiter?: string;
        /**
         * A variable that specifies whether the first row in the file is parsed as the header. If this value is false, column names are auto-generated.
         */
        headerRow?: boolean;
    }

    export interface DatasetDataCatalogInputDefinition {
        /**
         * Catalog id
         */
        catalogId?: string;
        /**
         * Database name
         */
        databaseName?: string;
        /**
         * Table name
         */
        tableName?: string;
        /**
         * An Amazon location that AWS Glue Data Catalog can use as a temporary directory.
         */
        tempDirectory?: outputs.databrew.DatasetS3Location;
    }

    export interface DatasetDatabaseInputDefinition {
        /**
         * Database table name
         */
        databaseTableName?: string;
        /**
         * Glue connection name
         */
        glueConnectionName: string;
        /**
         * Custom SQL to run against the provided AWS Glue connection. This SQL will be used as the input for DataBrew projects and jobs.
         */
        queryString?: string;
        /**
         * An Amazon location that AWS Glue Data Catalog can use as a temporary directory.
         */
        tempDirectory?: outputs.databrew.DatasetS3Location;
    }

    export interface DatasetDatetimeOptions {
        /**
         * Date/time format of a date parameter
         */
        format: string;
        /**
         * Locale code for a date parameter
         */
        localeCode?: string;
        /**
         * Timezone offset
         */
        timezoneOffset?: string;
    }

    export interface DatasetExcelOptions {
        /**
         * A variable that specifies whether the first row in the file is parsed as the header. If this value is false, column names are auto-generated.
         */
        headerRow?: boolean;
        /**
         * One or more sheet numbers in the Excel file that will be included in the dataset.
         */
        sheetIndexes?: number[];
        /**
         * One or more named sheets in the Excel file that will be included in the dataset.
         */
        sheetNames?: string[];
    }

    export interface DatasetFilesLimit {
        /**
         * Maximum number of files
         */
        maxFiles: number;
        /**
         * Order
         */
        order?: enums.databrew.DatasetFilesLimitOrder;
        /**
         * Ordered by
         */
        orderedBy?: enums.databrew.DatasetFilesLimitOrderedBy;
    }

    export interface DatasetFilterExpression {
        /**
         * Filtering expression for a parameter
         */
        expression: string;
        /**
         * The map of substitution variable names to their values used in this filter expression.
         */
        valuesMap: outputs.databrew.DatasetFilterValue[];
    }

    /**
     * A key-value pair to associate expression variable names with their values
     */
    export interface DatasetFilterValue {
        /**
         * The value to be associated with the substitution variable.
         */
        value: string;
        /**
         * Variable name
         */
        valueReference: string;
    }

    /**
     * Format options for dataset
     */
    export interface DatasetFormatOptions {
        /**
         * Options that define how CSV input is to be interpreted by DataBrew.
         */
        csv?: outputs.databrew.DatasetCsvOptions;
        /**
         * Options that define how Excel input is to be interpreted by DataBrew.
         */
        excel?: outputs.databrew.DatasetExcelOptions;
        /**
         * Options that define how JSON input is to be interpreted by DataBrew.
         */
        json?: outputs.databrew.DatasetJsonOptions;
    }

    /**
     * Input
     */
    export interface DatasetInput {
        /**
         * The AWS Glue Data Catalog parameters for the data.
         */
        dataCatalogInputDefinition?: outputs.databrew.DatasetDataCatalogInputDefinition;
        /**
         * Connection information for dataset input files stored in a database.
         */
        databaseInputDefinition?: outputs.databrew.DatasetDatabaseInputDefinition;
        /**
         * Contains additional resource information needed for specific datasets.
         */
        metadata?: outputs.databrew.DatasetMetadata;
        /**
         * The Amazon S3 location where the data is stored.
         */
        s3InputDefinition?: outputs.databrew.DatasetS3Location;
    }

    /**
     * Json options
     */
    export interface DatasetJsonOptions {
        /**
         * A value that specifies whether JSON input contains embedded new line characters.
         */
        multiLine?: boolean;
    }

    export interface DatasetMetadata {
        /**
         * Arn of the source of the dataset. For e.g.: AppFlow Flow ARN.
         */
        sourceArn?: string;
    }

    export interface DatasetParameter {
        /**
         * Add the value of this parameter as a column in a dataset.
         */
        createColumn?: boolean;
        /**
         * Additional parameter options such as a format and a timezone. Required for datetime parameters.
         */
        datetimeOptions?: outputs.databrew.DatasetDatetimeOptions;
        /**
         * The optional filter expression structure to apply additional matching criteria to the parameter.
         */
        filter?: outputs.databrew.DatasetFilterExpression;
        /**
         * The name of the parameter that is used in the dataset's Amazon S3 path.
         */
        name: string;
        /**
         * Parameter type
         */
        type: enums.databrew.DatasetParameterType;
    }

    /**
     * Path options for dataset
     */
    export interface DatasetPathOptions {
        /**
         * If provided, this structure imposes a limit on a number of files that should be selected.
         */
        filesLimit?: outputs.databrew.DatasetFilesLimit;
        /**
         * If provided, this structure defines a date range for matching Amazon S3 objects based on their LastModifiedDate attribute in Amazon S3 .
         */
        lastModifiedDateCondition?: outputs.databrew.DatasetFilterExpression;
        /**
         * A structure that maps names of parameters used in the Amazon S3 path of a dataset to their definitions.
         */
        parameters?: outputs.databrew.DatasetPathParameter[];
    }

    /**
     * A key-value pair to associate dataset parameter name with its definition.
     */
    export interface DatasetPathParameter {
        /**
         * The path parameter definition.
         */
        datasetParameter: outputs.databrew.DatasetParameter;
        /**
         * The name of the path parameter.
         */
        pathParameterName: string;
    }

    /**
     * Input location
     */
    export interface DatasetS3Location {
        /**
         * The Amazon S3 bucket name.
         */
        bucket: string;
        /**
         * The unique name of the object in the bucket.
         */
        key?: string;
    }

    export interface JobAllowedStatistics {
        /**
         * One or more column statistics to allow for columns that contain detected entities.
         */
        statistics: string[];
    }

    export interface JobColumnSelector {
        /**
         * The name of a column from a dataset.
         */
        name?: string;
        /**
         * A regular expression for selecting a column from a dataset.
         */
        regex?: string;
    }

    export interface JobColumnStatisticsConfiguration {
        /**
         * List of column selectors. Selectors can be used to select columns from the dataset. When selectors are undefined, configuration will be applied to all supported columns.
         */
        selectors?: outputs.databrew.JobColumnSelector[];
        /**
         * Configuration for evaluations. Statistics can be used to select evaluations and override parameters of evaluations.
         */
        statistics: outputs.databrew.JobStatisticsConfiguration;
    }

    /**
     * Output Csv options
     */
    export interface JobCsvOutputOptions {
        /**
         * A single character that specifies the delimiter used to create CSV job output.
         */
        delimiter?: string;
    }

    export interface JobDataCatalogOutput {
        /**
         * The unique identifier of the AWS account that holds the Data Catalog that stores the data.
         */
        catalogId?: string;
        /**
         * The name of a database in the Data Catalog.
         */
        databaseName: string;
        /**
         * Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.
         */
        databaseOptions?: outputs.databrew.JobDatabaseTableOutputOptions;
        /**
         * A value that, if true, means that any data in the location specified for output is overwritten with new output. Not supported with DatabaseOptions.
         */
        overwrite?: boolean;
        /**
         * Represents options that specify how and where DataBrew writes the Amazon S3 output generated by recipe jobs.
         */
        s3Options?: outputs.databrew.JobS3TableOutputOptions;
        /**
         * The name of a table in the Data Catalog.
         */
        tableName: string;
    }

    export interface JobDatabaseOutput {
        /**
         * Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.
         */
        databaseOptions: outputs.databrew.JobDatabaseTableOutputOptions;
        /**
         * Database table name
         */
        databaseOutputMode?: enums.databrew.JobDatabaseOutputDatabaseOutputMode;
        /**
         * Glue connection name
         */
        glueConnectionName: string;
    }

    export interface JobDatabaseTableOutputOptions {
        /**
         * A prefix for the name of a table DataBrew will create in the database.
         */
        tableName: string;
        /**
         * Represents an Amazon S3 location (bucket name and object key) where DataBrew can store intermediate results.
         */
        tempDirectory?: outputs.databrew.JobS3Location;
    }

    export interface JobEntityDetectorConfiguration {
        /**
         * Configuration of statistics that are allowed to be run on columns that contain detected entities. When undefined, no statistics will be computed on columns that contain detected entities.
         */
        allowedStatistics?: outputs.databrew.JobAllowedStatistics;
        /**
         * Entity types to detect. Can be any of the following:
         *
         * - USA_SSN
         * - EMAIL
         * - USA_ITIN
         * - USA_PASSPORT_NUMBER
         * - PHONE_NUMBER
         * - USA_DRIVING_LICENSE
         * - BANK_ACCOUNT
         * - CREDIT_CARD
         * - IP_ADDRESS
         * - MAC_ADDRESS
         * - USA_DEA_NUMBER
         * - USA_HCPCS_CODE
         * - USA_NATIONAL_PROVIDER_IDENTIFIER
         * - USA_NATIONAL_DRUG_CODE
         * - USA_HEALTH_INSURANCE_CLAIM_NUMBER
         * - USA_MEDICARE_BENEFICIARY_IDENTIFIER
         * - USA_CPT_CODE
         * - PERSON_NAME
         * - DATE
         *
         * The Entity type group USA_ALL is also supported, and includes all of the above entity types except PERSON_NAME and DATE.
         */
        entityTypes: string[];
    }

    export interface JobOutput {
        /**
         * The compression algorithm used to compress the output text of the job.
         */
        compressionFormat?: enums.databrew.JobOutputCompressionFormat;
        /**
         * The data format of the output of the job.
         */
        format?: enums.databrew.JobOutputFormat;
        /**
         * Represents options that define how DataBrew formats job output files.
         */
        formatOptions?: outputs.databrew.JobOutputFormatOptions;
        /**
         * The location in Amazon S3 where the job writes its output.
         */
        location: outputs.databrew.JobS3Location;
        /**
         * The maximum number of files to be generated by the job and written to the output folder.
         */
        maxOutputFiles?: number;
        /**
         * A value that, if true, means that any data in the location specified for output is overwritten with new output.
         */
        overwrite?: boolean;
        /**
         * The names of one or more partition columns for the output of the job.
         */
        partitionColumns?: string[];
    }

    /**
     * Format options for job Output
     */
    export interface JobOutputFormatOptions {
        /**
         * Represents a set of options that define the structure of comma-separated value (CSV) job output.
         */
        csv?: outputs.databrew.JobCsvOutputOptions;
    }

    /**
     * Output location
     */
    export interface JobOutputLocation {
        /**
         * The Amazon S3 bucket name.
         */
        bucket: string;
        bucketOwner?: string;
        /**
         * The unique name of the object in the bucket.
         */
        key?: string;
    }

    export interface JobProfileConfiguration {
        /**
         * List of configurations for column evaluations. ColumnStatisticsConfigurations are used to select evaluations and override parameters of evaluations for particular columns. When ColumnStatisticsConfigurations is undefined, the profile job will profile all supported columns and run all supported evaluations.
         */
        columnStatisticsConfigurations?: outputs.databrew.JobColumnStatisticsConfiguration[];
        /**
         * Configuration for inter-column evaluations. Configuration can be used to select evaluations and override parameters of evaluations. When configuration is undefined, the profile job will run all supported inter-column evaluations.
         */
        datasetStatisticsConfiguration?: outputs.databrew.JobStatisticsConfiguration;
        /**
         * Configuration of entity detection for a profile job. When undefined, entity detection is disabled.
         */
        entityDetectorConfiguration?: outputs.databrew.JobEntityDetectorConfiguration;
        /**
         * List of column selectors. ProfileColumns can be used to select columns from the dataset. When ProfileColumns is undefined, the profile job will profile all supported columns.
         */
        profileColumns?: outputs.databrew.JobColumnSelector[];
    }

    export interface JobRecipe {
        /**
         * Recipe name
         */
        name: string;
        /**
         * Recipe version
         */
        version?: string;
    }

    /**
     * S3 Output location
     */
    export interface JobS3Location {
        /**
         * The Amazon S3 bucket name.
         */
        bucket: string;
        /**
         * The AWS account ID of the bucket owner.
         */
        bucketOwner?: string;
        /**
         * The unique name of the object in the bucket.
         */
        key?: string;
    }

    export interface JobS3TableOutputOptions {
        /**
         * Represents an Amazon S3 location (bucket name and object key) where DataBrew can write output from a job.
         */
        location: outputs.databrew.JobS3Location;
    }

    /**
     * Job Sample
     */
    export interface JobSample {
        /**
         * A value that determines whether the profile job is run on the entire dataset or a specified number of rows. This value must be one of the following:
         *
         * - FULL_DATASET - The profile job is run on the entire dataset.
         * - CUSTOM_ROWS - The profile job is run on the number of rows specified in the `Size` parameter.
         */
        mode?: enums.databrew.JobSampleMode;
        /**
         * The `Size` parameter is only required when the mode is CUSTOM_ROWS. The profile job is run on the specified number of rows. The maximum value for size is Long.MAX_VALUE.
         *
         * Long.MAX_VALUE = 9223372036854775807
         */
        size?: number;
    }

    export interface JobStatisticOverride {
        /**
         * A map that includes overrides of an evaluation’s parameters.
         */
        parameters: {[key: string]: string};
        /**
         * The name of an evaluation
         */
        statistic: string;
    }

    export interface JobStatisticsConfiguration {
        /**
         * List of included evaluations. When the list is undefined, all supported evaluations will be included.
         */
        includedStatistics?: string[];
        /**
         * List of overrides for evaluations.
         */
        overrides?: outputs.databrew.JobStatisticOverride[];
    }

    /**
     * Configuration to attach Rulesets to the job
     */
    export interface JobValidationConfiguration {
        /**
         * Arn of the Ruleset
         */
        rulesetArn: string;
        /**
         * Mode of data quality validation. Default mode is "CHECK_ALL" which verifies all rules defined in the selected ruleset.
         */
        validationMode?: enums.databrew.JobValidationMode;
    }

    export interface ProjectSample {
        /**
         * Sample size
         */
        size?: number;
        /**
         * Sample type
         */
        type: enums.databrew.ProjectSampleType;
    }

    export interface RecipeAction {
        /**
         * Step action operation
         */
        operation: string;
        /**
         * Contextual parameters for the transformation.
         */
        parameters?: outputs.databrew.RecipeParameters | {[key: string]: string};
    }

    /**
     * Condition expressions applied to the step action
     */
    export interface RecipeConditionExpression {
        /**
         * Input condition to be applied to the target column
         */
        condition: string;
        /**
         * Name of the target column
         */
        targetColumn: string;
        /**
         * Value of the condition
         */
        value?: string;
    }

    export interface RecipeDataCatalogInputDefinition {
        /**
         * Catalog id
         */
        catalogId?: string;
        /**
         * Database name
         */
        databaseName?: string;
        /**
         * Table name
         */
        tableName?: string;
        tempDirectory?: outputs.databrew.RecipeS3Location;
    }

    export interface RecipeParameters {
        aggregateFunction?: string;
        base?: string;
        caseStatement?: string;
        categoryMap?: string;
        charsToRemove?: string;
        collapseConsecutiveWhitespace?: string;
        columnDataType?: string;
        columnRange?: string;
        count?: string;
        customCharacters?: string;
        customStopWords?: string;
        customValue?: string;
        datasetsColumns?: string;
        dateAddValue?: string;
        dateTimeFormat?: string;
        dateTimeParameters?: string;
        deleteOtherRows?: string;
        delimiter?: string;
        endPattern?: string;
        endPosition?: string;
        endValue?: string;
        expandContractions?: string;
        exponent?: string;
        falseString?: string;
        groupByAggFunctionOptions?: string;
        groupByColumns?: string;
        hiddenColumns?: string;
        ignoreCase?: string;
        includeInSplit?: string;
        /**
         * Input
         */
        input?: outputs.databrew.RecipeParametersInputProperties;
        interval?: string;
        isText?: string;
        joinKeys?: string;
        joinType?: string;
        leftColumns?: string;
        limit?: string;
        lowerBound?: string;
        mapType?: string;
        modeType?: string;
        multiLine?: boolean;
        numRows?: string;
        numRowsAfter?: string;
        numRowsBefore?: string;
        orderByColumn?: string;
        orderByColumns?: string;
        other?: string;
        pattern?: string;
        patternOption1?: string;
        patternOption2?: string;
        patternOptions?: string;
        period?: string;
        position?: string;
        removeAllPunctuation?: string;
        removeAllQuotes?: string;
        removeAllWhitespace?: string;
        removeCustomCharacters?: string;
        removeCustomValue?: string;
        removeLeadingAndTrailingPunctuation?: string;
        removeLeadingAndTrailingQuotes?: string;
        removeLeadingAndTrailingWhitespace?: string;
        removeLetters?: string;
        removeNumbers?: string;
        removeSourceColumn?: string;
        removeSpecialCharacters?: string;
        rightColumns?: string;
        sampleSize?: string;
        sampleType?: string;
        secondInput?: string;
        secondaryInputs?: outputs.databrew.RecipeSecondaryInput[];
        sheetIndexes?: number[];
        sheetNames?: string[];
        sourceColumn?: string;
        sourceColumn1?: string;
        sourceColumn2?: string;
        sourceColumns?: string;
        startColumnIndex?: string;
        startPattern?: string;
        startPosition?: string;
        startValue?: string;
        stemmingMode?: string;
        stepCount?: string;
        stepIndex?: string;
        stopWordsMode?: string;
        strategy?: string;
        targetColumn?: string;
        targetColumnNames?: string;
        targetDateFormat?: string;
        targetIndex?: string;
        timeZone?: string;
        tokenizerPattern?: string;
        trueString?: string;
        udfLang?: string;
        units?: string;
        unpivotColumn?: string;
        upperBound?: string;
        useNewDataFrame?: string;
        value?: string;
        value1?: string;
        value2?: string;
        valueColumn?: string;
        viewFrame?: string;
    }

    /**
     * Input
     */
    export interface RecipeParametersInputProperties {
        dataCatalogInputDefinition?: outputs.databrew.RecipeDataCatalogInputDefinition;
        s3InputDefinition?: outputs.databrew.RecipeS3Location;
    }

    /**
     * Input location
     */
    export interface RecipeS3Location {
        bucket: string;
        key?: string;
    }

    /**
     * Secondary input
     */
    export interface RecipeSecondaryInput {
        dataCatalogInputDefinition?: outputs.databrew.RecipeDataCatalogInputDefinition;
        s3InputDefinition?: outputs.databrew.RecipeS3Location;
    }

    export interface RecipeStep {
        /**
         * The particular action to be performed in the recipe step.
         */
        action: outputs.databrew.RecipeAction;
        /**
         * Condition expressions applied to the step action
         */
        conditionExpressions?: outputs.databrew.RecipeConditionExpression[];
    }

    /**
     * Selector of a column from a dataset for profile job configuration. One selector includes either a column name or a regular expression
     */
    export interface RulesetColumnSelector {
        /**
         * The name of a column from a dataset
         */
        name?: string;
        /**
         * A regular expression for selecting a column from a dataset
         */
        regex?: string;
    }

    /**
     * Data quality rule for a target resource (dataset)
     */
    export interface RulesetRule {
        /**
         * The expression which includes column references, condition names followed by variable references, possibly grouped and combined with other conditions. For example, `(:col1 starts_with :prefix1 or :col1 starts_with :prefix2) and (:col1 ends_with :suffix1 or :col1 ends_with :suffix2)` . Column and value references are substitution variables that should start with the ':' symbol. Depending on the context, substitution variables' values can be either an actual value or a column name. These values are defined in the SubstitutionMap. If a CheckExpression starts with a column reference, then ColumnSelectors in the rule should be null. If ColumnSelectors has been defined, then there should be no columnn reference in the left side of a condition, for example, `is_between :val1 and :val2` .
         */
        checkExpression: string;
        /**
         * List of column selectors. Selectors can be used to select columns using a name or regular expression from the dataset. Rule will be applied to selected columns.
         */
        columnSelectors?: outputs.databrew.RulesetColumnSelector[];
        /**
         * A value that specifies whether the rule is disabled. Once a rule is disabled, a profile job will not validate it during a job run. Default value is false.
         */
        disabled?: boolean;
        /**
         * Name of the rule
         */
        name: string;
        /**
         * The map of substitution variable names to their values used in a check expression. Variable names should start with a ':' (colon). Variable values can either be actual values or column names. To differentiate between the two, column names should be enclosed in backticks, for example, `":col1": "`Column A`".`
         */
        substitutionMap?: outputs.databrew.RulesetSubstitutionValue[];
        /**
         * The threshold used with a non-aggregate check expression. Non-aggregate check expressions will be applied to each row in a specific column, and the threshold will be used to determine whether the validation succeeds.
         */
        threshold?: outputs.databrew.RulesetThreshold;
    }

    /**
     * A key-value pair to associate expression's substitution variable names with their values
     */
    export interface RulesetSubstitutionValue {
        /**
         * Value or column name
         */
        value: string;
        /**
         * Variable name
         */
        valueReference: string;
    }

    export interface RulesetThreshold {
        /**
         * The type of a threshold. Used for comparison of an actual count of rows that satisfy the rule to the threshold value.
         */
        type?: enums.databrew.RulesetThresholdType;
        /**
         * Unit of threshold value. Can be either a COUNT or PERCENTAGE of the full sample size used for validation.
         */
        unit?: enums.databrew.RulesetThresholdUnit;
        /**
         * The value of a threshold.
         */
        value: number;
    }

}

export namespace datapipeline {
    export interface PipelineField {
        /**
         * Specifies the name of a field for a particular object. To view valid values for a particular field, see Pipeline Object Reference in the AWS Data Pipeline Developer Guide.
         */
        key: string;
        /**
         * A field value that you specify as an identifier of another object in the same pipeline definition.
         */
        refValue?: string;
        /**
         * A field value that you specify as a string. To view valid values for a particular field, see Pipeline Object Reference in the AWS Data Pipeline Developer Guide.
         */
        stringValue?: string;
    }

    export interface PipelineObject {
        /**
         * Key-value pairs that define the properties of the object.
         */
        fields: outputs.datapipeline.PipelineField[];
        /**
         * The ID of the object.
         */
        id: string;
        /**
         * The name of the object.
         */
        name: string;
    }

    export interface PipelineParameterAttribute {
        /**
         * The field identifier.
         */
        key: string;
        /**
         * The field value, expressed as a String.
         */
        stringValue: string;
    }

    export interface PipelineParameterObject {
        /**
         * The attributes of the parameter object.
         */
        attributes: outputs.datapipeline.PipelineParameterAttribute[];
        /**
         * The ID of the parameter object.
         */
        id: string;
    }

    export interface PipelineParameterValue {
        /**
         * The ID of the parameter value.
         */
        id: string;
        /**
         * The field value, expressed as a String.
         */
        stringValue: string;
    }

}

export namespace datasync {
    /**
     * Specifies the shared access signature (SAS) that DataSync uses to access your Azure Blob Storage container.
     */
    export interface LocationAzureBlobAzureBlobSasConfiguration {
        /**
         * Specifies the shared access signature (SAS) token, which indicates the permissions DataSync needs to access your Azure Blob Storage container.
         */
        azureBlobSasToken: string;
    }

    /**
     * The subnet and security group that DataSync uses to access target EFS file system.
     */
    export interface LocationEfsEc2Config {
        /**
         * The Amazon Resource Names (ARNs) of the security groups that are configured for the Amazon EC2 resource.
         */
        securityGroupArns: string[];
        /**
         * The ARN of the subnet that DataSync uses to access the target EFS file system.
         */
        subnetArn: string;
    }

    /**
     * NFS protocol configuration for FSx ONTAP file system.
     */
    export interface LocationFSxOntapNfs {
        /**
         * Specifies how DataSync can access a location using the NFS protocol.
         */
        mountOptions: outputs.datasync.LocationFSxOntapNfsMountOptions;
    }

    /**
     * The NFS mount options that DataSync can use to mount your NFS share.
     */
    export interface LocationFSxOntapNfsMountOptions {
        /**
         * The specific NFS version that you want DataSync to use to mount your NFS share.
         */
        version?: enums.datasync.LocationFSxOntapNfsMountOptionsVersion;
    }

    /**
     * Configuration settings for NFS or SMB protocol.
     */
    export interface LocationFSxOntapProtocol {
        /**
         * Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for ONTAP file system's storage virtual machine (SVM).
         */
        nfs?: outputs.datasync.LocationFSxOntapNfs;
        /**
         * Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's SVM.
         */
        smb?: outputs.datasync.LocationFSxOntapSmb;
    }

    /**
     * SMB protocol configuration for FSx ONTAP file system.
     */
    export interface LocationFSxOntapSmb {
        /**
         * The name of the Windows domain that the SMB server belongs to.
         */
        domain?: string;
        /**
         * Specifies how DataSync can access a location using the SMB protocol.
         */
        mountOptions: outputs.datasync.LocationFSxOntapSmbMountOptions;
        /**
         * The password of the user who can mount the share and has the permissions to access files and folders in the SMB share.
         */
        password: string;
        /**
         * The user who can mount the share, has the permissions to access files and folders in the SMB share.
         */
        user: string;
    }

    /**
     * The mount options used by DataSync to access the SMB server.
     */
    export interface LocationFSxOntapSmbMountOptions {
        /**
         * The specific SMB version that you want DataSync to use to mount your SMB share.
         */
        version?: enums.datasync.LocationFSxOntapSmbMountOptionsVersion;
    }

    /**
     * The NFS mount options that DataSync can use to mount your NFS share.
     */
    export interface LocationFSxOpenZfsMountOptions {
        /**
         * The specific NFS version that you want DataSync to use to mount your NFS share.
         */
        version?: enums.datasync.LocationFSxOpenZfsMountOptionsVersion;
    }

    /**
     * FSx OpenZFS file system NFS protocol information
     */
    export interface LocationFSxOpenZfsNfs {
        /**
         * Represents the mount options that are available for DataSync to access an NFS location.
         */
        mountOptions: outputs.datasync.LocationFSxOpenZfsMountOptions;
    }

    /**
     * Configuration settings for an NFS or SMB protocol, currently only support NFS
     */
    export interface LocationFSxOpenZfsProtocol {
        /**
         * Represents the Network File System (NFS) protocol that DataSync uses to access your FSx for OpenZFS file system.
         */
        nfs?: outputs.datasync.LocationFSxOpenZfsNfs;
    }

    /**
     * HDFS Name Node IP and port information.
     */
    export interface LocationHdfsNameNode {
        /**
         * The DNS name or IP address of the Name Node in the customer's on premises HDFS cluster.
         */
        hostname: string;
        /**
         * The port on which the Name Node is listening on for client requests.
         */
        port: number;
    }

    /**
     * Configuration information for RPC Protection and Data Transfer Protection. These parameters can be set to AUTHENTICATION, INTEGRITY, or PRIVACY. The default value is PRIVACY.
     */
    export interface LocationHdfsQopConfiguration {
        /**
         * Configuration for Data Transfer Protection.
         */
        dataTransferProtection?: enums.datasync.LocationHdfsQopConfigurationDataTransferProtection;
        /**
         * Configuration for RPC Protection.
         */
        rpcProtection?: enums.datasync.LocationHdfsQopConfigurationRpcProtection;
    }

    /**
     * The NFS mount options that DataSync can use to mount your NFS share.
     */
    export interface LocationNfsMountOptions {
        /**
         * The specific NFS version that you want DataSync to use to mount your NFS share.
         */
        version?: enums.datasync.LocationNfsMountOptionsVersion;
    }

    /**
     * Contains a list of Amazon Resource Names (ARNs) of agents that are used to connect an NFS server.
     */
    export interface LocationNfsOnPremConfig {
        /**
         * ARN(s) of the agent(s) to use for an NFS location.
         */
        agentArns: string[];
    }

    /**
     * The Amazon Resource Name (ARN) of the AWS IAM role that is used to access an Amazon S3 bucket.
     */
    export interface LocationS3s3Config {
        /**
         * The ARN of the IAM role of the Amazon S3 bucket.
         */
        bucketAccessRoleArn: string;
    }

    /**
     * The mount options used by DataSync to access the SMB server.
     */
    export interface LocationSmbMountOptions {
        /**
         * The specific SMB version that you want DataSync to use to mount your SMB share.
         */
        version?: enums.datasync.LocationSmbMountOptionsVersion;
    }

    /**
     * The server name and network port required to connect with the management interface of the on-premises storage system.
     */
    export interface StorageSystemServerConfiguration {
        /**
         * The domain name or IP address of the storage system's management interface.
         */
        serverHostname: string;
        /**
         * The network port needed to access the system's management interface
         */
        serverPort?: number;
    }

    /**
     * The username and password for accessing your on-premises storage system's management interface.
     */
    export interface StorageSystemServerCredentials {
        /**
         * The password for your storage system's management interface
         */
        password: string;
        /**
         * The username for your storage system's management interface.
         */
        username: string;
    }

    /**
     * Specifies which files folders and objects to include or exclude when transferring files from source to destination.
     */
    export interface TaskFilterRule {
        /**
         * The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.
         */
        filterType?: enums.datasync.TaskFilterRuleFilterType;
        /**
         * A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|".
         */
        value?: string;
    }

    /**
     * Configures a manifest, which is a list of files or objects that you want DataSync to transfer.
     */
    export interface TaskManifestConfig {
        /**
         * Specifies what DataSync uses the manifest for.
         */
        action?: enums.datasync.TaskManifestConfigAction;
        /**
         * Specifies the file format of your manifest.
         */
        format?: enums.datasync.TaskManifestConfigFormat;
        /**
         * Specifies the manifest that you want DataSync to use and where it's hosted.
         */
        source: outputs.datasync.TaskManifestConfigSourceProperties;
    }

    /**
     * Specifies the manifest that you want DataSync to use and where it's hosted.
     */
    export interface TaskManifestConfigSourceProperties {
        s3?: outputs.datasync.TaskManifestConfigSourceS3;
    }

    /**
     * Specifies the S3 bucket where you're hosting the manifest that you want AWS DataSync to use.
     */
    export interface TaskManifestConfigSourceS3 {
        /**
         * Specifies the AWS Identity and Access Management (IAM) role that allows DataSync to access your manifest.
         */
        bucketAccessRoleArn?: string;
        /**
         * Specifies the Amazon S3 object key of your manifest.
         */
        manifestObjectPath?: string;
        /**
         * Specifies the object version ID of the manifest that you want DataSync to use.
         */
        manifestObjectVersionId?: string;
        /**
         * Specifies the Amazon Resource Name (ARN) of the S3 bucket where you're hosting your manifest.
         */
        s3BucketArn?: string;
    }

    /**
     * Represents the options that are available to control the behavior of a StartTaskExecution operation.
     */
    export interface TaskOptions {
        /**
         * A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).
         */
        atime?: enums.datasync.TaskOptionsAtime;
        /**
         * A value that limits the bandwidth used by AWS DataSync.
         */
        bytesPerSecond?: number;
        /**
         * The group ID (GID) of the file's owners.
         */
        gid?: enums.datasync.TaskOptionsGid;
        /**
         * A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.
         */
        logLevel?: enums.datasync.TaskOptionsLogLevel;
        /**
         * A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.
         */
        mtime?: enums.datasync.TaskOptionsMtime;
        /**
         * A value that determines whether object tags should be read from the source object store and written to the destination object store.
         */
        objectTags?: enums.datasync.TaskOptionsObjectTags;
        /**
         * A value that determines whether files at the destination should be overwritten or preserved when copying files.
         */
        overwriteMode?: enums.datasync.TaskOptionsOverwriteMode;
        /**
         * A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.
         */
        posixPermissions?: enums.datasync.TaskOptionsPosixPermissions;
        /**
         * A value that specifies whether files in the destination that don't exist in the source file system should be preserved.
         */
        preserveDeletedFiles?: enums.datasync.TaskOptionsPreserveDeletedFiles;
        /**
         * A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.
         */
        preserveDevices?: enums.datasync.TaskOptionsPreserveDevices;
        /**
         * A value that determines which components of the SMB security descriptor are copied during transfer.
         */
        securityDescriptorCopyFlags?: enums.datasync.TaskOptionsSecurityDescriptorCopyFlags;
        /**
         * A value that determines whether tasks should be queued before executing the tasks.
         */
        taskQueueing?: enums.datasync.TaskOptionsTaskQueueing;
        /**
         * A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.
         */
        transferMode?: enums.datasync.TaskOptionsTransferMode;
        /**
         * The user ID (UID) of the file's owner.
         */
        uid?: enums.datasync.TaskOptionsUid;
        /**
         * A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.
         */
        verifyMode?: enums.datasync.TaskOptionsVerifyMode;
    }

    /**
     * Specifies how you want to configure a task report, which provides detailed information about for your Datasync transfer.
     */
    export interface TaskReportConfig {
        /**
         * Specifies where DataSync uploads your task report.
         */
        destination: outputs.datasync.TaskReportConfigDestinationProperties;
        /**
         * Specifies whether your task report includes the new version of each object transferred into an S3 bucket, this only applies if you enable versioning on your bucket.
         */
        objectVersionIds?: enums.datasync.TaskReportConfigObjectVersionIds;
        /**
         * Specifies the type of task report that you want.
         */
        outputType: enums.datasync.TaskReportConfigOutputType;
        /**
         * Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.
         */
        overrides?: outputs.datasync.TaskReportConfigOverridesProperties;
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigReportLevel;
    }

    /**
     * Specifies where DataSync uploads your task report.
     */
    export interface TaskReportConfigDestinationProperties {
        s3?: outputs.datasync.TaskReportConfigDestinationS3;
    }

    /**
     * Specifies the Amazon S3 bucket where DataSync uploads your task report.
     */
    export interface TaskReportConfigDestinationS3 {
        /**
         * Specifies the Amazon Resource Name (ARN) of the IAM policy that allows Datasync to upload a task report to your S3 bucket.
         */
        bucketAccessRoleArn?: string;
        /**
         * Specifies the ARN of the S3 bucket where Datasync uploads your report.
         */
        s3BucketArn?: string;
        /**
         * Specifies a bucket prefix for your report.
         */
        subdirectory?: string;
    }

    /**
     * Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.
     */
    export interface TaskReportConfigOverridesProperties {
        /**
         * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.
         */
        deleted?: outputs.datasync.TaskReportConfigOverridesPropertiesDeletedProperties;
        /**
         * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.
         */
        skipped?: outputs.datasync.TaskReportConfigOverridesPropertiesSkippedProperties;
        /**
         * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.
         */
        transferred?: outputs.datasync.TaskReportConfigOverridesPropertiesTransferredProperties;
        /**
         * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)
         */
        verified?: outputs.datasync.TaskReportConfigOverridesPropertiesVerifiedProperties;
    }

    /**
     * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.
     */
    export interface TaskReportConfigOverridesPropertiesDeletedProperties {
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigOverridesPropertiesDeletedPropertiesReportLevel;
    }

    /**
     * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.
     */
    export interface TaskReportConfigOverridesPropertiesSkippedProperties {
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigOverridesPropertiesSkippedPropertiesReportLevel;
    }

    /**
     * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.
     */
    export interface TaskReportConfigOverridesPropertiesTransferredProperties {
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigOverridesPropertiesTransferredPropertiesReportLevel;
    }

    /**
     * Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)
     */
    export interface TaskReportConfigOverridesPropertiesVerifiedProperties {
        /**
         * Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
         */
        reportLevel?: enums.datasync.TaskReportConfigOverridesPropertiesVerifiedPropertiesReportLevel;
    }

    /**
     * Specifies the schedule you want your task to use for repeated executions.
     */
    export interface TaskSchedule {
        /**
         * A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location
         */
        scheduleExpression?: string;
        /**
         * Specifies status of a schedule.
         */
        status?: enums.datasync.TaskScheduleStatus;
    }

}

export namespace datazone {
    /**
     * Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
     */
    export interface DataSourceConfigurationInput0Properties {
        glueRunConfiguration?: outputs.datazone.DataSourceGlueRunConfigurationInput;
    }

    /**
     * Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
     */
    export interface DataSourceConfigurationInput1Properties {
        redshiftRunConfiguration?: outputs.datazone.DataSourceRedshiftRunConfigurationInput;
    }

    /**
     * The search filter expression.
     */
    export interface DataSourceFilterExpression {
        expression: string;
        type: enums.datazone.DataSourceFilterExpressionType;
    }

    /**
     * The details of a metadata form.
     */
    export interface DataSourceFormInput {
        /**
         * The content of the metadata form.
         */
        content?: string;
        /**
         * The name of the metadata form.
         */
        formName: string;
        /**
         * The ID of the metadata form type.
         */
        typeIdentifier?: string;
        /**
         * The revision of the metadata form type.
         */
        typeRevision?: string;
    }

    export interface DataSourceGlueRunConfigurationInput {
        /**
         * Specifies whether to automatically import data quality metrics as part of the data source run.
         */
        autoImportDataQualityResult?: boolean;
        /**
         * The data access role included in the configuration details of the AWS Glue data source.
         */
        dataAccessRole?: string;
        /**
         * The relational filter configurations included in the configuration details of the AWS Glue data source.
         */
        relationalFilterConfigurations: outputs.datazone.DataSourceRelationalFilterConfiguration[];
    }

    /**
     * The recommendation to be updated as part of the UpdateDataSource action.
     */
    export interface DataSourceRecommendationConfiguration {
        /**
         * Specifies whether automatic business name generation is to be enabled or not as part of the recommendation configuration.
         */
        enableBusinessNameGeneration?: boolean;
    }

    /**
     * The name of an Amazon Redshift cluster.
     */
    export interface DataSourceRedshiftClusterStorage {
        /**
         * The name of an Amazon Redshift cluster.
         */
        clusterName: string;
    }

    /**
     * The ARN of a secret manager for an Amazon Redshift cluster.
     */
    export interface DataSourceRedshiftCredentialConfiguration {
        /**
         * The ARN of a secret manager for an Amazon Redshift cluster.
         */
        secretManagerArn: string;
    }

    /**
     * The configuration details of the Amazon Redshift data source.
     */
    export interface DataSourceRedshiftRunConfigurationInput {
        /**
         * The data access role included in the configuration details of the Amazon Redshift data source.
         */
        dataAccessRole?: string;
        /**
         * The details of the credentials required to access an Amazon Redshift cluster.
         */
        redshiftCredentialConfiguration: outputs.datazone.DataSourceRedshiftCredentialConfiguration;
        /**
         * The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
         */
        redshiftStorage: outputs.datazone.DataSourceRedshiftStorage0Properties | outputs.datazone.DataSourceRedshiftStorage1Properties;
        relationalFilterConfigurations: outputs.datazone.DataSourceRelationalFilterConfiguration[];
    }

    /**
     * The details of the Amazon Redshift Serverless workgroup storage.
     */
    export interface DataSourceRedshiftServerlessStorage {
        /**
         * The name of the Amazon Redshift Serverless workgroup.
         */
        workgroupName: string;
    }

    /**
     * The details of the Amazon Redshift cluster source.
     */
    export interface DataSourceRedshiftStorage0Properties {
        redshiftClusterSource: outputs.datazone.DataSourceRedshiftClusterStorage;
    }

    /**
     * The details of the Amazon Redshift Serverless workgroup source.
     */
    export interface DataSourceRedshiftStorage1Properties {
        redshiftServerlessSource: outputs.datazone.DataSourceRedshiftServerlessStorage;
    }

    /**
     * The relational filter configuration for the data source.
     */
    export interface DataSourceRelationalFilterConfiguration {
        /**
         * The database name specified in the relational filter configuration for the data source.
         */
        databaseName: string;
        /**
         * The filter expressions specified in the relational filter configuration for the data source.
         */
        filterExpressions?: outputs.datazone.DataSourceFilterExpression[];
        /**
         * The schema name specified in the relational filter configuration for the data source.
         */
        schemaName?: string;
    }

    /**
     * The schedule of the data source runs.
     */
    export interface DataSourceScheduleConfiguration {
        /**
         * The schedule of the data source runs.
         */
        schedule?: string;
        /**
         * The timezone of the data source run.
         */
        timezone?: string;
    }

    /**
     * The single-sign on configuration of the Amazon DataZone domain.
     */
    export interface DomainSingleSignOn {
        /**
         * The type of single sign-on in Amazon DataZone.
         */
        type?: enums.datazone.DomainAuthType;
        /**
         * The single sign-on user assignment in Amazon DataZone.
         */
        userAssignment?: enums.datazone.DomainUserAssignment;
    }

    export interface EnvironmentBlueprintConfigurationRegionalParameter {
        /**
         * A string to string map containing parameters for the region.
         */
        parameters?: {[key: string]: string};
        /**
         * The region specified in the environment parameter.
         */
        region?: string;
    }

    /**
     * The parameter details of an environment.
     */
    export interface EnvironmentParameter {
        /**
         * The name of an environment parameter.
         */
        name?: string;
        /**
         * The value of an environment parameter.
         */
        value?: string;
    }

    /**
     * The parameter details of an environment profile.
     */
    export interface EnvironmentProfileEnvironmentParameter {
        /**
         * The name of an environment profile parameter.
         */
        name?: string;
        /**
         * The value of an environment profile parameter.
         */
        value?: string;
    }

    export interface ProjectMembershipMember0Properties {
        userIdentifier: string;
    }

    export interface ProjectMembershipMember1Properties {
        groupIdentifier: string;
    }

    /**
     * The details of the subscription target configuration.
     */
    export interface SubscriptionTargetForm {
        /**
         * The content of the subscription target configuration.
         */
        content: string;
        /**
         * The form name included in the subscription target configuration.
         */
        formName: string;
    }

    export interface UserProfileDetails0Properties {
        iam: outputs.datazone.UserProfileIamUserProfileDetails;
    }

    export interface UserProfileDetails1Properties {
        sso: outputs.datazone.UserProfileSsoUserProfileDetails;
    }

    /**
     * The details of the IAM User Profile.
     */
    export interface UserProfileIamUserProfileDetails {
        /**
         * The ARN of the IAM User Profile.
         */
        arn?: string;
    }

    /**
     * The details of the SSO User Profile.
     */
    export interface UserProfileSsoUserProfileDetails {
        /**
         * The First Name of the IAM User Profile.
         */
        firstName?: string;
        /**
         * The Last Name of the IAM User Profile.
         */
        lastName?: string;
        /**
         * The username of the SSO User Profile.
         */
        username?: string;
    }

}

export namespace deadline {
    export interface FleetAcceleratorCountRange {
        max?: number;
        min: number;
    }

    export interface FleetAcceleratorTotalMemoryMiBRange {
        max?: number;
        min: number;
    }

    export interface FleetAmountCapability {
        /**
         * The maximum amount of the fleet worker capability.
         */
        max?: number;
        /**
         * The minimum amount of fleet worker capability.
         */
        min: number;
        /**
         * The name of the fleet capability.
         */
        name: string;
    }

    export interface FleetAttributeCapability {
        /**
         * The name of the fleet attribute capability for the worker.
         */
        name: string;
        /**
         * The number of fleet attribute capabilities.
         */
        values: string[];
    }

    export interface FleetCapabilities {
        /**
         * Amount capabilities of the fleet.
         */
        amounts?: outputs.deadline.FleetAmountCapability[];
        /**
         * Attribute capabilities of the fleet.
         */
        attributes?: outputs.deadline.FleetAttributeCapability[];
    }

    export interface FleetConfiguration0Properties {
        customerManaged: outputs.deadline.FleetCustomerManagedFleetConfiguration;
    }

    export interface FleetConfiguration1Properties {
        serviceManagedEc2: outputs.deadline.FleetServiceManagedEc2FleetConfiguration;
    }

    export interface FleetCustomerManagedFleetConfiguration {
        mode: enums.deadline.FleetAutoScalingMode;
        storageProfileId?: string;
        workerCapabilities: outputs.deadline.FleetCustomerManagedWorkerCapabilities;
    }

    export interface FleetCustomerManagedWorkerCapabilities {
        acceleratorCount?: outputs.deadline.FleetAcceleratorCountRange;
        acceleratorTotalMemoryMiB?: outputs.deadline.FleetAcceleratorTotalMemoryMiBRange;
        acceleratorTypes?: enums.deadline.FleetAcceleratorType[];
        cpuArchitectureType: enums.deadline.FleetCpuArchitectureType;
        customAmounts?: outputs.deadline.FleetAmountCapability[];
        customAttributes?: outputs.deadline.FleetAttributeCapability[];
        memoryMiB: outputs.deadline.FleetMemoryMiBRange;
        osFamily: enums.deadline.FleetCustomerManagedFleetOperatingSystemFamily;
        vCpuCount: outputs.deadline.FleetVCpuCountRange;
    }

    export interface FleetEc2EbsVolume {
        iops?: number;
        sizeGiB?: number;
        throughputMiB?: number;
    }

    export interface FleetMemoryMiBRange {
        max?: number;
        min: number;
    }

    export interface FleetServiceManagedEc2FleetConfiguration {
        instanceCapabilities: outputs.deadline.FleetServiceManagedEc2InstanceCapabilities;
        instanceMarketOptions: outputs.deadline.FleetServiceManagedEc2InstanceMarketOptions;
    }

    export interface FleetServiceManagedEc2InstanceCapabilities {
        allowedInstanceTypes?: string[];
        cpuArchitectureType: enums.deadline.FleetCpuArchitectureType;
        customAmounts?: outputs.deadline.FleetAmountCapability[];
        customAttributes?: outputs.deadline.FleetAttributeCapability[];
        excludedInstanceTypes?: string[];
        memoryMiB: outputs.deadline.FleetMemoryMiBRange;
        osFamily: enums.deadline.FleetServiceManagedFleetOperatingSystemFamily;
        rootEbsVolume?: outputs.deadline.FleetEc2EbsVolume;
        vCpuCount: outputs.deadline.FleetVCpuCountRange;
    }

    export interface FleetServiceManagedEc2InstanceMarketOptions {
        type: enums.deadline.FleetEc2MarketType;
    }

    export interface FleetVCpuCountRange {
        max?: number;
        min: number;
    }

    export interface QueueJobAttachmentSettings {
        /**
         * The root prefix.
         */
        rootPrefix: string;
        /**
         * The Amazon S3 bucket name.
         */
        s3BucketName: string;
    }

    export interface QueueJobRunAsUser {
        /**
         * The user and group that the jobs in the queue run as.
         */
        posix?: outputs.deadline.QueuePosixUser;
        /**
         * Specifies whether the job should run using the queue's system user or if the job should run using the worker agent system user.
         */
        runAs: enums.deadline.QueueRunAs;
        /**
         * Identifies a Microsoft Windows user.
         */
        windows?: outputs.deadline.QueueWindowsUser;
    }

    export interface QueuePosixUser {
        /**
         * The name of the POSIX user's group.
         */
        group: string;
        /**
         * The name of the POSIX user.
         */
        user: string;
    }

    export interface QueueWindowsUser {
        /**
         * The password ARN for the Windows user.
         */
        passwordArn: string;
        /**
         * The user.
         */
        user: string;
    }

    export interface StorageProfileFileSystemLocation {
        /**
         * The location name.
         */
        name: string;
        /**
         * The file path.
         */
        path: string;
        /**
         * The type of file.
         */
        type: enums.deadline.StorageProfileFileSystemLocationType;
    }

}

export namespace detective {
}

export namespace devicefarm {
    /**
     * Represents a condition for a device pool.
     */
    export interface DevicePoolRule {
        /**
         * The rule's stringified attribute.
         */
        attribute?: enums.devicefarm.DevicePoolRuleAttribute;
        /**
         * Specifies how Device Farm compares the rule's attribute to the value.
         */
        operator?: enums.devicefarm.DevicePoolRuleOperator;
        /**
         * The rule's value.
         */
        value?: string;
    }

    /**
     * The VPC security groups and subnets that are attached to a project
     */
    export interface ProjectVpcConfig {
        /**
         * An array of security group Ids in your Amazon VPC
         */
        securityGroupIds: string[];
        /**
         * A array of subnet IDs in your Amazon VPC.
         */
        subnetIds: string[];
        /**
         * The ID of the Amazon VPC
         */
        vpcId: string;
    }

    /**
     * The VPC security groups and subnets that are attached to a TestGrid project.
     */
    export interface TestGridProjectVpcConfig {
        /**
         * A list of VPC security group IDs in your Amazon VPC.
         */
        securityGroupIds: string[];
        /**
         * A list of VPC subnet IDs in your Amazon VPC.
         */
        subnetIds: string[];
        /**
         * A list of VPC IDs.
         *
         * Each VPC is given a unique ID upon creation.
         */
        vpcId: string;
    }

}

export namespace devopsguru {
    /**
     * Information about notification channels you have configured with DevOps Guru.
     */
    export interface NotificationChannelConfig {
        /**
         * The filter configurations for the Amazon SNS notification topic you use with DevOps Guru. If you do not provide filter configurations, the default configurations are to receive notifications for all message types of `High` or `Medium` severity.
         */
        filters?: outputs.devopsguru.NotificationChannelNotificationFilterConfig;
        /**
         * Information about a notification channel configured in DevOps Guru to send notifications when insights are created.
         *
         * If you use an Amazon SNS topic in another account, you must attach a policy to it that grants DevOps Guru permission to send it notifications. DevOps Guru adds the required policy on your behalf to send notifications using Amazon SNS in your account. DevOps Guru only supports standard SNS topics. For more information, see [Permissions for Amazon SNS topics](https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-required-permissions.html) .
         *
         * If you use an Amazon SNS topic that is encrypted by an AWS Key Management Service customer-managed key (CMK), then you must add permissions to the CMK. For more information, see [Permissions for AWS KMS–encrypted Amazon SNS topics](https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-kms-permissions.html) .
         */
        sns?: outputs.devopsguru.NotificationChannelSnsChannelConfig;
    }

    /**
     * Information about filters of a notification channel configured in DevOpsGuru to filter for insights.
     */
    export interface NotificationChannelNotificationFilterConfig {
        /**
         * The events that you want to receive notifications for. For example, you can choose to receive notifications only when the severity level is upgraded or a new insight is created.
         */
        messageTypes?: enums.devopsguru.NotificationChannelNotificationMessageType[];
        /**
         * The severity levels that you want to receive notifications for. For example, you can choose to receive notifications only for insights with `HIGH` and `MEDIUM` severity levels. For more information, see [Understanding insight severities](https://docs.aws.amazon.com/devops-guru/latest/userguide/working-with-insights.html#understanding-insights-severities) .
         */
        severities?: enums.devopsguru.NotificationChannelInsightSeverity[];
    }

    /**
     * Information about a notification channel configured in DevOps Guru to send notifications when insights are created.
     */
    export interface NotificationChannelSnsChannelConfig {
        /**
         * The Amazon Resource Name (ARN) of an Amazon Simple Notification Service topic.
         */
        topicArn?: string;
    }

    /**
     * CloudFormation resource for DevOps Guru to monitor
     */
    export interface ResourceCollectionCloudFormationCollectionFilter {
        /**
         * An array of CloudFormation stack names.
         */
        stackNames?: string[];
    }

    /**
     * Information about a filter used to specify which AWS resources are analyzed for anomalous behavior by DevOps Guru.
     */
    export interface ResourceCollectionFilter {
        /**
         * Information about AWS CloudFormation stacks. You can use up to 1000 stacks to specify which AWS resources in your account to analyze. For more information, see [Stacks](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html) in the *AWS CloudFormation User Guide* .
         */
        cloudFormation?: outputs.devopsguru.ResourceCollectionCloudFormationCollectionFilter;
        /**
         * The AWS tags used to filter the resources in the resource collection.
         *
         * Tags help you identify and organize your AWS resources. Many AWS services support tagging, so you can assign the same tag to resources from different services to indicate that the resources are related. For example, you can assign the same tag to an Amazon DynamoDB table resource that you assign to an AWS Lambda function. For more information about using tags, see the [Tagging best practices](https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/tagging-best-practices.html) whitepaper.
         *
         * Each AWS tag has two parts.
         *
         * - A tag *key* (for example, `CostCenter` , `Environment` , `Project` , or `Secret` ). Tag *keys* are case-sensitive.
         * - A field known as a tag *value* (for example, `111122223333` , `Production` , or a team name). Omitting the tag *value* is the same as using an empty string. Like tag *keys* , tag *values* are case-sensitive. The tag value is a required property when AppBoundaryKey is specified.
         *
         * Together these are known as *key* - *value* pairs.
         *
         * > The string used for a *key* in a tag that you use to define your resource coverage must begin with the prefix `Devops-guru-` . The tag *key* might be `DevOps-Guru-deployment-application` or `devops-guru-rds-application` . When you create a *key* , the case of characters in the *key* can be whatever you choose. After you create a *key* , it is case-sensitive. For example, DevOps Guru works with a *key* named `devops-guru-rds` and a *key* named `DevOps-Guru-RDS` , and these act as two different *keys* . Possible *key* / *value* pairs in your application might be `Devops-Guru-production-application/RDS` or `Devops-Guru-production-application/containers` .
         */
        tags?: outputs.devopsguru.ResourceCollectionTagCollection[];
    }

    /**
     * Tagged resource for DevOps Guru to monitor
     */
    export interface ResourceCollectionTagCollection {
        /**
         * A Tag key for DevOps Guru app boundary.
         */
        appBoundaryKey?: string;
        /**
         * Tag values of DevOps Guru app boundary.
         */
        tagValues?: string[];
    }

}

export namespace directoryservice {
    export interface SimpleAdVpcSettings {
        /**
         * The identifiers of the subnets for the directory servers. The two subnets must be in different Availability Zones. AWS Directory Service specifies a directory server and a DNS server in each of these subnets.
         */
        subnetIds: string[];
        /**
         * The identifier of the VPC in which to create the directory.
         */
        vpcId: string;
    }

}

export namespace dms {
    /**
     * It is an object that describes Source and Target DataProviders and credentials for connecting to databases that are used in MigrationProject
     */
    export interface MigrationProjectDataProviderDescriptor {
        /**
         * The Amazon Resource Name (ARN) of the data provider.
         */
        dataProviderArn?: string;
        dataProviderIdentifier?: string;
        /**
         * The user-friendly name of the data provider.
         */
        dataProviderName?: string;
        /**
         * The ARN of the role used to access AWS Secrets Manager.
         */
        secretsManagerAccessRoleArn?: string;
        /**
         * The identifier of the AWS Secrets Manager Secret used to store access credentials for the data provider.
         */
        secretsManagerSecretId?: string;
    }

    /**
     * Configuration parameters for provisioning a AWS DMS Serverless replication
     */
    export interface ReplicationConfigComputeConfig {
        /**
         * The Availability Zone where the AWS DMS Serverless replication using this configuration will run. The default value is a random, system-chosen Availability Zone in the configuration's AWS Region , for example, `"us-west-2"` . You can't set this parameter if the `MultiAZ` parameter is set to `true` .
         */
        availabilityZone?: string;
        /**
         * A list of custom DNS name servers supported for the AWS DMS Serverless replication to access your source or target database. This list overrides the default name servers supported by the AWS DMS Serverless replication. You can specify a comma-separated list of internet addresses for up to four DNS name servers. For example: `"1.1.1.1,2.2.2.2,3.3.3.3,4.4.4.4"`
         */
        dnsNameServers?: string;
        /**
         * An AWS Key Management Service ( AWS KMS ) key Amazon Resource Name (ARN) that is used to encrypt the data during AWS DMS Serverless replication.
         *
         * If you don't specify a value for the `KmsKeyId` parameter, AWS DMS uses your default encryption key.
         *
         * AWS KMS creates the default encryption key for your Amazon Web Services account. Your AWS account has a different default encryption key for each AWS Region .
         */
        kmsKeyId?: string;
        /**
         * Specifies the maximum value of the AWS DMS capacity units (DCUs) for which a given AWS DMS Serverless replication can be provisioned. A single DCU is 2GB of RAM, with 1 DCU as the minimum value allowed. The list of valid DCU values includes 1, 2, 4, 8, 16, 32, 64, 128, 192, 256, and 384. So, the maximum value that you can specify for AWS DMS Serverless is 384. The `MaxCapacityUnits` parameter is the only DCU parameter you are required to specify.
         */
        maxCapacityUnits: number;
        /**
         * Specifies the minimum value of the AWS DMS capacity units (DCUs) for which a given AWS DMS Serverless replication can be provisioned. A single DCU is 2GB of RAM, with 1 DCU as the minimum value allowed. The list of valid DCU values includes 1, 2, 4, 8, 16, 32, 64, 128, 192, 256, and 384. So, the minimum DCU value that you can specify for AWS DMS Serverless is 1. If you don't set this value, AWS DMS sets this parameter to the minimum DCU value allowed, 1. If there is no current source activity, AWS DMS scales down your replication until it reaches the value specified in `MinCapacityUnits` .
         */
        minCapacityUnits?: number;
        /**
         * Specifies whether the AWS DMS Serverless replication is a Multi-AZ deployment. You can't set the `AvailabilityZone` parameter if the `MultiAZ` parameter is set to `true` .
         */
        multiAz?: boolean;
        /**
         * The weekly time range during which system maintenance can occur for the AWS DMS Serverless replication, in Universal Coordinated Time (UTC). The format is `ddd:hh24:mi-ddd:hh24:mi` .
         *
         * The default is a 30-minute window selected at random from an 8-hour block of time per AWS Region . This maintenance occurs on a random day of the week. Valid values for days of the week include `Mon` , `Tue` , `Wed` , `Thu` , `Fri` , `Sat` , and `Sun` .
         *
         * Constraints include a minimum 30-minute window.
         */
        preferredMaintenanceWindow?: string;
        /**
         * Specifies a subnet group identifier to associate with the AWS DMS Serverless replication.
         */
        replicationSubnetGroupId?: string;
        /**
         * Specifies the virtual private cloud (VPC) security group to use with the AWS DMS Serverless replication. The VPC security group must work with the VPC containing the replication.
         */
        vpcSecurityGroupIds?: string[];
    }

    /**
     * The property describes schema conversion application attributes for the migration project.
     */
    export interface SchemaConversionApplicationAttributesProperties {
        s3BucketPath?: string;
        s3BucketRoleArn?: string;
    }

    /**
     * The property identifies the exact type of settings for the data provider.
     */
    export interface SettingsProperties {
        /**
         * MicrosoftSqlServerSettings property identifier.
         */
        microsoftSqlServerSettings?: outputs.dms.SettingsPropertiesMicrosoftSqlServerSettingsProperties;
        /**
         * MySqlSettings property identifier.
         */
        mySqlSettings?: outputs.dms.SettingsPropertiesMySqlSettingsProperties;
        /**
         * OracleSettings property identifier.
         */
        oracleSettings?: outputs.dms.SettingsPropertiesOracleSettingsProperties;
        /**
         * PostgreSqlSettings property identifier.
         */
        postgreSqlSettings?: outputs.dms.SettingsPropertiesPostgreSqlSettingsProperties;
    }

    /**
     * MicrosoftSqlServerSettings property identifier.
     */
    export interface SettingsPropertiesMicrosoftSqlServerSettingsProperties {
        certificateArn?: string;
        databaseName: string;
        port: number;
        serverName: string;
        sslMode: enums.dms.DataProviderDmsSslModeValue;
    }

    /**
     * MySqlSettings property identifier.
     */
    export interface SettingsPropertiesMySqlSettingsProperties {
        certificateArn?: string;
        port: number;
        serverName: string;
        sslMode: enums.dms.DataProviderDmsSslModeValue;
    }

    /**
     * OracleSettings property identifier.
     */
    export interface SettingsPropertiesOracleSettingsProperties {
        asmServer?: string;
        certificateArn?: string;
        databaseName: string;
        port: number;
        secretsManagerOracleAsmAccessRoleArn?: string;
        secretsManagerOracleAsmSecretId?: string;
        secretsManagerSecurityDbEncryptionAccessRoleArn?: string;
        secretsManagerSecurityDbEncryptionSecretId?: string;
        serverName: string;
        sslMode: enums.dms.DataProviderDmsSslModeValue;
    }

    /**
     * PostgreSqlSettings property identifier.
     */
    export interface SettingsPropertiesPostgreSqlSettingsProperties {
        certificateArn?: string;
        databaseName: string;
        port: number;
        serverName: string;
        sslMode: enums.dms.DataProviderDmsSslModeValue;
    }

}

export namespace docdbelastic {
}

export namespace dynamodb {
    export interface GlobalTableAttributeDefinition {
        /**
         * A name for the attribute.
         */
        attributeName: string;
        /**
         * The data type for the attribute, where:
         *
         * - `S` - the attribute is of type String
         * - `N` - the attribute is of type Number
         * - `B` - the attribute is of type Binary
         */
        attributeType: string;
    }

    export interface GlobalTableCapacityAutoScalingSettings {
        /**
         * The maximum provisioned capacity units for the global table.
         */
        maxCapacity: number;
        /**
         * The minimum provisioned capacity units for the global table.
         */
        minCapacity: number;
        /**
         * When switching billing mode from `PAY_PER_REQUEST` to `PROVISIONED` , DynamoDB requires you to specify read and write capacity unit values for the table and for each global secondary index. These values will be applied to all replicas. The table will use these provisioned values until CloudFormation creates the autoscaling policies you configured in your template. CloudFormation cannot determine what capacity the table and its global secondary indexes will require in this time period, since they are application-dependent.
         *
         * If you want to switch a table's billing mode from `PAY_PER_REQUEST` to `PROVISIONED` , you must specify a value for this property for each autoscaled resource. If you specify different values for the same resource in different regions, CloudFormation will use the highest value found in either the `SeedCapacity` or `ReadCapacityUnits` properties. For example, if your global secondary index `myGSI` has a `SeedCapacity` of 10 in us-east-1 and a fixed `ReadCapacityUnits` of 20 in eu-west-1, CloudFormation will initially set the read capacity for `myGSI` to 20. Note that if you disable `ScaleIn` for `myGSI` in us-east-1, its read capacity units might not be set back to 10.
         *
         * You must also specify a value for `SeedCapacity` when you plan to switch a table's billing mode from `PROVISIONED` to `PAY_PER_REQUEST` , because CloudFormation might need to roll back the operation (reverting the billing mode to `PROVISIONED` ) and this cannot succeed without specifying a value for `SeedCapacity` .
         */
        seedCapacity?: number;
        /**
         * Defines a target tracking scaling policy.
         */
        targetTrackingScalingPolicyConfiguration: outputs.dynamodb.GlobalTableTargetTrackingScalingPolicyConfiguration;
    }

    export interface GlobalTableContributorInsightsSpecification {
        /**
         * Indicates whether CloudWatch Contributor Insights are to be enabled (true) or disabled (false).
         */
        enabled: boolean;
    }

    export interface GlobalTableGlobalSecondaryIndex {
        /**
         * The name of the global secondary index. The name must be unique among all other indexes on this table.
         */
        indexName: string;
        /**
         * The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
         *
         * - `HASH` - partition key
         * - `RANGE` - sort key
         *
         * > The partition key of an item is also known as its *hash attribute* . The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
         * > 
         * > The sort key of an item is also known as its *range attribute* . The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
         */
        keySchema: outputs.dynamodb.GlobalTableKeySchema[];
        /**
         * Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
         */
        projection: outputs.dynamodb.GlobalTableProjection;
        /**
         * Sets the write request settings for a global table or a global secondary index. You must specify this setting if you set the `BillingMode` to `PAY_PER_REQUEST` .
         */
        writeOnDemandThroughputSettings?: outputs.dynamodb.GlobalTableWriteOnDemandThroughputSettings;
        /**
         * Defines write capacity settings for the global secondary index. You must specify a value for this property if the table's `BillingMode` is `PROVISIONED` . All replicas will have the same write capacity settings for this global secondary index.
         */
        writeProvisionedThroughputSettings?: outputs.dynamodb.GlobalTableWriteProvisionedThroughputSettings;
    }

    export interface GlobalTableKeySchema {
        /**
         * The name of a key attribute.
         */
        attributeName: string;
        /**
         * The role that this key attribute will assume:
         *
         * - `HASH` - partition key
         * - `RANGE` - sort key
         *
         * > The partition key of an item is also known as its *hash attribute* . The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
         * > 
         * > The sort key of an item is also known as its *range attribute* . The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
         */
        keyType: string;
    }

    export interface GlobalTableKinesisStreamSpecification {
        /**
         * The precision for the time and date that the stream was created.
         */
        approximateCreationDateTimePrecision?: enums.dynamodb.GlobalTableKinesisStreamSpecificationApproximateCreationDateTimePrecision;
        /**
         * The ARN for a specific Kinesis data stream.
         */
        streamArn: string;
    }

    export interface GlobalTableLocalSecondaryIndex {
        /**
         * The name of the local secondary index. The name must be unique among all other indexes on this table.
         */
        indexName: string;
        /**
         * The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
         *
         * - `HASH` - partition key
         * - `RANGE` - sort key
         *
         * > The partition key of an item is also known as its *hash attribute* . The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
         * > 
         * > The sort key of an item is also known as its *range attribute* . The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
         */
        keySchema: outputs.dynamodb.GlobalTableKeySchema[];
        /**
         * Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
         */
        projection: outputs.dynamodb.GlobalTableProjection;
    }

    export interface GlobalTablePointInTimeRecoverySpecification {
        /**
         * Indicates whether point in time recovery is enabled (true) or disabled (false) on the table.
         */
        pointInTimeRecoveryEnabled?: boolean;
    }

    export interface GlobalTableProjection {
        /**
         * Represents the non-key attribute names which will be projected into the index.
         *
         * For local secondary indexes, the total count of `NonKeyAttributes` summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
         */
        nonKeyAttributes?: string[];
        /**
         * The set of attributes that are projected into the index:
         *
         * - `KEYS_ONLY` - Only the index and primary keys are projected into the index.
         * - `INCLUDE` - In addition to the attributes described in `KEYS_ONLY` , the secondary index will include other non-key attributes that you specify.
         * - `ALL` - All of the table attributes are projected into the index.
         *
         * When using the DynamoDB console, `ALL` is selected by default.
         */
        projectionType?: string;
    }

    export interface GlobalTableReadOnDemandThroughputSettings {
        /**
         * Maximum number of read request units for the specified replica of a global table.
         */
        maxReadRequestUnits?: number;
    }

    export interface GlobalTableReadProvisionedThroughputSettings {
        /**
         * Specifies auto scaling settings for the replica table or global secondary index.
         */
        readCapacityAutoScalingSettings?: outputs.dynamodb.GlobalTableCapacityAutoScalingSettings;
        /**
         * Specifies a fixed read capacity for the replica table or global secondary index.
         */
        readCapacityUnits?: number;
    }

    export interface GlobalTableReplicaGlobalSecondaryIndexSpecification {
        /**
         * Updates the status for contributor insights for a specific table or index. CloudWatch Contributor Insights for DynamoDB graphs display the partition key and (if applicable) sort key of frequently accessed items and frequently throttled items in plaintext. If you require the use of AWS Key Management Service (KMS) to encrypt this table’s partition key and sort key data with an AWS managed key or customer managed key, you should not enable CloudWatch Contributor Insights for DynamoDB for this table.
         */
        contributorInsightsSpecification?: outputs.dynamodb.GlobalTableContributorInsightsSpecification;
        /**
         * The name of the global secondary index. The name must be unique among all other indexes on this table.
         */
        indexName: string;
        /**
         * Sets the read request settings for a replica global secondary index. You must specify this setting if you set the `BillingMode` to `PAY_PER_REQUEST` .
         */
        readOnDemandThroughputSettings?: outputs.dynamodb.GlobalTableReadOnDemandThroughputSettings;
        /**
         * Allows you to specify the read capacity settings for a replica global secondary index when the `BillingMode` is set to `PROVISIONED` .
         */
        readProvisionedThroughputSettings?: outputs.dynamodb.GlobalTableReadProvisionedThroughputSettings;
    }

    export interface GlobalTableReplicaSpecification {
        /**
         * The settings used to enable or disable CloudWatch Contributor Insights for the specified replica. When not specified, defaults to contributor insights disabled for the replica.
         */
        contributorInsightsSpecification?: outputs.dynamodb.GlobalTableContributorInsightsSpecification;
        /**
         * Determines if a replica is protected from deletion. When enabled, the table cannot be deleted by any user or process. This setting is disabled by default. For more information, see [Using deletion protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection) in the *Amazon DynamoDB Developer Guide* .
         */
        deletionProtectionEnabled?: boolean;
        /**
         * Defines additional settings for the global secondary indexes of this replica.
         */
        globalSecondaryIndexes?: outputs.dynamodb.GlobalTableReplicaGlobalSecondaryIndexSpecification[];
        /**
         * Defines the Kinesis Data Streams configuration for the specified replica.
         */
        kinesisStreamSpecification?: outputs.dynamodb.GlobalTableKinesisStreamSpecification;
        /**
         * The settings used to enable point in time recovery. When not specified, defaults to point in time recovery disabled for the replica.
         */
        pointInTimeRecoverySpecification?: outputs.dynamodb.GlobalTablePointInTimeRecoverySpecification;
        /**
         * Sets read request settings for the replica table.
         */
        readOnDemandThroughputSettings?: outputs.dynamodb.GlobalTableReadOnDemandThroughputSettings;
        /**
         * Defines read capacity settings for the replica table.
         */
        readProvisionedThroughputSettings?: outputs.dynamodb.GlobalTableReadProvisionedThroughputSettings;
        /**
         * The region in which this replica exists.
         */
        region: string;
        /**
         * Represents the DynamoDB Streams configuration for a global table replica.
         */
        replicaStreamSpecification?: outputs.dynamodb.GlobalTableReplicaStreamSpecification;
        /**
         * A resource-based policy document that contains permissions to add to the specified replica of a DynamoDB global table. Resource-based policies let you define access permissions by specifying who has access to each resource, and the actions they are allowed to perform on each resource.
         *
         * In a CloudFormation template, you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to DynamoDB . For more information about resource-based policies, see [Using resource-based policies for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html) .
         */
        resourcePolicy?: outputs.dynamodb.GlobalTableResourcePolicy;
        /**
         * Allows you to specify a customer-managed key for the replica. When using customer-managed keys for server-side encryption, this property must have a value in all replicas.
         */
        sseSpecification?: outputs.dynamodb.GlobalTableReplicaSseSpecification;
        /**
         * The table class of the specified table. Valid values are `STANDARD` and `STANDARD_INFREQUENT_ACCESS` .
         */
        tableClass?: string;
        /**
         * An array of key-value pairs to apply to this replica.
         *
         * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
         */
        tags?: outputs.dynamodb.GlobalTableTag[];
    }

    export interface GlobalTableReplicaSseSpecification {
        /**
         * The AWS KMS key that should be used for the AWS KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key `alias/aws/dynamodb` .
         */
        kmsMasterKeyId: string;
    }

    export interface GlobalTableReplicaStreamSpecification {
        /**
         * A resource-based policy document that contains the permissions for the specified stream of a DynamoDB global table replica. Resource-based policies let you define access permissions by specifying who has access to each resource, and the actions they are allowed to perform on each resource.
         *
         * In a CloudFormation template, you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to DynamoDB . For more information about resource-based policies, see [Using resource-based policies for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html) .
         *
         * You can update the `ResourcePolicy` property if you've specified more than one table using the [AWS ::DynamoDB::GlobalTable](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-globaltable.html) resource.
         */
        resourcePolicy: outputs.dynamodb.GlobalTableResourcePolicy;
    }

    export interface GlobalTableResourcePolicy {
        /**
         * A resource-based policy document that contains permissions to add to the specified DynamoDB table, its indexes, and stream. In a CloudFormation template, you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to DynamoDB . For more information about resource-based policies, see [Using resource-based policies for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html) .
         */
        policyDocument: any;
    }

    export interface GlobalTableSseSpecification {
        /**
         * Indicates whether server-side encryption is performed using an AWS managed key or an AWS owned key. If enabled (true), server-side encryption type is set to KMS and an AWS managed key is used ( AWS KMS charges apply). If disabled (false) or not specified,server-side encryption is set to an AWS owned key. If you choose to use KMS encryption, you can also use customer managed KMS keys by specifying them in the `ReplicaSpecification.SSESpecification` object. You cannot mix AWS managed and customer managed KMS keys.
         */
        sseEnabled: boolean;
        /**
         * Server-side encryption type. The only supported value is:
         *
         * - `KMS` - Server-side encryption that uses AWS Key Management Service . The key is stored in your account and is managed by AWS KMS ( AWS KMS charges apply).
         */
        sseType?: string;
    }

    export interface GlobalTableStreamSpecification {
        /**
         * When an item in the table is modified, `StreamViewType` determines what information is written to the stream for this table. Valid values for `StreamViewType` are:
         *
         * - `KEYS_ONLY` - Only the key attributes of the modified item are written to the stream.
         * - `NEW_IMAGE` - The entire item, as it appears after it was modified, is written to the stream.
         * - `OLD_IMAGE` - The entire item, as it appeared before it was modified, is written to the stream.
         * - `NEW_AND_OLD_IMAGES` - Both the new and the old item images of the item are written to the stream.
         */
        streamViewType: string;
    }

    export interface GlobalTableTag {
        /**
         * The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
         */
        key: string;
        /**
         * The value of the tag. Tag values are case-sensitive and can be null.
         */
        value: string;
    }

    export interface GlobalTableTargetTrackingScalingPolicyConfiguration {
        /**
         * Indicates whether scale in by the target tracking scaling policy is disabled. The default value is `false` .
         */
        disableScaleIn?: boolean;
        /**
         * The amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start.
         */
        scaleInCooldown?: number;
        /**
         * The amount of time, in seconds, after a scale-out activity completes before another scale-out activity can start.
         */
        scaleOutCooldown?: number;
        /**
         * Defines a target value for the scaling policy.
         */
        targetValue: number;
    }

    export interface GlobalTableTimeToLiveSpecification {
        /**
         * The name of the attribute used to store the expiration time for items in the table.
         *
         * Currently, you cannot directly change the attribute name used to evaluate time to live. In order to do so, you must first disable time to live, and then re-enable it with the new attribute name. It can take up to one hour for changes to time to live to take effect. If you attempt to modify time to live within that time window, your stack operation might be delayed.
         */
        attributeName?: string;
        /**
         * Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
         */
        enabled: boolean;
    }

    export interface GlobalTableWriteOnDemandThroughputSettings {
        /**
         * Maximum number of write request settings for the specified replica of a global table.
         */
        maxWriteRequestUnits?: number;
    }

    export interface GlobalTableWriteProvisionedThroughputSettings {
        /**
         * Specifies auto scaling settings for the replica table or global secondary index.
         */
        writeCapacityAutoScalingSettings?: outputs.dynamodb.GlobalTableCapacityAutoScalingSettings;
    }

    /**
     * Represents an attribute for describing the schema for the table and indexes.
     */
    export interface TableAttributeDefinition {
        /**
         * A name for the attribute.
         */
        attributeName: string;
        /**
         * The data type for the attribute, where:
         *   +   ``S`` - the attribute is of type String
         *   +   ``N`` - the attribute is of type Number
         *   +   ``B`` - the attribute is of type Binary
         */
        attributeType: string;
    }

    /**
     * The settings used to enable or disable CloudWatch Contributor Insights.
     */
    export interface TableContributorInsightsSpecification {
        /**
         * Indicates whether CloudWatch Contributor Insights are to be enabled (true) or disabled (false).
         */
        enabled: boolean;
    }

    /**
     * The options for imported source files in CSV format. The values are Delimiter and HeaderList.
     */
    export interface TableCsv {
        /**
         * The delimiter used for separating items in the CSV file being imported.
         */
        delimiter?: string;
        /**
         * List of the headers used to specify a common header for all source CSV files being imported. If this field is specified then the first line of each CSV file is treated as data instead of the header. If this field is not specified the the first line of each CSV file is treated as the header.
         */
        headerList?: string[];
    }

    /**
     * Represents the properties of a global secondary index.
     */
    export interface TableGlobalSecondaryIndex {
        /**
         * The settings used to enable or disable CloudWatch Contributor Insights for the specified global secondary index.
         */
        contributorInsightsSpecification?: outputs.dynamodb.TableContributorInsightsSpecification;
        /**
         * The name of the global secondary index. The name must be unique among all other indexes on this table.
         */
        indexName: string;
        /**
         * The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
         *   +   ``HASH`` - partition key
         *   +   ``RANGE`` - sort key
         *   
         *   The partition key of an item is also known as its *hash attribute*. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
         *  The sort key of an item is also known as its *range attribute*. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
         */
        keySchema: outputs.dynamodb.TableKeySchema[];
        /**
         * The maximum number of read and write units for the specified global secondary index. If you use this parameter, you must specify ``MaxReadRequestUnits``, ``MaxWriteRequestUnits``, or both.
         */
        onDemandThroughput?: outputs.dynamodb.TableOnDemandThroughput;
        /**
         * Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
         */
        projection: outputs.dynamodb.TableProjection;
        /**
         * Represents the provisioned throughput settings for the specified global secondary index.
         *  For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the *Amazon DynamoDB Developer Guide*.
         */
        provisionedThroughput?: outputs.dynamodb.TableProvisionedThroughput;
    }

    /**
     * Specifies the properties of data being imported from the S3 bucket source to the table.
     */
    export interface TableImportSourceSpecification {
        /**
         * Type of compression to be used on the input coming from the imported table.
         */
        inputCompressionType?: string;
        /**
         * The format of the source data. Valid values for ``ImportFormat`` are ``CSV``, ``DYNAMODB_JSON`` or ``ION``.
         */
        inputFormat: string;
        /**
         * Additional properties that specify how the input is formatted,
         */
        inputFormatOptions?: outputs.dynamodb.TableInputFormatOptions;
        /**
         * The S3 bucket that provides the source for the import.
         */
        s3BucketSource: outputs.dynamodb.TableS3BucketSource;
    }

    /**
     * The format options for the data that was imported into the target table. There is one value, CsvOption.
     */
    export interface TableInputFormatOptions {
        /**
         * The options for imported source files in CSV format. The values are Delimiter and HeaderList.
         */
        csv?: outputs.dynamodb.TableCsv;
    }

    /**
     * Represents *a single element* of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.
     *  A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A composite primary key would require one ``KeySchemaElement`` for the partition key, and another ``KeySchemaElement`` for the sort key.
     *  A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.
     */
    export interface TableKeySchema {
        /**
         * The name of a key attribute.
         */
        attributeName: string;
        /**
         * The role that this key attribute will assume:
         *   +   ``HASH`` - partition key
         *   +   ``RANGE`` - sort key
         *   
         *   The partition key of an item is also known as its *hash attribute*. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
         *  The sort key of an item is also known as its *range attribute*. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
         */
        keyType: string;
    }

    /**
     * The Kinesis Data Streams configuration for the specified table.
     */
    export interface TableKinesisStreamSpecification {
        /**
         * The precision for the time and date that the stream was created.
         */
        approximateCreationDateTimePrecision?: enums.dynamodb.TableKinesisStreamSpecificationApproximateCreationDateTimePrecision;
        /**
         * The ARN for a specific Kinesis data stream.
         *  Length Constraints: Minimum length of 37. Maximum length of 1024.
         */
        streamArn: string;
    }

    /**
     * Represents the properties of a local secondary index. A local secondary index can only be created when its parent table is created.
     */
    export interface TableLocalSecondaryIndex {
        /**
         * The name of the local secondary index. The name must be unique among all other indexes on this table.
         */
        indexName: string;
        /**
         * The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
         *   +   ``HASH`` - partition key
         *   +   ``RANGE`` - sort key
         *   
         *   The partition key of an item is also known as its *hash attribute*. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
         *  The sort key of an item is also known as its *range attribute*. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
         */
        keySchema: outputs.dynamodb.TableKeySchema[];
        /**
         * Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
         */
        projection: outputs.dynamodb.TableProjection;
    }

    /**
     * Sets the maximum number of read and write units for the specified on-demand table. If you use this property, you must specify ``MaxReadRequestUnits``, ``MaxWriteRequestUnits``, or both.
     */
    export interface TableOnDemandThroughput {
        /**
         * Maximum number of read request units for the specified table.
         *  To specify a maximum ``OnDemandThroughput`` on your table, set the value of ``MaxReadRequestUnits`` as greater than or equal to 1. To remove the maximum ``OnDemandThroughput`` that is currently set on your table, set the value of ``MaxReadRequestUnits`` to -1.
         */
        maxReadRequestUnits?: number;
        /**
         * Maximum number of write request units for the specified table.
         *  To specify a maximum ``OnDemandThroughput`` on your table, set the value of ``MaxWriteRequestUnits`` as greater than or equal to 1. To remove the maximum ``OnDemandThroughput`` that is currently set on your table, set the value of ``MaxWriteRequestUnits`` to -1.
         */
        maxWriteRequestUnits?: number;
    }

    /**
     * The settings used to enable point in time recovery.
     */
    export interface TablePointInTimeRecoverySpecification {
        /**
         * Indicates whether point in time recovery is enabled (true) or disabled (false) on the table.
         */
        pointInTimeRecoveryEnabled?: boolean;
    }

    /**
     * Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
     */
    export interface TableProjection {
        /**
         * Represents the non-key attribute names which will be projected into the index.
         *  For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
         */
        nonKeyAttributes?: string[];
        /**
         * The set of attributes that are projected into the index:
         *   +   ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.
         *   +   ``INCLUDE`` - In addition to the attributes described in ``KEYS_ONLY``, the secondary index will include other non-key attributes that you specify.
         *   +   ``ALL`` - All of the table attributes are projected into the index.
         *   
         *  When using the DynamoDB console, ``ALL`` is selected by default.
         */
        projectionType?: string;
    }

    /**
     * Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
     */
    export interface TableProvisionedThroughput {
        /**
         * The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ``ThrottlingException``. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the *Amazon DynamoDB Developer Guide*.
         *  If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
         */
        readCapacityUnits: number;
        /**
         * The maximum number of writes consumed per second before DynamoDB returns a ``ThrottlingException``. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the *Amazon DynamoDB Developer Guide*.
         *  If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
         */
        writeCapacityUnits: number;
    }

    /**
     * Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a table, its indexes, and stream. Resource-based policies let you define access permissions by specifying who has access to each resource, and the actions they are allowed to perform on each resource.
     *  In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
     *  While defining resource-based policies in your CFNshort templates, the following considerations apply:
     *   +  The maximum size supported for a resource-based policy document in JSON format is 20 KB. DDB counts whitespaces when calculating the size of a policy against this limit. 
     *   +  Resource-based policies don't support [drift detection](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html#). If you update a policy outside of the CFNshort stack template, you'll need to update the CFNshort stack with the changes.
     *   +  Resource-based policies don't support out-of-band changes. If you add, update, or delete a policy outside of the CFNshort template, the change won't be overwritten if there are no changes to the policy within the template.
     *  For example, say that your template contains a resource-based policy, which you later update outside of the template. If you don't make any changes to the policy in the template, the updated policy in DDB won’t be synced with the policy in the template.
     *  Conversely, say that your template doesn’t contain a resource-based policy, but you add a policy outside of the template. This policy won’t be removed from DDB as long as you don’t add it to the template. When you add a policy to the template and update the stack, the existing policy in DDB will be updated to match the one defined in the template.
     *   
     *  For a full list of all considerations, see [Resource-based policy considerations](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-considerations.html).
     */
    export interface TableResourcePolicy {
        /**
         * A resource-based policy document that contains permissions to add to the specified DDB table, index, or both. In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
         */
        policyDocument: any;
    }

    /**
     * The S3 bucket that is being imported from.
     */
    export interface TableS3BucketSource {
        /**
         * The S3 bucket that is being imported from.
         */
        s3Bucket: string;
        /**
         * The account number of the S3 bucket that is being imported from. If the bucket is owned by the requester this is optional.
         */
        s3BucketOwner?: string;
        /**
         * The key prefix shared by all S3 Objects that are being imported.
         */
        s3KeyPrefix?: string;
    }

    /**
     * Represents the settings used to enable server-side encryption.
     */
    export interface TableSseSpecification {
        /**
         * The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key ``alias/aws/dynamodb``.
         */
        kmsMasterKeyId?: string;
        /**
         * Indicates whether server-side encryption is done using an AWS managed key or an AWS owned key. If enabled (true), server-side encryption type is set to ``KMS`` and an AWS managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to AWS owned key.
         */
        sseEnabled: boolean;
        /**
         * Server-side encryption type. The only supported value is:
         *   +   ``KMS`` - Server-side encryption that uses KMSlong. The key is stored in your account and is managed by KMS (KMS charges apply).
         */
        sseType?: string;
    }

    /**
     * Represents the DynamoDB Streams configuration for a table in DynamoDB.
     */
    export interface TableStreamSpecification {
        /**
         * Creates or updates a resource-based policy document that contains the permissions for DDB resources, such as a table's streams. Resource-based policies let you define access permissions by specifying who has access to each resource, and the actions they are allowed to perform on each resource.
         *  In a CFNshort template, you can provide the policy in JSON or YAML format because CFNshort converts YAML to JSON before submitting it to DDB. For more information about resource-based policies, see [Using resource-based policies for](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/access-control-resource-based.html) and [Resource-based policy examples](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/rbac-examples.html).
         */
        resourcePolicy?: outputs.dynamodb.TableResourcePolicy;
        /**
         * When an item in the table is modified, ``StreamViewType`` determines what information is written to the stream for this table. Valid values for ``StreamViewType`` are:
         *   +   ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.
         *   +   ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the stream.
         *   +   ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the stream.
         *   +   ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the stream.
         */
        streamViewType: string;
    }

    /**
     * Represents the settings used to enable or disable Time to Live (TTL) for the specified table.
     */
    export interface TableTimeToLiveSpecification {
        /**
         * The name of the TTL attribute used to store the expiration time for items in the table.
         *    +  The ``AttributeName`` property is required when enabling the TTL, or when TTL is already enabled.
         *   +  To update this property, you must first disable TTL and then enable TTL with the new attribute name.
         */
        attributeName?: string;
        /**
         * Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
         */
        enabled: boolean;
    }

}

export namespace ec2 {
    export interface CapacityReservationFleetInstanceTypeSpecification {
        /**
         * The Availability Zone in which the Capacity Reservation Fleet reserves the capacity. A Capacity Reservation Fleet can't span Availability Zones. All instance type specifications that you specify for the Fleet must use the same Availability Zone.
         */
        availabilityZone?: string;
        /**
         * The ID of the Availability Zone in which the Capacity Reservation Fleet reserves the capacity. A Capacity Reservation Fleet can't span Availability Zones. All instance type specifications that you specify for the Fleet must use the same Availability Zone.
         */
        availabilityZoneId?: string;
        /**
         * Indicates whether the Capacity Reservation Fleet supports EBS-optimized instances types. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using EBS-optimized instance types.
         */
        ebsOptimized?: boolean;
        /**
         * The type of operating system for which the Capacity Reservation Fleet reserves capacity.
         */
        instancePlatform?: string;
        /**
         * The instance type for which the Capacity Reservation Fleet reserves capacity.
         */
        instanceType?: string;
        /**
         * The priority to assign to the instance type. This value is used to determine which of the instance types specified for the Fleet should be prioritized for use. A lower value indicates a high priority. For more information, see [Instance type priority](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#instance-priority) in the Amazon EC2 User Guide.
         */
        priority?: number;
        /**
         * The number of capacity units provided by the specified instance type. This value, together with the total target capacity that you specify for the Fleet determine the number of instances for which the Fleet reserves capacity. Both values are based on units that make sense for your workload. For more information, see [Total target capacity](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/crfleet-concepts.html#target-capacity) in the Amazon EC2 User Guide.
         *
         * Valid Range: Minimum value of `0.001` . Maximum value of `99.999` .
         */
        weight?: number;
    }

    export interface CapacityReservationFleetTag {
        /**
         * The tag key.
         */
        key: string;
        /**
         * The tag value.
         */
        value: string;
    }

    export interface CapacityReservationFleetTagSpecification {
        /**
         * The type of resource to tag on creation. Specify `capacity-reservation-fleet` .
         *
         * To tag a resource after it has been created, see [CreateTags](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html) .
         */
        resourceType?: string;
        /**
         * The tags to apply to the resource.
         */
        tags?: outputs.ec2.CapacityReservationFleetTag[];
    }

    export interface CapacityReservationTag {
        /**
         * The key of the tag.
         *
         * Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with `aws:` .
         */
        key: string;
        /**
         * The value of the tag.
         *
         * Constraints: Tag values are case-sensitive and accept a maximum of 256 Unicode characters.
         */
        value: string;
    }

    export interface CapacityReservationTagSpecification {
        /**
         * The type of resource to tag. Specify `capacity-reservation` .
         */
        resourceType?: string;
        /**
         * The tags to apply to the resource.
         */
        tags?: outputs.ec2.CapacityReservationTag[];
    }

    /**
     * The CPU options for the instance.
     */
    export interface CpuOptionsProperties {
        /**
         * The number of CPU cores for the instance.
         */
        coreCount?: number;
        /**
         * The number of threads per CPU core.
         */
        threadsPerCore?: number;
    }

    /**
     * The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.
     */
    export interface CreditSpecificationProperties {
        /**
         * The credit option for CPU usage of the instance.
         *
         * Valid values: `standard` | `unlimited`
         *
         * T3 instances with `host` tenancy do not support the `unlimited` CPU credit option.
         */
        cpuCredits?: string;
    }

    /**
     * The destination options.
     */
    export interface DestinationOptionsProperties {
        /**
         * The format for the flow log. The default is `plain-text` .
         */
        fileFormat: enums.ec2.FlowLogDestinationOptionsPropertiesFileFormat;
        /**
         * Indicates whether to use Hive-compatible prefixes for flow logs stored in Amazon S3. The default is `false` .
         */
        hiveCompatiblePartitions: boolean;
        /**
         * Indicates whether to partition the flow log per hour. This reduces the cost and response time for queries. The default is `false` .
         */
        perHourPartition: boolean;
    }

    export interface Ec2FleetAcceleratorCountRequest {
        /**
         * The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set `Max` to `0` .
         */
        max?: number;
        /**
         * The minimum number of accelerators. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface Ec2FleetAcceleratorTotalMemoryMiBRequest {
        /**
         * The maximum amount of accelerator memory, in MiB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of accelerator memory, in MiB. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface Ec2FleetBaselineEbsBandwidthMbpsRequest {
        /**
         * The maximum baseline bandwidth, in Mbps. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum baseline bandwidth, in Mbps. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface Ec2FleetCapacityRebalance {
        /**
         * The replacement strategy to use. Only available for fleets of type `maintain` .
         *
         * `launch` - EC2 Fleet launches a replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet. EC2 Fleet does not terminate the instances that receive a rebalance notification. You can terminate the old instances, or you can leave them running. You are charged for all instances while they are running.
         *
         * `launch-before-terminate` - EC2 Fleet launches a replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet, and then, after a delay that you specify (in `TerminationDelay` ), terminates the instances that received a rebalance notification.
         */
        replacementStrategy?: enums.ec2.Ec2FleetCapacityRebalanceReplacementStrategy;
        /**
         * The amount of time (in seconds) that Amazon EC2 waits before terminating the old Spot Instance after launching a new replacement Spot Instance.
         *
         * Required when `ReplacementStrategy` is set to `launch-before-terminate` .
         *
         * Not valid when `ReplacementStrategy` is set to `launch` .
         *
         * Valid values: Minimum value of `120` seconds. Maximum value of `7200` seconds.
         */
        terminationDelay?: number;
    }

    export interface Ec2FleetCapacityReservationOptionsRequest {
        /**
         * Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity.
         *
         * If you specify `use-capacity-reservations-first` , the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy ( `lowest-price` or `prioritized` ) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy ( `lowest-price` or `prioritized` ).
         *
         * If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
         */
        usageStrategy?: enums.ec2.Ec2FleetCapacityReservationOptionsRequestUsageStrategy;
    }

    export interface Ec2FleetFleetLaunchTemplateConfigRequest {
        /**
         * The launch template to use. You must specify either the launch template ID or launch template name in the request.
         */
        launchTemplateSpecification?: outputs.ec2.Ec2FleetFleetLaunchTemplateSpecificationRequest;
        /**
         * Any parameters that you specify override the same parameters in the launch template.
         *
         * For fleets of type `request` and `maintain` , a maximum of 300 items is allowed across all launch templates.
         */
        overrides?: outputs.ec2.Ec2FleetFleetLaunchTemplateOverridesRequest[];
    }

    export interface Ec2FleetFleetLaunchTemplateOverridesRequest {
        /**
         * The Availability Zone in which to launch the instances.
         */
        availabilityZone?: string;
        /**
         * The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.
         *
         * > If you specify `InstanceRequirements` , you can't specify `InstanceType` .
         */
        instanceRequirements?: outputs.ec2.Ec2FleetInstanceRequirementsRequest;
        /**
         * The instance type.
         *
         * `mac1.metal` is not supported as a launch template override.
         *
         * > If you specify `InstanceType` , you can't specify `InstanceRequirements` .
         */
        instanceType?: string;
        /**
         * The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.
         *
         * > If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
         */
        maxPrice?: string;
        /**
         * The location where the instance launched, if applicable.
         */
        placement?: outputs.ec2.Ec2FleetPlacement;
        /**
         * The priority for the launch template override. The highest priority is launched first.
         *
         * If the On-Demand `AllocationStrategy` is set to `prioritized` , EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.
         *
         * If the Spot `AllocationStrategy` is set to `capacity-optimized-prioritized` , EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.
         *
         * Valid values are whole numbers starting at `0` . The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.
         */
        priority?: number;
        /**
         * The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, `subnet-1234abcdeexample1, subnet-0987cdef6example2` ). A request of type `instant` can have only one subnet ID.
         */
        subnetId?: string;
        /**
         * The number of units provided by the specified instance type.
         *
         * > When specifying weights, the price used in the `lowest-price` and `price-capacity-optimized` allocation strategies is per *unit* hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested `TargetCapacity` , resulting in only 1 instance being launched, the price used is per *instance* hour.
         */
        weightedCapacity?: number;
    }

    export interface Ec2FleetFleetLaunchTemplateSpecificationRequest {
        /**
         * The ID of the launch template.
         *
         * You must specify the `LaunchTemplateId` or the `LaunchTemplateName` , but not both.
         */
        launchTemplateId?: string;
        /**
         * The name of the launch template.
         *
         * You must specify the `LaunchTemplateName` or the `LaunchTemplateId` , but not both.
         */
        launchTemplateName?: string;
        /**
         * The launch template version number, `$Latest` , or `$Default` . You must specify a value, otherwise the request fails.
         *
         * If the value is `$Latest` , Amazon EC2 uses the latest version of the launch template.
         *
         * If the value is `$Default` , Amazon EC2 uses the default version of the launch template.
         */
        version: string;
    }

    export interface Ec2FleetInstanceRequirementsRequest {
        /**
         * The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips) on an instance.
         *
         * To exclude accelerator-enabled instance types, set `Max` to `0` .
         *
         * Default: No minimum or maximum limits
         */
        acceleratorCount?: outputs.ec2.Ec2FleetAcceleratorCountRequest;
        /**
         * Indicates whether instance types must have accelerators by specific manufacturers.
         *
         * - For instance types with AWS devices, specify `amazon-web-services` .
         * - For instance types with AMD devices, specify `amd` .
         * - For instance types with Habana devices, specify `habana` .
         * - For instance types with NVIDIA devices, specify `nvidia` .
         * - For instance types with Xilinx devices, specify `xilinx` .
         *
         * Default: Any manufacturer
         */
        acceleratorManufacturers?: enums.ec2.Ec2FleetInstanceRequirementsRequestAcceleratorManufacturersItem[];
        /**
         * The accelerators that must be on the instance type.
         *
         * - For instance types with NVIDIA A10G GPUs, specify `a10g` .
         * - For instance types with NVIDIA A100 GPUs, specify `a100` .
         * - For instance types with NVIDIA H100 GPUs, specify `h100` .
         * - For instance types with AWS Inferentia chips, specify `inferentia` .
         * - For instance types with NVIDIA GRID K520 GPUs, specify `k520` .
         * - For instance types with NVIDIA K80 GPUs, specify `k80` .
         * - For instance types with NVIDIA M60 GPUs, specify `m60` .
         * - For instance types with AMD Radeon Pro V520 GPUs, specify `radeon-pro-v520` .
         * - For instance types with NVIDIA T4 GPUs, specify `t4` .
         * - For instance types with NVIDIA T4G GPUs, specify `t4g` .
         * - For instance types with Xilinx VU9P FPGAs, specify `vu9p` .
         * - For instance types with NVIDIA V100 GPUs, specify `v100` .
         *
         * Default: Any accelerator
         */
        acceleratorNames?: enums.ec2.Ec2FleetInstanceRequirementsRequestAcceleratorNamesItem[];
        /**
         * The minimum and maximum amount of total accelerator memory, in MiB.
         *
         * Default: No minimum or maximum limits
         */
        acceleratorTotalMemoryMiB?: outputs.ec2.Ec2FleetAcceleratorTotalMemoryMiBRequest;
        /**
         * The accelerator types that must be on the instance type.
         *
         * - To include instance types with GPU hardware, specify `gpu` .
         * - To include instance types with FPGA hardware, specify `fpga` .
         * - To include instance types with inference hardware, specify `inference` .
         *
         * Default: Any accelerator type
         */
        acceleratorTypes?: enums.ec2.Ec2FleetInstanceRequirementsRequestAcceleratorTypesItem[];
        /**
         * The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes.
         *
         * You can use strings with one or more wild cards, represented by an asterisk ( `*` ), to allow an instance type, size, or generation. The following are examples: `m5.8xlarge` , `c5*.*` , `m5a.*` , `r*` , `*3*` .
         *
         * For example, if you specify `c5*` ,Amazon EC2 will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify `m5a.*` , Amazon EC2 will allow all the M5a instance types, but not the M5n instance types.
         *
         * > If you specify `AllowedInstanceTypes` , you can't specify `ExcludedInstanceTypes` . 
         *
         * Default: All instance types
         */
        allowedInstanceTypes?: string[];
        /**
         * Indicates whether bare metal instance types must be included, excluded, or required.
         *
         * - To include bare metal instance types, specify `included` .
         * - To require only bare metal instance types, specify `required` .
         * - To exclude bare metal instance types, specify `excluded` .
         *
         * Default: `excluded`
         */
        bareMetal?: enums.ec2.Ec2FleetInstanceRequirementsRequestBareMetal;
        /**
         * The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the *Amazon EC2 User Guide* .
         *
         * Default: No minimum or maximum limits
         */
        baselineEbsBandwidthMbps?: outputs.ec2.Ec2FleetBaselineEbsBandwidthMbpsRequest;
        /**
         * Indicates whether burstable performance T instance types are included, excluded, or required. For more information, see [Burstable performance instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html) .
         *
         * - To include burstable performance instance types, specify `included` .
         * - To require only burstable performance instance types, specify `required` .
         * - To exclude burstable performance instance types, specify `excluded` .
         *
         * Default: `excluded`
         */
        burstablePerformance?: enums.ec2.Ec2FleetInstanceRequirementsRequestBurstablePerformance;
        /**
         * The CPU manufacturers to include.
         *
         * - For instance types with Intel CPUs, specify `intel` .
         * - For instance types with AMD CPUs, specify `amd` .
         * - For instance types with AWS CPUs, specify `amazon-web-services` .
         *
         * > Don't confuse the CPU manufacturer with the CPU architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template. 
         *
         * Default: Any manufacturer
         */
        cpuManufacturers?: enums.ec2.Ec2FleetInstanceRequirementsRequestCpuManufacturersItem[];
        /**
         * The instance types to exclude.
         *
         * You can use strings with one or more wild cards, represented by an asterisk ( `*` ), to exclude an instance family, type, size, or generation. The following are examples: `m5.8xlarge` , `c5*.*` , `m5a.*` , `r*` , `*3*` .
         *
         * For example, if you specify `c5*` ,Amazon EC2 will exclude the entire C5 instance family, which includes all C5a and C5n instance types. If you specify `m5a.*` , Amazon EC2 will exclude all the M5a instance types, but not the M5n instance types.
         *
         * > If you specify `ExcludedInstanceTypes` , you can't specify `AllowedInstanceTypes` . 
         *
         * Default: No excluded instance types
         */
        excludedInstanceTypes?: string[];
        /**
         * Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Current generation instance types are typically the latest two to three generations in each instance family. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
         *
         * For current generation instance types, specify `current` .
         *
         * For previous generation instance types, specify `previous` .
         *
         * Default: Current and previous generation instance types
         */
        instanceGenerations?: enums.ec2.Ec2FleetInstanceRequirementsRequestInstanceGenerationsItem[];
        /**
         * Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the *Amazon EC2 User Guide* .
         *
         * - To include instance types with instance store volumes, specify `included` .
         * - To require only instance types with instance store volumes, specify `required` .
         * - To exclude instance types with instance store volumes, specify `excluded` .
         *
         * Default: `included`
         */
        localStorage?: enums.ec2.Ec2FleetInstanceRequirementsRequestLocalStorage;
        /**
         * The type of local storage that is required.
         *
         * - For instance types with hard disk drive (HDD) storage, specify `hdd` .
         * - For instance types with solid state drive (SSD) storage, specify `ssd` .
         *
         * Default: `hdd` and `ssd`
         */
        localStorageTypes?: enums.ec2.Ec2FleetInstanceRequirementsRequestLocalStorageTypesItem[];
        /**
         * [Price protection] The price protection threshold for Spot Instances, as a percentage of an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
         *
         * The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
         *
         * If you set `DesiredCapacityType` to `vcpu` or `memory-mib` , the price protection threshold is based on the per vCPU or per memory price instead of the per instance price.
         *
         * > Only one of `SpotMaxPricePercentageOverLowestPrice` or `MaxSpotPriceAsPercentageOfOptimalOnDemandPrice` can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as `999999` .
         */
        maxSpotPriceAsPercentageOfOptimalOnDemandPrice?: number;
        /**
         * The minimum and maximum amount of memory per vCPU, in GiB.
         *
         * Default: No minimum or maximum limits
         */
        memoryGiBPerVCpu?: outputs.ec2.Ec2FleetMemoryGiBPerVCpuRequest;
        /**
         * The minimum and maximum amount of memory, in MiB.
         */
        memoryMiB?: outputs.ec2.Ec2FleetMemoryMiBRequest;
        /**
         * The minimum and maximum amount of baseline network bandwidth, in gigabits per second (Gbps). For more information, see [Amazon EC2 instance network bandwidth](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html) in the *Amazon EC2 User Guide* .
         *
         * Default: No minimum or maximum limits
         */
        networkBandwidthGbps?: outputs.ec2.Ec2FleetNetworkBandwidthGbpsRequest;
        /**
         * The minimum and maximum number of network interfaces.
         *
         * Default: No minimum or maximum limits
         */
        networkInterfaceCount?: outputs.ec2.Ec2FleetNetworkInterfaceCountRequest;
        /**
         * [Price protection] The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
         *
         * The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
         *
         * To indicate no price protection threshold, specify a high value, such as `999999` .
         *
         * This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) and [GetInstanceTypesFromInstanceRequirements](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html) .
         *
         * > If you set `TargetCapacityUnitType` to `vcpu` or `memory-mib` , the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price. 
         *
         * Default: `20`
         */
        onDemandMaxPricePercentageOverLowestPrice?: number;
        /**
         * Indicates whether instance types must support hibernation for On-Demand Instances.
         *
         * This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) .
         *
         * Default: `false`
         */
        requireHibernateSupport?: boolean;
        /**
         * [Price protection] The price protection threshold for Spot Instances, as a percentage higher than an identified Spot price. The identified Spot price is the Spot price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified Spot price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose Spot price exceeds your specified threshold.
         *
         * The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
         *
         * If you set `TargetCapacityUnitType` to `vcpu` or `memory-mib` , the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price.
         *
         * This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) and [GetInstanceTypesFromInstanceRequirements](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html) .
         *
         * > Only one of `SpotMaxPricePercentageOverLowestPrice` or `MaxSpotPriceAsPercentageOfOptimalOnDemandPrice` can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as `999999` . 
         *
         * Default: `100`
         */
        spotMaxPricePercentageOverLowestPrice?: number;
        /**
         * The minimum and maximum amount of total local storage, in GB.
         *
         * Default: No minimum or maximum limits
         */
        totalLocalStorageGb?: outputs.ec2.Ec2FleetTotalLocalStorageGbRequest;
        /**
         * The minimum and maximum number of vCPUs.
         */
        vCpuCount?: outputs.ec2.Ec2FleetVCpuCountRangeRequest;
    }

    export interface Ec2FleetMaintenanceStrategies {
        /**
         * The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
         */
        capacityRebalance?: outputs.ec2.Ec2FleetCapacityRebalance;
    }

    export interface Ec2FleetMemoryGiBPerVCpuRequest {
        /**
         * The maximum amount of memory per vCPU, in GiB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of memory per vCPU, in GiB. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface Ec2FleetMemoryMiBRequest {
        /**
         * The maximum amount of memory, in MiB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of memory, in MiB. To specify no minimum limit, specify `0` .
         */
        min?: number;
    }

    export interface Ec2FleetNetworkBandwidthGbpsRequest {
        /**
         * The maximum amount of network bandwidth, in Gbps. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of network bandwidth, in Gbps. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface Ec2FleetNetworkInterfaceCountRequest {
        /**
         * The maximum number of network interfaces. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum number of network interfaces. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface Ec2FleetOnDemandOptionsRequest {
        /**
         * The strategy that determines the order of the launch template overrides to use in fulfilling On-Demand capacity.
         *
         * `lowest-price` - EC2 Fleet uses price to determine the order, launching the lowest price first.
         *
         * `prioritized` - EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first.
         *
         * Default: `lowest-price`
         */
        allocationStrategy?: string;
        /**
         * The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
         *
         * Supported only for fleets of type `instant` .
         */
        capacityReservationOptions?: outputs.ec2.Ec2FleetCapacityReservationOptionsRequest;
        /**
         * The maximum amount per hour for On-Demand Instances that you're willing to pay.
         *
         * > If your fleet includes T instances that are configured as `unlimited` , and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The `MaxTotalPrice` does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for `MaxTotalPrice` . For more information, see [Surplus credits can incur charges](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits) in the *EC2 User Guide* .
         */
        maxTotalPrice?: string;
        /**
         * The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
         *
         * Supported only for fleets of type `instant` .
         *
         * At least one of the following must be specified: `SingleAvailabilityZone` | `SingleInstanceType`
         */
        minTargetCapacity?: number;
        /**
         * Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.
         *
         * Supported only for fleets of type `instant` .
         */
        singleAvailabilityZone?: boolean;
        /**
         * Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.
         *
         * Supported only for fleets of type `instant` .
         */
        singleInstanceType?: boolean;
    }

    export interface Ec2FleetPlacement {
        /**
         * The affinity setting for the instance on the Dedicated Host.
         *
         * This parameter is not supported for [CreateFleet](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet) or [ImportInstance](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html) .
         */
        affinity?: string;
        /**
         * The Availability Zone of the instance.
         *
         * If not specified, an Availability Zone will be automatically chosen for you based on the load balancing criteria for the Region.
         *
         * This parameter is not supported for [CreateFleet](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet) .
         */
        availabilityZone?: string;
        /**
         * The name of the placement group that the instance is in. If you specify `GroupName` , you can't specify `GroupId` .
         */
        groupName?: string;
        /**
         * The ID of the Dedicated Host on which the instance resides.
         *
         * This parameter is not supported for [CreateFleet](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet) or [ImportInstance](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html) .
         */
        hostId?: string;
        /**
         * The ARN of the host resource group in which to launch the instances.
         *
         * If you specify this parameter, either omit the *Tenancy* parameter or set it to `host` .
         *
         * This parameter is not supported for [CreateFleet](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet) .
         */
        hostResourceGroupArn?: string;
        /**
         * The number of the partition that the instance is in. Valid only if the placement group strategy is set to `partition` .
         *
         * This parameter is not supported for [CreateFleet](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet) .
         */
        partitionNumber?: number;
        /**
         * Reserved for future use.
         */
        spreadDomain?: string;
        /**
         * The tenancy of the instance. An instance with a tenancy of `dedicated` runs on single-tenant hardware.
         *
         * This parameter is not supported for [CreateFleet](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet) . The `host` tenancy is not supported for [ImportInstance](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html) or for T3 instances that are configured for the `unlimited` CPU credit option.
         */
        tenancy?: string;
    }

    export interface Ec2FleetSpotOptionsRequest {
        /**
         * Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet.
         *
         * If the allocation strategy is `lowestPrice` , EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy.
         *
         * If the allocation strategy is `diversified` , EC2 Fleet launches instances from all the Spot Instance pools that you specify.
         *
         * If the allocation strategy is `capacityOptimized` , EC2 Fleet launches instances from Spot Instance pools that are optimally chosen based on the available Spot Instance capacity.
         *
         * *Allowed Values* : `lowestPrice` | `diversified` | `capacityOptimized` | `capacityOptimizedPrioritized`
         */
        allocationStrategy?: enums.ec2.Ec2FleetSpotOptionsRequestAllocationStrategy;
        /**
         * The behavior when a Spot Instance is interrupted.
         *
         * Default: `terminate`
         */
        instanceInterruptionBehavior?: enums.ec2.Ec2FleetSpotOptionsRequestInstanceInterruptionBehavior;
        /**
         * The number of Spot pools across which to allocate your target Spot capacity. Supported only when Spot `AllocationStrategy` is set to `lowest-price` . EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
         *
         * Note that EC2 Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, EC2 Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
         */
        instancePoolsToUseCount?: number;
        /**
         * The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
         */
        maintenanceStrategies?: outputs.ec2.Ec2FleetMaintenanceStrategies;
        /**
         * The maximum amount per hour for Spot Instances that you're willing to pay. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.
         *
         * > If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter. > If your fleet includes T instances that are configured as `unlimited` , and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The `MaxTotalPrice` does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for `MaxTotalPrice` . For more information, see [Surplus credits can incur charges](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits) in the *EC2 User Guide* .
         */
        maxTotalPrice?: string;
        /**
         * The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
         *
         * Supported only for fleets of type `instant` .
         *
         * At least one of the following must be specified: `SingleAvailabilityZone` | `SingleInstanceType`
         */
        minTargetCapacity?: number;
        /**
         * Indicates that the fleet launches all Spot Instances into a single Availability Zone.
         *
         * Supported only for fleets of type `instant` .
         */
        singleAvailabilityZone?: boolean;
        /**
         * Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet.
         *
         * Supported only for fleets of type `instant` .
         */
        singleInstanceType?: boolean;
    }

    export interface Ec2FleetTag {
        /**
         * The tag key.
         */
        key: string;
        /**
         * The tag value.
         */
        value: string;
    }

    export interface Ec2FleetTagSpecification {
        /**
         * The type of resource to tag.
         */
        resourceType?: enums.ec2.Ec2FleetTagSpecificationResourceType;
        /**
         * The tags to apply to the resource.
         */
        tags?: outputs.ec2.Ec2FleetTag[];
    }

    export interface Ec2FleetTargetCapacitySpecificationRequest {
        /**
         * The default target capacity type.
         */
        defaultTargetCapacityType?: enums.ec2.Ec2FleetTargetCapacitySpecificationRequestDefaultTargetCapacityType;
        /**
         * The number of On-Demand units to request.
         */
        onDemandTargetCapacity?: number;
        /**
         * The number of Spot units to request.
         */
        spotTargetCapacity?: number;
        /**
         * The unit for the target capacity. You can specify this parameter only when using attributed-based instance type selection.
         *
         * Default: `units` (the number of instances)
         */
        targetCapacityUnitType?: enums.ec2.Ec2FleetTargetCapacitySpecificationRequestTargetCapacityUnitType;
        /**
         * The number of units to request, filled using the default target capacity type.
         */
        totalTargetCapacity: number;
    }

    export interface Ec2FleetTotalLocalStorageGbRequest {
        /**
         * The maximum amount of total local storage, in GB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of total local storage, in GB. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface Ec2FleetVCpuCountRangeRequest {
        /**
         * The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum number of vCPUs. To specify no minimum limit, specify `0` .
         */
        min?: number;
    }

    /**
     * Indicates whether the instance is enabled for AWS Nitro Enclaves.
     */
    export interface EnclaveOptionsProperties {
        /**
         * If this parameter is set to true, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
         */
        enabled?: boolean;
    }

    /**
     * Indicates whether an instance is enabled for hibernation.
     */
    export interface HibernationOptionsProperties {
        /**
         * If you set this parameter to true, your instance is enabled for hibernation.
         */
        configured?: boolean;
    }

    export interface InstanceAssociationParameter {
        /**
         * The name of an input parameter that is in the associated SSM document.
         */
        key: string;
        /**
         * The value of an input parameter.
         */
        value: string[];
    }

    export interface InstanceBlockDeviceMapping {
        /**
         * The device name (for example, /dev/sdh or xvdh).
         */
        deviceName: string;
        /**
         * Parameters used to automatically set up EBS volumes when the instance is launched.
         */
        ebs?: outputs.ec2.InstanceEbs;
        /**
         * To omit the device from the block device mapping, specify an empty string.
         *
         * > After the instance is running, modifying this parameter results in instance [replacement](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-replacement) .
         */
        noDevice?: any;
        /**
         * The virtual device name ( `ephemeral` N). The name must be in the form `ephemeral` *X* where *X* is a number starting from zero (0). For example, an instance type with 2 available instance store volumes can specify mappings for `ephemeral0` and `ephemeral1` . The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
         *
         * NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect.
         *
         * *Constraints* : For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
         *
         * > After the instance is running, modifying this parameter results in instance [replacement](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-replacement) .
         */
        virtualName?: string;
    }

    export interface InstanceEbs {
        /**
         * Indicates whether the EBS volume is deleted on instance termination.
         */
        deleteOnTermination?: boolean;
        /**
         * Indicates whether the volume should be encrypted.
         */
        encrypted?: boolean;
        /**
         * The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
         */
        iops?: number;
        /**
         * The identifier of the AWS Key Management Service (AWS KMS) customer managed CMK to use for Amazon EBS encryption. If KmsKeyId is specified, the encrypted state must be true. If the encrypted state is true but you do not specify KmsKeyId, your AWS managed CMK for EBS is used.
         */
        kmsKeyId?: string;
        /**
         * The ID of the snapshot.
         */
        snapshotId?: string;
        /**
         * The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size.
         */
        volumeSize?: number;
        /**
         * The volume type.
         */
        volumeType?: string;
    }

    export interface InstanceElasticGpuSpecification {
        /**
         * The type of Elastic Graphics accelerator.
         */
        type: string;
    }

    export interface InstanceElasticInferenceAccelerator {
        /**
         * The number of elastic inference accelerators to attach to the instance.
         */
        count?: number;
        /**
         * The type of elastic inference accelerator.
         */
        type: string;
    }

    export interface InstanceIpv6Address {
        /**
         * The IPv6 address.
         */
        ipv6Address: string;
    }

    export interface InstanceLaunchTemplateSpecification {
        /**
         * The ID of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.
         */
        launchTemplateId?: string;
        /**
         * The name of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.
         */
        launchTemplateName?: string;
        /**
         * The version number of the launch template.
         */
        version?: string;
    }

    export interface InstanceLicenseSpecification {
        /**
         * The Amazon Resource Name (ARN) of the license configuration.
         */
        licenseConfigurationArn: string;
    }

    export interface InstanceNetworkInterface {
        /**
         * Not currently supported by AWS CloudFormation.
         */
        associateCarrierIpAddress?: boolean;
        /**
         * Indicates whether to assign a public IPv4 address to an instance you launch in a VPC.
         */
        associatePublicIpAddress?: boolean;
        /**
         * If set to true, the interface is deleted when the instance is terminated.
         */
        deleteOnTermination?: boolean;
        /**
         * The description of the network interface.
         */
        description?: string;
        /**
         * The position of the network interface in the attachment order. A primary network interface has a device index of 0.
         */
        deviceIndex: string;
        /**
         * The IDs of the security groups for the network interface.
         */
        groupSet?: string[];
        /**
         * A number of IPv6 addresses to assign to the network interface.
         */
        ipv6AddressCount?: number;
        /**
         * The IPv6 addresses associated with the network interface.
         */
        ipv6Addresses?: outputs.ec2.InstanceIpv6Address[];
        /**
         * The ID of the network interface.
         */
        networkInterfaceId?: string;
        /**
         * The private IPv4 address of the network interface.
         */
        privateIpAddress?: string;
        /**
         * One or more private IPv4 addresses to assign to the network interface.
         */
        privateIpAddresses?: outputs.ec2.InstancePrivateIpAddressSpecification[];
        /**
         * The number of secondary private IPv4 addresses.
         */
        secondaryPrivateIpAddressCount?: number;
        /**
         * The ID of the subnet.
         */
        subnetId?: string;
    }

    export interface InstancePrivateDnsNameOptions {
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS A records. For more information, see Amazon EC2 instance hostname types in the Amazon Elastic Compute Cloud User Guide.
         */
        enableResourceNameDnsARecord?: boolean;
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. For more information, see Amazon EC2 instance hostname types in the Amazon Elastic Compute Cloud User Guide.
         */
        enableResourceNameDnsAaaaRecord?: boolean;
        /**
         * The type of hostnames to assign to instances in the subnet at launch. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. For more information, see Amazon EC2 instance hostname types in the Amazon Elastic Compute Cloud User Guide.
         */
        hostnameType?: enums.ec2.InstancePrivateDnsNameOptionsHostnameType;
    }

    export interface InstancePrivateIpAddressSpecification {
        /**
         * Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
         */
        primary: boolean;
        /**
         * The private IPv4 addresses.
         */
        privateIpAddress: string;
    }

    export interface InstanceSsmAssociation {
        /**
         * The input parameter values to use with the associated SSM document.
         */
        associationParameters?: outputs.ec2.InstanceAssociationParameter[];
        /**
         * The name of an SSM document to associate with the instance.
         */
        documentName: string;
    }

    /**
     * The current state of the instance
     */
    export interface InstanceState {
        /**
         * The state of the instance as a 16-bit unsigned integer.
         */
        code?: string;
        /**
         * The current state of the instance.
         */
        name?: string;
    }

    export interface InstanceVolume {
        /**
         * The device name (for example, /dev/sdh or xvdh).
         */
        device: string;
        /**
         * The ID of the EBS volume. The volume and instance must be within the same Availability Zone.
         */
        volumeId: string;
    }

    /**
     * The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
     */
    export interface IpamOperatingRegion {
        /**
         * The name of the region.
         */
        regionName: string;
    }

    /**
     * An address space to be inserted into this pool. All allocations must be made from this address space.
     */
    export interface IpamPoolProvisionedCidr {
        /**
         * The CIDR provisioned to the IPAM pool. A CIDR is a representation of an IP address and its associated network mask (or netmask) and refers to a range of IP addresses. An IPv4 CIDR example is `10.24.34.0/23` . An IPv6 CIDR example is `2001:DB8::/32` .
         */
        cidr: string;
    }

    /**
     * The resource associated with this pool's space. Depending on the ResourceType, setting a SourceResource changes which space can be provisioned in this pool and which types of resources can receive allocations
     */
    export interface IpamPoolSourceResource {
        /**
         * The source resource ID.
         */
        resourceId: string;
        /**
         * The source resource owner.
         */
        resourceOwner: string;
        /**
         * The source resource Region.
         */
        resourceRegion: string;
        /**
         * The source resource type.
         */
        resourceType: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface IpamPoolTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The regions IPAM Resource Discovery is enabled for. Allows for monitoring.
     */
    export interface IpamResourceDiscoveryIpamOperatingRegion {
        /**
         * The name of the region.
         */
        regionName: string;
    }

    /**
     * The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips) on an instance.
     */
    export interface LaunchTemplateAcceleratorCount {
        /**
         * The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set ``Max`` to ``0``.
         */
        max?: number;
        /**
         * The minimum number of accelerators. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    /**
     * The minimum and maximum amount of total accelerator memory, in MiB.
     */
    export interface LaunchTemplateAcceleratorTotalMemoryMiB {
        /**
         * The maximum amount of accelerator memory, in MiB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of accelerator memory, in MiB. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    /**
     * The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the *Amazon EC2 User Guide*.
     */
    export interface LaunchTemplateBaselineEbsBandwidthMbps {
        /**
         * The maximum baseline bandwidth, in Mbps. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum baseline bandwidth, in Mbps. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    /**
     * Specifies a block device mapping for a launch template. You must specify ``DeviceName`` plus exactly one of the following properties: ``Ebs``, ``NoDevice``, or ``VirtualName``.
     *   ``BlockDeviceMapping`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateBlockDeviceMapping {
        /**
         * The device name (for example, /dev/sdh or xvdh).
         */
        deviceName?: string;
        /**
         * Parameters used to automatically set up EBS volumes when the instance is launched.
         */
        ebs?: outputs.ec2.LaunchTemplateEbs;
        /**
         * To omit the device from the block device mapping, specify an empty string.
         */
        noDevice?: string;
        /**
         * The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
         */
        virtualName?: string;
    }

    /**
     * Specifies an instance's Capacity Reservation targeting option. You can specify only one option at a time.
     *   ``CapacityReservationSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateCapacityReservationSpecification {
        /**
         * Indicates the instance's Capacity Reservation preferences. Possible preferences include:
         *   +   ``open`` - The instance can run in any ``open`` Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
         *   +   ``none`` - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
         */
        capacityReservationPreference?: string;
        /**
         * Information about the target Capacity Reservation or Capacity Reservation group.
         */
        capacityReservationTarget?: outputs.ec2.LaunchTemplateCapacityReservationTarget;
    }

    /**
     * Specifies a target Capacity Reservation.
     *   ``CapacityReservationTarget`` is a property of the [Amazon EC2 LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html) property type.
     */
    export interface LaunchTemplateCapacityReservationTarget {
        /**
         * The ID of the Capacity Reservation in which to run the instance.
         */
        capacityReservationId?: string;
        /**
         * The ARN of the Capacity Reservation resource group in which to run the instance.
         */
        capacityReservationResourceGroupArn?: string;
    }

    /**
     * A security group connection tracking specification that enables you to set the idle timeout for connection tracking on an Elastic network interface. For more information, see [Connection tracking timeouts](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-connection-tracking.html#connection-tracking-timeouts) in the *Amazon Elastic Compute Cloud User Guide*.
     */
    export interface LaunchTemplateConnectionTrackingSpecification {
        /**
         * Timeout (in seconds) for idle TCP connections in an established state. Min: 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds. Recommended: Less than 432000 seconds.
         */
        tcpEstablishedTimeout?: number;
        /**
         * Timeout (in seconds) for idle UDP flows classified as streams which have seen more than one request-response transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180 seconds.
         */
        udpStreamTimeout?: number;
        /**
         * Timeout (in seconds) for idle UDP flows that have seen traffic only in a single direction or a single request-response transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.
         */
        udpTimeout?: number;
    }

    /**
     * Specifies the CPU options for an instance. For more information, see [Optimize CPU options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) in the *User Guide*.
     *   ``CpuOptions`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateCpuOptions {
        /**
         * Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only. For more information, see [AMD SEV-SNP](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html).
         */
        amdSevSnp?: enums.ec2.LaunchTemplateCpuOptionsAmdSevSnp;
        /**
         * The number of CPU cores for the instance.
         */
        coreCount?: number;
        /**
         * The number of threads per CPU core. To disable multithreading for the instance, specify a value of ``1``. Otherwise, specify the default value of ``2``.
         */
        threadsPerCore?: number;
    }

    /**
     * Specifies the credit option for CPU usage of a T2, T3, or T3a instance.
     *   ``CreditSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateCreditSpecification {
        /**
         * The credit option for CPU usage of a T instance.
         *  Valid values: ``standard`` | ``unlimited``
         */
        cpuCredits?: string;
    }

    /**
     * The information to include in the launch template.
     *   You must specify at least one parameter for the launch template data.
     */
    export interface LaunchTemplateData {
        /**
         * The block device mapping.
         */
        blockDeviceMappings?: outputs.ec2.LaunchTemplateBlockDeviceMapping[];
        /**
         * The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to ``open``, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
         */
        capacityReservationSpecification?: outputs.ec2.LaunchTemplateCapacityReservationSpecification;
        /**
         * The CPU options for the instance. For more information, see [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) in the *Amazon Elastic Compute Cloud User Guide*.
         */
        cpuOptions?: outputs.ec2.LaunchTemplateCpuOptions;
        /**
         * The credit option for CPU usage of the instance. Valid only for T instances.
         */
        creditSpecification?: outputs.ec2.LaunchTemplateCreditSpecification;
        /**
         * Indicates whether to enable the instance for stop protection. For more information, see [Stop protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection) in the *Amazon Elastic Compute Cloud User Guide*.
         */
        disableApiStop?: boolean;
        /**
         * If you set this parameter to ``true``, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use [ModifyInstanceAttribute](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html). Alternatively, if you set ``InstanceInitiatedShutdownBehavior`` to ``terminate``, you can terminate the instance by running the shutdown command from the instance.
         */
        disableApiTermination?: boolean;
        /**
         * Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
         */
        ebsOptimized?: boolean;
        /**
         * Deprecated.
         *   Amazon Elastic Graphics reached end of life on January 8, 2024. For workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad, G4dn, or G5 instances.
         */
        elasticGpuSpecifications?: outputs.ec2.LaunchTemplateElasticGpuSpecification[];
        /**
         * An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.
         *  You cannot specify accelerators from different generations in the same request.
         *   Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
         */
        elasticInferenceAccelerators?: outputs.ec2.LaunchTemplateElasticInferenceAccelerator[];
        /**
         * Indicates whether the instance is enabled for AWS Nitro Enclaves. For more information, see [What is Nitro Enclaves?](https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html) in the *Nitro Enclaves User Guide*.
         *  You can't enable AWS Nitro Enclaves and hibernation on the same instance.
         */
        enclaveOptions?: outputs.ec2.LaunchTemplateEnclaveOptions;
        /**
         * Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the [hibernation prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html). For more information, see [Hibernate your instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the *Amazon Elastic Compute Cloud User Guide*.
         */
        hibernationOptions?: outputs.ec2.LaunchTemplateHibernationOptions;
        /**
         * The name or Amazon Resource Name (ARN) of an IAM instance profile.
         */
        iamInstanceProfile?: outputs.ec2.LaunchTemplateIamInstanceProfile;
        /**
         * The ID of the AMI. Alternatively, you can specify a Systems Manager parameter, which will resolve to an AMI ID on launch.
         *  Valid formats:
         *   +   ``ami-17characters00000`` 
         *   +   ``resolve:ssm:parameter-name`` 
         *   +   ``resolve:ssm:parameter-name:version-number`` 
         *   +   ``resolve:ssm:parameter-name:label`` 
         *   
         *  For more information, see [Use a Systems Manager parameter to find an AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html#using-systems-manager-parameter-to-find-AMI) in the *Amazon Elastic Compute Cloud User Guide*.
         */
        imageId?: string;
        /**
         * Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
         *  Default: ``stop``
         */
        instanceInitiatedShutdownBehavior?: string;
        /**
         * The market (purchasing) option for the instances.
         */
        instanceMarketOptions?: outputs.ec2.LaunchTemplateInstanceMarketOptions;
        /**
         * The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with these attributes.
         *  You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to its default.
         *  When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values.
         *  To limit the list of instance types from which Amazon EC2 can identify matching instance types, you can use one of the following parameters, but not both in the same request:
         *   +   ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.
         *   +   ``ExcludedInstanceTypes`` - The instance types to exclude from the list, even if they match your specified attributes.
         *   
         *   If you specify ``InstanceRequirements``, you can't specify ``InstanceType``.
         *  Attribute-based instance type selection is only supported when using Auto Scaling groups, EC2 Fleet, and Spot Fleet to launch instances. If you plan to use the launch template in the [launch instance wizard](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance-wizard.html), or with the [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API or [AWS::EC2::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) AWS CloudFormation resource, you can't specify ``InstanceRequirements``.
         *   For more information, see [Attribute-based instance type selection for EC2 Fleet](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html), [Attribute-based instance type selection for Spot Fleet](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html), and [Spot placement score](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html) in the *Amazon EC2 User Guide*.
         */
        instanceRequirements?: outputs.ec2.LaunchTemplateInstanceRequirements;
        /**
         * The instance type. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon Elastic Compute Cloud User Guide*.
         *  If you specify ``InstanceType``, you can't specify ``InstanceRequirements``.
         */
        instanceType?: string;
        /**
         * The ID of the kernel.
         *  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User Provided Kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the *Amazon EC2 User Guide*.
         */
        kernelId?: string;
        /**
         * The name of the key pair. You can create a key pair using [CreateKeyPair](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html) or [ImportKeyPair](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html).
         *   If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
         */
        keyName?: string;
        /**
         * The license configurations.
         */
        licenseSpecifications?: outputs.ec2.LaunchTemplateLicenseSpecification[];
        /**
         * The maintenance options of your instance.
         */
        maintenanceOptions?: outputs.ec2.LaunchTemplateMaintenanceOptions;
        /**
         * The metadata options for the instance. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the *Amazon Elastic Compute Cloud User Guide*.
         */
        metadataOptions?: outputs.ec2.LaunchTemplateMetadataOptions;
        /**
         * The monitoring for the instance.
         */
        monitoring?: outputs.ec2.LaunchTemplateMonitoring;
        /**
         * The network interfaces for the instance.
         */
        networkInterfaces?: outputs.ec2.LaunchTemplateNetworkInterface[];
        /**
         * The placement for the instance.
         */
        placement?: outputs.ec2.LaunchTemplatePlacement;
        /**
         * The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
         */
        privateDnsNameOptions?: outputs.ec2.LaunchTemplatePrivateDnsNameOptions;
        /**
         * The ID of the RAM disk.
         *   We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User provided kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the *Amazon Elastic Compute Cloud User Guide*.
         */
        ramDiskId?: string;
        /**
         * The IDs of the security groups. You can specify the IDs of existing security groups and references to resources created by the stack template.
         *  If you specify a network interface, you must specify any security groups as part of the network interface instead.
         */
        securityGroupIds?: string[];
        /**
         * The names of the security groups. For a nondefault VPC, you must use security group IDs instead.
         *  If you specify a network interface, you must specify any security groups as part of the network interface instead of using this parameter.
         */
        securityGroups?: string[];
        /**
         * The tags to apply to the resources that are created during instance launch.
         *  To tag a resource after it has been created, see [CreateTags](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
         *  To tag the launch template itself, use [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#cfn-ec2-launchtemplate-tagspecifications).
         */
        tagSpecifications?: outputs.ec2.TagSpecification[];
        /**
         * The user data to make available to the instance. You must provide base64-encoded text. User data is limited to 16 KB. For more information, see [Run commands on your Linux instance at launch](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html) (Linux) or [Work with instance user data](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instancedata-add-user-data.html) (Windows) in the *Amazon Elastic Compute Cloud User Guide*.
         *  If you are creating the launch template for use with BATCH, the user data must be provided in the [MIME multi-part archive format](https://docs.aws.amazon.com/https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive). For more information, see [Amazon EC2 user data in launch templates](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the *User Guide*.
         */
        userData?: string;
    }

    /**
     * Parameters for a block device for an EBS volume in an Amazon EC2 launch template.
     *   ``Ebs`` is a property of [AWS::EC2::LaunchTemplate BlockDeviceMapping](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping.html).
     */
    export interface LaunchTemplateEbs {
        /**
         * Indicates whether the EBS volume is deleted on instance termination.
         */
        deleteOnTermination?: boolean;
        /**
         * Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
         */
        encrypted?: boolean;
        /**
         * The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
         *  The following are the supported values for each volume type:
         *   +   ``gp3``: 3,000 - 16,000 IOPS
         *   +   ``io1``: 100 - 64,000 IOPS
         *   +   ``io2``: 100 - 256,000 IOPS
         *   
         *  For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). On other instances, you can achieve performance up to 32,000 IOPS.
         *  This parameter is supported for ``io1``, ``io2``, and ``gp3`` volumes only.
         */
        iops?: number;
        /**
         * The ARN of the symmetric KMSlong (KMS) CMK used for encryption.
         */
        kmsKeyId?: string;
        /**
         * The ID of the snapshot.
         */
        snapshotId?: string;
        /**
         * The throughput to provision for a ``gp3`` volume, with a maximum of 1,000 MiB/s.
         *  Valid Range: Minimum value of 125. Maximum value of 1000.
         */
        throughput?: number;
        /**
         * The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type:
         *   +   ``gp2`` and ``gp3``: 1 - 16,384 GiB
         *   +   ``io1``: 4 - 16,384 GiB
         *   +   ``io2``: 4 - 65,536 GiB
         *   +   ``st1`` and ``sc1``: 125 - 16,384 GiB
         *   +   ``standard``: 1 - 1024 GiB
         */
        volumeSize?: number;
        /**
         * The volume type. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html) in the *Amazon EBS User Guide*.
         */
        volumeType?: string;
    }

    /**
     * Amazon Elastic Graphics reached end of life on January 8, 2024. For workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad, G4dn, or G5 instances.
     *   Specifies a specification for an Elastic GPU for an Amazon EC2 launch template.
     *   ``ElasticGpuSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateElasticGpuSpecification {
        /**
         * The type of Elastic Graphics accelerator. For more information about the values to specify for ``Type``, see [Elastic Graphics Basics](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html#elastic-graphics-basics), specifically the Elastic Graphics accelerator column, in the *Amazon Elastic Compute Cloud User Guide for Windows Instances*.
         */
        type?: string;
    }

    /**
     * Specifies an elastic inference accelerator.
     *   ``LaunchTemplateElasticInferenceAccelerator`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateElasticInferenceAccelerator {
        /**
         * The number of elastic inference accelerators to attach to the instance. 
         *  Default: 1
         */
        count?: number;
        /**
         * The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
         */
        type?: string;
    }

    /**
     * ENA Express uses AWS Scalable Reliable Datagram (SRD) technology to increase the maximum bandwidth used per stream and minimize tail latency of network traffic between EC2 instances. With ENA Express, you can communicate between two EC2 instances in the same subnet within the same account, or in different accounts. Both sending and receiving instances must have ENA Express enabled.
     *  To improve the reliability of network packet delivery, ENA Express reorders network packets on the receiving end by default. However, some UDP-based applications are designed to handle network packets that are out of order to reduce the overhead for packet delivery at the network layer. When ENA Express is enabled, you can specify whether UDP network traffic uses it.
     */
    export interface LaunchTemplateEnaSrdSpecification {
        /**
         * Indicates whether ENA Express is enabled for the network interface.
         */
        enaSrdEnabled?: boolean;
        /**
         * Configures ENA Express for UDP network traffic.
         */
        enaSrdUdpSpecification?: outputs.ec2.LaunchTemplateEnaSrdUdpSpecification;
    }

    /**
     * ENA Express is compatible with both TCP and UDP transport protocols. When it's enabled, TCP traffic automatically uses it. However, some UDP-based applications are designed to handle network packets that are out of order, without a need for retransmission, such as live video broadcasting or other near-real-time applications. For UDP traffic, you can specify whether to use ENA Express, based on your application environment needs.
     */
    export interface LaunchTemplateEnaSrdUdpSpecification {
        /**
         * Indicates whether UDP traffic to and from the instance uses ENA Express. To specify this setting, you must first enable ENA Express.
         */
        enaSrdUdpEnabled?: boolean;
    }

    /**
     * Indicates whether the instance is enabled for AWS Nitro Enclaves.
     */
    export interface LaunchTemplateEnclaveOptions {
        /**
         * If this parameter is set to ``true``, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
         */
        enabled?: boolean;
    }

    /**
     * Specifies whether your instance is configured for hibernation. This parameter is valid only if the instance meets the [hibernation prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites). For more information, see [Hibernate Your Instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the *Amazon EC2 User Guide*.
     *   ``HibernationOptions`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateHibernationOptions {
        /**
         * If you set this parameter to ``true``, the instance is enabled for hibernation.
         *  Default: ``false``
         */
        configured?: boolean;
    }

    /**
     * Specifies an IAM instance profile, which is a container for an IAM role for your instance. You can use an IAM role to distribute your AWS credentials to your instances.
     *  If you are creating the launch template for use with an ASlong group, you can specify either the name or the ARN of the instance profile, but not both.
     *   ``IamInstanceProfile`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateIamInstanceProfile {
        /**
         * The Amazon Resource Name (ARN) of the instance profile.
         */
        arn?: string;
        /**
         * The name of the instance profile.
         */
        name?: string;
    }

    /**
     * Specifies the market (purchasing) option for an instance.
     *   ``InstanceMarketOptions`` is a property of the [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateInstanceMarketOptions {
        /**
         * The market type.
         */
        marketType?: string;
        /**
         * The options for Spot Instances.
         */
        spotOptions?: outputs.ec2.LaunchTemplateSpotOptions;
    }

    /**
     * The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with these attributes.
     *  You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to its default.
     *  When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values.
     *  To limit the list of instance types from which Amazon EC2 can identify matching instance types, you can use one of the following parameters, but not both in the same request:
     *   +   ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.
     *   +   ``ExcludedInstanceTypes`` - The instance types to exclude from the list, even if they match your specified attributes.
     *   
     *   If you specify ``InstanceRequirements``, you can't specify ``InstanceType``.
     *  Attribute-based instance type selection is only supported when using Auto Scaling groups, EC2 Fleet, and Spot Fleet to launch instances. If you plan to use the launch template in the [launch instance wizard](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-instance-wizard.html), or with the [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API or [AWS::EC2::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) AWS CloudFormation resource, you can't specify ``InstanceRequirements``.
     *   For more information, see [Attribute-based instance type selection for EC2 Fleet](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html), [Attribute-based instance type selection for Spot Fleet](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-attribute-based-instance-type-selection.html), and [Spot placement score](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html) in the *Amazon EC2 User Guide*.
     */
    export interface LaunchTemplateInstanceRequirements {
        /**
         * The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips) on an instance.
         *  To exclude accelerator-enabled instance types, set ``Max`` to ``0``.
         *  Default: No minimum or maximum limits
         */
        acceleratorCount?: outputs.ec2.LaunchTemplateAcceleratorCount;
        /**
         * Indicates whether instance types must have accelerators by specific manufacturers.
         *   +  For instance types with AWS devices, specify ``amazon-web-services``.
         *   +  For instance types with AMD devices, specify ``amd``.
         *   +  For instance types with Habana devices, specify ``habana``.
         *   +  For instance types with NVIDIA devices, specify ``nvidia``.
         *   +  For instance types with Xilinx devices, specify ``xilinx``.
         *   
         *  Default: Any manufacturer
         */
        acceleratorManufacturers?: string[];
        /**
         * The accelerators that must be on the instance type.
         *   +  For instance types with NVIDIA A10G GPUs, specify ``a10g``.
         *   +  For instance types with NVIDIA A100 GPUs, specify ``a100``.
         *   +  For instance types with NVIDIA H100 GPUs, specify ``h100``.
         *   +  For instance types with AWS Inferentia chips, specify ``inferentia``.
         *   +  For instance types with NVIDIA GRID K520 GPUs, specify ``k520``.
         *   +  For instance types with NVIDIA K80 GPUs, specify ``k80``.
         *   +  For instance types with NVIDIA M60 GPUs, specify ``m60``.
         *   +  For instance types with AMD Radeon Pro V520 GPUs, specify ``radeon-pro-v520``.
         *   +  For instance types with NVIDIA T4 GPUs, specify ``t4``.
         *   +  For instance types with NVIDIA T4G GPUs, specify ``t4g``.
         *   +  For instance types with Xilinx VU9P FPGAs, specify ``vu9p``.
         *   +  For instance types with NVIDIA V100 GPUs, specify ``v100``.
         *   
         *  Default: Any accelerator
         */
        acceleratorNames?: string[];
        /**
         * The minimum and maximum amount of total accelerator memory, in MiB.
         *  Default: No minimum or maximum limits
         */
        acceleratorTotalMemoryMiB?: outputs.ec2.LaunchTemplateAcceleratorTotalMemoryMiB;
        /**
         * The accelerator types that must be on the instance type.
         *   +  For instance types with GPU accelerators, specify ``gpu``.
         *   +  For instance types with FPGA accelerators, specify ``fpga``.
         *   +  For instance types with inference accelerators, specify ``inference``.
         *   
         *  Default: Any accelerator type
         */
        acceleratorTypes?: string[];
        /**
         * The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes.
         *  You can use strings with one or more wild cards, represented by an asterisk (``*``), to allow an instance type, size, or generation. The following are examples: ``m5.8xlarge``, ``c5*.*``, ``m5a.*``, ``r*``, ``*3*``.
         *  For example, if you specify ``c5*``,Amazon EC2 will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify ``m5a.*``, Amazon EC2 will allow all the M5a instance types, but not the M5n instance types.
         *   If you specify ``AllowedInstanceTypes``, you can't specify ``ExcludedInstanceTypes``.
         *   Default: All instance types
         */
        allowedInstanceTypes?: string[];
        /**
         * Indicates whether bare metal instance types must be included, excluded, or required.
         *   +  To include bare metal instance types, specify ``included``.
         *   +  To require only bare metal instance types, specify ``required``.
         *   +  To exclude bare metal instance types, specify ``excluded``.
         *   
         *  Default: ``excluded``
         */
        bareMetal?: string;
        /**
         * The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the *Amazon EC2 User Guide*.
         *  Default: No minimum or maximum limits
         */
        baselineEbsBandwidthMbps?: outputs.ec2.LaunchTemplateBaselineEbsBandwidthMbps;
        /**
         * Indicates whether burstable performance T instance types are included, excluded, or required. For more information, see [Burstable performance instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html).
         *   +  To include burstable performance instance types, specify ``included``.
         *   +  To require only burstable performance instance types, specify ``required``.
         *   +  To exclude burstable performance instance types, specify ``excluded``.
         *   
         *  Default: ``excluded``
         */
        burstablePerformance?: string;
        /**
         * The CPU manufacturers to include.
         *   +  For instance types with Intel CPUs, specify ``intel``.
         *   +  For instance types with AMD CPUs, specify ``amd``.
         *   +  For instance types with AWS CPUs, specify ``amazon-web-services``.
         *   
         *   Don't confuse the CPU manufacturer with the CPU architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template.
         *   Default: Any manufacturer
         */
        cpuManufacturers?: string[];
        /**
         * The instance types to exclude.
         *  You can use strings with one or more wild cards, represented by an asterisk (``*``), to exclude an instance type, size, or generation. The following are examples: ``m5.8xlarge``, ``c5*.*``, ``m5a.*``, ``r*``, ``*3*``.
         *  For example, if you specify ``c5*``,Amazon EC2 will exclude the entire C5 instance family, which includes all C5a and C5n instance types. If you specify ``m5a.*``, Amazon EC2 will exclude all the M5a instance types, but not the M5n instance types.
         *   If you specify ``ExcludedInstanceTypes``, you can't specify ``AllowedInstanceTypes``.
         *   Default: No excluded instance types
         */
        excludedInstanceTypes?: string[];
        /**
         * Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Current generation instance types are typically the latest two to three generations in each instance family. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide*.
         *  For current generation instance types, specify ``current``.
         *  For previous generation instance types, specify ``previous``.
         *  Default: Current and previous generation instance types
         */
        instanceGenerations?: string[];
        /**
         * Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the *Amazon EC2 User Guide*.
         *   +  To include instance types with instance store volumes, specify ``included``.
         *   +  To require only instance types with instance store volumes, specify ``required``.
         *   +  To exclude instance types with instance store volumes, specify ``excluded``.
         *   
         *  Default: ``included``
         */
        localStorage?: string;
        /**
         * The type of local storage that is required.
         *   +  For instance types with hard disk drive (HDD) storage, specify ``hdd``.
         *   +  For instance types with solid state drive (SSD) storage, specify ``ssd``.
         *   
         *  Default: ``hdd`` and ``ssd``
         */
        localStorageTypes?: string[];
        /**
         * [Price protection] The price protection threshold for Spot Instances, as a percentage of an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
         *  The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
         *  If you set ``DesiredCapacityType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is based on the per vCPU or per memory price instead of the per instance price.
         *   Only one of ``SpotMaxPricePercentageOverLowestPrice`` or ``MaxSpotPriceAsPercentageOfOptimalOnDemandPrice`` can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as ``999999``.
         */
        maxSpotPriceAsPercentageOfOptimalOnDemandPrice?: number;
        /**
         * The minimum and maximum amount of memory per vCPU, in GiB.
         *  Default: No minimum or maximum limits
         */
        memoryGiBPerVCpu?: outputs.ec2.LaunchTemplateMemoryGiBPerVCpu;
        /**
         * The minimum and maximum amount of memory, in MiB.
         */
        memoryMiB?: outputs.ec2.LaunchTemplateMemoryMiB;
        /**
         * The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).
         *  Default: No minimum or maximum limits
         */
        networkBandwidthGbps?: outputs.ec2.LaunchTemplateNetworkBandwidthGbps;
        /**
         * The minimum and maximum number of network interfaces.
         *  Default: No minimum or maximum limits
         */
        networkInterfaceCount?: outputs.ec2.LaunchTemplateNetworkInterfaceCount;
        /**
         * [Price protection] The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
         *  The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
         *  To turn off price protection, specify a high value, such as ``999999``.
         *  This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) and [GetInstanceTypesFromInstanceRequirements](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html).
         *   If you set ``TargetCapacityUnitType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price.
         *   Default: ``20``
         */
        onDemandMaxPricePercentageOverLowestPrice?: number;
        /**
         * Indicates whether instance types must support hibernation for On-Demand Instances.
         *  This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html).
         *  Default: ``false``
         */
        requireHibernateSupport?: boolean;
        /**
         * [Price protection] The price protection threshold for Spot Instances, as a percentage higher than an identified Spot price. The identified Spot price is the Spot price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified Spot price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose Spot price exceeds your specified threshold.
         *  The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
         *  If you set ``TargetCapacityUnitType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price.
         *  This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) and [GetInstanceTypesFromInstanceRequirements](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html).
         *   Only one of ``SpotMaxPricePercentageOverLowestPrice`` or ``MaxSpotPriceAsPercentageOfOptimalOnDemandPrice`` can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as ``999999``.
         *   Default: ``100``
         */
        spotMaxPricePercentageOverLowestPrice?: number;
        /**
         * The minimum and maximum amount of total local storage, in GB.
         *  Default: No minimum or maximum limits
         */
        totalLocalStorageGb?: outputs.ec2.LaunchTemplateTotalLocalStorageGb;
        /**
         * The minimum and maximum number of vCPUs.
         */
        vCpuCount?: outputs.ec2.LaunchTemplateVCpuCount;
    }

    /**
     * Specifies an IPv4 prefix for a network interface.
     *   ``Ipv4PrefixSpecification`` is a property of [AWS::EC2::LaunchTemplate NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html).
     */
    export interface LaunchTemplateIpv4PrefixSpecification {
        /**
         * The IPv4 prefix. For information, see [Assigning prefixes to Amazon EC2 network interfaces](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html) in the *Amazon Elastic Compute Cloud User Guide*.
         */
        ipv4Prefix?: string;
    }

    /**
     * Specifies an IPv6 address in an Amazon EC2 launch template.
     *   ``Ipv6Add`` is a property of [AWS::EC2::LaunchTemplate NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html).
     */
    export interface LaunchTemplateIpv6Add {
        /**
         * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
         */
        ipv6Address?: string;
    }

    /**
     * Specifies an IPv6 prefix for a network interface.
     *   ``Ipv6PrefixSpecification`` is a property of [AWS::EC2::LaunchTemplate NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html).
     */
    export interface LaunchTemplateIpv6PrefixSpecification {
        /**
         * The IPv6 prefix.
         */
        ipv6Prefix?: string;
    }

    /**
     * Specifies a license configuration for an instance.
     *   ``LicenseSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateLicenseSpecification {
        /**
         * The Amazon Resource Name (ARN) of the license configuration.
         */
        licenseConfigurationArn?: string;
    }

    /**
     * The maintenance options of your instance.
     */
    export interface LaunchTemplateMaintenanceOptions {
        /**
         * Disables the automatic recovery behavior of your instance or sets it to default.
         */
        autoRecovery?: string;
    }

    /**
     * The minimum and maximum amount of memory per vCPU, in GiB.
     */
    export interface LaunchTemplateMemoryGiBPerVCpu {
        /**
         * The maximum amount of memory per vCPU, in GiB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of memory per vCPU, in GiB. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    /**
     * The minimum and maximum amount of memory, in MiB.
     */
    export interface LaunchTemplateMemoryMiB {
        /**
         * The maximum amount of memory, in MiB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of memory, in MiB. To specify no minimum limit, specify ``0``.
         */
        min?: number;
    }

    /**
     * The metadata options for the instance. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the *Amazon EC2 User Guide*.
     *   ``MetadataOptions`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateMetadataOptions {
        /**
         * Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is ``enabled``.
         *   If you specify a value of ``disabled``, you will not be able to access your instance metadata.
         */
        httpEndpoint?: string;
        /**
         * Enables or disables the IPv6 endpoint for the instance metadata service.
         *  Default: ``disabled``
         */
        httpProtocolIpv6?: string;
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.
         *  Default: ``1`` 
         *  Possible values: Integers from 1 to 64
         */
        httpPutResponseHopLimit?: number;
        /**
         * Indicates whether IMDSv2 is required.
         *   +   ``optional`` - IMDSv2 is optional. You can choose whether to send a session token in your instance metadata retrieval requests. If you retrieve IAM role credentials without a session token, you receive the IMDSv1 role credentials. If you retrieve IAM role credentials using a valid session token, you receive the IMDSv2 role credentials.
         *   +   ``required`` - IMDSv2 is required. You must send a session token in your instance metadata retrieval requests. With this option, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.
         *   
         *  Default: If the value of ``ImdsSupport`` for the Amazon Machine Image (AMI) for your instance is ``v2.0``, the default is ``required``.
         */
        httpTokens?: string;
        /**
         * Set to ``enabled`` to allow access to instance tags from the instance metadata. Set to ``disabled`` to turn off access to instance tags from the instance metadata. For more information, see [Work with instance tags using the instance metadata](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS).
         *  Default: ``disabled``
         */
        instanceMetadataTags?: string;
    }

    /**
     * Specifies whether detailed monitoring is enabled for an instance. For more information about detailed monitoring, see [Enable or turn off detailed monitoring for your instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch-new.html) in the *User Guide*.
     *   ``Monitoring`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateMonitoring {
        /**
         * Specify ``true`` to enable detailed monitoring. Otherwise, basic monitoring is enabled.
         */
        enabled?: boolean;
    }

    /**
     * The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).
     *   Setting the minimum bandwidth does not guarantee that your instance will achieve the minimum bandwidth. Amazon EC2 will identify instance types that support the specified minimum bandwidth, but the actual bandwidth of your instance might go below the specified minimum at times. For more information, see [Available instance bandwidth](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html#available-instance-bandwidth) in the *Amazon EC2 User Guide*.
     */
    export interface LaunchTemplateNetworkBandwidthGbps {
        /**
         * The maximum amount of network bandwidth, in Gbps. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of network bandwidth, in Gbps. If this parameter is not specified, there is no minimum limit.
         */
        min?: number;
    }

    /**
     * Specifies the parameters for a network interface.
     *   ``NetworkInterface`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplateNetworkInterface {
        /**
         * Associates a Carrier IP address with eth0 for a new network interface.
         *  Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see [Carrier IP addresses](https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip) in the *Developer Guide*.
         */
        associateCarrierIpAddress?: boolean;
        /**
         * Associates a public IPv4 address with eth0 for a new network interface.
         *   AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [Amazon VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
         */
        associatePublicIpAddress?: boolean;
        /**
         * A connection tracking specification for the network interface.
         */
        connectionTrackingSpecification?: outputs.ec2.LaunchTemplateConnectionTrackingSpecification;
        /**
         * Indicates whether the network interface is deleted when the instance is terminated.
         */
        deleteOnTermination?: boolean;
        /**
         * A description for the network interface.
         */
        description?: string;
        /**
         * The device index for the network interface attachment. Each network interface requires a device index. If you create a launch template that includes secondary network interfaces but not a primary network interface, then you must add a primary network interface as a launch parameter when you launch an instance from the template.
         */
        deviceIndex?: number;
        /**
         * The ENA Express configuration for the network interface.
         */
        enaSrdSpecification?: outputs.ec2.LaunchTemplateEnaSrdSpecification;
        /**
         * The IDs of one or more security groups.
         */
        groups?: string[];
        /**
         * The type of network interface. To create an Elastic Fabric Adapter (EFA), specify ``efa``. For more information, see [Elastic Fabric Adapter](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html) in the *Amazon Elastic Compute Cloud User Guide*.
         *  If you are not creating an EFA, specify ``interface`` or omit this parameter.
         *  Valid values: ``interface`` | ``efa``
         */
        interfaceType?: string;
        /**
         * The number of IPv4 prefixes to be automatically assigned to the network interface. You cannot use this option if you use the ``Ipv4Prefix`` option.
         */
        ipv4PrefixCount?: number;
        /**
         * One or more IPv4 prefixes to be assigned to the network interface. You cannot use this option if you use the ``Ipv4PrefixCount`` option.
         */
        ipv4Prefixes?: outputs.ec2.LaunchTemplateIpv4PrefixSpecification[];
        /**
         * The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
         */
        ipv6AddressCount?: number;
        /**
         * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
         */
        ipv6Addresses?: outputs.ec2.LaunchTemplateIpv6Add[];
        /**
         * The number of IPv6 prefixes to be automatically assigned to the network interface. You cannot use this option if you use the ``Ipv6Prefix`` option.
         */
        ipv6PrefixCount?: number;
        /**
         * One or more IPv6 prefixes to be assigned to the network interface. You cannot use this option if you use the ``Ipv6PrefixCount`` option.
         */
        ipv6Prefixes?: outputs.ec2.LaunchTemplateIpv6PrefixSpecification[];
        /**
         * The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
         */
        networkCardIndex?: number;
        /**
         * The ID of the network interface.
         */
        networkInterfaceId?: string;
        /**
         * The primary IPv6 address of the network interface. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. For more information about primary IPv6 addresses, see [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html).
         */
        primaryIpv6?: boolean;
        /**
         * The primary private IPv4 address of the network interface.
         */
        privateIpAddress?: string;
        /**
         * One or more private IPv4 addresses.
         */
        privateIpAddresses?: outputs.ec2.LaunchTemplatePrivateIpAdd[];
        /**
         * The number of secondary private IPv4 addresses to assign to a network interface.
         */
        secondaryPrivateIpAddressCount?: number;
        /**
         * The ID of the subnet for the network interface.
         */
        subnetId?: string;
    }

    /**
     * The minimum and maximum number of network interfaces.
     */
    export interface LaunchTemplateNetworkInterfaceCount {
        /**
         * The maximum number of network interfaces. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum number of network interfaces. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    /**
     * Specifies the placement of an instance.
     *   ``Placement`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface LaunchTemplatePlacement {
        /**
         * The affinity setting for an instance on a Dedicated Host.
         */
        affinity?: string;
        /**
         * The Availability Zone for the instance.
         */
        availabilityZone?: string;
        /**
         * The Group Id of a placement group. You must specify the Placement Group *Group Id* to launch an instance in a shared placement group.
         */
        groupId?: string;
        /**
         * The name of the placement group for the instance.
         */
        groupName?: string;
        /**
         * The ID of the Dedicated Host for the instance.
         */
        hostId?: string;
        /**
         * The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the *Tenancy* parameter or set it to ``host``.
         */
        hostResourceGroupArn?: string;
        /**
         * The number of the partition the instance should launch in. Valid only if the placement group strategy is set to ``partition``.
         */
        partitionNumber?: number;
        /**
         * Reserved for future use.
         */
        spreadDomain?: string;
        /**
         * The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware.
         */
        tenancy?: string;
    }

    /**
     * The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
     */
    export interface LaunchTemplatePrivateDnsNameOptions {
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
         */
        enableResourceNameDnsARecord?: boolean;
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
         */
        enableResourceNameDnsAaaaRecord?: boolean;
        /**
         * The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
         */
        hostnameType?: string;
    }

    /**
     * Specifies a secondary private IPv4 address for a network interface.
     *   ``PrivateIpAdd`` is a property of [AWS::EC2::LaunchTemplate NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html).
     */
    export interface LaunchTemplatePrivateIpAdd {
        /**
         * Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
         */
        primary?: boolean;
        /**
         * The private IPv4 address.
         */
        privateIpAddress?: string;
    }

    /**
     * Specifies options for Spot Instances.
     *   ``SpotOptions`` is a property of [AWS::EC2::LaunchTemplate InstanceMarketOptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata-instancemarketoptions.html).
     */
    export interface LaunchTemplateSpotOptions {
        /**
         * Deprecated.
         */
        blockDurationMinutes?: number;
        /**
         * The behavior when a Spot Instance is interrupted. The default is ``terminate``.
         */
        instanceInterruptionBehavior?: string;
        /**
         * The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.
         *   If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.
         */
        maxPrice?: string;
        /**
         * The Spot Instance request type.
         *  If you are using Spot Instances with an Auto Scaling group, use ``one-time`` requests, as the ASlong service handles requesting new Spot Instances whenever the group is below its desired capacity.
         */
        spotInstanceType?: string;
        /**
         * The end date of the request, in UTC format (*YYYY-MM-DD*T*HH:MM:SS*Z). Supported only for persistent requests.
         *   +  For a persistent request, the request remains active until the ``ValidUntil`` date and time is reached. Otherwise, the request remains active until you cancel it.
         *   +  For a one-time request, ``ValidUntil`` is not supported. The request remains active until all instances launch or you cancel the request.
         *   
         *  Default: 7 days from the current date
         */
        validUntil?: string;
    }

    /**
     * Specifies a tag. For more information, see [Add tags to a resource](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#cloudformation-add-tag-specifications).
     */
    export interface LaunchTemplateTag {
        /**
         * The tag key.
         */
        key: string;
        /**
         * The tag value.
         */
        value: string;
    }

    /**
     * Specifies the tags to apply to the launch template during creation.
     *   ``LaunchTemplateTagSpecification`` is a property of [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html).
     */
    export interface LaunchTemplateTagSpecification {
        /**
         * The type of resource. To tag the launch template, ``ResourceType`` must be ``launch-template``.
         */
        resourceType?: string;
        /**
         * The tags for the resource.
         */
        tags?: outputs.ec2.LaunchTemplateTag[];
    }

    /**
     * The minimum and maximum amount of total local storage, in GB.
     */
    export interface LaunchTemplateTotalLocalStorageGb {
        /**
         * The maximum amount of total local storage, in GB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of total local storage, in GB. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    /**
     * The minimum and maximum number of vCPUs.
     */
    export interface LaunchTemplateVCpuCount {
        /**
         * The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum number of vCPUs. To specify no minimum limit, specify ``0``.
         */
        min?: number;
    }

    export interface NetworkInsightsAccessScopeAccessScopePathRequest {
        /**
         * The destination.
         */
        destination?: outputs.ec2.NetworkInsightsAccessScopePathStatementRequest;
        /**
         * The source.
         */
        source?: outputs.ec2.NetworkInsightsAccessScopePathStatementRequest;
        /**
         * The through resources.
         */
        throughResources?: outputs.ec2.NetworkInsightsAccessScopeThroughResourcesStatementRequest[];
    }

    export interface NetworkInsightsAccessScopePacketHeaderStatementRequest {
        /**
         * The destination addresses.
         */
        destinationAddresses?: string[];
        /**
         * The destination ports.
         */
        destinationPorts?: string[];
        /**
         * The destination prefix lists.
         */
        destinationPrefixLists?: string[];
        /**
         * The protocols.
         */
        protocols?: enums.ec2.NetworkInsightsAccessScopeProtocol[];
        /**
         * The source addresses.
         */
        sourceAddresses?: string[];
        /**
         * The source ports.
         */
        sourcePorts?: string[];
        /**
         * The source prefix lists.
         */
        sourcePrefixLists?: string[];
    }

    export interface NetworkInsightsAccessScopePathStatementRequest {
        /**
         * The packet header statement.
         */
        packetHeaderStatement?: outputs.ec2.NetworkInsightsAccessScopePacketHeaderStatementRequest;
        /**
         * The resource statement.
         */
        resourceStatement?: outputs.ec2.NetworkInsightsAccessScopeResourceStatementRequest;
    }

    export interface NetworkInsightsAccessScopeResourceStatementRequest {
        /**
         * The resource types.
         */
        resourceTypes?: string[];
        /**
         * The resources.
         */
        resources?: string[];
    }

    export interface NetworkInsightsAccessScopeThroughResourcesStatementRequest {
        /**
         * The resource statement.
         */
        resourceStatement?: outputs.ec2.NetworkInsightsAccessScopeResourceStatementRequest;
    }

    export interface NetworkInsightsAnalysisAdditionalDetail {
        /**
         * The additional detail code.
         */
        additionalDetailType?: string;
        /**
         * The path component.
         */
        component?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The load balancers.
         */
        loadBalancers?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent[];
        /**
         * The name of the VPC endpoint service.
         */
        serviceName?: string;
    }

    export interface NetworkInsightsAnalysisAlternatePathHint {
        /**
         * The Amazon Resource Name (ARN) of the component.
         */
        componentArn?: string;
        /**
         * The ID of the component.
         */
        componentId?: string;
    }

    export interface NetworkInsightsAnalysisAnalysisAclRule {
        /**
         * The IPv4 address range, in CIDR notation.
         */
        cidr?: string;
        /**
         * Indicates whether the rule is an outbound rule.
         */
        egress?: boolean;
        /**
         * The range of ports.
         */
        portRange?: outputs.ec2.NetworkInsightsAnalysisPortRange;
        /**
         * The protocol.
         */
        protocol?: string;
        /**
         * Indicates whether to allow or deny traffic that matches the rule.
         */
        ruleAction?: string;
        /**
         * The rule number.
         */
        ruleNumber?: number;
    }

    export interface NetworkInsightsAnalysisAnalysisComponent {
        /**
         * The Amazon Resource Name (ARN) of the component.
         */
        arn?: string;
        /**
         * The ID of the component.
         */
        id?: string;
    }

    export interface NetworkInsightsAnalysisAnalysisLoadBalancerListener {
        /**
         * [Classic Load Balancers] The back-end port for the listener.
         */
        instancePort?: number;
        /**
         * The port on which the load balancer is listening.
         */
        loadBalancerPort?: number;
    }

    export interface NetworkInsightsAnalysisAnalysisLoadBalancerTarget {
        /**
         * The IP address.
         */
        address?: string;
        /**
         * The Availability Zone.
         */
        availabilityZone?: string;
        /**
         * Information about the instance.
         */
        instance?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The port on which the target is listening.
         */
        port?: number;
    }

    export interface NetworkInsightsAnalysisAnalysisPacketHeader {
        /**
         * The destination addresses.
         */
        destinationAddresses?: string[];
        /**
         * The destination port ranges.
         */
        destinationPortRanges?: outputs.ec2.NetworkInsightsAnalysisPortRange[];
        /**
         * The protocol.
         */
        protocol?: string;
        /**
         * The source addresses.
         */
        sourceAddresses?: string[];
        /**
         * The source port ranges.
         */
        sourcePortRanges?: outputs.ec2.NetworkInsightsAnalysisPortRange[];
    }

    export interface NetworkInsightsAnalysisAnalysisRouteTableRoute {
        /**
         * The destination IPv4 address, in CIDR notation.
         */
        destinationCidr?: string;
        /**
         * The prefix of the AWS service .
         */
        destinationPrefixListId?: string;
        /**
         * The ID of an egress-only internet gateway.
         */
        egressOnlyInternetGatewayId?: string;
        /**
         * The ID of the gateway, such as an internet gateway or virtual private gateway.
         */
        gatewayId?: string;
        /**
         * The ID of the instance, such as a NAT instance.
         */
        instanceId?: string;
        /**
         * The ID of a NAT gateway.
         */
        natGatewayId?: string;
        /**
         * The ID of a network interface.
         */
        networkInterfaceId?: string;
        /**
         * Describes how the route was created. The following are the possible values:
         *
         * - CreateRouteTable - The route was automatically created when the route table was created.
         * - CreateRoute - The route was manually added to the route table.
         * - EnableVgwRoutePropagation - The route was propagated by route propagation.
         */
        origin?: string;
        /**
         * The state. The following are the possible values:
         *
         * - active
         * - blackhole
         */
        state?: string;
        /**
         * The ID of a transit gateway.
         */
        transitGatewayId?: string;
        /**
         * The ID of a VPC peering connection.
         */
        vpcPeeringConnectionId?: string;
    }

    export interface NetworkInsightsAnalysisAnalysisSecurityGroupRule {
        /**
         * The IPv4 address range, in CIDR notation.
         */
        cidr?: string;
        /**
         * The direction. The following are the possible values:
         *
         * - egress
         * - ingress
         */
        direction?: string;
        /**
         * The port range.
         */
        portRange?: outputs.ec2.NetworkInsightsAnalysisPortRange;
        /**
         * The prefix list ID.
         */
        prefixListId?: string;
        /**
         * The protocol name.
         */
        protocol?: string;
        /**
         * The security group ID.
         */
        securityGroupId?: string;
    }

    export interface NetworkInsightsAnalysisExplanation {
        /**
         * The network ACL.
         */
        acl?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The network ACL rule.
         */
        aclRule?: outputs.ec2.NetworkInsightsAnalysisAnalysisAclRule;
        /**
         * The IPv4 address, in CIDR notation.
         */
        address?: string;
        /**
         * The IPv4 addresses, in CIDR notation.
         */
        addresses?: string[];
        /**
         * The resource to which the component is attached.
         */
        attachedTo?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The Availability Zones.
         */
        availabilityZones?: string[];
        /**
         * The CIDR ranges.
         */
        cidrs?: string[];
        /**
         * The listener for a Classic Load Balancer.
         */
        classicLoadBalancerListener?: outputs.ec2.NetworkInsightsAnalysisAnalysisLoadBalancerListener;
        /**
         * The component.
         */
        component?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The AWS account for the component.
         */
        componentAccount?: string;
        /**
         * The Region for the component.
         */
        componentRegion?: string;
        /**
         * The customer gateway.
         */
        customerGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The destination.
         */
        destination?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The destination VPC.
         */
        destinationVpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The direction. The following are the possible values:
         *
         * - egress
         * - ingress
         */
        direction?: string;
        /**
         * The load balancer listener.
         */
        elasticLoadBalancerListener?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The explanation code.
         */
        explanationCode?: string;
        /**
         * The route table.
         */
        ingressRouteTable?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The internet gateway.
         */
        internetGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The Amazon Resource Name (ARN) of the load balancer.
         */
        loadBalancerArn?: string;
        /**
         * The listener port of the load balancer.
         */
        loadBalancerListenerPort?: number;
        /**
         * The target.
         */
        loadBalancerTarget?: outputs.ec2.NetworkInsightsAnalysisAnalysisLoadBalancerTarget;
        /**
         * The target group.
         */
        loadBalancerTargetGroup?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The target groups.
         */
        loadBalancerTargetGroups?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent[];
        /**
         * The target port.
         */
        loadBalancerTargetPort?: number;
        /**
         * The missing component.
         */
        missingComponent?: string;
        /**
         * The NAT gateway.
         */
        natGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The network interface.
         */
        networkInterface?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The packet field.
         */
        packetField?: string;
        /**
         * The port.
         */
        port?: number;
        /**
         * The port ranges.
         */
        portRanges?: outputs.ec2.NetworkInsightsAnalysisPortRange[];
        /**
         * The prefix list.
         */
        prefixList?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The protocols.
         */
        protocols?: string[];
        /**
         * The route table.
         */
        routeTable?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The route table route.
         */
        routeTableRoute?: outputs.ec2.NetworkInsightsAnalysisAnalysisRouteTableRoute;
        /**
         * The security group.
         */
        securityGroup?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The security group rule.
         */
        securityGroupRule?: outputs.ec2.NetworkInsightsAnalysisAnalysisSecurityGroupRule;
        /**
         * The security groups.
         */
        securityGroups?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent[];
        /**
         * The source VPC.
         */
        sourceVpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The state.
         */
        state?: string;
        /**
         * The subnet.
         */
        subnet?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The route table for the subnet.
         */
        subnetRouteTable?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The transit gateway.
         */
        transitGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The transit gateway attachment.
         */
        transitGatewayAttachment?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The transit gateway route table.
         */
        transitGatewayRouteTable?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The transit gateway route table route.
         */
        transitGatewayRouteTableRoute?: outputs.ec2.NetworkInsightsAnalysisTransitGatewayRouteTableRoute;
        /**
         * The component VPC.
         */
        vpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The VPC endpoint.
         */
        vpcEndpoint?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The VPC peering connection.
         */
        vpcPeeringConnection?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The VPN connection.
         */
        vpnConnection?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The VPN gateway.
         */
        vpnGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
    }

    export interface NetworkInsightsAnalysisPathComponent {
        /**
         * The network ACL rule.
         */
        aclRule?: outputs.ec2.NetworkInsightsAnalysisAnalysisAclRule;
        /**
         * The additional details.
         */
        additionalDetails?: outputs.ec2.NetworkInsightsAnalysisAdditionalDetail[];
        /**
         * The component.
         */
        component?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The destination VPC.
         */
        destinationVpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The load balancer listener.
         */
        elasticLoadBalancerListener?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The explanation codes.
         */
        explanations?: outputs.ec2.NetworkInsightsAnalysisExplanation[];
        /**
         * The inbound header.
         */
        inboundHeader?: outputs.ec2.NetworkInsightsAnalysisAnalysisPacketHeader;
        /**
         * The outbound header.
         */
        outboundHeader?: outputs.ec2.NetworkInsightsAnalysisAnalysisPacketHeader;
        /**
         * The route table route.
         */
        routeTableRoute?: outputs.ec2.NetworkInsightsAnalysisAnalysisRouteTableRoute;
        /**
         * The security group rule.
         */
        securityGroupRule?: outputs.ec2.NetworkInsightsAnalysisAnalysisSecurityGroupRule;
        /**
         * The sequence number.
         */
        sequenceNumber?: number;
        /**
         * The name of the VPC endpoint service.
         */
        serviceName?: string;
        /**
         * The source VPC.
         */
        sourceVpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The subnet.
         */
        subnet?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The transit gateway.
         */
        transitGateway?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
        /**
         * The route in a transit gateway route table.
         */
        transitGatewayRouteTableRoute?: outputs.ec2.NetworkInsightsAnalysisTransitGatewayRouteTableRoute;
        /**
         * The component VPC.
         */
        vpc?: outputs.ec2.NetworkInsightsAnalysisAnalysisComponent;
    }

    export interface NetworkInsightsAnalysisPortRange {
        /**
         * The first port in the range.
         */
        from?: number;
        /**
         * The last port in the range.
         */
        to?: number;
    }

    export interface NetworkInsightsAnalysisTransitGatewayRouteTableRoute {
        /**
         * The ID of the route attachment.
         */
        attachmentId?: string;
        /**
         * The CIDR block used for destination matches.
         */
        destinationCidr?: string;
        /**
         * The ID of the prefix list.
         */
        prefixListId?: string;
        /**
         * The ID of the resource for the route attachment.
         */
        resourceId?: string;
        /**
         * The resource type for the route attachment.
         */
        resourceType?: string;
        /**
         * The route origin. The following are the possible values:
         *
         * - static
         * - propagated
         */
        routeOrigin?: string;
        /**
         * The state of the route.
         */
        state?: string;
    }

    export interface NetworkInsightsPathFilterPortRange {
        /**
         * The first port in the range.
         */
        fromPort?: number;
        /**
         * The last port in the range.
         */
        toPort?: number;
    }

    export interface NetworkInsightsPathPathFilter {
        /**
         * The destination IPv4 address.
         */
        destinationAddress?: string;
        /**
         * The destination port range.
         */
        destinationPortRange?: outputs.ec2.NetworkInsightsPathFilterPortRange;
        /**
         * The source IPv4 address.
         */
        sourceAddress?: string;
        /**
         * The source port range.
         */
        sourcePortRange?: outputs.ec2.NetworkInsightsPathFilterPortRange;
    }

    export interface NetworkInterfaceAttachmentEnaSrdSpecification {
        /**
         * Indicates whether ENA Express is enabled for the network interface.
         */
        enaSrdEnabled?: boolean;
        /**
         * Configures ENA Express for UDP network traffic.
         */
        enaSrdUdpSpecification?: outputs.ec2.NetworkInterfaceAttachmentEnaSrdSpecificationEnaSrdUdpSpecificationProperties;
    }

    /**
     * Configures ENA Express for UDP network traffic.
     */
    export interface NetworkInterfaceAttachmentEnaSrdSpecificationEnaSrdUdpSpecificationProperties {
        enaSrdUdpEnabled?: boolean;
    }

    export interface NetworkInterfaceConnectionTrackingSpecification {
        /**
         * Timeout (in seconds) for idle TCP connections in an established state. Min: 60 seconds. Max: 432000 seconds (5 days). Default: 432000 seconds. Recommended: Less than 432000 seconds.
         */
        tcpEstablishedTimeout?: number;
        /**
         * Timeout (in seconds) for idle UDP flows classified as streams which have seen more than one request-response transaction. Min: 60 seconds. Max: 180 seconds (3 minutes). Default: 180 seconds.
         */
        udpStreamTimeout?: number;
        /**
         * Timeout (in seconds) for idle UDP flows that have seen traffic only in a single direction or a single request-response transaction. Min: 30 seconds. Max: 60 seconds. Default: 30 seconds.
         */
        udpTimeout?: number;
    }

    export interface NetworkInterfaceInstanceIpv6Address {
        /**
         * An IPv6 address to associate with the network interface.
         */
        ipv6Address: string;
    }

    export interface NetworkInterfaceIpv4PrefixSpecification {
        /**
         * The IPv4 prefix. For information, see [Assigning prefixes to Amazon EC2 network interfaces](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html) in the *Amazon Elastic Compute Cloud User Guide* .
         */
        ipv4Prefix: string;
    }

    export interface NetworkInterfaceIpv6PrefixSpecification {
        /**
         * The IPv6 prefix. For information, see [Assigning prefixes to Amazon EC2 network interfaces](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html) in the *Amazon Elastic Compute Cloud User Guide* .
         */
        ipv6Prefix: string;
    }

    export interface NetworkInterfacePrivateIpAddressSpecification {
        /**
         * Sets the private IP address as the primary private address. You can set only one primary private IP address. If you don't specify a primary private IP address, Amazon EC2 automatically assigns a primary private IP address.
         */
        primary: boolean;
        /**
         * The private IP address of the network interface.
         */
        privateIpAddress: string;
    }

    /**
     * The options for the transit gateway vpc attachment.
     */
    export interface OptionsProperties {
        /**
         * Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable
         */
        applianceModeSupport?: string;
        /**
         * Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable
         */
        dnsSupport?: string;
        /**
         * Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable
         */
        ipv6Support?: string;
    }

    export interface PrefixListEntry {
        /**
         * The CIDR block.
         */
        cidr: string;
        /**
         * A description for the entry.
         *
         * Constraints: Up to 255 characters in length.
         */
        description?: string;
    }

    /**
     * The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
     *  Available options:
     *   +  EnableResourceNameDnsAAAARecord (true | false)
     *   +  EnableResourceNameDnsARecord (true | false)
     *   +  HostnameType (ip-name | resource-name)
     */
    export interface PrivateDnsNameOptionsOnLaunchProperties {
        /**
         * Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
         */
        enableResourceNameDnsARecord?: boolean;
        /**
         * Indicates whether to respond to DNS queries for instance hostname with DNS AAAA records.
         */
        enableResourceNameDnsAaaaRecord?: boolean;
        /**
         * The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
         */
        hostnameType?: string;
    }

    export interface SecurityGroupEgress {
        /**
         * The IPv4 address range, in CIDR format.
         *
         * You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `DestinationPrefixListId` , or `DestinationSecurityGroupId` .
         *
         * For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *Amazon EC2 User Guide* .
         */
        cidrIp?: string;
        /**
         * The IPv6 address range, in CIDR format.
         *
         * You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `DestinationPrefixListId` , or `DestinationSecurityGroupId` .
         *
         * For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *Amazon EC2 User Guide* .
         */
        cidrIpv6?: string;
        /**
         * A description for the security group rule.
         *
         * Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
         */
        description?: string;
        /**
         * The prefix list IDs for the destination AWS service. This is the AWS service that you want to access through a VPC endpoint from instances associated with the security group.
         *
         * You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `DestinationPrefixListId` , or `DestinationSecurityGroupId` .
         */
        destinationPrefixListId?: string;
        /**
         * The ID of the destination VPC security group.
         *
         * You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `DestinationPrefixListId` , or `DestinationSecurityGroupId` .
         */
        destinationSecurityGroupId?: string;
        /**
         * If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
         */
        fromPort?: number;
        /**
         * The IP protocol name ( `tcp` , `udp` , `icmp` , `icmpv6` ) or number (see [Protocol Numbers](https://docs.aws.amazon.com/http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) ).
         *
         * Use `-1` to specify all protocols. When authorizing security group rules, specifying `-1` or a protocol number other than `tcp` , `udp` , `icmp` , or `icmpv6` allows traffic on all ports, regardless of any port range you specify. For `tcp` , `udp` , and `icmp` , you must specify a port range. For `icmpv6` , the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
         */
        ipProtocol: string;
        /**
         * If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
         */
        toPort?: number;
    }

    export interface SecurityGroupIngress {
        /**
         * The IPv4 address range, in CIDR format.
         *
         * You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `SourcePrefixListId` , or `SourceSecurityGroupId` .
         *
         * For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *Amazon EC2 User Guide* .
         */
        cidrIp?: string;
        /**
         * The IPv6 address range, in CIDR format.
         *
         * You must specify exactly one of the following: `CidrIp` , `CidrIpv6` , `SourcePrefixListId` , or `SourceSecurityGroupId` .
         *
         * For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *Amazon EC2 User Guide* .
         */
        cidrIpv6?: string;
        /**
         * Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.
         *
         * Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
         */
        description?: string;
        /**
         * If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
         */
        fromPort?: number;
        /**
         * The IP protocol name ( `tcp` , `udp` , `icmp` , `icmpv6` ) or number (see [Protocol Numbers](https://docs.aws.amazon.com/http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) ).
         *
         * Use `-1` to specify all protocols. When authorizing security group rules, specifying `-1` or a protocol number other than `tcp` , `udp` , `icmp` , or `icmpv6` allows traffic on all ports, regardless of any port range you specify. For `tcp` , `udp` , and `icmp` , you must specify a port range. For `icmpv6` , the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
         */
        ipProtocol: string;
        /**
         * The ID of a prefix list.
         */
        sourcePrefixListId?: string;
        /**
         * The ID of the security group.
         */
        sourceSecurityGroupId?: string;
        /**
         * [Default VPC] The name of the source security group. You must specify either the security group ID or the security group name. You can't specify the group name in combination with an IP address range. Creates rules that grant full ICMP, UDP, and TCP access.
         *
         * For security groups in a nondefault VPC, you must specify the group ID.
         */
        sourceSecurityGroupName?: string;
        /**
         * [nondefault VPC] The AWS account ID for the source security group, if the source security group is in a different account. You can't specify this property with an IP address range. Creates rules that grant full ICMP, UDP, and TCP access.
         *
         * If you specify `SourceSecurityGroupName` or `SourceSecurityGroupId` and that security group is owned by a different account than the account creating the stack, you must specify the `SourceSecurityGroupOwnerId` ; otherwise, this property is optional.
         */
        sourceSecurityGroupOwnerId?: string;
        /**
         * If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
         */
        toPort?: number;
    }

    export interface SpotFleetAcceleratorCountRequest {
        /**
         * The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set `Max` to `0` .
         */
        max?: number;
        /**
         * The minimum number of accelerators. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface SpotFleetAcceleratorTotalMemoryMiBRequest {
        /**
         * The maximum amount of accelerator memory, in MiB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of accelerator memory, in MiB. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface SpotFleetBaselineEbsBandwidthMbpsRequest {
        /**
         * The maximum baseline bandwidth, in Mbps. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum baseline bandwidth, in Mbps. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface SpotFleetBlockDeviceMapping {
        /**
         * The device name (for example, `/dev/sdh` or `xvdh` ).
         */
        deviceName: string;
        /**
         * Parameters used to automatically set up EBS volumes when the instance is launched.
         */
        ebs?: outputs.ec2.SpotFleetEbsBlockDevice;
        /**
         * To omit the device from the block device mapping, specify an empty string. When this property is specified, the device is removed from the block device mapping regardless of the assigned value.
         */
        noDevice?: string;
        /**
         * The virtual device name ( `ephemeral` N). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for `ephemeral0` and `ephemeral1` . The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
         *
         * NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect.
         *
         * Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
         */
        virtualName?: string;
    }

    export interface SpotFleetClassicLoadBalancer {
        /**
         * The name of the load balancer.
         */
        name: string;
    }

    export interface SpotFleetClassicLoadBalancersConfig {
        /**
         * One or more Classic Load Balancers.
         */
        classicLoadBalancers: outputs.ec2.SpotFleetClassicLoadBalancer[];
    }

    export interface SpotFleetEbsBlockDevice {
        /**
         * Indicates whether the EBS volume is deleted on instance termination. For more information, see [Preserving Amazon EBS volumes on instance termination](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination) in the *Amazon EC2 User Guide* .
         */
        deleteOnTermination?: boolean;
        /**
         * Indicates whether the encryption state of an EBS volume is changed while being restored from a backing snapshot. The effect of setting the encryption state to `true` depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see [Amazon EBS Encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-parameters) in the *Amazon EC2 User Guide* .
         *
         * In no case can you remove encryption from an encrypted volume.
         *
         * Encrypted volumes can only be attached to instances that support Amazon EBS encryption. For more information, see [Supported Instance Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances) .
         *
         * This parameter is not returned by [DescribeImageAttribute](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImageAttribute.html) .
         */
        encrypted?: boolean;
        /**
         * The number of I/O operations per second (IOPS). For `gp3` , `io1` , and `io2` volumes, this represents the number of IOPS that are provisioned for the volume. For `gp2` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
         *
         * The following are the supported values for each volume type:
         *
         * - `gp3` : 3,000 - 16,000 IOPS
         * - `io1` : 100 - 64,000 IOPS
         * - `io2` : 100 - 256,000 IOPS
         *
         * For `io2` volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances) . On other instances, you can achieve performance up to 32,000 IOPS.
         *
         * This parameter is required for `io1` and `io2` volumes. The default for `gp3` volumes is 3,000 IOPS.
         */
        iops?: number;
        /**
         * The ID of the snapshot.
         */
        snapshotId?: string;
        /**
         * The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size.
         *
         * The following are the supported sizes for each volume type:
         *
         * - `gp2` and `gp3` : 1 - 16,384 GiB
         * - `io1` : 4 - 16,384 GiB
         * - `io2` : 4 - 65,536 GiB
         * - `st1` and `sc1` : 125 - 16,384 GiB
         * - `standard` : 1 - 1024 GiB
         */
        volumeSize?: number;
        /**
         * The volume type. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html) in the *Amazon EBS User Guide* .
         */
        volumeType?: enums.ec2.SpotFleetEbsBlockDeviceVolumeType;
    }

    export interface SpotFleetFleetLaunchTemplateSpecification {
        /**
         * The ID of the launch template.
         *
         * You must specify the `LaunchTemplateId` or the `LaunchTemplateName` , but not both.
         */
        launchTemplateId?: string;
        /**
         * The name of the launch template.
         *
         * You must specify the `LaunchTemplateName` or the `LaunchTemplateId` , but not both.
         */
        launchTemplateName?: string;
        /**
         * The version number of the launch template.
         *
         * Specifying `$Latest` or `$Default` for the template version number is not supported. However, you can specify `LatestVersionNumber` or `DefaultVersionNumber` using the `Fn::GetAtt` intrinsic function. For more information, see [Fn::GetAtt](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#aws-resource-ec2-launchtemplate-return-values-fn--getatt) .
         */
        version: string;
    }

    export interface SpotFleetGroupIdentifier {
        /**
         * The ID of the security group.
         */
        groupId: string;
    }

    export interface SpotFleetIamInstanceProfileSpecification {
        /**
         * The Amazon Resource Name (ARN) of the instance profile.
         */
        arn?: string;
    }

    export interface SpotFleetInstanceIpv6Address {
        /**
         * The IPv6 address.
         */
        ipv6Address: string;
    }

    export interface SpotFleetInstanceNetworkInterfaceSpecification {
        /**
         * Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is `true` .
         *
         * AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [Amazon VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/) .
         */
        associatePublicIpAddress?: boolean;
        /**
         * Indicates whether the network interface is deleted when the instance is terminated.
         */
        deleteOnTermination?: boolean;
        /**
         * The description of the network interface. Applies only if creating a network interface when launching an instance.
         */
        description?: string;
        /**
         * The position of the network interface in the attachment order. A primary network interface has a device index of 0.
         *
         * If you specify a network interface when launching an instance, you must specify the device index.
         */
        deviceIndex?: number;
        /**
         * The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
         */
        groups?: string[];
        /**
         * A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
         */
        ipv6AddressCount?: number;
        /**
         * The IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
         */
        ipv6Addresses?: outputs.ec2.SpotFleetInstanceIpv6Address[];
        /**
         * The ID of the network interface.
         *
         * If you are creating a Spot Fleet, omit this parameter because you can’t specify a network interface ID in a launch specification.
         */
        networkInterfaceId?: string;
        /**
         * The private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) request.
         */
        privateIpAddresses?: outputs.ec2.SpotFleetPrivateIpAddressSpecification[];
        /**
         * The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a [RunInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) request.
         */
        secondaryPrivateIpAddressCount?: number;
        /**
         * The ID of the subnet associated with the network interface.
         */
        subnetId?: string;
    }

    export interface SpotFleetInstanceRequirementsRequest {
        /**
         * The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips) on an instance.
         *
         * To exclude accelerator-enabled instance types, set `Max` to `0` .
         *
         * Default: No minimum or maximum limits
         */
        acceleratorCount?: outputs.ec2.SpotFleetAcceleratorCountRequest;
        /**
         * Indicates whether instance types must have accelerators by specific manufacturers.
         *
         * - For instance types with AWS devices, specify `amazon-web-services` .
         * - For instance types with AMD devices, specify `amd` .
         * - For instance types with Habana devices, specify `habana` .
         * - For instance types with NVIDIA devices, specify `nvidia` .
         * - For instance types with Xilinx devices, specify `xilinx` .
         *
         * Default: Any manufacturer
         */
        acceleratorManufacturers?: enums.ec2.SpotFleetInstanceRequirementsRequestAcceleratorManufacturersItem[];
        /**
         * The accelerators that must be on the instance type.
         *
         * - For instance types with NVIDIA A10G GPUs, specify `a10g` .
         * - For instance types with NVIDIA A100 GPUs, specify `a100` .
         * - For instance types with NVIDIA H100 GPUs, specify `h100` .
         * - For instance types with AWS Inferentia chips, specify `inferentia` .
         * - For instance types with NVIDIA GRID K520 GPUs, specify `k520` .
         * - For instance types with NVIDIA K80 GPUs, specify `k80` .
         * - For instance types with NVIDIA M60 GPUs, specify `m60` .
         * - For instance types with AMD Radeon Pro V520 GPUs, specify `radeon-pro-v520` .
         * - For instance types with NVIDIA T4 GPUs, specify `t4` .
         * - For instance types with NVIDIA T4G GPUs, specify `t4g` .
         * - For instance types with Xilinx VU9P FPGAs, specify `vu9p` .
         * - For instance types with NVIDIA V100 GPUs, specify `v100` .
         *
         * Default: Any accelerator
         */
        acceleratorNames?: enums.ec2.SpotFleetInstanceRequirementsRequestAcceleratorNamesItem[];
        /**
         * The minimum and maximum amount of total accelerator memory, in MiB.
         *
         * Default: No minimum or maximum limits
         */
        acceleratorTotalMemoryMiB?: outputs.ec2.SpotFleetAcceleratorTotalMemoryMiBRequest;
        /**
         * The accelerator types that must be on the instance type.
         *
         * - To include instance types with GPU hardware, specify `gpu` .
         * - To include instance types with FPGA hardware, specify `fpga` .
         * - To include instance types with inference hardware, specify `inference` .
         *
         * Default: Any accelerator type
         */
        acceleratorTypes?: enums.ec2.SpotFleetInstanceRequirementsRequestAcceleratorTypesItem[];
        /**
         * The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes.
         *
         * You can use strings with one or more wild cards, represented by an asterisk ( `*` ), to allow an instance type, size, or generation. The following are examples: `m5.8xlarge` , `c5*.*` , `m5a.*` , `r*` , `*3*` .
         *
         * For example, if you specify `c5*` ,Amazon EC2 will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify `m5a.*` , Amazon EC2 will allow all the M5a instance types, but not the M5n instance types.
         *
         * > If you specify `AllowedInstanceTypes` , you can't specify `ExcludedInstanceTypes` . 
         *
         * Default: All instance types
         */
        allowedInstanceTypes?: string[];
        /**
         * Indicates whether bare metal instance types must be included, excluded, or required.
         *
         * - To include bare metal instance types, specify `included` .
         * - To require only bare metal instance types, specify `required` .
         * - To exclude bare metal instance types, specify `excluded` .
         *
         * Default: `excluded`
         */
        bareMetal?: enums.ec2.SpotFleetInstanceRequirementsRequestBareMetal;
        /**
         * The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the *Amazon EC2 User Guide* .
         *
         * Default: No minimum or maximum limits
         */
        baselineEbsBandwidthMbps?: outputs.ec2.SpotFleetBaselineEbsBandwidthMbpsRequest;
        /**
         * Indicates whether burstable performance T instance types are included, excluded, or required. For more information, see [Burstable performance instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html) .
         *
         * - To include burstable performance instance types, specify `included` .
         * - To require only burstable performance instance types, specify `required` .
         * - To exclude burstable performance instance types, specify `excluded` .
         *
         * Default: `excluded`
         */
        burstablePerformance?: enums.ec2.SpotFleetInstanceRequirementsRequestBurstablePerformance;
        /**
         * The CPU manufacturers to include.
         *
         * - For instance types with Intel CPUs, specify `intel` .
         * - For instance types with AMD CPUs, specify `amd` .
         * - For instance types with AWS CPUs, specify `amazon-web-services` .
         *
         * > Don't confuse the CPU manufacturer with the CPU architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template. 
         *
         * Default: Any manufacturer
         */
        cpuManufacturers?: enums.ec2.SpotFleetInstanceRequirementsRequestCpuManufacturersItem[];
        /**
         * The instance types to exclude.
         *
         * You can use strings with one or more wild cards, represented by an asterisk ( `*` ), to exclude an instance family, type, size, or generation. The following are examples: `m5.8xlarge` , `c5*.*` , `m5a.*` , `r*` , `*3*` .
         *
         * For example, if you specify `c5*` ,Amazon EC2 will exclude the entire C5 instance family, which includes all C5a and C5n instance types. If you specify `m5a.*` , Amazon EC2 will exclude all the M5a instance types, but not the M5n instance types.
         *
         * > If you specify `ExcludedInstanceTypes` , you can't specify `AllowedInstanceTypes` . 
         *
         * Default: No excluded instance types
         */
        excludedInstanceTypes?: string[];
        /**
         * Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Current generation instance types are typically the latest two to three generations in each instance family. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide* .
         *
         * For current generation instance types, specify `current` .
         *
         * For previous generation instance types, specify `previous` .
         *
         * Default: Current and previous generation instance types
         */
        instanceGenerations?: enums.ec2.SpotFleetInstanceRequirementsRequestInstanceGenerationsItem[];
        /**
         * Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the *Amazon EC2 User Guide* .
         *
         * - To include instance types with instance store volumes, specify `included` .
         * - To require only instance types with instance store volumes, specify `required` .
         * - To exclude instance types with instance store volumes, specify `excluded` .
         *
         * Default: `included`
         */
        localStorage?: enums.ec2.SpotFleetInstanceRequirementsRequestLocalStorage;
        /**
         * The type of local storage that is required.
         *
         * - For instance types with hard disk drive (HDD) storage, specify `hdd` .
         * - For instance types with solid state drive (SSD) storage, specify `ssd` .
         *
         * Default: `hdd` and `ssd`
         */
        localStorageTypes?: enums.ec2.SpotFleetInstanceRequirementsRequestLocalStorageTypesItem[];
        /**
         * [Price protection] The price protection threshold for Spot Instances, as a percentage of an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
         *
         * The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
         *
         * If you set `DesiredCapacityType` to `vcpu` or `memory-mib` , the price protection threshold is based on the per vCPU or per memory price instead of the per instance price.
         *
         * > Only one of `SpotMaxPricePercentageOverLowestPrice` or `MaxSpotPriceAsPercentageOfOptimalOnDemandPrice` can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as `999999` .
         */
        maxSpotPriceAsPercentageOfOptimalOnDemandPrice?: number;
        /**
         * The minimum and maximum amount of memory per vCPU, in GiB.
         *
         * Default: No minimum or maximum limits
         */
        memoryGiBPerVCpu?: outputs.ec2.SpotFleetMemoryGiBPerVCpuRequest;
        /**
         * The minimum and maximum amount of memory, in MiB.
         */
        memoryMiB?: outputs.ec2.SpotFleetMemoryMiBRequest;
        /**
         * The minimum and maximum amount of baseline network bandwidth, in gigabits per second (Gbps). For more information, see [Amazon EC2 instance network bandwidth](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html) in the *Amazon EC2 User Guide* .
         *
         * Default: No minimum or maximum limits
         */
        networkBandwidthGbps?: outputs.ec2.SpotFleetNetworkBandwidthGbpsRequest;
        /**
         * The minimum and maximum number of network interfaces.
         *
         * Default: No minimum or maximum limits
         */
        networkInterfaceCount?: outputs.ec2.SpotFleetNetworkInterfaceCountRequest;
        /**
         * [Price protection] The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
         *
         * The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
         *
         * To indicate no price protection threshold, specify a high value, such as `999999` .
         *
         * This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) and [GetInstanceTypesFromInstanceRequirements](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html) .
         *
         * > If you set `TargetCapacityUnitType` to `vcpu` or `memory-mib` , the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price. 
         *
         * Default: `20`
         */
        onDemandMaxPricePercentageOverLowestPrice?: number;
        /**
         * Indicates whether instance types must support hibernation for On-Demand Instances.
         *
         * This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) .
         *
         * Default: `false`
         */
        requireHibernateSupport?: boolean;
        /**
         * [Price protection] The price protection threshold for Spot Instances, as a percentage higher than an identified Spot price. The identified Spot price is the Spot price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified Spot price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose Spot price exceeds your specified threshold.
         *
         * The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
         *
         * If you set `TargetCapacityUnitType` to `vcpu` or `memory-mib` , the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per-instance price.
         *
         * This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) and [GetInstanceTypesFromInstanceRequirements](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html) .
         *
         * > Only one of `SpotMaxPricePercentageOverLowestPrice` or `MaxSpotPriceAsPercentageOfOptimalOnDemandPrice` can be specified. If you don't specify either, Amazon EC2 will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as `999999` . 
         *
         * Default: `100`
         */
        spotMaxPricePercentageOverLowestPrice?: number;
        /**
         * The minimum and maximum amount of total local storage, in GB.
         *
         * Default: No minimum or maximum limits
         */
        totalLocalStorageGb?: outputs.ec2.SpotFleetTotalLocalStorageGbRequest;
        /**
         * The minimum and maximum number of vCPUs.
         */
        vCpuCount?: outputs.ec2.SpotFleetVCpuCountRangeRequest;
    }

    export interface SpotFleetLaunchSpecification {
        /**
         * One or more block devices that are mapped to the Spot Instances. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
         */
        blockDeviceMappings?: outputs.ec2.SpotFleetBlockDeviceMapping[];
        /**
         * Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
         *
         * Default: `false`
         */
        ebsOptimized?: boolean;
        /**
         * The IAM instance profile.
         */
        iamInstanceProfile?: outputs.ec2.SpotFleetIamInstanceProfileSpecification;
        /**
         * The ID of the AMI.
         */
        imageId: string;
        /**
         * The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes.
         *
         * > If you specify `InstanceRequirements` , you can't specify `InstanceType` .
         */
        instanceRequirements?: outputs.ec2.SpotFleetInstanceRequirementsRequest;
        /**
         * The instance type.
         */
        instanceType?: string;
        /**
         * The ID of the kernel.
         */
        kernelId?: string;
        /**
         * The name of the key pair.
         */
        keyName?: string;
        /**
         * Enable or disable monitoring for the instances.
         */
        monitoring?: outputs.ec2.SpotFleetMonitoring;
        /**
         * The network interfaces.
         */
        networkInterfaces?: outputs.ec2.SpotFleetInstanceNetworkInterfaceSpecification[];
        /**
         * The placement information.
         */
        placement?: outputs.ec2.SpotFleetSpotPlacement;
        /**
         * The ID of the RAM disk. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID.
         */
        ramdiskId?: string;
        /**
         * The security groups.
         *
         * If you specify a network interface, you must specify any security groups as part of the network interface instead of using this parameter.
         */
        securityGroups?: outputs.ec2.SpotFleetGroupIdentifier[];
        /**
         * The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.
         *
         * > If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
         */
        spotPrice?: string;
        /**
         * The IDs of the subnets in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
         *
         * If you specify a network interface, you must specify any subnets as part of the network interface instead of using this parameter.
         */
        subnetId?: string;
        /**
         * The tags to apply during creation.
         */
        tagSpecifications?: outputs.ec2.SpotFleetTagSpecification[];
        /**
         * The base64-encoded user data that instances use when starting up. User data is limited to 16 KB.
         */
        userData?: string;
        /**
         * The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O.
         *
         * If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.
         */
        weightedCapacity?: number;
    }

    export interface SpotFleetLaunchTemplateConfig {
        /**
         * The launch template to use. Make sure that the launch template does not contain the `NetworkInterfaceId` parameter because you can't specify a network interface ID in a Spot Fleet.
         */
        launchTemplateSpecification?: outputs.ec2.SpotFleetFleetLaunchTemplateSpecification;
        /**
         * Any parameters that you specify override the same parameters in the launch template.
         */
        overrides?: outputs.ec2.SpotFleetLaunchTemplateOverrides[];
    }

    export interface SpotFleetLaunchTemplateOverrides {
        /**
         * The Availability Zone in which to launch the instances.
         */
        availabilityZone?: string;
        /**
         * The instance requirements. When you specify instance requirements, Amazon EC2 will identify instance types with the provided requirements, and then use your On-Demand and Spot allocation strategies to launch instances from these instance types, in the same way as when you specify a list of instance types.
         *
         * > If you specify `InstanceRequirements` , you can't specify `InstanceType` .
         */
        instanceRequirements?: outputs.ec2.SpotFleetInstanceRequirementsRequest;
        /**
         * The instance type.
         */
        instanceType?: string;
        /**
         * The priority for the launch template override. The highest priority is launched first.
         *
         * If `OnDemandAllocationStrategy` is set to `prioritized` , Spot Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity.
         *
         * If the Spot `AllocationStrategy` is set to `capacityOptimizedPrioritized` , Spot Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first.
         *
         * Valid values are whole numbers starting at `0` . The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.
         */
        priority?: number;
        /**
         * The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.
         *
         * > If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
         */
        spotPrice?: string;
        /**
         * The ID of the subnet in which to launch the instances.
         */
        subnetId?: string;
        /**
         * The number of units provided by the specified instance type.
         *
         * > When specifying weights, the price used in the `lowest-price` and `price-capacity-optimized` allocation strategies is per *unit* hour (where the instance price is divided by the specified weight). However, if all the specified weights are above the requested `TargetCapacity` , resulting in only 1 instance being launched, the price used is per *instance* hour.
         */
        weightedCapacity?: number;
    }

    export interface SpotFleetLoadBalancersConfig {
        /**
         * The Classic Load Balancers.
         */
        classicLoadBalancersConfig?: outputs.ec2.SpotFleetClassicLoadBalancersConfig;
        /**
         * The target groups.
         */
        targetGroupsConfig?: outputs.ec2.SpotFleetTargetGroupsConfig;
    }

    export interface SpotFleetMemoryGiBPerVCpuRequest {
        /**
         * The maximum amount of memory per vCPU, in GiB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of memory per vCPU, in GiB. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface SpotFleetMemoryMiBRequest {
        /**
         * The maximum amount of memory, in MiB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of memory, in MiB. To specify no minimum limit, specify `0` .
         */
        min?: number;
    }

    export interface SpotFleetMonitoring {
        /**
         * Enables monitoring for the instance.
         *
         * Default: `false`
         */
        enabled?: boolean;
    }

    export interface SpotFleetNetworkBandwidthGbpsRequest {
        /**
         * The maximum amount of network bandwidth, in Gbps. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of network bandwidth, in Gbps. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface SpotFleetNetworkInterfaceCountRequest {
        /**
         * The maximum number of network interfaces. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum number of network interfaces. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface SpotFleetPrivateIpAddressSpecification {
        /**
         * Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
         */
        primary?: boolean;
        /**
         * The private IPv4 address.
         */
        privateIpAddress: string;
    }

    export interface SpotFleetRequestConfigData {
        /**
         * The strategy that determines how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet launch configuration. For more information, see [Allocation strategies for Spot Instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-allocation-strategy.html) in the *Amazon EC2 User Guide* .
         *
         * - **priceCapacityOptimized (recommended)** - Spot Fleet identifies the pools with the highest capacity availability for the number of instances that are launching. This means that we will request Spot Instances from the pools that we believe have the lowest chance of interruption in the near term. Spot Fleet then requests Spot Instances from the lowest priced of these pools.
         * - **capacityOptimized** - Spot Fleet identifies the pools with the highest capacity availability for the number of instances that are launching. This means that we will request Spot Instances from the pools that we believe have the lowest chance of interruption in the near term. To give certain instance types a higher chance of launching first, use `capacityOptimizedPrioritized` . Set a priority for each instance type by using the `Priority` parameter for `LaunchTemplateOverrides` . You can assign the same priority to different `LaunchTemplateOverrides` . EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. `capacityOptimizedPrioritized` is supported only if your Spot Fleet uses a launch template. Note that if the `OnDemandAllocationStrategy` is set to `prioritized` , the same priority is applied when fulfilling On-Demand capacity.
         * - **diversified** - Spot Fleet requests instances from all of the Spot Instance pools that you specify.
         * - **lowestPrice (not recommended)** - > We don't recommend the `lowestPrice` allocation strategy because it has the highest risk of interruption for your Spot Instances. 
         *
         * Spot Fleet requests instances from the lowest priced Spot Instance pool that has available capacity. If the lowest priced pool doesn't have available capacity, the Spot Instances come from the next lowest priced pool that has available capacity. If a pool runs out of capacity before fulfilling your desired capacity, Spot Fleet will continue to fulfill your request by drawing from the next lowest priced pool. To ensure that your desired capacity is met, you might receive Spot Instances from several pools. Because this strategy only considers instance price and not capacity availability, it might lead to high interruption rates.
         *
         * Default: `lowestPrice`
         */
        allocationStrategy?: enums.ec2.SpotFleetRequestConfigDataAllocationStrategy;
        /**
         * Reserved.
         */
        context?: string;
        /**
         * Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.
         *
         * Supported only for fleets of type `maintain` .
         */
        excessCapacityTerminationPolicy?: enums.ec2.SpotFleetRequestConfigDataExcessCapacityTerminationPolicy;
        /**
         * The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see [Spot Fleet Prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites) in the *Amazon EC2 User Guide for Linux Instances* . Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request or when the Spot Fleet request expires, if you set `TerminateInstancesWithExpiration` .
         */
        iamFleetRole: string;
        /**
         * The behavior when a Spot Instance is interrupted. The default is `terminate` .
         */
        instanceInterruptionBehavior?: enums.ec2.SpotFleetRequestConfigDataInstanceInterruptionBehavior;
        /**
         * The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot *AllocationStrategy* is set to `lowest-price` . Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
         *
         * Note that Spot Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, Spot Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
         */
        instancePoolsToUseCount?: number;
        /**
         * The launch specifications for the Spot Fleet request. If you specify `LaunchSpecifications` , you can't specify `LaunchTemplateConfigs` .
         */
        launchSpecifications?: outputs.ec2.SpotFleetLaunchSpecification[];
        /**
         * The launch template and overrides. If you specify `LaunchTemplateConfigs` , you can't specify `LaunchSpecifications` .
         */
        launchTemplateConfigs?: outputs.ec2.SpotFleetLaunchTemplateConfig[];
        /**
         * One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups.
         *
         * With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.
         */
        loadBalancersConfig?: outputs.ec2.SpotFleetLoadBalancersConfig;
        /**
         * The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify `lowestPrice` , Spot Fleet uses price to determine the order, launching the lowest price first. If you specify `prioritized` , Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to `lowestPrice` .
         */
        onDemandAllocationStrategy?: string;
        /**
         * The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the `onDemandMaxTotalPrice` parameter, the `spotMaxTotalPrice` parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
         *
         * > If your fleet includes T instances that are configured as `unlimited` , and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The `onDemandMaxTotalPrice` does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for `onDemandMaxTotalPrice` . For more information, see [Surplus credits can incur charges](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits) in the *EC2 User Guide* .
         */
        onDemandMaxTotalPrice?: string;
        /**
         * The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is `maintain` , you can specify a target capacity of 0 and add capacity later.
         */
        onDemandTargetCapacity?: number;
        /**
         * Indicates whether Spot Fleet should replace unhealthy instances.
         */
        replaceUnhealthyInstances?: boolean;
        /**
         * The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
         */
        spotMaintenanceStrategies?: outputs.ec2.SpotFleetSpotMaintenanceStrategies;
        /**
         * The maximum amount per hour for Spot Instances that you're willing to pay. You can use the `spotMaxTotalPrice` parameter, the `onDemandMaxTotalPrice` parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
         *
         * > If your fleet includes T instances that are configured as `unlimited` , and if their average CPU usage exceeds the baseline utilization, you will incur a charge for surplus credits. The `spotMaxTotalPrice` does not account for surplus credits, and, if you use surplus credits, your final cost might be higher than what you specified for `spotMaxTotalPrice` . For more information, see [Surplus credits can incur charges](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances-unlimited-mode-concepts.html#unlimited-mode-surplus-credits) in the *EC2 User Guide* .
         */
        spotMaxTotalPrice?: string;
        /**
         * The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.
         *
         * > If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
         */
        spotPrice?: string;
        /**
         * The key-value pair for tagging the Spot Fleet request on creation. The value for `ResourceType` must be `spot-fleet-request` , otherwise the Spot Fleet request fails. To tag instances at launch, specify the tags in the [launch template](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template) (valid only if you use `LaunchTemplateConfigs` ) or in the `[SpotFleetTagSpecification](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html)` (valid only if you use `LaunchSpecifications` ). For information about tagging after launch, see [Tag your resources](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources) .
         */
        tagSpecifications?: outputs.ec2.SpotFleetTagSpecification[];
        /**
         * The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is `maintain` , you can specify a target capacity of 0 and add capacity later.
         */
        targetCapacity: number;
        /**
         * The unit for the target capacity. You can specify this parameter only when using attribute-based instance type selection.
         *
         * Default: `units` (the number of instances)
         */
        targetCapacityUnitType?: enums.ec2.SpotFleetRequestConfigDataTargetCapacityUnitType;
        /**
         * Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.
         */
        terminateInstancesWithExpiration?: boolean;
        /**
         * The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is `request` , the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is `maintain` , the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: `maintain` . `instant` is listed but is not used by Spot Fleet.
         */
        type?: enums.ec2.SpotFleetRequestConfigDataType;
        /**
         * The start date and time of the request, in UTC format ( *YYYY* - *MM* - *DD* T *HH* : *MM* : *SS* Z). By default, Amazon EC2 starts fulfilling the request immediately.
         */
        validFrom?: string;
        /**
         * The end date and time of the request, in UTC format ( *YYYY* - *MM* - *DD* T *HH* : *MM* : *SS* Z). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.
         */
        validUntil?: string;
    }

    export interface SpotFleetSpotCapacityRebalance {
        /**
         * The replacement strategy to use. Only available for fleets of type `maintain` .
         *
         * `launch` - Spot Fleet launches a new replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet. Spot Fleet does not terminate the instances that receive a rebalance notification. You can terminate the old instances, or you can leave them running. You are charged for all instances while they are running.
         *
         * `launch-before-terminate` - Spot Fleet launches a new replacement Spot Instance when a rebalance notification is emitted for an existing Spot Instance in the fleet, and then, after a delay that you specify (in `TerminationDelay` ), terminates the instances that received a rebalance notification.
         */
        replacementStrategy?: enums.ec2.SpotFleetSpotCapacityRebalanceReplacementStrategy;
        /**
         * The amount of time (in seconds) that Amazon EC2 waits before terminating the old Spot Instance after launching a new replacement Spot Instance.
         *
         * Required when `ReplacementStrategy` is set to `launch-before-terminate` .
         *
         * Not valid when `ReplacementStrategy` is set to `launch` .
         *
         * Valid values: Minimum value of `120` seconds. Maximum value of `7200` seconds.
         */
        terminationDelay?: number;
    }

    export interface SpotFleetSpotMaintenanceStrategies {
        /**
         * The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted. For more information, see [Capacity rebalancing](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-capacity-rebalance.html) in the *Amazon EC2 User Guide for Linux Instances* .
         */
        capacityRebalance?: outputs.ec2.SpotFleetSpotCapacityRebalance;
    }

    export interface SpotFleetSpotPlacement {
        /**
         * The Availability Zone.
         *
         * To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".
         */
        availabilityZone?: string;
        /**
         * The name of the placement group.
         */
        groupName?: string;
        /**
         * The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of `dedicated` runs on single-tenant hardware. The `host` tenancy is not supported for Spot Instances.
         */
        tenancy?: enums.ec2.SpotFleetSpotPlacementTenancy;
    }

    export interface SpotFleetTag {
        /**
         * The tag key.
         */
        key: string;
        /**
         * The tag value.
         */
        value: string;
    }

    export interface SpotFleetTagSpecification {
        /**
         * The type of resource. Currently, the only resource type that is supported is `instance` . To tag the Spot Fleet request on creation, use the `TagSpecifications` parameter in `[SpotFleetRequestConfigData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetRequestConfigData.html)` .
         */
        resourceType?: enums.ec2.SpotFleetTagSpecificationResourceType;
        /**
         * The tags.
         */
        tags?: outputs.ec2.SpotFleetTag[];
    }

    export interface SpotFleetTargetGroup {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        arn: string;
    }

    export interface SpotFleetTargetGroupsConfig {
        /**
         * One or more target groups.
         */
        targetGroups: outputs.ec2.SpotFleetTargetGroup[];
    }

    export interface SpotFleetTotalLocalStorageGbRequest {
        /**
         * The maximum amount of total local storage, in GB. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum amount of total local storage, in GB. To specify no minimum limit, omit this parameter.
         */
        min?: number;
    }

    export interface SpotFleetVCpuCountRangeRequest {
        /**
         * The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
         */
        max?: number;
        /**
         * The minimum number of vCPUs. To specify no minimum limit, specify `0` .
         */
        min?: number;
    }

    /**
     * The configuration options for customer provided KMS encryption.
     */
    export interface SseSpecificationProperties {
        /**
         * Whether to encrypt the policy with the provided key or disable encryption
         */
        customerManagedKeyEnabled?: boolean;
        /**
         * KMS Key Arn used to encrypt the group policy
         */
        kmsKeyArn?: string;
    }

    /**
     * Specifies the tags to apply to a resource when the resource is created for the launch template.
     *   ``TagSpecification`` is a property type of [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-tagspecifications). [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-tagspecifications) is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
     */
    export interface TagSpecification {
        /**
         * The type of resource to tag.
         *  Valid Values lists all resource types for Amazon EC2 that can be tagged. When you create a launch template, you can specify tags for the following resource types only: ``instance`` | ``volume`` | ``network-interface`` | ``spot-instances-request``. If the instance does not include the resource type that you specify, the instance launch fails. For example, not all instance types include a volume.
         *  To tag a resource after it has been created, see [CreateTags](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
         */
        resourceType?: string;
        /**
         * The tags to apply to the resource.
         */
        tags?: outputs.ec2.LaunchTemplateTag[];
    }

    export interface TransitGatewayConnectOptions {
        /**
         * The tunnel protocol.
         */
        protocol?: string;
    }

    export interface TransitGatewayPeeringAttachmentPeeringAttachmentStatus {
        /**
         * The status code.
         */
        code?: string;
        /**
         * The status message, if applicable.
         */
        message?: string;
    }

    /**
     * The load balancer details if creating the AWS Verified Access endpoint as load-balancertype.
     */
    export interface VerifiedAccessEndpointLoadBalancerOptions {
        /**
         * The ARN of the load balancer.
         */
        loadBalancerArn?: string;
        /**
         * The IP port number.
         */
        port?: number;
        /**
         * The IP protocol.
         */
        protocol?: string;
        /**
         * The IDs of the subnets.
         */
        subnetIds?: string[];
    }

    /**
     * The options for network-interface type endpoint.
     */
    export interface VerifiedAccessEndpointNetworkInterfaceOptions {
        /**
         * The ID of the network interface.
         */
        networkInterfaceId?: string;
        /**
         * The IP port number.
         */
        port?: number;
        /**
         * The IP protocol.
         */
        protocol?: string;
    }

    /**
     * The configuration options for customer provided KMS encryption.
     */
    export interface VerifiedAccessEndpointSseSpecification {
        /**
         * Whether to encrypt the policy with the provided key or disable encryption
         */
        customerManagedKeyEnabled?: boolean;
        /**
         * KMS Key Arn used to encrypt the group policy
         */
        kmsKeyArn?: string;
    }

    /**
     * The configuration options for customer provided KMS encryption.
     */
    export interface VerifiedAccessGroupSseSpecification {
        /**
         * Whether to encrypt the policy with the provided key or disable encryption
         */
        customerManagedKeyEnabled?: boolean;
        /**
         * KMS Key Arn used to encrypt the group policy
         */
        kmsKeyArn?: string;
    }

    /**
     * The configuration options for AWS Verified Access instances.
     */
    export interface VerifiedAccessInstanceVerifiedAccessLogs {
        /**
         * Sends Verified Access logs to CloudWatch Logs.
         */
        cloudWatchLogs?: outputs.ec2.VerifiedAccessInstanceVerifiedAccessLogsCloudWatchLogsProperties;
        /**
         * Include claims from trust providers in Verified Access logs.
         */
        includeTrustContext?: boolean;
        /**
         * Sends Verified Access logs to Kinesis.
         */
        kinesisDataFirehose?: outputs.ec2.VerifiedAccessInstanceVerifiedAccessLogsKinesisDataFirehoseProperties;
        /**
         * Select log version for Verified Access logs.
         */
        logVersion?: string;
        /**
         * Sends Verified Access logs to Amazon S3.
         */
        s3?: outputs.ec2.VerifiedAccessInstanceVerifiedAccessLogsS3Properties;
    }

    /**
     * Sends Verified Access logs to CloudWatch Logs.
     */
    export interface VerifiedAccessInstanceVerifiedAccessLogsCloudWatchLogsProperties {
        /**
         * Indicates whether logging is enabled.
         */
        enabled?: boolean;
        /**
         * The ID of the CloudWatch Logs log group.
         */
        logGroup?: string;
    }

    /**
     * Sends Verified Access logs to Kinesis.
     */
    export interface VerifiedAccessInstanceVerifiedAccessLogsKinesisDataFirehoseProperties {
        /**
         * The ID of the delivery stream.
         */
        deliveryStream?: string;
        /**
         * Indicates whether logging is enabled.
         */
        enabled?: boolean;
    }

    /**
     * Sends Verified Access logs to Amazon S3.
     */
    export interface VerifiedAccessInstanceVerifiedAccessLogsS3Properties {
        /**
         * The bucket name.
         */
        bucketName?: string;
        /**
         * The ID of the AWS account that owns the Amazon S3 bucket.
         */
        bucketOwner?: string;
        /**
         * Indicates whether logging is enabled.
         */
        enabled?: boolean;
        /**
         * The bucket prefix.
         */
        prefix?: string;
    }

    /**
     * A Verified Access Trust Provider.
     */
    export interface VerifiedAccessInstanceVerifiedAccessTrustProvider {
        /**
         * The description of trust provider.
         */
        description?: string;
        /**
         * The type of device-based trust provider.
         */
        deviceTrustProviderType?: string;
        /**
         * The type of trust provider (user- or device-based).
         */
        trustProviderType?: string;
        /**
         * The type of user-based trust provider.
         */
        userTrustProviderType?: string;
        /**
         * The ID of the trust provider.
         */
        verifiedAccessTrustProviderId?: string;
    }

    /**
     * The options for device identity based trust providers.
     */
    export interface VerifiedAccessTrustProviderDeviceOptions {
        /**
         * URL Verified Access will use to verify authenticity of the device tokens.
         */
        publicSigningKeyUrl?: string;
        /**
         * The ID of the tenant application with the device-identity provider.
         */
        tenantId?: string;
    }

    /**
     * The OpenID Connect details for an oidc -type, user-identity based trust provider.
     */
    export interface VerifiedAccessTrustProviderOidcOptions {
        /**
         * The OIDC authorization endpoint.
         */
        authorizationEndpoint?: string;
        /**
         * The client identifier.
         */
        clientId?: string;
        /**
         * The client secret.
         */
        clientSecret?: string;
        /**
         * The OIDC issuer.
         */
        issuer?: string;
        /**
         * OpenID Connect (OIDC) scopes are used by an application during authentication to authorize access to details of a user. Each scope returns a specific set of user attributes.
         */
        scope?: string;
        /**
         * The OIDC token endpoint.
         */
        tokenEndpoint?: string;
        /**
         * The OIDC user info endpoint.
         */
        userInfoEndpoint?: string;
    }

    export interface VpnConnectionVpnTunnelOptionsSpecification {
        /**
         * The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway.
         *
         * Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
         */
        preSharedKey?: string;
        /**
         * The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.
         *
         * Constraints: A size /30 CIDR block from the `169.254.0.0/16` range. The following CIDR blocks are reserved and cannot be used:
         *
         * - `169.254.0.0/30`
         * - `169.254.1.0/30`
         * - `169.254.2.0/30`
         * - `169.254.3.0/30`
         * - `169.254.4.0/30`
         * - `169.254.5.0/30`
         * - `169.254.169.252/30`
         */
        tunnelInsideCidr?: string;
    }

}

export namespace ecr {
    /**
     * An object representing the replication configuration for a registry.
     */
    export interface ReplicationConfiguration {
        /**
         * An array of objects representing the replication rules for a replication configuration. A replication configuration may contain a maximum of 10 rules.
         */
        rules: outputs.ecr.ReplicationConfigurationReplicationRule[];
    }

    /**
     * An array of objects representing the details of a replication destination.
     */
    export interface ReplicationConfigurationReplicationDestination {
        /**
         * The Region to replicate to.
         */
        region: string;
        /**
         * The AWS account ID of the Amazon ECR private registry to replicate to. When configuring cross-Region replication within your own registry, specify your own account ID.
         */
        registryId: string;
    }

    /**
     * An array of objects representing the details of a replication destination.
     */
    export interface ReplicationConfigurationReplicationRule {
        /**
         * An array of objects representing the details of a replication destination.
         */
        destinations: outputs.ecr.ReplicationConfigurationReplicationDestination[];
        /**
         * An array of objects representing the details of a repository filter.
         */
        repositoryFilters?: outputs.ecr.ReplicationConfigurationRepositoryFilter[];
    }

    /**
     * An array of objects representing the details of a repository filter.
     */
    export interface ReplicationConfigurationRepositoryFilter {
        /**
         * The repository filter details. When the `PREFIX_MATCH` filter type is specified, this value is required and should be the repository name prefix to configure replication for.
         */
        filter: string;
        /**
         * The repository filter type. The only supported value is `PREFIX_MATCH` , which is a repository name prefix specified with the `filter` parameter.
         */
        filterType: enums.ecr.ReplicationConfigurationFilterType;
    }

    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest. By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
     *
     * For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
     */
    export interface RepositoryCreationTemplateEncryptionConfiguration {
        /**
         * The encryption type to use.
         *
         * If you use the `KMS` encryption type, the contents of the repository will be encrypted using server-side encryption with AWS Key Management Service key stored in AWS KMS . When you use AWS KMS to encrypt your data, you can either use the default AWS managed AWS KMS key for Amazon ECR, or specify your own AWS KMS key, which you already created. For more information, see [Protecting data using server-side encryption with an AWS KMS key stored in AWS Key Management Service (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the *Amazon Simple Storage Service Console Developer Guide* .
         *
         * If you use the `AES256` encryption type, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256 encryption algorithm. For more information, see [Protecting data using server-side encryption with Amazon S3-managed encryption keys (SSE-S3)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the *Amazon Simple Storage Service Console Developer Guide* .
         */
        encryptionType: enums.ecr.RepositoryCreationTemplateEncryptionType;
        /**
         * If you use the `KMS` encryption type, specify the AWS KMS key to use for encryption. The alias, key ID, or full ARN of the AWS KMS key can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed AWS KMS key for Amazon ECR will be used.
         */
        kmsKey?: string;
    }

    /**
     * An array of key-value pairs to apply to this resource.
     */
    export interface RepositoryCreationTemplateTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.
     *  By default, when no encryption configuration is set or the ``AES256`` encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.
     *  For more control over the encryption of the contents of your repository, you can use server-side encryption with KMSlong key stored in KMSlong (KMS) to encrypt your images. For more information, see [Amazon ECR encryption at rest](https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html) in the *Amazon Elastic Container Registry User Guide*.
     */
    export interface RepositoryEncryptionConfiguration {
        /**
         * The encryption type to use.
         *  If you use the ``KMS`` encryption type, the contents of the repository will be encrypted using server-side encryption with KMSlong key stored in KMS. When you use KMS to encrypt your data, you can either use the default AWS managed KMS key for Amazon ECR, or specify your own KMS key, which you already created. For more information, see [Protecting data using server-side encryption with an key stored in (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the *Amazon Simple Storage Service Console Developer Guide*.
         *  If you use the ``AES256`` encryption type, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts the images in the repository using an AES-256 encryption algorithm. For more information, see [Protecting data using server-side encryption with Amazon S3-managed encryption keys (SSE-S3)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html) in the *Ama
         */
        encryptionType: enums.ecr.RepositoryEncryptionType;
        /**
         * If you use the ``KMS`` encryption type, specify the KMS key to use for encryption. The alias, key ID, or full ARN of the KMS key can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed KMS key for Amazon ECR will be used.
         */
        kmsKey?: string;
    }

    /**
     * The image scanning configuration for a repository.
     */
    export interface RepositoryImageScanningConfiguration {
        /**
         * The setting that determines whether images are scanned after being pushed to a repository. If set to ``true``, images will be scanned after being pushed. If this parameter is not specified, it will default to ``false`` and images will not be scanned unless a scan is manually started.
         */
        scanOnPush?: boolean;
    }

    /**
     * The ``LifecyclePolicy`` property type specifies a lifecycle policy. For information about lifecycle policy syntax, see [Lifecycle policy template](https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html) in the *Amazon ECR User Guide*.
     */
    export interface RepositoryLifecyclePolicy {
        /**
         * The JSON repository policy text to apply to the repository.
         */
        lifecyclePolicyText?: string;
        /**
         * The AWS account ID associated with the registry that contains the repository. If you do
         *  not specify a registry, the default registry is assumed.
         */
        registryId?: string;
    }

}

export namespace ecs {
    export interface CapacityProviderAutoScalingGroupProvider {
        /**
         * The Amazon Resource Name (ARN) that identifies the Auto Scaling group, or the Auto Scaling group name.
         */
        autoScalingGroupArn: string;
        /**
         * The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
         */
        managedDraining?: enums.ecs.CapacityProviderAutoScalingGroupProviderManagedDraining;
        /**
         * The managed scaling settings for the Auto Scaling group capacity provider.
         */
        managedScaling?: outputs.ecs.CapacityProviderManagedScaling;
        /**
         * The managed termination protection setting to use for the Auto Scaling group capacity provider. This determines whether the Auto Scaling group has managed termination protection. The default is off.
         *
         * > When using managed termination protection, managed scaling must also be used otherwise managed termination protection doesn't work. 
         *
         * When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions on as well. For more information, see [Instance Protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection) in the *AWS Auto Scaling User Guide* .
         *
         * When managed termination protection is off, your Amazon EC2 instances aren't protected from termination when the Auto Scaling group scales in.
         */
        managedTerminationProtection?: enums.ecs.CapacityProviderAutoScalingGroupProviderManagedTerminationProtection;
    }

    /**
     * The managed scaling settings for the Auto Scaling group capacity provider.
     */
    export interface CapacityProviderManagedScaling {
        /**
         * The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value of `300` seconds is used.
         */
        instanceWarmupPeriod?: number;
        /**
         * The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time. The scale in process is not affected by this parameter. If this parameter is omitted, the default value of `10000` is used.
         */
        maximumScalingStepSize?: number;
        /**
         * The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time. The scale in process is not affected by this parameter If this parameter is omitted, the default value of `1` is used.
         *
         * When additional capacity is required, Amazon ECS will scale up the minimum scaling step size even if the actual demand is less than the minimum scaling step size.
         *
         * If you use a capacity provider with an Auto Scaling group configured with more than one Amazon EC2 instance type or Availability Zone, Amazon ECS will scale up by the exact minimum scaling step size value and will ignore both the maximum scaling step size as well as the capacity demand.
         */
        minimumScalingStepSize?: number;
        /**
         * Determines whether to use managed scaling for the capacity provider.
         */
        status?: enums.ecs.CapacityProviderManagedScalingStatus;
        /**
         * The target capacity utilization as a percentage for the capacity provider. The specified value must be greater than `0` and less than or equal to `100` . For example, if you want the capacity provider to maintain 10% spare capacity, then that means the utilization is 90%, so use a `targetCapacity` of `90` . The default value of `100` percent results in the Amazon EC2 instances in your Auto Scaling group being completely used.
         */
        targetCapacity?: number;
    }

    export interface ClusterCapacityProviderAssociationsCapacityProviderStrategy {
        base?: number;
        capacityProvider: enums.ecs.ClusterCapacityProviderAssociationsCapacityProvider | string;
        weight?: number;
    }

    /**
     * The ``CapacityProviderStrategyItem`` property specifies the details of the default capacity provider strategy for the cluster. When services or tasks are run in the cluster with no launch type or capacity provider strategy specified, the default capacity provider strategy is used.
     */
    export interface ClusterCapacityProviderStrategyItem {
        /**
         * The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0`` is used.
         */
        base?: number;
        /**
         * The short name of the capacity provider.
         */
        capacityProvider?: string;
        /**
         * The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied.
         *  If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail.
         *  An example scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of ``1``, then when the ``base`` is satisfied, the tasks will be split evenly across the two capacity providers. Using that same logic, if you specify a weight of ``1`` for *capacityProviderA* and a weight of ``4`` for *capacityProviderB*, then for every one task that's run using *capacityProviderA*, four tasks would use *capacityProviderB*.
         */
        weight?: number;
    }

    /**
     * The execute command configuration for the cluster.
     */
    export interface ClusterConfiguration {
        /**
         * The details of the execute command configuration.
         */
        executeCommandConfiguration?: outputs.ecs.ClusterExecuteCommandConfiguration;
    }

    /**
     * The details of the execute command configuration.
     */
    export interface ClusterExecuteCommandConfiguration {
        /**
         * Specify an KMSlong key ID to encrypt the data between the local client and the container.
         */
        kmsKeyId?: string;
        /**
         * The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When ``logging=OVERRIDE`` is specified, a ``logConfiguration`` must be provided.
         */
        logConfiguration?: outputs.ecs.ClusterExecuteCommandLogConfiguration;
        /**
         * The log setting to use for redirecting logs for your execute command results. The following log settings are available.
         *   +   ``NONE``: The execute command session is not logged.
         *   +   ``DEFAULT``: The ``awslogs`` configuration in the task definition is used. If no logging parameter is specified, it defaults to this value. If no ``awslogs`` log driver is configured in the task definition, the output won't be logged.
         *   +   ``OVERRIDE``: Specify the logging details as a part of ``logConfiguration``. If the ``OVERRIDE`` logging option is specified, the ``logConfiguration`` is required.
         */
        logging?: string;
    }

    /**
     * The log configuration for the results of the execute command actions. The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
     */
    export interface ClusterExecuteCommandLogConfiguration {
        /**
         * Determines whether to use encryption on the CloudWatch logs. If not specified, encryption will be off.
         */
        cloudWatchEncryptionEnabled?: boolean;
        /**
         * The name of the CloudWatch log group to send logs to.
         *   The CloudWatch log group must already be created.
         */
        cloudWatchLogGroupName?: string;
        /**
         * The name of the S3 bucket to send logs to.
         *   The S3 bucket must already be created.
         */
        s3BucketName?: string;
        /**
         * Determines whether to use encryption on the S3 logs. If not specified, encryption is not used.
         */
        s3EncryptionEnabled?: boolean;
        /**
         * An optional folder in the S3 bucket to place logs in.
         */
        s3KeyPrefix?: string;
    }

    /**
     * Use this parameter to set a default Service Connect namespace. After you set a default Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as client services in the namespace. This setting only applies to new services that set the ``enabled`` parameter to ``true`` in the ``ServiceConnectConfiguration``. You can set the namespace of each service individually in the ``ServiceConnectConfiguration`` to override this default parameter.
     *  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ClusterServiceConnectDefaults {
        /**
         * The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace that's used when you create a service and don't specify a Service Connect configuration. The namespace name can include up to 1024 characters. The name is case-sensitive. The name can't include hyphens (-), tilde (~), greater than (>), less than (<), or slash (/).
         *  If you enter an existing namespace name or ARN, then that namespace will be used. Any namespace type is supported. The namespace must be in this account and this AWS Region.
         *  If you enter a new name, a CMAPlong namespace will be created. Amazon ECS creates a CMAP namespace with the "API calls" method of instance discovery only. This instance discovery method is the "HTTP" namespace type in the CLIlong. Other types of instance discovery aren't used by Service Connect.
         *  If you update the cluster with an empty string ``""`` for the namespace name, the cluster configuration for Service Connect is removed. Note that the namespace will remain in CMAP and must be deleted separately.
         *  For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
         */
        namespace?: string;
    }

    /**
     * The settings to use when creating a cluster. This parameter is used to turn on CloudWatch Container Insights for a cluster.
     */
    export interface ClusterSettings {
        /**
         * The name of the cluster setting. The value is ``containerInsights`` .
         */
        name?: string;
        /**
         * The value to set for the cluster setting. The supported values are ``enabled`` and ``disabled``. 
         *  If you set ``name`` to ``containerInsights`` and ``value`` to ``enabled``, CloudWatch Container Insights will be on for the cluster, otherwise it will be off unless the ``containerInsights`` account setting is turned on. If a cluster value is specified, it will override the ``containerInsights`` value set with [PutAccountSetting](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSetting.html) or [PutAccountSettingDefault](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PutAccountSettingDefault.html).
         */
        value?: string;
    }

    /**
     * An object representing the networking details for a task or service. For example ``awsvpcConfiguration={subnets=["subnet-12344321"],securityGroups=["sg-12344321"]}``
     */
    export interface ServiceAwsVpcConfiguration {
        /**
         * Whether the task's elastic network interface receives a public IP address. The default value is ``DISABLED``.
         */
        assignPublicIp?: enums.ecs.ServiceAwsVpcConfigurationAssignPublicIp;
        /**
         * The IDs of the security groups associated with the task or service. If you don't specify a security group, the default security group for the VPC is used. There's a limit of 5 security groups that can be specified per ``AwsVpcConfiguration``.
         *   All specified security groups must be from the same VPC.
         */
        securityGroups?: string[];
        /**
         * The IDs of the subnets associated with the task or service. There's a limit of 16 subnets that can be specified per ``AwsVpcConfiguration``.
         *   All specified subnets must be from the same VPC.
         */
        subnets?: string[];
    }

    /**
     * The details of a capacity provider strategy. A capacity provider strategy can be set when using the ``RunTask`` or ``CreateService`` APIs or as the default capacity provider strategy for a cluster with the ``CreateCluster`` API.
     *  Only capacity providers that are already associated with a cluster and have an ``ACTIVE`` or ``UPDATING`` status can be used in a capacity provider strategy. The ``PutClusterCapacityProviders`` API is used to associate a capacity provider with a cluster.
     *  If specifying a capacity provider that uses an Auto Scaling group, the capacity provider must already be created. New Auto Scaling group capacity providers can be created with the ``CreateCapacityProvider`` API operation.
     *  To use an FARGATElong capacity provider, specify either the ``FARGATE`` or ``FARGATE_SPOT`` capacity providers. The FARGATElong capacity providers are available to all accounts and only need to be associated with a cluster to be used in a capacity provider strategy.
     */
    export interface ServiceCapacityProviderStrategyItem {
        /**
         * The *base* value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a *base* defined. If no value is specified, the default value of ``0`` is used.
         */
        base?: number;
        /**
         * The short name of the capacity provider.
         */
        capacityProvider?: string;
        /**
         * The *weight* value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The ``weight`` value is taken into consideration after the ``base`` value, if defined, is satisfied.
         *  If no ``weight`` value is specified, the default value of ``0`` is used. When multiple capacity providers are specified within a capacity provider strategy, at least one of the capacity providers must have a weight value greater than zero and any capacity providers with a weight of ``0`` can't be used to place tasks. If you specify multiple capacity providers in a strategy that all have a weight of ``0``, any ``RunTask`` or ``CreateService`` actions using the capacity provider strategy will fail.
         *  An example scenario for using weights is defining a strategy that contains two capacity providers and both have a weight of ``1``, then when the ``base`` is satisfied, the tasks will be split evenly across the two capacity providers. Using that same logic, if you specify a weight of ``1`` for *capacityProviderA* and a weight of ``4`` for *capacityProviderB*, then for every one task that's run using *capacityProviderA*, four tasks would use *capacityProviderB*.
         */
        weight?: number;
    }

    /**
     * Each alias ("endpoint") is a fully-qualified name and port number that other tasks ("clients") can use to connect to this service.
     *  Each name and port mapping must be unique within the namespace.
     *  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServiceConnectClientAlias {
        /**
         * The ``dnsName`` is the name that you use in the applications of client tasks to connect to this service. The name must be a valid DNS name but doesn't need to be fully-qualified. The name can include up to 127 characters. The name can include lowercase letters, numbers, underscores (_), hyphens (-), and periods (.). The name can't start with a hyphen.
         *  If this parameter isn't specified, the default value of ``discoveryName.namespace`` is used. If the ``discoveryName`` isn't specified, the port mapping name from the task definition is used in ``portName.namespace``.
         *  To avoid changing your applications in client Amazon ECS services, set this to the same name that the client application uses by default. For example, a few common names are ``database``, ``db``, or the lowercase name of a database, such as ``mysql`` or ``redis``. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        dnsName?: string;
        /**
         * The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
         *  To avoid changing your applications in client Amazon ECS services, set this to the same port that the client application uses by default. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        port: number;
    }

    /**
     * The Service Connect configuration of your Amazon ECS service. The configuration for this service to discover and connect to services, and be discovered by, and connected from, other services within a namespace.
     *  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServiceConnectConfiguration {
        /**
         * Specifies whether to use Service Connect with this service.
         */
        enabled: boolean;
        /**
         * The log configuration for the container. This parameter maps to ``LogConfig`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--log-driver`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/).
         *  By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For more information about the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
         *  Understand the following when specifying a log configuration for your containers.
         *   +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
         *  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
         *  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``.
         *   +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
         *   +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
         *   +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
         */
        logConfiguration?: outputs.ecs.ServiceLogConfiguration;
        /**
         * The namespace name or full Amazon Resource Name (ARN) of the CMAPlong namespace for use with Service Connect. The namespace must be in the same AWS Region as the Amazon ECS service and cluster. The type of namespace doesn't affect Service Connect. For more information about CMAPlong, see [Working with Services](https://docs.aws.amazon.com/cloud-map/latest/dg/working-with-services.html) in the *Developer Guide*.
         */
        namespace?: string;
        /**
         * The list of Service Connect service objects. These are names and aliases (also known as endpoints) that are used by other Amazon ECS services to connect to this service. 
         *  This field is not required for a "client" Amazon ECS service that's a member of a namespace only to connect to other services within the namespace. An example of this would be a frontend application that accepts incoming requests from either a load balancer that's attached to the service or by other means.
         *  An object selects a port from the task definition, assigns a name for the CMAPlong service, and a list of aliases (endpoints) and ports for client applications to refer to this service.
         */
        services?: outputs.ecs.ServiceConnectService[];
    }

    /**
     * The Service Connect service object configuration. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServiceConnectService {
        /**
         * The list of client aliases for this Service Connect service. You use these to assign names that can be used by client applications. The maximum number of client aliases that you can have in this list is 1.
         *  Each alias ("endpoint") is a fully-qualified name and port number that other Amazon ECS tasks ("clients") can use to connect to this service.
         *  Each name and port mapping must be unique within the namespace.
         *  For each ``ServiceConnectService``, you must provide at least one ``clientAlias`` with one ``port``.
         */
        clientAliases?: outputs.ecs.ServiceConnectClientAlias[];
        /**
         * The ``discoveryName`` is the name of the new CMAP service that Amazon ECS creates for this Amazon ECS service. This must be unique within the CMAP namespace. The name can contain up to 64 characters. The name can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
         *  If the ``discoveryName`` isn't specified, the port mapping name from the task definition is used in ``portName.namespace``.
         */
        discoveryName?: string;
        /**
         * The port number for the Service Connect proxy to listen on.
         *  Use the value of this field to bypass the proxy for traffic on the port number specified in the named ``portMapping`` in the task definition of this application, and then use it in your VPC security groups to allow traffic into the proxy for this Amazon ECS service.
         *  In ``awsvpc`` mode and Fargate, the default value is the container port number. The container port number is in the ``portMapping`` in the task definition. In bridge mode, the default value is the ephemeral port of the Service Connect proxy.
         */
        ingressPortOverride?: number;
        /**
         * The ``portName`` must match the name of one of the ``portMappings`` from all the containers in the task definition of this Amazon ECS service.
         */
        portName: string;
        /**
         * A reference to an object that represents the configured timeouts for Service Connect.
         */
        timeout?: outputs.ecs.ServiceTimeoutConfiguration;
        /**
         * A reference to an object that represents a Transport Layer Security (TLS) configuration.
         */
        tls?: outputs.ecs.ServiceConnectTlsConfiguration;
    }

    /**
     * An object that represents the AWS Private Certificate Authority certificate.
     */
    export interface ServiceConnectTlsCertificateAuthority {
        /**
         * The ARN of the AWS Private Certificate Authority certificate.
         */
        awsPcaAuthorityArn?: string;
    }

    /**
     * An object that represents the configuration for Service Connect TLS.
     */
    export interface ServiceConnectTlsConfiguration {
        /**
         * The signer certificate authority.
         */
        issuerCertificateAuthority: outputs.ecs.ServiceConnectTlsCertificateAuthority;
        /**
         * The AWS Key Management Service key.
         */
        kmsKey?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that's associated with the Service Connect TLS.
         */
        roleArn?: string;
    }

    /**
     * One of the methods which provide a way for you to quickly identify when a deployment has failed, and then to optionally roll back the failure to the last working deployment.
     *  When the alarms are generated, Amazon ECS sets the service deployment to failed. Set the rollback parameter to have Amazon ECS to roll back your service to the last completed deployment after a failure.
     *  You can only use the ``DeploymentAlarms`` method to detect failures when the ``DeploymentController`` is set to ``ECS`` (rolling update).
     *  For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServiceDeploymentAlarms {
        /**
         * One or more CloudWatch alarm names. Use a "," to separate the alarms.
         */
        alarmNames: string[];
        /**
         * Determines whether to use the CloudWatch alarm option in the service deployment process.
         */
        enable: boolean;
        /**
         * Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is used, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
         */
        rollback: boolean;
    }

    /**
     * The deployment circuit breaker can only be used for services using the rolling update (``ECS``) deployment type.
     *   The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If it is turned on, a service deployment will transition to a failed state and stop launching new tasks. You can also configure Amazon ECS to roll back your service to the last completed deployment after a failure. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*.
     *  For more information about API failure reasons, see [API failure reasons](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/api_failures_messages.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServiceDeploymentCircuitBreaker {
        /**
         * Determines whether to use the deployment circuit breaker logic for the service.
         */
        enable: boolean;
        /**
         * Determines whether to configure Amazon ECS to roll back the service if a service deployment fails. If rollback is on, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.
         */
        rollback: boolean;
    }

    /**
     * The ``DeploymentConfiguration`` property specifies optional deployment parameters that control how many tasks run during the deployment and the ordering of stopping and starting tasks.
     */
    export interface ServiceDeploymentConfiguration {
        /**
         * Information about the CloudWatch alarms.
         */
        alarms?: outputs.ecs.ServiceDeploymentAlarms;
        /**
         * The deployment circuit breaker can only be used for services using the rolling update (``ECS``) deployment type.
         *   The *deployment circuit breaker* determines whether a service deployment will fail if the service can't reach a steady state. If you use the deployment circuit breaker, a service deployment will transition to a failed state and stop launching new tasks. If you use the rollback option, when a service deployment fails, the service is rolled back to the last deployment that completed successfully. For more information, see [Rolling update](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html) in the *Amazon Elastic Container Service Developer Guide*
         */
        deploymentCircuitBreaker?: outputs.ecs.ServiceDeploymentCircuitBreaker;
        /**
         * If a service is using the rolling update (``ECS``) deployment type, the ``maximumPercent`` parameter represents an upper limit on the number of your service's tasks that are allowed in the ``RUNNING`` or ``PENDING`` state during a deployment, as a percentage of the ``desiredCount`` (rounded down to the nearest integer). This parameter enables you to define the deployment batch size. For example, if your service is using the ``REPLICA`` service scheduler and has a ``desiredCount`` of four tasks and a ``maximumPercent`` value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default ``maximumPercent`` value for a service using the ``REPLICA`` service scheduler is 200%.
         *  If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and tasks that use the EC2 launch type, the *maximum percent* value is set to the default value and is used to define the upper limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state. If the tasks in the service use the Fargate launch type, the maximum percent value is not used, although it is returned when describing your service.
         */
        maximumPercent?: number;
        /**
         * If a service is using the rolling update (``ECS``) deployment type, the ``minimumHealthyPercent`` represents a lower limit on the number of your service's tasks that must remain in the ``RUNNING`` state during a deployment, as a percentage of the ``desiredCount`` (rounded up to the nearest integer). This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a ``desiredCount`` of four tasks and a ``minimumHealthyPercent`` of 50%, the service scheduler may stop two existing tasks to free up cluster capacity before starting two new tasks. 
         *  For services that *do not* use a load balancer, the following should be noted:
         *   +  A service is considered healthy if all essential containers within the tasks in the service pass their health checks.
         *   +  If a task has no essential containers with a health check defined, the service scheduler will wait for 40 seconds after a task reaches a ``RUNNING`` state before the task is counted towards the minimum healthy percent total.
         *   +  If a task has one or more essential containers with a health check defined, the service scheduler will wait for the task to reach a healthy status before counting it towards the minimum healthy percent total. A task is considered healthy when all essential containers within the task have passed their health checks. The amount of time the service scheduler can wait for is determined by the container health check settings. 
         *   
         *  For services that *do* use a load balancer, the following should be noted:
         *   +  If a task has no essential containers with a health check defined, the service scheduler will wait for the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
         *   +  If a task has an essential container with a health check defined, the service scheduler will wait for both the task to reach a healthy status and the load balancer target group health check to return a healthy status before counting the task towards the minimum healthy percent total.
         *   
         *  If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the EC2 launch type, the *minimum healthy percent* value is set to the default value and is used to define the lower limit on the number of the tasks in the service that remain in the ``RUNNING`` state while the container instances are in the ``DRAINING`` state. If a service is using either the blue/green (``CODE_DEPLOY``) or ``EXTERNAL`` deployment types and is running tasks that use the Fargate launch type, the minimum healthy percent value is not used, although it is returned when describing your service.
         */
        minimumHealthyPercent?: number;
    }

    /**
     * The deployment controller to use for the service. For more information, see [Amazon ECS deployment types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServiceDeploymentController {
        /**
         * The deployment controller type to use. There are three deployment controller types available:
         *   + ECS The rolling update (ECS) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the DeploymentConfiguration. + CODE_DEPLOY The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment model powered by , which allows you to verify a new deployment of a service before sending production traffic to it. + EXTERNAL The external (EXTERNAL) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.
         */
        type?: enums.ecs.ServiceDeploymentControllerType;
    }

    /**
     * The tag specifications of an Amazon EBS volume.
     */
    export interface ServiceEbsTagSpecification {
        /**
         * Determines whether to propagate the tags from the task definition to 
         * the Amazon EBS volume. Tags can only propagate to a ``SERVICE`` specified in 
         * ``ServiceVolumeConfiguration``. If no value is specified, the tags aren't 
         * propagated.
         */
        propagateTags?: enums.ecs.ServiceEbsTagSpecificationPropagateTags;
        /**
         * The type of volume resource.
         */
        resourceType: string;
        /**
         * The tags applied to this Amazon EBS volume. ``AmazonECSCreated`` and ``AmazonECSManaged`` are reserved tags that can't be used.
         */
        tags?: outputs.ecs.ServiceTag[];
    }

    /**
     * The ``LoadBalancer`` property specifies details on a load balancer that is used with a service.
     *  If the service is using the ``CODE_DEPLOY`` deployment controller, the service is required to use either an Application Load Balancer or Network Load Balancer. When you are creating an ACDlong deployment group, you specify two target groups (referred to as a ``targetGroupPair``). Each target group binds to a separate task set in the deployment. The load balancer can also have up to two listeners, a required listener for production traffic and an optional listener that allows you to test new revisions of the service before routing production traffic to it.
     *  Services with tasks that use the ``awsvpc`` network mode (for example, those with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers are not supported. Also, when you create any target groups for these services, you must choose ``ip`` as the target type, not ``instance``. Tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an Amazon EC2 instance.
     */
    export interface ServiceLoadBalancer {
        /**
         * The name of the container (as it appears in a container definition) to associate with the load balancer.
         *  You need to specify the container name when configuring the target group for an Amazon ECS load balancer.
         */
        containerName?: string;
        /**
         * The port on the container to associate with the load balancer. This port must correspond to a ``containerPort`` in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they're launched on must allow ingress traffic on the ``hostPort`` of the port mapping.
         */
        containerPort?: number;
        /**
         * The name of the load balancer to associate with the Amazon ECS service or task set.
         *  If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter should be omitted.
         */
        loadBalancerName?: string;
        /**
         * The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set.
         *  A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. 
         *  For services using the ``ECS`` deployment controller, you can specify one or multiple target groups. For more information, see [Registering multiple target groups with a service](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html) in the *Amazon Elastic Container Service Developer Guide*.
         *  For services using the ``CODE_DEPLOY`` deployment controller, you're required to define two target groups for the load balancer. For more information, see [Blue/green deployment with CodeDeploy](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html) in the *Amazon Elastic Container Service Developer Guide*.
         *   If your service's task definition uses the ``awsvpc`` network mode, you must choose ``ip`` as the target type, not ``instance``. Do this when creating your target groups because tasks that use the ``awsvpc`` network mode are associated with an elastic network interface, not an Amazon EC2 instance. This network mode is required for the Fargate launch type.
         */
        targetGroupArn?: string;
    }

    /**
     * The log configuration for the container. This parameter maps to ``LogConfig`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--log-driver`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/run/).
     *  By default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For more information about the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
     *  Understand the following when specifying a log configuration for your containers.
     *   +  Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon. Additional log drivers may be available in future releases of the Amazon ECS container agent.
     *  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
     *  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``.
     *   +  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance.
     *   +  For tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS container agent configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
     *   +  For tasks that are on FARGATElong, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.
     */
    export interface ServiceLogConfiguration {
        /**
         * The log driver to use for the container.
         *  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
         *  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``.
         *  For more information about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
         *  For more information about using the ``awsfirelens`` log driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
         *   If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
         */
        logDriver?: string;
        /**
         * The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
         */
        options?: {[key: string]: string};
        /**
         * The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        secretOptions?: outputs.ecs.ServiceSecret[];
    }

    /**
     * The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service.
     *  Many of these parameters map 1:1 with the Amazon EBS ``CreateVolume`` API request parameters.
     */
    export interface ServiceManagedEbsVolumeConfiguration {
        /**
         * Indicates whether the volume should be encrypted. If no value is specified, encryption is turned on by default. This parameter maps 1:1 with the ``Encrypted`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
         */
        encrypted?: boolean;
        /**
         * The Linux filesystem type for the volume. For volumes created from a snapshot, you must specify the same filesystem type that the volume was using when the snapshot was created. If there is a filesystem type mismatch, the task will fail to start.
         *  The available filesystem types are
         *  ``ext3``, ``ext4``, and ``xfs``. If no value is specified, the ``xfs`` filesystem type is used by default.
         */
        filesystemType?: string;
        /**
         * The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
         *  The following are the supported values for each volume type.
         *   +   ``gp3``: 3,000 - 16,000 IOPS
         *   +   ``io1``: 100 - 64,000 IOPS
         *   +   ``io2``: 100 - 256,000 IOPS
         *   
         *  This parameter is required for ``io1`` and ``io2`` volume types. The default for ``gp3`` volumes is ``3,000 IOPS``. This parameter is not supported for ``st1``, ``sc1``, or ``standard`` volume types.
         *  This parameter maps 1:1 with the ``Iops`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
         */
        iops?: number;
        /**
         * The Amazon Resource Name (ARN) identifier of the AWS Key Management Service key to use for Amazon EBS encryption. When encryption is turned on and no AWS Key Management Service key is specified, the default AWS managed key for Amazon EBS volumes is used. This parameter maps 1:1 with the ``KmsKeyId`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
         *    AWS authenticates the AWS Key Management Service key asynchronously. Therefore, if you specify an ID, alias, or ARN that is invalid, the action can appear to complete, but eventually fails.
         */
        kmsKeyId?: string;
        /**
         * The ARN of the IAM role to associate with this volume. This is the Amazon ECS infrastructure IAM role that is used to manage your AWS infrastructure. We recommend using the Amazon ECS-managed ``AmazonECSInfrastructureRolePolicyForVolumes`` IAM policy with this role. For more information, see [Amazon ECS infrastructure IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html) in the *Amazon ECS Developer Guide*.
         */
        roleArn: string;
        /**
         * The size of the volume in GiB. You must specify either a volume size or a snapshot ID. If you specify a snapshot ID, the snapshot size is used for the volume size by default. You can optionally specify a volume size greater than or equal to the snapshot size. This parameter maps 1:1 with the ``Size`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
         *  The following are the supported volume size values for each volume type.
         *   +   ``gp2`` and ``gp3``: 1-16,384
         *   +   ``io1`` and ``io2``: 4-16,384
         *   +   ``st1`` and ``sc1``: 125-16,384
         *   +   ``standard``: 1-1,024
         */
        sizeInGiB?: number;
        /**
         * The snapshot that Amazon ECS uses to create the volume. You must specify either a snapshot ID or a volume size. This parameter maps 1:1 with the ``SnapshotId`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
         */
        snapshotId?: string;
        /**
         * The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This parameter maps 1:1 with the ``TagSpecifications.N`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
         */
        tagSpecifications?: outputs.ecs.ServiceEbsTagSpecification[];
        /**
         * The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s. This parameter maps 1:1 with the ``Throughput`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*.
         *   This parameter is only supported for the ``gp3`` volume type.
         */
        throughput?: number;
        /**
         * The volume type. This parameter maps 1:1 with the ``VolumeType`` parameter of the [CreateVolume API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVolume.html) in the *Amazon EC2 API Reference*. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) in the *Amazon EC2 User Guide*.
         *  The following are the supported volume types.
         *   +  General Purpose SSD: ``gp2``|``gp3`` 
         *   +  Provisioned IOPS SSD: ``io1``|``io2`` 
         *   +  Throughput Optimized HDD: ``st1`` 
         *   +  Cold HDD: ``sc1`` 
         *   +  Magnetic: ``standard`` 
         *   The magnetic volume type is not supported on Fargate.
         */
        volumeType?: string;
    }

    /**
     * The ``NetworkConfiguration`` property specifies an object representing the network configuration for a task or service.
     */
    export interface ServiceNetworkConfiguration {
        /**
         * The VPC subnets and security groups that are associated with a task.
         *   All specified subnets and security groups must be from the same VPC.
         */
        awsvpcConfiguration?: outputs.ecs.ServiceAwsVpcConfiguration;
    }

    /**
     * The ``PlacementConstraint`` property specifies an object representing a constraint on task placement in the task definition. For more information, see [Task Placement Constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServicePlacementConstraint {
        /**
         * A cluster query language expression to apply to the constraint. The expression can have a maximum length of 2000 characters. You can't specify an expression if the constraint type is ``distinctInstance``. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        expression?: string;
        /**
         * The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular group is running on a different container instance. Use ``memberOf`` to restrict the selection to a group of valid candidates.
         */
        type: enums.ecs.ServicePlacementConstraintType;
    }

    /**
     * The ``PlacementStrategy`` property specifies the task placement strategy for a task or service. For more information, see [Task Placement Strategies](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-strategies.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServicePlacementStrategy {
        /**
         * The field to apply the placement strategy against. For the ``spread`` placement strategy, valid values are ``instanceId`` (or ``host``, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as ``attribute:ecs.availability-zone``. For the ``binpack`` placement strategy, valid values are ``CPU`` and ``MEMORY``. For the ``random`` placement strategy, this field is not used.
         */
        field?: string;
        /**
         * The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates. The ``spread`` placement strategy spreads placement across available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy places tasks on available candidates that have the least available amount of the resource that's specified with the ``field`` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the task.
         */
        type: enums.ecs.ServicePlacementStrategyType;
    }

    /**
     * The ``ServiceRegistry`` property specifies details of the service registry. For more information, see [Service Discovery](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServiceRegistry {
        /**
         * The container name value to be used for your service discovery service. It's already specified in the task definition. If the task definition that your service task specifies uses the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and ``containerPort`` combination from the task definition. If the task definition that your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is used, you must specify either a ``containerName`` and ``containerPort`` combination or a ``port`` value. However, you can't specify both.
         */
        containerName?: string;
        /**
         * The port value to be used for your service discovery service. It's already specified in the task definition. If the task definition your service task specifies uses the ``bridge`` or ``host`` network mode, you must specify a ``containerName`` and ``containerPort`` combination from the task definition. If the task definition your service task specifies uses the ``awsvpc`` network mode and a type SRV DNS record is used, you must specify either a ``containerName`` and ``containerPort`` combination or a ``port`` value. However, you can't specify both.
         */
        containerPort?: number;
        /**
         * The port value used if your service discovery service specified an SRV record. This field might be used if both the ``awsvpc`` network mode and SRV records are used.
         */
        port?: number;
        /**
         * The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is CMAP. For more information, see [CreateService](https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html).
         */
        registryArn?: string;
    }

    /**
     * An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
     *   +  To inject sensitive data into your containers as environment variables, use the ``secrets`` container definition parameter.
     *   +  To reference sensitive information in the log configuration of a container, use the ``secretOptions`` container definition parameter.
     *   
     *  For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface ServiceSecret {
        /**
         * The name of the secret.
         */
        name: string;
        /**
         * The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
         *  For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
         *   If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
         */
        valueFrom: string;
    }

    /**
     * The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.
     *  The following basic restrictions apply to tags:
     *   +  Maximum number of tags per resource - 50
     *   +  For each resource, each tag key must be unique, and each tag key can have only one value.
     *   +  Maximum key length - 128 Unicode characters in UTF-8
     *   +  Maximum value length - 256 Unicode characters in UTF-8
     *   +  If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.
     *   +  Tag keys and values are case-sensitive.
     *   +  Do not use ``aws:``, ``AWS:``, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for AWS use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
     */
    export interface ServiceTag {
        /**
         * One part of a key-value pair that make up a tag. A ``key`` is a general label that acts like a category for more specific tag values.
         */
        key?: string;
        /**
         * The optional part of a key-value pair that make up a tag. A ``value`` acts as a descriptor within a tag category (key).
         */
        value?: string;
    }

    /**
     * An object that represents the timeout configurations for Service Connect.
     *   If ``idleTimeout`` is set to a time that is less than ``perRequestTimeout``, the connection will close when the ``idleTimeout`` is reached and not the ``perRequestTimeout``.
     */
    export interface ServiceTimeoutConfiguration {
        /**
         * The amount of time in seconds a connection will stay active while idle. A value of ``0`` can be set to disable ``idleTimeout``.
         *  The ``idleTimeout`` default for ``HTTP``/``HTTP2``/``GRPC`` is 5 minutes.
         *  The ``idleTimeout`` default for ``TCP`` is 1 hour.
         */
        idleTimeoutSeconds?: number;
        /**
         * The amount of time waiting for the upstream to respond with a complete response per request. A value of ``0`` can be set to disable ``perRequestTimeout``. ``perRequestTimeout`` can only be set if Service Connect ``appProtocol`` isn't ``TCP``. Only ``idleTimeout`` is allowed for ``TCP`` ``appProtocol``.
         */
        perRequestTimeoutSeconds?: number;
    }

    /**
     * The configuration for a volume specified in the task definition as a volume that is configured at launch time. Currently, the only supported volume type is an Amazon EBS volume.
     */
    export interface ServiceVolumeConfiguration {
        /**
         * The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf. These settings are used to create each Amazon EBS volume, with one volume created for each task in the service. The Amazon EBS volumes are visible in your account in the Amazon EC2 console once they are created.
         */
        managedEbsVolume?: outputs.ecs.ServiceManagedEbsVolumeConfiguration;
        /**
         * The name of the volume. This value must match the volume name from the ``Volume`` object in the task definition.
         */
        name: string;
    }

    /**
     * The authorization configuration details for the Amazon EFS file system.
     */
    export interface TaskDefinitionAuthorizationConfig {
        /**
         * The Amazon EFS access point ID to use. If an access point is specified, the root directory value specified in the ``EFSVolumeConfiguration`` must either be omitted or set to ``/`` which will enforce the path set on the EFS access point. If an access point is used, transit encryption must be on in the ``EFSVolumeConfiguration``. For more information, see [Working with Amazon EFS access points](https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html) in the *Amazon Elastic File System User Guide*.
         */
        accessPointId?: string;
        /**
         * Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
         */
        iam?: enums.ecs.TaskDefinitionAuthorizationConfigIam;
    }

    /**
     * The ``ContainerDefinition`` property specifies a container definition. Container definitions are used in task definitions to describe the different containers that are launched as part of a task.
     */
    export interface TaskDefinitionContainerDefinition {
        /**
         * The command that's passed to the container. This parameter maps to ``Cmd`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``COMMAND`` parameter to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more information, see [https://docs.docker.com/engine/reference/builder/#cmd](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#cmd). If there are multiple arguments, each argument is a separated string in the array.
         */
        command?: string[];
        /**
         * The number of ``cpu`` units reserved for the container. This parameter maps to ``CpuShares`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--cpu-shares`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *  This field is optional for tasks using the Fargate launch type, and the only requirement is that the total amount of CPU reserved for all containers within a task be lower than the task-level ``cpu`` value.
         *   You can determine the number of CPU units that are available per EC2 instance type by multiplying the vCPUs listed for that instance type on the [Amazon EC2 Instances](https://docs.aws.amazon.com/ec2/instance-types/) detail page by 1,024.
         *   Linux containers share unallocated CPU units with other containers on the container instance with the same ratio as their allocated amount. For example, if you run a single-container task on a single-core instance type with 512 CPU units specified for that container, and that's the only task running on the container instance, that container could use the full 1,024 CPU unit share at any given time. However, if you launched another copy of the same task on that container instance, each task is guaranteed a minimum of 512 CPU units when needed. Moreover, each container could float to higher CPU usage if the other container was not using it. If both tasks were 100% active all of the time, they would be limited to 512 CPU units.
         *  On Linux container instances, the Docker daemon on the container instance uses the CPU value to calculate the relative CPU share ratios for running containers. For more information, see [CPU share constraint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#cpu-share-constraint) in the Docker documentation. The minimum valid CPU share value that the Linux kernel allows is 2. However, the CPU parameter isn't required, and you can use CPU values below 2 in your container definitions. For CPU values below 2 (including null), the behavior varies based on your Amazon ECS container agent version:
         *   +   *Agent versions less than or equal to 1.1.0:* Null and zero CPU values are passed to Docker as 0, which Docker then converts to 1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux kernel converts to two CPU shares.
         *   +   *Agent versions greater than or equal to 1.2.0:* Null, zero, and CPU values of 1 are passed to Docker as 2.
         *   
         *  On Windows container instances, the CPU limit is enforced as an absolute limit, or a quota. Windows containers only have access to the specified amount of CPU that's described in the task definition. A null or zero CPU value is passed to Docker as ``0``, which Windows interprets as 1% of one CPU.
         */
        cpu?: number;
        /**
         * A list of ARNs in SSM or Amazon S3 to a credential spec (``CredSpec``) file that configures the container for Active Directory authentication. We recommend that you use this parameter instead of the ``dockerSecurityOptions``. The maximum number of ARNs is 1.
         *  There are two formats for each ARN.
         *   + credentialspecdomainless:MyARN You use credentialspecdomainless:MyARN to provide a CredSpec with an additional section for a secret in . You provide the login credentials to the domain in the secret. Each task that runs on any container instance can join different domains. You can use this format without joining the container instance to a domain. + credentialspec:MyARN You use credentialspec:MyARN to provide a CredSpec for a single domain. You must join the container instance to the domain before you start any tasks that use this task definition. 
         *  In both formats, replace ``MyARN`` with the ARN in SSM or Amazon S3.
         *  If you provide a ``credentialspecdomainless:MyARN``, the ``credspec`` must provide a ARN in ASMlong for a secret containing the username, password, and the domain to connect to. For better security, the instance isn't joined to the domain for domainless authentication. Other applications on the instance can't use the domainless credentials. You can use this parameter to run tasks on the same instance, even it the tasks need to join different domains. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html).
         */
        credentialSpecs?: string[];
        /**
         * The dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
         *  For tasks using the EC2 launch type, the container instances require at least version 1.26.0 of the container agent to turn on container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
         *  For tasks using the Fargate launch type, the task or service requires the following platforms:
         *   +  Linux platform version ``1.3.0`` or later.
         *   +  Windows platform version ``1.0.0`` or later.
         *   
         *  If the task definition is used in a blue/green deployment that uses [AWS::CodeDeploy::DeploymentGroup BlueGreenDeploymentConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codedeploy-deploymentgroup-bluegreendeploymentconfiguration.html), the ``dependsOn`` parameter is not supported. For more information see [Issue #680](https://docs.aws.amazon.com/https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/680) on the on the GitHub website.
         */
        dependsOn?: outputs.ecs.TaskDefinitionContainerDependency[];
        /**
         * When this parameter is true, networking is off within the container. This parameter maps to ``NetworkDisabled`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
         *   This parameter is not supported for Windows containers.
         */
        disableNetworking?: boolean;
        /**
         * A list of DNS search domains that are presented to the container. This parameter maps to ``DnsSearch`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--dns-search`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   This parameter is not supported for Windows containers.
         */
        dnsSearchDomains?: string[];
        /**
         * A list of DNS servers that are presented to the container. This parameter maps to ``Dns`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--dns`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   This parameter is not supported for Windows containers.
         */
        dnsServers?: string[];
        /**
         * A key/value map of labels to add to the container. This parameter maps to ``Labels`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--label`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
         */
        dockerLabels?: {[key: string]: string};
        /**
         * A list of strings to provide custom configuration for multiple security systems. For more information about valid values, see [Docker Run Security Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This field isn't valid for containers in tasks using the Fargate launch type.
         *  For Linux tasks on EC2, this parameter can be used to reference custom labels for SELinux and AppArmor multi-level security systems.
         *  For any tasks on EC2, this parameter can be used to reference a credential spec file that configures a container for Active Directory authentication. For more information, see [Using gMSAs for Windows Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/windows-gmsa.html) and [Using gMSAs for Linux Containers](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/linux-gmsa.html) in the *Amazon Elastic Container Service Developer Guide*.
         *  This parameter maps to ``SecurityOpt`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--security-opt`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   The Amazon ECS container agent running on a container instance must register with the ``ECS_SELINUX_CAPABLE=true`` or ``ECS_APPARMOR_CAPABLE=true`` environment variables before containers placed on that instance can use these security options. For more information, see [Amazon ECS Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
         *   For more information about valid values, see [Docker Run Security Configuration](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). 
         *  Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value" | "credentialspec:CredentialSpecFilePath"
         */
        dockerSecurityOptions?: string[];
        /**
         * Early versions of the Amazon ECS container agent don't properly handle ``entryPoint`` parameters. If you have problems using ``entryPoint``, update your container agent or enter your commands and arguments as ``command`` array items instead.
         *   The entry point that's passed to the container. This parameter maps to ``Entrypoint`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--entrypoint`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For more information, see [https://docs.docker.com/engine/reference/builder/#entrypoint](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/builder/#entrypoint).
         */
        entryPoint?: string[];
        /**
         * The environment variables to pass to a container. This parameter maps to ``Env`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--env`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   We don't recommend that you use plaintext environment variables for sensitive information, such as credential data.
         */
        environment?: outputs.ecs.TaskDefinitionKeyValuePair[];
        /**
         * A list of files containing the environment variables to pass to a container. This parameter maps to the ``--env-file`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *  You can specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment file contains an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as comments and are ignored. For more information about the environment variable file syntax, see [Declare default environment variables in file](https://docs.aws.amazon.com/https://docs.docker.com/compose/env-file/).
         *  If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Specifying Environment Variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        environmentFiles?: outputs.ecs.TaskDefinitionEnvironmentFile[];
        /**
         * If the ``essential`` parameter of a container is marked as ``true``, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the ``essential`` parameter of a container is marked as ``false``, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.
         *  All tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see [Application Architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/application_architecture.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        essential?: boolean;
        /**
         * A list of hostnames and IP address mappings to append to the ``/etc/hosts`` file on the container. This parameter maps to ``ExtraHosts`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--add-host`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   This parameter isn't supported for Windows containers or tasks that use the ``awsvpc`` network mode.
         */
        extraHosts?: outputs.ecs.TaskDefinitionHostEntry[];
        /**
         * The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom Log Routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        firelensConfiguration?: outputs.ecs.TaskDefinitionFirelensConfiguration;
        /**
         * The container health check command and associated configuration parameters for the container. This parameter maps to ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``HEALTHCHECK`` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         */
        healthCheck?: outputs.ecs.TaskDefinitionHealthCheck;
        /**
         * The hostname to use for your container. This parameter maps to ``Hostname`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--hostname`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   The ``hostname`` parameter is not supported if you're using the ``awsvpc`` network mode.
         */
        hostname?: string;
        /**
         * The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either ``repository-url/image:tag`` or ``repository-url/image@digest``. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to ``Image`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``IMAGE`` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   +  When a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image aren't propagated to already running tasks.
         *   +  Images in Amazon ECR repositories can be specified by either using the full ``registry/repository:tag`` or ``registry/repository@digest``. For example, ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest`` or ``012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE``. 
         *   +  Images in official repositories on Docker Hub use a single name (for example, ``ubuntu`` or ``mongo``).
         *   +  Images in other repositories on Docker Hub are qualified with an organization name (for example, ``amazon/amazon-ecs-agent``).
         *   +  Images in other online repositories are qualified further by a domain name (for example, ``quay.io/assemblyline/ubuntu``).
         */
        image: string;
        /**
         * When this parameter is ``true``, you can deploy containerized applications that require ``stdin`` or a ``tty`` to be allocated. This parameter maps to ``OpenStdin`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--interactive`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         */
        interactive?: boolean;
        /**
         * The ``links`` parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is ``bridge``. The ``name:internalName`` construct is analogous to ``name:alias`` in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. For more information about linking Docker containers, go to [Legacy container links](https://docs.aws.amazon.com/https://docs.docker.com/network/links/) in the Docker documentation. This parameter maps to ``Links`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--link`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   This parameter is not supported for Windows containers.
         *    Containers that are collocated on a single container instance may be able to communicate with each other without requiring links or host port mappings. Network isolation is achieved on the container instance using security groups and VPC settings.
         */
        links?: string[];
        /**
         * Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
         *   This parameter is not supported for Windows containers.
         */
        linuxParameters?: outputs.ecs.TaskDefinitionLinuxParameters;
        /**
         * The log configuration specification for the container.
         *  This parameter maps to ``LogConfig`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--log-driver`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). By default, containers use the same logging driver that the Docker daemon uses. However, the container may use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information on the options for different supported log drivers, see [Configure logging drivers](https://docs.aws.amazon.com/https://docs.docker.com/engine/admin/logging/overview/) in the Docker documentation.
         *   Amazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the [LogConfiguration](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html) data type). Additional log drivers may be available in future releases of the Amazon ECS container agent.
         *   This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'`` 
         *   The Amazon ECS container agent running on a container instance must register the logging drivers available on that instance with the ``ECS_AVAILABLE_LOGGING_DRIVERS`` environment variable before containers placed on that instance can use these log configuration options. For more information, see [Amazon ECS Container Agent Configuration](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        logConfiguration?: outputs.ecs.TaskDefinitionLogConfiguration;
        /**
         * The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task ``memory`` value, if one is specified. This parameter maps to ``Memory`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--memory`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *  If using the Fargate launch type, this parameter is optional.
         *  If using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level ``memory`` and ``memoryReservation`` value, ``memory`` must be greater than ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is used.
         *  The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container, so you should not specify fewer than 6 MiB of memory for your containers.
         *  The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container, so you should not specify fewer than 4 MiB of memory for your containers.
         */
        memory?: number;
        /**
         * The soft limit (in MiB) of memory to reserve for the container. When system memory is under heavy contention, Docker attempts to keep the container memory to this soft limit. However, your container can consume more memory when it needs to, up to either the hard limit specified with the ``memory`` parameter (if applicable), or all of the available memory on the container instance, whichever comes first. This parameter maps to ``MemoryReservation`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--memory-reservation`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *  If a task-level memory value is not specified, you must specify a non-zero integer for one or both of ``memory`` or ``memoryReservation`` in a container definition. If you specify both, ``memory`` must be greater than ``memoryReservation``. If you specify ``memoryReservation``, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of ``memory`` is used.
         *  For example, if your container normally uses 128 MiB of memory, but occasionally bursts to 256 MiB of memory for short periods of time, you can set a ``memoryReservation`` of 128 MiB, and a ``memory`` hard limit of 300 MiB. This configuration would allow the container to only reserve 128 MiB of memory from the remaining resources on the container instance, but also allow the container to consume more memory resources when needed.
         *  The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less than 6 MiB of memory for your containers. 
         *  The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container. So, don't specify less than 4 MiB of memory for your containers.
         */
        memoryReservation?: number;
        /**
         * The mount points for data volumes in your container.
         *  This parameter maps to ``Volumes`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--volume`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives.
         */
        mountPoints?: outputs.ecs.TaskDefinitionMountPoint[];
        /**
         * The name of a container. If you're linking multiple containers together in a task definition, the ``name`` of one container can be entered in the ``links`` of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to ``name`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--name`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         */
        name: string;
        /**
         * The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic.
         *  For task definitions that use the ``awsvpc`` network mode, you should only specify the ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
         *  Port mappings on Windows use the ``NetNAT`` gateway address rather than ``localhost``. There is no loopback for port mappings on Windows, so you cannot access a container's mapped port from the host itself. 
         *  This parameter maps to ``PortBindings`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--publish`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). If the network mode of a task definition is set to ``none``, then you can't specify port mappings. If the network mode of a task definition is set to ``host``, then host ports must either be undefined or they must match the container port in the port mapping.
         *   After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the *Network Bindings* section of a container description for a selected task in the Amazon ECS console. The assignments are also visible in the ``networkBindings`` section [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) responses.
         */
        portMappings?: outputs.ecs.TaskDefinitionPortMapping[];
        /**
         * When this parameter is true, the container is given elevated privileges on the host container instance (similar to the ``root`` user). This parameter maps to ``Privileged`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--privileged`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   This parameter is not supported for Windows containers or tasks run on FARGATElong.
         */
        privileged?: boolean;
        /**
         * When this parameter is ``true``, a TTY is allocated. This parameter maps to ``Tty`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--tty`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         */
        pseudoTerminal?: boolean;
        /**
         * When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ``ReadonlyRootfs`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--read-only`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   This parameter is not supported for Windows containers.
         */
        readonlyRootFilesystem?: boolean;
        /**
         * The private repository authentication credentials to use.
         */
        repositoryCredentials?: outputs.ecs.TaskDefinitionRepositoryCredentials;
        /**
         * The type and amount of a resource to assign to a container. The only supported resource is a GPU.
         */
        resourceRequirements?: outputs.ecs.TaskDefinitionResourceRequirement[];
        /**
         * The secrets to pass to the container. For more information, see [Specifying Sensitive Data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        secrets?: outputs.ecs.TaskDefinitionSecret[];
        /**
         * Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a ``COMPLETE``, ``SUCCESS``, or ``HEALTHY`` status. If a ``startTimeout`` value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a ``STOPPED`` state.
         *   When the ``ECS_CONTAINER_START_TIMEOUT`` container agent configuration variable is used, it's enforced independently from this start timeout value.
         *   For tasks using the Fargate launch type, the task or service requires the following platforms:
         *   +  Linux platform version ``1.3.0`` or later.
         *   +  Windows platform version ``1.0.0`` or later.
         *   
         *  For tasks using the EC2 launch type, your container instances require at least version ``1.26.0`` of the container agent to use a container start timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version ``1.26.0-1`` of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
         *  The valid values are 2-120 seconds.
         */
        startTimeout?: number;
        /**
         * Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.
         *  For tasks using the Fargate launch type, the task or service requires the following platforms:
         *   +  Linux platform version ``1.3.0`` or later.
         *   +  Windows platform version ``1.0.0`` or later.
         *   
         *  The max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used.
         *  For tasks that use the EC2 launch type, if the ``stopTimeout`` parameter isn't specified, the value set for the Amazon ECS container agent configuration variable ``ECS_CONTAINER_STOP_TIMEOUT`` is used. If neither the ``stopTimeout`` parameter or the ``ECS_CONTAINER_STOP_TIMEOUT`` agent configuration variable are set, then the default values of 30 seconds for Linux containers and 30 seconds on Windows containers are used. Your container instances require at least version 1.26.0 of the container agent to use a container stop timeout value. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you're using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
         *  The valid values are 2-120 seconds.
         */
        stopTimeout?: number;
        /**
         * A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--sysctl`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
         */
        systemControls?: outputs.ecs.TaskDefinitionSystemControl[];
        /**
         * A list of ``ulimits`` to set in the container. This parameter maps to ``Ulimits`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--ulimit`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/). Valid naming values are displayed in the [Ulimit](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_Ulimit.html) data type. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'`` 
         *   This parameter is not supported for Windows containers.
         */
        ulimits?: outputs.ecs.TaskDefinitionUlimit[];
        /**
         * The user to use inside the container. This parameter maps to ``User`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--user`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   When running tasks using the ``host`` network mode, don't run containers using the root user (UID 0). We recommend using a non-root user for better security.
         *   You can specify the ``user`` using the following formats. If specifying a UID or GID, you must specify it as a positive integer.
         *   +   ``user`` 
         *   +   ``user:group`` 
         *   +   ``uid`` 
         *   +   ``uid:gid`` 
         *   +   ``user:gid`` 
         *   +   ``uid:group`` 
         *   
         *   This parameter is not supported for Windows containers.
         */
        user?: string;
        /**
         * Data volumes to mount from another container. This parameter maps to ``VolumesFrom`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--volumes-from`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         */
        volumesFrom?: outputs.ecs.TaskDefinitionVolumeFrom[];
        /**
         * The working directory to run commands inside the container in. This parameter maps to ``WorkingDir`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--workdir`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         */
        workingDirectory?: string;
    }

    /**
     * The ``ContainerDependency`` property specifies the dependencies defined for container startup and shutdown. A container can contain multiple dependencies. When a dependency is defined for container startup, for container shutdown it is reversed.
     *  Your Amazon ECS container instances require at least version 1.26.0 of the container agent to enable container dependencies. However, we recommend using the latest container agent version. For information about checking your agent version and updating to the latest version, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html) in the *Amazon Elastic Container Service Developer Guide*. If you are using an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the ``ecs-init`` package. If your container instances are launched from version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html) in the *Amazon Elastic Container Service Developer Guide*.
     *   For tasks using the Fargate launch type, this parameter requires that the task or service uses platform version 1.3.0 or later.
     */
    export interface TaskDefinitionContainerDependency {
        /**
         * The dependency condition of the container. The following are the available conditions and their behavior:
         *   +   ``START`` - This condition emulates the behavior of links and volumes today. It validates that a dependent container is started before permitting other containers to start.
         *   +   ``COMPLETE`` - This condition validates that a dependent container runs to completion (exits) before permitting other containers to start. This can be useful for nonessential containers that run a script and then exit. This condition can't be set on an essential container.
         *   +   ``SUCCESS`` - This condition is the same as ``COMPLETE``, but it also requires that the container exits with a ``zero`` status. This condition can't be set on an essential container.
         *   +   ``HEALTHY`` - This condition validates that the dependent container passes its Docker health check before permitting other containers to start. This requires that the dependent container has health checks configured. This condition is confirmed only at task startup.
         */
        condition?: string;
        /**
         * The name of a container.
         */
        containerName?: string;
    }

    /**
     * The ``Device`` property specifies an object representing a container instance host device.
     */
    export interface TaskDefinitionDevice {
        /**
         * The path inside the container at which to expose the host device.
         */
        containerPath?: string;
        /**
         * The path for the device on the host container instance.
         */
        hostPath?: string;
        /**
         * The explicit permissions to provide to the container for the device. By default, the container has permissions for ``read``, ``write``, and ``mknod`` for the device.
         */
        permissions?: string[];
    }

    /**
     * The ``DockerVolumeConfiguration`` property specifies a Docker volume configuration and is used when you use Docker volumes. Docker volumes are only supported when you are using the EC2 launch type. Windows containers only support the use of the ``local`` driver. To use bind mounts, specify a ``host`` instead.
     */
    export interface TaskDefinitionDockerVolumeConfiguration {
        /**
         * If this value is ``true``, the Docker volume is created if it doesn't already exist.
         *   This field is only used if the ``scope`` is ``shared``.
         */
        autoprovision?: boolean;
        /**
         * The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement. If the driver was installed using the Docker plugin CLI, use ``docker plugin ls`` to retrieve the driver name from your container instance. If the driver was installed using another method, use Docker plugin discovery to retrieve the driver name. For more information, see [Docker plugin discovery](https://docs.aws.amazon.com/https://docs.docker.com/engine/extend/plugin_api/#plugin-discovery). This parameter maps to ``Driver`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxdriver`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
         */
        driver?: string;
        /**
         * A map of Docker driver-specific options passed through. This parameter maps to ``DriverOpts`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxopt`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
         */
        driverOpts?: {[key: string]: string};
        /**
         * Custom metadata to add to your Docker volume. This parameter maps to ``Labels`` in the [Create a volume](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/VolumeCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``xxlabel`` option to [docker volume create](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/commandline/volume_create/).
         */
        labels?: {[key: string]: string};
        /**
         * The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a ``task`` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as ``shared`` persist after the task stops.
         */
        scope?: string;
    }

    /**
     * This parameter is specified when you're using an Amazon Elastic File System file system for task storage. For more information, see [Amazon EFS volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface TaskDefinitionEfsVolumeConfiguration {
        /**
         * The authorization configuration details for the Amazon EFS file system.
         */
        authorizationConfig?: outputs.ecs.TaskDefinitionAuthorizationConfig;
        /**
         * The Amazon EFS file system ID to use.
         */
        filesystemId: string;
        /**
         * The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying ``/`` will have the same effect as omitting this parameter.
         *   If an EFS access point is specified in the ``authorizationConfig``, the root directory parameter must either be omitted or set to ``/`` which will enforce the path set on the EFS access point.
         */
        rootDirectory?: string;
        /**
         * Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
         */
        transitEncryption?: enums.ecs.TaskDefinitionEfsVolumeConfigurationTransitEncryption;
        /**
         * The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses. For more information, see [EFS mount helper](https://docs.aws.amazon.com/efs/latest/ug/efs-mount-helper.html) in the *Amazon Elastic File System User Guide*.
         */
        transitEncryptionPort?: number;
    }

    /**
     * A list of files containing the environment variables to pass to a container. You can specify up to ten environment files. The file must have a ``.env`` file extension. Each line in an environment file should contain an environment variable in ``VARIABLE=VALUE`` format. Lines beginning with ``#`` are treated as comments and are ignored.
     *  If there are environment variables specified using the ``environment`` parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see [Use a file to pass environment variables to a container](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/use-environment-file.html) in the *Amazon Elastic Container Service Developer Guide*.
     *  Environment variable files are objects in Amazon S3 and all Amazon S3 security considerations apply. 
     *  You must use the following platforms for the Fargate launch type:
     *   +  Linux platform version ``1.4.0`` or later.
     *   +  Windows platform version ``1.0.0`` or later.
     *   
     *  Consider the following when using the Fargate launch type:
     *   +  The file is handled like a native Docker env-file.
     *   +  There is no support for shell escape handling.
     *   +  The container entry point interperts the ``VARIABLE`` values.
     */
    export interface TaskDefinitionEnvironmentFile {
        /**
         * The file type to use. Environment files are objects in Amazon S3. The only supported value is ``s3``.
         */
        type?: string;
        /**
         * The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
         */
        value?: string;
    }

    /**
     * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on FARGATElong. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html) in the *Amazon ECS Developer Guide;*.
     *   For tasks using the Fargate launch type, the task requires the following platforms:
     *   +  Linux platform version ``1.4.0`` or later.
     *   +  Windows platform version ``1.0.0`` or later.
     */
    export interface TaskDefinitionEphemeralStorage {
        /**
         * The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is ``20`` GiB and the maximum supported value is ``200`` GiB.
         */
        sizeInGiB?: number;
    }

    export interface TaskDefinitionFSxAuthorizationConfig {
        credentialsParameter: string;
        domain: string;
    }

    /**
     * This parameter is specified when you're using [Amazon FSx for Windows File Server](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) file system for task storage.
     *  For more information and the input format, see [Amazon FSx for Windows File Server volumes](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/wfsx-volumes.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface TaskDefinitionFSxWindowsFileServerVolumeConfiguration {
        /**
         * The authorization configuration details for the Amazon FSx for Windows File Server file system.
         */
        authorizationConfig?: outputs.ecs.TaskDefinitionFSxAuthorizationConfig;
        /**
         * The Amazon FSx for Windows File Server file system ID to use.
         */
        fileSystemId: string;
        /**
         * The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
         */
        rootDirectory: string;
    }

    /**
     * The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface TaskDefinitionFirelensConfiguration {
        /**
         * The options to use when configuring the log router. This field is optional and can be used to add additional metadata, such as the task, task definition, cluster, and container instance details to the log event.
         *   If specified, valid option keys are:
         *   +   ``enable-ecs-log-metadata``, which can be ``true`` or ``false`` 
         *   +   ``config-file-type``, which can be ``s3`` or ``file`` 
         *   +   ``config-file-value``, which is either an S3 ARN or a file path
         */
        options?: {[key: string]: string};
        /**
         * The log router to use. The valid values are ``fluentd`` or ``fluentbit``.
         */
        type?: string;
    }

    /**
     * The ``HealthCheck`` property specifies an object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). This configuration maps to the ``HEALTHCHECK`` parameter of [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/).
     *   The Amazon ECS container agent only monitors and reports on the health checks specified in the task definition. Amazon ECS does not monitor Docker health checks that are embedded in a container image and not specified in the container definition. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image.
     *   If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status. For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it.
     *  The following are notes about container health check support:
     *   +  Container health checks require version 1.17.0 or greater of the Amazon ECS container agent. For more information, see [Updating the Amazon ECS Container Agent](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html).
     *   +  Container health checks are supported for Fargate tasks if you are using platform version 1.1.0 or greater. For more information, see [Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     *   +  Container health checks are not supported for tasks that are part of a service that is configured to use a Classic Load Balancer.
     */
    export interface TaskDefinitionHealthCheck {
        /**
         * A string array representing the command that the container runs to determine if it is healthy. The string array must start with ``CMD`` to run the command arguments directly, or ``CMD-SHELL`` to run the command with the container's default shell. 
         *   When you use the AWS Management Console JSON panel, the CLIlong, or the APIs, enclose the list of commands in double quotes and brackets.
         *   ``[ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]`` 
         *  You don't include the double quotes and brackets when you use the AWS Management Console.
         *   ``CMD-SHELL, curl -f http://localhost/ || exit 1`` 
         *  An exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see ``HealthCheck`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/).
         */
        command?: string[];
        /**
         * The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.
         */
        interval?: number;
        /**
         * The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.
         */
        retries?: number;
        /**
         * The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the ``startPeriod`` is off.
         *   If a health check succeeds within the ``startPeriod``, then the container is considered healthy and any subsequent failures count toward the maximum number of retries.
         */
        startPeriod?: number;
        /**
         * The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.
         */
        timeout?: number;
    }

    /**
     * The ``HostEntry`` property specifies a hostname and an IP address that are added to the ``/etc/hosts`` file of a container through the ``extraHosts`` parameter of its ``ContainerDefinition`` resource.
     */
    export interface TaskDefinitionHostEntry {
        /**
         * The hostname to use in the ``/etc/hosts`` entry.
         */
        hostname?: string;
        /**
         * The IP address to use in the ``/etc/hosts`` entry.
         */
        ipAddress?: string;
    }

    /**
     * The ``HostVolumeProperties`` property specifies details on a container instance bind mount host volume.
     */
    export interface TaskDefinitionHostVolumeProperties {
        /**
         * When the ``host`` parameter is used, specify a ``sourcePath`` to declare the path on the host container instance that's presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If the ``host`` parameter contains a ``sourcePath`` file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the ``sourcePath`` value doesn't exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.
         *  If you're using the Fargate launch type, the ``sourcePath`` parameter is not supported.
         */
        sourcePath?: string;
    }

    /**
     * Details on an Elastic Inference accelerator. For more information, see [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface TaskDefinitionInferenceAccelerator {
        /**
         * The Elastic Inference accelerator device name. The ``deviceName`` must also be referenced in a container definition as a [ResourceRequirement](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ResourceRequirement.html).
         */
        deviceName?: string;
        /**
         * The Elastic Inference accelerator type to use.
         */
        deviceType?: string;
    }

    /**
     * The Linux capabilities to add or remove from the default Docker configuration for a container defined in the task definition. For more information about the default capabilities and the non-default available capabilities, see [Runtime privilege and Linux capabilities](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities) in the *Docker run reference*. For more detailed information about these Linux capabilities, see the [capabilities(7)](https://docs.aws.amazon.com/http://man7.org/linux/man-pages/man7/capabilities.7.html) Linux manual page.
     */
    export interface TaskDefinitionKernelCapabilities {
        /**
         * The Linux capabilities for the container that have been added to the default configuration provided by Docker. This parameter maps to ``CapAdd`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--cap-add`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   Tasks launched on FARGATElong only support adding the ``SYS_PTRACE`` kernel capability.
         *   Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
         */
        add?: string[];
        /**
         * The Linux capabilities for the container that have been removed from the default configuration provided by Docker. This parameter maps to ``CapDrop`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--cap-drop`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *  Valid values: ``"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"``
         */
        drop?: string[];
    }

    /**
     * A key-value pair object.
     */
    export interface TaskDefinitionKeyValuePair {
        /**
         * The name of the key-value pair. For environment variables, this is the name of the environment variable.
         */
        name?: string;
        /**
         * The value of the key-value pair. For environment variables, this is the value of the environment variable.
         */
        value?: string;
    }

    /**
     * The Linux-specific options that are applied to the container, such as Linux [KernelCapabilities](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_KernelCapabilities.html).
     */
    export interface TaskDefinitionLinuxParameters {
        /**
         * The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.
         *   For tasks that use the Fargate launch type, ``capabilities`` is supported for all platform versions but the ``add`` parameter is only supported if using platform version 1.4.0 or later.
         */
        capabilities?: outputs.ecs.TaskDefinitionKernelCapabilities;
        /**
         * Any host devices to expose to the container. This parameter maps to ``Devices`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--device`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   If you're using tasks that use the Fargate launch type, the ``devices`` parameter isn't supported.
         */
        devices?: outputs.ecs.TaskDefinitionDevice[];
        /**
         * Run an ``init`` process inside the container that forwards signals and reaps processes. This parameter maps to the ``--init`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
         */
        initProcessEnabled?: boolean;
        /**
         * The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the ``--memory-swap`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration) where the value would be the sum of the container memory plus the ``maxSwap`` value.
         *  If a ``maxSwap`` value of ``0`` is specified, the container will not use swap. Accepted values are ``0`` or any positive integer. If the ``maxSwap`` parameter is omitted, the container will use the swap configuration for the container instance it is running on. A ``maxSwap`` value must be set for the ``swappiness`` parameter to be used.
         *   If you're using tasks that use the Fargate launch type, the ``maxSwap`` parameter isn't supported.
         *  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
         */
        maxSwap?: number;
        /**
         * The value for the size (in MiB) of the ``/dev/shm`` volume. This parameter maps to the ``--shm-size`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   If you are using tasks that use the Fargate launch type, the ``sharedMemorySize`` parameter is not supported.
         */
        sharedMemorySize?: number;
        /**
         * This allows you to tune a container's memory swappiness behavior. A ``swappiness`` value of ``0`` will cause swapping to not happen unless absolutely necessary. A ``swappiness`` value of ``100`` will cause pages to be swapped very aggressively. Accepted values are whole numbers between ``0`` and ``100``. If the ``swappiness`` parameter is not specified, a default value of ``60`` is used. If a value is not specified for ``maxSwap`` then this parameter is ignored. This parameter maps to the ``--memory-swappiness`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   If you're using tasks that use the Fargate launch type, the ``swappiness`` parameter isn't supported.
         *  If you're using tasks on Amazon Linux 2023 the ``swappiness`` parameter isn't supported.
         */
        swappiness?: number;
        /**
         * The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the ``--tmpfs`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration).
         *   If you're using tasks that use the Fargate launch type, the ``tmpfs`` parameter isn't supported.
         */
        tmpfs?: outputs.ecs.TaskDefinitionTmpfs[];
    }

    /**
     * The ``LogConfiguration`` property specifies log configuration options to send to a custom log driver for the container.
     */
    export interface TaskDefinitionLogConfiguration {
        /**
         * The log driver to use for the container.
         *  For tasks on FARGATElong, the supported log drivers are ``awslogs``, ``splunk``, and ``awsfirelens``.
         *  For tasks hosted on Amazon EC2 instances, the supported log drivers are ``awslogs``, ``fluentd``, ``gelf``, ``json-file``, ``journald``, ``logentries``,``syslog``, ``splunk``, and ``awsfirelens``.
         *  For more information about using the ``awslogs`` log driver, see [Using the awslogs log driver](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_awslogs.html) in the *Amazon Elastic Container Service Developer Guide*.
         *  For more information about using the ``awsfirelens`` log driver, see [Custom log routing](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_firelens.html) in the *Amazon Elastic Container Service Developer Guide*.
         *   If you have a custom driver that isn't listed, you can fork the Amazon ECS container agent project that's [available on GitHub](https://docs.aws.amazon.com/https://github.com/aws/amazon-ecs-agent) and customize it to work with that driver. We encourage you to submit pull requests for changes that you would like to have included. However, we don't currently provide support for running modified copies of this software.
         */
        logDriver: string;
        /**
         * The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: ``sudo docker version --format '{{.Server.APIVersion}}'``
         */
        options?: {[key: string]: string};
        /**
         * The secrets to pass to the log configuration. For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        secretOptions?: outputs.ecs.TaskDefinitionSecret[];
    }

    /**
     * The details for a volume mount point that's used in a container definition.
     */
    export interface TaskDefinitionMountPoint {
        /**
         * The path on the container to mount the host volume at.
         */
        containerPath?: string;
        /**
         * If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
         */
        readOnly?: boolean;
        /**
         * The name of the volume to mount. Must be a volume name referenced in the ``name`` parameter of task definition ``volume``.
         */
        sourceVolume?: string;
    }

    /**
     * The constraint on task placement in the task definition. For more information, see [Task placement constraints](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html) in the *Amazon Elastic Container Service Developer Guide*.
     *   Task placement constraints aren't supported for tasks run on FARGATElong.
     */
    export interface TaskDefinitionPlacementConstraint {
        /**
         * A cluster query language expression to apply to the constraint. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        expression?: string;
        /**
         * The type of constraint. The ``MemberOf`` constraint restricts selection to be from a group of valid candidates.
         */
        type: string;
    }

    /**
     * The ``PortMapping`` property specifies a port mapping. Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.
     *  If you are using containers in a task with the ``awsvpc`` or ``host`` network mode, exposed ports should be specified using ``containerPort``. The ``hostPort`` can be left blank or it must be the same value as the ``containerPort``.
     *  After a task reaches the ``RUNNING`` status, manual and automatic host and container port assignments are visible in the ``networkBindings`` section of [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) API responses.
     */
    export interface TaskDefinitionPortMapping {
        /**
         * The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
         *  If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
         *   ``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
         *  Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        appProtocol?: enums.ecs.TaskDefinitionPortMappingAppProtocol;
        /**
         * The port number on the container that's bound to the user-specified or automatically assigned host port.
         *  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, specify the exposed ports using ``containerPort``.
         *  If you use containers in a task with the ``bridge`` network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see ``hostPort``. Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.
         */
        containerPort?: number;
        /**
         * The port number range on the container that's bound to the dynamically mapped host port range. 
         *  The following rules apply when you specify a ``containerPortRange``:
         *   +  You must use either the ``bridge`` network mode or the ``awsvpc`` network mode.
         *   +  This parameter is available for both the EC2 and FARGATElong launch types.
         *   +  This parameter is available for both the Linux and Windows operating systems.
         *   +  The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the ``ecs-init`` package 
         *   +  You can specify a maximum of 100 port ranges per container.
         *   +  You do not specify a ``hostPortRange``. The value of the ``hostPortRange`` is set as follows:
         *   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPortRange`` is set to the same value as the ``containerPortRange``. This is a static mapping strategy.
         *   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.
         *   
         *   +  The ``containerPortRange`` valid values are between 1 and 65535.
         *   +  A port can only be included in one port mapping per container.
         *   +  You cannot specify overlapping port ranges.
         *   +  The first port in the range must be less than last port in the range.
         *   +  Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.
         *  For more information, see [Issue #11185](https://docs.aws.amazon.com/https://github.com/moby/moby/issues/11185) on the Github website.
         *  For information about how to turn off the docker-proxy in the Docker daemon config file, see [Docker daemon](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon) in the *Amazon ECS Developer Guide*.
         *   
         *  You can call [DescribeTasks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html) to view the ``hostPortRange`` which are the host ports that are bound to the container ports.
         */
        containerPortRange?: string;
        /**
         * The port number on the container instance to reserve for your container.
         *  If you specify a ``containerPortRange``, leave this field empty and the value of the ``hostPort`` is set as follows:
         *   +  For containers in a task with the ``awsvpc`` network mode, the ``hostPort`` is set to the same value as the ``containerPort``. This is a static mapping strategy.
         *   +  For containers in a task with the ``bridge`` network mode, the Amazon ECS agent finds open ports on the host and automatically binds them to the container ports. This is a dynamic mapping strategy.
         *   
         *  If you use containers in a task with the ``awsvpc`` or ``host`` network mode, the ``hostPort`` can either be left blank or set to the same value as the ``containerPort``.
         *  If you use containers in a task with the ``bridge`` network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the ``hostPort`` (or set it to ``0``) while specifying a ``containerPort`` and your container automatically receives a port in the ephemeral port range for your container instance operating system and Docker version.
         *  The default ephemeral port range for Docker version 1.6.0 and later is listed on the instance under ``/proc/sys/net/ipv4/ip_local_port_range``. If this kernel parameter is unavailable, the default ephemeral port range from 49153 through 65535 (Linux) or 49152 through 65535 (Windows) is used. Do not attempt to specify a host port in the ephemeral port range as these are reserved for automatic assignment. In general, ports below 32768 are outside of the ephemeral port range.
         *  The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon ECS container agent ports 51678-51680. Any host port that was previously specified in a running task is also reserved while the task is running. That is, after a task stops, the host port is released. The current reserved ports are displayed in the ``remainingResources`` of [DescribeContainerInstances](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeContainerInstances.html) output. A container instance can have up to 100 reserved ports at a time. This number includes the default reserved ports. Automatically assigned ports aren't included in the 100 reserved ports quota.
         */
        hostPort?: number;
        /**
         * The name that's used for the port mapping. This parameter only applies to Service Connect. This parameter is the name that you use in the ``serviceConnectConfiguration`` of a service. The name can include up to 64 characters. The characters can include lowercase letters, numbers, underscores (_), and hyphens (-). The name can't start with a hyphen.
         *  For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
         */
        name?: string;
        /**
         * The protocol used for the port mapping. Valid values are ``tcp`` and ``udp``. The default is ``tcp``. ``protocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
         */
        protocol?: string;
    }

    /**
     * The configuration details for the App Mesh proxy.
     *  For tasks that use the EC2 launch type, the container instances require at least version 1.26.0 of the container agent and at least version 1.26.0-1 of the ``ecs-init`` package to use a proxy configuration. If your container instances are launched from the Amazon ECS optimized AMI version ``20190301`` or later, then they contain the required versions of the container agent and ``ecs-init``. For more information, see [Amazon ECS-optimized Linux AMI](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)
     */
    export interface TaskDefinitionProxyConfiguration {
        /**
         * The name of the container that will serve as the App Mesh proxy.
         */
        containerName: string;
        /**
         * The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified as key-value pairs.
         *   +   ``IgnoredUID`` - (Required) The user ID (UID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredGID`` is specified, this field can be empty.
         *   +   ``IgnoredGID`` - (Required) The group ID (GID) of the proxy container as defined by the ``user`` parameter in a container definition. This is used to ensure the proxy ignores its own traffic. If ``IgnoredUID`` is specified, this field can be empty.
         *   +   ``AppPorts`` - (Required) The list of ports that the application uses. Network traffic to these ports is forwarded to the ``ProxyIngressPort`` and ``ProxyEgressPort``.
         *   +   ``ProxyIngressPort`` - (Required) Specifies the port that incoming traffic to the ``AppPorts`` is directed to.
         *   +   ``ProxyEgressPort`` - (Required) Specifies the port that outgoing traffic from the ``AppPorts`` is directed to.
         *   +   ``EgressIgnoredPorts`` - (Required) The egress traffic going to the specified ports is ignored and not redirected to the ``ProxyEgressPort``. It can be an empty list.
         *   +   ``EgressIgnoredIPs`` - (Required) The egress traffic going to the specified IP addresses is ignored and not redirected to the ``ProxyEgressPort``. It can be an empty list.
         */
        proxyConfigurationProperties?: outputs.ecs.TaskDefinitionKeyValuePair[];
        /**
         * The proxy type. The only supported value is ``APPMESH``.
         */
        type?: string;
    }

    /**
     * The repository credentials for private registry authentication.
     */
    export interface TaskDefinitionRepositoryCredentials {
        /**
         * The Amazon Resource Name (ARN) of the secret containing the private repository credentials.
         *   When you use the Amazon ECS API, CLI, or AWS SDK, if the secret exists in the same Region as the task that you're launching then you can use either the full ARN or the name of the secret. When you use the AWS Management Console, you must specify the full ARN of the secret.
         */
        credentialsParameter?: string;
    }

    /**
     * The type and amount of a resource to assign to a container. The supported resource types are GPUs and Elastic Inference accelerators. For more information, see [Working with GPUs on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-gpu.html) or [Working with Amazon Elastic Inference on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-inference.html) in the *Amazon Elastic Container Service Developer Guide*
     */
    export interface TaskDefinitionResourceRequirement {
        /**
         * The type of resource to assign to a container. The supported values are ``GPU`` or ``InferenceAccelerator``.
         */
        type: string;
        /**
         * The value for the specified resource type.
         *  If the ``GPU`` type is used, the value is the number of physical ``GPUs`` the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on.
         *  If the ``InferenceAccelerator`` type is used, the ``value`` matches the ``deviceName`` for an [InferenceAccelerator](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_InferenceAccelerator.html) specified in a task definition.
         */
        value: string;
    }

    /**
     * Information about the platform for the Amazon ECS service or task.
     *  For more information about ``RuntimePlatform``, see [RuntimePlatform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface TaskDefinitionRuntimePlatform {
        /**
         * The CPU architecture.
         *  You can run your Linux tasks on an ARM-based platform by setting the value to ``ARM64``. This option is available for tasks that run on Linux Amazon EC2 instance or Linux containers on Fargate.
         */
        cpuArchitecture?: string;
        /**
         * The operating system.
         */
        operatingSystemFamily?: string;
    }

    /**
     * An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:
     *   +  To inject sensitive data into your containers as environment variables, use the ``secrets`` container definition parameter.
     *   +  To reference sensitive information in the log configuration of a container, use the ``secretOptions`` container definition parameter.
     *   
     *  For more information, see [Specifying sensitive data](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data.html) in the *Amazon Elastic Container Service Developer Guide*.
     */
    export interface TaskDefinitionSecret {
        /**
         * The name of the secret.
         */
        name: string;
        /**
         * The secret to expose to the container. The supported values are either the full ARN of the ASMlong secret or the full ARN of the parameter in the SSM Parameter Store.
         *  For information about the require IAMlong permissions, see [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-secrets.html#secrets-iam) (for Secrets Manager) or [Required IAM permissions for Amazon ECS secrets](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/specifying-sensitive-data-parameters.html) (for Systems Manager Parameter store) in the *Amazon Elastic Container Service Developer Guide*.
         *   If the SSM Parameter Store parameter exists in the same Region as the task you're launching, then you can use either the full ARN or name of the parameter. If the parameter exists in a different Region, then the full ARN must be specified.
         */
        valueFrom: string;
    }

    /**
     * A list of namespaced kernel parameters to set in the container. This parameter maps to ``Sysctls`` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.35/) and the ``--sysctl`` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/#security-configuration). For example, you can configure ``net.ipv4.tcp_keepalive_time`` setting to maintain longer lived connections.
     *  We don't recommend that you specify network-related ``systemControls`` parameters for multiple containers in a single task that also uses either the ``awsvpc`` or ``host`` network mode. Doing this has the following disadvantages:
     *   +  For tasks that use the ``awsvpc`` network mode including Fargate, if you set ``systemControls`` for any container, it applies to all containers in the task. If you set different ``systemControls`` for multiple containers in a single task, the container that's started last determines which ``systemControls`` take effect.
     *   +  For tasks that use the ``host`` network mode, the network namespace ``systemControls`` aren't supported.
     *   
     *  If you're setting an IPC resource namespace to use for the containers in the task, the following conditions apply to your system controls. For more information, see [IPC mode](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_definition_ipcmode).
     *   +  For tasks that use the ``host`` IPC mode, IPC namespace ``systemControls`` aren't supported.
     *   +  For tasks that use the ``task`` IPC mode, IPC namespace ``systemControls`` values apply to all containers within a task.
     *   
     *   This parameter is not supported for Windows containers.
     *    This parameter is only supported for tasks that are hosted on FARGATElong if the tasks are using platform version ``1.4.0`` or later (Linux). This isn't supported for Windows containers on Fargate.
     */
    export interface TaskDefinitionSystemControl {
        /**
         * The namespaced kernel parameter to set a ``value`` for.
         */
        namespace?: string;
        /**
         * The namespaced kernel parameter to set a ``value`` for.
         *  Valid IPC namespace values: ``"kernel.msgmax" | "kernel.msgmnb" | "kernel.msgmni" | "kernel.sem" | "kernel.shmall" | "kernel.shmmax" | "kernel.shmmni" | "kernel.shm_rmid_forced"``, and ``Sysctls`` that start with ``"fs.mqueue.*"`` 
         *  Valid network namespace values: ``Sysctls`` that start with ``"net.*"`` 
         *  All of these values are supported by Fargate.
         */
        value?: string;
    }

    /**
     * The container path, mount options, and size of the tmpfs mount.
     */
    export interface TaskDefinitionTmpfs {
        /**
         * The absolute file path where the tmpfs volume is to be mounted.
         */
        containerPath?: string;
        /**
         * The list of tmpfs volume mount options.
         *  Valid values: ``"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" | "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"``
         */
        mountOptions?: string[];
        /**
         * The maximum size (in MiB) of the tmpfs volume.
         */
        size: number;
    }

    /**
     * The ``ulimit`` settings to pass to the container.
     *  Amazon ECS tasks hosted on FARGATElong use the default resource limit values set by the operating system with the exception of the ``nofile`` resource limit parameter which FARGATElong overrides. The ``nofile`` resource limit sets a restriction on the number of open files that a container can use. The default ``nofile`` soft limit is ``1024`` and the default hard limit is ``65535``.
     *  You can specify the ``ulimit`` settings for a container in a task definition.
     */
    export interface TaskDefinitionUlimit {
        /**
         * The hard limit for the ``ulimit`` type.
         */
        hardLimit: number;
        /**
         * The ``type`` of the ``ulimit``.
         */
        name: string;
        /**
         * The soft limit for the ``ulimit`` type.
         */
        softLimit: number;
    }

    /**
     * The data volume configuration for tasks launched using this task definition. Specifying a volume configuration in a task definition is optional. The volume configuration may contain multiple volumes but only one volume configured at launch is supported. Each volume defined in the volume configuration may only specify a ``name`` and one of either ``configuredAtLaunch``, ``dockerVolumeConfiguration``, ``efsVolumeConfiguration``, ``fsxWindowsFileServerVolumeConfiguration``, or ``host``. If an empty volume configuration is specified, by default Amazon ECS uses a host volume. For more information, see [Using data volumes in tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_data_volumes.html).
     */
    export interface TaskDefinitionVolume {
        /**
         * Indicates whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
         *  To configure a volume at launch time, use this task definition revision and specify a ``volumeConfigurations`` object when calling the ``CreateService``, ``UpdateService``, ``RunTask`` or ``StartTask`` APIs.
         */
        configuredAtLaunch?: boolean;
        /**
         * This parameter is specified when you use Docker volumes.
         *  Windows containers only support the use of the ``local`` driver. To use bind mounts, specify the ``host`` parameter instead.
         *   Docker volumes aren't supported by tasks run on FARGATElong.
         */
        dockerVolumeConfiguration?: outputs.ecs.TaskDefinitionDockerVolumeConfiguration;
        /**
         * This parameter is specified when you use an Amazon Elastic File System file system for task storage.
         */
        efsVolumeConfiguration?: outputs.ecs.TaskDefinitionEfsVolumeConfiguration;
        /**
         * This parameter is specified when you use Amazon FSx for Windows File Server file system for task storage.
         */
        fSxWindowsFileServerVolumeConfiguration?: outputs.ecs.TaskDefinitionFSxWindowsFileServerVolumeConfiguration;
        /**
         * This parameter is specified when you use bind mount host volumes. The contents of the ``host`` parameter determine whether your bind mount host volume persists on the host container instance and where it's stored. If the ``host`` parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data isn't guaranteed to persist after the containers that are associated with it stop running.
         *  Windows containers can mount whole directories on the same drive as ``$env:ProgramData``. Windows containers can't mount directories on a different drive, and mount point can't be across drives. For example, you can mount ``C:\my\path:C:\my\path`` and ``D:\:D:\``, but not ``D:\my\path:C:\my\path`` or ``D:\:C:\my\path``.
         */
        host?: outputs.ecs.TaskDefinitionHostVolumeProperties;
        /**
         * The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
         *  When using a volume configured at launch, the ``name`` is required and must also be specified as the volume name in the ``ServiceVolumeConfiguration`` or ``TaskVolumeConfiguration`` parameter when creating your service or standalone task.
         *  For all other types of volumes, this name is referenced in the ``sourceVolume`` parameter of the ``mountPoints`` object in the container definition.
         *  When a volume is using the ``efsVolumeConfiguration``, the name is required.
         */
        name?: string;
    }

    /**
     * Details on a data volume from another container in the same task definition.
     */
    export interface TaskDefinitionVolumeFrom {
        /**
         * If this value is ``true``, the container has read-only access to the volume. If this value is ``false``, then the container can write to the volume. The default value is ``false``.
         */
        readOnly?: boolean;
        /**
         * The name of another container within the same task definition to mount volumes from.
         */
        sourceContainer?: string;
    }

    /**
     * The VPC subnets and security groups associated with a task. All specified subnets and security groups must be from the same VPC.
     */
    export interface TaskSetAwsVpcConfiguration {
        /**
         * Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
         */
        assignPublicIp?: enums.ecs.TaskSetAwsVpcConfigurationAssignPublicIp;
        /**
         * The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. There is a limit of 5 security groups that can be specified per AwsVpcConfiguration.
         */
        securityGroups?: string[];
        /**
         * The subnets associated with the task or service. There is a limit of 16 subnets that can be specified per AwsVpcConfiguration.
         */
        subnets: string[];
    }

    /**
     * A load balancer object representing the load balancer to use with the task set. The supported load balancer types are either an Application Load Balancer or a Network Load Balancer. 
     */
    export interface TaskSetLoadBalancer {
        /**
         * The name of the container (as it appears in a container definition) to associate with the load balancer.
         */
        containerName?: string;
        /**
         * The port on the container to associate with the load balancer. This port must correspond to a containerPort in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the hostPort of the port mapping.
         */
        containerPort?: number;
        /**
         * The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer. If you are using a Classic Load Balancer this should be omitted. For services using the ECS deployment controller, you can specify one or multiple target groups. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/register-multiple-targetgroups.html in the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you are required to define two target groups for the load balancer. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-bluegreen.html in the Amazon Elastic Container Service Developer Guide. If your service's task definition uses the awsvpc network mode (which is required for the Fargate launch type), you must choose ip as the target type, not instance, when creating your target groups because tasks that use the awsvpc network mode are associated with an elastic network interface, not an Amazon EC2 instance.
         */
        targetGroupArn?: string;
    }

    /**
     * An object representing the network configuration for a task or service.
     */
    export interface TaskSetNetworkConfiguration {
        /**
         * The VPC subnets and security groups that are associated with a task.
         *
         * > All specified subnets and security groups must be from the same VPC.
         */
        awsVpcConfiguration?: outputs.ecs.TaskSetAwsVpcConfiguration;
    }

    export interface TaskSetScale {
        /**
         * The unit of measure for the scale value.
         */
        unit?: enums.ecs.TaskSetScaleUnit;
        /**
         * The value, specified as a percent total of a service's desiredCount, to scale the task set. Accepted values are numbers between 0 and 100.
         */
        value?: number;
    }

    export interface TaskSetServiceRegistry {
        /**
         * The container name value, already specified in the task definition, to be used for your service discovery service. If the task definition that your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition that your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
         */
        containerName?: string;
        /**
         * The port value, already specified in the task definition, to be used for your service discovery service. If the task definition your service task specifies uses the bridge or host network mode, you must specify a containerName and containerPort combination from the task definition. If the task definition your service task specifies uses the awsvpc network mode and a type SRV DNS record is used, you must specify either a containerName and containerPort combination or a port value, but not both.
         */
        containerPort?: number;
        /**
         * The port value used if your service discovery service specified an SRV record. This field may be used if both the awsvpc network mode and SRV records are used.
         */
        port?: number;
        /**
         * The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is AWS Cloud Map. For more information, see https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html
         */
        registryArn?: string;
    }

}

export namespace efs {
    /**
     * Required if the ``RootDirectory`` > ``Path`` specified does not exist. Specifies the POSIX IDs and permissions to apply to the access point's ``RootDirectory`` > ``Path``. If the access point root directory does not exist, EFS creates it with these settings when a client connects to the access point. When specifying ``CreationInfo``, you must include values for all properties. 
     *  Amazon EFS creates a root directory only if you have provided the CreationInfo: OwnUid, OwnGID, and permissions for the directory. If you do not provide this information, Amazon EFS does not create the root directory. If the root directory does not exist, attempts to mount using the access point will fail.
     *   If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` does not exist, attempts to mount the file system using the access point will fail.
     */
    export interface AccessPointCreationInfo {
        /**
         * Specifies the POSIX group ID to apply to the ``RootDirectory``. Accepts values from 0 to 2^32 (4294967295).
         */
        ownerGid: string;
        /**
         * Specifies the POSIX user ID to apply to the ``RootDirectory``. Accepts values from 0 to 2^32 (4294967295).
         */
        ownerUid: string;
        /**
         * Specifies the POSIX permissions to apply to the ``RootDirectory``, in the format of an octal number representing the file's mode bits.
         */
        permissions: string;
    }

    /**
     * The full POSIX identity, including the user ID, group ID, and any secondary group IDs, on the access point that is used for all file system operations performed by NFS clients using the access point.
     */
    export interface AccessPointPosixUser {
        /**
         * The POSIX group ID used for all file system operations using this access point.
         */
        gid: string;
        /**
         * Secondary POSIX group IDs used for all file system operations using this access point.
         */
        secondaryGids?: string[];
        /**
         * The POSIX user ID used for all file system operations using this access point.
         */
        uid: string;
    }

    /**
     * Specifies the directory on the Amazon EFS file system that the access point provides access to. The access point exposes the specified file system path as the root directory of your file system to applications using the access point. NFS clients using the access point can only access data in the access point's ``RootDirectory`` and its subdirectories.
     */
    export interface AccessPointRootDirectory {
        /**
         * (Optional) Specifies the POSIX IDs and permissions to apply to the access point's ``RootDirectory``. If the ``RootDirectory`` > ``Path`` specified does not exist, EFS creates the root directory using the ``CreationInfo`` settings when a client connects to an access point. When specifying the ``CreationInfo``, you must provide values for all properties. 
         *   If you do not provide ``CreationInfo`` and the specified ``RootDirectory`` > ``Path`` does not exist, attempts to mount the file system using the access point will fail.
         */
        creationInfo?: outputs.efs.AccessPointCreationInfo;
        /**
         * Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide the ``CreationInfo``.
         */
        path?: string;
    }

    /**
     * The backup policy turns automatic backups for the file system on or off.
     */
    export interface FileSystemBackupPolicy {
        /**
         * Set the backup policy status for the file system.
         *   +   *ENABLED* - Turns automatic backups on for the file system. 
         *   +   *DISABLED* - Turns automatic backups off for the file system.
         */
        status: enums.efs.FileSystemBackupPolicyStatus;
    }

    /**
     * Describes a policy used by Lifecycle management that specifies when to transition files into and out of the EFS storage classes. For more information, see [Managing file system storage](https://docs.aws.amazon.com/efs/latest/ug/lifecycle-management-efs.html).
     *   + Each ``LifecyclePolicy`` object can have only a single transition. This means that in a request body, ``LifecyclePolicies`` must be structured as an array of ``LifecyclePolicy`` objects, one object for each transition, ``TransitionToIA``, ``TransitionToArchive``, ``TransitionToPrimaryStorageClass``.
     *  + See the AWS::EFS::FileSystem examples for the correct ``LifecyclePolicy`` structure. Do not use the syntax shown on this page.
     */
    export interface FileSystemLifecyclePolicy {
        /**
         * The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
         */
        transitionToArchive?: string;
        /**
         * The number of days after files were last accessed in primary storage (the Standard storage class) at which to move them to Infrequent Access (IA) storage. Metadata operations such as listing the contents of a directory don't count as file access events.
         */
        transitionToIa?: string;
        /**
         * Whether to move files back to primary (Standard) storage after they are accessed in IA or Archive storage. Metadata operations such as listing the contents of a directory don't count as file access events.
         */
        transitionToPrimaryStorageClass?: string;
    }

    /**
     * Describes the protection on the file system.
     */
    export interface FileSystemProtection {
        /**
         * The status of the file system's replication overwrite protection.
         *   +   ``ENABLED`` – The file system cannot be used as the destination file system in a replication configuration. The file system is writeable. Replication overwrite protection is ``ENABLED`` by default. 
         *   +   ``DISABLED`` – The file system can be used as the destination file system in a replication configuration. The file system is read-only and can only be modified by EFS replication.
         *   +   ``REPLICATING`` – The file system is being used as the destination file system in a replication configuration. The file system is read-only and is only modified only by EFS replication.
         *   
         *  If the replication configuration is deleted, the file system's replication overwrite protection is re-enabled, the file system becomes writeable.
         */
        replicationOverwriteProtection?: enums.efs.FileSystemProtectionReplicationOverwriteProtection;
    }

    /**
     * Describes the replication configuration for a specific file system.
     */
    export interface FileSystemReplicationConfiguration {
        /**
         * An array of destination objects. Only one destination object is supported.
         */
        destinations?: outputs.efs.FileSystemReplicationDestination[];
    }

    /**
     * Describes the destination file system in the replication configuration.
     */
    export interface FileSystemReplicationDestination {
        /**
         * The AWS For One Zone file systems, the replication configuration must specify the Availability Zone in which the destination file system is located. 
         *  Use the format ``us-east-1a`` to specify the Availability Zone. For more information about One Zone file systems, see [EFS file system types](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html) in the *Amazon EFS User Guide*.
         *   One Zone file system type is not available in all Availability Zones in AWS-Regions where Amazon EFS is available.
         */
        availabilityZoneName?: string;
        /**
         * The ID of the destination Amazon EFS file system.
         */
        fileSystemId?: string;
        /**
         * The ID of an kms-key-long used to protect the encrypted file system.
         */
        kmsKeyId?: string;
        /**
         * The AWS-Region in which the destination file system is located.
         *   For One Zone file systems, the replication configuration must specify the AWS-Region in which the destination file system is located.
         */
        region?: string;
    }

}

export namespace eks {
    /**
     * An access policy to associate with the current access entry.
     */
    export interface AccessEntryAccessPolicy {
        /**
         * The scope of an `AccessPolicy` that's associated to an `AccessEntry` .
         */
        accessScope: outputs.eks.AccessEntryAccessScope;
        /**
         * The ARN of the access policy to add to the access entry.
         */
        policyArn: string;
    }

    /**
     * The access scope of the access policy.
     */
    export interface AccessEntryAccessScope {
        /**
         * The namespaces to associate with the access scope. Only specify if Type is set to 'namespace'.
         */
        namespaces?: string[];
        /**
         * The type of the access scope.
         */
        type: enums.eks.AccessEntryAccessScopeType;
    }

    /**
     * A pod identity to associate with an add-on.
     */
    export interface AddonPodIdentityAssociation {
        /**
         * The IAM role ARN that the pod identity association is created for.
         */
        roleArn: string;
        /**
         * The Kubernetes service account that the pod identity association is created for.
         */
        serviceAccount: string;
    }

    /**
     * An object representing the Access Config to use for the cluster.
     */
    export interface ClusterAccessConfig {
        /**
         * Specify the authentication mode that should be used to create your cluster.
         */
        authenticationMode?: enums.eks.ClusterAccessConfigAuthenticationMode;
        /**
         * Set this value to false to avoid creating a default cluster admin Access Entry using the IAM principal used to create the cluster.
         */
        bootstrapClusterCreatorAdminPermissions?: boolean;
    }

    /**
     * Specify the placement group of the control plane machines for your cluster.
     */
    export interface ClusterControlPlanePlacement {
        /**
         * Specify the placement group name of the control place machines for your cluster.
         */
        groupName?: string;
    }

    /**
     * The encryption configuration for the cluster
     */
    export interface ClusterEncryptionConfig {
        /**
         * The encryption provider for the cluster.
         */
        provider?: outputs.eks.ClusterProvider;
        /**
         * Specifies the resources to be encrypted. The only supported value is "secrets".
         */
        resources?: string[];
    }

    /**
     * The Kubernetes network configuration for the cluster.
     */
    export interface ClusterKubernetesNetworkConfig {
        /**
         * Ipv4 or Ipv6. You can only specify ipv6 for 1.21 and later clusters that use version 1.10.1 or later of the Amazon VPC CNI add-on
         */
        ipFamily?: enums.eks.ClusterKubernetesNetworkConfigIpFamily;
        /**
         * The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. 
         */
        serviceIpv4Cidr?: string;
        /**
         * The CIDR block to assign Kubernetes service IP addresses from.
         */
        serviceIpv6Cidr?: string;
    }

    /**
     * The cluster control plane logging configuration for your cluster. 
     */
    export interface ClusterLoggingEnabledTypes {
        /**
         * The enabled control plane logs for your cluster. All log types are disabled if the array is empty.
         *
         * > When updating a resource, you must include this `EnabledTypes` property if the previous CloudFormation template of the resource had it.
         */
        enabledTypes?: outputs.eks.ClusterLoggingTypeConfig[];
    }

    /**
     * Enabled Logging Type
     */
    export interface ClusterLoggingTypeConfig {
        /**
         * name of the log type
         */
        type?: enums.eks.ClusterLoggingTypeConfigType;
    }

    /**
     * An object representing the Outpost configuration to use for AWS EKS outpost cluster.
     */
    export interface ClusterOutpostConfig {
        /**
         * Specify the Instance type of the machines that should be used to create your cluster.
         */
        controlPlaneInstanceType: string;
        /**
         * Specify the placement group of the control plane machines for your cluster.
         */
        controlPlanePlacement?: outputs.eks.ClusterControlPlanePlacement;
        /**
         * Specify one or more Arn(s) of Outpost(s) on which you would like to create your cluster.
         */
        outpostArns: string[];
    }

    export interface ClusterProvider {
        /**
         * Amazon Resource Name (ARN) or alias of the KMS key. The KMS key must be symmetric, created in the same region as the cluster, and if the KMS key was created in a different account, the user must have access to the KMS key.
         */
        keyArn?: string;
    }

    /**
     * An object representing the VPC configuration to use for an Amazon EKS cluster.
     */
    export interface ClusterResourcesVpcConfig {
        /**
         * Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false, which disables private access for your Kubernetes API server. If you disable private access and you have nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the nodes or Fargate pods.
         */
        endpointPrivateAccess?: boolean;
        /**
         * Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true, which enables public access for your Kubernetes API server.
         */
        endpointPublicAccess?: boolean;
        /**
         * The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0. If you've disabled private endpoint access and you have nodes or AWS Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks.
         */
        publicAccessCidrs?: string[];
        /**
         * Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane. If you don't specify a security group, the default security group for your VPC is used.
         */
        securityGroupIds?: string[];
        /**
         * Specify subnets for your Amazon EKS nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your nodes and the Kubernetes control plane.
         */
        subnetIds: string[];
    }

    /**
     * A key-value pair to associate with a pod.
     */
    export interface FargateProfileLabel {
        /**
         * The key name of the label.
         */
        key: string;
        /**
         * The value for the label. 
         */
        value: string;
    }

    export interface FargateProfileSelector {
        /**
         * The Kubernetes labels that the selector should match. A pod must contain all of the labels that are specified in the selector for it to be considered a match.
         */
        labels?: outputs.eks.FargateProfileLabel[];
        /**
         * The Kubernetes `namespace` that the selector should match.
         */
        namespace: string;
    }

    /**
     * An object representing an OpenID Connect (OIDC) configuration.
     */
    export interface IdentityProviderConfigOidcIdentityProviderConfig {
        /**
         * This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.
         */
        clientId: string;
        /**
         * The JWT claim that the provider uses to return your groups.
         */
        groupsClaim?: string;
        /**
         * The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).
         */
        groupsPrefix?: string;
        /**
         * The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.
         */
        issuerUrl: string;
        /**
         * The key-value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
         */
        requiredClaims?: outputs.eks.IdentityProviderConfigRequiredClaim[];
        /**
         * The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.
         */
        usernameClaim?: string;
        /**
         * The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.
         */
        usernamePrefix?: string;
    }

    /**
     * The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.
     */
    export interface IdentityProviderConfigRequiredClaim {
        /**
         * The key of the requiredClaims.
         */
        key: string;
        /**
         * The value for the requiredClaims.
         */
        value: string;
    }

    /**
     * Enable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs based on log types. By default, cluster control plane logs aren't exported to CloudWatch Logs.
     */
    export interface Logging {
        /**
         * The cluster control plane logging configuration for your cluster. 
         */
        clusterLogging?: outputs.eks.ClusterLoggingEnabledTypes;
    }

    /**
     * An object representing a launch template specification for AWS EKS Nodegroup.
     */
    export interface NodegroupLaunchTemplateSpecification {
        /**
         * The ID of the launch template.
         *
         * You must specify either the launch template ID or the launch template name in the request, but not both.
         */
        id?: string;
        /**
         * The name of the launch template.
         *
         * You must specify either the launch template name or the launch template ID in the request, but not both.
         */
        name?: string;
        /**
         * The version number of the launch template to use. If no version is specified, then the template's default version is used.
         */
        version?: string;
    }

    /**
     * An object representing a remote access configuration specification for AWS EKS Nodegroup.
     */
    export interface NodegroupRemoteAccess {
        /**
         * The Amazon EC2 SSH key name that provides access for SSH communication with the nodes in the managed node group. For more information, see [Amazon EC2 key pairs and Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Linux Instances* . For Windows, an Amazon EC2 SSH key is used to obtain the RDP password. For more information, see [Amazon EC2 key pairs and Windows instances](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-key-pairs.html) in the *Amazon Elastic Compute Cloud User Guide for Windows Instances* .
         */
        ec2SshKey: string;
        /**
         * The security group IDs that are allowed SSH access (port 22) to the nodes. For Windows, the port is 3389. If you specify an Amazon EC2 SSH key but don't specify a source security group when you create a managed node group, then the port on the nodes is opened to the internet ( `0.0.0.0/0` ). For more information, see [Security Groups for Your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) in the *Amazon Virtual Private Cloud User Guide* .
         */
        sourceSecurityGroups?: string[];
    }

    /**
     * An object representing a auto scaling group specification for AWS EKS Nodegroup.
     */
    export interface NodegroupScalingConfig {
        /**
         * The current number of nodes that the managed node group should maintain.
         *
         * > If you use the Kubernetes [Cluster Autoscaler](https://docs.aws.amazon.com/https://github.com/kubernetes/autoscaler#kubernetes-autoscaler) , you shouldn't change the `desiredSize` value directly, as this can cause the Cluster Autoscaler to suddenly scale up or scale down. 
         *
         * Whenever this parameter changes, the number of worker nodes in the node group is updated to the specified size. If this parameter is given a value that is smaller than the current number of running worker nodes, the necessary number of worker nodes are terminated to match the given value. When using CloudFormation, no action occurs if you remove this parameter from your CFN template.
         *
         * This parameter can be different from `minSize` in some cases, such as when starting with extra hosts for testing. This parameter can also be different when you want to start with an estimated number of needed hosts, but let the Cluster Autoscaler reduce the number if there are too many. When the Cluster Autoscaler is used, the `desiredSize` parameter is altered by the Cluster Autoscaler (but can be out-of-date for short periods of time). the Cluster Autoscaler doesn't scale a managed node group lower than `minSize` or higher than `maxSize` .
         */
        desiredSize?: number;
        /**
         * The maximum number of nodes that the managed node group can scale out to. For information about the maximum number that you can specify, see [Amazon EKS service quotas](https://docs.aws.amazon.com/eks/latest/userguide/service-quotas.html) in the *Amazon EKS User Guide* .
         */
        maxSize?: number;
        /**
         * The minimum number of nodes that the managed node group can scale in to.
         */
        minSize?: number;
    }

    /**
     * An object representing a Taint specification for AWS EKS Nodegroup.
     */
    export interface NodegroupTaint {
        /**
         * The effect of the taint.
         */
        effect?: string;
        /**
         * The key of the taint.
         */
        key?: string;
        /**
         * The value of the taint.
         */
        value?: string;
    }

    /**
     * The node group update configuration.
     */
    export interface NodegroupUpdateConfig {
        /**
         * The maximum number of nodes unavailable at once during a version update. Nodes will be updated in parallel. This value or maxUnavailablePercentage is required to have a value.The maximum number is 100. 
         */
        maxUnavailable?: number;
        /**
         * The maximum percentage of nodes unavailable during a version update. This percentage of nodes will be updated in parallel, up to 100 nodes at once. This value or maxUnavailable is required to have a value.
         */
        maxUnavailablePercentage?: number;
    }

}

export namespace elasticache {
    /**
     * Specifies the authentication mode to use. Below is an example of the possible JSON values:
     *
     * ```
     * { Passwords: ["*****", "******"] // If Type is password.
     * }
     * ```
     */
    export interface AuthenticationModeProperties {
        /**
         * Passwords used for this user account. You can create up to two passwords for each user.
         */
        passwords?: string[];
        /**
         * Authentication Type
         */
        type: enums.elasticache.UserAuthenticationModePropertiesType;
    }

    export interface GlobalReplicationGroupMember {
        /**
         * Regionally unique identifier for the member i.e. ReplicationGroupId.
         */
        replicationGroupId?: string;
        /**
         * The AWS region of the Global Datastore member.
         */
        replicationGroupRegion?: string;
        /**
         * Indicates the role of the member, primary or secondary.
         */
        role?: enums.elasticache.GlobalReplicationGroupMemberRole;
    }

    export interface GlobalReplicationGroupRegionalConfiguration {
        /**
         * The replication group id of the Global Datastore member.
         */
        replicationGroupId?: string;
        /**
         * The AWS region of the Global Datastore member.
         */
        replicationGroupRegion?: string;
        /**
         * A list of PreferredAvailabilityZones objects that specifies the configuration of a node group in the resharded cluster. 
         */
        reshardingConfigurations?: outputs.elasticache.GlobalReplicationGroupReshardingConfiguration[];
    }

    export interface GlobalReplicationGroupReshardingConfiguration {
        /**
         * Unique identifier for the Node Group. This is either auto-generated by ElastiCache (4-digit id) or a user supplied id.
         */
        nodeGroupId?: string;
        /**
         * A list of preferred availability zones for the nodes of new node groups.
         */
        preferredAvailabilityZones?: string[];
    }

    /**
     * The cache capacity limit of the Serverless Cache.
     */
    export interface ServerlessCacheCacheUsageLimits {
        /**
         * The maximum data storage limit in the cache, expressed in Gigabytes.
         */
        dataStorage?: outputs.elasticache.ServerlessCacheDataStorage;
        /**
         * The number of ElastiCache Processing Units (ECPU) the cache can consume per second.
         */
        ecpuPerSecond?: outputs.elasticache.ServerlessCacheEcpuPerSecond;
    }

    /**
     * The cached data capacity of the Serverless Cache.
     */
    export interface ServerlessCacheDataStorage {
        /**
         * The maximum cached data capacity of the Serverless Cache.
         */
        maximum?: number;
        /**
         * The minimum cached data capacity of the Serverless Cache.
         */
        minimum?: number;
        /**
         * The unit of cached data capacity of the Serverless Cache.
         */
        unit: enums.elasticache.ServerlessCacheDataStorageUnit;
    }

    /**
     * The ECPU per second of the Serverless Cache.
     */
    export interface ServerlessCacheEcpuPerSecond {
        /**
         * The maximum ECPU per second of the Serverless Cache.
         */
        maximum?: number;
        /**
         * The minimum ECPU per second of the Serverless Cache.
         */
        minimum?: number;
    }

    /**
     * The address and the port.
     */
    export interface ServerlessCacheEndpoint {
        /**
         * Endpoint address.
         */
        address?: string;
        /**
         * Endpoint port.
         */
        port?: string;
    }

}

export namespace elasticbeanstalk {
    export interface ApplicationMaxAgeRule {
        /**
         * Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
         */
        deleteSourceFromS3?: boolean;
        /**
         * Specify true to apply the rule, or false to disable it.
         */
        enabled?: boolean;
        /**
         * Specify the number of days to retain an application versions.
         */
        maxAgeInDays?: number;
    }

    export interface ApplicationMaxCountRule {
        /**
         * Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
         */
        deleteSourceFromS3?: boolean;
        /**
         * Specify true to apply the rule, or false to disable it.
         */
        enabled?: boolean;
        /**
         * Specify the maximum number of application versions to retain.
         */
        maxCount?: number;
    }

    export interface ApplicationResourceLifecycleConfig {
        /**
         * The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The ServiceRole property is required the first time that you provide a ResourceLifecycleConfig for the application. After you provide it once, Elastic Beanstalk persists the Service Role with the application, and you don't need to specify it again. You can, however, specify it in subsequent updates to change the Service Role to another value.
         */
        serviceRole?: string;
        /**
         * Defines lifecycle settings for application versions.
         */
        versionLifecycleConfig?: outputs.elasticbeanstalk.ApplicationVersionLifecycleConfig;
    }

    export interface ApplicationVersionLifecycleConfig {
        /**
         * Specify a max age rule to restrict the length of time that application versions are retained for an application.
         */
        maxAgeRule?: outputs.elasticbeanstalk.ApplicationMaxAgeRule;
        /**
         * Specify a max count rule to restrict the number of application versions that are retained for an application.
         */
        maxCountRule?: outputs.elasticbeanstalk.ApplicationMaxCountRule;
    }

    export interface ApplicationVersionSourceBundle {
        /**
         * The Amazon S3 bucket where the data is located.
         */
        s3Bucket: string;
        /**
         * The Amazon S3 key where the data is located.
         */
        s3Key: string;
    }

    export interface ConfigurationTemplateConfigurationOptionSetting {
        /**
         * A unique namespace that identifies the option's associated AWS resource.
         */
        namespace: string;
        /**
         * The name of the configuration option.
         */
        optionName: string;
        /**
         * A unique resource name for the option setting. Use it for a time–based scaling configuration option. 
         */
        resourceName?: string;
        /**
         * The current value for the configuration option.
         */
        value?: string;
    }

    export interface ConfigurationTemplateSourceConfiguration {
        /**
         * The name of the application associated with the configuration.
         */
        applicationName: string;
        /**
         * The name of the configuration template.
         */
        templateName: string;
    }

    export interface EnvironmentOptionSetting {
        /**
         * A unique namespace that identifies the option's associated AWS resource.
         */
        namespace: string;
        /**
         * The name of the configuration option.
         */
        optionName: string;
        /**
         * A unique resource name for the option setting. Use it for a time–based scaling configuration option.
         */
        resourceName?: string;
        /**
         * The current value for the configuration option.
         */
        value?: string;
    }

    export interface EnvironmentTier {
        /**
         * The name of this environment tier.
         */
        name?: string;
        /**
         * The type of this environment tier.
         */
        type?: string;
        /**
         * The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.
         */
        version?: string;
    }

}

export namespace elasticloadbalancingv2 {
    /**
     * Specifies an action for a listener rule.
     */
    export interface ListenerAction {
        /**
         * [HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when ``Type`` is ``authenticate-cognito``.
         */
        authenticateCognitoConfig?: outputs.elasticloadbalancingv2.ListenerAuthenticateCognitoConfig;
        /**
         * [HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when ``Type`` is ``authenticate-oidc``.
         */
        authenticateOidcConfig?: outputs.elasticloadbalancingv2.ListenerAuthenticateOidcConfig;
        /**
         * [Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when ``Type`` is ``fixed-response``.
         */
        fixedResponseConfig?: outputs.elasticloadbalancingv2.ListenerFixedResponseConfig;
        /**
         * Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``.
         */
        forwardConfig?: outputs.elasticloadbalancingv2.ListenerForwardConfig;
        /**
         * The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.
         */
        order?: number;
        /**
         * [Application Load Balancer] Information for creating a redirect action. Specify only when ``Type`` is ``redirect``.
         */
        redirectConfig?: outputs.elasticloadbalancingv2.ListenerRedirectConfig;
        /**
         * The Amazon Resource Name (ARN) of the target group. Specify only when ``Type`` is ``forward`` and you want to route to a single target group. To route to one or more target groups, use ``ForwardConfig`` instead.
         */
        targetGroupArn?: string;
        /**
         * The type of action.
         */
        type: string;
    }

    /**
     * Specifies information required when integrating with Amazon Cognito to authenticate users.
     */
    export interface ListenerAuthenticateCognitoConfig {
        /**
         * The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. The following are possible values:
         *   +  deny```` - Return an HTTP 401 Unauthorized error.
         *   +  allow```` - Allow the request to be forwarded to the target.
         *   +  authenticate```` - Redirect the request to the IdP authorization endpoint. This is the default value.
         */
        onUnauthenticatedRequest?: string;
        /**
         * The set of user claims to be requested from the IdP. The default is ``openid``.
         *  To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
         */
        scope?: string;
        /**
         * The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
         */
        sessionCookieName?: string;
        /**
         * The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
         */
        sessionTimeout?: string;
        /**
         * The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Amazon Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.
         */
        userPoolDomain: string;
    }

    /**
     * Specifies information required using an identity provide (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
     */
    export interface ListenerAuthenticateOidcConfig {
        /**
         * The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set ``UseExistingClientSecret`` to true.
         */
        clientSecret?: string;
        /**
         * The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. The following are possible values:
         *   +  deny```` - Return an HTTP 401 Unauthorized error.
         *   +  allow```` - Allow the request to be forwarded to the target.
         *   +  authenticate```` - Redirect the request to the IdP authorization endpoint. This is the default value.
         */
        onUnauthenticatedRequest?: string;
        /**
         * The set of user claims to be requested from the IdP. The default is ``openid``.
         *  To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
         */
        scope?: string;
        /**
         * The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
         */
        sessionCookieName?: string;
        /**
         * The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
         */
        sessionTimeout?: string;
        /**
         * The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
         */
        tokenEndpoint: string;
        /**
         * Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.
         */
        useExistingClientSecret?: boolean;
        /**
         * The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
         */
        userInfoEndpoint: string;
    }

    /**
     * Specifies an SSL server certificate to use as the default certificate for a secure listener.
     */
    export interface ListenerCertificate {
        /**
         * The Amazon Resource Name (ARN) of the certificate.
         */
        certificateArn?: string;
    }

    /**
     * Specifies information required when returning a custom HTTP response.
     */
    export interface ListenerFixedResponseConfig {
        /**
         * The content type.
         *  Valid Values: text/plain | text/css | text/html | application/javascript | application/json
         */
        contentType?: string;
        /**
         * The message.
         */
        messageBody?: string;
        /**
         * The HTTP response code (2XX, 4XX, or 5XX).
         */
        statusCode: string;
    }

    /**
     * Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``.
     */
    export interface ListenerForwardConfig {
        /**
         * Information about the target group stickiness for a rule.
         */
        targetGroupStickinessConfig?: outputs.elasticloadbalancingv2.ListenerTargetGroupStickinessConfig;
        /**
         * Information about how traffic will be distributed between multiple target groups in a forward rule.
         */
        targetGroups?: outputs.elasticloadbalancingv2.ListenerTargetGroupTuple[];
    }

    /**
     * Specifies the configuration information for mutual authentication.
     */
    export interface ListenerMutualAuthentication {
        /**
         * Indicates whether expired client certificates are ignored.
         */
        ignoreClientCertificateExpiry?: boolean;
        /**
         * The client certificate handling method. Options are ``off``, ``passthrough`` or ``verify``. The default value is ``off``.
         */
        mode?: string;
        /**
         * The Amazon Resource Name (ARN) of the trust store.
         */
        trustStoreArn?: string;
    }

    /**
     * Information about a redirect action.
     *  A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.
     *  You can reuse URI components using the following reserved keywords:
     *   +  #{protocol}
     *   +  #{host}
     *   +  #{port}
     *   +  #{path} (the leading "/" is removed)
     *   +  #{query}
     *   
     *  For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&value=xyz".
     */
    export interface ListenerRedirectConfig {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain #{host}.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.
         */
        path?: string;
        /**
         * The port. You can specify a value from 1 to 65535 or #{port}.
         */
        port?: string;
        /**
         * The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).
         */
        statusCode: string;
    }

    /**
     * Specifies an action for a listener rule.
     */
    export interface ListenerRuleAction {
        /**
         * [HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when ``Type`` is ``authenticate-cognito``.
         */
        authenticateCognitoConfig?: outputs.elasticloadbalancingv2.ListenerRuleAuthenticateCognitoConfig;
        /**
         * [HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when ``Type`` is ``authenticate-oidc``.
         */
        authenticateOidcConfig?: outputs.elasticloadbalancingv2.ListenerRuleAuthenticateOidcConfig;
        /**
         * [Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when ``Type`` is ``fixed-response``.
         */
        fixedResponseConfig?: outputs.elasticloadbalancingv2.ListenerRuleFixedResponseConfig;
        /**
         * Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``.
         */
        forwardConfig?: outputs.elasticloadbalancingv2.ListenerRuleForwardConfig;
        /**
         * The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first.
         */
        order?: number;
        /**
         * [Application Load Balancer] Information for creating a redirect action. Specify only when ``Type`` is ``redirect``.
         */
        redirectConfig?: outputs.elasticloadbalancingv2.ListenerRuleRedirectConfig;
        /**
         * The Amazon Resource Name (ARN) of the target group. Specify only when ``Type`` is ``forward`` and you want to route to a single target group. To route to one or more target groups, use ``ForwardConfig`` instead.
         */
        targetGroupArn?: string;
        /**
         * The type of action.
         */
        type: string;
    }

    /**
     * Specifies information required when integrating with Amazon Cognito to authenticate users.
     */
    export interface ListenerRuleAuthenticateCognitoConfig {
        /**
         * The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. The following are possible values:
         *   +  deny```` - Return an HTTP 401 Unauthorized error.
         *   +  allow```` - Allow the request to be forwarded to the target.
         *   +  authenticate```` - Redirect the request to the IdP authorization endpoint. This is the default value.
         */
        onUnauthenticatedRequest?: string;
        /**
         * The set of user claims to be requested from the IdP. The default is ``openid``.
         *  To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
         */
        scope?: string;
        /**
         * The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
         */
        sessionCookieName?: string;
        /**
         * The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
         */
        sessionTimeout?: number;
        /**
         * The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Amazon Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Amazon Cognito user pool.
         */
        userPoolDomain: string;
    }

    /**
     * Specifies information required using an identity provide (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
     */
    export interface ListenerRuleAuthenticateOidcConfig {
        /**
         * The query parameters (up to 10) to include in the redirect request to the authorization endpoint.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set ``UseExistingClientSecret`` to true.
         */
        clientSecret?: string;
        /**
         * The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. The following are possible values:
         *   +  deny```` - Return an HTTP 401 Unauthorized error.
         *   +  allow```` - Allow the request to be forwarded to the target.
         *   +  authenticate```` - Redirect the request to the IdP authorization endpoint. This is the default value.
         */
        onUnauthenticatedRequest?: string;
        /**
         * The set of user claims to be requested from the IdP. The default is ``openid``.
         *  To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.
         */
        scope?: string;
        /**
         * The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie.
         */
        sessionCookieName?: string;
        /**
         * The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
         */
        sessionTimeout?: number;
        /**
         * The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
         */
        tokenEndpoint: string;
        /**
         * Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false.
         */
        useExistingClientSecret?: boolean;
        /**
         * The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path.
         */
        userInfoEndpoint: string;
    }

    /**
     * Specifies information required when returning a custom HTTP response.
     */
    export interface ListenerRuleFixedResponseConfig {
        /**
         * The content type.
         *  Valid Values: text/plain | text/css | text/html | application/javascript | application/json
         */
        contentType?: string;
        /**
         * The message.
         */
        messageBody?: string;
        /**
         * The HTTP response code (2XX, 4XX, or 5XX).
         */
        statusCode: string;
    }

    /**
     * Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when ``Type`` is ``forward``. If you specify both ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group using ``ForwardConfig`` and it must be the same target group specified in ``TargetGroupArn``.
     */
    export interface ListenerRuleForwardConfig {
        /**
         * Information about the target group stickiness for a rule.
         */
        targetGroupStickinessConfig?: outputs.elasticloadbalancingv2.ListenerRuleTargetGroupStickinessConfig;
        /**
         * Information about how traffic will be distributed between multiple target groups in a forward rule.
         */
        targetGroups?: outputs.elasticloadbalancingv2.ListenerRuleTargetGroupTuple[];
    }

    /**
     * Information about a host header condition.
     */
    export interface ListenerRuleHostHeaderConfig {
        /**
         * The host names. The maximum size of each name is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character).
         *  If you specify multiple strings, the condition is satisfied if one of the strings matches the host name.
         */
        values?: string[];
    }

    /**
     * Information about an HTTP header condition.
     *  There is a set of standard HTTP header fields. You can also define custom HTTP header fields.
     */
    export interface ListenerRuleHttpHeaderConfig {
        /**
         * The name of the HTTP header field. The maximum size is 40 characters. The header name is case insensitive. The allowed characters are specified by RFC 7230. Wildcards are not supported.
         */
        httpHeaderName?: string;
        /**
         * The strings to compare against the value of the HTTP header. The maximum size of each string is 128 characters. The comparison strings are case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character).
         *  If the same header appears multiple times in the request, we search them in order until a match is found.
         *  If you specify multiple strings, the condition is satisfied if one of the strings matches the value of the HTTP header. To require that all of the strings are a match, create one condition per string.
         */
        values?: string[];
    }

    /**
     * Information about an HTTP method condition.
     *  HTTP defines a set of request methods, also referred to as HTTP verbs. For more information, see the [HTTP Method Registry](https://docs.aws.amazon.com/https://www.iana.org/assignments/http-methods/http-methods.xhtml). You can also define custom HTTP methods.
     */
    export interface ListenerRuleHttpRequestMethodConfig {
        /**
         * The name of the request method. The maximum size is 40 characters. The allowed characters are A-Z, hyphen (-), and underscore (_). The comparison is case sensitive. Wildcards are not supported; therefore, the method name must be an exact match.
         *  If you specify multiple strings, the condition is satisfied if one of the strings matches the HTTP request method. We recommend that you route GET and HEAD requests in the same way, because the response to a HEAD request may be cached.
         */
        values?: string[];
    }

    /**
     * Information about a path pattern condition.
     */
    export interface ListenerRulePathPatternConfig {
        /**
         * The path patterns to compare against the request URL. The maximum size of each string is 128 characters. The comparison is case sensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character).
         *  If you specify multiple strings, the condition is satisfied if one of them matches the request URL. The path pattern is compared only to the path of the URL, not to its query string.
         */
        values?: string[];
    }

    /**
     * Information about a query string condition.
     *  The query string component of a URI starts after the first '?' character and is terminated by either a '#' character or the end of the URI. A typical query string contains key/value pairs separated by '&' characters. The allowed characters are specified by RFC 3986. Any character can be percentage encoded.
     */
    export interface ListenerRuleQueryStringConfig {
        /**
         * The key/value pairs or values to find in the query string. The maximum size of each string is 128 characters. The comparison is case insensitive. The following wildcard characters are supported: * (matches 0 or more characters) and ? (matches exactly 1 character). To search for a literal '*' or '?' character in a query string, you must escape these characters in ``Values`` using a '\' character.
         *  If you specify multiple key/value pairs or values, the condition is satisfied if one of them is found in the query string.
         */
        values?: outputs.elasticloadbalancingv2.ListenerRuleQueryStringKeyValue[];
    }

    /**
     * Information about a key/value pair.
     */
    export interface ListenerRuleQueryStringKeyValue {
        /**
         * The key. You can omit the key.
         */
        key?: string;
        /**
         * The value.
         */
        value?: string;
    }

    /**
     * Information about a redirect action.
     *  A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.
     *  You can reuse URI components using the following reserved keywords:
     *   +  #{protocol}
     *   +  #{host}
     *   +  #{port}
     *   +  #{path} (the leading "/" is removed)
     *   +  #{query}
     *   
     *  For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&value=xyz".
     */
    export interface ListenerRuleRedirectConfig {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain #{host}.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}.
         */
        path?: string;
        /**
         * The port. You can specify a value from 1 to 65535 or #{port}.
         */
        port?: string;
        /**
         * The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?", as it is automatically added. You can specify any of the reserved keywords.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302).
         */
        statusCode: string;
    }

    /**
     * Specifies a condition for a listener rule.
     */
    export interface ListenerRuleRuleCondition {
        /**
         * The field in the HTTP request. The following are the possible values:
         *   +   ``http-header`` 
         *   +   ``http-request-method`` 
         *   +   ``host-header`` 
         *   +   ``path-pattern`` 
         *   +   ``query-string`` 
         *   +   ``source-ip``
         */
        field?: string;
        /**
         * Information for a host header condition. Specify only when ``Field`` is ``host-header``.
         */
        hostHeaderConfig?: outputs.elasticloadbalancingv2.ListenerRuleHostHeaderConfig;
        /**
         * Information for an HTTP header condition. Specify only when ``Field`` is ``http-header``.
         */
        httpHeaderConfig?: outputs.elasticloadbalancingv2.ListenerRuleHttpHeaderConfig;
        /**
         * Information for an HTTP method condition. Specify only when ``Field`` is ``http-request-method``.
         */
        httpRequestMethodConfig?: outputs.elasticloadbalancingv2.ListenerRuleHttpRequestMethodConfig;
        /**
         * Information for a path pattern condition. Specify only when ``Field`` is ``path-pattern``.
         */
        pathPatternConfig?: outputs.elasticloadbalancingv2.ListenerRulePathPatternConfig;
        /**
         * Information for a query string condition. Specify only when ``Field`` is ``query-string``.
         */
        queryStringConfig?: outputs.elasticloadbalancingv2.ListenerRuleQueryStringConfig;
        /**
         * Information for a source IP condition. Specify only when ``Field`` is ``source-ip``.
         */
        sourceIpConfig?: outputs.elasticloadbalancingv2.ListenerRuleSourceIpConfig;
        /**
         * The condition value. Specify only when ``Field`` is ``host-header`` or ``path-pattern``. Alternatively, to specify multiple host names or multiple path patterns, use ``HostHeaderConfig`` or ``PathPatternConfig``.
         *  If ``Field`` is ``host-header`` and you're not using ``HostHeaderConfig``, you can specify a single host name (for example, my.example.com). A host name is case insensitive, can be up to 128 characters in length, and can contain any of the following characters.
         *   +  A-Z, a-z, 0-9
         *   +  - .
         *   +  * (matches 0 or more characters)
         *   +  ? (matches exactly 1 character)
         *   
         *  If ``Field`` is ``path-pattern`` and you're not using ``PathPatternConfig``, you can specify a single path pattern (for example, /img/*). A path pattern is case-sensitive, can be up to 128 characters in length, and can contain any of the following characters.
         *   +  A-Z, a-z, 0-9
         *   +  _ - . $ / ~ " ' @ : +
         *   +  & (using &amp;)
         *   +  * (matches 0 or more characters)
         *   +  ? (matches exactly 1 character)
         */
        values?: string[];
    }

    /**
     * Information about a source IP condition.
     *  You can use this condition to route based on the IP address of the source that connects to the load balancer. If a client is behind a proxy, this is the IP address of the proxy not the IP address of the client.
     */
    export interface ListenerRuleSourceIpConfig {
        /**
         * The source IP addresses, in CIDR format. You can use both IPv4 and IPv6 addresses. Wildcards are not supported.
         *  If you specify multiple addresses, the condition is satisfied if the source IP address of the request matches one of the CIDR blocks. This condition is not satisfied by the addresses in the X-Forwarded-For header.
         */
        values?: string[];
    }

    /**
     * Information about the target group stickiness for a rule.
     */
    export interface ListenerRuleTargetGroupStickinessConfig {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        durationSeconds?: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    /**
     * Information about how traffic will be distributed between multiple target groups in a forward rule.
     */
    export interface ListenerRuleTargetGroupTuple {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        targetGroupArn?: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    /**
     * Information about the target group stickiness for a rule.
     */
    export interface ListenerTargetGroupStickinessConfig {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        durationSeconds?: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    /**
     * Information about how traffic will be distributed between multiple target groups in a forward rule.
     */
    export interface ListenerTargetGroupTuple {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        targetGroupArn?: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    /**
     * Specifies an attribute for an Application Load Balancer, a Network Load Balancer, or a Gateway Load Balancer.
     */
    export interface LoadBalancerAttribute {
        /**
         * The name of the attribute.
         *  The following attributes are supported by all load balancers:
         *   +   ``deletion_protection.enabled`` - Indicates whether deletion protection is enabled. The value is ``true`` or ``false``. The default is ``false``.
         *   +   ``load_balancing.cross_zone.enabled`` - Indicates whether cross-zone load balancing is enabled. The possible values are ``true`` and ``false``. The default for Network Load Balancers and Gateway Load Balancers is ``false``. The default for Application Load Balancers is ``true``, and cannot be changed.
         *   
         *  The following attributes are supported by both Application Load Balancers and Network Load Balancers:
         *   +   ``access_logs.s3.enabled`` - Indicates whether access logs are enabled. The value is ``true`` or ``false``. The default is ``false``.
         *   +   ``access_logs.s3.bucket`` - The name of the S3 bucket for the access logs. This attribute is required if access logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.
         *   +   ``access_logs.s3.prefix`` - The prefix for the location in the S3 bucket for the access logs.
         *   +   ``ipv6.deny_all_igw_traffic`` - Blocks internet gateway (IGW) access to the load balancer. It is set to ``false`` for internet-facing load balancers and ``true`` for internal load balancers, preventing unintended access to your internal load balancer through an internet gateway.
         *   
         *  The following attributes are supported by only Application Load Balancers:
         *   +   ``idle_timeout.timeout_seconds`` - The idle timeout value, in seconds. The valid range is 1-4000 seconds. The default is 60 seconds.
         *   +   ``client_keep_alive.seconds`` - The client keep alive value, in seconds. The valid range is 60-604800 seconds. The default is 3600 seconds.
         *   +   ``connection_logs.s3.enabled`` - Indicates whether connection logs are enabled. The value is ``true`` or ``false``. The default is ``false``.
         *   +   ``connection_logs.s3.bucket`` - The name of the S3 bucket for the connection logs. This attribute is required if connection logs are enabled. The bucket must exist in the same region as the load balancer and have a bucket policy that grants Elastic Load Balancing permissions to write to the bucket.
         *   +   ``connection_logs.s3.prefix`` - The prefix for the location in the S3 bucket for the connection logs.
         *   +   ``routing.http.desync_mitigation_mode`` - Determines how the load balancer handles requests that might pose a security risk to your application. The possible values are ``monitor``, ``defensive``, and ``strictest``. The default is ``defensive``.
         *   +   ``routing.http.drop_invalid_header_fields.enabled`` - Indicates whether HTTP headers with invalid header fields are removed by the load balancer (``true``) or routed to targets (``false``). The default is ``false``.
         *   +   ``routing.http.preserve_host_header.enabled`` - Indicates whether the Application Load Balancer should preserve the ``Host`` header in the HTTP request and send it to the target without any change. The possible values are ``true`` and ``false``. The default is ``false``.
         *   +   ``routing.http.x_amzn_tls_version_and_cipher_suite.enabled`` - Indicates whether the two headers (``x-amzn-tls-version`` and ``x-amzn-tls-cipher-suite``), which contain information about the negotiated TLS version and cipher suite, are added to the client request before sending it to the target. The ``x-amzn-tls-version`` header has information about the TLS protocol version negotiated with the client, and the ``x-amzn-tls-cipher-suite`` header has information about the cipher suite negotiated with the client. Both headers are in OpenSSL format. The possible values for the attribute are ``true`` and ``false``. The default is ``false``.
         *   +   ``routing.http.xff_client_port.enabled`` - Indicates whether the ``X-Forwarded-For`` header should preserve the source port that the client used to connect to the load balancer. The possible values are ``true`` and ``false``. The default is ``false``.
         *   +   ``routing.http.xff_header_processing.mode`` - Enables you to modify, preserve, or remove the ``X-Forwarded-For`` header in the HTTP request before the Application Load Balancer sends the request to the target. The possible values are ``append``, ``preserve``, and ``remove``. The default is ``append``.
         *   +  If the value is ``append``, the Application Load Balancer adds the client IP address (of the last hop) to the ``X-Forwarded-For`` header in the HTTP request before it sends it to targets.
         *   +  If the value is ``preserve`` the Application Load Balancer preserves the ``X-Forwarded-For`` header in the HTTP request, and sends it to targets without any change.
         *   +  If the value is ``remove``, the Application Load Balancer removes the ``X-Forwarded-For`` header in the HTTP request before it sends it to targets.
         *   
         *   +   ``routing.http2.enabled`` - Indicates whether HTTP/2 is enabled. The possible values are ``true`` and ``false``. The default is ``true``. Elastic Load Balancing requires that message header names contain only alphanumeric characters and hyphens.
         *   +   ``waf.fail_open.enabled`` - Indicates whether to allow a WAF-enabled load balancer to route requests to targets if it is unable to forward the request to AWS WAF. The possible values are ``true`` and ``false``. The default is ``false``.
         *   
         *  The following attributes are supported by only Network Load Balancers:
         *   +   ``dns_record.client_routing_policy`` - Indicates how traffic is distributed among the load balancer Availability Zones. The possible values are ``availability_zone_affinity`` with 100 percent zonal affinity, ``partial_availability_zone_affinity`` with 85 percent zonal affinity, and ``any_availability_zone`` with 0 percent zonal affinity.
         */
        key?: string;
        /**
         * The value of the attribute.
         */
        value?: string;
    }

    /**
     * Specifies a subnet for a load balancer.
     */
    export interface LoadBalancerSubnetMapping {
        /**
         * [Network Load Balancers] The allocation ID of the Elastic IP address for an internet-facing load balancer.
         */
        allocationId?: string;
        /**
         * [Network Load Balancers] The IPv6 address.
         */
        iPv6Address?: string;
        /**
         * [Network Load Balancers] The private IPv4 address for an internal load balancer.
         */
        privateIPv4Address?: string;
        /**
         * The ID of the subnet.
         */
        subnetId: string;
    }

    export interface TargetGroupAttribute {
        /**
         * The value of the attribute.
         */
        key?: string;
        /**
         * The name of the attribute.
         */
        value?: string;
    }

    export interface TargetGroupMatcher {
        /**
         * You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.
         */
        grpcCode?: string;
        /**
         * For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values or a range of values. 
         */
        httpCode?: string;
    }

    export interface TargetGroupTargetDescription {
        /**
         * An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.
         */
        availabilityZone?: string;
        /**
         * The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target. 
         */
        id: string;
        /**
         * The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. Not used if the target is a Lambda function.
         */
        port?: number;
    }

    export interface TrustStoreRevocation {
        /**
         * The number of revoked certificates.
         */
        numberOfRevokedEntries?: number;
        /**
         * The revocation ID of the revocation file.
         */
        revocationId?: string;
        /**
         * The type of revocation file.
         */
        revocationType?: string;
        /**
         * The Amazon Resource Name (ARN) of the trust store.
         */
        trustStoreArn?: string;
    }

    export interface TrustStoreRevocationRevocationContent {
        /**
         * The type of revocation file.
         */
        revocationType?: string;
        /**
         * The Amazon S3 bucket for the revocation file.
         */
        s3Bucket?: string;
        /**
         * The Amazon S3 path for the revocation file.
         */
        s3Key?: string;
        /**
         * The Amazon S3 object version of the revocation file.
         */
        s3ObjectVersion?: string;
    }

}

export namespace emr {
}

export namespace emrcontainers {
    export interface VirtualClusterContainerInfo {
        /**
         * The information about the Amazon EKS cluster.
         */
        eksInfo: outputs.emrcontainers.VirtualClusterEksInfo;
    }

    export interface VirtualClusterContainerProvider {
        /**
         * The ID of the container cluster
         */
        id: string;
        /**
         * The information about the container cluster.
         */
        info: outputs.emrcontainers.VirtualClusterContainerInfo;
        /**
         * The type of the container provider
         */
        type: string;
    }

    export interface VirtualClusterEksInfo {
        /**
         * The namespaces of the EKS cluster.
         *
         * *Minimum* : 1
         *
         * *Maximum* : 63
         *
         * *Pattern* : `[a-z0-9]([-a-z0-9]*[a-z0-9])?`
         */
        namespace: string;
    }

}

export namespace emrserverless {
    /**
     * Configuration for Auto Start of Application
     */
    export interface ApplicationAutoStartConfiguration {
        /**
         * If set to true, the Application will automatically start. Defaults to true.
         */
        enabled?: boolean;
    }

    /**
     * Configuration for Auto Stop of Application
     */
    export interface ApplicationAutoStopConfiguration {
        /**
         * If set to true, the Application will automatically stop after being idle. Defaults to true.
         */
        enabled?: boolean;
        /**
         * The amount of time [in minutes] to wait before auto stopping the Application when idle. Defaults to 15 minutes.
         */
        idleTimeoutMinutes?: number;
    }

    export interface ApplicationCloudWatchLoggingConfiguration {
        /**
         * If set to false, CloudWatch logging will be turned off. Defaults to false.
         */
        enabled?: boolean;
        /**
         * KMS key ARN to encrypt the logs stored in given CloudWatch log-group.
         */
        encryptionKeyArn?: string;
        /**
         * Log-group name to produce log-streams on CloudWatch. If undefined, logs will be produced in a default log-group /aws/emr-serverless
         */
        logGroupName?: string;
        /**
         * Log-stream name prefix by which log-stream names will start in the CloudWatch Log-group.
         */
        logStreamNamePrefix?: string;
        /**
         * The specific log-streams which need to be uploaded to CloudWatch.
         */
        logTypeMap?: outputs.emrserverless.ApplicationLogTypeMapKeyValuePair[];
    }

    /**
     * Configuration for a JobRun.
     */
    export interface ApplicationConfigurationObject {
        /**
         * String with a maximum length of 1024.
         */
        classification: string;
        configurations?: outputs.emrserverless.ApplicationConfigurationObject[];
        properties?: {[key: string]: string};
    }

    /**
     * The image configuration.
     */
    export interface ApplicationImageConfigurationInput {
        /**
         * The URI of an image in the Amazon ECR registry. This field is required when you create a new application. If you leave this field blank in an update, Amazon EMR will remove the image configuration.
         */
        imageUri?: string;
    }

    export interface ApplicationInitialCapacityConfig {
        workerConfiguration: outputs.emrserverless.ApplicationWorkerConfiguration;
        /**
         * Initial count of workers to be initialized when an Application is started. This count will be continued to be maintained until the Application is stopped
         */
        workerCount: number;
    }

    export interface ApplicationInitialCapacityConfigKeyValuePair {
        /**
         * Worker type for an analytics framework.
         */
        key: string;
        value: outputs.emrserverless.ApplicationInitialCapacityConfig;
    }

    export interface ApplicationLogTypeMapKeyValuePair {
        key: string;
        value: string[];
    }

    export interface ApplicationManagedPersistenceMonitoringConfiguration {
        /**
         * If set to false, managed logging will be turned off. Defaults to true.
         */
        enabled?: boolean;
        /**
         * KMS key ARN to encrypt the logs stored in managed persistence
         */
        encryptionKeyArn?: string;
    }

    export interface ApplicationMaximumAllowedResources {
        /**
         * Per worker CPU resource. vCPU is the only supported unit and specifying vCPU is optional.
         */
        cpu: string;
        /**
         * Per worker Disk resource. GB is the only supported unit and specifying GB is optional
         */
        disk?: string;
        /**
         * Per worker memory resource. GB is the only supported unit and specifying GB is optional.
         */
        memory: string;
    }

    /**
     * Monitoring configuration for batch and interactive JobRun.
     */
    export interface ApplicationMonitoringConfiguration {
        /**
         * CloudWatch logging configurations for a JobRun.
         */
        cloudWatchLoggingConfiguration?: outputs.emrserverless.ApplicationCloudWatchLoggingConfiguration;
        /**
         * Managed log persistence configurations for a JobRun.
         */
        managedPersistenceMonitoringConfiguration?: outputs.emrserverless.ApplicationManagedPersistenceMonitoringConfiguration;
        /**
         * S3 monitoring configurations for a JobRun.
         */
        s3MonitoringConfiguration?: outputs.emrserverless.ApplicationS3MonitoringConfiguration;
    }

    export interface ApplicationNetworkConfiguration {
        /**
         * The ID of the security groups in the VPC to which you want to connect your job or application.
         */
        securityGroupIds?: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect your job or application.
         */
        subnetIds?: string[];
    }

    export interface ApplicationS3MonitoringConfiguration {
        /**
         * KMS key ARN to encrypt the logs stored in given s3
         */
        encryptionKeyArn?: string;
        logUri?: string;
    }

    export interface ApplicationWorkerConfiguration {
        /**
         * Per worker CPU resource. vCPU is the only supported unit and specifying vCPU is optional.
         */
        cpu: string;
        /**
         * Per worker Disk resource. GB is the only supported unit and specifying GB is optional
         */
        disk?: string;
        /**
         * Per worker memory resource. GB is the only supported unit and specifying GB is optional.
         */
        memory: string;
    }

    /**
     * The specifications for a worker type.
     */
    export interface ApplicationWorkerTypeSpecificationInput {
        /**
         * The image configuration for a worker type.
         */
        imageConfiguration?: outputs.emrserverless.ApplicationImageConfigurationInput;
    }

}

export namespace entityresolution {
    export interface IdMappingWorkflowIdMappingTechniques {
        /**
         * The type of ID mapping.
         */
        idMappingType?: enums.entityresolution.IdMappingWorkflowIdMappingTechniquesIdMappingType;
        /**
         * An object which defines any additional configurations required by the provider service.
         */
        providerProperties?: outputs.entityresolution.IdMappingWorkflowProviderProperties;
    }

    export interface IdMappingWorkflowInputSource {
        /**
         * An Glue table ARN for the input source table or IdNamespace ARN
         */
        inputSourceArn: string;
        /**
         * The ARN (Amazon Resource Name) that AWS Entity Resolution generated for the `SchemaMapping` .
         */
        schemaArn?: string;
        /**
         * The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
         *
         * The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
         *
         * The `TARGET` contains a configuration of `targetId` to which all `sourceIds` will resolve to.
         */
        type?: enums.entityresolution.IdMappingWorkflowInputSourceType;
    }

    export interface IdMappingWorkflowIntermediateSourceConfiguration {
        /**
         * The s3 path that would be used to stage the intermediate data being generated during workflow execution.
         */
        intermediateS3Path: string;
    }

    export interface IdMappingWorkflowOutputSource {
        /**
         * Customer AWS KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
         */
        kmsArn?: string;
        /**
         * The S3 path to which Entity Resolution will write the output table
         */
        outputS3Path: string;
    }

    export interface IdMappingWorkflowProviderProperties {
        /**
         * The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
         */
        intermediateSourceConfiguration?: outputs.entityresolution.IdMappingWorkflowIntermediateSourceConfiguration;
        /**
         * Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
         */
        providerConfiguration?: {[key: string]: string};
        /**
         * Arn of the Provider Service being used.
         */
        providerServiceArn: string;
    }

    export interface IdNamespaceIdMappingWorkflowProperties {
        /**
         * The type of ID mapping.
         */
        idMappingType: enums.entityresolution.IdNamespaceIdMappingWorkflowPropertiesIdMappingType;
        /**
         * An object which defines any additional configurations required by the provider service.
         */
        providerProperties?: outputs.entityresolution.IdNamespaceNamespaceProviderProperties;
    }

    export interface IdNamespaceInputSource {
        /**
         * An AWS Glue table ARN for the input source table.
         */
        inputSourceArn: string;
        /**
         * The name of the schema.
         */
        schemaName?: string;
    }

    export interface IdNamespaceNamespaceProviderProperties {
        /**
         * Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.
         */
        providerConfiguration?: {[key: string]: string};
        /**
         * The Amazon Resource Name (ARN) of the provider service.
         */
        providerServiceArn: string;
    }

    export interface MatchingWorkflowInputSource {
        /**
         * Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
         */
        applyNormalization?: boolean;
        /**
         * An Glue table ARN for the input source table
         */
        inputSourceArn: string;
        /**
         * The name of the schema.
         */
        schemaArn: string;
    }

    export interface MatchingWorkflowIntermediateSourceConfiguration {
        /**
         * The s3 path that would be used to stage the intermediate data being generated during workflow execution.
         */
        intermediateS3Path: string;
    }

    export interface MatchingWorkflowOutputAttribute {
        /**
         * Enables the ability to hash the column values in the output.
         */
        hashed?: boolean;
        /**
         * A name of a column to be written to the output. This must be an `InputField` name in the schema mapping.
         */
        name: string;
    }

    export interface MatchingWorkflowOutputSource {
        /**
         * Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
         */
        applyNormalization?: boolean;
        /**
         * Customer KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
         */
        kmsArn?: string;
        /**
         * A list of `OutputAttribute` objects, each of which have the fields `Name` and `Hashed` . Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.
         */
        output: outputs.entityresolution.MatchingWorkflowOutputAttribute[];
        /**
         * The S3 path to which Entity Resolution will write the output table
         */
        outputS3Path: string;
    }

    export interface MatchingWorkflowProviderProperties {
        /**
         * The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
         */
        intermediateSourceConfiguration?: outputs.entityresolution.MatchingWorkflowIntermediateSourceConfiguration;
        /**
         * Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
         */
        providerConfiguration?: {[key: string]: string};
        /**
         * Arn of the Provider service being used.
         */
        providerServiceArn: string;
    }

    export interface MatchingWorkflowResolutionTechniques {
        /**
         * The properties of the provider service.
         */
        providerProperties?: outputs.entityresolution.MatchingWorkflowProviderProperties;
        /**
         * The type of matching. There are three types of matching: `RULE_MATCHING` , `ML_MATCHING` , and `PROVIDER` .
         */
        resolutionType?: enums.entityresolution.MatchingWorkflowResolutionTechniquesResolutionType;
        /**
         * An object which defines the list of matching rules to run and has a field `Rules` , which is a list of rule objects.
         */
        ruleBasedProperties?: outputs.entityresolution.MatchingWorkflowRuleBasedProperties;
    }

    export interface MatchingWorkflowRule {
        /**
         * A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
         */
        matchingKeys: string[];
        /**
         * A name for the matching rule.
         */
        ruleName: string;
    }

    export interface MatchingWorkflowRuleBasedProperties {
        /**
         * The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the AttributeMatchingModel. When choosing `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` type. When choosing `ONE_TO_ONE` ,the system can only match if the sub-types are exact matches. For example, only when the value of the `Email` field of Profile A and the value of the `Email` field of Profile B matches, the two profiles are matched on the `Email` type.
         */
        attributeMatchingModel: enums.entityresolution.MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel;
        /**
         * A list of `Rule` objects, each of which have fields `RuleName` and `MatchingKeys` .
         */
        rules: outputs.entityresolution.MatchingWorkflowRule[];
    }

    export interface SchemaMappingSchemaInputAttribute {
        fieldName: string;
        groupName?: string;
        matchKey?: string;
        /**
         * The subtype of the Attribute. Would be required only when type is PROVIDER_ID
         */
        subType?: string;
        type: enums.entityresolution.SchemaMappingSchemaAttributeType;
    }

}

export namespace events {
    export interface ConnectionApiKeyAuthParameters {
        /**
         * The name of the API key to use for authorization.
         */
        apiKeyName: string;
        /**
         * The value for the API key to use for authorization.
         */
        apiKeyValue: string;
    }

    export interface ConnectionAuthParameters {
        /**
         * The API Key parameters to use for authorization.
         */
        apiKeyAuthParameters?: outputs.events.ConnectionApiKeyAuthParameters;
        /**
         * The authorization parameters for Basic authorization.
         */
        basicAuthParameters?: outputs.events.ConnectionBasicAuthParameters;
        /**
         * Additional parameters for the connection that are passed through with every invocation to the HTTP endpoint.
         */
        invocationHttpParameters?: outputs.events.ConnectionHttpParameters;
        /**
         * The OAuth parameters to use for authorization.
         */
        oAuthParameters?: outputs.events.ConnectionOAuthParameters;
    }

    export interface ConnectionBasicAuthParameters {
        /**
         * The password associated with the user name to use for Basic authorization.
         */
        password: string;
        /**
         * The user name to use for Basic authorization.
         */
        username: string;
    }

    export interface ConnectionClientParameters {
        /**
         * The client ID to use for OAuth authorization.
         */
        clientId: string;
        /**
         * The client secret assciated with the client ID to use for OAuth authorization.
         */
        clientSecret: string;
    }

    export interface ConnectionHttpParameters {
        /**
         * Contains additional body string parameters for the connection.
         */
        bodyParameters?: outputs.events.ConnectionParameter[];
        /**
         * Contains additional header parameters for the connection.
         */
        headerParameters?: outputs.events.ConnectionParameter[];
        /**
         * Contains additional query string parameters for the connection.
         */
        queryStringParameters?: outputs.events.ConnectionParameter[];
    }

    export interface ConnectionOAuthParameters {
        /**
         * The URL to the authorization endpoint when OAuth is specified as the authorization type.
         */
        authorizationEndpoint: string;
        /**
         * A `CreateConnectionOAuthClientRequestParameters` object that contains the client parameters for OAuth authorization.
         */
        clientParameters: outputs.events.ConnectionClientParameters;
        /**
         * The method to use for the authorization request.
         */
        httpMethod: enums.events.ConnectionOAuthParametersHttpMethod;
        /**
         * A `ConnectionHttpParameters` object that contains details about the additional parameters to use for the connection.
         */
        oAuthHttpParameters?: outputs.events.ConnectionHttpParameters;
    }

    export interface ConnectionParameter {
        /**
         * Specifies whether the value is secret.
         */
        isValueSecret?: boolean;
        /**
         * The key for a query string parameter.
         */
        key: string;
        /**
         * The value associated with the key for the query string parameter.
         */
        value: string;
    }

    /**
     * Dead Letter Queue for the event bus.
     */
    export interface DeadLetterConfigProperties {
        arn?: string;
    }

    export interface EndpointEventBus {
        eventBusArn: string;
    }

    export interface EndpointFailoverConfig {
        /**
         * The main Region of the endpoint.
         */
        primary: outputs.events.EndpointPrimary;
        /**
         * The Region that events are routed to when failover is triggered or event replication is enabled.
         */
        secondary: outputs.events.EndpointSecondary;
    }

    export interface EndpointPrimary {
        /**
         * The ARN of the health check used by the endpoint to determine whether failover is triggered.
         */
        healthCheck: string;
    }

    export interface EndpointReplicationConfig {
        /**
         * The state of event replication.
         */
        state: enums.events.EndpointReplicationState;
    }

    export interface EndpointRoutingConfig {
        /**
         * The failover configuration for an endpoint. This includes what triggers failover and what happens when it's triggered.
         */
        failoverConfig: outputs.events.EndpointFailoverConfig;
    }

    export interface EndpointSecondary {
        /**
         * Defines the secondary Region.
         */
        route: string;
    }

    export interface RuleAppSyncParameters {
        /**
         * The GraphQL operation; that is, the query, mutation, or subscription to be parsed and executed by the GraphQL service.
         *
         * For more information, see [Operations](https://docs.aws.amazon.com/appsync/latest/devguide/graphql-architecture.html#graphql-operations) in the *AWS AppSync User Guide* .
         */
        graphQlOperation: string;
    }

    export interface RuleAwsVpcConfiguration {
        /**
         * Specifies whether the task's elastic network interface receives a public IP address. You can specify `ENABLED` only when `LaunchType` in `EcsParameters` is set to `FARGATE` .
         */
        assignPublicIp?: string;
        /**
         * Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
         */
        securityGroups?: string[];
        /**
         * Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
         */
        subnets: string[];
    }

    export interface RuleBatchArrayProperties {
        /**
         * The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
         */
        size?: number;
    }

    export interface RuleBatchParameters {
        /**
         * The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.
         */
        arrayProperties?: outputs.events.RuleBatchArrayProperties;
        /**
         * The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
         */
        jobDefinition: string;
        /**
         * The name to use for this execution of the job, if the target is an AWS Batch job.
         */
        jobName: string;
        /**
         * The retry strategy to use for failed jobs, if the target is an AWS Batch job. The retry strategy is the number of times to retry the failed job execution. Valid values are 1–10. When you specify a retry strategy here, it overrides the retry strategy defined in the job definition.
         */
        retryStrategy?: outputs.events.RuleBatchRetryStrategy;
    }

    export interface RuleBatchRetryStrategy {
        /**
         * The number of times to attempt to retry, if the job fails. Valid values are 1–10.
         */
        attempts?: number;
    }

    export interface RuleCapacityProviderStrategyItem {
        /**
         * The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
         */
        base?: number;
        /**
         * The short name of the capacity provider.
         */
        capacityProvider: string;
        /**
         * The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
         */
        weight?: number;
    }

    export interface RuleDeadLetterConfig {
        /**
         * The ARN of the SQS queue specified as the target for the dead-letter queue.
         */
        arn?: string;
    }

    export interface RuleEcsParameters {
        /**
         * The capacity provider strategy to use for the task.
         *
         * If a `capacityProviderStrategy` is specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or launchType is specified, the `defaultCapacityProviderStrategy` for the cluster is used.
         */
        capacityProviderStrategy?: outputs.events.RuleCapacityProviderStrategyItem[];
        /**
         * Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
         */
        enableEcsManagedTags?: boolean;
        /**
         * Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
         */
        enableExecuteCommand?: boolean;
        /**
         * Specifies an ECS task group for the task. The maximum length is 255 characters.
         */
        group?: string;
        /**
         * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The `FARGATE` value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see [AWS Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        launchType?: string;
        /**
         * Use this structure if the Amazon ECS task uses the `awsvpc` network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if `LaunchType` is `FARGATE` because the `awsvpc` mode is required for Fargate tasks.
         *
         * If you specify `NetworkConfiguration` when the target ECS task does not use the `awsvpc` network mode, the task fails.
         */
        networkConfiguration?: outputs.events.RuleNetworkConfiguration;
        /**
         * An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
         */
        placementConstraints?: outputs.events.RulePlacementConstraint[];
        /**
         * The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
         */
        placementStrategies?: outputs.events.RulePlacementStrategy[];
        /**
         * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0` .
         *
         * This structure is used only if `LaunchType` is `FARGATE` . For more information about valid platform versions, see [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        platformVersion?: string;
        /**
         * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the TagResource API action.
         */
        propagateTags?: string;
        /**
         * The reference ID to use for the task.
         */
        referenceId?: string;
        /**
         * The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags) in the Amazon ECS API Reference.
         */
        tagList?: outputs.events.RuleTag[];
        /**
         * The number of tasks to create based on `TaskDefinition` . The default is 1.
         */
        taskCount?: number;
        /**
         * The ARN of the task definition to use if the event target is an Amazon ECS task.
         */
        taskDefinitionArn: string;
    }

    export interface RuleHttpParameters {
        /**
         * The headers that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
         */
        headerParameters?: {[key: string]: string};
        /**
         * The path parameter values to be used to populate API Gateway API or EventBridge ApiDestination path wildcards ("*").
         */
        pathParameterValues?: string[];
        /**
         * The query string keys/values that need to be sent as part of request invoking the API Gateway API or EventBridge ApiDestination.
         */
        queryStringParameters?: {[key: string]: string};
    }

    export interface RuleInputTransformer {
        /**
         * Map of JSON paths to be extracted from the event. You can then insert these in the template in `InputTemplate` to produce the output you want to be sent to the target.
         *
         * `InputPathsMap` is an array key-value pairs, where each value is a valid JSON path. You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket notation.
         *
         * The keys cannot start with " AWS ."
         */
        inputPathsMap?: {[key: string]: string};
        /**
         * Input template where you specify placeholders that will be filled with the values of the keys from `InputPathsMap` to customize the data sent to the target. Enclose each `InputPathsMaps` value in brackets: < *value* >
         *
         * If `InputTemplate` is a JSON object (surrounded by curly braces), the following restrictions apply:
         *
         * - The placeholder cannot be used as an object key.
         *
         * The following example shows the syntax for using `InputPathsMap` and `InputTemplate` .
         *
         * `"InputTransformer":`
         *
         * `{`
         *
         * `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
         *
         * `"InputTemplate": "<instance> is in state <status>"`
         *
         * `}`
         *
         * To have the `InputTemplate` include quote marks within a JSON string, escape each quote marks with a slash, as in the following example:
         *
         * `"InputTransformer":`
         *
         * `{`
         *
         * `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
         *
         * `"InputTemplate": "<instance> is in state \"<status>\""`
         *
         * `}`
         *
         * The `InputTemplate` can also be valid JSON with varibles in quotes or out, as in the following example:
         *
         * `"InputTransformer":`
         *
         * `{`
         *
         * `"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},`
         *
         * `"InputTemplate": '{"myInstance": <instance>,"myStatus": "<instance> is in state \"<status>\""}'`
         *
         * `}`
         */
        inputTemplate: string;
    }

    export interface RuleKinesisParameters {
        /**
         * The JSON path to be extracted from the event and used as the partition key. For more information, see [Amazon Kinesis Streams Key Concepts](https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key) in the *Amazon Kinesis Streams Developer Guide* .
         */
        partitionKeyPath: string;
    }

    export interface RuleNetworkConfiguration {
        /**
         * Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the `awsvpc` network mode.
         */
        awsVpcConfiguration?: outputs.events.RuleAwsVpcConfiguration;
    }

    export interface RulePlacementConstraint {
        /**
         * A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is `distinctInstance` . To learn more, see [Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
         */
        expression?: string;
        /**
         * The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
         */
        type?: string;
    }

    export interface RulePlacementStrategy {
        /**
         * The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
         */
        field?: string;
        /**
         * The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
         */
        type?: string;
    }

    export interface RuleRedshiftDataParameters {
        /**
         * The name of the database. Required when authenticating using temporary credentials.
         */
        database: string;
        /**
         * The database user name. Required when authenticating using temporary credentials.
         */
        dbUser?: string;
        /**
         * The name or ARN of the secret that enables access to the database. Required when authenticating using AWS Secrets Manager.
         */
        secretManagerArn?: string;
        /**
         * The SQL statement text to run.
         */
        sql?: string;
        /**
         * One or more SQL statements to run. The SQL statements are run as a single transaction. They run serially in the order of the array. Subsequent SQL statements don't start until the previous statement in the array completes. If any SQL statement fails, then because they are run as one transaction, all work is rolled back.
         */
        sqls?: string[];
        /**
         * The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
         */
        statementName?: string;
        /**
         * Indicates whether to send an event back to EventBridge after the SQL statement runs.
         */
        withEvent?: boolean;
    }

    export interface RuleRetryPolicy {
        /**
         * The maximum amount of time, in seconds, to continue to make retry attempts.
         */
        maximumEventAgeInSeconds?: number;
        /**
         * The maximum number of retry attempts to make before the request fails. Retry attempts continue until either the maximum number of attempts is made or until the duration of the `MaximumEventAgeInSeconds` is met.
         */
        maximumRetryAttempts?: number;
    }

    export interface RuleRunCommandParameters {
        /**
         * Currently, we support including only one RunCommandTarget block, which specifies either an array of InstanceIds or a tag.
         */
        runCommandTargets: outputs.events.RuleRunCommandTarget[];
    }

    export interface RuleRunCommandTarget {
        /**
         * Can be either `tag:` *tag-key* or `InstanceIds` .
         */
        key: string;
        /**
         * If `Key` is `tag:` *tag-key* , `Values` is a list of tag values. If `Key` is `InstanceIds` , `Values` is a list of Amazon EC2 instance IDs.
         */
        values: string[];
    }

    export interface RuleSageMakerPipelineParameter {
        /**
         * Name of parameter to start execution of a SageMaker Model Building Pipeline.
         */
        name: string;
        /**
         * Value of parameter to start execution of a SageMaker Model Building Pipeline.
         */
        value: string;
    }

    export interface RuleSageMakerPipelineParameters {
        /**
         * List of Parameter names and values for SageMaker Model Building Pipeline execution.
         */
        pipelineParameterList?: outputs.events.RuleSageMakerPipelineParameter[];
    }

    export interface RuleSqsParameters {
        /**
         * The FIFO message group ID to use as the target.
         */
        messageGroupId: string;
    }

    export interface RuleTag {
        /**
         * A string you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.
         */
        key?: string;
        /**
         * The value for the specified tag key.
         */
        value?: string;
    }

    export interface RuleTarget {
        /**
         * Contains the GraphQL operation to be parsed and executed, if the event target is an AWS AppSync API.
         */
        appSyncParameters?: outputs.events.RuleAppSyncParameters;
        /**
         * The Amazon Resource Name (ARN) of the target.
         */
        arn: string;
        /**
         * If the event target is an AWS Batch job, this contains the job definition, job name, and other parameters. For more information, see [Jobs](https://docs.aws.amazon.com/batch/latest/userguide/jobs.html) in the *AWS Batch User Guide* .
         */
        batchParameters?: outputs.events.RuleBatchParameters;
        /**
         * The `DeadLetterConfig` that defines the target queue to send dead-letter queue events to.
         */
        deadLetterConfig?: outputs.events.RuleDeadLetterConfig;
        /**
         * Contains the Amazon ECS task definition and task count to be used, if the event target is an Amazon ECS task. For more information about Amazon ECS tasks, see [Task Definitions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html) in the *Amazon EC2 Container Service Developer Guide* .
         */
        ecsParameters?: outputs.events.RuleEcsParameters;
        /**
         * Contains the HTTP parameters to use when the target is a API Gateway endpoint or EventBridge ApiDestination.
         *
         * If you specify an API Gateway API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.
         */
        httpParameters?: outputs.events.RuleHttpParameters;
        /**
         * The ID of the target within the specified rule. Use this ID to reference the target when updating the rule. We recommend using a memorable and unique string.
         */
        id: string;
        /**
         * Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](https://docs.aws.amazon.com/http://www.rfc-editor.org/rfc/rfc7159.txt) .
         */
        input?: string;
        /**
         * The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. You may use JSON dot notation or bracket notation. For more information about JSON paths, see [JSONPath](https://docs.aws.amazon.com/http://goessner.net/articles/JsonPath/) .
         */
        inputPath?: string;
        /**
         * Settings to enable you to provide custom input to a target based on certain event data. You can extract one or more key-value pairs from the event and then use that data to send customized input to the target.
         */
        inputTransformer?: outputs.events.RuleInputTransformer;
        /**
         * The custom parameter you can use to control the shard assignment, when the target is a Kinesis data stream. If you do not include this parameter, the default is to use the `eventId` as the partition key.
         */
        kinesisParameters?: outputs.events.RuleKinesisParameters;
        /**
         * Contains the Amazon Redshift Data API parameters to use when the target is a Amazon Redshift cluster.
         *
         * If you specify a Amazon Redshift Cluster as a Target, you can use this to specify parameters to invoke the Amazon Redshift Data API ExecuteStatement based on EventBridge events.
         */
        redshiftDataParameters?: outputs.events.RuleRedshiftDataParameters;
        /**
         * The `RetryPolicy` object that contains the retry policy configuration to use for the dead-letter queue.
         */
        retryPolicy?: outputs.events.RuleRetryPolicy;
        /**
         * The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. If one rule triggers multiple targets, you can use a different IAM role for each target.
         */
        roleArn?: string;
        /**
         * Parameters used when you are using the rule to invoke Amazon EC2 Run Command.
         */
        runCommandParameters?: outputs.events.RuleRunCommandParameters;
        /**
         * Contains the SageMaker Model Building Pipeline parameters to start execution of a SageMaker Model Building Pipeline.
         *
         * If you specify a SageMaker Model Building Pipeline as a target, you can use this to specify parameters to start a pipeline execution based on EventBridge events.
         */
        sageMakerPipelineParameters?: outputs.events.RuleSageMakerPipelineParameters;
        /**
         * Contains the message group ID to use when the target is a FIFO queue.
         *
         * If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
         */
        sqsParameters?: outputs.events.RuleSqsParameters;
    }

}

export namespace eventschemas {
}

export namespace evidently {
    export interface ExperimentMetricGoalObject {
        /**
         * `INCREASE` means that a variation with a higher number for this metric is performing better.
         *
         * `DECREASE` means that a variation with a lower number for this metric is performing better.
         */
        desiredChange: enums.evidently.ExperimentMetricGoalObjectDesiredChange;
        /**
         * The JSON path to reference the entity id in the event.
         */
        entityIdKey: string;
        /**
         * Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
         */
        eventPattern?: string;
        /**
         * A name for the metric. It can include up to 255 characters.
         */
        metricName: string;
        /**
         * A label for the units that the metric is measuring.
         */
        unitLabel?: string;
        /**
         * The JSON path to reference the numerical metric value in the event.
         */
        valueKey: string;
    }

    export interface ExperimentOnlineAbConfigObject {
        /**
         * The name of the variation that is to be the default variation that the other variations are compared to.
         */
        controlTreatmentName?: string;
        /**
         * A set of key-value pairs. The keys are treatment names, and the values are the portion of experiment traffic to be assigned to that treatment. Specify the traffic portion in thousandths of a percent, so 20,000 for a variation would allocate 20% of the experiment traffic to that variation.
         */
        treatmentWeights?: outputs.evidently.ExperimentTreatmentToWeight[];
    }

    export interface ExperimentRunningStatusObject {
        /**
         * Provide the analysis Completion time for an experiment
         */
        analysisCompleteTime?: string;
        /**
         * Provide CANCELLED or COMPLETED desired state when stopping an experiment
         */
        desiredState?: string;
        /**
         * Reason is a required input for stopping the experiment
         */
        reason?: string;
        /**
         * Provide START or STOP action to apply on an experiment
         */
        status?: string;
    }

    export interface ExperimentTreatmentObject {
        /**
         * The description of the treatment.
         */
        description?: string;
        /**
         * The name of the feature for this experiment.
         */
        feature: string;
        /**
         * A name for this treatment. It can include up to 127 characters.
         */
        treatmentName: string;
        /**
         * The name of the variation to use for this treatment.
         */
        variation: string;
    }

    export interface ExperimentTreatmentToWeight {
        /**
         * The portion of experiment traffic to allocate to this treatment. Specify the traffic portion in thousandths of a percent, so 20,000 allocated to a treatment would allocate 20% of the experiment traffic to that treatment.
         */
        splitWeight: number;
        /**
         * The name of the treatment.
         */
        treatment: string;
    }

    export interface FeatureEntityOverride {
        /**
         * The entity ID to be served the variation specified in `Variation` .
         */
        entityId?: string;
        /**
         * The name of the variation to serve to the user session that matches the `EntityId` .
         */
        variation?: string;
    }

    export interface FeatureVariationObject {
        /**
         * The value assigned to this variation, if the variation type is boolean.
         */
        booleanValue?: boolean;
        /**
         * The value assigned to this variation, if the variation type is a double.
         */
        doubleValue?: number;
        /**
         * The value assigned to this variation, if the variation type is a long.
         */
        longValue?: number;
        /**
         * The value assigned to this variation, if the variation type is a string.
         */
        stringValue?: string;
        /**
         * A name for the variation. It can include up to 127 characters.
         */
        variationName?: string;
    }

    export interface LaunchExecutionStatusObject {
        /**
         * Provide CANCELLED or COMPLETED as the launch desired state. Defaults to Completed if not provided.
         */
        desiredState?: string;
        /**
         * Provide a reason for stopping the launch. Defaults to empty if not provided.
         */
        reason?: string;
        /**
         * Provide START or STOP action to apply on a launch
         */
        status: string;
    }

    export interface LaunchGroupObject {
        /**
         * A description of the launch group.
         */
        description?: string;
        /**
         * The feature that this launch is using.
         */
        feature: string;
        /**
         * A name for this launch group. It can include up to 127 characters.
         */
        groupName: string;
        /**
         * The feature variation to use for this launch group.
         */
        variation: string;
    }

    export interface LaunchGroupToWeight {
        /**
         * The name of the launch group. It can include up to 127 characters.
         */
        groupName: string;
        /**
         * The portion of launch traffic to allocate to this launch group.
         *
         * This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the launch audience to this launch group.
         */
        splitWeight: number;
    }

    export interface LaunchMetricDefinitionObject {
        /**
         * The JSON path to reference the entity id in the event.
         */
        entityIdKey: string;
        /**
         * Event patterns have the same structure as the events they match. Rules use event patterns to select events. An event pattern either matches an event or it doesn't.
         */
        eventPattern?: string;
        /**
         * A name for the metric. It can include up to 255 characters.
         */
        metricName: string;
        /**
         * A label for the units that the metric is measuring.
         */
        unitLabel?: string;
        /**
         * The JSON path to reference the numerical metric value in the event.
         */
        valueKey: string;
    }

    export interface LaunchSegmentOverride {
        /**
         * A number indicating the order to use to evaluate segment overrides, if there are more than one. Segment overrides with lower numbers are evaluated first.
         */
        evaluationOrder: number;
        /**
         * The ARN of the segment to use for this override.
         */
        segment: string;
        /**
         * The traffic allocation percentages among the feature variations to assign to this segment. This is a set of key-value pairs. The keys are variation names. The values represent the amount of traffic to allocate to that variation for this segment. This is expressed in thousandths of a percent, so a weight of 50000 represents 50% of traffic.
         */
        weights: outputs.evidently.LaunchGroupToWeight[];
    }

    export interface LaunchStepConfig {
        /**
         * An array of structures that define how much launch traffic to allocate to each launch group during this step of the launch.
         */
        groupWeights: outputs.evidently.LaunchGroupToWeight[];
        /**
         * An array of structures that you can use to specify different traffic splits for one or more audience *segments* . A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age.
         *
         * For more information, see [Use segments to focus your audience](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html) .
         */
        segmentOverrides?: outputs.evidently.LaunchSegmentOverride[];
        /**
         * The date and time to start this step of the launch. Use UTC format, `yyyy-MM-ddTHH:mm:ssZ` . For example, `2025-11-25T23:59:59Z`
         */
        startTime: string;
    }

    export interface ProjectAppConfigResourceObject {
        /**
         * The ID of the AWS AppConfig application to use for client-side evaluation.
         */
        applicationId: string;
        /**
         * The ID of the AWS AppConfig environment to use for client-side evaluation.
         */
        environmentId: string;
    }

    /**
     * Destinations for data.
     */
    export interface ProjectDataDeliveryObject {
        /**
         * If the project stores evaluation events in CloudWatch Logs , this structure stores the log group name.
         */
        logGroup?: string;
        /**
         * If the project stores evaluation events in an Amazon S3 bucket, this structure stores the bucket name and bucket prefix.
         */
        s3?: outputs.evidently.ProjectS3Destination;
    }

    export interface ProjectS3Destination {
        /**
         * The name of the bucket in which Evidently stores evaluation events.
         */
        bucketName: string;
        /**
         * The bucket prefix in which Evidently stores evaluation events.
         */
        prefix?: string;
    }

}

export namespace finspace {
    /**
     * Additional parameters to identify Federation mode
     */
    export interface EnvironmentFederationParameters {
        /**
         * SAML metadata URL to link with the Environment
         */
        applicationCallBackUrl?: string;
        /**
         * Attribute map for SAML configuration
         */
        attributeMap?: outputs.finspace.EnvironmentFederationParametersAttributeMapItemProperties[];
        /**
         * Federation provider name to link with the Environment
         */
        federationProviderName?: string;
        /**
         * SAML metadata URL to link with the Environment
         */
        federationUrn?: string;
        /**
         * SAML metadata document to link the federation provider to the Environment
         */
        samlMetadataDocument?: string;
        /**
         * SAML metadata URL to link with the Environment
         */
        samlMetadataUrl?: string;
    }

    export interface EnvironmentFederationParametersAttributeMapItemProperties {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key?: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value?: string;
    }

    /**
     * Parameters of the first Superuser for the FinSpace Environment
     */
    export interface EnvironmentSuperuserParameters {
        /**
         * Email address
         */
        emailAddress?: string;
        /**
         * First name
         */
        firstName?: string;
        /**
         * Last name
         */
        lastName?: string;
    }

}

export namespace fis {
    /**
     * Specifies an action for the experiment template.
     */
    export interface ExperimentTemplateAction {
        /**
         * The ID of the action.
         */
        actionId: string;
        /**
         * A description for the action.
         */
        description?: string;
        /**
         * The parameters for the action, if applicable.
         */
        parameters?: {[key: string]: string};
        /**
         * The name of the action that must be completed before the current action starts.
         */
        startAfter?: string[];
        /**
         * One or more targets for the action.
         */
        targets?: {[key: string]: string};
    }

    export interface ExperimentTemplateExperimentOptions {
        /**
         * The account targeting setting for the experiment template.
         */
        accountTargeting?: enums.fis.ExperimentTemplateExperimentOptionsAccountTargeting;
        /**
         * The target resolution failure mode for the experiment template.
         */
        emptyTargetResolutionMode?: enums.fis.ExperimentTemplateExperimentOptionsEmptyTargetResolutionMode;
    }

    export interface ExperimentTemplateLogConfiguration {
        /**
         * The configuration for experiment logging to CloudWatch Logs .
         */
        cloudWatchLogsConfiguration?: outputs.fis.ExperimentTemplateLogConfigurationCloudWatchLogsConfigurationProperties;
        /**
         * The schema version.
         */
        logSchemaVersion: number;
        /**
         * The configuration for experiment logging to Amazon S3 .
         */
        s3Configuration?: outputs.fis.ExperimentTemplateLogConfigurationS3ConfigurationProperties;
    }

    /**
     * The configuration for experiment logging to CloudWatch Logs .
     */
    export interface ExperimentTemplateLogConfigurationCloudWatchLogsConfigurationProperties {
        logGroupArn: string;
    }

    /**
     * The configuration for experiment logging to Amazon S3 .
     */
    export interface ExperimentTemplateLogConfigurationS3ConfigurationProperties {
        bucketName: string;
        prefix?: string;
    }

    export interface ExperimentTemplateStopCondition {
        source: string;
        value?: string;
    }

    /**
     * Specifies a target for an experiment.
     */
    export interface ExperimentTemplateTarget {
        /**
         * The filters to apply to identify target resources using specific attributes.
         */
        filters?: outputs.fis.ExperimentTemplateTargetFilter[];
        /**
         * The parameters for the resource type.
         */
        parameters?: {[key: string]: string};
        /**
         * The Amazon Resource Names (ARNs) of the targets.
         */
        resourceArns?: string[];
        /**
         * The tags for the target resources.
         */
        resourceTags?: {[key: string]: string};
        /**
         * The resource type.
         */
        resourceType: string;
        /**
         * Scopes the identified resources to a specific count or percentage.
         */
        selectionMode: string;
    }

    /**
     * Describes a filter used for the target resource input in an experiment template.
     */
    export interface ExperimentTemplateTargetFilter {
        path: string;
        values: string[];
    }

}

export namespace fms {
    /**
     * An FMS includeMap or excludeMap.
     */
    export interface PolicyIeMap {
        /**
         * The account list for the map.
         */
        account?: string[];
        /**
         * The organizational unit list for the map.
         */
        orgunit?: string[];
    }

    /**
     * Network ACL common policy.
     */
    export interface PolicyNetworkAclCommonPolicy {
        /**
         * The definition of the first and last rules for the network ACL policy.
         */
        networkAclEntrySet: outputs.fms.PolicyNetworkAclEntrySet;
    }

    /**
     * Network ACL entry.
     */
    export interface PolicyNetworkAclEntry {
        /**
         * CIDR block.
         */
        cidrBlock?: string;
        /**
         * Whether the entry is an egress entry.
         */
        egress: boolean;
        /**
         * ICMP type and code.
         */
        icmpTypeCode?: outputs.fms.PolicyNetworkAclEntryIcmpTypeCodeProperties;
        /**
         * IPv6 CIDR block.
         */
        ipv6CidrBlock?: string;
        /**
         * Port range.
         */
        portRange?: outputs.fms.PolicyNetworkAclEntryPortRangeProperties;
        /**
         * Protocol.
         */
        protocol: string;
        /**
         * Rule Action.
         */
        ruleAction: enums.fms.PolicyNetworkAclEntryRuleAction;
    }

    /**
     * ICMP type and code.
     */
    export interface PolicyNetworkAclEntryIcmpTypeCodeProperties {
        /**
         * Code.
         */
        code: number;
        /**
         * Type.
         */
        type: number;
    }

    /**
     * Port range.
     */
    export interface PolicyNetworkAclEntryPortRangeProperties {
        /**
         * From Port.
         */
        from: number;
        /**
         * To Port.
         */
        to: number;
    }

    /**
     * Network ACL entry set.
     */
    export interface PolicyNetworkAclEntrySet {
        /**
         * The rules that you want to run first in the Firewall Manager managed network ACLs.
         *
         * > Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates. 
         *
         * You must specify at least one first entry or one last entry in any network ACL policy.
         */
        firstEntries?: outputs.fms.PolicyNetworkAclEntry[];
        /**
         * Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.
         *
         * If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see [Remediation for managed network ACLs](https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html#network-acls-remediation) in the *AWS Firewall Manager Developer Guide* .
         */
        forceRemediateForFirstEntries: boolean;
        /**
         * Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.
         *
         * If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see [Remediation for managed network ACLs](https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html#network-acls-remediation) in the *AWS Firewall Manager Developer Guide* .
         */
        forceRemediateForLastEntries: boolean;
        /**
         * The rules that you want to run last in the Firewall Manager managed network ACLs.
         *
         * > Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates. 
         *
         * You must specify at least one first entry or one last entry in any network ACL policy.
         */
        lastEntries?: outputs.fms.PolicyNetworkAclEntry[];
    }

    /**
     * Network firewall policy.
     */
    export interface PolicyNetworkFirewallPolicy {
        /**
         * Defines the deployment model to use for the firewall policy. To use a distributed model, set [FirewallDeploymentModel](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-fms-policy-thirdpartyfirewallpolicy.html) to `DISTRIBUTED` .
         */
        firewallDeploymentModel: enums.fms.PolicyFirewallDeploymentModel;
    }

    /**
     * Firewall policy option.
     */
    export interface PolicyOption {
        /**
         * Defines a Firewall Manager network ACL policy.
         */
        networkAclCommonPolicy?: outputs.fms.PolicyNetworkAclCommonPolicy;
        /**
         * Defines the deployment model to use for the firewall policy.
         */
        networkFirewallPolicy?: outputs.fms.PolicyNetworkFirewallPolicy;
        /**
         * Defines the policy options for a third-party firewall policy.
         */
        thirdPartyFirewallPolicy?: outputs.fms.PolicyThirdPartyFirewallPolicy;
    }

    /**
     * A resource tag.
     */
    export interface PolicyResourceTag {
        /**
         * The resource tag key.
         */
        key: string;
        /**
         * The resource tag value.
         */
        value?: string;
    }

    /**
     * Firewall security service policy data.
     */
    export interface PolicySecurityServicePolicyData {
        /**
         * Details about the service that are specific to the service type, in JSON format.
         *
         * - Example: `DNS_FIREWALL`
         *
         * `"{\"type\":\"DNS_FIREWALL\",\"preProcessRuleGroups\":[{\"ruleGroupId\":\"rslvr-frg-1\",\"priority\":10}],\"postProcessRuleGroups\":[{\"ruleGroupId\":\"rslvr-frg-2\",\"priority\":9911}]}"`
         *
         * > Valid values for `preProcessRuleGroups` are between 1 and 99. Valid values for `postProcessRuleGroups` are between 9901 and 10000.
         * - Example: `NETWORK_FIREWALL` - Centralized deployment model
         *
         * `"{\"type\":\"NETWORK_FIREWALL\",\"awsNetworkFirewallConfig\":{\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":true}},\"firewallDeploymentModel\":{\"centralizedFirewallDeploymentModel\":{\"centralizedFirewallOrchestrationConfig\":{\"inspectionVpcIds\":[{\"resourceId\":\"vpc-1234\",\"accountId\":\"123456789011\"}],\"firewallCreationConfig\":{\"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneId\":null,\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]}]}},\"allowedIPV4CidrList\":[]}}}}"`
         *
         * To use the distributed deployment model, you must set [FirewallDeploymentModel](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-fms-policy-networkfirewallpolicy.html) to `DISTRIBUTED` .
         * - Example: `NETWORK_FIREWALL` - Distributed deployment model with automatic Availability Zone configuration
         *
         * `"{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":[\"10.0.0.0/28\",\"192.168.0.0/28\"],\"routeManagementAction\":\"OFF\"},\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":true}}"`
         *
         * With automatic Availbility Zone configuration, Firewall Manager chooses which Availability Zones to create the endpoints in. To use the distributed deployment model, you must set [FirewallDeploymentModel](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-fms-policy-networkfirewallpolicy.html) to `DISTRIBUTED` .
         * - Example: `NETWORK_FIREWALL` - Distributed deployment model with automatic Availability Zone configuration and route management
         *
         * `"{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":[\"10.0.0.0/28\",\"192.168.0.0/28\"],\"routeManagementAction\":\"MONITOR\",\"routeManagementTargetTypes\":[\"InternetGateway\"]},\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\": \"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":true}}"`
         *
         * To use the distributed deployment model, you must set [FirewallDeploymentModel](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-fms-policy-networkfirewallpolicy.html) to `DISTRIBUTED` .
         * - Example: `NETWORK_FIREWALL` - Distributed deployment model with custom Availability Zone configuration
         *
         * `"{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"fragmentcustomactionname\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\", \"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}},{\"actionName\":\"fragmentcustomactionname\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"fragmentmetricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"firewallCreationConfig\":{ \"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]},{\"availabilityZoneName\":\"us-east-1b\",\"allowedIPV4CidrList\":[ \"10.0.0.0/28\"]}]} },\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":null,\"routeManagementAction\":\"OFF\",\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":boolean}}"`
         *
         * With custom Availability Zone configuration, you define which specific Availability Zones to create endpoints in by configuring `firewallCreationConfig` . To configure the Availability Zones in `firewallCreationConfig` , specify either the `availabilityZoneName` or `availabilityZoneId` parameter, not both parameters.
         *
         * To use the distributed deployment model, you must set [FirewallDeploymentModel](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-fms-policy-networkfirewallpolicy.html) to `DISTRIBUTED` .
         * - Example: `NETWORK_FIREWALL` - Distributed deployment model with custom Availability Zone configuration and route management
         *
         * `"{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"fragmentcustomactionname\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}},{\"actionName\":\"fragmentcustomactionname\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"fragmentmetricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"firewallCreationConfig\":{\"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]},{\"availabilityZoneName\":\"us-east-1b\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]}]}},\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":null,\"routeManagementAction\":\"MONITOR\",\"routeManagementTargetTypes\":[\"InternetGateway\"],\"routeManagementConfig\":{\"allowCrossAZTrafficIfNoEndpoint\":true}},\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":boolean}}"`
         *
         * To use the distributed deployment model, you must set [FirewallDeploymentModel](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-fms-policy-networkfirewallpolicy.html) to `DISTRIBUTED` .
         * - Example: `THIRD_PARTY_FIREWALL` - Palo Alto Networks Cloud Next-Generation Firewall centralized deployment model
         *
         * `"{ \"type\":\"THIRD_PARTY_FIREWALL\", \"thirdPartyFirewall\":\"PALO_ALTO_NETWORKS_CLOUD_NGFW\", \"thirdPartyFirewallConfig\":{ \"thirdPartyFirewallPolicyList\":[\"global-1\"] },\"firewallDeploymentModel\":{\"centralizedFirewallDeploymentModel\":{\"centralizedFirewallOrchestrationConfig\":{\"inspectionVpcIds\":[{\"resourceId\":\"vpc-1234\",\"accountId\":\"123456789011\"}],\"firewallCreationConfig\":{\"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneId\":null,\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]}]}},\"allowedIPV4CidrList\":[]}}}}"`
         *
         * To use the distributed deployment model, you must set [FirewallDeploymentModel](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-fms-policy-thirdpartyfirewallpolicy.html) to `CENTRALIZED` .
         * - Example: `THIRD_PARTY_FIREWALL` - Palo Alto Networks Cloud Next-Generation Firewall distributed deployment model
         *
         * `"{\"type\":\"THIRD_PARTY_FIREWALL\",\"thirdPartyFirewall\":\"PALO_ALTO_NETWORKS_CLOUD_NGFW\",\"thirdPartyFirewallConfig\":{\"thirdPartyFirewallPolicyList\":[\"global-1\"] },\"firewallDeploymentModel\":{ \"distributedFirewallDeploymentModel\":{ \"distributedFirewallOrchestrationConfig\":{\"firewallCreationConfig\":{\"endpointLocation\":{ \"availabilityZoneConfigList\":[ {\"availabilityZoneName\":\"${AvailabilityZone}\" } ] } }, \"allowedIPV4CidrList\":[ ] } } } }"`
         *
         * To use the distributed deployment model, you must set [FirewallDeploymentModel](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-fms-policy-thirdpartyfirewallpolicy.html) to `DISTRIBUTED` .
         * - Specification for `SHIELD_ADVANCED` for Amazon CloudFront distributions
         *
         * `"{\"type\":\"SHIELD_ADVANCED\",\"automaticResponseConfiguration\": {\"automaticResponseStatus\":\"ENABLED|IGNORED|DISABLED\", \"automaticResponseAction\":\"BLOCK|COUNT\"}, \"overrideCustomerWebaclClassic\":true|false}"`
         *
         * For example: `"{\"type\":\"SHIELD_ADVANCED\",\"automaticResponseConfiguration\": {\"automaticResponseStatus\":\"ENABLED\", \"automaticResponseAction\":\"COUNT\"}}"`
         *
         * The default value for `automaticResponseStatus` is `IGNORED` . The value for `automaticResponseAction` is only required when `automaticResponseStatus` is set to `ENABLED` . The default value for `overrideCustomerWebaclClassic` is `false` .
         *
         * For other resource types that you can protect with a Shield Advanced policy, this `ManagedServiceData` configuration is an empty string.
         * - Example: `WAFV2`
         *
         * `"{\"type\":\"WAFV2\",\"preProcessRuleGroups\":[{\"ruleGroupArn\":null,\"overrideAction\":{\"type\":\"NONE\"},\"managedRuleGroupIdentifier\":{\"version\":null,\"vendorName\":\"AWS\",\"managedRuleGroupName\":\"AWSManagedRulesAmazonIpReputationList\"},\"ruleGroupType\":\"ManagedRuleGroup\",\"excludeRules\":[{\"name\":\"NoUserAgent_HEADER\"}]}],\"postProcessRuleGroups\":[],\"defaultAction\":{\"type\":\"ALLOW\"},\"overrideCustomerWebACLAssociation\":false,\"loggingConfiguration\":{\"logDestinationConfigs\":[\"arn:aws:firehose:us-west-2:12345678912:deliverystream/aws-waf-logs-fms-admin-destination\"],\"redactedFields\":[{\"redactedFieldType\":\"SingleHeader\",\"redactedFieldValue\":\"Cookies\"},{\"redactedFieldType\":\"Method\"}]}}"`
         *
         * In the `loggingConfiguration` , you can specify one `logDestinationConfigs` , you can optionally provide up to 20 `redactedFields` , and the `RedactedFieldType` must be one of `URI` , `QUERY_STRING` , `HEADER` , or `METHOD` .
         * - Example: `AWS WAF Classic`
         *
         * `"{\"type\": \"WAF\", \"ruleGroups\": [{\"id\":\"12345678-1bcd-9012-efga-0987654321ab\", \"overrideAction\" : {\"type\": \"COUNT\"}}], \"defaultAction\": {\"type\": \"BLOCK\"}}"`
         * - Example: `WAFV2` - AWS Firewall Manager support for AWS WAF managed rule group versioning
         *
         * `"{\"type\":\"WAFV2\",\"preProcessRuleGroups\":[{\"ruleGroupArn\":null,\"overrideAction\":{\"type\":\"NONE\"},\"managedRuleGroupIdentifier\":{\"versionEnabled\":true,\"version\":\"Version_2.0\",\"vendorName\":\"AWS\",\"managedRuleGroupName\":\"AWSManagedRulesCommonRuleSet\"},\"ruleGroupType\":\"ManagedRuleGroup\",\"excludeRules\":[{\"name\":\"NoUserAgent_HEADER\"}]}],\"postProcessRuleGroups\":[],\"defaultAction\":{\"type\":\"ALLOW\"},\"overrideCustomerWebACLAssociation\":false,\"loggingConfiguration\":{\"logDestinationConfigs\":[\"arn:aws:firehose:us-west-2:12345678912:deliverystream/aws-waf-logs-fms-admin-destination\"],\"redactedFields\":[{\"redactedFieldType\":\"SingleHeader\",\"redactedFieldValue\":\"Cookies\"},{\"redactedFieldType\":\"Method\"}]}}"`
         *
         * To use a specific version of a AWS WAF managed rule group in your Firewall Manager policy, you must set `versionEnabled` to `true` , and set `version` to the version you'd like to use. If you don't set `versionEnabled` to `true` , or if you omit `versionEnabled` , then Firewall Manager uses the default version of the AWS WAF managed rule group.
         * - Example: `SECURITY_GROUPS_COMMON`
         *
         * `"{\"type\":\"SECURITY_GROUPS_COMMON\",\"revertManualSecurityGroupChanges\":false,\"exclusiveResourceSecurityGroupManagement\":false, \"applyToAllEC2InstanceENIs\":false,\"securityGroups\":[{\"id\":\" sg-000e55995d61a06bd\"}]}"`
         * - Example: Shared VPCs. Apply the preceding policy to resources in shared VPCs as well as to those in VPCs that the account owns
         *
         * `"{\"type\":\"SECURITY_GROUPS_COMMON\",\"revertManualSecurityGroupChanges\":false,\"exclusiveResourceSecurityGroupManagement\":false, \"applyToAllEC2InstanceENIs\":false,\"includeSharedVPC\":true,\"securityGroups\":[{\"id\":\" sg-000e55995d61a06bd\"}]}"`
         * - Example: `SECURITY_GROUPS_CONTENT_AUDIT`
         *
         * `"{\"type\":\"SECURITY_GROUPS_CONTENT_AUDIT\",\"securityGroups\":[{\"id\":\"sg-000e55995d61a06bd\"}],\"securityGroupAction\":{\"type\":\"ALLOW\"}}"`
         *
         * The security group action for content audit can be `ALLOW` or `DENY` . For `ALLOW` , all in-scope security group rules must be within the allowed range of the policy's security group rules. For `DENY` , all in-scope security group rules must not contain a value or a range that matches a rule value or range in the policy security group.
         * - Example: `SECURITY_GROUPS_USAGE_AUDIT`
         *
         * `"{\"type\":\"SECURITY_GROUPS_USAGE_AUDIT\",\"deleteUnusedSecurityGroups\":true,\"coalesceRedundantSecurityGroups\":true}"`
         */
        managedServiceData?: string;
        /**
         * Contains the settings to configure a network ACL policy, a AWS Network Firewall firewall policy deployment model, or a third-party firewall policy.
         */
        policyOption?: outputs.fms.PolicyOption;
        /**
         * The service that the policy is using to protect the resources. This specifies the type of policy that is created, either an AWS WAF policy, a Shield Advanced policy, or a security group policy. For security group policies, Firewall Manager supports one security group for each common policy and for each content audit policy. This is an adjustable limit that you can increase by contacting AWS Support .
         */
        type: enums.fms.PolicyType;
    }

    /**
     * Third party firewall policy.
     */
    export interface PolicyThirdPartyFirewallPolicy {
        /**
         * Defines the deployment model to use for the third-party firewall policy.
         */
        firewallDeploymentModel: enums.fms.PolicyFirewallDeploymentModel;
    }

}

export namespace forecast {
    export interface DatasetAttributesItemProperties {
        /**
         * Name of the dataset field
         */
        attributeName?: string;
        /**
         * Data type of the field
         */
        attributeType?: enums.forecast.DatasetAttributesItemPropertiesAttributeType;
    }

    /**
     * A Key Management Service (KMS) key and the Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.
     */
    export interface EncryptionConfigProperties {
        /**
         * The Amazon Resource Name (ARN) of the KMS key.
         */
        kmsKeyArn?: string;
        /**
         * The ARN of the IAM role that Amazon Forecast can assume to access the AWS KMS key.
         *
         * Passing a role across AWS accounts is not allowed. If you pass a role that isn't in your account, you get an `InvalidInputException` error.
         */
        roleArn?: string;
    }

    /**
     * The schema for the dataset. The schema attributes and their order must match the fields in your data. The dataset `Domain` and `DatasetType` that you choose determine the minimum required fields in your training data. For information about the required fields for a specific dataset domain and type, see [Dataset Domains and Dataset Types](https://docs.aws.amazon.com/forecast/latest/dg/howitworks-domains-ds-types.html) .
     */
    export interface SchemaProperties {
        /**
         * An array of attributes specifying the name and type of each field in a dataset.
         */
        attributes?: outputs.forecast.DatasetAttributesItemProperties[];
    }

}

export namespace frauddetector {
    export interface DetectorEntityType {
        /**
         * The entity type ARN.
         */
        arn?: string;
        /**
         * The time when the entity type was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        /**
         * Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
         *
         * For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these Variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
         */
        inline?: boolean;
        /**
         * The time when the entity type was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The entity type name.
         */
        name?: string;
        /**
         * Tags associated with this entity type.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    export interface DetectorEventType {
        /**
         * The ARN of the event type.
         */
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        /**
         * The description of the event type.
         */
        description?: string;
        /**
         * The event type entity types.
         */
        entityTypes?: outputs.frauddetector.DetectorEntityType[];
        /**
         * The event type event variables.
         */
        eventVariables?: outputs.frauddetector.DetectorEventVariable[];
        /**
         * Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
         *
         * For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
         */
        inline?: boolean;
        /**
         * The event type labels.
         */
        labels?: outputs.frauddetector.DetectorLabel[];
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The name for the event type
         */
        name?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    export interface DetectorEventVariable {
        /**
         * The event variable ARN.
         */
        arn?: string;
        /**
         * The time when the event variable was created.
         */
        createdTime?: string;
        /**
         * The data source of the event variable.
         *
         * Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
         *
         * When defining a variable within a detector, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
         */
        dataSource?: enums.frauddetector.DetectorEventVariableDataSource;
        /**
         * The data type of the event variable.
         *
         * Valid values: `STRING | INTEGER | BOOLEAN | FLOAT`
         */
        dataType?: enums.frauddetector.DetectorEventVariableDataType;
        /**
         * The default value of the event variable. This is required if you are providing the details of your variables instead of the ARN.
         */
        defaultValue?: string;
        /**
         * The description.
         */
        description?: string;
        /**
         * Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
         *
         * For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
         */
        inline?: boolean;
        /**
         * The time when the event variable was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The name of the event variable.
         */
        name?: string;
        /**
         * Tags associated with this event variable.
         */
        tags?: outputs.frauddetector.DetectorTag[];
        /**
         * The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types) .
         */
        variableType?: enums.frauddetector.DetectorEventVariableVariableType;
    }

    export interface DetectorLabel {
        /**
         * The label ARN.
         */
        arn?: string;
        /**
         * The time when the label was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        /**
         * Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
         *
         * For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
         */
        inline?: boolean;
        /**
         * The time when the label was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The label name.
         */
        name?: string;
        /**
         * Tags associated with this label.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    /**
     * A model to associate with a detector.
     */
    export interface DetectorModel {
        /**
         * The ARN of the model.
         */
        arn?: string;
    }

    export interface DetectorOutcome {
        /**
         * The outcome ARN.
         */
        arn?: string;
        /**
         * The time when the outcome was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        /**
         * Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
         *
         * For example, when creating `AWS::FraudDetector::Detector` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your detector but not execute any changes to the variables.
         */
        inline?: boolean;
        /**
         * The time when the outcome was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The outcome name.
         */
        name?: string;
        /**
         * Tags associated with this outcome.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    export interface DetectorRule {
        /**
         * The rule ARN.
         */
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        /**
         * The detector for which the rule is associated.
         */
        detectorId?: string;
        /**
         * The rule expression. A rule expression captures the business logic. For more information, see [Rule language reference](https://docs.aws.amazon.com/frauddetector/latest/ug/rule-language-reference.html) .
         */
        expression?: string;
        /**
         * The rule language.
         *
         * Valid Value: DETECTORPL
         */
        language?: enums.frauddetector.DetectorRuleLanguage;
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The rule outcome.
         */
        outcomes?: outputs.frauddetector.DetectorOutcome[];
        /**
         * The rule ID.
         */
        ruleId?: string;
        /**
         * The rule version.
         */
        ruleVersion?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.DetectorTag[];
    }

    export interface DetectorTag {
        /**
         * A tag key.
         */
        key: string;
        /**
         * A value assigned to a tag key.
         */
        value: string;
    }

    export interface EventTypeEntityType {
        /**
         * The entity type ARN.
         */
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        /**
         * Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
         *
         * For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your event type but not execute any changes to the variables.
         */
        inline?: boolean;
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The entity type name.
         *
         * `^[0-9a-z_-]+$`
         */
        name?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.EventTypeTag[];
    }

    export interface EventTypeEventVariable {
        /**
         * The event variable ARN.
         */
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        /**
         * The source of the event variable.
         *
         * Valid values: `EVENT | EXTERNAL_MODEL_SCORE`
         *
         * When defining a variable within a event type, you can only use the `EVENT` value for DataSource when the *Inline* property is set to true. If the *Inline* property is set false, you can use either `EVENT` or `MODEL_SCORE` for DataSource.
         */
        dataSource?: enums.frauddetector.EventTypeEventVariableDataSource;
        /**
         * The data type of the event variable. For more information, see [Data types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#data-types) .
         */
        dataType?: enums.frauddetector.EventTypeEventVariableDataType;
        /**
         * The default value of the event variable
         */
        defaultValue?: string;
        /**
         * The description.
         */
        description?: string;
        /**
         * Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
         *
         * For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the Variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your event type but not execute any changes to the variables.
         */
        inline?: boolean;
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The name of the event variable.
         */
        name?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.EventTypeTag[];
        /**
         * The type of event variable. For more information, see [Variable types](https://docs.aws.amazon.com/frauddetector/latest/ug/variables.html#variable-types) .
         */
        variableType?: enums.frauddetector.EventTypeEventVariableVariableType;
    }

    export interface EventTypeLabel {
        /**
         * The label ARN.
         */
        arn?: string;
        /**
         * The time when the event type was created.
         */
        createdTime?: string;
        /**
         * The description.
         */
        description?: string;
        /**
         * Indicates whether the resource is defined within this CloudFormation template and impacts the create, update, and delete behavior of the stack. If the value is `true` , CloudFormation will create/update/delete the resource when creating/updating/deleting the stack. If the value is `false` , CloudFormation will validate that the object exists and then use it within the resource without making changes to the object.
         *
         * For example, when creating `AWS::FraudDetector::EventType` you must define at least two variables. You can set `Inline=true` for these variables and CloudFormation will create/update/delete the variables as part of stack operations. However, if you set `Inline=false` , CloudFormation will associate the variables to your EventType but not execute any changes to the variables.
         */
        inline?: boolean;
        /**
         * The time when the event type was last updated.
         */
        lastUpdatedTime?: string;
        /**
         * The label name.
         */
        name?: string;
        /**
         * Tags associated with this event type.
         */
        tags?: outputs.frauddetector.EventTypeTag[];
    }

    export interface EventTypeTag {
        /**
         * A tag key.
         */
        key: string;
        /**
         * A value assigned to a tag key.
         */
        value: string;
    }

}

export namespace fsx {
    /**
     * Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
     *  The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
     */
    export interface DataRepositoryAssociationAutoExportPolicy {
        /**
         * The ``AutoExportPolicy`` can have the following event values:
         *   +   ``NEW`` - New files and directories are automatically exported to the data repository as they are added to the file system.
         *   +   ``CHANGED`` - Changes to files and directories on the file system are automatically exported to the data repository.
         *   +   ``DELETED`` - Files and directories are automatically deleted on the data repository when they are deleted on the file system.
         *   
         *  You can define any combination of event types for your ``AutoExportPolicy``.
         */
        events: enums.fsx.DataRepositoryAssociationEventType[];
    }

    /**
     * Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
     *  The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
     */
    export interface DataRepositoryAssociationAutoImportPolicy {
        /**
         * The ``AutoImportPolicy`` can have the following event values:
         *   +   ``NEW`` - Amazon FSx automatically imports metadata of files added to the linked S3 bucket that do not currently exist in the FSx file system.
         *   +   ``CHANGED`` - Amazon FSx automatically updates file metadata and invalidates existing file content on the file system as files change in the data repository.
         *   +   ``DELETED`` - Amazon FSx automatically deletes files on the file system as corresponding files are deleted in the data repository.
         *   
         *  You can define any combination of event types for your ``AutoImportPolicy``.
         */
        events: enums.fsx.DataRepositoryAssociationEventType[];
    }

    /**
     * The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
     */
    export interface DataRepositoryAssociationS3 {
        /**
         * Describes a data repository association's automatic export policy. The ``AutoExportPolicy`` defines the types of updated objects on the file system that will be automatically exported to the data repository. As you create, modify, or delete files, Amazon FSx for Lustre automatically exports the defined changes asynchronously once your application finishes modifying the file.
         *  The ``AutoExportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
         */
        autoExportPolicy?: outputs.fsx.DataRepositoryAssociationAutoExportPolicy;
        /**
         * Describes the data repository association's automatic import policy. The AutoImportPolicy defines how Amazon FSx keeps your file metadata and directory listings up to date by importing changes to your Amazon FSx for Lustre file system as you modify objects in a linked S3 bucket.
         *  The ``AutoImportPolicy`` is only supported on Amazon FSx for Lustre file systems with a data repository association.
         */
        autoImportPolicy?: outputs.fsx.DataRepositoryAssociationAutoImportPolicy;
    }

}

export namespace gamelift {
    export interface AliasRoutingStrategy {
        /**
         * A unique identifier for a fleet that the alias points to. If you specify SIMPLE for the Type property, you must specify this property.
         */
        fleetId?: string;
        /**
         * The message text to be used with a terminal routing strategy. If you specify TERMINAL for the Type property, you must specify this property.
         */
        message?: string;
        /**
         * Simple routing strategy. The alias resolves to one specific fleet. Use this type when routing to active fleets.
         */
        type: enums.gamelift.AliasRoutingStrategyType;
    }

    export interface BuildStorageLocation {
        /**
         * An Amazon S3 bucket identifier. This is the name of the S3 bucket.
         */
        bucket: string;
        /**
         * The name of the zip file that contains the build files or script files.
         */
        key: string;
        /**
         * The version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses this information when retrieving files from your S3 bucket. To retrieve a specific version of the file, provide an object version. To retrieve the latest version of the file, do not set this parameter.
         */
        objectVersion?: string;
        /**
         * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access the S3 bucket.
         */
        roleArn: string;
    }

    /**
     * Details about a container that is used in a container fleet
     */
    export interface ContainerGroupDefinitionContainerDefinition {
        /**
         * The command that's passed to the container.
         */
        command?: string[];
        /**
         * A descriptive label for the container definition. Container definition names must be unique with a container group definition.
         */
        containerName: string;
        /**
         * The maximum number of CPU units reserved for this container. The value is expressed as an integer amount of CPU units. 1 vCPU is equal to 1024 CPU units
         */
        cpu?: number;
        /**
         * A list of container dependencies that determines when this container starts up and shuts down. For container groups with multiple containers, dependencies let you define a startup/shutdown sequence across the containers.
         */
        dependsOn?: outputs.gamelift.ContainerGroupDefinitionContainerDependency[];
        /**
         * The entry point that's passed to the container so that it will run as an executable. If there are multiple arguments, each argument is a string in the array.
         */
        entryPoint?: string[];
        /**
         * The environment variables to pass to a container.
         */
        environment?: outputs.gamelift.ContainerGroupDefinitionContainerEnvironment[];
        /**
         * Specifies if the container is essential. If an essential container fails a health check, then all containers in the container group will be restarted. You must specify exactly 1 essential container in a container group.
         */
        essential?: boolean;
        /**
         * Specifies how the health of the containers will be checked.
         */
        healthCheck?: outputs.gamelift.ContainerGroupDefinitionContainerHealthCheck;
        /**
         * Specifies the image URI of this container.
         */
        imageUri: string;
        /**
         * Specifies how much memory is available to the container. You must specify at least this parameter or the TotalMemoryLimit parameter of the ContainerGroupDefinition.
         */
        memoryLimits?: outputs.gamelift.ContainerGroupDefinitionMemoryLimits;
        /**
         * Defines the ports on the container.
         */
        portConfiguration?: outputs.gamelift.ContainerGroupDefinitionPortConfiguration;
        /**
         * The digest of the container image.
         */
        resolvedImageDigest?: string;
        /**
         * The working directory to run commands inside the container in.
         */
        workingDirectory?: string;
    }

    /**
     * A dependency that impacts a container's startup and shutdown.
     */
    export interface ContainerGroupDefinitionContainerDependency {
        /**
         * The type of dependency.
         */
        condition: enums.gamelift.ContainerGroupDefinitionContainerDependencyCondition;
        /**
         * A descriptive label for the container definition. The container being defined depends on this container's condition.
         */
        containerName: string;
    }

    /**
     * An environment variable to set inside a container, in the form of a key-value pair.
     */
    export interface ContainerGroupDefinitionContainerEnvironment {
        /**
         * The environment variable name.
         */
        name: string;
        /**
         * The environment variable value.
         */
        value: string;
    }

    /**
     * Specifies how the process manager checks the health of containers.
     */
    export interface ContainerGroupDefinitionContainerHealthCheck {
        /**
         * A string array representing the command that the container runs to determine if it is healthy.
         */
        command: string[];
        /**
         * How often (in seconds) the health is checked.
         */
        interval?: number;
        /**
         * How many times the process manager will retry the command after a timeout. (The first run of the command does not count as a retry.)
         */
        retries?: number;
        /**
         * The optional grace period (in seconds) to give a container time to boostrap before teh health check is declared failed.
         */
        startPeriod?: number;
        /**
         * How many seconds the process manager allows the command to run before canceling it.
         */
        timeout?: number;
    }

    /**
     * A set of one or more port numbers that can be opened on the container.
     */
    export interface ContainerGroupDefinitionContainerPortRange {
        /**
         * A starting value for the range of allowed port numbers.
         */
        fromPort: number;
        /**
         * Defines the protocol of these ports.
         */
        protocol: enums.gamelift.ContainerGroupDefinitionContainerPortRangeProtocol;
        /**
         * An ending value for the range of allowed port numbers. Port numbers are end-inclusive. This value must be equal to or greater than FromPort.
         */
        toPort: number;
    }

    /**
     * Specifies how much memory is available to the container.
     */
    export interface ContainerGroupDefinitionMemoryLimits {
        /**
         * The hard limit of memory to reserve for the container.
         */
        hardLimit?: number;
        /**
         * The amount of memory that is reserved for the container.
         */
        softLimit?: number;
    }

    /**
     * Defines the ports on a container.
     */
    export interface ContainerGroupDefinitionPortConfiguration {
        /**
         * Specifies one or more ranges of ports on a container.
         */
        containerPortRanges: outputs.gamelift.ContainerGroupDefinitionContainerPortRange[];
    }

    /**
     * Configuration for Anywhere fleet.
     */
    export interface FleetAnywhereConfiguration {
        /**
         * Cost of compute can be specified on Anywhere Fleets to prioritize placement across Queue destinations based on Cost.
         */
        cost: string;
    }

    /**
     * Information about the use of a TLS/SSL certificate for a fleet. TLS certificate generation is enabled at the fleet level, with one certificate generated for the fleet. When this feature is enabled, the certificate can be retrieved using the GameLift Server SDK call GetInstanceCertificate. All instances in a fleet share the same certificate.
     */
    export interface FleetCertificateConfiguration {
        /**
         * Indicates whether a TLS/SSL certificate is generated for a fleet.
         *
         * Valid values include:
         *
         * - *GENERATED* - Generate a TLS/SSL certificate for this fleet.
         * - *DISABLED* - (default) Do not generate a TLS/SSL certificate for this fleet.
         */
        certificateType: enums.gamelift.FleetCertificateConfigurationCertificateType;
    }

    /**
     * Defines the range of ports on the instance that allow inbound traffic to connect with containers in a fleet.
     */
    export interface FleetConnectionPortRange {
        /**
         * A starting value for a range of allowed port numbers.
         */
        fromPort: number;
        /**
         * An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
         */
        toPort: number;
    }

    /**
     * Specifies container groups that this instance will hold. You must specify exactly one replica group. Optionally, you may specify exactly one daemon group. You can't change this property after you create the fleet.
     */
    export interface FleetContainerGroupsConfiguration {
        /**
         * A set of ports to allow inbound traffic, including game clients, to connect to processes running in the container fleet.
         *
         * Connection ports are dynamically mapped to container ports, which are assigned to individual processes running in a container. The connection port range must have enough ports to map to all container ports across a fleet instance. To calculate the minimum connection ports needed, use the following formula:
         *
         * *[Total number of container ports as defined for containers in the replica container group] * [Desired or calculated number of replica container groups per instance] + [Total number of container ports as defined for containers in the daemon container group]*
         *
         * As a best practice, double the minimum number of connection ports.
         *
         * > Use the fleet's `EC2InboundPermissions` property to control external access to connection ports. Set this property to the connection port numbers that you want to open access to. See `IpPermission` for more details.
         */
        connectionPortRange: outputs.gamelift.FleetConnectionPortRange;
        /**
         * The names of the container group definitions that will be created in an instance. You must specify exactly one REPLICA container group. You have the option to also specify one DAEMON container group.
         */
        containerGroupDefinitionNames: string[];
        containerGroupsPerInstance?: outputs.gamelift.FleetContainerGroupsPerInstance;
    }

    /**
     * The number of container groups per instance.
     */
    export interface FleetContainerGroupsPerInstance {
        /**
         * Use this parameter to override the number of replica container groups GameLift will launch per instance with a number that is lower than that calculated maximum.
         */
        desiredReplicaContainerGroupsPerInstance?: number;
        /**
         * GameLift calculates the maximum number of replica container groups it can launch per instance based on instance properties such as CPU, memory, and connection ports.
         */
        maxReplicaContainerGroupsPerInstance?: number;
    }

    /**
     * A range of IP addresses and port settings that allow inbound traffic to connect to server processes on an Amazon GameLift hosting resource. New game sessions that are started on the fleet are assigned an IP address/port number combination, which must fall into the fleet's allowed ranges. For fleets created with a custom game server, the ranges reflect the server's game session assignments. For Realtime Servers fleets, Amazon GameLift automatically opens two port ranges, one for TCP messaging and one for UDP, for use by the Realtime servers.
     */
    export interface FleetIpPermission {
        /**
         * A starting value for a range of allowed port numbers.
         */
        fromPort: number;
        /**
         * A range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
         */
        ipRange: string;
        /**
         * The network communication protocol used by the fleet.
         */
        protocol: enums.gamelift.FleetIpPermissionProtocol;
        /**
         * An ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
         */
        toPort: number;
    }

    /**
     * Current resource capacity settings in a specified fleet or location. The location value might refer to a fleet's remote location or its home Region.
     */
    export interface FleetLocationCapacity {
        /**
         * The number of EC2 instances you want to maintain in the specified fleet location. This value must fall between the minimum and maximum size limits.
         */
        desiredEc2Instances: number;
        /**
         * The maximum value that is allowed for the fleet's instance count for a location. When creating a new fleet, GameLift automatically sets this value to "1". Once the fleet is active, you can change this value.
         */
        maxSize: number;
        /**
         * The minimum value allowed for the fleet's instance count for a location. When creating a new fleet, GameLift automatically sets this value to "0". After the fleet is active, you can change this value.
         */
        minSize: number;
    }

    /**
     * A remote location where a multi-location fleet can deploy EC2 instances for game hosting.
     */
    export interface FleetLocationConfiguration {
        /**
         * An AWS Region code, such as `us-west-2` .
         */
        location: string;
        /**
         * Current resource capacity settings for managed EC2 fleets and container fleets. For multi-location fleets, location values might refer to a fleet's remote location or its home Region.
         *
         * *Returned by:* [DescribeFleetCapacity](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetCapacity.html) , [DescribeFleetLocationCapacity](https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetLocationCapacity.html) , [UpdateFleetCapacity](https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateFleetCapacity.html)
         */
        locationCapacity?: outputs.gamelift.FleetLocationCapacity;
    }

    /**
     * A policy that limits the number of game sessions a player can create on the same fleet. This optional policy gives game owners control over how players can consume available game server resources. A resource creation policy makes the following statement: "An individual player can create a maximum number of new game sessions within a specified time period".
     *
     * The policy is evaluated when a player tries to create a new game session. For example, assume you have a policy of 10 new game sessions and a time period of 60 minutes. On receiving a CreateGameSession request, Amazon GameLift checks that the player (identified by CreatorId) has created fewer than 10 game sessions in the past 60 minutes.
     */
    export interface FleetResourceCreationLimitPolicy {
        /**
         * The maximum number of game sessions that an individual can create during the policy period.
         */
        newGameSessionsPerCreator?: number;
        /**
         * The time span used in evaluating the resource creation limit policy.
         */
        policyPeriodInMinutes?: number;
    }

    /**
     * A collection of server process configurations that describe the processes to run on each instance in a fleet. All fleets must have a runtime configuration. Each instance in the fleet maintains server processes as specified in the runtime configuration, launching new ones as existing processes end. Each instance regularly checks for an updated runtime configuration makes adjustments as called for.
     *
     * The runtime configuration enables the instances in a fleet to run multiple processes simultaneously. Potential scenarios are as follows: (1) Run multiple processes of a single game server executable to maximize usage of your hosting resources. (2) Run one or more processes of different executables, such as your game server and a metrics tracking program. (3) Run multiple processes of a single game server but with different launch parameters, for example to run one process on each instance in debug mode.
     *
     * An Amazon GameLift instance is limited to 50 processes running simultaneously. A runtime configuration must specify fewer than this limit. To calculate the total number of processes specified in a runtime configuration, add the values of the ConcurrentExecutions parameter for each ServerProcess object in the runtime configuration.
     */
    export interface FleetRuntimeConfiguration {
        /**
         * The maximum amount of time (in seconds) that a game session can remain in status ACTIVATING. If the game session is not active before the timeout, activation is terminated and the game session status is changed to TERMINATED.
         */
        gameSessionActivationTimeoutSeconds?: number;
        /**
         * The maximum number of game sessions with status ACTIVATING to allow on an instance simultaneously. This setting limits the amount of instance resources that can be used for new game activations at any one time.
         */
        maxConcurrentGameSessionActivations?: number;
        /**
         * A collection of server process configurations that describe which server processes to run on each instance in a fleet.
         */
        serverProcesses?: outputs.gamelift.FleetServerProcess[];
    }

    /**
     * Rule that controls how a fleet is scaled. Scaling policies are uniquely identified by the combination of name and fleet ID.
     */
    export interface FleetScalingPolicy {
        /**
         * Comparison operator to use when measuring a metric against the threshold value.
         */
        comparisonOperator?: enums.gamelift.FleetScalingPolicyComparisonOperator;
        /**
         * Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
         */
        evaluationPeriods?: number;
        /**
         * The fleet location.
         */
        location?: string;
        /**
         * Name of the Amazon GameLift-defined metric that is used to trigger a scaling adjustment.
         */
        metricName: enums.gamelift.FleetScalingPolicyMetricName;
        /**
         * A descriptive label that is associated with a fleet's scaling policy. Policy names do not need to be unique.
         */
        name: string;
        /**
         * The type of scaling policy to create. For a target-based policy, set the parameter MetricName to 'PercentAvailableGameSessions' and specify a TargetConfiguration. For a rule-based policy set the following parameters: MetricName, ComparisonOperator, Threshold, EvaluationPeriods, ScalingAdjustmentType, and ScalingAdjustment.
         */
        policyType?: enums.gamelift.FleetScalingPolicyPolicyType;
        /**
         * Amount of adjustment to make, based on the scaling adjustment type.
         */
        scalingAdjustment?: number;
        /**
         * The type of adjustment to make to a fleet's instance count.
         */
        scalingAdjustmentType?: enums.gamelift.FleetScalingPolicyScalingAdjustmentType;
        /**
         * Current status of the scaling policy. The scaling policy can be in force only when in an ACTIVE status. Scaling policies can be suspended for individual fleets. If the policy is suspended for a fleet, the policy status does not change.
         */
        status?: enums.gamelift.FleetScalingPolicyStatus;
        /**
         * An object that contains settings for a target-based scaling policy.
         */
        targetConfiguration?: outputs.gamelift.FleetTargetConfiguration;
        /**
         * Metric value used to trigger a scaling event.
         */
        threshold?: number;
        /**
         * The current status of the fleet's scaling policies in a requested fleet location. The status PENDING_UPDATE indicates that an update was requested for the fleet but has not yet been completed for the location.
         */
        updateStatus?: enums.gamelift.FleetScalingPolicyUpdateStatus;
    }

    /**
     * A set of instructions for launching server processes on each instance in a fleet. Each instruction set identifies the location of the server executable, optional launch parameters, and the number of server processes with this configuration to maintain concurrently on the instance. Server process configurations make up a fleet's RuntimeConfiguration.
     */
    export interface FleetServerProcess {
        /**
         * The number of server processes that use this configuration to run concurrently on an instance.
         */
        concurrentExecutions: number;
        /**
         * The location of the server executable in a custom game build or the name of the Realtime script file that contains the Init() function. Game builds and Realtime scripts are installed on instances at the root:
         *
         * Windows (for custom game builds only): C:\game. Example: "C:\game\MyGame\server.exe"
         *
         * Linux: /local/game. Examples: "/local/game/MyGame/server.exe" or "/local/game/MyRealtimeScript.js"
         */
        launchPath: string;
        /**
         * An optional list of parameters to pass to the server executable or Realtime script on launch.
         */
        parameters?: string;
    }

    /**
     * Settings for a target-based scaling policy. A target-based policy tracks a particular fleet metric specifies a target value for the metric. As player usage changes, the policy triggers Amazon GameLift to adjust capacity so that the metric returns to the target value. The target configuration specifies settings as needed for the target based policy, including the target value.
     */
    export interface FleetTargetConfiguration {
        /**
         * Desired value to use with a target-based scaling policy. The value must be relevant for whatever metric the scaling policy is using. For example, in a policy using the metric PercentAvailableGameSessions, the target value should be the preferred size of the fleet's buffer (the percent of capacity that should be idle and ready for new game sessions).
         */
        targetValue: number;
    }

    /**
     * Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.
     */
    export interface GameServerGroupAutoScalingPolicy {
        /**
         * Length of time, in seconds, it takes for a new instance to start new game server processes and register with Amazon GameLift FleetIQ. Specifying a warm-up time can be useful, particularly with game servers that take a long time to start up, because it avoids prematurely starting new instances.
         */
        estimatedInstanceWarmup?: number;
        /**
         * Settings for a target-based scaling policy applied to Auto Scaling group. These settings are used to create a target-based policy that tracks the GameLift FleetIQ metric `PercentUtilizedGameServers` and specifies a target value for the metric. As player usage changes, the policy triggers to adjust the game server group capacity so that the metric returns to the target value.
         */
        targetTrackingConfiguration: outputs.gamelift.GameServerGroupTargetTrackingConfiguration;
    }

    /**
     * An allowed instance type for your game server group.
     */
    export interface GameServerGroupInstanceDefinition {
        instanceType: string;
        weightedCapacity?: string;
    }

    /**
     * The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.
     */
    export interface GameServerGroupLaunchTemplate {
        /**
         * A unique identifier for an existing Amazon EC2 launch template.
         */
        launchTemplateId?: string;
        /**
         * A readable identifier for an existing Amazon EC2 launch template.
         */
        launchTemplateName?: string;
        /**
         * The version of the Amazon EC2 launch template to use. If no version is specified, the default version will be used. With Amazon EC2, you can specify a default version for a launch template. If none is set, the default is the first version created.
         */
        version?: string;
    }

    /**
     * Settings for a target-based scaling policy applied to Auto Scaling group.
     */
    export interface GameServerGroupTargetTrackingConfiguration {
        /**
         * Desired value to use with a game server group target-based scaling policy.
         */
        targetValue: number;
    }

    /**
     * A fleet or alias designated in a game session queue.
     */
    export interface GameSessionQueueDestination {
        /**
         * The Amazon Resource Name (ARN) that is assigned to fleet or fleet alias. ARNs, which include a fleet ID or alias ID and a Region name, provide a unique identifier across all Regions.
         */
        destinationArn?: string;
    }

    export interface GameSessionQueueFilterConfiguration {
        /**
         * A list of locations to allow game session placement in, in the form of AWS Region codes such as `us-west-2` .
         */
        allowedLocations?: string[];
    }

    /**
     * Sets a latency cap for individual players when placing a game session.
     */
    export interface GameSessionQueuePlayerLatencyPolicy {
        /**
         * The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.
         */
        maximumIndividualPlayerLatencyMilliseconds?: number;
        /**
         * The length of time, in seconds, that the policy is enforced while placing a new game session.
         */
        policyDurationSeconds?: number;
    }

    export interface GameSessionQueuePriorityConfiguration {
        /**
         * The prioritization order to use for fleet locations, when the `PriorityOrder` property includes `LOCATION` . Locations are identified by AWS Region codes such as `us-west-2` . Each location can only be listed once.
         */
        locationOrder?: string[];
        /**
         * The recommended sequence to use when prioritizing where to place new game sessions. Each type can only be listed once.
         *
         * - `LATENCY` -- FleetIQ prioritizes locations where the average player latency (provided in each game session request) is lowest.
         * - `COST` -- FleetIQ prioritizes destinations with the lowest current hosting costs. Cost is evaluated based on the location, instance type, and fleet type (Spot or On-Demand) for each destination in the queue.
         * - `DESTINATION` -- FleetIQ prioritizes based on the order that destinations are listed in the queue configuration.
         * - `LOCATION` -- FleetIQ prioritizes based on the provided order of locations, as defined in `LocationOrder` .
         */
        priorityOrder?: enums.gamelift.GameSessionQueuePriorityOrderItem[];
    }

    /**
     * A key-value pair that contains information about a game session.
     */
    export interface MatchmakingConfigurationGameProperty {
        /**
         * The game property identifier.
         */
        key: string;
        /**
         * The game property value.
         */
        value: string;
    }

    export interface ScriptS3Location {
        /**
         * An Amazon S3 bucket identifier. This is the name of the S3 bucket.
         */
        bucket: string;
        /**
         * The name of the zip file that contains the script files.
         */
        key: string;
        /**
         * The version of the file, if object versioning is turned on for the bucket. Amazon GameLift uses this information when retrieving files from your S3 bucket. To retrieve a specific version of the file, provide an object version. To retrieve the latest version of the file, do not set this parameter.
         */
        objectVersion?: string;
        /**
         * The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access the S3 bucket.
         */
        roleArn: string;
    }

}

export namespace globalaccelerator {
    /**
     * ARN of resource to share.
     */
    export interface CrossAccountAttachmentResource {
        /**
         * The endpoint ID for the endpoint that is specified as a AWS resource.
         *
         * An endpoint ID for the cross-account feature is the ARN of an AWS resource, such as a Network Load Balancer, that Global Accelerator supports as an endpoint for an accelerator.
         */
        endpointId: string;
        /**
         * The AWS Region where a shared endpoint resource is located.
         */
        region?: string;
    }

    /**
     * The configuration for a given endpoint
     */
    export interface EndpointGroupEndpointConfiguration {
        /**
         * Attachment ARN that provides access control to the cross account endpoint. Not required for resources hosted in the same account as the endpoint group.
         */
        attachmentArn?: string;
        /**
         * true if client ip should be preserved
         */
        clientIpPreservationEnabled?: boolean;
        /**
         * Id of the endpoint. For Network/Application Load Balancer this value is the ARN.  For EIP, this value is the allocation ID.  For EC2 instances, this is the EC2 instance ID
         */
        endpointId: string;
        /**
         * The weight for the endpoint.
         */
        weight?: number;
    }

    /**
     * listener to endpoint port mapping.
     */
    export interface EndpointGroupPortOverride {
        /**
         * The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.
         */
        endpointPort: number;
        /**
         * The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.
         */
        listenerPort: number;
    }

    /**
     * A port range to support for connections from  clients to your accelerator.
     */
    export interface ListenerPortRange {
        /**
         * The first port in the range of ports, inclusive.
         */
        fromPort: number;
        /**
         * The last port in the range of ports, inclusive.
         */
        toPort: number;
    }

}

export namespace glue {
    /**
     * Identifier for the registry which the schema is part of.
     */
    export interface SchemaRegistry {
        /**
         * Amazon Resource Name for the Registry.
         */
        arn?: string;
        /**
         * Name of the registry in which the schema will be created.
         */
        name?: string;
    }

    /**
     * Specify checkpoint version for update. This is only required to update the Compatibility.
     */
    export interface SchemaVersion {
        /**
         * Indicates if the latest version needs to be updated.
         */
        isLatest?: boolean;
        /**
         * Indicates the version number in the schema to update.
         */
        versionNumber?: number;
    }

    /**
     * Identifier for the schema where the schema version will be created.
     */
    export interface SchemaVersionSchema {
        /**
         * Name of the registry to identify where the Schema is located.
         */
        registryName?: string;
        /**
         * Amazon Resource Name for the Schema. This attribute can be used to uniquely represent the Schema.
         */
        schemaArn?: string;
        /**
         * Name of the schema. This parameter requires RegistryName to be provided.
         */
        schemaName?: string;
    }

}

export namespace grafana {
    /**
     * Maps Grafana friendly names to the IdPs SAML attributes.
     */
    export interface WorkspaceAssertionAttributes {
        /**
         * Name of the attribute within the SAML assert to use as the users email in Grafana.
         */
        email?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users groups in Grafana.
         */
        groups?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users login handle in Grafana.
         */
        login?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users name in Grafana.
         */
        name?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users organizations in Grafana.
         */
        org?: string;
        /**
         * Name of the attribute within the SAML assert to use as the users roles in Grafana.
         */
        role?: string;
    }

    /**
     * IdP Metadata used to configure SAML authentication in Grafana.
     */
    export interface WorkspaceIdpMetadata {
        /**
         * URL that vends the IdPs metadata.
         */
        url?: string;
        /**
         * XML blob of the IdPs metadata.
         */
        xml?: string;
    }

    /**
     * The configuration settings for Network Access Control.
     */
    export interface WorkspaceNetworkAccessControl {
        /**
         * The list of prefix list IDs. A prefix list is a list of CIDR ranges of IP addresses. The IP addresses specified are allowed to access your workspace. If the list is not included in the configuration then no IP addresses will be allowed to access the workspace.
         */
        prefixListIds?: string[];
        /**
         * The list of Amazon VPC endpoint IDs for the workspace. If a NetworkAccessConfiguration is specified then only VPC endpoints specified here will be allowed to access the workspace.
         */
        vpceIds?: string[];
    }

    /**
     * Maps SAML roles to the Grafana Editor and Admin roles.
     */
    export interface WorkspaceRoleValues {
        /**
         * List of SAML roles which will be mapped into the Grafana Admin role.
         */
        admin?: string[];
        /**
         * List of SAML roles which will be mapped into the Grafana Editor role.
         */
        editor?: string[];
    }

    /**
     * SAML configuration data associated with an AMG workspace.
     */
    export interface WorkspaceSamlConfiguration {
        /**
         * List of SAML organizations allowed to access Grafana.
         */
        allowedOrganizations?: string[];
        /**
         * A structure that defines which attributes in the SAML assertion are to be used to define information about the users authenticated by that IdP to use the workspace.
         */
        assertionAttributes?: outputs.grafana.WorkspaceAssertionAttributes;
        /**
         * A structure containing the identity provider (IdP) metadata used to integrate the identity provider with this workspace.
         */
        idpMetadata: outputs.grafana.WorkspaceIdpMetadata;
        /**
         * The maximum lifetime an authenticated user can be logged in (in minutes) before being required to re-authenticate.
         */
        loginValidityDuration?: number;
        /**
         * A structure containing arrays that map group names in the SAML assertion to the Grafana `Admin` and `Editor` roles in the workspace.
         */
        roleValues?: outputs.grafana.WorkspaceRoleValues;
    }

    /**
     * The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
     */
    export interface WorkspaceVpcConfiguration {
        /**
         * The list of Amazon EC2 security group IDs attached to the Amazon VPC for your Grafana workspace to connect.
         */
        securityGroupIds: string[];
        /**
         * The list of Amazon EC2 subnet IDs created in the Amazon VPC for your Grafana workspace to connect.
         */
        subnetIds: string[];
    }

}

export namespace greengrassv2 {
    export interface ComponentVersionComponentDependencyRequirement {
        dependencyType?: enums.greengrassv2.ComponentVersionComponentDependencyRequirementDependencyType;
        versionRequirement?: string;
    }

    export interface ComponentVersionComponentPlatform {
        /**
         * A dictionary of attributes for the platform. The AWS IoT Greengrass Core software defines the `os` and `platform` by default. You can specify additional platform attributes for a core device when you deploy the AWS IoT Greengrass nucleus component. For more information, see the [AWS IoT Greengrass nucleus component](https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html) in the *AWS IoT Greengrass V2 Developer Guide* .
         */
        attributes?: {[key: string]: string};
        /**
         * The friendly name of the platform. This name helps you identify the platform.
         *
         * If you omit this parameter, AWS IoT Greengrass creates a friendly name from the `os` and `architecture` of the platform.
         */
        name?: string;
    }

    export interface ComponentVersionLambdaContainerParams {
        /**
         * The list of system devices that the container can access.
         */
        devices?: outputs.greengrassv2.ComponentVersionLambdaDeviceMount[];
        /**
         * The memory size of the container, expressed in kilobytes.
         *
         * Default: `16384` (16 MB)
         */
        memorySizeInKb?: number;
        /**
         * Whether or not the container can read information from the device's `/sys` folder.
         *
         * Default: `false`
         */
        mountRoSysfs?: boolean;
        /**
         * The list of volumes that the container can access.
         */
        volumes?: outputs.greengrassv2.ComponentVersionLambdaVolumeMount[];
    }

    export interface ComponentVersionLambdaDeviceMount {
        /**
         * Whether or not to add the component's system user as an owner of the device.
         *
         * Default: `false`
         */
        addGroupOwner?: boolean;
        /**
         * The mount path for the device in the file system.
         */
        path?: string;
        /**
         * The permission to access the device: read/only ( `ro` ) or read/write ( `rw` ).
         *
         * Default: `ro`
         */
        permission?: enums.greengrassv2.ComponentVersionLambdaFilesystemPermission;
    }

    export interface ComponentVersionLambdaEventSource {
        /**
         * The topic to which to subscribe to receive event messages.
         */
        topic?: string;
        /**
         * The type of event source. Choose from the following options:
         *
         * - `PUB_SUB` – Subscribe to local publish/subscribe messages. This event source type doesn't support MQTT wildcards ( `+` and `#` ) in the event source topic.
         * - `IOT_CORE` – Subscribe to AWS IoT Core MQTT messages. This event source type supports MQTT wildcards ( `+` and `#` ) in the event source topic.
         */
        type?: enums.greengrassv2.ComponentVersionLambdaEventSourceType;
    }

    export interface ComponentVersionLambdaExecutionParameters {
        /**
         * The map of environment variables that are available to the Lambda function when it runs.
         */
        environmentVariables?: {[key: string]: string};
        /**
         * The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and AWS IoT Core MQTT messages.
         */
        eventSources?: outputs.greengrassv2.ComponentVersionLambdaEventSource[];
        /**
         * The list of arguments to pass to the Lambda function when it runs.
         */
        execArgs?: string[];
        /**
         * The encoding type that the Lambda function supports.
         *
         * Default: `json`
         */
        inputPayloadEncodingType?: enums.greengrassv2.ComponentVersionLambdaExecutionParametersInputPayloadEncodingType;
        /**
         * The parameters for the Linux process that contains the Lambda function.
         */
        linuxProcessParams?: outputs.greengrassv2.ComponentVersionLambdaLinuxProcessParams;
        /**
         * The maximum amount of time in seconds that a non-pinned Lambda function can idle before the AWS IoT Greengrass Core software stops its process.
         */
        maxIdleTimeInSeconds?: number;
        /**
         * The maximum number of instances that a non-pinned Lambda function can run at the same time.
         */
        maxInstancesCount?: number;
        /**
         * The maximum size of the message queue for the Lambda function component. The AWS IoT Greengrass core device stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.
         */
        maxQueueSize?: number;
        /**
         * Whether or not the Lambda function is pinned, or long-lived.
         *
         * - A pinned Lambda function starts when the AWS IoT Greengrass Core starts and keeps running in its own container.
         * - A non-pinned Lambda function starts only when it receives a work item and exists after it idles for `maxIdleTimeInSeconds` . If the function has multiple work items, the AWS IoT Greengrass Core software creates multiple instances of the function.
         *
         * Default: `true`
         */
        pinned?: boolean;
        /**
         * The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.
         */
        statusTimeoutInSeconds?: number;
        /**
         * The maximum amount of time in seconds that the Lambda function can process a work item.
         */
        timeoutInSeconds?: number;
    }

    export interface ComponentVersionLambdaFunctionRecipeSource {
        /**
         * The component versions on which this Lambda function component depends.
         */
        componentDependencies?: {[key: string]: outputs.greengrassv2.ComponentVersionComponentDependencyRequirement};
        /**
         * The system and runtime parameters for the Lambda function as it runs on the AWS IoT Greengrass core device.
         */
        componentLambdaParameters?: outputs.greengrassv2.ComponentVersionLambdaExecutionParameters;
        /**
         * The name of the component.
         *
         * Defaults to the name of the Lambda function.
         */
        componentName?: string;
        /**
         * The platforms that the component version supports.
         */
        componentPlatforms?: outputs.greengrassv2.ComponentVersionComponentPlatform[];
        /**
         * The version of the component.
         *
         * Defaults to the version of the Lambda function as a semantic version. For example, if your function version is `3` , the component version becomes `3.0.0` .
         */
        componentVersion?: string;
        /**
         * The ARN of the Lambda function. The ARN must include the version of the function to import. You can't use version aliases like `$LATEST` .
         */
        lambdaArn?: string;
    }

    export interface ComponentVersionLambdaLinuxProcessParams {
        /**
         * The parameters for the container in which the Lambda function runs.
         */
        containerParams?: outputs.greengrassv2.ComponentVersionLambdaContainerParams;
        /**
         * The isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the AWS IoT Greengrass container, or as a regular process outside any container.
         *
         * Default: `GreengrassContainer`
         */
        isolationMode?: enums.greengrassv2.ComponentVersionLambdaLinuxProcessParamsIsolationMode;
    }

    export interface ComponentVersionLambdaVolumeMount {
        /**
         * Whether or not to add the AWS IoT Greengrass user group as an owner of the volume.
         *
         * Default: `false`
         */
        addGroupOwner?: boolean;
        /**
         * The path to the logical volume in the file system.
         */
        destinationPath?: string;
        /**
         * The permission to access the volume: read/only ( `ro` ) or read/write ( `rw` ).
         *
         * Default: `ro`
         */
        permission?: enums.greengrassv2.ComponentVersionLambdaFilesystemPermission;
        /**
         * The path to the physical volume in the file system.
         */
        sourcePath?: string;
    }

    export interface DeploymentComponentConfigurationUpdate {
        merge?: string;
        reset?: string[];
    }

    export interface DeploymentComponentDeploymentSpecification {
        componentVersion?: string;
        configurationUpdate?: outputs.greengrassv2.DeploymentComponentConfigurationUpdate;
        runWith?: outputs.greengrassv2.DeploymentComponentRunWith;
    }

    export interface DeploymentComponentRunWith {
        posixUser?: string;
        systemResourceLimits?: outputs.greengrassv2.DeploymentSystemResourceLimits;
        windowsUser?: string;
    }

    export interface DeploymentComponentUpdatePolicy {
        /**
         * Whether or not to notify components and wait for components to become safe to update. Choose from the following options:
         *
         * - `NOTIFY_COMPONENTS` – The deployment notifies each component before it stops and updates that component. Components can use the [SubscribeToComponentUpdates](https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetocomponentupdates) IPC operation to receive these notifications. Then, components can respond with the [DeferComponentUpdate](https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-defercomponentupdate) IPC operation. For more information, see the [Create deployments](https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html) in the *AWS IoT Greengrass V2 Developer Guide* .
         * - `SKIP_NOTIFY_COMPONENTS` – The deployment doesn't notify components or wait for them to be safe to update.
         *
         * Default: `NOTIFY_COMPONENTS`
         */
        action?: enums.greengrassv2.DeploymentComponentUpdatePolicyAction;
        /**
         * The amount of time in seconds that each component on a device has to report that it's safe to update. If the component waits for longer than this timeout, then the deployment proceeds on the device.
         *
         * Default: `60`
         */
        timeoutInSeconds?: number;
    }

    export interface DeploymentConfigurationValidationPolicy {
        /**
         * The amount of time in seconds that a component can validate its configuration updates. If the validation time exceeds this timeout, then the deployment proceeds for the device.
         *
         * Default: `30`
         */
        timeoutInSeconds?: number;
    }

    export interface DeploymentIoTJobAbortConfig {
        /**
         * The list of criteria that define when and how to cancel the configuration deployment.
         */
        criteriaList: outputs.greengrassv2.DeploymentIoTJobAbortCriteria[];
    }

    export interface DeploymentIoTJobAbortCriteria {
        /**
         * The action to perform when the criteria are met.
         */
        action: enums.greengrassv2.DeploymentIoTJobAbortCriteriaAction;
        /**
         * The type of job deployment failure that can cancel a job.
         */
        failureType: enums.greengrassv2.DeploymentIoTJobAbortCriteriaFailureType;
        /**
         * The minimum number of things that receive the configuration before the job can cancel.
         */
        minNumberOfExecutedThings: number;
        /**
         * The minimum percentage of `failureType` failures that occur before the job can cancel.
         *
         * This parameter supports up to two digits after the decimal (for example, you can specify `10.9` or `10.99` , but not `10.999` ).
         */
        thresholdPercentage: number;
    }

    export interface DeploymentIoTJobConfiguration {
        /**
         * The stop configuration for the job. This configuration defines when and how to stop a job rollout.
         */
        abortConfig?: outputs.greengrassv2.DeploymentIoTJobAbortConfig;
        /**
         * The rollout configuration for the job. This configuration defines the rate at which the job rolls out to the fleet of target devices.
         */
        jobExecutionsRolloutConfig?: outputs.greengrassv2.DeploymentIoTJobExecutionsRolloutConfig;
        /**
         * The timeout configuration for the job. This configuration defines the amount of time each device has to complete the job.
         */
        timeoutConfig?: outputs.greengrassv2.DeploymentIoTJobTimeoutConfig;
    }

    export interface DeploymentIoTJobExecutionsRolloutConfig {
        /**
         * The exponential rate to increase the job rollout rate.
         */
        exponentialRate?: outputs.greengrassv2.DeploymentIoTJobExponentialRolloutRate;
        /**
         * The maximum number of devices that receive a pending job notification, per minute.
         */
        maximumPerMinute?: number;
    }

    export interface DeploymentIoTJobExponentialRolloutRate {
        /**
         * The minimum number of devices that receive a pending job notification, per minute, when the job starts. This parameter defines the initial rollout rate of the job.
         */
        baseRatePerMinute: number;
        /**
         * The exponential factor to increase the rollout rate for the job.
         *
         * This parameter supports up to one digit after the decimal (for example, you can specify `1.5` , but not `1.55` ).
         */
        incrementFactor: number;
        /**
         * The criteria to increase the rollout rate for the job.
         */
        rateIncreaseCriteria: outputs.greengrassv2.DeploymentIoTJobRateIncreaseCriteria;
    }

    export interface DeploymentIoTJobRateIncreaseCriteria {
    }

    export interface DeploymentIoTJobTimeoutConfig {
        /**
         * The amount of time, in minutes, that devices have to complete the job. The timer starts when the job status is set to `IN_PROGRESS` . If the job status doesn't change to a terminal state before the time expires, then the job status is set to `TIMED_OUT` .
         *
         * The timeout interval must be between 1 minute and 7 days (10080 minutes).
         */
        inProgressTimeoutInMinutes?: number;
    }

    export interface DeploymentPolicies {
        /**
         * The component update policy for the configuration deployment. This policy defines when it's safe to deploy the configuration to devices.
         */
        componentUpdatePolicy?: outputs.greengrassv2.DeploymentComponentUpdatePolicy;
        /**
         * The configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.
         */
        configurationValidationPolicy?: outputs.greengrassv2.DeploymentConfigurationValidationPolicy;
        /**
         * The failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.
         *
         * Default: `ROLLBACK`
         */
        failureHandlingPolicy?: enums.greengrassv2.DeploymentPoliciesFailureHandlingPolicy;
    }

    export interface DeploymentSystemResourceLimits {
        cpus?: number;
        memory?: number;
    }

}

export namespace groundstation {
    export interface ConfigAntennaDownlinkConfig {
        /**
         * Defines the spectrum configuration.
         */
        spectrumConfig?: outputs.groundstation.ConfigSpectrumConfig;
    }

    export interface ConfigAntennaDownlinkDemodDecodeConfig {
        /**
         * Defines how the RF signal will be decoded.
         */
        decodeConfig?: outputs.groundstation.ConfigDecodeConfig;
        /**
         * Defines how the RF signal will be demodulated.
         */
        demodulationConfig?: outputs.groundstation.ConfigDemodulationConfig;
        /**
         * Defines the spectrum configuration.
         */
        spectrumConfig?: outputs.groundstation.ConfigSpectrumConfig;
    }

    export interface ConfigAntennaUplinkConfig {
        /**
         * Defines the spectrum configuration.
         */
        spectrumConfig?: outputs.groundstation.ConfigUplinkSpectrumConfig;
        /**
         * The equivalent isotropically radiated power (EIRP) to use for uplink transmissions. Valid values are between 20.0 to 50.0 dBW.
         */
        targetEirp?: outputs.groundstation.ConfigEirp;
        /**
         * Whether or not uplink transmit is disabled.
         */
        transmitDisabled?: boolean;
    }

    export interface ConfigData {
        /**
         * Provides information for an antenna downlink config object. Antenna downlink config objects are used to provide parameters for downlinks where no demodulation or decoding is performed by Ground Station (RF over IP downlinks).
         */
        antennaDownlinkConfig?: outputs.groundstation.ConfigAntennaDownlinkConfig;
        /**
         * Provides information for a downlink demod decode config object. Downlink demod decode config objects are used to provide parameters for downlinks where the Ground Station service will demodulate and decode the downlinked data.
         */
        antennaDownlinkDemodDecodeConfig?: outputs.groundstation.ConfigAntennaDownlinkDemodDecodeConfig;
        /**
         * Provides information for an uplink config object. Uplink config objects are used to provide parameters for uplink contacts.
         */
        antennaUplinkConfig?: outputs.groundstation.ConfigAntennaUplinkConfig;
        /**
         * Provides information for a dataflow endpoint config object. Dataflow endpoint config objects are used to provide parameters about which IP endpoint(s) to use during a contact. Dataflow endpoints are where Ground Station sends data during a downlink contact and where Ground Station receives data to send to the satellite during an uplink contact.
         */
        dataflowEndpointConfig?: outputs.groundstation.ConfigDataflowEndpointConfig;
        /**
         * Provides information for an S3 recording config object. S3 recording config objects are used to provide parameters for S3 recording during downlink contacts.
         */
        s3RecordingConfig?: outputs.groundstation.ConfigS3RecordingConfig;
        /**
         * Provides information for a tracking config object. Tracking config objects are used to provide parameters about how to track the satellite through the sky during a contact.
         */
        trackingConfig?: outputs.groundstation.ConfigTrackingConfig;
        /**
         * Provides information for an uplink echo config object. Uplink echo config objects are used to provide parameters for uplink echo during uplink contacts.
         */
        uplinkEchoConfig?: outputs.groundstation.ConfigUplinkEchoConfig;
    }

    export interface ConfigDataflowEndpointConfig {
        /**
         * The name of the dataflow endpoint to use during contacts.
         */
        dataflowEndpointName?: string;
        /**
         * The region of the dataflow endpoint to use during contacts. When omitted, Ground Station will use the region of the contact.
         */
        dataflowEndpointRegion?: string;
    }

    export interface ConfigDecodeConfig {
        unvalidatedJson?: string;
    }

    export interface ConfigDemodulationConfig {
        unvalidatedJson?: string;
    }

    export interface ConfigEirp {
        /**
         * The units of the EIRP.
         */
        units?: enums.groundstation.ConfigEirpUnits;
        /**
         * The value of the EIRP. Valid values are between 20.0 to 50.0 dBW.
         */
        value?: number;
    }

    export interface ConfigFrequency {
        /**
         * The units of the frequency.
         */
        units?: enums.groundstation.ConfigFrequencyUnits;
        /**
         * The value of the frequency. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.
         */
        value?: number;
    }

    export interface ConfigFrequencyBandwidth {
        /**
         * The units of the bandwidth.
         */
        units?: enums.groundstation.ConfigBandwidthUnits;
        /**
         * The value of the bandwidth. AWS Ground Station currently has the following bandwidth limitations: 
         *
         * - For `AntennaDownlinkDemodDecodeconfig` , valid values are between 125 kHz to 650 MHz.
         * - For `AntennaDownlinkconfig` , valid values are between 10 kHz to 54 MHz.
         * - For `AntennaUplinkConfig` , valid values are between 10 kHz to 54 MHz.
         */
        value?: number;
    }

    export interface ConfigS3RecordingConfig {
        /**
         * S3 Bucket where the data is written. The name of the S3 Bucket provided must begin with `aws-groundstation` .
         */
        bucketArn?: string;
        /**
         * The prefix of the S3 data object. If you choose to use any optional keys for substitution, these values will be replaced with the corresponding information from your contact details. For example, a prefix of `{satellite_id}/{year}/{month}/{day}/` will replaced with `fake_satellite_id/2021/01/10/`
         *
         * *Optional keys for substitution* : `{satellite_id}` | `{config-name}` | `{config-id}` | `{year}` | `{month}` | `{day}`
         */
        prefix?: string;
        /**
         * Defines the ARN of the role assumed for putting archives to S3.
         */
        roleArn?: string;
    }

    export interface ConfigSpectrumConfig {
        /**
         * The bandwidth of the spectrum. AWS Ground Station currently has the following bandwidth limitations: 
         *
         * - For `AntennaDownlinkDemodDecodeconfig` , valid values are between 125 kHz to 650 MHz.
         * - For `AntennaDownlinkconfig` , valid values are between 10 kHz to 54 MHz.
         * - For `AntennaUplinkConfig` , valid values are between 10 kHz to 54 MHz.
         */
        bandwidth?: outputs.groundstation.ConfigFrequencyBandwidth;
        /**
         * The center frequency of the spectrum. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.
         */
        centerFrequency?: outputs.groundstation.ConfigFrequency;
        /**
         * The polarization of the spectrum. Valid values are `"RIGHT_HAND"` and `"LEFT_HAND"` . Capturing both `"RIGHT_HAND"` and `"LEFT_HAND"` polarization requires two separate configs.
         */
        polarization?: enums.groundstation.ConfigPolarization;
    }

    export interface ConfigTrackingConfig {
        /**
         * Specifies whether or not to use autotrack. `REMOVED` specifies that program track should only be used during the contact. `PREFERRED` specifies that autotracking is preferred during the contact but fallback to program track if the signal is lost. `REQUIRED` specifies that autotracking is required during the contact and not to use program track if the signal is lost.
         */
        autotrack?: enums.groundstation.ConfigTrackingConfigAutotrack;
    }

    export interface ConfigUplinkEchoConfig {
        /**
         * Defines the ARN of the uplink config to echo back to a dataflow endpoint.
         */
        antennaUplinkConfigArn?: string;
        /**
         * Whether or not uplink echo is enabled.
         */
        enabled?: boolean;
    }

    export interface ConfigUplinkSpectrumConfig {
        /**
         * The center frequency of the spectrum. Valid values are between 2200 to 2300 MHz and 7750 to 8400 MHz for downlink and 2025 to 2120 MHz for uplink.
         */
        centerFrequency?: outputs.groundstation.ConfigFrequency;
        /**
         * The polarization of the spectrum. Valid values are `"RIGHT_HAND"` and `"LEFT_HAND"` .
         */
        polarization?: enums.groundstation.ConfigPolarization;
    }

    /**
     * Information about AwsGroundStationAgentEndpoint.
     */
    export interface DataflowEndpointGroupAwsGroundStationAgentEndpoint {
        agentStatus?: enums.groundstation.DataflowEndpointGroupAgentStatus;
        auditResults?: enums.groundstation.DataflowEndpointGroupAuditResults;
        egressAddress?: outputs.groundstation.DataflowEndpointGroupConnectionDetails;
        ingressAddress?: outputs.groundstation.DataflowEndpointGroupRangedConnectionDetails;
        name?: string;
    }

    /**
     * Egress address of AgentEndpoint with an optional mtu.
     */
    export interface DataflowEndpointGroupConnectionDetails {
        /**
         * Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.
         */
        mtu?: number;
        socketAddress?: outputs.groundstation.DataflowEndpointGroupSocketAddress;
    }

    export interface DataflowEndpointGroupDataflowEndpoint {
        /**
         * The address and port of an endpoint.
         */
        address?: outputs.groundstation.DataflowEndpointGroupSocketAddress;
        mtu?: number;
        /**
         * The endpoint name.
         *
         * When listing available contacts for a satellite, Ground Station searches for a dataflow endpoint whose name matches the value specified by the dataflow endpoint config of the selected mission profile. If no matching dataflow endpoints are found then Ground Station will not display any available contacts for the satellite.
         */
        name?: string;
    }

    export interface DataflowEndpointGroupEndpointDetails {
        awsGroundStationAgentEndpoint?: outputs.groundstation.DataflowEndpointGroupAwsGroundStationAgentEndpoint;
        /**
         * Information about the endpoint such as name and the endpoint address.
         */
        endpoint?: outputs.groundstation.DataflowEndpointGroupDataflowEndpoint;
        /**
         * The role ARN, and IDs for security groups and subnets.
         */
        securityDetails?: outputs.groundstation.DataflowEndpointGroupSecurityDetails;
    }

    /**
     * An integer range that has a minimum and maximum value.
     */
    export interface DataflowEndpointGroupIntegerRange {
        /**
         * A maximum value.
         */
        maximum?: number;
        /**
         * A minimum value.
         */
        minimum?: number;
    }

    /**
     * Ingress address of AgentEndpoint with a port range and an optional mtu.
     */
    export interface DataflowEndpointGroupRangedConnectionDetails {
        /**
         * Maximum transmission unit (MTU) size in bytes of a dataflow endpoint.
         */
        mtu?: number;
        socketAddress?: outputs.groundstation.DataflowEndpointGroupRangedSocketAddress;
    }

    /**
     * A socket address with a port range.
     */
    export interface DataflowEndpointGroupRangedSocketAddress {
        /**
         * IPv4 socket address.
         */
        name?: string;
        /**
         * Port range of a socket address.
         */
        portRange?: outputs.groundstation.DataflowEndpointGroupIntegerRange;
    }

    export interface DataflowEndpointGroupSecurityDetails {
        /**
         * The ARN of a role which Ground Station has permission to assume, such as `arn:aws:iam::1234567890:role/DataDeliveryServiceRole` .
         *
         * Ground Station will assume this role and create an ENI in your VPC on the specified subnet upon creation of a dataflow endpoint group. This ENI is used as the ingress/egress point for data streamed during a satellite contact.
         */
        roleArn?: string;
        /**
         * The security group Ids of the security role, such as `sg-1234567890abcdef0` .
         */
        securityGroupIds?: string[];
        /**
         * The subnet Ids of the security details, such as `subnet-12345678` .
         */
        subnetIds?: string[];
    }

    export interface DataflowEndpointGroupSocketAddress {
        /**
         * The name of the endpoint, such as `Endpoint 1` .
         */
        name?: string;
        /**
         * The port of the endpoint, such as `55888` .
         */
        port?: number;
    }

    export interface MissionProfileDataflowEdge {
        /**
         * The ARN of the destination for this dataflow edge. For example, specify the ARN of a dataflow endpoint config for a downlink edge or an antenna uplink config for an uplink edge.
         */
        destination?: string;
        /**
         * The ARN of the source for this dataflow edge. For example, specify the ARN of an antenna downlink config for a downlink edge or a dataflow endpoint config for an uplink edge.
         */
        source?: string;
    }

    export interface MissionProfileStreamsKmsKey {
        kmsAliasArn?: string;
        kmsKeyArn?: string;
    }

}

export namespace guardduty {
    export interface DetectorCfnDataSourceConfigurations {
        /**
         * Describes which Kubernetes data sources are enabled for a detector.
         */
        kubernetes?: outputs.guardduty.DetectorCfnKubernetesConfiguration;
        /**
         * Describes whether Malware Protection will be enabled as a data source.
         */
        malwareProtection?: outputs.guardduty.DetectorCfnMalwareProtectionConfiguration;
        /**
         * Describes whether S3 data event logs are enabled as a data source.
         */
        s3Logs?: outputs.guardduty.DetectorCfns3LogsConfiguration;
    }

    export interface DetectorCfnFeatureAdditionalConfiguration {
        /**
         * Name of the additional configuration.
         */
        name?: string;
        /**
         * Status of the additional configuration.
         */
        status?: string;
    }

    export interface DetectorCfnFeatureConfiguration {
        /**
         * Information about the additional configuration of a feature in your account.
         */
        additionalConfiguration?: outputs.guardduty.DetectorCfnFeatureAdditionalConfiguration[];
        /**
         * Name of the feature.
         */
        name: string;
        /**
         * Status of the feature configuration.
         */
        status: enums.guardduty.DetectorCfnFeatureConfigurationStatus;
    }

    export interface DetectorCfnKubernetesAuditLogsConfiguration {
        /**
         * Describes whether Kubernetes audit logs are enabled as a data source for the detector.
         */
        enable: boolean;
    }

    export interface DetectorCfnKubernetesConfiguration {
        /**
         * Describes whether Kubernetes audit logs are enabled as a data source for the detector.
         */
        auditLogs: outputs.guardduty.DetectorCfnKubernetesAuditLogsConfiguration;
    }

    export interface DetectorCfnMalwareProtectionConfiguration {
        /**
         * Describes the configuration of Malware Protection for EC2 instances with findings.
         */
        scanEc2InstanceWithFindings?: outputs.guardduty.DetectorCfnScanEc2InstanceWithFindingsConfiguration;
    }

    export interface DetectorCfnScanEc2InstanceWithFindingsConfiguration {
        /**
         * Describes the configuration for scanning EBS volumes as data source.
         */
        ebsVolumes?: boolean;
    }

    export interface DetectorCfns3LogsConfiguration {
        /**
         * The status of S3 data event logs as a data source.
         */
        enable: boolean;
    }

    export interface FilterCondition {
        eq?: string[];
        equals?: string[];
        greaterThan?: number;
        greaterThanOrEqual?: number;
        gt?: number;
        gte?: number;
        lessThan?: number;
        lessThanOrEqual?: number;
        lt?: number;
        lte?: number;
        neq?: string[];
        notEquals?: string[];
    }

    export interface FilterFindingCriteria {
        /**
         * Represents a map of finding properties that match specified conditions and values when querying findings.
         *
         * For information about JSON criterion mapping to their console equivalent, see [Finding criteria](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_filter-findings.html#filter_criteria) . The following are the available criterion:
         *
         * - accountId
         * - id
         * - region
         * - severity
         *
         * To filter on the basis of severity, API and CFN use the following input list for the condition:
         *
         * - *Low* : `["1", "2", "3"]`
         * - *Medium* : `["4", "5", "6"]`
         * - *High* : `["7", "8", "9"]`
         *
         * For more information, see [Severity levels for GuardDuty findings](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_findings.html#guardduty_findings-severity) .
         * - type
         * - updatedAt
         *
         * Type: ISO 8601 string format: YYYY-MM-DDTHH:MM:SS.SSSZ or YYYY-MM-DDTHH:MM:SSZ depending on whether the value contains milliseconds.
         * - resource.accessKeyDetails.accessKeyId
         * - resource.accessKeyDetails.principalId
         * - resource.accessKeyDetails.userName
         * - resource.accessKeyDetails.userType
         * - resource.instanceDetails.iamInstanceProfile.id
         * - resource.instanceDetails.imageId
         * - resource.instanceDetails.instanceId
         * - resource.instanceDetails.tags.key
         * - resource.instanceDetails.tags.value
         * - resource.instanceDetails.networkInterfaces.ipv6Addresses
         * - resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress
         * - resource.instanceDetails.networkInterfaces.publicDnsName
         * - resource.instanceDetails.networkInterfaces.publicIp
         * - resource.instanceDetails.networkInterfaces.securityGroups.groupId
         * - resource.instanceDetails.networkInterfaces.securityGroups.groupName
         * - resource.instanceDetails.networkInterfaces.subnetId
         * - resource.instanceDetails.networkInterfaces.vpcId
         * - resource.instanceDetails.outpostArn
         * - resource.resourceType
         * - resource.s3BucketDetails.publicAccess.effectivePermissions
         * - resource.s3BucketDetails.name
         * - resource.s3BucketDetails.tags.key
         * - resource.s3BucketDetails.tags.value
         * - resource.s3BucketDetails.type
         * - service.action.actionType
         * - service.action.awsApiCallAction.api
         * - service.action.awsApiCallAction.callerType
         * - service.action.awsApiCallAction.errorCode
         * - service.action.awsApiCallAction.remoteIpDetails.city.cityName
         * - service.action.awsApiCallAction.remoteIpDetails.country.countryName
         * - service.action.awsApiCallAction.remoteIpDetails.ipAddressV4
         * - service.action.awsApiCallAction.remoteIpDetails.organization.asn
         * - service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg
         * - service.action.awsApiCallAction.serviceName
         * - service.action.dnsRequestAction.domain
         * - service.action.networkConnectionAction.blocked
         * - service.action.networkConnectionAction.connectionDirection
         * - service.action.networkConnectionAction.localPortDetails.port
         * - service.action.networkConnectionAction.protocol
         * - service.action.networkConnectionAction.remoteIpDetails.city.cityName
         * - service.action.networkConnectionAction.remoteIpDetails.country.countryName
         * - service.action.networkConnectionAction.remoteIpDetails.ipAddressV4
         * - service.action.networkConnectionAction.remoteIpDetails.organization.asn
         * - service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg
         * - service.action.networkConnectionAction.remotePortDetails.port
         * - service.action.awsApiCallAction.remoteAccountDetails.affiliated
         * - service.action.kubernetesApiCallAction.remoteIpDetails.ipAddressV4
         * - service.action.kubernetesApiCallAction.requestUri
         * - service.action.networkConnectionAction.localIpDetails.ipAddressV4
         * - service.action.networkConnectionAction.protocol
         * - service.action.awsApiCallAction.serviceName
         * - service.action.awsApiCallAction.remoteAccountDetails.accountId
         * - service.additionalInfo.threatListName
         * - service.resourceRole
         * - resource.eksClusterDetails.name
         * - resource.kubernetesDetails.kubernetesWorkloadDetails.name
         * - resource.kubernetesDetails.kubernetesWorkloadDetails.namespace
         * - resource.kubernetesDetails.kubernetesUserDetails.username
         * - resource.kubernetesDetails.kubernetesWorkloadDetails.containers.image
         * - resource.kubernetesDetails.kubernetesWorkloadDetails.containers.imagePrefix
         * - service.ebsVolumeScanDetails.scanId
         * - service.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.name
         * - service.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.severity
         * - service.ebsVolumeScanDetails.scanDetections.threatDetectedByName.threatNames.filePaths.hash
         * - resource.ecsClusterDetails.name
         * - resource.ecsClusterDetails.taskDetails.containers.image
         * - resource.ecsClusterDetails.taskDetails.definitionArn
         * - resource.containerDetails.image
         * - resource.rdsDbInstanceDetails.dbInstanceIdentifier
         * - resource.rdsDbInstanceDetails.dbClusterIdentifier
         * - resource.rdsDbInstanceDetails.engine
         * - resource.rdsDbUserDetails.user
         * - resource.rdsDbInstanceDetails.tags.key
         * - resource.rdsDbInstanceDetails.tags.value
         * - service.runtimeDetails.process.executableSha256
         * - service.runtimeDetails.process.name
         * - service.runtimeDetails.process.name
         * - resource.lambdaDetails.functionName
         * - resource.lambdaDetails.functionArn
         * - resource.lambdaDetails.tags.key
         * - resource.lambdaDetails.tags.value
         */
        criterion?: {[key: string]: outputs.guardduty.FilterCondition};
    }

}

export namespace healthlake {
    /**
     * The time that a Data Store was created.
     */
    export interface FhirDatastoreCreatedAt {
        /**
         * Nanoseconds.
         */
        nanos: number;
        /**
         * Seconds since epoch.
         */
        seconds: string;
    }

    /**
     * The identity provider configuration for the datastore
     */
    export interface FhirDatastoreIdentityProviderConfiguration {
        /**
         * Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.
         */
        authorizationStrategy: enums.healthlake.FhirDatastoreIdentityProviderConfigurationAuthorizationStrategy;
        /**
         * Flag to indicate if fine-grained authorization will be enabled for the datastore
         */
        fineGrainedAuthorizationEnabled?: boolean;
        /**
         * The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.
         */
        idpLambdaArn?: string;
        /**
         * The JSON metadata elements for identity provider configuration.
         */
        metadata?: string;
    }

    /**
     * The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.
     */
    export interface FhirDatastoreKmsEncryptionConfig {
        /**
         * The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.
         */
        cmkType: enums.healthlake.FhirDatastoreKmsEncryptionConfigCmkType;
        /**
         * The KMS encryption key id/alias used to encrypt the Data Store contents at rest.
         */
        kmsKeyId?: string;
    }

    /**
     * The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.
     */
    export interface FhirDatastorePreloadDataConfig {
        /**
         * The type of preloaded data. Only Synthea preloaded data is supported.
         */
        preloadDataType: enums.healthlake.FhirDatastorePreloadDataConfigPreloadDataType;
    }

    /**
     * The server-side encryption key configuration for a customer provided encryption key.
     */
    export interface FhirDatastoreSseConfiguration {
        /**
         * The server-side encryption key configuration for a customer provided encryption key (CMK).
         */
        kmsEncryptionConfig: outputs.healthlake.FhirDatastoreKmsEncryptionConfig;
    }

}

export namespace iam {
    /**
     * Contains information about an attached policy.
     *  An attached policy is a managed policy that has been attached to a user, group, or role.
     *  For more information about managed policies, see [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
     */
    export interface GroupPolicy {
        /**
         * The policy document.
         */
        policyDocument: any;
        /**
         * The friendly name (not ARN) identifying the policy.
         */
        policyName: string;
    }

    /**
     * Contains information about an attached policy.
     *  An attached policy is a managed policy that has been attached to a user, group, or role.
     *  For more information about managed policies, refer to [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
     */
    export interface RolePolicy {
        /**
         * The entire contents of the policy that defines permissions. For more information, see [Overview of JSON policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json).
         */
        policyDocument: any;
        /**
         * The friendly name (not ARN) identifying the policy.
         */
        policyName: string;
    }

    /**
     * Creates a password for the specified user, giving the user the ability to access AWS services through the console. For more information about managing passwords, see [Managing Passwords](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in the *User Guide*.
     */
    export interface UserLoginProfile {
        /**
         * The user's password.
         */
        password: string;
        /**
         * Specifies whether the user is required to set a new password on next sign-in.
         */
        passwordResetRequired?: boolean;
    }

    /**
     * Contains information about an attached policy.
     *  An attached policy is a managed policy that has been attached to a user, group, or role.
     *  For more information about managed policies, refer to [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
     */
    export interface UserPolicy {
        /**
         * The entire contents of the policy that defines permissions. For more information, see [Overview of JSON policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json).
         */
        policyDocument: any;
        /**
         * The friendly name (not ARN) identifying the policy.
         */
        policyName: string;
    }

}

export namespace identitystore {
    /**
     * An object containing the identifier of a group member.
     */
    export interface GroupMembershipMemberId {
        /**
         * The identifier for a user in the identity store.
         */
        userId: string;
    }

}

export namespace imagebuilder {
    /**
     * Configuration details of the component.
     */
    export interface ContainerRecipeComponentConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the component.
         */
        componentArn?: string;
        /**
         * A group of parameter settings that are used to configure the component for a specific recipe.
         */
        parameters?: outputs.imagebuilder.ContainerRecipeComponentParameter[];
    }

    /**
     * Contains a key/value pair that sets the named component parameter.
     */
    export interface ContainerRecipeComponentParameter {
        /**
         * The name of the component parameter to set.
         */
        name: string;
        /**
         * Sets the value for the named component parameter.
         */
        value: string[];
    }

    /**
     * Amazon EBS-specific block device mapping specifications. 
     */
    export interface ContainerRecipeEbsInstanceBlockDeviceSpecification {
        /**
         * Use to configure delete on termination of the associated device.
         */
        deleteOnTermination?: boolean;
        /**
         * Use to configure device encryption.
         */
        encrypted?: boolean;
        /**
         * Use to configure device IOPS.
         */
        iops?: number;
        /**
         * Use to configure the KMS key to use when encrypting the device.
         */
        kmsKeyId?: string;
        /**
         * The snapshot that defines the device contents.
         */
        snapshotId?: string;
        /**
         * For GP3 volumes only - The throughput in MiB/s that the volume supports.
         */
        throughput?: number;
        /**
         * Use to override the device's volume size.
         */
        volumeSize?: number;
        /**
         * Use to override the device's volume type.
         */
        volumeType?: enums.imagebuilder.ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType;
    }

    /**
     * Defines block device mappings for the instance used to configure your image. 
     */
    export interface ContainerRecipeInstanceBlockDeviceMapping {
        /**
         * The device to which these mappings apply.
         */
        deviceName?: string;
        /**
         * Use to manage Amazon EBS-specific configuration for this mapping.
         */
        ebs?: outputs.imagebuilder.ContainerRecipeEbsInstanceBlockDeviceSpecification;
        /**
         * Use to remove a mapping from the parent image.
         */
        noDevice?: string;
        /**
         * Use to manage instance ephemeral devices.
         */
        virtualName?: string;
    }

    /**
     * A group of options that can be used to configure an instance for building and testing container images.
     */
    export interface ContainerRecipeInstanceConfiguration {
        /**
         * Defines the block devices to attach for building an instance from this Image Builder AMI.
         */
        blockDeviceMappings?: outputs.imagebuilder.ContainerRecipeInstanceBlockDeviceMapping[];
        /**
         * The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
         */
        image?: string;
    }

    /**
     * The container repository where the output container image is stored.
     */
    export interface ContainerRecipeTargetContainerRepository {
        /**
         * The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
         */
        repositoryName?: string;
        /**
         * Specifies the service in which this image was registered.
         */
        service?: enums.imagebuilder.ContainerRecipeTargetContainerRepositoryService;
    }

    /**
     * The specific AMI settings (for example, launch permissions, AMI tags).
     */
    export interface DistributionConfigurationAmiDistributionConfiguration {
        /**
         * The tags to apply to AMIs distributed to this Region.
         */
        amiTags?: {[key: string]: string};
        /**
         * The description of the AMI distribution configuration.
         */
        description?: string;
        /**
         * The KMS key identifier used to encrypt the distributed image.
         */
        kmsKeyId?: string;
        /**
         * Launch permissions can be used to configure which AWS account s can use the AMI to launch instances.
         */
        launchPermissionConfiguration?: outputs.imagebuilder.DistributionConfigurationLaunchPermissionConfiguration;
        /**
         * The name of the AMI distribution configuration.
         */
        name?: string;
        /**
         * The ID of accounts to which you want to distribute an image.
         */
        targetAccountIds?: string[];
    }

    /**
     * Container distribution settings for encryption, licensing, and sharing in a specific Region.
     */
    export interface DistributionConfigurationContainerDistributionConfiguration {
        /**
         * Tags that are attached to the container distribution configuration.
         */
        containerTags?: string[];
        /**
         * The description of the container distribution configuration.
         */
        description?: string;
        /**
         * The destination repository for the container distribution configuration.
         */
        targetRepository?: outputs.imagebuilder.DistributionConfigurationTargetContainerRepository;
    }

    /**
     * The distributions of the distribution configuration.
     */
    export interface DistributionConfigurationDistribution {
        /**
         * The specific AMI settings, such as launch permissions and AMI tags. For details, see example schema below.
         */
        amiDistributionConfiguration?: outputs.imagebuilder.DistributionConfigurationAmiDistributionConfiguration;
        /**
         * Container distribution settings for encryption, licensing, and sharing in a specific Region. For details, see example schema below.
         */
        containerDistributionConfiguration?: outputs.imagebuilder.DistributionConfigurationContainerDistributionConfiguration;
        /**
         * The Windows faster-launching configurations to use for AMI distribution.
         */
        fastLaunchConfigurations?: outputs.imagebuilder.DistributionConfigurationFastLaunchConfiguration[];
        /**
         * A group of launchTemplateConfiguration settings that apply to image distribution.
         */
        launchTemplateConfigurations?: outputs.imagebuilder.DistributionConfigurationLaunchTemplateConfiguration[];
        /**
         * The License Manager Configuration to associate with the AMI in the specified Region.
         */
        licenseConfigurationArns?: string[];
        /**
         * region
         */
        region: string;
    }

    /**
     * The Windows faster-launching configuration to use for AMI distribution.
     */
    export interface DistributionConfigurationFastLaunchConfiguration {
        /**
         * The owner account ID for the fast-launch enabled Windows AMI.
         */
        accountId?: string;
        /**
         * A Boolean that represents the current state of faster launching for the Windows AMI. Set to true to start using Windows faster launching, or false to stop using it.
         */
        enabled?: boolean;
        /**
         * The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
         */
        launchTemplate?: outputs.imagebuilder.DistributionConfigurationFastLaunchLaunchTemplateSpecification;
        /**
         * The maximum number of parallel instances that are launched for creating resources.
         */
        maxParallelLaunches?: number;
        /**
         * Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
         */
        snapshotConfiguration?: outputs.imagebuilder.DistributionConfigurationFastLaunchSnapshotConfiguration;
    }

    /**
     * The launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots.
     */
    export interface DistributionConfigurationFastLaunchLaunchTemplateSpecification {
        /**
         * The ID of the launch template to use for faster launching for a Windows AMI.
         */
        launchTemplateId?: string;
        /**
         * The name of the launch template to use for faster launching for a Windows AMI.
         */
        launchTemplateName?: string;
        /**
         * The version of the launch template to use for faster launching for a Windows AMI.
         */
        launchTemplateVersion?: string;
    }

    /**
     * Configuration settings for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled.
     */
    export interface DistributionConfigurationFastLaunchSnapshotConfiguration {
        /**
         * The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
         */
        targetResourceCount?: number;
    }

    /**
     * Launch permissions can be used to configure which AWS accounts can use the AMI to launch instances.
     */
    export interface DistributionConfigurationLaunchPermissionConfiguration {
        /**
         * The ARN for an Amazon Web Services Organization that you want to share your AMI with.
         */
        organizationArns?: string[];
        /**
         * The ARN for an Organizations organizational unit (OU) that you want to share your AMI with.
         */
        organizationalUnitArns?: string[];
        /**
         * The name of the group.
         */
        userGroups?: string[];
        /**
         * The AWS account ID.
         */
        userIds?: string[];
    }

    /**
     * launchTemplateConfiguration settings that apply to image distribution.
     */
    export interface DistributionConfigurationLaunchTemplateConfiguration {
        /**
         * The account ID that this configuration applies to.
         */
        accountId?: string;
        /**
         * Identifies the EC2 launch template to use.
         */
        launchTemplateId?: string;
        /**
         * Set the specified EC2 launch template as the default launch template for the specified account.
         */
        setDefaultVersion?: boolean;
    }

    /**
     * The destination repository for the container image.
     */
    export interface DistributionConfigurationTargetContainerRepository {
        /**
         * The repository name of target container repository.
         */
        repositoryName?: string;
        /**
         * The service of target container repository.
         */
        service?: enums.imagebuilder.DistributionConfigurationTargetContainerRepositoryService;
    }

    /**
     * Settings for Image Builder to configure the ECR repository and output container images that are scanned.
     */
    export interface ImageEcrConfiguration {
        /**
         * Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
         */
        containerTags?: string[];
        /**
         * The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don’t provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
         */
        repositoryName?: string;
    }

    /**
     * Settings for Image Builder to configure the ECR repository and output container images that are scanned.
     */
    export interface ImagePipelineEcrConfiguration {
        /**
         * Tags for Image Builder to apply the output container image that is scanned. Tags can help you identify and manage your scanned images.
         */
        containerTags?: string[];
        /**
         * The name of the container repository that Amazon Inspector scans to identify findings for your container images. The name includes the path for the repository location. If you don't provide this information, Image Builder creates a repository in your account named image-builder-image-scanning-repository to use for vulnerability scans for your output container images.
         */
        repositoryName?: string;
    }

    /**
     * Determines if tests should run after building the image. Image Builder defaults to enable tests to run following the image build, before image distribution.
     */
    export interface ImagePipelineImageScanningConfiguration {
        /**
         * Contains ECR settings for vulnerability scans.
         */
        ecrConfiguration?: outputs.imagebuilder.ImagePipelineEcrConfiguration;
        /**
         * This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
         */
        imageScanningEnabled?: boolean;
    }

    /**
     * Image tests configuration.
     */
    export interface ImagePipelineImageTestsConfiguration {
        /**
         * Defines if tests should be executed when building this image.
         */
        imageTestsEnabled?: boolean;
        /**
         * The maximum time in minutes that tests are permitted to run.
         */
        timeoutMinutes?: number;
    }

    /**
     * The schedule of the image pipeline.
     */
    export interface ImagePipelineSchedule {
        /**
         * The condition configures when the pipeline should trigger a new image build.
         */
        pipelineExecutionStartCondition?: enums.imagebuilder.ImagePipelineSchedulePipelineExecutionStartCondition;
        /**
         * The expression determines how often EC2 Image Builder evaluates your pipelineExecutionStartCondition.
         */
        scheduleExpression?: string;
    }

    /**
     * The workflow configuration of the image
     */
    export interface ImagePipelineWorkflowConfiguration {
        /**
         * Define execution decision in case of workflow failure
         */
        onFailure?: enums.imagebuilder.ImagePipelineWorkflowConfigurationOnFailure;
        /**
         * The parallel group name
         */
        parallelGroup?: string;
        /**
         * The parameters associated with the workflow
         */
        parameters?: outputs.imagebuilder.ImagePipelineWorkflowParameter[];
        /**
         * The Amazon Resource Name (ARN) of the workflow
         */
        workflowArn?: string;
    }

    /**
     * A parameter associated with the workflow
     */
    export interface ImagePipelineWorkflowParameter {
        /**
         * The name of the workflow parameter to set.
         */
        name?: string;
        /**
         * Sets the value for the named workflow parameter.
         */
        value?: string[];
    }

    /**
     * Specify additional settings and launch scripts for your build instances.
     */
    export interface ImageRecipeAdditionalInstanceConfiguration {
        /**
         * Contains settings for the SSM agent on your build instance.
         */
        systemsManagerAgent?: outputs.imagebuilder.ImageRecipeSystemsManagerAgent;
        /**
         * Use this property to provide commands or a command script to run when you launch your build instance.
         */
        userDataOverride?: string;
    }

    /**
     * Configuration details of the component.
     */
    export interface ImageRecipeComponentConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the component.
         */
        componentArn?: string;
        /**
         * A group of parameter settings that are used to configure the component for a specific recipe.
         */
        parameters?: outputs.imagebuilder.ImageRecipeComponentParameter[];
    }

    /**
     * Contains a key/value pair that sets the named component parameter.
     */
    export interface ImageRecipeComponentParameter {
        /**
         * The name of the component parameter to set.
         */
        name: string;
        /**
         * Sets the value for the named component parameter.
         */
        value: string[];
    }

    /**
     * Amazon EBS-specific block device mapping specifications. 
     */
    export interface ImageRecipeEbsInstanceBlockDeviceSpecification {
        /**
         * Use to configure delete on termination of the associated device.
         */
        deleteOnTermination?: boolean;
        /**
         * Use to configure device encryption.
         */
        encrypted?: boolean;
        /**
         * Use to configure device IOPS.
         */
        iops?: number;
        /**
         * Use to configure the KMS key to use when encrypting the device.
         */
        kmsKeyId?: string;
        /**
         * The snapshot that defines the device contents.
         */
        snapshotId?: string;
        /**
         * For GP3 volumes only - The throughput in MiB/s that the volume supports.
         */
        throughput?: number;
        /**
         * Use to override the device's volume size.
         */
        volumeSize?: number;
        /**
         * Use to override the device's volume type.
         */
        volumeType?: enums.imagebuilder.ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType;
    }

    /**
     * Defines block device mappings for the instance used to configure your image. 
     */
    export interface ImageRecipeInstanceBlockDeviceMapping {
        /**
         * The device to which these mappings apply.
         */
        deviceName?: string;
        /**
         * Use to manage Amazon EBS-specific configuration for this mapping.
         */
        ebs?: outputs.imagebuilder.ImageRecipeEbsInstanceBlockDeviceSpecification;
        /**
         * Use to remove a mapping from the parent image.
         */
        noDevice?: string;
        /**
         * Use to manage instance ephemeral devices.
         */
        virtualName?: string;
    }

    /**
     * Contains settings for the SSM agent on your build instance.
     */
    export interface ImageRecipeSystemsManagerAgent {
        /**
         * Controls whether the SSM agent is removed from your final build image, prior to creating the new AMI. If this is set to true, then the agent is removed from the final image. If it's set to false, then the agent is left in, so that it is included in the new AMI. The default value is false.
         */
        uninstallAfterBuild?: boolean;
    }

    /**
     * Contains settings for Image Builder image resource and container image scans.
     */
    export interface ImageScanningConfiguration {
        /**
         * Contains ECR settings for vulnerability scans.
         */
        ecrConfiguration?: outputs.imagebuilder.ImageEcrConfiguration;
        /**
         * This sets whether Image Builder keeps a snapshot of the vulnerability scans that Amazon Inspector runs against the build instance when you create a new image.
         */
        imageScanningEnabled?: boolean;
    }

    /**
     * The image tests configuration used when creating this image.
     */
    export interface ImageTestsConfiguration {
        /**
         * ImageTestsEnabled
         */
        imageTestsEnabled?: boolean;
        /**
         * TimeoutMinutes
         */
        timeoutMinutes?: number;
    }

    /**
     * The workflow configuration of the image
     */
    export interface ImageWorkflowConfiguration {
        /**
         * Define execution decision in case of workflow failure
         */
        onFailure?: enums.imagebuilder.ImageWorkflowConfigurationOnFailure;
        /**
         * The parallel group name
         */
        parallelGroup?: string;
        /**
         * The parameters associated with the workflow
         */
        parameters?: outputs.imagebuilder.ImageWorkflowParameter[];
        /**
         * The Amazon Resource Name (ARN) of the workflow
         */
        workflowArn?: string;
    }

    /**
     * A parameter associated with the workflow
     */
    export interface ImageWorkflowParameter {
        /**
         * The name of the workflow parameter to set.
         */
        name?: string;
        /**
         * Sets the value for the named workflow parameter.
         */
        value?: string[];
    }

    /**
     * The instance metadata option settings for the infrastructure configuration.
     */
    export interface InfrastructureConfigurationInstanceMetadataOptions {
        /**
         * Limit the number of hops that an instance metadata request can traverse to reach its destination.
         */
        httpPutResponseHopLimit?: number;
        /**
         * Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows: 
         */
        httpTokens?: enums.imagebuilder.InfrastructureConfigurationInstanceMetadataOptionsHttpTokens;
    }

    /**
     * The logging configuration of the infrastructure configuration.
     */
    export interface InfrastructureConfigurationLogging {
        /**
         * The Amazon S3 logging configuration.
         */
        s3Logs?: outputs.imagebuilder.InfrastructureConfigurationS3Logs;
    }

    /**
     * The S3 path in which to store the logs.
     */
    export interface InfrastructureConfigurationS3Logs {
        /**
         * S3BucketName
         */
        s3BucketName?: string;
        /**
         * S3KeyPrefix
         */
        s3KeyPrefix?: string;
    }

    /**
     * The action of the policy detail.
     */
    export interface LifecyclePolicyAction {
        /**
         * Specifies the resources that the lifecycle policy applies to.
         */
        includeResources?: outputs.imagebuilder.LifecyclePolicyIncludeResources;
        /**
         * The action type of the policy detail.
         */
        type: enums.imagebuilder.LifecyclePolicyActionType;
    }

    /**
     * The AMI exclusion rules for the policy detail.
     */
    export interface LifecyclePolicyAmiExclusionRules {
        /**
         * Use to apply lifecycle policy actions on whether the AMI is public.
         */
        isPublic?: boolean;
        /**
         * Use to apply lifecycle policy actions on AMIs launched before a certain time.
         */
        lastLaunched?: outputs.imagebuilder.LifecyclePolicyLastLaunched;
        /**
         * Use to apply lifecycle policy actions on AMIs distributed to a set of regions.
         */
        regions?: string[];
        /**
         * Use to apply lifecycle policy actions on AMIs shared with a set of regions.
         */
        sharedAccounts?: string[];
        /**
         * The AMIs to select by tag.
         */
        tagMap?: {[key: string]: string};
    }

    /**
     * The exclusion rules to apply of the policy detail.
     */
    export interface LifecyclePolicyExclusionRules {
        /**
         * Lists configuration values that apply to AMIs that Image Builder should exclude from the lifecycle action.
         */
        amis?: outputs.imagebuilder.LifecyclePolicyAmiExclusionRules;
        /**
         * The Image Builder tags to filter on.
         */
        tagMap?: {[key: string]: string};
    }

    /**
     * The filters to apply of the policy detail.
     */
    export interface LifecyclePolicyFilter {
        /**
         * The minimum number of Image Builder resources to retain.
         */
        retainAtLeast?: number;
        /**
         * The filter type.
         */
        type: enums.imagebuilder.LifecyclePolicyFilterType;
        /**
         * The value's time unit.
         */
        unit?: enums.imagebuilder.LifecyclePolicyTimeUnit;
        /**
         * The filter value.
         */
        value: number;
    }

    /**
     * The included resources of the policy detail.
     */
    export interface LifecyclePolicyIncludeResources {
        /**
         * Use to configure lifecycle actions on AMIs.
         */
        amis?: boolean;
        /**
         * Use to configure lifecycle actions on containers.
         */
        containers?: boolean;
        /**
         * Use to configure lifecycle actions on snapshots.
         */
        snapshots?: boolean;
    }

    /**
     * The last launched time of a resource.
     */
    export interface LifecyclePolicyLastLaunched {
        /**
         * The value's time unit.
         */
        unit: enums.imagebuilder.LifecyclePolicyTimeUnit;
        /**
         * The last launched value.
         */
        value: number;
    }

    /**
     * The policy detail of the lifecycle policy.
     */
    export interface LifecyclePolicyPolicyDetail {
        /**
         * Configuration details for the policy action.
         */
        action: outputs.imagebuilder.LifecyclePolicyAction;
        /**
         * Additional rules to specify resources that should be exempt from policy actions.
         */
        exclusionRules?: outputs.imagebuilder.LifecyclePolicyExclusionRules;
        /**
         * Specifies the resources that the lifecycle policy applies to.
         */
        filter: outputs.imagebuilder.LifecyclePolicyFilter;
    }

    /**
     * The recipe to apply the lifecycle policy for.
     */
    export interface LifecyclePolicyRecipeSelection {
        /**
         * The recipe name.
         */
        name: string;
        /**
         * The recipe version.
         */
        semanticVersion: string;
    }

    /**
     * The resource selection for the lifecycle policy.
     */
    export interface LifecyclePolicyResourceSelection {
        /**
         * The recipes to select.
         */
        recipes?: outputs.imagebuilder.LifecyclePolicyRecipeSelection[];
        /**
         * The Image Builder resources to select by tag.
         */
        tagMap?: {[key: string]: string};
    }

}

export namespace inspector {
    export interface AssessmentTemplateTag {
        /**
         * A tag key.
         */
        key: string;
        /**
         * A value assigned to a tag key.
         */
        value: string;
    }

    export interface ResourceGroupTag {
        /**
         * A tag key.
         */
        key: string;
        /**
         * A value assigned to a tag key.
         */
        value: string;
    }

}

export namespace inspectorv2 {
    export interface CisScanConfigurationCisTargets {
        accountIds: string[];
        targetResourceTags?: {[key: string]: any};
    }

    export interface CisScanConfigurationDailySchedule {
        startTime: outputs.inspectorv2.CisScanConfigurationTime;
    }

    export interface CisScanConfigurationMonthlySchedule {
        day: enums.inspectorv2.CisScanConfigurationDay;
        startTime: outputs.inspectorv2.CisScanConfigurationTime;
    }

    export interface CisScanConfigurationOneTimeSchedule {
    }

    /**
     * Choose a Schedule cadence
     */
    export interface CisScanConfigurationSchedule {
        daily?: outputs.inspectorv2.CisScanConfigurationDailySchedule;
        monthly?: outputs.inspectorv2.CisScanConfigurationMonthlySchedule;
        oneTime?: outputs.inspectorv2.CisScanConfigurationOneTimeSchedule;
        weekly?: outputs.inspectorv2.CisScanConfigurationWeeklySchedule;
    }

    export interface CisScanConfigurationTime {
        timeOfDay: string;
        timeZone: string;
    }

    export interface CisScanConfigurationWeeklySchedule {
        days: enums.inspectorv2.CisScanConfigurationDay[];
        startTime: outputs.inspectorv2.CisScanConfigurationTime;
    }

    export interface FilterCriteria {
        /**
         * Details of the AWS account IDs used to filter findings.
         */
        awsAccountId?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details of the component IDs used to filter findings.
         */
        componentId?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details of the component types used to filter findings.
         */
        componentType?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details of the Amazon EC2 instance image IDs used to filter findings.
         */
        ec2InstanceImageId?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details of the Amazon EC2 instance subnet IDs used to filter findings.
         */
        ec2InstanceSubnetId?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details of the Amazon EC2 instance VPC IDs used to filter findings.
         */
        ec2InstanceVpcId?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details of the Amazon ECR image architecture types used to filter findings.
         */
        ecrImageArchitecture?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details of the Amazon ECR image hashes used to filter findings.
         */
        ecrImageHash?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the Amazon ECR image push date and time used to filter findings.
         */
        ecrImagePushedAt?: outputs.inspectorv2.FilterDateFilter[];
        /**
         * Details on the Amazon ECR registry used to filter findings.
         */
        ecrImageRegistry?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the name of the Amazon ECR repository used to filter findings.
         */
        ecrImageRepositoryName?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * The tags attached to the Amazon ECR container image.
         */
        ecrImageTags?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the finding ARNs used to filter findings.
         */
        findingArn?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the finding status types used to filter findings.
         */
        findingStatus?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the finding types used to filter findings.
         */
        findingType?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the date and time a finding was first seen used to filter findings.
         */
        firstObservedAt?: outputs.inspectorv2.FilterDateFilter[];
        /**
         * The Amazon Inspector score to filter on.
         */
        inspectorScore?: outputs.inspectorv2.FilterNumberFilter[];
        /**
         * Details on the date and time a finding was last seen used to filter findings.
         */
        lastObservedAt?: outputs.inspectorv2.FilterDateFilter[];
        /**
         * Details on network protocol used to filter findings.
         */
        networkProtocol?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the port ranges used to filter findings.
         */
        portRange?: outputs.inspectorv2.FilterPortRangeFilter[];
        /**
         * Details on the related vulnerabilities used to filter findings.
         */
        relatedVulnerabilities?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the resource IDs used to filter findings.
         */
        resourceId?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the resource tags used to filter findings.
         */
        resourceTags?: outputs.inspectorv2.FilterMapFilter[];
        /**
         * Details on the resource types used to filter findings.
         */
        resourceType?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the severity used to filter findings.
         */
        severity?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the finding title used to filter findings.
         */
        title?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the date and time a finding was last updated at used to filter findings.
         */
        updatedAt?: outputs.inspectorv2.FilterDateFilter[];
        /**
         * Details on the vendor severity used to filter findings.
         */
        vendorSeverity?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the vulnerability ID used to filter findings.
         */
        vulnerabilityId?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the vulnerability score to filter findings by.
         */
        vulnerabilitySource?: outputs.inspectorv2.FilterStringFilter[];
        /**
         * Details on the vulnerable packages used to filter findings.
         */
        vulnerablePackages?: outputs.inspectorv2.FilterPackageFilter[];
    }

    export interface FilterDateFilter {
        endInclusive?: number;
        startInclusive?: number;
    }

    export interface FilterMapFilter {
        comparison: enums.inspectorv2.FilterMapComparison;
        key?: string;
        value?: string;
    }

    export interface FilterNumberFilter {
        lowerInclusive?: number;
        upperInclusive?: number;
    }

    export interface FilterPackageFilter {
        architecture?: outputs.inspectorv2.FilterStringFilter;
        epoch?: outputs.inspectorv2.FilterNumberFilter;
        name?: outputs.inspectorv2.FilterStringFilter;
        release?: outputs.inspectorv2.FilterStringFilter;
        sourceLayerHash?: outputs.inspectorv2.FilterStringFilter;
        version?: outputs.inspectorv2.FilterStringFilter;
    }

    export interface FilterPortRangeFilter {
        beginInclusive?: number;
        endInclusive?: number;
    }

    export interface FilterStringFilter {
        comparison: enums.inspectorv2.FilterStringComparison;
        value: string;
    }

}

export namespace internetmonitor {
    export interface MonitorHealthEventsConfig {
        /**
         * The configuration that determines the threshold and other conditions for when Internet Monitor creates a health event for a local availability issue.
         */
        availabilityLocalHealthEventsConfig?: outputs.internetmonitor.MonitorLocalHealthEventsConfig;
        /**
         * The health event threshold percentage set for availability scores. When the overall availability score is at or below this percentage, Internet Monitor creates a health event.
         */
        availabilityScoreThreshold?: number;
        /**
         * The configuration that determines the threshold and other conditions for when Internet Monitor creates a health event for a local performance issue.
         */
        performanceLocalHealthEventsConfig?: outputs.internetmonitor.MonitorLocalHealthEventsConfig;
        /**
         * The health event threshold percentage set for performance scores. When the overall performance score is at or below this percentage, Internet Monitor creates a health event.
         */
        performanceScoreThreshold?: number;
    }

    export interface MonitorInternetMeasurementsLogDelivery {
        /**
         * The configuration for publishing Amazon CloudWatch Internet Monitor internet measurements to Amazon S3.
         */
        s3Config?: outputs.internetmonitor.MonitorS3Config;
    }

    export interface MonitorLocalHealthEventsConfig {
        /**
         * The health event threshold percentage set for a local health score.
         */
        healthScoreThreshold?: number;
        /**
         * The minimum percentage of overall traffic for an application that must be impacted by an issue before Internet Monitor creates an event when a threshold is crossed for a local health score.
         *
         * If you don't set a minimum traffic impact threshold, the default value is 0.01%.
         */
        minTrafficImpact?: number;
        /**
         * The status of whether Internet Monitor creates a health event based on a threshold percentage set for a local health score. The status can be `ENABLED` or `DISABLED` .
         */
        status?: enums.internetmonitor.MonitorLocalHealthEventsConfigStatus;
    }

    export interface MonitorS3Config {
        /**
         * The Amazon S3 bucket name for internet measurements publishing.
         */
        bucketName?: string;
        /**
         * An optional Amazon S3 bucket prefix for internet measurements publishing.
         */
        bucketPrefix?: string;
        /**
         * The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket. The delivery status is `ENABLED` if you choose to deliver internet measurements to an S3 bucket, and `DISABLED` otherwise.
         */
        logDeliveryStatus?: enums.internetmonitor.MonitorS3ConfigLogDeliveryStatus;
    }

}

export namespace iot {
    /**
     * The criteria that determine when and how a job abort takes place.
     */
    export interface AbortConfigProperties {
        /**
         * The list of criteria that determine when and how to abort the job.
         */
        criteriaList: outputs.iot.JobTemplateAbortCriteria[];
    }

    /**
     * The configuration for a specific audit check.
     */
    export interface AccountAuditConfigurationAuditCheckConfiguration {
        /**
         * True if the check is enabled.
         */
        enabled?: boolean;
    }

    /**
     * Specifies which audit checks are enabled and disabled for this account.
     */
    export interface AccountAuditConfigurationAuditCheckConfigurations {
        /**
         * Checks the permissiveness of an authenticated Amazon Cognito identity pool role. For this check, AWS IoT Device Defender audits all Amazon Cognito identity pools that have been used to connect to the AWS IoT message broker during the 31 days before the audit is performed.
         */
        authenticatedCognitoRoleOverlyPermissiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if a CA certificate is expiring. This check applies to CA certificates expiring within 30 days or that have expired.
         */
        caCertificateExpiringCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks the quality of the CA certificate key. The quality checks if the key is in a valid format, not expired, and if the key meets a minimum required size. This check applies to CA certificates that are `ACTIVE` or `PENDING_TRANSFER` .
         */
        caCertificateKeyQualityCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if multiple devices connect using the same client ID.
         */
        conflictingClientIdsCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if a device certificate is expiring. This check applies to device certificates expiring within 30 days or that have expired.
         */
        deviceCertificateExpiringCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks the quality of the device certificate key. The quality checks if the key is in a valid format, not expired, signed by a registered certificate authority, and if the key meets a minimum required size.
         */
        deviceCertificateKeyQualityCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if multiple concurrent connections use the same X.509 certificate to authenticate with AWS IoT .
         */
        deviceCertificateSharedCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if device certificates are still active despite being revoked by an intermediate CA.
         */
        intermediateCaRevokedForActiveDeviceCertificatesCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if an AWS IoT policy is potentially misconfigured. Misconfigured policies, including overly permissive policies, can cause security incidents like allowing devices access to unintended resources. This check is a warning for you to make sure that only intended actions are allowed before updating the policy.
         */
        ioTPolicyPotentialMisConfigurationCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks the permissiveness of a policy attached to an authenticated Amazon Cognito identity pool role.
         */
        iotPolicyOverlyPermissiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if a role alias has access to services that haven't been used for the AWS IoT device in the last year.
         */
        iotRoleAliasAllowsAccessToUnusedServicesCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if the temporary credentials provided by AWS IoT role aliases are overly permissive.
         */
        iotRoleAliasOverlyPermissiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if AWS IoT logs are disabled.
         */
        loggingDisabledCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if a revoked CA certificate is still active.
         */
        revokedCaCertificateStillActiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if a revoked device certificate is still active.
         */
        revokedDeviceCertificateStillActiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
        /**
         * Checks if policy attached to an unauthenticated Amazon Cognito identity pool role is too permissive.
         */
        unauthenticatedCognitoRoleOverlyPermissiveCheck?: outputs.iot.AccountAuditConfigurationAuditCheckConfiguration;
    }

    export interface AccountAuditConfigurationAuditNotificationTarget {
        /**
         * True if notifications to the target are enabled.
         */
        enabled?: boolean;
        /**
         * The ARN of the role that grants permission to send notifications to the target.
         */
        roleArn?: string;
        /**
         * The ARN of the target (SNS topic) to which audit notifications are sent.
         */
        targetArn?: string;
    }

    /**
     * Information about the targets to which audit notifications are sent.
     */
    export interface AccountAuditConfigurationAuditNotificationTargetConfigurations {
        /**
         * The `Sns` notification target.
         */
        sns?: outputs.iot.AccountAuditConfigurationAuditNotificationTarget;
    }

    /**
     * The properties of the billing group.
     */
    export interface BillingGroupPropertiesProperties {
        /**
         * The description of the billing group.
         */
        billingGroupDescription?: string;
    }

    export interface CaCertificateRegistrationConfig {
        /**
         * The ARN of the role.
         */
        roleArn?: string;
        /**
         * The template body.
         */
        templateBody?: string;
        /**
         * The name of the provisioning template.
         */
        templateName?: string;
    }

    export interface DomainConfigurationAuthorizerConfig {
        /**
         * A Boolean that specifies whether the domain configuration's authorization service can be overridden.
         */
        allowAuthorizerOverride?: boolean;
        /**
         * The name of the authorization service for a domain configuration.
         */
        defaultAuthorizerName?: string;
    }

    export interface DomainConfigurationServerCertificateConfig {
        /**
         * A Boolean value that indicates whether Online Certificate Status Protocol (OCSP) server certificate check is enabled or not. For more information, see [Configurable endpoints](https://docs.aws.amazon.com//iot/latest/developerguide/iot-custom-endpoints-configurable.html) from the AWS IoT Core Developer Guide.
         */
        enableOcspCheck?: boolean;
    }

    export interface DomainConfigurationServerCertificateSummary {
        /**
         * The ARN of the server certificate.
         */
        serverCertificateArn?: string;
        /**
         * The status of the server certificate.
         */
        serverCertificateStatus?: enums.iot.DomainConfigurationServerCertificateSummaryServerCertificateStatus;
        /**
         * Details that explain the status of the server certificate.
         */
        serverCertificateStatusDetail?: string;
    }

    export interface DomainConfigurationTlsConfig {
        /**
         * The security policy for a domain configuration. For more information, see [Security policies](https://docs.aws.amazon.com/iot/latest/developerguide/transport-security.html#tls-policy-table) in the *AWS IoT Core developer guide* .
         */
        securityPolicy?: string;
    }

    /**
     * Aggregation types supported by Fleet Indexing
     */
    export interface FleetMetricAggregationType {
        /**
         * Fleet Indexing aggregation type names such as Statistics, Percentiles and Cardinality
         */
        name: string;
        /**
         * Fleet Indexing aggregation type values
         */
        values: string[];
    }

    /**
     * Allows you to create the criteria to retry a job.
     */
    export interface JobExecutionsRetryConfigProperties {
        /**
         * The list of criteria that determines how many retries are allowed for each failure type for a job.
         */
        retryCriteriaList?: outputs.iot.JobTemplateRetryCriteria[];
    }

    /**
     * Allows you to create a staged rollout of a job.
     */
    export interface JobExecutionsRolloutConfigProperties {
        /**
         * The rate of increase for a job rollout. This parameter allows you to define an exponential rate for a job rollout.
         */
        exponentialRolloutRate?: outputs.iot.JobTemplateExponentialRolloutRate;
        /**
         * The maximum number of things that will be notified of a pending job, per minute. This parameter allows you to create a staged rollout.
         */
        maximumPerMinute?: number;
    }

    /**
     * The criteria that determine when and how a job abort takes place.
     */
    export interface JobTemplateAbortCriteria {
        /**
         * The type of job action to take to initiate the job abort.
         */
        action: enums.iot.JobTemplateAction;
        /**
         * The type of job execution failures that can initiate a job abort.
         */
        failureType: enums.iot.JobTemplateFailureType;
        /**
         * The minimum number of things which must receive job execution notifications before the job can be aborted.
         */
        minNumberOfExecutedThings: number;
        /**
         * The minimum percentage of job execution failures that must occur to initiate the job abort.
         */
        thresholdPercentage: number;
    }

    /**
     * Allows you to create an exponential rate of rollout for a job.
     */
    export interface JobTemplateExponentialRolloutRate {
        /**
         * The minimum number of things that will be notified of a pending job, per minute at the start of job rollout. This parameter allows you to define the initial rate of rollout.
         */
        baseRatePerMinute: number;
        /**
         * The exponential factor to increase the rate of rollout for a job.
         */
        incrementFactor: number;
        /**
         * The criteria to initiate the increase in rate of rollout for a job.
         */
        rateIncreaseCriteria: outputs.iot.JobTemplateRateIncreaseCriteria;
    }

    /**
     * Specifies a start time and duration for a scheduled Job.
     */
    export interface JobTemplateMaintenanceWindow {
        /**
         * Displays the duration of the next maintenance window.
         */
        durationInMinutes?: number;
        /**
         * Displays the start time of the next maintenance window.
         */
        startTime?: string;
    }

    export interface JobTemplateRateIncreaseCriteria {
        /**
         * The threshold for number of notified things that will initiate the increase in rate of rollout.
         */
        numberOfNotifiedThings?: number;
        /**
         * The threshold for number of succeeded things that will initiate the increase in rate of rollout.
         */
        numberOfSucceededThings?: number;
    }

    /**
     * Specifies how many times a failure type should be retried.
     */
    export interface JobTemplateRetryCriteria {
        /**
         * The type of job execution failures that can initiate a job retry.
         */
        failureType?: enums.iot.JobTemplateJobRetryFailureType;
        /**
         * The number of retries allowed for a failure type for the job.
         */
        numberOfRetries?: number;
    }

    /**
     * A structure containing the mqtt topic for metrics export.
     */
    export interface MetricsExportConfigProperties {
        /**
         * The topic for metrics export.
         */
        mqttTopic: string;
        /**
         * The ARN of the role that grants permission to publish to mqtt topic.
         */
        roleArn: string;
    }

    /**
     * The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
     */
    export interface MitigationActionActionParams {
        /**
         * Specifies the group to which you want to add the devices.
         */
        addThingsToThingGroupParams?: outputs.iot.MitigationActionAddThingsToThingGroupParams;
        /**
         * Specifies the logging level and the role with permissions for logging. You cannot specify a logging level of `DISABLED` .
         */
        enableIoTLoggingParams?: outputs.iot.MitigationActionEnableIoTLoggingParams;
        /**
         * Specifies the topic to which the finding should be published.
         */
        publishFindingToSnsParams?: outputs.iot.MitigationActionPublishFindingToSnsParams;
        /**
         * Replaces the policy version with a default or blank policy. You specify the template name. Only a value of `BLANK_POLICY` is currently supported.
         */
        replaceDefaultPolicyVersionParams?: outputs.iot.MitigationActionReplaceDefaultPolicyVersionParams;
        /**
         * Specifies the new state for the CA certificate. Only a value of `DEACTIVATE` is currently supported.
         */
        updateCaCertificateParams?: outputs.iot.MitigationActionUpdateCaCertificateParams;
        /**
         * Specifies the new state for a device certificate. Only a value of `DEACTIVATE` is currently supported.
         */
        updateDeviceCertificateParams?: outputs.iot.MitigationActionUpdateDeviceCertificateParams;
    }

    /**
     * Parameters to define a mitigation action that moves devices associated with a certificate to one or more specified thing groups, typically for quarantine.
     */
    export interface MitigationActionAddThingsToThingGroupParams {
        /**
         * Specifies if this mitigation action can move the things that triggered the mitigation action out of one or more dynamic thing groups.
         */
        overrideDynamicGroups?: boolean;
        /**
         * The list of groups to which you want to add the things that triggered the mitigation action.
         */
        thingGroupNames: string[];
    }

    /**
     * Parameters to define a mitigation action that enables AWS IoT logging at a specified level of detail.
     */
    export interface MitigationActionEnableIoTLoggingParams {
        /**
         *  Specifies which types of information are logged.
         */
        logLevel: enums.iot.MitigationActionEnableIoTLoggingParamsLogLevel;
        /**
         *  The ARN of the IAM role used for logging.
         */
        roleArnForLogging: string;
    }

    /**
     * Parameters, to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.
     */
    export interface MitigationActionPublishFindingToSnsParams {
        /**
         * The ARN of the topic to which you want to publish the findings.
         */
        topicArn: string;
    }

    /**
     * Parameters to define a mitigation action that adds a blank policy to restrict permissions.
     */
    export interface MitigationActionReplaceDefaultPolicyVersionParams {
        /**
         * The name of the template to be applied. The only supported value is `BLANK_POLICY` .
         */
        templateName: enums.iot.MitigationActionReplaceDefaultPolicyVersionParamsTemplateName;
    }

    /**
     * Parameters to define a mitigation action that changes the state of the CA certificate to inactive.
     */
    export interface MitigationActionUpdateCaCertificateParams {
        /**
         * The action that you want to apply to the CA certificate. The only supported value is `DEACTIVATE` .
         */
        action: enums.iot.MitigationActionUpdateCaCertificateParamsAction;
    }

    /**
     * Parameters to define a mitigation action that changes the state of the device certificate to inactive.
     */
    export interface MitigationActionUpdateDeviceCertificateParams {
        /**
         * The action that you want to apply to the device certificate. The only supported value is `DEACTIVATE` .
         */
        action: enums.iot.MitigationActionUpdateDeviceCertificateParamsAction;
    }

    /**
     * Configuration for pre-signed S3 URLs.
     */
    export interface PresignedUrlConfigProperties {
        /**
         * How long (in seconds) pre-signed URLs are valid. Valid values are 60 - 3600, the default value is 3600 seconds. Pre-signed URLs are generated when Jobs receives an MQTT request for the job document.
         */
        expiresInSec?: number;
        /**
         * The ARN of an IAM role that grants grants permission to download files from the S3 bucket where the job data/updates are stored. The role must also grant permission for IoT to download the files.
         *
         * > For information about addressing the confused deputy problem, see [cross-service confused deputy prevention](https://docs.aws.amazon.com/iot/latest/developerguide/cross-service-confused-deputy-prevention.html) in the *AWS IoT Core developer guide* .
         */
        roleArn: string;
    }

    export interface ProvisioningTemplateProvisioningHook {
        /**
         * The payload that was sent to the target function. The valid payload is `"2020-04-01"` .
         */
        payloadVersion?: string;
        /**
         * The ARN of the target function.
         */
        targetArn?: string;
    }

    /**
     * A structure containing the alert target ARN and the role ARN.
     */
    export interface SecurityProfileAlertTarget {
        /**
         * The ARN of the notification target to which alerts are sent.
         */
        alertTargetArn: string;
        /**
         * The ARN of the role that grants permission to send alerts to the notification target.
         */
        roleArn: string;
    }

    /**
     * A security profile behavior.
     */
    export interface SecurityProfileBehavior {
        /**
         * The criteria that determine if a device is behaving normally in regard to the `metric` .
         *
         * > In the AWS IoT console, you can choose to be sent an alert through Amazon SNS when AWS IoT Device Defender detects that a device is behaving anomalously.
         */
        criteria?: outputs.iot.SecurityProfileBehaviorCriteria;
        /**
         * Value indicates exporting metrics related to the behavior when it is true.
         */
        exportMetric?: boolean;
        /**
         * What is measured by the behavior.
         */
        metric?: string;
        /**
         * The dimension of the metric.
         */
        metricDimension?: outputs.iot.SecurityProfileMetricDimension;
        /**
         * The name for the behavior.
         */
        name: string;
        /**
         * Manage Detect alarm SNS notifications by setting behavior notification to on or suppressed. Detect will continue to performing device behavior evaluations. However, suppressed alarms wouldn't be forwarded for SNS notification.
         */
        suppressAlerts?: boolean;
    }

    /**
     * The criteria by which the behavior is determined to be normal.
     */
    export interface SecurityProfileBehaviorCriteria {
        /**
         * The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold).
         */
        comparisonOperator?: enums.iot.SecurityProfileBehaviorCriteriaComparisonOperator;
        /**
         * If a device is in violation of the behavior for the specified number of consecutive datapoints, an alarm occurs. If not specified, the default is 1.
         */
        consecutiveDatapointsToAlarm?: number;
        /**
         * If an alarm has occurred and the offending device is no longer in violation of the behavior for the specified number of consecutive datapoints, the alarm is cleared. If not specified, the default is 1.
         */
        consecutiveDatapointsToClear?: number;
        /**
         * Use this to specify the time duration over which the behavior is evaluated.
         */
        durationSeconds?: number;
        /**
         * The confidence level of the detection model.
         */
        mlDetectionConfig?: outputs.iot.SecurityProfileMachineLearningDetectionConfig;
        /**
         * A statistical ranking (percentile)that indicates a threshold value by which a behavior is determined to be in compliance or in violation of the behavior.
         */
        statisticalThreshold?: outputs.iot.SecurityProfileStatisticalThreshold;
        /**
         * The value to be compared with the `metric` .
         */
        value?: outputs.iot.SecurityProfileMetricValue;
    }

    /**
     * The configuration of an ML Detect Security Profile.
     */
    export interface SecurityProfileMachineLearningDetectionConfig {
        /**
         * The sensitivity of anomalous behavior evaluation. Can be Low, Medium, or High.
         */
        confidenceLevel?: enums.iot.SecurityProfileMachineLearningDetectionConfigConfidenceLevel;
    }

    /**
     * The dimension of a metric.
     */
    export interface SecurityProfileMetricDimension {
        /**
         * A unique identifier for the dimension.
         */
        dimensionName: string;
        /**
         * Defines how the dimensionValues of a dimension are interpreted.
         */
        operator?: enums.iot.SecurityProfileMetricDimensionOperator;
    }

    /**
     * The metric you want to retain. Dimensions are optional.
     */
    export interface SecurityProfileMetricToRetain {
        /**
         * The value indicates exporting metrics related to the `MetricToRetain` when it's true.
         */
        exportMetric?: boolean;
        /**
         * What is measured by the behavior.
         */
        metric: string;
        /**
         * The dimension of the metric.
         */
        metricDimension?: outputs.iot.SecurityProfileMetricDimension;
    }

    /**
     * The value to be compared with the metric.
     */
    export interface SecurityProfileMetricValue {
        /**
         * If the ComparisonOperator calls for a set of CIDRs, use this to specify that set to be compared with the metric.
         */
        cidrs?: string[];
        /**
         * If the ComparisonOperator calls for a numeric value, use this to specify that (integer) numeric value to be compared with the metric.
         */
        count?: string;
        /**
         * The numeral value of a metric.
         */
        number?: number;
        /**
         * The numeral values of a metric.
         */
        numbers?: number[];
        /**
         * If the ComparisonOperator calls for a set of ports, use this to specify that set to be compared with the metric.
         */
        ports?: number[];
        /**
         * The string values of a metric.
         */
        strings?: string[];
    }

    /**
     * A statistical ranking (percentile) which indicates a threshold value by which a behavior is determined to be in compliance or in violation of the behavior.
     */
    export interface SecurityProfileStatisticalThreshold {
        /**
         * The percentile which resolves to a threshold value by which compliance with a behavior is determined
         */
        statistic?: enums.iot.SecurityProfileStatisticalThresholdStatistic;
    }

    export interface ThingAttributePayload {
        /**
         * A JSON string containing up to three key-value pair in JSON format. For example:
         *
         * `{\"attributes\":{\"string1\":\"string2\"}}`
         */
        attributes?: {[key: string]: string};
    }

    export interface ThingGroupAttributePayload {
        /**
         * A JSON string containing up to three key-value pair in JSON format. For example:
         *
         * `{\"attributes\":{\"string1\":\"string2\"}}`
         */
        attributes?: {[key: string]: string};
    }

    /**
     * Thing group properties.
     */
    export interface ThingGroupPropertiesProperties {
        /**
         * The thing group attributes in JSON format.
         */
        attributePayload?: outputs.iot.ThingGroupAttributePayload;
        /**
         * The thing group description.
         */
        thingGroupDescription?: string;
    }

    /**
     * The thing type properties for the thing type to create. It contains information about the new thing type including a description, and a list of searchable thing attribute names. `ThingTypeProperties` can't be updated after the initial creation of the `ThingType` .
     */
    export interface ThingTypePropertiesProperties {
        /**
         * A list of searchable thing attribute names.
         */
        searchableAttributes?: string[];
        /**
         * The description of the thing type.
         */
        thingTypeDescription?: string;
    }

    /**
     * Specifies the amount of time each device has to finish its execution of the job.
     */
    export interface TimeoutConfigProperties {
        /**
         * Specifies the amount of time, in minutes, this device has to finish execution of this job. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress timer can't be updated and will apply to all job executions for the job. Whenever a job execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and switch to the terminal `TIMED_OUT` status.
         */
        inProgressTimeoutInMinutes: number;
    }

    export interface TopicRuleAction {
        /**
         * Change the state of a CloudWatch alarm.
         */
        cloudwatchAlarm?: outputs.iot.TopicRuleCloudwatchAlarmAction;
        /**
         * Sends data to CloudWatch.
         */
        cloudwatchLogs?: outputs.iot.TopicRuleCloudwatchLogsAction;
        /**
         * Capture a CloudWatch metric.
         */
        cloudwatchMetric?: outputs.iot.TopicRuleCloudwatchMetricAction;
        /**
         * Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.
         */
        dynamoDBv2?: outputs.iot.TopicRuleDynamoDBv2Action;
        /**
         * Write to a DynamoDB table.
         */
        dynamoDb?: outputs.iot.TopicRuleDynamoDbAction;
        /**
         * Write data to an Amazon OpenSearch Service domain.
         *
         * > The `Elasticsearch` action can only be used by existing rule actions. To create a new rule action or to update an existing rule action, use the `OpenSearch` rule action instead. For more information, see [OpenSearchAction](https://docs.aws.amazon.com//iot/latest/apireference/API_OpenSearchAction.html) .
         */
        elasticsearch?: outputs.iot.TopicRuleElasticsearchAction;
        /**
         * Write to an Amazon Kinesis Firehose stream.
         */
        firehose?: outputs.iot.TopicRuleFirehoseAction;
        /**
         * Send data to an HTTPS endpoint.
         */
        http?: outputs.iot.TopicRuleHttpAction;
        /**
         * Sends message data to an AWS IoT Analytics channel.
         */
        iotAnalytics?: outputs.iot.TopicRuleIotAnalyticsAction;
        /**
         * Sends an input to an AWS IoT Events detector.
         */
        iotEvents?: outputs.iot.TopicRuleIotEventsAction;
        /**
         * Sends data from the MQTT message that triggered the rule to AWS IoT SiteWise asset properties.
         */
        iotSiteWise?: outputs.iot.TopicRuleIotSiteWiseAction;
        /**
         * Send messages to an Amazon Managed Streaming for Apache Kafka (Amazon MSK) or self-managed Apache Kafka cluster.
         */
        kafka?: outputs.iot.TopicRuleKafkaAction;
        /**
         * Write data to an Amazon Kinesis stream.
         */
        kinesis?: outputs.iot.TopicRuleKinesisAction;
        /**
         * Invoke a Lambda function.
         */
        lambda?: outputs.iot.TopicRuleLambdaAction;
        /**
         * Sends device location data to [Amazon Location Service](https://docs.aws.amazon.com//location/latest/developerguide/welcome.html) .
         */
        location?: outputs.iot.TopicRuleLocationAction;
        /**
         * Write data to an Amazon OpenSearch Service domain.
         */
        openSearch?: outputs.iot.TopicRuleOpenSearchAction;
        /**
         * Publish to another MQTT topic.
         */
        republish?: outputs.iot.TopicRuleRepublishAction;
        /**
         * Write to an Amazon S3 bucket.
         */
        s3?: outputs.iot.TopicRuleS3Action;
        /**
         * Publish to an Amazon SNS topic.
         */
        sns?: outputs.iot.TopicRuleSnsAction;
        /**
         * Publish to an Amazon SQS queue.
         */
        sqs?: outputs.iot.TopicRuleSqsAction;
        /**
         * Starts execution of a Step Functions state machine.
         */
        stepFunctions?: outputs.iot.TopicRuleStepFunctionsAction;
        /**
         * Writes attributes from an MQTT message.
         */
        timestream?: outputs.iot.TopicRuleTimestreamAction;
    }

    export interface TopicRuleAssetPropertyTimestamp {
        /**
         * Optional. A string that contains the nanosecond time offset. Accepts substitution templates.
         */
        offsetInNanos?: string;
        /**
         * A string that contains the time in seconds since epoch. Accepts substitution templates.
         */
        timeInSeconds: string;
    }

    export interface TopicRuleAssetPropertyValue {
        /**
         * Optional. A string that describes the quality of the value. Accepts substitution templates. Must be `GOOD` , `BAD` , or `UNCERTAIN` .
         */
        quality?: string;
        /**
         * The asset property value timestamp.
         */
        timestamp: outputs.iot.TopicRuleAssetPropertyTimestamp;
        /**
         * The value of the asset property.
         */
        value: outputs.iot.TopicRuleAssetPropertyVariant;
    }

    export interface TopicRuleAssetPropertyVariant {
        /**
         * Optional. A string that contains the boolean value ( `true` or `false` ) of the value entry. Accepts substitution templates.
         */
        booleanValue?: string;
        /**
         * Optional. A string that contains the double value of the value entry. Accepts substitution templates.
         */
        doubleValue?: string;
        /**
         * Optional. A string that contains the integer value of the value entry. Accepts substitution templates.
         */
        integerValue?: string;
        /**
         * Optional. The string value of the value entry. Accepts substitution templates.
         */
        stringValue?: string;
    }

    export interface TopicRuleCloudwatchAlarmAction {
        /**
         * The CloudWatch alarm name.
         */
        alarmName: string;
        /**
         * The IAM role that allows access to the CloudWatch alarm.
         */
        roleArn: string;
        /**
         * The reason for the alarm change.
         */
        stateReason: string;
        /**
         * The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
         */
        stateValue: string;
    }

    export interface TopicRuleCloudwatchLogsAction {
        /**
         * Indicates whether batches of log records will be extracted and uploaded into CloudWatch.
         */
        batchMode?: boolean;
        /**
         * The CloudWatch log name.
         */
        logGroupName: string;
        /**
         * The IAM role that allows access to the CloudWatch log.
         */
        roleArn: string;
    }

    export interface TopicRuleCloudwatchMetricAction {
        /**
         * The CloudWatch metric name.
         */
        metricName: string;
        /**
         * The CloudWatch metric namespace name.
         */
        metricNamespace: string;
        /**
         * An optional [Unix timestamp](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp) .
         */
        metricTimestamp?: string;
        /**
         * The [metric unit](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit) supported by CloudWatch.
         */
        metricUnit: string;
        /**
         * The CloudWatch metric value.
         */
        metricValue: string;
        /**
         * The IAM role that allows access to the CloudWatch metric.
         */
        roleArn: string;
    }

    export interface TopicRuleDestinationHttpUrlDestinationSummary {
        /**
         * The URL used to confirm the HTTP topic rule destination URL.
         */
        confirmationUrl?: string;
    }

    export interface TopicRuleDestinationVpcDestinationProperties {
        /**
         * The ARN of a role that has permission to create and attach to elastic network interfaces (ENIs).
         */
        roleArn?: string;
        /**
         * The security groups of the VPC destination.
         */
        securityGroups?: string[];
        /**
         * The subnet IDs of the VPC destination.
         */
        subnetIds?: string[];
        /**
         * The ID of the VPC.
         */
        vpcId?: string;
    }

    export interface TopicRuleDynamoDBv2Action {
        /**
         * Specifies the DynamoDB table to which the message data will be written. For example:
         *
         * `{ "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName": "my-table" } } }`
         *
         * Each attribute in the message payload will be written to a separate column in the DynamoDB database.
         */
        putItem?: outputs.iot.TopicRulePutItemInput;
        /**
         * The ARN of the IAM role that grants access to the DynamoDB table.
         */
        roleArn?: string;
    }

    export interface TopicRuleDynamoDbAction {
        /**
         * The hash key name.
         */
        hashKeyField: string;
        /**
         * The hash key type. Valid values are "STRING" or "NUMBER"
         */
        hashKeyType?: string;
        /**
         * The hash key value.
         */
        hashKeyValue: string;
        /**
         * The action payload. This name can be customized.
         */
        payloadField?: string;
        /**
         * The range key name.
         */
        rangeKeyField?: string;
        /**
         * The range key type. Valid values are "STRING" or "NUMBER"
         */
        rangeKeyType?: string;
        /**
         * The range key value.
         */
        rangeKeyValue?: string;
        /**
         * The ARN of the IAM role that grants access to the DynamoDB table.
         */
        roleArn: string;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    export interface TopicRuleElasticsearchAction {
        /**
         * The endpoint of your OpenSearch domain.
         */
        endpoint: string;
        /**
         * The unique identifier for the document you are storing.
         */
        id: string;
        /**
         * The index where you want to store your data.
         */
        index: string;
        /**
         * The IAM role ARN that has access to OpenSearch.
         */
        roleArn: string;
        /**
         * The type of document you are storing.
         */
        type: string;
    }

    export interface TopicRuleFirehoseAction {
        /**
         * Whether to deliver the Kinesis Data Firehose stream as a batch by using [`PutRecordBatch`](https://docs.aws.amazon.com/firehose/latest/APIReference/API_PutRecordBatch.html) . The default value is `false` .
         *
         * When `batchMode` is `true` and the rule's SQL statement evaluates to an Array, each Array element forms one record in the [`PutRecordBatch`](https://docs.aws.amazon.com/firehose/latest/APIReference/API_PutRecordBatch.html) request. The resulting array can't have more than 500 records.
         */
        batchMode?: boolean;
        /**
         * The delivery stream name.
         */
        deliveryStreamName: string;
        /**
         * The IAM role that grants access to the Amazon Kinesis Firehose stream.
         */
        roleArn: string;
        /**
         * A character separator that will be used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
         */
        separator?: string;
    }

    export interface TopicRuleHttpAction {
        /**
         * The authentication method to use when sending data to an HTTPS endpoint.
         */
        auth?: outputs.iot.TopicRuleHttpAuthorization;
        /**
         * The URL to which AWS IoT sends a confirmation message. The value of the confirmation URL must be a prefix of the endpoint URL. If you do not specify a confirmation URL AWS IoT uses the endpoint URL as the confirmation URL. If you use substitution templates in the confirmationUrl, you must create and enable topic rule destinations that match each possible value of the substitution template before traffic is allowed to your endpoint URL.
         */
        confirmationUrl?: string;
        /**
         * The HTTP headers to send with the message data.
         */
        headers?: outputs.iot.TopicRuleHttpActionHeader[];
        /**
         * The endpoint URL. If substitution templates are used in the URL, you must also specify a `confirmationUrl` . If this is a new destination, a new `TopicRuleDestination` is created if possible.
         */
        url: string;
    }

    export interface TopicRuleHttpActionHeader {
        /**
         * The HTTP header key.
         */
        key: string;
        /**
         * The HTTP header value. Substitution templates are supported.
         */
        value: string;
    }

    export interface TopicRuleHttpAuthorization {
        /**
         * Use Sig V4 authorization. For more information, see [Signature Version 4 Signing Process](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html) .
         */
        sigv4?: outputs.iot.TopicRuleSigV4Authorization;
    }

    export interface TopicRuleIotAnalyticsAction {
        /**
         * Whether to process the action as a batch. The default value is `false` .
         *
         * When `batchMode` is `true` and the rule SQL statement evaluates to an Array, each Array element is delivered as a separate message when passed by [`BatchPutMessage`](https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_BatchPutMessage.html) The resulting array can't have more than 100 messages.
         */
        batchMode?: boolean;
        /**
         * The name of the IoT Analytics channel to which message data will be sent.
         */
        channelName: string;
        /**
         * The ARN of the role which has a policy that grants IoT Analytics permission to send message data via IoT Analytics (iotanalytics:BatchPutMessage).
         */
        roleArn: string;
    }

    export interface TopicRuleIotEventsAction {
        /**
         * Whether to process the event actions as a batch. The default value is `false` .
         *
         * When `batchMode` is `true` , you can't specify a `messageId` .
         *
         * When `batchMode` is `true` and the rule SQL statement evaluates to an Array, each Array element is treated as a separate message when Events by calling [`BatchPutMessage`](https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_BatchPutMessage.html) . The resulting array can't have more than 10 messages.
         */
        batchMode?: boolean;
        /**
         * The name of the AWS IoT Events input.
         */
        inputName: string;
        /**
         * The ID of the message. The default `messageId` is a new UUID value.
         *
         * When `batchMode` is `true` , you can't specify a `messageId` --a new UUID value will be assigned.
         *
         * Assign a value to this property to ensure that only one input (message) with a given `messageId` will be processed by an AWS IoT Events detector.
         */
        messageId?: string;
        /**
         * The ARN of the role that grants AWS IoT permission to send an input to an AWS IoT Events detector. ("Action":"iotevents:BatchPutMessage").
         */
        roleArn: string;
    }

    export interface TopicRuleIotSiteWiseAction {
        /**
         * A list of asset property value entries.
         */
        putAssetPropertyValueEntries: outputs.iot.TopicRulePutAssetPropertyValueEntry[];
        /**
         * The ARN of the role that grants AWS IoT permission to send an asset property value to AWS IoT SiteWise. ( `"Action": "iotsitewise:BatchPutAssetPropertyValue"` ). The trust policy can restrict access to specific asset hierarchy paths.
         */
        roleArn: string;
    }

    export interface TopicRuleKafkaAction {
        /**
         * Properties of the Apache Kafka producer client.
         */
        clientProperties: {[key: string]: string};
        /**
         * The ARN of Kafka action's VPC `TopicRuleDestination` .
         */
        destinationArn: string;
        /**
         * The list of Kafka headers that you specify.
         */
        headers?: outputs.iot.TopicRuleKafkaActionHeader[];
        /**
         * The Kafka message key.
         */
        key?: string;
        /**
         * The Kafka message partition.
         */
        partition?: string;
        /**
         * The Kafka topic for messages to be sent to the Kafka broker.
         */
        topic: string;
    }

    export interface TopicRuleKafkaActionHeader {
        /**
         * The key of the Kafka header.
         */
        key: string;
        /**
         * The value of the Kafka header.
         */
        value: string;
    }

    export interface TopicRuleKinesisAction {
        /**
         * The partition key.
         */
        partitionKey?: string;
        /**
         * The ARN of the IAM role that grants access to the Amazon Kinesis stream.
         */
        roleArn: string;
        /**
         * The name of the Amazon Kinesis stream.
         */
        streamName: string;
    }

    export interface TopicRuleLambdaAction {
        /**
         * The ARN of the Lambda function.
         */
        functionArn?: string;
    }

    export interface TopicRuleLocationAction {
        /**
         * The unique ID of the device providing the location data.
         */
        deviceId: string;
        /**
         * A string that evaluates to a double value that represents the latitude of the device's location.
         */
        latitude: string;
        /**
         * A string that evaluates to a double value that represents the longitude of the device's location.
         */
        longitude: string;
        /**
         * The IAM role that grants permission to write to the Amazon Location resource.
         */
        roleArn: string;
        /**
         * The time that the location data was sampled. The default value is the time the MQTT message was processed.
         */
        timestamp?: outputs.iot.TopicRuleTimestamp;
        /**
         * The name of the tracker resource in Amazon Location in which the location is updated.
         */
        trackerName: string;
    }

    export interface TopicRuleOpenSearchAction {
        /**
         * The endpoint of your OpenSearch domain.
         */
        endpoint: string;
        /**
         * The unique identifier for the document you are storing.
         */
        id: string;
        /**
         * The OpenSearch index where you want to store your data.
         */
        index: string;
        /**
         * The IAM role ARN that has access to OpenSearch.
         */
        roleArn: string;
        /**
         * The type of document you are storing.
         */
        type: string;
    }

    export interface TopicRulePayload {
        /**
         * The actions associated with the rule.
         */
        actions: outputs.iot.TopicRuleAction[];
        /**
         * The version of the SQL rules engine to use when evaluating the rule.
         *
         * The default value is 2015-10-08.
         */
        awsIotSqlVersion?: string;
        /**
         * The description of the rule.
         */
        description?: string;
        /**
         * The action to take when an error occurs.
         */
        errorAction?: outputs.iot.TopicRuleAction;
        /**
         * Specifies whether the rule is disabled.
         */
        ruleDisabled?: boolean;
        /**
         * The SQL statement used to query the topic. For more information, see [AWS IoT SQL Reference](https://docs.aws.amazon.com/iot/latest/developerguide/iot-sql-reference.html) in the *AWS IoT Developer Guide* .
         */
        sql: string;
    }

    export interface TopicRulePutAssetPropertyValueEntry {
        /**
         * The ID of the AWS IoT SiteWise asset. You must specify either a `propertyAlias` or both an `aliasId` and a `propertyId` . Accepts substitution templates.
         */
        assetId?: string;
        /**
         * Optional. A unique identifier for this entry that you can define to better track which message caused an error in case of failure. Accepts substitution templates. Defaults to a new UUID.
         */
        entryId?: string;
        /**
         * The name of the property alias associated with your asset property. You must specify either a `propertyAlias` or both an `aliasId` and a `propertyId` . Accepts substitution templates.
         */
        propertyAlias?: string;
        /**
         * The ID of the asset's property. You must specify either a `propertyAlias` or both an `aliasId` and a `propertyId` . Accepts substitution templates.
         */
        propertyId?: string;
        /**
         * A list of property values to insert that each contain timestamp, quality, and value (TQV) information.
         */
        propertyValues: outputs.iot.TopicRuleAssetPropertyValue[];
    }

    export interface TopicRulePutItemInput {
        /**
         * The table where the message data will be written.
         */
        tableName: string;
    }

    export interface TopicRuleRepublishAction {
        /**
         * MQTT Version 5.0 headers information. For more information, see [MQTT](https://docs.aws.amazon.com//iot/latest/developerguide/mqtt.html) in the IoT Core Developer Guide.
         */
        headers?: outputs.iot.TopicRuleRepublishActionHeaders;
        /**
         * The Quality of Service (QoS) level to use when republishing messages. The default value is 0.
         */
        qos?: number;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
        /**
         * The name of the MQTT topic.
         */
        topic: string;
    }

    export interface TopicRuleRepublishActionHeaders {
        /**
         * A UTF-8 encoded string that describes the content of the publishing message.
         *
         * For more information, see [Content Type](https://docs.aws.amazon.com/https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901118) in the MQTT Version 5.0 specification.
         *
         * Supports [substitution templates](https://docs.aws.amazon.com//iot/latest/developerguide/iot-substitution-templates.html) .
         */
        contentType?: string;
        /**
         * The base64-encoded binary data used by the sender of the request message to identify which request the response message is for.
         *
         * For more information, see [Correlation Data](https://docs.aws.amazon.com/https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901115) in the MQTT Version 5.0 specification.
         *
         * Supports [substitution templates](https://docs.aws.amazon.com//iot/latest/developerguide/iot-substitution-templates.html) .
         *
         * > This binary data must be base64-encoded.
         */
        correlationData?: string;
        /**
         * A user-defined integer value that represents the message expiry interval at the broker. If the messages haven't been sent to the subscribers within that interval, the message expires and is removed. The value of `messageExpiry` represents the number of seconds before it expires. For more information about the limits of `messageExpiry` , see [Message broker and protocol limits and quotas](https://docs.aws.amazon.com//general/latest/gr/iot-core.html#limits_iot) in the IoT Core Reference Guide.
         *
         * Supports [substitution templates](https://docs.aws.amazon.com//iot/latest/developerguide/iot-substitution-templates.html) .
         */
        messageExpiry?: string;
        /**
         * An `Enum` string value that indicates whether the payload is formatted as UTF-8.
         *
         * Valid values are `UNSPECIFIED_BYTES` and `UTF8_DATA` .
         *
         * For more information, see [Payload Format Indicator](https://docs.aws.amazon.com/https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901111) from the MQTT Version 5.0 specification.
         *
         * Supports [substitution templates](https://docs.aws.amazon.com//iot/latest/developerguide/iot-substitution-templates.html) .
         */
        payloadFormatIndicator?: string;
        /**
         * A UTF-8 encoded string that's used as the topic name for a response message. The response topic is used to describe the topic to which the receiver should publish as part of the request-response flow. The topic must not contain wildcard characters.
         *
         * For more information, see [Response Topic](https://docs.aws.amazon.com/https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901114) in the MQTT Version 5.0 specification.
         *
         * Supports [substitution templates](https://docs.aws.amazon.com//iot/latest/developerguide/iot-substitution-templates.html) .
         */
        responseTopic?: string;
        /**
         * An array of key-value pairs that you define in the MQTT5 header.
         */
        userProperties?: outputs.iot.TopicRuleUserProperty[];
    }

    export interface TopicRuleS3Action {
        /**
         * The Amazon S3 bucket.
         */
        bucketName: string;
        /**
         * The Amazon S3 canned ACL that controls access to the object identified by the object key. For more information, see [S3 canned ACLs](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) .
         */
        cannedAcl?: enums.iot.TopicRuleCannedAccessControlList;
        /**
         * The object key. For more information, see [Actions, resources, and condition keys for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/list_amazons3.html) .
         */
        key: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
    }

    export interface TopicRuleSigV4Authorization {
        /**
         * The ARN of the signing role.
         */
        roleArn: string;
        /**
         * The service name to use while signing with Sig V4.
         */
        serviceName: string;
        /**
         * The signing region.
         */
        signingRegion: string;
    }

    export interface TopicRuleSnsAction {
        /**
         * (Optional) The message format of the message to publish. Accepted values are "JSON" and "RAW". The default value of the attribute is "RAW". SNS uses this setting to determine if the payload should be parsed and relevant platform-specific bits of the payload should be extracted. For more information, see [Amazon SNS Message and JSON Formats](https://docs.aws.amazon.com/sns/latest/dg/json-formats.html) in the *Amazon Simple Notification Service Developer Guide* .
         */
        messageFormat?: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
        /**
         * The ARN of the SNS topic.
         */
        targetArn: string;
    }

    export interface TopicRuleSqsAction {
        /**
         * The URL of the Amazon SQS queue.
         */
        queueUrl: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
        /**
         * Specifies whether to use Base64 encoding.
         */
        useBase64?: boolean;
    }

    export interface TopicRuleStepFunctionsAction {
        /**
         * (Optional) A name will be given to the state machine execution consisting of this prefix followed by a UUID. Step Functions automatically creates a unique name for each state machine execution if one is not provided.
         */
        executionNamePrefix?: string;
        /**
         * The ARN of the role that grants IoT permission to start execution of a state machine ("Action":"states:StartExecution").
         */
        roleArn: string;
        /**
         * The name of the Step Functions state machine whose execution will be started.
         */
        stateMachineName: string;
    }

    export interface TopicRuleTimestamp {
        /**
         * The precision of the timestamp value that results from the expression described in `value` .
         */
        unit?: string;
        /**
         * An expression that returns a long epoch time value.
         */
        value: string;
    }

    export interface TopicRuleTimestreamAction {
        /**
         * The name of an Amazon Timestream database that has the table to write records into.
         */
        databaseName: string;
        /**
         * Metadata attributes of the time series that are written in each measure record.
         */
        dimensions: outputs.iot.TopicRuleTimestreamDimension[];
        /**
         * The Amazon Resource Name (ARN) of the role that grants AWS IoT permission to write to the Timestream database table.
         */
        roleArn: string;
        /**
         * The table where the message data will be written.
         */
        tableName: string;
        /**
         * The value to use for the entry's timestamp. If blank, the time that the entry was processed is used.
         */
        timestamp?: outputs.iot.TopicRuleTimestreamTimestamp;
    }

    export interface TopicRuleTimestreamDimension {
        name: string;
        value: string;
    }

    export interface TopicRuleTimestreamTimestamp {
        /**
         * The precision of the timestamp value that results from the expression described in `value` .
         */
        unit: string;
        /**
         * An expression that returns a long epoch time value.
         */
        value: string;
    }

    export interface TopicRuleUserProperty {
        key: string;
        value: string;
    }

}

export namespace iotanalytics {
    export interface ChannelCustomerManagedS3 {
        /**
         * The name of the S3 bucket in which channel data is stored.
         */
        bucket: string;
        /**
         * (Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).
         */
        keyPrefix?: string;
        /**
         * The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.
         */
        roleArn: string;
    }

    export interface ChannelRetentionPeriod {
        /**
         * The number of days that message data is kept. The `unlimited` parameter must be false.
         */
        numberOfDays?: number;
        /**
         * If true, message data is kept indefinitely.
         */
        unlimited?: boolean;
    }

    export interface ChannelServiceManagedS3 {
    }

    export interface ChannelStorage {
        /**
         * Used to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the `retentionPeriod` parameter is ignored. You can't change the choice of S3 storage after the data store is created.
         */
        customerManagedS3?: outputs.iotanalytics.ChannelCustomerManagedS3;
        /**
         * Used to store channel data in an S3 bucket managed by AWS IoT Analytics . You can't change the choice of S3 storage after the data store is created.
         */
        serviceManagedS3?: outputs.iotanalytics.ChannelServiceManagedS3;
    }

    export interface DatasetAction {
        /**
         * The name of the data set action by which data set contents are automatically created.
         */
        actionName: string;
        /**
         * Information which allows the system to run a containerized application in order to create the data set contents. The application must be in a Docker container along with any needed support libraries.
         */
        containerAction?: outputs.iotanalytics.DatasetContainerAction;
        /**
         * An "SqlQueryDatasetAction" object that uses an SQL query to automatically create data set contents.
         */
        queryAction?: outputs.iotanalytics.DatasetQueryAction;
    }

    export interface DatasetContainerAction {
        /**
         * The ARN of the role which gives permission to the system to access needed resources in order to run the "containerAction". This includes, at minimum, permission to retrieve the data set contents which are the input to the containerized application.
         */
        executionRoleArn: string;
        /**
         * The ARN of the Docker container stored in your account. The Docker container contains an application and needed support libraries and is used to generate data set contents.
         */
        image: string;
        /**
         * Configuration of the resource which executes the "containerAction".
         */
        resourceConfiguration: outputs.iotanalytics.DatasetResourceConfiguration;
        /**
         * The values of variables used within the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of "stringValue", "datasetContentVersionValue", or "outputFileUriValue".
         */
        variables?: outputs.iotanalytics.DatasetVariable[];
    }

    export interface DatasetContentDeliveryRule {
        /**
         * The destination to which dataset contents are delivered.
         */
        destination: outputs.iotanalytics.DatasetContentDeliveryRuleDestination;
        /**
         * The name of the dataset content delivery rules entry.
         */
        entryName?: string;
    }

    export interface DatasetContentDeliveryRuleDestination {
        /**
         * Configuration information for delivery of dataset contents to AWS IoT Events .
         */
        iotEventsDestinationConfiguration?: outputs.iotanalytics.DatasetIotEventsDestinationConfiguration;
        /**
         * Configuration information for delivery of dataset contents to Amazon S3.
         */
        s3DestinationConfiguration?: outputs.iotanalytics.DatasetS3DestinationConfiguration;
    }

    export interface DatasetContentVersionValue {
        /**
         * The name of the dataset whose latest contents are used as input to the notebook or application.
         */
        datasetName: string;
    }

    export interface DatasetDeltaTime {
        /**
         * The number of seconds of estimated in-flight lag time of message data. When you create dataset contents using message data from a specified timeframe, some message data might still be in flight when processing begins, and so do not arrive in time to be processed. Use this field to make allowances for the in flight time of your message data, so that data not processed from a previous timeframe is included with the next timeframe. Otherwise, missed message data would be excluded from processing during the next timeframe too, because its timestamp places it within the previous timeframe.
         */
        offsetSeconds: number;
        /**
         * An expression by which the time of the message data might be determined. This can be the name of a timestamp field or a SQL expression that is used to derive the time the message data was generated.
         */
        timeExpression: string;
    }

    export interface DatasetDeltaTimeSessionWindowConfiguration {
        /**
         * A time interval. You can use `timeoutInMinutes` so that AWS IoT Analytics can batch up late data notifications that have been generated since the last execution. AWS IoT Analytics sends one batch of notifications to Amazon CloudWatch Events at one time.
         *
         * For more information about how to write a timestamp expression, see [Date and Time Functions and Operators](https://docs.aws.amazon.com/https://prestodb.io/docs/current/functions/datetime.html) , in the *Presto 0.172 Documentation* .
         */
        timeoutInMinutes: number;
    }

    export interface DatasetFilter {
        /**
         * Used to limit data to that which has arrived since the last execution of the action.
         */
        deltaTime?: outputs.iotanalytics.DatasetDeltaTime;
    }

    export interface DatasetGlueConfiguration {
        /**
         * The name of the database in your AWS Glue Data Catalog in which the table is located. An AWS Glue Data Catalog database contains metadata tables.
         */
        databaseName: string;
        /**
         * The name of the table in your AWS Glue Data Catalog that is used to perform the ETL operations. An AWS Glue Data Catalog table contains partitioned data and descriptions of data sources and targets.
         */
        tableName: string;
    }

    export interface DatasetIotEventsDestinationConfiguration {
        /**
         * The name of the AWS IoT Events input to which dataset contents are delivered.
         */
        inputName: string;
        /**
         * The ARN of the role that grants AWS IoT Analytics permission to deliver dataset contents to an AWS IoT Events input.
         */
        roleArn: string;
    }

    export interface DatasetLateDataRule {
        /**
         * The information needed to configure the late data rule.
         */
        ruleConfiguration: outputs.iotanalytics.DatasetLateDataRuleConfiguration;
        /**
         * The name of the late data rule.
         */
        ruleName?: string;
    }

    export interface DatasetLateDataRuleConfiguration {
        /**
         * The information needed to configure a delta time session window.
         */
        deltaTimeSessionWindowConfiguration?: outputs.iotanalytics.DatasetDeltaTimeSessionWindowConfiguration;
    }

    export interface DatasetOutputFileUriValue {
        /**
         * The URI of the location where dataset contents are stored, usually the URI of a file in an S3 bucket.
         */
        fileName: string;
    }

    export interface DatasetQueryAction {
        /**
         * Pre-filters applied to message data.
         */
        filters?: outputs.iotanalytics.DatasetFilter[];
        /**
         * An "SqlQueryDatasetAction" object that uses an SQL query to automatically create data set contents.
         */
        sqlQuery: string;
    }

    export interface DatasetResourceConfiguration {
        /**
         * The type of the compute resource used to execute the `containerAction` . Possible values are: `ACU_1` (vCPU=4, memory=16 GiB) or `ACU_2` (vCPU=8, memory=32 GiB).
         */
        computeType: enums.iotanalytics.DatasetResourceConfigurationComputeType;
        /**
         * The size, in GB, of the persistent storage available to the resource instance used to execute the `containerAction` (min: 1, max: 50).
         */
        volumeSizeInGb: number;
    }

    export interface DatasetRetentionPeriod {
        /**
         * The number of days that message data is kept. The `unlimited` parameter must be false.
         */
        numberOfDays?: number;
        /**
         * If true, message data is kept indefinitely.
         */
        unlimited?: boolean;
    }

    export interface DatasetS3DestinationConfiguration {
        /**
         * The name of the S3 bucket to which dataset contents are delivered.
         */
        bucket: string;
        /**
         * Configuration information for coordination with AWS Glue , a fully managed extract, transform and load (ETL) service.
         */
        glueConfiguration?: outputs.iotanalytics.DatasetGlueConfiguration;
        /**
         * The key of the dataset contents object in an S3 bucket. Each object has a key that is a unique identifier. Each object has exactly one key.
         *
         * You can create a unique key with the following options:
         *
         * - Use `!{iotanalytics:scheduleTime}` to insert the time of a scheduled SQL query run.
         * - Use `!{iotanalytics:versionId}` to insert a unique hash that identifies a dataset content.
         * - Use `!{iotanalytics:creationTime}` to insert the creation time of a dataset content.
         *
         * The following example creates a unique key for a CSV file: `dataset/mydataset/!{iotanalytics:scheduleTime}/!{iotanalytics:versionId}.csv`
         *
         * > If you don't use `!{iotanalytics:versionId}` to specify the key, you might get duplicate keys. For example, you might have two dataset contents with the same `scheduleTime` but different `versionId` s. This means that one dataset content overwrites the other.
         */
        key: string;
        /**
         * The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 and AWS Glue resources.
         */
        roleArn: string;
    }

    export interface DatasetSchedule {
        /**
         * The expression that defines when to trigger an update. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html) in the Amazon CloudWatch documentation.
         */
        scheduleExpression: string;
    }

    export interface DatasetTrigger {
        /**
         * The "Schedule" when the trigger is initiated.
         */
        schedule?: outputs.iotanalytics.DatasetSchedule;
        /**
         * Information about the data set whose content generation triggers the new data set content generation.
         */
        triggeringDataset?: outputs.iotanalytics.DatasetTriggeringDataset;
    }

    export interface DatasetTriggeringDataset {
        /**
         * The name of the data set whose content generation triggers the new data set content generation.
         */
        datasetName: string;
    }

    export interface DatasetVariable {
        /**
         * The value of the variable as a structure that specifies a dataset content version.
         */
        datasetContentVersionValue?: outputs.iotanalytics.DatasetContentVersionValue;
        /**
         * The value of the variable as a double (numeric).
         */
        doubleValue?: number;
        /**
         * The value of the variable as a structure that specifies an output file URI.
         */
        outputFileUriValue?: outputs.iotanalytics.DatasetOutputFileUriValue;
        /**
         * The value of the variable as a string.
         */
        stringValue?: string;
        /**
         * The name of the variable.
         */
        variableName: string;
    }

    export interface DatasetVersioningConfiguration {
        /**
         * How many versions of dataset contents are kept. The `unlimited` parameter must be `false` .
         */
        maxVersions?: number;
        /**
         * If true, unlimited versions of dataset contents are kept.
         */
        unlimited?: boolean;
    }

    export interface DatastoreColumn {
        /**
         * The name of the column.
         */
        name: string;
        /**
         * The type of data. For more information about the supported data types, see [Common data types](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html) in the *AWS Glue Developer Guide* .
         */
        type: string;
    }

    export interface DatastoreCustomerManagedS3 {
        /**
         * The name of the Amazon S3 bucket where your data is stored.
         */
        bucket: string;
        /**
         * (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
         */
        keyPrefix?: string;
        /**
         * The ARN of the role that grants AWS IoT Analytics permission to interact with your Amazon S3 resources.
         */
        roleArn: string;
    }

    export interface DatastoreCustomerManagedS3Storage {
        /**
         * The name of the Amazon S3 bucket where your data is stored.
         */
        bucket: string;
        /**
         * (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/).
         */
        keyPrefix?: string;
    }

    export interface DatastoreFileFormatConfiguration {
        /**
         * Contains the configuration information of the JSON format.
         */
        jsonConfiguration?: outputs.iotanalytics.DatastoreJsonConfiguration;
        /**
         * Contains the configuration information of the Parquet format.
         */
        parquetConfiguration?: outputs.iotanalytics.DatastoreParquetConfiguration;
    }

    export interface DatastoreIotSiteWiseMultiLayerStorage {
        /**
         * Stores data used by AWS IoT SiteWise in an Amazon S3 bucket that you manage.
         */
        customerManagedS3Storage?: outputs.iotanalytics.DatastoreCustomerManagedS3Storage;
    }

    export interface DatastoreJsonConfiguration {
    }

    export interface DatastoreParquetConfiguration {
        /**
         * Information needed to define a schema.
         */
        schemaDefinition?: outputs.iotanalytics.DatastoreSchemaDefinition;
    }

    export interface DatastorePartition {
        /**
         * A partition dimension defined by an attribute.
         */
        partition?: outputs.iotanalytics.Partition;
        /**
         * A partition dimension defined by a timestamp attribute.
         */
        timestampPartition?: outputs.iotanalytics.DatastoreTimestampPartition;
    }

    export interface DatastorePartitions {
        /**
         * A list of partition dimensions in a data store.
         */
        partitions?: outputs.iotanalytics.DatastorePartition[];
    }

    export interface DatastoreRetentionPeriod {
        /**
         * The number of days that message data is kept. The `unlimited` parameter must be false.
         */
        numberOfDays?: number;
        /**
         * If true, message data is kept indefinitely.
         */
        unlimited?: boolean;
    }

    export interface DatastoreSchemaDefinition {
        /**
         * Specifies one or more columns that store your data.
         *
         * Each schema can have up to 100 columns. Each column can have up to 100 nested types.
         */
        columns?: outputs.iotanalytics.DatastoreColumn[];
    }

    export interface DatastoreServiceManagedS3 {
    }

    export interface DatastoreStorage {
        /**
         * Use this to store data store data in an S3 bucket that you manage. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.
         */
        customerManagedS3?: outputs.iotanalytics.DatastoreCustomerManagedS3;
        /**
         * Use this to store data used by AWS IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created.
         */
        iotSiteWiseMultiLayerStorage?: outputs.iotanalytics.DatastoreIotSiteWiseMultiLayerStorage;
        /**
         * Use this to store data store data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.
         */
        serviceManagedS3?: outputs.iotanalytics.DatastoreServiceManagedS3;
    }

    export interface DatastoreTimestampPartition {
        /**
         * The attribute name of the partition defined by a timestamp.
         */
        attributeName: string;
        /**
         * The timestamp format of a partition defined by a timestamp. The default format is seconds since epoch (January 1, 1970 at midnight UTC time).
         */
        timestampFormat?: string;
    }

    export interface Partition {
        /**
         * The name of the attribute that defines a partition dimension.
         */
        attributeName: string;
    }

    export interface PipelineActivity {
        /**
         * Adds other attributes based on existing attributes in the message.
         */
        addAttributes?: outputs.iotanalytics.PipelineAddAttributes;
        /**
         * Determines the source of the messages to be processed.
         */
        channel?: outputs.iotanalytics.PipelineChannel;
        /**
         * Specifies where to store the processed message data.
         */
        datastore?: outputs.iotanalytics.PipelineDatastore;
        /**
         * Adds data from the AWS IoT device registry to your message.
         */
        deviceRegistryEnrich?: outputs.iotanalytics.PipelineDeviceRegistryEnrich;
        /**
         * Adds information from the AWS IoT Device Shadows service to a message.
         */
        deviceShadowEnrich?: outputs.iotanalytics.PipelineDeviceShadowEnrich;
        /**
         * Filters a message based on its attributes.
         */
        filter?: outputs.iotanalytics.PipelineFilter;
        /**
         * Runs a Lambda function to modify the message.
         */
        lambda?: outputs.iotanalytics.PipelineLambda;
        /**
         * Computes an arithmetic expression using the message's attributes and adds it to the message.
         */
        math?: outputs.iotanalytics.PipelineMath;
        /**
         * Removes attributes from a message.
         */
        removeAttributes?: outputs.iotanalytics.PipelineRemoveAttributes;
        /**
         * Creates a new message using only the specified attributes from the original message.
         */
        selectAttributes?: outputs.iotanalytics.PipelineSelectAttributes;
    }

    export interface PipelineAddAttributes {
        /**
         * A list of 1-50 "AttributeNameMapping" objects that map an existing attribute to a new attribute.
         *
         * > The existing attributes remain in the message, so if you want to remove the originals, use "RemoveAttributeActivity".
         */
        attributes: {[key: string]: string};
        /**
         * The name of the 'addAttributes' activity.
         */
        name: string;
        /**
         * The next activity in the pipeline.
         */
        next?: string;
    }

    export interface PipelineChannel {
        /**
         * The name of the channel from which the messages are processed.
         */
        channelName: string;
        /**
         * The name of the 'channel' activity.
         */
        name: string;
        /**
         * The next activity in the pipeline.
         */
        next?: string;
    }

    export interface PipelineDatastore {
        /**
         * The name of the data store where processed messages are stored.
         */
        datastoreName: string;
        /**
         * The name of the datastore activity.
         */
        name: string;
    }

    export interface PipelineDeviceRegistryEnrich {
        /**
         * The name of the attribute that is added to the message.
         */
        attribute: string;
        /**
         * The name of the 'deviceRegistryEnrich' activity.
         */
        name: string;
        /**
         * The next activity in the pipeline.
         */
        next?: string;
        /**
         * The ARN of the role that allows access to the device's registry information.
         */
        roleArn: string;
        /**
         * The name of the IoT device whose registry information is added to the message.
         */
        thingName: string;
    }

    export interface PipelineDeviceShadowEnrich {
        /**
         * The name of the attribute that is added to the message.
         */
        attribute: string;
        /**
         * The name of the 'deviceShadowEnrich' activity.
         */
        name: string;
        /**
         * The next activity in the pipeline.
         */
        next?: string;
        /**
         * The ARN of the role that allows access to the device's shadow.
         */
        roleArn: string;
        /**
         * The name of the IoT device whose shadow information is added to the message.
         */
        thingName: string;
    }

    export interface PipelineFilter {
        /**
         * An expression that looks like an SQL WHERE clause that must return a Boolean value.
         */
        filter: string;
        /**
         * The name of the 'filter' activity.
         */
        name: string;
        /**
         * The next activity in the pipeline.
         */
        next?: string;
    }

    export interface PipelineLambda {
        /**
         * The number of messages passed to the Lambda function for processing.
         *
         * The AWS Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.
         */
        batchSize: number;
        /**
         * The name of the Lambda function that is run on the message.
         */
        lambdaName: string;
        /**
         * The name of the 'lambda' activity.
         */
        name: string;
        /**
         * The next activity in the pipeline.
         */
        next?: string;
    }

    export interface PipelineMath {
        /**
         * The name of the attribute that contains the result of the math operation.
         */
        attribute: string;
        /**
         * An expression that uses one or more existing attributes and must return an integer value.
         */
        math: string;
        /**
         * The name of the 'math' activity.
         */
        name: string;
        /**
         * The next activity in the pipeline.
         */
        next?: string;
    }

    export interface PipelineRemoveAttributes {
        /**
         * A list of 1-50 attributes to remove from the message.
         */
        attributes: string[];
        /**
         * The name of the 'removeAttributes' activity.
         */
        name: string;
        /**
         * The next activity in the pipeline.
         */
        next?: string;
    }

    export interface PipelineSelectAttributes {
        /**
         * A list of the attributes to select from the message.
         */
        attributes: string[];
        /**
         * The name of the 'selectAttributes' activity.
         */
        name: string;
        /**
         * The next activity in the pipeline.
         */
        next?: string;
    }

}

export namespace iotcoredeviceadvisor {
    /**
     * The configuration of the Suite Definition. Listed below are the required elements of the `SuiteDefinitionConfiguration` .
     *
     * - ***devicePermissionRoleArn*** - The device permission arn.
     *
     * This is a required element.
     *
     * *Type:* String
     * - ***devices*** - The list of configured devices under test. For more information on devices under test, see [DeviceUnderTest](https://docs.aws.amazon.com/iot/latest/apireference/API_iotdeviceadvisor_DeviceUnderTest.html)
     *
     * Not a required element.
     *
     * *Type:* List of devices under test
     * - ***intendedForQualification*** - The tests intended for qualification in a suite.
     *
     * Not a required element.
     *
     * *Type:* Boolean
     * - ***rootGroup*** - The test suite root group. For more information on creating and using root groups see the [Device Advisor workflow](https://docs.aws.amazon.com/iot/latest/developerguide/device-advisor-workflow.html) .
     *
     * This is a required element.
     *
     * *Type:* String
     * - ***suiteDefinitionName*** - The Suite Definition Configuration name.
     *
     * This is a required element.
     *
     * *Type:* String
     */
    export interface SuiteDefinitionConfigurationProperties {
        /**
         * Gets the device permission ARN. This is a required parameter.
         */
        devicePermissionRoleArn: string;
        /**
         * Gets the devices configured.
         */
        devices?: outputs.iotcoredeviceadvisor.SuiteDefinitionDeviceUnderTest[];
        /**
         * Gets the tests intended for qualification in a suite.
         */
        intendedForQualification?: boolean;
        /**
         * Gets the test suite root group. This is a required parameter. For updating or creating the latest qualification suite, if `intendedForQualification` is set to true, `rootGroup` can be an empty string. If `intendedForQualification` is false, `rootGroup` cannot be an empty string. If `rootGroup` is empty, and `intendedForQualification` is set to true, all the qualification tests are included, and the configuration is default.
         *
         * For a qualification suite, the minimum length is 0, and the maximum is 2048. For a non-qualification suite, the minimum length is 1, and the maximum is 2048.
         */
        rootGroup: string;
        /**
         * Gets the suite definition name. This is a required parameter.
         */
        suiteDefinitionName?: string;
    }

    export interface SuiteDefinitionDeviceUnderTest {
        certificateArn?: string;
        thingArn?: string;
    }

}

export namespace iotevents {
    /**
     * Specifies whether to get notified for alarm state changes.
     */
    export interface AlarmModelAcknowledgeFlow {
        /**
         * The value must be TRUE or FALSE. If TRUE, you receive a notification when the alarm state changes. You must choose to acknowledge the notification before the alarm state can return to NORMAL. If FALSE, you won't receive notifications. The alarm automatically changes to the NORMAL state when the input property value returns to the specified range.
         */
        enabled?: boolean;
    }

    /**
     * The actions to be performed.
     */
    export interface AlarmModelAlarmAction {
        dynamoDBv2?: outputs.iotevents.AlarmModelDynamoDBv2;
        dynamoDb?: outputs.iotevents.AlarmModelDynamoDb;
        firehose?: outputs.iotevents.AlarmModelFirehose;
        iotEvents?: outputs.iotevents.AlarmModelIotEvents;
        iotSiteWise?: outputs.iotevents.AlarmModelIotSiteWise;
        iotTopicPublish?: outputs.iotevents.AlarmModelIotTopicPublish;
        lambda?: outputs.iotevents.AlarmModelLambda;
        sns?: outputs.iotevents.AlarmModelSns;
        sqs?: outputs.iotevents.AlarmModelSqs;
    }

    /**
     * Contains the configuration information of alarm state changes
     */
    export interface AlarmModelAlarmCapabilities {
        /**
         * Specifies whether to get notified for alarm state changes.
         */
        acknowledgeFlow?: outputs.iotevents.AlarmModelAcknowledgeFlow;
        /**
         * Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model.
         */
        initializationConfiguration?: outputs.iotevents.AlarmModelInitializationConfiguration;
    }

    /**
     * Contains information about one or more alarm actions.
     */
    export interface AlarmModelAlarmEventActions {
        /**
         * Specifies one or more supported actions to receive notifications when the alarm state changes.
         */
        alarmActions?: outputs.iotevents.AlarmModelAlarmAction[];
    }

    /**
     * Defines when your alarm is invoked.
     */
    export interface AlarmModelAlarmRule {
        /**
         * A rule that compares an input property value to a threshold value with a comparison operator.
         */
        simpleRule?: outputs.iotevents.AlarmModelSimpleRule;
    }

    /**
     * A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface AlarmModelAssetPropertyTimestamp {
        /**
         * The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.
         */
        offsetInNanos?: string;
        /**
         * The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.
         */
        timeInSeconds: string;
    }

    /**
     * A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface AlarmModelAssetPropertyValue {
        /**
         * The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.
         */
        quality?: string;
        timestamp?: outputs.iotevents.AlarmModelAssetPropertyTimestamp;
        value: outputs.iotevents.AlarmModelAssetPropertyVariant;
    }

    /**
     * A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface AlarmModelAssetPropertyVariant {
        /**
         * The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.
         */
        booleanValue?: string;
        /**
         * The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.
         */
        doubleValue?: string;
        /**
         * The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.
         */
        integerValue?: string;
        /**
         * The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.
         */
        stringValue?: string;
    }

    /**
     * Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the alarm model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.
     *
     * You can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.
     */
    export interface AlarmModelDynamoDBv2 {
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    /**
     * Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the alarm model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.
     */
    export interface AlarmModelDynamoDb {
        /**
         * The name of the hash key (also called the partition key).
         */
        hashKeyField: string;
        /**
         * The data type for the hash key (also called the partition key). You can specify the following values:
         *
         * * `STRING` - The hash key is a string.
         *
         * * `NUMBER` - The hash key is a number.
         *
         * If you don't specify `hashKeyType`, the default value is `STRING`.
         */
        hashKeyType?: string;
        /**
         * The value of the hash key (also called the partition key).
         */
        hashKeyValue: string;
        /**
         * The type of operation to perform. You can specify the following values:
         *
         * * `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.
         *
         * * `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
         *
         * * `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
         *
         * If you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.
         */
        operation?: string;
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * The name of the DynamoDB column that receives the action payload.
         *
         * If you don't specify this parameter, the name of the DynamoDB column is `payload`.
         */
        payloadField?: string;
        /**
         * The name of the range key (also called the sort key).
         */
        rangeKeyField?: string;
        /**
         * The data type for the range key (also called the sort key), You can specify the following values:
         *
         * * `STRING` - The range key is a string.
         *
         * * `NUMBER` - The range key is number.
         *
         * If you don't specify `rangeKeyField`, the default value is `STRING`.
         */
        rangeKeyType?: string;
        /**
         * The value of the range key (also called the sort key).
         */
        rangeKeyValue?: string;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    /**
     * Sends information about the alarm model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
     */
    export interface AlarmModelFirehose {
        /**
         * The name of the Kinesis Data Firehose delivery stream where the data is written.
         */
        deliveryStreamName: string;
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
         */
        separator?: string;
    }

    /**
     * Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model.
     */
    export interface AlarmModelInitializationConfiguration {
        /**
         * The value must be TRUE or FALSE. If FALSE, all alarm instances created based on the alarm model are activated. The default value is TRUE.
         */
        disabledOnInitialization: boolean;
    }

    /**
     * Sends an AWS IoT Events input, passing in information about the alarm model instance and the event that triggered the action.
     */
    export interface AlarmModelIotEvents {
        /**
         * The name of the AWS IoT Events input where the data is sent.
         */
        inputName: string;
        payload?: outputs.iotevents.AlarmModelPayload;
    }

    /**
     * Sends information about the alarm model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.
     */
    export interface AlarmModelIotSiteWise {
        /**
         * The ID of the asset that has the specified property. You can specify an expression.
         */
        assetId?: string;
        /**
         * A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.
         */
        entryId?: string;
        /**
         * The alias of the asset property. You can also specify an expression.
         */
        propertyAlias?: string;
        /**
         * The ID of the asset property. You can specify an expression.
         */
        propertyId?: string;
        propertyValue?: outputs.iotevents.AlarmModelAssetPropertyValue;
    }

    /**
     * Information required to publish the MQTT message through the AWS IoT message broker.
     */
    export interface AlarmModelIotTopicPublish {
        /**
         * The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.
         */
        mqttTopic: string;
        payload?: outputs.iotevents.AlarmModelPayload;
    }

    export interface AlarmModelLambda {
        /**
         * The ARN of the Lambda function that is executed.
         */
        functionArn: string;
        payload?: outputs.iotevents.AlarmModelPayload;
    }

    /**
     * Information needed to configure the payload.
     *
     * By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the alarm model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.
     */
    export interface AlarmModelPayload {
        /**
         * The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.
         */
        contentExpression: string;
        /**
         * The value of the payload type can be either `STRING` or `JSON`.
         */
        type: string;
    }

    /**
     * A rule that compares an input property value to a threshold value with a comparison operator.
     */
    export interface AlarmModelSimpleRule {
        /**
         * The comparison operator.
         */
        comparisonOperator: enums.iotevents.AlarmModelSimpleRuleComparisonOperator;
        /**
         * The value on the left side of the comparison operator. You can specify an AWS IoT Events input attribute as an input property.
         */
        inputProperty: string;
        /**
         * The value on the right side of the comparison operator. You can enter a number or specify an AWS IoT Events input attribute.
         */
        threshold: string;
    }

    /**
     * Information required to publish the Amazon SNS message.
     */
    export interface AlarmModelSns {
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * The ARN of the Amazon SNS target where the message is sent.
         */
        targetArn: string;
    }

    export interface AlarmModelSqs {
        payload?: outputs.iotevents.AlarmModelPayload;
        /**
         * The URL of the SQS queue where the data is written.
         */
        queueUrl: string;
        /**
         * Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.
         */
        useBase64?: boolean;
    }

    /**
     * The actions to be performed.
     */
    export interface DetectorModelAction {
        /**
         * Information needed to clear the timer.
         */
        clearTimer?: outputs.iotevents.DetectorModelClearTimer;
        /**
         * Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html) . A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide* .
         */
        dynamoDBv2?: outputs.iotevents.DetectorModelDynamoDBv2;
        /**
         * Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html) . One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide* .
         */
        dynamoDb?: outputs.iotevents.DetectorModelDynamoDb;
        /**
         * Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
         */
        firehose?: outputs.iotevents.DetectorModelFirehose;
        /**
         * Sends AWS IoT Events input, which passes information about the detector model instance and the event that triggered the action.
         */
        iotEvents?: outputs.iotevents.DetectorModelIotEvents;
        /**
         * Sends information about the detector model instance and the event that triggered the action to an asset property in AWS IoT SiteWise .
         */
        iotSiteWise?: outputs.iotevents.DetectorModelIotSiteWise;
        /**
         * Publishes an MQTT message with the given topic to the AWS IoT message broker.
         */
        iotTopicPublish?: outputs.iotevents.DetectorModelIotTopicPublish;
        /**
         * Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.
         */
        lambda?: outputs.iotevents.DetectorModelLambda;
        /**
         * Information needed to reset the timer.
         */
        resetTimer?: outputs.iotevents.DetectorModelResetTimer;
        /**
         * Information needed to set the timer.
         */
        setTimer?: outputs.iotevents.DetectorModelSetTimer;
        /**
         * Sets a variable to a specified value.
         */
        setVariable?: outputs.iotevents.DetectorModelSetVariable;
        /**
         * Sends an Amazon SNS message.
         */
        sns?: outputs.iotevents.DetectorModelSns;
        /**
         * Sends an Amazon SNS message.
         */
        sqs?: outputs.iotevents.DetectorModelSqs;
    }

    /**
     * A structure that contains timestamp information. For more information, see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface DetectorModelAssetPropertyTimestamp {
        /**
         * The timestamp, in seconds, in the Unix epoch format. The valid range is between `1-31556889864403199`. You can also specify an expression.
         */
        offsetInNanos?: string;
        /**
         * The nanosecond offset converted from `timeInSeconds`. The valid range is between `0-999999999`. You can also specify an expression.
         */
        timeInSeconds: string;
    }

    /**
     * A structure that contains value information. For more information, see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface DetectorModelAssetPropertyValue {
        /**
         * The quality of the asset property value. The value must be `GOOD`, `BAD`, or `UNCERTAIN`. You can also specify an expression.
         */
        quality?: string;
        /**
         * The timestamp associated with the asset property value. The default is the current event time.
         */
        timestamp?: outputs.iotevents.DetectorModelAssetPropertyTimestamp;
        /**
         * The value to send to an asset property.
         */
        value: outputs.iotevents.DetectorModelAssetPropertyVariant;
    }

    /**
     * A structure that contains an asset property value. For more information, see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html) in the *AWS IoT SiteWise API Reference*.
     */
    export interface DetectorModelAssetPropertyVariant {
        /**
         * The asset property value is a Boolean value that must be `TRUE` or `FALSE`. You can also specify an expression. If you use an expression, the evaluated result should be a Boolean value.
         */
        booleanValue?: string;
        /**
         * The asset property value is a double. You can also specify an expression. If you use an expression, the evaluated result should be a double.
         */
        doubleValue?: string;
        /**
         * The asset property value is an integer. You can also specify an expression. If you use an expression, the evaluated result should be an integer.
         */
        integerValue?: string;
        /**
         * The asset property value is a string. You can also specify an expression. If you use an expression, the evaluated result should be a string.
         */
        stringValue?: string;
    }

    /**
     * Information needed to clear the timer.
     */
    export interface DetectorModelClearTimer {
        /**
         * The name of the timer to clear.
         */
        timerName: string;
    }

    /**
     * Information that defines how a detector operates.
     */
    export interface DetectorModelDefinition {
        /**
         * The state that is entered at the creation of each detector (instance).
         */
        initialStateName: string;
        /**
         * Information about the states of the detector.
         */
        states: outputs.iotevents.DetectorModelState[];
    }

    /**
     * Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.
     *
     * You can use expressions for parameters that are strings. For more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html) in the *AWS IoT Events Developer Guide*.
     */
    export interface DetectorModelDynamoDBv2 {
        /**
         * Information needed to configure the payload.
         *
         * By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression` .
         */
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    /**
     * Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can also customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html). One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html) in *AWS IoT Events Developer Guide*.
     */
    export interface DetectorModelDynamoDb {
        /**
         * The name of the hash key (also called the partition key).
         */
        hashKeyField: string;
        /**
         * The data type for the hash key (also called the partition key). You can specify the following values:
         *
         * * `STRING` - The hash key is a string.
         *
         * * `NUMBER` - The hash key is a number.
         *
         * If you don't specify `hashKeyType`, the default value is `STRING`.
         */
        hashKeyType?: string;
        /**
         * The value of the hash key (also called the partition key).
         */
        hashKeyValue: string;
        /**
         * The type of operation to perform. You can specify the following values:
         *
         * * `INSERT` - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.
         *
         * * `UPDATE` - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
         *
         * * `DELETE` - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.
         *
         * If you don't specify this parameter, AWS IoT Events triggers the `INSERT` operation.
         */
        operation?: string;
        /**
         * Information needed to configure the payload.
         *
         * By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression` .
         */
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * The name of the DynamoDB column that receives the action payload.
         *
         * If you don't specify this parameter, the name of the DynamoDB column is `payload`.
         */
        payloadField?: string;
        /**
         * The name of the range key (also called the sort key).
         */
        rangeKeyField?: string;
        /**
         * The data type for the range key (also called the sort key), You can specify the following values:
         *
         * * `STRING` - The range key is a string.
         *
         * * `NUMBER` - The range key is number.
         *
         * If you don't specify `rangeKeyField`, the default value is `STRING`.
         */
        rangeKeyType?: string;
        /**
         * The value of the range key (also called the sort key).
         */
        rangeKeyValue?: string;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    /**
     * Specifies the `actions` to be performed when the `condition` evaluates to `TRUE`.
     */
    export interface DetectorModelEvent {
        /**
         * The actions to be performed.
         */
        actions?: outputs.iotevents.DetectorModelAction[];
        /**
         * The Boolean expression that, when `TRUE`, causes the `actions` to be performed. If not present, the `actions` are performed (=`TRUE`). If the expression result is not a `Boolean` value, the `actions` are not performed (=`FALSE`).
         */
        condition?: string;
        /**
         * The name of the event.
         */
        eventName: string;
    }

    /**
     * Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
     */
    export interface DetectorModelFirehose {
        /**
         * The name of the Kinesis Data Firehose delivery stream where the data is written.
         */
        deliveryStreamName: string;
        /**
         * You can configure the action payload when you send a message to an Amazon Data Firehose delivery stream.
         */
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
         */
        separator?: string;
    }

    /**
     * Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.
     */
    export interface DetectorModelIotEvents {
        /**
         * The name of the AWS IoT Events input where the data is sent.
         */
        inputName: string;
        /**
         * You can configure the action payload when you send a message to an AWS IoT Events input.
         */
        payload?: outputs.iotevents.DetectorModelPayload;
    }

    /**
     * Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.
     */
    export interface DetectorModelIotSiteWise {
        /**
         * The ID of the asset that has the specified property. You can specify an expression.
         */
        assetId?: string;
        /**
         * A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier. You can also specify an expression.
         */
        entryId?: string;
        /**
         * The alias of the asset property. You can also specify an expression.
         */
        propertyAlias?: string;
        /**
         * The ID of the asset property. You can specify an expression.
         */
        propertyId?: string;
        /**
         * The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information.
         */
        propertyValue: outputs.iotevents.DetectorModelAssetPropertyValue;
    }

    /**
     * Information required to publish the MQTT message through the AWS IoT message broker.
     */
    export interface DetectorModelIotTopicPublish {
        /**
         * The MQTT topic of the message. You can use a string expression that includes variables (`$variable.<variable-name>`) and input values (`$input.<input-name>.<path-to-datum>`) as the topic string.
         */
        mqttTopic: string;
        /**
         * You can configure the action payload when you publish a message to an AWS IoT Core topic.
         */
        payload?: outputs.iotevents.DetectorModelPayload;
    }

    export interface DetectorModelLambda {
        /**
         * The ARN of the Lambda function that is executed.
         */
        functionArn: string;
        /**
         * You can configure the action payload when you send a message to a Lambda function.
         */
        payload?: outputs.iotevents.DetectorModelPayload;
    }

    /**
     * When entering this state, perform these `actions` if the `condition` is `TRUE`.
     */
    export interface DetectorModelOnEnter {
        /**
         * Specifies the `actions` that are performed when the state is entered and the `condition` is `TRUE`.
         */
        events?: outputs.iotevents.DetectorModelEvent[];
    }

    /**
     * When exiting this state, perform these `actions` if the specified `condition` is `TRUE`.
     */
    export interface DetectorModelOnExit {
        /**
         * Specifies the `actions` that are performed when the state is exited and the `condition` is `TRUE`.
         */
        events?: outputs.iotevents.DetectorModelEvent[];
    }

    /**
     * When an input is received and the `condition` is `TRUE`, perform the specified `actions`.
     */
    export interface DetectorModelOnInput {
        /**
         * Specifies the `actions` performed when the `condition` evaluates to `TRUE`.
         */
        events?: outputs.iotevents.DetectorModelEvent[];
        /**
         * Specifies the `actions` performed, and the next `state` entered, when a `condition` evaluates to `TRUE`.
         */
        transitionEvents?: outputs.iotevents.DetectorModelTransitionEvent[];
    }

    /**
     * Information needed to configure the payload.
     *
     * By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use `contentExpression`.
     */
    export interface DetectorModelPayload {
        /**
         * The content of the payload. You can use a string expression that includes quoted strings (`'<string>'`), variables (`$variable.<variable-name>`), input values (`$input.<input-name>.<path-to-datum>`), string concatenations, and quoted strings that contain `${}` as the content. The recommended maximum size of a content expression is 1 KB.
         */
        contentExpression: string;
        /**
         * The value of the payload type can be either `STRING` or `JSON`.
         */
        type: string;
    }

    /**
     * Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer.
     */
    export interface DetectorModelResetTimer {
        /**
         * The name of the timer to reset.
         */
        timerName: string;
    }

    /**
     * Information needed to set the timer.
     */
    export interface DetectorModelSetTimer {
        /**
         * The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (`$variable.<variable-name>`), and input values (`$input.<input-name>.<path-to-datum>`) as the duration. The range of the duration is `1-31622400` seconds. To ensure accuracy, the minimum duration is `60` seconds. The evaluated result of the duration is rounded down to the nearest whole number.
         */
        durationExpression?: string;
        /**
         * The number of seconds until the timer expires. The minimum value is `60` seconds to ensure accuracy. The maximum value is `31622400` seconds.
         */
        seconds?: number;
        /**
         * The name of the timer.
         */
        timerName: string;
    }

    /**
     * Information about the variable and its new value.
     */
    export interface DetectorModelSetVariable {
        /**
         * The new value of the variable.
         */
        value: string;
        /**
         * The name of the variable.
         */
        variableName: string;
    }

    /**
     * Information required to publish the Amazon SNS message.
     */
    export interface DetectorModelSns {
        /**
         * You can configure the action payload when you send a message as an Amazon SNS push notification.
         */
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * The ARN of the Amazon SNS target where the message is sent.
         */
        targetArn: string;
    }

    export interface DetectorModelSqs {
        /**
         * You can configure the action payload when you send a message to an Amazon SQS queue.
         */
        payload?: outputs.iotevents.DetectorModelPayload;
        /**
         * The URL of the SQS queue where the data is written.
         */
        queueUrl: string;
        /**
         * Set this to `TRUE` if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to `FALSE`.
         */
        useBase64?: boolean;
    }

    /**
     * Information that defines a state of a detector.
     */
    export interface DetectorModelState {
        /**
         * When entering this state, perform these `actions` if the `condition` is TRUE.
         */
        onEnter?: outputs.iotevents.DetectorModelOnEnter;
        /**
         * When exiting this state, perform these `actions` if the specified `condition` is `TRUE` .
         */
        onExit?: outputs.iotevents.DetectorModelOnExit;
        /**
         * When an input is received and the `condition` is TRUE, perform the specified `actions` .
         */
        onInput?: outputs.iotevents.DetectorModelOnInput;
        /**
         * The name of the state.
         */
        stateName: string;
    }

    /**
     * Specifies the `actions `performed and the next `state` entered when a `condition` evaluates to `TRUE`.
     */
    export interface DetectorModelTransitionEvent {
        /**
         * The actions to be performed.
         */
        actions?: outputs.iotevents.DetectorModelAction[];
        /**
         * A Boolean expression that when `TRUE` causes the `actions` to be performed and the `nextState` to be entered.
         */
        condition: string;
        /**
         * The name of the event.
         */
        eventName: string;
        /**
         * The next state to enter.
         */
        nextState: string;
    }

    /**
     * The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using `BatchPutMessage`. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the `condition` expressions used by detectors that monitor this input.
     */
    export interface InputAttribute {
        /**
         * An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (`BatchPutMessage`). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the `condition` expressions used by detectors.
         *
         * _Syntax_: `<field-name>.<field-name>...`
         */
        jsonPath: string;
    }

    /**
     * The definition of the input.
     */
    export interface InputDefinition {
        /**
         * The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using `BatchPutMessage`. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the `condition` expressions used by detectors that monitor this input.
         */
        attributes: outputs.iotevents.InputAttribute[];
    }

}

export namespace iotfleethub {
}

export namespace iotsitewise {
    /**
     * Contains information for an IAM role identity in an access policy.
     */
    export interface AccessPolicyIamRole {
        /**
         * The ARN of the IAM role.
         */
        arn?: string;
    }

    /**
     * Contains information for an IAM user identity in an access policy.
     */
    export interface AccessPolicyIamUser {
        /**
         * The ARN of the IAM user.
         */
        arn?: string;
    }

    /**
     * The identity for this access policy. Choose either an SSO user or group or an IAM user or role.
     */
    export interface AccessPolicyIdentity {
        /**
         * An IAM role identity.
         */
        iamRole?: outputs.iotsitewise.AccessPolicyIamRole;
        /**
         * An IAM user identity.
         */
        iamUser?: outputs.iotsitewise.AccessPolicyIamUser;
        /**
         * An IAM Identity Center user identity.
         */
        user?: outputs.iotsitewise.AccessPolicyUser;
    }

    /**
     * A portal resource.
     */
    export interface AccessPolicyPortal {
        /**
         * The ID of the portal.
         */
        id?: string;
    }

    /**
     * A project resource.
     */
    export interface AccessPolicyProject {
        /**
         * The ID of the project.
         */
        id?: string;
    }

    /**
     * The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.
     */
    export interface AccessPolicyResource {
        /**
         * Identifies an AWS IoT SiteWise Monitor portal.
         */
        portal?: outputs.iotsitewise.AccessPolicyPortal;
        /**
         * Identifies a specific AWS IoT SiteWise Monitor project.
         */
        project?: outputs.iotsitewise.AccessPolicyProject;
    }

    /**
     * Contains information for a user identity in an access policy.
     */
    export interface AccessPolicyUser {
        /**
         * The AWS SSO ID of the user.
         */
        id?: string;
    }

    /**
     * Contains the configuration information of an alarm created in an AWS IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range.
     */
    export interface AlarmsProperties {
        /**
         * The ARN of the IAM role that allows the alarm to perform actions and access AWS resources and services, such as AWS IoT Events.
         */
        alarmRoleArn?: string;
        /**
         * The ARN of the AWS Lambda function that manages alarm notifications. For more information, see Managing alarm notifications in the AWS IoT Events Developer Guide.
         */
        notificationLambdaArn?: string;
    }

    /**
     * A hierarchy specifies allowed parent/child asset relationships.
     */
    export interface AssetHierarchy {
        /**
         * The ID of the child asset to be associated.
         */
        childAssetId: string;
        /**
         * String-friendly customer provided external ID
         */
        externalId?: string;
        /**
         * Customer provided actual UUID for property
         */
        id?: string;
        /**
         * The LogicalID of a hierarchy in the parent asset's model.
         */
        logicalId?: string;
    }

    export interface AssetModelAttribute {
        /**
         * The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute's value after you create an asset. For more information, see [Updating attribute values](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html) in the *AWS IoT SiteWise User Guide* .
         */
        defaultValue?: string;
    }

    /**
     * Contains a composite model definition in an asset model. This composite model definition is applied to all assets created from the asset model.
     */
    export interface AssetModelCompositeModel {
        /**
         * The component model ID for which the composite model is composed of
         */
        composedAssetModelId?: string;
        /**
         * The property definitions of the asset model. You can specify up to 200 properties per asset model.
         */
        compositeModelProperties?: outputs.iotsitewise.AssetModelProperty[];
        /**
         * A description for the asset composite model.
         */
        description?: string;
        /**
         * The External ID of the composite model
         */
        externalId?: string;
        /**
         * The Actual ID of the composite model
         */
        id?: string;
        /**
         * A unique, friendly name for the asset composite model.
         */
        name: string;
        /**
         * The parent composite model External ID
         */
        parentAssetModelCompositeModelExternalId?: string;
        /**
         * The path of the composite model. This is only for derived composite models
         */
        path?: string[];
        /**
         * The type of the composite model. For alarm composite models, this type is AWS/ALARM
         */
        type: string;
    }

    export interface AssetModelExpressionVariable {
        /**
         * The friendly name of the variable to be used in the expression.
         */
        name: string;
        /**
         * The variable that identifies an asset property from which to use values.
         */
        value: outputs.iotsitewise.AssetModelVariableValue;
    }

    /**
     * Contains information about an asset model hierarchy.
     */
    export interface AssetModelHierarchy {
        /**
         * The ID of the asset model. All assets in this hierarchy must be instances of the child AssetModelId asset model.
         */
        childAssetModelId: string;
        /**
         * Customer provided external ID for hierarchy
         */
        externalId?: string;
        /**
         * Customer provided actual ID for hierarchy
         */
        id?: string;
        /**
         * Customer provided logical ID for hierarchy.
         */
        logicalId?: string;
        /**
         * The name of the asset model hierarchy.
         */
        name: string;
    }

    export interface AssetModelMetric {
        /**
         * The mathematical expression that defines the metric aggregation function. You can specify up to 10 functions per expression.
         */
        expression: string;
        /**
         * The list of variables used in the expression.
         */
        variables: outputs.iotsitewise.AssetModelExpressionVariable[];
        /**
         * The window (time interval) over which AWS IoT SiteWise computes the metric's aggregation expression
         */
        window: outputs.iotsitewise.AssetModelMetricWindow;
    }

    /**
     * Contains a time interval window used for data aggregate computations (for example, average, sum, count, and so on).
     */
    export interface AssetModelMetricWindow {
        /**
         * The tumbling time interval window.
         */
        tumbling?: outputs.iotsitewise.AssetModelTumblingWindow;
    }

    /**
     * Contains information about an asset model property.
     */
    export interface AssetModelProperty {
        /**
         * The data type of the asset model property.
         */
        dataType: enums.iotsitewise.AssetModelDataType;
        /**
         * The data type of the structure for this property.
         */
        dataTypeSpec?: enums.iotsitewise.AssetModelDataTypeSpec;
        /**
         * The External ID of the Asset Model Property
         */
        externalId?: string;
        /**
         * The ID of the Asset Model Property
         */
        id?: string;
        /**
         * Customer provided Logical ID for property.
         */
        logicalId?: string;
        /**
         * The name of the asset model property.
         */
        name: string;
        /**
         * The property type
         */
        type: outputs.iotsitewise.AssetModelPropertyType;
        /**
         * The unit of the asset model property, such as Newtons or RPM.
         */
        unit?: string;
    }

    /**
     * The definition for property path which is used to reference properties in transforms/metrics
     */
    export interface AssetModelPropertyPathDefinition {
        /**
         * The name of the property
         */
        name: string;
    }

    /**
     * Contains a property type, which can be one of attribute, measurement, metric, or transform.
     */
    export interface AssetModelPropertyType {
        /**
         * Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an [IIoT](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications) wind turbine.
         */
        attribute?: outputs.iotsitewise.AssetModelAttribute;
        /**
         * Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature.
         */
        metric?: outputs.iotsitewise.AssetModelMetric;
        /**
         * Specifies an asset transform property. A transform contains a mathematical expression that maps a property's data points from one form to another, such as a unit conversion from Celsius to Fahrenheit.
         */
        transform?: outputs.iotsitewise.AssetModelTransform;
        /**
         * The type of property type, which can be one of `Attribute` , `Measurement` , `Metric` , or `Transform` .
         */
        typeName: enums.iotsitewise.AssetModelTypeName;
    }

    export interface AssetModelTransform {
        /**
         * The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.
         */
        expression: string;
        /**
         * The list of variables used in the expression.
         */
        variables: outputs.iotsitewise.AssetModelExpressionVariable[];
    }

    /**
     * Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time interval. This window is used in metric and aggregation computations.
     */
    export interface AssetModelTumblingWindow {
        /**
         * The time interval for the tumbling window. The interval time must be between 1 minute and 1 week.
         *
         * AWS IoT SiteWise computes the `1w` interval the end of Sunday at midnight each week (UTC), the `1d` interval at the end of each day at midnight (UTC), the `1h` interval at the end of each hour, and so on.
         *
         * When AWS IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. AWS IoT SiteWise places the computed data point at the end of the interval.
         */
        interval: string;
        /**
         * The offset for the tumbling window. The `offset` parameter accepts the following:
         *
         * - The offset time.
         *
         * For example, if you specify `18h` for `offset` and `1d` for `interval` , AWS IoT SiteWise aggregates data in one of the following ways:
         *
         * - If you create the metric before or at 6 PM (UTC), you get the first aggregation result at 6 PM (UTC) on the day when you create the metric.
         * - If you create the metric after 6 PM (UTC), you get the first aggregation result at 6 PM (UTC) the next day.
         * - The ISO 8601 format.
         *
         * For example, if you specify `PT18H` for `offset` and `1d` for `interval` , AWS IoT SiteWise aggregates data in one of the following ways:
         *
         * - If you create the metric before or at 6 PM (UTC), you get the first aggregation result at 6 PM (UTC) on the day when you create the metric.
         * - If you create the metric after 6 PM (UTC), you get the first aggregation result at 6 PM (UTC) the next day.
         * - The 24-hour clock.
         *
         * For example, if you specify `00:03:00` for `offset` , `5m` for `interval` , and you create the metric at 2 PM (UTC), you get the first aggregation result at 2:03 PM (UTC). You get the second aggregation result at 2:08 PM (UTC).
         * - The offset time zone.
         *
         * For example, if you specify `2021-07-23T18:00-08` for `offset` and `1d` for `interval` , AWS IoT SiteWise aggregates data in one of the following ways:
         *
         * - If you create the metric before or at 6 PM (PST), you get the first aggregation result at 6 PM (PST) on the day when you create the metric.
         * - If you create the metric after 6 PM (PST), you get the first aggregation result at 6 PM (PST) the next day.
         */
        offset?: string;
    }

    export interface AssetModelVariableValue {
        /**
         * The External ID of the hierarchy that is trying to be referenced
         */
        hierarchyExternalId?: string;
        /**
         * The ID of the hierarchy that is trying to be referenced
         */
        hierarchyId?: string;
        /**
         * The `LogicalID` of the hierarchy to query for the `PropertyLogicalID` .
         *
         * You use a `hierarchyLogicalID` instead of a model ID because you can have several hierarchies using the same model and therefore the same property. For example, you might have separately grouped assets that come from the same asset model. For more information, see [Defining relationships between asset models (hierarchies)](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html) in the *AWS IoT SiteWise User Guide* .
         */
        hierarchyLogicalId?: string;
        /**
         * The External ID of the property that is trying to be referenced
         */
        propertyExternalId?: string;
        /**
         * The ID of the property that is trying to be referenced
         */
        propertyId?: string;
        /**
         * The `LogicalID` of the property that is being referenced.
         */
        propertyLogicalId?: string;
        /**
         * The path of the property that is trying to be referenced
         */
        propertyPath?: outputs.iotsitewise.AssetModelPropertyPathDefinition[];
    }

    /**
     * The asset property's definition, alias, unit, and notification state.
     */
    export interface AssetProperty {
        /**
         * The property alias that identifies the property.
         */
        alias?: string;
        /**
         * String-friendly customer provided external ID
         */
        externalId?: string;
        /**
         * Customer provided actual UUID for property
         */
        id?: string;
        /**
         * Customer provided ID for property.
         */
        logicalId?: string;
        /**
         * The MQTT notification state (ENABLED or DISABLED) for this asset property.
         */
        notificationState?: enums.iotsitewise.AssetPropertyNotificationState;
        /**
         * The unit of measure (such as Newtons or RPM) of the asset property. If you don't specify a value for this parameter, the service uses the value of the assetModelProperty in the asset model.
         */
        unit?: string;
    }

    /**
     * Contains a summary of a gateway capability configuration.
     */
    export interface GatewayCapabilitySummary {
        /**
         * The JSON document that defines the configuration for the gateway capability. For more information, see [Configuring data sources (CLI)](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/configure-sources.html#configure-source-cli) in the *AWS IoT SiteWise User Guide* .
         */
        capabilityConfiguration?: string;
        /**
         * The namespace of the capability configuration. For example, if you configure OPC-UA sources from the AWS IoT SiteWise console, your OPC-UA capability configuration has the namespace `iotsitewise:opcuacollector:version` , where `version` is a number such as `1` .
         */
        capabilityNamespace: string;
    }

    /**
     * Contains the ARN of AWS IoT Greengrass Group V1 that the gateway runs on.
     */
    export interface GatewayGreengrass {
        /**
         * The ARN of the Greengrass group.
         */
        groupArn: string;
    }

    /**
     * Contains the CoreDeviceThingName of AWS IoT Greengrass Group V2 that the gateway runs on.
     */
    export interface GatewayGreengrassV2 {
        /**
         * The name of the CoreDevice in GreenGrass V2.
         */
        coreDeviceThingName: string;
    }

    /**
     * Contains a gateway's platform information.
     */
    export interface GatewayPlatform {
        /**
         * A gateway that runs on AWS IoT Greengrass V1.
         */
        greengrass?: outputs.iotsitewise.GatewayGreengrass;
        /**
         * A gateway that runs on AWS IoT Greengrass V2.
         */
        greengrassV2?: outputs.iotsitewise.GatewayGreengrassV2;
        /**
         * A gateway that runs on Siemens Industrial Edge.
         */
        siemensIe?: outputs.iotsitewise.GatewaySiemensIe;
    }

    /**
     * Contains the IotCoreThingName of AWS IoT Thing that the gateway runs on.
     */
    export interface GatewaySiemensIe {
        /**
         * The name of the IoT Core Thing.
         */
        iotCoreThingName: string;
    }

}

export namespace iottwinmaker {
    /**
     * An object that sets information about a composite component type.
     */
    export interface ComponentTypeCompositeComponentType {
        /**
         * The id of the composite component type.
         */
        componentTypeId?: string;
    }

    /**
     * The data connector.
     */
    export interface ComponentTypeDataConnector {
        /**
         * A Boolean value that specifies whether the data connector is native to IoT TwinMaker.
         */
        isNative?: boolean;
        /**
         * The Lambda function associated with this data connector.
         */
        lambda?: outputs.iottwinmaker.ComponentTypeLambdaFunction;
    }

    /**
     * An object that specifies the data type of a property.
     */
    export interface ComponentTypeDataType {
        /**
         * The allowed values for this data type.
         */
        allowedValues?: outputs.iottwinmaker.ComponentTypeDataValue[];
        /**
         * The nested type in the data type.
         */
        nestedType?: outputs.iottwinmaker.ComponentTypeDataType;
        /**
         * A relationship that associates a component with another component.
         */
        relationship?: outputs.iottwinmaker.ComponentTypeRelationship;
        /**
         * The underlying type of the data type.
         */
        type: enums.iottwinmaker.ComponentTypeDataTypeType;
        /**
         * The unit of measure used in this data type.
         */
        unitOfMeasure?: string;
    }

    /**
     * An object that specifies a value for a property.
     */
    export interface ComponentTypeDataValue {
        /**
         * A Boolean value.
         */
        booleanValue?: boolean;
        /**
         * A double value.
         */
        doubleValue?: number;
        /**
         * An expression that produces the value.
         */
        expression?: string;
        /**
         * An integer value.
         */
        integerValue?: number;
        /**
         * A list of multiple values.
         */
        listValue?: outputs.iottwinmaker.ComponentTypeDataValue[];
        /**
         * A long value.
         */
        longValue?: number;
        /**
         * An object that maps strings to multiple DataValue objects. 
         */
        mapValue?: {[key: string]: outputs.iottwinmaker.ComponentTypeDataValue};
        /**
         * A value that relates a component to another component.
         */
        relationshipValue?: outputs.iottwinmaker.ComponentTypeDataValueRelationshipValueProperties;
        /**
         * A string value.
         */
        stringValue?: string;
    }

    /**
     * A value that relates a component to another component.
     */
    export interface ComponentTypeDataValueRelationshipValueProperties {
        targetComponentName?: string;
        targetEntityId?: string;
    }

    /**
     * The function of component type.
     */
    export interface ComponentTypeFunction {
        /**
         * The data connector.
         */
        implementedBy?: outputs.iottwinmaker.ComponentTypeDataConnector;
        /**
         * The required properties of the function.
         */
        requiredProperties?: string[];
        /**
         * The scope of the function.
         */
        scope?: enums.iottwinmaker.ComponentTypeFunctionScope;
    }

    export interface ComponentTypeLambdaFunction {
        arn: string;
    }

    /**
     * An object that sets information about a property.
     */
    export interface ComponentTypePropertyDefinition {
        /**
         * An object that specifies information about a property.
         */
        configurations?: {[key: string]: string};
        /**
         * An object that contains information about the data type.
         */
        dataType?: outputs.iottwinmaker.ComponentTypeDataType;
        /**
         * An object that contains the default value.
         */
        defaultValue?: outputs.iottwinmaker.ComponentTypeDataValue;
        /**
         * A Boolean value that specifies whether the property ID comes from an external data store.
         */
        isExternalId?: boolean;
        /**
         * A Boolean value that specifies whether the property is required.
         */
        isRequiredInEntity?: boolean;
        /**
         * A Boolean value that specifies whether the property is stored externally.
         */
        isStoredExternally?: boolean;
        /**
         * A Boolean value that specifies whether the property consists of time series data.
         */
        isTimeSeries?: boolean;
    }

    /**
     * An object that sets information about a property group.
     */
    export interface ComponentTypePropertyGroup {
        /**
         * The type of property group.
         */
        groupType?: enums.iottwinmaker.ComponentTypePropertyGroupGroupType;
        /**
         * The list of property names in the property group.
         */
        propertyNames?: string[];
    }

    /**
     * The type of the relationship.
     */
    export interface ComponentTypeRelationship {
        /**
         * The type of the relationship.
         */
        relationshipType?: string;
        /**
         * The ID of the target component type associated with this relationship.
         */
        targetComponentTypeId?: string;
    }

    export interface ComponentTypeStatus {
        /**
         * The component type error.
         */
        error?: any | outputs.iottwinmaker.ComponentTypeStatusErrorProperties;
        /**
         * The component type status state.
         */
        state?: enums.iottwinmaker.ComponentTypeStatusState;
    }

    /**
     * Error object with Message and Code.
     */
    export interface ComponentTypeStatusErrorProperties {
        code?: enums.iottwinmaker.ComponentTypeStatusErrorPropertiesCode;
        message?: string;
    }

    export interface EntityComponent {
        /**
         * The name of the component.
         */
        componentName?: string;
        /**
         * The ID of the component type.
         */
        componentTypeId?: string;
        /**
         * The name of the property definition set in the component.
         */
        definedIn?: string;
        /**
         * The description of the component.
         */
        description?: string;
        /**
         * An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
         */
        properties?: {[key: string]: outputs.iottwinmaker.EntityProperty};
        /**
         * An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
         */
        propertyGroups?: {[key: string]: outputs.iottwinmaker.EntityPropertyGroup};
        /**
         * The current status of the entity.
         */
        status?: outputs.iottwinmaker.EntityStatus;
    }

    export interface EntityCompositeComponent {
        /**
         * The name of the component.
         */
        componentName?: string;
        /**
         * The path of the component.
         */
        componentPath?: string;
        /**
         * The ID of the component type.
         */
        componentTypeId?: string;
        /**
         * The description of the component.
         */
        description?: string;
        /**
         * An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
         */
        properties?: {[key: string]: outputs.iottwinmaker.EntityProperty};
        /**
         * An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
         */
        propertyGroups?: {[key: string]: outputs.iottwinmaker.EntityPropertyGroup};
        /**
         * The current status of the component.
         */
        status?: outputs.iottwinmaker.EntityStatus;
    }

    /**
     * An object that specifies the data type of a property.
     */
    export interface EntityDataType {
        /**
         * The allowed values for this data type.
         */
        allowedValues?: outputs.iottwinmaker.EntityDataValue[];
        /**
         * The nested type in the data type.
         */
        nestedType?: outputs.iottwinmaker.EntityDataType;
        /**
         * A relationship that associates a component with another component.
         */
        relationship?: outputs.iottwinmaker.EntityRelationship;
        /**
         * The underlying type of the data type.
         */
        type?: enums.iottwinmaker.EntityDataTypeType;
        /**
         * The unit of measure used in this data type.
         */
        unitOfMeasure?: string;
    }

    /**
     * An object that specifies a value for a property.
     */
    export interface EntityDataValue {
        /**
         * A Boolean value.
         */
        booleanValue?: boolean;
        /**
         * A double value.
         */
        doubleValue?: number;
        /**
         * An expression that produces the value.
         */
        expression?: string;
        /**
         * An integer value.
         */
        integerValue?: number;
        /**
         * A list of multiple values.
         */
        listValue?: outputs.iottwinmaker.EntityDataValue[];
        /**
         * A long value.
         */
        longValue?: number;
        /**
         * An object that maps strings to multiple DataValue objects.
         */
        mapValue?: {[key: string]: outputs.iottwinmaker.EntityDataValue};
        /**
         * A value that relates a component to another component.
         */
        relationshipValue?: outputs.iottwinmaker.EntityDataValueRelationshipValueProperties;
        /**
         * A string value.
         */
        stringValue?: string;
    }

    /**
     * A value that relates a component to another component.
     */
    export interface EntityDataValueRelationshipValueProperties {
        targetComponentName?: string;
        targetEntityId?: string;
    }

    /**
     * An object that specifies information about a property definition.
     */
    export interface EntityDefinition {
        /**
         * An object that specifies information about a property configuration.
         */
        configuration?: {[key: string]: string};
        /**
         * An object that contains information about the data type.
         */
        dataType?: outputs.iottwinmaker.EntityDataType;
        /**
         * An object that contains the default value.
         */
        defaultValue?: outputs.iottwinmaker.EntityDataValue;
        /**
         * A Boolean value that specifies whether the property ID comes from an external data store.
         */
        isExternalId?: boolean;
        /**
         * A Boolean value that specifies whether the property definition can be updated.
         */
        isFinal?: boolean;
        /**
         * A Boolean value that specifies whether the property definition is imported from an external data store.
         */
        isImported?: boolean;
        /**
         * A Boolean value that specifies whether the property definition is inherited from a parent entity.
         */
        isInherited?: boolean;
        /**
         * A Boolean value that specifies whether the property is required.
         */
        isRequiredInEntity?: boolean;
        /**
         * A Boolean value that specifies whether the property is stored externally.
         */
        isStoredExternally?: boolean;
        /**
         * A Boolean value that specifies whether the property consists of time series data.
         */
        isTimeSeries?: boolean;
    }

    /**
     * An object that specifies information about a property.
     */
    export interface EntityProperty {
        /**
         * The definition of the property.
         */
        definition?: outputs.iottwinmaker.EntityDefinition;
        /**
         * The value of the property.
         */
        value?: outputs.iottwinmaker.EntityDataValue;
    }

    /**
     * An object that specifies information about a property group.
     */
    export interface EntityPropertyGroup {
        /**
         * The type of property group.
         */
        groupType?: enums.iottwinmaker.EntityPropertyGroupGroupType;
        /**
         * The list of property names in the property group.
         */
        propertyNames?: string[];
    }

    /**
     * The type of the relationship.
     */
    export interface EntityRelationship {
        /**
         * The type of the relationship.
         */
        relationshipType?: string;
        /**
         * The ID of the target component type associated with this relationship.
         */
        targetComponentTypeId?: string;
    }

    export interface EntityStatus {
        error?: any | outputs.iottwinmaker.EntityStatusErrorProperties;
        state?: enums.iottwinmaker.EntityStatusState;
    }

    /**
     * Error object with Message and Code.
     */
    export interface EntityStatusErrorProperties {
        code?: enums.iottwinmaker.EntityStatusErrorPropertiesCode;
        message?: string;
    }

}

export namespace iotwireless {
    export interface DeviceProfileLoRaWanDeviceProfile {
        /**
         * The ClassBTimeout value.
         */
        classBTimeout?: number;
        /**
         * The ClassCTimeout value.
         */
        classCTimeout?: number;
        /**
         * The list of values that make up the FactoryPresetFreqs value. Valid range of values include a minimum value of 1000000 and a maximum value of 16700000.
         */
        factoryPresetFreqsList?: number[];
        /**
         * The MAC version (such as OTAA 1.1 or OTAA 1.0.3) to use with this device profile.
         */
        macVersion?: string;
        /**
         * The MaxDutyCycle value.
         */
        maxDutyCycle?: number;
        /**
         * The MaxEIRP value.
         */
        maxEirp?: number;
        /**
         * The PingSlotDR value.
         */
        pingSlotDr?: number;
        /**
         * The PingSlotFreq value.
         */
        pingSlotFreq?: number;
        /**
         * The PingSlotPeriod value.
         */
        pingSlotPeriod?: number;
        /**
         * The version of regional parameters.
         */
        regParamsRevision?: string;
        /**
         * The frequency band (RFRegion) value.
         */
        rfRegion?: string;
        /**
         * The RXDataRate2 value.
         */
        rxDataRate2?: number;
        /**
         * The RXDelay1 value.
         */
        rxDelay1?: number;
        /**
         * The RXDROffset1 value.
         */
        rxDrOffset1?: number;
        /**
         * The RXFreq2 value.
         */
        rxFreq2?: number;
        /**
         * The Supports32BitFCnt value.
         */
        supports32BitFCnt?: boolean;
        /**
         * The SupportsClassB value.
         */
        supportsClassB?: boolean;
        /**
         * The SupportsClassC value.
         */
        supportsClassC?: boolean;
        /**
         * The SupportsJoin value.
         */
        supportsJoin?: boolean;
    }

    export interface FuotaTaskLoRaWan {
        /**
         * FUOTA task LoRaWAN RF region
         */
        rfRegion: string;
        /**
         * FUOTA task LoRaWAN start time
         */
        startTime?: string;
    }

    export interface MulticastGroupLoRaWan {
        /**
         * Multicast group LoRaWAN DL Class
         */
        dlClass: string;
        /**
         * Multicast group number of devices in group. Returned after successful read.
         */
        numberOfDevicesInGroup?: number;
        /**
         * Multicast group number of devices requested. Returned after successful read.
         */
        numberOfDevicesRequested?: number;
        /**
         * Multicast group LoRaWAN RF region
         */
        rfRegion: string;
    }

    export interface ServiceProfileLoRaWanServiceProfile {
        /**
         * The AddGWMetaData value.
         */
        addGwMetadata?: boolean;
        /**
         * The ChannelMask value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        channelMask?: string;
        /**
         * The DevStatusReqFreq value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        devStatusReqFreq?: number;
        /**
         * The DLBucketSize value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        dlBucketSize?: number;
        /**
         * The DLRate value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        dlRate?: number;
        /**
         * The DLRatePolicy value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        dlRatePolicy?: string;
        /**
         * The DRMax value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        drMax?: number;
        /**
         * The DRMin value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        drMin?: number;
        /**
         * The HRAllowed value that describes whether handover roaming is allowed.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        hrAllowed?: boolean;
        /**
         * The MinGwDiversity value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        minGwDiversity?: number;
        /**
         * The NwkGeoLoc value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        nwkGeoLoc?: boolean;
        /**
         * The PRAllowed value that describes whether passive roaming is allowed.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        prAllowed?: boolean;
        /**
         * The RAAllowed value that describes whether roaming activation is allowed.
         */
        raAllowed?: boolean;
        /**
         * The ReportDevStatusBattery value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        reportDevStatusBattery?: boolean;
        /**
         * The ReportDevStatusMargin value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        reportDevStatusMargin?: boolean;
        /**
         * The TargetPer value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        targetPer?: number;
        /**
         * The UlBucketSize value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        ulBucketSize?: number;
        /**
         * The ULRate value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        ulRate?: number;
        /**
         * The ULRatePolicy value.
         *
         * This property is `ReadOnly` and can't be inputted for create. It's returned with `Fn::GetAtt`
         */
        ulRatePolicy?: string;
    }

    export interface TaskDefinitionLoRaWanGatewayVersion {
        /**
         * The model number of the wireless gateway.
         */
        model?: string;
        /**
         * The version of the wireless gateway firmware.
         */
        packageVersion?: string;
        /**
         * The basic station version of the wireless gateway.
         */
        station?: string;
    }

    export interface TaskDefinitionLoRaWanUpdateGatewayTaskCreate {
        /**
         * The version of the gateways that should receive the update.
         */
        currentVersion?: outputs.iotwireless.TaskDefinitionLoRaWanGatewayVersion;
        /**
         * The CRC of the signature private key to check.
         */
        sigKeyCrc?: number;
        /**
         * The signature used to verify the update firmware.
         */
        updateSignature?: string;
        /**
         * The firmware version to update the gateway to.
         */
        updateVersion?: outputs.iotwireless.TaskDefinitionLoRaWanGatewayVersion;
    }

    export interface TaskDefinitionLoRaWanUpdateGatewayTaskEntry {
        /**
         * The version of the gateways that should receive the update.
         */
        currentVersion?: outputs.iotwireless.TaskDefinitionLoRaWanGatewayVersion;
        /**
         * The firmware version to update the gateway to.
         */
        updateVersion?: outputs.iotwireless.TaskDefinitionLoRaWanGatewayVersion;
    }

    export interface TaskDefinitionUpdateWirelessGatewayTaskCreate {
        /**
         * The properties that relate to the LoRaWAN wireless gateway.
         */
        loRaWan?: outputs.iotwireless.TaskDefinitionLoRaWanUpdateGatewayTaskCreate;
        /**
         * The IAM role used to read data from the S3 bucket.
         */
        updateDataRole?: string;
        /**
         * The link to the S3 bucket.
         */
        updateDataSource?: string;
    }

    /**
     * Trace content for your wireless gateway and wireless device resources
     */
    export interface TraceContentProperties {
        /**
         * The log level for a log message. The log levels can be disabled, or set to `ERROR` to display less verbose logs containing only error information, or to `INFO` for more detailed logs
         */
        logLevel?: enums.iotwireless.NetworkAnalyzerConfigurationLogLevel;
        /**
         * `FrameInfo` of your wireless device resources for the trace content. Use FrameInfo to debug the communication between your LoRaWAN end devices and the network server.
         */
        wirelessDeviceFrameInfo?: enums.iotwireless.NetworkAnalyzerConfigurationWirelessDeviceFrameInfo;
    }

    export interface WirelessDeviceAbpV10x {
        /**
         * The DevAddr value.
         */
        devAddr: string;
        /**
         * Session keys for ABP v1.0.x.
         */
        sessionKeys: outputs.iotwireless.WirelessDeviceSessionKeysAbpV10x;
    }

    export interface WirelessDeviceAbpV11 {
        /**
         * The DevAddr value.
         */
        devAddr: string;
        /**
         * Session keys for ABP v1.1.
         */
        sessionKeys: outputs.iotwireless.WirelessDeviceSessionKeysAbpV11;
    }

    export interface WirelessDeviceLoRaWanDevice {
        /**
         * ABP device object for LoRaWAN specification v1.0.x.
         */
        abpV10x?: outputs.iotwireless.WirelessDeviceAbpV10x;
        /**
         * ABP device object for create APIs for v1.1.
         */
        abpV11?: outputs.iotwireless.WirelessDeviceAbpV11;
        /**
         * The DevEUI value.
         */
        devEui?: string;
        /**
         * The ID of the device profile for the new wireless device.
         */
        deviceProfileId?: string;
        /**
         * OTAA device object for create APIs for v1.0.x
         */
        otaaV10x?: outputs.iotwireless.WirelessDeviceOtaaV10x;
        /**
         * OTAA device object for v1.1 for create APIs.
         */
        otaaV11?: outputs.iotwireless.WirelessDeviceOtaaV11;
        /**
         * The ID of the service profile.
         */
        serviceProfileId?: string;
    }

    export interface WirelessDeviceOtaaV10x {
        /**
         * The AppEUI value. You specify this value when using LoRaWAN versions v1.0.2 or v1.0.3.
         */
        appEui: string;
        /**
         * The AppKey value.
         */
        appKey: string;
    }

    export interface WirelessDeviceOtaaV11 {
        /**
         * The AppKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the AppKey value by storing it in the AWS Secrets Manager and use the [secretsmanager](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager) to reference this value.
         */
        appKey: string;
        /**
         * The JoinEUI value.
         */
        joinEui: string;
        /**
         * The NwkKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the NwkKey value by storing it in the AWS Secrets Manager and use the [secretsmanager](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager) to reference this value.
         */
        nwkKey: string;
    }

    export interface WirelessDeviceSessionKeysAbpV10x {
        /**
         * The AppSKey value.
         */
        appSKey: string;
        /**
         * The NwkKey value.
         */
        nwkSKey: string;
    }

    export interface WirelessDeviceSessionKeysAbpV11 {
        /**
         * The AppSKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the AppSKey value by storing it in the AWS Secrets Manager and use the [secretsmanager](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager) to reference this value.
         */
        appSKey: string;
        /**
         * The FNwkSIntKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the FNwkSIntKey value by storing it in the AWS Secrets Manager and use the [secretsmanager](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager) to reference this value.
         */
        fNwkSIntKey: string;
        /**
         * The NwkSEncKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the NwkSEncKey value by storing it in the AWS Secrets Manager and use the [secretsmanager](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager) to reference this value.
         */
        nwkSEncKey: string;
        /**
         * The SNwkSIntKey is a secret key, which you should handle in a similar way as you would an application password. You can protect the SNwkSIntKey value by storing it in the AWS Secrets Manager and use the [secretsmanager](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html#dynamic-references-secretsmanager) to reference this value.
         */
        sNwkSIntKey: string;
    }

    export interface WirelessGatewayLoRaWanGateway {
        /**
         * The gateway's EUI value.
         */
        gatewayEui: string;
        /**
         * The frequency band (RFRegion) value.
         */
        rfRegion: string;
    }

}

export namespace ivs {
    /**
     * Recording Destination Configuration.
     */
    export interface RecordingConfigurationDestinationConfiguration {
        /**
         * An S3 destination configuration where recorded videos will be stored. See the [S3DestinationConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ivs-recordingconfiguration-s3destinationconfiguration.html) property type for more information.
         */
        s3?: outputs.ivs.RecordingConfigurationS3DestinationConfiguration;
    }

    /**
     * Rendition Configuration describes which renditions should be recorded for a stream.
     */
    export interface RecordingConfigurationRenditionConfiguration {
        /**
         * Resolution Selection indicates which set of renditions are recorded for a stream.
         */
        renditionSelection?: enums.ivs.RecordingConfigurationRenditionConfigurationRenditionSelection;
        /**
         * Renditions indicates which renditions are recorded for a stream.
         */
        renditions?: enums.ivs.RecordingConfigurationRenditionConfigurationRenditionsItem[];
    }

    /**
     * Recording S3 Destination Configuration.
     */
    export interface RecordingConfigurationS3DestinationConfiguration {
        /**
         * Location (S3 bucket name) where recorded videos will be stored.
         */
        bucketName: string;
    }

    /**
     * Recording Thumbnail Configuration.
     */
    export interface RecordingConfigurationThumbnailConfiguration {
        /**
         * Thumbnail Recording Mode, which determines whether thumbnails are recorded at an interval or are disabled.
         */
        recordingMode?: enums.ivs.RecordingConfigurationThumbnailConfigurationRecordingMode;
        /**
         * Resolution indicates the desired resolution of recorded thumbnails.
         */
        resolution?: enums.ivs.RecordingConfigurationThumbnailConfigurationResolution;
        /**
         * Storage indicates the format in which thumbnails are recorded.
         */
        storage?: enums.ivs.RecordingConfigurationThumbnailConfigurationStorageItem[];
        /**
         * Target Interval Seconds defines the interval at which thumbnails are recorded. This field is required if RecordingMode is INTERVAL.
         */
        targetIntervalSeconds?: number;
    }

    /**
     * A complex type that describes an S3 location where recorded videos will be stored.
     */
    export interface StorageConfigurationS3StorageConfiguration {
        /**
         * Location (S3 bucket name) where recorded videos will be stored. Note that the StorageConfiguration and S3 bucket must be in the same region as the Composition.
         */
        bucketName: string;
    }

    /**
     * Video configuration. Default: video resolution 1280x720, bitrate 2500 kbps, 30 fps
     */
    export interface VideoProperties {
        /**
         * Bitrate for generated output, in bps. Default: 2500000.
         */
        bitrate?: number;
        /**
         * Video frame rate, in fps. Default: 30.
         */
        framerate?: number;
        /**
         * Video-resolution height. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 720.
         */
        height?: number;
        /**
         * Video-resolution width. Note that the maximum value is determined by width times height, such that the maximum total pixels is 2073600 (1920x1080 or 1080x1920). Default: 1280.
         */
        width?: number;
    }

}

export namespace ivschat {
    /**
     * CloudWatch destination configuration for IVS Chat logging.
     */
    export interface LoggingConfigurationCloudWatchLogsDestinationConfiguration {
        /**
         * Name of the Amazon CloudWatch Logs log group where chat activity will be logged.
         */
        logGroupName: string;
    }

    /**
     * Destination configuration for IVS Chat logging.
     */
    export interface LoggingConfigurationDestinationConfiguration {
        /**
         * An Amazon CloudWatch Logs destination configuration where chat activity will be logged.
         */
        cloudWatchLogs?: outputs.ivschat.LoggingConfigurationCloudWatchLogsDestinationConfiguration;
        /**
         * An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.
         */
        firehose?: outputs.ivschat.LoggingConfigurationFirehoseDestinationConfiguration;
        /**
         * An Amazon S3 destination configuration where chat activity will be logged.
         */
        s3?: outputs.ivschat.LoggingConfigurationS3DestinationConfiguration;
    }

    /**
     * Kinesis Firehose destination configuration for IVS Chat logging.
     */
    export interface LoggingConfigurationFirehoseDestinationConfiguration {
        /**
         * Name of the Amazon Kinesis Firehose delivery stream where chat activity will be logged.
         */
        deliveryStreamName: string;
    }

    /**
     * S3 destination configuration for IVS Chat logging.
     */
    export interface LoggingConfigurationS3DestinationConfiguration {
        /**
         * Name of the Amazon S3 bucket where chat activity will be logged.
         */
        bucketName: string;
    }

    /**
     * Configuration information for optional review of messages.
     */
    export interface RoomMessageReviewHandler {
        /**
         * Specifies the fallback behavior if the handler does not return a valid response, encounters an error, or times out.
         */
        fallbackResult?: enums.ivschat.RoomMessageReviewHandlerFallbackResult;
        /**
         * Identifier of the message review handler.
         */
        uri?: string;
    }

}

export namespace kafkaconnect {
    /**
     * Details of how to connect to an Apache Kafka cluster.
     */
    export interface ConnectorApacheKafkaCluster {
        /**
         * The bootstrap servers string of the Apache Kafka cluster.
         */
        bootstrapServers: string;
        /**
         * Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
         */
        vpc: outputs.kafkaconnect.ConnectorVpc;
    }

    /**
     * Details about auto scaling of a connector.
     */
    export interface ConnectorAutoScaling {
        /**
         * The maximum number of workers for a connector.
         */
        maxWorkerCount: number;
        /**
         * Specifies how many MSK Connect Units (MCU) as the minimum scaling unit.
         */
        mcuCount: number;
        /**
         * The minimum number of workers for a connector.
         */
        minWorkerCount: number;
        /**
         * The sacle-in policy for the connector.
         */
        scaleInPolicy: outputs.kafkaconnect.ConnectorScaleInPolicy;
        /**
         * The sacle-out policy for the connector.
         */
        scaleOutPolicy: outputs.kafkaconnect.ConnectorScaleOutPolicy;
    }

    /**
     * Information about the capacity allocated to the connector.
     */
    export interface ConnectorCapacity {
        /**
         * Information about the auto scaling parameters for the connector.
         */
        autoScaling?: outputs.kafkaconnect.ConnectorAutoScaling;
        /**
         * Details about a fixed capacity allocated to a connector.
         */
        provisionedCapacity?: outputs.kafkaconnect.ConnectorProvisionedCapacity;
    }

    /**
     * Details about delivering logs to Amazon CloudWatch Logs.
     */
    export interface ConnectorCloudWatchLogsLogDelivery {
        /**
         * Specifies whether the logs get sent to the specified CloudWatch Logs destination.
         */
        enabled: boolean;
        /**
         * The CloudWatch log group that is the destination for log delivery.
         */
        logGroup?: string;
    }

    /**
     * Details about a custom plugin.
     */
    export interface ConnectorCustomPlugin {
        /**
         * The Amazon Resource Name (ARN) of the custom plugin to use.
         */
        customPluginArn: string;
        /**
         * The revision of the custom plugin to use.
         */
        revision: number;
    }

    /**
     * Details about delivering logs to Amazon Kinesis Data Firehose.
     */
    export interface ConnectorFirehoseLogDelivery {
        /**
         * The Kinesis Data Firehose delivery stream that is the destination for log delivery.
         */
        deliveryStream?: string;
        /**
         * Specifies whether the logs get sent to the specified Kinesis Data Firehose delivery stream.
         */
        enabled: boolean;
    }

    /**
     * Details of how to connect to the Kafka cluster.
     */
    export interface ConnectorKafkaCluster {
        /**
         * The Apache Kafka cluster to which the connector is connected.
         */
        apacheKafkaCluster: outputs.kafkaconnect.ConnectorApacheKafkaCluster;
    }

    /**
     * Details of the client authentication used by the Kafka cluster.
     */
    export interface ConnectorKafkaClusterClientAuthentication {
        /**
         * The type of client authentication used to connect to the Apache Kafka cluster. Value NONE means that no client authentication is used.
         */
        authenticationType: enums.kafkaconnect.ConnectorKafkaClusterClientAuthenticationType;
    }

    /**
     * Details of encryption in transit to the Kafka cluster.
     */
    export interface ConnectorKafkaClusterEncryptionInTransit {
        /**
         * The type of encryption in transit to the Apache Kafka cluster.
         */
        encryptionType: enums.kafkaconnect.ConnectorKafkaClusterEncryptionInTransitType;
    }

    /**
     * Details of what logs are delivered and where they are delivered.
     */
    export interface ConnectorLogDelivery {
        /**
         * The workers can send worker logs to different destination types. This configuration specifies the details of these destinations.
         */
        workerLogDelivery: outputs.kafkaconnect.ConnectorWorkerLogDelivery;
    }

    /**
     * Details about a Kafka Connect plugin which will be used with the connector.
     */
    export interface ConnectorPlugin {
        /**
         * Details about a custom plugin.
         */
        customPlugin: outputs.kafkaconnect.ConnectorCustomPlugin;
    }

    /**
     * Details about a fixed capacity allocated to a connector.
     */
    export interface ConnectorProvisionedCapacity {
        /**
         * Specifies how many MSK Connect Units (MCU) are allocated to the connector.
         */
        mcuCount?: number;
        /**
         * Number of workers for a connector.
         */
        workerCount: number;
    }

    /**
     * Details about delivering logs to Amazon S3.
     */
    export interface ConnectorS3LogDelivery {
        /**
         * The name of the S3 bucket that is the destination for log delivery.
         */
        bucket?: string;
        /**
         * Specifies whether the logs get sent to the specified Amazon S3 destination.
         */
        enabled: boolean;
        /**
         * The S3 prefix that is the destination for log delivery.
         */
        prefix?: string;
    }

    /**
     * Information about the scale in policy of the connector.
     */
    export interface ConnectorScaleInPolicy {
        /**
         * Specifies the CPU utilization percentage threshold at which connector scale in should trigger.
         */
        cpuUtilizationPercentage: number;
    }

    /**
     * Information about the scale out policy of the connector.
     */
    export interface ConnectorScaleOutPolicy {
        /**
         * Specifies the CPU utilization percentage threshold at which connector scale out should trigger.
         */
        cpuUtilizationPercentage: number;
    }

    /**
     * Information about a VPC used with the connector.
     */
    export interface ConnectorVpc {
        /**
         * The AWS security groups to associate with the elastic network interfaces in order to specify what the connector has access to.
         */
        securityGroups: string[];
        /**
         * The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets.
         */
        subnets: string[];
    }

    /**
     * Specifies the worker configuration to use with the connector.
     */
    export interface ConnectorWorkerConfiguration {
        /**
         * The revision of the worker configuration to use.
         */
        revision: number;
        /**
         * The Amazon Resource Name (ARN) of the worker configuration to use.
         */
        workerConfigurationArn: string;
    }

    /**
     * Specifies where worker logs are delivered.
     */
    export interface ConnectorWorkerLogDelivery {
        /**
         * Details about delivering logs to Amazon CloudWatch Logs.
         */
        cloudWatchLogs?: outputs.kafkaconnect.ConnectorCloudWatchLogsLogDelivery;
        /**
         * Details about delivering logs to Amazon Kinesis Data Firehose.
         */
        firehose?: outputs.kafkaconnect.ConnectorFirehoseLogDelivery;
        /**
         * Details about delivering logs to Amazon S3.
         */
        s3?: outputs.kafkaconnect.ConnectorS3LogDelivery;
    }

    /**
     * Details about the custom plugin file.
     */
    export interface CustomPluginFileDescription {
        /**
         * The hex-encoded MD5 checksum of the custom plugin file. You can use it to validate the file.
         */
        fileMd5?: string;
        /**
         * The size in bytes of the custom plugin file. You can use it to validate the file.
         */
        fileSize?: number;
    }

    /**
     * Information about the location of a custom plugin.
     */
    export interface CustomPluginLocation {
        /**
         * The S3 bucket Amazon Resource Name (ARN), file key, and object version of the plugin file stored in Amazon S3.
         */
        s3Location: outputs.kafkaconnect.CustomPluginS3Location;
    }

    /**
     * The S3 bucket Amazon Resource Name (ARN), file key, and object version of the plugin file stored in Amazon S3.
     */
    export interface CustomPluginS3Location {
        /**
         * The Amazon Resource Name (ARN) of an S3 bucket.
         */
        bucketArn: string;
        /**
         * The file key for an object in an S3 bucket.
         */
        fileKey: string;
        /**
         * The version of an object in an S3 bucket.
         */
        objectVersion?: string;
    }

}

export namespace kendra {
    export interface DataSourceAccessControlListConfiguration {
        /**
         * Path to the AWS S3 bucket that contains the access control list files.
         */
        keyPath?: string;
    }

    export interface DataSourceAclConfiguration {
        /**
         * A list of groups, separated by semi-colons, that filters a query response based on user context. The document is only returned to users that are in one of the groups specified in the `UserContext` field of the [Query](https://docs.aws.amazon.com/kendra/latest/dg/API_Query.html) operation.
         */
        allowedGroupsColumnName: string;
    }

    export interface DataSourceColumnConfiguration {
        /**
         * One to five columns that indicate when a document in the database has changed.
         */
        changeDetectingColumns: string[];
        /**
         * The column that contains the contents of the document.
         */
        documentDataColumnName: string;
        /**
         * The column that provides the document's identifier.
         */
        documentIdColumnName: string;
        /**
         * The column that contains the title of the document.
         */
        documentTitleColumnName?: string;
        /**
         * An array of objects that map database column names to the corresponding fields in an index. You must first create the fields in the index using the [UpdateIndex](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateIndex.html) operation.
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
    }

    export interface DataSourceConfiguration {
        /**
         * Provides the configuration information to connect to Confluence as your data source.
         */
        confluenceConfiguration?: outputs.kendra.DataSourceConfluenceConfiguration;
        /**
         * Provides the configuration information to connect to a database as your data source.
         */
        databaseConfiguration?: outputs.kendra.DataSourceDatabaseConfiguration;
        /**
         * Provides the configuration information to connect to Google Drive as your data source.
         */
        googleDriveConfiguration?: outputs.kendra.DataSourceGoogleDriveConfiguration;
        /**
         * Provides the configuration information to connect to Microsoft OneDrive as your data source.
         */
        oneDriveConfiguration?: outputs.kendra.DataSourceOneDriveConfiguration;
        /**
         * Provides the configuration information to connect to an Amazon S3 bucket as your data source.
         *
         * > Amazon Kendra now supports an upgraded Amazon S3 connector.
         * > 
         * > You must now use the [TemplateConfiguration](https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html) object instead of the `S3DataSourceConfiguration` object to configure your connector.
         * > 
         * > Connectors configured using the older console and API architecture will continue to function as configured. However, you won't be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector.
         * > 
         * > We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.
         */
        s3Configuration?: outputs.kendra.DataSourceS3DataSourceConfiguration;
        /**
         * Provides the configuration information to connect to Salesforce as your data source.
         */
        salesforceConfiguration?: outputs.kendra.DataSourceSalesforceConfiguration;
        /**
         * Provides the configuration information to connect to ServiceNow as your data source.
         */
        serviceNowConfiguration?: outputs.kendra.DataSourceServiceNowConfiguration;
        /**
         * Provides the configuration information to connect to Microsoft SharePoint as your data source.
         */
        sharePointConfiguration?: outputs.kendra.DataSourceSharePointConfiguration;
        /**
         * Provides the configuration information required for Amazon Kendra Web Crawler.
         */
        webCrawlerConfiguration?: outputs.kendra.DataSourceWebCrawlerConfiguration;
        /**
         * Provides the configuration information to connect to Amazon WorkDocs as your data source.
         */
        workDocsConfiguration?: outputs.kendra.DataSourceWorkDocsConfiguration;
    }

    export interface DataSourceConfluenceAttachmentConfiguration {
        /**
         * Maps attributes or field names of Confluence attachments to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The Confluence data source field names must exist in your Confluence custom metadata.
         *
         * If you specify the `AttachentFieldMappings` parameter, you must specify at least one field mapping.
         */
        attachmentFieldMappings?: outputs.kendra.DataSourceConfluenceAttachmentToIndexFieldMapping[];
        /**
         * `TRUE` to index attachments of pages and blogs in Confluence.
         */
        crawlAttachments?: boolean;
    }

    export interface DataSourceConfluenceAttachmentToIndexFieldMapping {
        dataSourceFieldName: enums.kendra.DataSourceConfluenceAttachmentFieldName;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceConfluenceBlogConfiguration {
        /**
         * Maps attributes or field names of Confluence blogs to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The Confluence data source field names must exist in your Confluence custom metadata.
         *
         * If you specify the `BlogFieldMappings` parameter, you must specify at least one field mapping.
         */
        blogFieldMappings?: outputs.kendra.DataSourceConfluenceBlogToIndexFieldMapping[];
    }

    export interface DataSourceConfluenceBlogToIndexFieldMapping {
        dataSourceFieldName: enums.kendra.DataSourceConfluenceBlogFieldName;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceConfluenceConfiguration {
        /**
         * Configuration information for indexing attachments to Confluence blogs and pages.
         */
        attachmentConfiguration?: outputs.kendra.DataSourceConfluenceAttachmentConfiguration;
        /**
         * Configuration information for indexing Confluence blogs.
         */
        blogConfiguration?: outputs.kendra.DataSourceConfluenceBlogConfiguration;
        /**
         * A list of regular expression patterns to exclude certain blog posts, pages, spaces, or attachments in your Confluence. Content that matches the patterns are excluded from the index. Content that doesn't match the patterns is included in the index. If content matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the content isn't included in the index.
         */
        exclusionPatterns?: string[];
        /**
         * A list of regular expression patterns to include certain blog posts, pages, spaces, or attachments in your Confluence. Content that matches the patterns are included in the index. Content that doesn't match the patterns is excluded from the index. If content matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the content isn't included in the index.
         */
        inclusionPatterns?: string[];
        /**
         * Configuration information for indexing Confluence pages.
         */
        pageConfiguration?: outputs.kendra.DataSourceConfluencePageConfiguration;
        /**
         * The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that contains the user name and password required to connect to the Confluence instance. If you use Confluence Cloud, you use a generated API token as the password.
         *
         * You can also provide authentication credentials in the form of a personal access token. For more information, see [Using a Confluence data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-confluence.html) .
         */
        secretArn: string;
        /**
         * The URL of your Confluence instance. Use the full URL of the server. For example, *https://server.example.com:port/* . You can also use an IP address, for example, *https://192.168.1.113/* .
         */
        serverUrl: string;
        /**
         * Configuration information for indexing Confluence spaces.
         */
        spaceConfiguration?: outputs.kendra.DataSourceConfluenceSpaceConfiguration;
        /**
         * The version or the type of Confluence installation to connect to.
         */
        version: enums.kendra.DataSourceConfluenceVersion;
        /**
         * Configuration information for an Amazon Virtual Private Cloud to connect to your Confluence. For more information, see [Configuring a VPC](https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html) .
         */
        vpcConfiguration?: outputs.kendra.DataSourceVpcConfiguration;
    }

    export interface DataSourceConfluencePageConfiguration {
        /**
         * Maps attributes or field names of Confluence pages to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The Confluence data source field names must exist in your Confluence custom metadata.
         *
         * If you specify the `PageFieldMappings` parameter, you must specify at least one field mapping.
         */
        pageFieldMappings?: outputs.kendra.DataSourceConfluencePageToIndexFieldMapping[];
    }

    export interface DataSourceConfluencePageToIndexFieldMapping {
        dataSourceFieldName: enums.kendra.DataSourceConfluencePageFieldName;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceConfluenceSpaceConfiguration {
        /**
         * `TRUE` to index archived spaces.
         */
        crawlArchivedSpaces?: boolean;
        /**
         * `TRUE` to index personal spaces. You can add restrictions to items in personal spaces. If personal spaces are indexed, queries without user context information may return restricted items from a personal space in their results. For more information, see [Filtering on user context](https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html) .
         */
        crawlPersonalSpaces?: boolean;
        /**
         * A list of space keys of Confluence spaces. If you include a key, the blogs, documents, and attachments in the space are not indexed. If a space is in both the `ExcludeSpaces` and the `IncludeSpaces` list, the space is excluded.
         */
        excludeSpaces?: string[];
        /**
         * A list of space keys for Confluence spaces. If you include a key, the blogs, documents, and attachments in the space are indexed. Spaces that aren't in the list aren't indexed. A space in the list must exist. Otherwise, Amazon Kendra logs an error when the data source is synchronized. If a space is in both the `IncludeSpaces` and the `ExcludeSpaces` list, the space is excluded.
         */
        includeSpaces?: string[];
        /**
         * Maps attributes or field names of Confluence spaces to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to Confluence fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The Confluence data source field names must exist in your Confluence custom metadata.
         *
         * If you specify the `SpaceFieldMappings` parameter, you must specify at least one field mapping.
         */
        spaceFieldMappings?: outputs.kendra.DataSourceConfluenceSpaceToIndexFieldMapping[];
    }

    export interface DataSourceConfluenceSpaceToIndexFieldMapping {
        dataSourceFieldName: enums.kendra.DataSourceConfluenceSpaceFieldName;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceConnectionConfiguration {
        /**
         * The name of the host for the database. Can be either a string (host.subdomain.domain.tld) or an IPv4 or IPv6 address.
         */
        databaseHost: string;
        /**
         * The name of the database containing the document data.
         */
        databaseName: string;
        /**
         * The port that the database uses for connections.
         */
        databasePort: number;
        /**
         * The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that stores the credentials. The credentials should be a user-password pair. For more information, see [Using a Database Data Source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-database.html) . For more information about AWS Secrets Manager , see [What Is AWS Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) in the *AWS Secrets Manager* user guide.
         */
        secretArn: string;
        /**
         * The name of the table that contains the document data.
         */
        tableName: string;
    }

    export interface DataSourceCustomDocumentEnrichmentConfiguration {
        /**
         * Configuration information to alter document attributes or metadata fields and content when ingesting documents into Amazon Kendra.
         */
        inlineConfigurations?: outputs.kendra.DataSourceInlineCustomDocumentEnrichmentConfiguration[];
        /**
         * Configuration information for invoking a Lambda function in AWS Lambda on the structured documents with their metadata and text extracted. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see [Advanced data manipulation](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation) .
         */
        postExtractionHookConfiguration?: outputs.kendra.DataSourceHookConfiguration;
        /**
         * Configuration information for invoking a Lambda function in AWS Lambda on the original or raw documents before extracting their metadata and text. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see [Advanced data manipulation](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation) .
         */
        preExtractionHookConfiguration?: outputs.kendra.DataSourceHookConfiguration;
        /**
         * The Amazon Resource Name (ARN) of an IAM role with permission to run `PreExtractionHookConfiguration` and `PostExtractionHookConfiguration` for altering document metadata and content during the document ingestion process. For more information, see [an IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html) .
         */
        roleArn?: string;
    }

    export interface DataSourceDatabaseConfiguration {
        /**
         * Information about the database column that provides information for user context filtering.
         */
        aclConfiguration?: outputs.kendra.DataSourceAclConfiguration;
        /**
         * Information about where the index should get the document information from the database.
         */
        columnConfiguration: outputs.kendra.DataSourceColumnConfiguration;
        /**
         * Configuration information that's required to connect to a database.
         */
        connectionConfiguration: outputs.kendra.DataSourceConnectionConfiguration;
        /**
         * The type of database engine that runs the database.
         */
        databaseEngineType: enums.kendra.DataSourceDatabaseEngineType;
        /**
         * Provides information about how Amazon Kendra uses quote marks around SQL identifiers when querying a database data source.
         */
        sqlConfiguration?: outputs.kendra.DataSourceSqlConfiguration;
        /**
         * Provides information for connecting to an Amazon VPC.
         */
        vpcConfiguration?: outputs.kendra.DataSourceVpcConfiguration;
    }

    export interface DataSourceDocumentAttributeCondition {
        /**
         * The identifier of the document attribute used for the condition.
         *
         * For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.
         *
         * Amazon Kendra currently does not support `_document_body` as an attribute key used for the condition.
         */
        conditionDocumentAttributeKey: string;
        /**
         * The value used by the operator.
         *
         * For example, you can specify the value 'financial' for strings in the 'Source_URI' field that partially match or contain this value.
         */
        conditionOnValue?: outputs.kendra.DataSourceDocumentAttributeValue;
        /**
         * The condition operator.
         *
         * For example, you can use 'Contains' to partially match a string.
         */
        operator: enums.kendra.DataSourceConditionOperator;
    }

    export interface DataSourceDocumentAttributeTarget {
        targetDocumentAttributeKey: string;
        targetDocumentAttributeValue?: outputs.kendra.DataSourceDocumentAttributeValue;
        targetDocumentAttributeValueDeletion?: boolean;
    }

    export interface DataSourceDocumentAttributeValue {
        /**
         * A date expressed as an ISO 8601 string.
         *
         * It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.
         */
        dateValue?: string;
        /**
         * A long integer value.
         */
        longValue?: number;
        /**
         * A list of strings. The default maximum length or number of strings is 10.
         */
        stringListValue?: string[];
        /**
         * A string, such as "department".
         */
        stringValue?: string;
    }

    export interface DataSourceDocumentsMetadataConfiguration {
        /**
         * A prefix used to filter metadata configuration files in the AWS S3 bucket. The S3 bucket might contain multiple metadata files. Use `S3Prefix` to include only the desired metadata files.
         */
        s3Prefix?: string;
    }

    export interface DataSourceGoogleDriveConfiguration {
        /**
         * A list of MIME types to exclude from the index. All documents matching the specified MIME type are excluded.
         *
         * For a list of MIME types, see [Using a Google Workspace Drive data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html) .
         */
        excludeMimeTypes?: string[];
        /**
         * A list of identifiers or shared drives to exclude from the index. All files and folders stored on the shared drive are excluded.
         */
        excludeSharedDrives?: string[];
        /**
         * A list of email addresses of the users. Documents owned by these users are excluded from the index. Documents shared with excluded users are indexed unless they are excluded in another way.
         */
        excludeUserAccounts?: string[];
        /**
         * A list of regular expression patterns to exclude certain items in your Google Drive, including shared drives and users' My Drives. Items that match the patterns are excluded from the index. Items that don't match the patterns are included in the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
         */
        exclusionPatterns?: string[];
        /**
         * Maps Google Drive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to Google Drive fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The Google Drive data source field names must exist in your Google Drive custom metadata.
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        /**
         * A list of regular expression patterns to include certain items in your Google Drive, including shared drives and users' My Drives. Items that match the patterns are included in the index. Items that don't match the patterns are excluded from the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
         */
        inclusionPatterns?: string[];
        /**
         * The Amazon Resource Name (ARN) of a AWS Secrets Manager secret that contains the credentials required to connect to Google Drive. For more information, see [Using a Google Workspace Drive data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html) .
         */
        secretArn: string;
    }

    export interface DataSourceHookConfiguration {
        /**
         * The condition used for when a Lambda function should be invoked.
         *
         * For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.
         */
        invocationCondition?: outputs.kendra.DataSourceDocumentAttributeCondition;
        /**
         * The Amazon Resource Name (ARN) of an IAM role with permission to run a Lambda function during ingestion. For more information, see [an IAM roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html) .
         */
        lambdaArn: string;
        /**
         * Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see [Data contracts for Lambda functions](https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda) .
         */
        s3Bucket: string;
    }

    export interface DataSourceInlineCustomDocumentEnrichmentConfiguration {
        condition?: outputs.kendra.DataSourceDocumentAttributeCondition;
        documentContentDeletion?: boolean;
        target?: outputs.kendra.DataSourceDocumentAttributeTarget;
    }

    export interface DataSourceOneDriveConfiguration {
        /**
         * `TRUE` to disable local groups information.
         */
        disableLocalGroups?: boolean;
        /**
         * A list of regular expression patterns to exclude certain documents in your OneDrive. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.
         *
         * The pattern is applied to the file name.
         */
        exclusionPatterns?: string[];
        /**
         * A list of `DataSourceToIndexFieldMapping` objects that map OneDrive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to OneDrive fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The OneDrive data source field names must exist in your OneDrive custom metadata.
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        /**
         * A list of regular expression patterns to include certain documents in your OneDrive. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.
         *
         * The pattern is applied to the file name.
         */
        inclusionPatterns?: string[];
        /**
         * A list of user accounts whose documents should be indexed.
         */
        oneDriveUsers: outputs.kendra.DataSourceOneDriveUsers;
        /**
         * The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that contains the user name and password to connect to OneDrive. The user name should be the application ID for the OneDrive application, and the password is the application key for the OneDrive application.
         */
        secretArn: string;
        /**
         * The Azure Active Directory domain of the organization.
         */
        tenantDomain: string;
    }

    export interface DataSourceOneDriveUsers {
        /**
         * A list of users whose documents should be indexed. Specify the user names in email format, for example, `username@tenantdomain` . If you need to index the documents of more than 10 users, use the `OneDriveUserS3Path` field to specify the location of a file containing a list of users.
         */
        oneDriveUserList?: string[];
        /**
         * The S3 bucket location of a file containing a list of users whose documents should be indexed.
         */
        oneDriveUserS3Path?: outputs.kendra.DataSourceS3Path;
    }

    export interface DataSourceProxyConfiguration {
        /**
         * The Amazon Resource Name (ARN) of an AWS Secrets Manager secret. You create a secret to store your credentials in [AWS Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html)
         *
         * The credentials are optional. You use a secret if web proxy credentials are required to connect to a website host. Amazon Kendra currently support basic authentication to connect to a web proxy server. The secret stores your credentials.
         */
        credentials?: string;
        /**
         * The name of the website host you want to connect to via a web proxy server.
         *
         * For example, the host name of https://a.example.com/page1.html is "a.example.com".
         */
        host: string;
        /**
         * The port number of the website host you want to connect to via a web proxy server.
         *
         * For example, the port for https://a.example.com/page1.html is 443, the standard port for HTTPS.
         */
        port: number;
    }

    /**
     * S3 data source configuration
     */
    export interface DataSourceS3DataSourceConfiguration {
        /**
         * Provides the path to the S3 bucket that contains the user context filtering files for the data source. For the format of the file, see [Access control for S3 data sources](https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html) .
         */
        accessControlListConfiguration?: outputs.kendra.DataSourceAccessControlListConfiguration;
        /**
         * The name of the bucket that contains the documents.
         */
        bucketName: string;
        /**
         * Specifies document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.
         */
        documentsMetadataConfiguration?: outputs.kendra.DataSourceDocumentsMetadataConfiguration;
        /**
         * A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to exclude from your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:
         *
         * - *&#47;myapp/config/** —All files inside config directory.
         * - ***&#47;*.png* —All .png files in all directories.
         * - ***&#47;*.{png, ico, md}* —All .png, .ico or .md files in all directories.
         * - *&#47;myapp/src/**&#47;*.ts* —All .ts files inside src directory (and all its subdirectories).
         * - ***&#47;!(*.module).ts* —All .ts files but not .module.ts
         * - **.png , *.jpg* —All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).
         * - **internal** —All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.
         * - ***&#47;*internal** —All internal-related files in a directory and its subdirectories.
         *
         * For more examples, see [Use of Exclude and Include Filters](https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters) in the AWS CLI Command Reference.
         */
        exclusionPatterns?: string[];
        /**
         * A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to include in your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include:
         *
         * - *&#47;myapp/config/** —All files inside config directory.
         * - ***&#47;*.png* —All .png files in all directories.
         * - ***&#47;*.{png, ico, md}* —All .png, .ico or .md files in all directories.
         * - *&#47;myapp/src/**&#47;*.ts* —All .ts files inside src directory (and all its subdirectories).
         * - ***&#47;!(*.module).ts* —All .ts files but not .module.ts
         * - **.png , *.jpg* —All PNG and JPEG image files in a directory (files with the extensions .png and .jpg).
         * - **internal** —All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'.
         * - ***&#47;*internal** —All internal-related files in a directory and its subdirectories.
         *
         * For more examples, see [Use of Exclude and Include Filters](https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters) in the AWS CLI Command Reference.
         */
        inclusionPatterns?: string[];
        /**
         * A list of S3 prefixes for the documents that should be included in the index.
         */
        inclusionPrefixes?: string[];
    }

    export interface DataSourceS3Path {
        /**
         * The name of the S3 bucket that contains the file.
         */
        bucket: string;
        /**
         * The name of the file.
         */
        key: string;
    }

    export interface DataSourceSalesforceChatterFeedConfiguration {
        /**
         * The name of the column in the Salesforce FeedItem table that contains the content to index. Typically this is the `Body` column.
         */
        documentDataFieldName: string;
        /**
         * The name of the column in the Salesforce FeedItem table that contains the title of the document. This is typically the `Title` column.
         */
        documentTitleFieldName?: string;
        /**
         * Maps fields from a Salesforce chatter feed into Amazon Kendra index fields.
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        /**
         * Filters the documents in the feed based on status of the user. When you specify `ACTIVE_USERS` only documents from users who have an active account are indexed. When you specify `STANDARD_USER` only documents for Salesforce standard users are documented. You can specify both.
         */
        includeFilterTypes?: enums.kendra.DataSourceSalesforceChatterFeedIncludeFilterType[];
    }

    export interface DataSourceSalesforceConfiguration {
        /**
         * Configuration information for Salesforce chatter feeds.
         */
        chatterFeedConfiguration?: outputs.kendra.DataSourceSalesforceChatterFeedConfiguration;
        /**
         * Indicates whether Amazon Kendra should index attachments to Salesforce objects.
         */
        crawlAttachments?: boolean;
        /**
         * A list of regular expression patterns to exclude certain documents in your Salesforce. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.
         *
         * The pattern is applied to the name of the attached file.
         */
        excludeAttachmentFilePatterns?: string[];
        /**
         * A list of regular expression patterns to include certain documents in your Salesforce. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.
         *
         * The pattern is applied to the name of the attached file.
         */
        includeAttachmentFilePatterns?: string[];
        /**
         * Configuration information for the knowledge article types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge articles and the standard fields of knowledge articles, or the custom fields of custom knowledge articles, but not both.
         */
        knowledgeArticleConfiguration?: outputs.kendra.DataSourceSalesforceKnowledgeArticleConfiguration;
        /**
         * The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that contains the key/value pairs required to connect to your Salesforce instance. The secret must contain a JSON structure with the following keys:
         *
         * - authenticationUrl - The OAUTH endpoint that Amazon Kendra connects to get an OAUTH token.
         * - consumerKey - The application public key generated when you created your Salesforce application.
         * - consumerSecret - The application private key generated when you created your Salesforce application.
         * - password - The password associated with the user logging in to the Salesforce instance.
         * - securityToken - The token associated with the user logging in to the Salesforce instance.
         * - username - The user name of the user logging in to the Salesforce instance.
         */
        secretArn: string;
        /**
         * The instance URL for the Salesforce site that you want to index.
         */
        serverUrl: string;
        /**
         * Configuration information for processing attachments to Salesforce standard objects.
         */
        standardObjectAttachmentConfiguration?: outputs.kendra.DataSourceSalesforceStandardObjectAttachmentConfiguration;
        /**
         * Configuration of the Salesforce standard objects that Amazon Kendra indexes.
         */
        standardObjectConfigurations?: outputs.kendra.DataSourceSalesforceStandardObjectConfiguration[];
    }

    export interface DataSourceSalesforceCustomKnowledgeArticleTypeConfiguration {
        documentDataFieldName: string;
        documentTitleFieldName?: string;
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        name: string;
    }

    export interface DataSourceSalesforceKnowledgeArticleConfiguration {
        /**
         * Configuration information for custom Salesforce knowledge articles.
         */
        customKnowledgeArticleTypeConfigurations?: outputs.kendra.DataSourceSalesforceCustomKnowledgeArticleTypeConfiguration[];
        /**
         * Specifies the document states that should be included when Amazon Kendra indexes knowledge articles. You must specify at least one state.
         */
        includedStates: enums.kendra.DataSourceSalesforceKnowledgeArticleState[];
        /**
         * Configuration information for standard Salesforce knowledge articles.
         */
        standardKnowledgeArticleTypeConfiguration?: outputs.kendra.DataSourceSalesforceStandardKnowledgeArticleTypeConfiguration;
    }

    export interface DataSourceSalesforceStandardKnowledgeArticleTypeConfiguration {
        /**
         * The name of the field that contains the document data to index.
         */
        documentDataFieldName: string;
        /**
         * The name of the field that contains the document title.
         */
        documentTitleFieldName?: string;
        /**
         * Maps attributes or field names of the knowledge article to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to Salesforce fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The Salesforce data source field names must exist in your Salesforce custom metadata.
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
    }

    export interface DataSourceSalesforceStandardObjectAttachmentConfiguration {
        /**
         * The name of the field used for the document title.
         */
        documentTitleFieldName?: string;
        /**
         * One or more objects that map fields in attachments to Amazon Kendra index fields.
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
    }

    export interface DataSourceSalesforceStandardObjectConfiguration {
        documentDataFieldName: string;
        documentTitleFieldName?: string;
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        name: enums.kendra.DataSourceSalesforceStandardObjectName;
    }

    export interface DataSourceServiceNowConfiguration {
        /**
         * The type of authentication used to connect to the ServiceNow instance. If you choose `HTTP_BASIC` , Amazon Kendra is authenticated using the user name and password provided in the AWS Secrets Manager secret in the `SecretArn` field. If you choose `OAUTH2` , Amazon Kendra is authenticated using the credentials of client ID, client secret, user name and password.
         *
         * When you use `OAUTH2` authentication, you must generate a token and a client secret using the ServiceNow console. For more information, see [Using a ServiceNow data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html) .
         */
        authenticationType?: enums.kendra.DataSourceServiceNowAuthenticationType;
        /**
         * The ServiceNow instance that the data source connects to. The host endpoint should look like the following: *{instance}.service-now.com.*
         */
        hostUrl: string;
        /**
         * Configuration information for crawling knowledge articles in the ServiceNow site.
         */
        knowledgeArticleConfiguration?: outputs.kendra.DataSourceServiceNowKnowledgeArticleConfiguration;
        /**
         * The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the user name and password required to connect to the ServiceNow instance. You can also provide OAuth authentication credentials of user name, password, client ID, and client secret. For more information, see [Using a ServiceNow data source](https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html) .
         */
        secretArn: string;
        /**
         * Configuration information for crawling service catalogs in the ServiceNow site.
         */
        serviceCatalogConfiguration?: outputs.kendra.DataSourceServiceNowServiceCatalogConfiguration;
        /**
         * The identifier of the release that the ServiceNow host is running. If the host is not running the `LONDON` release, use `OTHERS` .
         */
        serviceNowBuildVersion: enums.kendra.DataSourceServiceNowBuildVersionType;
    }

    export interface DataSourceServiceNowKnowledgeArticleConfiguration {
        /**
         * `TRUE` to index attachments to knowledge articles.
         */
        crawlAttachments?: boolean;
        /**
         * The name of the ServiceNow field that is mapped to the index document contents field in the Amazon Kendra index.
         */
        documentDataFieldName: string;
        /**
         * The name of the ServiceNow field that is mapped to the index document title field.
         */
        documentTitleFieldName?: string;
        /**
         * A list of regular expression patterns applied to exclude certain knowledge article attachments. Attachments that match the patterns are excluded from the index. Items that don't match the patterns are included in the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
         */
        excludeAttachmentFilePatterns?: string[];
        /**
         * Maps attributes or field names of knoweldge articles to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to ServiceNow fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The ServiceNow data source field names must exist in your ServiceNow custom metadata.
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        /**
         * A query that selects the knowledge articles to index. The query can return articles from multiple knowledge bases, and the knowledge bases can be public or private.
         *
         * The query string must be one generated by the ServiceNow console. For more information, see [Specifying documents to index with a query](https://docs.aws.amazon.com/kendra/latest/dg/servicenow-query.html) .
         */
        filterQuery?: string;
        /**
         * A list of regular expression patterns applied to include knowledge article attachments. Attachments that match the patterns are included in the index. Items that don't match the patterns are excluded from the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
         */
        includeAttachmentFilePatterns?: string[];
    }

    export interface DataSourceServiceNowServiceCatalogConfiguration {
        /**
         * `TRUE` to index attachments to service catalog items.
         */
        crawlAttachments?: boolean;
        /**
         * The name of the ServiceNow field that is mapped to the index document contents field in the Amazon Kendra index.
         */
        documentDataFieldName: string;
        /**
         * The name of the ServiceNow field that is mapped to the index document title field.
         */
        documentTitleFieldName?: string;
        /**
         * A list of regular expression patterns to exclude certain attachments of catalogs in your ServiceNow. Item that match the patterns are excluded from the index. Items that don't match the patterns are included in the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
         *
         * The regex is applied to the file name of the attachment.
         */
        excludeAttachmentFilePatterns?: string[];
        /**
         * Maps attributes or field names of catalogs to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to ServiceNow fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The ServiceNow data source field names must exist in your ServiceNow custom metadata.
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        /**
         * A list of regular expression patterns to include certain attachments of catalogs in your ServiceNow. Item that match the patterns are included in the index. Items that don't match the patterns are excluded from the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.
         *
         * The regex is applied to the file name of the attachment.
         */
        includeAttachmentFilePatterns?: string[];
    }

    /**
     * SharePoint configuration
     */
    export interface DataSourceSharePointConfiguration {
        /**
         * `TRUE` to index document attachments.
         */
        crawlAttachments?: boolean;
        /**
         * `TRUE` to disable local groups information.
         */
        disableLocalGroups?: boolean;
        /**
         * The Microsoft SharePoint attribute field that contains the title of the document.
         */
        documentTitleFieldName?: string;
        /**
         * A list of regular expression patterns. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an exclusion pattern and an inclusion pattern, the document is not included in the index.
         *
         * The regex is applied to the display URL of the SharePoint document.
         */
        exclusionPatterns?: string[];
        /**
         * A list of `DataSourceToIndexFieldMapping` objects that map Microsoft SharePoint attributes or fields to Amazon Kendra index fields. You must first create the index fields using the [UpdateIndex](https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateIndex.html) operation before you map SharePoint attributes. For more information, see [Mapping Data Source Fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) .
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        /**
         * A list of regular expression patterns to include certain documents in your SharePoint. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index.
         *
         * The regex applies to the display URL of the SharePoint document.
         */
        inclusionPatterns?: string[];
        /**
         * The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that contains the user name and password required to connect to the SharePoint instance. For more information, see [Microsoft SharePoint](https://docs.aws.amazon.com/kendra/latest/dg/data-source-sharepoint.html) .
         */
        secretArn: string;
        /**
         * The version of Microsoft SharePoint that you use.
         */
        sharePointVersion: enums.kendra.DataSourceSharePointConfigurationSharePointVersion;
        /**
         * Information required to find a specific file in an Amazon S3 bucket.
         */
        sslCertificateS3Path?: outputs.kendra.DataSourceS3Path;
        /**
         * The Microsoft SharePoint site URLs for the documents you want to index.
         */
        urls: string[];
        /**
         * `TRUE` to use the SharePoint change log to determine which documents require updating in the index. Depending on the change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in SharePoint.
         */
        useChangeLog?: boolean;
        /**
         * Provides information for connecting to an Amazon VPC.
         */
        vpcConfiguration?: outputs.kendra.DataSourceVpcConfiguration;
    }

    export interface DataSourceSqlConfiguration {
        /**
         * Determines whether Amazon Kendra encloses SQL identifiers for tables and column names in double quotes (") when making a database query. You can set the value to `DOUBLE_QUOTES` or `NONE` .
         *
         * By default, Amazon Kendra passes SQL identifiers the way that they are entered into the data source configuration. It does not change the case of identifiers or enclose them in quotes.
         *
         * PostgreSQL internally converts uppercase characters to lower case characters in identifiers unless they are quoted. Choosing this option encloses identifiers in quotes so that PostgreSQL does not convert the character's case.
         *
         * For MySQL databases, you must enable the ansi_quotes option when you set this field to `DOUBLE_QUOTES` .
         */
        queryIdentifiersEnclosingOption?: enums.kendra.DataSourceQueryIdentifiersEnclosingOption;
    }

    export interface DataSourceToIndexFieldMapping {
        dataSourceFieldName: string;
        dateFieldFormat?: string;
        indexFieldName: string;
    }

    export interface DataSourceVpcConfiguration {
        /**
         * A list of identifiers of security groups within your Amazon VPC. The security groups should enable Amazon Kendra to connect to the data source.
         */
        securityGroupIds: string[];
        /**
         * A list of identifiers for subnets within your Amazon VPC. The subnets should be able to connect to each other in the VPC, and they should have outgoing access to the Internet through a NAT device.
         */
        subnetIds: string[];
    }

    export interface DataSourceWebCrawlerAuthenticationConfiguration {
        /**
         * The list of configuration information that's required to connect to and crawl a website host using basic authentication credentials.
         *
         * The list includes the name and port number of the website host.
         */
        basicAuthentication?: outputs.kendra.DataSourceWebCrawlerBasicAuthentication[];
    }

    export interface DataSourceWebCrawlerBasicAuthentication {
        credentials: string;
        host: string;
        port: number;
    }

    export interface DataSourceWebCrawlerConfiguration {
        /**
         * Configuration information required to connect to websites using authentication.
         *
         * You can connect to websites using basic authentication of user name and password. You use a secret in [AWS Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) to store your authentication credentials.
         *
         * You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS.
         */
        authenticationConfiguration?: outputs.kendra.DataSourceWebCrawlerAuthenticationConfiguration;
        /**
         * The 'depth' or number of levels from the seed level to crawl. For example, the seed URL page is depth 1 and any hyperlinks on this page that are also crawled are depth 2.
         */
        crawlDepth?: number;
        /**
         * The maximum size (in MB) of a web page or attachment to crawl.
         *
         * Files larger than this size (in MB) are skipped/not crawled.
         *
         * The default maximum size of a web page or attachment is set to 50 MB.
         */
        maxContentSizePerPageInMegaBytes?: number;
        /**
         * The maximum number of URLs on a web page to include when crawling a website. This number is per web page.
         *
         * As a website’s web pages are crawled, any URLs the web pages link to are also crawled. URLs on a web page are crawled in order of appearance.
         *
         * The default maximum links per page is 100.
         */
        maxLinksPerPage?: number;
        /**
         * The maximum number of URLs crawled per website host per minute.
         *
         * A minimum of one URL is required.
         *
         * The default maximum number of URLs crawled per website host per minute is 300.
         */
        maxUrlsPerMinuteCrawlRate?: number;
        /**
         * Configuration information required to connect to your internal websites via a web proxy.
         *
         * You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS.
         *
         * Web proxy credentials are optional and you can use them to connect to a web proxy server that requires basic authentication. To store web proxy credentials, you use a secret in [AWS Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html) .
         */
        proxyConfiguration?: outputs.kendra.DataSourceProxyConfiguration;
        /**
         * A list of regular expression patterns to exclude certain URLs to crawl. URLs that match the patterns are excluded from the index. URLs that don't match the patterns are included in the index. If a URL matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the URL file isn't included in the index.
         */
        urlExclusionPatterns?: string[];
        /**
         * A list of regular expression patterns to include certain URLs to crawl. URLs that match the patterns are included in the index. URLs that don't match the patterns are excluded from the index. If a URL matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the URL file isn't included in the index.
         */
        urlInclusionPatterns?: string[];
        /**
         * Specifies the seed or starting point URLs of the websites or the sitemap URLs of the websites you want to crawl.
         *
         * You can include website subdomains. You can list up to 100 seed URLs and up to three sitemap URLs.
         *
         * You can only crawl websites that use the secure communication protocol, Hypertext Transfer Protocol Secure (HTTPS). If you receive an error when crawling a website, it could be that the website is blocked from crawling.
         *
         * *When selecting websites to index, you must adhere to the [Amazon Acceptable Use Policy](https://docs.aws.amazon.com/aup/) and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own webpages, or webpages that you have authorization to index.*
         */
        urls: outputs.kendra.DataSourceWebCrawlerUrls;
    }

    export interface DataSourceWebCrawlerSeedUrlConfiguration {
        /**
         * The list of seed or starting point URLs of the websites you want to crawl.
         *
         * The list can include a maximum of 100 seed URLs.
         */
        seedUrls: string[];
        /**
         * You can choose one of the following modes:
         *
         * - `HOST_ONLY` —crawl only the website host names. For example, if the seed URL is "abc.example.com", then only URLs with host name "abc.example.com" are crawled.
         * - `SUBDOMAINS` —crawl the website host names with subdomains. For example, if the seed URL is "abc.example.com", then "a.abc.example.com" and "b.abc.example.com" are also crawled.
         * - `EVERYTHING` —crawl the website host names with subdomains and other domains that the web pages link to.
         *
         * The default mode is set to `HOST_ONLY` .
         */
        webCrawlerMode?: enums.kendra.DataSourceWebCrawlerSeedUrlConfigurationWebCrawlerMode;
    }

    export interface DataSourceWebCrawlerSiteMapsConfiguration {
        /**
         * The list of sitemap URLs of the websites you want to crawl.
         *
         * The list can include a maximum of three sitemap URLs.
         */
        siteMaps: string[];
    }

    export interface DataSourceWebCrawlerUrls {
        /**
         * Configuration of the seed or starting point URLs of the websites you want to crawl.
         *
         * You can choose to crawl only the website host names, or the website host names with subdomains, or the website host names with subdomains and other domains that the web pages link to.
         *
         * You can list up to 100 seed URLs.
         */
        seedUrlConfiguration?: outputs.kendra.DataSourceWebCrawlerSeedUrlConfiguration;
        /**
         * Configuration of the sitemap URLs of the websites you want to crawl.
         *
         * Only URLs belonging to the same website host names are crawled. You can list up to three sitemap URLs.
         */
        siteMapsConfiguration?: outputs.kendra.DataSourceWebCrawlerSiteMapsConfiguration;
    }

    export interface DataSourceWorkDocsConfiguration {
        /**
         * `TRUE` to include comments on documents in your index. Including comments in your index means each comment is a document that can be searched on.
         *
         * The default is set to `FALSE` .
         */
        crawlComments?: boolean;
        /**
         * A list of regular expression patterns to exclude certain files in your Amazon WorkDocs site repository. Files that match the patterns are excluded from the index. Files that don’t match the patterns are included in the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
         */
        exclusionPatterns?: string[];
        /**
         * A list of `DataSourceToIndexFieldMapping` objects that map Amazon WorkDocs data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the `UpdateIndex` API before you map to Amazon WorkDocs fields. For more information, see [Mapping data source fields](https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html) . The Amazon WorkDocs data source field names must exist in your Amazon WorkDocs custom metadata.
         */
        fieldMappings?: outputs.kendra.DataSourceToIndexFieldMapping[];
        /**
         * A list of regular expression patterns to include certain files in your Amazon WorkDocs site repository. Files that match the patterns are included in the index. Files that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.
         */
        inclusionPatterns?: string[];
        /**
         * The identifier of the directory corresponding to your Amazon WorkDocs site repository.
         *
         * You can find the organization ID in the [AWS Directory Service](https://docs.aws.amazon.com/directoryservicev2/) by going to *Active Directory* , then *Directories* . Your Amazon WorkDocs site directory has an ID, which is the organization ID. You can also set up a new Amazon WorkDocs directory in the AWS Directory Service console and enable a Amazon WorkDocs site for the directory in the Amazon WorkDocs console.
         */
        organizationId: string;
        /**
         * `TRUE` to use the Amazon WorkDocs change log to determine which documents require updating in the index. Depending on the change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in Amazon WorkDocs.
         */
        useChangeLog?: boolean;
    }

    export interface FaqS3Path {
        /**
         * The name of the S3 bucket that contains the file.
         */
        bucket: string;
        /**
         * The name of the file.
         */
        key: string;
    }

    export interface IndexCapacityUnitsConfiguration {
        /**
         * The amount of extra query capacity for an index and [GetQuerySuggestions](https://docs.aws.amazon.com/kendra/latest/dg/API_GetQuerySuggestions.html) capacity.
         *
         * A single extra capacity unit for an index provides 0.1 queries per second or approximately 8,000 queries per day. You can add up to 100 extra capacity units.
         *
         * `GetQuerySuggestions` capacity is five times the provisioned query capacity for an index, or the base capacity of 2.5 calls per second, whichever is higher. For example, the base capacity for an index is 0.1 queries per second, and `GetQuerySuggestions` capacity has a base of 2.5 calls per second. If you add another 0.1 queries per second to total 0.2 queries per second for an index, the `GetQuerySuggestions` capacity is 2.5 calls per second (higher than five times 0.2 queries per second).
         */
        queryCapacityUnits: number;
        /**
         * The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. You can add up to 100 extra capacity units.
         */
        storageCapacityUnits: number;
    }

    export interface IndexDocumentMetadataConfiguration {
        name: string;
        relevance?: outputs.kendra.IndexRelevance;
        search?: outputs.kendra.IndexSearch;
        type: enums.kendra.IndexDocumentAttributeValueType;
    }

    export interface IndexJsonTokenTypeConfiguration {
        groupAttributeField: string;
        userNameAttributeField: string;
    }

    export interface IndexJwtTokenTypeConfiguration {
        claimRegex?: string;
        groupAttributeField?: string;
        issuer?: string;
        keyLocation: enums.kendra.IndexKeyLocation;
        secretManagerArn?: string;
        url?: string;
        userNameAttributeField?: string;
    }

    export interface IndexRelevance {
        duration?: string;
        freshness?: boolean;
        importance?: number;
        rankOrder?: enums.kendra.IndexOrder;
        valueImportanceItems?: outputs.kendra.IndexValueImportanceItem[];
    }

    export interface IndexSearch {
        displayable?: boolean;
        facetable?: boolean;
        searchable?: boolean;
        sortable?: boolean;
    }

    export interface IndexServerSideEncryptionConfiguration {
        /**
         * The identifier of the AWS KMS key . Amazon Kendra doesn't support asymmetric keys.
         */
        kmsKeyId?: string;
    }

    export interface IndexUserTokenConfiguration {
        jsonTokenTypeConfiguration?: outputs.kendra.IndexJsonTokenTypeConfiguration;
        jwtTokenTypeConfiguration?: outputs.kendra.IndexJwtTokenTypeConfiguration;
    }

    export interface IndexValueImportanceItem {
        key?: string;
        value?: number;
    }

}

export namespace kendraranking {
    export interface ExecutionPlanCapacityUnitsConfiguration {
        /**
         * The amount of extra capacity for your rescore execution plan.
         *
         * A single extra capacity unit for a rescore execution plan provides 0.01 rescore requests per second. You can add up to 1000 extra capacity units.
         */
        rescoreCapacityUnits: number;
    }

}

export namespace kinesis {
    /**
     * When specified, enables or updates server-side encryption using an AWS KMS key for a specified stream. Removing this property from your stack template and updating your stack disables encryption.
     */
    export interface StreamEncryption {
        /**
         * The encryption type to use. The only valid value is KMS. 
         */
        encryptionType: enums.kinesis.StreamEncryptionEncryptionType;
        /**
         * The GUID for the customer-managed AWS KMS key to use for encryption. This value can be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either an alias or a key, or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis Data Streams by specifying the alias aws/kinesis.
         */
        keyId: string;
    }

    /**
     * When specified, enables or updates the mode of stream. Default is PROVISIONED.
     */
    export interface StreamModeDetails {
        /**
         * The mode of the stream
         */
        streamMode: enums.kinesis.StreamModeDetailsStreamMode;
    }

}

export namespace kinesisanalyticsv2 {
    /**
     * The configuration parameters for the default Amazon Glue database. You use this database for SQL queries that you write in a Kinesis Data Analytics Studio notebook.
     */
    export interface ApplicationCatalogConfiguration {
        /**
         * The configuration parameters for the default Amazon Glue database. You use this database for Apache Flink SQL queries and table API transforms that you write in a Kinesis Data Analytics Studio notebook.
         */
        glueDataCatalogConfiguration?: outputs.kinesisanalyticsv2.ApplicationGlueDataCatalogConfiguration;
    }

    /**
     * Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
     */
    export interface ApplicationCheckpointConfiguration {
        /**
         * Describes the interval in milliseconds between checkpoint operations.
         */
        checkpointInterval?: number;
        /**
         * Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
         */
        checkpointingEnabled?: boolean;
        /**
         * Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. You must set this property to `CUSTOM` in order to set the `CheckpointingEnabled`, `CheckpointInterval`, or `MinPauseBetweenCheckpoints` parameters.
         */
        configurationType: enums.kinesisanalyticsv2.ApplicationCheckpointConfigurationConfigurationType;
        /**
         * Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start. If a checkpoint operation takes longer than the CheckpointInterval, the application otherwise performs continual checkpoint operations. For more information, see Tuning Checkpointing in the Apache Flink Documentation.
         */
        minPauseBetweenCheckpoints?: number;
    }

    /**
     * Describes code configuration for an application.
     */
    export interface ApplicationCodeConfiguration {
        /**
         * The location and type of the application code.
         */
        codeContent: outputs.kinesisanalyticsv2.ApplicationCodeContent;
        /**
         * Specifies whether the code content is in text or zip format.
         */
        codeContentType: enums.kinesisanalyticsv2.ApplicationCodeConfigurationCodeContentType;
    }

    /**
     * Specifies either the application code, or the location of the application code, for a Flink-based Kinesis Data Analytics application.
     */
    export interface ApplicationCodeContent {
        /**
         * Information about the Amazon S3 bucket that contains the application code.
         */
        s3ContentLocation?: outputs.kinesisanalyticsv2.ApplicationS3ContentLocation;
        /**
         * The text-format code for a Flink-based Kinesis Data Analytics application.
         */
        textContent?: string;
        /**
         * The zip-format code for a Flink-based Kinesis Data Analytics application.
         */
        zipFileContent?: string;
    }

    /**
     * Specifies the creation parameters for a Kinesis Data Analytics application.
     */
    export interface ApplicationConfiguration {
        /**
         * The code location and type parameters for a Flink-based Kinesis Data Analytics application.
         */
        applicationCodeConfiguration?: outputs.kinesisanalyticsv2.ApplicationCodeConfiguration;
        /**
         * Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
         */
        applicationSnapshotConfiguration?: outputs.kinesisanalyticsv2.ApplicationSnapshotConfiguration;
        /**
         * Describes execution properties for a Flink-based Kinesis Data Analytics application.
         */
        environmentProperties?: outputs.kinesisanalyticsv2.ApplicationEnvironmentProperties;
        /**
         * The creation and update parameters for a Flink-based Kinesis Data Analytics application.
         */
        flinkApplicationConfiguration?: outputs.kinesisanalyticsv2.ApplicationFlinkApplicationConfiguration;
        /**
         * The creation and update parameters for a SQL-based Kinesis Data Analytics application.
         */
        sqlApplicationConfiguration?: outputs.kinesisanalyticsv2.ApplicationSqlApplicationConfiguration;
        /**
         * The array of descriptions of VPC configurations available to the application.
         */
        vpcConfigurations?: outputs.kinesisanalyticsv2.ApplicationVpcConfiguration[];
        /**
         * The configuration parameters for a Kinesis Data Analytics Studio notebook.
         */
        zeppelinApplicationConfiguration?: outputs.kinesisanalyticsv2.ApplicationZeppelinApplicationConfiguration;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, provides additional mapping information when the record format uses delimiters, such as CSV. For example, the following sample records use CSV format, where the records use the '\n' as the row delimiter and a comma (",") as the column delimiter:
     * `"name1", "address1"`
     * `"name2", "address2"`
     */
    export interface ApplicationCsvMappingParameters {
        /**
         * The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.
         */
        recordColumnDelimiter: string;
        /**
         * The row delimiter. For example, in a CSV format, '\n' is the typical row delimiter.
         */
        recordRowDelimiter: string;
    }

    /**
     * The configuration of connectors and user-defined functions.
     */
    export interface ApplicationCustomArtifactConfiguration {
        /**
         * Set this to either `UDF` or `DEPENDENCY_JAR`. `UDF` stands for user-defined functions. This type of artifact must be in an S3 bucket. A `DEPENDENCY_JAR` can be in either Maven or an S3 bucket.
         */
        artifactType: enums.kinesisanalyticsv2.ApplicationCustomArtifactConfigurationArtifactType;
        /**
         * The parameters required to fully specify a Maven reference.
         */
        mavenReference?: outputs.kinesisanalyticsv2.ApplicationMavenReference;
        /**
         * The location of the custom artifacts.
         */
        s3ContentLocation?: outputs.kinesisanalyticsv2.ApplicationS3ContentLocation;
    }

    /**
     * The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
     */
    export interface ApplicationDeployAsApplicationConfiguration {
        /**
         * The description of an Amazon S3 object that contains the Amazon Data Analytics application, including the Amazon Resource Name (ARN) of the S3 bucket, the name of the Amazon S3 object that contains the data, and the version number of the Amazon S3 object that contains the data.
         */
        s3ContentLocation: outputs.kinesisanalyticsv2.ApplicationS3ContentBaseLocation;
    }

    /**
     * Describes execution properties for a Flink-based Kinesis Data Analytics application.
     */
    export interface ApplicationEnvironmentProperties {
        /**
         * Describes the execution property groups.
         */
        propertyGroups?: outputs.kinesisanalyticsv2.ApplicationPropertyGroup[];
    }

    /**
     * Describes configuration parameters for a Flink-based Kinesis Data Analytics application or a Studio notebook.
     */
    export interface ApplicationFlinkApplicationConfiguration {
        /**
         * Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance. For more information, see Checkpoints for Fault Tolerance in the Apache Flink Documentation.
         */
        checkpointConfiguration?: outputs.kinesisanalyticsv2.ApplicationCheckpointConfiguration;
        /**
         * Describes configuration parameters for Amazon CloudWatch logging for an application.
         */
        monitoringConfiguration?: outputs.kinesisanalyticsv2.ApplicationMonitoringConfiguration;
        /**
         * Describes parameters for how an application executes multiple tasks simultaneously.
         */
        parallelismConfiguration?: outputs.kinesisanalyticsv2.ApplicationParallelismConfiguration;
    }

    /**
     * Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
     */
    export interface ApplicationFlinkRunConfiguration {
        /**
         * When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. Defaults to false. If you update your application without specifying this parameter, AllowNonRestoredState will be set to false, even if it was previously set to true.
         */
        allowNonRestoredState?: boolean;
    }

    /**
     * The configuration of the Glue Data Catalog that you use for Apache Flink SQL queries and table API transforms that you write in an application.
     */
    export interface ApplicationGlueDataCatalogConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the database.
         */
        databaseArn?: string;
    }

    /**
     * When you configure the application input for a SQL-based Kinesis Data Analytics application, you specify the streaming source, the in-application stream name that is created, and the mapping between the two.
     */
    export interface ApplicationInput {
        /**
         * Describes the number of in-application streams to create.
         */
        inputParallelism?: outputs.kinesisanalyticsv2.ApplicationInputParallelism;
        /**
         * The InputProcessingConfiguration for the input. An input processor transforms records as they are received from the stream, before the application's SQL code executes. Currently, the only input processing configuration available is InputLambdaProcessor.
         */
        inputProcessingConfiguration?: outputs.kinesisanalyticsv2.ApplicationInputProcessingConfiguration;
        /**
         * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
         */
        inputSchema: outputs.kinesisanalyticsv2.ApplicationInputSchema;
        /**
         * If the streaming source is an Amazon Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
         */
        kinesisFirehoseInput?: outputs.kinesisanalyticsv2.ApplicationKinesisFirehoseInput;
        /**
         * If the streaming source is an Amazon Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
         */
        kinesisStreamsInput?: outputs.kinesisanalyticsv2.ApplicationKinesisStreamsInput;
        /**
         * The name prefix to use when creating an in-application stream. Suppose that you specify a prefix `"MyInApplicationStream"`. Kinesis Data Analytics then creates one or more (as per the InputParallelism count you specified) in-application streams with the names `"MyInApplicationStream_001"`, `"MyInApplicationStream_002"`, and so on.
         */
        namePrefix: string;
    }

    /**
     * An object that contains the Amazon Resource Name (ARN) of the Amazon Lambda function that is used to preprocess records in the stream in a SQL-based Kinesis Data Analytics application.
     */
    export interface ApplicationInputLambdaProcessor {
        /**
         * The ARN of the Amazon Lambda function that operates on records in the stream.
         */
        resourceArn: string;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, describes the number of in-application streams to create for a given streaming source.
     */
    export interface ApplicationInputParallelism {
        /**
         * The number of in-application streams to create.
         */
        count?: number;
    }

    /**
     * For an SQL-based Amazon Kinesis Data Analytics application, describes a processor that is used to preprocess the records in the stream before being processed by your application code. Currently, the only input processor available is Amazon Lambda.
     */
    export interface ApplicationInputProcessingConfiguration {
        /**
         * The InputLambdaProcessor that is used to preprocess the records in the stream before being processed by your application code.
         */
        inputLambdaProcessor?: outputs.kinesisanalyticsv2.ApplicationInputLambdaProcessor;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
     */
    export interface ApplicationInputSchema {
        /**
         * A list of `RecordColumn` objects.
         */
        recordColumns: outputs.kinesisanalyticsv2.ApplicationRecordColumn[];
        /**
         * Specifies the encoding of the records in the streaming source. For example, UTF-8.
         */
        recordEncoding?: enums.kinesisanalyticsv2.ApplicationInputSchemaRecordEncoding;
        /**
         * Specifies the format of the records on the streaming source.
         */
        recordFormat: outputs.kinesisanalyticsv2.ApplicationRecordFormat;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, provides additional mapping information when JSON is the record format on the streaming source.
     */
    export interface ApplicationJsonMappingParameters {
        /**
         * The path to the top-level parent that contains the records.
         */
        recordRowPath: string;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, identifies a Kinesis Data Firehose delivery stream as the streaming source. You provide the delivery stream's Amazon Resource Name (ARN).
     */
    export interface ApplicationKinesisFirehoseInput {
        /**
         * The Amazon Resource Name (ARN) of the delivery stream.
         */
        resourceArn: string;
    }

    /**
     * Identifies a Kinesis data stream as the streaming source. You provide the stream's Amazon Resource Name (ARN).
     */
    export interface ApplicationKinesisStreamsInput {
        /**
         * The ARN of the input Kinesis data stream to read.
         */
        resourceArn: string;
    }

    /**
     * Describes the maintenance configuration for the application.
     */
    export interface ApplicationMaintenanceConfiguration {
        /**
         * The start time for the maintenance window.
         */
        applicationMaintenanceWindowStartTime: string;
    }

    /**
     * When you configure a SQL-based Kinesis Data Analytics application's input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
     */
    export interface ApplicationMappingParameters {
        /**
         * Provides additional mapping information when the record format uses delimiters (for example, CSV).
         */
        csvMappingParameters?: outputs.kinesisanalyticsv2.ApplicationCsvMappingParameters;
        /**
         * Provides additional mapping information when JSON is the record format on the streaming source.
         */
        jsonMappingParameters?: outputs.kinesisanalyticsv2.ApplicationJsonMappingParameters;
    }

    /**
     * The information required to specify a Maven reference. You can use Maven references to specify dependency JAR files.
     */
    export interface ApplicationMavenReference {
        /**
         * The artifact ID of the Maven reference.
         */
        artifactId: string;
        /**
         * The group ID of the Maven reference.
         */
        groupId: string;
        /**
         * The version of the Maven reference.
         */
        version: string;
    }

    /**
     * Describes configuration parameters for Amazon CloudWatch logging for a Java-based Kinesis Data Analytics application. For more information about CloudWatch logging, see Monitoring.
     */
    export interface ApplicationMonitoringConfiguration {
        /**
         * Describes whether to use the default CloudWatch logging configuration for an application. You must set this property to CUSTOM in order to set the LogLevel or MetricsLevel parameters.
         */
        configurationType: enums.kinesisanalyticsv2.ApplicationMonitoringConfigurationConfigurationType;
        /**
         * Describes the verbosity of the CloudWatch Logs for an application.
         */
        logLevel?: enums.kinesisanalyticsv2.ApplicationMonitoringConfigurationLogLevel;
        /**
         * Describes the granularity of the CloudWatch Logs for an application. The Parallelism level is not recommended for applications with a Parallelism over 64 due to excessive costs.
         */
        metricsLevel?: enums.kinesisanalyticsv2.ApplicationMonitoringConfigurationMetricsLevel;
    }

    /**
     * Describes parameters for how a Flink-based Kinesis Data Analytics application executes multiple tasks simultaneously. For more information about parallelism, see Parallel Execution in the Apache Flink Documentation
     */
    export interface ApplicationParallelismConfiguration {
        /**
         * Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
         */
        autoScalingEnabled?: boolean;
        /**
         * Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. You must set this property to `CUSTOM` in order to change your application's `AutoScalingEnabled`, `Parallelism`, or `ParallelismPerKPU` properties.
         */
        configurationType: enums.kinesisanalyticsv2.ApplicationParallelismConfigurationConfigurationType;
        /**
         * Describes the initial number of parallel tasks that a Java-based Kinesis Data Analytics application can perform. The Kinesis Data Analytics service can increase this number automatically if ParallelismConfiguration:AutoScalingEnabled is set to true.
         */
        parallelism?: number;
        /**
         * Describes the number of parallel tasks that a Java-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application. For more information about KPUs, see Amazon Kinesis Data Analytics Pricing.
         */
        parallelismPerKpu?: number;
    }

    /**
     * Property key-value pairs passed into an application.
     */
    export interface ApplicationPropertyGroup {
        /**
         * Describes the key of an application execution property key-value pair.
         */
        propertyGroupId?: string;
        /**
         * Describes the value of an application execution property key-value pair.
         */
        propertyMap?: {[key: string]: string};
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
     * Also used to describe the format of the reference data source.
     */
    export interface ApplicationRecordColumn {
        /**
         * A reference to the data element in the streaming input or the reference data source.
         */
        mapping?: string;
        /**
         * The name of the column that is created in the in-application input stream or reference table.
         */
        name: string;
        /**
         * The type of column created in the in-application input stream or reference table.
         */
        sqlType: string;
    }

    /**
     * For a SQL-based Kinesis Data Analytics application, describes the record format and relevant mapping information that should be applied to schematize the records on the stream.
     */
    export interface ApplicationRecordFormat {
        /**
         * When you configure application input at the time of creating or updating an application, provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
         */
        mappingParameters?: outputs.kinesisanalyticsv2.ApplicationMappingParameters;
        /**
         * The type of record format.
         */
        recordFormatType: enums.kinesisanalyticsv2.ApplicationRecordFormatRecordFormatType;
    }

    /**
     * Describes the restore behavior of a restarting application.
     */
    export interface ApplicationRestoreConfiguration {
        /**
         * Specifies how the application should be restored.
         */
        applicationRestoreType: enums.kinesisanalyticsv2.ApplicationRestoreConfigurationApplicationRestoreType;
        /**
         * The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if RESTORE_FROM_CUSTOM_SNAPSHOT is specified for the ApplicationRestoreType.
         */
        snapshotName?: string;
    }

    /**
     * Identifies the run configuration (start parameters) of a Kinesis Data Analytics application. This section is evaluated only on stack updates for applications in running RUNNING state and has no effect during manual application start.
     */
    export interface ApplicationRunConfiguration {
        /**
         * Describes the restore behavior of a restarting application.
         */
        applicationRestoreConfiguration?: outputs.kinesisanalyticsv2.ApplicationRestoreConfiguration;
        /**
         * Describes the starting parameters for a Flink-based Kinesis Data Analytics application.
         */
        flinkRunConfiguration?: outputs.kinesisanalyticsv2.ApplicationFlinkRunConfiguration;
    }

    /**
     * The base location of the Amazon Data Analytics application.
     */
    export interface ApplicationS3ContentBaseLocation {
        /**
         * The base path for the S3 bucket.
         */
        basePath?: string;
        /**
         * The Amazon Resource Name (ARN) of the S3 bucket.
         */
        bucketArn: string;
    }

    /**
     * The location of an application or a custom artifact.
     */
    export interface ApplicationS3ContentLocation {
        /**
         * The Amazon Resource Name (ARN) for the S3 bucket containing the application code.
         */
        bucketArn: string;
        /**
         * The file key for the object containing the application code.
         */
        fileKey: string;
        /**
         * The version of the object containing the application code.
         */
        objectVersion?: string;
    }

    /**
     * Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
     */
    export interface ApplicationSnapshotConfiguration {
        /**
         * Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
         */
        snapshotsEnabled: boolean;
    }

    /**
     * Describes the inputs, outputs, and reference data sources for a SQL-based Kinesis Data Analytics application.
     */
    export interface ApplicationSqlApplicationConfiguration {
        /**
         * The array of Input objects describing the input streams used by the application.
         */
        inputs?: outputs.kinesisanalyticsv2.ApplicationInput[];
    }

    /**
     * Describes the parameters of a VPC used by the application.
     */
    export interface ApplicationVpcConfiguration {
        /**
         * The array of SecurityGroup IDs used by the VPC configuration.
         */
        securityGroupIds: string[];
        /**
         * The array of Subnet IDs used by the VPC configuration.
         */
        subnetIds: string[];
    }

    /**
     * The configuration of a Kinesis Data Analytics Studio notebook.
     */
    export interface ApplicationZeppelinApplicationConfiguration {
        /**
         * The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.
         */
        catalogConfiguration?: outputs.kinesisanalyticsv2.ApplicationCatalogConfiguration;
        /**
         * A list of CustomArtifactConfiguration objects.
         */
        customArtifactsConfiguration?: outputs.kinesisanalyticsv2.ApplicationCustomArtifactConfiguration[];
        /**
         * The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.
         */
        deployAsApplicationConfiguration?: outputs.kinesisanalyticsv2.ApplicationDeployAsApplicationConfiguration;
        /**
         * The monitoring configuration of a Kinesis Data Analytics Studio notebook.
         */
        monitoringConfiguration?: outputs.kinesisanalyticsv2.ApplicationZeppelinMonitoringConfiguration;
    }

    /**
     * Describes configuration parameters for Amazon CloudWatch logging for a Kinesis Data Analytics Studio notebook. For more information about CloudWatch logging, see Monitoring.
     */
    export interface ApplicationZeppelinMonitoringConfiguration {
        /**
         * The verbosity of the CloudWatch Logs for an application. You can set it to `INFO`, `WARN`, `ERROR`, or `DEBUG`.
         */
        logLevel?: enums.kinesisanalyticsv2.ApplicationZeppelinMonitoringConfigurationLogLevel;
    }

}

export namespace kinesisfirehose {
    export interface DeliveryStreamAmazonOpenSearchServerlessBufferingHints {
        /**
         * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
         */
        intervalInSeconds?: number;
        /**
         * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
         *
         * We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
         */
        sizeInMbs?: number;
    }

    export interface DeliveryStreamAmazonOpenSearchServerlessDestinationConfiguration {
        /**
         * The buffering options. If no value is specified, the default values for AmazonopensearchserviceBufferingHints are used.
         */
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamAmazonOpenSearchServerlessBufferingHints;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        /**
         * The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
         */
        collectionEndpoint?: string;
        /**
         * The Serverless offering for Amazon OpenSearch Service index name.
         */
        indexName: string;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        /**
         * The retry behavior in case Firehose is unable to deliver documents to the Serverless offering for Amazon OpenSearch Service. The default value is 300 (5 minutes).
         */
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamAmazonOpenSearchServerlessRetryOptions;
        /**
         * The Amazon Resource Name (ARN) of the IAM role to be assumed by Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.
         */
        roleArn: string;
        /**
         * Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with AmazonOpenSearchService-failed/ appended to the key prefix. When set to AllDocuments, Firehose delivers all incoming records to Amazon S3, and also writes failed documents with AmazonOpenSearchService-failed/ appended to the prefix.
         */
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamAmazonOpenSearchServerlessDestinationConfigurationS3BackupMode;
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        vpcConfiguration?: outputs.kinesisfirehose.DeliveryStreamVpcConfiguration;
    }

    export interface DeliveryStreamAmazonOpenSearchServerlessRetryOptions {
        /**
         * After an initial failure to deliver to the Serverless offering for Amazon OpenSearch Service, the total amount of time during which Firehose retries delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
         */
        durationInSeconds?: number;
    }

    export interface DeliveryStreamAmazonopensearchserviceBufferingHints {
        /**
         * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
         */
        intervalInSeconds?: number;
        /**
         * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
         */
        sizeInMbs?: number;
    }

    export interface DeliveryStreamAmazonopensearchserviceDestinationConfiguration {
        /**
         * The buffering options. If no value is specified, the default values for AmazonopensearchserviceBufferingHints are used.
         */
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamAmazonopensearchserviceBufferingHints;
        /**
         * Describes the Amazon CloudWatch logging options for your delivery stream.
         */
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        /**
         * The endpoint to use when communicating with the cluster. Specify either this ClusterEndpoint or the DomainARN field.
         */
        clusterEndpoint?: string;
        /**
         * Indicates the method for setting up document ID. The supported methods are Firehose generated document ID and OpenSearch Service generated document ID.
         */
        documentIdOptions?: outputs.kinesisfirehose.DeliveryStreamDocumentIdOptions;
        /**
         * The ARN of the Amazon OpenSearch Service domain.
         */
        domainArn?: string;
        /**
         * The Amazon OpenSearch Service index name.
         */
        indexName: string;
        /**
         * The Amazon OpenSearch Service index rotation period. Index rotation appends a timestamp to the IndexName to facilitate the expiration of old data.
         */
        indexRotationPeriod?: enums.kinesisfirehose.DeliveryStreamAmazonopensearchserviceDestinationConfigurationIndexRotationPeriod;
        /**
         * Describes a data processing configuration.
         */
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        /**
         * The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon OpenSearch Service. The default value is 300 (5 minutes).
         */
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamAmazonopensearchserviceRetryOptions;
        /**
         * The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Amazon OpenSearch Service Configuration API and for indexing documents.
         */
        roleArn: string;
        /**
         * Defines how documents should be delivered to Amazon S3.
         */
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamAmazonopensearchserviceDestinationConfigurationS3BackupMode;
        /**
         * Describes the configuration of a destination in Amazon S3.
         */
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        /**
         * The Amazon OpenSearch Service type name.
         */
        typeName?: string;
        /**
         * The details of the VPC of the Amazon OpenSearch Service destination.
         */
        vpcConfiguration?: outputs.kinesisfirehose.DeliveryStreamVpcConfiguration;
    }

    export interface DeliveryStreamAmazonopensearchserviceRetryOptions {
        /**
         * After an initial failure to deliver to Amazon OpenSearch Service, the total amount of time during which Kinesis Data Firehose retries delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
         */
        durationInSeconds?: number;
    }

    export interface DeliveryStreamAuthenticationConfiguration {
        /**
         * The type of connectivity used to access the Amazon MSK cluster.
         */
        connectivity: enums.kinesisfirehose.DeliveryStreamAuthenticationConfigurationConnectivity;
        /**
         * The ARN of the role used to access the Amazon MSK cluster.
         */
        roleArn: string;
    }

    export interface DeliveryStreamBufferingHints {
        /**
         * The length of time, in seconds, that Kinesis Data Firehose buffers incoming data before delivering it to the destination. For valid values, see the `IntervalInSeconds` content for the [BufferingHints](https://docs.aws.amazon.com/firehose/latest/APIReference/API_BufferingHints.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
         */
        intervalInSeconds?: number;
        /**
         * The size of the buffer, in MBs, that Kinesis Data Firehose uses for incoming data before delivering it to the destination. For valid values, see the `SizeInMBs` content for the [BufferingHints](https://docs.aws.amazon.com/firehose/latest/APIReference/API_BufferingHints.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
         */
        sizeInMbs?: number;
    }

    export interface DeliveryStreamCloudWatchLoggingOptions {
        /**
         * Indicates whether CloudWatch Logs logging is enabled.
         */
        enabled?: boolean;
        /**
         * The name of the CloudWatch Logs log group that contains the log stream that Kinesis Data Firehose will use.
         *
         * Conditional. If you enable logging, you must specify this property.
         */
        logGroupName?: string;
        /**
         * The name of the CloudWatch Logs log stream that Kinesis Data Firehose uses to send logs about data delivery.
         *
         * Conditional. If you enable logging, you must specify this property.
         */
        logStreamName?: string;
    }

    export interface DeliveryStreamCopyCommand {
        /**
         * Parameters to use with the Amazon Redshift `COPY` command. For examples, see the `CopyOptions` content for the [CopyCommand](https://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
         */
        copyOptions?: string;
        /**
         * A comma-separated list of column names.
         */
        dataTableColumns?: string;
        /**
         * The name of the target table. The table must already exist in the database.
         */
        dataTableName: string;
    }

    export interface DeliveryStreamDataFormatConversionConfiguration {
        /**
         * Defaults to `true` . Set it to `false` if you want to disable format conversion while preserving the configuration details.
         */
        enabled?: boolean;
        /**
         * Specifies the deserializer that you want Firehose to use to convert the format of your data from JSON. This parameter is required if `Enabled` is set to true.
         */
        inputFormatConfiguration?: outputs.kinesisfirehose.DeliveryStreamInputFormatConfiguration;
        /**
         * Specifies the serializer that you want Firehose to use to convert the format of your data to the Parquet or ORC format. This parameter is required if `Enabled` is set to true.
         */
        outputFormatConfiguration?: outputs.kinesisfirehose.DeliveryStreamOutputFormatConfiguration;
        /**
         * Specifies the AWS Glue Data Catalog table that contains the column information. This parameter is required if `Enabled` is set to true.
         */
        schemaConfiguration?: outputs.kinesisfirehose.DeliveryStreamSchemaConfiguration;
    }

    export interface DeliveryStreamDeserializer {
        /**
         * The native Hive / HCatalog JsonSerDe. Used by Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
         */
        hiveJsonSerDe?: outputs.kinesisfirehose.DeliveryStreamHiveJsonSerDe;
        /**
         * The OpenX SerDe. Used by Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
         */
        openXJsonSerDe?: outputs.kinesisfirehose.DeliveryStreamOpenXJsonSerDe;
    }

    export interface DeliveryStreamDocumentIdOptions {
        /**
         * When the `FIREHOSE_DEFAULT` option is chosen, Firehose generates a unique document ID for each record based on a unique internal identifier. The generated document ID is stable across multiple delivery attempts, which helps prevent the same record from being indexed multiple times with different document IDs.
         *
         * When the `NO_DOCUMENT_ID` option is chosen, Firehose does not include any document IDs in the requests it sends to the Amazon OpenSearch Service. This causes the Amazon OpenSearch Service domain to generate document IDs. In case of multiple delivery attempts, this may cause the same record to be indexed more than once with different document IDs. This option enables write-heavy operations, such as the ingestion of logs and observability data, to consume less resources in the Amazon OpenSearch Service domain, resulting in improved performance.
         */
        defaultDocumentIdFormat: enums.kinesisfirehose.DeliveryStreamDocumentIdOptionsDefaultDocumentIdFormat;
    }

    export interface DeliveryStreamDynamicPartitioningConfiguration {
        /**
         * Specifies whether dynamic partitioning is enabled for this Kinesis Data Firehose delivery stream.
         */
        enabled?: boolean;
        /**
         * Specifies the retry behavior in case Kinesis Data Firehose is unable to deliver data to an Amazon S3 prefix.
         */
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamRetryOptions;
    }

    export interface DeliveryStreamElasticsearchBufferingHints {
        /**
         * The length of time, in seconds, that Kinesis Data Firehose buffers incoming data before delivering it to the destination. For valid values, see the `IntervalInSeconds` content for the [BufferingHints](https://docs.aws.amazon.com/firehose/latest/APIReference/API_BufferingHints.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
         */
        intervalInSeconds?: number;
        /**
         * The size of the buffer, in MBs, that Kinesis Data Firehose uses for incoming data before delivering it to the destination. For valid values, see the `SizeInMBs` content for the [BufferingHints](https://docs.aws.amazon.com/firehose/latest/APIReference/API_BufferingHints.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
         */
        sizeInMbs?: number;
    }

    export interface DeliveryStreamElasticsearchDestinationConfiguration {
        /**
         * Configures how Kinesis Data Firehose buffers incoming data while delivering it to the Amazon ES domain.
         */
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamElasticsearchBufferingHints;
        /**
         * The Amazon CloudWatch Logs logging options for the delivery stream.
         */
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        /**
         * The endpoint to use when communicating with the cluster. Specify either this `ClusterEndpoint` or the `DomainARN` field.
         */
        clusterEndpoint?: string;
        /**
         * Indicates the method for setting up document ID. The supported methods are Firehose generated document ID and OpenSearch Service generated document ID.
         */
        documentIdOptions?: outputs.kinesisfirehose.DeliveryStreamDocumentIdOptions;
        /**
         * The ARN of the Amazon ES domain. The IAM role must have permissions for `DescribeElasticsearchDomain` , `DescribeElasticsearchDomains` , and `DescribeElasticsearchDomainConfig` after assuming the role specified in *RoleARN* .
         *
         * Specify either `ClusterEndpoint` or `DomainARN` .
         */
        domainArn?: string;
        /**
         * The name of the Elasticsearch index to which Kinesis Data Firehose adds data for indexing.
         */
        indexName: string;
        /**
         * The frequency of Elasticsearch index rotation. If you enable index rotation, Kinesis Data Firehose appends a portion of the UTC arrival timestamp to the specified index name, and rotates the appended timestamp accordingly. For more information, see [Index Rotation for the Amazon ES Destination](https://docs.aws.amazon.com/firehose/latest/dev/basic-deliver.html#es-index-rotation) in the *Amazon Kinesis Data Firehose Developer Guide* .
         */
        indexRotationPeriod?: enums.kinesisfirehose.DeliveryStreamElasticsearchDestinationConfigurationIndexRotationPeriod;
        /**
         * The data processing configuration for the Kinesis Data Firehose delivery stream.
         */
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        /**
         * The retry behavior when Kinesis Data Firehose is unable to deliver data to Amazon ES.
         */
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamElasticsearchRetryOptions;
        /**
         * The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see [Controlling Access with Amazon Kinesis Data Firehose](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html) .
         */
        roleArn: string;
        /**
         * The condition under which Kinesis Data Firehose delivers data to Amazon Simple Storage Service (Amazon S3). You can send Amazon S3 all documents (all data) or only the documents that Kinesis Data Firehose could not deliver to the Amazon ES destination. For more information and valid values, see the `S3BackupMode` content for the [ElasticsearchDestinationConfiguration](https://docs.aws.amazon.com/firehose/latest/APIReference/API_ElasticsearchDestinationConfiguration.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
         */
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamElasticsearchDestinationConfigurationS3BackupMode;
        /**
         * The S3 bucket where Kinesis Data Firehose backs up incoming data.
         */
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        /**
         * The Elasticsearch type name that Amazon ES adds to documents when indexing data.
         */
        typeName?: string;
        /**
         * The details of the VPC of the Amazon ES destination.
         */
        vpcConfiguration?: outputs.kinesisfirehose.DeliveryStreamVpcConfiguration;
    }

    export interface DeliveryStreamElasticsearchRetryOptions {
        /**
         * After an initial failure to deliver to Amazon ES, the total amount of time during which Kinesis Data Firehose re-attempts delivery (including the first attempt). If Kinesis Data Firehose can't deliver the data within the specified time, it writes the data to the backup S3 bucket. For valid values, see the `DurationInSeconds` content for the [ElasticsearchRetryOptions](https://docs.aws.amazon.com/firehose/latest/APIReference/API_ElasticsearchRetryOptions.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
         */
        durationInSeconds?: number;
    }

    export interface DeliveryStreamEncryptionConfiguration {
        /**
         * The AWS Key Management Service ( AWS KMS) encryption key that Amazon S3 uses to encrypt your data.
         */
        kmsEncryptionConfig?: outputs.kinesisfirehose.DeliveryStreamKmsEncryptionConfig;
        /**
         * Disables encryption. For valid values, see the `NoEncryptionConfig` content for the [EncryptionConfiguration](https://docs.aws.amazon.com/firehose/latest/APIReference/API_EncryptionConfiguration.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
         */
        noEncryptionConfig?: enums.kinesisfirehose.DeliveryStreamEncryptionConfigurationNoEncryptionConfig;
    }

    export interface DeliveryStreamEncryptionConfigurationInput {
        /**
         * If you set `KeyType` to `CUSTOMER_MANAGED_CMK` , you must specify the Amazon Resource Name (ARN) of the CMK. If you set `KeyType` to `AWS _OWNED_CMK` , Firehose uses a service-account CMK.
         */
        keyArn?: string;
        /**
         * Indicates the type of customer master key (CMK) to use for encryption. The default setting is `AWS_OWNED_CMK` . For more information about CMKs, see [Customer Master Keys (CMKs)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys) .
         *
         * You can use a CMK of type CUSTOMER_MANAGED_CMK to encrypt up to 500 delivery streams.
         *
         * > To encrypt your delivery stream, use symmetric CMKs. Kinesis Data Firehose doesn't support asymmetric CMKs. For information about symmetric and asymmetric CMKs, see [About Symmetric and Asymmetric CMKs](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-concepts.html) in the AWS Key Management Service developer guide.
         */
        keyType: enums.kinesisfirehose.DeliveryStreamEncryptionConfigurationInputKeyType;
    }

    export interface DeliveryStreamExtendedS3DestinationConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the Amazon S3 bucket. For constraints, see [ExtendedS3DestinationConfiguration](https://docs.aws.amazon.com/firehose/latest/APIReference/API_ExtendedS3DestinationConfiguration.html) in the *Amazon Kinesis Data Firehose API Reference* .
         */
        bucketArn: string;
        /**
         * The buffering option.
         */
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamBufferingHints;
        /**
         * The Amazon CloudWatch logging options for your delivery stream.
         */
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        /**
         * The compression format. If no value is specified, the default is `UNCOMPRESSED` .
         */
        compressionFormat?: enums.kinesisfirehose.DeliveryStreamExtendedS3DestinationConfigurationCompressionFormat;
        /**
         * The time zone you prefer. UTC is the default.
         */
        customTimeZone?: string;
        /**
         * The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
         */
        dataFormatConversionConfiguration?: outputs.kinesisfirehose.DeliveryStreamDataFormatConversionConfiguration;
        /**
         * The configuration of the dynamic partitioning mechanism that creates targeted data sets from the streaming data by partitioning it based on partition keys.
         */
        dynamicPartitioningConfiguration?: outputs.kinesisfirehose.DeliveryStreamDynamicPartitioningConfiguration;
        /**
         * The encryption configuration for the Kinesis Data Firehose delivery stream. The default value is `NoEncryption` .
         */
        encryptionConfiguration?: outputs.kinesisfirehose.DeliveryStreamEncryptionConfiguration;
        /**
         * A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html) .
         */
        errorOutputPrefix?: string;
        /**
         * Specify a file extension. It will override the default file extension
         */
        fileExtension?: string;
        /**
         * The `YYYY/MM/DD/HH` time format prefix is automatically used for delivered Amazon S3 files. For more information, see [ExtendedS3DestinationConfiguration](https://docs.aws.amazon.com/firehose/latest/APIReference/API_ExtendedS3DestinationConfiguration.html) in the *Amazon Kinesis Data Firehose API Reference* .
         */
        prefix?: string;
        /**
         * The data processing configuration for the Kinesis Data Firehose delivery stream.
         */
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        /**
         * The Amazon Resource Name (ARN) of the AWS credentials. For constraints, see [ExtendedS3DestinationConfiguration](https://docs.aws.amazon.com/firehose/latest/APIReference/API_ExtendedS3DestinationConfiguration.html) in the *Amazon Kinesis Data Firehose API Reference* .
         */
        roleArn: string;
        /**
         * The configuration for backup in Amazon S3.
         */
        s3BackupConfiguration?: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        /**
         * The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
         */
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamExtendedS3DestinationConfigurationS3BackupMode;
    }

    export interface DeliveryStreamHiveJsonSerDe {
        /**
         * Indicates how you want Firehose to parse the date and timestamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://docs.aws.amazon.com/https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html) . You can also use the special value `millis` to parse timestamps in epoch milliseconds. If you don't specify a format, Firehose uses `java.sql.Timestamp::valueOf` by default.
         */
        timestampFormats?: string[];
    }

    export interface DeliveryStreamHttpEndpointCommonAttribute {
        /**
         * The name of the HTTP endpoint common attribute.
         */
        attributeName: string;
        /**
         * The value of the HTTP endpoint common attribute.
         */
        attributeValue: string;
    }

    export interface DeliveryStreamHttpEndpointConfiguration {
        /**
         * The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
         */
        accessKey?: string;
        /**
         * The name of the HTTP endpoint selected as the destination.
         */
        name?: string;
        /**
         * The URL of the HTTP endpoint selected as the destination.
         */
        url: string;
    }

    export interface DeliveryStreamHttpEndpointDestinationConfiguration {
        /**
         * The buffering options that can be used before data is delivered to the specified destination. Kinesis Data Firehose treats these options as hints, and it might choose to use more optimal values. The SizeInMBs and IntervalInSeconds parameters are optional. However, if you specify a value for one of them, you must also provide a value for the other.
         */
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamBufferingHints;
        /**
         * Describes the Amazon CloudWatch logging options for your delivery stream.
         */
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        /**
         * The configuration of the HTTP endpoint selected as the destination.
         */
        endpointConfiguration: outputs.kinesisfirehose.DeliveryStreamHttpEndpointConfiguration;
        /**
         * Describes the data processing configuration.
         */
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        /**
         * The configuration of the request sent to the HTTP endpoint specified as the destination.
         */
        requestConfiguration?: outputs.kinesisfirehose.DeliveryStreamHttpEndpointRequestConfiguration;
        /**
         * Describes the retry behavior in case Kinesis Data Firehose is unable to deliver data to the specified HTTP endpoint destination, or if it doesn't receive a valid acknowledgment of receipt from the specified HTTP endpoint destination.
         */
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamRetryOptions;
        /**
         * Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs.
         */
        roleArn?: string;
        /**
         * Describes the S3 bucket backup options for the data that Kinesis Data Firehose delivers to the HTTP endpoint destination. You can back up all documents (AllData) or only the documents that Kinesis Data Firehose could not deliver to the specified HTTP endpoint destination (FailedDataOnly).
         */
        s3BackupMode?: string;
        /**
         * Describes the configuration of a destination in Amazon S3.
         */
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
    }

    export interface DeliveryStreamHttpEndpointRequestConfiguration {
        /**
         * Describes the metadata sent to the HTTP endpoint destination.
         */
        commonAttributes?: outputs.kinesisfirehose.DeliveryStreamHttpEndpointCommonAttribute[];
        /**
         * Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. For more information, see Content-Encoding in MDN Web Docs, the official Mozilla documentation.
         */
        contentEncoding?: enums.kinesisfirehose.DeliveryStreamHttpEndpointRequestConfigurationContentEncoding;
    }

    export interface DeliveryStreamInputFormatConfiguration {
        /**
         * Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. If both are non-null, the server rejects the request.
         */
        deserializer?: outputs.kinesisfirehose.DeliveryStreamDeserializer;
    }

    export interface DeliveryStreamKinesisStreamSourceConfiguration {
        /**
         * The ARN of the source Kinesis data stream.
         */
        kinesisStreamArn: string;
        /**
         * The ARN of the role that provides access to the source Kinesis data stream.
         */
        roleArn: string;
    }

    export interface DeliveryStreamKmsEncryptionConfig {
        /**
         * The Amazon Resource Name (ARN) of the AWS KMS encryption key that Amazon S3 uses to encrypt data delivered by the Kinesis Data Firehose stream. The key must belong to the same region as the destination S3 bucket.
         */
        awskmsKeyArn: string;
    }

    export interface DeliveryStreamMskSourceConfiguration {
        /**
         * The authentication configuration of the Amazon MSK cluster.
         */
        authenticationConfiguration: outputs.kinesisfirehose.DeliveryStreamAuthenticationConfiguration;
        /**
         * The ARN of the Amazon MSK cluster.
         */
        mskClusterArn: string;
        /**
         * The topic name within the Amazon MSK cluster.
         */
        topicName: string;
    }

    export interface DeliveryStreamOpenXJsonSerDe {
        /**
         * When set to `true` , which is the default, Firehose converts JSON keys to lowercase before deserializing them.
         */
        caseInsensitive?: boolean;
        /**
         * Maps column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, `timestamp` is a Hive keyword. If you have a JSON key named `timestamp` , set this parameter to `{"ts": "timestamp"}` to map this key to a column named `ts` .
         */
        columnToJsonKeyMappings?: {[key: string]: string};
        /**
         * When set to `true` , specifies that the names of the keys include dots and that you want Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option.
         *
         * The default is `false` .
         */
        convertDotsInJsonKeysToUnderscores?: boolean;
    }

    export interface DeliveryStreamOrcSerDe {
        /**
         * The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Firehose uses this value for padding calculations.
         */
        blockSizeBytes?: number;
        /**
         * The column names for which you want Firehose to create bloom filters. The default is `null` .
         */
        bloomFilterColumns?: string[];
        /**
         * The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is 0.05, the minimum is 0, and the maximum is 1.
         */
        bloomFilterFalsePositiveProbability?: number;
        /**
         * The compression code to use over data blocks. The default is `SNAPPY` .
         */
        compression?: string;
        /**
         * Represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to 1.
         */
        dictionaryKeyThreshold?: number;
        /**
         * Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false` .
         */
        enablePadding?: boolean;
        /**
         * The version of the file to write. The possible values are `V0_11` and `V0_12` . The default is `V0_12` .
         */
        formatVersion?: string;
        /**
         * A number between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is 0.05, which means 5 percent of stripe size.
         *
         * For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task.
         *
         * Kinesis Data Firehose ignores this parameter when `EnablePadding` is `false` .
         */
        paddingTolerance?: number;
        /**
         * The number of rows between index entries. The default is 10,000 and the minimum is 1,000.
         */
        rowIndexStride?: number;
        /**
         * The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
         */
        stripeSizeBytes?: number;
    }

    export interface DeliveryStreamOutputFormatConfiguration {
        /**
         * Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. If both are non-null, the server rejects the request.
         */
        serializer?: outputs.kinesisfirehose.DeliveryStreamSerializer;
    }

    export interface DeliveryStreamParquetSerDe {
        /**
         * The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Firehose uses this value for padding calculations.
         */
        blockSizeBytes?: number;
        /**
         * The compression code to use over data blocks. The possible values are `UNCOMPRESSED` , `SNAPPY` , and `GZIP` , with the default being `SNAPPY` . Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
         */
        compression?: string;
        /**
         * Indicates whether to enable dictionary compression.
         */
        enableDictionaryCompression?: boolean;
        /**
         * The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.
         */
        maxPaddingBytes?: number;
        /**
         * The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
         */
        pageSizeBytes?: number;
        /**
         * Indicates the version of row format to output. The possible values are `V1` and `V2` . The default is `V1` .
         */
        writerVersion?: string;
    }

    export interface DeliveryStreamProcessingConfiguration {
        /**
         * Indicates whether data processing is enabled (true) or disabled (false).
         */
        enabled?: boolean;
        /**
         * The data processors.
         */
        processors?: outputs.kinesisfirehose.DeliveryStreamProcessor[];
    }

    export interface DeliveryStreamProcessor {
        /**
         * The processor parameters.
         */
        parameters?: outputs.kinesisfirehose.DeliveryStreamProcessorParameter[];
        /**
         * The type of processor. Valid values: `Lambda` .
         */
        type: enums.kinesisfirehose.DeliveryStreamProcessorType;
    }

    export interface DeliveryStreamProcessorParameter {
        /**
         * The name of the parameter. Currently the following default values are supported: 3 for `NumberOfRetries` and 60 for the `BufferIntervalInSeconds` . The `BufferSizeInMBs` ranges between 0.2 MB and up to 3MB. The default buffering hint is 1MB for all destinations, except Splunk. For Splunk, the default buffering hint is 256 KB.
         */
        parameterName: string;
        /**
         * The parameter value.
         */
        parameterValue: string;
    }

    export interface DeliveryStreamRedshiftDestinationConfiguration {
        /**
         * The CloudWatch logging options for your delivery stream.
         */
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        /**
         * The connection string that Kinesis Data Firehose uses to connect to the Amazon Redshift cluster.
         */
        clusterJdbcurl: string;
        /**
         * Configures the Amazon Redshift `COPY` command that Kinesis Data Firehose uses to load data into the cluster from the Amazon S3 bucket.
         */
        copyCommand: outputs.kinesisfirehose.DeliveryStreamCopyCommand;
        /**
         * The password for the Amazon Redshift user that you specified in the `Username` property.
         */
        password: string;
        /**
         * The data processing configuration for the Kinesis Data Firehose delivery stream.
         */
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        /**
         * The retry behavior in case Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
         */
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamRedshiftRetryOptions;
        /**
         * The ARN of the AWS Identity and Access Management (IAM) role that grants Kinesis Data Firehose access to your Amazon S3 bucket and AWS KMS (if you enable data encryption). For more information, see [Grant Kinesis Data Firehose Access to an Amazon Redshift Destination](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-rs) in the *Amazon Kinesis Data Firehose Developer Guide* .
         */
        roleArn: string;
        /**
         * The configuration for backup in Amazon S3.
         */
        s3BackupConfiguration?: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        /**
         * The Amazon S3 backup mode. After you create a delivery stream, you can update it to enable Amazon S3 backup if it is disabled. If backup is enabled, you can't update the delivery stream to disable it.
         */
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamRedshiftDestinationConfigurationS3BackupMode;
        /**
         * The S3 bucket where Kinesis Data Firehose first delivers data. After the data is in the bucket, Kinesis Data Firehose uses the `COPY` command to load the data into the Amazon Redshift cluster. For the Amazon S3 bucket's compression format, don't specify `SNAPPY` or `ZIP` because the Amazon Redshift `COPY` command doesn't support them.
         */
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        /**
         * The Amazon Redshift user that has permission to access the Amazon Redshift cluster. This user must have `INSERT` privileges for copying data from the Amazon S3 bucket to the cluster.
         */
        username: string;
    }

    export interface DeliveryStreamRedshiftRetryOptions {
        /**
         * The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of `DurationInSeconds` is 0 (zero) or if the first delivery attempt takes longer than the current value.
         */
        durationInSeconds?: number;
    }

    export interface DeliveryStreamRetryOptions {
        /**
         * The total amount of time that Kinesis Data Firehose spends on retries. This duration starts after the initial attempt to send data to the custom destination via HTTPS endpoint fails. It doesn't include the periods during which Kinesis Data Firehose waits for acknowledgment from the specified destination after each attempt.
         */
        durationInSeconds?: number;
    }

    export interface DeliveryStreamS3DestinationConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the Amazon S3 bucket to send data to.
         */
        bucketArn: string;
        /**
         * Configures how Kinesis Data Firehose buffers incoming data while delivering it to the Amazon S3 bucket.
         */
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamBufferingHints;
        /**
         * The CloudWatch logging options for your delivery stream.
         */
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        /**
         * The type of compression that Kinesis Data Firehose uses to compress the data that it delivers to the Amazon S3 bucket. For valid values, see the `CompressionFormat` content for the [S3DestinationConfiguration](https://docs.aws.amazon.com/firehose/latest/APIReference/API_S3DestinationConfiguration.html) data type in the *Amazon Kinesis Data Firehose API Reference* .
         */
        compressionFormat?: enums.kinesisfirehose.DeliveryStreamS3DestinationConfigurationCompressionFormat;
        /**
         * Configures Amazon Simple Storage Service (Amazon S3) server-side encryption. Kinesis Data Firehose uses AWS Key Management Service ( AWS KMS) to encrypt the data that it delivers to your Amazon S3 bucket.
         */
        encryptionConfiguration?: outputs.kinesisfirehose.DeliveryStreamEncryptionConfiguration;
        /**
         * A prefix that Kinesis Data Firehose evaluates and adds to failed records before writing them to S3. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see [Custom Prefixes for Amazon S3 Objects](https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html) .
         */
        errorOutputPrefix?: string;
        /**
         * A prefix that Kinesis Data Firehose adds to the files that it delivers to the Amazon S3 bucket. The prefix helps you identify the files that Kinesis Data Firehose delivered.
         */
        prefix?: string;
        /**
         * The ARN of an AWS Identity and Access Management (IAM) role that grants Kinesis Data Firehose access to your Amazon S3 bucket and AWS KMS (if you enable data encryption). For more information, see [Grant Kinesis Data Firehose Access to an Amazon S3 Destination](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3) in the *Amazon Kinesis Data Firehose Developer Guide* .
         */
        roleArn: string;
    }

    export interface DeliveryStreamSchemaConfiguration {
        /**
         * The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
         */
        catalogId?: string;
        /**
         * Specifies the name of the AWS Glue database that contains the schema for the output data.
         *
         * > If the `SchemaConfiguration` request parameter is used as part of invoking the `CreateDeliveryStream` API, then the `DatabaseName` property is required and its value must be specified.
         */
        databaseName?: string;
        /**
         * If you don't specify an AWS Region, the default is the current Region.
         */
        region?: string;
        /**
         * The role that Firehose can use to access AWS Glue. This role must be in the same account you use for Firehose. Cross-account roles aren't allowed.
         *
         * > If the `SchemaConfiguration` request parameter is used as part of invoking the `CreateDeliveryStream` API, then the `RoleARN` property is required and its value must be specified.
         */
        roleArn?: string;
        /**
         * Specifies the AWS Glue table that contains the column information that constitutes your data schema.
         *
         * > If the `SchemaConfiguration` request parameter is used as part of invoking the `CreateDeliveryStream` API, then the `TableName` property is required and its value must be specified.
         */
        tableName?: string;
        /**
         * Specifies the table version for the output data schema. If you don't specify this version ID, or if you set it to `LATEST` , Firehose uses the most recent version. This means that any updates to the table are automatically picked up.
         */
        versionId?: string;
    }

    export interface DeliveryStreamSerializer {
        /**
         * A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://docs.aws.amazon.com/https://orc.apache.org/docs/) .
         */
        orcSerDe?: outputs.kinesisfirehose.DeliveryStreamOrcSerDe;
        /**
         * A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://docs.aws.amazon.com/https://parquet.apache.org/documentation/latest/) .
         */
        parquetSerDe?: outputs.kinesisfirehose.DeliveryStreamParquetSerDe;
    }

    export interface DeliveryStreamSnowflakeDestinationConfiguration {
        /**
         * URL for accessing your Snowflake account. This URL must include your [account identifier](https://docs.aws.amazon.com/https://docs.snowflake.com/en/user-guide/admin-account-identifier) . Note that the protocol (https://) and port number are optional.
         */
        accountUrl: string;
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        /**
         * The name of the record content column
         */
        contentColumnName?: string;
        /**
         * Choose to load JSON keys mapped to table column names or choose to split the JSON payload where content is mapped to a record content column and source metadata is mapped to a record metadata column.
         */
        dataLoadingOption?: enums.kinesisfirehose.DeliveryStreamSnowflakeDestinationConfigurationDataLoadingOption;
        /**
         * All data in Snowflake is maintained in databases.
         */
        database: string;
        /**
         * Passphrase to decrypt the private key when the key is encrypted. For information, see [Using Key Pair Authentication & Key Rotation](https://docs.aws.amazon.com/https://docs.snowflake.com/en/user-guide/data-load-snowpipe-streaming-configuration#using-key-pair-authentication-key-rotation) .
         */
        keyPassphrase?: string;
        /**
         * The name of the record metadata column
         */
        metaDataColumnName?: string;
        /**
         * The private key used to encrypt your Snowflake client. For information, see [Using Key Pair Authentication & Key Rotation](https://docs.aws.amazon.com/https://docs.snowflake.com/en/user-guide/data-load-snowpipe-streaming-configuration#using-key-pair-authentication-key-rotation) .
         */
        privateKey: string;
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        /**
         * The time period where Firehose will retry sending data to the chosen HTTP endpoint.
         */
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamSnowflakeRetryOptions;
        /**
         * The Amazon Resource Name (ARN) of the Snowflake role
         */
        roleArn: string;
        /**
         * Choose an S3 backup mode
         */
        s3BackupMode?: enums.kinesisfirehose.DeliveryStreamSnowflakeDestinationConfigurationS3BackupMode;
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
        /**
         * Each database consists of one or more schemas, which are logical groupings of database objects, such as tables and views
         */
        schema: string;
        /**
         * Optionally configure a Snowflake role. Otherwise the default user role will be used.
         */
        snowflakeRoleConfiguration?: outputs.kinesisfirehose.DeliveryStreamSnowflakeRoleConfiguration;
        /**
         * The VPCE ID for Firehose to privately connect with Snowflake. The ID format is com.amazonaws.vpce.[region].vpce-svc-<[id]>. For more information, see [Amazon PrivateLink & Snowflake](https://docs.aws.amazon.com/https://docs.snowflake.com/en/user-guide/admin-security-privatelink)
         */
        snowflakeVpcConfiguration?: outputs.kinesisfirehose.DeliveryStreamSnowflakeVpcConfiguration;
        /**
         * All data in Snowflake is stored in database tables, logically structured as collections of columns and rows.
         */
        table: string;
        /**
         * User login name for the Snowflake account.
         */
        user: string;
    }

    export interface DeliveryStreamSnowflakeRetryOptions {
        /**
         * the time period where Firehose will retry sending data to the chosen HTTP endpoint.
         */
        durationInSeconds?: number;
    }

    export interface DeliveryStreamSnowflakeRoleConfiguration {
        /**
         * Enable Snowflake role
         */
        enabled?: boolean;
        /**
         * The Snowflake role you wish to configure
         */
        snowflakeRole?: string;
    }

    export interface DeliveryStreamSnowflakeVpcConfiguration {
        /**
         * The VPCE ID for Firehose to privately connect with Snowflake. The ID format is com.amazonaws.vpce.[region].vpce-svc-<[id]>. For more information, see [Amazon PrivateLink & Snowflake](https://docs.aws.amazon.com/https://docs.snowflake.com/en/user-guide/admin-security-privatelink)
         */
        privateLinkVpceId: string;
    }

    export interface DeliveryStreamSplunkBufferingHints {
        /**
         * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 60 (1 minute).
         */
        intervalInSeconds?: number;
        /**
         * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
         */
        sizeInMbs?: number;
    }

    export interface DeliveryStreamSplunkDestinationConfiguration {
        /**
         * The buffering options. If no value is specified, the default values for Splunk are used.
         */
        bufferingHints?: outputs.kinesisfirehose.DeliveryStreamSplunkBufferingHints;
        /**
         * The Amazon CloudWatch logging options for your delivery stream.
         */
        cloudWatchLoggingOptions?: outputs.kinesisfirehose.DeliveryStreamCloudWatchLoggingOptions;
        /**
         * The amount of time that Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Firehose either tries to send the data again or considers it an error, based on your retry settings.
         */
        hecAcknowledgmentTimeoutInSeconds?: number;
        /**
         * The HTTP Event Collector (HEC) endpoint to which Firehose sends your data.
         */
        hecEndpoint: string;
        /**
         * This type can be either `Raw` or `Event` .
         */
        hecEndpointType: enums.kinesisfirehose.DeliveryStreamSplunkDestinationConfigurationHecEndpointType;
        /**
         * This is a GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
         */
        hecToken: string;
        /**
         * The data processing configuration.
         */
        processingConfiguration?: outputs.kinesisfirehose.DeliveryStreamProcessingConfiguration;
        /**
         * The retry behavior in case Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.
         */
        retryOptions?: outputs.kinesisfirehose.DeliveryStreamSplunkRetryOptions;
        /**
         * Defines how documents should be delivered to Amazon S3. When set to `FailedEventsOnly` , Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to `AllEvents` , Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. The default value is `FailedEventsOnly` .
         *
         * You can update this backup mode from `FailedEventsOnly` to `AllEvents` . You can't update it from `AllEvents` to `FailedEventsOnly` .
         */
        s3BackupMode?: string;
        /**
         * The configuration for the backup Amazon S3 location.
         */
        s3Configuration: outputs.kinesisfirehose.DeliveryStreamS3DestinationConfiguration;
    }

    export interface DeliveryStreamSplunkRetryOptions {
        /**
         * The total amount of time that Firehose spends on retries. This duration starts after the initial attempt to send data to Splunk fails. It doesn't include the periods during which Firehose waits for acknowledgment from Splunk after each attempt.
         */
        durationInSeconds?: number;
    }

    export interface DeliveryStreamVpcConfiguration {
        /**
         * The ARN of the IAM role that you want the delivery stream to use to create endpoints in the destination VPC. You can use your existing Kinesis Data Firehose delivery role or you can specify a new role. In either case, make sure that the role trusts the Kinesis Data Firehose service principal and that it grants the following permissions:
         *
         * - `ec2:DescribeVpcs`
         * - `ec2:DescribeVpcAttribute`
         * - `ec2:DescribeSubnets`
         * - `ec2:DescribeSecurityGroups`
         * - `ec2:DescribeNetworkInterfaces`
         * - `ec2:CreateNetworkInterface`
         * - `ec2:CreateNetworkInterfacePermission`
         * - `ec2:DeleteNetworkInterface`
         *
         * If you revoke these permissions after you create the delivery stream, Kinesis Data Firehose can't scale out by creating more ENIs when necessary. You might therefore see a degradation in performance.
         */
        roleArn: string;
        /**
         * The IDs of the security groups that you want Kinesis Data Firehose to use when it creates ENIs in the VPC of the Amazon ES destination. You can use the same security group that the Amazon ES domain uses or different ones. If you specify different security groups here, ensure that they allow outbound HTTPS traffic to the Amazon ES domain's security group. Also ensure that the Amazon ES domain's security group allows HTTPS traffic from the security groups specified here. If you use the same security group for both your delivery stream and the Amazon ES domain, make sure the security group inbound rule allows HTTPS traffic.
         */
        securityGroupIds: string[];
        /**
         * The IDs of the subnets that Kinesis Data Firehose uses to create ENIs in the VPC of the Amazon ES destination. Make sure that the routing tables and inbound and outbound rules allow traffic to flow from the subnets whose IDs are specified here to the subnets that have the destination Amazon ES endpoints. Kinesis Data Firehose creates at least one ENI in each of the subnets that are specified here. Do not delete or modify these ENIs.
         *
         * The number of ENIs that Kinesis Data Firehose creates in the subnets specified here scales up and down automatically based on throughput. To enable Kinesis Data Firehose to scale up the number of ENIs to match throughput, ensure that you have sufficient quota. To help you calculate the quota you need, assume that Kinesis Data Firehose can create up to three ENIs for this delivery stream for each of the subnets specified here.
         */
        subnetIds: string[];
    }

}

export namespace kinesisvideo {
}

export namespace kms {
}

export namespace lakeformation {
    /**
     * An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required.
     */
    export interface DataCellsFilterColumnWildcard {
        /**
         * A list of column names to be excluded from the Data Cells Filter.
         */
        excludedColumnNames?: string[];
    }

    /**
     * An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required.
     */
    export interface DataCellsFilterRowFilter {
        /**
         * An empty object representing a row wildcard.
         */
        allRowsWildcard?: any;
        /**
         * A PartiQL predicate.
         */
        filterExpression?: string;
    }

    export interface PrincipalPermissionsCatalogResource {
    }

    /**
     * A wildcard object, consisting of an optional list of excluded column names or indexes.
     */
    export interface PrincipalPermissionsColumnWildcard {
        /**
         * Excludes column names. Any column with this name will be excluded.
         */
        excludedColumnNames?: string[];
    }

    /**
     * A structure that describes certain columns on certain rows.
     */
    export interface PrincipalPermissionsDataCellsFilterResource {
        /**
         * A database in the GLUDC.
         */
        databaseName: string;
        /**
         * The name given by the user to the data filter cell.
         */
        name: string;
        /**
         * The ID of the catalog to which the table belongs.
         */
        tableCatalogId: string;
        /**
         * The name of the table.
         */
        tableName: string;
    }

    /**
     * The LFlong principal.
     */
    export interface PrincipalPermissionsDataLakePrincipal {
        /**
         * An identifier for the LFlong principal.
         */
        dataLakePrincipalIdentifier?: string;
    }

    /**
     * A structure for a data location object where permissions are granted or revoked.
     */
    export interface PrincipalPermissionsDataLocationResource {
        /**
         * The identifier for the GLUDC where the location is registered with LFlong.
         */
        catalogId: string;
        /**
         * The Amazon Resource Name (ARN) that uniquely identifies the data location resource.
         */
        resourceArn: string;
    }

    /**
     * A structure for the database object.
     */
    export interface PrincipalPermissionsDatabaseResource {
        /**
         * The identifier for the Data Catalog. By default, it is the account ID of the caller.
         */
        catalogId: string;
        /**
         * The name of the database resource. Unique to the Data Catalog.
         */
        name: string;
    }

    /**
     * The LF-tag key and values attached to a resource.
     */
    export interface PrincipalPermissionsLfTag {
        /**
         * The key-name for the LF-tag.
         */
        tagKey?: string;
        /**
         * A list of possible values of the corresponding ``TagKey`` of an LF-tag key-value pair.
         */
        tagValues?: string[];
    }

    /**
     * A structure containing an LF-tag key and values for a resource.
     */
    export interface PrincipalPermissionsLfTagKeyResource {
        /**
         * The identifier for the GLUDC where the location is registered with GLUDC.
         */
        catalogId: string;
        /**
         * The key-name for the LF-tag.
         */
        tagKey: string;
        /**
         * A list of possible values for the corresponding ``TagKey`` of an LF-tag key-value pair.
         */
        tagValues: string[];
    }

    /**
     * A list of LF-tag conditions that define a resource's LF-tag policy.
     *  A structure that allows an admin to grant user permissions on certain conditions. For example, granting a role access to all columns that do not have the LF-tag 'PII' in tables that have the LF-tag 'Prod'.
     */
    export interface PrincipalPermissionsLfTagPolicyResource {
        /**
         * The identifier for the GLUDC. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.
         */
        catalogId: string;
        /**
         * A list of LF-tag conditions that apply to the resource's LF-tag policy.
         */
        expression: outputs.lakeformation.PrincipalPermissionsLfTag[];
        /**
         * The resource type for which the LF-tag policy applies.
         */
        resourceType: enums.lakeformation.PrincipalPermissionsResourceType;
    }

    /**
     * A structure for the resource.
     */
    export interface PrincipalPermissionsResource {
        /**
         * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.
         */
        catalog?: outputs.lakeformation.PrincipalPermissionsCatalogResource;
        /**
         * A data cell filter.
         */
        dataCellsFilter?: outputs.lakeformation.PrincipalPermissionsDataCellsFilterResource;
        /**
         * The location of an Amazon S3 path where permissions are granted or revoked.
         */
        dataLocation?: outputs.lakeformation.PrincipalPermissionsDataLocationResource;
        /**
         * The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal.
         */
        database?: outputs.lakeformation.PrincipalPermissionsDatabaseResource;
        /**
         * The LF-tag key and values attached to a resource.
         */
        lfTag?: outputs.lakeformation.PrincipalPermissionsLfTagKeyResource;
        /**
         * A list of LF-tag conditions that define a resource's LF-tag policy.
         */
        lfTagPolicy?: outputs.lakeformation.PrincipalPermissionsLfTagPolicyResource;
        /**
         * The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
         */
        table?: outputs.lakeformation.PrincipalPermissionsTableResource;
        /**
         * The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
         */
        tableWithColumns?: outputs.lakeformation.PrincipalPermissionsTableWithColumnsResource;
    }

    /**
     * A structure for the table object. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
     */
    export interface PrincipalPermissionsTableResource {
        /**
         * The identifier for the Data Catalog. By default, it is the account ID of the caller.
         */
        catalogId: string;
        /**
         * The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.
         */
        databaseName: string;
        /**
         * The name of the table.
         */
        name?: string;
        /**
         * A wildcard object representing every table under a database.
         *  At least one of ``TableResource$Name`` or ``TableResource$TableWildcard`` is required.
         */
        tableWildcard?: outputs.lakeformation.PrincipalPermissionsTableWildcard;
    }

    export interface PrincipalPermissionsTableWildcard {
    }

    /**
     * A structure for a table with columns object. This object is only used when granting a SELECT permission.
     *  This object must take a value for at least one of ``ColumnsNames``, ``ColumnsIndexes``, or ``ColumnsWildcard``.
     */
    export interface PrincipalPermissionsTableWithColumnsResource {
        /**
         * The identifier for the GLUDC where the location is registered with LFlong.
         */
        catalogId: string;
        /**
         * The list of column names for the table. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.
         */
        columnNames?: string[];
        /**
         * A wildcard specified by a ``ColumnWildcard`` object. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.
         */
        columnWildcard?: outputs.lakeformation.PrincipalPermissionsColumnWildcard;
        /**
         * The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.
         */
        databaseName: string;
        /**
         * The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
         */
        name: string;
    }

    export interface TagAssociationCatalogResource {
    }

    export interface TagAssociationDatabaseResource {
        /**
         * The identifier for the Data Catalog . By default, it should be the account ID of the caller.
         */
        catalogId: string;
        /**
         * The name of the database resource. Unique to the Data Catalog.
         */
        name: string;
    }

    export interface TagAssociationLfTagPair {
        catalogId: string;
        tagKey: string;
        tagValues: string[];
    }

    export interface TagAssociationResource {
        /**
         * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your AWS Lake Formation environment.
         */
        catalog?: outputs.lakeformation.TagAssociationCatalogResource;
        /**
         * The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal.
         */
        database?: outputs.lakeformation.TagAssociationDatabaseResource;
        /**
         * The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
         */
        table?: outputs.lakeformation.TagAssociationTableResource;
        /**
         * The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
         */
        tableWithColumns?: outputs.lakeformation.TagAssociationTableWithColumnsResource;
    }

    export interface TagAssociationTableResource {
        /**
         * The identifier for the Data Catalog . By default, it is the account ID of the caller.
         */
        catalogId: string;
        /**
         * The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.
         */
        databaseName: string;
        /**
         * The name of the table.
         */
        name?: string;
        /**
         * A wildcard object representing every table under a database.This is an object with no properties that effectively behaves as a true or false depending on whether not it is passed as a parameter. The valid inputs for a property with this type in either yaml or json is null or {}.
         *
         * At least one of `TableResource$Name` or `TableResource$TableWildcard` is required.
         */
        tableWildcard?: outputs.lakeformation.TagAssociationTableWildcard;
    }

    export interface TagAssociationTableWildcard {
    }

    export interface TagAssociationTableWithColumnsResource {
        /**
         * A wildcard object representing every table under a database.
         *
         * At least one of TableResource$Name or TableResource$TableWildcard is required.
         */
        catalogId: string;
        /**
         * The list of column names for the table. At least one of `ColumnNames` or `ColumnWildcard` is required.
         */
        columnNames: string[];
        /**
         * The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.
         */
        databaseName: string;
        /**
         * The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
         */
        name: string;
    }

}

export namespace lambda {
    export interface AliasProvisionedConcurrencyConfiguration {
        /**
         * The amount of provisioned concurrency to allocate for the alias.
         */
        provisionedConcurrentExecutions: number;
    }

    export interface AliasRoutingConfiguration {
        /**
         * The second version, and the percentage of traffic that's routed to it.
         */
        additionalVersionWeights: outputs.lambda.AliasVersionWeight[];
    }

    export interface AliasVersionWeight {
        /**
         * The qualifier of the second version.
         */
        functionVersion: string;
        /**
         * The percentage of traffic that the alias routes to the second version.
         */
        functionWeight: number;
    }

    /**
     * When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
     */
    export interface CodeSigningConfigAllowedPublishers {
        /**
         * List of Signing profile version Arns
         */
        signingProfileVersionArns: string[];
    }

    /**
     * Policies to control how to act if a signature is invalid
     */
    export interface CodeSigningConfigCodeSigningPolicies {
        /**
         * Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
         */
        untrustedArtifactOnDeployment: enums.lambda.CodeSigningConfigCodeSigningPoliciesUntrustedArtifactOnDeployment;
    }

    /**
     * A destination for events after they have been sent to a function for processing.
     */
    export interface EventInvokeConfigDestinationConfig {
        /**
         * The destination configuration for failed invocations.
         */
        onFailure?: outputs.lambda.EventInvokeConfigOnFailure;
        /**
         * The destination configuration for successful invocations.
         */
        onSuccess?: outputs.lambda.EventInvokeConfigOnSuccess;
    }

    /**
     * The destination configuration for failed invocations.
     */
    export interface EventInvokeConfigOnFailure {
        /**
         * The Amazon Resource Name (ARN) of the destination resource.
         */
        destination: string;
    }

    /**
     * The destination configuration for successful invocations.
     */
    export interface EventInvokeConfigOnSuccess {
        /**
         * The Amazon Resource Name (ARN) of the destination resource.
         */
        destination: string;
    }

    /**
     * Specific configuration settings for an Amazon Managed Streaming for Apache Kafka (Amazon MSK) event source.
     */
    export interface EventSourceMappingAmazonManagedKafkaEventSourceConfig {
        /**
         * The identifier for the Kafka consumer group to join. The consumer group ID must be unique among all your Kafka event sources. After creating a Kafka event source mapping with the consumer group ID specified, you cannot update this value. For more information, see [Customizable consumer group ID](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-consumer-group-id).
         */
        consumerGroupId?: string;
    }

    /**
     * A configuration object that specifies the destination of an event after Lambda processes it.
     */
    export interface EventSourceMappingDestinationConfig {
        /**
         * The destination configuration for failed invocations.
         */
        onFailure?: outputs.lambda.EventSourceMappingOnFailure;
    }

    /**
     * Specific configuration settings for a DocumentDB event source.
     */
    export interface EventSourceMappingDocumentDbEventSourceConfig {
        /**
         * The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections.
         */
        collectionName?: string;
        /**
         * The name of the database to consume within the DocumentDB cluster.
         */
        databaseName?: string;
        /**
         * Determines what DocumentDB sends to your event stream during document update operations. If set to UpdateLookup, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes.
         */
        fullDocument?: enums.lambda.EventSourceMappingDocumentDbEventSourceConfigFullDocument;
    }

    /**
     * The list of bootstrap servers for your Kafka brokers in the following format: ``"KafkaBootstrapServers": ["abc.xyz.com:xxxx","abc2.xyz.com:xxxx"]``.
     */
    export interface EventSourceMappingEndpoints {
        /**
         * The list of bootstrap servers for your Kafka brokers in the following format: ``"KafkaBootstrapServers": ["abc.xyz.com:xxxx","abc2.xyz.com:xxxx"]``.
         */
        kafkaBootstrapServers?: string[];
    }

    /**
     * A structure within a ``FilterCriteria`` object that defines an event filtering pattern.
     */
    export interface EventSourceMappingFilter {
        /**
         * A filter pattern. For more information on the syntax of a filter pattern, see [Filter rule syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).
         */
        pattern?: string;
    }

    /**
     * An object that contains the filters for an event source.
     */
    export interface EventSourceMappingFilterCriteria {
        /**
         * A list of filters.
         */
        filters?: outputs.lambda.EventSourceMappingFilter[];
    }

    /**
     * A destination for events that failed processing.
     */
    export interface EventSourceMappingOnFailure {
        /**
         * The Amazon Resource Name (ARN) of the destination resource.
         *  To retain records of [asynchronous invocations](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations), you can configure an Amazon SNS topic, Amazon SQS queue, Lambda function, or Amazon EventBridge event bus as the destination.
         *  To retain records of failed invocations from [Kinesis and DynamoDB event sources](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventsourcemapping.html#event-source-mapping-destinations), you can configure an Amazon SNS topic or Amazon SQS queue as the destination.
         *  To retain records of failed invocations from [self-managed Kafka](https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-smaa-onfailure-destination) or [Amazon MSK](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-onfailure-destination), you can configure an Amazon SNS topic, Amazon SQS queue, or Amazon S3 bucket as the destination.
         */
        destination?: string;
    }

    /**
     * (Amazon SQS only) The scaling configuration for the event source. To remove the configuration, pass an empty value.
     */
    export interface EventSourceMappingScalingConfig {
        /**
         * Limits the number of concurrent instances that the SQS event source can invoke.
         */
        maximumConcurrency?: number;
    }

    /**
     * The self-managed Apache Kafka cluster for your event source.
     */
    export interface EventSourceMappingSelfManagedEventSource {
        /**
         * The list of bootstrap servers for your Kafka brokers in the following format: ``"KafkaBootstrapServers": ["abc.xyz.com:xxxx","abc2.xyz.com:xxxx"]``.
         */
        endpoints?: outputs.lambda.EventSourceMappingEndpoints;
    }

    /**
     * Specific configuration settings for a self-managed Apache Kafka event source.
     */
    export interface EventSourceMappingSelfManagedKafkaEventSourceConfig {
        /**
         * The identifier for the Kafka consumer group to join. The consumer group ID must be unique among all your Kafka event sources. After creating a Kafka event source mapping with the consumer group ID specified, you cannot update this value. For more information, see [Customizable consumer group ID](https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-consumer-group-id).
         */
        consumerGroupId?: string;
    }

    /**
     * An array of the authentication protocol, VPC components, or virtual host to secure and define your event source.
     */
    export interface EventSourceMappingSourceAccessConfiguration {
        /**
         * The type of authentication protocol, VPC components, or virtual host for your event source. For example: ``"Type":"SASL_SCRAM_512_AUTH"``.
         *   +   ``BASIC_AUTH`` – (Amazon MQ) The ASMlong secret that stores your broker credentials.
         *   +   ``BASIC_AUTH`` – (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL/PLAIN authentication of your Apache Kafka brokers.
         *   +   ``VPC_SUBNET`` – (Self-managed Apache Kafka) The subnets associated with your VPC. Lambda connects to these subnets to fetch data from your self-managed Apache Kafka cluster.
         *   +   ``VPC_SECURITY_GROUP`` – (Self-managed Apache Kafka) The VPC security group used to manage access to your self-managed Apache Kafka brokers.
         *   +   ``SASL_SCRAM_256_AUTH`` – (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL SCRAM-256 authentication of your self-managed Apache Kafka brokers.
         *   +   ``SASL_SCRAM_512_AUTH`` – (Amazon MSK, Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL SCRAM-512 authentication of your self-managed Apache Kafka brokers.
         *   +   ``VIRTUAL_HOST`` –- (RabbitMQ) The name of the virtual host in your RabbitMQ broker. Lambda uses this RabbitMQ host as the event source. This property cannot be specified in an UpdateEventSourceMapping API call.
         *   +   ``CLIENT_CERTIFICATE_TLS_AUTH`` – (Amazon MSK, self-managed Apache Kafka) The Secrets Manager ARN of your secret key containing the certificate chain (X.509 PEM), private key (PKCS#8 PEM), and private key password (optional) used for mutual TLS authentication of your MSK/Apache Kafka brokers.
         *   +   ``SERVER_ROOT_CA_CERTIFICATE`` – (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key containing the root CA certificate (X.509 PEM) used for TLS encryption of your Apache Kafka brokers.
         */
        type?: enums.lambda.EventSourceMappingSourceAccessConfigurationType;
        /**
         * The value for your chosen configuration in ``Type``. For example: ``"URI": "arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName"``.
         */
        uri?: string;
    }

    /**
     * The [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) for a Lambda function. To deploy a function defined as a container image, you specify the location of a container image in the Amazon ECR registry. For a .zip file deployment package, you can specify the location of an object in Amazon S3. For Node.js and Python functions, you can specify the function code inline in the template.
     *  Changes to a deployment package in Amazon S3 or a container image in ECR are not detected automatically during stack updates. To update the function code, change the object key or version in the template.
     */
    export interface FunctionCode {
        /**
         * URI of a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html) in the Amazon ECR registry.
         */
        imageUri?: string;
        /**
         * An Amazon S3 bucket in the same AWS-Region as your function. The bucket can be in a different AWS-account.
         */
        s3Bucket?: string;
        /**
         * The Amazon S3 key of the deployment package.
         */
        s3Key?: string;
        /**
         * For versioned objects, the version of the deployment package object to use.
         */
        s3ObjectVersion?: string;
        /**
         * (Node.js and Python) The source code of your Lambda function. If you include your function source inline with this parameter, CFN places it in a file named ``index`` and zips it to create a [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html). This zip file cannot exceed 4MB. For the ``Handler`` property, the first part of the handler identifier must be ``index``. For example, ``index.handler``.
         *   For JSON, you must escape quotes and special characters such as newline (``\n``) with a backslash.
         *  If you specify a function that interacts with an AWS CloudFormation custom resource, you don't have to write your own functions to send responses to the custom resource that invoked the function. AWS CloudFormation provides a response module ([cfn-response](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html)) that simplifies sending responses. See [Using Lambda with CloudFormation](https://docs.aws.amazon.com/lambda/latest/dg/services-cloudformation.html) for details.
         */
        zipFile?: string;
    }

    /**
     * The [dead-letter queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq) for failed asynchronous invocations.
     */
    export interface FunctionDeadLetterConfig {
        /**
         * The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
         */
        targetArn?: string;
    }

    /**
     * A function's environment variable settings. You can use environment variables to adjust your function's behavior without updating code. An environment variable is a pair of strings that are stored in a function's version-specific configuration.
     */
    export interface FunctionEnvironment {
        /**
         * Environment variable key-value pairs. For more information, see [Using Lambda environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html).
         */
        variables?: {[key: string]: string};
    }

    /**
     * The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
     */
    export interface FunctionEphemeralStorage {
        /**
         * The size of the function's ``/tmp`` directory.
         */
        size: number;
    }

    /**
     * Details about the connection between a Lambda function and an [Amazon EFS file system](https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html).
     */
    export interface FunctionFileSystemConfig {
        /**
         * The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
         */
        arn: string;
        /**
         * The path where the function can access the file system, starting with ``/mnt/``.
         */
        localMountPath: string;
    }

    /**
     * Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
     */
    export interface FunctionImageConfig {
        /**
         * Specifies parameters that you want to pass in with ENTRYPOINT. You can specify a maximum of 1,500 parameters in the list.
         */
        command?: string[];
        /**
         * Specifies the entry point to their application, which is typically the location of the runtime executable. You can specify a maximum of 1,500 string entries in the list.
         */
        entryPoint?: string[];
        /**
         * Specifies the working directory. The length of the directory string cannot exceed 1,000 characters.
         */
        workingDirectory?: string;
    }

    /**
     * The function's Amazon CloudWatch Logs configuration settings.
     */
    export interface FunctionLoggingConfig {
        /**
         * Set this property to filter the application logs for your function that Lambda sends to CloudWatch. Lambda only sends application logs at the selected level of detail and lower, where ``TRACE`` is the highest level and ``FATAL`` is the lowest.
         */
        applicationLogLevel?: enums.lambda.FunctionLoggingConfigApplicationLogLevel;
        /**
         * The format in which Lambda sends your function's application and system logs to CloudWatch. Select between plain text and structured JSON.
         */
        logFormat?: enums.lambda.FunctionLoggingConfigLogFormat;
        /**
         * The name of the Amazon CloudWatch log group the function sends logs to. By default, Lambda functions send logs to a default log group named ``/aws/lambda/<function name>``. To use a different log group, enter an existing log group or enter a new log group name.
         */
        logGroup?: string;
        /**
         * Set this property to filter the system logs for your function that Lambda sends to CloudWatch. Lambda only sends system logs at the selected level of detail and lower, where ``DEBUG`` is the highest level and ``WARN`` is the lowest.
         */
        systemLogLevel?: enums.lambda.FunctionLoggingConfigSystemLogLevel;
    }

    /**
     * Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
     */
    export interface FunctionRuntimeManagementConfig {
        /**
         * The ARN of the runtime version you want the function to use.
         *   This is only required if you're using the *Manual* runtime update mode.
         */
        runtimeVersionArn?: string;
        /**
         * Specify the runtime update mode.
         *   +   *Auto (default)* - Automatically update to the most recent and secure runtime version using a [Two-phase runtime version rollout](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-two-phase). This is the best choice for most customers to ensure they always benefit from runtime updates.
         *   +   *FunctionUpdate* - LAM updates the runtime of you function to the most recent and secure runtime version when you update your function. This approach synchronizes runtime updates with function deployments, giving you control over when runtime updates are applied and allowing you to detect and mitigate rare runtime update incompatibilities early. When using this setting, you need to regularly update your functions to keep their runtime up-to-date.
         *   +   *Manual* - You specify a runtime version in your function configuration. The function will use this runtime version indefinitely. In the rare case where a new runtime version is incompatible with an existing function, this allows you to roll back your function to an earlier runtime version. For more information, see [Roll back a runtime version](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-rollback).
         *   
         *   *Valid Values*: ``Auto`` | ``FunctionUpdate`` | ``Manual``
         */
        updateRuntimeOn: enums.lambda.FunctionRuntimeManagementConfigUpdateRuntimeOn;
    }

    /**
     * The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
     */
    export interface FunctionSnapStart {
        /**
         * Set ``ApplyOn`` to ``PublishedVersions`` to create a snapshot of the initialized execution environment when you publish a function version.
         */
        applyOn: enums.lambda.FunctionSnapStartApplyOn;
    }

    /**
     * The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
     */
    export interface FunctionSnapStartResponse {
        /**
         * When set to ``PublishedVersions``, Lambda creates a snapshot of the execution environment when you publish a function version.
         */
        applyOn?: enums.lambda.FunctionSnapStartResponseApplyOn;
        /**
         * When you provide a [qualified Amazon Resource Name (ARN)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using), this response element indicates whether SnapStart is activated for the specified function version.
         */
        optimizationStatus?: enums.lambda.FunctionSnapStartResponseOptimizationStatus;
    }

    /**
     * The function's [](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html) tracing configuration. To sample and record incoming requests, set ``Mode`` to ``Active``.
     */
    export interface FunctionTracingConfig {
        /**
         * The tracing mode.
         */
        mode?: enums.lambda.FunctionTracingConfigMode;
    }

    /**
     * The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC. For more information, see [VPC Settings](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
     *   When you delete a function, CFN monitors the state of its network interfaces and waits for Lambda to delete them before proceeding. If the VPC is defined in the same stack, the network interfaces need to be deleted by Lambda before CFN can delete the VPC's resources.
     *  To monitor network interfaces, CFN needs the ``ec2:DescribeNetworkInterfaces`` permission. It obtains this from the user or role that modifies the stack. If you don't provide this permission, CFN does not wait for network interfaces to be deleted.
     */
    export interface FunctionVpcConfig {
        /**
         * Allows outbound IPv6 traffic on VPC functions that are connected to dual-stack subnets.
         */
        ipv6AllowedForDualStack?: boolean;
        /**
         * A list of VPC security group IDs.
         */
        securityGroupIds?: string[];
        /**
         * A list of VPC subnet IDs.
         */
        subnetIds?: string[];
    }

    export interface LayerVersionContent {
        /**
         * The Amazon S3 bucket of the layer archive.
         */
        s3Bucket: string;
        /**
         * The Amazon S3 key of the layer archive.
         */
        s3Key: string;
        /**
         * For versioned objects, the version of the layer archive object to use.
         */
        s3ObjectVersion?: string;
    }

    export interface UrlCors {
        /**
         * Specifies whether credentials are included in the CORS request.
         */
        allowCredentials?: boolean;
        /**
         * Represents a collection of allowed headers.
         */
        allowHeaders?: string[];
        /**
         * Represents a collection of allowed HTTP methods.
         */
        allowMethods?: enums.lambda.UrlAllowMethodsItem[];
        /**
         * Represents a collection of allowed origins.
         */
        allowOrigins?: string[];
        /**
         * Represents a collection of exposed headers.
         */
        exposeHeaders?: string[];
        /**
         * The maximum amount of time, in seconds, that browsers can cache results of a preflight request. By default, this is set to `0` , which means the browser will not cache results.
         */
        maxAge?: number;
    }

    /**
     * A provisioned concurrency configuration for a function's version.
     */
    export interface VersionProvisionedConcurrencyConfiguration {
        /**
         * The amount of provisioned concurrency to allocate for the version.
         */
        provisionedConcurrentExecutions: number;
    }

    /**
     * Runtime Management Config of a function.
     */
    export interface VersionRuntimePolicy {
        /**
         * The ARN of the runtime the function is configured to use. If the runtime update mode is manual, the ARN is returned, otherwise null is returned.
         */
        runtimeVersionArn?: string;
        /**
         * The runtime update mode.
         */
        updateRuntimeOn: string;
    }

}

export namespace lex {
    /**
     * Provides settings that enable advanced recognition settings for slot values.
     */
    export interface BotAdvancedRecognitionSetting {
        /**
         * Enables using the slot values as a custom vocabulary for recognizing user utterances.
         */
        audioRecognitionStrategy?: enums.lex.BotAudioRecognitionStrategy;
    }

    /**
     * The location of audio log files collected when conversation logging is enabled for a bot.
     */
    export interface BotAliasAudioLogDestination {
        s3Bucket: outputs.lex.BotAliasS3BucketLogDestination;
    }

    /**
     * Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
     */
    export interface BotAliasAudioLogSetting {
        destination: outputs.lex.BotAliasAudioLogDestination;
        enabled: boolean;
    }

    export interface BotAliasCloudWatchLogGroupLogDestination {
        /**
         * A string used to identify the groupArn for the Cloudwatch Log Group
         */
        cloudWatchLogGroupArn: string;
        /**
         * A string containing the value for the Log Prefix
         */
        logPrefix: string;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotAliasCodeHookSpecification {
        lambdaCodeHook: outputs.lex.BotAliasLambdaCodeHook;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotAliasConversationLogSettings {
        /**
         * The Amazon S3 settings for logging audio to an S3 bucket.
         */
        audioLogSettings?: outputs.lex.BotAliasAudioLogSetting[];
        /**
         * The Amazon CloudWatch Logs settings for logging text and metadata.
         */
        textLogSettings?: outputs.lex.BotAliasTextLogSetting[];
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotAliasLambdaCodeHook {
        /**
         * The version of the request-response that you want Amazon Lex to use to invoke your Lambda function.
         */
        codeHookInterfaceVersion: string;
        /**
         * The Amazon Resource Name (ARN) of the Lambda function.
         */
        lambdaArn: string;
    }

    /**
     * You can use this parameter to specify a specific Lambda function to run different functions in different locales.
     */
    export interface BotAliasLocaleSettings {
        codeHookSpecification?: outputs.lex.BotAliasCodeHookSpecification;
        /**
         * Whether the Lambda code hook is enabled
         */
        enabled: boolean;
    }

    /**
     * A locale setting in alias
     */
    export interface BotAliasLocaleSettingsItem {
        botAliasLocaleSetting: outputs.lex.BotAliasLocaleSettings;
        /**
         * A string used to identify the locale
         */
        localeId: string;
    }

    /**
     * Specifies an Amazon S3 bucket for logging audio conversations
     */
    export interface BotAliasS3BucketLogDestination {
        /**
         * The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
         */
        kmsKeyArn?: string;
        /**
         * The Amazon S3 key of the deployment package.
         */
        logPrefix: string;
        /**
         * The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
         */
        s3BucketArn: string;
    }

    /**
     * A label for tagging Lex resources
     */
    export interface BotAliasTag {
        /**
         * A string used to identify this tag
         */
        key: string;
        /**
         * A string containing the value for the tag
         */
        value: string;
    }

    /**
     * Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
     */
    export interface BotAliasTextLogDestination {
        cloudWatch: outputs.lex.BotAliasCloudWatchLogGroupLogDestination;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotAliasTextLogSetting {
        destination: outputs.lex.BotAliasTextLogDestination;
        enabled: boolean;
    }

    /**
     * Specifies the allowed input types.
     */
    export interface BotAllowedInputTypes {
        /**
         * Indicates whether audio input is allowed.
         */
        allowAudioInput: boolean;
        /**
         * Indicates whether DTMF input is allowed.
         */
        allowDtmfInput: boolean;
    }

    /**
     * Specifies the audio and DTMF input specification.
     */
    export interface BotAudioAndDtmfInputSpecification {
        audioSpecification?: outputs.lex.BotAudioSpecification;
        dtmfSpecification?: outputs.lex.BotDtmfSpecification;
        /**
         * Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs.
         */
        startTimeoutMs: number;
    }

    /**
     * The location of audio log files collected when conversation logging is enabled for a bot.
     */
    export interface BotAudioLogDestination {
        s3Bucket: outputs.lex.BotS3BucketLogDestination;
    }

    /**
     * Settings for logging audio of conversations between Amazon Lex and a user. You specify whether to log audio and the Amazon S3 bucket where the audio file is stored.
     */
    export interface BotAudioLogSetting {
        destination: outputs.lex.BotAudioLogDestination;
        enabled: boolean;
    }

    /**
     * Specifies the audio input specifications.
     */
    export interface BotAudioSpecification {
        /**
         * Time for which a bot waits after the customer stops speaking to assume the utterance is finished.
         */
        endTimeoutMs: number;
        /**
         * Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application.
         */
        maxLengthMs: number;
    }

    /**
     * A button to use on a response card used to gather slot values from a user.
     */
    export interface BotButton {
        /**
         * The text that appears on the button.
         */
        text: string;
        /**
         * The value returned to Amazon Lex when the user chooses this button.
         */
        value: string;
    }

    export interface BotCloudWatchLogGroupLogDestination {
        /**
         * A string used to identify the groupArn for the Cloudwatch Log Group
         */
        cloudWatchLogGroupArn: string;
        /**
         * A string containing the value for the Log Prefix
         */
        logPrefix: string;
    }

    /**
     * Provides an expression that evaluates to true or false.
     */
    export interface BotCondition {
        /**
         * The expression string that is evaluated.
         */
        expressionString: string;
    }

    /**
     * A set of actions that Amazon Lex should run if the condition is matched.
     */
    export interface BotConditionalBranch {
        /**
         * Contains the expression to evaluate. If the condition is true, the branch's actions are taken.
         */
        condition: outputs.lex.BotCondition;
        /**
         * The name of the branch.
         */
        name: string;
        /**
         * The next step in the conversation.
         */
        nextStep: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        response?: outputs.lex.BotResponseSpecification;
    }

    /**
     * Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
     */
    export interface BotConditionalSpecification {
        /**
         * A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true.
         */
        conditionalBranches: outputs.lex.BotConditionalBranch[];
        /**
         * The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step.
         */
        defaultBranch: outputs.lex.BotDefaultConditionalBranch;
        /**
         * Determines whether a conditional branch is active. When active is false, the conditions are not evaluated.
         */
        isActive: boolean;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotConversationLogSettings {
        /**
         * The Amazon S3 settings for logging audio to an S3 bucket.
         */
        audioLogSettings?: outputs.lex.BotAudioLogSetting[];
        /**
         * The Amazon CloudWatch Logs settings for logging text and metadata.
         */
        textLogSettings?: outputs.lex.BotTextLogSetting[];
    }

    /**
     * A message in a custom format defined by the client application.
     */
    export interface BotCustomPayload {
        /**
         * The string that is sent to your application.
         */
        value: string;
    }

    /**
     * A custom vocabulary is a list of specific phrases that you want Amazon Lex V2 to recognize in the audio input.
     */
    export interface BotCustomVocabulary {
        /**
         * Specifies a list of words that you expect to be used during a conversation with your bot.
         */
        customVocabularyItems: outputs.lex.BotCustomVocabularyItem[];
    }

    /**
     * A custom vocabulary item that contains the phrase to recognize and a weight to give the boost.
     */
    export interface BotCustomVocabularyItem {
        /**
         * Defines how you want your phrase to look in your transcription output.
         */
        displayAs?: string;
        /**
         * Phrase that should be recognized.
         */
        phrase: string;
        /**
         * The degree to which the phrase recognition is boosted. The weight 0 means that no boosting will be applied and the entry will only be used for performing replacements using the displayAs field.
         */
        weight?: number;
    }

    /**
     * A set of actions that Amazon Lex should run if none of the other conditions are met.
     */
    export interface BotDefaultConditionalBranch {
        /**
         * The next step in the conversation.
         */
        nextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        response?: outputs.lex.BotResponseSpecification;
    }

    /**
     * Defines the action that the bot executes at runtime when the conversation reaches this step.
     */
    export interface BotDialogAction {
        /**
         * If the dialog action is ElicitSlot, defines the slot to elicit from the user.
         */
        slotToElicit?: string;
        /**
         * When true the next message for the intent is not used.
         */
        suppressNextMessage?: boolean;
        /**
         * The action that the bot should execute.
         */
        type: enums.lex.BotDialogActionType;
    }

    /**
     * Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
     */
    export interface BotDialogCodeHookInvocationSetting {
        /**
         * Indicates whether a Lambda function should be invoked for the dialog.
         */
        enableCodeHookInvocation: boolean;
        /**
         * A label that indicates the dialog step from which the dialog code hook is happening.
         */
        invocationLabel?: string;
        /**
         * Determines whether a dialog code hook is used when the intent is activated.
         */
        isActive: boolean;
        /**
         * Contains the responses and actions that Amazon Lex takes after the Lambda function is complete.
         */
        postCodeHookSpecification: outputs.lex.BotPostDialogCodeHookInvocationSpecification;
    }

    /**
     * Settings that determine the Lambda function that Amazon Lex uses for processing user responses.
     */
    export interface BotDialogCodeHookSetting {
        /**
         * Enables the dialog code hook so that it processes user requests.
         */
        enabled: boolean;
    }

    /**
     * The current state of the conversation with the user.
     */
    export interface BotDialogState {
        /**
         * Defines the action that the bot executes at runtime when the conversation reaches this step.
         */
        dialogAction?: outputs.lex.BotDialogAction;
        /**
         * Override settings to configure the intent state.
         */
        intent?: outputs.lex.BotIntentOverride;
        /**
         * List of session attributes to be applied when the conversation reaches this step.
         */
        sessionAttributes?: outputs.lex.BotSessionAttribute[];
    }

    /**
     * Specifies the settings on DTMF input.
     */
    export interface BotDtmfSpecification {
        /**
         * The DTMF character that clears the accumulated DTMF digits and immediately ends the input.
         */
        deletionCharacter: string;
        /**
         * The DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout.
         */
        endCharacter: string;
        /**
         * How long the bot should wait after the last DTMF character input before assuming that the input has concluded.
         */
        endTimeoutMs: number;
        /**
         * The maximum number of DTMF digits allowed in an utterance.
         */
        maxLength: number;
    }

    /**
     * Settings that specify the dialog code hook that is called by Amazon Lex between eliciting slot values.
     */
    export interface BotElicitationCodeHookInvocationSetting {
        /**
         * Indicates whether a Lambda function should be invoked for the dialog.
         */
        enableCodeHookInvocation: boolean;
        /**
         * A label that indicates the dialog step from which the dialog code hook is happening.
         */
        invocationLabel?: string;
    }

    /**
     * Provides information about the external source of the slot type's definition.
     */
    export interface BotExternalSourceSetting {
        /**
         * Settings required for a slot type based on a grammar that you provide.
         */
        grammarSlotTypeSetting?: outputs.lex.BotGrammarSlotTypeSetting;
    }

    /**
     * Settings that determine if a Lambda function should be invoked to fulfill a specific intent.
     */
    export interface BotFulfillmentCodeHookSetting {
        /**
         * Indicates whether a Lambda function should be invoked to fulfill a specific intent.
         */
        enabled: boolean;
        /**
         * Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations.
         */
        fulfillmentUpdatesSpecification?: outputs.lex.BotFulfillmentUpdatesSpecification;
        /**
         * Determines whether the fulfillment code hook is used. When active is false, the code hook doesn't run.
         */
        isActive?: boolean;
        /**
         * Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations.
         */
        postFulfillmentStatusSpecification?: outputs.lex.BotPostFulfillmentStatusSpecification;
    }

    /**
     * Provides settings for a message that is sent to the user when a fulfillment Lambda function starts running.
     */
    export interface BotFulfillmentStartResponseSpecification {
        /**
         * Determines whether the user can interrupt the start message while it is playing.
         */
        allowInterrupt?: boolean;
        /**
         * The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played.
         */
        delayInSeconds: number;
        /**
         * 1 - 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user.
         */
        messageGroups: outputs.lex.BotMessageGroup[];
    }

    /**
     * Provides settings for a message that is sent periodically to the user while a fulfillment Lambda function is running.
     */
    export interface BotFulfillmentUpdateResponseSpecification {
        /**
         * Determines whether the user can interrupt an update message while it is playing.
         */
        allowInterrupt?: boolean;
        /**
         * The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user.
         */
        frequencyInSeconds: number;
        /**
         * 1 - 5 message groups that contain update messages. Amazon Lex chooses one of the messages to play to the user.
         */
        messageGroups: outputs.lex.BotMessageGroup[];
    }

    /**
     * Provides information for updating the user on the progress of fulfilling an intent.
     */
    export interface BotFulfillmentUpdatesSpecification {
        /**
         * Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent.
         */
        active: boolean;
        /**
         * Provides configuration information for the message sent to users when the fulfillment Lambda functions starts running.
         */
        startResponse?: outputs.lex.BotFulfillmentStartResponseSpecification;
        /**
         * The length of time that the fulfillment Lambda function should run before it times out.
         */
        timeoutInSeconds?: number;
        /**
         * Provides configuration information for messages sent periodically to the user while the fulfillment Lambda function is running.
         */
        updateResponse?: outputs.lex.BotFulfillmentUpdateResponseSpecification;
    }

    /**
     * Settings required for a slot type based on a grammar that you provide.
     */
    export interface BotGrammarSlotTypeSetting {
        /**
         * The source of the grammar used to create the slot type.
         */
        source?: outputs.lex.BotGrammarSlotTypeSource;
    }

    /**
     * Describes the Amazon S3 bucket name and location for the grammar that is the source for the slot type.
     */
    export interface BotGrammarSlotTypeSource {
        /**
         * The Amazon KMS key required to decrypt the contents of the grammar, if any.
         */
        kmsKeyArn?: string;
        /**
         * The name of the S3 bucket that contains the grammar source.
         */
        s3BucketName: string;
        /**
         * The path to the grammar in the S3 bucket.
         */
        s3ObjectKey: string;
    }

    /**
     * A message that defines a response card that the client application can show to the user.
     */
    export interface BotImageResponseCard {
        /**
         * A list of buttons that should be displayed on the response card.
         */
        buttons?: outputs.lex.BotButton[];
        /**
         * The URL of an image to display on the response card.
         */
        imageUrl?: string;
        /**
         * The subtitle to display on the response card.
         */
        subtitle?: string;
        /**
         * The title to display on the response card.
         */
        title: string;
    }

    /**
     * Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
     */
    export interface BotInitialResponseSetting {
        /**
         * Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation.
         */
        codeHook?: outputs.lex.BotDialogCodeHookInvocationSetting;
        /**
         * Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
         */
        conditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        initialResponse?: outputs.lex.BotResponseSpecification;
        /**
         * The next step in the conversation.
         */
        nextStep?: outputs.lex.BotDialogState;
    }

    /**
     * InputContext specified for the intent.
     */
    export interface BotInputContext {
        /**
         * The name of the context.
         */
        name: string;
    }

    /**
     * Represents an action that the user wants to perform.
     */
    export interface BotIntent {
        /**
         * Description of thr intent.
         */
        description?: string;
        /**
         * Specifies that Amazon Lex invokes the alias Lambda function for each user input. You can invoke this Lambda function to personalize user interaction.
         */
        dialogCodeHook?: outputs.lex.BotDialogCodeHookSetting;
        /**
         * Specifies that Amazon Lex invokes the alias Lambda function when the intent is ready for fulfillment. You can invoke this function to complete the bot's transaction with the user.
         */
        fulfillmentCodeHook?: outputs.lex.BotFulfillmentCodeHookSetting;
        /**
         * Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.
         */
        initialResponseSetting?: outputs.lex.BotInitialResponseSetting;
        /**
         * A list of contexts that must be active for this intent to be considered by Amazon Lex .
         */
        inputContexts?: outputs.lex.BotInputContext[];
        /**
         * Sets the response that Amazon Lex sends to the user when the intent is closed.
         */
        intentClosingSetting?: outputs.lex.BotIntentClosingSetting;
        /**
         * Provides prompts that Amazon Lex sends to the user to confirm the completion of an intent. If the user answers "no," the settings contain a statement that is sent to the user to end the intent.
         */
        intentConfirmationSetting?: outputs.lex.BotIntentConfirmationSetting;
        /**
         * Provides configuration information for the `AMAZON.KendraSearchIntent` intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.
         */
        kendraConfiguration?: outputs.lex.BotKendraConfiguration;
        /**
         * The name of the intent.
         */
        name: string;
        /**
         * A list of contexts that the intent activates when it is fulfilled.
         */
        outputContexts?: outputs.lex.BotOutputContext[];
        /**
         * A unique identifier for the built-in intent to base this intent on.
         */
        parentIntentSignature?: string;
        /**
         * A sample utterance that invokes an intent or respond to a slot elicitation prompt.
         */
        sampleUtterances?: outputs.lex.BotSampleUtterance[];
        /**
         * Indicates the priority for slots. Amazon Lex prompts the user for slot values in priority order.
         */
        slotPriorities?: outputs.lex.BotSlotPriority[];
        /**
         * List of slots
         */
        slots?: outputs.lex.BotSlot[];
    }

    /**
     * Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.
     */
    export interface BotIntentClosingSetting {
        /**
         * The response that Amazon Lex sends to the user when the intent is complete.
         */
        closingResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches associated with the intent's closing response. These branches are executed when the nextStep attribute is set to EvalutateConditional.
         */
        conditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the active field isn't specified, the default is true.
         */
        isActive?: boolean;
        /**
         * Specifies the next step that the bot executes after playing the intent's closing response.
         */
        nextStep?: outputs.lex.BotDialogState;
    }

    /**
     * Provides a prompt for making sure that the user is ready for the intent to be fulfilled.
     */
    export interface BotIntentConfirmationSetting {
        /**
         * The DialogCodeHookInvocationSetting object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is InvokeDialogCodeHook.
         */
        codeHook?: outputs.lex.BotDialogCodeHookInvocationSetting;
        /**
         * A list of conditional branches to evaluate after the intent is closed.
         */
        confirmationConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot executes when the customer confirms the intent.
         */
        confirmationNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        confirmationResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate after the intent is declined.
         */
        declinationConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot executes when the customer declines the intent.
         */
        declinationNextStep?: outputs.lex.BotDialogState;
        /**
         * When the user answers "no" to the question defined in promptSpecification, Amazon Lex responds with this response to acknowledge that the intent was canceled.
         */
        declinationResponse?: outputs.lex.BotResponseSpecification;
        /**
         * The DialogCodeHookInvocationSetting used when the code hook is invoked during confirmation prompt retries.
         */
        elicitationCodeHook?: outputs.lex.BotElicitationCodeHookInvocationSetting;
        /**
         * Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition.
         */
        failureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * The next step to take in the conversation if the confirmation step fails.
         */
        failureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        failureResponse?: outputs.lex.BotResponseSpecification;
        /**
         * Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the active field isn't specified, the default is true.
         */
        isActive?: boolean;
        /**
         * Prompts the user to confirm the intent. This question should have a yes or no answer.
         */
        promptSpecification: outputs.lex.BotPromptSpecification;
    }

    /**
     * Override settings to configure the intent state.
     */
    export interface BotIntentOverride {
        /**
         * The name of the intent. Only required when you're switching intents.
         */
        name?: string;
        /**
         * A map of all of the slot value overrides for the intent.
         */
        slots?: outputs.lex.BotSlotValueOverrideMap[];
    }

    /**
     * Configuration for searching a Amazon Kendra index specified for the intent.
     */
    export interface BotKendraConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the `AMAZON.KendraSearchIntent` intent to search. The index must be in the same account and Region as the Amazon Lex bot.
         */
        kendraIndex: string;
        /**
         * A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see [Filtering queries](https://docs.aws.amazon.com/kendra/latest/dg/filtering.html) .
         */
        queryFilterString?: string;
        /**
         * Determines whether the AMAZON.KendraSearchIntent intent uses a custom query string to query the Amazon Kendra index.
         */
        queryFilterStringEnabled?: boolean;
    }

    /**
     * A locale in the bot, which contains the intents and slot types that the bot uses in conversations with users in the specified language and locale.
     */
    export interface BotLocale {
        /**
         * Specifies a custom vocabulary to use with a specific locale.
         */
        customVocabulary?: outputs.lex.BotCustomVocabulary;
        /**
         * A description of the bot locale. Use this to help identify the bot locale in lists.
         */
        description?: string;
        /**
         * List of intents
         */
        intents?: outputs.lex.BotIntent[];
        /**
         * The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales.
         */
        localeId: string;
        /**
         * Determines the threshold where Amazon Lex will insert the `AMAZON.FallbackIntent` , `AMAZON.KendraSearchIntent` , or both when returning alternative intents. You must configure an `AMAZON.FallbackIntent` . `AMAZON.KendraSearchIntent` is only inserted if it is configured for the bot.
         */
        nluConfidenceThreshold: number;
        /**
         * List of SlotTypes
         */
        slotTypes?: outputs.lex.BotSlotType[];
        /**
         * Defines settings for using an Amazon Polly voice to communicate with a user.
         */
        voiceSettings?: outputs.lex.BotVoiceSettings;
    }

    /**
     * The primary message that Amazon Lex should send to the user.
     */
    export interface BotMessage {
        customPayload?: outputs.lex.BotCustomPayload;
        imageResponseCard?: outputs.lex.BotImageResponseCard;
        plainTextMessage?: outputs.lex.BotPlainTextMessage;
        ssmlMessage?: outputs.lex.BotSsmlMessage;
    }

    /**
     * One or more messages that Amazon Lex can send to the user.
     */
    export interface BotMessageGroup {
        message: outputs.lex.BotMessage;
        /**
         * Message variations to send to the user.
         */
        variations?: outputs.lex.BotMessage[];
    }

    /**
     * Indicates whether a slot can return multiple values.
     */
    export interface BotMultipleValuesSetting {
        /**
         * Indicates whether a slot can return multiple values. When `true` , the slot may return more than one value in a response. When `false` , the slot returns only a single value.
         *
         * Multi-value slots are only available in the en-US locale. If you set this value to `true` in any other locale, Amazon Lex throws a `ValidationException` .
         *
         * If the `allowMutlipleValues` is not set, the default value is `false` .
         */
        allowMultipleValues?: boolean;
    }

    /**
     * Determines whether Amazon Lex obscures slot values in conversation logs.
     */
    export interface BotObfuscationSetting {
        /**
         * Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values.
         */
        obfuscationSettingType: enums.lex.BotObfuscationSettingObfuscationSettingType;
    }

    /**
     * A session context that is activated when an intent is fulfilled.
     */
    export interface BotOutputContext {
        name: string;
        timeToLiveInSeconds: number;
        turnsToLive: number;
    }

    /**
     * A message in plain text format.
     */
    export interface BotPlainTextMessage {
        /**
         * The message to send to the user.
         */
        value: string;
    }

    /**
     * Specifies next steps to run after the dialog code hook finishes.
     */
    export interface BotPostDialogCodeHookInvocationSpecification {
        /**
         * A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
         */
        failureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the State field of the Intent object set to Failed.
         */
        failureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        failureResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate after the dialog code hook finishes successfully.
         */
        successConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifics the next step the bot runs after the dialog code hook finishes successfully.
         */
        successNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        successResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate if the code hook times out.
         */
        timeoutConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot runs when the code hook times out.
         */
        timeoutNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        timeoutResponse?: outputs.lex.BotResponseSpecification;
    }

    /**
     * Provides a setting that determines whether the post-fulfillment response is sent to the user.
     */
    export interface BotPostFulfillmentStatusSpecification {
        /**
         * A list of conditional branches to evaluate after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
         */
        failureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step the bot runs after the fulfillment code hook throws an exception or returns with the State field of the Intent object set to Failed.
         */
        failureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        failureResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate after the fulfillment code hook finishes successfully.
         */
        successConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step in the conversation that Amazon Lex invokes when the fulfillment code hook completes successfully.
         */
        successNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        successResponse?: outputs.lex.BotResponseSpecification;
        /**
         * A list of conditional branches to evaluate if the fulfillment code hook times out.
         */
        timeoutConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot runs when the fulfillment code hook times out.
         */
        timeoutNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        timeoutResponse?: outputs.lex.BotResponseSpecification;
    }

    /**
     * Specifies the settings on a prompt attempt.
     */
    export interface BotPromptAttemptSpecification {
        /**
         * Indicates whether the user can interrupt a speech prompt attempt from the bot.
         */
        allowInterrupt?: boolean;
        allowedInputTypes: outputs.lex.BotAllowedInputTypes;
        audioAndDtmfInputSpecification?: outputs.lex.BotAudioAndDtmfInputSpecification;
        textInputSpecification?: outputs.lex.BotTextInputSpecification;
    }

    /**
     * Prompts the user to confirm the intent.
     */
    export interface BotPromptSpecification {
        /**
         * Indicates whether the user can interrupt a speech prompt from the bot.
         */
        allowInterrupt?: boolean;
        /**
         * The maximum number of times the bot tries to elicit a response from the user using this prompt.
         */
        maxRetries: number;
        /**
         * A collection of messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime.
         */
        messageGroupsList: outputs.lex.BotMessageGroup[];
        /**
         * Indicates how a message is selected from a message group among retries.
         */
        messageSelectionStrategy?: enums.lex.BotMessageSelectionStrategy;
        /**
         * Specifies the advanced settings on each attempt of the prompt.
         */
        promptAttemptsSpecification?: {[key: string]: outputs.lex.BotPromptAttemptSpecification};
    }

    /**
     * A list of message groups that Amazon Lex uses to respond the user input.
     */
    export interface BotResponseSpecification {
        /**
         * Indicates whether the user can interrupt a speech prompt from the bot.
         */
        allowInterrupt?: boolean;
        /**
         * A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime.
         */
        messageGroupsList: outputs.lex.BotMessageGroup[];
    }

    /**
     * Specifies an Amazon S3 bucket for logging audio conversations
     */
    export interface BotS3BucketLogDestination {
        /**
         * The Amazon Resource Name (ARN) of an AWS Key Management Service (KMS) key for encrypting audio log files stored in an S3 bucket.
         */
        kmsKeyArn?: string;
        /**
         * The Amazon S3 key of the deployment package.
         */
        logPrefix: string;
        /**
         * The Amazon Resource Name (ARN) of an Amazon S3 bucket where audio log files are stored.
         */
        s3BucketArn: string;
    }

    /**
     * S3 location of bot definitions zip file, if it's not defined inline in CloudFormation.
     */
    export interface BotS3Location {
        /**
         * An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
         */
        s3Bucket: string;
        /**
         * The Amazon S3 key of the deployment package.
         */
        s3ObjectKey: string;
        /**
         * For versioned objects, the version of the deployment package object to use. If not specified, the current object version will be used.
         */
        s3ObjectVersion?: string;
    }

    /**
     * A sample utterance that invokes an intent or respond to a slot elicitation prompt.
     */
    export interface BotSampleUtterance {
        utterance: string;
    }

    /**
     * Defines one of the values for a slot type.
     */
    export interface BotSampleValue {
        /**
         * The value that can be used for a slot type.
         */
        value: string;
    }

    /**
     * Key/value pair representing session-specific context information. It contains application information passed between Amazon Lex and a client application.
     */
    export interface BotSessionAttribute {
        /**
         * The name of the session attribute.
         */
        key: string;
        /**
         * The session-specific context information for the session attribute.
         */
        value?: string;
    }

    /**
     * A slot is a variable needed to fulfill an intent, where an intent can require zero or more slots.
     */
    export interface BotSlot {
        /**
         * The description of the slot.
         */
        description?: string;
        /**
         * Indicates whether a slot can return multiple values.
         */
        multipleValuesSetting?: outputs.lex.BotMultipleValuesSetting;
        /**
         * The name given to the slot.
         */
        name: string;
        /**
         * Determines whether the contents of the slot are obfuscated in Amazon CloudWatch Logs logs. Use obfuscated slots to protect information such as personally identifiable information (PII) in logs.
         */
        obfuscationSetting?: outputs.lex.BotObfuscationSetting;
        /**
         * The name of the slot type that this slot is based on. The slot type defines the acceptable values for the slot.
         */
        slotTypeName: string;
        /**
         * Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:
         *
         * - ORIGINAL_VALUE - Returns the value entered by the user, if the user value is similar to a slot value.
         * - TOP_RESOLUTION - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.
         *
         * If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
         */
        valueElicitationSetting: outputs.lex.BotSlotValueElicitationSetting;
    }

    /**
     * Settings used when Amazon Lex successfully captures a slot value from a user.
     */
    export interface BotSlotCaptureSetting {
        /**
         * A list of conditional branches to evaluate after the slot value is captured.
         */
        captureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot runs when the slot value is captured before the code hook times out.
         */
        captureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        captureResponse?: outputs.lex.BotResponseSpecification;
        /**
         * Code hook called after Amazon Lex successfully captures a slot value.
         */
        codeHook?: outputs.lex.BotDialogCodeHookInvocationSetting;
        /**
         * Code hook called when Amazon Lex doesn't capture a slot value.
         */
        elicitationCodeHook?: outputs.lex.BotElicitationCodeHookInvocationSetting;
        /**
         * A list of conditional branches to evaluate when the slot value isn't captured.
         */
        failureConditional?: outputs.lex.BotConditionalSpecification;
        /**
         * Specifies the next step that the bot runs when the slot value code is not recognized.
         */
        failureNextStep?: outputs.lex.BotDialogState;
        /**
         * Specifies a list of message groups that Amazon Lex uses to respond the user input.
         */
        failureResponse?: outputs.lex.BotResponseSpecification;
    }

    /**
     * The default value to use when a user doesn't provide a value for a slot.
     */
    export interface BotSlotDefaultValue {
        /**
         * The default value to use when a user doesn't provide a value for a slot.
         */
        defaultValue: string;
    }

    /**
     * A list of values that Amazon Lex should use as the default value for a slot.
     */
    export interface BotSlotDefaultValueSpecification {
        /**
         * A list of slot default values
         */
        defaultValueList: outputs.lex.BotSlotDefaultValue[];
    }

    /**
     * The priority that Amazon Lex should use when eliciting slot values from a user.
     */
    export interface BotSlotPriority {
        priority: number;
        /**
         * The name of the slot.
         */
        slotName: string;
    }

    /**
     * A custom, extended built-in or a grammar slot type.
     */
    export interface BotSlotType {
        /**
         * A description of the slot type. Use the description to help identify the slot type in lists.
         */
        description?: string;
        /**
         * Sets the type of external information used to create the slot type.
         */
        externalSourceSetting?: outputs.lex.BotExternalSourceSetting;
        /**
         * The name of the slot type. A slot type name must be unique withing the account.
         */
        name: string;
        /**
         * The built-in slot type used as a parent of this slot type. When you define a parent slot type, the new slot type has the configuration of the parent lot type.
         *
         * Only `AMAZON.AlphaNumeric` is supported.
         */
        parentSlotTypeSignature?: string;
        /**
         * A list of SlotTypeValue objects that defines the values that the slot type can take. Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for the slot.
         */
        slotTypeValues?: outputs.lex.BotSlotTypeValue[];
        /**
         * Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:
         *
         * - `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value.
         * - `TOP_RESOLUTION` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.
         *
         * If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
         */
        valueSelectionSetting?: outputs.lex.BotSlotValueSelectionSetting;
    }

    /**
     * Value that the slot type can take.
     */
    export interface BotSlotTypeValue {
        sampleValue: outputs.lex.BotSampleValue;
        synonyms?: outputs.lex.BotSampleValue[];
    }

    /**
     * The value to set in a slot.
     */
    export interface BotSlotValue {
        /**
         * The value that Amazon Lex determines for the slot.
         */
        interpretedValue?: string;
    }

    /**
     * Settings that you can use for eliciting a slot value.
     */
    export interface BotSlotValueElicitationSetting {
        /**
         * A list of default values for a slot.
         */
        defaultValueSpecification?: outputs.lex.BotSlotDefaultValueSpecification;
        /**
         * The prompt that Amazon Lex uses to elicit the slot value from the user.
         */
        promptSpecification?: outputs.lex.BotPromptSpecification;
        /**
         * If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy.
         */
        sampleUtterances?: outputs.lex.BotSampleUtterance[];
        /**
         * Specifies the next stage in the conversation after capturing the slot.
         */
        slotCaptureSetting?: outputs.lex.BotSlotCaptureSetting;
        /**
         * Specifies whether the slot is required or optional.
         */
        slotConstraint: enums.lex.BotSlotConstraint;
        /**
         * Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
         */
        waitAndContinueSpecification?: outputs.lex.BotWaitAndContinueSpecification;
    }

    /**
     * The slot values that Amazon Lex uses when it sets slot values in a dialog step.
     */
    export interface BotSlotValueOverride {
        /**
         * When the shape value is List, it indicates that the values field contains a list of slot values. When the value is Scalar, it indicates that the value field contains a single value.
         */
        shape?: enums.lex.BotSlotShape;
        /**
         * The current value of the slot.
         */
        value?: outputs.lex.BotSlotValue;
        /**
         * A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."
         */
        values?: outputs.lex.BotSlotValueOverride[];
    }

    /**
     * A map of slot names and their overridden values.
     */
    export interface BotSlotValueOverrideMap {
        /**
         * The name of the slot.
         */
        slotName?: string;
        /**
         * The SlotValueOverride object to which the slot name will be mapped.
         */
        slotValueOverride?: outputs.lex.BotSlotValueOverride;
    }

    /**
     * A regular expression used to validate the value of a slot.
     */
    export interface BotSlotValueRegexFilter {
        /**
         * Regex pattern
         */
        pattern: string;
    }

    /**
     * Contains settings used by Amazon Lex to select a slot value.
     */
    export interface BotSlotValueSelectionSetting {
        /**
         * Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
         */
        advancedRecognitionSetting?: outputs.lex.BotAdvancedRecognitionSetting;
        /**
         * A regular expression used to validate the value of a slot.
         */
        regexFilter?: outputs.lex.BotSlotValueRegexFilter;
        /**
         * Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:
         *
         * - `ORIGINAL_VALUE` - Returns the value entered by the user, if the user value is similar to the slot value.
         * - `TOP_RESOLUTION` - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.
         *
         * If you don't specify the `valueSelectionStrategy` , the default is `ORIGINAL_VALUE` .
         */
        resolutionStrategy: enums.lex.BotSlotValueResolutionStrategy;
    }

    /**
     * A message in Speech Synthesis Markup Language (SSML).
     */
    export interface BotSsmlMessage {
        /**
         * The SSML text that defines the prompt.
         */
        value: string;
    }

    /**
     * StillWaitingResponseSpecification.
     */
    export interface BotStillWaitingResponseSpecification {
        /**
         * Indicates whether the user can interrupt a speech prompt from the bot.
         */
        allowInterrupt?: boolean;
        /**
         * How often a message should be sent to the user. Minimum of 1 second, maximum of 5 minutes.
         */
        frequencyInSeconds: number;
        /**
         * One or more message groups, each containing one or more messages, that define the prompts that Amazon Lex sends to the user.
         */
        messageGroupsList: outputs.lex.BotMessageGroup[];
        /**
         * If Amazon Lex waits longer than this length of time for a response, it will stop sending messages.
         */
        timeoutInSeconds: number;
    }

    /**
     * A key-value pair for tagging Lex resources
     */
    export interface BotTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Configuring the test bot alias settings for a given bot
     */
    export interface BotTestBotAliasSettings {
        /**
         * Specifies settings that are unique to a locale. For example, you can use a different Lambda function depending on the bot's locale.
         */
        botAliasLocaleSettings?: outputs.lex.BotAliasLocaleSettingsItem[];
        /**
         * Specifies settings for conversation logs that save audio, text, and metadata information for conversations with your users.
         */
        conversationLogSettings?: outputs.lex.BotConversationLogSettings;
        /**
         * Specifies a description for the test bot alias.
         */
        description?: string;
        /**
         * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
         */
        sentimentAnalysisSettings?: outputs.lex.BotTestBotAliasSettingsSentimentAnalysisSettingsProperties;
    }

    /**
     * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
     */
    export interface BotTestBotAliasSettingsSentimentAnalysisSettingsProperties {
        /**
         * Enable to call Amazon Comprehend for Sentiment natively within Lex
         */
        detectSentiment: boolean;
    }

    /**
     * Specifies the text input specifications.
     */
    export interface BotTextInputSpecification {
        /**
         * Time for which a bot waits before re-prompting a customer for text input.
         */
        startTimeoutMs: number;
    }

    /**
     * Defines the Amazon CloudWatch Logs destination log group for conversation text logs.
     */
    export interface BotTextLogDestination {
        cloudWatch: outputs.lex.BotCloudWatchLogGroupLogDestination;
    }

    /**
     * Contains information about code hooks that Amazon Lex calls during a conversation.
     */
    export interface BotTextLogSetting {
        destination: outputs.lex.BotTextLogDestination;
        enabled: boolean;
    }

    /**
     * The version of a bot used for a bot locale.
     */
    export interface BotVersionLocaleDetails {
        sourceBotVersion: string;
    }

    export interface BotVersionLocaleSpecification {
        botVersionLocaleDetails: outputs.lex.BotVersionLocaleDetails;
        localeId: string;
    }

    /**
     * Settings for using an Amazon Polly voice to communicate with a user.
     */
    export interface BotVoiceSettings {
        /**
         * Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the engine parameter of the SynthesizeSpeech operation in the Amazon Polly developer guide.
         */
        engine?: enums.lex.BotVoiceSettingsEngine;
        /**
         * The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user.
         */
        voiceId: string;
    }

    /**
     * The prompts that Amazon Lex uses while a bot is waiting for customer input.
     */
    export interface BotWaitAndContinueSpecification {
        /**
         * The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation.
         */
        continueResponse: outputs.lex.BotResponseSpecification;
        /**
         * Specifies whether the bot will wait for a user to respond.
         */
        isActive?: boolean;
        /**
         * The response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user.
         */
        stillWaitingResponse?: outputs.lex.BotStillWaitingResponseSpecification;
        /**
         * The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue.
         */
        waitingResponse: outputs.lex.BotResponseSpecification;
    }

    /**
     * Data privacy setting of the Bot.
     */
    export interface DataPrivacyProperties {
        /**
         * For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying `true` or `false` in the `childDirected` field. By specifying `true` in the `childDirected` field, you confirm that your use of Amazon Lex *is* related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying `false` in the `childDirected` field, you confirm that your use of Amazon Lex *is not* related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the `childDirected` field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the [Amazon Lex FAQ](https://docs.aws.amazon.com/lex/faqs#data-security) .
         */
        childDirected: boolean;
    }

    /**
     * A resource policy to add to the resource. The policy is a JSON structure following the IAM syntax that contains one or more statements that define the policy.
     */
    export interface ResourcePolicyPolicy {
    }

    /**
     * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
     */
    export interface SentimentAnalysisSettingsProperties {
        /**
         * Enable to call Amazon Comprehend for Sentiment natively within Lex
         */
        detectSentiment: boolean;
    }

}

export namespace licensemanager {
    export interface LicenseBorrowConfiguration {
        /**
         * Indicates whether early check-ins are allowed.
         */
        allowEarlyCheckIn: boolean;
        /**
         * Maximum time for the borrow configuration, in minutes.
         */
        maxTimeToLiveInMinutes: number;
    }

    export interface LicenseConsumptionConfiguration {
        /**
         * Details about a borrow configuration.
         */
        borrowConfiguration?: outputs.licensemanager.LicenseBorrowConfiguration;
        /**
         * Details about a provisional configuration.
         */
        provisionalConfiguration?: outputs.licensemanager.LicenseProvisionalConfiguration;
        /**
         * Renewal frequency.
         */
        renewType?: string;
    }

    export interface LicenseEntitlement {
        /**
         * Indicates whether check-ins are allowed.
         */
        allowCheckIn?: boolean;
        /**
         * Maximum entitlement count. Use if the unit is not None.
         */
        maxCount?: number;
        /**
         * Entitlement name.
         */
        name: string;
        /**
         * Indicates whether overages are allowed.
         */
        overage?: boolean;
        /**
         * Entitlement unit.
         */
        unit: string;
        /**
         * Entitlement resource. Use only if the unit is None.
         */
        value?: string;
    }

    export interface LicenseIssuerData {
        /**
         * Issuer name.
         */
        name: string;
        /**
         * Asymmetric KMS key from AWS Key Management Service . The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
         */
        signKey?: string;
    }

    export interface LicenseMetadata {
        /**
         * The key name.
         */
        name: string;
        /**
         * The value.
         */
        value: string;
    }

    export interface LicenseProvisionalConfiguration {
        /**
         * Maximum time for the provisional configuration, in minutes.
         */
        maxTimeToLiveInMinutes: number;
    }

    export interface LicenseValidityDateFormat {
        /**
         * Validity begin date for the license.
         */
        begin: string;
        /**
         * Validity begin date for the license.
         */
        end: string;
    }

}

export namespace lightsail {
    /**
     * An object that sets the public accessibility of objects in the specified bucket.
     */
    export interface BucketAccessRules {
        /**
         * A Boolean value that indicates whether the access control list (ACL) permissions that are applied to individual objects override the getObject option that is currently specified.
         */
        allowPublicOverrides?: boolean;
        /**
         * Specifies the anonymous access to all objects in a bucket.
         */
        getObject?: string;
    }

    /**
     * Describes the settings of a container that will be launched, or that is launched, to an Amazon Lightsail container service.
     */
    export interface Container {
        /**
         * The launch command for the container.
         */
        command?: string[];
        /**
         * The name of the container.
         */
        containerName?: string;
        /**
         * The environment variables of the container.
         */
        environment?: outputs.lightsail.ContainerEnvironmentVariable[];
        /**
         * The name of the image used for the container.
         */
        image?: string;
        /**
         * The open firewall ports of the container.
         */
        ports?: outputs.lightsail.ContainerPortInfo[];
    }

    export interface ContainerEnvironmentVariable {
        /**
         * The environment variable value.
         */
        value?: string;
        /**
         * The environment variable key.
         */
        variable?: string;
    }

    /**
     * Describes the health check configuration of an Amazon Lightsail container service.
     */
    export interface ContainerHealthCheckConfig {
        /**
         * The number of consecutive health checks successes required before moving the container to the Healthy state. The default value is 2.
         */
        healthyThreshold?: number;
        /**
         * The approximate interval, in seconds, between health checks of an individual container. You can specify between 5 and 300 seconds. The default value is 5.
         */
        intervalSeconds?: number;
        /**
         * The path on the container on which to perform the health check. The default value is /.
         */
        path?: string;
        /**
         * The HTTP codes to use when checking for a successful response from a container. You can specify values between 200 and 499. You can specify multiple values (for example, 200,202) or a range of values (for example, 200-299).
         */
        successCodes?: string;
        /**
         * The amount of time, in seconds, during which no response means a failed health check. You can specify between 2 and 60 seconds. The default value is 2.
         */
        timeoutSeconds?: number;
        /**
         * The number of consecutive health check failures required before moving the container to the Unhealthy state. The default value is 2.
         */
        unhealthyThreshold?: number;
    }

    export interface ContainerPortInfo {
        /**
         * The open firewall ports of the container.
         */
        port?: string;
        /**
         * The protocol name for the open ports.
         *
         * *Allowed values* : `HTTP` | `HTTPS` | `TCP` | `UDP`
         */
        protocol?: string;
    }

    /**
     * An object to describe the configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.
     */
    export interface ContainerPrivateRegistryAccess {
        /**
         * An object to describe a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.
         */
        ecrImagePullerRole?: outputs.lightsail.ContainerPrivateRegistryAccessEcrImagePullerRoleProperties;
    }

    /**
     * An object to describe a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.
     */
    export interface ContainerPrivateRegistryAccessEcrImagePullerRoleProperties {
        /**
         * A Boolean value that indicates whether to activate the role.
         */
        isActive?: boolean;
        /**
         * The Amazon Resource Name (ARN) of the role, if it is activated.
         */
        principalArn?: string;
    }

    /**
     * The public domain name to use with the container service, such as example.com and www.example.com.
     */
    export interface ContainerPublicDomainName {
        /**
         * The name of the certificate for the public domains.
         */
        certificateName?: string;
        /**
         * An object that describes the configuration for the containers of the deployment.
         */
        domainNames?: string[];
    }

    /**
     * Describes the settings of a public endpoint for an Amazon Lightsail container service.
     */
    export interface ContainerPublicEndpoint {
        /**
         * The name of the container for the endpoint.
         */
        containerName?: string;
        /**
         * The port of the container to which traffic is forwarded to.
         */
        containerPort?: number;
        /**
         * An object that describes the health check configuration of the container.
         */
        healthCheckConfig?: outputs.lightsail.ContainerHealthCheckConfig;
    }

    /**
     * Describes a container deployment configuration of an Amazon Lightsail container service.
     */
    export interface ContainerServiceDeployment {
        /**
         * An object that describes the configuration for the containers of the deployment.
         */
        containers?: outputs.lightsail.Container[];
        /**
         * An object that describes the endpoint of the deployment.
         */
        publicEndpoint?: outputs.lightsail.ContainerPublicEndpoint;
    }

    /**
     * Describes the parameters of the database.
     */
    export interface DatabaseRelationalDatabaseParameter {
        /**
         * Specifies the valid range of values for the parameter.
         */
        allowedValues?: string;
        /**
         * Indicates when parameter updates are applied. Can be immediate or pending-reboot.
         */
        applyMethod?: string;
        /**
         * Specifies the engine-specific parameter type.
         */
        applyType?: string;
        /**
         * Specifies the valid data type for the parameter.
         */
        dataType?: string;
        /**
         * Provides a description of the parameter.
         */
        description?: string;
        /**
         * A Boolean value indicating whether the parameter can be modified.
         */
        isModifiable?: boolean;
        /**
         * Specifies the name of the parameter.
         */
        parameterName?: string;
        /**
         * Specifies the value of the parameter.
         */
        parameterValue?: string;
    }

    /**
     * A addon associate with a resource.
     */
    export interface DiskAddOn {
        /**
         * The add-on type
         */
        addOnType: string;
        /**
         * The parameters for the automatic snapshot add-on, such as the daily time when an automatic snapshot will be created.
         */
        autoSnapshotAddOnRequest?: outputs.lightsail.DiskAutoSnapshotAddOn;
        /**
         * Status of the Addon
         */
        status?: enums.lightsail.DiskAddOnStatus;
    }

    /**
     * An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
     */
    export interface DiskAutoSnapshotAddOn {
        /**
         * The daily time when an automatic snapshot will be created.
         */
        snapshotTimeOfDay?: string;
    }

    /**
     * Location of a resource.
     */
    export interface DiskLocation {
        /**
         * The Availability Zone in which to create your disk. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
         */
        availabilityZone?: string;
        /**
         * The Region Name in which to create your disk.
         */
        regionName?: string;
    }

    /**
     * A addon associate with a resource.
     */
    export interface InstanceAddOn {
        /**
         * The add-on type
         */
        addOnType: string;
        /**
         * The parameters for the automatic snapshot add-on, such as the daily time when an automatic snapshot will be created.
         */
        autoSnapshotAddOnRequest?: outputs.lightsail.InstanceAutoSnapshotAddOn;
        /**
         * Status of the Addon
         */
        status?: enums.lightsail.InstanceAddOnStatus;
    }

    /**
     * An object that represents additional parameters when enabling or modifying the automatic snapshot add-on
     */
    export interface InstanceAutoSnapshotAddOn {
        /**
         * The daily time when an automatic snapshot will be created.
         */
        snapshotTimeOfDay?: string;
    }

    /**
     * Disk associated with the Instance.
     */
    export interface InstanceDisk {
        /**
         * Instance attached to the disk.
         */
        attachedTo?: string;
        /**
         * Attachment state of the disk.
         */
        attachmentState?: string;
        /**
         * The names to use for your new Lightsail disk.
         */
        diskName: string;
        /**
         * IOPS of disk.
         */
        iops?: number;
        /**
         * Is the Attached disk is the system disk of the Instance.
         */
        isSystemDisk?: boolean;
        /**
         * Path of the disk attached to the instance.
         */
        path: string;
        /**
         * Size of the disk attached to the Instance.
         */
        sizeInGb?: string;
    }

    /**
     * Hardware of the Instance.
     */
    export interface InstanceHardware {
        /**
         * CPU count of the Instance.
         */
        cpuCount?: number;
        /**
         * Disks attached to the Instance.
         */
        disks?: outputs.lightsail.InstanceDisk[];
        /**
         * RAM Size of the Instance.
         */
        ramSizeInGb?: number;
    }

    /**
     * Location of a resource.
     */
    export interface InstanceLocation {
        /**
         * The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). Be sure to add the include Availability Zones parameter to your request.
         */
        availabilityZone?: string;
        /**
         * The Region Name in which to create your instance.
         */
        regionName?: string;
    }

    /**
     * Monthly Transfer of the Instance.
     */
    export interface InstanceMonthlyTransfer {
        /**
         * GbPerMonthAllocated of the Instance.
         */
        gbPerMonthAllocated?: string;
    }

    /**
     * Networking of the Instance.
     */
    export interface InstanceNetworking {
        /**
         * The monthly amount of data transfer, in GB, allocated for the instance
         */
        monthlyTransfer?: outputs.lightsail.InstanceMonthlyTransfer;
        /**
         * Ports to the Instance.
         */
        ports: outputs.lightsail.InstancePort[];
    }

    /**
     * Port of the Instance.
     */
    export interface InstancePort {
        /**
         * Access Direction for Protocol of the Instance(inbound/outbound).
         */
        accessDirection?: string;
        /**
         * Access From Protocol of the Instance.
         */
        accessFrom?: string;
        /**
         * Access Type Protocol of the Instance.
         */
        accessType?: string;
        /**
         * An alias that defines access for a preconfigured range of IP addresses.
         *
         * The only alias currently supported is `lightsail-connect` , which allows IP addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your instance.
         */
        cidrListAliases?: string[];
        /**
         * The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol.
         *
         * > The `ipv6Cidrs` parameter lists the IPv6 addresses that are allowed to connect to an instance. 
         *
         * Examples:
         *
         * - To allow the IP address `192.0.2.44` , specify `192.0.2.44` or `192.0.2.44/32` .
         * - To allow the IP addresses `192.0.2.0` to `192.0.2.255` , specify `192.0.2.0/24` .
         */
        cidrs?: string[];
        /**
         * CommonName for Protocol of the Instance.
         */
        commonName?: string;
        /**
         * From Port of the Instance.
         */
        fromPort?: number;
        /**
         * The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol. Only devices with an IPv6 address can connect to an instance through IPv6; otherwise, IPv4 should be used.
         *
         * > The `cidrs` parameter lists the IPv4 addresses that are allowed to connect to an instance.
         */
        ipv6Cidrs?: string[];
        /**
         * Port Protocol of the Instance.
         */
        protocol?: string;
        /**
         * To Port of the Instance.
         */
        toPort?: number;
    }

    /**
     * Current State of the Instance.
     */
    export interface InstanceState {
        /**
         * Status code of the Instance.
         */
        code?: number;
        /**
         * Status code of the Instance.
         */
        name?: string;
    }

}

export namespace location {
    export interface ApiKeyRestrictions {
        /**
         * A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.
         *
         * The following are valid values for the actions.
         *
         * - *Map actions*
         *
         * - `geo:GetMap*` - Allows all actions needed for map rendering.
         * - *Place actions*
         *
         * - `geo:SearchPlaceIndexForText` - Allows geocoding.
         * - `geo:SearchPlaceIndexForPosition` - Allows reverse geocoding.
         * - `geo:SearchPlaceIndexForSuggestions` - Allows generating suggestions from text.
         * - `geo:GetPlace` - Allows finding a place by place ID.
         * - *Route actions*
         *
         * - `geo:CalculateRoute` - Allows point to point routing.
         * - `geo:CalculateRouteMatrix` - Allows calculating a matrix of routes.
         *
         * > You must use these strings exactly. For example, to provide access to map rendering, the only valid action is `geo:GetMap*` as an input to the list. `["geo:GetMap*"]` is valid but `["geo:GetMapTile"]` is not. Similarly, you cannot use `["geo:SearchPlaceIndexFor*"]` - you must list each of the Place actions separately.
         */
        allowActions: string[];
        /**
         * An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.
         *
         * Requirements:
         *
         * - Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list `$\-._+!*`(),;/?:@=&`
         * - May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.
         * - May contain wildcard characters question mark (?) and asterisk (*).
         *
         * Question mark (?) will replace any single character (including hexadecimal digits).
         *
         * Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).
         * - No spaces allowed. For example, `https://example.com` .
         */
        allowReferers?: string[];
        /**
         * A list of allowed resource ARNs that a API key bearer can perform actions on.
         *
         * - The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.
         * - The resources must be in the same `partition` , `region` , and `account-id` as the key that is being created.
         * - Other than wildcards, you must include the full ARN, including the `arn` , `partition` , `service` , `region` , `account-id` and `resource-id` delimited by colons (:).
         * - No spaces allowed, even with wildcards. For example, `arn:aws:geo:region: *account-id* :map/ExampleMap*` .
         *
         * For more information about ARN format, see [Amazon Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) .
         */
        allowResources: string[];
    }

    export interface MapConfiguration {
        /**
         * Specifies the custom layers for the style. Leave unset to not enable any custom layer, or, for styles that support custom layers, you can enable layer(s), such as the `POI` layer for the VectorEsriNavigation style.
         *
         * > Currenlty only `VectorEsriNavigation` supports CustomLayers. For more information, see [Custom Layers](https://docs.aws.amazon.com//location/latest/developerguide/map-concepts.html#map-custom-layers) .
         */
        customLayers?: string[];
        /**
         * Specifies the map political view selected from an available data provider.
         */
        politicalView?: string;
        /**
         * Specifies the map style selected from an available data provider.
         *
         * Valid [Esri map styles](https://docs.aws.amazon.com/location/latest/developerguide/esri.html) :
         *
         * - `VectorEsriNavigation` – The Esri Navigation map style, which provides a detailed basemap for the world symbolized with a custom navigation map style that's designed for use during the day in mobile devices. It also includes a richer set of places, such as shops, services, restaurants, attractions, and other points of interest. Enable the `POI` layer by setting it in CustomLayers to leverage the additional places data.
         * - `RasterEsriImagery` – The Esri Imagery map style. A raster basemap that provides one meter or better satellite and aerial imagery in many parts of the world and lower resolution satellite imagery worldwide.
         * - `VectorEsriLightGrayCanvas` – The Esri Light Gray Canvas map style, which provides a detailed vector basemap with a light gray, neutral background style with minimal colors, labels, and features that's designed to draw attention to your thematic content.
         * - `VectorEsriTopographic` – The Esri Light map style, which provides a detailed vector basemap with a classic Esri map style.
         * - `VectorEsriStreets` – The Esri Street Map style, which provides a detailed vector basemap for the world symbolized with a classic Esri street map style. The vector tile layer is similar in content and style to the World Street Map raster map.
         * - `VectorEsriDarkGrayCanvas` – The Esri Dark Gray Canvas map style. A vector basemap with a dark gray, neutral background with minimal colors, labels, and features that's designed to draw attention to your thematic content.
         *
         * Valid [HERE Technologies map styles](https://docs.aws.amazon.com/location/latest/developerguide/HERE.html) :
         *
         * - `VectorHereExplore` – A default HERE map style containing a neutral, global map and its features including roads, buildings, landmarks, and water features. It also now includes a fully designed map of Japan.
         * - `RasterHereExploreSatellite` – A global map containing high resolution satellite imagery.
         * - `HybridHereExploreSatellite` – A global map displaying the road network, street names, and city labels over satellite imagery. This style will automatically retrieve both raster and vector tiles, and your charges will be based on total tiles retrieved.
         *
         * > Hybrid styles use both vector and raster tiles when rendering the map that you see. This means that more tiles are retrieved than when using either vector or raster tiles alone. Your charges will include all tiles retrieved.
         * - `VectorHereContrast` – The HERE Contrast (Berlin) map style is a high contrast detailed base map of the world that blends 3D and 2D rendering.
         *
         * > The `VectorHereContrast` style has been renamed from `VectorHereBerlin` . `VectorHereBerlin` has been deprecated, but will continue to work in applications that use it.
         * - `VectorHereExploreTruck` – A global map containing truck restrictions and attributes (e.g. width / height / HAZMAT) symbolized with highlighted segments and icons on top of HERE Explore to support use cases within transport and logistics.
         *
         * Valid [GrabMaps map styles](https://docs.aws.amazon.com/location/latest/developerguide/grab.html) :
         *
         * - `VectorGrabStandardLight` – The Grab Standard Light map style provides a basemap with detailed land use coloring, area names, roads, landmarks, and points of interest covering Southeast Asia.
         * - `VectorGrabStandardDark` – The Grab Standard Dark map style provides a dark variation of the standard basemap covering Southeast Asia.
         *
         * > Grab provides maps only for countries in Southeast Asia, and is only available in the Asia Pacific (Singapore) Region ( `ap-southeast-1` ). For more information, see [GrabMaps countries and area covered](https://docs.aws.amazon.com/location/latest/developerguide/grab.html#grab-coverage-area) . 
         *
         * Valid [Open Data map styles](https://docs.aws.amazon.com/location/latest/developerguide/open-data.html) :
         *
         * - `VectorOpenDataStandardLight` – The Open Data Standard Light map style provides a detailed basemap for the world suitable for website and mobile application use. The map includes highways major roads, minor roads, railways, water features, cities, parks, landmarks, building footprints, and administrative boundaries.
         * - `VectorOpenDataStandardDark` – Open Data Standard Dark is a dark-themed map style that provides a detailed basemap for the world suitable for website and mobile application use. The map includes highways major roads, minor roads, railways, water features, cities, parks, landmarks, building footprints, and administrative boundaries.
         * - `VectorOpenDataVisualizationLight` – The Open Data Visualization Light map style is a light-themed style with muted colors and fewer features that aids in understanding overlaid data.
         * - `VectorOpenDataVisualizationDark` – The Open Data Visualization Dark map style is a dark-themed style with muted colors and fewer features that aids in understanding overlaid data.
         */
        style: string;
    }

    export interface PlaceIndexDataSourceConfiguration {
        /**
         * Specifies how the results of an operation will be stored by the caller.
         *
         * Valid values include:
         *
         * - `SingleUse` specifies that the results won't be stored.
         * - `Storage` specifies that the result can be cached or stored in a database.
         *
         * Default value: `SingleUse`
         */
        intendedUse?: enums.location.PlaceIndexIntendedUse;
    }

}

export namespace logs {
    export interface DeliveryDestinationDestinationPolicy {
        /**
         * The name of the delivery destination to assign this policy to
         */
        deliveryDestinationName: string;
        /**
         * The contents of the policy attached to the delivery destination
         */
        deliveryDestinationPolicy: string;
    }

    /**
     * Specifies the CW metric dimensions to publish with this metric.
     *   Because dimensions are part of the unique identifier for a metric, whenever a unique dimension name/value pair is extracted from your logs, you are creating a new variation of that metric.
     *  For more information about publishing dimensions with metrics created by metric filters, see [Publishing dimensions with metrics from values in JSON or space-delimited log events](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#logs-metric-filters-dimensions).
     *   Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. 
     *  To help prevent accidental high charges, Amazon disables a metric filter if it generates 1000 different name/value pairs for the dimensions that you have specified within a certain amount of time.
     *  You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
     */
    export interface MetricFilterDimension {
        /**
         * The name for the CW metric dimension that the metric filter creates.
         *  Dimension names must contain only ASCII characters, must include at least one non-whitespace character, and cannot start with a colon (:).
         */
        key: string;
        /**
         * The log event field that will contain the value for this dimension. This dimension will only be published for a metric if the value is found in the log event. For example, ``$.eventType`` for JSON log events, or ``$server`` for space-delimited log events.
         */
        value: string;
    }

    /**
     * ``MetricTransformation`` is a property of the ``AWS::Logs::MetricFilter`` resource that describes how to transform log streams into a CloudWatch metric.
     */
    export interface MetricFilterMetricTransformation {
        /**
         * (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
         */
        defaultValue?: number;
        /**
         * The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions.
         *   Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as ``IPAddress`` or ``requestID`` as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. 
         *  CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges.
         *  You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [Creating a Billing Alarm to Monitor Your Estimated Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
         */
        dimensions?: outputs.logs.MetricFilterDimension[];
        /**
         * The name of the CloudWatch metric.
         */
        metricName: string;
        /**
         * A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
         */
        metricNamespace: string;
        /**
         * The value that is published to the CloudWatch metric. For example, if you're counting the occurrences of a particular term like ``Error``, specify 1 for the metric value. If you're counting the number of bytes transferred, reference the value that is in the log event by using $. followed by the name of the field that you specified in the filter pattern, such as ``$.size``.
         */
        metricValue: string;
        /**
         * The unit to assign to the metric. If you omit this, the unit is set as ``None``.
         */
        unit?: enums.logs.MetricFilterMetricTransformationUnit;
    }

}

export namespace lookoutmetrics {
    export interface AlertAction {
        /**
         * A configuration for an AWS Lambda channel.
         */
        lambdaConfiguration?: outputs.lookoutmetrics.AlertLambdaConfiguration;
        /**
         * A configuration for an Amazon SNS channel.
         */
        snsConfiguration?: outputs.lookoutmetrics.AlertSnsConfiguration;
    }

    /**
     * Configuration options for a Lambda alert action.
     */
    export interface AlertLambdaConfiguration {
        /**
         * ARN of a Lambda to send alert notifications to.
         */
        lambdaArn: string;
        /**
         * ARN of an IAM role that LookoutMetrics should assume to access the Lambda function.
         */
        roleArn: string;
    }

    /**
     * Configuration options for an SNS alert action.
     */
    export interface AlertSnsConfiguration {
        /**
         * ARN of an IAM role that LookoutMetrics should assume to access the SNS topic.
         */
        roleArn: string;
        /**
         * ARN of an SNS topic to send alert notifications to.
         */
        snsTopicArn: string;
    }

    export interface AnomalyDetectorAppFlowConfig {
        /**
         * name of the flow.
         */
        flowName: string;
        /**
         * An IAM role that gives Amazon Lookout for Metrics permission to access the flow.
         */
        roleArn: string;
    }

    export interface AnomalyDetectorCloudwatchConfig {
        /**
         * An IAM role that gives Amazon Lookout for Metrics permission to access data in Amazon CloudWatch.
         */
        roleArn: string;
    }

    export interface AnomalyDetectorConfig {
        /**
         * Frequency of anomaly detection
         */
        anomalyDetectorFrequency: enums.lookoutmetrics.AnomalyDetectorFrequency;
    }

    export interface AnomalyDetectorCsvFormatDescriptor {
        /**
         * The character set in which the source CSV file is written.
         */
        charset?: string;
        /**
         * Whether or not the source CSV file contains a header.
         */
        containsHeader?: boolean;
        /**
         * The character used to delimit the source CSV file.
         */
        delimiter?: string;
        /**
         * The level of compression of the source CSV file.
         */
        fileCompression?: enums.lookoutmetrics.AnomalyDetectorCsvFormatDescriptorFileCompression;
        /**
         * A list of the source CSV file's headers, if any.
         */
        headerList?: string[];
        /**
         * The character used as a quote character.
         */
        quoteSymbol?: string;
    }

    export interface AnomalyDetectorFileFormatDescriptor {
        /**
         * Contains information about how a source CSV data file should be analyzed.
         */
        csvFormatDescriptor?: outputs.lookoutmetrics.AnomalyDetectorCsvFormatDescriptor;
        /**
         * Contains information about how a source JSON data file should be analyzed.
         */
        jsonFormatDescriptor?: outputs.lookoutmetrics.AnomalyDetectorJsonFormatDescriptor;
    }

    export interface AnomalyDetectorJsonFormatDescriptor {
        /**
         * The character set in which the source JSON file is written.
         */
        charset?: string;
        /**
         * The level of compression of the source CSV file.
         */
        fileCompression?: enums.lookoutmetrics.AnomalyDetectorJsonFormatDescriptorFileCompression;
    }

    export interface AnomalyDetectorMetric {
        /**
         * Operator used to aggregate metric values
         */
        aggregationFunction: enums.lookoutmetrics.AnomalyDetectorMetricAggregationFunction;
        /**
         * The name of the metric.
         */
        metricName: string;
        /**
         * The namespace for the metric.
         */
        namespace?: string;
    }

    export interface AnomalyDetectorMetricSet {
        /**
         * Dimensions for this MetricSet.
         */
        dimensionList?: string[];
        /**
         * Metrics captured by this MetricSet.
         */
        metricList: outputs.lookoutmetrics.AnomalyDetectorMetric[];
        /**
         * A description for the MetricSet.
         */
        metricSetDescription?: string;
        /**
         * A frequency period to aggregate the data
         */
        metricSetFrequency?: enums.lookoutmetrics.AnomalyDetectorMetricSetMetricSetFrequency;
        /**
         * The name of the MetricSet.
         */
        metricSetName: string;
        /**
         * Contains information about how the source data should be interpreted.
         */
        metricSource: outputs.lookoutmetrics.AnomalyDetectorMetricSource;
        /**
         * Offset, in seconds, between the frequency interval and the time at which the metrics are available.
         */
        offset?: number;
        /**
         * Contains information about the column used for tracking time in your source data.
         */
        timestampColumn?: outputs.lookoutmetrics.AnomalyDetectorTimestampColumn;
        /**
         * The time zone in which your source data was recorded.
         */
        timezone?: string;
    }

    export interface AnomalyDetectorMetricSource {
        /**
         * Details about an AppFlow datasource.
         */
        appFlowConfig?: outputs.lookoutmetrics.AnomalyDetectorAppFlowConfig;
        /**
         * Details about an Amazon CloudWatch monitoring datasource.
         */
        cloudwatchConfig?: outputs.lookoutmetrics.AnomalyDetectorCloudwatchConfig;
        /**
         * Details about an Amazon Relational Database Service (RDS) datasource.
         */
        rdsSourceConfig?: outputs.lookoutmetrics.AnomalyDetectorRdsSourceConfig;
        /**
         * Details about an Amazon Redshift database datasource.
         */
        redshiftSourceConfig?: outputs.lookoutmetrics.AnomalyDetectorRedshiftSourceConfig;
        /**
         * Contains information about the configuration of the S3 bucket that contains source files.
         */
        s3SourceConfig?: outputs.lookoutmetrics.AnomalyDetectorS3SourceConfig;
    }

    export interface AnomalyDetectorRdsSourceConfig {
        /**
         * The host name of the database.
         */
        databaseHost: string;
        /**
         * The name of the RDS database.
         */
        databaseName: string;
        /**
         * The port number where the database can be accessed.
         */
        databasePort: number;
        /**
         * A string identifying the database instance.
         */
        dbInstanceIdentifier: string;
        /**
         * The Amazon Resource Name (ARN) of the role.
         */
        roleArn: string;
        /**
         * The Amazon Resource Name (ARN) of the AWS Secrets Manager role.
         */
        secretManagerArn: string;
        /**
         * The name of the table in the database.
         */
        tableName: string;
        /**
         * An object containing information about the Amazon Virtual Private Cloud (VPC) configuration.
         */
        vpcConfiguration: outputs.lookoutmetrics.AnomalyDetectorVpcConfiguration;
    }

    export interface AnomalyDetectorRedshiftSourceConfig {
        /**
         * A string identifying the Redshift cluster.
         */
        clusterIdentifier: string;
        /**
         * The name of the database host.
         */
        databaseHost: string;
        /**
         * The Redshift database name.
         */
        databaseName: string;
        /**
         * The port number where the database can be accessed.
         */
        databasePort: number;
        /**
         * The Amazon Resource Name (ARN) of the role providing access to the database.
         */
        roleArn: string;
        /**
         * The Amazon Resource Name (ARN) of the AWS Secrets Manager role.
         */
        secretManagerArn: string;
        /**
         * The table name of the Redshift database.
         */
        tableName: string;
        /**
         * Contains information about the Amazon Virtual Private Cloud (VPC) configuration.
         */
        vpcConfiguration: outputs.lookoutmetrics.AnomalyDetectorVpcConfiguration;
    }

    export interface AnomalyDetectorS3SourceConfig {
        /**
         * Contains information about a source file's formatting.
         */
        fileFormatDescriptor: outputs.lookoutmetrics.AnomalyDetectorFileFormatDescriptor;
        /**
         * A list of paths to the historical data files.
         */
        historicalDataPathList?: string[];
        /**
         * The ARN of an IAM role that has read and write access permissions to the source S3 bucket.
         */
        roleArn: string;
        /**
         * A list of templated paths to the source files.
         */
        templatedPathList?: string[];
    }

    export interface AnomalyDetectorTimestampColumn {
        /**
         * A timestamp format for the timestamps in the dataset
         */
        columnFormat?: string;
        /**
         * The name of the timestamp column.
         */
        columnName?: string;
    }

    export interface AnomalyDetectorVpcConfiguration {
        /**
         * An array of strings containing the list of security groups.
         */
        securityGroupIdList: string[];
        /**
         * An array of strings containing the Amazon VPC subnet IDs (e.g., `subnet-0bb1c79de3EXAMPLE` .
         */
        subnetIdList: string[];
    }

}

export namespace m2 {
    export interface ApplicationDefinition0Properties {
        s3Location: string;
    }

    export interface ApplicationDefinition1Properties {
        content: string;
    }

    /**
     * Defines the details of a high availability configuration.
     */
    export interface EnvironmentHighAvailabilityConfig {
        /**
         * The number of instances in a high availability configuration. The minimum possible value is 1 and the maximum is 100.
         */
        desiredCapacity: number;
    }

    /**
     * Defines the storage configuration for an environment.
     */
    export interface EnvironmentStorageConfiguration {
    }

}

export namespace macie {
    /**
     * The regex or s3 object to use for the AllowList.
     */
    export interface AllowListCriteria {
    }

    export interface FindingsFilterCriterionAdditionalProperties {
        /**
         * The value for the specified property matches (equals) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
         */
        eq?: string[];
        /**
         * The value for the specified property is greater than the specified value.
         */
        gt?: number;
        /**
         * The value for the specified property is greater than or equal to the specified value.
         */
        gte?: number;
        /**
         * The value for the specified property is less than the specified value.
         */
        lt?: number;
        /**
         * The value for the specified property is less than or equal to the specified value.
         */
        lte?: number;
        /**
         * The value for the specified property doesn't match (doesn't equal) the specified value. If you specify multiple values, Amazon Macie uses OR logic to join the values.
         */
        neq?: string[];
    }

    export interface FindingsFilterFindingCriteria {
        /**
         * Specifies a condition that defines the property, operator, and one or more values to use to filter the results.
         */
        criterion?: {[key: string]: outputs.macie.FindingsFilterCriterionAdditionalProperties};
    }

}

export namespace mediaconnect {
    export interface BridgeEgressGatewayBridge {
        /**
         * The maximum expected bitrate of the egress bridge.
         */
        maxBitrate: number;
    }

    /**
     * The settings for source failover.
     */
    export interface BridgeFailoverConfig {
        /**
         * The type of failover you choose for this flow. FAILOVER allows switching between different streams.
         */
        failoverMode: enums.mediaconnect.BridgeFailoverModeEnum;
        /**
         * The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
         */
        sourcePriority?: outputs.mediaconnect.BridgeSourcePriority;
        /**
         * The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
         */
        state?: enums.mediaconnect.BridgeFailoverConfigStateEnum;
    }

    /**
     * The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
     */
    export interface BridgeFlowSource {
        /**
         * The ARN of the cloud flow used as a source of this bridge.
         */
        flowArn: string;
        /**
         * The name of the VPC interface attachment to use for this source.
         */
        flowVpcInterfaceAttachment?: outputs.mediaconnect.BridgeVpcInterfaceAttachment;
        /**
         * The name of the flow source.
         */
        name: string;
    }

    export interface BridgeIngressGatewayBridge {
        /**
         * The maximum expected bitrate of the ingress bridge.
         */
        maxBitrate: number;
        /**
         * The maximum number of outputs on the ingress bridge.
         */
        maxOutputs: number;
    }

    /**
     * The output of the bridge. A network output is delivered to your premises.
     */
    export interface BridgeNetworkOutput {
        /**
         * The network output IP Address.
         */
        ipAddress: string;
        /**
         * The network output name.
         */
        name: string;
        /**
         * The network output's gateway network name.
         */
        networkName: string;
        /**
         * The network output port.
         */
        port: number;
        /**
         * The network output protocol.
         */
        protocol: enums.mediaconnect.BridgeProtocolEnum;
        /**
         * The network output TTL.
         */
        ttl: number;
    }

    /**
     * The source of the bridge. A network source originates at your premises.
     */
    export interface BridgeNetworkSource {
        /**
         * The network source multicast IP.
         */
        multicastIp: string;
        /**
         * The name of the network source.
         */
        name: string;
        /**
         * The network source's gateway network name.
         */
        networkName: string;
        /**
         * The network source port.
         */
        port: number;
        /**
         * The network source protocol.
         */
        protocol: enums.mediaconnect.BridgeProtocolEnum;
    }

    /**
     * The output of the bridge.
     */
    export interface BridgeOutput {
        /**
         * The output of the bridge. A network output is delivered to your premises.
         */
        networkOutput?: outputs.mediaconnect.BridgeNetworkOutput;
    }

    /**
     * The output of the bridge. A network output is delivered to your premises.
     */
    export interface BridgeOutputResourceBridgeNetworkOutput {
        /**
         * The network output IP Address.
         */
        ipAddress: string;
        /**
         * The network output's gateway network name.
         */
        networkName: string;
        /**
         * The network output port.
         */
        port: number;
        /**
         * The network output protocol.
         */
        protocol: enums.mediaconnect.BridgeOutputResourceBridgeNetworkOutputProtocol;
        /**
         * The network output TTL.
         */
        ttl: number;
    }

    /**
     * The bridge's source.
     */
    export interface BridgeSource {
        /**
         * The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
         */
        flowSource?: outputs.mediaconnect.BridgeFlowSource;
        /**
         * The source of the bridge. A network source originates at your premises.
         */
        networkSource?: outputs.mediaconnect.BridgeNetworkSource;
    }

    /**
     * The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.
     */
    export interface BridgeSourceBridgeFlowSource {
        /**
         * The ARN of the cloud flow used as a source of this bridge.
         */
        flowArn: string;
        /**
         * The name of the VPC interface attachment to use for this source.
         */
        flowVpcInterfaceAttachment?: outputs.mediaconnect.BridgeSourceVpcInterfaceAttachment;
    }

    /**
     * The source of the bridge. A network source originates at your premises.
     */
    export interface BridgeSourceBridgeNetworkSource {
        /**
         * The network source multicast IP.
         */
        multicastIp: string;
        /**
         * The network source's gateway network name.
         */
        networkName: string;
        /**
         * The network source port.
         */
        port: number;
        /**
         * The network source protocol.
         */
        protocol: enums.mediaconnect.BridgeSourceProtocolEnum;
    }

    /**
     * The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
     */
    export interface BridgeSourcePriority {
        /**
         * The name of the source you choose as the primary source for this flow.
         */
        primarySource?: string;
    }

    /**
     * The settings for attaching a VPC interface to an resource.
     */
    export interface BridgeSourceVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this resource.
         */
        vpcInterfaceName?: string;
    }

    /**
     * The settings for attaching a VPC interface to an resource.
     */
    export interface BridgeVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this resource.
         */
        vpcInterfaceName?: string;
    }

    /**
     * Information about the encryption of the flow.
     */
    export interface FlowEncryption {
        /**
         * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
         */
        algorithm?: enums.mediaconnect.FlowEncryptionAlgorithm;
        /**
         * A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
         */
        constantInitializationVector?: string;
        /**
         * The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        deviceId?: string;
        /**
         * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
         */
        keyType?: enums.mediaconnect.FlowEncryptionKeyType;
        /**
         * The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        region?: string;
        /**
         * An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        resourceId?: string;
        /**
         * The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
         */
        roleArn: string;
        /**
         *  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
         */
        secretArn?: string;
        /**
         * The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        url?: string;
    }

    /**
     * Information about the encryption of the flow.
     */
    export interface FlowEntitlementEncryption {
        /**
         * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
         */
        algorithm: enums.mediaconnect.FlowEntitlementEncryptionAlgorithm;
        /**
         * A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
         */
        constantInitializationVector?: string;
        /**
         * The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        deviceId?: string;
        /**
         * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
         */
        keyType?: enums.mediaconnect.FlowEntitlementEncryptionKeyType;
        /**
         * The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        region?: string;
        /**
         * An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        resourceId?: string;
        /**
         * The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
         */
        roleArn: string;
        /**
         *  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
         */
        secretArn?: string;
        /**
         * The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        url?: string;
    }

    /**
     * The settings for source failover
     */
    export interface FlowFailoverConfig {
        /**
         * The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.
         */
        failoverMode?: enums.mediaconnect.FlowFailoverConfigFailoverMode;
        /**
         * Search window time to look for dash-7 packets
         */
        recoveryWindow?: number;
        /**
         * The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
         */
        sourcePriority?: outputs.mediaconnect.FlowFailoverConfigSourcePriorityProperties;
        /**
         * The state of source failover on the flow. If the state is inactive, the flow can have only one source. If the state is active, the flow can have one or two sources.
         */
        state?: enums.mediaconnect.FlowFailoverConfigState;
    }

    /**
     * The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.
     */
    export interface FlowFailoverConfigSourcePriorityProperties {
        /**
         * The name of the source you choose as the primary source for this flow.
         */
        primarySource: string;
    }

    /**
     * A set of parameters that define the media stream.
     */
    export interface FlowFmtp {
        /**
         * The format of the audio channel.
         */
        channelOrder?: string;
        /**
         * The format used for the representation of color.
         */
        colorimetry?: enums.mediaconnect.FlowFmtpColorimetry;
        /**
         * The frame rate for the video stream, in frames/second. For example: 60000/1001.
         */
        exactFramerate?: string;
        /**
         * The pixel aspect ratio (PAR) of the video.
         */
        par?: string;
        /**
         * The encoding range of the video.
         */
        range?: enums.mediaconnect.FlowFmtpRange;
        /**
         * The type of compression that was used to smooth the video's appearance.
         */
        scanMode?: enums.mediaconnect.FlowFmtpScanMode;
        /**
         * The transfer characteristic system (TCS) that is used in the video.
         */
        tcs?: enums.mediaconnect.FlowFmtpTcs;
    }

    /**
     * The source configuration for cloud flows receiving a stream from a bridge.
     */
    export interface FlowGatewayBridgeSource {
        /**
         * The ARN of the bridge feeding this flow.
         */
        bridgeArn: string;
        /**
         * The name of the VPC interface attachment to use for this bridge source.
         */
        vpcInterfaceAttachment?: outputs.mediaconnect.FlowVpcInterfaceAttachment;
    }

    /**
     * The transport parameters associated with an incoming media stream.
     */
    export interface FlowInputConfiguration {
        /**
         * The port that the flow listens on for an incoming media stream.
         */
        inputPort: number;
        /**
         * The VPC interface where the media stream comes in from.
         */
        interface: outputs.mediaconnect.FlowInterface;
    }

    /**
     * The VPC interface that you want to use for the media stream associated with the output.
     */
    export interface FlowInterface {
        /**
         * The name of the VPC interface that you want to use for the media stream associated with the output.
         */
        name: string;
    }

    /**
     * The maintenance setting of a flow.
     */
    export interface FlowMaintenance {
        /**
         * A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.
         */
        maintenanceDay: enums.mediaconnect.FlowMaintenanceMaintenanceDay;
        /**
         * UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.
         */
        maintenanceStartHour: string;
    }

    /**
     * A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
     */
    export interface FlowMediaStream {
        /**
         * Attributes that are related to the media stream.
         */
        attributes?: outputs.mediaconnect.FlowMediaStreamAttributes;
        /**
         * The sample rate for the stream. This value in measured in kHz.
         */
        clockRate?: number;
        /**
         * A description that can help you quickly identify what your media stream is used for.
         */
        description?: string;
        /**
         * The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.
         */
        fmt?: number;
        /**
         * A unique identifier for the media stream.
         */
        mediaStreamId: number;
        /**
         * A name that helps you distinguish one media stream from another.
         */
        mediaStreamName: string;
        /**
         * The type of media stream.
         */
        mediaStreamType: enums.mediaconnect.FlowMediaStreamMediaStreamType;
        /**
         * The resolution of the video.
         */
        videoFormat?: enums.mediaconnect.FlowMediaStreamVideoFormat;
    }

    /**
     * Attributes that are related to the media stream.
     */
    export interface FlowMediaStreamAttributes {
        /**
         * A set of parameters that define the media stream.
         */
        fmtp?: outputs.mediaconnect.FlowFmtp;
        /**
         * The audio language, in a format that is recognized by the receiver.
         */
        lang?: string;
    }

    /**
     * The media stream that is associated with the source, and the parameters for that association.
     */
    export interface FlowMediaStreamSourceConfiguration {
        /**
         * The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.
         */
        encodingName: enums.mediaconnect.FlowMediaStreamSourceConfigurationEncodingName;
        /**
         * The media streams that you want to associate with the source.
         */
        inputConfigurations?: outputs.mediaconnect.FlowInputConfiguration[];
        /**
         * A name that helps you distinguish one media stream from another.
         */
        mediaStreamName: string;
    }

    /**
     * The definition of a media stream that is associated with the output.
     */
    export interface FlowOutputDestinationConfiguration {
        /**
         * The IP address where contents of the media stream will be sent.
         */
        destinationIp: string;
        /**
         * The port to use when the content of the media stream is distributed to the output.
         */
        destinationPort: number;
        /**
         * The VPC interface that is used for the media stream associated with the output.
         */
        interface: outputs.mediaconnect.FlowOutputInterface;
    }

    /**
     * A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
     */
    export interface FlowOutputEncodingParameters {
        /**
         * A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are in the range of 3.0 to 10.0, inclusive.
         */
        compressionFactor: number;
        /**
         * A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol.
         */
        encoderProfile?: enums.mediaconnect.FlowOutputEncodingParametersEncoderProfile;
    }

    /**
     * Information about the encryption of the flow.
     */
    export interface FlowOutputEncryption {
        /**
         * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
         */
        algorithm?: enums.mediaconnect.FlowOutputEncryptionAlgorithm;
        /**
         * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
         */
        keyType?: enums.mediaconnect.FlowOutputEncryptionKeyType;
        /**
         * The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
         */
        roleArn: string;
        /**
         *  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
         */
        secretArn: string;
    }

    /**
     * The VPC interface that you want to use for the media stream associated with the output.
     */
    export interface FlowOutputInterface {
        /**
         * The name of the VPC interface that you want to use for the media stream associated with the output.
         */
        name: string;
    }

    /**
     * The media stream that is associated with the output, and the parameters for that association.
     */
    export interface FlowOutputMediaStreamOutputConfiguration {
        /**
         * The media streams that you want to associate with the output.
         */
        destinationConfigurations?: outputs.mediaconnect.FlowOutputDestinationConfiguration[];
        /**
         * The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video streams on sources or outputs that use the CDI protocol, set the encoding name to raw. For video streams on sources or outputs that use the ST 2110 JPEG XS protocol, set the encoding name to jxsv.
         */
        encodingName: enums.mediaconnect.FlowOutputMediaStreamOutputConfigurationEncodingName;
        /**
         * A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source.
         */
        encodingParameters?: outputs.mediaconnect.FlowOutputEncodingParameters;
        /**
         * A name that helps you distinguish one media stream from another.
         */
        mediaStreamName: string;
    }

    /**
     * The settings for attaching a VPC interface to an output.
     */
    export interface FlowOutputVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this output.
         */
        vpcInterfaceName?: string;
    }

    /**
     * The settings for the source of the flow.
     */
    export interface FlowSource {
        /**
         * The type of decryption that is used on the content ingested from this source.
         */
        decryption?: outputs.mediaconnect.FlowEncryption;
        /**
         * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
         */
        description?: string;
        /**
         * The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
         */
        entitlementArn?: string;
        /**
         * The source configuration for cloud flows receiving a stream from a bridge.
         */
        gatewayBridgeSource?: outputs.mediaconnect.FlowGatewayBridgeSource;
        /**
         * The IP address that the flow will be listening on for incoming content.
         */
        ingestIp?: string;
        /**
         * The port that the flow will be listening on for incoming content.
         */
        ingestPort?: number;
        /**
         * The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
         */
        maxBitrate?: number;
        /**
         * The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.
         */
        maxLatency?: number;
        /**
         * The size of the buffer (in milliseconds) to use to sync incoming source data.
         */
        maxSyncBuffer?: number;
        /**
         * The media stream that is associated with the source, and the parameters for that association.
         */
        mediaStreamSourceConfigurations?: outputs.mediaconnect.FlowMediaStreamSourceConfiguration[];
        /**
         * The minimum latency in milliseconds.
         */
        minLatency?: number;
        /**
         * The name of the source.
         */
        name?: string;
        /**
         * The protocol that is used by the source.
         */
        protocol?: enums.mediaconnect.FlowSourceProtocol;
        /**
         * The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.
         */
        senderControlPort?: number;
        /**
         * The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.
         */
        senderIpAddress?: string;
        /**
         * The ARN of the source.
         */
        sourceArn?: string;
        /**
         * The port that the flow will be listening on for incoming content.(ReadOnly)
         */
        sourceIngestPort?: string;
        /**
         * Source IP or domain name for SRT-caller protocol.
         */
        sourceListenerAddress?: string;
        /**
         * Source port for SRT-caller protocol.
         */
        sourceListenerPort?: number;
        /**
         * The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
         */
        streamId?: string;
        /**
         * The name of the VPC Interface this Source is configured with.
         */
        vpcInterfaceName?: string;
        /**
         * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
         */
        whitelistCidr?: string;
    }

    /**
     * Information about the encryption of the flow.
     */
    export interface FlowSourceEncryption {
        /**
         * The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
         */
        algorithm?: enums.mediaconnect.FlowSourceEncryptionAlgorithm;
        /**
         * A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.
         */
        constantInitializationVector?: string;
        /**
         * The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        deviceId?: string;
        /**
         * The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
         */
        keyType?: enums.mediaconnect.FlowSourceEncryptionKeyType;
        /**
         * The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        region?: string;
        /**
         * An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        resourceId?: string;
        /**
         * The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
         */
        roleArn: string;
        /**
         *  The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.
         */
        secretArn?: string;
        /**
         * The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.
         */
        url?: string;
    }

    /**
     * The source configuration for cloud flows receiving a stream from a bridge.
     */
    export interface FlowSourceGatewayBridgeSource {
        /**
         * The ARN of the bridge feeding this flow.
         */
        bridgeArn: string;
        /**
         * The name of the VPC interface attachment to use for this bridge source.
         */
        vpcInterfaceAttachment?: outputs.mediaconnect.FlowSourceVpcInterfaceAttachment;
    }

    /**
     * The settings for attaching a VPC interface to an resource.
     */
    export interface FlowSourceVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this resource.
         */
        vpcInterfaceName?: string;
    }

    /**
     * The details of a VPC interface.
     */
    export interface FlowVpcInterface {
        /**
         * Immutable and has to be a unique against other VpcInterfaces in this Flow.
         */
        name: string;
        /**
         * IDs of the network interfaces created in customer's account by MediaConnect.
         */
        networkInterfaceIds?: string[];
        /**
         * The type of network adapter that you want MediaConnect to use on this interface. If you don't set this value, it defaults to ENA.
         */
        networkInterfaceType?: enums.mediaconnect.FlowVpcInterfaceNetworkInterfaceType;
        /**
         * Role Arn MediaConnect can assume to create ENIs in customer's account.
         */
        roleArn: string;
        /**
         * Security Group IDs to be used on ENI.
         */
        securityGroupIds: string[];
        /**
         * Subnet must be in the AZ of the Flow
         */
        subnetId: string;
    }

    /**
     * The settings for attaching a VPC interface to an resource.
     */
    export interface FlowVpcInterfaceAttachment {
        /**
         * The name of the VPC interface to use for this resource.
         */
        vpcInterfaceName?: string;
    }

    /**
     * The network settings for a gateway.
     */
    export interface GatewayNetwork {
        /**
         * A unique IP address range to use for this network. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
         */
        cidrBlock: string;
        /**
         * The name of the network. This name is used to reference the network and must be unique among networks in this gateway.
         */
        name: string;
    }

}

export namespace medialive {
    /**
     * Multiplex MediaConnect output destination settings.
     */
    export interface MultiplexOutputDestination {
        /**
         * Multiplex MediaConnect output destination settings.
         */
        multiplexMediaConnectOutputDestinationSettings?: outputs.medialive.MultiplexOutputDestinationMultiplexMediaConnectOutputDestinationSettingsProperties;
    }

    /**
     * Multiplex MediaConnect output destination settings.
     */
    export interface MultiplexOutputDestinationMultiplexMediaConnectOutputDestinationSettingsProperties {
        /**
         * The MediaConnect entitlement ARN available as a Flow source.
         */
        entitlementArn?: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface MultiplexSettings {
        /**
         * Maximum video buffer delay in milliseconds.
         */
        maximumVideoBufferDelayMilliseconds?: number;
        /**
         * Transport stream bit rate.
         */
        transportStreamBitrate: number;
        /**
         * Transport stream ID.
         */
        transportStreamId: number;
        /**
         * Transport stream reserved bit rate.
         */
        transportStreamReservedBitrate?: number;
    }

    /**
     * Packet identifiers map for a given Multiplex program.
     */
    export interface MultiplexprogramMultiplexProgramPacketIdentifiersMap {
        audioPids?: number[];
        dvbSubPids?: number[];
        dvbTeletextPid?: number;
        etvPlatformPid?: number;
        etvSignalPid?: number;
        klvDataPids?: number[];
        pcrPid?: number;
        pmtPid?: number;
        privateMetadataPid?: number;
        scte27Pids?: number[];
        scte35Pid?: number;
        timedMetadataPid?: number;
        videoPid?: number;
    }

    /**
     * The current source for one of the pipelines in the multiplex.
     */
    export interface MultiplexprogramMultiplexProgramPipelineDetail {
        /**
         * Identifies the channel pipeline that is currently active for the pipeline (identified by PipelineId) in the multiplex.
         */
        activeChannelPipeline?: string;
        /**
         * Identifies a specific pipeline in the multiplex.
         */
        pipelineId?: string;
    }

    /**
     * Transport stream service descriptor configuration for the Multiplex program.
     */
    export interface MultiplexprogramMultiplexProgramServiceDescriptor {
        /**
         * Name of the provider.
         */
        providerName: string;
        /**
         * Name of the service.
         */
        serviceName: string;
    }

    /**
     * Multiplex Program settings configuration.
     */
    export interface MultiplexprogramMultiplexProgramSettings {
        /**
         * Indicates which pipeline is preferred by the multiplex for program ingest.
         */
        preferredChannelPipeline?: enums.medialive.MultiplexprogramPreferredChannelPipeline;
        /**
         * Unique program number.
         */
        programNumber: number;
        /**
         * Transport stream service descriptor configuration for the Multiplex program.
         */
        serviceDescriptor?: outputs.medialive.MultiplexprogramMultiplexProgramServiceDescriptor;
        /**
         * Program video settings configuration.
         */
        videoSettings?: outputs.medialive.MultiplexprogramMultiplexVideoSettings;
    }

    /**
     * The video configuration for each program in a multiplex.
     */
    export interface MultiplexprogramMultiplexVideoSettings {
    }

}

export namespace mediapackage {
    /**
     * The endpoint URL used to access an Asset using one PackagingConfiguration.
     */
    export interface AssetEgressEndpoint {
        /**
         * The ID of the PackagingConfiguration being applied to the Asset.
         */
        packagingConfigurationId: string;
        /**
         * The URL of the parent manifest for the repackaged Asset.
         */
        url: string;
    }

    /**
     * An HTTP Live Streaming (HLS) ingest resource configuration.
     */
    export interface ChannelHlsIngest {
        /**
         * A list of endpoints to which the source stream should be sent.
         */
        ingestEndpoints?: outputs.mediapackage.ChannelIngestEndpoint[];
    }

    /**
     * An endpoint for ingesting source content for a Channel.
     */
    export interface ChannelIngestEndpoint {
        /**
         * The system generated unique identifier for the IngestEndpoint
         */
        id: string;
        /**
         * The system generated password for ingest authentication.
         */
        password: string;
        /**
         * The ingest URL to which the source stream should be sent.
         */
        url: string;
        /**
         * The system generated username for ingest authentication.
         */
        username: string;
    }

    export interface ChannelLogConfiguration {
        /**
         * Sets a custom AWS CloudWatch log group name for access logs. If a log group name isn't specified, the defaults are used: /aws/MediaPackage/EgressAccessLogs for egress access logs and /aws/MediaPackage/IngressAccessLogs for ingress access logs.
         */
        logGroupName?: string;
    }

    /**
     * CDN Authorization credentials
     */
    export interface OriginEndpointAuthorization {
        /**
         * The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.
         */
        cdnIdentifierSecret: string;
        /**
         * The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
         */
        secretsRoleArn: string;
    }

    /**
     * A Common Media Application Format (CMAF) encryption configuration.
     */
    export interface OriginEndpointCmafEncryption {
        /**
         * An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).
         */
        constantInitializationVector?: string;
        /**
         * The encryption method used
         */
        encryptionMethod?: enums.mediapackage.OriginEndpointCmafEncryptionEncryptionMethod;
        /**
         * Time (in seconds) between each encryption key rotation.
         */
        keyRotationIntervalSeconds?: number;
        /**
         * Parameters for the SPEKE key provider.
         */
        spekeKeyProvider: outputs.mediapackage.OriginEndpointSpekeKeyProvider;
    }

    /**
     * A Common Media Application Format (CMAF) packaging configuration.
     */
    export interface OriginEndpointCmafPackage {
        /**
         * Parameters for encrypting content.
         */
        encryption?: outputs.mediapackage.OriginEndpointCmafEncryption;
        /**
         * A list of HLS manifest configurations
         */
        hlsManifests?: outputs.mediapackage.OriginEndpointHlsManifest[];
        /**
         * Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
         */
        segmentDurationSeconds?: number;
        /**
         * An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.
         */
        segmentPrefix?: string;
        /**
         * Limitations for outputs from the endpoint, based on the video bitrate.
         */
        streamSelection?: outputs.mediapackage.OriginEndpointStreamSelection;
    }

    /**
     * A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
     */
    export interface OriginEndpointDashEncryption {
        /**
         * Time (in seconds) between each encryption key rotation.
         */
        keyRotationIntervalSeconds?: number;
        /**
         * Parameters for the SPEKE key provider.
         */
        spekeKeyProvider: outputs.mediapackage.OriginEndpointSpekeKeyProvider;
    }

    /**
     * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
     */
    export interface OriginEndpointDashPackage {
        /**
         * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         */
        adTriggers?: enums.mediapackage.OriginEndpointDashPackageAdTriggersItem[];
        /**
         * The flags on SCTE-35 segmentation descriptors that have to be present for AWS Elemental MediaPackage to insert ad markers in the output manifest. For information about SCTE-35 in AWS Elemental MediaPackage , see [SCTE-35 Message Options in AWS Elemental MediaPackage](https://docs.aws.amazon.com/mediapackage/latest/ug/scte.html) .
         */
        adsOnDeliveryRestrictions?: enums.mediapackage.OriginEndpointAdsOnDeliveryRestrictions;
        /**
         * Parameters for encrypting content.
         */
        encryption?: outputs.mediapackage.OriginEndpointDashEncryption;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        /**
         * Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
         */
        manifestLayout?: enums.mediapackage.OriginEndpointDashPackageManifestLayout;
        /**
         * Time window (in seconds) contained in each manifest.
         */
        manifestWindowSeconds?: number;
        /**
         * Minimum duration (in seconds) that a player will buffer media before starting the presentation.
         */
        minBufferTimeSeconds?: number;
        /**
         * Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).
         */
        minUpdatePeriodSeconds?: number;
        /**
         * A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Channel source contains SCTE-35 ad markers.
         */
        periodTriggers?: enums.mediapackage.OriginEndpointDashPackagePeriodTriggersItem[];
        /**
         * The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
         */
        profile?: enums.mediapackage.OriginEndpointDashPackageProfile;
        /**
         * Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.
         */
        segmentDurationSeconds?: number;
        /**
         * Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
         */
        segmentTemplateFormat?: enums.mediapackage.OriginEndpointDashPackageSegmentTemplateFormat;
        /**
         * Limitations for outputs from the endpoint, based on the video bitrate.
         */
        streamSelection?: outputs.mediapackage.OriginEndpointStreamSelection;
        /**
         * Duration (in seconds) to delay live content before presentation.
         */
        suggestedPresentationDelaySeconds?: number;
        /**
         * Determines the type of UTCTiming included in the Media Presentation Description (MPD)
         */
        utcTiming?: enums.mediapackage.OriginEndpointDashPackageUtcTiming;
        /**
         * Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE
         */
        utcTimingUri?: string;
    }

    /**
     * The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.
     */
    export interface OriginEndpointEncryptionContractConfiguration {
        /**
         * A collection of audio encryption presets.
         */
        presetSpeke20Audio: enums.mediapackage.OriginEndpointEncryptionContractConfigurationPresetSpeke20Audio;
        /**
         * A collection of video encryption presets.
         */
        presetSpeke20Video: enums.mediapackage.OriginEndpointEncryptionContractConfigurationPresetSpeke20Video;
    }

    /**
     * An HTTP Live Streaming (HLS) encryption configuration.
     */
    export interface OriginEndpointHlsEncryption {
        /**
         * A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.
         */
        constantInitializationVector?: string;
        /**
         * The encryption method to use.
         */
        encryptionMethod?: enums.mediapackage.OriginEndpointHlsEncryptionEncryptionMethod;
        /**
         * Interval (in seconds) between each encryption key rotation.
         */
        keyRotationIntervalSeconds?: number;
        /**
         * When enabled, the EXT-X-KEY tag will be repeated in output manifests.
         */
        repeatExtXKey?: boolean;
        /**
         * Parameters for the SPEKE key provider.
         */
        spekeKeyProvider: outputs.mediapackage.OriginEndpointSpekeKeyProvider;
    }

    /**
     * A HTTP Live Streaming (HLS) manifest configuration.
     */
    export interface OriginEndpointHlsManifest {
        /**
         * This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
         */
        adMarkers?: enums.mediapackage.OriginEndpointHlsManifestAdMarkers;
        /**
         * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         */
        adTriggers?: enums.mediapackage.OriginEndpointHlsManifestAdTriggersItem[];
        /**
         * The flags on SCTE-35 segmentation descriptors that have to be present for AWS Elemental MediaPackage to insert ad markers in the output manifest. For information about SCTE-35 in AWS Elemental MediaPackage , see [SCTE-35 Message Options in AWS Elemental MediaPackage](https://docs.aws.amazon.com/mediapackage/latest/ug/scte.html) .
         */
        adsOnDeliveryRestrictions?: enums.mediapackage.OriginEndpointAdsOnDeliveryRestrictions;
        /**
         * The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.
         */
        id: string;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        /**
         * An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.
         */
        manifestName?: string;
        /**
         * The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
         */
        playlistType?: enums.mediapackage.OriginEndpointHlsManifestPlaylistType;
        /**
         * Time window (in seconds) contained in each parent manifest.
         */
        playlistWindowSeconds?: number;
        /**
         * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
         */
        programDateTimeIntervalSeconds?: number;
        /**
         * The URL of the packaged OriginEndpoint for consumption.
         */
        url?: string;
    }

    /**
     * An HTTP Live Streaming (HLS) packaging configuration.
     */
    export interface OriginEndpointHlsPackage {
        /**
         * This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source. "DATERANGE" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.
         */
        adMarkers?: enums.mediapackage.OriginEndpointHlsPackageAdMarkers;
        /**
         * A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.
         */
        adTriggers?: enums.mediapackage.OriginEndpointHlsPackageAdTriggersItem[];
        /**
         * The flags on SCTE-35 segmentation descriptors that have to be present for AWS Elemental MediaPackage to insert ad markers in the output manifest. For information about SCTE-35 in AWS Elemental MediaPackage , see [SCTE-35 Message Options in AWS Elemental MediaPackage](https://docs.aws.amazon.com/mediapackage/latest/ug/scte.html) .
         */
        adsOnDeliveryRestrictions?: enums.mediapackage.OriginEndpointAdsOnDeliveryRestrictions;
        /**
         * Parameters for encrypting content.
         */
        encryption?: outputs.mediapackage.OriginEndpointHlsEncryption;
        /**
         * When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
         */
        includeDvbSubtitles?: boolean;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        /**
         * The HTTP Live Streaming (HLS) playlist type. When either "EVENT" or "VOD" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.
         */
        playlistType?: enums.mediapackage.OriginEndpointHlsPackagePlaylistType;
        /**
         * Time window (in seconds) contained in each parent manifest.
         */
        playlistWindowSeconds?: number;
        /**
         * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
         */
        programDateTimeIntervalSeconds?: number;
        /**
         * Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.
         */
        segmentDurationSeconds?: number;
        /**
         * Limitations for outputs from the endpoint, based on the video bitrate.
         */
        streamSelection?: outputs.mediapackage.OriginEndpointStreamSelection;
        /**
         * When enabled, audio streams will be placed in rendition groups in the output.
         */
        useAudioRenditionGroup?: boolean;
    }

    /**
     * A Microsoft Smooth Streaming (MSS) encryption configuration.
     */
    export interface OriginEndpointMssEncryption {
        /**
         * Parameters for the SPEKE key provider.
         */
        spekeKeyProvider: outputs.mediapackage.OriginEndpointSpekeKeyProvider;
    }

    /**
     * A Microsoft Smooth Streaming (MSS) packaging configuration.
     */
    export interface OriginEndpointMssPackage {
        /**
         * Parameters for encrypting content.
         */
        encryption?: outputs.mediapackage.OriginEndpointMssEncryption;
        /**
         * The time window (in seconds) contained in each manifest.
         */
        manifestWindowSeconds?: number;
        /**
         * The duration (in seconds) of each segment.
         */
        segmentDurationSeconds?: number;
        /**
         * Limitations for outputs from the endpoint, based on the video bitrate.
         */
        streamSelection?: outputs.mediapackage.OriginEndpointStreamSelection;
    }

    /**
     * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
     */
    export interface OriginEndpointSpekeKeyProvider {
        /**
         * An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.
         */
        certificateArn?: string;
        /**
         * Use `encryptionContractConfiguration` to configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.
         */
        encryptionContractConfiguration?: outputs.mediapackage.OriginEndpointEncryptionContractConfiguration;
        /**
         * The resource ID to include in key requests.
         */
        resourceId: string;
        /**
         * An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.
         */
        roleArn: string;
        /**
         * The system IDs to include in key requests.
         */
        systemIds: string[];
        /**
         * The URL of the external key provider service.
         */
        url: string;
    }

    /**
     * A StreamSelection configuration.
     */
    export interface OriginEndpointStreamSelection {
        /**
         * The maximum video bitrate (bps) to include in output.
         */
        maxVideoBitsPerSecond?: number;
        /**
         * The minimum video bitrate (bps) to include in output.
         */
        minVideoBitsPerSecond?: number;
        /**
         * A directive that determines the order of streams in the output.
         */
        streamOrder?: enums.mediapackage.OriginEndpointStreamSelectionStreamOrder;
    }

    /**
     * A CMAF encryption configuration.
     */
    export interface PackagingConfigurationCmafEncryption {
        /**
         * Parameters for the SPEKE key provider.
         */
        spekeKeyProvider: outputs.mediapackage.PackagingConfigurationSpekeKeyProvider;
    }

    /**
     * A CMAF packaging configuration.
     */
    export interface PackagingConfigurationCmafPackage {
        /**
         * Parameters for encrypting content.
         */
        encryption?: outputs.mediapackage.PackagingConfigurationCmafEncryption;
        /**
         * A list of HLS manifest configurations.
         */
        hlsManifests: outputs.mediapackage.PackagingConfigurationHlsManifest[];
        /**
         * When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
         */
        includeEncoderConfigurationInSegments?: boolean;
        /**
         * Duration (in seconds) of each segment. Actual segments are rounded to the nearest multiple of the source fragment duration.
         */
        segmentDurationSeconds?: number;
    }

    /**
     * A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
     */
    export interface PackagingConfigurationDashEncryption {
        /**
         * Parameters for the SPEKE key provider.
         */
        spekeKeyProvider: outputs.mediapackage.PackagingConfigurationSpekeKeyProvider;
    }

    /**
     * A DASH manifest configuration.
     */
    export interface PackagingConfigurationDashManifest {
        /**
         * Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
         */
        manifestLayout?: enums.mediapackage.PackagingConfigurationDashManifestManifestLayout;
        /**
         * A short string that's appended to the end of the endpoint URL to create a unique path to this packaging configuration.
         */
        manifestName?: string;
        /**
         * Minimum duration (in seconds) that a player will buffer media before starting the presentation.
         */
        minBufferTimeSeconds?: number;
        /**
         * The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
         */
        profile?: enums.mediapackage.PackagingConfigurationDashManifestProfile;
        /**
         * The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
         */
        scteMarkersSource?: enums.mediapackage.PackagingConfigurationDashManifestScteMarkersSource;
        /**
         * Limitations for outputs from the endpoint, based on the video bitrate.
         */
        streamSelection?: outputs.mediapackage.PackagingConfigurationStreamSelection;
    }

    /**
     * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
     */
    export interface PackagingConfigurationDashPackage {
        /**
         * A list of DASH manifest configurations.
         */
        dashManifests: outputs.mediapackage.PackagingConfigurationDashManifest[];
        /**
         * Parameters for encrypting content.
         */
        encryption?: outputs.mediapackage.PackagingConfigurationDashEncryption;
        /**
         * When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
         */
        includeEncoderConfigurationInSegments?: boolean;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        /**
         * A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains "ADS", new periods will be created where the Asset contains SCTE-35 ad markers.
         */
        periodTriggers?: enums.mediapackage.PackagingConfigurationDashPackagePeriodTriggersItem[];
        /**
         * Duration (in seconds) of each fragment. Actual fragments are rounded to the nearest multiple of the source segment duration.
         */
        segmentDurationSeconds?: number;
        /**
         * Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
         */
        segmentTemplateFormat?: enums.mediapackage.PackagingConfigurationDashPackageSegmentTemplateFormat;
    }

    /**
     * The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.
     */
    export interface PackagingConfigurationEncryptionContractConfiguration {
        /**
         * A collection of audio encryption presets.
         */
        presetSpeke20Audio: enums.mediapackage.PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Audio;
        /**
         * A collection of video encryption presets.
         */
        presetSpeke20Video: enums.mediapackage.PackagingConfigurationEncryptionContractConfigurationPresetSpeke20Video;
    }

    /**
     * An HTTP Live Streaming (HLS) encryption configuration.
     */
    export interface PackagingConfigurationHlsEncryption {
        /**
         * An HTTP Live Streaming (HLS) encryption configuration.
         */
        constantInitializationVector?: string;
        /**
         * The encryption method to use.
         */
        encryptionMethod?: enums.mediapackage.PackagingConfigurationHlsEncryptionEncryptionMethod;
        /**
         * Parameters for the SPEKE key provider.
         */
        spekeKeyProvider: outputs.mediapackage.PackagingConfigurationSpekeKeyProvider;
    }

    /**
     * An HTTP Live Streaming (HLS) manifest configuration.
     */
    export interface PackagingConfigurationHlsManifest {
        /**
         * This setting controls how ad markers are included in the packaged OriginEndpoint. "NONE" will omit all SCTE-35 ad markers from the output. "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35 messages in the input source.
         */
        adMarkers?: enums.mediapackage.PackagingConfigurationHlsManifestAdMarkers;
        /**
         * When enabled, an I-Frame only stream will be included in the output.
         */
        includeIframeOnlyStream?: boolean;
        /**
         * A short string that's appended to the end of the endpoint URL to create a unique path to this packaging configuration.
         */
        manifestName?: string;
        /**
         * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.
         */
        programDateTimeIntervalSeconds?: number;
        /**
         * When enabled, the EXT-X-KEY tag will be repeated in output manifests.
         */
        repeatExtXKey?: boolean;
        /**
         * Video bitrate limitations for outputs from this packaging configuration.
         */
        streamSelection?: outputs.mediapackage.PackagingConfigurationStreamSelection;
    }

    /**
     * An HTTP Live Streaming (HLS) packaging configuration.
     */
    export interface PackagingConfigurationHlsPackage {
        /**
         * Parameters for encrypting content.
         */
        encryption?: outputs.mediapackage.PackagingConfigurationHlsEncryption;
        /**
         * A list of HLS manifest configurations.
         */
        hlsManifests: outputs.mediapackage.PackagingConfigurationHlsManifest[];
        /**
         * When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
         */
        includeDvbSubtitles?: boolean;
        /**
         * Duration (in seconds) of each fragment. Actual fragments are rounded to the nearest multiple of the source fragment duration.
         */
        segmentDurationSeconds?: number;
        /**
         * When enabled, audio streams will be placed in rendition groups in the output.
         */
        useAudioRenditionGroup?: boolean;
    }

    /**
     * A CMAF encryption configuration.
     */
    export interface PackagingConfigurationMssEncryption {
        /**
         * Parameters for the SPEKE key provider.
         */
        spekeKeyProvider: outputs.mediapackage.PackagingConfigurationSpekeKeyProvider;
    }

    /**
     * A Microsoft Smooth Streaming (MSS) manifest configuration.
     */
    export interface PackagingConfigurationMssManifest {
        /**
         * A short string that's appended to the end of the endpoint URL to create a unique path to this packaging configuration.
         */
        manifestName?: string;
        /**
         * Video bitrate limitations for outputs from this packaging configuration.
         */
        streamSelection?: outputs.mediapackage.PackagingConfigurationStreamSelection;
    }

    /**
     * A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
     */
    export interface PackagingConfigurationMssPackage {
        /**
         * Parameters for encrypting content.
         */
        encryption?: outputs.mediapackage.PackagingConfigurationMssEncryption;
        /**
         * A list of MSS manifest configurations.
         */
        mssManifests: outputs.mediapackage.PackagingConfigurationMssManifest[];
        /**
         * Duration (in seconds) of each fragment. Actual fragments are rounded to the nearest multiple of the source fragment duration.
         */
        segmentDurationSeconds?: number;
    }

    /**
     * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
     */
    export interface PackagingConfigurationSpekeKeyProvider {
        /**
         * Use `encryptionContractConfiguration` to configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.
         */
        encryptionContractConfiguration?: outputs.mediapackage.PackagingConfigurationEncryptionContractConfiguration;
        /**
         * The ARN for the IAM role that's granted by the key provider to provide access to the key provider API. Valid format: arn:aws:iam::{accountID}:role/{name}
         */
        roleArn: string;
        /**
         * The system IDs to include in key requests.
         */
        systemIds: string[];
        /**
         * The URL of the external key provider service.
         */
        url: string;
    }

    /**
     * A StreamSelection configuration.
     */
    export interface PackagingConfigurationStreamSelection {
        /**
         * The maximum video bitrate (bps) to include in output.
         */
        maxVideoBitsPerSecond?: number;
        /**
         * The minimum video bitrate (bps) to include in output.
         */
        minVideoBitsPerSecond?: number;
        /**
         * A directive that determines the order of streams in the output.
         */
        streamOrder?: enums.mediapackage.PackagingConfigurationStreamSelectionStreamOrder;
    }

    export interface PackagingGroupAuthorization {
        /**
         * The Amazon Resource Name (ARN) for the secret in AWS Secrets Manager that is used for CDN authorization.
         */
        cdnIdentifierSecret: string;
        /**
         * The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
         */
        secretsRoleArn: string;
    }

    export interface PackagingGroupLogConfiguration {
        /**
         * Sets a custom AWS CloudWatch log group name for egress logs. If a log group name isn't specified, the default name is used: /aws/MediaPackage/VodEgressAccessLogs.
         */
        logGroupName?: string;
    }

}

export namespace mediapackagev2 {
    /**
     * <p>The ingest domain URL where the source stream should be sent.</p>
     */
    export interface ChannelIngestEndpoint {
        /**
         * <p>The system-generated unique identifier for the IngestEndpoint.</p>
         */
        id?: string;
        /**
         * <p>The ingest domain URL where the source stream should be sent.</p>
         */
        url?: string;
    }

    /**
     * <p>Retrieve the DASH manifest configuration.</p>
     */
    export interface OriginEndpointDashManifestConfiguration {
        drmSignaling?: enums.mediapackagev2.OriginEndpointDashDrmSignaling;
        filterConfiguration?: outputs.mediapackagev2.OriginEndpointFilterConfiguration;
        /**
         * <p>A short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. </p>
         */
        manifestName: string;
        /**
         * <p>The total duration (in seconds) of the manifest's content.</p>
         */
        manifestWindowSeconds?: number;
        /**
         * <p>Minimum amount of content (in seconds) that a player must keep available in the buffer.</p>
         */
        minBufferTimeSeconds?: number;
        /**
         * <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest.</p>
         */
        minUpdatePeriodSeconds?: number;
        /**
         * <p>A list of triggers that controls when AWS Elemental MediaPackage separates the MPEG-DASH manifest into multiple periods. Leave this value empty to indicate that the manifest is contained all in one period.
         *          For more information about periods in the DASH manifest, see <a href="https://docs.aws.amazon.com/mediapackage/latest/userguide/multi-period.html">Multi-period DASH in AWS Elemental MediaPackage</a>.</p>
         */
        periodTriggers?: enums.mediapackagev2.OriginEndpointDashPeriodTrigger[];
        scteDash?: outputs.mediapackagev2.OriginEndpointScteDash;
        segmentTemplateFormat?: enums.mediapackagev2.OriginEndpointDashSegmentTemplateFormat;
        /**
         * <p>The amount of time (in seconds) that the player should be from the end of the manifest.</p>
         */
        suggestedPresentationDelaySeconds?: number;
        utcTiming?: outputs.mediapackagev2.OriginEndpointDashUtcTiming;
    }

    /**
     * <p>Determines the type of UTC timing included in the DASH Media Presentation Description (MPD).</p>
     */
    export interface OriginEndpointDashUtcTiming {
        timingMode?: enums.mediapackagev2.OriginEndpointDashUtcTimingMode;
        /**
         * <p>The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.</p>
         */
        timingSource?: string;
    }

    /**
     * <p>The parameters for encrypting content.</p>
     */
    export interface OriginEndpointEncryption {
        /**
         * <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
         */
        constantInitializationVector?: string;
        /**
         * The encryption method to use.
         */
        encryptionMethod: outputs.mediapackagev2.OriginEndpointEncryptionMethod;
        /**
         * <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
         *          <p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
         *          </p>
         */
        keyRotationIntervalSeconds?: number;
        /**
         * The SPEKE key provider to use for encryption.
         */
        spekeKeyProvider: outputs.mediapackagev2.OriginEndpointSpekeKeyProvider;
    }

    /**
     * <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
     */
    export interface OriginEndpointEncryptionContractConfiguration {
        /**
         * A collection of audio encryption presets.
         *
         * Value description:
         *
         * - `PRESET-AUDIO-1` - Use one content key to encrypt all of the audio tracks in your stream.
         * - `PRESET-AUDIO-2` - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks.
         * - `PRESET-AUDIO-3` - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels.
         * - `SHARED` - Use the same content key for all of the audio and video tracks in your stream.
         * - `UNENCRYPTED` - Don't encrypt any of the audio tracks in your stream.
         */
        presetSpeke20Audio: enums.mediapackagev2.OriginEndpointPresetSpeke20Audio;
        /**
         * The SPEKE Version 2.0 preset video associated with the encryption contract configuration of the origin endpoint.
         */
        presetSpeke20Video: enums.mediapackagev2.OriginEndpointPresetSpeke20Video;
    }

    /**
     * <p>The encryption type.</p>
     */
    export interface OriginEndpointEncryptionMethod {
        /**
         * The encryption method to use.
         */
        cmafEncryptionMethod?: enums.mediapackagev2.OriginEndpointCmafEncryptionMethod;
        /**
         * The encryption method to use.
         */
        tsEncryptionMethod?: enums.mediapackagev2.OriginEndpointTsEncryptionMethod;
    }

    /**
     * <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
     */
    export interface OriginEndpointFilterConfiguration {
        /**
         * <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
         */
        end?: string;
        /**
         * <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
         */
        manifestFilter?: string;
        /**
         * <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
         */
        start?: string;
        /**
         * <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
         */
        timeDelaySeconds?: number;
    }

    /**
     * <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
     */
    export interface OriginEndpointHlsManifestConfiguration {
        /**
         * <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
         */
        childManifestName?: string;
        filterConfiguration?: outputs.mediapackagev2.OriginEndpointFilterConfiguration;
        /**
         * <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
         */
        manifestName: string;
        /**
         * <p>The total duration (in seconds) of the manifest's content.</p>
         */
        manifestWindowSeconds?: number;
        /**
         * <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, 
         *          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. 
         *          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. 
         *          ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
         *          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
         */
        programDateTimeIntervalSeconds?: number;
        /**
         * THE SCTE-35 HLS configuration associated with the HLS manifest configuration.
         */
        scteHls?: outputs.mediapackagev2.OriginEndpointScteHls;
        /**
         * <p>The egress domain URL for stream delivery from MediaPackage.</p>
         */
        url?: string;
    }

    /**
     * <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
     */
    export interface OriginEndpointLowLatencyHlsManifestConfiguration {
        /**
         * <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
         */
        childManifestName?: string;
        filterConfiguration?: outputs.mediapackagev2.OriginEndpointFilterConfiguration;
        /**
         * <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
         */
        manifestName: string;
        /**
         * <p>The total duration (in seconds) of the manifest's content.</p>
         */
        manifestWindowSeconds?: number;
        /**
         * <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, 
         *          EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. 
         *          The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. 
         *          ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
         *          <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
         */
        programDateTimeIntervalSeconds?: number;
        /**
         * The SCTE-35 HLS configuration associated with the low-latency HLS (LL-HLS) manifest configuration of the origin endpoint.
         */
        scteHls?: outputs.mediapackagev2.OriginEndpointScteHls;
        /**
         * <p>The egress domain URL for stream delivery from MediaPackage.</p>
         */
        url?: string;
    }

    /**
     * <p>The SCTE configuration.</p>
     */
    export interface OriginEndpointScte {
        /**
         * <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
         */
        scteFilter?: enums.mediapackagev2.OriginEndpointScteFilter[];
    }

    /**
     * <p>The SCTE configuration.</p>
     */
    export interface OriginEndpointScteDash {
        adMarkerDash?: enums.mediapackagev2.OriginEndpointAdMarkerDash;
    }

    /**
     * <p>The SCTE configuration.</p>
     */
    export interface OriginEndpointScteHls {
        /**
         * The SCTE-35 HLS ad-marker configuration.
         */
        adMarkerHls?: enums.mediapackagev2.OriginEndpointAdMarkerHls;
    }

    /**
     * <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
     */
    export interface OriginEndpointSegment {
        /**
         * Whether to use encryption for the segment.
         */
        encryption?: outputs.mediapackagev2.OriginEndpointEncryption;
        /**
         * <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
         */
        includeIframeOnlyStreams?: boolean;
        /**
         * The SCTE-35 configuration associated with the segment.
         */
        scte?: outputs.mediapackagev2.OriginEndpointScte;
        /**
         * <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
         */
        segmentDurationSeconds?: number;
        /**
         * <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
         */
        segmentName?: string;
        /**
         * <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
         */
        tsIncludeDvbSubtitles?: boolean;
        /**
         * <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
         */
        tsUseAudioRenditionGroup?: boolean;
    }

    /**
     * <p>The parameters for the SPEKE key provider.</p>
     */
    export interface OriginEndpointSpekeKeyProvider {
        /**
         * <p>The DRM solution provider you're using to protect your content during distribution.</p>
         */
        drmSystems: enums.mediapackagev2.OriginEndpointDrmSystem[];
        /**
         * The encryption contract configuration associated with the SPEKE key provider.
         */
        encryptionContractConfiguration: outputs.mediapackagev2.OriginEndpointEncryptionContractConfiguration;
        /**
         * <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
         *          <p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
         *          </p>
         */
        resourceId: string;
        /**
         * <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
         *          <p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
         *          </p>
         */
        roleArn: string;
        /**
         * <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
         *          <p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
         *          </p>
         */
        url: string;
    }

}

export namespace mediatailor {
    /**
     * <p>Dash manifest configuration parameters.</p>
     */
    export interface ChannelDashPlaylistSettings {
        /**
         * <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
         */
        manifestWindowSeconds?: number;
        /**
         * <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
         */
        minBufferTimeSeconds?: number;
        /**
         * <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
         */
        minUpdatePeriodSeconds?: number;
        /**
         * <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
         */
        suggestedPresentationDelaySeconds?: number;
    }

    /**
     * <p>HLS playlist configuration parameters.</p>
     */
    export interface ChannelHlsPlaylistSettings {
        /**
         * <p>Determines the type of SCTE 35 tags to use in ad markup. Specify <code>DATERANGE</code> to use <code>DATERANGE</code> tags (for live or VOD content). Specify <code>SCTE35_ENHANCED</code> to use <code>EXT-X-CUE-OUT</code> and <code>EXT-X-CUE-IN</code> tags (for VOD content only).</p>
         */
        adMarkupType?: enums.mediatailor.ChannelAdMarkupType[];
        /**
         * <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
         */
        manifestWindowSeconds?: number;
    }

    /**
     * <p>The log configuration for the channel.</p>
     */
    export interface ChannelLogConfigurationForChannel {
        /**
         * <p>The log types.</p>
         */
        logTypes?: enums.mediatailor.ChannelLogType[];
    }

    /**
     * <p>The output configuration for this channel.</p>
     */
    export interface ChannelRequestOutputItem {
        /**
         * DASH manifest configuration parameters.
         */
        dashPlaylistSettings?: outputs.mediatailor.ChannelDashPlaylistSettings;
        /**
         * HLS playlist configuration parameters.
         */
        hlsPlaylistSettings?: outputs.mediatailor.ChannelHlsPlaylistSettings;
        /**
         * <p>The name of the manifest for the channel. The name appears in the <code>PlaybackUrl</code>.</p>
         */
        manifestName: string;
        /**
         * <p>A string used to match which <code>HttpPackageConfiguration</code> is used for each <code>VodSource</code>.</p>
         */
        sourceGroup: string;
    }

    /**
     * <p>Slate VOD source configuration.</p>
     */
    export interface ChannelSlateSource {
        /**
         * <p>The name of the source location where the slate VOD source is stored.</p>
         */
        sourceLocationName?: string;
        /**
         * <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
         */
        vodSourceName?: string;
    }

    /**
     * <p>The configuration for time-shifted viewing.</p>
     */
    export interface ChannelTimeShiftConfiguration {
        /**
         * <p>The maximum time delay for time-shifted viewing. The minimum allowed maximum time delay is 0 seconds, and the maximum allowed maximum time delay is 21600 seconds (6 hours).</p>
         */
        maxTimeDelaySeconds: number;
    }

    /**
     * <p>The HTTP package configuration properties for the requested VOD source.</p>
     */
    export interface LiveSourceHttpPackageConfiguration {
        /**
         * <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
         */
        path: string;
        /**
         * <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
         */
        sourceGroup: string;
        /**
         * The streaming protocol for this package configuration. Supported values are `HLS` and `DASH` .
         */
        type: enums.mediatailor.LiveSourceType;
    }

    /**
     * For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
     */
    export interface PlaybackConfigurationAdMarkerPassthrough {
        /**
         * Enables ad marker passthrough for your configuration.
         */
        enabled?: boolean;
    }

    /**
     * The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
     */
    export interface PlaybackConfigurationAvailSuppression {
        /**
         * Defines the policy to apply to the avail suppression mode. BEHIND_LIVE_EDGE will always use the full avail suppression policy. AFTER_LIVE_EDGE mode can be used to invoke partial ad break fills when a session starts mid-break. Valid values are FULL_AVAIL_ONLY and PARTIAL_AVAIL
         */
        fillPolicy?: enums.mediatailor.PlaybackConfigurationAvailSuppressionFillPolicy;
        /**
         * Sets the ad suppression mode. By default, ad suppression is off and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window. When Mode is set to AFTER_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks that are within the live edge plus the avail suppression value.
         */
        mode?: enums.mediatailor.PlaybackConfigurationAvailSuppressionMode;
        /**
         * A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
         */
        value?: string;
    }

    /**
     * The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
     */
    export interface PlaybackConfigurationBumper {
        /**
         * The URL for the end bumper asset.
         */
        endUrl?: string;
        /**
         * The URL for the start bumper asset.
         */
        startUrl?: string;
    }

    /**
     * The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
     */
    export interface PlaybackConfigurationCdnConfiguration {
        /**
         * A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
         */
        adSegmentUrlPrefix?: string;
        /**
         * A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
         */
        contentSegmentUrlPrefix?: string;
    }

    /**
     * The configuration for DASH PUT operations.
     */
    export interface PlaybackConfigurationDashConfiguration {
        /**
         * The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
         */
        manifestEndpointPrefix?: string;
        /**
         * The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
         */
        mpdLocation?: string;
        /**
         * The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
         */
        originManifestType?: enums.mediatailor.PlaybackConfigurationDashConfigurationOriginManifestType;
    }

    export interface PlaybackConfigurationHlsConfiguration {
        /**
         * The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.
         */
        manifestEndpointPrefix?: string;
    }

    /**
     * The configuration for pre-roll ad insertion.
     */
    export interface PlaybackConfigurationLivePreRollConfiguration {
        /**
         * The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
         */
        adDecisionServerUrl?: string;
        /**
         * The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
         */
        maxDurationSeconds?: number;
    }

    /**
     * The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
     */
    export interface PlaybackConfigurationManifestProcessingRules {
        /**
         * For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
         */
        adMarkerPassthrough?: outputs.mediatailor.PlaybackConfigurationAdMarkerPassthrough;
    }

    /**
     * <p>Access configuration parameters.</p>
     */
    export interface SourceLocationAccessConfiguration {
        /**
         * The type of authentication used to access content from `HttpConfiguration::BaseUrl` on your source location. Accepted value: `S3_SIGV4` .
         *
         * `S3_SIGV4` - AWS Signature Version 4 authentication for Amazon S3 hosted virtual-style access. If your source location base URL is an Amazon S3 bucket, MediaTailor can use AWS Signature Version 4 (SigV4) authentication to access the bucket where your source content is stored. Your MediaTailor source location baseURL must follow the S3 virtual hosted-style request URL format. For example, https://bucket-name.s3.Region.amazonaws.com/key-name.
         *
         * Before you can use `S3_SIGV4` , you must meet these requirements:
         *
         * • You must allow MediaTailor to access your S3 bucket by granting mediatailor.amazonaws.com principal access in IAM. For information about configuring access in IAM, see Access management in the IAM User Guide.
         *
         * • The mediatailor.amazonaws.com service principal must have permissions to read all top level manifests referenced by the VodSource packaging configurations.
         *
         * • The caller of the API must have s3:GetObject IAM permissions to read all top level manifests referenced by your MediaTailor VodSource packaging configurations.
         */
        accessType?: enums.mediatailor.SourceLocationAccessType;
        /**
         * AWS Secrets Manager access token configuration parameters.
         */
        secretsManagerAccessTokenConfiguration?: outputs.mediatailor.SourceLocationSecretsManagerAccessTokenConfiguration;
    }

    /**
     * <p>The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.</p>
     */
    export interface SourceLocationDefaultSegmentDeliveryConfiguration {
        /**
         * <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
         */
        baseUrl?: string;
    }

    /**
     * <p>The HTTP configuration for the source location.</p>
     */
    export interface SourceLocationHttpConfiguration {
        /**
         * <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
         */
        baseUrl: string;
    }

    /**
     * <p>AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html">Working with AWS Secrets Manager access token authentication</a>.</p>
     */
    export interface SourceLocationSecretsManagerAccessTokenConfiguration {
        /**
         * <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
         */
        headerName?: string;
        /**
         * <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
         */
        secretArn?: string;
        /**
         * <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
         */
        secretStringKey?: string;
    }

    /**
     * <p>The segment delivery configuration settings.</p>
     */
    export interface SourceLocationSegmentDeliveryConfiguration {
        /**
         * <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
         */
        baseUrl?: string;
        /**
         * <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
         */
        name?: string;
    }

    /**
     * <p>The HTTP package configuration properties for the requested VOD source.</p>
     */
    export interface VodSourceHttpPackageConfiguration {
        /**
         * <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
         */
        path: string;
        /**
         * <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
         */
        sourceGroup: string;
        /**
         * The streaming protocol for this package configuration. Supported values are `HLS` and `DASH` .
         */
        type: enums.mediatailor.VodSourceType;
    }

}

export namespace memorydb {
    /**
     * Denotes whether the user requires a password to authenticate.
     *
     * *Example:*
     *
     * `mynewdbuser: Type: AWS::MemoryDB::User Properties: AccessString: on ~* &* +@all AuthenticationMode: Passwords: '1234567890123456' Type: password UserName: mynewdbuser AuthenticationMode: { "Passwords": ["1234567890123456"], "Type": "Password" }`
     */
    export interface AuthenticationModeProperties {
        /**
         * Passwords used for this user account. You can create up to two passwords for each user.
         */
        passwords?: string[];
        /**
         * Type of authentication strategy for this user.
         */
        type?: enums.memorydb.UserAuthenticationModePropertiesType;
    }

    export interface ClusterEndpoint {
        /**
         * The DNS address of the primary read-write node.
         */
        address?: string;
        /**
         * The port number that the engine is listening on. 
         */
        port?: number;
    }

}

export namespace msk {
    export interface ClusterBrokerLogs {
        /**
         * Details of the CloudWatch Logs destination for broker logs.
         */
        cloudWatchLogs?: outputs.msk.ClusterCloudWatchLogs;
        /**
         * Details of the Kinesis Data Firehose delivery stream that is the destination for broker logs.
         */
        firehose?: outputs.msk.ClusterFirehose;
        /**
         * Details of the Amazon S3 destination for broker logs.
         */
        s3?: outputs.msk.ClusterS3;
    }

    export interface ClusterBrokerNodeGroupInfo {
        /**
         * This parameter is currently not in use.
         */
        brokerAzDistribution?: string;
        /**
         * The list of subnets to connect to in the client virtual private cloud (VPC). Amazon creates elastic network interfaces inside these subnets. Client applications use elastic network interfaces to produce and consume data.
         *
         * If you use the US West (N. California) Region, specify exactly two subnets. For other Regions where Amazon MSK is available, you can specify either two or three subnets. The subnets that you specify must be in distinct Availability Zones. When you create a cluster, Amazon MSK distributes the broker nodes evenly across the subnets that you specify.
         *
         * Client subnets can't occupy the Availability Zone with ID `use1-az3` .
         */
        clientSubnets: string[];
        /**
         * Information about the cluster's connectivity setting.
         */
        connectivityInfo?: outputs.msk.ClusterConnectivityInfo;
        /**
         * The type of Amazon EC2 instances to use for brokers. The following instance types are allowed: kafka.m5.large, kafka.m5.xlarge, kafka.m5.2xlarge, kafka.m5.4xlarge, kafka.m5.8xlarge, kafka.m5.12xlarge, kafka.m5.16xlarge, kafka.m5.24xlarge, and kafka.t3.small.
         */
        instanceType: string;
        /**
         * The security groups to associate with the elastic network interfaces in order to specify who can connect to and communicate with the Amazon MSK cluster. If you don't specify a security group, Amazon MSK uses the default security group associated with the VPC. If you specify security groups that were shared with you, you must ensure that you have permissions to them. Specifically, you need the `ec2:DescribeSecurityGroups` permission.
         */
        securityGroups?: string[];
        /**
         * Contains information about storage volumes attached to Amazon MSK broker nodes.
         */
        storageInfo?: outputs.msk.ClusterStorageInfo;
    }

    export interface ClusterClientAuthentication {
        /**
         * Details for client authentication using SASL. To turn on SASL, you must also turn on `EncryptionInTransit` by setting `inCluster` to true. You must set `clientBroker` to either `TLS` or `TLS_PLAINTEXT` . If you choose `TLS_PLAINTEXT` , then you must also set `unauthenticated` to true.
         */
        sasl?: outputs.msk.ClusterSasl;
        /**
         * Details for ClientAuthentication using TLS. To turn on TLS access control, you must also turn on `EncryptionInTransit` by setting `inCluster` to true and `clientBroker` to `TLS` .
         */
        tls?: outputs.msk.ClusterTls;
        /**
         * Details for ClientAuthentication using no authentication.
         */
        unauthenticated?: outputs.msk.ClusterUnauthenticated;
    }

    export interface ClusterCloudWatchLogs {
        /**
         * Specifies whether broker logs get sent to the specified CloudWatch Logs destination.
         */
        enabled: boolean;
        /**
         * The CloudWatch log group that is the destination for broker logs.
         */
        logGroup?: string;
    }

    export interface ClusterConfigurationInfo {
        /**
         * ARN of the configuration to use.
         */
        arn: string;
        /**
         * The revision of the configuration to use.
         */
        revision: number;
    }

    export interface ClusterConnectivityInfo {
        /**
         * Access control settings for the cluster's brokers.
         */
        publicAccess?: outputs.msk.ClusterPublicAccess;
        /**
         * VPC connection control settings for brokers
         */
        vpcConnectivity?: outputs.msk.ClusterVpcConnectivity;
    }

    export interface ClusterEbsStorageInfo {
        /**
         * EBS volume provisioned throughput information.
         */
        provisionedThroughput?: outputs.msk.ClusterProvisionedThroughput;
        /**
         * The size in GiB of the EBS volume for the data drive on each broker node.
         */
        volumeSize?: number;
    }

    export interface ClusterEncryptionAtRest {
        /**
         * The Amazon Resource Name (ARN) of the Amazon KMS key for encrypting data at rest. If you don't specify a KMS key, MSK creates one for you and uses it.
         */
        dataVolumeKmsKeyId: string;
    }

    export interface ClusterEncryptionInTransit {
        /**
         * Indicates the encryption setting for data in transit between clients and brokers. You must set it to one of the following values.
         *
         * `TLS` means that client-broker communication is enabled with TLS only.
         *
         * `TLS_PLAINTEXT` means that client-broker communication is enabled for both TLS-encrypted, as well as plaintext data.
         *
         * `PLAINTEXT` means that client-broker communication is enabled in plaintext only.
         *
         * The default value is `TLS` .
         */
        clientBroker?: enums.msk.ClusterEncryptionInTransitClientBroker;
        /**
         * When set to true, it indicates that data communication among the broker nodes of the cluster is encrypted. When set to false, the communication happens in plaintext.
         *
         * The default value is true.
         */
        inCluster?: boolean;
    }

    export interface ClusterEncryptionInfo {
        /**
         * The data-volume encryption details.
         */
        encryptionAtRest?: outputs.msk.ClusterEncryptionAtRest;
        /**
         * The details for encryption in transit.
         */
        encryptionInTransit?: outputs.msk.ClusterEncryptionInTransit;
    }

    export interface ClusterFirehose {
        /**
         * The Kinesis Data Firehose delivery stream that is the destination for broker logs.
         */
        deliveryStream?: string;
        /**
         * Specifies whether broker logs get sent to the specified Kinesis Data Firehose delivery stream.
         */
        enabled: boolean;
    }

    export interface ClusterIam {
        /**
         * SASL/IAM authentication is enabled or not.
         */
        enabled: boolean;
    }

    export interface ClusterJmxExporter {
        /**
         * Indicates whether you want to enable or disable the JMX Exporter.
         */
        enabledInBroker: boolean;
    }

    export interface ClusterLoggingInfo {
        /**
         * You can configure your MSK cluster to send broker logs to different destination types. This configuration specifies the details of these destinations.
         */
        brokerLogs: outputs.msk.ClusterBrokerLogs;
    }

    export interface ClusterNodeExporter {
        /**
         * Indicates whether you want to enable or disable the Node Exporter.
         */
        enabledInBroker: boolean;
    }

    export interface ClusterOpenMonitoring {
        /**
         * Prometheus exporter settings.
         */
        prometheus: outputs.msk.ClusterPrometheus;
    }

    export interface ClusterPrometheus {
        /**
         * Indicates whether you want to enable or disable the JMX Exporter.
         */
        jmxExporter?: outputs.msk.ClusterJmxExporter;
        /**
         * Indicates whether you want to enable or disable the Node Exporter.
         */
        nodeExporter?: outputs.msk.ClusterNodeExporter;
    }

    export interface ClusterProvisionedThroughput {
        /**
         * Provisioned throughput is enabled or not.
         */
        enabled?: boolean;
        /**
         * Throughput value of the EBS volumes for the data drive on each kafka broker node in MiB per second.
         */
        volumeThroughput?: number;
    }

    export interface ClusterPublicAccess {
        /**
         * DISABLED means that public access is turned off. SERVICE_PROVIDED_EIPS means that public access is turned on.
         */
        type?: string;
    }

    export interface ClusterS3 {
        /**
         * The name of the S3 bucket that is the destination for broker logs.
         */
        bucket?: string;
        /**
         * Specifies whether broker logs get sent to the specified Amazon S3 destination.
         */
        enabled: boolean;
        /**
         * The S3 prefix that is the destination for broker logs.
         */
        prefix?: string;
    }

    export interface ClusterSasl {
        /**
         * Details for ClientAuthentication using IAM.
         */
        iam?: outputs.msk.ClusterIam;
        /**
         * Details for SASL/SCRAM client authentication.
         */
        scram?: outputs.msk.ClusterScram;
    }

    export interface ClusterScram {
        /**
         * SASL/SCRAM authentication is enabled or not.
         */
        enabled: boolean;
    }

    export interface ClusterStorageInfo {
        /**
         * EBS volume information.
         */
        ebsStorageInfo?: outputs.msk.ClusterEbsStorageInfo;
    }

    export interface ClusterTls {
        /**
         * List of AWS Private CA Amazon Resource Name (ARN)s.
         */
        certificateAuthorityArnList?: string[];
        /**
         * TLS authentication is enabled or not.
         */
        enabled?: boolean;
    }

    export interface ClusterUnauthenticated {
        /**
         * Unauthenticated is enabled or not.
         */
        enabled: boolean;
    }

    export interface ClusterVpcConnectivity {
        /**
         * VPC connection control settings for brokers.
         */
        clientAuthentication?: outputs.msk.ClusterVpcConnectivityClientAuthentication;
    }

    export interface ClusterVpcConnectivityClientAuthentication {
        /**
         * Details for VpcConnectivity ClientAuthentication using SASL.
         */
        sasl?: outputs.msk.ClusterVpcConnectivitySasl;
        /**
         * Details for VpcConnectivity ClientAuthentication using TLS.
         */
        tls?: outputs.msk.ClusterVpcConnectivityTls;
    }

    export interface ClusterVpcConnectivityIam {
        /**
         * SASL/IAM authentication is enabled or not.
         */
        enabled: boolean;
    }

    export interface ClusterVpcConnectivitySasl {
        /**
         * Details for ClientAuthentication using IAM for VpcConnectivity.
         */
        iam?: outputs.msk.ClusterVpcConnectivityIam;
        /**
         * Details for SASL/SCRAM client authentication for VpcConnectivity.
         */
        scram?: outputs.msk.ClusterVpcConnectivityScram;
    }

    export interface ClusterVpcConnectivityScram {
        /**
         * SASL/SCRAM authentication is enabled or not.
         */
        enabled: boolean;
    }

    export interface ClusterVpcConnectivityTls {
        /**
         * TLS authentication is enabled or not.
         */
        enabled: boolean;
    }

    export interface ConfigurationLatestRevision {
        creationTime?: string;
        description?: string;
        revision?: number;
    }

    /**
     * Details of an Amazon MSK cluster.
     */
    export interface ReplicatorAmazonMskCluster {
        /**
         * The ARN of an Amazon MSK cluster.
         */
        mskClusterArn: string;
    }

    /**
     * Configuration relating to consumer group replication.
     */
    export interface ReplicatorConsumerGroupReplication {
        /**
         * List of regular expression patterns indicating the consumer groups that should not be replicated.
         */
        consumerGroupsToExclude?: string[];
        /**
         * List of regular expression patterns indicating the consumer groups to copy.
         */
        consumerGroupsToReplicate: string[];
        /**
         * Whether to periodically check for new consumer groups.
         */
        detectAndCopyNewConsumerGroups?: boolean;
        /**
         * Whether to periodically write the translated offsets to __consumer_offsets topic in target cluster.
         */
        synchroniseConsumerGroupOffsets?: boolean;
    }

    /**
     * Details of a Kafka cluster for replication.
     */
    export interface ReplicatorKafkaCluster {
        /**
         * Details of an Amazon MSK cluster. Exactly one of AmazonMskCluster is required.
         */
        amazonMskCluster: outputs.msk.ReplicatorAmazonMskCluster;
        /**
         * Details of an Amazon VPC which has network connectivity to the Apache Kafka cluster.
         */
        vpcConfig: outputs.msk.ReplicatorKafkaClusterClientVpcConfig;
    }

    /**
     * Details of an Amazon VPC which has network connectivity to the Kafka cluster.
     */
    export interface ReplicatorKafkaClusterClientVpcConfig {
        /**
         * The AWS security groups to associate with the elastic network interfaces in order to specify what the replicator has access to. If a security group is not specified, the default security group associated with the VPC is used.
         */
        securityGroupIds?: string[];
        /**
         * The list of subnets to connect to in the virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets.
         */
        subnetIds: string[];
    }

    /**
     * Specifies configuration for replication between a source and target Kafka cluster.
     */
    export interface ReplicatorReplicationInfo {
        /**
         * Configuration relating to consumer group replication.
         */
        consumerGroupReplication: outputs.msk.ReplicatorConsumerGroupReplication;
        /**
         * Amazon Resource Name of the source Kafka cluster.
         */
        sourceKafkaClusterArn: string;
        /**
         * The type of compression to use writing records to target Kafka cluster.
         */
        targetCompressionType: enums.msk.ReplicatorReplicationInfoTargetCompressionType;
        /**
         * Amazon Resource Name of the target Kafka cluster.
         */
        targetKafkaClusterArn: string;
        /**
         * Configuration relating to topic replication.
         */
        topicReplication: outputs.msk.ReplicatorTopicReplication;
    }

    /**
     * Configuration for specifying the position in the topics to start replicating from.
     */
    export interface ReplicatorReplicationStartingPosition {
        type?: enums.msk.ReplicatorReplicationStartingPositionType;
    }

    export interface ReplicatorTopicReplication {
        /**
         * Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.
         */
        copyAccessControlListsForTopics?: boolean;
        /**
         * Whether to periodically configure remote topics to match their corresponding upstream topics.
         */
        copyTopicConfigurations?: boolean;
        /**
         * Whether to periodically check for new topics and partitions.
         */
        detectAndCopyNewTopics?: boolean;
        /**
         * Configuration for specifying the position in the topics to start replicating from.
         */
        startingPosition?: outputs.msk.ReplicatorReplicationStartingPosition;
        /**
         * List of regular expression patterns indicating the topics that should not be replicated.
         */
        topicsToExclude?: string[];
        /**
         * List of regular expression patterns indicating the topics to copy.
         */
        topicsToReplicate: string[];
    }

    export interface ServerlessClusterClientAuthentication {
        /**
         * Details for client authentication using SASL. To turn on SASL, you must also turn on `EncryptionInTransit` by setting `inCluster` to true. You must set `clientBroker` to either `TLS` or `TLS_PLAINTEXT` . If you choose `TLS_PLAINTEXT` , then you must also set `unauthenticated` to true.
         */
        sasl: outputs.msk.ServerlessClusterSasl;
    }

    export interface ServerlessClusterIam {
        /**
         * SASL/IAM authentication is enabled or not.
         */
        enabled: boolean;
    }

    export interface ServerlessClusterSasl {
        /**
         * Details for ClientAuthentication using IAM.
         */
        iam: outputs.msk.ServerlessClusterIam;
    }

    export interface ServerlessClusterVpcConfig {
        securityGroups?: string[];
        subnetIds: string[];
    }

}

export namespace mwaa {
    /**
     * Logging configuration for the environment.
     */
    export interface EnvironmentLoggingConfiguration {
        /**
         * Defines the processing logs sent to CloudWatch Logs and the logging level to send.
         */
        dagProcessingLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
        /**
         * Defines the scheduler logs sent to CloudWatch Logs and the logging level to send.
         */
        schedulerLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
        /**
         * Defines the task logs sent to CloudWatch Logs and the logging level to send.
         */
        taskLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
        /**
         * Defines the web server logs sent to CloudWatch Logs and the logging level to send.
         */
        webserverLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
        /**
         * Defines the worker logs sent to CloudWatch Logs and the logging level to send.
         */
        workerLogs?: outputs.mwaa.EnvironmentModuleLoggingConfiguration;
    }

    /**
     * Logging configuration for a specific airflow component.
     */
    export interface EnvironmentModuleLoggingConfiguration {
        /**
         * The ARN of the CloudWatch Logs log group for each type of Apache Airflow log type that you have enabled.
         *
         * > `CloudWatchLogGroupArn` is available only as a return value, accessible when specified as an attribute in the [`Fn:GetAtt`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mwaa-environment.html#aws-resource-mwaa-environment-return-values) intrinsic function. Any value you provide for `CloudWatchLogGroupArn` is discarded by Amazon MWAA.
         */
        cloudWatchLogGroupArn?: string;
        /**
         * Indicates whether to enable the Apache Airflow log type (e.g. `DagProcessingLogs` ) in CloudWatch Logs.
         */
        enabled?: boolean;
        /**
         * Defines the Apache Airflow logs to send for the log type (e.g. `DagProcessingLogs` ) to CloudWatch Logs. Valid values: `CRITICAL` , `ERROR` , `WARNING` , `INFO` .
         */
        logLevel?: enums.mwaa.EnvironmentLoggingLevel;
    }

    /**
     * Configures the network resources of the environment.
     */
    export interface EnvironmentNetworkConfiguration {
        /**
         * A list of security groups to use for the environment.
         */
        securityGroupIds?: string[];
        /**
         * A list of subnets to use for the environment. These must be private subnets, in the same VPC, in two different availability zones.
         */
        subnetIds?: string[];
    }

}

export namespace neptune {
    /**
     * Describes an AWS Identity and Access Management (IAM) role that is associated with a DB cluster.
     */
    export interface DbClusterDbClusterRole {
        /**
         * The name of the feature associated with the AWS Identity and Access Management (IAM) role. For the list of supported feature names, see DBEngineVersion in the Amazon Neptune API Reference.
         */
        featureName?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
         */
        roleArn: string;
    }

    /**
     * Contains the scaling configuration of an Neptune Serverless DB cluster.
     */
    export interface DbClusterServerlessScalingConfiguration {
        /**
         * The maximum number of Neptune capacity units (NCUs) for a DB instance in an Neptune Serverless cluster. You can specify NCU values in half-step increments, such as 40, 40.5, 41, and so on. The smallest value you can use is 2.5, whereas the largest is 128.
         */
        maxCapacity: number;
        /**
         * The minimum number of Neptune capacity units (NCUs) for a DB instance in an Neptune Serverless cluster. You can specify NCU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value you can use is 1, whereas the largest is 128.
         */
        minCapacity: number;
    }

}

export namespace neptunegraph {
    /**
     * The vector search configuration.
     */
    export interface GraphVectorSearchConfiguration {
        /**
         * The vector search dimension
         */
        vectorSearchDimension: number;
    }

}

export namespace networkfirewall {
    export interface FirewallPolicy {
        /**
         * Contains variables that you can use to override default Suricata settings in your firewall policy.
         */
        policyVariables?: outputs.networkfirewall.FirewallPolicyPolicyVariablesProperties;
        /**
         * The default actions to take on a packet that doesn't match any stateful rules. The stateful default action is optional, and is only valid when using the strict rule order.
         *
         * Valid values of the stateful default action:
         *
         * - aws:drop_strict
         * - aws:drop_established
         * - aws:alert_strict
         * - aws:alert_established
         *
         * For more information, see [Strict evaluation order](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html#suricata-strict-rule-evaluation-order.html) in the *AWS Network Firewall Developer Guide* .
         */
        statefulDefaultActions?: string[];
        /**
         * Additional options governing how Network Firewall handles stateful rules. The stateful rule groups that you use in your policy must have stateful rule options settings that are compatible with these settings.
         */
        statefulEngineOptions?: outputs.networkfirewall.FirewallPolicyStatefulEngineOptions;
        /**
         * References to the stateful rule groups that are used in the policy. These define the inspection criteria in stateful rules.
         */
        statefulRuleGroupReferences?: outputs.networkfirewall.FirewallPolicyStatefulRuleGroupReference[];
        /**
         * The custom action definitions that are available for use in the firewall policy's `StatelessDefaultActions` setting. You name each custom action that you define, and then you can use it by name in your default actions specifications.
         */
        statelessCustomActions?: outputs.networkfirewall.FirewallPolicyCustomAction[];
        /**
         * The actions to take on a packet if it doesn't match any of the stateless rules in the policy. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe` .
         *
         * You must specify one of the standard actions: `aws:pass` , `aws:drop` , or `aws:forward_to_sfe` . In addition, you can specify custom actions that are compatible with your standard section choice.
         *
         * For example, you could specify `["aws:pass"]` or you could specify `["aws:pass", "customActionName"]` . For information about compatibility, see the custom action descriptions.
         */
        statelessDefaultActions: string[];
        /**
         * The actions to take on a fragmented packet if it doesn't match any of the stateless rules in the policy. If you want non-matching fragmented packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe` .
         *
         * You must specify one of the standard actions: `aws:pass` , `aws:drop` , or `aws:forward_to_sfe` . In addition, you can specify custom actions that are compatible with your standard section choice.
         *
         * For example, you could specify `["aws:pass"]` or you could specify `["aws:pass", "customActionName"]` . For information about compatibility, see the custom action descriptions.
         */
        statelessFragmentDefaultActions: string[];
        /**
         * References to the stateless rule groups that are used in the policy. These define the matching criteria in stateless rules.
         */
        statelessRuleGroupReferences?: outputs.networkfirewall.FirewallPolicyStatelessRuleGroupReference[];
        /**
         * The Amazon Resource Name (ARN) of the TLS inspection configuration.
         */
        tlsInspectionConfigurationArn?: string;
    }

    export interface FirewallPolicyActionDefinition {
        /**
         * Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. This setting defines a CloudWatch dimension value to be published.
         *
         * You can pair this custom action with any of the standard stateless rule actions. For example, you could pair this in a rule action with the standard action that forwards the packet for stateful inspection. Then, when a packet matches the rule, Network Firewall publishes metrics for the packet and forwards it.
         */
        publishMetricAction?: outputs.networkfirewall.FirewallPolicyPublishMetricAction;
    }

    export interface FirewallPolicyCustomAction {
        /**
         * The custom action associated with the action name.
         */
        actionDefinition: outputs.networkfirewall.FirewallPolicyActionDefinition;
        /**
         * The descriptive name of the custom action. You can't change the name of a custom action after you create it.
         */
        actionName: string;
    }

    export interface FirewallPolicyDimension {
        /**
         * The value to use in the custom metric dimension.
         */
        value: string;
    }

    export interface FirewallPolicyIpSet {
        /**
         * The list of IP addresses and address ranges, in CIDR notation.
         */
        definition?: string[];
    }

    /**
     * Contains variables that you can use to override default Suricata settings in your firewall policy.
     */
    export interface FirewallPolicyPolicyVariablesProperties {
        ruleVariables?: {[key: string]: outputs.networkfirewall.FirewallPolicyIpSet};
    }

    export interface FirewallPolicyPublishMetricAction {
        dimensions: outputs.networkfirewall.FirewallPolicyDimension[];
    }

    export interface FirewallPolicyStatefulEngineOptions {
        /**
         * Indicates how to manage the order of stateful rule evaluation for the policy. `DEFAULT_ACTION_ORDER` is the default behavior. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them based on certain settings. For more information, see [Evaluation order for stateful rules](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html) in the *AWS Network Firewall Developer Guide* .
         */
        ruleOrder?: enums.networkfirewall.FirewallPolicyRuleOrder;
        /**
         * Configures how Network Firewall processes traffic when a network connection breaks midstream. Network connections can break due to disruptions in external networks or within the firewall itself.
         *
         * - `DROP` - Network Firewall fails closed and drops all subsequent traffic going to the firewall. This is the default behavior.
         * - `CONTINUE` - Network Firewall continues to apply rules to the subsequent traffic without context from traffic before the break. This impacts the behavior of rules that depend on this context. For example, if you have a stateful rule to `drop http` traffic, Network Firewall won't match the traffic for this rule because the service won't have the context from session initialization defining the application layer protocol as HTTP. However, this behavior is rule dependent—a TCP-layer rule using a `flow:stateless` rule would still match, as would the `aws:drop_strict` default action.
         * - `REJECT` - Network Firewall fails closed and drops all subsequent traffic going to the firewall. Network Firewall also sends a TCP reject packet back to your client so that the client can immediately establish a new session. Network Firewall will have context about the new session and will apply rules to the subsequent traffic.
         */
        streamExceptionPolicy?: enums.networkfirewall.FirewallPolicyStreamExceptionPolicy;
    }

    export interface FirewallPolicyStatefulRuleGroupOverride {
        /**
         * The action that changes the rule group from `DROP` to `ALERT` . This only applies to managed rule groups.
         */
        action?: enums.networkfirewall.FirewallPolicyOverrideAction;
    }

    export interface FirewallPolicyStatefulRuleGroupReference {
        /**
         * The action that allows the policy owner to override the behavior of the rule group within a policy.
         */
        override?: outputs.networkfirewall.FirewallPolicyStatefulRuleGroupOverride;
        /**
         * An integer setting that indicates the order in which to run the stateful rule groups in a single `FirewallPolicy` . This setting only applies to firewall policies that specify the `STRICT_ORDER` rule order in the stateful engine options settings.
         *
         * Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy.
         *
         * You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on.
         */
        priority?: number;
        /**
         * The Amazon Resource Name (ARN) of the stateful rule group.
         */
        resourceArn: string;
    }

    export interface FirewallPolicyStatelessRuleGroupReference {
        /**
         * An integer setting that indicates the order in which to run the stateless rule groups in a single `FirewallPolicy` . Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy.
         */
        priority: number;
        /**
         * The Amazon Resource Name (ARN) of the stateless rule group.
         */
        resourceArn: string;
    }

    export interface FirewallSubnetMapping {
        /**
         * A IPAddressType
         */
        ipAddressType?: string;
        /**
         * A SubnetId.
         */
        subnetId: string;
    }

    export interface LoggingConfiguration {
        /**
         * Defines the logging destinations for the logs for a firewall. Network Firewall generates logs for stateful rule groups.
         */
        logDestinationConfigs: outputs.networkfirewall.LoggingConfigurationLogDestinationConfig[];
    }

    export interface LoggingConfigurationLogDestinationConfig {
        /**
         * A key-value pair to configure the logDestinations.
         */
        logDestination: {[key: string]: string};
        /**
         * The type of storage destination to send these logs to. You can send logs to an Amazon S3 bucket, a CloudWatch log group, or a Firehose delivery stream.
         */
        logDestinationType: enums.networkfirewall.LoggingConfigurationLogDestinationConfigLogDestinationType;
        /**
         * The type of log to send. Alert logs report traffic that matches a stateful rule with an action setting that sends an alert log message. Flow logs are standard network traffic flow logs.
         */
        logType: enums.networkfirewall.LoggingConfigurationLogDestinationConfigLogType;
    }

    export interface RuleGroup {
        /**
         * The reference sets for the stateful rule group.
         */
        referenceSets?: outputs.networkfirewall.RuleGroupReferenceSets;
        /**
         * Settings that are available for use in the rules in the rule group. You can only use these for stateful rule groups.
         */
        ruleVariables?: outputs.networkfirewall.RuleGroupRuleVariables;
        /**
         * The stateful rules or stateless rules for the rule group.
         */
        rulesSource: outputs.networkfirewall.RuleGroupRulesSource;
        /**
         * Additional options governing how Network Firewall handles stateful rules. The policies where you use your stateful rule group must have stateful rule options settings that are compatible with these settings. Some limitations apply; for more information, see [Strict evaluation order](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-limitations-caveats.html) in the *AWS Network Firewall Developer Guide* .
         */
        statefulRuleOptions?: outputs.networkfirewall.RuleGroupStatefulRuleOptions;
    }

    export interface RuleGroupActionDefinition {
        /**
         * Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. This setting defines a CloudWatch dimension value to be published.
         *
         * You can pair this custom action with any of the standard stateless rule actions. For example, you could pair this in a rule action with the standard action that forwards the packet for stateful inspection. Then, when a packet matches the rule, Network Firewall publishes metrics for the packet and forwards it.
         */
        publishMetricAction?: outputs.networkfirewall.RuleGroupPublishMetricAction;
    }

    export interface RuleGroupAddress {
        /**
         * Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6.
         *
         * Examples:
         *
         * - To configure Network Firewall to inspect for the IP address 192.0.2.44, specify `192.0.2.44/32` .
         * - To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify `192.0.2.0/24` .
         * - To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify `1111:0000:0000:0000:0000:0000:0000:0111/128` .
         * - To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify `1111:0000:0000:0000:0000:0000:0000:0000/64` .
         *
         * For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) .
         */
        addressDefinition: string;
    }

    export interface RuleGroupCustomAction {
        /**
         * The custom action associated with the action name.
         */
        actionDefinition: outputs.networkfirewall.RuleGroupActionDefinition;
        /**
         * The descriptive name of the custom action. You can't change the name of a custom action after you create it.
         */
        actionName: string;
    }

    export interface RuleGroupDimension {
        /**
         * The value to use in the custom metric dimension.
         */
        value: string;
    }

    export interface RuleGroupHeader {
        /**
         * The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify `ANY` .
         *
         * Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6.
         *
         * Examples:
         *
         * - To configure Network Firewall to inspect for the IP address 192.0.2.44, specify `192.0.2.44/32` .
         * - To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify `192.0.2.0/24` .
         * - To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify `1111:0000:0000:0000:0000:0000:0000:0111/128` .
         * - To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify `1111:0000:0000:0000:0000:0000:0000:0000/64` .
         *
         * For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) .
         */
        destination: string;
        /**
         * The destination port to inspect for. You can specify an individual port, for example `1994` and you can specify a port range, for example `1990:1994` . To match with any port, specify `ANY` .
         */
        destinationPort: string;
        /**
         * The direction of traffic flow to inspect. If set to `ANY` , the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to `FORWARD` , the inspection only matches traffic going from the source to the destination.
         */
        direction: enums.networkfirewall.RuleGroupHeaderDirection;
        /**
         * The protocol to inspect for. To specify all, you can use `IP` , because all traffic on AWS and on the internet is IP.
         */
        protocol: enums.networkfirewall.RuleGroupHeaderProtocol;
        /**
         * The source IP address or address range to inspect for, in CIDR notation. To match with any address, specify `ANY` .
         *
         * Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6.
         *
         * Examples:
         *
         * - To configure Network Firewall to inspect for the IP address 192.0.2.44, specify `192.0.2.44/32` .
         * - To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify `192.0.2.0/24` .
         * - To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify `1111:0000:0000:0000:0000:0000:0000:0111/128` .
         * - To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify `1111:0000:0000:0000:0000:0000:0000:0000/64` .
         *
         * For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) .
         */
        source: string;
        /**
         * The source port to inspect for. You can specify an individual port, for example `1994` and you can specify a port range, for example `1990:1994` . To match with any port, specify `ANY` .
         */
        sourcePort: string;
    }

    export interface RuleGroupIpSet {
        definition?: string[];
    }

    export interface RuleGroupIpSetReference {
        referenceArn?: string;
    }

    export interface RuleGroupMatchAttributes {
        /**
         * The destination ports to inspect for. If not specified, this matches with any destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP).
         *
         * You can specify individual ports, for example `1994` and you can specify port ranges, for example `1990:1994` .
         */
        destinationPorts?: outputs.networkfirewall.RuleGroupPortRange[];
        /**
         * The destination IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address.
         */
        destinations?: outputs.networkfirewall.RuleGroupAddress[];
        /**
         * The protocols to inspect for, specified using each protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.
         */
        protocols?: number[];
        /**
         * The source ports to inspect for. If not specified, this matches with any source port. This setting is only used for protocols 6 (TCP) and 17 (UDP).
         *
         * You can specify individual ports, for example `1994` and you can specify port ranges, for example `1990:1994` .
         */
        sourcePorts?: outputs.networkfirewall.RuleGroupPortRange[];
        /**
         * The source IP addresses and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address.
         */
        sources?: outputs.networkfirewall.RuleGroupAddress[];
        /**
         * The TCP flags and masks to inspect for. If not specified, this matches with any settings. This setting is only used for protocol 6 (TCP).
         */
        tcpFlags?: outputs.networkfirewall.RuleGroupTcpFlagField[];
    }

    export interface RuleGroupPortRange {
        /**
         * The lower limit of the port range. This must be less than or equal to the `ToPort` specification.
         */
        fromPort: number;
        /**
         * The upper limit of the port range. This must be greater than or equal to the `FromPort` specification.
         */
        toPort: number;
    }

    export interface RuleGroupPortSet {
        definition?: string[];
    }

    export interface RuleGroupPublishMetricAction {
        dimensions: outputs.networkfirewall.RuleGroupDimension[];
    }

    export interface RuleGroupReferenceSets {
        /**
         * The IP set references to use in the stateful rule group.
         */
        ipSetReferences?: {[key: string]: outputs.networkfirewall.RuleGroupIpSetReference};
    }

    export interface RuleGroupRuleDefinition {
        /**
         * The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action and you can add custom actions.
         *
         * > Network Firewall only forwards a packet for stateful rule inspection if you specify `aws:forward_to_sfe` for a rule that the packet matches, or if the packet doesn't match any stateless rule and you specify `aws:forward_to_sfe` for the `StatelessDefaultActions` setting for the `FirewallPolicy` . 
         *
         * For every rule, you must specify exactly one of the following standard actions.
         *
         * - *aws:pass* - Discontinues all inspection of the packet and permits it to go to its intended destination.
         * - *aws:drop* - Discontinues all inspection of the packet and blocks it from going to its intended destination.
         * - *aws:forward_to_sfe* - Discontinues stateless inspection of the packet and forwards it to the stateful rule engine for inspection.
         *
         * Additionally, you can specify a custom action. To do this, you define a custom action by name and type, then provide the name you've assigned to the action in this `Actions` setting.
         *
         * To provide more than one action in this setting, separate the settings with a comma. For example, if you have a publish metrics custom action that you've named `MyMetricsAction` , then you could specify the standard action `aws:pass` combined with the custom action using `["aws:pass", "MyMetricsAction"]` .
         */
        actions: string[];
        /**
         * Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags.
         */
        matchAttributes: outputs.networkfirewall.RuleGroupMatchAttributes;
    }

    export interface RuleGroupRuleOption {
        /**
         * The Suricata rule option keywords. For Network Firewall , the keyword signature ID (sid) is required in the format `sid:112233` . The sid must be unique within the rule group. For information about Suricata rule option keywords, see [Rule options](https://docs.aws.amazon.com/https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html#rule-options) .
         */
        keyword: string;
        /**
         * The Suricata rule option settings. Settings have zero or more values, and the number of possible settings and required settings depends on the keyword. The format for Settings is `number` . For information about Suricata rule option settings, see [Rule options](https://docs.aws.amazon.com/https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html#rule-options) .
         */
        settings?: string[];
    }

    export interface RuleGroupRuleVariables {
        /**
         * A list of IP addresses and address ranges, in CIDR notation.
         */
        ipSets?: {[key: string]: outputs.networkfirewall.RuleGroupIpSet};
        /**
         * A list of port ranges.
         */
        portSets?: {[key: string]: outputs.networkfirewall.RuleGroupPortSet};
    }

    export interface RuleGroupRulesSource {
        /**
         * Stateful inspection criteria for a domain list rule group.
         */
        rulesSourceList?: outputs.networkfirewall.RuleGroupRulesSourceList;
        /**
         * Stateful inspection criteria, provided in Suricata compatible rules. Suricata is an open-source threat detection framework that includes a standard rule-based language for network traffic inspection.
         *
         * These rules contain the inspection criteria and the action to take for traffic that matches the criteria, so this type of rule group doesn't have a separate action setting.
         *
         * > You can't use the `priority` keyword if the `RuleOrder` option in `StatefulRuleOptions` is set to `STRICT_ORDER` .
         */
        rulesString?: string;
        /**
         * An array of individual stateful rules inspection criteria to be used together in a stateful rule group. Use this option to specify simple Suricata rules with protocol, source and destination, ports, direction, and rule options. For information about the Suricata `Rules` format, see [Rules Format](https://docs.aws.amazon.com/https://suricata.readthedocs.io/en/suricata-6.0.9/rules/intro.html) .
         */
        statefulRules?: outputs.networkfirewall.RuleGroupStatefulRule[];
        /**
         * Stateless inspection criteria to be used in a stateless rule group.
         */
        statelessRulesAndCustomActions?: outputs.networkfirewall.RuleGroupStatelessRulesAndCustomActions;
    }

    export interface RuleGroupRulesSourceList {
        /**
         * Whether you want to allow or deny access to the domains in your target list.
         */
        generatedRulesType: enums.networkfirewall.RuleGroupGeneratedRulesType;
        /**
         * The types of targets to inspect for. Valid values are `TLS_SNI` and `HTTP_HOST` .
         */
        targetTypes: enums.networkfirewall.RuleGroupTargetType[];
        /**
         * The domains that you want to inspect for in your traffic flows. Valid domain specifications are the following:
         *
         * - Explicit names. For example, `abc.example.com` matches only the domain `abc.example.com` .
         * - Names that use a domain wildcard, which you indicate with an initial ' `.` '. For example, `.example.com` matches `example.com` and matches all subdomains of `example.com` , such as `abc.example.com` and `www.example.com` .
         */
        targets: string[];
    }

    export interface RuleGroupStatefulRule {
        /**
         * Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow.
         *
         * The actions for a stateful rule are defined as follows:
         *
         * - *PASS* - Permits the packets to go to the intended destination.
         * - *DROP* - Blocks the packets from going to the intended destination and sends an alert log message, if alert logging is configured in the `Firewall` `LoggingConfiguration` .
         * - *REJECT* - Drops traffic that matches the conditions of the stateful rule and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a `RST` bit contained in the TCP header flags. `REJECT` is available only for TCP traffic.
         * - *ALERT* - Permits the packets to go to the intended destination and sends an alert log message, if alert logging is configured in the `Firewall` `LoggingConfiguration` .
         *
         * You can use this action to test a rule that you intend to use to drop traffic. You can enable the rule with `ALERT` action, verify in the logs that the rule is filtering as you want, then change the action to `DROP` .
         * - *REJECT* - Drops TCP traffic that matches the conditions of the stateful rule, and sends a TCP reset packet back to sender of the packet. A TCP reset packet is a packet with no payload and a `RST` bit contained in the TCP header flags. Also sends an alert log mesage if alert logging is configured in the `Firewall` `LoggingConfiguration` .
         *
         * `REJECT` isn't currently available for use with IMAP and FTP protocols.
         */
        action: enums.networkfirewall.RuleGroupStatefulRuleAction;
        /**
         * The stateful inspection criteria for this rule, used to inspect traffic flows.
         */
        header: outputs.networkfirewall.RuleGroupHeader;
        /**
         * Additional settings for a stateful rule, provided as keywords and settings.
         */
        ruleOptions: outputs.networkfirewall.RuleGroupRuleOption[];
    }

    export interface RuleGroupStatefulRuleOptions {
        /**
         * Indicates how to manage the order of the rule evaluation for the rule group. `DEFAULT_ACTION_ORDER` is the default behavior. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them based on certain settings. For more information, see [Evaluation order for stateful rules](https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html) in the *AWS Network Firewall Developer Guide* .
         */
        ruleOrder?: enums.networkfirewall.RuleGroupRuleOrder;
    }

    export interface RuleGroupStatelessRule {
        /**
         * Indicates the order in which to run this rule relative to all of the rules that are defined for a stateless rule group. Network Firewall evaluates the rules in a rule group starting with the lowest priority setting. You must ensure that the priority settings are unique for the rule group.
         *
         * Each stateless rule group uses exactly one `StatelessRulesAndCustomActions` object, and each `StatelessRulesAndCustomActions` contains exactly one `StatelessRules` object. To ensure unique priority settings for your rule groups, set unique priorities for the stateless rules that you define inside any single `StatelessRules` object.
         *
         * You can change the priority settings of your rules at any time. To make it easier to insert rules later, number them so there's a wide range in between, for example use 100, 200, and so on.
         */
        priority: number;
        /**
         * Defines the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria.
         */
        ruleDefinition: outputs.networkfirewall.RuleGroupRuleDefinition;
    }

    export interface RuleGroupStatelessRulesAndCustomActions {
        /**
         * Defines an array of individual custom action definitions that are available for use by the stateless rules in this `StatelessRulesAndCustomActions` specification. You name each custom action that you define, and then you can use it by name in your stateless rule `RuleGroup.RuleDefinition` `Actions` specification.
         */
        customActions?: outputs.networkfirewall.RuleGroupCustomAction[];
        /**
         * Defines the set of stateless rules for use in a stateless rule group.
         */
        statelessRules: outputs.networkfirewall.RuleGroupStatelessRule[];
    }

    export interface RuleGroupTcpFlagField {
        /**
         * Used in conjunction with the `Masks` setting to define the flags that must be set and flags that must not be set in order for the packet to match. This setting can only specify values that are also specified in the `Masks` setting.
         *
         * For the flags that are specified in the masks setting, the following must be true for the packet to match:
         *
         * - The ones that are set in this flags setting must be set in the packet.
         * - The ones that are not set in this flags setting must also not be set in the packet.
         */
        flags: enums.networkfirewall.RuleGroupTcpFlag[];
        /**
         * The set of flags to consider in the inspection. To inspect all flags in the valid values list, leave this with no setting.
         */
        masks?: enums.networkfirewall.RuleGroupTcpFlag[];
    }

    export interface TlsInspectionConfigurationAddress {
        /**
         * Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4 and IPv6.
         *
         * Examples:
         *
         * - To configure Network Firewall to inspect for the IP address 192.0.2.44, specify `192.0.2.44/32` .
         * - To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify `192.0.2.0/24` .
         * - To configure Network Firewall to inspect for the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify `1111:0000:0000:0000:0000:0000:0000:0111/128` .
         * - To configure Network Firewall to inspect for IP addresses from 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify `1111:0000:0000:0000:0000:0000:0000:0000/64` .
         *
         * For more information about CIDR notation, see the Wikipedia entry [Classless Inter-Domain Routing](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) .
         */
        addressDefinition: string;
    }

    export interface TlsInspectionConfigurationPortRange {
        /**
         * The lower limit of the port range. This must be less than or equal to the `ToPort` specification.
         */
        fromPort: number;
        /**
         * The upper limit of the port range. This must be greater than or equal to the `FromPort` specification.
         */
        toPort: number;
    }

    export interface TlsInspectionConfigurationServerCertificate {
        /**
         * The Amazon Resource Name (ARN) of the AWS Certificate Manager SSL/TLS server certificate that's used for inbound SSL/TLS inspection.
         */
        resourceArn?: string;
    }

    export interface TlsInspectionConfigurationServerCertificateConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the imported certificate authority (CA) certificate within AWS Certificate Manager (ACM) to use for outbound SSL/TLS inspection.
         *
         * The following limitations apply:
         *
         * - You can use CA certificates that you imported into ACM, but you can't generate CA certificates with ACM.
         * - You can't use certificates issued by AWS Private Certificate Authority .
         *
         * For more information about configuring certificates for outbound inspection, see [Using SSL/TLS certificates with certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html) in the *AWS Network Firewall Developer Guide* .
         *
         * For information about working with certificates in ACM, see [Importing certificates](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the *AWS Certificate Manager User Guide* .
         */
        certificateAuthorityArn?: string;
        /**
         * When enabled, Network Firewall checks if the server certificate presented by the server in the SSL/TLS connection has a revoked or unkown status. If the certificate has an unknown or revoked status, you must specify the actions that Network Firewall takes on outbound traffic. To check the certificate revocation status, you must also specify a `CertificateAuthorityArn` in [ServerCertificateConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-servercertificateconfiguration.html) .
         */
        checkCertificateRevocationStatus?: outputs.networkfirewall.TlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatusProperties;
        /**
         * A list of scopes.
         */
        scopes?: outputs.networkfirewall.TlsInspectionConfigurationServerCertificateScope[];
        /**
         * The list of server certificates to use for inbound SSL/TLS inspection.
         */
        serverCertificates?: outputs.networkfirewall.TlsInspectionConfigurationServerCertificate[];
    }

    /**
     * When enabled, Network Firewall checks if the server certificate presented by the server in the SSL/TLS connection has a revoked or unkown status. If the certificate has an unknown or revoked status, you must specify the actions that Network Firewall takes on outbound traffic. To check the certificate revocation status, you must also specify a `CertificateAuthorityArn` in [ServerCertificateConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-servercertificateconfiguration.html) .
     */
    export interface TlsInspectionConfigurationServerCertificateConfigurationCheckCertificateRevocationStatusProperties {
        revokedStatusAction?: enums.networkfirewall.TlsInspectionConfigurationRevokedStatusAction;
        unknownStatusAction?: enums.networkfirewall.TlsInspectionConfigurationUnknownStatusAction;
    }

    export interface TlsInspectionConfigurationServerCertificateScope {
        /**
         * The destination ports to decrypt for inspection, in Transmission Control Protocol (TCP) format. If not specified, this matches with any destination port.
         *
         * You can specify individual ports, for example `1994` , and you can specify port ranges, such as `1990:1994` .
         */
        destinationPorts?: outputs.networkfirewall.TlsInspectionConfigurationPortRange[];
        /**
         * The destination IP addresses and address ranges to decrypt for inspection, in CIDR notation. If not specified, this
         * matches with any destination address.
         */
        destinations?: outputs.networkfirewall.TlsInspectionConfigurationAddress[];
        /**
         * The protocols to decrypt for inspection, specified using each protocol's assigned internet protocol number
         * (IANA). Network Firewall currently supports only TCP.
         */
        protocols?: number[];
        /**
         * The source ports to decrypt for inspection, in Transmission Control Protocol (TCP) format. If not specified, this matches with any source port.
         *
         * You can specify individual ports, for example `1994` , and you can specify port ranges, such as `1990:1994` .
         */
        sourcePorts?: outputs.networkfirewall.TlsInspectionConfigurationPortRange[];
        /**
         * The source IP addresses and address ranges to decrypt for inspection, in CIDR notation. If not specified, this
         * matches with any source address.
         */
        sources?: outputs.networkfirewall.TlsInspectionConfigurationAddress[];
    }

    export interface TlsInspectionConfigurationTlsInspectionConfiguration {
        /**
         * Lists the server certificate configurations that are associated with the TLS configuration.
         */
        serverCertificateConfigurations?: outputs.networkfirewall.TlsInspectionConfigurationServerCertificateConfiguration[];
    }

}

export namespace networkmanager {
    /**
     * Connect attachment options for protocol
     */
    export interface ConnectAttachmentOptions {
        /**
         * Tunnel protocol for connect attachment
         */
        protocol?: string;
    }

    /**
     * The attachment to move from one segment to another.
     */
    export interface ConnectAttachmentProposedSegmentChange {
        /**
         * The rule number in the policy document that applies to this change.
         */
        attachmentPolicyRuleNumber?: number;
        /**
         * The name of the segment to change.
         */
        segmentName?: string;
        /**
         * The list of key-value tags that changed for the segment.
         */
        tags?: outputs.networkmanager.ConnectAttachmentTag[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface ConnectAttachmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Bgp configuration for connect peer
     */
    export interface ConnectPeerBgpConfiguration {
        /**
         * The address of a core network.
         */
        coreNetworkAddress?: string;
        /**
         * The ASN of the Coret Network.
         */
        coreNetworkAsn?: number;
        /**
         * The address of a core network Connect peer.
         */
        peerAddress?: string;
        /**
         * The ASN of the Connect peer.
         */
        peerAsn?: number;
    }

    /**
     * Bgp options
     */
    export interface ConnectPeerBgpOptions {
        /**
         * The Peer ASN of the BGP.
         */
        peerAsn?: number;
    }

    export interface ConnectPeerConfiguration {
        /**
         * The Connect peer BGP configurations.
         */
        bgpConfigurations?: outputs.networkmanager.ConnectPeerBgpConfiguration[];
        /**
         * The IP address of a core network.
         */
        coreNetworkAddress?: string;
        /**
         * The inside IP addresses used for a Connect peer configuration.
         */
        insideCidrBlocks?: string[];
        /**
         * The IP address of the Connect peer.
         */
        peerAddress?: string;
        /**
         * The protocol used for a Connect peer configuration.
         */
        protocol?: string;
    }

    export interface CoreNetworkEdge {
        /**
         * The ASN of a core network edge.
         */
        asn?: number;
        /**
         * The Region where a core network edge is located.
         */
        edgeLocation?: string;
        /**
         * The inside IP addresses used for core network edges.
         */
        insideCidrBlocks?: string[];
    }

    export interface CoreNetworkSegment {
        /**
         * The Regions where the edges are located.
         */
        edgeLocations?: string[];
        /**
         * Name of segment
         */
        name?: string;
        /**
         * The shared segments of a core network.
         */
        sharedSegments?: string[];
    }

    /**
     * The Amazon Web Services location of the device, if applicable.
     */
    export interface DeviceAwsLocation {
        /**
         * The Amazon Resource Name (ARN) of the subnet that the device is located in.
         */
        subnetArn?: string;
        /**
         * The Zone that the device is located in. Specify the ID of an Availability Zone, Local Zone, Wavelength Zone, or an Outpost.
         */
        zone?: string;
    }

    /**
     * The site location.
     */
    export interface DeviceLocation {
        /**
         * The physical address.
         */
        address?: string;
        /**
         * The latitude.
         */
        latitude?: string;
        /**
         * The longitude.
         */
        longitude?: string;
    }

    /**
     * The bandwidth for the link.
     */
    export interface LinkBandwidth {
        /**
         * Download speed in Mbps.
         */
        downloadSpeed?: number;
        /**
         * Upload speed in Mbps.
         */
        uploadSpeed?: number;
    }

    /**
     * The location of the site
     */
    export interface SiteLocation {
        /**
         * The physical address.
         */
        address?: string;
        /**
         * The latitude.
         */
        latitude?: string;
        /**
         * The longitude.
         */
        longitude?: string;
    }

    /**
     * The attachment to move from one segment to another.
     */
    export interface SiteToSiteVpnAttachmentProposedSegmentChange {
        /**
         * The rule number in the policy document that applies to this change.
         */
        attachmentPolicyRuleNumber?: number;
        /**
         * The name of the segment to change.
         */
        segmentName?: string;
        /**
         * The key-value tags that changed for the segment.
         */
        tags?: outputs.networkmanager.SiteToSiteVpnAttachmentTag[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface SiteToSiteVpnAttachmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The attachment to move from one segment to another.
     */
    export interface TransitGatewayRouteTableAttachmentProposedSegmentChange {
        /**
         * The rule number in the policy document that applies to this change.
         */
        attachmentPolicyRuleNumber?: number;
        /**
         * The name of the segment to change.
         */
        segmentName?: string;
        /**
         * The key-value tags that changed for the segment.
         */
        tags?: outputs.networkmanager.TransitGatewayRouteTableAttachmentTag[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface TransitGatewayRouteTableAttachmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * The attachment to move from one segment to another.
     */
    export interface VpcAttachmentProposedSegmentChange {
        /**
         * The rule number in the policy document that applies to this change.
         */
        attachmentPolicyRuleNumber?: number;
        /**
         * The name of the segment to change.
         */
        segmentName?: string;
        /**
         * The key-value tags that changed for the segment.
         */
        tags?: outputs.networkmanager.VpcAttachmentTag[];
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface VpcAttachmentTag {
        /**
         * The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        key: string;
        /**
         * The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
         */
        value: string;
    }

    /**
     * Vpc options of the attachment.
     */
    export interface VpcAttachmentVpcOptions {
        /**
         * Indicates whether to enable ApplianceModeSupport Support for Vpc Attachment. Valid Values: true | false
         */
        applianceModeSupport?: boolean;
        /**
         * Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable
         */
        ipv6Support?: boolean;
    }

}

export namespace nimblestudio {
    /**
     * <p>A configuration for a streaming session.</p>
     */
    export interface LaunchProfileStreamConfiguration {
        /**
         * Indicates if a streaming session created from this launch profile should be terminated automatically or retained without termination after being in a `STOPPED` state.
         *
         * - When `ACTIVATED` , the streaming session is scheduled for termination after being in the `STOPPED` state for the time specified in `maxStoppedSessionLengthInMinutes` .
         * - When `DEACTIVATED` , the streaming session can remain in the `STOPPED` state indefinitely.
         *
         * This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` . When allowed, the default value for this parameter is `DEACTIVATED` .
         */
        automaticTerminationMode?: enums.nimblestudio.LaunchProfileAutomaticTerminationMode;
        /**
         * Allows or deactivates the use of the system clipboard to copy and paste between the streaming session and streaming client.
         */
        clipboardMode: enums.nimblestudio.LaunchProfileStreamingClipboardMode;
        /**
         * <p>The EC2 instance types that users can select from when launching a streaming session
         *             with this launch profile.</p>
         */
        ec2InstanceTypes: enums.nimblestudio.LaunchProfileStreamingInstanceType[];
        /**
         * <p>The length of time, in minutes, that a streaming session can be active before it is
         *             stopped or terminated. After this point, Nimble Studio automatically terminates or
         *             stops the session. The default length of time is 690 minutes, and the maximum length of
         *             time is 30 days.</p>
         */
        maxSessionLengthInMinutes?: number;
        /**
         * <p>Integer that determines if you can start and stop your sessions and how long a session
         *             can stay in the <code>STOPPED</code> state. The default value is 0. The maximum value is
         *             5760.</p>
         *          <p>This field is allowed only when <code>sessionPersistenceMode</code> is
         *                 <code>ACTIVATED</code> and <code>automaticTerminationMode</code> is
         *                 <code>ACTIVATED</code>.</p>
         *          <p>If the value is set to 0, your sessions can’t be <code>STOPPED</code>. If you then
         *             call <code>StopStreamingSession</code>, the session fails. If the time that a session
         *             stays in the <code>READY</code> state exceeds the <code>maxSessionLengthInMinutes</code>
         *             value, the session will automatically be terminated (instead of
         *             <code>STOPPED</code>).</p>
         *          <p>If the value is set to a positive number, the session can be stopped. You can call
         *                 <code>StopStreamingSession</code> to stop sessions in the <code>READY</code> state.
         *             If the time that a session stays in the <code>READY</code> state exceeds the
         *                 <code>maxSessionLengthInMinutes</code> value, the session will automatically be
         *             stopped (instead of terminated).</p>
         */
        maxStoppedSessionLengthInMinutes?: number;
        /**
         * Information about the streaming session backup.
         */
        sessionBackup?: outputs.nimblestudio.LaunchProfileStreamConfigurationSessionBackup;
        /**
         * Determine if a streaming session created from this launch profile can configure persistent storage. This means that `volumeConfiguration` and `automaticTerminationMode` are configured.
         */
        sessionPersistenceMode?: enums.nimblestudio.LaunchProfileSessionPersistenceMode;
        /**
         * The upload storage for a streaming session.
         */
        sessionStorage?: outputs.nimblestudio.LaunchProfileStreamConfigurationSessionStorage;
        /**
         * <p>The streaming images that users can select from when launching a streaming session
         *             with this launch profile.</p>
         */
        streamingImageIds: string[];
        /**
         * Custom volume configuration for the root volumes that are attached to streaming sessions.
         *
         * This parameter is only allowed when `sessionPersistenceMode` is `ACTIVATED` .
         */
        volumeConfiguration?: outputs.nimblestudio.LaunchProfileVolumeConfiguration;
    }

    /**
     * <p>Configures how streaming sessions are backed up when launched from this launch
     *             profile.</p>
     */
    export interface LaunchProfileStreamConfigurationSessionBackup {
        /**
         * <p>The maximum number of backups that each streaming session created from this launch
         *             profile can have.</p>
         */
        maxBackupsToRetain?: number;
        /**
         * Specifies how artists sessions are backed up.
         *
         * Configures backups for streaming sessions launched with this launch profile. The default value is `DEACTIVATED` , which means that backups are deactivated. To allow backups, set this value to `AUTOMATIC` .
         */
        mode?: enums.nimblestudio.LaunchProfileSessionBackupMode;
    }

    /**
     * <p>The configuration for a streaming session’s upload storage.</p>
     */
    export interface LaunchProfileStreamConfigurationSessionStorage {
        /**
         * <p>Allows artists to upload files to their workstations. The only valid option is
         *                 <code>UPLOAD</code>.</p>
         */
        mode: enums.nimblestudio.LaunchProfileStreamingSessionStorageMode[];
        /**
         * The configuration for the upload storage root of the streaming session.
         */
        root?: outputs.nimblestudio.LaunchProfileStreamingSessionStorageRoot;
    }

    /**
     * <p>The upload storage root location (folder) on streaming workstations where files are
     *             uploaded.</p>
     */
    export interface LaunchProfileStreamingSessionStorageRoot {
        /**
         * <p>The folder path in Linux workstations where files are uploaded.</p>
         */
        linux?: string;
        /**
         * <p>The folder path in Windows workstations where files are uploaded.</p>
         */
        windows?: string;
    }

    /**
     * <p>Custom volume configuration for the root volumes that are attached to streaming
     *             sessions.</p>
     *          <p>This parameter is only allowed when <code>sessionPersistenceMode</code> is
     *                 <code>ACTIVATED</code>.</p>
     */
    export interface LaunchProfileVolumeConfiguration {
        /**
         * <p>The number of I/O operations per second for the root volume that is attached to
         *             streaming session.</p>
         */
        iops?: number;
        /**
         * <p>The size of the root volume that is attached to the streaming session. The root volume
         *             size is measured in GiBs.</p>
         */
        size?: number;
        /**
         * <p>The throughput to provision for the root volume that is attached to the streaming
         *             session. The throughput is measured in MiB/s.</p>
         */
        throughput?: number;
    }

    /**
     * <p>TODO</p>
     */
    export interface StreamingImageEncryptionConfiguration {
        /**
         * <p>The ARN for a KMS key that is used to encrypt studio data.</p>
         */
        keyArn?: string;
        /**
         * The type of KMS key that is used to encrypt studio data.
         */
        keyType: enums.nimblestudio.StreamingImageEncryptionConfigurationKeyType;
    }

    /**
     * <p>An LDAP attribute of an Active Directory computer account, in the form of a name:value
     *             pair.</p>
     */
    export interface StudioComponentActiveDirectoryComputerAttribute {
        /**
         * <p>The name for the LDAP attribute.</p>
         */
        name?: string;
        /**
         * <p>The value for the LDAP attribute.</p>
         */
        value?: string;
    }

    /**
     * <p>The configuration for a Microsoft Active Directory (Microsoft AD) studio
     *             resource.</p>
     */
    export interface StudioComponentActiveDirectoryConfiguration {
        /**
         * <p>A collection of custom attributes for an Active Directory computer.</p>
         */
        computerAttributes?: outputs.nimblestudio.StudioComponentActiveDirectoryComputerAttribute[];
        /**
         * <p>The directory ID of the Directory Service for Microsoft Active Directory to access
         *             using this studio component.</p>
         */
        directoryId?: string;
        /**
         * <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory
         *             computer.</p>
         */
        organizationalUnitDistinguishedName?: string;
    }

    /**
     * <p>The configuration for a render farm that is associated with a studio resource.</p>
     */
    export interface StudioComponentComputeFarmConfiguration {
        /**
         * <p>The name of an Active Directory user that is used on ComputeFarm worker
         *             instances.</p>
         */
        activeDirectoryUser?: string;
        /**
         * <p>The endpoint of the ComputeFarm that is accessed by the studio component
         *             resource.</p>
         */
        endpoint?: string;
    }

    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    export interface StudioComponentConfiguration0Properties {
        activeDirectoryConfiguration: outputs.nimblestudio.StudioComponentActiveDirectoryConfiguration;
    }

    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    export interface StudioComponentConfiguration1Properties {
        computeFarmConfiguration: outputs.nimblestudio.StudioComponentComputeFarmConfiguration;
    }

    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    export interface StudioComponentConfiguration2Properties {
        licenseServiceConfiguration: outputs.nimblestudio.StudioComponentLicenseServiceConfiguration;
    }

    /**
     * <p>The configuration of the studio component, based on component type.</p>
     */
    export interface StudioComponentConfiguration3Properties {
        sharedFileSystemConfiguration: outputs.nimblestudio.StudioComponentSharedFileSystemConfiguration;
    }

    /**
     * <p>Initialization scripts for studio components.</p>
     */
    export interface StudioComponentInitializationScript {
        /**
         * <p>The version number of the protocol that is used by the launch profile. The only valid
         *             version is "2021-03-31".</p>
         */
        launchProfileProtocolVersion?: string;
        /**
         * The platform of the initialization script, either Windows or Linux.
         */
        platform?: enums.nimblestudio.StudioComponentLaunchProfilePlatform;
        /**
         * The method to use when running the initialization script.
         */
        runContext?: enums.nimblestudio.StudioComponentInitializationScriptRunContext;
        /**
         * <p>The initialization script.</p>
         */
        script?: string;
    }

    /**
     * <p>The configuration for a license service that is associated with a studio
     *             resource.</p>
     */
    export interface StudioComponentLicenseServiceConfiguration {
        /**
         * <p>The endpoint of the license service that is accessed by the studio component
         *             resource.</p>
         */
        endpoint?: string;
    }

    /**
     * <p>A parameter for a studio component script, in the form of a key:value pair.</p>
     */
    export interface StudioComponentScriptParameterKeyValue {
        /**
         * <p>A script parameter key.</p>
         */
        key?: string;
        /**
         * <p>A script parameter value.</p>
         */
        value?: string;
    }

    /**
     * <p>The configuration for a shared file storage system that is associated with a studio
     *             resource.</p>
     */
    export interface StudioComponentSharedFileSystemConfiguration {
        /**
         * <p>The endpoint of the shared file system that is accessed by the studio component
         *             resource.</p>
         */
        endpoint?: string;
        /**
         * <p>The unique identifier for a file system.</p>
         */
        fileSystemId?: string;
        /**
         * <p>The mount location for a shared file system on a Linux virtual workstation.</p>
         */
        linuxMountPoint?: string;
        /**
         * <p>The name of the file share.</p>
         */
        shareName?: string;
        /**
         * <p>The mount location for a shared file system on a Windows virtual workstation.</p>
         */
        windowsMountDrive?: string;
    }

    /**
     * <p>Configuration of the encryption method that is used for the studio.</p>
     */
    export interface StudioEncryptionConfiguration {
        /**
         * <p>The ARN for a KMS key that is used to encrypt studio data.</p>
         */
        keyArn?: string;
        /**
         * The type of KMS key that is used to encrypt studio data.
         */
        keyType: enums.nimblestudio.StudioEncryptionConfigurationKeyType;
    }

}

export namespace oam {
    export interface LinkConfiguration {
        /**
         * Use this structure to filter which log groups are to share log events from this source account to the monitoring account.
         */
        logGroupConfiguration?: outputs.oam.LinkFilter;
        /**
         * Use this structure to filter which metric namespaces are to be shared from the source account to the monitoring account.
         */
        metricConfiguration?: outputs.oam.LinkFilter;
    }

    export interface LinkFilter {
        /**
         * When used in `MetricConfiguration` this field specifies which metric namespaces are to be shared with the monitoring account
         *
         * When used in `LogGroupConfiguration` this field specifies which log groups are to share their log events with the monitoring account. Use the term `LogGroupName` and one or more of the following operands.
         *
         * Use single quotation marks (') around log group names and metric namespaces.
         *
         * The matching of log group names and metric namespaces is case sensitive. Each filter has a limit of five conditional operands. Conditional operands are `AND` and `OR` .
         *
         * - `=` and `!=`
         * - `AND`
         * - `OR`
         * - `LIKE` and `NOT LIKE` . These can be used only as prefix searches. Include a `%` at the end of the string that you want to search for and include.
         * - `IN` and `NOT IN` , using parentheses `( )`
         *
         * Examples:
         *
         * - `Namespace NOT LIKE 'AWS/%'` includes only namespaces that don't start with `AWS/` , such as custom namespaces.
         * - `Namespace IN ('AWS/EC2', 'AWS/ELB', 'AWS/S3')` includes only the metrics in the EC2, Elastic Load Balancing , and Amazon S3 namespaces.
         * - `Namespace = 'AWS/EC2' OR Namespace NOT LIKE 'AWS/%'` includes only the EC2 namespace and your custom namespaces.
         * - `LogGroupName IN ('This-Log-Group', 'Other-Log-Group')` includes only the log groups with names `This-Log-Group` and `Other-Log-Group` .
         * - `LogGroupName NOT IN ('Private-Log-Group', 'Private-Log-Group-2')` includes all log groups except the log groups with names `Private-Log-Group` and `Private-Log-Group-2` .
         * - `LogGroupName LIKE 'aws/lambda/%' OR LogGroupName LIKE 'AWSLogs%'` includes all log groups that have names that start with `aws/lambda/` or `AWSLogs` .
         *
         * > If you are updating a link that uses filters, you can specify `*` as the only value for the `filter` parameter to delete the filter and share all log groups with the monitoring account.
         */
        filter: string;
    }

}

export namespace omics {
    export interface AnnotationStoreReferenceItem {
        /**
         * The reference's ARN.
         */
        referenceArn: string;
    }

    export interface AnnotationStoreSseConfig {
        /**
         * An encryption key ARN.
         */
        keyArn?: string;
        /**
         * The encryption type.
         */
        type: enums.omics.AnnotationStoreEncryptionType;
    }

    export interface AnnotationStoreStoreOptionsProperties {
        tsvStoreOptions: outputs.omics.AnnotationStoreTsvStoreOptions;
    }

    export interface AnnotationStoreTsvStoreOptions {
        annotationType?: enums.omics.AnnotationStoreAnnotationType;
        formatToHeader?: {[key: string]: string};
        schema?: {[key: string]: enums.omics.AnnotationStoreSchemaValueType}[];
    }

    /**
     * Server-side encryption (SSE) settings for a store.
     */
    export interface ReferenceStoreSseConfig {
        /**
         * An encryption key ARN.
         */
        keyArn?: string;
        /**
         * The encryption type.
         */
        type: enums.omics.ReferenceStoreEncryptionType;
    }

    /**
     * Server-side encryption (SSE) settings for a store.
     */
    export interface SequenceStoreSseConfig {
        /**
         * An encryption key ARN.
         */
        keyArn?: string;
        /**
         * The encryption type.
         */
        type: enums.omics.SequenceStoreEncryptionType;
    }

    export interface VariantStoreReferenceItem {
        /**
         * The reference's ARN.
         */
        referenceArn: string;
    }

    export interface VariantStoreSseConfig {
        /**
         * An encryption key ARN.
         */
        keyArn?: string;
        /**
         * The encryption type.
         */
        type: enums.omics.VariantStoreEncryptionType;
    }

    export interface WorkflowParameter {
        /**
         * The parameter's description.
         */
        description?: string;
        /**
         * Whether the parameter is optional.
         */
        optional?: boolean;
    }

}

export namespace opensearchserverless {
    /**
     * Describes saml options in form of key value map
     */
    export interface SecurityConfigSamlConfigOptions {
        /**
         * Group attribute for this saml integration
         */
        groupAttribute?: string;
        /**
         * The XML saml provider metadata document that you want to use
         */
        metadata: string;
        /**
         * Defines the session timeout in minutes
         */
        sessionTimeout?: number;
        /**
         * Custom attribute for this saml integration
         */
        userAttribute?: string;
    }

}

export namespace opensearchservice {
    export interface DomainAdvancedSecurityOptionsInput {
        /**
         * Date and time when the migration period will be disabled. Only necessary when [enabling fine-grained access control on an existing domain](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html#fgac-enabling-existing) .
         */
        anonymousAuthDisableDate?: string;
        /**
         * True to enable a 30-day migration period during which administrators can create role mappings. Only necessary when [enabling fine-grained access control on an existing domain](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html#fgac-enabling-existing) .
         */
        anonymousAuthEnabled?: boolean;
        /**
         * True to enable fine-grained access control. You must also enable encryption of data at rest and node-to-node encryption. See [Fine-grained access control in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html) .
         */
        enabled?: boolean;
        /**
         * True to enable the internal user database.
         */
        internalUserDatabaseEnabled?: boolean;
        /**
         * Specifies information about the master user.
         */
        masterUserOptions?: outputs.opensearchservice.DomainMasterUserOptions;
        /**
         * Container for information about the SAML configuration for OpenSearch Dashboards.
         */
        samlOptions?: outputs.opensearchservice.DomainSamlOptions;
    }

    export interface DomainClusterConfig {
        /**
         * Container for cold storage configuration options.
         */
        coldStorageOptions?: outputs.opensearchservice.DomainColdStorageOptions;
        /**
         * The number of instances to use for the master node. If you specify this property, you must specify `true` for the `DedicatedMasterEnabled` property.
         */
        dedicatedMasterCount?: number;
        /**
         * Indicates whether to use a dedicated master node for the OpenSearch Service domain. A dedicated master node is a cluster node that performs cluster management tasks, but doesn't hold data or respond to data upload requests. Dedicated master nodes offload cluster management tasks to increase the stability of your search clusters. See [Dedicated master nodes in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-dedicatedmasternodes.html) .
         */
        dedicatedMasterEnabled?: boolean;
        /**
         * The hardware configuration of the computer that hosts the dedicated master node, such as `m3.medium.search` . If you specify this property, you must specify `true` for the `DedicatedMasterEnabled` property. For valid values, see [Supported instance types in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html) .
         */
        dedicatedMasterType?: string;
        /**
         * The number of data nodes (instances) to use in the OpenSearch Service domain.
         */
        instanceCount?: number;
        /**
         * The instance type for your data nodes, such as `m3.medium.search` . For valid values, see [Supported instance types in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html) .
         */
        instanceType?: string;
        /**
         * Indicates whether Multi-AZ with Standby deployment option is enabled. For more information, see [Multi-AZ with Standby](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html#managedomains-za-standby) .
         */
        multiAzWithStandbyEnabled?: boolean;
        /**
         * The number of warm nodes in the cluster.
         */
        warmCount?: number;
        /**
         * Whether to enable UltraWarm storage for the cluster. See [UltraWarm storage for Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ultrawarm.html) .
         */
        warmEnabled?: boolean;
        /**
         * The instance type for the cluster's warm nodes.
         */
        warmType?: string;
        /**
         * Specifies zone awareness configuration options. Only use if `ZoneAwarenessEnabled` is `true` .
         */
        zoneAwarenessConfig?: outputs.opensearchservice.DomainZoneAwarenessConfig;
        /**
         * Indicates whether to enable zone awareness for the OpenSearch Service domain. When you enable zone awareness, OpenSearch Service allocates the nodes and replica index shards that belong to a cluster across two Availability Zones (AZs) in the same region to prevent data loss and minimize downtime in the event of node or data center failure. Don't enable zone awareness if your cluster has no replica index shards or is a single-node cluster. For more information, see [Configuring a multi-AZ domain in Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-multiaz.html) .
         */
        zoneAwarenessEnabled?: boolean;
    }

    export interface DomainCognitoOptions {
        /**
         * Whether to enable or disable Amazon Cognito authentication for OpenSearch Dashboards. See [Amazon Cognito authentication for OpenSearch Dashboards](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html) .
         */
        enabled?: boolean;
        /**
         * The Amazon Cognito identity pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.
         *
         * Required if you enabled Cognito Authentication for OpenSearch Dashboards.
         */
        identityPoolId?: string;
        /**
         * The `AmazonOpenSearchServiceCognitoAccess` role that allows OpenSearch Service to configure your user pool and identity pool.
         *
         * Required if you enabled Cognito Authentication for OpenSearch Dashboards.
         */
        roleArn?: string;
        /**
         * The Amazon Cognito user pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.
         *
         * Required if you enabled Cognito Authentication for OpenSearch Dashboards.
         */
        userPoolId?: string;
    }

    export interface DomainColdStorageOptions {
        /**
         * Whether to enable or disable cold storage on the domain. You must enable UltraWarm storage to enable cold storage.
         */
        enabled?: boolean;
    }

    export interface DomainEbsOptions {
        /**
         * Specifies whether Amazon EBS volumes are attached to data nodes in the OpenSearch Service domain.
         */
        ebsEnabled?: boolean;
        /**
         * The number of I/O operations per second (IOPS) that the volume supports. This property applies only to the `gp3` and provisioned IOPS EBS volume types.
         */
        iops?: number;
        /**
         * The throughput (in MiB/s) of the EBS volumes attached to data nodes. Applies only to the `gp3` volume type.
         */
        throughput?: number;
        /**
         * The size (in GiB) of the EBS volume for each data node. The minimum and maximum size of an EBS volume depends on the EBS volume type and the instance type to which it is attached. For more information, see [EBS volume size limits](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/limits.html#ebsresource) in the *Amazon OpenSearch Service Developer Guide* .
         */
        volumeSize?: number;
        /**
         * The EBS volume type to use with the OpenSearch Service domain. If you choose `gp3` , you must also specify values for `Iops` and `Throughput` . For more information about each type, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the *Amazon EC2 User Guide for Linux Instances* .
         */
        volumeType?: string;
    }

    export interface DomainEncryptionAtRestOptions {
        /**
         * Specify `true` to enable encryption at rest. Required if you enable fine-grained access control in [AdvancedSecurityOptionsInput](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-opensearchservice-domain-advancedsecurityoptionsinput.html) .
         *
         * If no encryption at rest options were initially specified in the template, updating this property by adding it causes no interruption. However, if you change this property after it's already been set within a template, the domain is deleted and recreated in order to modify the property.
         */
        enabled?: boolean;
        /**
         * The KMS key ID. Takes the form `1a2a3a4-1a2a-3a4a-5a6a-1a2a3a4a5a6a` . Required if you enable encryption at rest.
         *
         * You can also use `keyAlias` as a value.
         *
         * If no encryption at rest options were initially specified in the template, updating this property by adding it causes no interruption. However, if you change this property after it's already been set within a template, the domain is deleted and recreated in order to modify the property.
         */
        kmsKeyId?: string;
    }

    export interface DomainEndpointOptions {
        /**
         * The fully qualified URL for your custom endpoint. Required if you enabled a custom endpoint for the domain.
         */
        customEndpoint?: string;
        /**
         * The AWS Certificate Manager ARN for your domain's SSL/TLS certificate. Required if you enabled a custom endpoint for the domain.
         */
        customEndpointCertificateArn?: string;
        /**
         * True to enable a custom endpoint for the domain. If enabled, you must also provide values for `CustomEndpoint` and `CustomEndpointCertificateArn` .
         */
        customEndpointEnabled?: boolean;
        /**
         * True to require that all traffic to the domain arrive over HTTPS. Required if you enable fine-grained access control in [AdvancedSecurityOptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-opensearchservice-domain-advancedsecurityoptionsinput.html) .
         */
        enforceHttps?: boolean;
        /**
         * The minimum TLS version required for traffic to the domain. Valid values are TLS 1.3 (recommended) or 1.2:
         *
         * - `Policy-Min-TLS-1-0-2019-07`
         * - `Policy-Min-TLS-1-2-2019-07`
         */
        tlsSecurityPolicy?: string;
    }

    export interface DomainIdp {
        /**
         * The unique entity ID of the application in the SAML identity provider.
         */
        entityId: string;
        /**
         * The metadata of the SAML application, in XML format.
         */
        metadataContent: string;
    }

    export interface DomainLogPublishingOption {
        cloudWatchLogsLogGroupArn?: string;
        enabled?: boolean;
    }

    export interface DomainMasterUserOptions {
        /**
         * Amazon Resource Name (ARN) for the master user. The ARN can point to an IAM user or role. This property is required for Amazon Cognito to work, and it must match the role configured for Cognito. Only specify if `InternalUserDatabaseEnabled` is false in [AdvancedSecurityOptionsInput](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-opensearchservice-domain-advancedsecurityoptionsinput.html) .
         */
        masterUserArn?: string;
        /**
         * Username for the master user. Only specify if `InternalUserDatabaseEnabled` is true in [AdvancedSecurityOptionsInput](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-opensearchservice-domain-advancedsecurityoptionsinput.html) .
         *
         * If you don't want to specify this value directly within the template, you can use a [dynamic reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html) instead.
         */
        masterUserName?: string;
        /**
         * Password for the master user. Only specify if `InternalUserDatabaseEnabled` is true in [AdvancedSecurityOptionsInput](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-opensearchservice-domain-advancedsecurityoptionsinput.html) .
         *
         * If you don't want to specify this value directly within the template, you can use a [dynamic reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html) instead.
         */
        masterUserPassword?: string;
    }

    export interface DomainNodeToNodeEncryptionOptions {
        /**
         * Specifies to enable or disable node-to-node encryption on the domain. Required if you enable fine-grained access control in [AdvancedSecurityOptionsInput](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-opensearchservice-domain-advancedsecurityoptionsinput.html) .
         */
        enabled?: boolean;
    }

    export interface DomainOffPeakWindow {
        /**
         * The desired start time for an off-peak maintenance window.
         */
        windowStartTime?: outputs.opensearchservice.DomainWindowStartTime;
    }

    export interface DomainOffPeakWindowOptions {
        /**
         * Specifies whether off-peak window settings are enabled for the domain.
         */
        enabled?: boolean;
        /**
         * Off-peak window settings for the domain.
         */
        offPeakWindow?: outputs.opensearchservice.DomainOffPeakWindow;
    }

    export interface DomainSamlOptions {
        /**
         * True to enable SAML authentication for a domain.
         */
        enabled?: boolean;
        /**
         * The SAML Identity Provider's information.
         */
        idp?: outputs.opensearchservice.DomainIdp;
        /**
         * The backend role that the SAML master user is mapped to.
         */
        masterBackendRole?: string;
        /**
         * The SAML master user name, which is stored in the domain's internal user database.
         */
        masterUserName?: string;
        /**
         * Element of the SAML assertion to use for backend roles. Default is `roles` .
         */
        rolesKey?: string;
        /**
         * The duration, in minutes, after which a user session becomes inactive. Acceptable values are between 1 and 1440, and the default value is 60.
         */
        sessionTimeoutMinutes?: number;
        /**
         * Element of the SAML assertion to use for the user name. Default is `NameID` .
         */
        subjectKey?: string;
    }

    export interface DomainServiceSoftwareOptions {
        /**
         * The timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.
         */
        automatedUpdateDate?: string;
        /**
         * True if you're able to cancel your service software version update. False if you can't cancel your service software update.
         */
        cancellable?: boolean;
        /**
         * The current service software version present on the domain.
         */
        currentVersion?: string;
        /**
         * A description of the service software update status.
         */
        description?: string;
        /**
         * The new service software version, if one is available.
         */
        newVersion?: string;
        /**
         * True if a service software is never automatically updated. False if a service software is automatically updated after the automated update date.
         */
        optionalDeployment?: boolean;
        /**
         * True if you're able to update your service software version. False if you can't update your service software version.
         */
        updateAvailable?: boolean;
        /**
         * The status of your service software update.
         */
        updateStatus?: string;
    }

    export interface DomainSnapshotOptions {
        /**
         * The hour in UTC during which the service takes an automated daily snapshot of the indexes in the OpenSearch Service domain. For example, if you specify 0, OpenSearch Service takes an automated snapshot everyday between midnight and 1 am. You can specify a value between 0 and 23.
         */
        automatedSnapshotStartHour?: number;
    }

    export interface DomainSoftwareUpdateOptions {
        /**
         * Specifies whether automatic service software updates are enabled for the domain.
         */
        autoSoftwareUpdateEnabled?: boolean;
    }

    export interface DomainVpcOptions {
        /**
         * The list of security group IDs that are associated with the VPC endpoints for the domain. If you don't provide a security group ID, OpenSearch Service uses the default security group for the VPC. To learn more, see [Security groups for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html) in the *Amazon VPC User Guide* .
         */
        securityGroupIds?: string[];
        /**
         * Provide one subnet ID for each Availability Zone that your domain uses. For example, you must specify three subnet IDs for a three-AZ domain. To learn more, see [VPCs and subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) in the *Amazon VPC User Guide* .
         *
         * If you specify more than one subnet, you must also configure `ZoneAwarenessEnabled` and `ZoneAwarenessConfig` within [ClusterConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-opensearchservice-domain-clusterconfig.html) , otherwise you'll see the error "You must specify exactly one subnet" during template creation.
         */
        subnetIds?: string[];
    }

    export interface DomainWindowStartTime {
        /**
         * The start hour of the window in Coordinated Universal Time (UTC), using 24-hour time. For example, 17 refers to 5:00 P.M. UTC. The minimum value is 0 and the maximum value is 23.
         */
        hours: number;
        /**
         * The start minute of the window, in UTC. The minimum value is 0 and the maximum value is 59.
         */
        minutes: number;
    }

    export interface DomainZoneAwarenessConfig {
        /**
         * If you enabled multiple Availability Zones (AZs), the number of AZs that you want the domain to use.
         *
         * Valid values are `2` and `3` . Default is 2.
         */
        availabilityZoneCount?: number;
    }

}

export namespace opsworkscm {
    export interface ServerEngineAttribute {
        /**
         * The name of the engine attribute.
         *
         * *Attribute name for Chef Automate servers:*
         *
         * - `CHEF_AUTOMATE_ADMIN_PASSWORD`
         *
         * *Attribute names for Puppet Enterprise servers:*
         *
         * - `PUPPET_ADMIN_PASSWORD`
         * - `PUPPET_R10K_REMOTE`
         * - `PUPPET_R10K_PRIVATE_KEY`
         */
        name?: string;
        /**
         * The value of the engine attribute.
         *
         * *Attribute value for Chef Automate servers:*
         *
         * - `CHEF_AUTOMATE_PIVOTAL_KEY` : A base64-encoded RSA public key. The corresponding private key is required to access the Chef API. You can generate this key by running the following [OpenSSL](https://docs.aws.amazon.com/https://www.openssl.org/) command on Linux-based computers.
         *
         * `openssl genrsa -out *pivotal_key_file_name* .pem 2048`
         *
         * On Windows-based computers, you can use the PuTTYgen utility to generate a base64-encoded RSA private key. For more information, see [PuTTYgen - Key Generator for PuTTY on Windows](https://docs.aws.amazon.com/https://www.ssh.com/ssh/putty/windows/puttygen) on SSH.com.
         *
         * *Attribute values for Puppet Enterprise servers:*
         *
         * - `PUPPET_ADMIN_PASSWORD` : An administrator password that you can use to sign in to the Puppet Enterprise console webpage after the server is online. The password must use between 8 and 32 ASCII characters.
         * - `PUPPET_R10K_REMOTE` : The r10k remote is the URL of your control repository (for example, ssh://git@your.git-repo.com:user/control-repo.git). Specifying an r10k remote opens TCP port 8170.
         * - `PUPPET_R10K_PRIVATE_KEY` : If you are using a private Git repository, add `PUPPET_R10K_PRIVATE_KEY` to specify a PEM-encoded private SSH key.
         */
        value?: string;
    }

}

export namespace organizations {
}

export namespace osis {
    /**
     * Key-value pairs to configure buffering.
     */
    export interface PipelineBufferOptions {
        /**
         * Whether persistent buffering should be enabled.
         */
        persistentBufferEnabled: boolean;
    }

    /**
     * Key-value pairs to configure encryption at rest.
     */
    export interface PipelineEncryptionAtRestOptions {
        /**
         * The KMS key to use for encrypting data. By default an AWS owned key is used
         */
        kmsKeyArn: string;
    }

    /**
     * Key-value pairs to configure log publishing.
     */
    export interface PipelineLogPublishingOptions {
        /**
         * The destination for OpenSearch Ingestion Service logs sent to Amazon CloudWatch.
         */
        cloudWatchLogDestination?: outputs.osis.PipelineLogPublishingOptionsCloudWatchLogDestinationProperties;
        /**
         * Whether logs should be published.
         */
        isLoggingEnabled?: boolean;
    }

    /**
     * The destination for OpenSearch Ingestion Service logs sent to Amazon CloudWatch.
     */
    export interface PipelineLogPublishingOptionsCloudWatchLogDestinationProperties {
        logGroup: string;
    }

    /**
     * An OpenSearch Ingestion Service-managed VPC endpoint that will access one or more pipelines.
     */
    export interface PipelineVpcEndpoint {
        /**
         * The unique identifier of the endpoint.
         */
        vpcEndpointId?: string;
        /**
         * The ID for your VPC. AWS Privatelink generates this value when you create a VPC.
         */
        vpcId?: string;
        /**
         * Information about the VPC, including associated subnets and security groups.
         */
        vpcOptions?: outputs.osis.PipelineVpcOptions;
    }

    /**
     * Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion Service creates the pipeline with a public endpoint.
     */
    export interface PipelineVpcOptions {
        /**
         * A list of security groups associated with the VPC endpoint.
         */
        securityGroupIds?: string[];
        /**
         * A list of subnet IDs associated with the VPC endpoint.
         */
        subnetIds: string[];
    }

}

export namespace panorama {
    export interface ApplicationInstanceManifestOverridesPayload {
        /**
         * The overrides document.
         */
        payloadData?: string;
    }

    export interface ApplicationInstanceManifestPayload {
        /**
         * The application manifest.
         */
        payloadData?: string;
    }

    export interface PackageStorageLocation {
        /**
         * The location's binary prefix.
         */
        binaryPrefixLocation?: string;
        /**
         * The location's bucket.
         */
        bucket?: string;
        /**
         * The location's generated prefix.
         */
        generatedPrefixLocation?: string;
        /**
         * The location's manifest prefix.
         */
        manifestPrefixLocation?: string;
        /**
         * The location's repo prefix.
         */
        repoPrefixLocation?: string;
    }

}

export namespace paymentcryptography {
    export interface KeyAttributes {
        /**
         * The key algorithm to be use during creation of an AWS Payment Cryptography key.
         *
         * For symmetric keys, AWS Payment Cryptography supports `AES` and `TDES` algorithms. For asymmetric keys, AWS Payment Cryptography supports `RSA` and `ECC_NIST` algorithms.
         */
        keyAlgorithm: enums.paymentcryptography.KeyAlgorithm;
        /**
         * The type of AWS Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether AWS Payment Cryptography key contains a symmetric key or an asymmetric key pair.
         */
        keyClass: enums.paymentcryptography.KeyClass;
        /**
         * The list of cryptographic operations that you can perform using the key.
         */
        keyModesOfUse: outputs.paymentcryptography.KeyModesOfUse;
        /**
         * The cryptographic usage of an AWS Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec.
         */
        keyUsage: enums.paymentcryptography.KeyUsage;
    }

    export interface KeyModesOfUse {
        /**
         * Speciﬁes whether an AWS Payment Cryptography key can be used to decrypt data.
         */
        decrypt?: boolean;
        /**
         * Speciﬁes whether an AWS Payment Cryptography key can be used to derive new keys.
         */
        deriveKey?: boolean;
        /**
         * Speciﬁes whether an AWS Payment Cryptography key can be used to encrypt data.
         */
        encrypt?: boolean;
        /**
         * Speciﬁes whether an AWS Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
         */
        generate?: boolean;
        /**
         * Speciﬁes whether an AWS Payment Cryptography key has no special restrictions other than the restrictions implied by `KeyUsage` .
         */
        noRestrictions?: boolean;
        /**
         * Speciﬁes whether an AWS Payment Cryptography key can be used for signing.
         */
        sign?: boolean;
        unwrap?: boolean;
        /**
         * Speciﬁes whether an AWS Payment Cryptography key can be used to verify signatures.
         */
        verify?: boolean;
        /**
         * Speciﬁes whether an AWS Payment Cryptography key can be used to wrap other keys.
         */
        wrap?: boolean;
    }

}

export namespace pcaconnectorad {
    export interface ConnectorVpcInformation {
        /**
         * The security groups used with the connector. You can use a maximum of 4 security groups with a connector.
         */
        securityGroupIds: string[];
    }

    export interface TemplateApplicationPolicies {
        critical?: boolean;
        policies: (outputs.pcaconnectorad.TemplateApplicationPolicy0Properties | outputs.pcaconnectorad.TemplateApplicationPolicy1Properties)[];
    }

    export interface TemplateApplicationPolicy0Properties {
        policyType: enums.pcaconnectorad.TemplateApplicationPolicyType;
    }

    export interface TemplateApplicationPolicy1Properties {
        policyObjectIdentifier: string;
    }

    export interface TemplateCertificateValidity {
        renewalPeriod: outputs.pcaconnectorad.TemplateValidityPeriod;
        validityPeriod: outputs.pcaconnectorad.TemplateValidityPeriod;
    }

    export interface TemplateDefinition0Properties {
        templateV2: outputs.pcaconnectorad.TemplateV2;
    }

    export interface TemplateDefinition1Properties {
        templateV3: outputs.pcaconnectorad.TemplateV3;
    }

    export interface TemplateDefinition2Properties {
        templateV4: outputs.pcaconnectorad.TemplateV4;
    }

    export interface TemplateEnrollmentFlagsV2 {
        enableKeyReuseOnNtTokenKeysetStorageFull?: boolean;
        includeSymmetricAlgorithms?: boolean;
        noSecurityExtension?: boolean;
        removeInvalidCertificateFromPersonalStore?: boolean;
        userInteractionRequired?: boolean;
    }

    export interface TemplateEnrollmentFlagsV3 {
        enableKeyReuseOnNtTokenKeysetStorageFull?: boolean;
        includeSymmetricAlgorithms?: boolean;
        noSecurityExtension?: boolean;
        removeInvalidCertificateFromPersonalStore?: boolean;
        userInteractionRequired?: boolean;
    }

    export interface TemplateEnrollmentFlagsV4 {
        enableKeyReuseOnNtTokenKeysetStorageFull?: boolean;
        includeSymmetricAlgorithms?: boolean;
        noSecurityExtension?: boolean;
        removeInvalidCertificateFromPersonalStore?: boolean;
        userInteractionRequired?: boolean;
    }

    export interface TemplateExtensionsV2 {
        applicationPolicies?: outputs.pcaconnectorad.TemplateApplicationPolicies;
        keyUsage: outputs.pcaconnectorad.TemplateKeyUsage;
    }

    export interface TemplateExtensionsV3 {
        applicationPolicies?: outputs.pcaconnectorad.TemplateApplicationPolicies;
        keyUsage: outputs.pcaconnectorad.TemplateKeyUsage;
    }

    export interface TemplateExtensionsV4 {
        applicationPolicies?: outputs.pcaconnectorad.TemplateApplicationPolicies;
        keyUsage: outputs.pcaconnectorad.TemplateKeyUsage;
    }

    export interface TemplateGeneralFlagsV2 {
        autoEnrollment?: boolean;
        machineType?: boolean;
    }

    export interface TemplateGeneralFlagsV3 {
        autoEnrollment?: boolean;
        machineType?: boolean;
    }

    export interface TemplateGeneralFlagsV4 {
        autoEnrollment?: boolean;
        machineType?: boolean;
    }

    export interface TemplateGroupAccessControlEntryAccessRights {
        /**
         * Allow or deny an Active Directory group from autoenrolling certificates issued against a template. The Active Directory group must be allowed to enroll to allow autoenrollment
         */
        autoEnroll?: enums.pcaconnectorad.TemplateGroupAccessControlEntryAccessRight;
        /**
         * Allow or deny an Active Directory group from enrolling certificates issued against a template.
         */
        enroll?: enums.pcaconnectorad.TemplateGroupAccessControlEntryAccessRight;
    }

    export interface TemplateKeyUsage {
        critical?: boolean;
        usageFlags: outputs.pcaconnectorad.TemplateKeyUsageFlags;
    }

    export interface TemplateKeyUsageFlags {
        dataEncipherment?: boolean;
        digitalSignature?: boolean;
        keyAgreement?: boolean;
        keyEncipherment?: boolean;
        nonRepudiation?: boolean;
    }

    export interface TemplateKeyUsageProperty0Properties {
        propertyType: enums.pcaconnectorad.TemplateKeyUsagePropertyType;
    }

    export interface TemplateKeyUsageProperty1Properties {
        propertyFlags: outputs.pcaconnectorad.TemplateKeyUsagePropertyFlags;
    }

    export interface TemplateKeyUsagePropertyFlags {
        decrypt?: boolean;
        keyAgreement?: boolean;
        sign?: boolean;
    }

    export interface TemplatePrivateKeyAttributesV2 {
        cryptoProviders?: string[];
        keySpec: enums.pcaconnectorad.TemplateKeySpec;
        minimalKeyLength: number;
    }

    export interface TemplatePrivateKeyAttributesV3 {
        algorithm: enums.pcaconnectorad.TemplatePrivateKeyAlgorithm;
        cryptoProviders?: string[];
        keySpec: enums.pcaconnectorad.TemplateKeySpec;
        keyUsageProperty: outputs.pcaconnectorad.TemplateKeyUsageProperty0Properties | outputs.pcaconnectorad.TemplateKeyUsageProperty1Properties;
        minimalKeyLength: number;
    }

    export interface TemplatePrivateKeyAttributesV4 {
        algorithm?: enums.pcaconnectorad.TemplatePrivateKeyAlgorithm;
        cryptoProviders?: string[];
        keySpec: enums.pcaconnectorad.TemplateKeySpec;
        keyUsageProperty?: outputs.pcaconnectorad.TemplateKeyUsageProperty0Properties | outputs.pcaconnectorad.TemplateKeyUsageProperty1Properties;
        minimalKeyLength: number;
    }

    export interface TemplatePrivateKeyFlagsV2 {
        clientVersion: enums.pcaconnectorad.TemplateClientCompatibilityV2;
        exportableKey?: boolean;
        strongKeyProtectionRequired?: boolean;
    }

    export interface TemplatePrivateKeyFlagsV3 {
        clientVersion: enums.pcaconnectorad.TemplateClientCompatibilityV3;
        exportableKey?: boolean;
        requireAlternateSignatureAlgorithm?: boolean;
        strongKeyProtectionRequired?: boolean;
    }

    export interface TemplatePrivateKeyFlagsV4 {
        clientVersion: enums.pcaconnectorad.TemplateClientCompatibilityV4;
        exportableKey?: boolean;
        requireAlternateSignatureAlgorithm?: boolean;
        requireSameKeyRenewal?: boolean;
        strongKeyProtectionRequired?: boolean;
        useLegacyProvider?: boolean;
    }

    export interface TemplateSubjectNameFlagsV2 {
        requireCommonName?: boolean;
        requireDirectoryPath?: boolean;
        requireDnsAsCn?: boolean;
        requireEmail?: boolean;
        sanRequireDirectoryGuid?: boolean;
        sanRequireDns?: boolean;
        sanRequireDomainDns?: boolean;
        sanRequireEmail?: boolean;
        sanRequireSpn?: boolean;
        sanRequireUpn?: boolean;
    }

    export interface TemplateSubjectNameFlagsV3 {
        requireCommonName?: boolean;
        requireDirectoryPath?: boolean;
        requireDnsAsCn?: boolean;
        requireEmail?: boolean;
        sanRequireDirectoryGuid?: boolean;
        sanRequireDns?: boolean;
        sanRequireDomainDns?: boolean;
        sanRequireEmail?: boolean;
        sanRequireSpn?: boolean;
        sanRequireUpn?: boolean;
    }

    export interface TemplateSubjectNameFlagsV4 {
        requireCommonName?: boolean;
        requireDirectoryPath?: boolean;
        requireDnsAsCn?: boolean;
        requireEmail?: boolean;
        sanRequireDirectoryGuid?: boolean;
        sanRequireDns?: boolean;
        sanRequireDomainDns?: boolean;
        sanRequireEmail?: boolean;
        sanRequireSpn?: boolean;
        sanRequireUpn?: boolean;
    }

    export interface TemplateV2 {
        certificateValidity: outputs.pcaconnectorad.TemplateCertificateValidity;
        enrollmentFlags: outputs.pcaconnectorad.TemplateEnrollmentFlagsV2;
        extensions: outputs.pcaconnectorad.TemplateExtensionsV2;
        generalFlags: outputs.pcaconnectorad.TemplateGeneralFlagsV2;
        privateKeyAttributes: outputs.pcaconnectorad.TemplatePrivateKeyAttributesV2;
        privateKeyFlags: outputs.pcaconnectorad.TemplatePrivateKeyFlagsV2;
        subjectNameFlags: outputs.pcaconnectorad.TemplateSubjectNameFlagsV2;
        supersededTemplates?: string[];
    }

    export interface TemplateV3 {
        certificateValidity: outputs.pcaconnectorad.TemplateCertificateValidity;
        enrollmentFlags: outputs.pcaconnectorad.TemplateEnrollmentFlagsV3;
        extensions: outputs.pcaconnectorad.TemplateExtensionsV3;
        generalFlags: outputs.pcaconnectorad.TemplateGeneralFlagsV3;
        hashAlgorithm: enums.pcaconnectorad.TemplateHashAlgorithm;
        privateKeyAttributes: outputs.pcaconnectorad.TemplatePrivateKeyAttributesV3;
        privateKeyFlags: outputs.pcaconnectorad.TemplatePrivateKeyFlagsV3;
        subjectNameFlags: outputs.pcaconnectorad.TemplateSubjectNameFlagsV3;
        supersededTemplates?: string[];
    }

    export interface TemplateV4 {
        certificateValidity: outputs.pcaconnectorad.TemplateCertificateValidity;
        enrollmentFlags: outputs.pcaconnectorad.TemplateEnrollmentFlagsV4;
        extensions: outputs.pcaconnectorad.TemplateExtensionsV4;
        generalFlags: outputs.pcaconnectorad.TemplateGeneralFlagsV4;
        hashAlgorithm?: enums.pcaconnectorad.TemplateHashAlgorithm;
        privateKeyAttributes: outputs.pcaconnectorad.TemplatePrivateKeyAttributesV4;
        privateKeyFlags: outputs.pcaconnectorad.TemplatePrivateKeyFlagsV4;
        subjectNameFlags: outputs.pcaconnectorad.TemplateSubjectNameFlagsV4;
        supersededTemplates?: string[];
    }

    export interface TemplateValidityPeriod {
        period: number;
        periodType: enums.pcaconnectorad.TemplateValidityPeriodType;
    }

}

export namespace personalize {
    /**
     * Initial DatasetImportJob for the created dataset
     */
    export interface DatasetImportJob {
        /**
         * The Amazon S3 bucket that contains the training data to import.
         */
        dataSource?: outputs.personalize.DatasetImportJobDataSourceProperties;
        /**
         * The ARN of the dataset that receives the imported data
         */
        datasetArn?: string;
        /**
         * The ARN of the dataset import job
         */
        datasetImportJobArn?: string;
        /**
         * The name for the dataset import job.
         */
        jobName?: string;
        /**
         * The ARN of the IAM role that has permissions to read from the Amazon S3 data source.
         */
        roleArn?: string;
    }

    /**
     * The Amazon S3 bucket that contains the training data to import.
     */
    export interface DatasetImportJobDataSourceProperties {
        /**
         * The path to the Amazon S3 bucket where the data that you want to upload to your dataset is stored.
         */
        dataLocation?: string;
    }

    /**
     * Provides the name and values of a Categorical hyperparameter.
     */
    export interface SolutionCategoricalHyperParameterRange {
        /**
         * The name of the hyperparameter.
         */
        name?: string;
        /**
         * A list of the categories for the hyperparameter.
         */
        values?: string[];
    }

    /**
     * The configuration to use with the solution. When performAutoML is set to true, Amazon Personalize only evaluates the autoMLConfig section of the solution configuration.
     */
    export interface SolutionConfig {
        /**
         * Lists the hyperparameter names and ranges.
         */
        algorithmHyperParameters?: {[key: string]: string};
        /**
         * The AutoMLConfig object containing a list of recipes to search when AutoML is performed.
         */
        autoMlConfig?: outputs.personalize.SolutionConfigAutoMlConfigProperties;
        /**
         * Only events with a value greater than or equal to this threshold are used for training a model.
         */
        eventValueThreshold?: string;
        /**
         * Lists the feature transformation parameters.
         */
        featureTransformationParameters?: {[key: string]: string};
        /**
         * Describes the properties for hyperparameter optimization (HPO)
         */
        hpoConfig?: outputs.personalize.SolutionConfigHpoConfigProperties;
    }

    /**
     * The AutoMLConfig object containing a list of recipes to search when AutoML is performed.
     */
    export interface SolutionConfigAutoMlConfigProperties {
        /**
         * The metric to optimize.
         */
        metricName?: string;
        /**
         * The list of candidate recipes.
         */
        recipeList?: string[];
    }

    /**
     * Describes the properties for hyperparameter optimization (HPO)
     */
    export interface SolutionConfigHpoConfigProperties {
        /**
         * The hyperparameters and their allowable ranges
         */
        algorithmHyperParameterRanges?: outputs.personalize.SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesProperties;
        /**
         * The metric to optimize during HPO.
         */
        hpoObjective?: outputs.personalize.SolutionConfigHpoConfigPropertiesHpoObjectiveProperties;
        /**
         * Describes the resource configuration for hyperparameter optimization (HPO).
         */
        hpoResourceConfig?: outputs.personalize.SolutionConfigHpoConfigPropertiesHpoResourceConfigProperties;
    }

    /**
     * The hyperparameters and their allowable ranges
     */
    export interface SolutionConfigHpoConfigPropertiesAlgorithmHyperParameterRangesProperties {
        /**
         * The categorical hyperparameters and their ranges.
         */
        categoricalHyperParameterRanges?: outputs.personalize.SolutionCategoricalHyperParameterRange[];
        /**
         * The continuous hyperparameters and their ranges.
         */
        continuousHyperParameterRanges?: outputs.personalize.SolutionContinuousHyperParameterRange[];
        /**
         * The integer hyperparameters and their ranges.
         */
        integerHyperParameterRanges?: outputs.personalize.SolutionIntegerHyperParameterRange[];
    }

    /**
     * The metric to optimize during HPO.
     */
    export interface SolutionConfigHpoConfigPropertiesHpoObjectiveProperties {
        /**
         * The name of the metric
         */
        metricName?: string;
        /**
         * A regular expression for finding the metric in the training job logs.
         */
        metricRegex?: string;
        /**
         * The type of the metric. Valid values are Maximize and Minimize.
         */
        type?: enums.personalize.SolutionConfigHpoConfigPropertiesHpoObjectivePropertiesType;
    }

    /**
     * Describes the resource configuration for hyperparameter optimization (HPO).
     */
    export interface SolutionConfigHpoConfigPropertiesHpoResourceConfigProperties {
        /**
         * The maximum number of training jobs when you create a solution version. The maximum value for maxNumberOfTrainingJobs is 40.
         */
        maxNumberOfTrainingJobs?: string;
        /**
         * The maximum number of parallel training jobs when you create a solution version. The maximum value for maxParallelTrainingJobs is 10.
         */
        maxParallelTrainingJobs?: string;
    }

    /**
     * Provides the name and range of a continuous hyperparameter.
     */
    export interface SolutionContinuousHyperParameterRange {
        /**
         * The maximum allowable value for the hyperparameter.
         */
        maxValue?: number;
        /**
         * The minimum allowable value for the hyperparameter.
         */
        minValue?: number;
        /**
         * The name of the hyperparameter.
         */
        name?: string;
    }

    /**
     * Provides the name and range of an integer-valued hyperparameter.
     */
    export interface SolutionIntegerHyperParameterRange {
        /**
         * The maximum allowable value for the hyperparameter.
         */
        maxValue?: number;
        /**
         * The minimum allowable value for the hyperparameter.
         */
        minValue?: number;
        /**
         * The name of the hyperparameter.
         */
        name?: string;
    }

}

export namespace pinpoint {
    export interface InAppTemplateBodyConfig {
        /**
         * The text alignment of the main body text of the message. Acceptable values: `LEFT` , `CENTER` , `RIGHT` .
         */
        alignment?: enums.pinpoint.InAppTemplateAlignment;
        /**
         * The main body text of the message.
         */
        body?: string;
        /**
         * The color of the body text, expressed as a hex color code (such as #000000 for black).
         */
        textColor?: string;
    }

    export interface InAppTemplateButtonConfig {
        /**
         * Optional button configuration to use for in-app messages sent to Android devices. This button configuration overrides the default button configuration.
         */
        android?: outputs.pinpoint.InAppTemplateOverrideButtonConfiguration;
        /**
         * Specifies the default behavior of a button that appears in an in-app message. You can optionally add button configurations that specifically apply to iOS, Android, or web browser users.
         */
        defaultConfig?: outputs.pinpoint.InAppTemplateDefaultButtonConfiguration;
        /**
         * Optional button configuration to use for in-app messages sent to iOS devices. This button configuration overrides the default button configuration.
         */
        ios?: outputs.pinpoint.InAppTemplateOverrideButtonConfiguration;
        /**
         * Optional button configuration to use for in-app messages sent to web applications. This button configuration overrides the default button configuration.
         */
        web?: outputs.pinpoint.InAppTemplateOverrideButtonConfiguration;
    }

    export interface InAppTemplateDefaultButtonConfiguration {
        /**
         * The background color of a button, expressed as a hex color code (such as #000000 for black).
         */
        backgroundColor?: string;
        /**
         * The border radius of a button.
         */
        borderRadius?: number;
        /**
         * The action that occurs when a recipient chooses a button in an in-app message. You can specify one of the following:
         *
         * - `LINK` – A link to a web destination.
         * - `DEEP_LINK` – A link to a specific page in an application.
         * - `CLOSE` – Dismisses the message.
         */
        buttonAction?: enums.pinpoint.InAppTemplateButtonAction;
        /**
         * The destination (such as a URL) for a button.
         */
        link?: string;
        /**
         * The text that appears on a button in an in-app message.
         */
        text?: string;
        /**
         * The color of the body text in a button, expressed as a hex color code (such as #000000 for black).
         */
        textColor?: string;
    }

    export interface InAppTemplateHeaderConfig {
        /**
         * The text alignment of the title of the message. Acceptable values: `LEFT` , `CENTER` , `RIGHT` .
         */
        alignment?: enums.pinpoint.InAppTemplateAlignment;
        /**
         * The title text of the in-app message.
         */
        header?: string;
        /**
         * The color of the title text, expressed as a hex color code (such as #000000 for black).
         */
        textColor?: string;
    }

    export interface InAppTemplateInAppMessageContent {
        /**
         * The background color for an in-app message banner, expressed as a hex color code (such as #000000 for black).
         */
        backgroundColor?: string;
        /**
         * An object that contains configuration information about the header or title text of the in-app message.
         */
        bodyConfig?: outputs.pinpoint.InAppTemplateBodyConfig;
        /**
         * An object that contains configuration information about the header or title text of the in-app message.
         */
        headerConfig?: outputs.pinpoint.InAppTemplateHeaderConfig;
        /**
         * The URL of the image that appears on an in-app message banner.
         */
        imageUrl?: string;
        /**
         * An object that contains configuration information about the primary button in an in-app message.
         */
        primaryBtn?: outputs.pinpoint.InAppTemplateButtonConfig;
        /**
         * An object that contains configuration information about the secondary button in an in-app message.
         */
        secondaryBtn?: outputs.pinpoint.InAppTemplateButtonConfig;
    }

    export interface InAppTemplateOverrideButtonConfiguration {
        /**
         * The action that occurs when a recipient chooses a button in an in-app message. You can specify one of the following:
         *
         * - `LINK` – A link to a web destination.
         * - `DEEP_LINK` – A link to a specific page in an application.
         * - `CLOSE` – Dismisses the message.
         */
        buttonAction?: enums.pinpoint.InAppTemplateButtonAction;
        /**
         * The destination (such as a URL) for a button.
         */
        link?: string;
    }

}

export namespace pipes {
    export interface PipeAwsVpcConfiguration {
        /**
         * Specifies whether the task's elastic network interface receives a public IP address. You can specify `ENABLED` only when `LaunchType` in `EcsParameters` is set to `FARGATE` .
         */
        assignPublicIp?: enums.pipes.PipeAssignPublicIp;
        /**
         * Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
         */
        securityGroups?: string[];
        /**
         * Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
         */
        subnets: string[];
    }

    export interface PipeBatchArrayProperties {
        /**
         * The size of the array, if this is an array batch job.
         */
        size?: number;
    }

    export interface PipeBatchContainerOverrides {
        /**
         * The command to send to the container that overrides the default command from the Docker image or the task definition.
         */
        command?: string[];
        /**
         * The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition.
         *
         * > Environment variables cannot start with " `AWS Batch` ". This naming convention is reserved for variables that AWS Batch sets.
         */
        environment?: outputs.pipes.PipeBatchEnvironmentVariable[];
        /**
         * The instance type to use for a multi-node parallel job.
         *
         * > This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.
         */
        instanceType?: string;
        /**
         * The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
         */
        resourceRequirements?: outputs.pipes.PipeBatchResourceRequirement[];
    }

    export interface PipeBatchEnvironmentVariable {
        /**
         * The name of the key-value pair. For environment variables, this is the name of the environment variable.
         */
        name?: string;
        /**
         * The value of the key-value pair. For environment variables, this is the value of the environment variable.
         */
        value?: string;
    }

    export interface PipeBatchJobDependency {
        /**
         * The job ID of the AWS Batch job that's associated with this dependency.
         */
        jobId?: string;
        /**
         * The type of the job dependency.
         */
        type?: enums.pipes.PipeBatchJobDependencyType;
    }

    export interface PipeBatchResourceRequirement {
        /**
         * The type of resource to assign to a container. The supported resources include `GPU` , `MEMORY` , and `VCPU` .
         */
        type: enums.pipes.PipeBatchResourceRequirementType;
        /**
         * The quantity of the specified resource to reserve for the container. The values vary based on the `type` specified.
         *
         * - **type="GPU"** - The number of physical GPUs to reserve for the container. Make sure that the number of GPUs reserved for all containers in a job doesn't exceed the number of available GPUs on the compute resource that the job is launched on.
         *
         * > GPUs aren't available for jobs that are running on Fargate resources.
         * - **type="MEMORY"** - The memory hard limit (in MiB) present to the container. This parameter is supported for jobs that are running on EC2 resources. If your container attempts to exceed the memory specified, the container is terminated. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . You must specify at least 4 MiB of memory for a job. This is required but can be specified in several places for multi-node parallel (MNP) jobs. It must be specified for each node at least once. This parameter maps to `Memory` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--memory` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) .
         *
         * > If you're trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see [Memory management](https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html) in the *AWS Batch User Guide* . 
         *
         * For jobs that are running on Fargate resources, then `value` is the hard limit (in MiB), and must match one of the supported values and the `VCPU` values must be one of the values supported for that memory value.
         *
         * - **value = 512** - `VCPU` = 0.25
         * - **value = 1024** - `VCPU` = 0.25 or 0.5
         * - **value = 2048** - `VCPU` = 0.25, 0.5, or 1
         * - **value = 3072** - `VCPU` = 0.5, or 1
         * - **value = 4096** - `VCPU` = 0.5, 1, or 2
         * - **value = 5120, 6144, or 7168** - `VCPU` = 1 or 2
         * - **value = 8192** - `VCPU` = 1, 2, 4, or 8
         * - **value = 9216, 10240, 11264, 12288, 13312, 14336, or 15360** - `VCPU` = 2 or 4
         * - **value = 16384** - `VCPU` = 2, 4, or 8
         * - **value = 17408, 18432, 19456, 21504, 22528, 23552, 25600, 26624, 27648, 29696, or 30720** - `VCPU` = 4
         * - **value = 20480, 24576, or 28672** - `VCPU` = 4 or 8
         * - **value = 36864, 45056, 53248, or 61440** - `VCPU` = 8
         * - **value = 32768, 40960, 49152, or 57344** - `VCPU` = 8 or 16
         * - **value = 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880** - `VCPU` = 16
         * - **type="VCPU"** - The number of vCPUs reserved for the container. This parameter maps to `CpuShares` in the [Create a container](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/#create-a-container) section of the [Docker Remote API](https://docs.aws.amazon.com/https://docs.docker.com/engine/api/v1.23/) and the `--cpu-shares` option to [docker run](https://docs.aws.amazon.com/https://docs.docker.com/engine/reference/run/) . Each vCPU is equivalent to 1,024 CPU shares. For EC2 resources, you must specify at least one vCPU. This is required but can be specified in several places; it must be specified for each node at least once.
         *
         * The default for the Fargate On-Demand vCPU resource count quota is 6 vCPUs. For more information about Fargate quotas, see [AWS Fargate quotas](https://docs.aws.amazon.com/general/latest/gr/ecs-service.html#service-quotas-fargate) in the *AWS General Reference* .
         *
         * For jobs that are running on Fargate resources, then `value` must match one of the supported values and the `MEMORY` values must be one of the values supported for that `VCPU` value. The supported values are 0.25, 0.5, 1, 2, 4, 8, and 16
         *
         * - **value = 0.25** - `MEMORY` = 512, 1024, or 2048
         * - **value = 0.5** - `MEMORY` = 1024, 2048, 3072, or 4096
         * - **value = 1** - `MEMORY` = 2048, 3072, 4096, 5120, 6144, 7168, or 8192
         * - **value = 2** - `MEMORY` = 4096, 5120, 6144, 7168, 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, or 16384
         * - **value = 4** - `MEMORY` = 8192, 9216, 10240, 11264, 12288, 13312, 14336, 15360, 16384, 17408, 18432, 19456, 20480, 21504, 22528, 23552, 24576, 25600, 26624, 27648, 28672, 29696, or 30720
         * - **value = 8** - `MEMORY` = 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, or 61440
         * - **value = 16** - `MEMORY` = 32768, 40960, 49152, 57344, 65536, 73728, 81920, 90112, 98304, 106496, 114688, or 122880
         */
        value: string;
    }

    export interface PipeBatchRetryStrategy {
        /**
         * The number of times to move a job to the `RUNNABLE` status. If the value of `attempts` is greater than one, the job is retried on failure the same number of attempts as the value.
         */
        attempts?: number;
    }

    export interface PipeCapacityProviderStrategyItem {
        /**
         * The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
         */
        base?: number;
        /**
         * The short name of the capacity provider.
         */
        capacityProvider: string;
        /**
         * The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
         */
        weight?: number;
    }

    export interface PipeCloudwatchLogsLogDestination {
        /**
         * The AWS Resource Name (ARN) for the CloudWatch log group to which EventBridge sends the log records.
         */
        logGroupArn?: string;
    }

    export interface PipeDeadLetterConfig {
        /**
         * The ARN of the specified target for the dead-letter queue.
         *
         * For Amazon Kinesis stream and Amazon DynamoDB stream sources, specify either an Amazon SNS topic or Amazon SQS queue ARN.
         */
        arn?: string;
    }

    export interface PipeEcsContainerOverride {
        /**
         * The command to send to the container that overrides the default command from the Docker image or the task definition. You must also specify a container name.
         */
        command?: string[];
        /**
         * The number of `cpu` units reserved for the container, instead of the default value from the task definition. You must also specify a container name.
         */
        cpu?: number;
        /**
         * The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. You must also specify a container name.
         */
        environment?: outputs.pipes.PipeEcsEnvironmentVariable[];
        /**
         * A list of files containing the environment variables to pass to a container, instead of the value from the container definition.
         */
        environmentFiles?: outputs.pipes.PipeEcsEnvironmentFile[];
        /**
         * The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed. You must also specify a container name.
         */
        memory?: number;
        /**
         * The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition. You must also specify a container name.
         */
        memoryReservation?: number;
        /**
         * The name of the container that receives the override. This parameter is required if any override is specified.
         */
        name?: string;
        /**
         * The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU.
         */
        resourceRequirements?: outputs.pipes.PipeEcsResourceRequirement[];
    }

    export interface PipeEcsEnvironmentFile {
        /**
         * The file type to use. The only supported value is `s3` .
         */
        type: enums.pipes.PipeEcsEnvironmentFileType;
        /**
         * The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.
         */
        value: string;
    }

    export interface PipeEcsEnvironmentVariable {
        /**
         * The name of the key-value pair. For environment variables, this is the name of the environment variable.
         */
        name?: string;
        /**
         * The value of the key-value pair. For environment variables, this is the value of the environment variable.
         */
        value?: string;
    }

    export interface PipeEcsEphemeralStorage {
        /**
         * The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.
         */
        sizeInGiB: number;
    }

    export interface PipeEcsInferenceAcceleratorOverride {
        /**
         * The Elastic Inference accelerator device name to override for the task. This parameter must match a `deviceName` specified in the task definition.
         */
        deviceName?: string;
        /**
         * The Elastic Inference accelerator type to use.
         */
        deviceType?: string;
    }

    export interface PipeEcsResourceRequirement {
        /**
         * The type of resource to assign to a container. The supported values are `GPU` or `InferenceAccelerator` .
         */
        type: enums.pipes.PipeEcsResourceRequirementType;
        /**
         * The value for the specified resource type.
         *
         * If the `GPU` type is used, the value is the number of physical `GPUs` the Amazon ECS container agent reserves for the container. The number of GPUs that's reserved for all containers in a task can't exceed the number of available GPUs on the container instance that the task is launched on.
         *
         * If the `InferenceAccelerator` type is used, the `value` matches the `deviceName` for an InferenceAccelerator specified in a task definition.
         */
        value: string;
    }

    export interface PipeEcsTaskOverride {
        /**
         * One or more container overrides that are sent to a task.
         */
        containerOverrides?: outputs.pipes.PipeEcsContainerOverride[];
        /**
         * The cpu override for the task.
         */
        cpu?: string;
        /**
         * The ephemeral storage setting override for the task.
         *
         * > This parameter is only supported for tasks hosted on Fargate that use the following platform versions:
         * > 
         * > - Linux platform version `1.4.0` or later.
         * > - Windows platform version `1.0.0` or later.
         */
        ephemeralStorage?: outputs.pipes.PipeEcsEphemeralStorage;
        /**
         * The Amazon Resource Name (ARN) of the task execution IAM role override for the task. For more information, see [Amazon ECS task execution IAM role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        executionRoleArn?: string;
        /**
         * The Elastic Inference accelerator override for the task.
         */
        inferenceAcceleratorOverrides?: outputs.pipes.PipeEcsInferenceAcceleratorOverride[];
        /**
         * The memory override for the task.
         */
        memory?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role. For more information, see [IAM Role for Tasks](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        taskRoleArn?: string;
    }

    export interface PipeEnrichmentHttpParameters {
        /**
         * The headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
         */
        headerParameters?: {[key: string]: string};
        /**
         * The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
         */
        pathParameterValues?: string[];
        /**
         * The query string keys/values that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
         */
        queryStringParameters?: {[key: string]: string};
    }

    export interface PipeEnrichmentParameters {
        /**
         * Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination.
         *
         * If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence.
         */
        httpParameters?: outputs.pipes.PipeEnrichmentHttpParameters;
        /**
         * Valid JSON text passed to the enrichment. In this case, nothing from the event itself is passed to the enrichment. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](https://docs.aws.amazon.com/http://www.rfc-editor.org/rfc/rfc7159.txt) .
         *
         * To remove an input template, specify an empty string.
         */
        inputTemplate?: string;
    }

    export interface PipeFilter {
        /**
         * The event pattern.
         */
        pattern?: string;
    }

    export interface PipeFilterCriteria {
        /**
         * The event patterns.
         */
        filters?: outputs.pipes.PipeFilter[];
    }

    export interface PipeFirehoseLogDestination {
        /**
         * The Amazon Resource Name (ARN) of the Firehose delivery stream to which EventBridge delivers the pipe log records.
         */
        deliveryStreamArn?: string;
    }

    export interface PipeLogConfiguration {
        /**
         * The logging configuration settings for the pipe.
         */
        cloudwatchLogsLogDestination?: outputs.pipes.PipeCloudwatchLogsLogDestination;
        /**
         * The Amazon Data Firehose logging configuration settings for the pipe.
         */
        firehoseLogDestination?: outputs.pipes.PipeFirehoseLogDestination;
        /**
         * Whether the execution data (specifically, the `payload` , `awsRequest` , and `awsResponse` fields) is included in the log messages for this pipe.
         *
         * This applies to all log destinations for the pipe.
         *
         * For more information, see [Including execution data in logs](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-logs.html#eb-pipes-logs-execution-data) in the *Amazon EventBridge User Guide* .
         *
         * *Allowed values:* `ALL`
         */
        includeExecutionData?: enums.pipes.PipeIncludeExecutionDataOption[];
        /**
         * The level of logging detail to include. This applies to all log destinations for the pipe.
         */
        level?: enums.pipes.PipeLogLevel;
        /**
         * The Amazon S3 logging configuration settings for the pipe.
         */
        s3LogDestination?: outputs.pipes.PipeS3LogDestination;
    }

    export interface PipeMqBrokerAccessCredentialsProperties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        basicAuth: string;
    }

    export interface PipeMskAccessCredentials0Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        saslScram512Auth: string;
    }

    export interface PipeMskAccessCredentials1Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        clientCertificateTlsAuth: string;
    }

    export interface PipeNetworkConfiguration {
        /**
         * Use this structure to specify the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the `awsvpc` network mode.
         */
        awsvpcConfiguration?: outputs.pipes.PipeAwsVpcConfiguration;
    }

    export interface PipePlacementConstraint {
        /**
         * A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is `distinctInstance` . To learn more, see [Cluster Query Language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon Elastic Container Service Developer Guide.
         */
        expression?: string;
        /**
         * The type of constraint. Use distinctInstance to ensure that each task in a particular group is running on a different container instance. Use memberOf to restrict the selection to a group of valid candidates.
         */
        type?: enums.pipes.PipePlacementConstraintType;
    }

    export interface PipePlacementStrategy {
        /**
         * The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
         */
        field?: string;
        /**
         * The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
         */
        type?: enums.pipes.PipePlacementStrategyType;
    }

    export interface PipeS3LogDestination {
        /**
         * The name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
         */
        bucketName?: string;
        /**
         * The AWS account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.
         */
        bucketOwner?: string;
        /**
         * The format EventBridge uses for the log records.
         *
         * - `json` : JSON
         * - `plain` : Plain text
         * - `w3c` : [W3C extended logging file format](https://docs.aws.amazon.com/https://www.w3.org/TR/WD-logfile)
         */
        outputFormat?: enums.pipes.PipeS3OutputFormat;
        /**
         * The prefix text with which to begin Amazon S3 log object names.
         *
         * For more information, see [Organizing objects using prefixes](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html) in the *Amazon Simple Storage Service User Guide* .
         */
        prefix?: string;
    }

    export interface PipeSageMakerPipelineParameter {
        /**
         * Name of parameter to start execution of a SageMaker Model Building Pipeline.
         */
        name: string;
        /**
         * Value of parameter to start execution of a SageMaker Model Building Pipeline.
         */
        value: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationCredentials0Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        basicAuth: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationCredentials1Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        saslScram512Auth: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationCredentials2Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        saslScram256Auth: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationCredentials3Properties {
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        clientCertificateTlsAuth: string;
    }

    export interface PipeSelfManagedKafkaAccessConfigurationVpc {
        /**
         * List of SecurityGroupId.
         */
        securityGroup?: string[];
        /**
         * List of SubnetId.
         */
        subnets?: string[];
    }

    export interface PipeSourceActiveMqBrokerParameters {
        /**
         * The maximum number of records to include in each batch.
         */
        batchSize?: number;
        /**
         * The credentials needed to access the resource.
         */
        credentials: outputs.pipes.PipeMqBrokerAccessCredentialsProperties;
        /**
         * The maximum length of a time to wait for events.
         */
        maximumBatchingWindowInSeconds?: number;
        /**
         * The name of the destination queue to consume.
         */
        queueName: string;
    }

    export interface PipeSourceDynamoDbStreamParameters {
        /**
         * The maximum number of records to include in each batch.
         */
        batchSize?: number;
        /**
         * Define the target queue to send dead-letter queue events to.
         */
        deadLetterConfig?: outputs.pipes.PipeDeadLetterConfig;
        /**
         * The maximum length of a time to wait for events.
         */
        maximumBatchingWindowInSeconds?: number;
        /**
         * (Streams only) Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records.
         */
        maximumRecordAgeInSeconds?: number;
        /**
         * (Streams only) Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source.
         */
        maximumRetryAttempts?: number;
        /**
         * (Streams only) Define how to handle item process failures. `AUTOMATIC_BISECT` halves each batch and retry each half until all the records are processed or there is one failed message left in the batch.
         */
        onPartialBatchItemFailure?: enums.pipes.PipeOnPartialBatchItemFailureStreams;
        /**
         * (Streams only) The number of batches to process concurrently from each shard. The default value is 1.
         */
        parallelizationFactor?: number;
        /**
         * (Streams only) The position in a stream from which to start reading.
         *
         * *Valid values* : `TRIM_HORIZON | LATEST`
         */
        startingPosition: enums.pipes.PipeDynamoDbStreamStartPosition;
    }

    export interface PipeSourceKinesisStreamParameters {
        /**
         * The maximum number of records to include in each batch.
         */
        batchSize?: number;
        /**
         * Define the target queue to send dead-letter queue events to.
         */
        deadLetterConfig?: outputs.pipes.PipeDeadLetterConfig;
        /**
         * The maximum length of a time to wait for events.
         */
        maximumBatchingWindowInSeconds?: number;
        /**
         * (Streams only) Discard records older than the specified age. The default value is -1, which sets the maximum age to infinite. When the value is set to infinite, EventBridge never discards old records.
         */
        maximumRecordAgeInSeconds?: number;
        /**
         * (Streams only) Discard records after the specified number of retries. The default value is -1, which sets the maximum number of retries to infinite. When MaximumRetryAttempts is infinite, EventBridge retries failed records until the record expires in the event source.
         */
        maximumRetryAttempts?: number;
        /**
         * (Streams only) Define how to handle item process failures. `AUTOMATIC_BISECT` halves each batch and retry each half until all the records are processed or there is one failed message left in the batch.
         */
        onPartialBatchItemFailure?: enums.pipes.PipeOnPartialBatchItemFailureStreams;
        /**
         * (Streams only) The number of batches to process concurrently from each shard. The default value is 1.
         */
        parallelizationFactor?: number;
        /**
         * (Streams only) The position in a stream from which to start reading.
         */
        startingPosition: enums.pipes.PipeKinesisStreamStartPosition;
        /**
         * With `StartingPosition` set to `AT_TIMESTAMP` , the time from which to start reading, in Unix time seconds.
         */
        startingPositionTimestamp?: string;
    }

    export interface PipeSourceManagedStreamingKafkaParameters {
        /**
         * The maximum number of records to include in each batch.
         */
        batchSize?: number;
        /**
         * The name of the destination queue to consume.
         */
        consumerGroupId?: string;
        /**
         * The credentials needed to access the resource.
         */
        credentials?: outputs.pipes.PipeMskAccessCredentials0Properties | outputs.pipes.PipeMskAccessCredentials1Properties;
        /**
         * The maximum length of a time to wait for events.
         */
        maximumBatchingWindowInSeconds?: number;
        /**
         * (Streams only) The position in a stream from which to start reading.
         */
        startingPosition?: enums.pipes.PipeMskStartPosition;
        /**
         * The name of the topic that the pipe will read from.
         */
        topicName: string;
    }

    export interface PipeSourceParameters {
        /**
         * The parameters for using an Active MQ broker as a source.
         */
        activeMqBrokerParameters?: outputs.pipes.PipeSourceActiveMqBrokerParameters;
        /**
         * The parameters for using a DynamoDB stream as a source.
         */
        dynamoDbStreamParameters?: outputs.pipes.PipeSourceDynamoDbStreamParameters;
        /**
         * The collection of event patterns used to filter events.
         *
         * To remove a filter, specify a `FilterCriteria` object with an empty array of `Filter` objects.
         *
         * For more information, see [Events and Event Patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html) in the *Amazon EventBridge User Guide* .
         */
        filterCriteria?: outputs.pipes.PipeFilterCriteria;
        /**
         * The parameters for using a Kinesis stream as a source.
         */
        kinesisStreamParameters?: outputs.pipes.PipeSourceKinesisStreamParameters;
        /**
         * The parameters for using an MSK stream as a source.
         */
        managedStreamingKafkaParameters?: outputs.pipes.PipeSourceManagedStreamingKafkaParameters;
        /**
         * The parameters for using a Rabbit MQ broker as a source.
         */
        rabbitMqBrokerParameters?: outputs.pipes.PipeSourceRabbitMqBrokerParameters;
        /**
         * The parameters for using a self-managed Apache Kafka stream as a source.
         *
         * A *self managed* cluster refers to any Apache Kafka cluster not hosted by AWS . This includes both clusters you manage yourself, as well as those hosted by a third-party provider, such as [Confluent Cloud](https://docs.aws.amazon.com/https://www.confluent.io/) , [CloudKarafka](https://docs.aws.amazon.com/https://www.cloudkarafka.com/) , or [Redpanda](https://docs.aws.amazon.com/https://redpanda.com/) . For more information, see [Apache Kafka streams as a source](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-kafka.html) in the *Amazon EventBridge User Guide* .
         */
        selfManagedKafkaParameters?: outputs.pipes.PipeSourceSelfManagedKafkaParameters;
        /**
         * The parameters for using a Amazon SQS stream as a source.
         */
        sqsQueueParameters?: outputs.pipes.PipeSourceSqsQueueParameters;
    }

    export interface PipeSourceRabbitMqBrokerParameters {
        /**
         * The maximum number of records to include in each batch.
         */
        batchSize?: number;
        /**
         * The credentials needed to access the resource.
         */
        credentials: outputs.pipes.PipeMqBrokerAccessCredentialsProperties;
        /**
         * The maximum length of a time to wait for events.
         */
        maximumBatchingWindowInSeconds?: number;
        /**
         * The name of the destination queue to consume.
         */
        queueName: string;
        /**
         * The name of the virtual host associated with the source broker.
         */
        virtualHost?: string;
    }

    export interface PipeSourceSelfManagedKafkaParameters {
        /**
         * An array of server URLs.
         */
        additionalBootstrapServers?: string[];
        /**
         * The maximum number of records to include in each batch.
         */
        batchSize?: number;
        /**
         * The name of the destination queue to consume.
         */
        consumerGroupId?: string;
        /**
         * The credentials needed to access the resource.
         */
        credentials?: outputs.pipes.PipeSelfManagedKafkaAccessConfigurationCredentials0Properties | outputs.pipes.PipeSelfManagedKafkaAccessConfigurationCredentials1Properties | outputs.pipes.PipeSelfManagedKafkaAccessConfigurationCredentials2Properties | outputs.pipes.PipeSelfManagedKafkaAccessConfigurationCredentials3Properties;
        /**
         * The maximum length of a time to wait for events.
         */
        maximumBatchingWindowInSeconds?: number;
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        serverRootCaCertificate?: string;
        /**
         * (Streams only) The position in a stream from which to start reading.
         */
        startingPosition?: enums.pipes.PipeSelfManagedKafkaStartPosition;
        /**
         * The name of the topic that the pipe will read from.
         */
        topicName: string;
        /**
         * This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.
         */
        vpc?: outputs.pipes.PipeSelfManagedKafkaAccessConfigurationVpc;
    }

    export interface PipeSourceSqsQueueParameters {
        /**
         * The maximum number of records to include in each batch.
         */
        batchSize?: number;
        /**
         * The maximum length of a time to wait for events.
         */
        maximumBatchingWindowInSeconds?: number;
    }

    export interface PipeTag {
        /**
         * The key of the key-value pair.
         */
        key: string;
        /**
         * The value of the key-value pair.
         */
        value: string;
    }

    export interface PipeTargetBatchJobParameters {
        /**
         * The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an AWS Batch job.
         */
        arrayProperties?: outputs.pipes.PipeBatchArrayProperties;
        /**
         * The overrides that are sent to a container.
         */
        containerOverrides?: outputs.pipes.PipeBatchContainerOverrides;
        /**
         * A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a `SEQUENTIAL` type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an `N_TO_N` type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.
         */
        dependsOn?: outputs.pipes.PipeBatchJobDependency[];
        /**
         * The job definition used by this job. This value can be one of `name` , `name:revision` , or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.
         */
        jobDefinition: string;
        /**
         * The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
         */
        jobName: string;
        /**
         * Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition.
         */
        parameters?: {[key: string]: string};
        /**
         * The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.
         */
        retryStrategy?: outputs.pipes.PipeBatchRetryStrategy;
    }

    export interface PipeTargetCloudWatchLogsParameters {
        /**
         * The name of the log stream.
         */
        logStreamName?: string;
        /**
         * The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
         */
        timestamp?: string;
    }

    export interface PipeTargetEcsTaskParameters {
        /**
         * The capacity provider strategy to use for the task.
         *
         * If a `capacityProviderStrategy` is specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or launchType is specified, the `defaultCapacityProviderStrategy` for the cluster is used.
         */
        capacityProviderStrategy?: outputs.pipes.PipeCapacityProviderStrategyItem[];
        /**
         * Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon Elastic Container Service Developer Guide.
         */
        enableEcsManagedTags?: boolean;
        /**
         * Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
         */
        enableExecuteCommand?: boolean;
        /**
         * Specifies an Amazon ECS task group for the task. The maximum length is 255 characters.
         */
        group?: string;
        /**
         * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The `FARGATE` value is supported only in the Regions where AWS Fargate with Amazon ECS is supported. For more information, see [AWS Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        launchType?: enums.pipes.PipeLaunchType;
        /**
         * Use this structure if the Amazon ECS task uses the `awsvpc` network mode. This structure specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. This structure is required if `LaunchType` is `FARGATE` because the `awsvpc` mode is required for Fargate tasks.
         *
         * If you specify `NetworkConfiguration` when the target ECS task does not use the `awsvpc` network mode, the task fails.
         */
        networkConfiguration?: outputs.pipes.PipeNetworkConfiguration;
        /**
         * The overrides that are associated with a task.
         */
        overrides?: outputs.pipes.PipeEcsTaskOverride;
        /**
         * An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
         */
        placementConstraints?: outputs.pipes.PipePlacementConstraint[];
        /**
         * The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
         */
        placementStrategy?: outputs.pipes.PipePlacementStrategy[];
        /**
         * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0` .
         *
         * This structure is used only if `LaunchType` is `FARGATE` . For more information about valid platform versions, see [AWS Fargate Platform Versions](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html) in the *Amazon Elastic Container Service Developer Guide* .
         */
        platformVersion?: string;
        /**
         * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the `TagResource` API action.
         */
        propagateTags?: enums.pipes.PipePropagateTags;
        /**
         * The reference ID to use for the task.
         */
        referenceId?: string;
        /**
         * The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see [RunTask](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html#ECS-RunTask-request-tags) in the Amazon ECS API Reference.
         */
        tags?: outputs.pipes.PipeTag[];
        /**
         * The number of tasks to create based on `TaskDefinition` . The default is 1.
         */
        taskCount?: number;
        /**
         * The ARN of the task definition to use if the event target is an Amazon ECS task.
         */
        taskDefinitionArn: string;
    }

    export interface PipeTargetEventBridgeEventBusParameters {
        /**
         * A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
         */
        detailType?: string;
        /**
         * The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is `abcde.veo` .
         */
        endpointId?: string;
        /**
         * AWS resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.
         */
        resources?: string[];
        /**
         * The source of the event.
         */
        source?: string;
        /**
         * The time stamp of the event, per [RFC3339](https://docs.aws.amazon.com/https://www.rfc-editor.org/rfc/rfc3339.txt) . If no time stamp is provided, the time stamp of the [PutEvents](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) call is used.
         */
        time?: string;
    }

    export interface PipeTargetHttpParameters {
        /**
         * The headers that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
         */
        headerParameters?: {[key: string]: string};
        /**
         * The path parameter values to be used to populate API Gateway REST API or EventBridge ApiDestination path wildcards ("*").
         */
        pathParameterValues?: string[];
        /**
         * The query string keys/values that need to be sent as part of request invoking the API Gateway REST API or EventBridge ApiDestination.
         */
        queryStringParameters?: {[key: string]: string};
    }

    export interface PipeTargetKinesisStreamParameters {
        /**
         * Determines which shard in the stream the data record is assigned to. Partition keys are Unicode strings with a maximum length limit of 256 characters for each key. Amazon Kinesis Data Streams uses the partition key as input to a hash function that maps the partition key and associated data to a specific shard. Specifically, an MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards. As a result of this hashing mechanism, all data records with the same partition key map to the same shard within the stream.
         */
        partitionKey: string;
    }

    export interface PipeTargetLambdaFunctionParameters {
        /**
         * Specify whether to invoke the function synchronously or asynchronously.
         *
         * - `REQUEST_RESPONSE` (default) - Invoke synchronously. This corresponds to the `RequestResponse` option in the `InvocationType` parameter for the Lambda [Invoke](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) API.
         * - `FIRE_AND_FORGET` - Invoke asynchronously. This corresponds to the `Event` option in the `InvocationType` parameter for the Lambda [Invoke](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) API.
         *
         * For more information, see [Invocation types](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-invocation) in the *Amazon EventBridge User Guide* .
         */
        invocationType?: enums.pipes.PipeTargetInvocationType;
    }

    export interface PipeTargetParameters {
        /**
         * The parameters for using an AWS Batch job as a target.
         */
        batchJobParameters?: outputs.pipes.PipeTargetBatchJobParameters;
        /**
         * The parameters for using an CloudWatch Logs log stream as a target.
         */
        cloudWatchLogsParameters?: outputs.pipes.PipeTargetCloudWatchLogsParameters;
        /**
         * The parameters for using an Amazon ECS task as a target.
         */
        ecsTaskParameters?: outputs.pipes.PipeTargetEcsTaskParameters;
        /**
         * The parameters for using an EventBridge event bus as a target.
         */
        eventBridgeEventBusParameters?: outputs.pipes.PipeTargetEventBridgeEventBusParameters;
        /**
         * These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations.
         */
        httpParameters?: outputs.pipes.PipeTargetHttpParameters;
        /**
         * Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. For more information, see [The JavaScript Object Notation (JSON) Data Interchange Format](https://docs.aws.amazon.com/http://www.rfc-editor.org/rfc/rfc7159.txt) .
         *
         * To remove an input template, specify an empty string.
         */
        inputTemplate?: string;
        /**
         * The parameters for using a Kinesis stream as a target.
         */
        kinesisStreamParameters?: outputs.pipes.PipeTargetKinesisStreamParameters;
        /**
         * The parameters for using a Lambda function as a target.
         */
        lambdaFunctionParameters?: outputs.pipes.PipeTargetLambdaFunctionParameters;
        /**
         * These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement.
         */
        redshiftDataParameters?: outputs.pipes.PipeTargetRedshiftDataParameters;
        /**
         * The parameters for using a SageMaker pipeline as a target.
         */
        sageMakerPipelineParameters?: outputs.pipes.PipeTargetSageMakerPipelineParameters;
        /**
         * The parameters for using a Amazon SQS stream as a target.
         */
        sqsQueueParameters?: outputs.pipes.PipeTargetSqsQueueParameters;
        /**
         * The parameters for using a Step Functions state machine as a target.
         */
        stepFunctionStateMachineParameters?: outputs.pipes.PipeTargetStateMachineParameters;
    }

    export interface PipeTargetRedshiftDataParameters {
        /**
         * Redshift Database
         */
        database: string;
        /**
         * Database user name
         */
        dbUser?: string;
        /**
         * Optional SecretManager ARN which stores the database credentials
         */
        secretManagerArn?: string;
        /**
         * A list of SQLs.
         */
        sqls: string[];
        /**
         * A name for Redshift DataAPI statement which can be used as filter of ListStatement.
         */
        statementName?: string;
        /**
         * Indicates whether to send an event back to EventBridge after the SQL statement runs.
         */
        withEvent?: boolean;
    }

    export interface PipeTargetSageMakerPipelineParameters {
        /**
         * List of Parameter names and values for SageMaker Model Building Pipeline execution.
         */
        pipelineParameterList?: outputs.pipes.PipeSageMakerPipelineParameter[];
    }

    export interface PipeTargetSqsQueueParameters {
        /**
         * This parameter applies only to FIFO (first-in-first-out) queues.
         *
         * The token used for deduplication of sent messages.
         */
        messageDeduplicationId?: string;
        /**
         * The FIFO message group ID to use as the target.
         */
        messageGroupId?: string;
    }

    export interface PipeTargetStateMachineParameters {
        /**
         * Specify whether to invoke the Step Functions state machine synchronously or asynchronously.
         *
         * - `REQUEST_RESPONSE` (default) - Invoke synchronously. For more information, see [StartSyncExecution](https://docs.aws.amazon.com/step-functions/latest/apireference/API_StartSyncExecution.html) in the *AWS Step Functions API Reference* .
         *
         * > `REQUEST_RESPONSE` is not supported for `STANDARD` state machine workflows.
         * - `FIRE_AND_FORGET` - Invoke asynchronously. For more information, see [StartExecution](https://docs.aws.amazon.com/step-functions/latest/apireference/API_StartExecution.html) in the *AWS Step Functions API Reference* .
         *
         * For more information, see [Invocation types](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html#pipes-invocation) in the *Amazon EventBridge User Guide* .
         */
        invocationType?: enums.pipes.PipeTargetInvocationType;
    }

}

export namespace proton {
}

export namespace qbusiness {
    export interface ApplicationAttachmentsConfiguration {
        /**
         * Status information about whether file upload functionality is activated or deactivated for your end user.
         */
        attachmentsControlMode: enums.qbusiness.ApplicationAttachmentsControlMode;
    }

    export interface ApplicationEncryptionConfiguration {
        /**
         * The identifier of the AWS KMS key. Amazon Q Business doesn't support asymmetric keys.
         */
        kmsKeyId?: string;
    }

    export interface DataSourceDocumentAttributeCondition {
        /**
         * The identifier of the document attribute used for the condition.
         *
         * For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.
         *
         * Amazon Q Business currently doesn't support `_document_body` as an attribute key used for the condition.
         */
        key: string;
        /**
         * The identifier of the document attribute used for the condition.
         *
         * For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.
         *
         * Amazon Q Business currently does not support `_document_body` as an attribute key used for the condition.
         */
        operator: enums.qbusiness.DataSourceDocumentEnrichmentConditionOperator;
        /**
         * The value of a document attribute. You can only provide one value for a document attribute.
         */
        value?: outputs.qbusiness.DataSourceDocumentAttributeValue0Properties | outputs.qbusiness.DataSourceDocumentAttributeValue1Properties | outputs.qbusiness.DataSourceDocumentAttributeValue2Properties | outputs.qbusiness.DataSourceDocumentAttributeValue3Properties;
    }

    export interface DataSourceDocumentAttributeTarget {
        /**
         * `TRUE` to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to `TRUE` .
         */
        attributeValueOperator?: enums.qbusiness.DataSourceAttributeValueOperator;
        /**
         * The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.
         */
        key: string;
        /**
         * The value of a document attribute. You can only provide one value for a document attribute.
         */
        value?: outputs.qbusiness.DataSourceDocumentAttributeValue0Properties | outputs.qbusiness.DataSourceDocumentAttributeValue1Properties | outputs.qbusiness.DataSourceDocumentAttributeValue2Properties | outputs.qbusiness.DataSourceDocumentAttributeValue3Properties;
    }

    export interface DataSourceDocumentAttributeValue0Properties {
        stringValue: string;
    }

    export interface DataSourceDocumentAttributeValue1Properties {
        stringListValue: string[];
    }

    export interface DataSourceDocumentAttributeValue2Properties {
        longValue: number;
    }

    export interface DataSourceDocumentAttributeValue3Properties {
        dateValue: string;
    }

    export interface DataSourceDocumentEnrichmentConfiguration {
        /**
         * Configuration information to alter document attributes or metadata fields and content when ingesting documents into Amazon Q Business.
         */
        inlineConfigurations?: outputs.qbusiness.DataSourceInlineDocumentEnrichmentConfiguration[];
        /**
         * Configuration information for invoking a Lambda function in AWS Lambda on the structured documents with their metadata and text extracted. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see [Using Lambda functions](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/cde-lambda-operations.html) .
         */
        postExtractionHookConfiguration?: outputs.qbusiness.DataSourceHookConfiguration;
        /**
         * Configuration information for invoking a Lambda function in AWS Lambda on the original or raw documents before extracting their metadata and text. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see [Using Lambda functions](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/cde-lambda-operations.html) .
         */
        preExtractionHookConfiguration?: outputs.qbusiness.DataSourceHookConfiguration;
    }

    export interface DataSourceHookConfiguration {
        /**
         * The condition used for when a Lambda function should be invoked.
         *
         * For example, you can specify a condition that if there are empty date-time values, then Amazon Q Business should invoke a function that inserts the current date-time.
         */
        invocationCondition?: outputs.qbusiness.DataSourceDocumentAttributeCondition;
        /**
         * The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see [IAM roles for Custom Document Enrichment (CDE)](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/iam-roles.html#cde-iam-role) .
         */
        lambdaArn?: string;
        /**
         * The Amazon Resource Name (ARN) of a role with permission to run `PreExtractionHookConfiguration` and `PostExtractionHookConfiguration` for altering document metadata and content during the document ingestion process.
         */
        roleArn?: string;
        /**
         * Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see [Data contracts for Lambda functions](https://docs.aws.amazon.com/amazonq/latest/business-use-dg/cde-lambda-operations.html#cde-lambda-operations-data-contracts) .
         */
        s3BucketName?: string;
    }

    export interface DataSourceInlineDocumentEnrichmentConfiguration {
        /**
         * Configuration of the condition used for the target document attribute or metadata field when ingesting documents into Amazon Q Business .
         */
        condition?: outputs.qbusiness.DataSourceDocumentAttributeCondition;
        /**
         * `TRUE` to delete content if the condition used for the target attribute is met.
         */
        documentContentOperator?: enums.qbusiness.DataSourceDocumentContentOperator;
        /**
         * Configuration of the target document attribute or metadata field when ingesting documents into Amazon Q Business . You can also include a value.
         */
        target?: outputs.qbusiness.DataSourceDocumentAttributeTarget;
    }

    export interface DataSourceVpcConfiguration {
        /**
         * A list of identifiers of security groups within your Amazon VPC. The security groups should enable Amazon Q Business to connect to the data source.
         */
        securityGroupIds: string[];
        /**
         * A list of identifiers for subnets within your Amazon VPC. The subnets should be able to connect to each other in the VPC, and they should have outgoing access to the Internet through a NAT device.
         */
        subnetIds: string[];
    }

    export interface IndexCapacityConfiguration {
        /**
         * The number of storage units configured for an Amazon Q Business index.
         */
        units?: number;
    }

    export interface IndexDocumentAttributeConfiguration {
        /**
         * The name of the document attribute.
         */
        name?: string;
        /**
         * Information about whether the document attribute can be used by an end user to search for information on their web experience.
         */
        search?: enums.qbusiness.QBusinessIndexStatus;
        /**
         * The type of document attribute.
         */
        type?: enums.qbusiness.IndexAttributeType;
    }

    export interface IndexStatistics {
        /**
         * The number of documents indexed.
         */
        textDocumentStatistics?: outputs.qbusiness.IndexTextDocumentStatistics;
    }

    export interface IndexTextDocumentStatistics {
        /**
         * The total size, in bytes, of the indexed documents.
         */
        indexedTextBytes?: number;
        /**
         * The number of text documents indexed.
         */
        indexedTextDocumentCount?: number;
    }

    export interface PluginApiSchema0Properties {
        payload: string;
    }

    export interface PluginApiSchema1Properties {
        s3: outputs.qbusiness.PluginS3;
    }

    export interface PluginAuthConfiguration0Properties {
        basicAuthConfiguration: outputs.qbusiness.PluginBasicAuthConfiguration;
    }

    export interface PluginAuthConfiguration1Properties {
        oAuth2ClientCredentialConfiguration: outputs.qbusiness.PluginOAuth2ClientCredentialConfiguration;
    }

    export interface PluginAuthConfiguration2Properties {
        noAuthConfiguration: outputs.qbusiness.PluginNoAuthConfiguration;
    }

    export interface PluginBasicAuthConfiguration {
        roleArn: string;
        secretArn: string;
    }

    export interface PluginCustomPluginConfiguration {
        /**
         * Contains either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema.
         */
        apiSchema: outputs.qbusiness.PluginApiSchema0Properties | outputs.qbusiness.PluginApiSchema1Properties;
        /**
         * The type of OpenAPI schema to use.
         */
        apiSchemaType: enums.qbusiness.PluginApiSchemaType;
        /**
         * A description for your custom plugin configuration.
         */
        description: string;
    }

    export interface PluginNoAuthConfiguration {
    }

    export interface PluginOAuth2ClientCredentialConfiguration {
        roleArn: string;
        secretArn: string;
    }

    export interface PluginS3 {
        bucket: string;
        key: string;
    }

    export interface RetrieverConfiguration0Properties {
        nativeIndexConfiguration: outputs.qbusiness.RetrieverNativeIndexConfiguration;
    }

    export interface RetrieverConfiguration1Properties {
        kendraIndexConfiguration: outputs.qbusiness.RetrieverKendraIndexConfiguration;
    }

    export interface RetrieverKendraIndexConfiguration {
        indexId: string;
    }

    export interface RetrieverNativeIndexConfiguration {
        indexId: string;
    }

}

export namespace qldb {
    export interface StreamKinesisConfiguration {
        /**
         * Enables QLDB to publish multiple data records in a single Kinesis Data Streams record, increasing the number of records sent per API call.
         *
         * Default: `True`
         *
         * > Record aggregation has important implications for processing records and requires de-aggregation in your stream consumer. To learn more, see [KPL Key Concepts](https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-concepts.html) and [Consumer De-aggregation](https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-consumer-deaggregation.html) in the *Amazon Kinesis Data Streams Developer Guide* .
         */
        aggregationEnabled?: boolean;
        /**
         * The Amazon Resource Name (ARN) of the Kinesis Data Streams resource.
         */
        streamArn?: string;
    }

}

export namespace quicksight {
    export interface AnalysisAggregationFunction {
        /**
         * Aggregation for attributes.
         */
        attributeAggregationFunction?: outputs.quicksight.AnalysisAttributeAggregationFunction;
        /**
         * Aggregation for categorical values.
         *
         * - `COUNT` : Aggregate by the total number of values, including duplicates.
         * - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
         */
        categoricalAggregationFunction?: enums.quicksight.AnalysisCategoricalAggregationFunction;
        /**
         * Aggregation for date values.
         *
         * - `COUNT` : Aggregate by the total number of values, including duplicates.
         * - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
         * - `MIN` : Select the smallest date value.
         * - `MAX` : Select the largest date value.
         */
        dateAggregationFunction?: enums.quicksight.AnalysisDateAggregationFunction;
        /**
         * Aggregation for numerical values.
         */
        numericalAggregationFunction?: outputs.quicksight.AnalysisNumericalAggregationFunction;
    }

    export interface AnalysisAggregationSortConfiguration {
        /**
         * The function that aggregates the values in `Column` .
         */
        aggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
        /**
         * The column that determines the sort order of aggregated values.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The sort direction of values.
         *
         * - `ASC` : Sort in ascending order.
         * - `DESC` : Sort in descending order.
         */
        sortDirection: enums.quicksight.AnalysisSortDirection;
    }

    export interface AnalysisAllSheetsFilterScopeConfiguration {
    }

    export interface AnalysisAnchorDateConfiguration {
        /**
         * The options for the date configuration. Choose one of the options below:
         *
         * - `NOW`
         */
        anchorOption?: enums.quicksight.AnalysisAnchorOption;
        /**
         * The name of the parameter that is used for the anchor date configuration.
         */
        parameterName?: string;
    }

    export interface AnalysisArcAxisConfiguration {
        /**
         * The arc axis range of a `GaugeChartVisual` .
         */
        range?: outputs.quicksight.AnalysisArcAxisDisplayRange;
        /**
         * The reserved range of the arc axis.
         */
        reserveRange?: number;
    }

    export interface AnalysisArcAxisDisplayRange {
        /**
         * The maximum value of the arc axis range.
         */
        max?: number;
        /**
         * The minimum value of the arc axis range.
         */
        min?: number;
    }

    export interface AnalysisArcConfiguration {
        /**
         * The option that determines the arc angle of a `GaugeChartVisual` .
         */
        arcAngle?: number;
        /**
         * The options that determine the arc thickness of a `GaugeChartVisual` .
         */
        arcThickness?: enums.quicksight.AnalysisArcThicknessOptions;
    }

    export interface AnalysisArcOptions {
        /**
         * The arc thickness of a `GaugeChartVisual` .
         */
        arcThickness?: enums.quicksight.AnalysisArcThickness;
    }

    export interface AnalysisAssetOptions {
        /**
         * Determines the timezone for the analysis.
         */
        timezone?: string;
        /**
         * Determines the week start day for an analysis.
         */
        weekStart?: enums.quicksight.AnalysisDayOfTheWeek;
    }

    export interface AnalysisAttributeAggregationFunction {
        /**
         * The built-in aggregation functions for attributes.
         *
         * - `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension fields.
         */
        simpleAttributeAggregation?: enums.quicksight.AnalysisSimpleAttributeAggregationFunction;
        /**
         * Used by the `UNIQUE_VALUE` aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.
         */
        valueForMultipleValues?: string;
    }

    export interface AnalysisAxisDataOptions {
        /**
         * The options for an axis with a date field.
         */
        dateAxisOptions?: outputs.quicksight.AnalysisDateAxisOptions;
        /**
         * The options for an axis with a numeric field.
         */
        numericAxisOptions?: outputs.quicksight.AnalysisNumericAxisOptions;
    }

    export interface AnalysisAxisDisplayDataDrivenRange {
    }

    export interface AnalysisAxisDisplayMinMaxRange {
        /**
         * The maximum setup for an axis display range.
         */
        maximum?: number;
        /**
         * The minimum setup for an axis display range.
         */
        minimum?: number;
    }

    export interface AnalysisAxisDisplayOptions {
        /**
         * Determines whether or not the axis line is visible.
         */
        axisLineVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        axisOffset?: string;
        /**
         * The data options for an axis.
         */
        dataOptions?: outputs.quicksight.AnalysisAxisDataOptions;
        /**
         * Determines whether or not the grid line is visible.
         */
        gridLineVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The scroll bar options for an axis.
         */
        scrollbarOptions?: outputs.quicksight.AnalysisScrollBarOptions;
        /**
         * The tick label options of an axis.
         */
        tickLabelOptions?: outputs.quicksight.AnalysisAxisTickLabelOptions;
    }

    export interface AnalysisAxisDisplayRange {
        /**
         * The data-driven setup of an axis display range.
         */
        dataDriven?: outputs.quicksight.AnalysisAxisDisplayDataDrivenRange;
        /**
         * The minimum and maximum setup of an axis display range.
         */
        minMax?: outputs.quicksight.AnalysisAxisDisplayMinMaxRange;
    }

    export interface AnalysisAxisLabelOptions {
        /**
         * The options that indicate which field the label belongs to.
         */
        applyTo?: outputs.quicksight.AnalysisAxisLabelReferenceOptions;
        /**
         * The text for the axis label.
         */
        customLabel?: string;
        /**
         * The font configuration of the axis label.
         */
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
    }

    export interface AnalysisAxisLabelReferenceOptions {
        /**
         * The column that the axis label is targeted to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The field that the axis label is targeted to.
         */
        fieldId: string;
    }

    export interface AnalysisAxisLinearScale {
        /**
         * The step count setup of a linear axis.
         */
        stepCount?: number;
        /**
         * The step size setup of a linear axis.
         */
        stepSize?: number;
    }

    export interface AnalysisAxisLogarithmicScale {
        /**
         * The base setup of a logarithmic axis scale.
         */
        base?: number;
    }

    export interface AnalysisAxisScale {
        /**
         * The linear axis scale setup.
         */
        linear?: outputs.quicksight.AnalysisAxisLinearScale;
        /**
         * The logarithmic axis scale setup.
         */
        logarithmic?: outputs.quicksight.AnalysisAxisLogarithmicScale;
    }

    export interface AnalysisAxisTickLabelOptions {
        /**
         * Determines whether or not the axis ticks are visible.
         */
        labelOptions?: outputs.quicksight.AnalysisLabelOptions;
        /**
         * The rotation angle of the axis tick labels.
         */
        rotationAngle?: number;
    }

    export interface AnalysisBarChartAggregatedFieldWells {
        /**
         * The category (y-axis) field well of a bar chart.
         */
        category?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The color (group/color) field well of a bar chart.
         */
        colors?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The small multiples field well of a bar chart.
         */
        smallMultiples?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The value field wells of a bar chart. Values are aggregated by category.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisBarChartConfiguration {
        /**
         * Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.
         */
        barsArrangement?: enums.quicksight.AnalysisBarsArrangement;
        /**
         * The label display options (grid line, range, scale, axis step) for bar chart category.
         */
        categoryAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) for a bar chart.
         */
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.
         */
        colorLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The contribution analysis (anomaly configuration) setup of the visual.
         */
        contributionAnalysisDefaults?: outputs.quicksight.AnalysisContributionAnalysisDefault[];
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisBarChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The orientation of the bars in a bar chart visual. There are two valid values in this structure:
         *
         * - `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
         * - `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
         */
        orientation?: enums.quicksight.AnalysisBarChartOrientation;
        /**
         * The reference line setup of the visual.
         */
        referenceLines?: outputs.quicksight.AnalysisReferenceLine[];
        /**
         * The small multiples setup for the visual.
         */
        smallMultiplesOptions?: outputs.quicksight.AnalysisSmallMultiplesOptions;
        /**
         * The sort configuration of a `BarChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.AnalysisBarChartSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * The label display options (grid line, range, scale, axis step) for a bar chart value.
         */
        valueAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) for a bar chart value.
         */
        valueLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisBarChartFieldWells {
        /**
         * The aggregated field wells of a bar chart.
         */
        barChartAggregatedFieldWells?: outputs.quicksight.AnalysisBarChartAggregatedFieldWells;
    }

    export interface AnalysisBarChartSortConfiguration {
        /**
         * The limit on the number of categories displayed in a bar chart.
         */
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of category fields.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        /**
         * The limit on the number of values displayed in a bar chart.
         */
        colorItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of color fields in a bar chart.
         */
        colorSort?: outputs.quicksight.AnalysisFieldSortOptions[];
        /**
         * The limit on the number of small multiples panels that are displayed.
         */
        smallMultiplesLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the small multiples field.
         */
        smallMultiplesSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisBarChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisBarChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisBinCountOptions {
        /**
         * The options that determine the bin count value.
         */
        value?: number;
    }

    export interface AnalysisBinWidthOptions {
        /**
         * The options that determine the bin count limit.
         */
        binCountLimit?: number;
        /**
         * The options that determine the bin width value.
         */
        value?: number;
    }

    export interface AnalysisBodySectionConfiguration {
        /**
         * The configuration of content in a body section.
         */
        content: outputs.quicksight.AnalysisBodySectionContent;
        /**
         * The configuration of a page break for a section.
         */
        pageBreakConfiguration?: outputs.quicksight.AnalysisSectionPageBreakConfiguration;
        /**
         * The unique identifier of a body section.
         */
        sectionId: string;
        /**
         * The style options of a body section.
         */
        style?: outputs.quicksight.AnalysisSectionStyle;
    }

    export interface AnalysisBodySectionContent {
        /**
         * The layout configuration of a body section.
         */
        layout?: outputs.quicksight.AnalysisSectionLayoutConfiguration;
    }

    export interface AnalysisBoxPlotAggregatedFieldWells {
        /**
         * The group by field well of a box plot chart. Values are grouped based on group by fields.
         */
        groupBy?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The value field well of a box plot chart. Values are aggregated based on group by fields.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisBoxPlotChartConfiguration {
        /**
         * The box plot chart options for a box plot visual
         */
        boxPlotOptions?: outputs.quicksight.AnalysisBoxPlotOptions;
        /**
         * The label display options (grid line, range, scale, axis step) of a box plot category.
         */
        categoryAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort Icon visibility) of a box plot category.
         */
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisBoxPlotFieldWells;
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The label display options (grid line, range, scale, axis step) of a box plot category.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) of a box plot value.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The reference line setup of the visual.
         */
        referenceLines?: outputs.quicksight.AnalysisReferenceLine[];
        /**
         * The sort configuration of a `BoxPlotVisual` .
         */
        sortConfiguration?: outputs.quicksight.AnalysisBoxPlotSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisBoxPlotFieldWells {
        /**
         * The aggregated field wells of a box plot.
         */
        boxPlotAggregatedFieldWells?: outputs.quicksight.AnalysisBoxPlotAggregatedFieldWells;
    }

    export interface AnalysisBoxPlotOptions {
        /**
         * Determines the visibility of all data points of the box plot.
         */
        allDataPointsVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * Determines the visibility of the outlier in a box plot.
         */
        outlierVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The style options of the box plot.
         */
        styleOptions?: outputs.quicksight.AnalysisBoxPlotStyleOptions;
    }

    export interface AnalysisBoxPlotSortConfiguration {
        /**
         * The sort configuration of a group by fields.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        /**
         * The pagination configuration of a table visual or box plot.
         */
        paginationConfiguration?: outputs.quicksight.AnalysisPaginationConfiguration;
    }

    export interface AnalysisBoxPlotStyleOptions {
        /**
         * The fill styles (solid, transparent) of the box plot.
         */
        fillStyle?: enums.quicksight.AnalysisBoxPlotFillStyle;
    }

    export interface AnalysisBoxPlotVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisBoxPlotChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface AnalysisCalculatedField {
        /**
         * The data set that is used in this calculated field.
         */
        dataSetIdentifier: string;
        /**
         * The expression of the calculated field.
         */
        expression: string;
        /**
         * The name of the calculated field.
         */
        name: string;
    }

    export interface AnalysisCalculatedMeasureField {
        /**
         * The expression in the table calculation.
         */
        expression: string;
        /**
         * The custom field ID.
         */
        fieldId: string;
    }

    export interface AnalysisCascadingControlConfiguration {
        /**
         * A list of source controls that determine the values that are used in the current control.
         */
        sourceControls?: outputs.quicksight.AnalysisCascadingControlSource[];
    }

    export interface AnalysisCascadingControlSource {
        /**
         * The column identifier that determines which column to look up for the source sheet control.
         */
        columnToMatch?: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The source sheet control ID of a `CascadingControlSource` .
         */
        sourceSheetControlId?: string;
    }

    export interface AnalysisCategoricalDimensionField {
        /**
         * The column that is used in the `CategoricalDimensionField` .
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.AnalysisStringFormatConfiguration;
        /**
         * The custom hierarchy ID.
         */
        hierarchyId?: string;
    }

    export interface AnalysisCategoricalMeasureField {
        /**
         * The aggregation function of the measure field.
         */
        aggregationFunction?: enums.quicksight.AnalysisCategoricalAggregationFunction;
        /**
         * The column that is used in the `CategoricalMeasureField` .
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.AnalysisStringFormatConfiguration;
    }

    export interface AnalysisCategoryDrillDownFilter {
        /**
         * A list of the string inputs that are the values of the category drill down filter.
         */
        categoryValues: string[];
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
    }

    export interface AnalysisCategoryFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The configuration for a `CategoryFilter` .
         */
        configuration: outputs.quicksight.AnalysisCategoryFilterConfiguration;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.AnalysisDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
    }

    export interface AnalysisCategoryFilterConfiguration {
        /**
         * A custom filter that filters based on a single value. This filter can be partially matched.
         */
        customFilterConfiguration?: outputs.quicksight.AnalysisCustomFilterConfiguration;
        /**
         * A list of custom filter values. In the Amazon QuickSight console, this filter type is called a custom filter list.
         */
        customFilterListConfiguration?: outputs.quicksight.AnalysisCustomFilterListConfiguration;
        /**
         * A list of filter configurations. In the Amazon QuickSight console, this filter type is called a filter list.
         */
        filterListConfiguration?: outputs.quicksight.AnalysisFilterListConfiguration;
    }

    export interface AnalysisChartAxisLabelOptions {
        /**
         * The label options for a chart axis.
         */
        axisLabelOptions?: outputs.quicksight.AnalysisAxisLabelOptions[];
        /**
         * The visibility configuration of the sort icon on a chart's axis label.
         */
        sortIconVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The visibility of an axis label on a chart. Choose one of the following options:
         *
         * - `VISIBLE` : Shows the axis.
         * - `HIDDEN` : Hides the axis.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisClusterMarker {
        /**
         * The simple cluster marker of the cluster marker.
         */
        simpleClusterMarker?: outputs.quicksight.AnalysisSimpleClusterMarker;
    }

    export interface AnalysisClusterMarkerConfiguration {
        /**
         * The cluster marker that is a part of the cluster marker configuration.
         */
        clusterMarker?: outputs.quicksight.AnalysisClusterMarker;
    }

    export interface AnalysisColorScale {
        /**
         * Determines the color fill type.
         */
        colorFillType: enums.quicksight.AnalysisColorFillType;
        /**
         * Determines the list of colors that are applied to the visual.
         */
        colors: outputs.quicksight.AnalysisDataColor[];
        /**
         * Determines the color that is applied to null values.
         */
        nullValueColor?: outputs.quicksight.AnalysisDataColor;
    }

    export interface AnalysisColorsConfiguration {
        /**
         * A list of up to 50 custom colors.
         */
        customColors?: outputs.quicksight.AnalysisCustomColor[];
    }

    export interface AnalysisColumnConfiguration {
        /**
         * The color configurations of the column.
         */
        colorsConfiguration?: outputs.quicksight.AnalysisColorsConfiguration;
        /**
         * The column.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The format configuration of a column.
         */
        formatConfiguration?: outputs.quicksight.AnalysisFormatConfiguration;
        /**
         * The role of the column.
         */
        role?: enums.quicksight.AnalysisColumnRole;
    }

    export interface AnalysisColumnHierarchy {
        /**
         * The option that determines the hierarchy of any `DateTime` fields.
         */
        dateTimeHierarchy?: outputs.quicksight.AnalysisDateTimeHierarchy;
        /**
         * The option that determines the hierarchy of the fields that are built within a visual's field wells. These fields can't be duplicated to other visuals.
         */
        explicitHierarchy?: outputs.quicksight.AnalysisExplicitHierarchy;
        /**
         * The option that determines the hierarchy of the fields that are defined during data preparation. These fields are available to use in any analysis that uses the data source.
         */
        predefinedHierarchy?: outputs.quicksight.AnalysisPredefinedHierarchy;
    }

    export interface AnalysisColumnIdentifier {
        /**
         * The name of the column.
         */
        columnName: string;
        /**
         * The data set that the column belongs to.
         */
        dataSetIdentifier: string;
    }

    export interface AnalysisColumnSort {
        /**
         * The aggregation function that is defined in the column sort.
         */
        aggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
        /**
         * The sort direction.
         */
        direction: enums.quicksight.AnalysisSortDirection;
        sortBy: outputs.quicksight.AnalysisColumnIdentifier;
    }

    export interface AnalysisColumnTooltipItem {
        /**
         * The aggregation function of the column tooltip item.
         */
        aggregation?: outputs.quicksight.AnalysisAggregationFunction;
        /**
         * The target column of the tooltip item.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The label of the tooltip item.
         */
        label?: string;
        /**
         * The visibility of the tooltip item.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisComboChartAggregatedFieldWells {
        /**
         * The aggregated `BarValues` field well of a combo chart.
         */
        barValues?: outputs.quicksight.AnalysisMeasureField[];
        /**
         * The aggregated category field wells of a combo chart.
         */
        category?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The aggregated colors field well of a combo chart.
         */
        colors?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The aggregated `LineValues` field well of a combo chart.
         */
        lineValues?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisComboChartConfiguration {
        /**
         * The options that determine if visual data labels are displayed.
         *
         * The data label options for a bar in a combo chart.
         */
        barDataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * Determines the bar arrangement in a combo chart. The following are valid values in this structure:
         *
         * - `CLUSTERED` : For clustered bar combo charts.
         * - `STACKED` : For stacked bar combo charts.
         * - `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation error.
         */
        barsArrangement?: enums.quicksight.AnalysisBarsArrangement;
        /**
         * The category axis of a combo chart.
         */
        categoryAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart category (group/color) field well.
         */
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart's color field well.
         */
        colorLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisComboChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The options that determine if visual data labels are displayed.
         *
         * The data label options for a line in a combo chart.
         */
        lineDataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The label display options (grid line, range, scale, and axis step) of a combo chart's primary y-axis (bar) field well.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart's primary y-axis (bar) field well.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The reference line setup of the visual.
         */
        referenceLines?: outputs.quicksight.AnalysisReferenceLine[];
        /**
         * The label display options (grid line, range, scale, axis step) of a combo chart's secondary y-axis (line) field well.
         */
        secondaryYAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart's secondary y-axis(line) field well.
         */
        secondaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The sort configuration of a `ComboChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.AnalysisComboChartSortConfiguration;
        /**
         * The legend display setup of the visual.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisComboChartFieldWells {
        /**
         * The aggregated field wells of a combo chart. Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by category.
         */
        comboChartAggregatedFieldWells?: outputs.quicksight.AnalysisComboChartAggregatedFieldWells;
    }

    export interface AnalysisComboChartSortConfiguration {
        /**
         * The item limit configuration for the category field well of a combo chart.
         */
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the category field well in a combo chart.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        /**
         * The item limit configuration of the color field well in a combo chart.
         */
        colorItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the color field well in a combo chart.
         */
        colorSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisComboChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisComboChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisComparisonConfiguration {
        /**
         * The format of the comparison.
         */
        comparisonFormat?: outputs.quicksight.AnalysisComparisonFormatConfiguration;
        /**
         * The method of the comparison. Choose from the following options:
         *
         * - `DIFFERENCE`
         * - `PERCENT_DIFFERENCE`
         * - `PERCENT`
         */
        comparisonMethod?: enums.quicksight.AnalysisComparisonMethod;
    }

    export interface AnalysisComparisonFormatConfiguration {
        /**
         * The number display format.
         */
        numberDisplayFormatConfiguration?: outputs.quicksight.AnalysisNumberDisplayFormatConfiguration;
        /**
         * The percentage display format.
         */
        percentageDisplayFormatConfiguration?: outputs.quicksight.AnalysisPercentageDisplayFormatConfiguration;
    }

    export interface AnalysisComputation {
        /**
         * The forecast computation configuration.
         */
        forecast?: outputs.quicksight.AnalysisForecastComputation;
        /**
         * The growth rate computation configuration.
         */
        growthRate?: outputs.quicksight.AnalysisGrowthRateComputation;
        /**
         * The maximum and minimum computation configuration.
         */
        maximumMinimum?: outputs.quicksight.AnalysisMaximumMinimumComputation;
        /**
         * The metric comparison computation configuration.
         */
        metricComparison?: outputs.quicksight.AnalysisMetricComparisonComputation;
        /**
         * The period over period computation configuration.
         */
        periodOverPeriod?: outputs.quicksight.AnalysisPeriodOverPeriodComputation;
        /**
         * The period to `DataSetIdentifier` computation configuration.
         */
        periodToDate?: outputs.quicksight.AnalysisPeriodToDateComputation;
        /**
         * The top movers and bottom movers computation configuration.
         */
        topBottomMovers?: outputs.quicksight.AnalysisTopBottomMoversComputation;
        /**
         * The top ranked and bottom ranked computation configuration.
         */
        topBottomRanked?: outputs.quicksight.AnalysisTopBottomRankedComputation;
        /**
         * The total aggregation computation configuration.
         */
        totalAggregation?: outputs.quicksight.AnalysisTotalAggregationComputation;
        /**
         * The unique values computation configuration.
         */
        uniqueValues?: outputs.quicksight.AnalysisUniqueValuesComputation;
    }

    export interface AnalysisConditionalFormattingColor {
        /**
         * Formatting configuration for gradient color.
         */
        gradient?: outputs.quicksight.AnalysisConditionalFormattingGradientColor;
        /**
         * Formatting configuration for solid color.
         */
        solid?: outputs.quicksight.AnalysisConditionalFormattingSolidColor;
    }

    export interface AnalysisConditionalFormattingCustomIconCondition {
        /**
         * Determines the color of the icon.
         */
        color?: string;
        /**
         * Determines the icon display configuration.
         */
        displayConfiguration?: outputs.quicksight.AnalysisConditionalFormattingIconDisplayConfiguration;
        /**
         * The expression that determines the condition of the icon set.
         */
        expression: string;
        /**
         * Custom icon options for an icon set.
         */
        iconOptions: outputs.quicksight.AnalysisConditionalFormattingCustomIconOptions;
    }

    export interface AnalysisConditionalFormattingCustomIconOptions {
        /**
         * Determines the type of icon.
         */
        icon?: enums.quicksight.AnalysisIcon;
        /**
         * Determines the Unicode icon type.
         */
        unicodeIcon?: string;
    }

    export interface AnalysisConditionalFormattingGradientColor {
        /**
         * Determines the color.
         */
        color: outputs.quicksight.AnalysisGradientColor;
        /**
         * The expression that determines the formatting configuration for gradient color.
         */
        expression: string;
    }

    export interface AnalysisConditionalFormattingIcon {
        /**
         * Determines the custom condition for an icon set.
         */
        customCondition?: outputs.quicksight.AnalysisConditionalFormattingCustomIconCondition;
        /**
         * Formatting configuration for icon set.
         */
        iconSet?: outputs.quicksight.AnalysisConditionalFormattingIconSet;
    }

    export interface AnalysisConditionalFormattingIconDisplayConfiguration {
        /**
         * Determines the icon display configuration.
         */
        iconDisplayOption?: enums.quicksight.AnalysisConditionalFormattingIconDisplayOption;
    }

    export interface AnalysisConditionalFormattingIconSet {
        /**
         * The expression that determines the formatting configuration for the icon set.
         */
        expression: string;
        /**
         * Determines the icon set type.
         */
        iconSetType?: enums.quicksight.AnalysisConditionalFormattingIconSetType;
    }

    export interface AnalysisConditionalFormattingSolidColor {
        /**
         * Determines the color.
         */
        color?: string;
        /**
         * The expression that determines the formatting configuration for solid color.
         */
        expression: string;
    }

    export interface AnalysisContributionAnalysisDefault {
        /**
         * The dimensions columns that are used in the contribution analysis, usually a list of `ColumnIdentifiers` .
         */
        contributorDimensions: outputs.quicksight.AnalysisColumnIdentifier[];
        /**
         * The measure field that is used in the contribution analysis.
         */
        measureFieldId: string;
    }

    export interface AnalysisCurrencyDisplayFormatConfiguration {
        /**
         * The option that determines the decimal places configuration.
         */
        decimalPlacesConfiguration?: outputs.quicksight.AnalysisDecimalPlacesConfiguration;
        /**
         * The options that determine the negative value configuration.
         */
        negativeValueConfiguration?: outputs.quicksight.AnalysisNegativeValueConfiguration;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        /**
         * Determines the number scale value for the currency format.
         */
        numberScale?: enums.quicksight.AnalysisNumberScale;
        /**
         * Determines the prefix value of the currency format.
         */
        prefix?: string;
        /**
         * The options that determine the numeric separator configuration.
         */
        separatorConfiguration?: outputs.quicksight.AnalysisNumericSeparatorConfiguration;
        /**
         * Determines the suffix value of the currency format.
         */
        suffix?: string;
        /**
         * Determines the symbol for the currency format.
         */
        symbol?: string;
    }

    export interface AnalysisCustomActionFilterOperation {
        /**
         * The configuration that chooses the fields to be filtered.
         */
        selectedFieldsConfiguration: outputs.quicksight.AnalysisFilterOperationSelectedFieldsConfiguration;
        /**
         * The configuration that chooses the target visuals to be filtered.
         */
        targetVisualsConfiguration: outputs.quicksight.AnalysisFilterOperationTargetVisualsConfiguration;
    }

    export interface AnalysisCustomActionNavigationOperation {
        /**
         * The configuration that chooses the navigation target.
         */
        localNavigationConfiguration?: outputs.quicksight.AnalysisLocalNavigationConfiguration;
    }

    export interface AnalysisCustomActionSetParametersOperation {
        /**
         * The parameter that determines the value configuration.
         */
        parameterValueConfigurations: outputs.quicksight.AnalysisSetParameterValueConfiguration[];
    }

    export interface AnalysisCustomActionUrlOperation {
        /**
         * The target of the `CustomActionURLOperation` .
         *
         * Valid values are defined as follows:
         *
         * - `NEW_TAB` : Opens the target URL in a new browser tab.
         * - `NEW_WINDOW` : Opens the target URL in a new browser window.
         * - `SAME_TAB` : Opens the target URL in the same browser tab.
         */
        urlTarget: enums.quicksight.AnalysisUrlTargetConfiguration;
        /**
         * THe URL link of the `CustomActionURLOperation` .
         */
        urlTemplate: string;
    }

    export interface AnalysisCustomColor {
        /**
         * The color that is applied to the data value.
         */
        color: string;
        /**
         * The data value that the color is applied to.
         */
        fieldValue?: string;
        /**
         * The value of a special data value.
         */
        specialValue?: enums.quicksight.AnalysisSpecialValue;
    }

    export interface AnalysisCustomContentConfiguration {
        /**
         * The content type of the custom content visual. You can use this to have the visual render as an image.
         */
        contentType?: enums.quicksight.AnalysisCustomContentType;
        /**
         * The input URL that links to the custom content that you want in the custom visual.
         */
        contentUrl?: string;
        /**
         * The sizing options for the size of the custom content visual. This structure is required when the `ContentType` of the visual is `'IMAGE'` .
         */
        imageScaling?: enums.quicksight.AnalysisCustomContentImageScalingConfiguration;
    }

    export interface AnalysisCustomContentVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration of a `CustomContentVisual` .
         */
        chartConfiguration?: outputs.quicksight.AnalysisCustomContentConfiguration;
        /**
         * The dataset that is used to create the custom content visual. You can't create a visual without a dataset.
         */
        dataSetIdentifier: string;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisCustomFilterConfiguration {
        /**
         * The category value for the filter.
         *
         * This field is mutually exclusive to `ParameterName` .
         */
        categoryValue?: string;
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.AnalysisCategoryFilterMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        /**
         * The parameter whose value should be used for the filter value.
         *
         * This field is mutually exclusive to `CategoryValue` .
         */
        parameterName?: string;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.AnalysisCategoryFilterSelectAllOptions;
    }

    export interface AnalysisCustomFilterListConfiguration {
        /**
         * The list of category values for the filter.
         */
        categoryValues?: string[];
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.AnalysisCategoryFilterMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.AnalysisCategoryFilterSelectAllOptions;
    }

    export interface AnalysisCustomNarrativeOptions {
        /**
         * The string input of custom narrative.
         */
        narrative: string;
    }

    export interface AnalysisCustomParameterValues {
        /**
         * A list of datetime-type parameter values.
         */
        dateTimeValues?: string[];
        /**
         * A list of decimal-type parameter values.
         */
        decimalValues?: number[];
        /**
         * A list of integer-type parameter values.
         */
        integerValues?: number[];
        /**
         * A list of string-type parameter values.
         */
        stringValues?: string[];
    }

    export interface AnalysisCustomValuesConfiguration {
        customValues: outputs.quicksight.AnalysisCustomParameterValues;
        /**
         * Includes the null value in custom action parameter values.
         */
        includeNullValue?: boolean;
    }

    export interface AnalysisDataBarsOptions {
        /**
         * The field ID for the data bars options.
         */
        fieldId: string;
        /**
         * The color of the negative data bar.
         */
        negativeColor?: string;
        /**
         * The color of the positive data bar.
         */
        positiveColor?: string;
    }

    export interface AnalysisDataColor {
        /**
         * The color that is applied to the data value.
         */
        color?: string;
        /**
         * The data value that the color is applied to.
         */
        dataValue?: number;
    }

    export interface AnalysisDataFieldSeriesItem {
        /**
         * The axis that you are binding the field to.
         */
        axisBinding: enums.quicksight.AnalysisAxisBinding;
        /**
         * The field ID of the field that you are setting the axis binding to.
         */
        fieldId: string;
        /**
         * The field value of the field that you are setting the axis binding to.
         */
        fieldValue?: string;
        /**
         * The options that determine the presentation of line series associated to the field.
         */
        settings?: outputs.quicksight.AnalysisLineChartSeriesSettings;
    }

    export interface AnalysisDataLabelOptions {
        /**
         * Determines the visibility of the category field labels.
         */
        categoryLabelVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The option that determines the data label type.
         */
        dataLabelTypes?: outputs.quicksight.AnalysisDataLabelType[];
        /**
         * Determines the color of the data labels.
         */
        labelColor?: string;
        /**
         * Determines the content of the data labels.
         */
        labelContent?: enums.quicksight.AnalysisDataLabelContent;
        /**
         * Determines the font configuration of the data labels.
         */
        labelFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        /**
         * Determines the visibility of the measure field labels.
         */
        measureLabelVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * Determines whether overlap is enabled or disabled for the data labels.
         */
        overlap?: enums.quicksight.AnalysisDataLabelOverlap;
        /**
         * Determines the position of the data labels.
         */
        position?: enums.quicksight.AnalysisDataLabelPosition;
        /**
         * Determines the visibility of the total.
         */
        totalsVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * Determines the visibility of the data labels.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisDataLabelType {
        /**
         * The option that specifies individual data values for labels.
         */
        dataPathLabelType?: outputs.quicksight.AnalysisDataPathLabelType;
        /**
         * Determines the label configuration for the entire field.
         */
        fieldLabelType?: outputs.quicksight.AnalysisFieldLabelType;
        /**
         * Determines the label configuration for the maximum value in a visual.
         */
        maximumLabelType?: outputs.quicksight.AnalysisMaximumLabelType;
        /**
         * Determines the label configuration for the minimum value in a visual.
         */
        minimumLabelType?: outputs.quicksight.AnalysisMinimumLabelType;
        /**
         * Determines the label configuration for range end value in a visual.
         */
        rangeEndsLabelType?: outputs.quicksight.AnalysisRangeEndsLabelType;
    }

    export interface AnalysisDataPathColor {
        /**
         * The color that needs to be applied to the element.
         */
        color: string;
        /**
         * The element that the color needs to be applied to.
         */
        element: outputs.quicksight.AnalysisDataPathValue;
        /**
         * The time granularity of the field that the color needs to be applied to.
         */
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
    }

    export interface AnalysisDataPathLabelType {
        /**
         * The field ID of the field that the data label needs to be applied to.
         */
        fieldId?: string;
        /**
         * The actual value of the field that is labeled.
         */
        fieldValue?: string;
        /**
         * The visibility of the data label.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisDataPathSort {
        /**
         * Determines the sort direction.
         */
        direction: enums.quicksight.AnalysisSortDirection;
        /**
         * The list of data paths that need to be sorted.
         */
        sortPaths: outputs.quicksight.AnalysisDataPathValue[];
    }

    export interface AnalysisDataPathType {
        /**
         * The type of data path value utilized in a pivot table. Choose one of the following options:
         *
         * - `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when `RowsLayout` is set to `HIERARCHY` .
         * - `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row is set to Metric Placement.
         * - `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header, when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
         * - `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric, when there is no field in the `ValuesFieldWell` .
         */
        pivotTableDataPathType?: enums.quicksight.AnalysisPivotTableDataPathType;
    }

    export interface AnalysisDataPathValue {
        /**
         * The type configuration of the field.
         */
        dataPathType?: outputs.quicksight.AnalysisDataPathType;
        /**
         * The field ID of the field that needs to be sorted.
         */
        fieldId?: string;
        /**
         * The actual value of the field that needs to be sorted.
         */
        fieldValue?: string;
    }

    export interface AnalysisDataSetIdentifierDeclaration {
        /**
         * The Amazon Resource Name (ARN) of the data set.
         */
        dataSetArn: string;
        /**
         * The identifier of the data set, typically the data set's name.
         */
        identifier: string;
    }

    /**
     * <p>Dataset reference.</p>
     */
    export interface AnalysisDataSetReference {
        /**
         * <p>Dataset Amazon Resource Name (ARN).</p>
         */
        dataSetArn: string;
        /**
         * <p>Dataset placeholder.</p>
         */
        dataSetPlaceholder: string;
    }

    export interface AnalysisDateAxisOptions {
        /**
         * Determines whether or not missing dates are displayed.
         */
        missingDateVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisDateDimensionField {
        /**
         * The column that is used in the `DateDimensionField` .
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The date granularity of the `DateDimensionField` . Choose one of the following options:
         *
         * - `YEAR`
         * - `QUARTER`
         * - `MONTH`
         * - `WEEK`
         * - `DAY`
         * - `HOUR`
         * - `MINUTE`
         * - `SECOND`
         * - `MILLISECOND`
         */
        dateGranularity?: enums.quicksight.AnalysisTimeGranularity;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.AnalysisDateTimeFormatConfiguration;
        /**
         * The custom hierarchy ID.
         */
        hierarchyId?: string;
    }

    export interface AnalysisDateMeasureField {
        /**
         * The aggregation function of the measure field.
         */
        aggregationFunction?: enums.quicksight.AnalysisDateAggregationFunction;
        /**
         * The column that is used in the `DateMeasureField` .
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.AnalysisDateTimeFormatConfiguration;
    }

    export interface AnalysisDateTimeDefaultValues {
        /**
         * The dynamic value of the `DataTimeDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.AnalysisDynamicDefaultValue;
        /**
         * The rolling date of the `DataTimeDefaultValues` . The date is determined from the dataset based on input expression.
         */
        rollingDate?: outputs.quicksight.AnalysisRollingDateConfiguration;
        /**
         * The static values of the `DataTimeDefaultValues` .
         */
        staticValues?: string[];
    }

    export interface AnalysisDateTimeFormatConfiguration {
        /**
         * Determines the `DateTime` format.
         */
        dateTimeFormat?: string;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        /**
         * The formatting configuration for numeric `DateTime` fields.
         */
        numericFormatConfiguration?: outputs.quicksight.AnalysisNumericFormatConfiguration;
    }

    export interface AnalysisDateTimeHierarchy {
        /**
         * The option that determines the drill down filters for the `DateTime` hierarchy.
         */
        drillDownFilters?: outputs.quicksight.AnalysisDrillDownFilter[];
        /**
         * The hierarchy ID of the `DateTime` hierarchy.
         */
        hierarchyId: string;
    }

    /**
     * <p>A date-time parameter.</p>
     */
    export interface AnalysisDateTimeParameter {
        /**
         * <p>A display name for the date-time parameter.</p>
         */
        name: string;
        /**
         * <p>The values for the date-time parameter.</p>
         */
        values: string[];
    }

    export interface AnalysisDateTimeParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.AnalysisDateTimeDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.AnalysisMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
        /**
         * The configuration that defines the default value of a `DateTime` parameter when a value has not been set.
         */
        valueWhenUnset?: outputs.quicksight.AnalysisDateTimeValueWhenUnsetConfiguration;
    }

    export interface AnalysisDateTimePickerControlDisplayOptions {
        /**
         * Customize how dates are formatted in controls.
         */
        dateTimeFormat?: string;
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisDateTimeValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: string;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.AnalysisValueWhenUnsetOption;
    }

    export interface AnalysisDecimalDefaultValues {
        /**
         * The dynamic value of the `DecimalDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.AnalysisDynamicDefaultValue;
        /**
         * The static values of the `DecimalDefaultValues` .
         */
        staticValues?: number[];
    }

    /**
     * <p>A decimal parameter.</p>
     */
    export interface AnalysisDecimalParameter {
        /**
         * <p>A display name for the decimal parameter.</p>
         */
        name: string;
        /**
         * <p>The values for the decimal parameter.</p>
         */
        values: number[];
    }

    export interface AnalysisDecimalParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.AnalysisDecimalDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.AnalysisMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The value type determines whether the parameter is a single-value or multi-value parameter.
         */
        parameterValueType: enums.quicksight.AnalysisParameterValueType;
        /**
         * The configuration that defines the default value of a `Decimal` parameter when a value has not been set.
         */
        valueWhenUnset?: outputs.quicksight.AnalysisDecimalValueWhenUnsetConfiguration;
    }

    export interface AnalysisDecimalPlacesConfiguration {
        /**
         * The values of the decimal places.
         */
        decimalPlaces: number;
    }

    export interface AnalysisDecimalValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: number;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.AnalysisValueWhenUnsetOption;
    }

    export interface AnalysisDefaultDateTimePickerControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisDateTimePickerControlDisplayOptions;
        /**
         * The date time picker type of the `DefaultDateTimePickerControlOptions` . Choose one of the following options:
         *
         * - `SINGLE_VALUED` : The filter condition is a fixed date.
         * - `DATE_RANGE` : The filter condition is a date time range.
         */
        type?: enums.quicksight.AnalysisSheetControlDateTimePickerType;
    }

    export interface AnalysisDefaultFilterControlConfiguration {
        /**
         * The control option for the `DefaultFilterControlConfiguration` .
         */
        controlOptions: outputs.quicksight.AnalysisDefaultFilterControlOptions;
        /**
         * The title of the `DefaultFilterControlConfiguration` . This title is shared by all controls that are tied to this filter.
         */
        title: string;
    }

    export interface AnalysisDefaultFilterControlOptions {
        /**
         * The default options that correspond to the filter control type of a `DateTimePicker` .
         */
        defaultDateTimePickerOptions?: outputs.quicksight.AnalysisDefaultDateTimePickerControlOptions;
        /**
         * The default options that correspond to the `Dropdown` filter control type.
         */
        defaultDropdownOptions?: outputs.quicksight.AnalysisDefaultFilterDropDownControlOptions;
        /**
         * The default options that correspond to the `List` filter control type.
         */
        defaultListOptions?: outputs.quicksight.AnalysisDefaultFilterListControlOptions;
        /**
         * The default options that correspond to the `RelativeDateTime` filter control type.
         */
        defaultRelativeDateTimeOptions?: outputs.quicksight.AnalysisDefaultRelativeDateTimeControlOptions;
        /**
         * The default options that correspond to the `Slider` filter control type.
         */
        defaultSliderOptions?: outputs.quicksight.AnalysisDefaultSliderControlOptions;
        /**
         * The default options that correspond to the `TextArea` filter control type.
         */
        defaultTextAreaOptions?: outputs.quicksight.AnalysisDefaultTextAreaControlOptions;
        /**
         * The default options that correspond to the `TextField` filter control type.
         */
        defaultTextFieldOptions?: outputs.quicksight.AnalysisDefaultTextFieldControlOptions;
    }

    export interface AnalysisDefaultFilterDropDownControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisDropDownControlDisplayOptions;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.AnalysisFilterSelectableValues;
        /**
         * The type of the `FilterDropDownControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
         * - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
         */
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisDefaultFilterListControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisListControlDisplayOptions;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.AnalysisFilterSelectableValues;
        /**
         * The type of the `DefaultFilterListControlOptions` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from the list.
         * - `SINGLE_SELECT` : The user can select a single entry from the list.
         */
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisDefaultFreeFormLayoutConfiguration {
        /**
         * Determines the screen canvas size options for a free-form layout.
         */
        canvasSizeOptions: outputs.quicksight.AnalysisFreeFormLayoutCanvasSizeOptions;
    }

    export interface AnalysisDefaultGridLayoutConfiguration {
        /**
         * Determines the screen canvas size options for a grid layout.
         */
        canvasSizeOptions: outputs.quicksight.AnalysisGridLayoutCanvasSizeOptions;
    }

    export interface AnalysisDefaultInteractiveLayoutConfiguration {
        /**
         * The options that determine the default settings of a free-form layout configuration.
         */
        freeForm?: outputs.quicksight.AnalysisDefaultFreeFormLayoutConfiguration;
        /**
         * The options that determine the default settings for a grid layout configuration.
         */
        grid?: outputs.quicksight.AnalysisDefaultGridLayoutConfiguration;
    }

    export interface AnalysisDefaultNewSheetConfiguration {
        /**
         * The options that determine the default settings for interactive layout configuration.
         */
        interactiveLayoutConfiguration?: outputs.quicksight.AnalysisDefaultInteractiveLayoutConfiguration;
        /**
         * The options that determine the default settings for a paginated layout configuration.
         */
        paginatedLayoutConfiguration?: outputs.quicksight.AnalysisDefaultPaginatedLayoutConfiguration;
        /**
         * The option that determines the sheet content type.
         */
        sheetContentType?: enums.quicksight.AnalysisSheetContentType;
    }

    export interface AnalysisDefaultPaginatedLayoutConfiguration {
        /**
         * The options that determine the default settings for a section-based layout configuration.
         */
        sectionBased?: outputs.quicksight.AnalysisDefaultSectionBasedLayoutConfiguration;
    }

    export interface AnalysisDefaultRelativeDateTimeControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisRelativeDateTimeControlDisplayOptions;
    }

    export interface AnalysisDefaultSectionBasedLayoutConfiguration {
        /**
         * Determines the screen canvas size options for a section-based layout.
         */
        canvasSizeOptions: outputs.quicksight.AnalysisSectionBasedLayoutCanvasSizeOptions;
    }

    export interface AnalysisDefaultSliderControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisSliderControlDisplayOptions;
        /**
         * The larger value that is displayed at the right of the slider.
         */
        maximumValue: number;
        /**
         * The smaller value that is displayed at the left of the slider.
         */
        minimumValue: number;
        /**
         * The number of increments that the slider bar is divided into.
         */
        stepSize: number;
        /**
         * The type of the `DefaultSliderControlOptions` . Choose one of the following options:
         *
         * - `SINGLE_POINT` : Filter against(equals) a single data point.
         * - `RANGE` : Filter data that is in a specified range.
         */
        type?: enums.quicksight.AnalysisSheetControlSliderType;
    }

    export interface AnalysisDefaultTextAreaControlOptions {
        /**
         * The delimiter that is used to separate the lines in text.
         */
        delimiter?: string;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisTextAreaControlDisplayOptions;
    }

    export interface AnalysisDefaultTextFieldControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisTextFieldControlDisplayOptions;
    }

    export interface AnalysisDefaults {
        /**
         * The configuration for default new sheet settings.
         */
        defaultNewSheetConfiguration: outputs.quicksight.AnalysisDefaultNewSheetConfiguration;
    }

    export interface AnalysisDefinition {
        analysisDefaults?: outputs.quicksight.AnalysisDefaults;
        /**
         * An array of calculated field definitions for the analysis.
         */
        calculatedFields?: outputs.quicksight.AnalysisCalculatedField[];
        /**
         * An array of analysis-level column configurations. Column configurations can be used to set default formatting for a column to be used throughout an analysis.
         */
        columnConfigurations?: outputs.quicksight.AnalysisColumnConfiguration[];
        /**
         * An array of dataset identifier declarations. This mapping allows the usage of dataset identifiers instead of dataset ARNs throughout analysis sub-structures.
         */
        dataSetIdentifierDeclarations: outputs.quicksight.AnalysisDataSetIdentifierDeclaration[];
        /**
         * Filter definitions for an analysis.
         *
         * For more information, see [Filtering Data in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the *Amazon QuickSight User Guide* .
         */
        filterGroups?: outputs.quicksight.AnalysisFilterGroup[];
        /**
         * An array of option definitions for an analysis.
         */
        options?: outputs.quicksight.AnalysisAssetOptions;
        /**
         * An array of parameter declarations for an analysis.
         *
         * Parameters are named variables that can transfer a value for use by an action or an object.
         *
         * For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
         */
        parameterDeclarations?: outputs.quicksight.AnalysisParameterDeclaration[];
        /**
         * An array of sheet definitions for an analysis. Each `SheetDefinition` provides detailed information about a sheet within this analysis.
         */
        sheets?: outputs.quicksight.AnalysisSheetDefinition[];
    }

    export interface AnalysisDestinationParameterValueConfiguration {
        /**
         * The configuration of custom values for destination parameter in `DestinationParameterValueConfiguration` .
         */
        customValuesConfiguration?: outputs.quicksight.AnalysisCustomValuesConfiguration;
        /**
         * The configuration that selects all options.
         */
        selectAllValueOptions?: enums.quicksight.AnalysisSelectAllValueOptions;
        sourceColumn?: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The source field ID of the destination parameter.
         */
        sourceField?: string;
        /**
         * The source parameter name of the destination parameter.
         */
        sourceParameterName?: string;
    }

    export interface AnalysisDimensionField {
        /**
         * The dimension type field with categorical type columns.
         */
        categoricalDimensionField?: outputs.quicksight.AnalysisCategoricalDimensionField;
        /**
         * The dimension type field with date type columns.
         */
        dateDimensionField?: outputs.quicksight.AnalysisDateDimensionField;
        /**
         * The dimension type field with numerical type columns.
         */
        numericalDimensionField?: outputs.quicksight.AnalysisNumericalDimensionField;
    }

    export interface AnalysisDonutCenterOptions {
        /**
         * Determines the visibility of the label in a donut chart. In the Amazon QuickSight console, this option is called `'Show total'` .
         */
        labelVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisDonutOptions {
        /**
         * The option for define the arc of the chart shape. Valid values are as follows:
         *
         * - `WHOLE` - A pie chart
         * - `SMALL` - A small-sized donut chart
         * - `MEDIUM` - A medium-sized donut chart
         * - `LARGE` - A large-sized donut chart
         */
        arcOptions?: outputs.quicksight.AnalysisArcOptions;
        /**
         * The label options of the label that is displayed in the center of a donut chart. This option isn't available for pie charts.
         */
        donutCenterOptions?: outputs.quicksight.AnalysisDonutCenterOptions;
    }

    export interface AnalysisDrillDownFilter {
        /**
         * The category type drill down filter. This filter is used for string type columns.
         */
        categoryFilter?: outputs.quicksight.AnalysisCategoryDrillDownFilter;
        /**
         * The numeric equality type drill down filter. This filter is used for number type columns.
         */
        numericEqualityFilter?: outputs.quicksight.AnalysisNumericEqualityDrillDownFilter;
        /**
         * The time range drill down filter. This filter is used for date time columns.
         */
        timeRangeFilter?: outputs.quicksight.AnalysisTimeRangeDrillDownFilter;
    }

    export interface AnalysisDropDownControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the `Select all` options in a dropdown control.
         */
        selectAllOptions?: outputs.quicksight.AnalysisListControlSelectAllOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisDynamicDefaultValue {
        /**
         * The column that contains the default value of each user or group.
         */
        defaultValueColumn: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The column that contains the group name.
         */
        groupNameColumn?: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The column that contains the username.
         */
        userNameColumn?: outputs.quicksight.AnalysisColumnIdentifier;
    }

    export interface AnalysisEmptyVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The data set that is used in the empty visual. Every visual requires a dataset to render.
         */
        dataSetIdentifier: string;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisEntity {
        /**
         * The hierarchical path of the entity within the analysis, template, or dashboard definition tree.
         */
        path?: string;
    }

    /**
     * <p>Analysis error.</p>
     */
    export interface AnalysisError {
        /**
         * <p>The message associated with the analysis error.</p>
         */
        message?: string;
        /**
         * The type of the analysis error.
         */
        type?: enums.quicksight.AnalysisErrorType;
        /**
         * <p>Lists the violated entities that caused the analysis error</p>
         */
        violatedEntities?: outputs.quicksight.AnalysisEntity[];
    }

    export interface AnalysisExcludePeriodConfiguration {
        /**
         * The amount or number of the exclude period.
         */
        amount: number;
        /**
         * The granularity or unit (day, month, year) of the exclude period.
         */
        granularity: enums.quicksight.AnalysisTimeGranularity;
        /**
         * The status of the exclude period. Choose from the following options:
         *
         * - `ENABLED`
         * - `DISABLED`
         */
        status?: enums.quicksight.AnalysisWidgetStatus;
    }

    export interface AnalysisExplicitHierarchy {
        /**
         * The list of columns that define the explicit hierarchy.
         */
        columns: outputs.quicksight.AnalysisColumnIdentifier[];
        /**
         * The option that determines the drill down filters for the explicit hierarchy.
         */
        drillDownFilters?: outputs.quicksight.AnalysisDrillDownFilter[];
        /**
         * The hierarchy ID of the explicit hierarchy.
         */
        hierarchyId: string;
    }

    export interface AnalysisFieldBasedTooltip {
        /**
         * The visibility of `Show aggregations` .
         */
        aggregationVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The fields configuration in the tooltip.
         */
        tooltipFields?: outputs.quicksight.AnalysisTooltipItem[];
        /**
         * The type for the >tooltip title. Choose one of the following options:
         *
         * - `NONE` : Doesn't use the primary value as the title.
         * - `PRIMARY_VALUE` : Uses primary value as the title.
         */
        tooltipTitleType?: enums.quicksight.AnalysisTooltipTitleType;
    }

    export interface AnalysisFieldLabelType {
        /**
         * Indicates the field that is targeted by the field label.
         */
        fieldId?: string;
        /**
         * The visibility of the field label.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFieldSeriesItem {
        /**
         * The axis that you are binding the field to.
         */
        axisBinding: enums.quicksight.AnalysisAxisBinding;
        /**
         * The field ID of the field for which you are setting the axis binding.
         */
        fieldId: string;
        /**
         * The options that determine the presentation of line series associated to the field.
         */
        settings?: outputs.quicksight.AnalysisLineChartSeriesSettings;
    }

    export interface AnalysisFieldSort {
        /**
         * The sort direction. Choose one of the following options:
         *
         * - `ASC` : Ascending
         * - `DESC` : Descending
         */
        direction: enums.quicksight.AnalysisSortDirection;
        /**
         * The sort configuration target field.
         */
        fieldId: string;
    }

    export interface AnalysisFieldSortOptions {
        /**
         * The sort configuration for a column that is not used in a field well.
         */
        columnSort?: outputs.quicksight.AnalysisColumnSort;
        /**
         * The sort configuration for a field in a field well.
         */
        fieldSort?: outputs.quicksight.AnalysisFieldSort;
    }

    export interface AnalysisFieldTooltipItem {
        /**
         * The unique ID of the field that is targeted by the tooltip.
         */
        fieldId: string;
        /**
         * The label of the tooltip item.
         */
        label?: string;
        /**
         * The visibility of the tooltip item.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFilledMapAggregatedFieldWells {
        /**
         * The aggregated location field well of the filled map. Values are grouped by location fields.
         */
        geospatial?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The aggregated color field well of a filled map. Values are aggregated based on location fields.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisFilledMapConditionalFormatting {
        /**
         * Conditional formatting options of a `FilledMapVisual` .
         */
        conditionalFormattingOptions: outputs.quicksight.AnalysisFilledMapConditionalFormattingOption[];
    }

    export interface AnalysisFilledMapConditionalFormattingOption {
        /**
         * The conditional formatting that determines the shape of the filled map.
         */
        shape: outputs.quicksight.AnalysisFilledMapShapeConditionalFormatting;
    }

    export interface AnalysisFilledMapConfiguration {
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisFilledMapFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The map style options of the filled map visual.
         */
        mapStyleOptions?: outputs.quicksight.AnalysisGeospatialMapStyleOptions;
        /**
         * The sort configuration of a `FilledMapVisual` .
         */
        sortConfiguration?: outputs.quicksight.AnalysisFilledMapSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * The window options of the filled map visual.
         */
        windowOptions?: outputs.quicksight.AnalysisGeospatialWindowOptions;
    }

    export interface AnalysisFilledMapFieldWells {
        /**
         * The aggregated field well of the filled map.
         */
        filledMapAggregatedFieldWells?: outputs.quicksight.AnalysisFilledMapAggregatedFieldWells;
    }

    export interface AnalysisFilledMapShapeConditionalFormatting {
        /**
         * The field ID of the filled map shape.
         */
        fieldId: string;
        /**
         * The conditional formatting that determines the background color of a filled map's shape.
         */
        format?: outputs.quicksight.AnalysisShapeConditionalFormat;
    }

    export interface AnalysisFilledMapSortConfiguration {
        /**
         * The sort configuration of the location fields.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisFilledMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisFilledMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The conditional formatting of a `FilledMapVisual` .
         */
        conditionalFormatting?: outputs.quicksight.AnalysisFilledMapConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface AnalysisFilter {
        /**
         * A `CategoryFilter` filters text values.
         *
         * For more information, see [Adding text filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html) in the *Amazon QuickSight User Guide* .
         */
        categoryFilter?: outputs.quicksight.AnalysisCategoryFilter;
        /**
         * A `NumericEqualityFilter` filters numeric values that equal or do not equal a given numeric value.
         */
        numericEqualityFilter?: outputs.quicksight.AnalysisNumericEqualityFilter;
        /**
         * A `NumericRangeFilter` filters numeric values that are either inside or outside a given numeric range.
         */
        numericRangeFilter?: outputs.quicksight.AnalysisNumericRangeFilter;
        /**
         * A `RelativeDatesFilter` filters date values that are relative to a given date.
         */
        relativeDatesFilter?: outputs.quicksight.AnalysisRelativeDatesFilter;
        /**
         * A `TimeEqualityFilter` filters date-time values that equal or do not equal a given date/time value.
         */
        timeEqualityFilter?: outputs.quicksight.AnalysisTimeEqualityFilter;
        /**
         * A `TimeRangeFilter` filters date-time values that are either inside or outside a given date/time range.
         */
        timeRangeFilter?: outputs.quicksight.AnalysisTimeRangeFilter;
        /**
         * A `TopBottomFilter` filters data to the top or bottom values for a given column.
         */
        topBottomFilter?: outputs.quicksight.AnalysisTopBottomFilter;
    }

    export interface AnalysisFilterControl {
        /**
         * A control from a filter that is scoped across more than one sheet. This represents your filter control on a sheet
         */
        crossSheet?: outputs.quicksight.AnalysisFilterCrossSheetControl;
        /**
         * A control from a date filter that is used to specify date and time.
         */
        dateTimePicker?: outputs.quicksight.AnalysisFilterDateTimePickerControl;
        /**
         * A control to display a dropdown list with buttons that are used to select a single value.
         */
        dropdown?: outputs.quicksight.AnalysisFilterDropDownControl;
        /**
         * A control to display a list of buttons or boxes. This is used to select either a single value or multiple values.
         */
        list?: outputs.quicksight.AnalysisFilterListControl;
        /**
         * A control from a date filter that is used to specify the relative date.
         */
        relativeDateTime?: outputs.quicksight.AnalysisFilterRelativeDateTimeControl;
        /**
         * A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
         */
        slider?: outputs.quicksight.AnalysisFilterSliderControl;
        /**
         * A control to display a text box that is used to enter multiple entries.
         */
        textArea?: outputs.quicksight.AnalysisFilterTextAreaControl;
        /**
         * A control to display a text box that is used to enter a single entry.
         */
        textField?: outputs.quicksight.AnalysisFilterTextFieldControl;
    }

    export interface AnalysisFilterCrossSheetControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.AnalysisCascadingControlConfiguration;
        /**
         * The ID of the `FilterCrossSheetControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterCrossSheetControl` .
         */
        sourceFilterId: string;
    }

    export interface AnalysisFilterDateTimePickerControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisDateTimePickerControlDisplayOptions;
        /**
         * The ID of the `FilterDateTimePickerControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterDateTimePickerControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterDateTimePickerControl` .
         */
        title: string;
        /**
         * The type of the `FilterDropDownControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
         * - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
         */
        type?: enums.quicksight.AnalysisSheetControlDateTimePickerType;
    }

    export interface AnalysisFilterDropDownControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.AnalysisCascadingControlConfiguration;
        /**
         * The display options of the `FilterDropDownControl` .
         */
        displayOptions?: outputs.quicksight.AnalysisDropDownControlDisplayOptions;
        /**
         * The ID of the `FilterDropDownControl` .
         */
        filterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.AnalysisFilterSelectableValues;
        /**
         * The source filter ID of the `FilterDropDownControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterDropDownControl` .
         */
        title: string;
        /**
         * The type of the `FilterDropDownControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
         * - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
         */
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisFilterGroup {
        /**
         * The filter new feature which can apply filter group to all data sets. Choose one of the following options:
         *
         * - `ALL_DATASETS`
         * - `SINGLE_DATASET`
         */
        crossDataset: enums.quicksight.AnalysisCrossDatasetTypes;
        /**
         * The value that uniquely identifies a `FilterGroup` within a dashboard, template, or analysis.
         */
        filterGroupId: string;
        /**
         * The list of filters that are present in a `FilterGroup` .
         */
        filters: outputs.quicksight.AnalysisFilter[];
        /**
         * The configuration that specifies what scope to apply to a `FilterGroup` .
         *
         * This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
         */
        scopeConfiguration: outputs.quicksight.AnalysisFilterScopeConfiguration;
        /**
         * The status of the `FilterGroup` .
         */
        status?: enums.quicksight.AnalysisWidgetStatus;
    }

    export interface AnalysisFilterListConfiguration {
        /**
         * The list of category values for the filter.
         */
        categoryValues?: string[];
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.AnalysisCategoryFilterMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption?: enums.quicksight.AnalysisFilterNullOption;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.AnalysisCategoryFilterSelectAllOptions;
    }

    export interface AnalysisFilterListControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.AnalysisCascadingControlConfiguration;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisListControlDisplayOptions;
        /**
         * The ID of the `FilterListControl` .
         */
        filterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.AnalysisFilterSelectableValues;
        /**
         * The source filter ID of the `FilterListControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterListControl` .
         */
        title: string;
        /**
         * The type of the `FilterListControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from the list.
         * - `SINGLE_SELECT` : The user can select a single entry from the list.
         */
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisFilterOperationSelectedFieldsConfiguration {
        /**
         * <p>The selected columns of a dataset.</p>
         */
        selectedColumns?: outputs.quicksight.AnalysisColumnIdentifier[];
        /**
         * A structure that contains the options that choose which fields are filtered in the `CustomActionFilterOperation` .
         *
         * Valid values are defined as follows:
         *
         * - `ALL_FIELDS` : Applies the filter operation to all fields.
         */
        selectedFieldOptions?: enums.quicksight.AnalysisSelectedFieldOptions;
        /**
         * Chooses the fields that are filtered in `CustomActionFilterOperation` .
         */
        selectedFields?: string[];
    }

    export interface AnalysisFilterOperationTargetVisualsConfiguration {
        /**
         * The configuration of the same-sheet target visuals that you want to be filtered.
         */
        sameSheetTargetVisualConfiguration?: outputs.quicksight.AnalysisSameSheetTargetVisualConfiguration;
    }

    export interface AnalysisFilterRelativeDateTimeControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisRelativeDateTimeControlDisplayOptions;
        /**
         * The ID of the `FilterTextAreaControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterTextAreaControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterTextAreaControl` .
         */
        title: string;
    }

    export interface AnalysisFilterScopeConfiguration {
        /**
         * The configuration that applies a filter to all sheets. When you choose `AllSheets` as the value for a `FilterScopeConfiguration` , this filter is applied to all visuals of all sheets in an Analysis, Dashboard, or Template. The `AllSheetsFilterScopeConfiguration` is chosen.
         */
        allSheets?: outputs.quicksight.AnalysisAllSheetsFilterScopeConfiguration;
        /**
         * The configuration for applying a filter to specific sheets.
         */
        selectedSheets?: outputs.quicksight.AnalysisSelectedSheetsFilterScopeConfiguration;
    }

    export interface AnalysisFilterSelectableValues {
        /**
         * The values that are used in the `FilterSelectableValues` .
         */
        values?: string[];
    }

    export interface AnalysisFilterSliderControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisSliderControlDisplayOptions;
        /**
         * The ID of the `FilterSliderControl` .
         */
        filterControlId: string;
        /**
         * The larger value that is displayed at the right of the slider.
         */
        maximumValue: number;
        /**
         * The smaller value that is displayed at the left of the slider.
         */
        minimumValue: number;
        /**
         * The source filter ID of the `FilterSliderControl` .
         */
        sourceFilterId: string;
        /**
         * The number of increments that the slider bar is divided into.
         */
        stepSize: number;
        /**
         * The title of the `FilterSliderControl` .
         */
        title: string;
        /**
         * The type of the `FilterSliderControl` . Choose one of the following options:
         *
         * - `SINGLE_POINT` : Filter against(equals) a single data point.
         * - `RANGE` : Filter data that is in a specified range.
         */
        type?: enums.quicksight.AnalysisSheetControlSliderType;
    }

    export interface AnalysisFilterTextAreaControl {
        /**
         * The delimiter that is used to separate the lines in text.
         */
        delimiter?: string;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisTextAreaControlDisplayOptions;
        /**
         * The ID of the `FilterTextAreaControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterTextAreaControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterTextAreaControl` .
         */
        title: string;
    }

    export interface AnalysisFilterTextFieldControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisTextFieldControlDisplayOptions;
        /**
         * The ID of the `FilterTextFieldControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterTextFieldControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterTextFieldControl` .
         */
        title: string;
    }

    export interface AnalysisFontConfiguration {
        /**
         * Determines the color of the text.
         */
        fontColor?: string;
        /**
         * Determines the appearance of decorative lines on the text.
         */
        fontDecoration?: enums.quicksight.AnalysisFontDecoration;
        /**
         * The option that determines the text display size.
         */
        fontSize?: outputs.quicksight.AnalysisFontSize;
        /**
         * Determines the text display face that is inherited by the given font family.
         */
        fontStyle?: enums.quicksight.AnalysisFontStyle;
        /**
         * The option that determines the text display weight, or boldness.
         */
        fontWeight?: outputs.quicksight.AnalysisFontWeight;
    }

    export interface AnalysisFontSize {
        /**
         * The lexical name for the text size, proportional to its surrounding context.
         */
        relative?: enums.quicksight.AnalysisRelativeFontSize;
    }

    export interface AnalysisFontWeight {
        /**
         * The lexical name for the level of boldness of the text display.
         */
        name?: enums.quicksight.AnalysisFontWeightName;
    }

    export interface AnalysisForecastComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The custom seasonality value setup of a forecast computation.
         */
        customSeasonalityValue?: number;
        /**
         * The lower boundary setup of a forecast computation.
         */
        lowerBoundary?: number;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The periods backward setup of a forecast computation.
         */
        periodsBackward?: number;
        /**
         * The periods forward setup of a forecast computation.
         */
        periodsForward?: number;
        /**
         * The prediction interval setup of a forecast computation.
         */
        predictionInterval?: number;
        /**
         * The seasonality setup of a forecast computation. Choose one of the following options:
         *
         * - `AUTOMATIC`
         * - `CUSTOM` : Checks the custom seasonality value.
         */
        seasonality?: enums.quicksight.AnalysisForecastComputationSeasonality;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.AnalysisDimensionField;
        /**
         * The upper boundary setup of a forecast computation.
         */
        upperBoundary?: number;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisForecastConfiguration {
        /**
         * The forecast properties setup of a forecast in the line chart.
         */
        forecastProperties?: outputs.quicksight.AnalysisTimeBasedForecastProperties;
        /**
         * The forecast scenario of a forecast in the line chart.
         */
        scenario?: outputs.quicksight.AnalysisForecastScenario;
    }

    export interface AnalysisForecastScenario {
        /**
         * The what-if analysis forecast setup with the target date.
         */
        whatIfPointScenario?: outputs.quicksight.AnalysisWhatIfPointScenario;
        /**
         * The what-if analysis forecast setup with the date range.
         */
        whatIfRangeScenario?: outputs.quicksight.AnalysisWhatIfRangeScenario;
    }

    export interface AnalysisFormatConfiguration {
        /**
         * Formatting configuration for `DateTime` fields.
         */
        dateTimeFormatConfiguration?: outputs.quicksight.AnalysisDateTimeFormatConfiguration;
        /**
         * Formatting configuration for number fields.
         */
        numberFormatConfiguration?: outputs.quicksight.AnalysisNumberFormatConfiguration;
        /**
         * Formatting configuration for string fields.
         */
        stringFormatConfiguration?: outputs.quicksight.AnalysisStringFormatConfiguration;
    }

    export interface AnalysisFreeFormLayoutCanvasSizeOptions {
        /**
         * The options that determine the sizing of the canvas used in a free-form layout.
         */
        screenCanvasSizeOptions?: outputs.quicksight.AnalysisFreeFormLayoutScreenCanvasSizeOptions;
    }

    export interface AnalysisFreeFormLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.AnalysisFreeFormLayoutCanvasSizeOptions;
        /**
         * The elements that are included in a free-form layout.
         */
        elements: outputs.quicksight.AnalysisFreeFormLayoutElement[];
    }

    export interface AnalysisFreeFormLayoutElement {
        /**
         * The background style configuration of a free-form layout element.
         */
        backgroundStyle?: outputs.quicksight.AnalysisFreeFormLayoutElementBackgroundStyle;
        /**
         * The border style configuration of a free-form layout element.
         */
        borderStyle?: outputs.quicksight.AnalysisFreeFormLayoutElementBorderStyle;
        /**
         * A unique identifier for an element within a free-form layout.
         */
        elementId: string;
        /**
         * The type of element.
         */
        elementType: enums.quicksight.AnalysisLayoutElementType;
        /**
         * String based length that is composed of value and unit in px
         */
        height: string;
        /**
         * The loading animation configuration of a free-form layout element.
         */
        loadingAnimation?: outputs.quicksight.AnalysisLoadingAnimation;
        /**
         * The rendering rules that determine when an element should be displayed within a free-form layout.
         */
        renderingRules?: outputs.quicksight.AnalysisSheetElementRenderingRule[];
        /**
         * The border style configuration of a free-form layout element. This border style is used when the element is selected.
         */
        selectedBorderStyle?: outputs.quicksight.AnalysisFreeFormLayoutElementBorderStyle;
        /**
         * The visibility of an element within a free-form layout.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width: string;
        /**
         * String based length that is composed of value and unit in px
         */
        xAxisLocation: string;
        /**
         * String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
         */
        yAxisLocation: string;
    }

    export interface AnalysisFreeFormLayoutElementBackgroundStyle {
        /**
         * The background color of a free-form layout element.
         */
        color?: string;
        /**
         * The background visibility of a free-form layout element.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFreeFormLayoutElementBorderStyle {
        /**
         * The border color of a free-form layout element.
         */
        color?: string;
        /**
         * The border visibility of a free-form layout element.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFreeFormLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth: string;
    }

    export interface AnalysisFreeFormSectionLayoutConfiguration {
        /**
         * The elements that are included in the free-form layout.
         */
        elements: outputs.quicksight.AnalysisFreeFormLayoutElement[];
    }

    export interface AnalysisFunnelChartAggregatedFieldWells {
        /**
         * The category field wells of a funnel chart. Values are grouped by category fields.
         */
        category?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The value field wells of a funnel chart. Values are aggregated based on categories.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisFunnelChartConfiguration {
        /**
         * The label options of the categories that are displayed in a `FunnelChartVisual` .
         */
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The options that determine the presentation of the data labels.
         */
        dataLabelOptions?: outputs.quicksight.AnalysisFunnelChartDataLabelOptions;
        /**
         * The field well configuration of a `FunnelChartVisual` .
         */
        fieldWells?: outputs.quicksight.AnalysisFunnelChartFieldWells;
        /**
         * The sort configuration of a `FunnelChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.AnalysisFunnelChartSortConfiguration;
        /**
         * The tooltip configuration of a `FunnelChartVisual` .
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * The label options for the values that are displayed in a `FunnelChartVisual` .
         */
        valueLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The visual palette configuration of a `FunnelChartVisual` .
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisFunnelChartDataLabelOptions {
        /**
         * The visibility of the category labels within the data labels.
         */
        categoryLabelVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The color of the data label text.
         */
        labelColor?: string;
        /**
         * The font configuration for the data labels.
         *
         * Only the `FontSize` attribute of the font configuration is used for data labels.
         */
        labelFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        /**
         * Determines the style of the metric labels.
         */
        measureDataLabelStyle?: enums.quicksight.AnalysisFunnelChartMeasureDataLabelStyle;
        /**
         * The visibility of the measure labels within the data labels.
         */
        measureLabelVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * Determines the positioning of the data label relative to a section of the funnel.
         */
        position?: enums.quicksight.AnalysisDataLabelPosition;
        /**
         * The visibility option that determines if data labels are displayed.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisFunnelChartFieldWells {
        /**
         * The field well configuration of a `FunnelChartVisual` .
         */
        funnelChartAggregatedFieldWells?: outputs.quicksight.AnalysisFunnelChartAggregatedFieldWells;
    }

    export interface AnalysisFunnelChartSortConfiguration {
        /**
         * The limit on the number of categories displayed.
         */
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisFunnelChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration of a `FunnelChartVisual` .
         */
        chartConfiguration?: outputs.quicksight.AnalysisFunnelChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface AnalysisGaugeChartArcConditionalFormatting {
        /**
         * The conditional formatting of the arc foreground color.
         */
        foregroundColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisGaugeChartConditionalFormatting {
        /**
         * Conditional formatting options of a `GaugeChartVisual` .
         */
        conditionalFormattingOptions?: outputs.quicksight.AnalysisGaugeChartConditionalFormattingOption[];
    }

    export interface AnalysisGaugeChartConditionalFormattingOption {
        /**
         * The options that determine the presentation of the arc of a `GaugeChartVisual` .
         */
        arc?: outputs.quicksight.AnalysisGaugeChartArcConditionalFormatting;
        /**
         * The conditional formatting for the primary value of a `GaugeChartVisual` .
         */
        primaryValue?: outputs.quicksight.AnalysisGaugeChartPrimaryValueConditionalFormatting;
    }

    export interface AnalysisGaugeChartConfiguration {
        /**
         * The data label configuration of a `GaugeChartVisual` .
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The field well configuration of a `GaugeChartVisual` .
         */
        fieldWells?: outputs.quicksight.AnalysisGaugeChartFieldWells;
        /**
         * The options that determine the presentation of the `GaugeChartVisual` .
         */
        gaugeChartOptions?: outputs.quicksight.AnalysisGaugeChartOptions;
        /**
         * The tooltip configuration of a `GaugeChartVisual` .
         */
        tooltipOptions?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * The visual palette configuration of a `GaugeChartVisual` .
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisGaugeChartFieldWells {
        /**
         * The target value field wells of a `GaugeChartVisual` .
         */
        targetValues?: outputs.quicksight.AnalysisMeasureField[];
        /**
         * The value field wells of a `GaugeChartVisual` .
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisGaugeChartOptions {
        /**
         * The arc configuration of a `GaugeChartVisual` .
         */
        arc?: outputs.quicksight.AnalysisArcConfiguration;
        /**
         * The arc axis configuration of a `GaugeChartVisual` .
         */
        arcAxis?: outputs.quicksight.AnalysisArcAxisConfiguration;
        /**
         * The comparison configuration of a `GaugeChartVisual` .
         */
        comparison?: outputs.quicksight.AnalysisComparisonConfiguration;
        /**
         * The options that determine the primary value display type.
         */
        primaryValueDisplayType?: enums.quicksight.AnalysisPrimaryValueDisplayType;
        /**
         * The options that determine the primary value font configuration.
         */
        primaryValueFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
    }

    export interface AnalysisGaugeChartPrimaryValueConditionalFormatting {
        /**
         * The conditional formatting of the primary value icon.
         */
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        /**
         * The conditional formatting of the primary value text color.
         */
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisGaugeChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration of a `GaugeChartVisual` .
         */
        chartConfiguration?: outputs.quicksight.AnalysisGaugeChartConfiguration;
        /**
         * The conditional formatting of a `GaugeChartVisual` .
         */
        conditionalFormatting?: outputs.quicksight.AnalysisGaugeChartConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisGeospatialCoordinateBounds {
        /**
         * The longitude of the east bound of the geospatial coordinate bounds.
         */
        east: number;
        /**
         * The latitude of the north bound of the geospatial coordinate bounds.
         */
        north: number;
        /**
         * The latitude of the south bound of the geospatial coordinate bounds.
         */
        south: number;
        /**
         * The longitude of the west bound of the geospatial coordinate bounds.
         */
        west: number;
    }

    export interface AnalysisGeospatialHeatmapColorScale {
        /**
         * The list of colors to be used in heatmap point style.
         */
        colors?: outputs.quicksight.AnalysisGeospatialHeatmapDataColor[];
    }

    export interface AnalysisGeospatialHeatmapConfiguration {
        /**
         * The color scale specification for the heatmap point style.
         */
        heatmapColor?: outputs.quicksight.AnalysisGeospatialHeatmapColorScale;
    }

    export interface AnalysisGeospatialHeatmapDataColor {
        /**
         * The hex color to be used in the heatmap point style.
         */
        color: string;
    }

    export interface AnalysisGeospatialMapAggregatedFieldWells {
        /**
         * The color field wells of a geospatial map.
         */
        colors?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The geospatial field wells of a geospatial map. Values are grouped by geospatial fields.
         */
        geospatial?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The size field wells of a geospatial map. Values are aggregated based on geospatial fields.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisGeospatialMapConfiguration {
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisGeospatialMapFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The map style options of the geospatial map.
         */
        mapStyleOptions?: outputs.quicksight.AnalysisGeospatialMapStyleOptions;
        /**
         * The point style options of the geospatial map.
         */
        pointStyleOptions?: outputs.quicksight.AnalysisGeospatialPointStyleOptions;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        /**
         * The window options of the geospatial map.
         */
        windowOptions?: outputs.quicksight.AnalysisGeospatialWindowOptions;
    }

    export interface AnalysisGeospatialMapFieldWells {
        /**
         * The aggregated field well for a geospatial map.
         */
        geospatialMapAggregatedFieldWells?: outputs.quicksight.AnalysisGeospatialMapAggregatedFieldWells;
    }

    export interface AnalysisGeospatialMapStyleOptions {
        /**
         * The base map style of the geospatial map.
         */
        baseMapStyle?: enums.quicksight.AnalysisBaseMapStyleType;
    }

    export interface AnalysisGeospatialMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisGeospatialMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface AnalysisGeospatialPointStyleOptions {
        /**
         * The cluster marker configuration of the geospatial point style.
         */
        clusterMarkerConfiguration?: outputs.quicksight.AnalysisClusterMarkerConfiguration;
        /**
         * The heatmap configuration of the geospatial point style.
         */
        heatmapConfiguration?: outputs.quicksight.AnalysisGeospatialHeatmapConfiguration;
        /**
         * The selected point styles (point, cluster) of the geospatial map.
         */
        selectedPointStyle?: enums.quicksight.AnalysisGeospatialSelectedPointStyle;
    }

    export interface AnalysisGeospatialWindowOptions {
        /**
         * The bounds options (north, south, west, east) of the geospatial window options.
         */
        bounds?: outputs.quicksight.AnalysisGeospatialCoordinateBounds;
        /**
         * The map zoom modes (manual, auto) of the geospatial window options.
         */
        mapZoomMode?: enums.quicksight.AnalysisMapZoomMode;
    }

    export interface AnalysisGlobalTableBorderOptions {
        /**
         * Determines the options for side specific border.
         */
        sideSpecificBorder?: outputs.quicksight.AnalysisTableSideBorderOptions;
        /**
         * Determines the options for uniform border.
         */
        uniformBorder?: outputs.quicksight.AnalysisTableBorderOptions;
    }

    export interface AnalysisGradientColor {
        /**
         * The list of gradient color stops.
         */
        stops?: outputs.quicksight.AnalysisGradientStop[];
    }

    export interface AnalysisGradientStop {
        /**
         * Determines the color.
         */
        color?: string;
        /**
         * Determines the data value.
         */
        dataValue?: number;
        /**
         * Determines gradient offset value.
         */
        gradientOffset: number;
    }

    export interface AnalysisGridLayoutCanvasSizeOptions {
        /**
         * The options that determine the sizing of the canvas used in a grid layout.
         */
        screenCanvasSizeOptions?: outputs.quicksight.AnalysisGridLayoutScreenCanvasSizeOptions;
    }

    export interface AnalysisGridLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.AnalysisGridLayoutCanvasSizeOptions;
        /**
         * The elements that are included in a grid layout.
         */
        elements: outputs.quicksight.AnalysisGridLayoutElement[];
    }

    export interface AnalysisGridLayoutElement {
        /**
         * The column index for the upper left corner of an element.
         */
        columnIndex?: number;
        /**
         * The width of a grid element expressed as a number of grid columns.
         */
        columnSpan: number;
        /**
         * A unique identifier for an element within a grid layout.
         */
        elementId: string;
        /**
         * The type of element.
         */
        elementType: enums.quicksight.AnalysisLayoutElementType;
        /**
         * The row index for the upper left corner of an element.
         */
        rowIndex?: number;
        /**
         * The height of a grid element expressed as a number of grid rows.
         */
        rowSpan: number;
    }

    export interface AnalysisGridLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth?: string;
        /**
         * This value determines the layout behavior when the viewport is resized.
         *
         * - `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight console, this option is called `Classic` .
         * - `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port. In the Amazon QuickSight console, this option is called `Tiled` .
         */
        resizeOption: enums.quicksight.AnalysisResizeOption;
    }

    export interface AnalysisGrowthRateComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The period size setup of a growth rate computation.
         */
        periodSize?: number;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.AnalysisDimensionField;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisHeaderFooterSectionConfiguration {
        /**
         * The layout configuration of the header or footer section.
         */
        layout: outputs.quicksight.AnalysisSectionLayoutConfiguration;
        /**
         * The unique identifier of the header or footer section.
         */
        sectionId: string;
        /**
         * The style options of a header or footer section.
         */
        style?: outputs.quicksight.AnalysisSectionStyle;
    }

    export interface AnalysisHeatMapAggregatedFieldWells {
        /**
         * The columns field well of a heat map.
         */
        columns?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The rows field well of a heat map.
         */
        rows?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The values field well of a heat map.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisHeatMapConfiguration {
        /**
         * The color options (gradient color, point of divergence) in a heat map.
         */
        colorScale?: outputs.quicksight.AnalysisColorScale;
        /**
         * The label options of the column that is displayed in a heat map.
         */
        columnLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisHeatMapFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The label options of the row that is displayed in a `heat map` .
         */
        rowLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The sort configuration of a heat map.
         */
        sortConfiguration?: outputs.quicksight.AnalysisHeatMapSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
    }

    export interface AnalysisHeatMapFieldWells {
        /**
         * The aggregated field wells of a heat map.
         */
        heatMapAggregatedFieldWells?: outputs.quicksight.AnalysisHeatMapAggregatedFieldWells;
    }

    export interface AnalysisHeatMapSortConfiguration {
        /**
         * The limit on the number of columns that are displayed in a heat map.
         */
        heatMapColumnItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The column sort configuration for heat map for columns that aren't a part of a field well.
         */
        heatMapColumnSort?: outputs.quicksight.AnalysisFieldSortOptions[];
        /**
         * The limit on the number of rows that are displayed in a heat map.
         */
        heatMapRowItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The field sort configuration of the rows fields.
         */
        heatMapRowSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisHeatMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration of a heat map.
         */
        chartConfiguration?: outputs.quicksight.AnalysisHeatMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisHistogramAggregatedFieldWells {
        /**
         * The value field wells of a histogram. Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisHistogramBinOptions {
        /**
         * The options that determine the bin count of a histogram.
         */
        binCount?: outputs.quicksight.AnalysisBinCountOptions;
        /**
         * The options that determine the bin width of a histogram.
         */
        binWidth?: outputs.quicksight.AnalysisBinWidthOptions;
        /**
         * The options that determine the selected bin type.
         */
        selectedBinType?: enums.quicksight.AnalysisHistogramBinType;
        /**
         * The options that determine the bin start value.
         */
        startValue?: number;
    }

    export interface AnalysisHistogramConfiguration {
        /**
         * The options that determine the presentation of histogram bins.
         */
        binOptions?: outputs.quicksight.AnalysisHistogramBinOptions;
        /**
         * The data label configuration of a histogram.
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The field well configuration of a histogram.
         */
        fieldWells?: outputs.quicksight.AnalysisHistogramFieldWells;
        /**
         * The tooltip configuration of a histogram.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * The visual palette configuration of a histogram.
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        /**
         * The options that determine the presentation of the x-axis.
         */
        xAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The options that determine the presentation of the x-axis label.
         */
        xAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The options that determine the presentation of the y-axis.
         */
        yAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
    }

    export interface AnalysisHistogramFieldWells {
        /**
         * The field well configuration of a histogram.
         */
        histogramAggregatedFieldWells?: outputs.quicksight.AnalysisHistogramAggregatedFieldWells;
    }

    export interface AnalysisHistogramVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration for a `HistogramVisual` .
         */
        chartConfiguration?: outputs.quicksight.AnalysisHistogramConfiguration;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisInsightConfiguration {
        /**
         * The computations configurations of the insight visual
         */
        computations?: outputs.quicksight.AnalysisComputation[];
        /**
         * The custom narrative of the insight visual.
         */
        customNarrative?: outputs.quicksight.AnalysisCustomNarrativeOptions;
    }

    export interface AnalysisInsightVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The dataset that is used in the insight visual.
         */
        dataSetIdentifier: string;
        /**
         * The configuration of an insight visual.
         */
        insightConfiguration?: outputs.quicksight.AnalysisInsightConfiguration;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisIntegerDefaultValues {
        /**
         * The dynamic value of the `IntegerDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.AnalysisDynamicDefaultValue;
        /**
         * The static values of the `IntegerDefaultValues` .
         */
        staticValues?: number[];
    }

    /**
     * <p>An integer parameter.</p>
     */
    export interface AnalysisIntegerParameter {
        /**
         * <p>The name of the integer parameter.</p>
         */
        name: string;
        /**
         * <p>The values for the integer parameter.</p>
         */
        values: number[];
    }

    export interface AnalysisIntegerParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.AnalysisIntegerDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.AnalysisMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The value type determines whether the parameter is a single-value or multi-value parameter.
         */
        parameterValueType: enums.quicksight.AnalysisParameterValueType;
        /**
         * A parameter declaration for the `Integer` data type.
         */
        valueWhenUnset?: outputs.quicksight.AnalysisIntegerValueWhenUnsetConfiguration;
    }

    export interface AnalysisIntegerValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: number;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.AnalysisValueWhenUnsetOption;
    }

    export interface AnalysisItemsLimitConfiguration {
        /**
         * The limit on how many items of a field are showed in the chart. For example, the number of slices that are displayed in a pie chart.
         */
        itemsLimit?: number;
        /**
         * The `Show other` of an axis in the chart. Choose one of the following options:
         *
         * - `INCLUDE`
         * - `EXCLUDE`
         */
        otherCategories?: enums.quicksight.AnalysisOtherCategories;
    }

    export interface AnalysisKpiActualValueConditionalFormatting {
        /**
         * The conditional formatting of the actual value's icon.
         */
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        /**
         * The conditional formatting of the actual value's text color.
         */
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisKpiComparisonValueConditionalFormatting {
        /**
         * The conditional formatting of the comparison value's icon.
         */
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        /**
         * The conditional formatting of the comparison value's text color.
         */
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisKpiConditionalFormatting {
        /**
         * The conditional formatting options of a KPI visual.
         */
        conditionalFormattingOptions?: outputs.quicksight.AnalysisKpiConditionalFormattingOption[];
    }

    export interface AnalysisKpiConditionalFormattingOption {
        /**
         * The conditional formatting for the actual value of a KPI visual.
         */
        actualValue?: outputs.quicksight.AnalysisKpiActualValueConditionalFormatting;
        /**
         * The conditional formatting for the comparison value of a KPI visual.
         */
        comparisonValue?: outputs.quicksight.AnalysisKpiComparisonValueConditionalFormatting;
        /**
         * The conditional formatting for the primary value of a KPI visual.
         */
        primaryValue?: outputs.quicksight.AnalysisKpiPrimaryValueConditionalFormatting;
        /**
         * The conditional formatting for the progress bar of a KPI visual.
         */
        progressBar?: outputs.quicksight.AnalysisKpiProgressBarConditionalFormatting;
    }

    export interface AnalysisKpiConfiguration {
        /**
         * The field well configuration of a KPI visual.
         */
        fieldWells?: outputs.quicksight.AnalysisKpiFieldWells;
        /**
         * The options that determine the presentation of a KPI visual.
         */
        kpiOptions?: outputs.quicksight.AnalysisKpiOptions;
        /**
         * The sort configuration of a KPI visual.
         */
        sortConfiguration?: outputs.quicksight.AnalysisKpiSortConfiguration;
    }

    export interface AnalysisKpiFieldWells {
        /**
         * The target value field wells of a KPI visual.
         */
        targetValues?: outputs.quicksight.AnalysisMeasureField[];
        /**
         * The trend group field wells of a KPI visual.
         */
        trendGroups?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The value field wells of a KPI visual.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisKpiOptions {
        /**
         * The comparison configuration of a KPI visual.
         */
        comparison?: outputs.quicksight.AnalysisComparisonConfiguration;
        /**
         * The options that determine the primary value display type.
         */
        primaryValueDisplayType?: enums.quicksight.AnalysisPrimaryValueDisplayType;
        /**
         * The options that determine the primary value font configuration.
         */
        primaryValueFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        /**
         * The options that determine the presentation of the progress bar of a KPI visual.
         */
        progressBar?: outputs.quicksight.AnalysisProgressBarOptions;
        /**
         * The options that determine the presentation of the secondary value of a KPI visual.
         */
        secondaryValue?: outputs.quicksight.AnalysisSecondaryValueOptions;
        /**
         * The options that determine the secondary value font configuration.
         */
        secondaryValueFontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        /**
         * The options that determine the visibility, color, type, and tooltip visibility of the sparkline of a KPI visual.
         */
        sparkline?: outputs.quicksight.AnalysisKpiSparklineOptions;
        /**
         * The options that determine the presentation of trend arrows in a KPI visual.
         */
        trendArrows?: outputs.quicksight.AnalysisTrendArrowOptions;
        /**
         * The options that determine the layout a KPI visual.
         */
        visualLayoutOptions?: outputs.quicksight.AnalysisKpiVisualLayoutOptions;
    }

    export interface AnalysisKpiPrimaryValueConditionalFormatting {
        /**
         * The conditional formatting of the primary value's icon.
         */
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        /**
         * The conditional formatting of the primary value's text color.
         */
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisKpiProgressBarConditionalFormatting {
        /**
         * The conditional formatting of the progress bar's foreground color.
         */
        foregroundColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisKpiSortConfiguration {
        /**
         * The sort configuration of the trend group fields.
         */
        trendGroupSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisKpiSparklineOptions {
        /**
         * The color of the sparkline.
         */
        color?: string;
        /**
         * The tooltip visibility of the sparkline.
         */
        tooltipVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The type of the sparkline.
         */
        type: enums.quicksight.AnalysisKpiSparklineType;
        /**
         * The visibility of the sparkline.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisKpiVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration of a KPI visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisKpiConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The conditional formatting of a KPI visual.
         */
        conditionalFormatting?: outputs.quicksight.AnalysisKpiConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisKpiVisualLayoutOptions {
        /**
         * The standard layout of the KPI visual.
         */
        standardLayout?: outputs.quicksight.AnalysisKpiVisualStandardLayout;
    }

    export interface AnalysisKpiVisualStandardLayout {
        /**
         * The standard layout type.
         */
        type: enums.quicksight.AnalysisKpiVisualStandardLayoutType;
    }

    export interface AnalysisLabelOptions {
        /**
         * The text for the label.
         */
        customLabel?: string;
        /**
         * The font configuration of the label.
         */
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        /**
         * Determines whether or not the label is visible.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisLayout {
        /**
         * The configuration that determines what the type of layout for a sheet.
         */
        configuration: outputs.quicksight.AnalysisLayoutConfiguration;
    }

    export interface AnalysisLayoutConfiguration {
        /**
         * A free-form is optimized for a fixed width and has more control over the exact placement of layout elements.
         */
        freeFormLayout?: outputs.quicksight.AnalysisFreeFormLayoutConfiguration;
        /**
         * A type of layout that can be used on a sheet. In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as designed, with options to fit to screen or view at actual size. A grid layout can be configured to behave in one of two ways when the viewport is resized: `FIXED` or `RESPONSIVE` .
         */
        gridLayout?: outputs.quicksight.AnalysisGridLayoutConfiguration;
        /**
         * A section based layout organizes visuals into multiple sections and has customized header, footer and page break.
         */
        sectionBasedLayout?: outputs.quicksight.AnalysisSectionBasedLayoutConfiguration;
    }

    export interface AnalysisLegendOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        /**
         * The positions for the legend. Choose one of the following options:
         *
         * - `AUTO`
         * - `RIGHT`
         * - `BOTTOM`
         * - `LEFT`
         */
        position?: enums.quicksight.AnalysisLegendPosition;
        /**
         * The custom title for the legend.
         */
        title?: outputs.quicksight.AnalysisLabelOptions;
        /**
         * Determines whether or not the legend is visible.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface AnalysisLineChartAggregatedFieldWells {
        /**
         * The category field wells of a line chart. Values are grouped by category fields.
         */
        category?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The color field wells of a line chart. Values are grouped by category fields.
         */
        colors?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The small multiples field well of a line chart.
         */
        smallMultiples?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The value field wells of a line chart. Values are aggregated based on categories.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisLineChartConfiguration {
        /**
         * The default configuration of a line chart's contribution analysis.
         */
        contributionAnalysisDefaults?: outputs.quicksight.AnalysisContributionAnalysisDefault[];
        /**
         * The data label configuration of a line chart.
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The options that determine the default presentation of all line series in `LineChartVisual` .
         */
        defaultSeriesSettings?: outputs.quicksight.AnalysisLineChartDefaultSeriesSettings;
        /**
         * The field well configuration of a line chart.
         */
        fieldWells?: outputs.quicksight.AnalysisLineChartFieldWells;
        /**
         * The forecast configuration of a line chart.
         */
        forecastConfigurations?: outputs.quicksight.AnalysisForecastConfiguration[];
        /**
         * The legend configuration of a line chart.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The series axis configuration of a line chart.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.AnalysisLineSeriesAxisDisplayOptions;
        /**
         * The options that determine the presentation of the y-axis label.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The reference lines configuration of a line chart.
         */
        referenceLines?: outputs.quicksight.AnalysisReferenceLine[];
        /**
         * The series axis configuration of a line chart.
         */
        secondaryYAxisDisplayOptions?: outputs.quicksight.AnalysisLineSeriesAxisDisplayOptions;
        /**
         * The options that determine the presentation of the secondary y-axis label.
         */
        secondaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The series item configuration of a line chart.
         */
        series?: outputs.quicksight.AnalysisSeriesItem[];
        /**
         * The small multiples setup for the visual.
         */
        smallMultiplesOptions?: outputs.quicksight.AnalysisSmallMultiplesOptions;
        /**
         * The sort configuration of a line chart.
         */
        sortConfiguration?: outputs.quicksight.AnalysisLineChartSortConfiguration;
        /**
         * The tooltip configuration of a line chart.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * Determines the type of the line chart.
         */
        type?: enums.quicksight.AnalysisLineChartType;
        /**
         * The visual palette configuration of a line chart.
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        /**
         * The options that determine the presentation of the x-axis.
         */
        xAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The options that determine the presentation of the x-axis label.
         */
        xAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
    }

    export interface AnalysisLineChartDefaultSeriesSettings {
        /**
         * The axis to which you are binding all line series to.
         */
        axisBinding?: enums.quicksight.AnalysisAxisBinding;
        /**
         * Line styles options for all line series in the visual.
         */
        lineStyleSettings?: outputs.quicksight.AnalysisLineChartLineStyleSettings;
        /**
         * Marker styles options for all line series in the visual.
         */
        markerStyleSettings?: outputs.quicksight.AnalysisLineChartMarkerStyleSettings;
    }

    export interface AnalysisLineChartFieldWells {
        /**
         * The field well configuration of a line chart.
         */
        lineChartAggregatedFieldWells?: outputs.quicksight.AnalysisLineChartAggregatedFieldWells;
    }

    export interface AnalysisLineChartLineStyleSettings {
        /**
         * Interpolation style for line series.
         *
         * - `LINEAR` : Show as default, linear style.
         * - `SMOOTH` : Show as a smooth curve.
         * - `STEPPED` : Show steps in line.
         */
        lineInterpolation?: enums.quicksight.AnalysisLineInterpolation;
        /**
         * Line style for line series.
         *
         * - `SOLID` : Show as a solid line.
         * - `DOTTED` : Show as a dotted line.
         * - `DASHED` : Show as a dashed line.
         */
        lineStyle?: enums.quicksight.AnalysisLineChartLineStyle;
        /**
         * Configuration option that determines whether to show the line for the series.
         */
        lineVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        lineWidth?: string;
    }

    export interface AnalysisLineChartMarkerStyleSettings {
        /**
         * Color of marker in the series.
         */
        markerColor?: string;
        /**
         * Shape option for markers in the series.
         *
         * - `CIRCLE` : Show marker as a circle.
         * - `TRIANGLE` : Show marker as a triangle.
         * - `SQUARE` : Show marker as a square.
         * - `DIAMOND` : Show marker as a diamond.
         * - `ROUNDED_SQUARE` : Show marker as a rounded square.
         */
        markerShape?: enums.quicksight.AnalysisLineChartMarkerShape;
        /**
         * String based length that is composed of value and unit in px
         */
        markerSize?: string;
        /**
         * Configuration option that determines whether to show the markers in the series.
         */
        markerVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisLineChartSeriesSettings {
        /**
         * Line styles options for a line series in `LineChartVisual` .
         */
        lineStyleSettings?: outputs.quicksight.AnalysisLineChartLineStyleSettings;
        /**
         * Marker styles options for a line series in `LineChartVisual` .
         */
        markerStyleSettings?: outputs.quicksight.AnalysisLineChartMarkerStyleSettings;
    }

    export interface AnalysisLineChartSortConfiguration {
        /**
         * The limit on the number of categories that are displayed in a line chart.
         */
        categoryItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        /**
         * The limit on the number of lines that are displayed in a line chart.
         */
        colorItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The limit on the number of small multiples panels that are displayed.
         */
        smallMultiplesLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the small multiples field.
         */
        smallMultiplesSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisLineChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration of a line chart.
         */
        chartConfiguration?: outputs.quicksight.AnalysisLineChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisLineSeriesAxisDisplayOptions {
        /**
         * The options that determine the presentation of the line series axis.
         */
        axisOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The configuration options that determine how missing data is treated during the rendering of a line chart.
         */
        missingDataConfigurations?: outputs.quicksight.AnalysisMissingDataConfiguration[];
    }

    export interface AnalysisListControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the search options in a list control.
         */
        searchOptions?: outputs.quicksight.AnalysisListControlSearchOptions;
        /**
         * The configuration of the `Select all` options in a list control.
         */
        selectAllOptions?: outputs.quicksight.AnalysisListControlSelectAllOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisListControlSearchOptions {
        /**
         * The visibility configuration of the search options in a list control.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisListControlSelectAllOptions {
        /**
         * The visibility configuration of the `Select all` options in a list control.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisLoadingAnimation {
        /**
         * The visibility configuration of `LoadingAnimation` .
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisLocalNavigationConfiguration {
        /**
         * The sheet that is targeted for navigation in the same analysis.
         */
        targetSheetId: string;
    }

    export interface AnalysisLongFormatText {
        /**
         * Plain text format.
         */
        plainText?: string;
        /**
         * Rich text. Examples of rich text include bold, underline, and italics.
         */
        richText?: string;
    }

    export interface AnalysisMappedDataSetParameter {
        /**
         * A unique name that identifies a dataset within the analysis or dashboard.
         */
        dataSetIdentifier: string;
        /**
         * The name of the dataset parameter.
         */
        dataSetParameterName: string;
    }

    export interface AnalysisMaximumLabelType {
        /**
         * The visibility of the maximum label.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisMaximumMinimumComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.AnalysisDimensionField;
        /**
         * The type of computation. Choose one of the following options:
         *
         * - MAXIMUM: A maximum computation.
         * - MINIMUM: A minimum computation.
         */
        type: enums.quicksight.AnalysisMaximumMinimumComputationType;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisMeasureField {
        /**
         * The calculated measure field only used in pivot tables.
         */
        calculatedMeasureField?: outputs.quicksight.AnalysisCalculatedMeasureField;
        /**
         * The measure type field with categorical type columns.
         */
        categoricalMeasureField?: outputs.quicksight.AnalysisCategoricalMeasureField;
        /**
         * The measure type field with date type columns.
         */
        dateMeasureField?: outputs.quicksight.AnalysisDateMeasureField;
        /**
         * The measure type field with numerical type columns.
         */
        numericalMeasureField?: outputs.quicksight.AnalysisNumericalMeasureField;
    }

    export interface AnalysisMetricComparisonComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The field that is used in a metric comparison from value setup.
         */
        fromValue?: outputs.quicksight.AnalysisMeasureField;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The field that is used in a metric comparison to value setup.
         */
        targetValue?: outputs.quicksight.AnalysisMeasureField;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.AnalysisDimensionField;
    }

    export interface AnalysisMinimumLabelType {
        /**
         * The visibility of the minimum label.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisMissingDataConfiguration {
        /**
         * The treatment option that determines how missing data should be rendered. Choose from the following options:
         *
         * - `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
         * - `SHOW_AS_ZERO` : Show missing values as the value `0` .
         * - `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
         */
        treatmentOption?: enums.quicksight.AnalysisMissingDataTreatmentOption;
    }

    export interface AnalysisNegativeValueConfiguration {
        /**
         * Determines the display mode of the negative value configuration.
         */
        displayMode: enums.quicksight.AnalysisNegativeValueDisplayMode;
    }

    export interface AnalysisNullValueFormatConfiguration {
        /**
         * Determines the null string of null values.
         */
        nullString: string;
    }

    export interface AnalysisNumberDisplayFormatConfiguration {
        /**
         * The option that determines the decimal places configuration.
         */
        decimalPlacesConfiguration?: outputs.quicksight.AnalysisDecimalPlacesConfiguration;
        /**
         * The options that determine the negative value configuration.
         */
        negativeValueConfiguration?: outputs.quicksight.AnalysisNegativeValueConfiguration;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        /**
         * Determines the number scale value of the number format.
         */
        numberScale?: enums.quicksight.AnalysisNumberScale;
        /**
         * Determines the prefix value of the number format.
         */
        prefix?: string;
        /**
         * The options that determine the numeric separator configuration.
         */
        separatorConfiguration?: outputs.quicksight.AnalysisNumericSeparatorConfiguration;
        /**
         * Determines the suffix value of the number format.
         */
        suffix?: string;
    }

    export interface AnalysisNumberFormatConfiguration {
        /**
         * The options that determine the numeric format configuration.
         */
        formatConfiguration?: outputs.quicksight.AnalysisNumericFormatConfiguration;
    }

    export interface AnalysisNumericAxisOptions {
        /**
         * The range setup of a numeric axis.
         */
        range?: outputs.quicksight.AnalysisAxisDisplayRange;
        /**
         * The scale setup of a numeric axis.
         */
        scale?: outputs.quicksight.AnalysisAxisScale;
    }

    export interface AnalysisNumericEqualityDrillDownFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The value of the double input numeric drill down filter.
         */
        value: number;
    }

    export interface AnalysisNumericEqualityFilter {
        /**
         * The aggregation function of the filter.
         */
        aggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.AnalysisDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.AnalysisNumericEqualityMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        /**
         * The parameter whose value should be used for the filter value.
         */
        parameterName?: string;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.AnalysisNumericFilterSelectAllOptions;
        /**
         * The input value.
         */
        value?: number;
    }

    export interface AnalysisNumericFormatConfiguration {
        /**
         * The options that determine the currency display format configuration.
         */
        currencyDisplayFormatConfiguration?: outputs.quicksight.AnalysisCurrencyDisplayFormatConfiguration;
        /**
         * The options that determine the number display format configuration.
         */
        numberDisplayFormatConfiguration?: outputs.quicksight.AnalysisNumberDisplayFormatConfiguration;
        /**
         * The options that determine the percentage display format configuration.
         */
        percentageDisplayFormatConfiguration?: outputs.quicksight.AnalysisPercentageDisplayFormatConfiguration;
    }

    export interface AnalysisNumericRangeFilter {
        /**
         * The aggregation function of the filter.
         */
        aggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.AnalysisDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * Determines whether the maximum value in the filter value range should be included in the filtered results.
         */
        includeMaximum?: boolean;
        /**
         * Determines whether the minimum value in the filter value range should be included in the filtered results.
         */
        includeMinimum?: boolean;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        /**
         * The maximum value for the filter value range.
         */
        rangeMaximum?: outputs.quicksight.AnalysisNumericRangeFilterValue;
        /**
         * The minimum value for the filter value range.
         */
        rangeMinimum?: outputs.quicksight.AnalysisNumericRangeFilterValue;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.AnalysisNumericFilterSelectAllOptions;
    }

    export interface AnalysisNumericRangeFilterValue {
        /**
         * The parameter that is used in the numeric range.
         */
        parameter?: string;
        /**
         * The static value of the numeric range filter.
         */
        staticValue?: number;
    }

    export interface AnalysisNumericSeparatorConfiguration {
        /**
         * Determines the decimal separator.
         */
        decimalSeparator?: enums.quicksight.AnalysisNumericSeparatorSymbol;
        /**
         * The options that determine the thousands separator configuration.
         */
        thousandsSeparator?: outputs.quicksight.AnalysisThousandSeparatorOptions;
    }

    export interface AnalysisNumericalAggregationFunction {
        /**
         * An aggregation based on the percentile of values in a dimension or measure.
         */
        percentileAggregation?: outputs.quicksight.AnalysisPercentileAggregation;
        /**
         * Built-in aggregation functions for numerical values.
         *
         * - `SUM` : The sum of a dimension or measure.
         * - `AVERAGE` : The average of a dimension or measure.
         * - `MIN` : The minimum value of a dimension or measure.
         * - `MAX` : The maximum value of a dimension or measure.
         * - `COUNT` : The count of a dimension or measure.
         * - `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
         * - `VAR` : The variance of a dimension or measure.
         * - `VARP` : The partitioned variance of a dimension or measure.
         * - `STDEV` : The standard deviation of a dimension or measure.
         * - `STDEVP` : The partitioned standard deviation of a dimension or measure.
         * - `MEDIAN` : The median value of a dimension or measure.
         */
        simpleNumericalAggregation?: enums.quicksight.AnalysisSimpleNumericalAggregationFunction;
    }

    export interface AnalysisNumericalDimensionField {
        /**
         * The column that is used in the `NumericalDimensionField` .
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.AnalysisNumberFormatConfiguration;
        /**
         * The custom hierarchy ID.
         */
        hierarchyId?: string;
    }

    export interface AnalysisNumericalMeasureField {
        /**
         * The aggregation function of the measure field.
         */
        aggregationFunction?: outputs.quicksight.AnalysisNumericalAggregationFunction;
        /**
         * The column that is used in the `NumericalMeasureField` .
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.AnalysisNumberFormatConfiguration;
    }

    export interface AnalysisPaginationConfiguration {
        /**
         * Indicates the page number.
         */
        pageNumber: number;
        /**
         * Indicates how many items render in one page.
         */
        pageSize: number;
    }

    export interface AnalysisPanelConfiguration {
        /**
         * Sets the background color for each panel.
         */
        backgroundColor?: string;
        /**
         * Determines whether or not a background for each small multiples panel is rendered.
         */
        backgroundVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * Sets the line color of panel borders.
         */
        borderColor?: string;
        /**
         * Sets the line style of panel borders.
         */
        borderStyle?: enums.quicksight.AnalysisPanelBorderStyle;
        /**
         * String based length that is composed of value and unit in px
         */
        borderThickness?: string;
        /**
         * Determines whether or not each panel displays a border.
         */
        borderVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        gutterSpacing?: string;
        /**
         * Determines whether or not negative space between sibling panels is rendered.
         */
        gutterVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * Configures the title display within each small multiples panel.
         */
        title?: outputs.quicksight.AnalysisPanelTitleOptions;
    }

    export interface AnalysisPanelTitleOptions {
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        /**
         * Sets the horizontal text alignment of the title within each panel.
         */
        horizontalTextAlignment?: enums.quicksight.AnalysisHorizontalTextAlignment;
        /**
         * Determines whether or not panel titles are displayed.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisParameterControl {
        /**
         * A control from a date parameter that specifies date and time.
         */
        dateTimePicker?: outputs.quicksight.AnalysisParameterDateTimePickerControl;
        /**
         * A control to display a dropdown list with buttons that are used to select a single value.
         */
        dropdown?: outputs.quicksight.AnalysisParameterDropDownControl;
        /**
         * A control to display a list with buttons or boxes that are used to select either a single value or multiple values.
         */
        list?: outputs.quicksight.AnalysisParameterListControl;
        /**
         * A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
         */
        slider?: outputs.quicksight.AnalysisParameterSliderControl;
        /**
         * A control to display a text box that is used to enter multiple entries.
         */
        textArea?: outputs.quicksight.AnalysisParameterTextAreaControl;
        /**
         * A control to display a text box that is used to enter a single entry.
         */
        textField?: outputs.quicksight.AnalysisParameterTextFieldControl;
    }

    export interface AnalysisParameterDateTimePickerControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisDateTimePickerControlDisplayOptions;
        /**
         * The ID of the `ParameterDateTimePickerControl` .
         */
        parameterControlId: string;
        /**
         * The name of the `ParameterDateTimePickerControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterDateTimePickerControl` .
         */
        title: string;
    }

    export interface AnalysisParameterDeclaration {
        /**
         * A parameter declaration for the `DateTime` data type.
         */
        dateTimeParameterDeclaration?: outputs.quicksight.AnalysisDateTimeParameterDeclaration;
        /**
         * A parameter declaration for the `Decimal` data type.
         */
        decimalParameterDeclaration?: outputs.quicksight.AnalysisDecimalParameterDeclaration;
        /**
         * A parameter declaration for the `Integer` data type.
         */
        integerParameterDeclaration?: outputs.quicksight.AnalysisIntegerParameterDeclaration;
        /**
         * A parameter declaration for the `String` data type.
         */
        stringParameterDeclaration?: outputs.quicksight.AnalysisStringParameterDeclaration;
    }

    export interface AnalysisParameterDropDownControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.AnalysisCascadingControlConfiguration;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisDropDownControlDisplayOptions;
        /**
         * The ID of the `ParameterDropDownControl` .
         */
        parameterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.AnalysisParameterSelectableValues;
        /**
         * The source parameter name of the `ParameterDropDownControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterDropDownControl` .
         */
        title: string;
        /**
         * The type parameter name of the `ParameterDropDownControl` .
         */
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisParameterListControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.AnalysisCascadingControlConfiguration;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisListControlDisplayOptions;
        /**
         * The ID of the `ParameterListControl` .
         */
        parameterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.AnalysisParameterSelectableValues;
        /**
         * The source parameter name of the `ParameterListControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterListControl` .
         */
        title: string;
        /**
         * The type of `ParameterListControl` .
         */
        type?: enums.quicksight.AnalysisSheetControlListType;
    }

    export interface AnalysisParameterSelectableValues {
        /**
         * The column identifier that fetches values from the data set.
         */
        linkToDataSetColumn?: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The values that are used in `ParameterSelectableValues` .
         */
        values?: string[];
    }

    export interface AnalysisParameterSliderControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisSliderControlDisplayOptions;
        /**
         * The larger value that is displayed at the right of the slider.
         */
        maximumValue: number;
        /**
         * The smaller value that is displayed at the left of the slider.
         */
        minimumValue: number;
        /**
         * The ID of the `ParameterSliderControl` .
         */
        parameterControlId: string;
        /**
         * The source parameter name of the `ParameterSliderControl` .
         */
        sourceParameterName: string;
        /**
         * The number of increments that the slider bar is divided into.
         */
        stepSize: number;
        /**
         * The title of the `ParameterSliderControl` .
         */
        title: string;
    }

    export interface AnalysisParameterTextAreaControl {
        /**
         * The delimiter that is used to separate the lines in text.
         */
        delimiter?: string;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisTextAreaControlDisplayOptions;
        /**
         * The ID of the `ParameterTextAreaControl` .
         */
        parameterControlId: string;
        /**
         * The source parameter name of the `ParameterTextAreaControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterTextAreaControl` .
         */
        title: string;
    }

    export interface AnalysisParameterTextFieldControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.AnalysisTextFieldControlDisplayOptions;
        /**
         * The ID of the `ParameterTextFieldControl` .
         */
        parameterControlId: string;
        /**
         * The source parameter name of the `ParameterTextFieldControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterTextFieldControl` .
         */
        title: string;
    }

    /**
     * <p>A list of Amazon QuickSight parameters and the list's override values.</p>
     */
    export interface AnalysisParameters {
        /**
         * <p>The parameters that have a data type of date-time.</p>
         */
        dateTimeParameters?: outputs.quicksight.AnalysisDateTimeParameter[];
        /**
         * <p>The parameters that have a data type of decimal.</p>
         */
        decimalParameters?: outputs.quicksight.AnalysisDecimalParameter[];
        /**
         * <p>The parameters that have a data type of integer.</p>
         */
        integerParameters?: outputs.quicksight.AnalysisIntegerParameter[];
        /**
         * <p>The parameters that have a data type of string.</p>
         */
        stringParameters?: outputs.quicksight.AnalysisStringParameter[];
    }

    export interface AnalysisPercentVisibleRange {
        /**
         * The lower bound of the range.
         */
        from?: number;
        /**
         * The top bound of the range.
         */
        to?: number;
    }

    export interface AnalysisPercentageDisplayFormatConfiguration {
        /**
         * The option that determines the decimal places configuration.
         */
        decimalPlacesConfiguration?: outputs.quicksight.AnalysisDecimalPlacesConfiguration;
        /**
         * The options that determine the negative value configuration.
         */
        negativeValueConfiguration?: outputs.quicksight.AnalysisNegativeValueConfiguration;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        /**
         * Determines the prefix value of the percentage format.
         */
        prefix?: string;
        /**
         * The options that determine the numeric separator configuration.
         */
        separatorConfiguration?: outputs.quicksight.AnalysisNumericSeparatorConfiguration;
        /**
         * Determines the suffix value of the percentage format.
         */
        suffix?: string;
    }

    export interface AnalysisPercentileAggregation {
        /**
         * The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.
         */
        percentileValue?: number;
    }

    export interface AnalysisPeriodOverPeriodComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.AnalysisDimensionField;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisPeriodToDateComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The time granularity setup of period to date computation. Choose from the following options:
         *
         * - YEAR: Year to date.
         * - MONTH: Month to date.
         */
        periodTimeGranularity?: enums.quicksight.AnalysisTimeGranularity;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.AnalysisDimensionField;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisPieChartAggregatedFieldWells {
        /**
         * The category (group/color) field wells of a pie chart.
         */
        category?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The small multiples field well of a pie chart.
         */
        smallMultiples?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The value field wells of a pie chart. Values are aggregated based on categories.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisPieChartConfiguration {
        /**
         * The label options of the group/color that is displayed in a pie chart.
         */
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The contribution analysis (anomaly configuration) setup of the visual.
         */
        contributionAnalysisDefaults?: outputs.quicksight.AnalysisContributionAnalysisDefault[];
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.
         */
        donutOptions?: outputs.quicksight.AnalysisDonutOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisPieChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The small multiples setup for the visual.
         */
        smallMultiplesOptions?: outputs.quicksight.AnalysisSmallMultiplesOptions;
        /**
         * The sort configuration of a pie chart.
         */
        sortConfiguration?: outputs.quicksight.AnalysisPieChartSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * The label options for the value that is displayed in a pie chart.
         */
        valueLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisPieChartFieldWells {
        /**
         * The field well configuration of a pie chart.
         */
        pieChartAggregatedFieldWells?: outputs.quicksight.AnalysisPieChartAggregatedFieldWells;
    }

    export interface AnalysisPieChartSortConfiguration {
        /**
         * The limit on the number of categories that are displayed in a pie chart.
         */
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        /**
         * The limit on the number of small multiples panels that are displayed.
         */
        smallMultiplesLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the small multiples field.
         */
        smallMultiplesSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisPieChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration of a pie chart.
         */
        chartConfiguration?: outputs.quicksight.AnalysisPieChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisPivotFieldSortOptions {
        /**
         * The field ID for the field sort options.
         */
        fieldId: string;
        /**
         * The sort by field for the field sort options.
         */
        sortBy: outputs.quicksight.AnalysisPivotTableSortBy;
    }

    export interface AnalysisPivotTableAggregatedFieldWells {
        /**
         * The columns field well for a pivot table. Values are grouped by columns fields.
         */
        columns?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The rows field well for a pivot table. Values are grouped by rows fields.
         */
        rows?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The values field well for a pivot table. Values are aggregated based on rows and columns fields.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisPivotTableCellConditionalFormatting {
        /**
         * The field ID of the cell for conditional formatting.
         */
        fieldId: string;
        /**
         * The scope of the cell for conditional formatting.
         */
        scope?: outputs.quicksight.AnalysisPivotTableConditionalFormattingScope;
        /**
         * A list of cell scopes for conditional formatting.
         */
        scopes?: outputs.quicksight.AnalysisPivotTableConditionalFormattingScope[];
        /**
         * The text format of the cell for conditional formatting.
         */
        textFormat?: outputs.quicksight.AnalysisTextConditionalFormat;
    }

    export interface AnalysisPivotTableConditionalFormatting {
        /**
         * Conditional formatting options for a `PivotTableVisual` .
         */
        conditionalFormattingOptions?: outputs.quicksight.AnalysisPivotTableConditionalFormattingOption[];
    }

    export interface AnalysisPivotTableConditionalFormattingOption {
        /**
         * The cell conditional formatting option for a pivot table.
         */
        cell?: outputs.quicksight.AnalysisPivotTableCellConditionalFormatting;
    }

    export interface AnalysisPivotTableConditionalFormattingScope {
        /**
         * The role (field, field total, grand total) of the cell for conditional formatting.
         */
        role?: enums.quicksight.AnalysisPivotTableConditionalFormattingScopeRole;
    }

    export interface AnalysisPivotTableConfiguration {
        /**
         * The field options for a pivot table visual.
         */
        fieldOptions?: outputs.quicksight.AnalysisPivotTableFieldOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisPivotTableFieldWells;
        /**
         * The paginated report options for a pivot table visual.
         */
        paginatedReportOptions?: outputs.quicksight.AnalysisPivotTablePaginatedReportOptions;
        /**
         * The sort configuration for a `PivotTableVisual` .
         */
        sortConfiguration?: outputs.quicksight.AnalysisPivotTableSortConfiguration;
        /**
         * The table options for a pivot table visual.
         */
        tableOptions?: outputs.quicksight.AnalysisPivotTableOptions;
        /**
         * The total options for a pivot table visual.
         */
        totalOptions?: outputs.quicksight.AnalysisPivotTableTotalOptions;
    }

    export interface AnalysisPivotTableDataPathOption {
        /**
         * The list of data path values for the data path options.
         */
        dataPathList: outputs.quicksight.AnalysisDataPathValue[];
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface AnalysisPivotTableFieldCollapseStateOption {
        /**
         * The state of the field target of a pivot table. Choose one of the following options:
         *
         * - `COLLAPSED`
         * - `EXPANDED`
         */
        state?: enums.quicksight.AnalysisPivotTableFieldCollapseState;
        /**
         * A tagged-union object that sets the collapse state.
         */
        target: outputs.quicksight.AnalysisPivotTableFieldCollapseStateTarget;
    }

    export interface AnalysisPivotTableFieldCollapseStateTarget {
        /**
         * The data path of the pivot table's header. Used to set the collapse state.
         */
        fieldDataPathValues?: outputs.quicksight.AnalysisDataPathValue[];
        /**
         * The field ID of the pivot table that the collapse state needs to be set to.
         */
        fieldId?: string;
    }

    export interface AnalysisPivotTableFieldOption {
        /**
         * The custom label of the pivot table field.
         */
        customLabel?: string;
        /**
         * The field ID of the pivot table field.
         */
        fieldId: string;
        /**
         * The visibility of the pivot table field.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisPivotTableFieldOptions {
        /**
         * The collapse state options for the pivot table field options.
         */
        collapseStateOptions?: outputs.quicksight.AnalysisPivotTableFieldCollapseStateOption[];
        /**
         * The data path options for the pivot table field options.
         */
        dataPathOptions?: outputs.quicksight.AnalysisPivotTableDataPathOption[];
        /**
         * The selected field options for the pivot table field options.
         */
        selectedFieldOptions?: outputs.quicksight.AnalysisPivotTableFieldOption[];
    }

    export interface AnalysisPivotTableFieldSubtotalOptions {
        /**
         * The field ID of the subtotal options.
         */
        fieldId?: string;
    }

    export interface AnalysisPivotTableFieldWells {
        /**
         * The aggregated field well for the pivot table.
         */
        pivotTableAggregatedFieldWells?: outputs.quicksight.AnalysisPivotTableAggregatedFieldWells;
    }

    export interface AnalysisPivotTableOptions {
        /**
         * The table cell style of cells.
         */
        cellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The visibility setting of a pivot table's collapsed row dimension fields. If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are automatically hidden. The default value is `VISIBLE` .
         */
        collapsedRowDimensionsVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The table cell style of the column header.
         */
        columnHeaderStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The visibility of the column names.
         */
        columnNamesVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        defaultCellWidth?: string;
        /**
         * The metric placement (row, column) options.
         */
        metricPlacement?: enums.quicksight.AnalysisPivotTableMetricPlacement;
        /**
         * The row alternate color options (widget status, row alternate colors).
         */
        rowAlternateColorOptions?: outputs.quicksight.AnalysisRowAlternateColorOptions;
        /**
         * The table cell style of row field names.
         */
        rowFieldNamesStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The table cell style of the row headers.
         */
        rowHeaderStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The options for the label that is located above the row headers. This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
         */
        rowsLabelOptions?: outputs.quicksight.AnalysisPivotTableRowsLabelOptions;
        /**
         * The layout for the row dimension headers of a pivot table. Choose one of the following options.
         *
         * - `TABULAR` : (Default) Each row field is displayed in a separate column.
         * - `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to differentiate row headers of different fields.
         */
        rowsLayout?: enums.quicksight.AnalysisPivotTableRowsLayout;
        /**
         * The visibility of the single metric options.
         */
        singleMetricVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * Determines the visibility of the pivot table.
         */
        toggleButtonsVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisPivotTablePaginatedReportOptions {
        /**
         * The visibility of the repeating header rows on each page.
         */
        overflowColumnHeaderVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The visibility of the printing table overflow across pages.
         */
        verticalOverflowVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisPivotTableRowsLabelOptions {
        /**
         * The custom label string for the rows label.
         */
        customLabel?: string;
        /**
         * The visibility of the rows label.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisPivotTableSortBy {
        /**
         * The column sort (field id, direction) for the pivot table sort by options.
         */
        column?: outputs.quicksight.AnalysisColumnSort;
        /**
         * The data path sort (data path value, direction) for the pivot table sort by options.
         */
        dataPath?: outputs.quicksight.AnalysisDataPathSort;
        /**
         * The field sort (field id, direction) for the pivot table sort by options.
         */
        field?: outputs.quicksight.AnalysisFieldSort;
    }

    export interface AnalysisPivotTableSortConfiguration {
        /**
         * The field sort options for a pivot table sort configuration.
         */
        fieldSortOptions?: outputs.quicksight.AnalysisPivotFieldSortOptions[];
    }

    export interface AnalysisPivotTableTotalOptions {
        /**
         * The column subtotal options.
         */
        columnSubtotalOptions?: outputs.quicksight.AnalysisSubtotalOptions;
        /**
         * The column total options.
         */
        columnTotalOptions?: outputs.quicksight.AnalysisPivotTotalOptions;
        /**
         * The row subtotal options.
         */
        rowSubtotalOptions?: outputs.quicksight.AnalysisSubtotalOptions;
        /**
         * The row total options.
         */
        rowTotalOptions?: outputs.quicksight.AnalysisPivotTotalOptions;
    }

    export interface AnalysisPivotTableVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisPivotTableConfiguration;
        /**
         * The conditional formatting for a `PivotTableVisual` .
         */
        conditionalFormatting?: outputs.quicksight.AnalysisPivotTableConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface AnalysisPivotTotalOptions {
        /**
         * The custom label string for the total cells.
         */
        customLabel?: string;
        /**
         * The cell styling options for the total of header cells.
         */
        metricHeaderCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The placement (start, end) for the total cells.
         */
        placement?: enums.quicksight.AnalysisTableTotalsPlacement;
        /**
         * The scroll status (pinned, scrolled) for the total cells.
         */
        scrollStatus?: enums.quicksight.AnalysisTableTotalsScrollStatus;
        /**
         * The total aggregation options for each value field.
         */
        totalAggregationOptions?: outputs.quicksight.AnalysisTotalAggregationOption[];
        /**
         * The cell styling options for the total cells.
         */
        totalCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The visibility configuration for the total cells.
         */
        totalsVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The cell styling options for the totals of value cells.
         */
        valueCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
    }

    export interface AnalysisPredefinedHierarchy {
        /**
         * The list of columns that define the predefined hierarchy.
         */
        columns: outputs.quicksight.AnalysisColumnIdentifier[];
        /**
         * The option that determines the drill down filters for the predefined hierarchy.
         */
        drillDownFilters?: outputs.quicksight.AnalysisDrillDownFilter[];
        /**
         * The hierarchy ID of the predefined hierarchy.
         */
        hierarchyId: string;
    }

    export interface AnalysisProgressBarOptions {
        /**
         * The visibility of the progress bar.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisRadarChartAggregatedFieldWells {
        /**
         * The aggregated field well categories of a radar chart.
         */
        category?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The color that are assigned to the aggregated field wells of a radar chart.
         */
        color?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The values that are assigned to the aggregated field wells of a radar chart.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisRadarChartAreaStyleSettings {
        /**
         * The visibility settings of a radar chart.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisRadarChartConfiguration {
        /**
         * Determines the visibility of the colors of alternatign bands in a radar chart.
         */
        alternateBandColorsVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The color of the even-numbered alternate bands of a radar chart.
         */
        alternateBandEvenColor?: string;
        /**
         * The color of the odd-numbered alternate bands of a radar chart.
         */
        alternateBandOddColor?: string;
        /**
         * The axis behavior options of a radar chart.
         */
        axesRangeScale?: enums.quicksight.AnalysisRadarChartAxesRangeScale;
        /**
         * The base sreies settings of a radar chart.
         */
        baseSeriesSettings?: outputs.quicksight.AnalysisRadarChartSeriesSettings;
        /**
         * The category axis of a radar chart.
         */
        categoryAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The category label options of a radar chart.
         */
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The color axis of a radar chart.
         */
        colorAxis?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The color label options of a radar chart.
         */
        colorLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The field well configuration of a `RadarChartVisual` .
         */
        fieldWells?: outputs.quicksight.AnalysisRadarChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The shape of the radar chart.
         */
        shape?: enums.quicksight.AnalysisRadarChartShape;
        /**
         * The sort configuration of a `RadarChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.AnalysisRadarChartSortConfiguration;
        /**
         * The start angle of a radar chart's axis.
         */
        startAngle?: number;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
    }

    export interface AnalysisRadarChartFieldWells {
        /**
         * The aggregated field wells of a radar chart visual.
         */
        radarChartAggregatedFieldWells?: outputs.quicksight.AnalysisRadarChartAggregatedFieldWells;
    }

    export interface AnalysisRadarChartSeriesSettings {
        /**
         * The area style settings of a radar chart.
         */
        areaStyleSettings?: outputs.quicksight.AnalysisRadarChartAreaStyleSettings;
    }

    export interface AnalysisRadarChartSortConfiguration {
        /**
         * The category items limit for a radar chart.
         */
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The category sort options of a radar chart.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
        /**
         * The color items limit of a radar chart.
         */
        colorItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The color sort configuration of a radar chart.
         */
        colorSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisRadarChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisRadarChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisRangeEndsLabelType {
        /**
         * The visibility of the range ends label.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisReferenceLine {
        /**
         * The data configuration of the reference line.
         */
        dataConfiguration: outputs.quicksight.AnalysisReferenceLineDataConfiguration;
        /**
         * The label configuration of the reference line.
         */
        labelConfiguration?: outputs.quicksight.AnalysisReferenceLineLabelConfiguration;
        /**
         * The status of the reference line. Choose one of the following options:
         *
         * - `ENABLE`
         * - `DISABLE`
         */
        status?: enums.quicksight.AnalysisWidgetStatus;
        /**
         * The style configuration of the reference line.
         */
        styleConfiguration?: outputs.quicksight.AnalysisReferenceLineStyleConfiguration;
    }

    export interface AnalysisReferenceLineCustomLabelConfiguration {
        /**
         * The string text of the custom label.
         */
        customLabel: string;
    }

    export interface AnalysisReferenceLineDataConfiguration {
        /**
         * The axis binding type of the reference line. Choose one of the following options:
         *
         * - `PrimaryY`
         * - `SecondaryY`
         */
        axisBinding?: enums.quicksight.AnalysisAxisBinding;
        /**
         * The dynamic configuration of the reference line data configuration.
         */
        dynamicConfiguration?: outputs.quicksight.AnalysisReferenceLineDynamicDataConfiguration;
        /**
         * The series type of the reference line data configuration. Choose one of the following options:
         *
         * - `BAR`
         * - `LINE`
         */
        seriesType?: enums.quicksight.AnalysisReferenceLineSeriesType;
        /**
         * The static data configuration of the reference line data configuration.
         */
        staticConfiguration?: outputs.quicksight.AnalysisReferenceLineStaticDataConfiguration;
    }

    export interface AnalysisReferenceLineDynamicDataConfiguration {
        /**
         * The calculation that is used in the dynamic data.
         */
        calculation: outputs.quicksight.AnalysisNumericalAggregationFunction;
        /**
         * The column that the dynamic data targets.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The aggregation function that is used in the dynamic data.
         */
        measureAggregationFunction?: outputs.quicksight.AnalysisAggregationFunction;
    }

    export interface AnalysisReferenceLineLabelConfiguration {
        /**
         * The custom label configuration of the label in a reference line.
         */
        customLabelConfiguration?: outputs.quicksight.AnalysisReferenceLineCustomLabelConfiguration;
        /**
         * The font color configuration of the label in a reference line.
         */
        fontColor?: string;
        /**
         * The font configuration of the label in a reference line.
         */
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        /**
         * The horizontal position configuration of the label in a reference line. Choose one of the following options:
         *
         * - `LEFT`
         * - `CENTER`
         * - `RIGHT`
         */
        horizontalPosition?: enums.quicksight.AnalysisReferenceLineLabelHorizontalPosition;
        /**
         * The value label configuration of the label in a reference line.
         */
        valueLabelConfiguration?: outputs.quicksight.AnalysisReferenceLineValueLabelConfiguration;
        /**
         * The vertical position configuration of the label in a reference line. Choose one of the following options:
         *
         * - `ABOVE`
         * - `BELOW`
         */
        verticalPosition?: enums.quicksight.AnalysisReferenceLineLabelVerticalPosition;
    }

    export interface AnalysisReferenceLineStaticDataConfiguration {
        /**
         * The double input of the static data.
         */
        value: number;
    }

    export interface AnalysisReferenceLineStyleConfiguration {
        /**
         * The hex color of the reference line.
         */
        color?: string;
        /**
         * The pattern type of the line style. Choose one of the following options:
         *
         * - `SOLID`
         * - `DASHED`
         * - `DOTTED`
         */
        pattern?: enums.quicksight.AnalysisReferenceLinePatternType;
    }

    export interface AnalysisReferenceLineValueLabelConfiguration {
        /**
         * The format configuration of the value label.
         */
        formatConfiguration?: outputs.quicksight.AnalysisNumericFormatConfiguration;
        /**
         * The relative position of the value label. Choose one of the following options:
         *
         * - `BEFORE_CUSTOM_LABEL`
         * - `AFTER_CUSTOM_LABEL`
         */
        relativePosition?: enums.quicksight.AnalysisReferenceLineValueLabelRelativePosition;
    }

    export interface AnalysisRelativeDateTimeControlDisplayOptions {
        /**
         * Customize how dates are formatted in controls.
         */
        dateTimeFormat?: string;
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisRelativeDatesFilter {
        /**
         * The date configuration of the filter.
         */
        anchorDateConfiguration: outputs.quicksight.AnalysisAnchorDateConfiguration;
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.AnalysisDefaultFilterControlConfiguration;
        /**
         * The configuration for the exclude period of the filter.
         */
        excludePeriodConfiguration?: outputs.quicksight.AnalysisExcludePeriodConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The minimum granularity (period granularity) of the relative dates filter.
         */
        minimumGranularity?: enums.quicksight.AnalysisTimeGranularity;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        /**
         * The parameter whose value should be used for the filter value.
         */
        parameterName?: string;
        /**
         * The range date type of the filter. Choose one of the options below:
         *
         * - `PREVIOUS`
         * - `THIS`
         * - `LAST`
         * - `NOW`
         * - `NEXT`
         */
        relativeDateType: enums.quicksight.AnalysisRelativeDateType;
        /**
         * The date value of the filter.
         */
        relativeDateValue?: number;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity: enums.quicksight.AnalysisTimeGranularity;
    }

    /**
     * <p>Permission for the resource.</p>
     */
    export interface AnalysisResourcePermission {
        /**
         * <p>The IAM action to grant or revoke permissions on.</p>
         */
        actions: string[];
        /**
         * <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
         *             following:</p>
         *          <ul>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
         *                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
         *                     (This is less common.) </p>
         *             </li>
         *          </ul>
         */
        principal: string;
    }

    export interface AnalysisRollingDateConfiguration {
        /**
         * The data set that is used in the rolling date configuration.
         */
        dataSetIdentifier?: string;
        /**
         * The expression of the rolling date configuration.
         */
        expression: string;
    }

    export interface AnalysisRowAlternateColorOptions {
        /**
         * Determines the list of row alternate colors.
         */
        rowAlternateColors?: string[];
        /**
         * Determines the widget status.
         */
        status?: enums.quicksight.AnalysisWidgetStatus;
        /**
         * The primary background color options for alternate rows.
         */
        usePrimaryBackgroundColor?: enums.quicksight.AnalysisWidgetStatus;
    }

    export interface AnalysisSameSheetTargetVisualConfiguration {
        /**
         * The options that choose the target visual in the same sheet.
         *
         * Valid values are defined as follows:
         *
         * - `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
         */
        targetVisualOptions?: enums.quicksight.AnalysisTargetVisualOptions;
        /**
         * A list of the target visual IDs that are located in the same sheet of the analysis.
         */
        targetVisuals?: string[];
    }

    export interface AnalysisSankeyDiagramAggregatedFieldWells {
        /**
         * The destination field wells of a sankey diagram.
         */
        destination?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The source field wells of a sankey diagram.
         */
        source?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The weight field wells of a sankey diagram.
         */
        weight?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisSankeyDiagramChartConfiguration {
        /**
         * The data label configuration of a sankey diagram.
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The field well configuration of a sankey diagram.
         */
        fieldWells?: outputs.quicksight.AnalysisSankeyDiagramFieldWells;
        /**
         * The sort configuration of a sankey diagram.
         */
        sortConfiguration?: outputs.quicksight.AnalysisSankeyDiagramSortConfiguration;
    }

    export interface AnalysisSankeyDiagramFieldWells {
        /**
         * The field well configuration of a sankey diagram.
         */
        sankeyDiagramAggregatedFieldWells?: outputs.quicksight.AnalysisSankeyDiagramAggregatedFieldWells;
    }

    export interface AnalysisSankeyDiagramSortConfiguration {
        /**
         * The limit on the number of destination nodes that are displayed in a sankey diagram.
         */
        destinationItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The limit on the number of source nodes that are displayed in a sankey diagram.
         */
        sourceItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the weight fields.
         */
        weightSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisSankeyDiagramVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration of a sankey diagram.
         */
        chartConfiguration?: outputs.quicksight.AnalysisSankeyDiagramChartConfiguration;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisScatterPlotCategoricallyAggregatedFieldWells {
        /**
         * The category field well of a scatter plot.
         */
        category?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The label field well of a scatter plot.
         */
        label?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The size field well of a scatter plot.
         */
        size?: outputs.quicksight.AnalysisMeasureField[];
        /**
         * The x-axis field well of a scatter plot.
         *
         * The x-axis is aggregated by category.
         */
        xAxis?: outputs.quicksight.AnalysisMeasureField[];
        /**
         * The y-axis field well of a scatter plot.
         *
         * The y-axis is aggregated by category.
         */
        yAxis?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisScatterPlotConfiguration {
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisScatterPlotFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The legend display setup of the visual.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        /**
         * The label display options (grid line, range, scale, and axis step) of the scatter plot's x-axis.
         */
        xAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of the scatter plot's x-axis.
         */
        xAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The label display options (grid line, range, scale, and axis step) of the scatter plot's y-axis.
         */
        yAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of the scatter plot's y-axis.
         */
        yAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
    }

    export interface AnalysisScatterPlotFieldWells {
        /**
         * The aggregated field wells of a scatter plot. The x and y-axes of scatter plots with aggregated field wells are aggregated by category, label, or both.
         */
        scatterPlotCategoricallyAggregatedFieldWells?: outputs.quicksight.AnalysisScatterPlotCategoricallyAggregatedFieldWells;
        /**
         * The unaggregated field wells of a scatter plot. The x and y-axes of these scatter plots are unaggregated.
         */
        scatterPlotUnaggregatedFieldWells?: outputs.quicksight.AnalysisScatterPlotUnaggregatedFieldWells;
    }

    export interface AnalysisScatterPlotUnaggregatedFieldWells {
        /**
         * The category field well of a scatter plot.
         */
        category?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The label field well of a scatter plot.
         */
        label?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The size field well of a scatter plot.
         */
        size?: outputs.quicksight.AnalysisMeasureField[];
        /**
         * The x-axis field well of a scatter plot.
         *
         * The x-axis is a dimension field and cannot be aggregated.
         */
        xAxis?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The y-axis field well of a scatter plot.
         *
         * The y-axis is a dimension field and cannot be aggregated.
         */
        yAxis?: outputs.quicksight.AnalysisDimensionField[];
    }

    export interface AnalysisScatterPlotVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisScatterPlotConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisScrollBarOptions {
        /**
         * The visibility of the data zoom scroll bar.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The visibility range for the data zoom scroll bar.
         */
        visibleRange?: outputs.quicksight.AnalysisVisibleRangeOptions;
    }

    export interface AnalysisSecondaryValueOptions {
        /**
         * Determines the visibility of the secondary value.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisSectionAfterPageBreak {
        /**
         * The option that enables or disables a page break at the end of a section.
         */
        status?: enums.quicksight.AnalysisSectionPageBreakStatus;
    }

    export interface AnalysisSectionBasedLayoutCanvasSizeOptions {
        /**
         * The options for a paper canvas of a section-based layout.
         */
        paperCanvasSizeOptions?: outputs.quicksight.AnalysisSectionBasedLayoutPaperCanvasSizeOptions;
    }

    export interface AnalysisSectionBasedLayoutConfiguration {
        /**
         * A list of body section configurations.
         */
        bodySections: outputs.quicksight.AnalysisBodySectionConfiguration[];
        /**
         * The options for the canvas of a section-based layout.
         */
        canvasSizeOptions: outputs.quicksight.AnalysisSectionBasedLayoutCanvasSizeOptions;
        /**
         * A list of footer section configurations.
         */
        footerSections: outputs.quicksight.AnalysisHeaderFooterSectionConfiguration[];
        /**
         * A list of header section configurations.
         */
        headerSections: outputs.quicksight.AnalysisHeaderFooterSectionConfiguration[];
    }

    export interface AnalysisSectionBasedLayoutPaperCanvasSizeOptions {
        /**
         * Defines the spacing between the canvas content and the top, bottom, left, and right edges.
         */
        paperMargin?: outputs.quicksight.AnalysisSpacing;
        /**
         * The paper orientation that is used to define canvas dimensions. Choose one of the following options:
         *
         * - PORTRAIT
         * - LANDSCAPE
         */
        paperOrientation?: enums.quicksight.AnalysisPaperOrientation;
        /**
         * The paper size that is used to define canvas dimensions.
         */
        paperSize?: enums.quicksight.AnalysisPaperSize;
    }

    export interface AnalysisSectionLayoutConfiguration {
        /**
         * The free-form layout configuration of a section.
         */
        freeFormLayout: outputs.quicksight.AnalysisFreeFormSectionLayoutConfiguration;
    }

    export interface AnalysisSectionPageBreakConfiguration {
        /**
         * The configuration of a page break after a section.
         */
        after?: outputs.quicksight.AnalysisSectionAfterPageBreak;
    }

    export interface AnalysisSectionStyle {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        /**
         * The spacing between section content and its top, bottom, left, and right edges.
         *
         * There is no padding by default.
         */
        padding?: outputs.quicksight.AnalysisSpacing;
    }

    export interface AnalysisSelectedSheetsFilterScopeConfiguration {
        /**
         * The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
         */
        sheetVisualScopingConfigurations?: outputs.quicksight.AnalysisSheetVisualScopingConfiguration[];
    }

    export interface AnalysisSeriesItem {
        /**
         * The data field series item configuration of a line chart.
         */
        dataFieldSeriesItem?: outputs.quicksight.AnalysisDataFieldSeriesItem;
        /**
         * The field series item configuration of a line chart.
         */
        fieldSeriesItem?: outputs.quicksight.AnalysisFieldSeriesItem;
    }

    export interface AnalysisSetParameterValueConfiguration {
        /**
         * The destination parameter name of the `SetParameterValueConfiguration` .
         */
        destinationParameterName: string;
        value: outputs.quicksight.AnalysisDestinationParameterValueConfiguration;
    }

    export interface AnalysisShapeConditionalFormat {
        /**
         * The conditional formatting for the shape background color of a filled map visual.
         */
        backgroundColor: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    /**
     * <p>A <i>sheet</i>, which is an object that contains a set of visuals that
     *             are viewed together on one page in Amazon QuickSight. Every analysis and dashboard
     *             contains at least one sheet. Each sheet contains at least one visualization widget, for
     *             example a chart, pivot table, or narrative insight. Sheets can be associated with other
     *             components, such as controls, filters, and so on.</p>
     */
    export interface AnalysisSheet {
        /**
         * <p>The name of a sheet. This name is displayed on the sheet's tab in the Amazon QuickSight
         *             console.</p>
         */
        name?: string;
        /**
         * <p>The unique identifier associated with a sheet.</p>
         */
        sheetId?: string;
    }

    export interface AnalysisSheetControlInfoIconLabelOptions {
        /**
         * The text content of info icon.
         */
        infoIconText?: string;
        /**
         * The visibility configuration of info icon label options.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisSheetControlLayout {
        /**
         * The configuration that determines the elements and canvas size options of sheet control.
         */
        configuration: outputs.quicksight.AnalysisSheetControlLayoutConfiguration;
    }

    export interface AnalysisSheetControlLayoutConfiguration {
        /**
         * The configuration that determines the elements and canvas size options of sheet control.
         */
        gridLayout?: outputs.quicksight.AnalysisGridLayoutConfiguration;
    }

    export interface AnalysisSheetDefinition {
        /**
         * The layout content type of the sheet. Choose one of the following options:
         *
         * - `PAGINATED` : Creates a sheet for a paginated report.
         * - `INTERACTIVE` : Creates a sheet for an interactive dashboard.
         */
        contentType?: enums.quicksight.AnalysisSheetContentType;
        /**
         * A description of the sheet.
         */
        description?: string;
        /**
         * The list of filter controls that are on a sheet.
         *
         * For more information, see [Adding filter controls to analysis sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon QuickSight User Guide* .
         */
        filterControls?: outputs.quicksight.AnalysisFilterControl[];
        /**
         * Layouts define how the components of a sheet are arranged.
         *
         * For more information, see [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon QuickSight User Guide* .
         */
        layouts?: outputs.quicksight.AnalysisLayout[];
        /**
         * The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.
         */
        name?: string;
        /**
         * The list of parameter controls that are on a sheet.
         *
         * For more information, see [Using a Control with a Parameter in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the *Amazon QuickSight User Guide* .
         */
        parameterControls?: outputs.quicksight.AnalysisParameterControl[];
        /**
         * The control layouts of the sheet.
         */
        sheetControlLayouts?: outputs.quicksight.AnalysisSheetControlLayout[];
        /**
         * The unique identifier of a sheet.
         */
        sheetId: string;
        /**
         * The text boxes that are on a sheet.
         */
        textBoxes?: outputs.quicksight.AnalysisSheetTextBox[];
        /**
         * The title of the sheet.
         */
        title?: string;
        /**
         * A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.
         */
        visuals?: outputs.quicksight.AnalysisVisual[];
    }

    export interface AnalysisSheetElementConfigurationOverrides {
        /**
         * Determines whether or not the overrides are visible. Choose one of the following options:
         *
         * - `VISIBLE`
         * - `HIDDEN`
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisSheetElementRenderingRule {
        /**
         * The override configuration of the rendering rules of a sheet.
         */
        configurationOverrides: outputs.quicksight.AnalysisSheetElementConfigurationOverrides;
        /**
         * The expression of the rendering rules of a sheet.
         */
        expression: string;
    }

    export interface AnalysisSheetTextBox {
        /**
         * The content that is displayed in the text box.
         */
        content?: string;
        /**
         * The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.
         */
        sheetTextBoxId: string;
    }

    export interface AnalysisSheetVisualScopingConfiguration {
        /**
         * The scope of the applied entities. Choose one of the following options:
         *
         * - `ALL_VISUALS`
         * - `SELECTED_VISUALS`
         */
        scope: enums.quicksight.AnalysisFilterVisualScope;
        /**
         * The selected sheet that the filter is applied to.
         */
        sheetId: string;
        /**
         * The selected visuals that the filter is applied to.
         */
        visualIds?: string[];
    }

    export interface AnalysisShortFormatText {
        /**
         * Plain text format.
         */
        plainText?: string;
        /**
         * Rich text. Examples of rich text include bold, underline, and italics.
         */
        richText?: string;
    }

    export interface AnalysisSimpleClusterMarker {
        /**
         * The color of the simple cluster marker.
         */
        color?: string;
    }

    export interface AnalysisSliderControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisSmallMultiplesAxisProperties {
        /**
         * Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
         */
        placement?: enums.quicksight.AnalysisSmallMultiplesAxisPlacement;
        /**
         * Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
         */
        scale?: enums.quicksight.AnalysisSmallMultiplesAxisScale;
    }

    export interface AnalysisSmallMultiplesOptions {
        /**
         * Sets the maximum number of visible columns to display in the grid of small multiples panels.
         *
         * The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
         */
        maxVisibleColumns?: number;
        /**
         * Sets the maximum number of visible rows to display in the grid of small multiples panels.
         *
         * The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
         */
        maxVisibleRows?: number;
        /**
         * Configures the display options for each small multiples panel.
         */
        panelConfiguration?: outputs.quicksight.AnalysisPanelConfiguration;
        /**
         * The properties of a small multiples X axis.
         */
        xAxis?: outputs.quicksight.AnalysisSmallMultiplesAxisProperties;
        /**
         * The properties of a small multiples Y axis.
         */
        yAxis?: outputs.quicksight.AnalysisSmallMultiplesAxisProperties;
    }

    /**
     * <p>The source entity of an analysis.</p>
     */
    export interface AnalysisSourceEntity {
        /**
         * The source template for the source entity of the analysis.
         */
        sourceTemplate?: outputs.quicksight.AnalysisSourceTemplate;
    }

    /**
     * <p>The source template of an analysis.</p>
     */
    export interface AnalysisSourceTemplate {
        /**
         * <p>The Amazon Resource Name (ARN) of the source template of an analysis.</p>
         */
        arn: string;
        /**
         * <p>The dataset references of the source template of an analysis.</p>
         */
        dataSetReferences: outputs.quicksight.AnalysisDataSetReference[];
    }

    export interface AnalysisSpacing {
        /**
         * String based length that is composed of value and unit
         */
        bottom?: string;
        /**
         * String based length that is composed of value and unit
         */
        left?: string;
        /**
         * String based length that is composed of value and unit
         */
        right?: string;
        /**
         * String based length that is composed of value and unit
         */
        top?: string;
    }

    export interface AnalysisStringDefaultValues {
        /**
         * The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.AnalysisDynamicDefaultValue;
        /**
         * The static values of the `DecimalDefaultValues` .
         */
        staticValues?: string[];
    }

    export interface AnalysisStringFormatConfiguration {
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.AnalysisNullValueFormatConfiguration;
        /**
         * The formatting configuration for numeric strings.
         */
        numericFormatConfiguration?: outputs.quicksight.AnalysisNumericFormatConfiguration;
    }

    /**
     * <p>A string parameter.</p>
     */
    export interface AnalysisStringParameter {
        /**
         * <p>A display name for a string parameter.</p>
         */
        name: string;
        /**
         * <p>The values of a string parameter.</p>
         */
        values: string[];
    }

    export interface AnalysisStringParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.AnalysisStringDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.AnalysisMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The value type determines whether the parameter is a single-value or multi-value parameter.
         */
        parameterValueType: enums.quicksight.AnalysisParameterValueType;
        /**
         * The configuration that defines the default value of a `String` parameter when a value has not been set.
         */
        valueWhenUnset?: outputs.quicksight.AnalysisStringValueWhenUnsetConfiguration;
    }

    export interface AnalysisStringValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: string;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.AnalysisValueWhenUnsetOption;
    }

    export interface AnalysisSubtotalOptions {
        /**
         * The custom label string for the subtotal cells.
         */
        customLabel?: string;
        /**
         * The field level (all, custom, last) for the subtotal cells.
         */
        fieldLevel?: enums.quicksight.AnalysisPivotTableSubtotalLevel;
        /**
         * The optional configuration of subtotal cells.
         */
        fieldLevelOptions?: outputs.quicksight.AnalysisPivotTableFieldSubtotalOptions[];
        /**
         * The cell styling options for the subtotals of header cells.
         */
        metricHeaderCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The style targets options for subtotals.
         */
        styleTargets?: outputs.quicksight.AnalysisTableStyleTarget[];
        /**
         * The cell styling options for the subtotal cells.
         */
        totalCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The visibility configuration for the subtotal cells.
         */
        totalsVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The cell styling options for the subtotals of value cells.
         */
        valueCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
    }

    export interface AnalysisTableAggregatedFieldWells {
        /**
         * The group by field well for a pivot table. Values are grouped by group by fields.
         */
        groupBy?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The values field well for a pivot table. Values are aggregated based on group by fields.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisTableBorderOptions {
        /**
         * The color of a table border.
         */
        color?: string;
        /**
         * The style (none, solid) of a table border.
         */
        style?: enums.quicksight.AnalysisTableBorderStyle;
        /**
         * The thickness of a table border.
         */
        thickness?: number;
    }

    export interface AnalysisTableCellConditionalFormatting {
        /**
         * The field ID of the cell for conditional formatting.
         */
        fieldId: string;
        /**
         * The text format of the cell for conditional formatting.
         */
        textFormat?: outputs.quicksight.AnalysisTextConditionalFormat;
    }

    export interface AnalysisTableCellImageSizingConfiguration {
        /**
         * The cell scaling configuration of the sizing options for the table image configuration.
         */
        tableCellImageScalingConfiguration?: enums.quicksight.AnalysisTableCellImageScalingConfiguration;
    }

    export interface AnalysisTableCellStyle {
        /**
         * The background color for the table cells.
         */
        backgroundColor?: string;
        /**
         * The borders for the table cells.
         */
        border?: outputs.quicksight.AnalysisGlobalTableBorderOptions;
        /**
         * The font configuration of the table cells.
         */
        fontConfiguration?: outputs.quicksight.AnalysisFontConfiguration;
        /**
         * The height color for the table cells.
         */
        height?: number;
        /**
         * The horizontal text alignment (left, center, right, auto) for the table cells.
         */
        horizontalTextAlignment?: enums.quicksight.AnalysisHorizontalTextAlignment;
        /**
         * The text wrap (none, wrap) for the table cells.
         */
        textWrap?: enums.quicksight.AnalysisTextWrap;
        /**
         * The vertical text alignment (top, middle, bottom) for the table cells.
         */
        verticalTextAlignment?: enums.quicksight.AnalysisVerticalTextAlignment;
        /**
         * The visibility of the table cells.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTableConditionalFormatting {
        /**
         * Conditional formatting options for a `PivotTableVisual` .
         */
        conditionalFormattingOptions?: outputs.quicksight.AnalysisTableConditionalFormattingOption[];
    }

    export interface AnalysisTableConditionalFormattingOption {
        /**
         * The cell conditional formatting option for a table.
         */
        cell?: outputs.quicksight.AnalysisTableCellConditionalFormatting;
        /**
         * The row conditional formatting option for a table.
         */
        row?: outputs.quicksight.AnalysisTableRowConditionalFormatting;
    }

    export interface AnalysisTableConfiguration {
        /**
         * The field options for a table visual.
         */
        fieldOptions?: outputs.quicksight.AnalysisTableFieldOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisTableFieldWells;
        /**
         * The paginated report options for a table visual.
         */
        paginatedReportOptions?: outputs.quicksight.AnalysisTablePaginatedReportOptions;
        /**
         * The sort configuration for a `TableVisual` .
         */
        sortConfiguration?: outputs.quicksight.AnalysisTableSortConfiguration;
        /**
         * A collection of inline visualizations to display within a chart.
         */
        tableInlineVisualizations?: outputs.quicksight.AnalysisTableInlineVisualization[];
        /**
         * The table options for a table visual.
         */
        tableOptions?: outputs.quicksight.AnalysisTableOptions;
        /**
         * The total options for a table visual.
         */
        totalOptions?: outputs.quicksight.AnalysisTotalOptions;
    }

    export interface AnalysisTableFieldCustomIconContent {
        /**
         * The icon set type (link) of the custom icon content for table URL link content.
         */
        icon?: enums.quicksight.AnalysisTableFieldIconSetType;
    }

    export interface AnalysisTableFieldCustomTextContent {
        /**
         * The font configuration of the custom text content for the table URL link content.
         */
        fontConfiguration: outputs.quicksight.AnalysisFontConfiguration;
        /**
         * The string value of the custom text content for the table URL link content.
         */
        value?: string;
    }

    export interface AnalysisTableFieldImageConfiguration {
        /**
         * The sizing options for the table image configuration.
         */
        sizingOptions?: outputs.quicksight.AnalysisTableCellImageSizingConfiguration;
    }

    export interface AnalysisTableFieldLinkConfiguration {
        /**
         * The URL content (text, icon) for the table link configuration.
         */
        content: outputs.quicksight.AnalysisTableFieldLinkContentConfiguration;
        /**
         * The URL target (new tab, new window, same tab) for the table link configuration.
         */
        target: enums.quicksight.AnalysisUrlTargetConfiguration;
    }

    export interface AnalysisTableFieldLinkContentConfiguration {
        /**
         * The custom icon content for the table link content configuration.
         */
        customIconContent?: outputs.quicksight.AnalysisTableFieldCustomIconContent;
        /**
         * The custom text content (value, font configuration) for the table link content configuration.
         */
        customTextContent?: outputs.quicksight.AnalysisTableFieldCustomTextContent;
    }

    export interface AnalysisTableFieldOption {
        /**
         * The custom label for a table field.
         */
        customLabel?: string;
        /**
         * The field ID for a table field.
         */
        fieldId: string;
        /**
         * The URL configuration for a table field.
         */
        urlStyling?: outputs.quicksight.AnalysisTableFieldUrlConfiguration;
        /**
         * The visibility of a table field.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface AnalysisTableFieldOptions {
        /**
         * The order of the field IDs that are configured as field options for a table visual.
         */
        order?: string[];
        /**
         * The settings for the pinned columns of a table visual.
         */
        pinnedFieldOptions?: outputs.quicksight.AnalysisTablePinnedFieldOptions;
        /**
         * The field options to be configured to a table.
         */
        selectedFieldOptions?: outputs.quicksight.AnalysisTableFieldOption[];
    }

    export interface AnalysisTableFieldUrlConfiguration {
        /**
         * The image configuration of a table field URL.
         */
        imageConfiguration?: outputs.quicksight.AnalysisTableFieldImageConfiguration;
        /**
         * The link configuration of a table field URL.
         */
        linkConfiguration?: outputs.quicksight.AnalysisTableFieldLinkConfiguration;
    }

    export interface AnalysisTableFieldWells {
        /**
         * The aggregated field well for the table.
         */
        tableAggregatedFieldWells?: outputs.quicksight.AnalysisTableAggregatedFieldWells;
        /**
         * The unaggregated field well for the table.
         */
        tableUnaggregatedFieldWells?: outputs.quicksight.AnalysisTableUnaggregatedFieldWells;
    }

    export interface AnalysisTableInlineVisualization {
        /**
         * The configuration of the inline visualization of the data bars within a chart.
         */
        dataBars?: outputs.quicksight.AnalysisDataBarsOptions;
    }

    export interface AnalysisTableOptions {
        /**
         * The table cell style of table cells.
         */
        cellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The table cell style of a table header.
         */
        headerStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The orientation (vertical, horizontal) for a table.
         */
        orientation?: enums.quicksight.AnalysisTableOrientation;
        /**
         * The row alternate color options (widget status, row alternate colors) for a table.
         */
        rowAlternateColorOptions?: outputs.quicksight.AnalysisRowAlternateColorOptions;
    }

    export interface AnalysisTablePaginatedReportOptions {
        /**
         * The visibility of repeating header rows on each page.
         */
        overflowColumnHeaderVisibility?: enums.quicksight.AnalysisVisibility;
        /**
         * The visibility of printing table overflow across pages.
         */
        verticalOverflowVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTablePinnedFieldOptions {
        /**
         * A list of columns to be pinned to the left of a table visual.
         */
        pinnedLeftFields?: string[];
    }

    export interface AnalysisTableRowConditionalFormatting {
        /**
         * The conditional formatting color (solid, gradient) of the background for a table row.
         */
        backgroundColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
        /**
         * The conditional formatting color (solid, gradient) of the text for a table row.
         */
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisTableSideBorderOptions {
        /**
         * The table border options of the bottom border.
         */
        bottom?: outputs.quicksight.AnalysisTableBorderOptions;
        /**
         * The table border options of the inner horizontal border.
         */
        innerHorizontal?: outputs.quicksight.AnalysisTableBorderOptions;
        /**
         * The table border options of the inner vertical border.
         */
        innerVertical?: outputs.quicksight.AnalysisTableBorderOptions;
        /**
         * The table border options of the left border.
         */
        left?: outputs.quicksight.AnalysisTableBorderOptions;
        /**
         * The table border options of the right border.
         */
        right?: outputs.quicksight.AnalysisTableBorderOptions;
        /**
         * The table border options of the top border.
         */
        top?: outputs.quicksight.AnalysisTableBorderOptions;
    }

    export interface AnalysisTableSortConfiguration {
        /**
         * The pagination configuration (page size, page number) for the table.
         */
        paginationConfiguration?: outputs.quicksight.AnalysisPaginationConfiguration;
        /**
         * The field sort options for rows in the table.
         */
        rowSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisTableStyleTarget {
        /**
         * The cell type of the table style target.
         */
        cellType: enums.quicksight.AnalysisStyledCellType;
    }

    export interface AnalysisTableUnaggregatedFieldWells {
        /**
         * The values field well for a pivot table. Values are unaggregated for an unaggregated table.
         */
        values?: outputs.quicksight.AnalysisUnaggregatedField[];
    }

    export interface AnalysisTableVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisTableConfiguration;
        /**
         * The conditional formatting for a `PivotTableVisual` .
         */
        conditionalFormatting?: outputs.quicksight.AnalysisTableConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface AnalysisTextAreaControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the placeholder options in a text area control.
         */
        placeholderOptions?: outputs.quicksight.AnalysisTextControlPlaceholderOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisTextConditionalFormat {
        /**
         * The conditional formatting for the text background color.
         */
        backgroundColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
        /**
         * The conditional formatting for the icon.
         */
        icon?: outputs.quicksight.AnalysisConditionalFormattingIcon;
        /**
         * The conditional formatting for the text color.
         */
        textColor?: outputs.quicksight.AnalysisConditionalFormattingColor;
    }

    export interface AnalysisTextControlPlaceholderOptions {
        /**
         * The visibility configuration of the placeholder options in a text control.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTextFieldControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.AnalysisSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the placeholder options in a text field control.
         */
        placeholderOptions?: outputs.quicksight.AnalysisTextControlPlaceholderOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.AnalysisLabelOptions;
    }

    export interface AnalysisThousandSeparatorOptions {
        /**
         * Determines the thousands separator symbol.
         */
        symbol?: enums.quicksight.AnalysisNumericSeparatorSymbol;
        /**
         * Determines the visibility of the thousands separator.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTimeBasedForecastProperties {
        /**
         * The lower boundary setup of a forecast computation.
         */
        lowerBoundary?: number;
        /**
         * The periods backward setup of a forecast computation.
         */
        periodsBackward?: number;
        /**
         * The periods forward setup of a forecast computation.
         */
        periodsForward?: number;
        /**
         * The prediction interval setup of a forecast computation.
         */
        predictionInterval?: number;
        /**
         * The seasonality setup of a forecast computation. Choose one of the following options:
         *
         * - `NULL` : The input is set to `NULL` .
         * - `NON_NULL` : The input is set to a custom value.
         */
        seasonality?: number;
        /**
         * The upper boundary setup of a forecast computation.
         */
        upperBoundary?: number;
    }

    export interface AnalysisTimeEqualityFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.AnalysisDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The parameter whose value should be used for the filter value.
         *
         * This field is mutually exclusive to `Value` and `RollingDate` .
         */
        parameterName?: string;
        /**
         * The rolling date input for the `TimeEquality` filter.
         *
         * This field is mutually exclusive to `Value` and `ParameterName` .
         */
        rollingDate?: outputs.quicksight.AnalysisRollingDateConfiguration;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
        /**
         * The value of a `TimeEquality` filter.
         *
         * This field is mutually exclusive to `RollingDate` and `ParameterName` .
         */
        value?: string;
    }

    export interface AnalysisTimeRangeDrillDownFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The maximum value for the filter value range.
         */
        rangeMaximum: string;
        /**
         * The minimum value for the filter value range.
         */
        rangeMinimum: string;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity: enums.quicksight.AnalysisTimeGranularity;
    }

    export interface AnalysisTimeRangeFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.AnalysisDefaultFilterControlConfiguration;
        /**
         * The exclude period of the time range filter.
         */
        excludePeriodConfiguration?: outputs.quicksight.AnalysisExcludePeriodConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * Determines whether the maximum value in the filter value range should be included in the filtered results.
         */
        includeMaximum?: boolean;
        /**
         * Determines whether the minimum value in the filter value range should be included in the filtered results.
         */
        includeMinimum?: boolean;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.AnalysisFilterNullOption;
        /**
         * The maximum value for the filter value range.
         */
        rangeMaximumValue?: outputs.quicksight.AnalysisTimeRangeFilterValue;
        /**
         * The minimum value for the filter value range.
         */
        rangeMinimumValue?: outputs.quicksight.AnalysisTimeRangeFilterValue;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
    }

    export interface AnalysisTimeRangeFilterValue {
        /**
         * The parameter type input value.
         */
        parameter?: string;
        /**
         * The rolling date input value.
         */
        rollingDate?: outputs.quicksight.AnalysisRollingDateConfiguration;
        /**
         * The static input value.
         */
        staticValue?: string;
    }

    export interface AnalysisTooltipItem {
        /**
         * The tooltip item for the columns that are not part of a field well.
         */
        columnTooltipItem?: outputs.quicksight.AnalysisColumnTooltipItem;
        /**
         * The tooltip item for the fields.
         */
        fieldTooltipItem?: outputs.quicksight.AnalysisFieldTooltipItem;
    }

    export interface AnalysisTooltipOptions {
        /**
         * The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
         */
        fieldBasedTooltip?: outputs.quicksight.AnalysisFieldBasedTooltip;
        /**
         * The selected type for the tooltip. Choose one of the following options:
         *
         * - `BASIC` : A basic tooltip.
         * - `DETAILED` : A detailed tooltip.
         */
        selectedTooltipType?: enums.quicksight.AnalysisSelectedTooltipType;
        /**
         * Determines whether or not the tooltip is visible.
         */
        tooltipVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTopBottomFilter {
        /**
         * The aggregation and sort configuration of the top bottom filter.
         */
        aggregationSortConfigurations: outputs.quicksight.AnalysisAggregationSortConfiguration[];
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.AnalysisDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The number of items to include in the top bottom filter results.
         */
        limit?: number;
        /**
         * The parameter whose value should be used for the filter value.
         */
        parameterName?: string;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.AnalysisTimeGranularity;
    }

    export interface AnalysisTopBottomMoversComputation {
        /**
         * The category field that is used in a computation.
         */
        category?: outputs.quicksight.AnalysisDimensionField;
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The mover size setup of the top and bottom movers computation.
         */
        moverSize?: number;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The sort order setup of the top and bottom movers computation.
         */
        sortOrder?: enums.quicksight.AnalysisTopBottomSortOrder;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.AnalysisDimensionField;
        /**
         * The computation type. Choose from the following options:
         *
         * - TOP: Top movers computation.
         * - BOTTOM: Bottom movers computation.
         */
        type: enums.quicksight.AnalysisTopBottomComputationType;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisTopBottomRankedComputation {
        /**
         * The category field that is used in a computation.
         */
        category?: outputs.quicksight.AnalysisDimensionField;
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The result size of a top and bottom ranked computation.
         */
        resultSize?: number;
        /**
         * The computation type. Choose one of the following options:
         *
         * - TOP: A top ranked computation.
         * - BOTTOM: A bottom ranked computation.
         */
        type: enums.quicksight.AnalysisTopBottomComputationType;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisTotalAggregationComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.AnalysisMeasureField;
    }

    export interface AnalysisTotalAggregationFunction {
        /**
         * A built in aggregation function for total values.
         */
        simpleTotalAggregationFunction?: enums.quicksight.AnalysisSimpleTotalAggregationFunction;
    }

    export interface AnalysisTotalAggregationOption {
        /**
         * The field id that's associated with the total aggregation option.
         */
        fieldId: string;
        /**
         * The total aggregation function that you want to set for a specified field id.
         */
        totalAggregationFunction: outputs.quicksight.AnalysisTotalAggregationFunction;
    }

    export interface AnalysisTotalOptions {
        /**
         * The custom label string for the total cells.
         */
        customLabel?: string;
        /**
         * The placement (start, end) for the total cells.
         */
        placement?: enums.quicksight.AnalysisTableTotalsPlacement;
        /**
         * The scroll status (pinned, scrolled) for the total cells.
         */
        scrollStatus?: enums.quicksight.AnalysisTableTotalsScrollStatus;
        /**
         * The total aggregation settings for each value field.
         */
        totalAggregationOptions?: outputs.quicksight.AnalysisTotalAggregationOption[];
        /**
         * Cell styling options for the total cells.
         */
        totalCellStyle?: outputs.quicksight.AnalysisTableCellStyle;
        /**
         * The visibility configuration for the total cells.
         */
        totalsVisibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisTreeMapAggregatedFieldWells {
        /**
         * The color field well of a tree map. Values are grouped by aggregations based on group by fields.
         */
        colors?: outputs.quicksight.AnalysisMeasureField[];
        /**
         * The group by field well of a tree map. Values are grouped based on group by fields.
         */
        groups?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The size field well of a tree map. Values are aggregated based on group by fields.
         */
        sizes?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisTreeMapConfiguration {
        /**
         * The label options (label text, label visibility) for the colors displayed in a tree map.
         */
        colorLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The color options (gradient color, point of divergence) of a tree map.
         */
        colorScale?: outputs.quicksight.AnalysisColorScale;
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisTreeMapFieldWells;
        /**
         * The label options (label text, label visibility) of the groups that are displayed in a tree map.
         */
        groupLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The label options (label text, label visibility) of the sizes that are displayed in a tree map.
         */
        sizeLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The sort configuration of a tree map.
         */
        sortConfiguration?: outputs.quicksight.AnalysisTreeMapSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.AnalysisTooltipOptions;
    }

    export interface AnalysisTreeMapFieldWells {
        /**
         * The aggregated field wells of a tree map.
         */
        treeMapAggregatedFieldWells?: outputs.quicksight.AnalysisTreeMapAggregatedFieldWells;
    }

    export interface AnalysisTreeMapSortConfiguration {
        /**
         * The limit on the number of groups that are displayed.
         */
        treeMapGroupItemsLimitConfiguration?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of group by fields.
         */
        treeMapSort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisTreeMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisTreeMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface AnalysisTrendArrowOptions {
        /**
         * The visibility of the trend arrows.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisUnaggregatedField {
        /**
         * The column that is used in the `UnaggregatedField` .
         */
        column: outputs.quicksight.AnalysisColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.AnalysisFormatConfiguration;
    }

    export interface AnalysisUniqueValuesComputation {
        /**
         * The category field that is used in a computation.
         */
        category?: outputs.quicksight.AnalysisDimensionField;
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
    }

    /**
     * <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
     */
    export interface AnalysisValidationStrategy {
        /**
         * The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
         */
        mode: enums.quicksight.AnalysisValidationStrategyMode;
    }

    export interface AnalysisVisibleRangeOptions {
        /**
         * The percent range in the visible range.
         */
        percentRange?: outputs.quicksight.AnalysisPercentVisibleRange;
    }

    export interface AnalysisVisual {
        /**
         * A bar chart.
         *
         * For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
         */
        barChartVisual?: outputs.quicksight.AnalysisBarChartVisual;
        /**
         * A box plot.
         *
         * For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
         */
        boxPlotVisual?: outputs.quicksight.AnalysisBoxPlotVisual;
        /**
         * A combo chart.
         *
         * For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
         */
        comboChartVisual?: outputs.quicksight.AnalysisComboChartVisual;
        /**
         * A visual that contains custom content.
         *
         * For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
         */
        customContentVisual?: outputs.quicksight.AnalysisCustomContentVisual;
        /**
         * An empty visual.
         */
        emptyVisual?: outputs.quicksight.AnalysisEmptyVisual;
        /**
         * A filled map.
         *
         * For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
         */
        filledMapVisual?: outputs.quicksight.AnalysisFilledMapVisual;
        /**
         * A funnel chart.
         *
         * For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
         */
        funnelChartVisual?: outputs.quicksight.AnalysisFunnelChartVisual;
        /**
         * A gauge chart.
         *
         * For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
         */
        gaugeChartVisual?: outputs.quicksight.AnalysisGaugeChartVisual;
        /**
         * A geospatial map or a points on map visual.
         *
         * For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
         */
        geospatialMapVisual?: outputs.quicksight.AnalysisGeospatialMapVisual;
        /**
         * A heat map.
         *
         * For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
         */
        heatMapVisual?: outputs.quicksight.AnalysisHeatMapVisual;
        /**
         * A histogram.
         *
         * For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
         */
        histogramVisual?: outputs.quicksight.AnalysisHistogramVisual;
        /**
         * An insight visual.
         *
         * For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
         */
        insightVisual?: outputs.quicksight.AnalysisInsightVisual;
        /**
         * A key performance indicator (KPI).
         *
         * For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
         */
        kpiVisual?: outputs.quicksight.AnalysisKpiVisual;
        /**
         * A line chart.
         *
         * For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
         */
        lineChartVisual?: outputs.quicksight.AnalysisLineChartVisual;
        /**
         * A pie or donut chart.
         *
         * For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
         */
        pieChartVisual?: outputs.quicksight.AnalysisPieChartVisual;
        /**
         * A pivot table.
         *
         * For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
         */
        pivotTableVisual?: outputs.quicksight.AnalysisPivotTableVisual;
        /**
         * A radar chart visual.
         *
         * For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
         */
        radarChartVisual?: outputs.quicksight.AnalysisRadarChartVisual;
        /**
         * A sankey diagram.
         *
         * For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
         */
        sankeyDiagramVisual?: outputs.quicksight.AnalysisSankeyDiagramVisual;
        /**
         * A scatter plot.
         *
         * For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
         */
        scatterPlotVisual?: outputs.quicksight.AnalysisScatterPlotVisual;
        /**
         * A table visual.
         *
         * For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
         */
        tableVisual?: outputs.quicksight.AnalysisTableVisual;
        /**
         * A tree map.
         *
         * For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
         */
        treeMapVisual?: outputs.quicksight.AnalysisTreeMapVisual;
        /**
         * A waterfall chart.
         *
         * For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
         */
        waterfallVisual?: outputs.quicksight.AnalysisWaterfallVisual;
        /**
         * A word cloud.
         *
         * For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
         */
        wordCloudVisual?: outputs.quicksight.AnalysisWordCloudVisual;
    }

    export interface AnalysisVisualCustomAction {
        /**
         * A list of `VisualCustomActionOperations` .
         *
         * This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
         */
        actionOperations: outputs.quicksight.AnalysisVisualCustomActionOperation[];
        /**
         * The ID of the `VisualCustomAction` .
         */
        customActionId: string;
        /**
         * The name of the `VisualCustomAction` .
         */
        name: string;
        /**
         * The status of the `VisualCustomAction` .
         */
        status?: enums.quicksight.AnalysisWidgetStatus;
        /**
         * The trigger of the `VisualCustomAction` .
         *
         * Valid values are defined as follows:
         *
         * - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
         * - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
         */
        trigger: enums.quicksight.AnalysisVisualCustomActionTrigger;
    }

    export interface AnalysisVisualCustomActionOperation {
        /**
         * The filter operation that filters data included in a visual or in an entire sheet.
         */
        filterOperation?: outputs.quicksight.AnalysisCustomActionFilterOperation;
        /**
         * The navigation operation that navigates between different sheets in the same analysis.
         */
        navigationOperation?: outputs.quicksight.AnalysisCustomActionNavigationOperation;
        /**
         * The set parameter operation that sets parameters in custom action.
         */
        setParametersOperation?: outputs.quicksight.AnalysisCustomActionSetParametersOperation;
        /**
         * The URL operation that opens a link to another webpage.
         */
        urlOperation?: outputs.quicksight.AnalysisCustomActionUrlOperation;
    }

    export interface AnalysisVisualPalette {
        /**
         * The chart color options for the visual palette.
         */
        chartColor?: string;
        /**
         * The color map options for the visual palette.
         */
        colorMap?: outputs.quicksight.AnalysisDataPathColor[];
    }

    export interface AnalysisVisualSubtitleLabelOptions {
        /**
         * The long text format of the subtitle label, such as plain text or rich text.
         */
        formatText?: outputs.quicksight.AnalysisLongFormatText;
        /**
         * The visibility of the subtitle label.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisVisualTitleLabelOptions {
        /**
         * The short text format of the title label, such as plain text or rich text.
         */
        formatText?: outputs.quicksight.AnalysisShortFormatText;
        /**
         * The visibility of the title label.
         */
        visibility?: enums.quicksight.AnalysisVisibility;
    }

    export interface AnalysisWaterfallChartAggregatedFieldWells {
        /**
         * The breakdown field wells of a waterfall visual.
         */
        breakdowns?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The category field wells of a waterfall visual.
         */
        categories?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The value field wells of a waterfall visual.
         */
        values?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisWaterfallChartColorConfiguration {
        /**
         * The color configuration for individual groups within a waterfall visual.
         */
        groupColorConfiguration?: outputs.quicksight.AnalysisWaterfallChartGroupColorConfiguration;
    }

    export interface AnalysisWaterfallChartConfiguration {
        /**
         * The options that determine the presentation of the category axis.
         */
        categoryAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The options that determine the presentation of the category axis label.
         */
        categoryAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The color configuration of a waterfall visual.
         */
        colorConfiguration?: outputs.quicksight.AnalysisWaterfallChartColorConfiguration;
        /**
         * The data label configuration of a waterfall visual.
         */
        dataLabels?: outputs.quicksight.AnalysisDataLabelOptions;
        /**
         * The field well configuration of a waterfall visual.
         */
        fieldWells?: outputs.quicksight.AnalysisWaterfallChartFieldWells;
        /**
         * The legend configuration of a waterfall visual.
         */
        legend?: outputs.quicksight.AnalysisLegendOptions;
        /**
         * The options that determine the presentation of the y-axis.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.AnalysisAxisDisplayOptions;
        /**
         * The options that determine the presentation of the y-axis label.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The sort configuration of a waterfall visual.
         */
        sortConfiguration?: outputs.quicksight.AnalysisWaterfallChartSortConfiguration;
        /**
         * The visual palette configuration of a waterfall visual.
         */
        visualPalette?: outputs.quicksight.AnalysisVisualPalette;
        /**
         * The options that determine the presentation of a waterfall visual.
         */
        waterfallChartOptions?: outputs.quicksight.AnalysisWaterfallChartOptions;
    }

    export interface AnalysisWaterfallChartFieldWells {
        /**
         * The field well configuration of a waterfall visual.
         */
        waterfallChartAggregatedFieldWells?: outputs.quicksight.AnalysisWaterfallChartAggregatedFieldWells;
    }

    export interface AnalysisWaterfallChartGroupColorConfiguration {
        /**
         * Defines the color for the negative bars of a waterfall chart.
         */
        negativeBarColor?: string;
        /**
         * Defines the color for the positive bars of a waterfall chart.
         */
        positiveBarColor?: string;
        /**
         * Defines the color for the total bars of a waterfall chart.
         */
        totalBarColor?: string;
    }

    export interface AnalysisWaterfallChartOptions {
        /**
         * This option determines the total bar label of a waterfall visual.
         */
        totalBarLabel?: string;
    }

    export interface AnalysisWaterfallChartSortConfiguration {
        /**
         * The limit on the number of bar groups that are displayed.
         */
        breakdownItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisWaterfallVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration for a waterfall visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisWaterfallChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface AnalysisWhatIfPointScenario {
        /**
         * The date that you need the forecast results for.
         */
        date: string;
        /**
         * The target value that you want to meet for the provided date.
         */
        value: number;
    }

    export interface AnalysisWhatIfRangeScenario {
        /**
         * The end date in the date range that you need the forecast results for.
         */
        endDate: string;
        /**
         * The start date in the date range that you need the forecast results for.
         */
        startDate: string;
        /**
         * The target value that you want to meet for the provided date range.
         */
        value: number;
    }

    export interface AnalysisWordCloudAggregatedFieldWells {
        /**
         * The group by field well of a word cloud. Values are grouped by group by fields.
         */
        groupBy?: outputs.quicksight.AnalysisDimensionField[];
        /**
         * The size field well of a word cloud. Values are aggregated based on group by fields.
         */
        size?: outputs.quicksight.AnalysisMeasureField[];
    }

    export interface AnalysisWordCloudChartConfiguration {
        /**
         * The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
         */
        categoryLabelOptions?: outputs.quicksight.AnalysisChartAxisLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.AnalysisWordCloudFieldWells;
        /**
         * The sort configuration of a word cloud visual.
         */
        sortConfiguration?: outputs.quicksight.AnalysisWordCloudSortConfiguration;
        /**
         * The options for a word cloud visual.
         */
        wordCloudOptions?: outputs.quicksight.AnalysisWordCloudOptions;
    }

    export interface AnalysisWordCloudFieldWells {
        /**
         * The aggregated field wells of a word cloud.
         */
        wordCloudAggregatedFieldWells?: outputs.quicksight.AnalysisWordCloudAggregatedFieldWells;
    }

    export interface AnalysisWordCloudOptions {
        /**
         * The cloud layout options (fluid, normal) of a word cloud.
         */
        cloudLayout?: enums.quicksight.AnalysisWordCloudCloudLayout;
        /**
         * The length limit of each word from 1-100.
         */
        maximumStringLength?: number;
        /**
         * The word casing options (lower_case, existing_case) for the words in a word cloud.
         */
        wordCasing?: enums.quicksight.AnalysisWordCloudWordCasing;
        /**
         * The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
         */
        wordOrientation?: enums.quicksight.AnalysisWordCloudWordOrientation;
        /**
         * The word padding options (none, small, medium, large) for the words in a word cloud.
         */
        wordPadding?: enums.quicksight.AnalysisWordCloudWordPadding;
        /**
         * The word scaling options (emphasize, normal) for the words in a word cloud.
         */
        wordScaling?: enums.quicksight.AnalysisWordCloudWordScaling;
    }

    export interface AnalysisWordCloudSortConfiguration {
        /**
         * The limit on the number of groups that are displayed in a word cloud.
         */
        categoryItemsLimit?: outputs.quicksight.AnalysisItemsLimitConfiguration;
        /**
         * The sort configuration of group by fields.
         */
        categorySort?: outputs.quicksight.AnalysisFieldSortOptions[];
    }

    export interface AnalysisWordCloudVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.AnalysisVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.AnalysisWordCloudChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.AnalysisColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.AnalysisVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.AnalysisVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    /**
     * <p>An ad hoc (one-time) filtering option.</p>
     */
    export interface DashboardAdHocFilteringOption {
        /**
         * Availability status.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardAggregationFunction {
        /**
         * Aggregation for attributes.
         */
        attributeAggregationFunction?: outputs.quicksight.DashboardAttributeAggregationFunction;
        /**
         * Aggregation for categorical values.
         *
         * - `COUNT` : Aggregate by the total number of values, including duplicates.
         * - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
         */
        categoricalAggregationFunction?: enums.quicksight.DashboardCategoricalAggregationFunction;
        /**
         * Aggregation for date values.
         *
         * - `COUNT` : Aggregate by the total number of values, including duplicates.
         * - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
         * - `MIN` : Select the smallest date value.
         * - `MAX` : Select the largest date value.
         */
        dateAggregationFunction?: enums.quicksight.DashboardDateAggregationFunction;
        /**
         * Aggregation for numerical values.
         */
        numericalAggregationFunction?: outputs.quicksight.DashboardNumericalAggregationFunction;
    }

    export interface DashboardAggregationSortConfiguration {
        /**
         * The function that aggregates the values in `Column` .
         */
        aggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
        /**
         * The column that determines the sort order of aggregated values.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The sort direction of values.
         *
         * - `ASC` : Sort in ascending order.
         * - `DESC` : Sort in descending order.
         */
        sortDirection: enums.quicksight.DashboardSortDirection;
    }

    export interface DashboardAllSheetsFilterScopeConfiguration {
    }

    export interface DashboardAnalysisDefaults {
        /**
         * The configuration for default new sheet settings.
         */
        defaultNewSheetConfiguration: outputs.quicksight.DashboardDefaultNewSheetConfiguration;
    }

    export interface DashboardAnchorDateConfiguration {
        /**
         * The options for the date configuration. Choose one of the options below:
         *
         * - `NOW`
         */
        anchorOption?: enums.quicksight.DashboardAnchorOption;
        /**
         * The name of the parameter that is used for the anchor date configuration.
         */
        parameterName?: string;
    }

    export interface DashboardArcAxisConfiguration {
        /**
         * The arc axis range of a `GaugeChartVisual` .
         */
        range?: outputs.quicksight.DashboardArcAxisDisplayRange;
        /**
         * The reserved range of the arc axis.
         */
        reserveRange?: number;
    }

    export interface DashboardArcAxisDisplayRange {
        /**
         * The maximum value of the arc axis range.
         */
        max?: number;
        /**
         * The minimum value of the arc axis range.
         */
        min?: number;
    }

    export interface DashboardArcConfiguration {
        /**
         * The option that determines the arc angle of a `GaugeChartVisual` .
         */
        arcAngle?: number;
        /**
         * The options that determine the arc thickness of a `GaugeChartVisual` .
         */
        arcThickness?: enums.quicksight.DashboardArcThicknessOptions;
    }

    export interface DashboardArcOptions {
        /**
         * The arc thickness of a `GaugeChartVisual` .
         */
        arcThickness?: enums.quicksight.DashboardArcThickness;
    }

    export interface DashboardAssetOptions {
        /**
         * Determines the timezone for the analysis.
         */
        timezone?: string;
        /**
         * Determines the week start day for an analysis.
         */
        weekStart?: enums.quicksight.DashboardDayOfTheWeek;
    }

    export interface DashboardAttributeAggregationFunction {
        /**
         * The built-in aggregation functions for attributes.
         *
         * - `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension fields.
         */
        simpleAttributeAggregation?: enums.quicksight.DashboardSimpleAttributeAggregationFunction;
        /**
         * Used by the `UNIQUE_VALUE` aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.
         */
        valueForMultipleValues?: string;
    }

    export interface DashboardAxisDataOptions {
        /**
         * The options for an axis with a date field.
         */
        dateAxisOptions?: outputs.quicksight.DashboardDateAxisOptions;
        /**
         * The options for an axis with a numeric field.
         */
        numericAxisOptions?: outputs.quicksight.DashboardNumericAxisOptions;
    }

    export interface DashboardAxisDisplayDataDrivenRange {
    }

    export interface DashboardAxisDisplayMinMaxRange {
        /**
         * The maximum setup for an axis display range.
         */
        maximum?: number;
        /**
         * The minimum setup for an axis display range.
         */
        minimum?: number;
    }

    export interface DashboardAxisDisplayOptions {
        /**
         * Determines whether or not the axis line is visible.
         */
        axisLineVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        axisOffset?: string;
        /**
         * The data options for an axis.
         */
        dataOptions?: outputs.quicksight.DashboardAxisDataOptions;
        /**
         * Determines whether or not the grid line is visible.
         */
        gridLineVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The scroll bar options for an axis.
         */
        scrollbarOptions?: outputs.quicksight.DashboardScrollBarOptions;
        /**
         * The tick label options of an axis.
         */
        tickLabelOptions?: outputs.quicksight.DashboardAxisTickLabelOptions;
    }

    export interface DashboardAxisDisplayRange {
        /**
         * The data-driven setup of an axis display range.
         */
        dataDriven?: outputs.quicksight.DashboardAxisDisplayDataDrivenRange;
        /**
         * The minimum and maximum setup of an axis display range.
         */
        minMax?: outputs.quicksight.DashboardAxisDisplayMinMaxRange;
    }

    export interface DashboardAxisLabelOptions {
        /**
         * The options that indicate which field the label belongs to.
         */
        applyTo?: outputs.quicksight.DashboardAxisLabelReferenceOptions;
        /**
         * The text for the axis label.
         */
        customLabel?: string;
        /**
         * The font configuration of the axis label.
         */
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
    }

    export interface DashboardAxisLabelReferenceOptions {
        /**
         * The column that the axis label is targeted to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The field that the axis label is targeted to.
         */
        fieldId: string;
    }

    export interface DashboardAxisLinearScale {
        /**
         * The step count setup of a linear axis.
         */
        stepCount?: number;
        /**
         * The step size setup of a linear axis.
         */
        stepSize?: number;
    }

    export interface DashboardAxisLogarithmicScale {
        /**
         * The base setup of a logarithmic axis scale.
         */
        base?: number;
    }

    export interface DashboardAxisScale {
        /**
         * The linear axis scale setup.
         */
        linear?: outputs.quicksight.DashboardAxisLinearScale;
        /**
         * The logarithmic axis scale setup.
         */
        logarithmic?: outputs.quicksight.DashboardAxisLogarithmicScale;
    }

    export interface DashboardAxisTickLabelOptions {
        /**
         * Determines whether or not the axis ticks are visible.
         */
        labelOptions?: outputs.quicksight.DashboardLabelOptions;
        /**
         * The rotation angle of the axis tick labels.
         */
        rotationAngle?: number;
    }

    export interface DashboardBarChartAggregatedFieldWells {
        /**
         * The category (y-axis) field well of a bar chart.
         */
        category?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The color (group/color) field well of a bar chart.
         */
        colors?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The small multiples field well of a bar chart.
         */
        smallMultiples?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The value field wells of a bar chart. Values are aggregated by category.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardBarChartConfiguration {
        /**
         * Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.
         */
        barsArrangement?: enums.quicksight.DashboardBarsArrangement;
        /**
         * The label display options (grid line, range, scale, axis step) for bar chart category.
         */
        categoryAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) for a bar chart.
         */
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.
         */
        colorLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The contribution analysis (anomaly configuration) setup of the visual.
         */
        contributionAnalysisDefaults?: outputs.quicksight.DashboardContributionAnalysisDefault[];
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardBarChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The orientation of the bars in a bar chart visual. There are two valid values in this structure:
         *
         * - `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
         * - `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
         */
        orientation?: enums.quicksight.DashboardBarChartOrientation;
        /**
         * The reference line setup of the visual.
         */
        referenceLines?: outputs.quicksight.DashboardReferenceLine[];
        /**
         * The small multiples setup for the visual.
         */
        smallMultiplesOptions?: outputs.quicksight.DashboardSmallMultiplesOptions;
        /**
         * The sort configuration of a `BarChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.DashboardBarChartSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * The label display options (grid line, range, scale, axis step) for a bar chart value.
         */
        valueAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) for a bar chart value.
         */
        valueLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardBarChartFieldWells {
        /**
         * The aggregated field wells of a bar chart.
         */
        barChartAggregatedFieldWells?: outputs.quicksight.DashboardBarChartAggregatedFieldWells;
    }

    export interface DashboardBarChartSortConfiguration {
        /**
         * The limit on the number of categories displayed in a bar chart.
         */
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of category fields.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        /**
         * The limit on the number of values displayed in a bar chart.
         */
        colorItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of color fields in a bar chart.
         */
        colorSort?: outputs.quicksight.DashboardFieldSortOptions[];
        /**
         * The limit on the number of small multiples panels that are displayed.
         */
        smallMultiplesLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the small multiples field.
         */
        smallMultiplesSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardBarChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardBarChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardBinCountOptions {
        /**
         * The options that determine the bin count value.
         */
        value?: number;
    }

    export interface DashboardBinWidthOptions {
        /**
         * The options that determine the bin count limit.
         */
        binCountLimit?: number;
        /**
         * The options that determine the bin width value.
         */
        value?: number;
    }

    export interface DashboardBodySectionConfiguration {
        /**
         * The configuration of content in a body section.
         */
        content: outputs.quicksight.DashboardBodySectionContent;
        /**
         * The configuration of a page break for a section.
         */
        pageBreakConfiguration?: outputs.quicksight.DashboardSectionPageBreakConfiguration;
        /**
         * The unique identifier of a body section.
         */
        sectionId: string;
        /**
         * The style options of a body section.
         */
        style?: outputs.quicksight.DashboardSectionStyle;
    }

    export interface DashboardBodySectionContent {
        /**
         * The layout configuration of a body section.
         */
        layout?: outputs.quicksight.DashboardSectionLayoutConfiguration;
    }

    export interface DashboardBoxPlotAggregatedFieldWells {
        /**
         * The group by field well of a box plot chart. Values are grouped based on group by fields.
         */
        groupBy?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The value field well of a box plot chart. Values are aggregated based on group by fields.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardBoxPlotChartConfiguration {
        /**
         * The box plot chart options for a box plot visual
         */
        boxPlotOptions?: outputs.quicksight.DashboardBoxPlotOptions;
        /**
         * The label display options (grid line, range, scale, axis step) of a box plot category.
         */
        categoryAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort Icon visibility) of a box plot category.
         */
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardBoxPlotFieldWells;
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The label display options (grid line, range, scale, axis step) of a box plot category.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) of a box plot value.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The reference line setup of the visual.
         */
        referenceLines?: outputs.quicksight.DashboardReferenceLine[];
        /**
         * The sort configuration of a `BoxPlotVisual` .
         */
        sortConfiguration?: outputs.quicksight.DashboardBoxPlotSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardBoxPlotFieldWells {
        /**
         * The aggregated field wells of a box plot.
         */
        boxPlotAggregatedFieldWells?: outputs.quicksight.DashboardBoxPlotAggregatedFieldWells;
    }

    export interface DashboardBoxPlotOptions {
        /**
         * Determines the visibility of all data points of the box plot.
         */
        allDataPointsVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * Determines the visibility of the outlier in a box plot.
         */
        outlierVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The style options of the box plot.
         */
        styleOptions?: outputs.quicksight.DashboardBoxPlotStyleOptions;
    }

    export interface DashboardBoxPlotSortConfiguration {
        /**
         * The sort configuration of a group by fields.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        /**
         * The pagination configuration of a table visual or box plot.
         */
        paginationConfiguration?: outputs.quicksight.DashboardPaginationConfiguration;
    }

    export interface DashboardBoxPlotStyleOptions {
        /**
         * The fill styles (solid, transparent) of the box plot.
         */
        fillStyle?: enums.quicksight.DashboardBoxPlotFillStyle;
    }

    export interface DashboardBoxPlotVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardBoxPlotChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface DashboardCalculatedField {
        /**
         * The data set that is used in this calculated field.
         */
        dataSetIdentifier: string;
        /**
         * The expression of the calculated field.
         */
        expression: string;
        /**
         * The name of the calculated field.
         */
        name: string;
    }

    export interface DashboardCalculatedMeasureField {
        /**
         * The expression in the table calculation.
         */
        expression: string;
        /**
         * The custom field ID.
         */
        fieldId: string;
    }

    export interface DashboardCascadingControlConfiguration {
        /**
         * A list of source controls that determine the values that are used in the current control.
         */
        sourceControls?: outputs.quicksight.DashboardCascadingControlSource[];
    }

    export interface DashboardCascadingControlSource {
        /**
         * The column identifier that determines which column to look up for the source sheet control.
         */
        columnToMatch?: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The source sheet control ID of a `CascadingControlSource` .
         */
        sourceSheetControlId?: string;
    }

    export interface DashboardCategoricalDimensionField {
        /**
         * The column that is used in the `CategoricalDimensionField` .
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.DashboardStringFormatConfiguration;
        /**
         * The custom hierarchy ID.
         */
        hierarchyId?: string;
    }

    export interface DashboardCategoricalMeasureField {
        /**
         * The aggregation function of the measure field.
         */
        aggregationFunction?: enums.quicksight.DashboardCategoricalAggregationFunction;
        /**
         * The column that is used in the `CategoricalMeasureField` .
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.DashboardStringFormatConfiguration;
    }

    export interface DashboardCategoryDrillDownFilter {
        /**
         * A list of the string inputs that are the values of the category drill down filter.
         */
        categoryValues: string[];
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
    }

    export interface DashboardCategoryFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The configuration for a `CategoryFilter` .
         */
        configuration: outputs.quicksight.DashboardCategoryFilterConfiguration;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.DashboardDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
    }

    export interface DashboardCategoryFilterConfiguration {
        /**
         * A custom filter that filters based on a single value. This filter can be partially matched.
         */
        customFilterConfiguration?: outputs.quicksight.DashboardCustomFilterConfiguration;
        /**
         * A list of custom filter values. In the Amazon QuickSight console, this filter type is called a custom filter list.
         */
        customFilterListConfiguration?: outputs.quicksight.DashboardCustomFilterListConfiguration;
        /**
         * A list of filter configurations. In the Amazon QuickSight console, this filter type is called a filter list.
         */
        filterListConfiguration?: outputs.quicksight.DashboardFilterListConfiguration;
    }

    export interface DashboardChartAxisLabelOptions {
        /**
         * The label options for a chart axis.
         */
        axisLabelOptions?: outputs.quicksight.DashboardAxisLabelOptions[];
        /**
         * The visibility configuration of the sort icon on a chart's axis label.
         */
        sortIconVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The visibility of an axis label on a chart. Choose one of the following options:
         *
         * - `VISIBLE` : Shows the axis.
         * - `HIDDEN` : Hides the axis.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardClusterMarker {
        /**
         * The simple cluster marker of the cluster marker.
         */
        simpleClusterMarker?: outputs.quicksight.DashboardSimpleClusterMarker;
    }

    export interface DashboardClusterMarkerConfiguration {
        /**
         * The cluster marker that is a part of the cluster marker configuration.
         */
        clusterMarker?: outputs.quicksight.DashboardClusterMarker;
    }

    export interface DashboardColorScale {
        /**
         * Determines the color fill type.
         */
        colorFillType: enums.quicksight.DashboardColorFillType;
        /**
         * Determines the list of colors that are applied to the visual.
         */
        colors: outputs.quicksight.DashboardDataColor[];
        /**
         * Determines the color that is applied to null values.
         */
        nullValueColor?: outputs.quicksight.DashboardDataColor;
    }

    export interface DashboardColorsConfiguration {
        /**
         * A list of up to 50 custom colors.
         */
        customColors?: outputs.quicksight.DashboardCustomColor[];
    }

    export interface DashboardColumnConfiguration {
        /**
         * The color configurations of the column.
         */
        colorsConfiguration?: outputs.quicksight.DashboardColorsConfiguration;
        /**
         * The column.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The format configuration of a column.
         */
        formatConfiguration?: outputs.quicksight.DashboardFormatConfiguration;
        /**
         * The role of the column.
         */
        role?: enums.quicksight.DashboardColumnRole;
    }

    export interface DashboardColumnHierarchy {
        /**
         * The option that determines the hierarchy of any `DateTime` fields.
         */
        dateTimeHierarchy?: outputs.quicksight.DashboardDateTimeHierarchy;
        /**
         * The option that determines the hierarchy of the fields that are built within a visual's field wells. These fields can't be duplicated to other visuals.
         */
        explicitHierarchy?: outputs.quicksight.DashboardExplicitHierarchy;
        /**
         * The option that determines the hierarchy of the fields that are defined during data preparation. These fields are available to use in any analysis that uses the data source.
         */
        predefinedHierarchy?: outputs.quicksight.DashboardPredefinedHierarchy;
    }

    export interface DashboardColumnIdentifier {
        /**
         * The name of the column.
         */
        columnName: string;
        /**
         * The data set that the column belongs to.
         */
        dataSetIdentifier: string;
    }

    export interface DashboardColumnSort {
        /**
         * The aggregation function that is defined in the column sort.
         */
        aggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
        /**
         * The sort direction.
         */
        direction: enums.quicksight.DashboardSortDirection;
        sortBy: outputs.quicksight.DashboardColumnIdentifier;
    }

    export interface DashboardColumnTooltipItem {
        /**
         * The aggregation function of the column tooltip item.
         */
        aggregation?: outputs.quicksight.DashboardAggregationFunction;
        /**
         * The target column of the tooltip item.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The label of the tooltip item.
         */
        label?: string;
        /**
         * The visibility of the tooltip item.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardComboChartAggregatedFieldWells {
        /**
         * The aggregated `BarValues` field well of a combo chart.
         */
        barValues?: outputs.quicksight.DashboardMeasureField[];
        /**
         * The aggregated category field wells of a combo chart.
         */
        category?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The aggregated colors field well of a combo chart.
         */
        colors?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The aggregated `LineValues` field well of a combo chart.
         */
        lineValues?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardComboChartConfiguration {
        /**
         * The options that determine if visual data labels are displayed.
         *
         * The data label options for a bar in a combo chart.
         */
        barDataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * Determines the bar arrangement in a combo chart. The following are valid values in this structure:
         *
         * - `CLUSTERED` : For clustered bar combo charts.
         * - `STACKED` : For stacked bar combo charts.
         * - `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation error.
         */
        barsArrangement?: enums.quicksight.DashboardBarsArrangement;
        /**
         * The category axis of a combo chart.
         */
        categoryAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart category (group/color) field well.
         */
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart's color field well.
         */
        colorLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardComboChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The options that determine if visual data labels are displayed.
         *
         * The data label options for a line in a combo chart.
         */
        lineDataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The label display options (grid line, range, scale, and axis step) of a combo chart's primary y-axis (bar) field well.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart's primary y-axis (bar) field well.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The reference line setup of the visual.
         */
        referenceLines?: outputs.quicksight.DashboardReferenceLine[];
        /**
         * The label display options (grid line, range, scale, axis step) of a combo chart's secondary y-axis (line) field well.
         */
        secondaryYAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart's secondary y-axis(line) field well.
         */
        secondaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The sort configuration of a `ComboChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.DashboardComboChartSortConfiguration;
        /**
         * The legend display setup of the visual.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardComboChartFieldWells {
        /**
         * The aggregated field wells of a combo chart. Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by category.
         */
        comboChartAggregatedFieldWells?: outputs.quicksight.DashboardComboChartAggregatedFieldWells;
    }

    export interface DashboardComboChartSortConfiguration {
        /**
         * The item limit configuration for the category field well of a combo chart.
         */
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the category field well in a combo chart.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        /**
         * The item limit configuration of the color field well in a combo chart.
         */
        colorItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the color field well in a combo chart.
         */
        colorSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardComboChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardComboChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardComparisonConfiguration {
        /**
         * The format of the comparison.
         */
        comparisonFormat?: outputs.quicksight.DashboardComparisonFormatConfiguration;
        /**
         * The method of the comparison. Choose from the following options:
         *
         * - `DIFFERENCE`
         * - `PERCENT_DIFFERENCE`
         * - `PERCENT`
         */
        comparisonMethod?: enums.quicksight.DashboardComparisonMethod;
    }

    export interface DashboardComparisonFormatConfiguration {
        /**
         * The number display format.
         */
        numberDisplayFormatConfiguration?: outputs.quicksight.DashboardNumberDisplayFormatConfiguration;
        /**
         * The percentage display format.
         */
        percentageDisplayFormatConfiguration?: outputs.quicksight.DashboardPercentageDisplayFormatConfiguration;
    }

    export interface DashboardComputation {
        /**
         * The forecast computation configuration.
         */
        forecast?: outputs.quicksight.DashboardForecastComputation;
        /**
         * The growth rate computation configuration.
         */
        growthRate?: outputs.quicksight.DashboardGrowthRateComputation;
        /**
         * The maximum and minimum computation configuration.
         */
        maximumMinimum?: outputs.quicksight.DashboardMaximumMinimumComputation;
        /**
         * The metric comparison computation configuration.
         */
        metricComparison?: outputs.quicksight.DashboardMetricComparisonComputation;
        /**
         * The period over period computation configuration.
         */
        periodOverPeriod?: outputs.quicksight.DashboardPeriodOverPeriodComputation;
        /**
         * The period to `DataSetIdentifier` computation configuration.
         */
        periodToDate?: outputs.quicksight.DashboardPeriodToDateComputation;
        /**
         * The top movers and bottom movers computation configuration.
         */
        topBottomMovers?: outputs.quicksight.DashboardTopBottomMoversComputation;
        /**
         * The top ranked and bottom ranked computation configuration.
         */
        topBottomRanked?: outputs.quicksight.DashboardTopBottomRankedComputation;
        /**
         * The total aggregation computation configuration.
         */
        totalAggregation?: outputs.quicksight.DashboardTotalAggregationComputation;
        /**
         * The unique values computation configuration.
         */
        uniqueValues?: outputs.quicksight.DashboardUniqueValuesComputation;
    }

    export interface DashboardConditionalFormattingColor {
        /**
         * Formatting configuration for gradient color.
         */
        gradient?: outputs.quicksight.DashboardConditionalFormattingGradientColor;
        /**
         * Formatting configuration for solid color.
         */
        solid?: outputs.quicksight.DashboardConditionalFormattingSolidColor;
    }

    export interface DashboardConditionalFormattingCustomIconCondition {
        /**
         * Determines the color of the icon.
         */
        color?: string;
        /**
         * Determines the icon display configuration.
         */
        displayConfiguration?: outputs.quicksight.DashboardConditionalFormattingIconDisplayConfiguration;
        /**
         * The expression that determines the condition of the icon set.
         */
        expression: string;
        /**
         * Custom icon options for an icon set.
         */
        iconOptions: outputs.quicksight.DashboardConditionalFormattingCustomIconOptions;
    }

    export interface DashboardConditionalFormattingCustomIconOptions {
        /**
         * Determines the type of icon.
         */
        icon?: enums.quicksight.DashboardIcon;
        /**
         * Determines the Unicode icon type.
         */
        unicodeIcon?: string;
    }

    export interface DashboardConditionalFormattingGradientColor {
        /**
         * Determines the color.
         */
        color: outputs.quicksight.DashboardGradientColor;
        /**
         * The expression that determines the formatting configuration for gradient color.
         */
        expression: string;
    }

    export interface DashboardConditionalFormattingIcon {
        /**
         * Determines the custom condition for an icon set.
         */
        customCondition?: outputs.quicksight.DashboardConditionalFormattingCustomIconCondition;
        /**
         * Formatting configuration for icon set.
         */
        iconSet?: outputs.quicksight.DashboardConditionalFormattingIconSet;
    }

    export interface DashboardConditionalFormattingIconDisplayConfiguration {
        /**
         * Determines the icon display configuration.
         */
        iconDisplayOption?: enums.quicksight.DashboardConditionalFormattingIconDisplayOption;
    }

    export interface DashboardConditionalFormattingIconSet {
        /**
         * The expression that determines the formatting configuration for the icon set.
         */
        expression: string;
        /**
         * Determines the icon set type.
         */
        iconSetType?: enums.quicksight.DashboardConditionalFormattingIconSetType;
    }

    export interface DashboardConditionalFormattingSolidColor {
        /**
         * Determines the color.
         */
        color?: string;
        /**
         * The expression that determines the formatting configuration for solid color.
         */
        expression: string;
    }

    export interface DashboardContributionAnalysisDefault {
        /**
         * The dimensions columns that are used in the contribution analysis, usually a list of `ColumnIdentifiers` .
         */
        contributorDimensions: outputs.quicksight.DashboardColumnIdentifier[];
        /**
         * The measure field that is used in the contribution analysis.
         */
        measureFieldId: string;
    }

    export interface DashboardCurrencyDisplayFormatConfiguration {
        /**
         * The option that determines the decimal places configuration.
         */
        decimalPlacesConfiguration?: outputs.quicksight.DashboardDecimalPlacesConfiguration;
        /**
         * The options that determine the negative value configuration.
         */
        negativeValueConfiguration?: outputs.quicksight.DashboardNegativeValueConfiguration;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        /**
         * Determines the number scale value for the currency format.
         */
        numberScale?: enums.quicksight.DashboardNumberScale;
        /**
         * Determines the prefix value of the currency format.
         */
        prefix?: string;
        /**
         * The options that determine the numeric separator configuration.
         */
        separatorConfiguration?: outputs.quicksight.DashboardNumericSeparatorConfiguration;
        /**
         * Determines the suffix value of the currency format.
         */
        suffix?: string;
        /**
         * Determines the symbol for the currency format.
         */
        symbol?: string;
    }

    export interface DashboardCustomActionFilterOperation {
        /**
         * The configuration that chooses the fields to be filtered.
         */
        selectedFieldsConfiguration: outputs.quicksight.DashboardFilterOperationSelectedFieldsConfiguration;
        /**
         * The configuration that chooses the target visuals to be filtered.
         */
        targetVisualsConfiguration: outputs.quicksight.DashboardFilterOperationTargetVisualsConfiguration;
    }

    export interface DashboardCustomActionNavigationOperation {
        /**
         * The configuration that chooses the navigation target.
         */
        localNavigationConfiguration?: outputs.quicksight.DashboardLocalNavigationConfiguration;
    }

    export interface DashboardCustomActionSetParametersOperation {
        /**
         * The parameter that determines the value configuration.
         */
        parameterValueConfigurations: outputs.quicksight.DashboardSetParameterValueConfiguration[];
    }

    export interface DashboardCustomActionUrlOperation {
        /**
         * The target of the `CustomActionURLOperation` .
         *
         * Valid values are defined as follows:
         *
         * - `NEW_TAB` : Opens the target URL in a new browser tab.
         * - `NEW_WINDOW` : Opens the target URL in a new browser window.
         * - `SAME_TAB` : Opens the target URL in the same browser tab.
         */
        urlTarget: enums.quicksight.DashboardUrlTargetConfiguration;
        /**
         * THe URL link of the `CustomActionURLOperation` .
         */
        urlTemplate: string;
    }

    export interface DashboardCustomColor {
        /**
         * The color that is applied to the data value.
         */
        color: string;
        /**
         * The data value that the color is applied to.
         */
        fieldValue?: string;
        /**
         * The value of a special data value.
         */
        specialValue?: enums.quicksight.DashboardSpecialValue;
    }

    export interface DashboardCustomContentConfiguration {
        /**
         * The content type of the custom content visual. You can use this to have the visual render as an image.
         */
        contentType?: enums.quicksight.DashboardCustomContentType;
        /**
         * The input URL that links to the custom content that you want in the custom visual.
         */
        contentUrl?: string;
        /**
         * The sizing options for the size of the custom content visual. This structure is required when the `ContentType` of the visual is `'IMAGE'` .
         */
        imageScaling?: enums.quicksight.DashboardCustomContentImageScalingConfiguration;
    }

    export interface DashboardCustomContentVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration of a `CustomContentVisual` .
         */
        chartConfiguration?: outputs.quicksight.DashboardCustomContentConfiguration;
        /**
         * The dataset that is used to create the custom content visual. You can't create a visual without a dataset.
         */
        dataSetIdentifier: string;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardCustomFilterConfiguration {
        /**
         * The category value for the filter.
         *
         * This field is mutually exclusive to `ParameterName` .
         */
        categoryValue?: string;
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.DashboardCategoryFilterMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.DashboardFilterNullOption;
        /**
         * The parameter whose value should be used for the filter value.
         *
         * This field is mutually exclusive to `CategoryValue` .
         */
        parameterName?: string;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.DashboardCategoryFilterSelectAllOptions;
    }

    export interface DashboardCustomFilterListConfiguration {
        /**
         * The list of category values for the filter.
         */
        categoryValues?: string[];
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.DashboardCategoryFilterMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.DashboardFilterNullOption;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.DashboardCategoryFilterSelectAllOptions;
    }

    export interface DashboardCustomNarrativeOptions {
        /**
         * The string input of custom narrative.
         */
        narrative: string;
    }

    export interface DashboardCustomParameterValues {
        /**
         * A list of datetime-type parameter values.
         */
        dateTimeValues?: string[];
        /**
         * A list of decimal-type parameter values.
         */
        decimalValues?: number[];
        /**
         * A list of integer-type parameter values.
         */
        integerValues?: number[];
        /**
         * A list of string-type parameter values.
         */
        stringValues?: string[];
    }

    export interface DashboardCustomValuesConfiguration {
        customValues: outputs.quicksight.DashboardCustomParameterValues;
        /**
         * Includes the null value in custom action parameter values.
         */
        includeNullValue?: boolean;
    }

    export interface DashboardDataBarsOptions {
        /**
         * The field ID for the data bars options.
         */
        fieldId: string;
        /**
         * The color of the negative data bar.
         */
        negativeColor?: string;
        /**
         * The color of the positive data bar.
         */
        positiveColor?: string;
    }

    export interface DashboardDataColor {
        /**
         * The color that is applied to the data value.
         */
        color?: string;
        /**
         * The data value that the color is applied to.
         */
        dataValue?: number;
    }

    export interface DashboardDataFieldSeriesItem {
        /**
         * The axis that you are binding the field to.
         */
        axisBinding: enums.quicksight.DashboardAxisBinding;
        /**
         * The field ID of the field that you are setting the axis binding to.
         */
        fieldId: string;
        /**
         * The field value of the field that you are setting the axis binding to.
         */
        fieldValue?: string;
        /**
         * The options that determine the presentation of line series associated to the field.
         */
        settings?: outputs.quicksight.DashboardLineChartSeriesSettings;
    }

    export interface DashboardDataLabelOptions {
        /**
         * Determines the visibility of the category field labels.
         */
        categoryLabelVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The option that determines the data label type.
         */
        dataLabelTypes?: outputs.quicksight.DashboardDataLabelType[];
        /**
         * Determines the color of the data labels.
         */
        labelColor?: string;
        /**
         * Determines the content of the data labels.
         */
        labelContent?: enums.quicksight.DashboardDataLabelContent;
        /**
         * Determines the font configuration of the data labels.
         */
        labelFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        /**
         * Determines the visibility of the measure field labels.
         */
        measureLabelVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * Determines whether overlap is enabled or disabled for the data labels.
         */
        overlap?: enums.quicksight.DashboardDataLabelOverlap;
        /**
         * Determines the position of the data labels.
         */
        position?: enums.quicksight.DashboardDataLabelPosition;
        /**
         * Determines the visibility of the total.
         */
        totalsVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * Determines the visibility of the data labels.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardDataLabelType {
        /**
         * The option that specifies individual data values for labels.
         */
        dataPathLabelType?: outputs.quicksight.DashboardDataPathLabelType;
        /**
         * Determines the label configuration for the entire field.
         */
        fieldLabelType?: outputs.quicksight.DashboardFieldLabelType;
        /**
         * Determines the label configuration for the maximum value in a visual.
         */
        maximumLabelType?: outputs.quicksight.DashboardMaximumLabelType;
        /**
         * Determines the label configuration for the minimum value in a visual.
         */
        minimumLabelType?: outputs.quicksight.DashboardMinimumLabelType;
        /**
         * Determines the label configuration for range end value in a visual.
         */
        rangeEndsLabelType?: outputs.quicksight.DashboardRangeEndsLabelType;
    }

    export interface DashboardDataPathColor {
        /**
         * The color that needs to be applied to the element.
         */
        color: string;
        /**
         * The element that the color needs to be applied to.
         */
        element: outputs.quicksight.DashboardDataPathValue;
        /**
         * The time granularity of the field that the color needs to be applied to.
         */
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
    }

    export interface DashboardDataPathLabelType {
        /**
         * The field ID of the field that the data label needs to be applied to.
         */
        fieldId?: string;
        /**
         * The actual value of the field that is labeled.
         */
        fieldValue?: string;
        /**
         * The visibility of the data label.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardDataPathSort {
        /**
         * Determines the sort direction.
         */
        direction: enums.quicksight.DashboardSortDirection;
        /**
         * The list of data paths that need to be sorted.
         */
        sortPaths: outputs.quicksight.DashboardDataPathValue[];
    }

    export interface DashboardDataPathType {
        /**
         * The type of data path value utilized in a pivot table. Choose one of the following options:
         *
         * - `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when `RowsLayout` is set to `HIERARCHY` .
         * - `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row is set to Metric Placement.
         * - `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header, when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
         * - `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric, when there is no field in the `ValuesFieldWell` .
         */
        pivotTableDataPathType?: enums.quicksight.DashboardPivotTableDataPathType;
    }

    export interface DashboardDataPathValue {
        /**
         * The type configuration of the field.
         */
        dataPathType?: outputs.quicksight.DashboardDataPathType;
        /**
         * The field ID of the field that needs to be sorted.
         */
        fieldId?: string;
        /**
         * The actual value of the field that needs to be sorted.
         */
        fieldValue?: string;
    }

    /**
     * <p>The drill down options for data points in a dashbaord.</p>
     */
    export interface DashboardDataPointDrillUpDownOption {
        /**
         * The status of the drill down options of data points.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    /**
     * <p>The data point menu options of a dashboard.</p>
     */
    export interface DashboardDataPointMenuLabelOption {
        /**
         * The status of the data point menu options.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    /**
     * <p>The data point tooltip options.</p>
     */
    export interface DashboardDataPointTooltipOption {
        /**
         * The status of the data point tool tip options.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardDataSetIdentifierDeclaration {
        /**
         * The Amazon Resource Name (ARN) of the data set.
         */
        dataSetArn: string;
        /**
         * The identifier of the data set, typically the data set's name.
         */
        identifier: string;
    }

    /**
     * <p>Dataset reference.</p>
     */
    export interface DashboardDataSetReference {
        /**
         * <p>Dataset Amazon Resource Name (ARN).</p>
         */
        dataSetArn: string;
        /**
         * <p>Dataset placeholder.</p>
         */
        dataSetPlaceholder: string;
    }

    export interface DashboardDateAxisOptions {
        /**
         * Determines whether or not missing dates are displayed.
         */
        missingDateVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardDateDimensionField {
        /**
         * The column that is used in the `DateDimensionField` .
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The date granularity of the `DateDimensionField` . Choose one of the following options:
         *
         * - `YEAR`
         * - `QUARTER`
         * - `MONTH`
         * - `WEEK`
         * - `DAY`
         * - `HOUR`
         * - `MINUTE`
         * - `SECOND`
         * - `MILLISECOND`
         */
        dateGranularity?: enums.quicksight.DashboardTimeGranularity;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.DashboardDateTimeFormatConfiguration;
        /**
         * The custom hierarchy ID.
         */
        hierarchyId?: string;
    }

    export interface DashboardDateMeasureField {
        /**
         * The aggregation function of the measure field.
         */
        aggregationFunction?: enums.quicksight.DashboardDateAggregationFunction;
        /**
         * The column that is used in the `DateMeasureField` .
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.DashboardDateTimeFormatConfiguration;
    }

    export interface DashboardDateTimeDefaultValues {
        /**
         * The dynamic value of the `DataTimeDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.DashboardDynamicDefaultValue;
        /**
         * The rolling date of the `DataTimeDefaultValues` . The date is determined from the dataset based on input expression.
         */
        rollingDate?: outputs.quicksight.DashboardRollingDateConfiguration;
        /**
         * The static values of the `DataTimeDefaultValues` .
         */
        staticValues?: string[];
    }

    export interface DashboardDateTimeFormatConfiguration {
        /**
         * Determines the `DateTime` format.
         */
        dateTimeFormat?: string;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        /**
         * The formatting configuration for numeric `DateTime` fields.
         */
        numericFormatConfiguration?: outputs.quicksight.DashboardNumericFormatConfiguration;
    }

    export interface DashboardDateTimeHierarchy {
        /**
         * The option that determines the drill down filters for the `DateTime` hierarchy.
         */
        drillDownFilters?: outputs.quicksight.DashboardDrillDownFilter[];
        /**
         * The hierarchy ID of the `DateTime` hierarchy.
         */
        hierarchyId: string;
    }

    /**
     * <p>A date-time parameter.</p>
     */
    export interface DashboardDateTimeParameter {
        /**
         * <p>A display name for the date-time parameter.</p>
         */
        name: string;
        /**
         * <p>The values for the date-time parameter.</p>
         */
        values: string[];
    }

    export interface DashboardDateTimeParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.DashboardDateTimeDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.DashboardMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
        /**
         * The configuration that defines the default value of a `DateTime` parameter when a value has not been set.
         */
        valueWhenUnset?: outputs.quicksight.DashboardDateTimeValueWhenUnsetConfiguration;
    }

    export interface DashboardDateTimePickerControlDisplayOptions {
        /**
         * Customize how dates are formatted in controls.
         */
        dateTimeFormat?: string;
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardDateTimeValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: string;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.DashboardValueWhenUnsetOption;
    }

    export interface DashboardDecimalDefaultValues {
        /**
         * The dynamic value of the `DecimalDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.DashboardDynamicDefaultValue;
        /**
         * The static values of the `DecimalDefaultValues` .
         */
        staticValues?: number[];
    }

    /**
     * <p>A decimal parameter.</p>
     */
    export interface DashboardDecimalParameter {
        /**
         * <p>A display name for the decimal parameter.</p>
         */
        name: string;
        /**
         * <p>The values for the decimal parameter.</p>
         */
        values: number[];
    }

    export interface DashboardDecimalParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.DashboardDecimalDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.DashboardMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The value type determines whether the parameter is a single-value or multi-value parameter.
         */
        parameterValueType: enums.quicksight.DashboardParameterValueType;
        /**
         * The configuration that defines the default value of a `Decimal` parameter when a value has not been set.
         */
        valueWhenUnset?: outputs.quicksight.DashboardDecimalValueWhenUnsetConfiguration;
    }

    export interface DashboardDecimalPlacesConfiguration {
        /**
         * The values of the decimal places.
         */
        decimalPlaces: number;
    }

    export interface DashboardDecimalValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: number;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.DashboardValueWhenUnsetOption;
    }

    export interface DashboardDefaultDateTimePickerControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardDateTimePickerControlDisplayOptions;
        /**
         * The date time picker type of the `DefaultDateTimePickerControlOptions` . Choose one of the following options:
         *
         * - `SINGLE_VALUED` : The filter condition is a fixed date.
         * - `DATE_RANGE` : The filter condition is a date time range.
         */
        type?: enums.quicksight.DashboardSheetControlDateTimePickerType;
    }

    export interface DashboardDefaultFilterControlConfiguration {
        /**
         * The control option for the `DefaultFilterControlConfiguration` .
         */
        controlOptions: outputs.quicksight.DashboardDefaultFilterControlOptions;
        /**
         * The title of the `DefaultFilterControlConfiguration` . This title is shared by all controls that are tied to this filter.
         */
        title: string;
    }

    export interface DashboardDefaultFilterControlOptions {
        /**
         * The default options that correspond to the filter control type of a `DateTimePicker` .
         */
        defaultDateTimePickerOptions?: outputs.quicksight.DashboardDefaultDateTimePickerControlOptions;
        /**
         * The default options that correspond to the `Dropdown` filter control type.
         */
        defaultDropdownOptions?: outputs.quicksight.DashboardDefaultFilterDropDownControlOptions;
        /**
         * The default options that correspond to the `List` filter control type.
         */
        defaultListOptions?: outputs.quicksight.DashboardDefaultFilterListControlOptions;
        /**
         * The default options that correspond to the `RelativeDateTime` filter control type.
         */
        defaultRelativeDateTimeOptions?: outputs.quicksight.DashboardDefaultRelativeDateTimeControlOptions;
        /**
         * The default options that correspond to the `Slider` filter control type.
         */
        defaultSliderOptions?: outputs.quicksight.DashboardDefaultSliderControlOptions;
        /**
         * The default options that correspond to the `TextArea` filter control type.
         */
        defaultTextAreaOptions?: outputs.quicksight.DashboardDefaultTextAreaControlOptions;
        /**
         * The default options that correspond to the `TextField` filter control type.
         */
        defaultTextFieldOptions?: outputs.quicksight.DashboardDefaultTextFieldControlOptions;
    }

    export interface DashboardDefaultFilterDropDownControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardDropDownControlDisplayOptions;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.DashboardFilterSelectableValues;
        /**
         * The type of the `FilterDropDownControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
         * - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
         */
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardDefaultFilterListControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardListControlDisplayOptions;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.DashboardFilterSelectableValues;
        /**
         * The type of the `DefaultFilterListControlOptions` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from the list.
         * - `SINGLE_SELECT` : The user can select a single entry from the list.
         */
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardDefaultFreeFormLayoutConfiguration {
        /**
         * Determines the screen canvas size options for a free-form layout.
         */
        canvasSizeOptions: outputs.quicksight.DashboardFreeFormLayoutCanvasSizeOptions;
    }

    export interface DashboardDefaultGridLayoutConfiguration {
        /**
         * Determines the screen canvas size options for a grid layout.
         */
        canvasSizeOptions: outputs.quicksight.DashboardGridLayoutCanvasSizeOptions;
    }

    export interface DashboardDefaultInteractiveLayoutConfiguration {
        /**
         * The options that determine the default settings of a free-form layout configuration.
         */
        freeForm?: outputs.quicksight.DashboardDefaultFreeFormLayoutConfiguration;
        /**
         * The options that determine the default settings for a grid layout configuration.
         */
        grid?: outputs.quicksight.DashboardDefaultGridLayoutConfiguration;
    }

    export interface DashboardDefaultNewSheetConfiguration {
        /**
         * The options that determine the default settings for interactive layout configuration.
         */
        interactiveLayoutConfiguration?: outputs.quicksight.DashboardDefaultInteractiveLayoutConfiguration;
        /**
         * The options that determine the default settings for a paginated layout configuration.
         */
        paginatedLayoutConfiguration?: outputs.quicksight.DashboardDefaultPaginatedLayoutConfiguration;
        /**
         * The option that determines the sheet content type.
         */
        sheetContentType?: enums.quicksight.DashboardSheetContentType;
    }

    export interface DashboardDefaultPaginatedLayoutConfiguration {
        /**
         * The options that determine the default settings for a section-based layout configuration.
         */
        sectionBased?: outputs.quicksight.DashboardDefaultSectionBasedLayoutConfiguration;
    }

    export interface DashboardDefaultRelativeDateTimeControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardRelativeDateTimeControlDisplayOptions;
    }

    export interface DashboardDefaultSectionBasedLayoutConfiguration {
        /**
         * Determines the screen canvas size options for a section-based layout.
         */
        canvasSizeOptions: outputs.quicksight.DashboardSectionBasedLayoutCanvasSizeOptions;
    }

    export interface DashboardDefaultSliderControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardSliderControlDisplayOptions;
        /**
         * The larger value that is displayed at the right of the slider.
         */
        maximumValue: number;
        /**
         * The smaller value that is displayed at the left of the slider.
         */
        minimumValue: number;
        /**
         * The number of increments that the slider bar is divided into.
         */
        stepSize: number;
        /**
         * The type of the `DefaultSliderControlOptions` . Choose one of the following options:
         *
         * - `SINGLE_POINT` : Filter against(equals) a single data point.
         * - `RANGE` : Filter data that is in a specified range.
         */
        type?: enums.quicksight.DashboardSheetControlSliderType;
    }

    export interface DashboardDefaultTextAreaControlOptions {
        /**
         * The delimiter that is used to separate the lines in text.
         */
        delimiter?: string;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardTextAreaControlDisplayOptions;
    }

    export interface DashboardDefaultTextFieldControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardTextFieldControlDisplayOptions;
    }

    export interface DashboardDestinationParameterValueConfiguration {
        /**
         * The configuration of custom values for destination parameter in `DestinationParameterValueConfiguration` .
         */
        customValuesConfiguration?: outputs.quicksight.DashboardCustomValuesConfiguration;
        /**
         * The configuration that selects all options.
         */
        selectAllValueOptions?: enums.quicksight.DashboardSelectAllValueOptions;
        sourceColumn?: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The source field ID of the destination parameter.
         */
        sourceField?: string;
        /**
         * The source parameter name of the destination parameter.
         */
        sourceParameterName?: string;
    }

    export interface DashboardDimensionField {
        /**
         * The dimension type field with categorical type columns.
         */
        categoricalDimensionField?: outputs.quicksight.DashboardCategoricalDimensionField;
        /**
         * The dimension type field with date type columns.
         */
        dateDimensionField?: outputs.quicksight.DashboardDateDimensionField;
        /**
         * The dimension type field with numerical type columns.
         */
        numericalDimensionField?: outputs.quicksight.DashboardNumericalDimensionField;
    }

    export interface DashboardDonutCenterOptions {
        /**
         * Determines the visibility of the label in a donut chart. In the Amazon QuickSight console, this option is called `'Show total'` .
         */
        labelVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardDonutOptions {
        /**
         * The option for define the arc of the chart shape. Valid values are as follows:
         *
         * - `WHOLE` - A pie chart
         * - `SMALL` - A small-sized donut chart
         * - `MEDIUM` - A medium-sized donut chart
         * - `LARGE` - A large-sized donut chart
         */
        arcOptions?: outputs.quicksight.DashboardArcOptions;
        /**
         * The label options of the label that is displayed in the center of a donut chart. This option isn't available for pie charts.
         */
        donutCenterOptions?: outputs.quicksight.DashboardDonutCenterOptions;
    }

    export interface DashboardDrillDownFilter {
        /**
         * The category type drill down filter. This filter is used for string type columns.
         */
        categoryFilter?: outputs.quicksight.DashboardCategoryDrillDownFilter;
        /**
         * The numeric equality type drill down filter. This filter is used for number type columns.
         */
        numericEqualityFilter?: outputs.quicksight.DashboardNumericEqualityDrillDownFilter;
        /**
         * The time range drill down filter. This filter is used for date time columns.
         */
        timeRangeFilter?: outputs.quicksight.DashboardTimeRangeDrillDownFilter;
    }

    export interface DashboardDropDownControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the `Select all` options in a dropdown control.
         */
        selectAllOptions?: outputs.quicksight.DashboardListControlSelectAllOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardDynamicDefaultValue {
        /**
         * The column that contains the default value of each user or group.
         */
        defaultValueColumn: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The column that contains the group name.
         */
        groupNameColumn?: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The column that contains the username.
         */
        userNameColumn?: outputs.quicksight.DashboardColumnIdentifier;
    }

    export interface DashboardEmptyVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The data set that is used in the empty visual. Every visual requires a dataset to render.
         */
        dataSetIdentifier: string;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardEntity {
        /**
         * The hierarchical path of the entity within the analysis, template, or dashboard definition tree.
         */
        path?: string;
    }

    /**
     * <p>Dashboard error.</p>
     */
    export interface DashboardError {
        /**
         * <p>Message.</p>
         */
        message?: string;
        /**
         * Type.
         */
        type?: enums.quicksight.DashboardErrorType;
        /**
         * <p>Lists the violated entities that caused the dashboard error.</p>
         */
        violatedEntities?: outputs.quicksight.DashboardEntity[];
    }

    export interface DashboardExcludePeriodConfiguration {
        /**
         * The amount or number of the exclude period.
         */
        amount: number;
        /**
         * The granularity or unit (day, month, year) of the exclude period.
         */
        granularity: enums.quicksight.DashboardTimeGranularity;
        /**
         * The status of the exclude period. Choose from the following options:
         *
         * - `ENABLED`
         * - `DISABLED`
         */
        status?: enums.quicksight.DashboardWidgetStatus;
    }

    export interface DashboardExplicitHierarchy {
        /**
         * The list of columns that define the explicit hierarchy.
         */
        columns: outputs.quicksight.DashboardColumnIdentifier[];
        /**
         * The option that determines the drill down filters for the explicit hierarchy.
         */
        drillDownFilters?: outputs.quicksight.DashboardDrillDownFilter[];
        /**
         * The hierarchy ID of the explicit hierarchy.
         */
        hierarchyId: string;
    }

    /**
     * <p>Determines if hidden fields are included in an exported dashboard.</p>
     */
    export interface DashboardExportHiddenFieldsOption {
        /**
         * The status of the export hidden fields options of a dashbaord.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    /**
     * <p>Export to .csv option.</p>
     */
    export interface DashboardExportToCsvOption {
        /**
         * Availability status.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    /**
     * <p>Determines whether or not hidden fields are visible on exported dashbaords.</p>
     */
    export interface DashboardExportWithHiddenFieldsOption {
        /**
         * The status of the export with hidden fields options.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardFieldBasedTooltip {
        /**
         * The visibility of `Show aggregations` .
         */
        aggregationVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The fields configuration in the tooltip.
         */
        tooltipFields?: outputs.quicksight.DashboardTooltipItem[];
        /**
         * The type for the >tooltip title. Choose one of the following options:
         *
         * - `NONE` : Doesn't use the primary value as the title.
         * - `PRIMARY_VALUE` : Uses primary value as the title.
         */
        tooltipTitleType?: enums.quicksight.DashboardTooltipTitleType;
    }

    export interface DashboardFieldLabelType {
        /**
         * Indicates the field that is targeted by the field label.
         */
        fieldId?: string;
        /**
         * The visibility of the field label.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFieldSeriesItem {
        /**
         * The axis that you are binding the field to.
         */
        axisBinding: enums.quicksight.DashboardAxisBinding;
        /**
         * The field ID of the field for which you are setting the axis binding.
         */
        fieldId: string;
        /**
         * The options that determine the presentation of line series associated to the field.
         */
        settings?: outputs.quicksight.DashboardLineChartSeriesSettings;
    }

    export interface DashboardFieldSort {
        /**
         * The sort direction. Choose one of the following options:
         *
         * - `ASC` : Ascending
         * - `DESC` : Descending
         */
        direction: enums.quicksight.DashboardSortDirection;
        /**
         * The sort configuration target field.
         */
        fieldId: string;
    }

    export interface DashboardFieldSortOptions {
        /**
         * The sort configuration for a column that is not used in a field well.
         */
        columnSort?: outputs.quicksight.DashboardColumnSort;
        /**
         * The sort configuration for a field in a field well.
         */
        fieldSort?: outputs.quicksight.DashboardFieldSort;
    }

    export interface DashboardFieldTooltipItem {
        /**
         * The unique ID of the field that is targeted by the tooltip.
         */
        fieldId: string;
        /**
         * The label of the tooltip item.
         */
        label?: string;
        /**
         * The visibility of the tooltip item.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFilledMapAggregatedFieldWells {
        /**
         * The aggregated location field well of the filled map. Values are grouped by location fields.
         */
        geospatial?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The aggregated color field well of a filled map. Values are aggregated based on location fields.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardFilledMapConditionalFormatting {
        /**
         * Conditional formatting options of a `FilledMapVisual` .
         */
        conditionalFormattingOptions: outputs.quicksight.DashboardFilledMapConditionalFormattingOption[];
    }

    export interface DashboardFilledMapConditionalFormattingOption {
        /**
         * The conditional formatting that determines the shape of the filled map.
         */
        shape: outputs.quicksight.DashboardFilledMapShapeConditionalFormatting;
    }

    export interface DashboardFilledMapConfiguration {
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardFilledMapFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The map style options of the filled map visual.
         */
        mapStyleOptions?: outputs.quicksight.DashboardGeospatialMapStyleOptions;
        /**
         * The sort configuration of a `FilledMapVisual` .
         */
        sortConfiguration?: outputs.quicksight.DashboardFilledMapSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * The window options of the filled map visual.
         */
        windowOptions?: outputs.quicksight.DashboardGeospatialWindowOptions;
    }

    export interface DashboardFilledMapFieldWells {
        /**
         * The aggregated field well of the filled map.
         */
        filledMapAggregatedFieldWells?: outputs.quicksight.DashboardFilledMapAggregatedFieldWells;
    }

    export interface DashboardFilledMapShapeConditionalFormatting {
        /**
         * The field ID of the filled map shape.
         */
        fieldId: string;
        /**
         * The conditional formatting that determines the background color of a filled map's shape.
         */
        format?: outputs.quicksight.DashboardShapeConditionalFormat;
    }

    export interface DashboardFilledMapSortConfiguration {
        /**
         * The sort configuration of the location fields.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardFilledMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardFilledMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The conditional formatting of a `FilledMapVisual` .
         */
        conditionalFormatting?: outputs.quicksight.DashboardFilledMapConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface DashboardFilter {
        /**
         * A `CategoryFilter` filters text values.
         *
         * For more information, see [Adding text filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html) in the *Amazon QuickSight User Guide* .
         */
        categoryFilter?: outputs.quicksight.DashboardCategoryFilter;
        /**
         * A `NumericEqualityFilter` filters numeric values that equal or do not equal a given numeric value.
         */
        numericEqualityFilter?: outputs.quicksight.DashboardNumericEqualityFilter;
        /**
         * A `NumericRangeFilter` filters numeric values that are either inside or outside a given numeric range.
         */
        numericRangeFilter?: outputs.quicksight.DashboardNumericRangeFilter;
        /**
         * A `RelativeDatesFilter` filters date values that are relative to a given date.
         */
        relativeDatesFilter?: outputs.quicksight.DashboardRelativeDatesFilter;
        /**
         * A `TimeEqualityFilter` filters date-time values that equal or do not equal a given date/time value.
         */
        timeEqualityFilter?: outputs.quicksight.DashboardTimeEqualityFilter;
        /**
         * A `TimeRangeFilter` filters date-time values that are either inside or outside a given date/time range.
         */
        timeRangeFilter?: outputs.quicksight.DashboardTimeRangeFilter;
        /**
         * A `TopBottomFilter` filters data to the top or bottom values for a given column.
         */
        topBottomFilter?: outputs.quicksight.DashboardTopBottomFilter;
    }

    export interface DashboardFilterControl {
        /**
         * A control from a filter that is scoped across more than one sheet. This represents your filter control on a sheet
         */
        crossSheet?: outputs.quicksight.DashboardFilterCrossSheetControl;
        /**
         * A control from a date filter that is used to specify date and time.
         */
        dateTimePicker?: outputs.quicksight.DashboardFilterDateTimePickerControl;
        /**
         * A control to display a dropdown list with buttons that are used to select a single value.
         */
        dropdown?: outputs.quicksight.DashboardFilterDropDownControl;
        /**
         * A control to display a list of buttons or boxes. This is used to select either a single value or multiple values.
         */
        list?: outputs.quicksight.DashboardFilterListControl;
        /**
         * A control from a date filter that is used to specify the relative date.
         */
        relativeDateTime?: outputs.quicksight.DashboardFilterRelativeDateTimeControl;
        /**
         * A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
         */
        slider?: outputs.quicksight.DashboardFilterSliderControl;
        /**
         * A control to display a text box that is used to enter multiple entries.
         */
        textArea?: outputs.quicksight.DashboardFilterTextAreaControl;
        /**
         * A control to display a text box that is used to enter a single entry.
         */
        textField?: outputs.quicksight.DashboardFilterTextFieldControl;
    }

    export interface DashboardFilterCrossSheetControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.DashboardCascadingControlConfiguration;
        /**
         * The ID of the `FilterCrossSheetControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterCrossSheetControl` .
         */
        sourceFilterId: string;
    }

    export interface DashboardFilterDateTimePickerControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardDateTimePickerControlDisplayOptions;
        /**
         * The ID of the `FilterDateTimePickerControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterDateTimePickerControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterDateTimePickerControl` .
         */
        title: string;
        /**
         * The type of the `FilterDropDownControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
         * - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
         */
        type?: enums.quicksight.DashboardSheetControlDateTimePickerType;
    }

    export interface DashboardFilterDropDownControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.DashboardCascadingControlConfiguration;
        /**
         * The display options of the `FilterDropDownControl` .
         */
        displayOptions?: outputs.quicksight.DashboardDropDownControlDisplayOptions;
        /**
         * The ID of the `FilterDropDownControl` .
         */
        filterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.DashboardFilterSelectableValues;
        /**
         * The source filter ID of the `FilterDropDownControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterDropDownControl` .
         */
        title: string;
        /**
         * The type of the `FilterDropDownControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
         * - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
         */
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardFilterGroup {
        /**
         * The filter new feature which can apply filter group to all data sets. Choose one of the following options:
         *
         * - `ALL_DATASETS`
         * - `SINGLE_DATASET`
         */
        crossDataset: enums.quicksight.DashboardCrossDatasetTypes;
        /**
         * The value that uniquely identifies a `FilterGroup` within a dashboard, template, or analysis.
         */
        filterGroupId: string;
        /**
         * The list of filters that are present in a `FilterGroup` .
         */
        filters: outputs.quicksight.DashboardFilter[];
        /**
         * The configuration that specifies what scope to apply to a `FilterGroup` .
         *
         * This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
         */
        scopeConfiguration: outputs.quicksight.DashboardFilterScopeConfiguration;
        /**
         * The status of the `FilterGroup` .
         */
        status?: enums.quicksight.DashboardWidgetStatus;
    }

    export interface DashboardFilterListConfiguration {
        /**
         * The list of category values for the filter.
         */
        categoryValues?: string[];
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.DashboardCategoryFilterMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption?: enums.quicksight.DashboardFilterNullOption;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.DashboardCategoryFilterSelectAllOptions;
    }

    export interface DashboardFilterListControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.DashboardCascadingControlConfiguration;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardListControlDisplayOptions;
        /**
         * The ID of the `FilterListControl` .
         */
        filterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.DashboardFilterSelectableValues;
        /**
         * The source filter ID of the `FilterListControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterListControl` .
         */
        title: string;
        /**
         * The type of the `FilterListControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from the list.
         * - `SINGLE_SELECT` : The user can select a single entry from the list.
         */
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardFilterOperationSelectedFieldsConfiguration {
        /**
         * <p>The selected columns of a dataset.</p>
         */
        selectedColumns?: outputs.quicksight.DashboardColumnIdentifier[];
        /**
         * A structure that contains the options that choose which fields are filtered in the `CustomActionFilterOperation` .
         *
         * Valid values are defined as follows:
         *
         * - `ALL_FIELDS` : Applies the filter operation to all fields.
         */
        selectedFieldOptions?: enums.quicksight.DashboardSelectedFieldOptions;
        /**
         * Chooses the fields that are filtered in `CustomActionFilterOperation` .
         */
        selectedFields?: string[];
    }

    export interface DashboardFilterOperationTargetVisualsConfiguration {
        /**
         * The configuration of the same-sheet target visuals that you want to be filtered.
         */
        sameSheetTargetVisualConfiguration?: outputs.quicksight.DashboardSameSheetTargetVisualConfiguration;
    }

    export interface DashboardFilterRelativeDateTimeControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardRelativeDateTimeControlDisplayOptions;
        /**
         * The ID of the `FilterTextAreaControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterTextAreaControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterTextAreaControl` .
         */
        title: string;
    }

    export interface DashboardFilterScopeConfiguration {
        /**
         * The configuration that applies a filter to all sheets. When you choose `AllSheets` as the value for a `FilterScopeConfiguration` , this filter is applied to all visuals of all sheets in an Analysis, Dashboard, or Template. The `AllSheetsFilterScopeConfiguration` is chosen.
         */
        allSheets?: outputs.quicksight.DashboardAllSheetsFilterScopeConfiguration;
        /**
         * The configuration for applying a filter to specific sheets.
         */
        selectedSheets?: outputs.quicksight.DashboardSelectedSheetsFilterScopeConfiguration;
    }

    export interface DashboardFilterSelectableValues {
        /**
         * The values that are used in the `FilterSelectableValues` .
         */
        values?: string[];
    }

    export interface DashboardFilterSliderControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardSliderControlDisplayOptions;
        /**
         * The ID of the `FilterSliderControl` .
         */
        filterControlId: string;
        /**
         * The larger value that is displayed at the right of the slider.
         */
        maximumValue: number;
        /**
         * The smaller value that is displayed at the left of the slider.
         */
        minimumValue: number;
        /**
         * The source filter ID of the `FilterSliderControl` .
         */
        sourceFilterId: string;
        /**
         * The number of increments that the slider bar is divided into.
         */
        stepSize: number;
        /**
         * The title of the `FilterSliderControl` .
         */
        title: string;
        /**
         * The type of the `FilterSliderControl` . Choose one of the following options:
         *
         * - `SINGLE_POINT` : Filter against(equals) a single data point.
         * - `RANGE` : Filter data that is in a specified range.
         */
        type?: enums.quicksight.DashboardSheetControlSliderType;
    }

    export interface DashboardFilterTextAreaControl {
        /**
         * The delimiter that is used to separate the lines in text.
         */
        delimiter?: string;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardTextAreaControlDisplayOptions;
        /**
         * The ID of the `FilterTextAreaControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterTextAreaControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterTextAreaControl` .
         */
        title: string;
    }

    export interface DashboardFilterTextFieldControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardTextFieldControlDisplayOptions;
        /**
         * The ID of the `FilterTextFieldControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterTextFieldControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterTextFieldControl` .
         */
        title: string;
    }

    export interface DashboardFontConfiguration {
        /**
         * Determines the color of the text.
         */
        fontColor?: string;
        /**
         * Determines the appearance of decorative lines on the text.
         */
        fontDecoration?: enums.quicksight.DashboardFontDecoration;
        /**
         * The option that determines the text display size.
         */
        fontSize?: outputs.quicksight.DashboardFontSize;
        /**
         * Determines the text display face that is inherited by the given font family.
         */
        fontStyle?: enums.quicksight.DashboardFontStyle;
        /**
         * The option that determines the text display weight, or boldness.
         */
        fontWeight?: outputs.quicksight.DashboardFontWeight;
    }

    export interface DashboardFontSize {
        /**
         * The lexical name for the text size, proportional to its surrounding context.
         */
        relative?: enums.quicksight.DashboardRelativeFontSize;
    }

    export interface DashboardFontWeight {
        /**
         * The lexical name for the level of boldness of the text display.
         */
        name?: enums.quicksight.DashboardFontWeightName;
    }

    export interface DashboardForecastComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The custom seasonality value setup of a forecast computation.
         */
        customSeasonalityValue?: number;
        /**
         * The lower boundary setup of a forecast computation.
         */
        lowerBoundary?: number;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The periods backward setup of a forecast computation.
         */
        periodsBackward?: number;
        /**
         * The periods forward setup of a forecast computation.
         */
        periodsForward?: number;
        /**
         * The prediction interval setup of a forecast computation.
         */
        predictionInterval?: number;
        /**
         * The seasonality setup of a forecast computation. Choose one of the following options:
         *
         * - `AUTOMATIC`
         * - `CUSTOM` : Checks the custom seasonality value.
         */
        seasonality?: enums.quicksight.DashboardForecastComputationSeasonality;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.DashboardDimensionField;
        /**
         * The upper boundary setup of a forecast computation.
         */
        upperBoundary?: number;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardForecastConfiguration {
        /**
         * The forecast properties setup of a forecast in the line chart.
         */
        forecastProperties?: outputs.quicksight.DashboardTimeBasedForecastProperties;
        /**
         * The forecast scenario of a forecast in the line chart.
         */
        scenario?: outputs.quicksight.DashboardForecastScenario;
    }

    export interface DashboardForecastScenario {
        /**
         * The what-if analysis forecast setup with the target date.
         */
        whatIfPointScenario?: outputs.quicksight.DashboardWhatIfPointScenario;
        /**
         * The what-if analysis forecast setup with the date range.
         */
        whatIfRangeScenario?: outputs.quicksight.DashboardWhatIfRangeScenario;
    }

    export interface DashboardFormatConfiguration {
        /**
         * Formatting configuration for `DateTime` fields.
         */
        dateTimeFormatConfiguration?: outputs.quicksight.DashboardDateTimeFormatConfiguration;
        /**
         * Formatting configuration for number fields.
         */
        numberFormatConfiguration?: outputs.quicksight.DashboardNumberFormatConfiguration;
        /**
         * Formatting configuration for string fields.
         */
        stringFormatConfiguration?: outputs.quicksight.DashboardStringFormatConfiguration;
    }

    export interface DashboardFreeFormLayoutCanvasSizeOptions {
        /**
         * The options that determine the sizing of the canvas used in a free-form layout.
         */
        screenCanvasSizeOptions?: outputs.quicksight.DashboardFreeFormLayoutScreenCanvasSizeOptions;
    }

    export interface DashboardFreeFormLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.DashboardFreeFormLayoutCanvasSizeOptions;
        /**
         * The elements that are included in a free-form layout.
         */
        elements: outputs.quicksight.DashboardFreeFormLayoutElement[];
    }

    export interface DashboardFreeFormLayoutElement {
        /**
         * The background style configuration of a free-form layout element.
         */
        backgroundStyle?: outputs.quicksight.DashboardFreeFormLayoutElementBackgroundStyle;
        /**
         * The border style configuration of a free-form layout element.
         */
        borderStyle?: outputs.quicksight.DashboardFreeFormLayoutElementBorderStyle;
        /**
         * A unique identifier for an element within a free-form layout.
         */
        elementId: string;
        /**
         * The type of element.
         */
        elementType: enums.quicksight.DashboardLayoutElementType;
        /**
         * String based length that is composed of value and unit in px
         */
        height: string;
        /**
         * The loading animation configuration of a free-form layout element.
         */
        loadingAnimation?: outputs.quicksight.DashboardLoadingAnimation;
        /**
         * The rendering rules that determine when an element should be displayed within a free-form layout.
         */
        renderingRules?: outputs.quicksight.DashboardSheetElementRenderingRule[];
        /**
         * The border style configuration of a free-form layout element. This border style is used when the element is selected.
         */
        selectedBorderStyle?: outputs.quicksight.DashboardFreeFormLayoutElementBorderStyle;
        /**
         * The visibility of an element within a free-form layout.
         */
        visibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width: string;
        /**
         * String based length that is composed of value and unit in px
         */
        xAxisLocation: string;
        /**
         * String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
         */
        yAxisLocation: string;
    }

    export interface DashboardFreeFormLayoutElementBackgroundStyle {
        /**
         * The background color of a free-form layout element.
         */
        color?: string;
        /**
         * The background visibility of a free-form layout element.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFreeFormLayoutElementBorderStyle {
        /**
         * The border color of a free-form layout element.
         */
        color?: string;
        /**
         * The border visibility of a free-form layout element.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFreeFormLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth: string;
    }

    export interface DashboardFreeFormSectionLayoutConfiguration {
        /**
         * The elements that are included in the free-form layout.
         */
        elements: outputs.quicksight.DashboardFreeFormLayoutElement[];
    }

    export interface DashboardFunnelChartAggregatedFieldWells {
        /**
         * The category field wells of a funnel chart. Values are grouped by category fields.
         */
        category?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The value field wells of a funnel chart. Values are aggregated based on categories.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardFunnelChartConfiguration {
        /**
         * The label options of the categories that are displayed in a `FunnelChartVisual` .
         */
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The options that determine the presentation of the data labels.
         */
        dataLabelOptions?: outputs.quicksight.DashboardFunnelChartDataLabelOptions;
        /**
         * The field well configuration of a `FunnelChartVisual` .
         */
        fieldWells?: outputs.quicksight.DashboardFunnelChartFieldWells;
        /**
         * The sort configuration of a `FunnelChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.DashboardFunnelChartSortConfiguration;
        /**
         * The tooltip configuration of a `FunnelChartVisual` .
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * The label options for the values that are displayed in a `FunnelChartVisual` .
         */
        valueLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The visual palette configuration of a `FunnelChartVisual` .
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardFunnelChartDataLabelOptions {
        /**
         * The visibility of the category labels within the data labels.
         */
        categoryLabelVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The color of the data label text.
         */
        labelColor?: string;
        /**
         * The font configuration for the data labels.
         *
         * Only the `FontSize` attribute of the font configuration is used for data labels.
         */
        labelFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        /**
         * Determines the style of the metric labels.
         */
        measureDataLabelStyle?: enums.quicksight.DashboardFunnelChartMeasureDataLabelStyle;
        /**
         * The visibility of the measure labels within the data labels.
         */
        measureLabelVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * Determines the positioning of the data label relative to a section of the funnel.
         */
        position?: enums.quicksight.DashboardDataLabelPosition;
        /**
         * The visibility option that determines if data labels are displayed.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardFunnelChartFieldWells {
        /**
         * The field well configuration of a `FunnelChartVisual` .
         */
        funnelChartAggregatedFieldWells?: outputs.quicksight.DashboardFunnelChartAggregatedFieldWells;
    }

    export interface DashboardFunnelChartSortConfiguration {
        /**
         * The limit on the number of categories displayed.
         */
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardFunnelChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration of a `FunnelChartVisual` .
         */
        chartConfiguration?: outputs.quicksight.DashboardFunnelChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface DashboardGaugeChartArcConditionalFormatting {
        /**
         * The conditional formatting of the arc foreground color.
         */
        foregroundColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardGaugeChartConditionalFormatting {
        /**
         * Conditional formatting options of a `GaugeChartVisual` .
         */
        conditionalFormattingOptions?: outputs.quicksight.DashboardGaugeChartConditionalFormattingOption[];
    }

    export interface DashboardGaugeChartConditionalFormattingOption {
        /**
         * The options that determine the presentation of the arc of a `GaugeChartVisual` .
         */
        arc?: outputs.quicksight.DashboardGaugeChartArcConditionalFormatting;
        /**
         * The conditional formatting for the primary value of a `GaugeChartVisual` .
         */
        primaryValue?: outputs.quicksight.DashboardGaugeChartPrimaryValueConditionalFormatting;
    }

    export interface DashboardGaugeChartConfiguration {
        /**
         * The data label configuration of a `GaugeChartVisual` .
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The field well configuration of a `GaugeChartVisual` .
         */
        fieldWells?: outputs.quicksight.DashboardGaugeChartFieldWells;
        /**
         * The options that determine the presentation of the `GaugeChartVisual` .
         */
        gaugeChartOptions?: outputs.quicksight.DashboardGaugeChartOptions;
        /**
         * The tooltip configuration of a `GaugeChartVisual` .
         */
        tooltipOptions?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * The visual palette configuration of a `GaugeChartVisual` .
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardGaugeChartFieldWells {
        /**
         * The target value field wells of a `GaugeChartVisual` .
         */
        targetValues?: outputs.quicksight.DashboardMeasureField[];
        /**
         * The value field wells of a `GaugeChartVisual` .
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardGaugeChartOptions {
        /**
         * The arc configuration of a `GaugeChartVisual` .
         */
        arc?: outputs.quicksight.DashboardArcConfiguration;
        /**
         * The arc axis configuration of a `GaugeChartVisual` .
         */
        arcAxis?: outputs.quicksight.DashboardArcAxisConfiguration;
        /**
         * The comparison configuration of a `GaugeChartVisual` .
         */
        comparison?: outputs.quicksight.DashboardComparisonConfiguration;
        /**
         * The options that determine the primary value display type.
         */
        primaryValueDisplayType?: enums.quicksight.DashboardPrimaryValueDisplayType;
        /**
         * The options that determine the primary value font configuration.
         */
        primaryValueFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
    }

    export interface DashboardGaugeChartPrimaryValueConditionalFormatting {
        /**
         * The conditional formatting of the primary value icon.
         */
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        /**
         * The conditional formatting of the primary value text color.
         */
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardGaugeChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration of a `GaugeChartVisual` .
         */
        chartConfiguration?: outputs.quicksight.DashboardGaugeChartConfiguration;
        /**
         * The conditional formatting of a `GaugeChartVisual` .
         */
        conditionalFormatting?: outputs.quicksight.DashboardGaugeChartConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardGeospatialCoordinateBounds {
        /**
         * The longitude of the east bound of the geospatial coordinate bounds.
         */
        east: number;
        /**
         * The latitude of the north bound of the geospatial coordinate bounds.
         */
        north: number;
        /**
         * The latitude of the south bound of the geospatial coordinate bounds.
         */
        south: number;
        /**
         * The longitude of the west bound of the geospatial coordinate bounds.
         */
        west: number;
    }

    export interface DashboardGeospatialHeatmapColorScale {
        /**
         * The list of colors to be used in heatmap point style.
         */
        colors?: outputs.quicksight.DashboardGeospatialHeatmapDataColor[];
    }

    export interface DashboardGeospatialHeatmapConfiguration {
        /**
         * The color scale specification for the heatmap point style.
         */
        heatmapColor?: outputs.quicksight.DashboardGeospatialHeatmapColorScale;
    }

    export interface DashboardGeospatialHeatmapDataColor {
        /**
         * The hex color to be used in the heatmap point style.
         */
        color: string;
    }

    export interface DashboardGeospatialMapAggregatedFieldWells {
        /**
         * The color field wells of a geospatial map.
         */
        colors?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The geospatial field wells of a geospatial map. Values are grouped by geospatial fields.
         */
        geospatial?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The size field wells of a geospatial map. Values are aggregated based on geospatial fields.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardGeospatialMapConfiguration {
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardGeospatialMapFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The map style options of the geospatial map.
         */
        mapStyleOptions?: outputs.quicksight.DashboardGeospatialMapStyleOptions;
        /**
         * The point style options of the geospatial map.
         */
        pointStyleOptions?: outputs.quicksight.DashboardGeospatialPointStyleOptions;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        /**
         * The window options of the geospatial map.
         */
        windowOptions?: outputs.quicksight.DashboardGeospatialWindowOptions;
    }

    export interface DashboardGeospatialMapFieldWells {
        /**
         * The aggregated field well for a geospatial map.
         */
        geospatialMapAggregatedFieldWells?: outputs.quicksight.DashboardGeospatialMapAggregatedFieldWells;
    }

    export interface DashboardGeospatialMapStyleOptions {
        /**
         * The base map style of the geospatial map.
         */
        baseMapStyle?: enums.quicksight.DashboardBaseMapStyleType;
    }

    export interface DashboardGeospatialMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardGeospatialMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface DashboardGeospatialPointStyleOptions {
        /**
         * The cluster marker configuration of the geospatial point style.
         */
        clusterMarkerConfiguration?: outputs.quicksight.DashboardClusterMarkerConfiguration;
        /**
         * The heatmap configuration of the geospatial point style.
         */
        heatmapConfiguration?: outputs.quicksight.DashboardGeospatialHeatmapConfiguration;
        /**
         * The selected point styles (point, cluster) of the geospatial map.
         */
        selectedPointStyle?: enums.quicksight.DashboardGeospatialSelectedPointStyle;
    }

    export interface DashboardGeospatialWindowOptions {
        /**
         * The bounds options (north, south, west, east) of the geospatial window options.
         */
        bounds?: outputs.quicksight.DashboardGeospatialCoordinateBounds;
        /**
         * The map zoom modes (manual, auto) of the geospatial window options.
         */
        mapZoomMode?: enums.quicksight.DashboardMapZoomMode;
    }

    export interface DashboardGlobalTableBorderOptions {
        /**
         * Determines the options for side specific border.
         */
        sideSpecificBorder?: outputs.quicksight.DashboardTableSideBorderOptions;
        /**
         * Determines the options for uniform border.
         */
        uniformBorder?: outputs.quicksight.DashboardTableBorderOptions;
    }

    export interface DashboardGradientColor {
        /**
         * The list of gradient color stops.
         */
        stops?: outputs.quicksight.DashboardGradientStop[];
    }

    export interface DashboardGradientStop {
        /**
         * Determines the color.
         */
        color?: string;
        /**
         * Determines the data value.
         */
        dataValue?: number;
        /**
         * Determines gradient offset value.
         */
        gradientOffset: number;
    }

    export interface DashboardGridLayoutCanvasSizeOptions {
        /**
         * The options that determine the sizing of the canvas used in a grid layout.
         */
        screenCanvasSizeOptions?: outputs.quicksight.DashboardGridLayoutScreenCanvasSizeOptions;
    }

    export interface DashboardGridLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.DashboardGridLayoutCanvasSizeOptions;
        /**
         * The elements that are included in a grid layout.
         */
        elements: outputs.quicksight.DashboardGridLayoutElement[];
    }

    export interface DashboardGridLayoutElement {
        /**
         * The column index for the upper left corner of an element.
         */
        columnIndex?: number;
        /**
         * The width of a grid element expressed as a number of grid columns.
         */
        columnSpan: number;
        /**
         * A unique identifier for an element within a grid layout.
         */
        elementId: string;
        /**
         * The type of element.
         */
        elementType: enums.quicksight.DashboardLayoutElementType;
        /**
         * The row index for the upper left corner of an element.
         */
        rowIndex?: number;
        /**
         * The height of a grid element expressed as a number of grid rows.
         */
        rowSpan: number;
    }

    export interface DashboardGridLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth?: string;
        /**
         * This value determines the layout behavior when the viewport is resized.
         *
         * - `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight console, this option is called `Classic` .
         * - `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port. In the Amazon QuickSight console, this option is called `Tiled` .
         */
        resizeOption: enums.quicksight.DashboardResizeOption;
    }

    export interface DashboardGrowthRateComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The period size setup of a growth rate computation.
         */
        periodSize?: number;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.DashboardDimensionField;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardHeaderFooterSectionConfiguration {
        /**
         * The layout configuration of the header or footer section.
         */
        layout: outputs.quicksight.DashboardSectionLayoutConfiguration;
        /**
         * The unique identifier of the header or footer section.
         */
        sectionId: string;
        /**
         * The style options of a header or footer section.
         */
        style?: outputs.quicksight.DashboardSectionStyle;
    }

    export interface DashboardHeatMapAggregatedFieldWells {
        /**
         * The columns field well of a heat map.
         */
        columns?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The rows field well of a heat map.
         */
        rows?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The values field well of a heat map.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardHeatMapConfiguration {
        /**
         * The color options (gradient color, point of divergence) in a heat map.
         */
        colorScale?: outputs.quicksight.DashboardColorScale;
        /**
         * The label options of the column that is displayed in a heat map.
         */
        columnLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardHeatMapFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The label options of the row that is displayed in a `heat map` .
         */
        rowLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The sort configuration of a heat map.
         */
        sortConfiguration?: outputs.quicksight.DashboardHeatMapSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
    }

    export interface DashboardHeatMapFieldWells {
        /**
         * The aggregated field wells of a heat map.
         */
        heatMapAggregatedFieldWells?: outputs.quicksight.DashboardHeatMapAggregatedFieldWells;
    }

    export interface DashboardHeatMapSortConfiguration {
        /**
         * The limit on the number of columns that are displayed in a heat map.
         */
        heatMapColumnItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The column sort configuration for heat map for columns that aren't a part of a field well.
         */
        heatMapColumnSort?: outputs.quicksight.DashboardFieldSortOptions[];
        /**
         * The limit on the number of rows that are displayed in a heat map.
         */
        heatMapRowItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The field sort configuration of the rows fields.
         */
        heatMapRowSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardHeatMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration of a heat map.
         */
        chartConfiguration?: outputs.quicksight.DashboardHeatMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardHistogramAggregatedFieldWells {
        /**
         * The value field wells of a histogram. Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardHistogramBinOptions {
        /**
         * The options that determine the bin count of a histogram.
         */
        binCount?: outputs.quicksight.DashboardBinCountOptions;
        /**
         * The options that determine the bin width of a histogram.
         */
        binWidth?: outputs.quicksight.DashboardBinWidthOptions;
        /**
         * The options that determine the selected bin type.
         */
        selectedBinType?: enums.quicksight.DashboardHistogramBinType;
        /**
         * The options that determine the bin start value.
         */
        startValue?: number;
    }

    export interface DashboardHistogramConfiguration {
        /**
         * The options that determine the presentation of histogram bins.
         */
        binOptions?: outputs.quicksight.DashboardHistogramBinOptions;
        /**
         * The data label configuration of a histogram.
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The field well configuration of a histogram.
         */
        fieldWells?: outputs.quicksight.DashboardHistogramFieldWells;
        /**
         * The tooltip configuration of a histogram.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * The visual palette configuration of a histogram.
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        /**
         * The options that determine the presentation of the x-axis.
         */
        xAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The options that determine the presentation of the x-axis label.
         */
        xAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The options that determine the presentation of the y-axis.
         */
        yAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
    }

    export interface DashboardHistogramFieldWells {
        /**
         * The field well configuration of a histogram.
         */
        histogramAggregatedFieldWells?: outputs.quicksight.DashboardHistogramAggregatedFieldWells;
    }

    export interface DashboardHistogramVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration for a `HistogramVisual` .
         */
        chartConfiguration?: outputs.quicksight.DashboardHistogramConfiguration;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardInsightConfiguration {
        /**
         * The computations configurations of the insight visual
         */
        computations?: outputs.quicksight.DashboardComputation[];
        /**
         * The custom narrative of the insight visual.
         */
        customNarrative?: outputs.quicksight.DashboardCustomNarrativeOptions;
    }

    export interface DashboardInsightVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The dataset that is used in the insight visual.
         */
        dataSetIdentifier: string;
        /**
         * The configuration of an insight visual.
         */
        insightConfiguration?: outputs.quicksight.DashboardInsightConfiguration;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardIntegerDefaultValues {
        /**
         * The dynamic value of the `IntegerDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.DashboardDynamicDefaultValue;
        /**
         * The static values of the `IntegerDefaultValues` .
         */
        staticValues?: number[];
    }

    /**
     * <p>An integer parameter.</p>
     */
    export interface DashboardIntegerParameter {
        /**
         * <p>The name of the integer parameter.</p>
         */
        name: string;
        /**
         * <p>The values for the integer parameter.</p>
         */
        values: number[];
    }

    export interface DashboardIntegerParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.DashboardIntegerDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.DashboardMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The value type determines whether the parameter is a single-value or multi-value parameter.
         */
        parameterValueType: enums.quicksight.DashboardParameterValueType;
        /**
         * A parameter declaration for the `Integer` data type.
         */
        valueWhenUnset?: outputs.quicksight.DashboardIntegerValueWhenUnsetConfiguration;
    }

    export interface DashboardIntegerValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: number;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.DashboardValueWhenUnsetOption;
    }

    export interface DashboardItemsLimitConfiguration {
        /**
         * The limit on how many items of a field are showed in the chart. For example, the number of slices that are displayed in a pie chart.
         */
        itemsLimit?: number;
        /**
         * The `Show other` of an axis in the chart. Choose one of the following options:
         *
         * - `INCLUDE`
         * - `EXCLUDE`
         */
        otherCategories?: enums.quicksight.DashboardOtherCategories;
    }

    export interface DashboardKpiActualValueConditionalFormatting {
        /**
         * The conditional formatting of the actual value's icon.
         */
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        /**
         * The conditional formatting of the actual value's text color.
         */
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardKpiComparisonValueConditionalFormatting {
        /**
         * The conditional formatting of the comparison value's icon.
         */
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        /**
         * The conditional formatting of the comparison value's text color.
         */
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardKpiConditionalFormatting {
        /**
         * The conditional formatting options of a KPI visual.
         */
        conditionalFormattingOptions?: outputs.quicksight.DashboardKpiConditionalFormattingOption[];
    }

    export interface DashboardKpiConditionalFormattingOption {
        /**
         * The conditional formatting for the actual value of a KPI visual.
         */
        actualValue?: outputs.quicksight.DashboardKpiActualValueConditionalFormatting;
        /**
         * The conditional formatting for the comparison value of a KPI visual.
         */
        comparisonValue?: outputs.quicksight.DashboardKpiComparisonValueConditionalFormatting;
        /**
         * The conditional formatting for the primary value of a KPI visual.
         */
        primaryValue?: outputs.quicksight.DashboardKpiPrimaryValueConditionalFormatting;
        /**
         * The conditional formatting for the progress bar of a KPI visual.
         */
        progressBar?: outputs.quicksight.DashboardKpiProgressBarConditionalFormatting;
    }

    export interface DashboardKpiConfiguration {
        /**
         * The field well configuration of a KPI visual.
         */
        fieldWells?: outputs.quicksight.DashboardKpiFieldWells;
        /**
         * The options that determine the presentation of a KPI visual.
         */
        kpiOptions?: outputs.quicksight.DashboardKpiOptions;
        /**
         * The sort configuration of a KPI visual.
         */
        sortConfiguration?: outputs.quicksight.DashboardKpiSortConfiguration;
    }

    export interface DashboardKpiFieldWells {
        /**
         * The target value field wells of a KPI visual.
         */
        targetValues?: outputs.quicksight.DashboardMeasureField[];
        /**
         * The trend group field wells of a KPI visual.
         */
        trendGroups?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The value field wells of a KPI visual.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardKpiOptions {
        /**
         * The comparison configuration of a KPI visual.
         */
        comparison?: outputs.quicksight.DashboardComparisonConfiguration;
        /**
         * The options that determine the primary value display type.
         */
        primaryValueDisplayType?: enums.quicksight.DashboardPrimaryValueDisplayType;
        /**
         * The options that determine the primary value font configuration.
         */
        primaryValueFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        /**
         * The options that determine the presentation of the progress bar of a KPI visual.
         */
        progressBar?: outputs.quicksight.DashboardProgressBarOptions;
        /**
         * The options that determine the presentation of the secondary value of a KPI visual.
         */
        secondaryValue?: outputs.quicksight.DashboardSecondaryValueOptions;
        /**
         * The options that determine the secondary value font configuration.
         */
        secondaryValueFontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        /**
         * The options that determine the visibility, color, type, and tooltip visibility of the sparkline of a KPI visual.
         */
        sparkline?: outputs.quicksight.DashboardKpiSparklineOptions;
        /**
         * The options that determine the presentation of trend arrows in a KPI visual.
         */
        trendArrows?: outputs.quicksight.DashboardTrendArrowOptions;
        /**
         * The options that determine the layout a KPI visual.
         */
        visualLayoutOptions?: outputs.quicksight.DashboardKpiVisualLayoutOptions;
    }

    export interface DashboardKpiPrimaryValueConditionalFormatting {
        /**
         * The conditional formatting of the primary value's icon.
         */
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        /**
         * The conditional formatting of the primary value's text color.
         */
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardKpiProgressBarConditionalFormatting {
        /**
         * The conditional formatting of the progress bar's foreground color.
         */
        foregroundColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardKpiSortConfiguration {
        /**
         * The sort configuration of the trend group fields.
         */
        trendGroupSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardKpiSparklineOptions {
        /**
         * The color of the sparkline.
         */
        color?: string;
        /**
         * The tooltip visibility of the sparkline.
         */
        tooltipVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The type of the sparkline.
         */
        type: enums.quicksight.DashboardKpiSparklineType;
        /**
         * The visibility of the sparkline.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardKpiVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration of a KPI visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardKpiConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The conditional formatting of a KPI visual.
         */
        conditionalFormatting?: outputs.quicksight.DashboardKpiConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardKpiVisualLayoutOptions {
        /**
         * The standard layout of the KPI visual.
         */
        standardLayout?: outputs.quicksight.DashboardKpiVisualStandardLayout;
    }

    export interface DashboardKpiVisualStandardLayout {
        /**
         * The standard layout type.
         */
        type: enums.quicksight.DashboardKpiVisualStandardLayoutType;
    }

    export interface DashboardLabelOptions {
        /**
         * The text for the label.
         */
        customLabel?: string;
        /**
         * The font configuration of the label.
         */
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        /**
         * Determines whether or not the label is visible.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardLayout {
        /**
         * The configuration that determines what the type of layout for a sheet.
         */
        configuration: outputs.quicksight.DashboardLayoutConfiguration;
    }

    export interface DashboardLayoutConfiguration {
        /**
         * A free-form is optimized for a fixed width and has more control over the exact placement of layout elements.
         */
        freeFormLayout?: outputs.quicksight.DashboardFreeFormLayoutConfiguration;
        /**
         * A type of layout that can be used on a sheet. In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as designed, with options to fit to screen or view at actual size. A grid layout can be configured to behave in one of two ways when the viewport is resized: `FIXED` or `RESPONSIVE` .
         */
        gridLayout?: outputs.quicksight.DashboardGridLayoutConfiguration;
        /**
         * A section based layout organizes visuals into multiple sections and has customized header, footer and page break.
         */
        sectionBasedLayout?: outputs.quicksight.DashboardSectionBasedLayoutConfiguration;
    }

    export interface DashboardLegendOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        /**
         * The positions for the legend. Choose one of the following options:
         *
         * - `AUTO`
         * - `RIGHT`
         * - `BOTTOM`
         * - `LEFT`
         */
        position?: enums.quicksight.DashboardLegendPosition;
        /**
         * The custom title for the legend.
         */
        title?: outputs.quicksight.DashboardLabelOptions;
        /**
         * Determines whether or not the legend is visible.
         */
        visibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface DashboardLineChartAggregatedFieldWells {
        /**
         * The category field wells of a line chart. Values are grouped by category fields.
         */
        category?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The color field wells of a line chart. Values are grouped by category fields.
         */
        colors?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The small multiples field well of a line chart.
         */
        smallMultiples?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The value field wells of a line chart. Values are aggregated based on categories.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardLineChartConfiguration {
        /**
         * The default configuration of a line chart's contribution analysis.
         */
        contributionAnalysisDefaults?: outputs.quicksight.DashboardContributionAnalysisDefault[];
        /**
         * The data label configuration of a line chart.
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The options that determine the default presentation of all line series in `LineChartVisual` .
         */
        defaultSeriesSettings?: outputs.quicksight.DashboardLineChartDefaultSeriesSettings;
        /**
         * The field well configuration of a line chart.
         */
        fieldWells?: outputs.quicksight.DashboardLineChartFieldWells;
        /**
         * The forecast configuration of a line chart.
         */
        forecastConfigurations?: outputs.quicksight.DashboardForecastConfiguration[];
        /**
         * The legend configuration of a line chart.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The series axis configuration of a line chart.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.DashboardLineSeriesAxisDisplayOptions;
        /**
         * The options that determine the presentation of the y-axis label.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The reference lines configuration of a line chart.
         */
        referenceLines?: outputs.quicksight.DashboardReferenceLine[];
        /**
         * The series axis configuration of a line chart.
         */
        secondaryYAxisDisplayOptions?: outputs.quicksight.DashboardLineSeriesAxisDisplayOptions;
        /**
         * The options that determine the presentation of the secondary y-axis label.
         */
        secondaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The series item configuration of a line chart.
         */
        series?: outputs.quicksight.DashboardSeriesItem[];
        /**
         * The small multiples setup for the visual.
         */
        smallMultiplesOptions?: outputs.quicksight.DashboardSmallMultiplesOptions;
        /**
         * The sort configuration of a line chart.
         */
        sortConfiguration?: outputs.quicksight.DashboardLineChartSortConfiguration;
        /**
         * The tooltip configuration of a line chart.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * Determines the type of the line chart.
         */
        type?: enums.quicksight.DashboardLineChartType;
        /**
         * The visual palette configuration of a line chart.
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        /**
         * The options that determine the presentation of the x-axis.
         */
        xAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The options that determine the presentation of the x-axis label.
         */
        xAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
    }

    export interface DashboardLineChartDefaultSeriesSettings {
        /**
         * The axis to which you are binding all line series to.
         */
        axisBinding?: enums.quicksight.DashboardAxisBinding;
        /**
         * Line styles options for all line series in the visual.
         */
        lineStyleSettings?: outputs.quicksight.DashboardLineChartLineStyleSettings;
        /**
         * Marker styles options for all line series in the visual.
         */
        markerStyleSettings?: outputs.quicksight.DashboardLineChartMarkerStyleSettings;
    }

    export interface DashboardLineChartFieldWells {
        /**
         * The field well configuration of a line chart.
         */
        lineChartAggregatedFieldWells?: outputs.quicksight.DashboardLineChartAggregatedFieldWells;
    }

    export interface DashboardLineChartLineStyleSettings {
        /**
         * Interpolation style for line series.
         *
         * - `LINEAR` : Show as default, linear style.
         * - `SMOOTH` : Show as a smooth curve.
         * - `STEPPED` : Show steps in line.
         */
        lineInterpolation?: enums.quicksight.DashboardLineInterpolation;
        /**
         * Line style for line series.
         *
         * - `SOLID` : Show as a solid line.
         * - `DOTTED` : Show as a dotted line.
         * - `DASHED` : Show as a dashed line.
         */
        lineStyle?: enums.quicksight.DashboardLineChartLineStyle;
        /**
         * Configuration option that determines whether to show the line for the series.
         */
        lineVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        lineWidth?: string;
    }

    export interface DashboardLineChartMarkerStyleSettings {
        /**
         * Color of marker in the series.
         */
        markerColor?: string;
        /**
         * Shape option for markers in the series.
         *
         * - `CIRCLE` : Show marker as a circle.
         * - `TRIANGLE` : Show marker as a triangle.
         * - `SQUARE` : Show marker as a square.
         * - `DIAMOND` : Show marker as a diamond.
         * - `ROUNDED_SQUARE` : Show marker as a rounded square.
         */
        markerShape?: enums.quicksight.DashboardLineChartMarkerShape;
        /**
         * String based length that is composed of value and unit in px
         */
        markerSize?: string;
        /**
         * Configuration option that determines whether to show the markers in the series.
         */
        markerVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardLineChartSeriesSettings {
        /**
         * Line styles options for a line series in `LineChartVisual` .
         */
        lineStyleSettings?: outputs.quicksight.DashboardLineChartLineStyleSettings;
        /**
         * Marker styles options for a line series in `LineChartVisual` .
         */
        markerStyleSettings?: outputs.quicksight.DashboardLineChartMarkerStyleSettings;
    }

    export interface DashboardLineChartSortConfiguration {
        /**
         * The limit on the number of categories that are displayed in a line chart.
         */
        categoryItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        /**
         * The limit on the number of lines that are displayed in a line chart.
         */
        colorItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The limit on the number of small multiples panels that are displayed.
         */
        smallMultiplesLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the small multiples field.
         */
        smallMultiplesSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardLineChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration of a line chart.
         */
        chartConfiguration?: outputs.quicksight.DashboardLineChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardLineSeriesAxisDisplayOptions {
        /**
         * The options that determine the presentation of the line series axis.
         */
        axisOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The configuration options that determine how missing data is treated during the rendering of a line chart.
         */
        missingDataConfigurations?: outputs.quicksight.DashboardMissingDataConfiguration[];
    }

    export interface DashboardLinkSharingConfiguration {
        /**
         * A structure that contains the permissions of a shareable link.
         */
        permissions?: outputs.quicksight.DashboardResourcePermission[];
    }

    export interface DashboardListControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the search options in a list control.
         */
        searchOptions?: outputs.quicksight.DashboardListControlSearchOptions;
        /**
         * The configuration of the `Select all` options in a list control.
         */
        selectAllOptions?: outputs.quicksight.DashboardListControlSelectAllOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardListControlSearchOptions {
        /**
         * The visibility configuration of the search options in a list control.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardListControlSelectAllOptions {
        /**
         * The visibility configuration of the `Select all` options in a list control.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardLoadingAnimation {
        /**
         * The visibility configuration of `LoadingAnimation` .
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardLocalNavigationConfiguration {
        /**
         * The sheet that is targeted for navigation in the same analysis.
         */
        targetSheetId: string;
    }

    export interface DashboardLongFormatText {
        /**
         * Plain text format.
         */
        plainText?: string;
        /**
         * Rich text. Examples of rich text include bold, underline, and italics.
         */
        richText?: string;
    }

    export interface DashboardMappedDataSetParameter {
        /**
         * A unique name that identifies a dataset within the analysis or dashboard.
         */
        dataSetIdentifier: string;
        /**
         * The name of the dataset parameter.
         */
        dataSetParameterName: string;
    }

    export interface DashboardMaximumLabelType {
        /**
         * The visibility of the maximum label.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardMaximumMinimumComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.DashboardDimensionField;
        /**
         * The type of computation. Choose one of the following options:
         *
         * - MAXIMUM: A maximum computation.
         * - MINIMUM: A minimum computation.
         */
        type: enums.quicksight.DashboardMaximumMinimumComputationType;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardMeasureField {
        /**
         * The calculated measure field only used in pivot tables.
         */
        calculatedMeasureField?: outputs.quicksight.DashboardCalculatedMeasureField;
        /**
         * The measure type field with categorical type columns.
         */
        categoricalMeasureField?: outputs.quicksight.DashboardCategoricalMeasureField;
        /**
         * The measure type field with date type columns.
         */
        dateMeasureField?: outputs.quicksight.DashboardDateMeasureField;
        /**
         * The measure type field with numerical type columns.
         */
        numericalMeasureField?: outputs.quicksight.DashboardNumericalMeasureField;
    }

    export interface DashboardMetricComparisonComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The field that is used in a metric comparison from value setup.
         */
        fromValue?: outputs.quicksight.DashboardMeasureField;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The field that is used in a metric comparison to value setup.
         */
        targetValue?: outputs.quicksight.DashboardMeasureField;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.DashboardDimensionField;
    }

    export interface DashboardMinimumLabelType {
        /**
         * The visibility of the minimum label.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardMissingDataConfiguration {
        /**
         * The treatment option that determines how missing data should be rendered. Choose from the following options:
         *
         * - `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
         * - `SHOW_AS_ZERO` : Show missing values as the value `0` .
         * - `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
         */
        treatmentOption?: enums.quicksight.DashboardMissingDataTreatmentOption;
    }

    export interface DashboardNegativeValueConfiguration {
        /**
         * Determines the display mode of the negative value configuration.
         */
        displayMode: enums.quicksight.DashboardNegativeValueDisplayMode;
    }

    export interface DashboardNullValueFormatConfiguration {
        /**
         * Determines the null string of null values.
         */
        nullString: string;
    }

    export interface DashboardNumberDisplayFormatConfiguration {
        /**
         * The option that determines the decimal places configuration.
         */
        decimalPlacesConfiguration?: outputs.quicksight.DashboardDecimalPlacesConfiguration;
        /**
         * The options that determine the negative value configuration.
         */
        negativeValueConfiguration?: outputs.quicksight.DashboardNegativeValueConfiguration;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        /**
         * Determines the number scale value of the number format.
         */
        numberScale?: enums.quicksight.DashboardNumberScale;
        /**
         * Determines the prefix value of the number format.
         */
        prefix?: string;
        /**
         * The options that determine the numeric separator configuration.
         */
        separatorConfiguration?: outputs.quicksight.DashboardNumericSeparatorConfiguration;
        /**
         * Determines the suffix value of the number format.
         */
        suffix?: string;
    }

    export interface DashboardNumberFormatConfiguration {
        /**
         * The options that determine the numeric format configuration.
         */
        formatConfiguration?: outputs.quicksight.DashboardNumericFormatConfiguration;
    }

    export interface DashboardNumericAxisOptions {
        /**
         * The range setup of a numeric axis.
         */
        range?: outputs.quicksight.DashboardAxisDisplayRange;
        /**
         * The scale setup of a numeric axis.
         */
        scale?: outputs.quicksight.DashboardAxisScale;
    }

    export interface DashboardNumericEqualityDrillDownFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The value of the double input numeric drill down filter.
         */
        value: number;
    }

    export interface DashboardNumericEqualityFilter {
        /**
         * The aggregation function of the filter.
         */
        aggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.DashboardDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.DashboardNumericEqualityMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.DashboardFilterNullOption;
        /**
         * The parameter whose value should be used for the filter value.
         */
        parameterName?: string;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.DashboardNumericFilterSelectAllOptions;
        /**
         * The input value.
         */
        value?: number;
    }

    export interface DashboardNumericFormatConfiguration {
        /**
         * The options that determine the currency display format configuration.
         */
        currencyDisplayFormatConfiguration?: outputs.quicksight.DashboardCurrencyDisplayFormatConfiguration;
        /**
         * The options that determine the number display format configuration.
         */
        numberDisplayFormatConfiguration?: outputs.quicksight.DashboardNumberDisplayFormatConfiguration;
        /**
         * The options that determine the percentage display format configuration.
         */
        percentageDisplayFormatConfiguration?: outputs.quicksight.DashboardPercentageDisplayFormatConfiguration;
    }

    export interface DashboardNumericRangeFilter {
        /**
         * The aggregation function of the filter.
         */
        aggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.DashboardDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * Determines whether the maximum value in the filter value range should be included in the filtered results.
         */
        includeMaximum?: boolean;
        /**
         * Determines whether the minimum value in the filter value range should be included in the filtered results.
         */
        includeMinimum?: boolean;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.DashboardFilterNullOption;
        /**
         * The maximum value for the filter value range.
         */
        rangeMaximum?: outputs.quicksight.DashboardNumericRangeFilterValue;
        /**
         * The minimum value for the filter value range.
         */
        rangeMinimum?: outputs.quicksight.DashboardNumericRangeFilterValue;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.DashboardNumericFilterSelectAllOptions;
    }

    export interface DashboardNumericRangeFilterValue {
        /**
         * The parameter that is used in the numeric range.
         */
        parameter?: string;
        /**
         * The static value of the numeric range filter.
         */
        staticValue?: number;
    }

    export interface DashboardNumericSeparatorConfiguration {
        /**
         * Determines the decimal separator.
         */
        decimalSeparator?: enums.quicksight.DashboardNumericSeparatorSymbol;
        /**
         * The options that determine the thousands separator configuration.
         */
        thousandsSeparator?: outputs.quicksight.DashboardThousandSeparatorOptions;
    }

    export interface DashboardNumericalAggregationFunction {
        /**
         * An aggregation based on the percentile of values in a dimension or measure.
         */
        percentileAggregation?: outputs.quicksight.DashboardPercentileAggregation;
        /**
         * Built-in aggregation functions for numerical values.
         *
         * - `SUM` : The sum of a dimension or measure.
         * - `AVERAGE` : The average of a dimension or measure.
         * - `MIN` : The minimum value of a dimension or measure.
         * - `MAX` : The maximum value of a dimension or measure.
         * - `COUNT` : The count of a dimension or measure.
         * - `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
         * - `VAR` : The variance of a dimension or measure.
         * - `VARP` : The partitioned variance of a dimension or measure.
         * - `STDEV` : The standard deviation of a dimension or measure.
         * - `STDEVP` : The partitioned standard deviation of a dimension or measure.
         * - `MEDIAN` : The median value of a dimension or measure.
         */
        simpleNumericalAggregation?: enums.quicksight.DashboardSimpleNumericalAggregationFunction;
    }

    export interface DashboardNumericalDimensionField {
        /**
         * The column that is used in the `NumericalDimensionField` .
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.DashboardNumberFormatConfiguration;
        /**
         * The custom hierarchy ID.
         */
        hierarchyId?: string;
    }

    export interface DashboardNumericalMeasureField {
        /**
         * The aggregation function of the measure field.
         */
        aggregationFunction?: outputs.quicksight.DashboardNumericalAggregationFunction;
        /**
         * The column that is used in the `NumericalMeasureField` .
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.DashboardNumberFormatConfiguration;
    }

    export interface DashboardPaginationConfiguration {
        /**
         * Indicates the page number.
         */
        pageNumber: number;
        /**
         * Indicates how many items render in one page.
         */
        pageSize: number;
    }

    export interface DashboardPanelConfiguration {
        /**
         * Sets the background color for each panel.
         */
        backgroundColor?: string;
        /**
         * Determines whether or not a background for each small multiples panel is rendered.
         */
        backgroundVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * Sets the line color of panel borders.
         */
        borderColor?: string;
        /**
         * Sets the line style of panel borders.
         */
        borderStyle?: enums.quicksight.DashboardPanelBorderStyle;
        /**
         * String based length that is composed of value and unit in px
         */
        borderThickness?: string;
        /**
         * Determines whether or not each panel displays a border.
         */
        borderVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        gutterSpacing?: string;
        /**
         * Determines whether or not negative space between sibling panels is rendered.
         */
        gutterVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * Configures the title display within each small multiples panel.
         */
        title?: outputs.quicksight.DashboardPanelTitleOptions;
    }

    export interface DashboardPanelTitleOptions {
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        /**
         * Sets the horizontal text alignment of the title within each panel.
         */
        horizontalTextAlignment?: enums.quicksight.DashboardHorizontalTextAlignment;
        /**
         * Determines whether or not panel titles are displayed.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardParameterControl {
        /**
         * A control from a date parameter that specifies date and time.
         */
        dateTimePicker?: outputs.quicksight.DashboardParameterDateTimePickerControl;
        /**
         * A control to display a dropdown list with buttons that are used to select a single value.
         */
        dropdown?: outputs.quicksight.DashboardParameterDropDownControl;
        /**
         * A control to display a list with buttons or boxes that are used to select either a single value or multiple values.
         */
        list?: outputs.quicksight.DashboardParameterListControl;
        /**
         * A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
         */
        slider?: outputs.quicksight.DashboardParameterSliderControl;
        /**
         * A control to display a text box that is used to enter multiple entries.
         */
        textArea?: outputs.quicksight.DashboardParameterTextAreaControl;
        /**
         * A control to display a text box that is used to enter a single entry.
         */
        textField?: outputs.quicksight.DashboardParameterTextFieldControl;
    }

    export interface DashboardParameterDateTimePickerControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardDateTimePickerControlDisplayOptions;
        /**
         * The ID of the `ParameterDateTimePickerControl` .
         */
        parameterControlId: string;
        /**
         * The name of the `ParameterDateTimePickerControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterDateTimePickerControl` .
         */
        title: string;
    }

    export interface DashboardParameterDeclaration {
        /**
         * A parameter declaration for the `DateTime` data type.
         */
        dateTimeParameterDeclaration?: outputs.quicksight.DashboardDateTimeParameterDeclaration;
        /**
         * A parameter declaration for the `Decimal` data type.
         */
        decimalParameterDeclaration?: outputs.quicksight.DashboardDecimalParameterDeclaration;
        /**
         * A parameter declaration for the `Integer` data type.
         */
        integerParameterDeclaration?: outputs.quicksight.DashboardIntegerParameterDeclaration;
        /**
         * A parameter declaration for the `String` data type.
         */
        stringParameterDeclaration?: outputs.quicksight.DashboardStringParameterDeclaration;
    }

    export interface DashboardParameterDropDownControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.DashboardCascadingControlConfiguration;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardDropDownControlDisplayOptions;
        /**
         * The ID of the `ParameterDropDownControl` .
         */
        parameterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.DashboardParameterSelectableValues;
        /**
         * The source parameter name of the `ParameterDropDownControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterDropDownControl` .
         */
        title: string;
        /**
         * The type parameter name of the `ParameterDropDownControl` .
         */
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardParameterListControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.DashboardCascadingControlConfiguration;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardListControlDisplayOptions;
        /**
         * The ID of the `ParameterListControl` .
         */
        parameterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.DashboardParameterSelectableValues;
        /**
         * The source parameter name of the `ParameterListControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterListControl` .
         */
        title: string;
        /**
         * The type of `ParameterListControl` .
         */
        type?: enums.quicksight.DashboardSheetControlListType;
    }

    export interface DashboardParameterSelectableValues {
        /**
         * The column identifier that fetches values from the data set.
         */
        linkToDataSetColumn?: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The values that are used in `ParameterSelectableValues` .
         */
        values?: string[];
    }

    export interface DashboardParameterSliderControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardSliderControlDisplayOptions;
        /**
         * The larger value that is displayed at the right of the slider.
         */
        maximumValue: number;
        /**
         * The smaller value that is displayed at the left of the slider.
         */
        minimumValue: number;
        /**
         * The ID of the `ParameterSliderControl` .
         */
        parameterControlId: string;
        /**
         * The source parameter name of the `ParameterSliderControl` .
         */
        sourceParameterName: string;
        /**
         * The number of increments that the slider bar is divided into.
         */
        stepSize: number;
        /**
         * The title of the `ParameterSliderControl` .
         */
        title: string;
    }

    export interface DashboardParameterTextAreaControl {
        /**
         * The delimiter that is used to separate the lines in text.
         */
        delimiter?: string;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardTextAreaControlDisplayOptions;
        /**
         * The ID of the `ParameterTextAreaControl` .
         */
        parameterControlId: string;
        /**
         * The source parameter name of the `ParameterTextAreaControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterTextAreaControl` .
         */
        title: string;
    }

    export interface DashboardParameterTextFieldControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.DashboardTextFieldControlDisplayOptions;
        /**
         * The ID of the `ParameterTextFieldControl` .
         */
        parameterControlId: string;
        /**
         * The source parameter name of the `ParameterTextFieldControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterTextFieldControl` .
         */
        title: string;
    }

    /**
     * <p>A list of Amazon QuickSight parameters and the list's override values.</p>
     */
    export interface DashboardParameters {
        /**
         * <p>The parameters that have a data type of date-time.</p>
         */
        dateTimeParameters?: outputs.quicksight.DashboardDateTimeParameter[];
        /**
         * <p>The parameters that have a data type of decimal.</p>
         */
        decimalParameters?: outputs.quicksight.DashboardDecimalParameter[];
        /**
         * <p>The parameters that have a data type of integer.</p>
         */
        integerParameters?: outputs.quicksight.DashboardIntegerParameter[];
        /**
         * <p>The parameters that have a data type of string.</p>
         */
        stringParameters?: outputs.quicksight.DashboardStringParameter[];
    }

    export interface DashboardPercentVisibleRange {
        /**
         * The lower bound of the range.
         */
        from?: number;
        /**
         * The top bound of the range.
         */
        to?: number;
    }

    export interface DashboardPercentageDisplayFormatConfiguration {
        /**
         * The option that determines the decimal places configuration.
         */
        decimalPlacesConfiguration?: outputs.quicksight.DashboardDecimalPlacesConfiguration;
        /**
         * The options that determine the negative value configuration.
         */
        negativeValueConfiguration?: outputs.quicksight.DashboardNegativeValueConfiguration;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        /**
         * Determines the prefix value of the percentage format.
         */
        prefix?: string;
        /**
         * The options that determine the numeric separator configuration.
         */
        separatorConfiguration?: outputs.quicksight.DashboardNumericSeparatorConfiguration;
        /**
         * Determines the suffix value of the percentage format.
         */
        suffix?: string;
    }

    export interface DashboardPercentileAggregation {
        /**
         * The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.
         */
        percentileValue?: number;
    }

    export interface DashboardPeriodOverPeriodComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.DashboardDimensionField;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardPeriodToDateComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The time granularity setup of period to date computation. Choose from the following options:
         *
         * - YEAR: Year to date.
         * - MONTH: Month to date.
         */
        periodTimeGranularity?: enums.quicksight.DashboardTimeGranularity;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.DashboardDimensionField;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardPieChartAggregatedFieldWells {
        /**
         * The category (group/color) field wells of a pie chart.
         */
        category?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The small multiples field well of a pie chart.
         */
        smallMultiples?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The value field wells of a pie chart. Values are aggregated based on categories.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardPieChartConfiguration {
        /**
         * The label options of the group/color that is displayed in a pie chart.
         */
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The contribution analysis (anomaly configuration) setup of the visual.
         */
        contributionAnalysisDefaults?: outputs.quicksight.DashboardContributionAnalysisDefault[];
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.
         */
        donutOptions?: outputs.quicksight.DashboardDonutOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardPieChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The small multiples setup for the visual.
         */
        smallMultiplesOptions?: outputs.quicksight.DashboardSmallMultiplesOptions;
        /**
         * The sort configuration of a pie chart.
         */
        sortConfiguration?: outputs.quicksight.DashboardPieChartSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * The label options for the value that is displayed in a pie chart.
         */
        valueLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardPieChartFieldWells {
        /**
         * The field well configuration of a pie chart.
         */
        pieChartAggregatedFieldWells?: outputs.quicksight.DashboardPieChartAggregatedFieldWells;
    }

    export interface DashboardPieChartSortConfiguration {
        /**
         * The limit on the number of categories that are displayed in a pie chart.
         */
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        /**
         * The limit on the number of small multiples panels that are displayed.
         */
        smallMultiplesLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the small multiples field.
         */
        smallMultiplesSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardPieChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration of a pie chart.
         */
        chartConfiguration?: outputs.quicksight.DashboardPieChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardPivotFieldSortOptions {
        /**
         * The field ID for the field sort options.
         */
        fieldId: string;
        /**
         * The sort by field for the field sort options.
         */
        sortBy: outputs.quicksight.DashboardPivotTableSortBy;
    }

    export interface DashboardPivotTableAggregatedFieldWells {
        /**
         * The columns field well for a pivot table. Values are grouped by columns fields.
         */
        columns?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The rows field well for a pivot table. Values are grouped by rows fields.
         */
        rows?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The values field well for a pivot table. Values are aggregated based on rows and columns fields.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardPivotTableCellConditionalFormatting {
        /**
         * The field ID of the cell for conditional formatting.
         */
        fieldId: string;
        /**
         * The scope of the cell for conditional formatting.
         */
        scope?: outputs.quicksight.DashboardPivotTableConditionalFormattingScope;
        /**
         * A list of cell scopes for conditional formatting.
         */
        scopes?: outputs.quicksight.DashboardPivotTableConditionalFormattingScope[];
        /**
         * The text format of the cell for conditional formatting.
         */
        textFormat?: outputs.quicksight.DashboardTextConditionalFormat;
    }

    export interface DashboardPivotTableConditionalFormatting {
        /**
         * Conditional formatting options for a `PivotTableVisual` .
         */
        conditionalFormattingOptions?: outputs.quicksight.DashboardPivotTableConditionalFormattingOption[];
    }

    export interface DashboardPivotTableConditionalFormattingOption {
        /**
         * The cell conditional formatting option for a pivot table.
         */
        cell?: outputs.quicksight.DashboardPivotTableCellConditionalFormatting;
    }

    export interface DashboardPivotTableConditionalFormattingScope {
        /**
         * The role (field, field total, grand total) of the cell for conditional formatting.
         */
        role?: enums.quicksight.DashboardPivotTableConditionalFormattingScopeRole;
    }

    export interface DashboardPivotTableConfiguration {
        /**
         * The field options for a pivot table visual.
         */
        fieldOptions?: outputs.quicksight.DashboardPivotTableFieldOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardPivotTableFieldWells;
        /**
         * The paginated report options for a pivot table visual.
         */
        paginatedReportOptions?: outputs.quicksight.DashboardPivotTablePaginatedReportOptions;
        /**
         * The sort configuration for a `PivotTableVisual` .
         */
        sortConfiguration?: outputs.quicksight.DashboardPivotTableSortConfiguration;
        /**
         * The table options for a pivot table visual.
         */
        tableOptions?: outputs.quicksight.DashboardPivotTableOptions;
        /**
         * The total options for a pivot table visual.
         */
        totalOptions?: outputs.quicksight.DashboardPivotTableTotalOptions;
    }

    export interface DashboardPivotTableDataPathOption {
        /**
         * The list of data path values for the data path options.
         */
        dataPathList: outputs.quicksight.DashboardDataPathValue[];
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface DashboardPivotTableFieldCollapseStateOption {
        /**
         * The state of the field target of a pivot table. Choose one of the following options:
         *
         * - `COLLAPSED`
         * - `EXPANDED`
         */
        state?: enums.quicksight.DashboardPivotTableFieldCollapseState;
        /**
         * A tagged-union object that sets the collapse state.
         */
        target: outputs.quicksight.DashboardPivotTableFieldCollapseStateTarget;
    }

    export interface DashboardPivotTableFieldCollapseStateTarget {
        /**
         * The data path of the pivot table's header. Used to set the collapse state.
         */
        fieldDataPathValues?: outputs.quicksight.DashboardDataPathValue[];
        /**
         * The field ID of the pivot table that the collapse state needs to be set to.
         */
        fieldId?: string;
    }

    export interface DashboardPivotTableFieldOption {
        /**
         * The custom label of the pivot table field.
         */
        customLabel?: string;
        /**
         * The field ID of the pivot table field.
         */
        fieldId: string;
        /**
         * The visibility of the pivot table field.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardPivotTableFieldOptions {
        /**
         * The collapse state options for the pivot table field options.
         */
        collapseStateOptions?: outputs.quicksight.DashboardPivotTableFieldCollapseStateOption[];
        /**
         * The data path options for the pivot table field options.
         */
        dataPathOptions?: outputs.quicksight.DashboardPivotTableDataPathOption[];
        /**
         * The selected field options for the pivot table field options.
         */
        selectedFieldOptions?: outputs.quicksight.DashboardPivotTableFieldOption[];
    }

    export interface DashboardPivotTableFieldSubtotalOptions {
        /**
         * The field ID of the subtotal options.
         */
        fieldId?: string;
    }

    export interface DashboardPivotTableFieldWells {
        /**
         * The aggregated field well for the pivot table.
         */
        pivotTableAggregatedFieldWells?: outputs.quicksight.DashboardPivotTableAggregatedFieldWells;
    }

    export interface DashboardPivotTableOptions {
        /**
         * The table cell style of cells.
         */
        cellStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The visibility setting of a pivot table's collapsed row dimension fields. If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are automatically hidden. The default value is `VISIBLE` .
         */
        collapsedRowDimensionsVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The table cell style of the column header.
         */
        columnHeaderStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The visibility of the column names.
         */
        columnNamesVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        defaultCellWidth?: string;
        /**
         * The metric placement (row, column) options.
         */
        metricPlacement?: enums.quicksight.DashboardPivotTableMetricPlacement;
        /**
         * The row alternate color options (widget status, row alternate colors).
         */
        rowAlternateColorOptions?: outputs.quicksight.DashboardRowAlternateColorOptions;
        /**
         * The table cell style of row field names.
         */
        rowFieldNamesStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The table cell style of the row headers.
         */
        rowHeaderStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The options for the label that is located above the row headers. This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
         */
        rowsLabelOptions?: outputs.quicksight.DashboardPivotTableRowsLabelOptions;
        /**
         * The layout for the row dimension headers of a pivot table. Choose one of the following options.
         *
         * - `TABULAR` : (Default) Each row field is displayed in a separate column.
         * - `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to differentiate row headers of different fields.
         */
        rowsLayout?: enums.quicksight.DashboardPivotTableRowsLayout;
        /**
         * The visibility of the single metric options.
         */
        singleMetricVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * Determines the visibility of the pivot table.
         */
        toggleButtonsVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardPivotTablePaginatedReportOptions {
        /**
         * The visibility of the repeating header rows on each page.
         */
        overflowColumnHeaderVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The visibility of the printing table overflow across pages.
         */
        verticalOverflowVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardPivotTableRowsLabelOptions {
        /**
         * The custom label string for the rows label.
         */
        customLabel?: string;
        /**
         * The visibility of the rows label.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardPivotTableSortBy {
        /**
         * The column sort (field id, direction) for the pivot table sort by options.
         */
        column?: outputs.quicksight.DashboardColumnSort;
        /**
         * The data path sort (data path value, direction) for the pivot table sort by options.
         */
        dataPath?: outputs.quicksight.DashboardDataPathSort;
        /**
         * The field sort (field id, direction) for the pivot table sort by options.
         */
        field?: outputs.quicksight.DashboardFieldSort;
    }

    export interface DashboardPivotTableSortConfiguration {
        /**
         * The field sort options for a pivot table sort configuration.
         */
        fieldSortOptions?: outputs.quicksight.DashboardPivotFieldSortOptions[];
    }

    export interface DashboardPivotTableTotalOptions {
        /**
         * The column subtotal options.
         */
        columnSubtotalOptions?: outputs.quicksight.DashboardSubtotalOptions;
        /**
         * The column total options.
         */
        columnTotalOptions?: outputs.quicksight.DashboardPivotTotalOptions;
        /**
         * The row subtotal options.
         */
        rowSubtotalOptions?: outputs.quicksight.DashboardSubtotalOptions;
        /**
         * The row total options.
         */
        rowTotalOptions?: outputs.quicksight.DashboardPivotTotalOptions;
    }

    export interface DashboardPivotTableVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardPivotTableConfiguration;
        /**
         * The conditional formatting for a `PivotTableVisual` .
         */
        conditionalFormatting?: outputs.quicksight.DashboardPivotTableConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface DashboardPivotTotalOptions {
        /**
         * The custom label string for the total cells.
         */
        customLabel?: string;
        /**
         * The cell styling options for the total of header cells.
         */
        metricHeaderCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The placement (start, end) for the total cells.
         */
        placement?: enums.quicksight.DashboardTableTotalsPlacement;
        /**
         * The scroll status (pinned, scrolled) for the total cells.
         */
        scrollStatus?: enums.quicksight.DashboardTableTotalsScrollStatus;
        /**
         * The total aggregation options for each value field.
         */
        totalAggregationOptions?: outputs.quicksight.DashboardTotalAggregationOption[];
        /**
         * The cell styling options for the total cells.
         */
        totalCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The visibility configuration for the total cells.
         */
        totalsVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The cell styling options for the totals of value cells.
         */
        valueCellStyle?: outputs.quicksight.DashboardTableCellStyle;
    }

    export interface DashboardPredefinedHierarchy {
        /**
         * The list of columns that define the predefined hierarchy.
         */
        columns: outputs.quicksight.DashboardColumnIdentifier[];
        /**
         * The option that determines the drill down filters for the predefined hierarchy.
         */
        drillDownFilters?: outputs.quicksight.DashboardDrillDownFilter[];
        /**
         * The hierarchy ID of the predefined hierarchy.
         */
        hierarchyId: string;
    }

    export interface DashboardProgressBarOptions {
        /**
         * The visibility of the progress bar.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    /**
     * <p>Dashboard publish options.</p>
     */
    export interface DashboardPublishOptions {
        /**
         * Ad hoc (one-time) filtering option.
         */
        adHocFilteringOption?: outputs.quicksight.DashboardAdHocFilteringOption;
        /**
         * The drill-down options of data points in a dashboard.
         */
        dataPointDrillUpDownOption?: outputs.quicksight.DashboardDataPointDrillUpDownOption;
        /**
         * The data point menu label options of a dashboard.
         */
        dataPointMenuLabelOption?: outputs.quicksight.DashboardDataPointMenuLabelOption;
        /**
         * The data point tool tip options of a dashboard.
         */
        dataPointTooltipOption?: outputs.quicksight.DashboardDataPointTooltipOption;
        /**
         * Export to .csv option.
         */
        exportToCsvOption?: outputs.quicksight.DashboardExportToCsvOption;
        /**
         * Determines if hidden fields are exported with a dashboard.
         */
        exportWithHiddenFieldsOption?: outputs.quicksight.DashboardExportWithHiddenFieldsOption;
        /**
         * Sheet controls option.
         */
        sheetControlsOption?: outputs.quicksight.DashboardSheetControlsOption;
        /**
         * The sheet layout maximization options of a dashbaord.
         */
        sheetLayoutElementMaximizationOption?: outputs.quicksight.DashboardSheetLayoutElementMaximizationOption;
        /**
         * The axis sort options of a dashboard.
         */
        visualAxisSortOption?: outputs.quicksight.DashboardVisualAxisSortOption;
        /**
         * The menu options of a visual in a dashboard.
         */
        visualMenuOption?: outputs.quicksight.DashboardVisualMenuOption;
        /**
         * The visual publish options of a visual in a dashboard.
         */
        visualPublishOptions?: outputs.quicksight.DashboardVisualPublishOptions;
    }

    export interface DashboardRadarChartAggregatedFieldWells {
        /**
         * The aggregated field well categories of a radar chart.
         */
        category?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The color that are assigned to the aggregated field wells of a radar chart.
         */
        color?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The values that are assigned to the aggregated field wells of a radar chart.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardRadarChartAreaStyleSettings {
        /**
         * The visibility settings of a radar chart.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardRadarChartConfiguration {
        /**
         * Determines the visibility of the colors of alternatign bands in a radar chart.
         */
        alternateBandColorsVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The color of the even-numbered alternate bands of a radar chart.
         */
        alternateBandEvenColor?: string;
        /**
         * The color of the odd-numbered alternate bands of a radar chart.
         */
        alternateBandOddColor?: string;
        /**
         * The axis behavior options of a radar chart.
         */
        axesRangeScale?: enums.quicksight.DashboardRadarChartAxesRangeScale;
        /**
         * The base sreies settings of a radar chart.
         */
        baseSeriesSettings?: outputs.quicksight.DashboardRadarChartSeriesSettings;
        /**
         * The category axis of a radar chart.
         */
        categoryAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The category label options of a radar chart.
         */
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The color axis of a radar chart.
         */
        colorAxis?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The color label options of a radar chart.
         */
        colorLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The field well configuration of a `RadarChartVisual` .
         */
        fieldWells?: outputs.quicksight.DashboardRadarChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The shape of the radar chart.
         */
        shape?: enums.quicksight.DashboardRadarChartShape;
        /**
         * The sort configuration of a `RadarChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.DashboardRadarChartSortConfiguration;
        /**
         * The start angle of a radar chart's axis.
         */
        startAngle?: number;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
    }

    export interface DashboardRadarChartFieldWells {
        /**
         * The aggregated field wells of a radar chart visual.
         */
        radarChartAggregatedFieldWells?: outputs.quicksight.DashboardRadarChartAggregatedFieldWells;
    }

    export interface DashboardRadarChartSeriesSettings {
        /**
         * The area style settings of a radar chart.
         */
        areaStyleSettings?: outputs.quicksight.DashboardRadarChartAreaStyleSettings;
    }

    export interface DashboardRadarChartSortConfiguration {
        /**
         * The category items limit for a radar chart.
         */
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The category sort options of a radar chart.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
        /**
         * The color items limit of a radar chart.
         */
        colorItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The color sort configuration of a radar chart.
         */
        colorSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardRadarChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardRadarChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardRangeEndsLabelType {
        /**
         * The visibility of the range ends label.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardReferenceLine {
        /**
         * The data configuration of the reference line.
         */
        dataConfiguration: outputs.quicksight.DashboardReferenceLineDataConfiguration;
        /**
         * The label configuration of the reference line.
         */
        labelConfiguration?: outputs.quicksight.DashboardReferenceLineLabelConfiguration;
        /**
         * The status of the reference line. Choose one of the following options:
         *
         * - `ENABLE`
         * - `DISABLE`
         */
        status?: enums.quicksight.DashboardWidgetStatus;
        /**
         * The style configuration of the reference line.
         */
        styleConfiguration?: outputs.quicksight.DashboardReferenceLineStyleConfiguration;
    }

    export interface DashboardReferenceLineCustomLabelConfiguration {
        /**
         * The string text of the custom label.
         */
        customLabel: string;
    }

    export interface DashboardReferenceLineDataConfiguration {
        /**
         * The axis binding type of the reference line. Choose one of the following options:
         *
         * - `PrimaryY`
         * - `SecondaryY`
         */
        axisBinding?: enums.quicksight.DashboardAxisBinding;
        /**
         * The dynamic configuration of the reference line data configuration.
         */
        dynamicConfiguration?: outputs.quicksight.DashboardReferenceLineDynamicDataConfiguration;
        /**
         * The series type of the reference line data configuration. Choose one of the following options:
         *
         * - `BAR`
         * - `LINE`
         */
        seriesType?: enums.quicksight.DashboardReferenceLineSeriesType;
        /**
         * The static data configuration of the reference line data configuration.
         */
        staticConfiguration?: outputs.quicksight.DashboardReferenceLineStaticDataConfiguration;
    }

    export interface DashboardReferenceLineDynamicDataConfiguration {
        /**
         * The calculation that is used in the dynamic data.
         */
        calculation: outputs.quicksight.DashboardNumericalAggregationFunction;
        /**
         * The column that the dynamic data targets.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The aggregation function that is used in the dynamic data.
         */
        measureAggregationFunction?: outputs.quicksight.DashboardAggregationFunction;
    }

    export interface DashboardReferenceLineLabelConfiguration {
        /**
         * The custom label configuration of the label in a reference line.
         */
        customLabelConfiguration?: outputs.quicksight.DashboardReferenceLineCustomLabelConfiguration;
        /**
         * The font color configuration of the label in a reference line.
         */
        fontColor?: string;
        /**
         * The font configuration of the label in a reference line.
         */
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        /**
         * The horizontal position configuration of the label in a reference line. Choose one of the following options:
         *
         * - `LEFT`
         * - `CENTER`
         * - `RIGHT`
         */
        horizontalPosition?: enums.quicksight.DashboardReferenceLineLabelHorizontalPosition;
        /**
         * The value label configuration of the label in a reference line.
         */
        valueLabelConfiguration?: outputs.quicksight.DashboardReferenceLineValueLabelConfiguration;
        /**
         * The vertical position configuration of the label in a reference line. Choose one of the following options:
         *
         * - `ABOVE`
         * - `BELOW`
         */
        verticalPosition?: enums.quicksight.DashboardReferenceLineLabelVerticalPosition;
    }

    export interface DashboardReferenceLineStaticDataConfiguration {
        /**
         * The double input of the static data.
         */
        value: number;
    }

    export interface DashboardReferenceLineStyleConfiguration {
        /**
         * The hex color of the reference line.
         */
        color?: string;
        /**
         * The pattern type of the line style. Choose one of the following options:
         *
         * - `SOLID`
         * - `DASHED`
         * - `DOTTED`
         */
        pattern?: enums.quicksight.DashboardReferenceLinePatternType;
    }

    export interface DashboardReferenceLineValueLabelConfiguration {
        /**
         * The format configuration of the value label.
         */
        formatConfiguration?: outputs.quicksight.DashboardNumericFormatConfiguration;
        /**
         * The relative position of the value label. Choose one of the following options:
         *
         * - `BEFORE_CUSTOM_LABEL`
         * - `AFTER_CUSTOM_LABEL`
         */
        relativePosition?: enums.quicksight.DashboardReferenceLineValueLabelRelativePosition;
    }

    export interface DashboardRelativeDateTimeControlDisplayOptions {
        /**
         * Customize how dates are formatted in controls.
         */
        dateTimeFormat?: string;
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardRelativeDatesFilter {
        /**
         * The date configuration of the filter.
         */
        anchorDateConfiguration: outputs.quicksight.DashboardAnchorDateConfiguration;
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.DashboardDefaultFilterControlConfiguration;
        /**
         * The configuration for the exclude period of the filter.
         */
        excludePeriodConfiguration?: outputs.quicksight.DashboardExcludePeriodConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The minimum granularity (period granularity) of the relative dates filter.
         */
        minimumGranularity?: enums.quicksight.DashboardTimeGranularity;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.DashboardFilterNullOption;
        /**
         * The parameter whose value should be used for the filter value.
         */
        parameterName?: string;
        /**
         * The range date type of the filter. Choose one of the options below:
         *
         * - `PREVIOUS`
         * - `THIS`
         * - `LAST`
         * - `NOW`
         * - `NEXT`
         */
        relativeDateType: enums.quicksight.DashboardRelativeDateType;
        /**
         * The date value of the filter.
         */
        relativeDateValue?: number;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity: enums.quicksight.DashboardTimeGranularity;
    }

    /**
     * <p>Permission for the resource.</p>
     */
    export interface DashboardResourcePermission {
        /**
         * <p>The IAM action to grant or revoke permissions on.</p>
         */
        actions: string[];
        /**
         * <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
         *             following:</p>
         *          <ul>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
         *                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
         *                     (This is less common.) </p>
         *             </li>
         *          </ul>
         */
        principal: string;
    }

    export interface DashboardRollingDateConfiguration {
        /**
         * The data set that is used in the rolling date configuration.
         */
        dataSetIdentifier?: string;
        /**
         * The expression of the rolling date configuration.
         */
        expression: string;
    }

    export interface DashboardRowAlternateColorOptions {
        /**
         * Determines the list of row alternate colors.
         */
        rowAlternateColors?: string[];
        /**
         * Determines the widget status.
         */
        status?: enums.quicksight.DashboardWidgetStatus;
        /**
         * The primary background color options for alternate rows.
         */
        usePrimaryBackgroundColor?: enums.quicksight.DashboardWidgetStatus;
    }

    export interface DashboardSameSheetTargetVisualConfiguration {
        /**
         * The options that choose the target visual in the same sheet.
         *
         * Valid values are defined as follows:
         *
         * - `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
         */
        targetVisualOptions?: enums.quicksight.DashboardTargetVisualOptions;
        /**
         * A list of the target visual IDs that are located in the same sheet of the analysis.
         */
        targetVisuals?: string[];
    }

    export interface DashboardSankeyDiagramAggregatedFieldWells {
        /**
         * The destination field wells of a sankey diagram.
         */
        destination?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The source field wells of a sankey diagram.
         */
        source?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The weight field wells of a sankey diagram.
         */
        weight?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardSankeyDiagramChartConfiguration {
        /**
         * The data label configuration of a sankey diagram.
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The field well configuration of a sankey diagram.
         */
        fieldWells?: outputs.quicksight.DashboardSankeyDiagramFieldWells;
        /**
         * The sort configuration of a sankey diagram.
         */
        sortConfiguration?: outputs.quicksight.DashboardSankeyDiagramSortConfiguration;
    }

    export interface DashboardSankeyDiagramFieldWells {
        /**
         * The field well configuration of a sankey diagram.
         */
        sankeyDiagramAggregatedFieldWells?: outputs.quicksight.DashboardSankeyDiagramAggregatedFieldWells;
    }

    export interface DashboardSankeyDiagramSortConfiguration {
        /**
         * The limit on the number of destination nodes that are displayed in a sankey diagram.
         */
        destinationItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The limit on the number of source nodes that are displayed in a sankey diagram.
         */
        sourceItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the weight fields.
         */
        weightSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardSankeyDiagramVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration of a sankey diagram.
         */
        chartConfiguration?: outputs.quicksight.DashboardSankeyDiagramChartConfiguration;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardScatterPlotCategoricallyAggregatedFieldWells {
        /**
         * The category field well of a scatter plot.
         */
        category?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The label field well of a scatter plot.
         */
        label?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The size field well of a scatter plot.
         */
        size?: outputs.quicksight.DashboardMeasureField[];
        /**
         * The x-axis field well of a scatter plot.
         *
         * The x-axis is aggregated by category.
         */
        xAxis?: outputs.quicksight.DashboardMeasureField[];
        /**
         * The y-axis field well of a scatter plot.
         *
         * The y-axis is aggregated by category.
         */
        yAxis?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardScatterPlotConfiguration {
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardScatterPlotFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The legend display setup of the visual.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        /**
         * The label display options (grid line, range, scale, and axis step) of the scatter plot's x-axis.
         */
        xAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of the scatter plot's x-axis.
         */
        xAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The label display options (grid line, range, scale, and axis step) of the scatter plot's y-axis.
         */
        yAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of the scatter plot's y-axis.
         */
        yAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
    }

    export interface DashboardScatterPlotFieldWells {
        /**
         * The aggregated field wells of a scatter plot. The x and y-axes of scatter plots with aggregated field wells are aggregated by category, label, or both.
         */
        scatterPlotCategoricallyAggregatedFieldWells?: outputs.quicksight.DashboardScatterPlotCategoricallyAggregatedFieldWells;
        /**
         * The unaggregated field wells of a scatter plot. The x and y-axes of these scatter plots are unaggregated.
         */
        scatterPlotUnaggregatedFieldWells?: outputs.quicksight.DashboardScatterPlotUnaggregatedFieldWells;
    }

    export interface DashboardScatterPlotUnaggregatedFieldWells {
        /**
         * The category field well of a scatter plot.
         */
        category?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The label field well of a scatter plot.
         */
        label?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The size field well of a scatter plot.
         */
        size?: outputs.quicksight.DashboardMeasureField[];
        /**
         * The x-axis field well of a scatter plot.
         *
         * The x-axis is a dimension field and cannot be aggregated.
         */
        xAxis?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The y-axis field well of a scatter plot.
         *
         * The y-axis is a dimension field and cannot be aggregated.
         */
        yAxis?: outputs.quicksight.DashboardDimensionField[];
    }

    export interface DashboardScatterPlotVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardScatterPlotConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardScrollBarOptions {
        /**
         * The visibility of the data zoom scroll bar.
         */
        visibility?: enums.quicksight.DashboardVisibility;
        /**
         * The visibility range for the data zoom scroll bar.
         */
        visibleRange?: outputs.quicksight.DashboardVisibleRangeOptions;
    }

    export interface DashboardSecondaryValueOptions {
        /**
         * Determines the visibility of the secondary value.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardSectionAfterPageBreak {
        /**
         * The option that enables or disables a page break at the end of a section.
         */
        status?: enums.quicksight.DashboardSectionPageBreakStatus;
    }

    export interface DashboardSectionBasedLayoutCanvasSizeOptions {
        /**
         * The options for a paper canvas of a section-based layout.
         */
        paperCanvasSizeOptions?: outputs.quicksight.DashboardSectionBasedLayoutPaperCanvasSizeOptions;
    }

    export interface DashboardSectionBasedLayoutConfiguration {
        /**
         * A list of body section configurations.
         */
        bodySections: outputs.quicksight.DashboardBodySectionConfiguration[];
        /**
         * The options for the canvas of a section-based layout.
         */
        canvasSizeOptions: outputs.quicksight.DashboardSectionBasedLayoutCanvasSizeOptions;
        /**
         * A list of footer section configurations.
         */
        footerSections: outputs.quicksight.DashboardHeaderFooterSectionConfiguration[];
        /**
         * A list of header section configurations.
         */
        headerSections: outputs.quicksight.DashboardHeaderFooterSectionConfiguration[];
    }

    export interface DashboardSectionBasedLayoutPaperCanvasSizeOptions {
        /**
         * Defines the spacing between the canvas content and the top, bottom, left, and right edges.
         */
        paperMargin?: outputs.quicksight.DashboardSpacing;
        /**
         * The paper orientation that is used to define canvas dimensions. Choose one of the following options:
         *
         * - PORTRAIT
         * - LANDSCAPE
         */
        paperOrientation?: enums.quicksight.DashboardPaperOrientation;
        /**
         * The paper size that is used to define canvas dimensions.
         */
        paperSize?: enums.quicksight.DashboardPaperSize;
    }

    export interface DashboardSectionLayoutConfiguration {
        /**
         * The free-form layout configuration of a section.
         */
        freeFormLayout: outputs.quicksight.DashboardFreeFormSectionLayoutConfiguration;
    }

    export interface DashboardSectionPageBreakConfiguration {
        /**
         * The configuration of a page break after a section.
         */
        after?: outputs.quicksight.DashboardSectionAfterPageBreak;
    }

    export interface DashboardSectionStyle {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        /**
         * The spacing between section content and its top, bottom, left, and right edges.
         *
         * There is no padding by default.
         */
        padding?: outputs.quicksight.DashboardSpacing;
    }

    export interface DashboardSelectedSheetsFilterScopeConfiguration {
        /**
         * The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
         */
        sheetVisualScopingConfigurations?: outputs.quicksight.DashboardSheetVisualScopingConfiguration[];
    }

    export interface DashboardSeriesItem {
        /**
         * The data field series item configuration of a line chart.
         */
        dataFieldSeriesItem?: outputs.quicksight.DashboardDataFieldSeriesItem;
        /**
         * The field series item configuration of a line chart.
         */
        fieldSeriesItem?: outputs.quicksight.DashboardFieldSeriesItem;
    }

    export interface DashboardSetParameterValueConfiguration {
        /**
         * The destination parameter name of the `SetParameterValueConfiguration` .
         */
        destinationParameterName: string;
        value: outputs.quicksight.DashboardDestinationParameterValueConfiguration;
    }

    export interface DashboardShapeConditionalFormat {
        /**
         * The conditional formatting for the shape background color of a filled map visual.
         */
        backgroundColor: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    /**
     * <p>A <i>sheet</i>, which is an object that contains a set of visuals that
     *             are viewed together on one page in Amazon QuickSight. Every analysis and dashboard
     *             contains at least one sheet. Each sheet contains at least one visualization widget, for
     *             example a chart, pivot table, or narrative insight. Sheets can be associated with other
     *             components, such as controls, filters, and so on.</p>
     */
    export interface DashboardSheet {
        /**
         * <p>The name of a sheet. This name is displayed on the sheet's tab in the Amazon QuickSight
         *             console.</p>
         */
        name?: string;
        /**
         * <p>The unique identifier associated with a sheet.</p>
         */
        sheetId?: string;
    }

    export interface DashboardSheetControlInfoIconLabelOptions {
        /**
         * The text content of info icon.
         */
        infoIconText?: string;
        /**
         * The visibility configuration of info icon label options.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardSheetControlLayout {
        /**
         * The configuration that determines the elements and canvas size options of sheet control.
         */
        configuration: outputs.quicksight.DashboardSheetControlLayoutConfiguration;
    }

    export interface DashboardSheetControlLayoutConfiguration {
        /**
         * The configuration that determines the elements and canvas size options of sheet control.
         */
        gridLayout?: outputs.quicksight.DashboardGridLayoutConfiguration;
    }

    /**
     * <p>Sheet controls option.</p>
     */
    export interface DashboardSheetControlsOption {
        /**
         * Visibility state.
         */
        visibilityState?: enums.quicksight.DashboardUiState;
    }

    export interface DashboardSheetDefinition {
        /**
         * The layout content type of the sheet. Choose one of the following options:
         *
         * - `PAGINATED` : Creates a sheet for a paginated report.
         * - `INTERACTIVE` : Creates a sheet for an interactive dashboard.
         */
        contentType?: enums.quicksight.DashboardSheetContentType;
        /**
         * A description of the sheet.
         */
        description?: string;
        /**
         * The list of filter controls that are on a sheet.
         *
         * For more information, see [Adding filter controls to analysis sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon QuickSight User Guide* .
         */
        filterControls?: outputs.quicksight.DashboardFilterControl[];
        /**
         * Layouts define how the components of a sheet are arranged.
         *
         * For more information, see [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon QuickSight User Guide* .
         */
        layouts?: outputs.quicksight.DashboardLayout[];
        /**
         * The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.
         */
        name?: string;
        /**
         * The list of parameter controls that are on a sheet.
         *
         * For more information, see [Using a Control with a Parameter in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the *Amazon QuickSight User Guide* .
         */
        parameterControls?: outputs.quicksight.DashboardParameterControl[];
        /**
         * The control layouts of the sheet.
         */
        sheetControlLayouts?: outputs.quicksight.DashboardSheetControlLayout[];
        /**
         * The unique identifier of a sheet.
         */
        sheetId: string;
        /**
         * The text boxes that are on a sheet.
         */
        textBoxes?: outputs.quicksight.DashboardSheetTextBox[];
        /**
         * The title of the sheet.
         */
        title?: string;
        /**
         * A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.
         */
        visuals?: outputs.quicksight.DashboardVisual[];
    }

    export interface DashboardSheetElementConfigurationOverrides {
        /**
         * Determines whether or not the overrides are visible. Choose one of the following options:
         *
         * - `VISIBLE`
         * - `HIDDEN`
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardSheetElementRenderingRule {
        /**
         * The override configuration of the rendering rules of a sheet.
         */
        configurationOverrides: outputs.quicksight.DashboardSheetElementConfigurationOverrides;
        /**
         * The expression of the rendering rules of a sheet.
         */
        expression: string;
    }

    /**
     * <p>The sheet layout maximization options of a dashbaord.</p>
     */
    export interface DashboardSheetLayoutElementMaximizationOption {
        /**
         * The status of the sheet layout maximization options of a dashbaord.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardSheetTextBox {
        /**
         * The content that is displayed in the text box.
         */
        content?: string;
        /**
         * The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.
         */
        sheetTextBoxId: string;
    }

    export interface DashboardSheetVisualScopingConfiguration {
        /**
         * The scope of the applied entities. Choose one of the following options:
         *
         * - `ALL_VISUALS`
         * - `SELECTED_VISUALS`
         */
        scope: enums.quicksight.DashboardFilterVisualScope;
        /**
         * The selected sheet that the filter is applied to.
         */
        sheetId: string;
        /**
         * The selected visuals that the filter is applied to.
         */
        visualIds?: string[];
    }

    export interface DashboardShortFormatText {
        /**
         * Plain text format.
         */
        plainText?: string;
        /**
         * Rich text. Examples of rich text include bold, underline, and italics.
         */
        richText?: string;
    }

    export interface DashboardSimpleClusterMarker {
        /**
         * The color of the simple cluster marker.
         */
        color?: string;
    }

    export interface DashboardSliderControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardSmallMultiplesAxisProperties {
        /**
         * Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
         */
        placement?: enums.quicksight.DashboardSmallMultiplesAxisPlacement;
        /**
         * Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
         */
        scale?: enums.quicksight.DashboardSmallMultiplesAxisScale;
    }

    export interface DashboardSmallMultiplesOptions {
        /**
         * Sets the maximum number of visible columns to display in the grid of small multiples panels.
         *
         * The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
         */
        maxVisibleColumns?: number;
        /**
         * Sets the maximum number of visible rows to display in the grid of small multiples panels.
         *
         * The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
         */
        maxVisibleRows?: number;
        /**
         * Configures the display options for each small multiples panel.
         */
        panelConfiguration?: outputs.quicksight.DashboardPanelConfiguration;
        /**
         * The properties of a small multiples X axis.
         */
        xAxis?: outputs.quicksight.DashboardSmallMultiplesAxisProperties;
        /**
         * The properties of a small multiples Y axis.
         */
        yAxis?: outputs.quicksight.DashboardSmallMultiplesAxisProperties;
    }

    /**
     * <p>Dashboard source entity.</p>
     */
    export interface DashboardSourceEntity {
        /**
         * Source template.
         */
        sourceTemplate?: outputs.quicksight.DashboardSourceTemplate;
    }

    /**
     * <p>Dashboard source template.</p>
     */
    export interface DashboardSourceTemplate {
        /**
         * <p>The Amazon Resource Name (ARN) of the resource.</p>
         */
        arn: string;
        /**
         * <p>Dataset references.</p>
         */
        dataSetReferences: outputs.quicksight.DashboardDataSetReference[];
    }

    export interface DashboardSpacing {
        /**
         * String based length that is composed of value and unit
         */
        bottom?: string;
        /**
         * String based length that is composed of value and unit
         */
        left?: string;
        /**
         * String based length that is composed of value and unit
         */
        right?: string;
        /**
         * String based length that is composed of value and unit
         */
        top?: string;
    }

    export interface DashboardStringDefaultValues {
        /**
         * The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.DashboardDynamicDefaultValue;
        /**
         * The static values of the `DecimalDefaultValues` .
         */
        staticValues?: string[];
    }

    export interface DashboardStringFormatConfiguration {
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.DashboardNullValueFormatConfiguration;
        /**
         * The formatting configuration for numeric strings.
         */
        numericFormatConfiguration?: outputs.quicksight.DashboardNumericFormatConfiguration;
    }

    /**
     * <p>A string parameter.</p>
     */
    export interface DashboardStringParameter {
        /**
         * <p>A display name for a string parameter.</p>
         */
        name: string;
        /**
         * <p>The values of a string parameter.</p>
         */
        values: string[];
    }

    export interface DashboardStringParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.DashboardStringDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.DashboardMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The value type determines whether the parameter is a single-value or multi-value parameter.
         */
        parameterValueType: enums.quicksight.DashboardParameterValueType;
        /**
         * The configuration that defines the default value of a `String` parameter when a value has not been set.
         */
        valueWhenUnset?: outputs.quicksight.DashboardStringValueWhenUnsetConfiguration;
    }

    export interface DashboardStringValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: string;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.DashboardValueWhenUnsetOption;
    }

    export interface DashboardSubtotalOptions {
        /**
         * The custom label string for the subtotal cells.
         */
        customLabel?: string;
        /**
         * The field level (all, custom, last) for the subtotal cells.
         */
        fieldLevel?: enums.quicksight.DashboardPivotTableSubtotalLevel;
        /**
         * The optional configuration of subtotal cells.
         */
        fieldLevelOptions?: outputs.quicksight.DashboardPivotTableFieldSubtotalOptions[];
        /**
         * The cell styling options for the subtotals of header cells.
         */
        metricHeaderCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The style targets options for subtotals.
         */
        styleTargets?: outputs.quicksight.DashboardTableStyleTarget[];
        /**
         * The cell styling options for the subtotal cells.
         */
        totalCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The visibility configuration for the subtotal cells.
         */
        totalsVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The cell styling options for the subtotals of value cells.
         */
        valueCellStyle?: outputs.quicksight.DashboardTableCellStyle;
    }

    export interface DashboardTableAggregatedFieldWells {
        /**
         * The group by field well for a pivot table. Values are grouped by group by fields.
         */
        groupBy?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The values field well for a pivot table. Values are aggregated based on group by fields.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardTableBorderOptions {
        /**
         * The color of a table border.
         */
        color?: string;
        /**
         * The style (none, solid) of a table border.
         */
        style?: enums.quicksight.DashboardTableBorderStyle;
        /**
         * The thickness of a table border.
         */
        thickness?: number;
    }

    export interface DashboardTableCellConditionalFormatting {
        /**
         * The field ID of the cell for conditional formatting.
         */
        fieldId: string;
        /**
         * The text format of the cell for conditional formatting.
         */
        textFormat?: outputs.quicksight.DashboardTextConditionalFormat;
    }

    export interface DashboardTableCellImageSizingConfiguration {
        /**
         * The cell scaling configuration of the sizing options for the table image configuration.
         */
        tableCellImageScalingConfiguration?: enums.quicksight.DashboardTableCellImageScalingConfiguration;
    }

    export interface DashboardTableCellStyle {
        /**
         * The background color for the table cells.
         */
        backgroundColor?: string;
        /**
         * The borders for the table cells.
         */
        border?: outputs.quicksight.DashboardGlobalTableBorderOptions;
        /**
         * The font configuration of the table cells.
         */
        fontConfiguration?: outputs.quicksight.DashboardFontConfiguration;
        /**
         * The height color for the table cells.
         */
        height?: number;
        /**
         * The horizontal text alignment (left, center, right, auto) for the table cells.
         */
        horizontalTextAlignment?: enums.quicksight.DashboardHorizontalTextAlignment;
        /**
         * The text wrap (none, wrap) for the table cells.
         */
        textWrap?: enums.quicksight.DashboardTextWrap;
        /**
         * The vertical text alignment (top, middle, bottom) for the table cells.
         */
        verticalTextAlignment?: enums.quicksight.DashboardVerticalTextAlignment;
        /**
         * The visibility of the table cells.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTableConditionalFormatting {
        /**
         * Conditional formatting options for a `PivotTableVisual` .
         */
        conditionalFormattingOptions?: outputs.quicksight.DashboardTableConditionalFormattingOption[];
    }

    export interface DashboardTableConditionalFormattingOption {
        /**
         * The cell conditional formatting option for a table.
         */
        cell?: outputs.quicksight.DashboardTableCellConditionalFormatting;
        /**
         * The row conditional formatting option for a table.
         */
        row?: outputs.quicksight.DashboardTableRowConditionalFormatting;
    }

    export interface DashboardTableConfiguration {
        /**
         * The field options for a table visual.
         */
        fieldOptions?: outputs.quicksight.DashboardTableFieldOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardTableFieldWells;
        /**
         * The paginated report options for a table visual.
         */
        paginatedReportOptions?: outputs.quicksight.DashboardTablePaginatedReportOptions;
        /**
         * The sort configuration for a `TableVisual` .
         */
        sortConfiguration?: outputs.quicksight.DashboardTableSortConfiguration;
        /**
         * A collection of inline visualizations to display within a chart.
         */
        tableInlineVisualizations?: outputs.quicksight.DashboardTableInlineVisualization[];
        /**
         * The table options for a table visual.
         */
        tableOptions?: outputs.quicksight.DashboardTableOptions;
        /**
         * The total options for a table visual.
         */
        totalOptions?: outputs.quicksight.DashboardTotalOptions;
    }

    export interface DashboardTableFieldCustomIconContent {
        /**
         * The icon set type (link) of the custom icon content for table URL link content.
         */
        icon?: enums.quicksight.DashboardTableFieldIconSetType;
    }

    export interface DashboardTableFieldCustomTextContent {
        /**
         * The font configuration of the custom text content for the table URL link content.
         */
        fontConfiguration: outputs.quicksight.DashboardFontConfiguration;
        /**
         * The string value of the custom text content for the table URL link content.
         */
        value?: string;
    }

    export interface DashboardTableFieldImageConfiguration {
        /**
         * The sizing options for the table image configuration.
         */
        sizingOptions?: outputs.quicksight.DashboardTableCellImageSizingConfiguration;
    }

    export interface DashboardTableFieldLinkConfiguration {
        /**
         * The URL content (text, icon) for the table link configuration.
         */
        content: outputs.quicksight.DashboardTableFieldLinkContentConfiguration;
        /**
         * The URL target (new tab, new window, same tab) for the table link configuration.
         */
        target: enums.quicksight.DashboardUrlTargetConfiguration;
    }

    export interface DashboardTableFieldLinkContentConfiguration {
        /**
         * The custom icon content for the table link content configuration.
         */
        customIconContent?: outputs.quicksight.DashboardTableFieldCustomIconContent;
        /**
         * The custom text content (value, font configuration) for the table link content configuration.
         */
        customTextContent?: outputs.quicksight.DashboardTableFieldCustomTextContent;
    }

    export interface DashboardTableFieldOption {
        /**
         * The custom label for a table field.
         */
        customLabel?: string;
        /**
         * The field ID for a table field.
         */
        fieldId: string;
        /**
         * The URL configuration for a table field.
         */
        urlStyling?: outputs.quicksight.DashboardTableFieldUrlConfiguration;
        /**
         * The visibility of a table field.
         */
        visibility?: enums.quicksight.DashboardVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface DashboardTableFieldOptions {
        /**
         * The order of the field IDs that are configured as field options for a table visual.
         */
        order?: string[];
        /**
         * The settings for the pinned columns of a table visual.
         */
        pinnedFieldOptions?: outputs.quicksight.DashboardTablePinnedFieldOptions;
        /**
         * The field options to be configured to a table.
         */
        selectedFieldOptions?: outputs.quicksight.DashboardTableFieldOption[];
    }

    export interface DashboardTableFieldUrlConfiguration {
        /**
         * The image configuration of a table field URL.
         */
        imageConfiguration?: outputs.quicksight.DashboardTableFieldImageConfiguration;
        /**
         * The link configuration of a table field URL.
         */
        linkConfiguration?: outputs.quicksight.DashboardTableFieldLinkConfiguration;
    }

    export interface DashboardTableFieldWells {
        /**
         * The aggregated field well for the table.
         */
        tableAggregatedFieldWells?: outputs.quicksight.DashboardTableAggregatedFieldWells;
        /**
         * The unaggregated field well for the table.
         */
        tableUnaggregatedFieldWells?: outputs.quicksight.DashboardTableUnaggregatedFieldWells;
    }

    export interface DashboardTableInlineVisualization {
        /**
         * The configuration of the inline visualization of the data bars within a chart.
         */
        dataBars?: outputs.quicksight.DashboardDataBarsOptions;
    }

    export interface DashboardTableOptions {
        /**
         * The table cell style of table cells.
         */
        cellStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The table cell style of a table header.
         */
        headerStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The orientation (vertical, horizontal) for a table.
         */
        orientation?: enums.quicksight.DashboardTableOrientation;
        /**
         * The row alternate color options (widget status, row alternate colors) for a table.
         */
        rowAlternateColorOptions?: outputs.quicksight.DashboardRowAlternateColorOptions;
    }

    export interface DashboardTablePaginatedReportOptions {
        /**
         * The visibility of repeating header rows on each page.
         */
        overflowColumnHeaderVisibility?: enums.quicksight.DashboardVisibility;
        /**
         * The visibility of printing table overflow across pages.
         */
        verticalOverflowVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTablePinnedFieldOptions {
        /**
         * A list of columns to be pinned to the left of a table visual.
         */
        pinnedLeftFields?: string[];
    }

    export interface DashboardTableRowConditionalFormatting {
        /**
         * The conditional formatting color (solid, gradient) of the background for a table row.
         */
        backgroundColor?: outputs.quicksight.DashboardConditionalFormattingColor;
        /**
         * The conditional formatting color (solid, gradient) of the text for a table row.
         */
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardTableSideBorderOptions {
        /**
         * The table border options of the bottom border.
         */
        bottom?: outputs.quicksight.DashboardTableBorderOptions;
        /**
         * The table border options of the inner horizontal border.
         */
        innerHorizontal?: outputs.quicksight.DashboardTableBorderOptions;
        /**
         * The table border options of the inner vertical border.
         */
        innerVertical?: outputs.quicksight.DashboardTableBorderOptions;
        /**
         * The table border options of the left border.
         */
        left?: outputs.quicksight.DashboardTableBorderOptions;
        /**
         * The table border options of the right border.
         */
        right?: outputs.quicksight.DashboardTableBorderOptions;
        /**
         * The table border options of the top border.
         */
        top?: outputs.quicksight.DashboardTableBorderOptions;
    }

    export interface DashboardTableSortConfiguration {
        /**
         * The pagination configuration (page size, page number) for the table.
         */
        paginationConfiguration?: outputs.quicksight.DashboardPaginationConfiguration;
        /**
         * The field sort options for rows in the table.
         */
        rowSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardTableStyleTarget {
        /**
         * The cell type of the table style target.
         */
        cellType: enums.quicksight.DashboardStyledCellType;
    }

    export interface DashboardTableUnaggregatedFieldWells {
        /**
         * The values field well for a pivot table. Values are unaggregated for an unaggregated table.
         */
        values?: outputs.quicksight.DashboardUnaggregatedField[];
    }

    export interface DashboardTableVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardTableConfiguration;
        /**
         * The conditional formatting for a `PivotTableVisual` .
         */
        conditionalFormatting?: outputs.quicksight.DashboardTableConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface DashboardTextAreaControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the placeholder options in a text area control.
         */
        placeholderOptions?: outputs.quicksight.DashboardTextControlPlaceholderOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardTextConditionalFormat {
        /**
         * The conditional formatting for the text background color.
         */
        backgroundColor?: outputs.quicksight.DashboardConditionalFormattingColor;
        /**
         * The conditional formatting for the icon.
         */
        icon?: outputs.quicksight.DashboardConditionalFormattingIcon;
        /**
         * The conditional formatting for the text color.
         */
        textColor?: outputs.quicksight.DashboardConditionalFormattingColor;
    }

    export interface DashboardTextControlPlaceholderOptions {
        /**
         * The visibility configuration of the placeholder options in a text control.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTextFieldControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.DashboardSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the placeholder options in a text field control.
         */
        placeholderOptions?: outputs.quicksight.DashboardTextControlPlaceholderOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.DashboardLabelOptions;
    }

    export interface DashboardThousandSeparatorOptions {
        /**
         * Determines the thousands separator symbol.
         */
        symbol?: enums.quicksight.DashboardNumericSeparatorSymbol;
        /**
         * Determines the visibility of the thousands separator.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTimeBasedForecastProperties {
        /**
         * The lower boundary setup of a forecast computation.
         */
        lowerBoundary?: number;
        /**
         * The periods backward setup of a forecast computation.
         */
        periodsBackward?: number;
        /**
         * The periods forward setup of a forecast computation.
         */
        periodsForward?: number;
        /**
         * The prediction interval setup of a forecast computation.
         */
        predictionInterval?: number;
        /**
         * The seasonality setup of a forecast computation. Choose one of the following options:
         *
         * - `NULL` : The input is set to `NULL` .
         * - `NON_NULL` : The input is set to a custom value.
         */
        seasonality?: number;
        /**
         * The upper boundary setup of a forecast computation.
         */
        upperBoundary?: number;
    }

    export interface DashboardTimeEqualityFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.DashboardDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The parameter whose value should be used for the filter value.
         *
         * This field is mutually exclusive to `Value` and `RollingDate` .
         */
        parameterName?: string;
        /**
         * The rolling date input for the `TimeEquality` filter.
         *
         * This field is mutually exclusive to `Value` and `ParameterName` .
         */
        rollingDate?: outputs.quicksight.DashboardRollingDateConfiguration;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
        /**
         * The value of a `TimeEquality` filter.
         *
         * This field is mutually exclusive to `RollingDate` and `ParameterName` .
         */
        value?: string;
    }

    export interface DashboardTimeRangeDrillDownFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The maximum value for the filter value range.
         */
        rangeMaximum: string;
        /**
         * The minimum value for the filter value range.
         */
        rangeMinimum: string;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity: enums.quicksight.DashboardTimeGranularity;
    }

    export interface DashboardTimeRangeFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.DashboardDefaultFilterControlConfiguration;
        /**
         * The exclude period of the time range filter.
         */
        excludePeriodConfiguration?: outputs.quicksight.DashboardExcludePeriodConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * Determines whether the maximum value in the filter value range should be included in the filtered results.
         */
        includeMaximum?: boolean;
        /**
         * Determines whether the minimum value in the filter value range should be included in the filtered results.
         */
        includeMinimum?: boolean;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.DashboardFilterNullOption;
        /**
         * The maximum value for the filter value range.
         */
        rangeMaximumValue?: outputs.quicksight.DashboardTimeRangeFilterValue;
        /**
         * The minimum value for the filter value range.
         */
        rangeMinimumValue?: outputs.quicksight.DashboardTimeRangeFilterValue;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
    }

    export interface DashboardTimeRangeFilterValue {
        /**
         * The parameter type input value.
         */
        parameter?: string;
        /**
         * The rolling date input value.
         */
        rollingDate?: outputs.quicksight.DashboardRollingDateConfiguration;
        /**
         * The static input value.
         */
        staticValue?: string;
    }

    export interface DashboardTooltipItem {
        /**
         * The tooltip item for the columns that are not part of a field well.
         */
        columnTooltipItem?: outputs.quicksight.DashboardColumnTooltipItem;
        /**
         * The tooltip item for the fields.
         */
        fieldTooltipItem?: outputs.quicksight.DashboardFieldTooltipItem;
    }

    export interface DashboardTooltipOptions {
        /**
         * The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
         */
        fieldBasedTooltip?: outputs.quicksight.DashboardFieldBasedTooltip;
        /**
         * The selected type for the tooltip. Choose one of the following options:
         *
         * - `BASIC` : A basic tooltip.
         * - `DETAILED` : A detailed tooltip.
         */
        selectedTooltipType?: enums.quicksight.DashboardSelectedTooltipType;
        /**
         * Determines whether or not the tooltip is visible.
         */
        tooltipVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTopBottomFilter {
        /**
         * The aggregation and sort configuration of the top bottom filter.
         */
        aggregationSortConfigurations: outputs.quicksight.DashboardAggregationSortConfiguration[];
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.DashboardDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The number of items to include in the top bottom filter results.
         */
        limit?: number;
        /**
         * The parameter whose value should be used for the filter value.
         */
        parameterName?: string;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.DashboardTimeGranularity;
    }

    export interface DashboardTopBottomMoversComputation {
        /**
         * The category field that is used in a computation.
         */
        category?: outputs.quicksight.DashboardDimensionField;
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The mover size setup of the top and bottom movers computation.
         */
        moverSize?: number;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The sort order setup of the top and bottom movers computation.
         */
        sortOrder?: enums.quicksight.DashboardTopBottomSortOrder;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.DashboardDimensionField;
        /**
         * The computation type. Choose from the following options:
         *
         * - TOP: Top movers computation.
         * - BOTTOM: Bottom movers computation.
         */
        type: enums.quicksight.DashboardTopBottomComputationType;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardTopBottomRankedComputation {
        /**
         * The category field that is used in a computation.
         */
        category?: outputs.quicksight.DashboardDimensionField;
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The result size of a top and bottom ranked computation.
         */
        resultSize?: number;
        /**
         * The computation type. Choose one of the following options:
         *
         * - TOP: A top ranked computation.
         * - BOTTOM: A bottom ranked computation.
         */
        type: enums.quicksight.DashboardTopBottomComputationType;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardTotalAggregationComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.DashboardMeasureField;
    }

    export interface DashboardTotalAggregationFunction {
        /**
         * A built in aggregation function for total values.
         */
        simpleTotalAggregationFunction?: enums.quicksight.DashboardSimpleTotalAggregationFunction;
    }

    export interface DashboardTotalAggregationOption {
        /**
         * The field id that's associated with the total aggregation option.
         */
        fieldId: string;
        /**
         * The total aggregation function that you want to set for a specified field id.
         */
        totalAggregationFunction: outputs.quicksight.DashboardTotalAggregationFunction;
    }

    export interface DashboardTotalOptions {
        /**
         * The custom label string for the total cells.
         */
        customLabel?: string;
        /**
         * The placement (start, end) for the total cells.
         */
        placement?: enums.quicksight.DashboardTableTotalsPlacement;
        /**
         * The scroll status (pinned, scrolled) for the total cells.
         */
        scrollStatus?: enums.quicksight.DashboardTableTotalsScrollStatus;
        /**
         * The total aggregation settings for each value field.
         */
        totalAggregationOptions?: outputs.quicksight.DashboardTotalAggregationOption[];
        /**
         * Cell styling options for the total cells.
         */
        totalCellStyle?: outputs.quicksight.DashboardTableCellStyle;
        /**
         * The visibility configuration for the total cells.
         */
        totalsVisibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardTreeMapAggregatedFieldWells {
        /**
         * The color field well of a tree map. Values are grouped by aggregations based on group by fields.
         */
        colors?: outputs.quicksight.DashboardMeasureField[];
        /**
         * The group by field well of a tree map. Values are grouped based on group by fields.
         */
        groups?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The size field well of a tree map. Values are aggregated based on group by fields.
         */
        sizes?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardTreeMapConfiguration {
        /**
         * The label options (label text, label visibility) for the colors displayed in a tree map.
         */
        colorLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The color options (gradient color, point of divergence) of a tree map.
         */
        colorScale?: outputs.quicksight.DashboardColorScale;
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardTreeMapFieldWells;
        /**
         * The label options (label text, label visibility) of the groups that are displayed in a tree map.
         */
        groupLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The label options (label text, label visibility) of the sizes that are displayed in a tree map.
         */
        sizeLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The sort configuration of a tree map.
         */
        sortConfiguration?: outputs.quicksight.DashboardTreeMapSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.DashboardTooltipOptions;
    }

    export interface DashboardTreeMapFieldWells {
        /**
         * The aggregated field wells of a tree map.
         */
        treeMapAggregatedFieldWells?: outputs.quicksight.DashboardTreeMapAggregatedFieldWells;
    }

    export interface DashboardTreeMapSortConfiguration {
        /**
         * The limit on the number of groups that are displayed.
         */
        treeMapGroupItemsLimitConfiguration?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of group by fields.
         */
        treeMapSort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardTreeMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardTreeMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface DashboardTrendArrowOptions {
        /**
         * The visibility of the trend arrows.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardUnaggregatedField {
        /**
         * The column that is used in the `UnaggregatedField` .
         */
        column: outputs.quicksight.DashboardColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.DashboardFormatConfiguration;
    }

    export interface DashboardUniqueValuesComputation {
        /**
         * The category field that is used in a computation.
         */
        category?: outputs.quicksight.DashboardDimensionField;
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
    }

    /**
     * <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
     */
    export interface DashboardValidationStrategy {
        /**
         * The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
         */
        mode: enums.quicksight.DashboardValidationStrategyMode;
    }

    /**
     * <p>Dashboard version.</p>
     */
    export interface DashboardVersion {
        /**
         * <p>The Amazon Resource Name (ARN) of the resource.</p>
         */
        arn?: string;
        /**
         * <p>The time that this dashboard version was created.</p>
         */
        createdTime?: string;
        /**
         * <p>The Amazon Resource Numbers (ARNs) for the datasets that are associated with this
         *             version of the dashboard.</p>
         */
        dataSetArns?: string[];
        /**
         * <p>Description.</p>
         */
        description?: string;
        /**
         * <p>Errors associated with this dashboard version.</p>
         */
        errors?: outputs.quicksight.DashboardError[];
        /**
         * <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
         */
        sheets?: outputs.quicksight.DashboardSheet[];
        /**
         * <p>Source entity ARN.</p>
         */
        sourceEntityArn?: string;
        /**
         * The HTTP status of the request.
         */
        status?: enums.quicksight.DashboardResourceStatus;
        /**
         * <p>The ARN of the theme associated with a version of the dashboard.</p>
         */
        themeArn?: string;
        /**
         * <p>Version number for this version of the dashboard.</p>
         */
        versionNumber?: number;
    }

    export interface DashboardVersionDefinition {
        analysisDefaults?: outputs.quicksight.DashboardAnalysisDefaults;
        /**
         * An array of calculated field definitions for the dashboard.
         */
        calculatedFields?: outputs.quicksight.DashboardCalculatedField[];
        /**
         * An array of dashboard-level column configurations. Column configurations are used to set the default formatting for a column that is used throughout a dashboard.
         */
        columnConfigurations?: outputs.quicksight.DashboardColumnConfiguration[];
        /**
         * An array of dataset identifier declarations. With this mapping,you can use dataset identifiers instead of dataset Amazon Resource Names (ARNs) throughout the dashboard's sub-structures.
         */
        dataSetIdentifierDeclarations: outputs.quicksight.DashboardDataSetIdentifierDeclaration[];
        /**
         * The filter definitions for a dashboard.
         *
         * For more information, see [Filtering Data in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/adding-a-filter.html) in the *Amazon QuickSight User Guide* .
         */
        filterGroups?: outputs.quicksight.DashboardFilterGroup[];
        /**
         * An array of option definitions for a dashboard.
         */
        options?: outputs.quicksight.DashboardAssetOptions;
        /**
         * The parameter declarations for a dashboard. Parameters are named variables that can transfer a value for use by an action or an object.
         *
         * For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
         */
        parameterDeclarations?: outputs.quicksight.DashboardParameterDeclaration[];
        /**
         * An array of sheet definitions for a dashboard.
         */
        sheets?: outputs.quicksight.DashboardSheetDefinition[];
    }

    export interface DashboardVisibleRangeOptions {
        /**
         * The percent range in the visible range.
         */
        percentRange?: outputs.quicksight.DashboardPercentVisibleRange;
    }

    export interface DashboardVisual {
        /**
         * A bar chart.
         *
         * For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
         */
        barChartVisual?: outputs.quicksight.DashboardBarChartVisual;
        /**
         * A box plot.
         *
         * For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
         */
        boxPlotVisual?: outputs.quicksight.DashboardBoxPlotVisual;
        /**
         * A combo chart.
         *
         * For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
         */
        comboChartVisual?: outputs.quicksight.DashboardComboChartVisual;
        /**
         * A visual that contains custom content.
         *
         * For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
         */
        customContentVisual?: outputs.quicksight.DashboardCustomContentVisual;
        /**
         * An empty visual.
         */
        emptyVisual?: outputs.quicksight.DashboardEmptyVisual;
        /**
         * A filled map.
         *
         * For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
         */
        filledMapVisual?: outputs.quicksight.DashboardFilledMapVisual;
        /**
         * A funnel chart.
         *
         * For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
         */
        funnelChartVisual?: outputs.quicksight.DashboardFunnelChartVisual;
        /**
         * A gauge chart.
         *
         * For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
         */
        gaugeChartVisual?: outputs.quicksight.DashboardGaugeChartVisual;
        /**
         * A geospatial map or a points on map visual.
         *
         * For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
         */
        geospatialMapVisual?: outputs.quicksight.DashboardGeospatialMapVisual;
        /**
         * A heat map.
         *
         * For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
         */
        heatMapVisual?: outputs.quicksight.DashboardHeatMapVisual;
        /**
         * A histogram.
         *
         * For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
         */
        histogramVisual?: outputs.quicksight.DashboardHistogramVisual;
        /**
         * An insight visual.
         *
         * For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
         */
        insightVisual?: outputs.quicksight.DashboardInsightVisual;
        /**
         * A key performance indicator (KPI).
         *
         * For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
         */
        kpiVisual?: outputs.quicksight.DashboardKpiVisual;
        /**
         * A line chart.
         *
         * For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
         */
        lineChartVisual?: outputs.quicksight.DashboardLineChartVisual;
        /**
         * A pie or donut chart.
         *
         * For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
         */
        pieChartVisual?: outputs.quicksight.DashboardPieChartVisual;
        /**
         * A pivot table.
         *
         * For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
         */
        pivotTableVisual?: outputs.quicksight.DashboardPivotTableVisual;
        /**
         * A radar chart visual.
         *
         * For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
         */
        radarChartVisual?: outputs.quicksight.DashboardRadarChartVisual;
        /**
         * A sankey diagram.
         *
         * For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
         */
        sankeyDiagramVisual?: outputs.quicksight.DashboardSankeyDiagramVisual;
        /**
         * A scatter plot.
         *
         * For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
         */
        scatterPlotVisual?: outputs.quicksight.DashboardScatterPlotVisual;
        /**
         * A table visual.
         *
         * For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
         */
        tableVisual?: outputs.quicksight.DashboardTableVisual;
        /**
         * A tree map.
         *
         * For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
         */
        treeMapVisual?: outputs.quicksight.DashboardTreeMapVisual;
        /**
         * A waterfall chart.
         *
         * For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
         */
        waterfallVisual?: outputs.quicksight.DashboardWaterfallVisual;
        /**
         * A word cloud.
         *
         * For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
         */
        wordCloudVisual?: outputs.quicksight.DashboardWordCloudVisual;
    }

    export interface DashboardVisualAxisSortOption {
        /**
         * The availaiblity status of a visual's axis sort options.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardVisualCustomAction {
        /**
         * A list of `VisualCustomActionOperations` .
         *
         * This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
         */
        actionOperations: outputs.quicksight.DashboardVisualCustomActionOperation[];
        /**
         * The ID of the `VisualCustomAction` .
         */
        customActionId: string;
        /**
         * The name of the `VisualCustomAction` .
         */
        name: string;
        /**
         * The status of the `VisualCustomAction` .
         */
        status?: enums.quicksight.DashboardWidgetStatus;
        /**
         * The trigger of the `VisualCustomAction` .
         *
         * Valid values are defined as follows:
         *
         * - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
         * - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
         */
        trigger: enums.quicksight.DashboardVisualCustomActionTrigger;
    }

    export interface DashboardVisualCustomActionOperation {
        /**
         * The filter operation that filters data included in a visual or in an entire sheet.
         */
        filterOperation?: outputs.quicksight.DashboardCustomActionFilterOperation;
        /**
         * The navigation operation that navigates between different sheets in the same analysis.
         */
        navigationOperation?: outputs.quicksight.DashboardCustomActionNavigationOperation;
        /**
         * The set parameter operation that sets parameters in custom action.
         */
        setParametersOperation?: outputs.quicksight.DashboardCustomActionSetParametersOperation;
        /**
         * The URL operation that opens a link to another webpage.
         */
        urlOperation?: outputs.quicksight.DashboardCustomActionUrlOperation;
    }

    export interface DashboardVisualMenuOption {
        /**
         * The availaiblity status of a visual's menu options.
         */
        availabilityStatus?: enums.quicksight.DashboardBehavior;
    }

    export interface DashboardVisualPalette {
        /**
         * The chart color options for the visual palette.
         */
        chartColor?: string;
        /**
         * The color map options for the visual palette.
         */
        colorMap?: outputs.quicksight.DashboardDataPathColor[];
    }

    /**
     * <p>The visual publish options of a visual in a dashboard</p>
     */
    export interface DashboardVisualPublishOptions {
        /**
         * Determines if hidden fields are included in an exported dashboard.
         */
        exportHiddenFieldsOption?: outputs.quicksight.DashboardExportHiddenFieldsOption;
    }

    export interface DashboardVisualSubtitleLabelOptions {
        /**
         * The long text format of the subtitle label, such as plain text or rich text.
         */
        formatText?: outputs.quicksight.DashboardLongFormatText;
        /**
         * The visibility of the subtitle label.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardVisualTitleLabelOptions {
        /**
         * The short text format of the title label, such as plain text or rich text.
         */
        formatText?: outputs.quicksight.DashboardShortFormatText;
        /**
         * The visibility of the title label.
         */
        visibility?: enums.quicksight.DashboardVisibility;
    }

    export interface DashboardWaterfallChartAggregatedFieldWells {
        /**
         * The breakdown field wells of a waterfall visual.
         */
        breakdowns?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The category field wells of a waterfall visual.
         */
        categories?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The value field wells of a waterfall visual.
         */
        values?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardWaterfallChartColorConfiguration {
        /**
         * The color configuration for individual groups within a waterfall visual.
         */
        groupColorConfiguration?: outputs.quicksight.DashboardWaterfallChartGroupColorConfiguration;
    }

    export interface DashboardWaterfallChartConfiguration {
        /**
         * The options that determine the presentation of the category axis.
         */
        categoryAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The options that determine the presentation of the category axis label.
         */
        categoryAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The color configuration of a waterfall visual.
         */
        colorConfiguration?: outputs.quicksight.DashboardWaterfallChartColorConfiguration;
        /**
         * The data label configuration of a waterfall visual.
         */
        dataLabels?: outputs.quicksight.DashboardDataLabelOptions;
        /**
         * The field well configuration of a waterfall visual.
         */
        fieldWells?: outputs.quicksight.DashboardWaterfallChartFieldWells;
        /**
         * The legend configuration of a waterfall visual.
         */
        legend?: outputs.quicksight.DashboardLegendOptions;
        /**
         * The options that determine the presentation of the y-axis.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.DashboardAxisDisplayOptions;
        /**
         * The options that determine the presentation of the y-axis label.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The sort configuration of a waterfall visual.
         */
        sortConfiguration?: outputs.quicksight.DashboardWaterfallChartSortConfiguration;
        /**
         * The visual palette configuration of a waterfall visual.
         */
        visualPalette?: outputs.quicksight.DashboardVisualPalette;
        /**
         * The options that determine the presentation of a waterfall visual.
         */
        waterfallChartOptions?: outputs.quicksight.DashboardWaterfallChartOptions;
    }

    export interface DashboardWaterfallChartFieldWells {
        /**
         * The field well configuration of a waterfall visual.
         */
        waterfallChartAggregatedFieldWells?: outputs.quicksight.DashboardWaterfallChartAggregatedFieldWells;
    }

    export interface DashboardWaterfallChartGroupColorConfiguration {
        /**
         * Defines the color for the negative bars of a waterfall chart.
         */
        negativeBarColor?: string;
        /**
         * Defines the color for the positive bars of a waterfall chart.
         */
        positiveBarColor?: string;
        /**
         * Defines the color for the total bars of a waterfall chart.
         */
        totalBarColor?: string;
    }

    export interface DashboardWaterfallChartOptions {
        /**
         * This option determines the total bar label of a waterfall visual.
         */
        totalBarLabel?: string;
    }

    export interface DashboardWaterfallChartSortConfiguration {
        /**
         * The limit on the number of bar groups that are displayed.
         */
        breakdownItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardWaterfallVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration for a waterfall visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardWaterfallChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface DashboardWhatIfPointScenario {
        /**
         * The date that you need the forecast results for.
         */
        date: string;
        /**
         * The target value that you want to meet for the provided date.
         */
        value: number;
    }

    export interface DashboardWhatIfRangeScenario {
        /**
         * The end date in the date range that you need the forecast results for.
         */
        endDate: string;
        /**
         * The start date in the date range that you need the forecast results for.
         */
        startDate: string;
        /**
         * The target value that you want to meet for the provided date range.
         */
        value: number;
    }

    export interface DashboardWordCloudAggregatedFieldWells {
        /**
         * The group by field well of a word cloud. Values are grouped by group by fields.
         */
        groupBy?: outputs.quicksight.DashboardDimensionField[];
        /**
         * The size field well of a word cloud. Values are aggregated based on group by fields.
         */
        size?: outputs.quicksight.DashboardMeasureField[];
    }

    export interface DashboardWordCloudChartConfiguration {
        /**
         * The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
         */
        categoryLabelOptions?: outputs.quicksight.DashboardChartAxisLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.DashboardWordCloudFieldWells;
        /**
         * The sort configuration of a word cloud visual.
         */
        sortConfiguration?: outputs.quicksight.DashboardWordCloudSortConfiguration;
        /**
         * The options for a word cloud visual.
         */
        wordCloudOptions?: outputs.quicksight.DashboardWordCloudOptions;
    }

    export interface DashboardWordCloudFieldWells {
        /**
         * The aggregated field wells of a word cloud.
         */
        wordCloudAggregatedFieldWells?: outputs.quicksight.DashboardWordCloudAggregatedFieldWells;
    }

    export interface DashboardWordCloudOptions {
        /**
         * The cloud layout options (fluid, normal) of a word cloud.
         */
        cloudLayout?: enums.quicksight.DashboardWordCloudCloudLayout;
        /**
         * The length limit of each word from 1-100.
         */
        maximumStringLength?: number;
        /**
         * The word casing options (lower_case, existing_case) for the words in a word cloud.
         */
        wordCasing?: enums.quicksight.DashboardWordCloudWordCasing;
        /**
         * The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
         */
        wordOrientation?: enums.quicksight.DashboardWordCloudWordOrientation;
        /**
         * The word padding options (none, small, medium, large) for the words in a word cloud.
         */
        wordPadding?: enums.quicksight.DashboardWordCloudWordPadding;
        /**
         * The word scaling options (emphasize, normal) for the words in a word cloud.
         */
        wordScaling?: enums.quicksight.DashboardWordCloudWordScaling;
    }

    export interface DashboardWordCloudSortConfiguration {
        /**
         * The limit on the number of groups that are displayed in a word cloud.
         */
        categoryItemsLimit?: outputs.quicksight.DashboardItemsLimitConfiguration;
        /**
         * The sort configuration of group by fields.
         */
        categorySort?: outputs.quicksight.DashboardFieldSortOptions[];
    }

    export interface DashboardWordCloudVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.DashboardVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.DashboardWordCloudChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.DashboardColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.DashboardVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.DashboardVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    /**
     * <p>A calculated column for a dataset.</p>
     */
    export interface DataSetCalculatedColumn {
        /**
         * <p>A unique ID to identify a calculated column. During a dataset update, if the column ID
         *             of a calculated column matches that of an existing calculated column, Amazon QuickSight
         *             preserves the existing calculated column.</p>
         */
        columnId: string;
        /**
         * <p>Column name.</p>
         */
        columnName: string;
        /**
         * <p>An expression that defines the calculated column.</p>
         */
        expression: string;
    }

    /**
     * <p>A transform operation that casts a column to a different type.</p>
     */
    export interface DataSetCastColumnTypeOperation {
        /**
         * <p>Column name.</p>
         */
        columnName: string;
        /**
         * <p>When casting a column from string to datetime type, you can supply a string in a
         *             format supported by Amazon QuickSight to denote the source data format.</p>
         */
        format?: string;
        /**
         * New column data type.
         */
        newColumnType: enums.quicksight.DataSetColumnDataType;
        /**
         * The sub data type of the new column. Sub types are only available for decimal columns that are part of a SPICE dataset.
         */
        subType?: enums.quicksight.DataSetColumnDataSubType;
    }

    /**
     * <p>Metadata that contains a description for a column.</p>
     */
    export interface DataSetColumnDescription {
        /**
         * <p>The text of a description for a column.</p>
         */
        text?: string;
    }

    /**
     * <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
     *             a variant type structure. For this structure to be valid, only one of the attributes can
     *             be non-null.</p>
     */
    export interface DataSetColumnGroup {
        /**
         * Geospatial column group that denotes a hierarchy.
         */
        geoSpatialColumnGroup?: outputs.quicksight.DataSetGeoSpatialColumnGroup;
    }

    /**
     * <p>A rule defined to grant access on one or more restricted columns.
     *             Each dataset can have multiple rules.
     *             To create a restricted column, you add it to one or more rules.
     *             Each rule must contain at least one column and at least one user or group.
     *             To be able to see a restricted column, a user or group needs to be added
     *             to a rule for that column.</p>
     */
    export interface DataSetColumnLevelPermissionRule {
        /**
         * <p>An array of column names.</p>
         */
        columnNames?: string[];
        /**
         * <p>An array of Amazon Resource Names (ARNs) for Amazon QuickSight users or groups.</p>
         */
        principals?: string[];
    }

    /**
     * <p>A tag for a column in a
     *             <code>
     *                <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_TagColumnOperation.html">TagColumnOperation</a>
     *             </code>
     *             structure. This is a
     *             variant type structure. For this structure to be valid, only one of the attributes can
     *             be non-null.</p>
     */
    export interface DataSetColumnTag {
        /**
         * A description for a column.
         */
        columnDescription?: outputs.quicksight.DataSetColumnDescription;
        /**
         * A geospatial role for a column.
         */
        columnGeographicRole?: enums.quicksight.DataSetGeoSpatialDataRole;
    }

    /**
     * <p>A transform operation that creates calculated columns. Columns created in one such
     *             operation form a lexical closure.</p>
     */
    export interface DataSetCreateColumnsOperation {
        /**
         * <p>Calculated columns to create.</p>
         */
        columns: outputs.quicksight.DataSetCalculatedColumn[];
    }

    /**
     * <p>A physical table type built from the results of the custom SQL query.</p>
     */
    export interface DataSetCustomSql {
        /**
         * <p>The column schema from the SQL query result set.</p>
         */
        columns: outputs.quicksight.DataSetInputColumn[];
        /**
         * <p>The Amazon Resource Name (ARN) of the data source.</p>
         */
        dataSourceArn: string;
        /**
         * <p>A display name for the SQL query result.</p>
         */
        name: string;
        /**
         * <p>The SQL query.</p>
         */
        sqlQuery: string;
    }

    /**
     * <p>A dataset parameter.</p>
     */
    export interface DataSetDatasetParameter {
        /**
         * A date time parameter that is created in the dataset.
         */
        dateTimeDatasetParameter?: outputs.quicksight.DataSetDateTimeDatasetParameter;
        /**
         * A decimal parameter that is created in the dataset.
         */
        decimalDatasetParameter?: outputs.quicksight.DataSetDecimalDatasetParameter;
        /**
         * An integer parameter that is created in the dataset.
         */
        integerDatasetParameter?: outputs.quicksight.DataSetIntegerDatasetParameter;
        /**
         * A string parameter that is created in the dataset.
         */
        stringDatasetParameter?: outputs.quicksight.DataSetStringDatasetParameter;
    }

    /**
     * <p>A date time parameter for a dataset.</p>
     */
    export interface DataSetDateTimeDatasetParameter {
        /**
         * A list of default values for a given date time parameter. This structure only accepts static values.
         */
        defaultValues?: outputs.quicksight.DataSetDateTimeDatasetParameterDefaultValues;
        /**
         * <p>An identifier for the parameter that is created in the dataset.</p>
         */
        id: string;
        /**
         * <p>The name of the date time parameter that is created in the dataset.</p>
         */
        name: string;
        /**
         * The time granularity of the date time parameter.
         */
        timeGranularity?: enums.quicksight.DataSetTimeGranularity;
        /**
         * The value type of the dataset parameter. Valid values are `single value` or `multi value` .
         */
        valueType: enums.quicksight.DataSetDatasetParameterValueType;
    }

    /**
     * <p>The default values of a date time parameter.</p>
     */
    export interface DataSetDateTimeDatasetParameterDefaultValues {
        /**
         * <p>A list of static default values for a given date time parameter.</p>
         */
        staticValues?: string[];
    }

    /**
     * <p>A decimal parameter for a dataset.</p>
     */
    export interface DataSetDecimalDatasetParameter {
        /**
         * A list of default values for a given decimal parameter. This structure only accepts static values.
         */
        defaultValues?: outputs.quicksight.DataSetDecimalDatasetParameterDefaultValues;
        /**
         * <p>An identifier for the decimal parameter created in the dataset.</p>
         */
        id: string;
        /**
         * <p>The name of the decimal parameter that is created in the dataset.</p>
         */
        name: string;
        /**
         * The value type of the dataset parameter. Valid values are `single value` or `multi value` .
         */
        valueType: enums.quicksight.DataSetDatasetParameterValueType;
    }

    /**
     * <p>The default values of a decimal parameter.</p>
     */
    export interface DataSetDecimalDatasetParameterDefaultValues {
        /**
         * <p>A list of static default values for a given decimal parameter.</p>
         */
        staticValues?: number[];
    }

    /**
     * <p>A FieldFolder element is a folder that contains fields and nested subfolders.</p>
     */
    export interface DataSetFieldFolder {
        /**
         * <p>A folder has a list of columns. A column can only be in one folder.</p>
         */
        columns?: string[];
        /**
         * <p>The description for a field folder.</p>
         */
        description?: string;
    }

    /**
     * <p>A transform operation that filters rows based on a condition.</p>
     */
    export interface DataSetFilterOperation {
        /**
         * <p>An expression that must evaluate to a Boolean value. Rows for which the expression
         *             evaluates to true are kept in the dataset.</p>
         */
        conditionExpression: string;
    }

    /**
     * <p>Geospatial column group that denotes a hierarchy.</p>
     */
    export interface DataSetGeoSpatialColumnGroup {
        /**
         * <p>Columns in this hierarchy.</p>
         */
        columns: string[];
        /**
         * Country code.
         */
        countryCode?: enums.quicksight.DataSetGeoSpatialCountryCode;
        /**
         * <p>A display name for the hierarchy.</p>
         */
        name: string;
    }

    /**
     * <p>The incremental refresh configuration for a dataset.</p>
     */
    export interface DataSetIncrementalRefresh {
        /**
         * The lookback window setup for an incremental refresh configuration.
         */
        lookbackWindow: outputs.quicksight.DataSetLookbackWindow;
    }

    /**
     * <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>
     */
    export interface DataSetIngestionWaitPolicy {
        /**
         * <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
         *  Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
         */
        ingestionWaitTimeInHours?: number;
        /**
         * <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
         *   Applicable only when DataSetImportMode mode is set to SPICE.</p>
         */
        waitForSpiceIngestion?: boolean;
    }

    /**
     * <p>Metadata for a column that is used as the input of a transform operation.</p>
     */
    export interface DataSetInputColumn {
        /**
         * <p>The name of this column in the underlying data source.</p>
         */
        name: string;
        /**
         * The sub data type of the column. Sub types are only available for decimal columns that are part of a SPICE dataset.
         */
        subType?: enums.quicksight.DataSetColumnDataSubType;
        /**
         * The data type of the column.
         */
        type: enums.quicksight.DataSetInputColumnDataType;
    }

    /**
     * <p>An integer parameter for a dataset.</p>
     */
    export interface DataSetIntegerDatasetParameter {
        /**
         * A list of default values for a given integer parameter. This structure only accepts static values.
         */
        defaultValues?: outputs.quicksight.DataSetIntegerDatasetParameterDefaultValues;
        /**
         * <p>An identifier for the integer parameter created in the dataset.</p>
         */
        id: string;
        /**
         * <p>The name of the integer parameter that is created in the dataset.</p>
         */
        name: string;
        /**
         * The value type of the dataset parameter. Valid values are `single value` or `multi value` .
         */
        valueType: enums.quicksight.DataSetDatasetParameterValueType;
    }

    /**
     * <p>The default values of an integer parameter.</p>
     */
    export interface DataSetIntegerDatasetParameterDefaultValues {
        /**
         * <p>A list of static default values for a given integer parameter.</p>
         */
        staticValues?: number[];
    }

    /**
     * <p>The instructions associated with a join. </p>
     */
    export interface DataSetJoinInstruction {
        /**
         * Join key properties of the left operand.
         */
        leftJoinKeyProperties?: outputs.quicksight.DataSetJoinKeyProperties;
        /**
         * <p>The operand on the left side of a join.</p>
         */
        leftOperand: string;
        /**
         * <p>The join instructions provided in the <code>ON</code> clause of a join.</p>
         */
        onClause: string;
        /**
         * Join key properties of the right operand.
         */
        rightJoinKeyProperties?: outputs.quicksight.DataSetJoinKeyProperties;
        /**
         * <p>The operand on the right side of a join.</p>
         */
        rightOperand: string;
        /**
         * The type of join that it is.
         */
        type: enums.quicksight.DataSetJoinType;
    }

    /**
     * <p>Properties associated with the columns participating in a join.</p>
     */
    export interface DataSetJoinKeyProperties {
        /**
         * <p>A value that indicates that a row in a table is uniquely identified by the columns in
         *             a join key. This is used by Amazon QuickSight to optimize query performance.</p>
         */
        uniqueKey?: boolean;
    }

    /**
     * <p>A <i>logical table</i> is a unit that joins and that data
     *             transformations operate on. A logical table has a source, which can be either a physical
     *             table or result of a join. When a logical table points to a physical table, the logical
     *             table acts as a mutable copy of that physical table through transform operations.</p>
     */
    export interface DataSetLogicalTable {
        /**
         * <p>A display name for the logical table.</p>
         */
        alias: string;
        /**
         * <p>Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. </p>
         */
        dataTransforms?: outputs.quicksight.DataSetTransformOperation[];
        /**
         * Source of this logical table.
         */
        source: outputs.quicksight.DataSetLogicalTableSource;
    }

    /**
     * <p>Information about the source of a logical table. This is a variant type structure. For
     *             this structure to be valid, only one of the attributes can be non-null.</p>
     */
    export interface DataSetLogicalTableSource {
        /**
         * <p>The Amazon Resource Number (ARN) of the parent dataset.</p>
         */
        dataSetArn?: string;
        /**
         * Specifies the result of a join of two logical tables.
         */
        joinInstruction?: outputs.quicksight.DataSetJoinInstruction;
        /**
         * <p>Physical table ID.</p>
         */
        physicalTableId?: string;
    }

    /**
     * <p>The lookback window setup of an incremental refresh configuration.</p>
     */
    export interface DataSetLookbackWindow {
        /**
         * <p>The name of the lookback window column.</p>
         */
        columnName: string;
        /**
         * <p>The lookback window column size.</p>
         */
        size: number;
        /**
         * The size unit that is used for the lookback window column. Valid values for this structure are `HOUR` , `DAY` , and `WEEK` .
         */
        sizeUnit: enums.quicksight.DataSetLookbackWindowSizeUnit;
    }

    /**
     * <p>The configuration that overrides the existing default values for a dataset parameter that is inherited from another dataset.</p>
     */
    export interface DataSetNewDefaultValues {
        /**
         * <p>A list of static default values for a given date time parameter.</p>
         */
        dateTimeStaticValues?: string[];
        /**
         * <p>A list of static default values for a given decimal parameter.</p>
         */
        decimalStaticValues?: number[];
        /**
         * <p>A list of static default values for a given integer parameter.</p>
         */
        integerStaticValues?: number[];
        /**
         * <p>A list of static default values for a given string parameter.</p>
         */
        stringStaticValues?: string[];
    }

    /**
     * <p>Output column.</p>
     */
    export interface DataSetOutputColumn {
        /**
         * <p>A description for a column.</p>
         */
        description?: string;
        /**
         * <p>The display name of the column..</p>
         */
        name?: string;
        /**
         * The sub data type of the column.
         */
        subType?: enums.quicksight.DataSetColumnDataSubType;
        /**
         * The data type of the column.
         */
        type?: enums.quicksight.DataSetColumnDataType;
    }

    /**
     * <p>A transform operation that overrides the dataset parameter values that are defined in another dataset.</p>
     */
    export interface DataSetOverrideDatasetParameterOperation {
        /**
         * The new default values for the parameter.
         */
        newDefaultValues?: outputs.quicksight.DataSetNewDefaultValues;
        /**
         * <p>The new name for the parameter.</p>
         */
        newParameterName?: string;
        /**
         * <p>The name of the parameter to be overridden with different values.</p>
         */
        parameterName: string;
    }

    /**
     * <p>A view of a data source that contains information about the shape of the data in the
     *             underlying source. This is a variant type structure. For this structure to be valid,
     *             only one of the attributes can be non-null.</p>
     */
    export interface DataSetPhysicalTable {
        /**
         * A physical table type built from the results of the custom SQL query.
         */
        customSql?: outputs.quicksight.DataSetCustomSql;
        /**
         * A physical table type for relational data sources.
         */
        relationalTable?: outputs.quicksight.DataSetRelationalTable;
        /**
         * A physical table type for as S3 data source.
         */
        s3Source?: outputs.quicksight.DataSetS3Source;
    }

    /**
     * <p>A transform operation that projects columns. Operations that come after a projection
     *             can only refer to projected columns.</p>
     */
    export interface DataSetProjectOperation {
        /**
         * <p>Projected columns.</p>
         */
        projectedColumns: string[];
    }

    /**
     * <p>The refresh configuration of a dataset.</p>
     */
    export interface DataSetRefreshConfiguration {
        /**
         * The incremental refresh for the dataset.
         */
        incrementalRefresh: outputs.quicksight.DataSetIncrementalRefresh;
    }

    /**
     * <p>The refresh properties of a dataset.</p>
     */
    export interface DataSetRefreshProperties {
        /**
         * The refresh configuration for a dataset.
         */
        refreshConfiguration: outputs.quicksight.DataSetRefreshConfiguration;
    }

    /**
     * <p>A physical table type for relational data sources.</p>
     */
    export interface DataSetRelationalTable {
        /**
         * <p>The catalog associated with a table.</p>
         */
        catalog?: string;
        /**
         * <p>The Amazon Resource Name (ARN) for the data source.</p>
         */
        dataSourceArn: string;
        /**
         * <p>The column schema of the table.</p>
         */
        inputColumns: outputs.quicksight.DataSetInputColumn[];
        /**
         * <p>The name of the relational table.</p>
         */
        name: string;
        /**
         * <p>The schema name. This name applies to certain relational database engines.</p>
         */
        schema?: string;
    }

    /**
     * <p>A transform operation that renames a column.</p>
     */
    export interface DataSetRenameColumnOperation {
        /**
         * <p>The name of the column to be renamed.</p>
         */
        columnName: string;
        /**
         * <p>The new name for the column.</p>
         */
        newColumnName: string;
    }

    /**
     * <p>Permission for the resource.</p>
     */
    export interface DataSetResourcePermission {
        /**
         * <p>The IAM action to grant or revoke permissions on.</p>
         */
        actions: string[];
        /**
         * <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
         *             following:</p>
         *          <ul>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
         *                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
         *                     (This is less common.) </p>
         *             </li>
         *          </ul>
         */
        principal: string;
    }

    /**
     * <p>Information about a dataset that contains permissions for row-level security (RLS).
     *             The permissions dataset maps fields to users or groups. For more information, see
     *             <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User
     *                 Guide</i>.</p>
     *          <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is
     *             not supported for new RLS datasets.</p>
     */
    export interface DataSetRowLevelPermissionDataSet {
        /**
         * <p>The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS.</p>
         */
        arn: string;
        /**
         * The user or group rules associated with the dataset that contains permissions for RLS.
         *
         * By default, `FormatVersion` is `VERSION_1` . When `FormatVersion` is `VERSION_1` , `UserName` and `GroupName` are required. When `FormatVersion` is `VERSION_2` , `UserARN` and `GroupARN` are required, and `Namespace` must not exist.
         */
        formatVersion?: enums.quicksight.DataSetRowLevelPermissionFormatVersion;
        /**
         * <p>The namespace associated with the dataset that contains permissions for RLS.</p>
         */
        namespace?: string;
        /**
         * The type of permissions to use when interpreting the permissions for RLS. `DENY_ACCESS` is included for backward compatibility only.
         */
        permissionPolicy: enums.quicksight.DataSetRowLevelPermissionPolicy;
        /**
         * The status of the row-level security permission dataset. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
         */
        status?: enums.quicksight.DataSetStatus;
    }

    /**
     * <p>The configuration of tags on a dataset to set row-level security. </p>
     */
    export interface DataSetRowLevelPermissionTagConfiguration {
        /**
         * The status of row-level security tags. If enabled, the status is `ENABLED` . If disabled, the status is `DISABLED` .
         */
        status?: enums.quicksight.DataSetStatus;
        /**
         * <p>A list of tag configuration rules to apply to a dataset. All tag configurations have the OR condition. Tags within each tile will be joined (AND). At least one rule in this structure must have all tag values assigned to it to apply Row-level security (RLS) to the dataset.</p>
         */
        tagRuleConfigurations?: string[][];
        /**
         * <p>A set of rules associated with row-level security, such as the tag names and columns that they are assigned to.</p>
         */
        tagRules: outputs.quicksight.DataSetRowLevelPermissionTagRule[];
    }

    /**
     * <p>A set of rules associated with a tag.</p>
     */
    export interface DataSetRowLevelPermissionTagRule {
        /**
         * <p>The column name that a tag key is assigned to.</p>
         */
        columnName: string;
        /**
         * <p>A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one. For example, you can use an asterisk as your match all value.</p>
         */
        matchAllValue?: string;
        /**
         * <p>The unique key for a tag.</p>
         */
        tagKey: string;
        /**
         * <p>A string that you want to use to delimit the values when you pass the values at run time. For example, you can delimit the values with a comma.</p>
         */
        tagMultiValueDelimiter?: string;
    }

    /**
     * <p>A physical table type for an S3 data source.</p>
     */
    export interface DataSetS3Source {
        /**
         * <p>The Amazon Resource Name (ARN) for the data source.</p>
         */
        dataSourceArn: string;
        /**
         * <p>A physical table type for an S3 data source.</p>
         *          <note>
         *             <p>For files that aren't JSON, only <code>STRING</code> data types are supported in input columns.</p>
         *          </note>
         */
        inputColumns: outputs.quicksight.DataSetInputColumn[];
        /**
         * Information about the format for the S3 source file or files.
         */
        uploadSettings?: outputs.quicksight.DataSetUploadSettings;
    }

    /**
     * <p>A string parameter for a dataset.</p>
     */
    export interface DataSetStringDatasetParameter {
        /**
         * A list of default values for a given string dataset parameter type. This structure only accepts static values.
         */
        defaultValues?: outputs.quicksight.DataSetStringDatasetParameterDefaultValues;
        /**
         * <p>An identifier for the string parameter that is created in the dataset.</p>
         */
        id: string;
        /**
         * <p>The name of the string parameter that is created in the dataset.</p>
         */
        name: string;
        /**
         * The value type of the dataset parameter. Valid values are `single value` or `multi value` .
         */
        valueType: enums.quicksight.DataSetDatasetParameterValueType;
    }

    /**
     * <p>The default values of a string parameter.</p>
     */
    export interface DataSetStringDatasetParameterDefaultValues {
        /**
         * <p>A list of static default values for a given string parameter.</p>
         */
        staticValues?: string[];
    }

    /**
     * <p>A transform operation that tags a column with additional information.</p>
     */
    export interface DataSetTagColumnOperation {
        /**
         * <p>The column that this operation acts on.</p>
         */
        columnName: string;
        /**
         * <p>The dataset column tag, currently only used for geospatial type tagging.</p>
         *          <note>
         *             <p>This is not tags for the Amazon Web Services tagging feature.</p>
         *          </note>
         */
        tags: outputs.quicksight.DataSetColumnTag[];
    }

    /**
     * <p>A data transformation on a logical table. This is a variant type structure. For this
     *             structure to be valid, only one of the attributes can be non-null.</p>
     */
    export interface DataSetTransformOperation {
        /**
         * A transform operation that casts a column to a different type.
         */
        castColumnTypeOperation?: outputs.quicksight.DataSetCastColumnTypeOperation;
        /**
         * An operation that creates calculated columns. Columns created in one such operation form a lexical closure.
         */
        createColumnsOperation?: outputs.quicksight.DataSetCreateColumnsOperation;
        /**
         * An operation that filters rows based on some condition.
         */
        filterOperation?: outputs.quicksight.DataSetFilterOperation;
        overrideDatasetParameterOperation?: outputs.quicksight.DataSetOverrideDatasetParameterOperation;
        /**
         * An operation that projects columns. Operations that come after a projection can only refer to projected columns.
         */
        projectOperation?: outputs.quicksight.DataSetProjectOperation;
        /**
         * An operation that renames a column.
         */
        renameColumnOperation?: outputs.quicksight.DataSetRenameColumnOperation;
        /**
         * An operation that tags a column with additional information.
         */
        tagColumnOperation?: outputs.quicksight.DataSetTagColumnOperation;
        untagColumnOperation?: outputs.quicksight.DataSetUntagColumnOperation;
    }

    /**
     * <p>A transform operation that removes tags associated with a column.</p>
     */
    export interface DataSetUntagColumnOperation {
        /**
         * <p>The column that this operation acts on.</p>
         */
        columnName: string;
        /**
         * <p>The column tags to remove from this column.</p>
         */
        tagNames: enums.quicksight.DataSetColumnTagName[];
    }

    /**
     * <p>Information about the format for a source file or files.</p>
     */
    export interface DataSetUploadSettings {
        /**
         * <p>Whether the file has a header row, or the files each have a header row.</p>
         */
        containsHeader?: boolean;
        /**
         * <p>The delimiter between values in the file.</p>
         */
        delimiter?: string;
        /**
         * File format.
         */
        format?: enums.quicksight.DataSetFileFormat;
        /**
         * <p>A row number to start reading data from.</p>
         */
        startFromRow?: number;
        /**
         * Text qualifier.
         */
        textQualifier?: enums.quicksight.DataSetTextQualifier;
    }

    /**
     * <p>The usage configuration to apply to child datasets that reference this dataset as a source.</p>
     */
    export interface DataSetUsageConfiguration {
        /**
         * <p>An option that controls whether a child dataset of a direct query can use this dataset as a source.</p>
         */
        disableUseAsDirectQuerySource?: boolean;
        /**
         * <p>An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source.</p>
         */
        disableUseAsImportedSource?: boolean;
    }

    /**
     * <p>The parameters for OpenSearch.</p>
     */
    export interface DataSourceAmazonElasticsearchParameters {
        /**
         * <p>The OpenSearch domain.</p>
         */
        domain: string;
    }

    /**
     * <p>The parameters for OpenSearch.</p>
     */
    export interface DataSourceAmazonOpenSearchParameters {
        /**
         * <p>The OpenSearch domain.</p>
         */
        domain: string;
    }

    /**
     * <p>Parameters for Amazon Athena.</p>
     */
    export interface DataSourceAthenaParameters {
        /**
         * <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active.</p>
         */
        roleArn?: string;
        /**
         * <p>The workgroup that Amazon Athena uses.</p>
         */
        workGroup?: string;
    }

    /**
     * <p>Parameters for Amazon Aurora.</p>
     */
    export interface DataSourceAuroraParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>Parameters for Amazon Aurora PostgreSQL-Compatible Edition.</p>
     */
    export interface DataSourceAuroraPostgreSqlParameters {
        /**
         * <p>The Amazon Aurora PostgreSQL database to connect to.</p>
         */
        database: string;
        /**
         * <p>The Amazon Aurora PostgreSQL-Compatible host to connect to.</p>
         */
        host: string;
        /**
         * <p>The port that Amazon Aurora PostgreSQL is listening on.</p>
         */
        port: number;
    }

    /**
     * <p>The combination of user name and password that are used as credentials.</p>
     */
    export interface DataSourceCredentialPair {
        /**
         * <p>A set of alternate data source parameters that you want to share for these
         *             credentials. The credentials are applied in tandem with the data source parameters when
         *             you copy a data source by using a create or update request. The API operation compares
         *             the <code>DataSourceParameters</code> structure that's in the request with the
         *             structures in the <code>AlternateDataSourceParameters</code> allow list. If the
         *             structures are an exact match, the request is allowed to use the new data source with
         *             the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
         *             null, the <code>DataSourceParameters</code> originally used with these
         *                 <code>Credentials</code> is automatically allowed.</p>
         */
        alternateDataSourceParameters?: outputs.quicksight.DataSourceParameters[];
        /**
         * <p>Password.</p>
         */
        password: string;
        /**
         * <p>User name.</p>
         */
        username: string;
    }

    /**
     * <p>Data source credentials. This is a variant type structure. For this structure to be
     *             valid, only one of the attributes can be non-null.</p>
     */
    export interface DataSourceCredentials {
        /**
         * <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
         *             want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
         *             data source in the ARN is used as the credentials for the
         *             <code>DataSourceCredentials</code> structure.</p>
         */
        copySourceArn?: string;
        /**
         * Credential pair. For more information, see `[CredentialPair](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CredentialPair.html)` .
         */
        credentialPair?: outputs.quicksight.DataSourceCredentialPair;
        /**
         * <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
         */
        secretArn?: string;
    }

    /**
     * <p>The parameters that are required to connect to a Databricks data source.</p>
     */
    export interface DataSourceDatabricksParameters {
        /**
         * <p>The host name of the Databricks data source.</p>
         */
        host: string;
        /**
         * <p>The port for the Databricks data source.</p>
         */
        port: number;
        /**
         * <p>The HTTP path of the Databricks data source.</p>
         */
        sqlEndpointPath: string;
    }

    /**
     * <p>Error information for the data source creation or update.</p>
     */
    export interface DataSourceErrorInfo {
        /**
         * <p>Error message.</p>
         */
        message?: string;
        /**
         * Error type.
         */
        type?: enums.quicksight.DataSourceErrorInfoType;
    }

    /**
     * <p>The parameters for an IAM Identity Center configuration.</p>
     */
    export interface DataSourceIdentityCenterConfiguration {
        /**
         * <p>A Boolean option that controls whether Trusted Identity Propagation should be used.</p>
         */
        enableIdentityPropagation?: boolean;
    }

    /**
     * <p>Amazon S3 manifest file location.</p>
     */
    export interface DataSourceManifestFileLocation {
        /**
         * <p>Amazon S3 bucket.</p>
         */
        bucket: string;
        /**
         * <p>Amazon S3 key that identifies an object.</p>
         */
        key: string;
    }

    /**
     * <p>The parameters for MariaDB.</p>
     */
    export interface DataSourceMariaDbParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>The parameters for MySQL.</p>
     */
    export interface DataSourceMySqlParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>The parameters for Oracle.</p>
     */
    export interface DataSourceOracleParameters {
        /**
         * <p>The database.</p>
         */
        database: string;
        /**
         * <p>An Oracle host.</p>
         */
        host: string;
        /**
         * <p>The port.</p>
         */
        port: number;
    }

    /**
     * <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
     *             This is a variant type structure. For this structure to be valid, only one of the
     *             attributes can be non-null.</p>
     */
    export interface DataSourceParameters {
        /**
         * The parameters for OpenSearch.
         */
        amazonElasticsearchParameters?: outputs.quicksight.DataSourceAmazonElasticsearchParameters;
        /**
         * The parameters for OpenSearch.
         */
        amazonOpenSearchParameters?: outputs.quicksight.DataSourceAmazonOpenSearchParameters;
        /**
         * The parameters for Amazon Athena.
         */
        athenaParameters?: outputs.quicksight.DataSourceAthenaParameters;
        /**
         * The parameters for Amazon Aurora MySQL.
         */
        auroraParameters?: outputs.quicksight.DataSourceAuroraParameters;
        /**
         * The parameters for Amazon Aurora.
         */
        auroraPostgreSqlParameters?: outputs.quicksight.DataSourceAuroraPostgreSqlParameters;
        /**
         * The required parameters that are needed to connect to a Databricks data source.
         */
        databricksParameters?: outputs.quicksight.DataSourceDatabricksParameters;
        /**
         * The parameters for MariaDB.
         */
        mariaDbParameters?: outputs.quicksight.DataSourceMariaDbParameters;
        /**
         * The parameters for MySQL.
         */
        mySqlParameters?: outputs.quicksight.DataSourceMySqlParameters;
        /**
         * Oracle parameters.
         */
        oracleParameters?: outputs.quicksight.DataSourceOracleParameters;
        /**
         * The parameters for PostgreSQL.
         */
        postgreSqlParameters?: outputs.quicksight.DataSourcePostgreSqlParameters;
        /**
         * The parameters for Presto.
         */
        prestoParameters?: outputs.quicksight.DataSourcePrestoParameters;
        /**
         * The parameters for Amazon RDS.
         */
        rdsParameters?: outputs.quicksight.DataSourceRdsParameters;
        /**
         * The parameters for Amazon Redshift.
         */
        redshiftParameters?: outputs.quicksight.DataSourceRedshiftParameters;
        /**
         * The parameters for S3.
         */
        s3Parameters?: outputs.quicksight.DataSourceS3Parameters;
        /**
         * The parameters for Snowflake.
         */
        snowflakeParameters?: outputs.quicksight.DataSourceSnowflakeParameters;
        /**
         * The parameters for Spark.
         */
        sparkParameters?: outputs.quicksight.DataSourceSparkParameters;
        /**
         * The parameters for SQL Server.
         */
        sqlServerParameters?: outputs.quicksight.DataSourceSqlServerParameters;
        /**
         * The parameters that are required to connect to a Starburst data source.
         */
        starburstParameters?: outputs.quicksight.DataSourceStarburstParameters;
        /**
         * The parameters for Teradata.
         */
        teradataParameters?: outputs.quicksight.DataSourceTeradataParameters;
        /**
         * The parameters that are required to connect to a Trino data source.
         */
        trinoParameters?: outputs.quicksight.DataSourceTrinoParameters;
    }

    /**
     * <p>The parameters for PostgreSQL.</p>
     */
    export interface DataSourcePostgreSqlParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>The parameters for Presto.</p>
     */
    export interface DataSourcePrestoParameters {
        /**
         * <p>Catalog.</p>
         */
        catalog: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>The parameters for Amazon RDS.</p>
     */
    export interface DataSourceRdsParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Instance ID.</p>
         */
        instanceId: string;
    }

    /**
     * <p>A structure that grants Amazon QuickSight access to your cluster and make a call to the <code>redshift:GetClusterCredentials</code> API. For more information on the <code>redshift:GetClusterCredentials</code> API, see <a href="https://docs.aws.amazon.com/redshift/latest/APIReference/API_GetClusterCredentials.html">
     *                <code>GetClusterCredentials</code>
     *             </a>.</p>
     */
    export interface DataSourceRedshiftIamParameters {
        /**
         * <p>Automatically creates a database user. If your database doesn't have a <code>DatabaseUser</code>, set this parameter to <code>True</code>. If there is no <code>DatabaseUser</code>, Amazon QuickSight can't connect to your cluster. The <code>RoleArn</code> that you use for this operation must grant access to <code>redshift:CreateClusterUser</code> to successfully create the user.</p>
         */
        autoCreateDatabaseUser?: boolean;
        /**
         * <p>A list of groups whose permissions will be granted to Amazon QuickSight to access the cluster. These permissions are combined with the permissions granted to Amazon QuickSight by the <code>DatabaseUser</code>. If you choose to include this parameter, the <code>RoleArn</code> must grant access to <code>redshift:JoinGroup</code>.</p>
         */
        databaseGroups?: string[];
        /**
         * <p>The user whose permissions and group memberships will be used by Amazon QuickSight to access the cluster. If this user already exists in your database, Amazon QuickSight is granted the same permissions that the user has. If the user doesn't exist, set the value of <code>AutoCreateDatabaseUser</code> to <code>True</code> to create a new user with PUBLIC permissions.</p>
         */
        databaseUser?: string;
        /**
         * <p>Use the <code>RoleArn</code> structure to allow Amazon QuickSight to call <code>redshift:GetClusterCredentials</code> on your cluster. The calling principal must have <code>iam:PassRole</code> access to pass the role to Amazon QuickSight. The role's trust policy must allow the Amazon QuickSight service principal to assume the role.</p>
         */
        roleArn: string;
    }

    /**
     * <p>The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if
     *             <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
     */
    export interface DataSourceRedshiftParameters {
        /**
         * <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
         *             provided.</p>
         */
        clusterId?: string;
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
         */
        host?: string;
        iamParameters?: outputs.quicksight.DataSourceRedshiftIamParameters;
        /**
         * An optional parameter that configures IAM Identity Center authentication to grant Amazon QuickSight access to your cluster.
         *
         * This parameter can only be specified if your Amazon QuickSight account is configured with IAM Identity Center.
         */
        identityCenterConfiguration?: outputs.quicksight.DataSourceIdentityCenterConfiguration;
        /**
         * <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
         */
        port?: number;
    }

    /**
     * <p>Permission for the resource.</p>
     */
    export interface DataSourceResourcePermission {
        /**
         * <p>The IAM action to grant or revoke permissions on.</p>
         */
        actions: string[];
        /**
         * <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
         *             following:</p>
         *          <ul>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
         *                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
         *                     (This is less common.) </p>
         *             </li>
         *          </ul>
         */
        principal: string;
        resource?: string;
    }

    /**
     * <p>The parameters for S3.</p>
     */
    export interface DataSourceS3Parameters {
        /**
         * Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight.
         */
        manifestFileLocation: outputs.quicksight.DataSourceManifestFileLocation;
        /**
         * <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
         */
        roleArn?: string;
    }

    /**
     * <p>The parameters for Snowflake.</p>
     */
    export interface DataSourceSnowflakeParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Warehouse.</p>
         */
        warehouse: string;
    }

    /**
     * <p>The parameters for Spark.</p>
     */
    export interface DataSourceSparkParameters {
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>The parameters for SQL Server.</p>
     */
    export interface DataSourceSqlServerParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your
     *             underlying data source.</p>
     */
    export interface DataSourceSslProperties {
        /**
         * <p>A Boolean option to control whether SSL should be disabled.</p>
         */
        disableSsl?: boolean;
    }

    /**
     * <p>The parameters that are required to connect to a Starburst data source.</p>
     */
    export interface DataSourceStarburstParameters {
        /**
         * <p>The catalog name for the Starburst data source.</p>
         */
        catalog: string;
        /**
         * <p>The host name of the Starburst data source.</p>
         */
        host: string;
        /**
         * <p>The port for the Starburst data source.</p>
         */
        port: number;
        /**
         * The product type for the Starburst data source.
         */
        productType?: enums.quicksight.DataSourceStarburstProductType;
    }

    /**
     * <p>The parameters for Teradata.</p>
     */
    export interface DataSourceTeradataParameters {
        /**
         * <p>Database.</p>
         */
        database: string;
        /**
         * <p>Host.</p>
         */
        host: string;
        /**
         * <p>Port.</p>
         */
        port: number;
    }

    /**
     * <p>The parameters that are required to connect to a Trino data source.</p>
     */
    export interface DataSourceTrinoParameters {
        /**
         * <p>The catalog name for the Trino data source.</p>
         */
        catalog: string;
        /**
         * <p>The host name of the Trino data source.</p>
         */
        host: string;
        /**
         * <p>The port for the Trino data source.</p>
         */
        port: number;
    }

    /**
     * <p>VPC connection properties.</p>
     */
    export interface DataSourceVpcConnectionProperties {
        /**
         * <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
         */
        vpcConnectionArn: string;
    }

    export interface RefreshScheduleMap {
        /**
         * The type of refresh that a dataset undergoes. Valid values are as follows:
         *
         * - `FULL_REFRESH` : A complete refresh of a dataset.
         * - `INCREMENTAL_REFRESH` : A partial refresh of some rows of a dataset, based on the time window specified.
         *
         * For more information on full and incremental refreshes, see [Refreshing SPICE data](https://docs.aws.amazon.com/quicksight/latest/user/refreshing-imported-data.html) in the *Amazon QuickSight User Guide* .
         */
        refreshType?: enums.quicksight.RefreshScheduleMapRefreshType;
        /**
         * <p>Information about the schedule frequency.</p>
         */
        scheduleFrequency?: outputs.quicksight.RefreshScheduleMapScheduleFrequencyProperties;
        /**
         * <p>An unique identifier for the refresh schedule.</p>
         */
        scheduleId?: string;
        /**
         * <p>The date time after which refresh is to be scheduled</p>
         */
        startAfterDateTime?: string;
    }

    /**
     * <p>Information about the schedule frequency.</p>
     */
    export interface RefreshScheduleMapScheduleFrequencyProperties {
        interval?: enums.quicksight.RefreshScheduleMapScheduleFrequencyPropertiesInterval;
        /**
         * <p>The day scheduled for refresh.</p>
         */
        refreshOnDay?: outputs.quicksight.RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties;
        /**
         * <p>The time of the day for scheduled refresh.</p>
         */
        timeOfTheDay?: string;
        /**
         * <p>The timezone for scheduled refresh.</p>
         */
        timeZone?: string;
    }

    /**
     * <p>The day scheduled for refresh.</p>
     */
    export interface RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayProperties {
        /**
         * <p>The Day Of Month for scheduled refresh.</p>
         */
        dayOfMonth?: string;
        dayOfWeek?: enums.quicksight.RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek;
    }

    export interface TemplateAggregationFunction {
        /**
         * Aggregation for attributes.
         */
        attributeAggregationFunction?: outputs.quicksight.TemplateAttributeAggregationFunction;
        /**
         * Aggregation for categorical values.
         *
         * - `COUNT` : Aggregate by the total number of values, including duplicates.
         * - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
         */
        categoricalAggregationFunction?: enums.quicksight.TemplateCategoricalAggregationFunction;
        /**
         * Aggregation for date values.
         *
         * - `COUNT` : Aggregate by the total number of values, including duplicates.
         * - `DISTINCT_COUNT` : Aggregate by the total number of distinct values.
         * - `MIN` : Select the smallest date value.
         * - `MAX` : Select the largest date value.
         */
        dateAggregationFunction?: enums.quicksight.TemplateDateAggregationFunction;
        /**
         * Aggregation for numerical values.
         */
        numericalAggregationFunction?: outputs.quicksight.TemplateNumericalAggregationFunction;
    }

    export interface TemplateAggregationSortConfiguration {
        /**
         * The function that aggregates the values in `Column` .
         */
        aggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
        /**
         * The column that determines the sort order of aggregated values.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The sort direction of values.
         *
         * - `ASC` : Sort in ascending order.
         * - `DESC` : Sort in descending order.
         */
        sortDirection: enums.quicksight.TemplateSortDirection;
    }

    export interface TemplateAllSheetsFilterScopeConfiguration {
    }

    export interface TemplateAnalysisDefaults {
        /**
         * The configuration for default new sheet settings.
         */
        defaultNewSheetConfiguration: outputs.quicksight.TemplateDefaultNewSheetConfiguration;
    }

    export interface TemplateAnchorDateConfiguration {
        /**
         * The options for the date configuration. Choose one of the options below:
         *
         * - `NOW`
         */
        anchorOption?: enums.quicksight.TemplateAnchorOption;
        /**
         * The name of the parameter that is used for the anchor date configuration.
         */
        parameterName?: string;
    }

    export interface TemplateArcAxisConfiguration {
        /**
         * The arc axis range of a `GaugeChartVisual` .
         */
        range?: outputs.quicksight.TemplateArcAxisDisplayRange;
        /**
         * The reserved range of the arc axis.
         */
        reserveRange?: number;
    }

    export interface TemplateArcAxisDisplayRange {
        /**
         * The maximum value of the arc axis range.
         */
        max?: number;
        /**
         * The minimum value of the arc axis range.
         */
        min?: number;
    }

    export interface TemplateArcConfiguration {
        /**
         * The option that determines the arc angle of a `GaugeChartVisual` .
         */
        arcAngle?: number;
        /**
         * The options that determine the arc thickness of a `GaugeChartVisual` .
         */
        arcThickness?: enums.quicksight.TemplateArcThicknessOptions;
    }

    export interface TemplateArcOptions {
        /**
         * The arc thickness of a `GaugeChartVisual` .
         */
        arcThickness?: enums.quicksight.TemplateArcThickness;
    }

    export interface TemplateAssetOptions {
        /**
         * Determines the timezone for the analysis.
         */
        timezone?: string;
        /**
         * Determines the week start day for an analysis.
         */
        weekStart?: enums.quicksight.TemplateDayOfTheWeek;
    }

    export interface TemplateAttributeAggregationFunction {
        /**
         * The built-in aggregation functions for attributes.
         *
         * - `UNIQUE_VALUE` : Returns the unique value for a field, aggregated by the dimension fields.
         */
        simpleAttributeAggregation?: enums.quicksight.TemplateSimpleAttributeAggregationFunction;
        /**
         * Used by the `UNIQUE_VALUE` aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.
         */
        valueForMultipleValues?: string;
    }

    export interface TemplateAxisDataOptions {
        /**
         * The options for an axis with a date field.
         */
        dateAxisOptions?: outputs.quicksight.TemplateDateAxisOptions;
        /**
         * The options for an axis with a numeric field.
         */
        numericAxisOptions?: outputs.quicksight.TemplateNumericAxisOptions;
    }

    export interface TemplateAxisDisplayDataDrivenRange {
    }

    export interface TemplateAxisDisplayMinMaxRange {
        /**
         * The maximum setup for an axis display range.
         */
        maximum?: number;
        /**
         * The minimum setup for an axis display range.
         */
        minimum?: number;
    }

    export interface TemplateAxisDisplayOptions {
        /**
         * Determines whether or not the axis line is visible.
         */
        axisLineVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        axisOffset?: string;
        /**
         * The data options for an axis.
         */
        dataOptions?: outputs.quicksight.TemplateAxisDataOptions;
        /**
         * Determines whether or not the grid line is visible.
         */
        gridLineVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The scroll bar options for an axis.
         */
        scrollbarOptions?: outputs.quicksight.TemplateScrollBarOptions;
        /**
         * The tick label options of an axis.
         */
        tickLabelOptions?: outputs.quicksight.TemplateAxisTickLabelOptions;
    }

    export interface TemplateAxisDisplayRange {
        /**
         * The data-driven setup of an axis display range.
         */
        dataDriven?: outputs.quicksight.TemplateAxisDisplayDataDrivenRange;
        /**
         * The minimum and maximum setup of an axis display range.
         */
        minMax?: outputs.quicksight.TemplateAxisDisplayMinMaxRange;
    }

    export interface TemplateAxisLabelOptions {
        /**
         * The options that indicate which field the label belongs to.
         */
        applyTo?: outputs.quicksight.TemplateAxisLabelReferenceOptions;
        /**
         * The text for the axis label.
         */
        customLabel?: string;
        /**
         * The font configuration of the axis label.
         */
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
    }

    export interface TemplateAxisLabelReferenceOptions {
        /**
         * The column that the axis label is targeted to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The field that the axis label is targeted to.
         */
        fieldId: string;
    }

    export interface TemplateAxisLinearScale {
        /**
         * The step count setup of a linear axis.
         */
        stepCount?: number;
        /**
         * The step size setup of a linear axis.
         */
        stepSize?: number;
    }

    export interface TemplateAxisLogarithmicScale {
        /**
         * The base setup of a logarithmic axis scale.
         */
        base?: number;
    }

    export interface TemplateAxisScale {
        /**
         * The linear axis scale setup.
         */
        linear?: outputs.quicksight.TemplateAxisLinearScale;
        /**
         * The logarithmic axis scale setup.
         */
        logarithmic?: outputs.quicksight.TemplateAxisLogarithmicScale;
    }

    export interface TemplateAxisTickLabelOptions {
        /**
         * Determines whether or not the axis ticks are visible.
         */
        labelOptions?: outputs.quicksight.TemplateLabelOptions;
        /**
         * The rotation angle of the axis tick labels.
         */
        rotationAngle?: number;
    }

    export interface TemplateBarChartAggregatedFieldWells {
        /**
         * The category (y-axis) field well of a bar chart.
         */
        category?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The color (group/color) field well of a bar chart.
         */
        colors?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The small multiples field well of a bar chart.
         */
        smallMultiples?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The value field wells of a bar chart. Values are aggregated by category.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateBarChartConfiguration {
        /**
         * Determines the arrangement of the bars. The orientation and arrangement of bars determine the type of bar that is used in the visual.
         */
        barsArrangement?: enums.quicksight.TemplateBarsArrangement;
        /**
         * The label display options (grid line, range, scale, axis step) for bar chart category.
         */
        categoryAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) for a bar chart.
         */
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) for a color that is used in a bar chart.
         */
        colorLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The contribution analysis (anomaly configuration) setup of the visual.
         */
        contributionAnalysisDefaults?: outputs.quicksight.TemplateContributionAnalysisDefault[];
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateBarChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The orientation of the bars in a bar chart visual. There are two valid values in this structure:
         *
         * - `HORIZONTAL` : Used for charts that have horizontal bars. Visuals that use this value are horizontal bar charts, horizontal stacked bar charts, and horizontal stacked 100% bar charts.
         * - `VERTICAL` : Used for charts that have vertical bars. Visuals that use this value are vertical bar charts, vertical stacked bar charts, and vertical stacked 100% bar charts.
         */
        orientation?: enums.quicksight.TemplateBarChartOrientation;
        /**
         * The reference line setup of the visual.
         */
        referenceLines?: outputs.quicksight.TemplateReferenceLine[];
        /**
         * The small multiples setup for the visual.
         */
        smallMultiplesOptions?: outputs.quicksight.TemplateSmallMultiplesOptions;
        /**
         * The sort configuration of a `BarChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.TemplateBarChartSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * The label display options (grid line, range, scale, axis step) for a bar chart value.
         */
        valueAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) for a bar chart value.
         */
        valueLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateBarChartFieldWells {
        /**
         * The aggregated field wells of a bar chart.
         */
        barChartAggregatedFieldWells?: outputs.quicksight.TemplateBarChartAggregatedFieldWells;
    }

    export interface TemplateBarChartSortConfiguration {
        /**
         * The limit on the number of categories displayed in a bar chart.
         */
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of category fields.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        /**
         * The limit on the number of values displayed in a bar chart.
         */
        colorItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of color fields in a bar chart.
         */
        colorSort?: outputs.quicksight.TemplateFieldSortOptions[];
        /**
         * The limit on the number of small multiples panels that are displayed.
         */
        smallMultiplesLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the small multiples field.
         */
        smallMultiplesSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateBarChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateBarChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateBinCountOptions {
        /**
         * The options that determine the bin count value.
         */
        value?: number;
    }

    export interface TemplateBinWidthOptions {
        /**
         * The options that determine the bin count limit.
         */
        binCountLimit?: number;
        /**
         * The options that determine the bin width value.
         */
        value?: number;
    }

    export interface TemplateBodySectionConfiguration {
        /**
         * The configuration of content in a body section.
         */
        content: outputs.quicksight.TemplateBodySectionContent;
        /**
         * The configuration of a page break for a section.
         */
        pageBreakConfiguration?: outputs.quicksight.TemplateSectionPageBreakConfiguration;
        /**
         * The unique identifier of a body section.
         */
        sectionId: string;
        /**
         * The style options of a body section.
         */
        style?: outputs.quicksight.TemplateSectionStyle;
    }

    export interface TemplateBodySectionContent {
        /**
         * The layout configuration of a body section.
         */
        layout?: outputs.quicksight.TemplateSectionLayoutConfiguration;
    }

    export interface TemplateBoxPlotAggregatedFieldWells {
        /**
         * The group by field well of a box plot chart. Values are grouped based on group by fields.
         */
        groupBy?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The value field well of a box plot chart. Values are aggregated based on group by fields.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateBoxPlotChartConfiguration {
        /**
         * The box plot chart options for a box plot visual
         */
        boxPlotOptions?: outputs.quicksight.TemplateBoxPlotOptions;
        /**
         * The label display options (grid line, range, scale, axis step) of a box plot category.
         */
        categoryAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort Icon visibility) of a box plot category.
         */
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateBoxPlotFieldWells;
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The label display options (grid line, range, scale, axis step) of a box plot category.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The label options (label text, label visibility and sort icon visibility) of a box plot value.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The reference line setup of the visual.
         */
        referenceLines?: outputs.quicksight.TemplateReferenceLine[];
        /**
         * The sort configuration of a `BoxPlotVisual` .
         */
        sortConfiguration?: outputs.quicksight.TemplateBoxPlotSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateBoxPlotFieldWells {
        /**
         * The aggregated field wells of a box plot.
         */
        boxPlotAggregatedFieldWells?: outputs.quicksight.TemplateBoxPlotAggregatedFieldWells;
    }

    export interface TemplateBoxPlotOptions {
        /**
         * Determines the visibility of all data points of the box plot.
         */
        allDataPointsVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * Determines the visibility of the outlier in a box plot.
         */
        outlierVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The style options of the box plot.
         */
        styleOptions?: outputs.quicksight.TemplateBoxPlotStyleOptions;
    }

    export interface TemplateBoxPlotSortConfiguration {
        /**
         * The sort configuration of a group by fields.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        /**
         * The pagination configuration of a table visual or box plot.
         */
        paginationConfiguration?: outputs.quicksight.TemplatePaginationConfiguration;
    }

    export interface TemplateBoxPlotStyleOptions {
        /**
         * The fill styles (solid, transparent) of the box plot.
         */
        fillStyle?: enums.quicksight.TemplateBoxPlotFillStyle;
    }

    export interface TemplateBoxPlotVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateBoxPlotChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface TemplateCalculatedField {
        /**
         * The data set that is used in this calculated field.
         */
        dataSetIdentifier: string;
        /**
         * The expression of the calculated field.
         */
        expression: string;
        /**
         * The name of the calculated field.
         */
        name: string;
    }

    export interface TemplateCalculatedMeasureField {
        /**
         * The expression in the table calculation.
         */
        expression: string;
        /**
         * The custom field ID.
         */
        fieldId: string;
    }

    export interface TemplateCascadingControlConfiguration {
        /**
         * A list of source controls that determine the values that are used in the current control.
         */
        sourceControls?: outputs.quicksight.TemplateCascadingControlSource[];
    }

    export interface TemplateCascadingControlSource {
        /**
         * The column identifier that determines which column to look up for the source sheet control.
         */
        columnToMatch?: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The source sheet control ID of a `CascadingControlSource` .
         */
        sourceSheetControlId?: string;
    }

    export interface TemplateCategoricalDimensionField {
        /**
         * The column that is used in the `CategoricalDimensionField` .
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.TemplateStringFormatConfiguration;
        /**
         * The custom hierarchy ID.
         */
        hierarchyId?: string;
    }

    export interface TemplateCategoricalMeasureField {
        /**
         * The aggregation function of the measure field.
         */
        aggregationFunction?: enums.quicksight.TemplateCategoricalAggregationFunction;
        /**
         * The column that is used in the `CategoricalMeasureField` .
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.TemplateStringFormatConfiguration;
    }

    export interface TemplateCategoryDrillDownFilter {
        /**
         * A list of the string inputs that are the values of the category drill down filter.
         */
        categoryValues: string[];
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
    }

    export interface TemplateCategoryFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The configuration for a `CategoryFilter` .
         */
        configuration: outputs.quicksight.TemplateCategoryFilterConfiguration;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.TemplateDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
    }

    export interface TemplateCategoryFilterConfiguration {
        /**
         * A custom filter that filters based on a single value. This filter can be partially matched.
         */
        customFilterConfiguration?: outputs.quicksight.TemplateCustomFilterConfiguration;
        /**
         * A list of custom filter values. In the Amazon QuickSight console, this filter type is called a custom filter list.
         */
        customFilterListConfiguration?: outputs.quicksight.TemplateCustomFilterListConfiguration;
        /**
         * A list of filter configurations. In the Amazon QuickSight console, this filter type is called a filter list.
         */
        filterListConfiguration?: outputs.quicksight.TemplateFilterListConfiguration;
    }

    export interface TemplateChartAxisLabelOptions {
        /**
         * The label options for a chart axis.
         */
        axisLabelOptions?: outputs.quicksight.TemplateAxisLabelOptions[];
        /**
         * The visibility configuration of the sort icon on a chart's axis label.
         */
        sortIconVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The visibility of an axis label on a chart. Choose one of the following options:
         *
         * - `VISIBLE` : Shows the axis.
         * - `HIDDEN` : Hides the axis.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateClusterMarker {
        /**
         * The simple cluster marker of the cluster marker.
         */
        simpleClusterMarker?: outputs.quicksight.TemplateSimpleClusterMarker;
    }

    export interface TemplateClusterMarkerConfiguration {
        /**
         * The cluster marker that is a part of the cluster marker configuration.
         */
        clusterMarker?: outputs.quicksight.TemplateClusterMarker;
    }

    export interface TemplateColorScale {
        /**
         * Determines the color fill type.
         */
        colorFillType: enums.quicksight.TemplateColorFillType;
        /**
         * Determines the list of colors that are applied to the visual.
         */
        colors: outputs.quicksight.TemplateDataColor[];
        /**
         * Determines the color that is applied to null values.
         */
        nullValueColor?: outputs.quicksight.TemplateDataColor;
    }

    export interface TemplateColorsConfiguration {
        /**
         * A list of up to 50 custom colors.
         */
        customColors?: outputs.quicksight.TemplateCustomColor[];
    }

    export interface TemplateColumnConfiguration {
        /**
         * The color configurations of the column.
         */
        colorsConfiguration?: outputs.quicksight.TemplateColorsConfiguration;
        /**
         * The column.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The format configuration of a column.
         */
        formatConfiguration?: outputs.quicksight.TemplateFormatConfiguration;
        /**
         * The role of the column.
         */
        role?: enums.quicksight.TemplateColumnRole;
    }

    /**
     * <p>A structure describing the name, data type, and geographic role of the columns.</p>
     */
    export interface TemplateColumnGroupColumnSchema {
        /**
         * <p>The name of the column group's column schema.</p>
         */
        name?: string;
    }

    /**
     * <p>The column group schema.</p>
     */
    export interface TemplateColumnGroupSchema {
        /**
         * <p>A structure containing the list of schemas for column group columns.</p>
         */
        columnGroupColumnSchemaList?: outputs.quicksight.TemplateColumnGroupColumnSchema[];
        /**
         * <p>The name of the column group schema.</p>
         */
        name?: string;
    }

    export interface TemplateColumnHierarchy {
        /**
         * The option that determines the hierarchy of any `DateTime` fields.
         */
        dateTimeHierarchy?: outputs.quicksight.TemplateDateTimeHierarchy;
        /**
         * The option that determines the hierarchy of the fields that are built within a visual's field wells. These fields can't be duplicated to other visuals.
         */
        explicitHierarchy?: outputs.quicksight.TemplateExplicitHierarchy;
        /**
         * The option that determines the hierarchy of the fields that are defined during data preparation. These fields are available to use in any analysis that uses the data source.
         */
        predefinedHierarchy?: outputs.quicksight.TemplatePredefinedHierarchy;
    }

    export interface TemplateColumnIdentifier {
        /**
         * The name of the column.
         */
        columnName: string;
        /**
         * The data set that the column belongs to.
         */
        dataSetIdentifier: string;
    }

    /**
     * <p>The column schema.</p>
     */
    export interface TemplateColumnSchema {
        /**
         * <p>The data type of the column schema.</p>
         */
        dataType?: string;
        /**
         * <p>The geographic role of the column schema.</p>
         */
        geographicRole?: string;
        /**
         * <p>The name of the column schema.</p>
         */
        name?: string;
    }

    export interface TemplateColumnSort {
        /**
         * The aggregation function that is defined in the column sort.
         */
        aggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
        /**
         * The sort direction.
         */
        direction: enums.quicksight.TemplateSortDirection;
        sortBy: outputs.quicksight.TemplateColumnIdentifier;
    }

    export interface TemplateColumnTooltipItem {
        /**
         * The aggregation function of the column tooltip item.
         */
        aggregation?: outputs.quicksight.TemplateAggregationFunction;
        /**
         * The target column of the tooltip item.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The label of the tooltip item.
         */
        label?: string;
        /**
         * The visibility of the tooltip item.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateComboChartAggregatedFieldWells {
        /**
         * The aggregated `BarValues` field well of a combo chart.
         */
        barValues?: outputs.quicksight.TemplateMeasureField[];
        /**
         * The aggregated category field wells of a combo chart.
         */
        category?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The aggregated colors field well of a combo chart.
         */
        colors?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The aggregated `LineValues` field well of a combo chart.
         */
        lineValues?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateComboChartConfiguration {
        /**
         * The options that determine if visual data labels are displayed.
         *
         * The data label options for a bar in a combo chart.
         */
        barDataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * Determines the bar arrangement in a combo chart. The following are valid values in this structure:
         *
         * - `CLUSTERED` : For clustered bar combo charts.
         * - `STACKED` : For stacked bar combo charts.
         * - `STACKED_PERCENT` : Do not use. If you use this value, the operation returns a validation error.
         */
        barsArrangement?: enums.quicksight.TemplateBarsArrangement;
        /**
         * The category axis of a combo chart.
         */
        categoryAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart category (group/color) field well.
         */
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart's color field well.
         */
        colorLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateComboChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The options that determine if visual data labels are displayed.
         *
         * The data label options for a line in a combo chart.
         */
        lineDataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The label display options (grid line, range, scale, and axis step) of a combo chart's primary y-axis (bar) field well.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart's primary y-axis (bar) field well.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The reference line setup of the visual.
         */
        referenceLines?: outputs.quicksight.TemplateReferenceLine[];
        /**
         * The label display options (grid line, range, scale, axis step) of a combo chart's secondary y-axis (line) field well.
         */
        secondaryYAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of a combo chart's secondary y-axis(line) field well.
         */
        secondaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The sort configuration of a `ComboChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.TemplateComboChartSortConfiguration;
        /**
         * The legend display setup of the visual.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateComboChartFieldWells {
        /**
         * The aggregated field wells of a combo chart. Combo charts only have aggregated field wells. Columns in a combo chart are aggregated by category.
         */
        comboChartAggregatedFieldWells?: outputs.quicksight.TemplateComboChartAggregatedFieldWells;
    }

    export interface TemplateComboChartSortConfiguration {
        /**
         * The item limit configuration for the category field well of a combo chart.
         */
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the category field well in a combo chart.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        /**
         * The item limit configuration of the color field well in a combo chart.
         */
        colorItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the color field well in a combo chart.
         */
        colorSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateComboChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateComboChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateComparisonConfiguration {
        /**
         * The format of the comparison.
         */
        comparisonFormat?: outputs.quicksight.TemplateComparisonFormatConfiguration;
        /**
         * The method of the comparison. Choose from the following options:
         *
         * - `DIFFERENCE`
         * - `PERCENT_DIFFERENCE`
         * - `PERCENT`
         */
        comparisonMethod?: enums.quicksight.TemplateComparisonMethod;
    }

    export interface TemplateComparisonFormatConfiguration {
        /**
         * The number display format.
         */
        numberDisplayFormatConfiguration?: outputs.quicksight.TemplateNumberDisplayFormatConfiguration;
        /**
         * The percentage display format.
         */
        percentageDisplayFormatConfiguration?: outputs.quicksight.TemplatePercentageDisplayFormatConfiguration;
    }

    export interface TemplateComputation {
        /**
         * The forecast computation configuration.
         */
        forecast?: outputs.quicksight.TemplateForecastComputation;
        /**
         * The growth rate computation configuration.
         */
        growthRate?: outputs.quicksight.TemplateGrowthRateComputation;
        /**
         * The maximum and minimum computation configuration.
         */
        maximumMinimum?: outputs.quicksight.TemplateMaximumMinimumComputation;
        /**
         * The metric comparison computation configuration.
         */
        metricComparison?: outputs.quicksight.TemplateMetricComparisonComputation;
        /**
         * The period over period computation configuration.
         */
        periodOverPeriod?: outputs.quicksight.TemplatePeriodOverPeriodComputation;
        /**
         * The period to `DataSetIdentifier` computation configuration.
         */
        periodToDate?: outputs.quicksight.TemplatePeriodToDateComputation;
        /**
         * The top movers and bottom movers computation configuration.
         */
        topBottomMovers?: outputs.quicksight.TemplateTopBottomMoversComputation;
        /**
         * The top ranked and bottom ranked computation configuration.
         */
        topBottomRanked?: outputs.quicksight.TemplateTopBottomRankedComputation;
        /**
         * The total aggregation computation configuration.
         */
        totalAggregation?: outputs.quicksight.TemplateTotalAggregationComputation;
        /**
         * The unique values computation configuration.
         */
        uniqueValues?: outputs.quicksight.TemplateUniqueValuesComputation;
    }

    export interface TemplateConditionalFormattingColor {
        /**
         * Formatting configuration for gradient color.
         */
        gradient?: outputs.quicksight.TemplateConditionalFormattingGradientColor;
        /**
         * Formatting configuration for solid color.
         */
        solid?: outputs.quicksight.TemplateConditionalFormattingSolidColor;
    }

    export interface TemplateConditionalFormattingCustomIconCondition {
        /**
         * Determines the color of the icon.
         */
        color?: string;
        /**
         * Determines the icon display configuration.
         */
        displayConfiguration?: outputs.quicksight.TemplateConditionalFormattingIconDisplayConfiguration;
        /**
         * The expression that determines the condition of the icon set.
         */
        expression: string;
        /**
         * Custom icon options for an icon set.
         */
        iconOptions: outputs.quicksight.TemplateConditionalFormattingCustomIconOptions;
    }

    export interface TemplateConditionalFormattingCustomIconOptions {
        /**
         * Determines the type of icon.
         */
        icon?: enums.quicksight.TemplateIcon;
        /**
         * Determines the Unicode icon type.
         */
        unicodeIcon?: string;
    }

    export interface TemplateConditionalFormattingGradientColor {
        /**
         * Determines the color.
         */
        color: outputs.quicksight.TemplateGradientColor;
        /**
         * The expression that determines the formatting configuration for gradient color.
         */
        expression: string;
    }

    export interface TemplateConditionalFormattingIcon {
        /**
         * Determines the custom condition for an icon set.
         */
        customCondition?: outputs.quicksight.TemplateConditionalFormattingCustomIconCondition;
        /**
         * Formatting configuration for icon set.
         */
        iconSet?: outputs.quicksight.TemplateConditionalFormattingIconSet;
    }

    export interface TemplateConditionalFormattingIconDisplayConfiguration {
        /**
         * Determines the icon display configuration.
         */
        iconDisplayOption?: enums.quicksight.TemplateConditionalFormattingIconDisplayOption;
    }

    export interface TemplateConditionalFormattingIconSet {
        /**
         * The expression that determines the formatting configuration for the icon set.
         */
        expression: string;
        /**
         * Determines the icon set type.
         */
        iconSetType?: enums.quicksight.TemplateConditionalFormattingIconSetType;
    }

    export interface TemplateConditionalFormattingSolidColor {
        /**
         * Determines the color.
         */
        color?: string;
        /**
         * The expression that determines the formatting configuration for solid color.
         */
        expression: string;
    }

    export interface TemplateContributionAnalysisDefault {
        /**
         * The dimensions columns that are used in the contribution analysis, usually a list of `ColumnIdentifiers` .
         */
        contributorDimensions: outputs.quicksight.TemplateColumnIdentifier[];
        /**
         * The measure field that is used in the contribution analysis.
         */
        measureFieldId: string;
    }

    export interface TemplateCurrencyDisplayFormatConfiguration {
        /**
         * The option that determines the decimal places configuration.
         */
        decimalPlacesConfiguration?: outputs.quicksight.TemplateDecimalPlacesConfiguration;
        /**
         * The options that determine the negative value configuration.
         */
        negativeValueConfiguration?: outputs.quicksight.TemplateNegativeValueConfiguration;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        /**
         * Determines the number scale value for the currency format.
         */
        numberScale?: enums.quicksight.TemplateNumberScale;
        /**
         * Determines the prefix value of the currency format.
         */
        prefix?: string;
        /**
         * The options that determine the numeric separator configuration.
         */
        separatorConfiguration?: outputs.quicksight.TemplateNumericSeparatorConfiguration;
        /**
         * Determines the suffix value of the currency format.
         */
        suffix?: string;
        /**
         * Determines the symbol for the currency format.
         */
        symbol?: string;
    }

    export interface TemplateCustomActionFilterOperation {
        /**
         * The configuration that chooses the fields to be filtered.
         */
        selectedFieldsConfiguration: outputs.quicksight.TemplateFilterOperationSelectedFieldsConfiguration;
        /**
         * The configuration that chooses the target visuals to be filtered.
         */
        targetVisualsConfiguration: outputs.quicksight.TemplateFilterOperationTargetVisualsConfiguration;
    }

    export interface TemplateCustomActionNavigationOperation {
        /**
         * The configuration that chooses the navigation target.
         */
        localNavigationConfiguration?: outputs.quicksight.TemplateLocalNavigationConfiguration;
    }

    export interface TemplateCustomActionSetParametersOperation {
        /**
         * The parameter that determines the value configuration.
         */
        parameterValueConfigurations: outputs.quicksight.TemplateSetParameterValueConfiguration[];
    }

    export interface TemplateCustomActionUrlOperation {
        /**
         * The target of the `CustomActionURLOperation` .
         *
         * Valid values are defined as follows:
         *
         * - `NEW_TAB` : Opens the target URL in a new browser tab.
         * - `NEW_WINDOW` : Opens the target URL in a new browser window.
         * - `SAME_TAB` : Opens the target URL in the same browser tab.
         */
        urlTarget: enums.quicksight.TemplateUrlTargetConfiguration;
        /**
         * THe URL link of the `CustomActionURLOperation` .
         */
        urlTemplate: string;
    }

    export interface TemplateCustomColor {
        /**
         * The color that is applied to the data value.
         */
        color: string;
        /**
         * The data value that the color is applied to.
         */
        fieldValue?: string;
        /**
         * The value of a special data value.
         */
        specialValue?: enums.quicksight.TemplateSpecialValue;
    }

    export interface TemplateCustomContentConfiguration {
        /**
         * The content type of the custom content visual. You can use this to have the visual render as an image.
         */
        contentType?: enums.quicksight.TemplateCustomContentType;
        /**
         * The input URL that links to the custom content that you want in the custom visual.
         */
        contentUrl?: string;
        /**
         * The sizing options for the size of the custom content visual. This structure is required when the `ContentType` of the visual is `'IMAGE'` .
         */
        imageScaling?: enums.quicksight.TemplateCustomContentImageScalingConfiguration;
    }

    export interface TemplateCustomContentVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration of a `CustomContentVisual` .
         */
        chartConfiguration?: outputs.quicksight.TemplateCustomContentConfiguration;
        /**
         * The dataset that is used to create the custom content visual. You can't create a visual without a dataset.
         */
        dataSetIdentifier: string;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateCustomFilterConfiguration {
        /**
         * The category value for the filter.
         *
         * This field is mutually exclusive to `ParameterName` .
         */
        categoryValue?: string;
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.TemplateCategoryFilterMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.TemplateFilterNullOption;
        /**
         * The parameter whose value should be used for the filter value.
         *
         * This field is mutually exclusive to `CategoryValue` .
         */
        parameterName?: string;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.TemplateCategoryFilterSelectAllOptions;
    }

    export interface TemplateCustomFilterListConfiguration {
        /**
         * The list of category values for the filter.
         */
        categoryValues?: string[];
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.TemplateCategoryFilterMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.TemplateFilterNullOption;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.TemplateCategoryFilterSelectAllOptions;
    }

    export interface TemplateCustomNarrativeOptions {
        /**
         * The string input of custom narrative.
         */
        narrative: string;
    }

    export interface TemplateCustomParameterValues {
        /**
         * A list of datetime-type parameter values.
         */
        dateTimeValues?: string[];
        /**
         * A list of decimal-type parameter values.
         */
        decimalValues?: number[];
        /**
         * A list of integer-type parameter values.
         */
        integerValues?: number[];
        /**
         * A list of string-type parameter values.
         */
        stringValues?: string[];
    }

    export interface TemplateCustomValuesConfiguration {
        customValues: outputs.quicksight.TemplateCustomParameterValues;
        /**
         * Includes the null value in custom action parameter values.
         */
        includeNullValue?: boolean;
    }

    export interface TemplateDataBarsOptions {
        /**
         * The field ID for the data bars options.
         */
        fieldId: string;
        /**
         * The color of the negative data bar.
         */
        negativeColor?: string;
        /**
         * The color of the positive data bar.
         */
        positiveColor?: string;
    }

    export interface TemplateDataColor {
        /**
         * The color that is applied to the data value.
         */
        color?: string;
        /**
         * The data value that the color is applied to.
         */
        dataValue?: number;
    }

    export interface TemplateDataFieldSeriesItem {
        /**
         * The axis that you are binding the field to.
         */
        axisBinding: enums.quicksight.TemplateAxisBinding;
        /**
         * The field ID of the field that you are setting the axis binding to.
         */
        fieldId: string;
        /**
         * The field value of the field that you are setting the axis binding to.
         */
        fieldValue?: string;
        /**
         * The options that determine the presentation of line series associated to the field.
         */
        settings?: outputs.quicksight.TemplateLineChartSeriesSettings;
    }

    export interface TemplateDataLabelOptions {
        /**
         * Determines the visibility of the category field labels.
         */
        categoryLabelVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The option that determines the data label type.
         */
        dataLabelTypes?: outputs.quicksight.TemplateDataLabelType[];
        /**
         * Determines the color of the data labels.
         */
        labelColor?: string;
        /**
         * Determines the content of the data labels.
         */
        labelContent?: enums.quicksight.TemplateDataLabelContent;
        /**
         * Determines the font configuration of the data labels.
         */
        labelFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        /**
         * Determines the visibility of the measure field labels.
         */
        measureLabelVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * Determines whether overlap is enabled or disabled for the data labels.
         */
        overlap?: enums.quicksight.TemplateDataLabelOverlap;
        /**
         * Determines the position of the data labels.
         */
        position?: enums.quicksight.TemplateDataLabelPosition;
        /**
         * Determines the visibility of the total.
         */
        totalsVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * Determines the visibility of the data labels.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateDataLabelType {
        /**
         * The option that specifies individual data values for labels.
         */
        dataPathLabelType?: outputs.quicksight.TemplateDataPathLabelType;
        /**
         * Determines the label configuration for the entire field.
         */
        fieldLabelType?: outputs.quicksight.TemplateFieldLabelType;
        /**
         * Determines the label configuration for the maximum value in a visual.
         */
        maximumLabelType?: outputs.quicksight.TemplateMaximumLabelType;
        /**
         * Determines the label configuration for the minimum value in a visual.
         */
        minimumLabelType?: outputs.quicksight.TemplateMinimumLabelType;
        /**
         * Determines the label configuration for range end value in a visual.
         */
        rangeEndsLabelType?: outputs.quicksight.TemplateRangeEndsLabelType;
    }

    export interface TemplateDataPathColor {
        /**
         * The color that needs to be applied to the element.
         */
        color: string;
        /**
         * The element that the color needs to be applied to.
         */
        element: outputs.quicksight.TemplateDataPathValue;
        /**
         * The time granularity of the field that the color needs to be applied to.
         */
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
    }

    export interface TemplateDataPathLabelType {
        /**
         * The field ID of the field that the data label needs to be applied to.
         */
        fieldId?: string;
        /**
         * The actual value of the field that is labeled.
         */
        fieldValue?: string;
        /**
         * The visibility of the data label.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateDataPathSort {
        /**
         * Determines the sort direction.
         */
        direction: enums.quicksight.TemplateSortDirection;
        /**
         * The list of data paths that need to be sorted.
         */
        sortPaths: outputs.quicksight.TemplateDataPathValue[];
    }

    export interface TemplateDataPathType {
        /**
         * The type of data path value utilized in a pivot table. Choose one of the following options:
         *
         * - `HIERARCHY_ROWS_LAYOUT_COLUMN` - The type of data path for the rows layout column, when `RowsLayout` is set to `HIERARCHY` .
         * - `MULTIPLE_ROW_METRICS_COLUMN` - The type of data path for the metric column when the row is set to Metric Placement.
         * - `EMPTY_COLUMN_HEADER` - The type of data path for the column with empty column header, when there is no field in `ColumnsFieldWell` and the row is set to Metric Placement.
         * - `COUNT_METRIC_COLUMN` - The type of data path for the column with `COUNT` as the metric, when there is no field in the `ValuesFieldWell` .
         */
        pivotTableDataPathType?: enums.quicksight.TemplatePivotTableDataPathType;
    }

    export interface TemplateDataPathValue {
        /**
         * The type configuration of the field.
         */
        dataPathType?: outputs.quicksight.TemplateDataPathType;
        /**
         * The field ID of the field that needs to be sorted.
         */
        fieldId?: string;
        /**
         * The actual value of the field that needs to be sorted.
         */
        fieldValue?: string;
    }

    /**
     * <p>Dataset configuration.</p>
     */
    export interface TemplateDataSetConfiguration {
        /**
         * <p>A structure containing the list of column group schemas.</p>
         */
        columnGroupSchemaList?: outputs.quicksight.TemplateColumnGroupSchema[];
        /**
         * Dataset schema.
         */
        dataSetSchema?: outputs.quicksight.TemplateDataSetSchema;
        /**
         * <p>Placeholder.</p>
         */
        placeholder?: string;
    }

    /**
     * <p>Dataset reference.</p>
     */
    export interface TemplateDataSetReference {
        /**
         * <p>Dataset Amazon Resource Name (ARN).</p>
         */
        dataSetArn: string;
        /**
         * <p>Dataset placeholder.</p>
         */
        dataSetPlaceholder: string;
    }

    /**
     * <p>Dataset schema.</p>
     */
    export interface TemplateDataSetSchema {
        /**
         * <p>A structure containing the list of column schemas.</p>
         */
        columnSchemaList?: outputs.quicksight.TemplateColumnSchema[];
    }

    export interface TemplateDateAxisOptions {
        /**
         * Determines whether or not missing dates are displayed.
         */
        missingDateVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateDateDimensionField {
        /**
         * The column that is used in the `DateDimensionField` .
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The date granularity of the `DateDimensionField` . Choose one of the following options:
         *
         * - `YEAR`
         * - `QUARTER`
         * - `MONTH`
         * - `WEEK`
         * - `DAY`
         * - `HOUR`
         * - `MINUTE`
         * - `SECOND`
         * - `MILLISECOND`
         */
        dateGranularity?: enums.quicksight.TemplateTimeGranularity;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.TemplateDateTimeFormatConfiguration;
        /**
         * The custom hierarchy ID.
         */
        hierarchyId?: string;
    }

    export interface TemplateDateMeasureField {
        /**
         * The aggregation function of the measure field.
         */
        aggregationFunction?: enums.quicksight.TemplateDateAggregationFunction;
        /**
         * The column that is used in the `DateMeasureField` .
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.TemplateDateTimeFormatConfiguration;
    }

    export interface TemplateDateTimeDefaultValues {
        /**
         * The dynamic value of the `DataTimeDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.TemplateDynamicDefaultValue;
        /**
         * The rolling date of the `DataTimeDefaultValues` . The date is determined from the dataset based on input expression.
         */
        rollingDate?: outputs.quicksight.TemplateRollingDateConfiguration;
        /**
         * The static values of the `DataTimeDefaultValues` .
         */
        staticValues?: string[];
    }

    export interface TemplateDateTimeFormatConfiguration {
        /**
         * Determines the `DateTime` format.
         */
        dateTimeFormat?: string;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        /**
         * The formatting configuration for numeric `DateTime` fields.
         */
        numericFormatConfiguration?: outputs.quicksight.TemplateNumericFormatConfiguration;
    }

    export interface TemplateDateTimeHierarchy {
        /**
         * The option that determines the drill down filters for the `DateTime` hierarchy.
         */
        drillDownFilters?: outputs.quicksight.TemplateDrillDownFilter[];
        /**
         * The hierarchy ID of the `DateTime` hierarchy.
         */
        hierarchyId: string;
    }

    export interface TemplateDateTimeParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.TemplateDateTimeDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.TemplateMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
        /**
         * The configuration that defines the default value of a `DateTime` parameter when a value has not been set.
         */
        valueWhenUnset?: outputs.quicksight.TemplateDateTimeValueWhenUnsetConfiguration;
    }

    export interface TemplateDateTimePickerControlDisplayOptions {
        /**
         * Customize how dates are formatted in controls.
         */
        dateTimeFormat?: string;
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateDateTimeValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: string;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.TemplateValueWhenUnsetOption;
    }

    export interface TemplateDecimalDefaultValues {
        /**
         * The dynamic value of the `DecimalDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.TemplateDynamicDefaultValue;
        /**
         * The static values of the `DecimalDefaultValues` .
         */
        staticValues?: number[];
    }

    export interface TemplateDecimalParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.TemplateDecimalDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.TemplateMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The value type determines whether the parameter is a single-value or multi-value parameter.
         */
        parameterValueType: enums.quicksight.TemplateParameterValueType;
        /**
         * The configuration that defines the default value of a `Decimal` parameter when a value has not been set.
         */
        valueWhenUnset?: outputs.quicksight.TemplateDecimalValueWhenUnsetConfiguration;
    }

    export interface TemplateDecimalPlacesConfiguration {
        /**
         * The values of the decimal places.
         */
        decimalPlaces: number;
    }

    export interface TemplateDecimalValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: number;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.TemplateValueWhenUnsetOption;
    }

    export interface TemplateDefaultDateTimePickerControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateDateTimePickerControlDisplayOptions;
        /**
         * The date time picker type of the `DefaultDateTimePickerControlOptions` . Choose one of the following options:
         *
         * - `SINGLE_VALUED` : The filter condition is a fixed date.
         * - `DATE_RANGE` : The filter condition is a date time range.
         */
        type?: enums.quicksight.TemplateSheetControlDateTimePickerType;
    }

    export interface TemplateDefaultFilterControlConfiguration {
        /**
         * The control option for the `DefaultFilterControlConfiguration` .
         */
        controlOptions: outputs.quicksight.TemplateDefaultFilterControlOptions;
        /**
         * The title of the `DefaultFilterControlConfiguration` . This title is shared by all controls that are tied to this filter.
         */
        title: string;
    }

    export interface TemplateDefaultFilterControlOptions {
        /**
         * The default options that correspond to the filter control type of a `DateTimePicker` .
         */
        defaultDateTimePickerOptions?: outputs.quicksight.TemplateDefaultDateTimePickerControlOptions;
        /**
         * The default options that correspond to the `Dropdown` filter control type.
         */
        defaultDropdownOptions?: outputs.quicksight.TemplateDefaultFilterDropDownControlOptions;
        /**
         * The default options that correspond to the `List` filter control type.
         */
        defaultListOptions?: outputs.quicksight.TemplateDefaultFilterListControlOptions;
        /**
         * The default options that correspond to the `RelativeDateTime` filter control type.
         */
        defaultRelativeDateTimeOptions?: outputs.quicksight.TemplateDefaultRelativeDateTimeControlOptions;
        /**
         * The default options that correspond to the `Slider` filter control type.
         */
        defaultSliderOptions?: outputs.quicksight.TemplateDefaultSliderControlOptions;
        /**
         * The default options that correspond to the `TextArea` filter control type.
         */
        defaultTextAreaOptions?: outputs.quicksight.TemplateDefaultTextAreaControlOptions;
        /**
         * The default options that correspond to the `TextField` filter control type.
         */
        defaultTextFieldOptions?: outputs.quicksight.TemplateDefaultTextFieldControlOptions;
    }

    export interface TemplateDefaultFilterDropDownControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateDropDownControlDisplayOptions;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.TemplateFilterSelectableValues;
        /**
         * The type of the `FilterDropDownControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
         * - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
         */
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateDefaultFilterListControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateListControlDisplayOptions;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.TemplateFilterSelectableValues;
        /**
         * The type of the `DefaultFilterListControlOptions` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from the list.
         * - `SINGLE_SELECT` : The user can select a single entry from the list.
         */
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateDefaultFreeFormLayoutConfiguration {
        /**
         * Determines the screen canvas size options for a free-form layout.
         */
        canvasSizeOptions: outputs.quicksight.TemplateFreeFormLayoutCanvasSizeOptions;
    }

    export interface TemplateDefaultGridLayoutConfiguration {
        /**
         * Determines the screen canvas size options for a grid layout.
         */
        canvasSizeOptions: outputs.quicksight.TemplateGridLayoutCanvasSizeOptions;
    }

    export interface TemplateDefaultInteractiveLayoutConfiguration {
        /**
         * The options that determine the default settings of a free-form layout configuration.
         */
        freeForm?: outputs.quicksight.TemplateDefaultFreeFormLayoutConfiguration;
        /**
         * The options that determine the default settings for a grid layout configuration.
         */
        grid?: outputs.quicksight.TemplateDefaultGridLayoutConfiguration;
    }

    export interface TemplateDefaultNewSheetConfiguration {
        /**
         * The options that determine the default settings for interactive layout configuration.
         */
        interactiveLayoutConfiguration?: outputs.quicksight.TemplateDefaultInteractiveLayoutConfiguration;
        /**
         * The options that determine the default settings for a paginated layout configuration.
         */
        paginatedLayoutConfiguration?: outputs.quicksight.TemplateDefaultPaginatedLayoutConfiguration;
        /**
         * The option that determines the sheet content type.
         */
        sheetContentType?: enums.quicksight.TemplateSheetContentType;
    }

    export interface TemplateDefaultPaginatedLayoutConfiguration {
        /**
         * The options that determine the default settings for a section-based layout configuration.
         */
        sectionBased?: outputs.quicksight.TemplateDefaultSectionBasedLayoutConfiguration;
    }

    export interface TemplateDefaultRelativeDateTimeControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateRelativeDateTimeControlDisplayOptions;
    }

    export interface TemplateDefaultSectionBasedLayoutConfiguration {
        /**
         * Determines the screen canvas size options for a section-based layout.
         */
        canvasSizeOptions: outputs.quicksight.TemplateSectionBasedLayoutCanvasSizeOptions;
    }

    export interface TemplateDefaultSliderControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateSliderControlDisplayOptions;
        /**
         * The larger value that is displayed at the right of the slider.
         */
        maximumValue: number;
        /**
         * The smaller value that is displayed at the left of the slider.
         */
        minimumValue: number;
        /**
         * The number of increments that the slider bar is divided into.
         */
        stepSize: number;
        /**
         * The type of the `DefaultSliderControlOptions` . Choose one of the following options:
         *
         * - `SINGLE_POINT` : Filter against(equals) a single data point.
         * - `RANGE` : Filter data that is in a specified range.
         */
        type?: enums.quicksight.TemplateSheetControlSliderType;
    }

    export interface TemplateDefaultTextAreaControlOptions {
        /**
         * The delimiter that is used to separate the lines in text.
         */
        delimiter?: string;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateTextAreaControlDisplayOptions;
    }

    export interface TemplateDefaultTextFieldControlOptions {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateTextFieldControlDisplayOptions;
    }

    export interface TemplateDestinationParameterValueConfiguration {
        /**
         * The configuration of custom values for destination parameter in `DestinationParameterValueConfiguration` .
         */
        customValuesConfiguration?: outputs.quicksight.TemplateCustomValuesConfiguration;
        /**
         * The configuration that selects all options.
         */
        selectAllValueOptions?: enums.quicksight.TemplateSelectAllValueOptions;
        sourceColumn?: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The source field ID of the destination parameter.
         */
        sourceField?: string;
        /**
         * The source parameter name of the destination parameter.
         */
        sourceParameterName?: string;
    }

    export interface TemplateDimensionField {
        /**
         * The dimension type field with categorical type columns.
         */
        categoricalDimensionField?: outputs.quicksight.TemplateCategoricalDimensionField;
        /**
         * The dimension type field with date type columns.
         */
        dateDimensionField?: outputs.quicksight.TemplateDateDimensionField;
        /**
         * The dimension type field with numerical type columns.
         */
        numericalDimensionField?: outputs.quicksight.TemplateNumericalDimensionField;
    }

    export interface TemplateDonutCenterOptions {
        /**
         * Determines the visibility of the label in a donut chart. In the Amazon QuickSight console, this option is called `'Show total'` .
         */
        labelVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateDonutOptions {
        /**
         * The option for define the arc of the chart shape. Valid values are as follows:
         *
         * - `WHOLE` - A pie chart
         * - `SMALL` - A small-sized donut chart
         * - `MEDIUM` - A medium-sized donut chart
         * - `LARGE` - A large-sized donut chart
         */
        arcOptions?: outputs.quicksight.TemplateArcOptions;
        /**
         * The label options of the label that is displayed in the center of a donut chart. This option isn't available for pie charts.
         */
        donutCenterOptions?: outputs.quicksight.TemplateDonutCenterOptions;
    }

    export interface TemplateDrillDownFilter {
        /**
         * The category type drill down filter. This filter is used for string type columns.
         */
        categoryFilter?: outputs.quicksight.TemplateCategoryDrillDownFilter;
        /**
         * The numeric equality type drill down filter. This filter is used for number type columns.
         */
        numericEqualityFilter?: outputs.quicksight.TemplateNumericEqualityDrillDownFilter;
        /**
         * The time range drill down filter. This filter is used for date time columns.
         */
        timeRangeFilter?: outputs.quicksight.TemplateTimeRangeDrillDownFilter;
    }

    export interface TemplateDropDownControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the `Select all` options in a dropdown control.
         */
        selectAllOptions?: outputs.quicksight.TemplateListControlSelectAllOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateDynamicDefaultValue {
        /**
         * The column that contains the default value of each user or group.
         */
        defaultValueColumn: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The column that contains the group name.
         */
        groupNameColumn?: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The column that contains the username.
         */
        userNameColumn?: outputs.quicksight.TemplateColumnIdentifier;
    }

    export interface TemplateEmptyVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The data set that is used in the empty visual. Every visual requires a dataset to render.
         */
        dataSetIdentifier: string;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateEntity {
        /**
         * The hierarchical path of the entity within the analysis, template, or dashboard definition tree.
         */
        path?: string;
    }

    /**
     * <p>List of errors that occurred when the template version creation failed.</p>
     */
    export interface TemplateError {
        /**
         * <p>Description of the error type.</p>
         */
        message?: string;
        /**
         * Type of error.
         */
        type?: enums.quicksight.TemplateErrorType;
        /**
         * <p>An error path that shows which entities caused the template error.</p>
         */
        violatedEntities?: outputs.quicksight.TemplateEntity[];
    }

    export interface TemplateExcludePeriodConfiguration {
        /**
         * The amount or number of the exclude period.
         */
        amount: number;
        /**
         * The granularity or unit (day, month, year) of the exclude period.
         */
        granularity: enums.quicksight.TemplateTimeGranularity;
        /**
         * The status of the exclude period. Choose from the following options:
         *
         * - `ENABLED`
         * - `DISABLED`
         */
        status?: enums.quicksight.TemplateWidgetStatus;
    }

    export interface TemplateExplicitHierarchy {
        /**
         * The list of columns that define the explicit hierarchy.
         */
        columns: outputs.quicksight.TemplateColumnIdentifier[];
        /**
         * The option that determines the drill down filters for the explicit hierarchy.
         */
        drillDownFilters?: outputs.quicksight.TemplateDrillDownFilter[];
        /**
         * The hierarchy ID of the explicit hierarchy.
         */
        hierarchyId: string;
    }

    export interface TemplateFieldBasedTooltip {
        /**
         * The visibility of `Show aggregations` .
         */
        aggregationVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The fields configuration in the tooltip.
         */
        tooltipFields?: outputs.quicksight.TemplateTooltipItem[];
        /**
         * The type for the >tooltip title. Choose one of the following options:
         *
         * - `NONE` : Doesn't use the primary value as the title.
         * - `PRIMARY_VALUE` : Uses primary value as the title.
         */
        tooltipTitleType?: enums.quicksight.TemplateTooltipTitleType;
    }

    export interface TemplateFieldLabelType {
        /**
         * Indicates the field that is targeted by the field label.
         */
        fieldId?: string;
        /**
         * The visibility of the field label.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFieldSeriesItem {
        /**
         * The axis that you are binding the field to.
         */
        axisBinding: enums.quicksight.TemplateAxisBinding;
        /**
         * The field ID of the field for which you are setting the axis binding.
         */
        fieldId: string;
        /**
         * The options that determine the presentation of line series associated to the field.
         */
        settings?: outputs.quicksight.TemplateLineChartSeriesSettings;
    }

    export interface TemplateFieldSort {
        /**
         * The sort direction. Choose one of the following options:
         *
         * - `ASC` : Ascending
         * - `DESC` : Descending
         */
        direction: enums.quicksight.TemplateSortDirection;
        /**
         * The sort configuration target field.
         */
        fieldId: string;
    }

    export interface TemplateFieldSortOptions {
        /**
         * The sort configuration for a column that is not used in a field well.
         */
        columnSort?: outputs.quicksight.TemplateColumnSort;
        /**
         * The sort configuration for a field in a field well.
         */
        fieldSort?: outputs.quicksight.TemplateFieldSort;
    }

    export interface TemplateFieldTooltipItem {
        /**
         * The unique ID of the field that is targeted by the tooltip.
         */
        fieldId: string;
        /**
         * The label of the tooltip item.
         */
        label?: string;
        /**
         * The visibility of the tooltip item.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFilledMapAggregatedFieldWells {
        /**
         * The aggregated location field well of the filled map. Values are grouped by location fields.
         */
        geospatial?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The aggregated color field well of a filled map. Values are aggregated based on location fields.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateFilledMapConditionalFormatting {
        /**
         * Conditional formatting options of a `FilledMapVisual` .
         */
        conditionalFormattingOptions: outputs.quicksight.TemplateFilledMapConditionalFormattingOption[];
    }

    export interface TemplateFilledMapConditionalFormattingOption {
        /**
         * The conditional formatting that determines the shape of the filled map.
         */
        shape: outputs.quicksight.TemplateFilledMapShapeConditionalFormatting;
    }

    export interface TemplateFilledMapConfiguration {
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateFilledMapFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The map style options of the filled map visual.
         */
        mapStyleOptions?: outputs.quicksight.TemplateGeospatialMapStyleOptions;
        /**
         * The sort configuration of a `FilledMapVisual` .
         */
        sortConfiguration?: outputs.quicksight.TemplateFilledMapSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * The window options of the filled map visual.
         */
        windowOptions?: outputs.quicksight.TemplateGeospatialWindowOptions;
    }

    export interface TemplateFilledMapFieldWells {
        /**
         * The aggregated field well of the filled map.
         */
        filledMapAggregatedFieldWells?: outputs.quicksight.TemplateFilledMapAggregatedFieldWells;
    }

    export interface TemplateFilledMapShapeConditionalFormatting {
        /**
         * The field ID of the filled map shape.
         */
        fieldId: string;
        /**
         * The conditional formatting that determines the background color of a filled map's shape.
         */
        format?: outputs.quicksight.TemplateShapeConditionalFormat;
    }

    export interface TemplateFilledMapSortConfiguration {
        /**
         * The sort configuration of the location fields.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateFilledMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateFilledMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The conditional formatting of a `FilledMapVisual` .
         */
        conditionalFormatting?: outputs.quicksight.TemplateFilledMapConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface TemplateFilter {
        /**
         * A `CategoryFilter` filters text values.
         *
         * For more information, see [Adding text filters](https://docs.aws.amazon.com/quicksight/latest/user/add-a-text-filter-data-prep.html) in the *Amazon QuickSight User Guide* .
         */
        categoryFilter?: outputs.quicksight.TemplateCategoryFilter;
        /**
         * A `NumericEqualityFilter` filters numeric values that equal or do not equal a given numeric value.
         */
        numericEqualityFilter?: outputs.quicksight.TemplateNumericEqualityFilter;
        /**
         * A `NumericRangeFilter` filters numeric values that are either inside or outside a given numeric range.
         */
        numericRangeFilter?: outputs.quicksight.TemplateNumericRangeFilter;
        /**
         * A `RelativeDatesFilter` filters date values that are relative to a given date.
         */
        relativeDatesFilter?: outputs.quicksight.TemplateRelativeDatesFilter;
        /**
         * A `TimeEqualityFilter` filters date-time values that equal or do not equal a given date/time value.
         */
        timeEqualityFilter?: outputs.quicksight.TemplateTimeEqualityFilter;
        /**
         * A `TimeRangeFilter` filters date-time values that are either inside or outside a given date/time range.
         */
        timeRangeFilter?: outputs.quicksight.TemplateTimeRangeFilter;
        /**
         * A `TopBottomFilter` filters data to the top or bottom values for a given column.
         */
        topBottomFilter?: outputs.quicksight.TemplateTopBottomFilter;
    }

    export interface TemplateFilterControl {
        /**
         * A control from a filter that is scoped across more than one sheet. This represents your filter control on a sheet
         */
        crossSheet?: outputs.quicksight.TemplateFilterCrossSheetControl;
        /**
         * A control from a date filter that is used to specify date and time.
         */
        dateTimePicker?: outputs.quicksight.TemplateFilterDateTimePickerControl;
        /**
         * A control to display a dropdown list with buttons that are used to select a single value.
         */
        dropdown?: outputs.quicksight.TemplateFilterDropDownControl;
        /**
         * A control to display a list of buttons or boxes. This is used to select either a single value or multiple values.
         */
        list?: outputs.quicksight.TemplateFilterListControl;
        /**
         * A control from a date filter that is used to specify the relative date.
         */
        relativeDateTime?: outputs.quicksight.TemplateFilterRelativeDateTimeControl;
        /**
         * A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
         */
        slider?: outputs.quicksight.TemplateFilterSliderControl;
        /**
         * A control to display a text box that is used to enter multiple entries.
         */
        textArea?: outputs.quicksight.TemplateFilterTextAreaControl;
        /**
         * A control to display a text box that is used to enter a single entry.
         */
        textField?: outputs.quicksight.TemplateFilterTextFieldControl;
    }

    export interface TemplateFilterCrossSheetControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.TemplateCascadingControlConfiguration;
        /**
         * The ID of the `FilterCrossSheetControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterCrossSheetControl` .
         */
        sourceFilterId: string;
    }

    export interface TemplateFilterDateTimePickerControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateDateTimePickerControlDisplayOptions;
        /**
         * The ID of the `FilterDateTimePickerControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterDateTimePickerControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterDateTimePickerControl` .
         */
        title: string;
        /**
         * The type of the `FilterDropDownControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
         * - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
         */
        type?: enums.quicksight.TemplateSheetControlDateTimePickerType;
    }

    export interface TemplateFilterDropDownControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.TemplateCascadingControlConfiguration;
        /**
         * The display options of the `FilterDropDownControl` .
         */
        displayOptions?: outputs.quicksight.TemplateDropDownControlDisplayOptions;
        /**
         * The ID of the `FilterDropDownControl` .
         */
        filterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.TemplateFilterSelectableValues;
        /**
         * The source filter ID of the `FilterDropDownControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterDropDownControl` .
         */
        title: string;
        /**
         * The type of the `FilterDropDownControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from a dropdown menu.
         * - `SINGLE_SELECT` : The user can select a single entry from a dropdown menu.
         */
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateFilterGroup {
        /**
         * The filter new feature which can apply filter group to all data sets. Choose one of the following options:
         *
         * - `ALL_DATASETS`
         * - `SINGLE_DATASET`
         */
        crossDataset: enums.quicksight.TemplateCrossDatasetTypes;
        /**
         * The value that uniquely identifies a `FilterGroup` within a dashboard, template, or analysis.
         */
        filterGroupId: string;
        /**
         * The list of filters that are present in a `FilterGroup` .
         */
        filters: outputs.quicksight.TemplateFilter[];
        /**
         * The configuration that specifies what scope to apply to a `FilterGroup` .
         *
         * This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
         */
        scopeConfiguration: outputs.quicksight.TemplateFilterScopeConfiguration;
        /**
         * The status of the `FilterGroup` .
         */
        status?: enums.quicksight.TemplateWidgetStatus;
    }

    export interface TemplateFilterListConfiguration {
        /**
         * The list of category values for the filter.
         */
        categoryValues?: string[];
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.TemplateCategoryFilterMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption?: enums.quicksight.TemplateFilterNullOption;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.TemplateCategoryFilterSelectAllOptions;
    }

    export interface TemplateFilterListControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.TemplateCascadingControlConfiguration;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateListControlDisplayOptions;
        /**
         * The ID of the `FilterListControl` .
         */
        filterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.TemplateFilterSelectableValues;
        /**
         * The source filter ID of the `FilterListControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterListControl` .
         */
        title: string;
        /**
         * The type of the `FilterListControl` . Choose one of the following options:
         *
         * - `MULTI_SELECT` : The user can select multiple entries from the list.
         * - `SINGLE_SELECT` : The user can select a single entry from the list.
         */
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateFilterOperationSelectedFieldsConfiguration {
        /**
         * <p>The selected columns of a dataset.</p>
         */
        selectedColumns?: outputs.quicksight.TemplateColumnIdentifier[];
        /**
         * A structure that contains the options that choose which fields are filtered in the `CustomActionFilterOperation` .
         *
         * Valid values are defined as follows:
         *
         * - `ALL_FIELDS` : Applies the filter operation to all fields.
         */
        selectedFieldOptions?: enums.quicksight.TemplateSelectedFieldOptions;
        /**
         * Chooses the fields that are filtered in `CustomActionFilterOperation` .
         */
        selectedFields?: string[];
    }

    export interface TemplateFilterOperationTargetVisualsConfiguration {
        /**
         * The configuration of the same-sheet target visuals that you want to be filtered.
         */
        sameSheetTargetVisualConfiguration?: outputs.quicksight.TemplateSameSheetTargetVisualConfiguration;
    }

    export interface TemplateFilterRelativeDateTimeControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateRelativeDateTimeControlDisplayOptions;
        /**
         * The ID of the `FilterTextAreaControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterTextAreaControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterTextAreaControl` .
         */
        title: string;
    }

    export interface TemplateFilterScopeConfiguration {
        /**
         * The configuration that applies a filter to all sheets. When you choose `AllSheets` as the value for a `FilterScopeConfiguration` , this filter is applied to all visuals of all sheets in an Analysis, Dashboard, or Template. The `AllSheetsFilterScopeConfiguration` is chosen.
         */
        allSheets?: outputs.quicksight.TemplateAllSheetsFilterScopeConfiguration;
        /**
         * The configuration for applying a filter to specific sheets.
         */
        selectedSheets?: outputs.quicksight.TemplateSelectedSheetsFilterScopeConfiguration;
    }

    export interface TemplateFilterSelectableValues {
        /**
         * The values that are used in the `FilterSelectableValues` .
         */
        values?: string[];
    }

    export interface TemplateFilterSliderControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateSliderControlDisplayOptions;
        /**
         * The ID of the `FilterSliderControl` .
         */
        filterControlId: string;
        /**
         * The larger value that is displayed at the right of the slider.
         */
        maximumValue: number;
        /**
         * The smaller value that is displayed at the left of the slider.
         */
        minimumValue: number;
        /**
         * The source filter ID of the `FilterSliderControl` .
         */
        sourceFilterId: string;
        /**
         * The number of increments that the slider bar is divided into.
         */
        stepSize: number;
        /**
         * The title of the `FilterSliderControl` .
         */
        title: string;
        /**
         * The type of the `FilterSliderControl` . Choose one of the following options:
         *
         * - `SINGLE_POINT` : Filter against(equals) a single data point.
         * - `RANGE` : Filter data that is in a specified range.
         */
        type?: enums.quicksight.TemplateSheetControlSliderType;
    }

    export interface TemplateFilterTextAreaControl {
        /**
         * The delimiter that is used to separate the lines in text.
         */
        delimiter?: string;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateTextAreaControlDisplayOptions;
        /**
         * The ID of the `FilterTextAreaControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterTextAreaControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterTextAreaControl` .
         */
        title: string;
    }

    export interface TemplateFilterTextFieldControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateTextFieldControlDisplayOptions;
        /**
         * The ID of the `FilterTextFieldControl` .
         */
        filterControlId: string;
        /**
         * The source filter ID of the `FilterTextFieldControl` .
         */
        sourceFilterId: string;
        /**
         * The title of the `FilterTextFieldControl` .
         */
        title: string;
    }

    export interface TemplateFontConfiguration {
        /**
         * Determines the color of the text.
         */
        fontColor?: string;
        /**
         * Determines the appearance of decorative lines on the text.
         */
        fontDecoration?: enums.quicksight.TemplateFontDecoration;
        /**
         * The option that determines the text display size.
         */
        fontSize?: outputs.quicksight.TemplateFontSize;
        /**
         * Determines the text display face that is inherited by the given font family.
         */
        fontStyle?: enums.quicksight.TemplateFontStyle;
        /**
         * The option that determines the text display weight, or boldness.
         */
        fontWeight?: outputs.quicksight.TemplateFontWeight;
    }

    export interface TemplateFontSize {
        /**
         * The lexical name for the text size, proportional to its surrounding context.
         */
        relative?: enums.quicksight.TemplateRelativeFontSize;
    }

    export interface TemplateFontWeight {
        /**
         * The lexical name for the level of boldness of the text display.
         */
        name?: enums.quicksight.TemplateFontWeightName;
    }

    export interface TemplateForecastComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The custom seasonality value setup of a forecast computation.
         */
        customSeasonalityValue?: number;
        /**
         * The lower boundary setup of a forecast computation.
         */
        lowerBoundary?: number;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The periods backward setup of a forecast computation.
         */
        periodsBackward?: number;
        /**
         * The periods forward setup of a forecast computation.
         */
        periodsForward?: number;
        /**
         * The prediction interval setup of a forecast computation.
         */
        predictionInterval?: number;
        /**
         * The seasonality setup of a forecast computation. Choose one of the following options:
         *
         * - `AUTOMATIC`
         * - `CUSTOM` : Checks the custom seasonality value.
         */
        seasonality?: enums.quicksight.TemplateForecastComputationSeasonality;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.TemplateDimensionField;
        /**
         * The upper boundary setup of a forecast computation.
         */
        upperBoundary?: number;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateForecastConfiguration {
        /**
         * The forecast properties setup of a forecast in the line chart.
         */
        forecastProperties?: outputs.quicksight.TemplateTimeBasedForecastProperties;
        /**
         * The forecast scenario of a forecast in the line chart.
         */
        scenario?: outputs.quicksight.TemplateForecastScenario;
    }

    export interface TemplateForecastScenario {
        /**
         * The what-if analysis forecast setup with the target date.
         */
        whatIfPointScenario?: outputs.quicksight.TemplateWhatIfPointScenario;
        /**
         * The what-if analysis forecast setup with the date range.
         */
        whatIfRangeScenario?: outputs.quicksight.TemplateWhatIfRangeScenario;
    }

    export interface TemplateFormatConfiguration {
        /**
         * Formatting configuration for `DateTime` fields.
         */
        dateTimeFormatConfiguration?: outputs.quicksight.TemplateDateTimeFormatConfiguration;
        /**
         * Formatting configuration for number fields.
         */
        numberFormatConfiguration?: outputs.quicksight.TemplateNumberFormatConfiguration;
        /**
         * Formatting configuration for string fields.
         */
        stringFormatConfiguration?: outputs.quicksight.TemplateStringFormatConfiguration;
    }

    export interface TemplateFreeFormLayoutCanvasSizeOptions {
        /**
         * The options that determine the sizing of the canvas used in a free-form layout.
         */
        screenCanvasSizeOptions?: outputs.quicksight.TemplateFreeFormLayoutScreenCanvasSizeOptions;
    }

    export interface TemplateFreeFormLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.TemplateFreeFormLayoutCanvasSizeOptions;
        /**
         * The elements that are included in a free-form layout.
         */
        elements: outputs.quicksight.TemplateFreeFormLayoutElement[];
    }

    export interface TemplateFreeFormLayoutElement {
        /**
         * The background style configuration of a free-form layout element.
         */
        backgroundStyle?: outputs.quicksight.TemplateFreeFormLayoutElementBackgroundStyle;
        /**
         * The border style configuration of a free-form layout element.
         */
        borderStyle?: outputs.quicksight.TemplateFreeFormLayoutElementBorderStyle;
        /**
         * A unique identifier for an element within a free-form layout.
         */
        elementId: string;
        /**
         * The type of element.
         */
        elementType: enums.quicksight.TemplateLayoutElementType;
        /**
         * String based length that is composed of value and unit in px
         */
        height: string;
        /**
         * The loading animation configuration of a free-form layout element.
         */
        loadingAnimation?: outputs.quicksight.TemplateLoadingAnimation;
        /**
         * The rendering rules that determine when an element should be displayed within a free-form layout.
         */
        renderingRules?: outputs.quicksight.TemplateSheetElementRenderingRule[];
        /**
         * The border style configuration of a free-form layout element. This border style is used when the element is selected.
         */
        selectedBorderStyle?: outputs.quicksight.TemplateFreeFormLayoutElementBorderStyle;
        /**
         * The visibility of an element within a free-form layout.
         */
        visibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width: string;
        /**
         * String based length that is composed of value and unit in px
         */
        xAxisLocation: string;
        /**
         * String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
         */
        yAxisLocation: string;
    }

    export interface TemplateFreeFormLayoutElementBackgroundStyle {
        /**
         * The background color of a free-form layout element.
         */
        color?: string;
        /**
         * The background visibility of a free-form layout element.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFreeFormLayoutElementBorderStyle {
        /**
         * The border color of a free-form layout element.
         */
        color?: string;
        /**
         * The border visibility of a free-form layout element.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFreeFormLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth: string;
    }

    export interface TemplateFreeFormSectionLayoutConfiguration {
        /**
         * The elements that are included in the free-form layout.
         */
        elements: outputs.quicksight.TemplateFreeFormLayoutElement[];
    }

    export interface TemplateFunnelChartAggregatedFieldWells {
        /**
         * The category field wells of a funnel chart. Values are grouped by category fields.
         */
        category?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The value field wells of a funnel chart. Values are aggregated based on categories.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateFunnelChartConfiguration {
        /**
         * The label options of the categories that are displayed in a `FunnelChartVisual` .
         */
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The options that determine the presentation of the data labels.
         */
        dataLabelOptions?: outputs.quicksight.TemplateFunnelChartDataLabelOptions;
        /**
         * The field well configuration of a `FunnelChartVisual` .
         */
        fieldWells?: outputs.quicksight.TemplateFunnelChartFieldWells;
        /**
         * The sort configuration of a `FunnelChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.TemplateFunnelChartSortConfiguration;
        /**
         * The tooltip configuration of a `FunnelChartVisual` .
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * The label options for the values that are displayed in a `FunnelChartVisual` .
         */
        valueLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The visual palette configuration of a `FunnelChartVisual` .
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateFunnelChartDataLabelOptions {
        /**
         * The visibility of the category labels within the data labels.
         */
        categoryLabelVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The color of the data label text.
         */
        labelColor?: string;
        /**
         * The font configuration for the data labels.
         *
         * Only the `FontSize` attribute of the font configuration is used for data labels.
         */
        labelFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        /**
         * Determines the style of the metric labels.
         */
        measureDataLabelStyle?: enums.quicksight.TemplateFunnelChartMeasureDataLabelStyle;
        /**
         * The visibility of the measure labels within the data labels.
         */
        measureLabelVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * Determines the positioning of the data label relative to a section of the funnel.
         */
        position?: enums.quicksight.TemplateDataLabelPosition;
        /**
         * The visibility option that determines if data labels are displayed.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateFunnelChartFieldWells {
        /**
         * The field well configuration of a `FunnelChartVisual` .
         */
        funnelChartAggregatedFieldWells?: outputs.quicksight.TemplateFunnelChartAggregatedFieldWells;
    }

    export interface TemplateFunnelChartSortConfiguration {
        /**
         * The limit on the number of categories displayed.
         */
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateFunnelChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration of a `FunnelChartVisual` .
         */
        chartConfiguration?: outputs.quicksight.TemplateFunnelChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface TemplateGaugeChartArcConditionalFormatting {
        /**
         * The conditional formatting of the arc foreground color.
         */
        foregroundColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateGaugeChartConditionalFormatting {
        /**
         * Conditional formatting options of a `GaugeChartVisual` .
         */
        conditionalFormattingOptions?: outputs.quicksight.TemplateGaugeChartConditionalFormattingOption[];
    }

    export interface TemplateGaugeChartConditionalFormattingOption {
        /**
         * The options that determine the presentation of the arc of a `GaugeChartVisual` .
         */
        arc?: outputs.quicksight.TemplateGaugeChartArcConditionalFormatting;
        /**
         * The conditional formatting for the primary value of a `GaugeChartVisual` .
         */
        primaryValue?: outputs.quicksight.TemplateGaugeChartPrimaryValueConditionalFormatting;
    }

    export interface TemplateGaugeChartConfiguration {
        /**
         * The data label configuration of a `GaugeChartVisual` .
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The field well configuration of a `GaugeChartVisual` .
         */
        fieldWells?: outputs.quicksight.TemplateGaugeChartFieldWells;
        /**
         * The options that determine the presentation of the `GaugeChartVisual` .
         */
        gaugeChartOptions?: outputs.quicksight.TemplateGaugeChartOptions;
        /**
         * The tooltip configuration of a `GaugeChartVisual` .
         */
        tooltipOptions?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * The visual palette configuration of a `GaugeChartVisual` .
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateGaugeChartFieldWells {
        /**
         * The target value field wells of a `GaugeChartVisual` .
         */
        targetValues?: outputs.quicksight.TemplateMeasureField[];
        /**
         * The value field wells of a `GaugeChartVisual` .
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateGaugeChartOptions {
        /**
         * The arc configuration of a `GaugeChartVisual` .
         */
        arc?: outputs.quicksight.TemplateArcConfiguration;
        /**
         * The arc axis configuration of a `GaugeChartVisual` .
         */
        arcAxis?: outputs.quicksight.TemplateArcAxisConfiguration;
        /**
         * The comparison configuration of a `GaugeChartVisual` .
         */
        comparison?: outputs.quicksight.TemplateComparisonConfiguration;
        /**
         * The options that determine the primary value display type.
         */
        primaryValueDisplayType?: enums.quicksight.TemplatePrimaryValueDisplayType;
        /**
         * The options that determine the primary value font configuration.
         */
        primaryValueFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
    }

    export interface TemplateGaugeChartPrimaryValueConditionalFormatting {
        /**
         * The conditional formatting of the primary value icon.
         */
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        /**
         * The conditional formatting of the primary value text color.
         */
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateGaugeChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration of a `GaugeChartVisual` .
         */
        chartConfiguration?: outputs.quicksight.TemplateGaugeChartConfiguration;
        /**
         * The conditional formatting of a `GaugeChartVisual` .
         */
        conditionalFormatting?: outputs.quicksight.TemplateGaugeChartConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateGeospatialCoordinateBounds {
        /**
         * The longitude of the east bound of the geospatial coordinate bounds.
         */
        east: number;
        /**
         * The latitude of the north bound of the geospatial coordinate bounds.
         */
        north: number;
        /**
         * The latitude of the south bound of the geospatial coordinate bounds.
         */
        south: number;
        /**
         * The longitude of the west bound of the geospatial coordinate bounds.
         */
        west: number;
    }

    export interface TemplateGeospatialHeatmapColorScale {
        /**
         * The list of colors to be used in heatmap point style.
         */
        colors?: outputs.quicksight.TemplateGeospatialHeatmapDataColor[];
    }

    export interface TemplateGeospatialHeatmapConfiguration {
        /**
         * The color scale specification for the heatmap point style.
         */
        heatmapColor?: outputs.quicksight.TemplateGeospatialHeatmapColorScale;
    }

    export interface TemplateGeospatialHeatmapDataColor {
        /**
         * The hex color to be used in the heatmap point style.
         */
        color: string;
    }

    export interface TemplateGeospatialMapAggregatedFieldWells {
        /**
         * The color field wells of a geospatial map.
         */
        colors?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The geospatial field wells of a geospatial map. Values are grouped by geospatial fields.
         */
        geospatial?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The size field wells of a geospatial map. Values are aggregated based on geospatial fields.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateGeospatialMapConfiguration {
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateGeospatialMapFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The map style options of the geospatial map.
         */
        mapStyleOptions?: outputs.quicksight.TemplateGeospatialMapStyleOptions;
        /**
         * The point style options of the geospatial map.
         */
        pointStyleOptions?: outputs.quicksight.TemplateGeospatialPointStyleOptions;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        /**
         * The window options of the geospatial map.
         */
        windowOptions?: outputs.quicksight.TemplateGeospatialWindowOptions;
    }

    export interface TemplateGeospatialMapFieldWells {
        /**
         * The aggregated field well for a geospatial map.
         */
        geospatialMapAggregatedFieldWells?: outputs.quicksight.TemplateGeospatialMapAggregatedFieldWells;
    }

    export interface TemplateGeospatialMapStyleOptions {
        /**
         * The base map style of the geospatial map.
         */
        baseMapStyle?: enums.quicksight.TemplateBaseMapStyleType;
    }

    export interface TemplateGeospatialMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateGeospatialMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface TemplateGeospatialPointStyleOptions {
        /**
         * The cluster marker configuration of the geospatial point style.
         */
        clusterMarkerConfiguration?: outputs.quicksight.TemplateClusterMarkerConfiguration;
        /**
         * The heatmap configuration of the geospatial point style.
         */
        heatmapConfiguration?: outputs.quicksight.TemplateGeospatialHeatmapConfiguration;
        /**
         * The selected point styles (point, cluster) of the geospatial map.
         */
        selectedPointStyle?: enums.quicksight.TemplateGeospatialSelectedPointStyle;
    }

    export interface TemplateGeospatialWindowOptions {
        /**
         * The bounds options (north, south, west, east) of the geospatial window options.
         */
        bounds?: outputs.quicksight.TemplateGeospatialCoordinateBounds;
        /**
         * The map zoom modes (manual, auto) of the geospatial window options.
         */
        mapZoomMode?: enums.quicksight.TemplateMapZoomMode;
    }

    export interface TemplateGlobalTableBorderOptions {
        /**
         * Determines the options for side specific border.
         */
        sideSpecificBorder?: outputs.quicksight.TemplateTableSideBorderOptions;
        /**
         * Determines the options for uniform border.
         */
        uniformBorder?: outputs.quicksight.TemplateTableBorderOptions;
    }

    export interface TemplateGradientColor {
        /**
         * The list of gradient color stops.
         */
        stops?: outputs.quicksight.TemplateGradientStop[];
    }

    export interface TemplateGradientStop {
        /**
         * Determines the color.
         */
        color?: string;
        /**
         * Determines the data value.
         */
        dataValue?: number;
        /**
         * Determines gradient offset value.
         */
        gradientOffset: number;
    }

    export interface TemplateGridLayoutCanvasSizeOptions {
        /**
         * The options that determine the sizing of the canvas used in a grid layout.
         */
        screenCanvasSizeOptions?: outputs.quicksight.TemplateGridLayoutScreenCanvasSizeOptions;
    }

    export interface TemplateGridLayoutConfiguration {
        canvasSizeOptions?: outputs.quicksight.TemplateGridLayoutCanvasSizeOptions;
        /**
         * The elements that are included in a grid layout.
         */
        elements: outputs.quicksight.TemplateGridLayoutElement[];
    }

    export interface TemplateGridLayoutElement {
        /**
         * The column index for the upper left corner of an element.
         */
        columnIndex?: number;
        /**
         * The width of a grid element expressed as a number of grid columns.
         */
        columnSpan: number;
        /**
         * A unique identifier for an element within a grid layout.
         */
        elementId: string;
        /**
         * The type of element.
         */
        elementType: enums.quicksight.TemplateLayoutElementType;
        /**
         * The row index for the upper left corner of an element.
         */
        rowIndex?: number;
        /**
         * The height of a grid element expressed as a number of grid rows.
         */
        rowSpan: number;
    }

    export interface TemplateGridLayoutScreenCanvasSizeOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        optimizedViewPortWidth?: string;
        /**
         * This value determines the layout behavior when the viewport is resized.
         *
         * - `FIXED` : A fixed width will be used when optimizing the layout. In the Amazon QuickSight console, this option is called `Classic` .
         * - `RESPONSIVE` : The width of the canvas will be responsive and optimized to the view port. In the Amazon QuickSight console, this option is called `Tiled` .
         */
        resizeOption: enums.quicksight.TemplateResizeOption;
    }

    export interface TemplateGrowthRateComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The period size setup of a growth rate computation.
         */
        periodSize?: number;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.TemplateDimensionField;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateHeaderFooterSectionConfiguration {
        /**
         * The layout configuration of the header or footer section.
         */
        layout: outputs.quicksight.TemplateSectionLayoutConfiguration;
        /**
         * The unique identifier of the header or footer section.
         */
        sectionId: string;
        /**
         * The style options of a header or footer section.
         */
        style?: outputs.quicksight.TemplateSectionStyle;
    }

    export interface TemplateHeatMapAggregatedFieldWells {
        /**
         * The columns field well of a heat map.
         */
        columns?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The rows field well of a heat map.
         */
        rows?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The values field well of a heat map.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateHeatMapConfiguration {
        /**
         * The color options (gradient color, point of divergence) in a heat map.
         */
        colorScale?: outputs.quicksight.TemplateColorScale;
        /**
         * The label options of the column that is displayed in a heat map.
         */
        columnLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateHeatMapFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The label options of the row that is displayed in a `heat map` .
         */
        rowLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The sort configuration of a heat map.
         */
        sortConfiguration?: outputs.quicksight.TemplateHeatMapSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
    }

    export interface TemplateHeatMapFieldWells {
        /**
         * The aggregated field wells of a heat map.
         */
        heatMapAggregatedFieldWells?: outputs.quicksight.TemplateHeatMapAggregatedFieldWells;
    }

    export interface TemplateHeatMapSortConfiguration {
        /**
         * The limit on the number of columns that are displayed in a heat map.
         */
        heatMapColumnItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The column sort configuration for heat map for columns that aren't a part of a field well.
         */
        heatMapColumnSort?: outputs.quicksight.TemplateFieldSortOptions[];
        /**
         * The limit on the number of rows that are displayed in a heat map.
         */
        heatMapRowItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The field sort configuration of the rows fields.
         */
        heatMapRowSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateHeatMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration of a heat map.
         */
        chartConfiguration?: outputs.quicksight.TemplateHeatMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateHistogramAggregatedFieldWells {
        /**
         * The value field wells of a histogram. Values are aggregated by `COUNT` or `DISTINCT_COUNT` .
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateHistogramBinOptions {
        /**
         * The options that determine the bin count of a histogram.
         */
        binCount?: outputs.quicksight.TemplateBinCountOptions;
        /**
         * The options that determine the bin width of a histogram.
         */
        binWidth?: outputs.quicksight.TemplateBinWidthOptions;
        /**
         * The options that determine the selected bin type.
         */
        selectedBinType?: enums.quicksight.TemplateHistogramBinType;
        /**
         * The options that determine the bin start value.
         */
        startValue?: number;
    }

    export interface TemplateHistogramConfiguration {
        /**
         * The options that determine the presentation of histogram bins.
         */
        binOptions?: outputs.quicksight.TemplateHistogramBinOptions;
        /**
         * The data label configuration of a histogram.
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The field well configuration of a histogram.
         */
        fieldWells?: outputs.quicksight.TemplateHistogramFieldWells;
        /**
         * The tooltip configuration of a histogram.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * The visual palette configuration of a histogram.
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        /**
         * The options that determine the presentation of the x-axis.
         */
        xAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The options that determine the presentation of the x-axis label.
         */
        xAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The options that determine the presentation of the y-axis.
         */
        yAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
    }

    export interface TemplateHistogramFieldWells {
        /**
         * The field well configuration of a histogram.
         */
        histogramAggregatedFieldWells?: outputs.quicksight.TemplateHistogramAggregatedFieldWells;
    }

    export interface TemplateHistogramVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration for a `HistogramVisual` .
         */
        chartConfiguration?: outputs.quicksight.TemplateHistogramConfiguration;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateInsightConfiguration {
        /**
         * The computations configurations of the insight visual
         */
        computations?: outputs.quicksight.TemplateComputation[];
        /**
         * The custom narrative of the insight visual.
         */
        customNarrative?: outputs.quicksight.TemplateCustomNarrativeOptions;
    }

    export interface TemplateInsightVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The dataset that is used in the insight visual.
         */
        dataSetIdentifier: string;
        /**
         * The configuration of an insight visual.
         */
        insightConfiguration?: outputs.quicksight.TemplateInsightConfiguration;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateIntegerDefaultValues {
        /**
         * The dynamic value of the `IntegerDefaultValues` . Different defaults are displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.TemplateDynamicDefaultValue;
        /**
         * The static values of the `IntegerDefaultValues` .
         */
        staticValues?: number[];
    }

    export interface TemplateIntegerParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.TemplateIntegerDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.TemplateMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The value type determines whether the parameter is a single-value or multi-value parameter.
         */
        parameterValueType: enums.quicksight.TemplateParameterValueType;
        /**
         * A parameter declaration for the `Integer` data type.
         */
        valueWhenUnset?: outputs.quicksight.TemplateIntegerValueWhenUnsetConfiguration;
    }

    export interface TemplateIntegerValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: number;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.TemplateValueWhenUnsetOption;
    }

    export interface TemplateItemsLimitConfiguration {
        /**
         * The limit on how many items of a field are showed in the chart. For example, the number of slices that are displayed in a pie chart.
         */
        itemsLimit?: number;
        /**
         * The `Show other` of an axis in the chart. Choose one of the following options:
         *
         * - `INCLUDE`
         * - `EXCLUDE`
         */
        otherCategories?: enums.quicksight.TemplateOtherCategories;
    }

    export interface TemplateKpiActualValueConditionalFormatting {
        /**
         * The conditional formatting of the actual value's icon.
         */
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        /**
         * The conditional formatting of the actual value's text color.
         */
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateKpiComparisonValueConditionalFormatting {
        /**
         * The conditional formatting of the comparison value's icon.
         */
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        /**
         * The conditional formatting of the comparison value's text color.
         */
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateKpiConditionalFormatting {
        /**
         * The conditional formatting options of a KPI visual.
         */
        conditionalFormattingOptions?: outputs.quicksight.TemplateKpiConditionalFormattingOption[];
    }

    export interface TemplateKpiConditionalFormattingOption {
        /**
         * The conditional formatting for the actual value of a KPI visual.
         */
        actualValue?: outputs.quicksight.TemplateKpiActualValueConditionalFormatting;
        /**
         * The conditional formatting for the comparison value of a KPI visual.
         */
        comparisonValue?: outputs.quicksight.TemplateKpiComparisonValueConditionalFormatting;
        /**
         * The conditional formatting for the primary value of a KPI visual.
         */
        primaryValue?: outputs.quicksight.TemplateKpiPrimaryValueConditionalFormatting;
        /**
         * The conditional formatting for the progress bar of a KPI visual.
         */
        progressBar?: outputs.quicksight.TemplateKpiProgressBarConditionalFormatting;
    }

    export interface TemplateKpiConfiguration {
        /**
         * The field well configuration of a KPI visual.
         */
        fieldWells?: outputs.quicksight.TemplateKpiFieldWells;
        /**
         * The options that determine the presentation of a KPI visual.
         */
        kpiOptions?: outputs.quicksight.TemplateKpiOptions;
        /**
         * The sort configuration of a KPI visual.
         */
        sortConfiguration?: outputs.quicksight.TemplateKpiSortConfiguration;
    }

    export interface TemplateKpiFieldWells {
        /**
         * The target value field wells of a KPI visual.
         */
        targetValues?: outputs.quicksight.TemplateMeasureField[];
        /**
         * The trend group field wells of a KPI visual.
         */
        trendGroups?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The value field wells of a KPI visual.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateKpiOptions {
        /**
         * The comparison configuration of a KPI visual.
         */
        comparison?: outputs.quicksight.TemplateComparisonConfiguration;
        /**
         * The options that determine the primary value display type.
         */
        primaryValueDisplayType?: enums.quicksight.TemplatePrimaryValueDisplayType;
        /**
         * The options that determine the primary value font configuration.
         */
        primaryValueFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        /**
         * The options that determine the presentation of the progress bar of a KPI visual.
         */
        progressBar?: outputs.quicksight.TemplateProgressBarOptions;
        /**
         * The options that determine the presentation of the secondary value of a KPI visual.
         */
        secondaryValue?: outputs.quicksight.TemplateSecondaryValueOptions;
        /**
         * The options that determine the secondary value font configuration.
         */
        secondaryValueFontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        /**
         * The options that determine the visibility, color, type, and tooltip visibility of the sparkline of a KPI visual.
         */
        sparkline?: outputs.quicksight.TemplateKpiSparklineOptions;
        /**
         * The options that determine the presentation of trend arrows in a KPI visual.
         */
        trendArrows?: outputs.quicksight.TemplateTrendArrowOptions;
        /**
         * The options that determine the layout a KPI visual.
         */
        visualLayoutOptions?: outputs.quicksight.TemplateKpiVisualLayoutOptions;
    }

    export interface TemplateKpiPrimaryValueConditionalFormatting {
        /**
         * The conditional formatting of the primary value's icon.
         */
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        /**
         * The conditional formatting of the primary value's text color.
         */
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateKpiProgressBarConditionalFormatting {
        /**
         * The conditional formatting of the progress bar's foreground color.
         */
        foregroundColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateKpiSortConfiguration {
        /**
         * The sort configuration of the trend group fields.
         */
        trendGroupSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateKpiSparklineOptions {
        /**
         * The color of the sparkline.
         */
        color?: string;
        /**
         * The tooltip visibility of the sparkline.
         */
        tooltipVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The type of the sparkline.
         */
        type: enums.quicksight.TemplateKpiSparklineType;
        /**
         * The visibility of the sparkline.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateKpiVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration of a KPI visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateKpiConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The conditional formatting of a KPI visual.
         */
        conditionalFormatting?: outputs.quicksight.TemplateKpiConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateKpiVisualLayoutOptions {
        /**
         * The standard layout of the KPI visual.
         */
        standardLayout?: outputs.quicksight.TemplateKpiVisualStandardLayout;
    }

    export interface TemplateKpiVisualStandardLayout {
        /**
         * The standard layout type.
         */
        type: enums.quicksight.TemplateKpiVisualStandardLayoutType;
    }

    export interface TemplateLabelOptions {
        /**
         * The text for the label.
         */
        customLabel?: string;
        /**
         * The font configuration of the label.
         */
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        /**
         * Determines whether or not the label is visible.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateLayout {
        /**
         * The configuration that determines what the type of layout for a sheet.
         */
        configuration: outputs.quicksight.TemplateLayoutConfiguration;
    }

    export interface TemplateLayoutConfiguration {
        /**
         * A free-form is optimized for a fixed width and has more control over the exact placement of layout elements.
         */
        freeFormLayout?: outputs.quicksight.TemplateFreeFormLayoutConfiguration;
        /**
         * A type of layout that can be used on a sheet. In a grid layout, visuals snap to a grid with standard spacing and alignment. Dashboards are displayed as designed, with options to fit to screen or view at actual size. A grid layout can be configured to behave in one of two ways when the viewport is resized: `FIXED` or `RESPONSIVE` .
         */
        gridLayout?: outputs.quicksight.TemplateGridLayoutConfiguration;
        /**
         * A section based layout organizes visuals into multiple sections and has customized header, footer and page break.
         */
        sectionBasedLayout?: outputs.quicksight.TemplateSectionBasedLayoutConfiguration;
    }

    export interface TemplateLegendOptions {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        /**
         * The positions for the legend. Choose one of the following options:
         *
         * - `AUTO`
         * - `RIGHT`
         * - `BOTTOM`
         * - `LEFT`
         */
        position?: enums.quicksight.TemplateLegendPosition;
        /**
         * The custom title for the legend.
         */
        title?: outputs.quicksight.TemplateLabelOptions;
        /**
         * Determines whether or not the legend is visible.
         */
        visibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface TemplateLineChartAggregatedFieldWells {
        /**
         * The category field wells of a line chart. Values are grouped by category fields.
         */
        category?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The color field wells of a line chart. Values are grouped by category fields.
         */
        colors?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The small multiples field well of a line chart.
         */
        smallMultiples?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The value field wells of a line chart. Values are aggregated based on categories.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateLineChartConfiguration {
        /**
         * The default configuration of a line chart's contribution analysis.
         */
        contributionAnalysisDefaults?: outputs.quicksight.TemplateContributionAnalysisDefault[];
        /**
         * The data label configuration of a line chart.
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The options that determine the default presentation of all line series in `LineChartVisual` .
         */
        defaultSeriesSettings?: outputs.quicksight.TemplateLineChartDefaultSeriesSettings;
        /**
         * The field well configuration of a line chart.
         */
        fieldWells?: outputs.quicksight.TemplateLineChartFieldWells;
        /**
         * The forecast configuration of a line chart.
         */
        forecastConfigurations?: outputs.quicksight.TemplateForecastConfiguration[];
        /**
         * The legend configuration of a line chart.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The series axis configuration of a line chart.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.TemplateLineSeriesAxisDisplayOptions;
        /**
         * The options that determine the presentation of the y-axis label.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The reference lines configuration of a line chart.
         */
        referenceLines?: outputs.quicksight.TemplateReferenceLine[];
        /**
         * The series axis configuration of a line chart.
         */
        secondaryYAxisDisplayOptions?: outputs.quicksight.TemplateLineSeriesAxisDisplayOptions;
        /**
         * The options that determine the presentation of the secondary y-axis label.
         */
        secondaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The series item configuration of a line chart.
         */
        series?: outputs.quicksight.TemplateSeriesItem[];
        /**
         * The small multiples setup for the visual.
         */
        smallMultiplesOptions?: outputs.quicksight.TemplateSmallMultiplesOptions;
        /**
         * The sort configuration of a line chart.
         */
        sortConfiguration?: outputs.quicksight.TemplateLineChartSortConfiguration;
        /**
         * The tooltip configuration of a line chart.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * Determines the type of the line chart.
         */
        type?: enums.quicksight.TemplateLineChartType;
        /**
         * The visual palette configuration of a line chart.
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        /**
         * The options that determine the presentation of the x-axis.
         */
        xAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The options that determine the presentation of the x-axis label.
         */
        xAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
    }

    export interface TemplateLineChartDefaultSeriesSettings {
        /**
         * The axis to which you are binding all line series to.
         */
        axisBinding?: enums.quicksight.TemplateAxisBinding;
        /**
         * Line styles options for all line series in the visual.
         */
        lineStyleSettings?: outputs.quicksight.TemplateLineChartLineStyleSettings;
        /**
         * Marker styles options for all line series in the visual.
         */
        markerStyleSettings?: outputs.quicksight.TemplateLineChartMarkerStyleSettings;
    }

    export interface TemplateLineChartFieldWells {
        /**
         * The field well configuration of a line chart.
         */
        lineChartAggregatedFieldWells?: outputs.quicksight.TemplateLineChartAggregatedFieldWells;
    }

    export interface TemplateLineChartLineStyleSettings {
        /**
         * Interpolation style for line series.
         *
         * - `LINEAR` : Show as default, linear style.
         * - `SMOOTH` : Show as a smooth curve.
         * - `STEPPED` : Show steps in line.
         */
        lineInterpolation?: enums.quicksight.TemplateLineInterpolation;
        /**
         * Line style for line series.
         *
         * - `SOLID` : Show as a solid line.
         * - `DOTTED` : Show as a dotted line.
         * - `DASHED` : Show as a dashed line.
         */
        lineStyle?: enums.quicksight.TemplateLineChartLineStyle;
        /**
         * Configuration option that determines whether to show the line for the series.
         */
        lineVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        lineWidth?: string;
    }

    export interface TemplateLineChartMarkerStyleSettings {
        /**
         * Color of marker in the series.
         */
        markerColor?: string;
        /**
         * Shape option for markers in the series.
         *
         * - `CIRCLE` : Show marker as a circle.
         * - `TRIANGLE` : Show marker as a triangle.
         * - `SQUARE` : Show marker as a square.
         * - `DIAMOND` : Show marker as a diamond.
         * - `ROUNDED_SQUARE` : Show marker as a rounded square.
         */
        markerShape?: enums.quicksight.TemplateLineChartMarkerShape;
        /**
         * String based length that is composed of value and unit in px
         */
        markerSize?: string;
        /**
         * Configuration option that determines whether to show the markers in the series.
         */
        markerVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateLineChartSeriesSettings {
        /**
         * Line styles options for a line series in `LineChartVisual` .
         */
        lineStyleSettings?: outputs.quicksight.TemplateLineChartLineStyleSettings;
        /**
         * Marker styles options for a line series in `LineChartVisual` .
         */
        markerStyleSettings?: outputs.quicksight.TemplateLineChartMarkerStyleSettings;
    }

    export interface TemplateLineChartSortConfiguration {
        /**
         * The limit on the number of categories that are displayed in a line chart.
         */
        categoryItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        /**
         * The limit on the number of lines that are displayed in a line chart.
         */
        colorItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The limit on the number of small multiples panels that are displayed.
         */
        smallMultiplesLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the small multiples field.
         */
        smallMultiplesSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateLineChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration of a line chart.
         */
        chartConfiguration?: outputs.quicksight.TemplateLineChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateLineSeriesAxisDisplayOptions {
        /**
         * The options that determine the presentation of the line series axis.
         */
        axisOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The configuration options that determine how missing data is treated during the rendering of a line chart.
         */
        missingDataConfigurations?: outputs.quicksight.TemplateMissingDataConfiguration[];
    }

    export interface TemplateListControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the search options in a list control.
         */
        searchOptions?: outputs.quicksight.TemplateListControlSearchOptions;
        /**
         * The configuration of the `Select all` options in a list control.
         */
        selectAllOptions?: outputs.quicksight.TemplateListControlSelectAllOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateListControlSearchOptions {
        /**
         * The visibility configuration of the search options in a list control.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateListControlSelectAllOptions {
        /**
         * The visibility configuration of the `Select all` options in a list control.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateLoadingAnimation {
        /**
         * The visibility configuration of `LoadingAnimation` .
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateLocalNavigationConfiguration {
        /**
         * The sheet that is targeted for navigation in the same analysis.
         */
        targetSheetId: string;
    }

    export interface TemplateLongFormatText {
        /**
         * Plain text format.
         */
        plainText?: string;
        /**
         * Rich text. Examples of rich text include bold, underline, and italics.
         */
        richText?: string;
    }

    export interface TemplateMappedDataSetParameter {
        /**
         * A unique name that identifies a dataset within the analysis or dashboard.
         */
        dataSetIdentifier: string;
        /**
         * The name of the dataset parameter.
         */
        dataSetParameterName: string;
    }

    export interface TemplateMaximumLabelType {
        /**
         * The visibility of the maximum label.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateMaximumMinimumComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.TemplateDimensionField;
        /**
         * The type of computation. Choose one of the following options:
         *
         * - MAXIMUM: A maximum computation.
         * - MINIMUM: A minimum computation.
         */
        type: enums.quicksight.TemplateMaximumMinimumComputationType;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateMeasureField {
        /**
         * The calculated measure field only used in pivot tables.
         */
        calculatedMeasureField?: outputs.quicksight.TemplateCalculatedMeasureField;
        /**
         * The measure type field with categorical type columns.
         */
        categoricalMeasureField?: outputs.quicksight.TemplateCategoricalMeasureField;
        /**
         * The measure type field with date type columns.
         */
        dateMeasureField?: outputs.quicksight.TemplateDateMeasureField;
        /**
         * The measure type field with numerical type columns.
         */
        numericalMeasureField?: outputs.quicksight.TemplateNumericalMeasureField;
    }

    export interface TemplateMetricComparisonComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The field that is used in a metric comparison from value setup.
         */
        fromValue?: outputs.quicksight.TemplateMeasureField;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The field that is used in a metric comparison to value setup.
         */
        targetValue?: outputs.quicksight.TemplateMeasureField;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.TemplateDimensionField;
    }

    export interface TemplateMinimumLabelType {
        /**
         * The visibility of the minimum label.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateMissingDataConfiguration {
        /**
         * The treatment option that determines how missing data should be rendered. Choose from the following options:
         *
         * - `INTERPOLATE` : Interpolate missing values between the prior and the next known value.
         * - `SHOW_AS_ZERO` : Show missing values as the value `0` .
         * - `SHOW_AS_BLANK` : Display a blank space when rendering missing data.
         */
        treatmentOption?: enums.quicksight.TemplateMissingDataTreatmentOption;
    }

    export interface TemplateNegativeValueConfiguration {
        /**
         * Determines the display mode of the negative value configuration.
         */
        displayMode: enums.quicksight.TemplateNegativeValueDisplayMode;
    }

    export interface TemplateNullValueFormatConfiguration {
        /**
         * Determines the null string of null values.
         */
        nullString: string;
    }

    export interface TemplateNumberDisplayFormatConfiguration {
        /**
         * The option that determines the decimal places configuration.
         */
        decimalPlacesConfiguration?: outputs.quicksight.TemplateDecimalPlacesConfiguration;
        /**
         * The options that determine the negative value configuration.
         */
        negativeValueConfiguration?: outputs.quicksight.TemplateNegativeValueConfiguration;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        /**
         * Determines the number scale value of the number format.
         */
        numberScale?: enums.quicksight.TemplateNumberScale;
        /**
         * Determines the prefix value of the number format.
         */
        prefix?: string;
        /**
         * The options that determine the numeric separator configuration.
         */
        separatorConfiguration?: outputs.quicksight.TemplateNumericSeparatorConfiguration;
        /**
         * Determines the suffix value of the number format.
         */
        suffix?: string;
    }

    export interface TemplateNumberFormatConfiguration {
        /**
         * The options that determine the numeric format configuration.
         */
        formatConfiguration?: outputs.quicksight.TemplateNumericFormatConfiguration;
    }

    export interface TemplateNumericAxisOptions {
        /**
         * The range setup of a numeric axis.
         */
        range?: outputs.quicksight.TemplateAxisDisplayRange;
        /**
         * The scale setup of a numeric axis.
         */
        scale?: outputs.quicksight.TemplateAxisScale;
    }

    export interface TemplateNumericEqualityDrillDownFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The value of the double input numeric drill down filter.
         */
        value: number;
    }

    export interface TemplateNumericEqualityFilter {
        /**
         * The aggregation function of the filter.
         */
        aggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.TemplateDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The match operator that is used to determine if a filter should be applied.
         */
        matchOperator: enums.quicksight.TemplateNumericEqualityMatchOperator;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.TemplateFilterNullOption;
        /**
         * The parameter whose value should be used for the filter value.
         */
        parameterName?: string;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.TemplateNumericFilterSelectAllOptions;
        /**
         * The input value.
         */
        value?: number;
    }

    export interface TemplateNumericFormatConfiguration {
        /**
         * The options that determine the currency display format configuration.
         */
        currencyDisplayFormatConfiguration?: outputs.quicksight.TemplateCurrencyDisplayFormatConfiguration;
        /**
         * The options that determine the number display format configuration.
         */
        numberDisplayFormatConfiguration?: outputs.quicksight.TemplateNumberDisplayFormatConfiguration;
        /**
         * The options that determine the percentage display format configuration.
         */
        percentageDisplayFormatConfiguration?: outputs.quicksight.TemplatePercentageDisplayFormatConfiguration;
    }

    export interface TemplateNumericRangeFilter {
        /**
         * The aggregation function of the filter.
         */
        aggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.TemplateDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * Determines whether the maximum value in the filter value range should be included in the filtered results.
         */
        includeMaximum?: boolean;
        /**
         * Determines whether the minimum value in the filter value range should be included in the filtered results.
         */
        includeMinimum?: boolean;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.TemplateFilterNullOption;
        /**
         * The maximum value for the filter value range.
         */
        rangeMaximum?: outputs.quicksight.TemplateNumericRangeFilterValue;
        /**
         * The minimum value for the filter value range.
         */
        rangeMinimum?: outputs.quicksight.TemplateNumericRangeFilterValue;
        /**
         * Select all of the values. Null is not the assigned value of select all.
         *
         * - `FILTER_ALL_VALUES`
         */
        selectAllOptions?: enums.quicksight.TemplateNumericFilterSelectAllOptions;
    }

    export interface TemplateNumericRangeFilterValue {
        /**
         * The parameter that is used in the numeric range.
         */
        parameter?: string;
        /**
         * The static value of the numeric range filter.
         */
        staticValue?: number;
    }

    export interface TemplateNumericSeparatorConfiguration {
        /**
         * Determines the decimal separator.
         */
        decimalSeparator?: enums.quicksight.TemplateNumericSeparatorSymbol;
        /**
         * The options that determine the thousands separator configuration.
         */
        thousandsSeparator?: outputs.quicksight.TemplateThousandSeparatorOptions;
    }

    export interface TemplateNumericalAggregationFunction {
        /**
         * An aggregation based on the percentile of values in a dimension or measure.
         */
        percentileAggregation?: outputs.quicksight.TemplatePercentileAggregation;
        /**
         * Built-in aggregation functions for numerical values.
         *
         * - `SUM` : The sum of a dimension or measure.
         * - `AVERAGE` : The average of a dimension or measure.
         * - `MIN` : The minimum value of a dimension or measure.
         * - `MAX` : The maximum value of a dimension or measure.
         * - `COUNT` : The count of a dimension or measure.
         * - `DISTINCT_COUNT` : The count of distinct values in a dimension or measure.
         * - `VAR` : The variance of a dimension or measure.
         * - `VARP` : The partitioned variance of a dimension or measure.
         * - `STDEV` : The standard deviation of a dimension or measure.
         * - `STDEVP` : The partitioned standard deviation of a dimension or measure.
         * - `MEDIAN` : The median value of a dimension or measure.
         */
        simpleNumericalAggregation?: enums.quicksight.TemplateSimpleNumericalAggregationFunction;
    }

    export interface TemplateNumericalDimensionField {
        /**
         * The column that is used in the `NumericalDimensionField` .
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.TemplateNumberFormatConfiguration;
        /**
         * The custom hierarchy ID.
         */
        hierarchyId?: string;
    }

    export interface TemplateNumericalMeasureField {
        /**
         * The aggregation function of the measure field.
         */
        aggregationFunction?: outputs.quicksight.TemplateNumericalAggregationFunction;
        /**
         * The column that is used in the `NumericalMeasureField` .
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.TemplateNumberFormatConfiguration;
    }

    export interface TemplatePaginationConfiguration {
        /**
         * Indicates the page number.
         */
        pageNumber: number;
        /**
         * Indicates how many items render in one page.
         */
        pageSize: number;
    }

    export interface TemplatePanelConfiguration {
        /**
         * Sets the background color for each panel.
         */
        backgroundColor?: string;
        /**
         * Determines whether or not a background for each small multiples panel is rendered.
         */
        backgroundVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * Sets the line color of panel borders.
         */
        borderColor?: string;
        /**
         * Sets the line style of panel borders.
         */
        borderStyle?: enums.quicksight.TemplatePanelBorderStyle;
        /**
         * String based length that is composed of value and unit in px
         */
        borderThickness?: string;
        /**
         * Determines whether or not each panel displays a border.
         */
        borderVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        gutterSpacing?: string;
        /**
         * Determines whether or not negative space between sibling panels is rendered.
         */
        gutterVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * Configures the title display within each small multiples panel.
         */
        title?: outputs.quicksight.TemplatePanelTitleOptions;
    }

    export interface TemplatePanelTitleOptions {
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        /**
         * Sets the horizontal text alignment of the title within each panel.
         */
        horizontalTextAlignment?: enums.quicksight.TemplateHorizontalTextAlignment;
        /**
         * Determines whether or not panel titles are displayed.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateParameterControl {
        /**
         * A control from a date parameter that specifies date and time.
         */
        dateTimePicker?: outputs.quicksight.TemplateParameterDateTimePickerControl;
        /**
         * A control to display a dropdown list with buttons that are used to select a single value.
         */
        dropdown?: outputs.quicksight.TemplateParameterDropDownControl;
        /**
         * A control to display a list with buttons or boxes that are used to select either a single value or multiple values.
         */
        list?: outputs.quicksight.TemplateParameterListControl;
        /**
         * A control to display a horizontal toggle bar. This is used to change a value by sliding the toggle.
         */
        slider?: outputs.quicksight.TemplateParameterSliderControl;
        /**
         * A control to display a text box that is used to enter multiple entries.
         */
        textArea?: outputs.quicksight.TemplateParameterTextAreaControl;
        /**
         * A control to display a text box that is used to enter a single entry.
         */
        textField?: outputs.quicksight.TemplateParameterTextFieldControl;
    }

    export interface TemplateParameterDateTimePickerControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateDateTimePickerControlDisplayOptions;
        /**
         * The ID of the `ParameterDateTimePickerControl` .
         */
        parameterControlId: string;
        /**
         * The name of the `ParameterDateTimePickerControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterDateTimePickerControl` .
         */
        title: string;
    }

    export interface TemplateParameterDeclaration {
        /**
         * A parameter declaration for the `DateTime` data type.
         */
        dateTimeParameterDeclaration?: outputs.quicksight.TemplateDateTimeParameterDeclaration;
        /**
         * A parameter declaration for the `Decimal` data type.
         */
        decimalParameterDeclaration?: outputs.quicksight.TemplateDecimalParameterDeclaration;
        /**
         * A parameter declaration for the `Integer` data type.
         */
        integerParameterDeclaration?: outputs.quicksight.TemplateIntegerParameterDeclaration;
        /**
         * A parameter declaration for the `String` data type.
         */
        stringParameterDeclaration?: outputs.quicksight.TemplateStringParameterDeclaration;
    }

    export interface TemplateParameterDropDownControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.TemplateCascadingControlConfiguration;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateDropDownControlDisplayOptions;
        /**
         * The ID of the `ParameterDropDownControl` .
         */
        parameterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.TemplateParameterSelectableValues;
        /**
         * The source parameter name of the `ParameterDropDownControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterDropDownControl` .
         */
        title: string;
        /**
         * The type parameter name of the `ParameterDropDownControl` .
         */
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateParameterListControl {
        /**
         * The values that are displayed in a control can be configured to only show values that are valid based on what's selected in other controls.
         */
        cascadingControlConfiguration?: outputs.quicksight.TemplateCascadingControlConfiguration;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateListControlDisplayOptions;
        /**
         * The ID of the `ParameterListControl` .
         */
        parameterControlId: string;
        /**
         * A list of selectable values that are used in a control.
         */
        selectableValues?: outputs.quicksight.TemplateParameterSelectableValues;
        /**
         * The source parameter name of the `ParameterListControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterListControl` .
         */
        title: string;
        /**
         * The type of `ParameterListControl` .
         */
        type?: enums.quicksight.TemplateSheetControlListType;
    }

    export interface TemplateParameterSelectableValues {
        /**
         * The column identifier that fetches values from the data set.
         */
        linkToDataSetColumn?: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The values that are used in `ParameterSelectableValues` .
         */
        values?: string[];
    }

    export interface TemplateParameterSliderControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateSliderControlDisplayOptions;
        /**
         * The larger value that is displayed at the right of the slider.
         */
        maximumValue: number;
        /**
         * The smaller value that is displayed at the left of the slider.
         */
        minimumValue: number;
        /**
         * The ID of the `ParameterSliderControl` .
         */
        parameterControlId: string;
        /**
         * The source parameter name of the `ParameterSliderControl` .
         */
        sourceParameterName: string;
        /**
         * The number of increments that the slider bar is divided into.
         */
        stepSize: number;
        /**
         * The title of the `ParameterSliderControl` .
         */
        title: string;
    }

    export interface TemplateParameterTextAreaControl {
        /**
         * The delimiter that is used to separate the lines in text.
         */
        delimiter?: string;
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateTextAreaControlDisplayOptions;
        /**
         * The ID of the `ParameterTextAreaControl` .
         */
        parameterControlId: string;
        /**
         * The source parameter name of the `ParameterTextAreaControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterTextAreaControl` .
         */
        title: string;
    }

    export interface TemplateParameterTextFieldControl {
        /**
         * The display options of a control.
         */
        displayOptions?: outputs.quicksight.TemplateTextFieldControlDisplayOptions;
        /**
         * The ID of the `ParameterTextFieldControl` .
         */
        parameterControlId: string;
        /**
         * The source parameter name of the `ParameterTextFieldControl` .
         */
        sourceParameterName: string;
        /**
         * The title of the `ParameterTextFieldControl` .
         */
        title: string;
    }

    export interface TemplatePercentVisibleRange {
        /**
         * The lower bound of the range.
         */
        from?: number;
        /**
         * The top bound of the range.
         */
        to?: number;
    }

    export interface TemplatePercentageDisplayFormatConfiguration {
        /**
         * The option that determines the decimal places configuration.
         */
        decimalPlacesConfiguration?: outputs.quicksight.TemplateDecimalPlacesConfiguration;
        /**
         * The options that determine the negative value configuration.
         */
        negativeValueConfiguration?: outputs.quicksight.TemplateNegativeValueConfiguration;
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        /**
         * Determines the prefix value of the percentage format.
         */
        prefix?: string;
        /**
         * The options that determine the numeric separator configuration.
         */
        separatorConfiguration?: outputs.quicksight.TemplateNumericSeparatorConfiguration;
        /**
         * Determines the suffix value of the percentage format.
         */
        suffix?: string;
    }

    export interface TemplatePercentileAggregation {
        /**
         * The percentile value. This value can be any numeric constant 0–100. A percentile value of 50 computes the median value of the measure.
         */
        percentileValue?: number;
    }

    export interface TemplatePeriodOverPeriodComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.TemplateDimensionField;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplatePeriodToDateComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The time granularity setup of period to date computation. Choose from the following options:
         *
         * - YEAR: Year to date.
         * - MONTH: Month to date.
         */
        periodTimeGranularity?: enums.quicksight.TemplateTimeGranularity;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.TemplateDimensionField;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplatePieChartAggregatedFieldWells {
        /**
         * The category (group/color) field wells of a pie chart.
         */
        category?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The small multiples field well of a pie chart.
         */
        smallMultiples?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The value field wells of a pie chart. Values are aggregated based on categories.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplatePieChartConfiguration {
        /**
         * The label options of the group/color that is displayed in a pie chart.
         */
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The contribution analysis (anomaly configuration) setup of the visual.
         */
        contributionAnalysisDefaults?: outputs.quicksight.TemplateContributionAnalysisDefault[];
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The options that determine the shape of the chart. This option determines whether the chart is a pie chart or a donut chart.
         */
        donutOptions?: outputs.quicksight.TemplateDonutOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplatePieChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The small multiples setup for the visual.
         */
        smallMultiplesOptions?: outputs.quicksight.TemplateSmallMultiplesOptions;
        /**
         * The sort configuration of a pie chart.
         */
        sortConfiguration?: outputs.quicksight.TemplatePieChartSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * The label options for the value that is displayed in a pie chart.
         */
        valueLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplatePieChartFieldWells {
        /**
         * The field well configuration of a pie chart.
         */
        pieChartAggregatedFieldWells?: outputs.quicksight.TemplatePieChartAggregatedFieldWells;
    }

    export interface TemplatePieChartSortConfiguration {
        /**
         * The limit on the number of categories that are displayed in a pie chart.
         */
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        /**
         * The limit on the number of small multiples panels that are displayed.
         */
        smallMultiplesLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the small multiples field.
         */
        smallMultiplesSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplatePieChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration of a pie chart.
         */
        chartConfiguration?: outputs.quicksight.TemplatePieChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplatePivotFieldSortOptions {
        /**
         * The field ID for the field sort options.
         */
        fieldId: string;
        /**
         * The sort by field for the field sort options.
         */
        sortBy: outputs.quicksight.TemplatePivotTableSortBy;
    }

    export interface TemplatePivotTableAggregatedFieldWells {
        /**
         * The columns field well for a pivot table. Values are grouped by columns fields.
         */
        columns?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The rows field well for a pivot table. Values are grouped by rows fields.
         */
        rows?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The values field well for a pivot table. Values are aggregated based on rows and columns fields.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplatePivotTableCellConditionalFormatting {
        /**
         * The field ID of the cell for conditional formatting.
         */
        fieldId: string;
        /**
         * The scope of the cell for conditional formatting.
         */
        scope?: outputs.quicksight.TemplatePivotTableConditionalFormattingScope;
        /**
         * A list of cell scopes for conditional formatting.
         */
        scopes?: outputs.quicksight.TemplatePivotTableConditionalFormattingScope[];
        /**
         * The text format of the cell for conditional formatting.
         */
        textFormat?: outputs.quicksight.TemplateTextConditionalFormat;
    }

    export interface TemplatePivotTableConditionalFormatting {
        /**
         * Conditional formatting options for a `PivotTableVisual` .
         */
        conditionalFormattingOptions?: outputs.quicksight.TemplatePivotTableConditionalFormattingOption[];
    }

    export interface TemplatePivotTableConditionalFormattingOption {
        /**
         * The cell conditional formatting option for a pivot table.
         */
        cell?: outputs.quicksight.TemplatePivotTableCellConditionalFormatting;
    }

    export interface TemplatePivotTableConditionalFormattingScope {
        /**
         * The role (field, field total, grand total) of the cell for conditional formatting.
         */
        role?: enums.quicksight.TemplatePivotTableConditionalFormattingScopeRole;
    }

    export interface TemplatePivotTableConfiguration {
        /**
         * The field options for a pivot table visual.
         */
        fieldOptions?: outputs.quicksight.TemplatePivotTableFieldOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplatePivotTableFieldWells;
        /**
         * The paginated report options for a pivot table visual.
         */
        paginatedReportOptions?: outputs.quicksight.TemplatePivotTablePaginatedReportOptions;
        /**
         * The sort configuration for a `PivotTableVisual` .
         */
        sortConfiguration?: outputs.quicksight.TemplatePivotTableSortConfiguration;
        /**
         * The table options for a pivot table visual.
         */
        tableOptions?: outputs.quicksight.TemplatePivotTableOptions;
        /**
         * The total options for a pivot table visual.
         */
        totalOptions?: outputs.quicksight.TemplatePivotTableTotalOptions;
    }

    export interface TemplatePivotTableDataPathOption {
        /**
         * The list of data path values for the data path options.
         */
        dataPathList: outputs.quicksight.TemplateDataPathValue[];
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface TemplatePivotTableFieldCollapseStateOption {
        /**
         * The state of the field target of a pivot table. Choose one of the following options:
         *
         * - `COLLAPSED`
         * - `EXPANDED`
         */
        state?: enums.quicksight.TemplatePivotTableFieldCollapseState;
        /**
         * A tagged-union object that sets the collapse state.
         */
        target: outputs.quicksight.TemplatePivotTableFieldCollapseStateTarget;
    }

    export interface TemplatePivotTableFieldCollapseStateTarget {
        /**
         * The data path of the pivot table's header. Used to set the collapse state.
         */
        fieldDataPathValues?: outputs.quicksight.TemplateDataPathValue[];
        /**
         * The field ID of the pivot table that the collapse state needs to be set to.
         */
        fieldId?: string;
    }

    export interface TemplatePivotTableFieldOption {
        /**
         * The custom label of the pivot table field.
         */
        customLabel?: string;
        /**
         * The field ID of the pivot table field.
         */
        fieldId: string;
        /**
         * The visibility of the pivot table field.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplatePivotTableFieldOptions {
        /**
         * The collapse state options for the pivot table field options.
         */
        collapseStateOptions?: outputs.quicksight.TemplatePivotTableFieldCollapseStateOption[];
        /**
         * The data path options for the pivot table field options.
         */
        dataPathOptions?: outputs.quicksight.TemplatePivotTableDataPathOption[];
        /**
         * The selected field options for the pivot table field options.
         */
        selectedFieldOptions?: outputs.quicksight.TemplatePivotTableFieldOption[];
    }

    export interface TemplatePivotTableFieldSubtotalOptions {
        /**
         * The field ID of the subtotal options.
         */
        fieldId?: string;
    }

    export interface TemplatePivotTableFieldWells {
        /**
         * The aggregated field well for the pivot table.
         */
        pivotTableAggregatedFieldWells?: outputs.quicksight.TemplatePivotTableAggregatedFieldWells;
    }

    export interface TemplatePivotTableOptions {
        /**
         * The table cell style of cells.
         */
        cellStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The visibility setting of a pivot table's collapsed row dimension fields. If the value of this structure is `HIDDEN` , all collapsed columns in a pivot table are automatically hidden. The default value is `VISIBLE` .
         */
        collapsedRowDimensionsVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The table cell style of the column header.
         */
        columnHeaderStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The visibility of the column names.
         */
        columnNamesVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        defaultCellWidth?: string;
        /**
         * The metric placement (row, column) options.
         */
        metricPlacement?: enums.quicksight.TemplatePivotTableMetricPlacement;
        /**
         * The row alternate color options (widget status, row alternate colors).
         */
        rowAlternateColorOptions?: outputs.quicksight.TemplateRowAlternateColorOptions;
        /**
         * The table cell style of row field names.
         */
        rowFieldNamesStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The table cell style of the row headers.
         */
        rowHeaderStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The options for the label that is located above the row headers. This option is only applicable when `RowsLayout` is set to `HIERARCHY` .
         */
        rowsLabelOptions?: outputs.quicksight.TemplatePivotTableRowsLabelOptions;
        /**
         * The layout for the row dimension headers of a pivot table. Choose one of the following options.
         *
         * - `TABULAR` : (Default) Each row field is displayed in a separate column.
         * - `HIERARCHY` : All row fields are displayed in a single column. Indentation is used to differentiate row headers of different fields.
         */
        rowsLayout?: enums.quicksight.TemplatePivotTableRowsLayout;
        /**
         * The visibility of the single metric options.
         */
        singleMetricVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * Determines the visibility of the pivot table.
         */
        toggleButtonsVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplatePivotTablePaginatedReportOptions {
        /**
         * The visibility of the repeating header rows on each page.
         */
        overflowColumnHeaderVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The visibility of the printing table overflow across pages.
         */
        verticalOverflowVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplatePivotTableRowsLabelOptions {
        /**
         * The custom label string for the rows label.
         */
        customLabel?: string;
        /**
         * The visibility of the rows label.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplatePivotTableSortBy {
        /**
         * The column sort (field id, direction) for the pivot table sort by options.
         */
        column?: outputs.quicksight.TemplateColumnSort;
        /**
         * The data path sort (data path value, direction) for the pivot table sort by options.
         */
        dataPath?: outputs.quicksight.TemplateDataPathSort;
        /**
         * The field sort (field id, direction) for the pivot table sort by options.
         */
        field?: outputs.quicksight.TemplateFieldSort;
    }

    export interface TemplatePivotTableSortConfiguration {
        /**
         * The field sort options for a pivot table sort configuration.
         */
        fieldSortOptions?: outputs.quicksight.TemplatePivotFieldSortOptions[];
    }

    export interface TemplatePivotTableTotalOptions {
        /**
         * The column subtotal options.
         */
        columnSubtotalOptions?: outputs.quicksight.TemplateSubtotalOptions;
        /**
         * The column total options.
         */
        columnTotalOptions?: outputs.quicksight.TemplatePivotTotalOptions;
        /**
         * The row subtotal options.
         */
        rowSubtotalOptions?: outputs.quicksight.TemplateSubtotalOptions;
        /**
         * The row total options.
         */
        rowTotalOptions?: outputs.quicksight.TemplatePivotTotalOptions;
    }

    export interface TemplatePivotTableVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplatePivotTableConfiguration;
        /**
         * The conditional formatting for a `PivotTableVisual` .
         */
        conditionalFormatting?: outputs.quicksight.TemplatePivotTableConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface TemplatePivotTotalOptions {
        /**
         * The custom label string for the total cells.
         */
        customLabel?: string;
        /**
         * The cell styling options for the total of header cells.
         */
        metricHeaderCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The placement (start, end) for the total cells.
         */
        placement?: enums.quicksight.TemplateTableTotalsPlacement;
        /**
         * The scroll status (pinned, scrolled) for the total cells.
         */
        scrollStatus?: enums.quicksight.TemplateTableTotalsScrollStatus;
        /**
         * The total aggregation options for each value field.
         */
        totalAggregationOptions?: outputs.quicksight.TemplateTotalAggregationOption[];
        /**
         * The cell styling options for the total cells.
         */
        totalCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The visibility configuration for the total cells.
         */
        totalsVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The cell styling options for the totals of value cells.
         */
        valueCellStyle?: outputs.quicksight.TemplateTableCellStyle;
    }

    export interface TemplatePredefinedHierarchy {
        /**
         * The list of columns that define the predefined hierarchy.
         */
        columns: outputs.quicksight.TemplateColumnIdentifier[];
        /**
         * The option that determines the drill down filters for the predefined hierarchy.
         */
        drillDownFilters?: outputs.quicksight.TemplateDrillDownFilter[];
        /**
         * The hierarchy ID of the predefined hierarchy.
         */
        hierarchyId: string;
    }

    export interface TemplateProgressBarOptions {
        /**
         * The visibility of the progress bar.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateRadarChartAggregatedFieldWells {
        /**
         * The aggregated field well categories of a radar chart.
         */
        category?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The color that are assigned to the aggregated field wells of a radar chart.
         */
        color?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The values that are assigned to the aggregated field wells of a radar chart.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateRadarChartAreaStyleSettings {
        /**
         * The visibility settings of a radar chart.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateRadarChartConfiguration {
        /**
         * Determines the visibility of the colors of alternatign bands in a radar chart.
         */
        alternateBandColorsVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The color of the even-numbered alternate bands of a radar chart.
         */
        alternateBandEvenColor?: string;
        /**
         * The color of the odd-numbered alternate bands of a radar chart.
         */
        alternateBandOddColor?: string;
        /**
         * The axis behavior options of a radar chart.
         */
        axesRangeScale?: enums.quicksight.TemplateRadarChartAxesRangeScale;
        /**
         * The base sreies settings of a radar chart.
         */
        baseSeriesSettings?: outputs.quicksight.TemplateRadarChartSeriesSettings;
        /**
         * The category axis of a radar chart.
         */
        categoryAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The category label options of a radar chart.
         */
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The color axis of a radar chart.
         */
        colorAxis?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The color label options of a radar chart.
         */
        colorLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The field well configuration of a `RadarChartVisual` .
         */
        fieldWells?: outputs.quicksight.TemplateRadarChartFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The shape of the radar chart.
         */
        shape?: enums.quicksight.TemplateRadarChartShape;
        /**
         * The sort configuration of a `RadarChartVisual` .
         */
        sortConfiguration?: outputs.quicksight.TemplateRadarChartSortConfiguration;
        /**
         * The start angle of a radar chart's axis.
         */
        startAngle?: number;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
    }

    export interface TemplateRadarChartFieldWells {
        /**
         * The aggregated field wells of a radar chart visual.
         */
        radarChartAggregatedFieldWells?: outputs.quicksight.TemplateRadarChartAggregatedFieldWells;
    }

    export interface TemplateRadarChartSeriesSettings {
        /**
         * The area style settings of a radar chart.
         */
        areaStyleSettings?: outputs.quicksight.TemplateRadarChartAreaStyleSettings;
    }

    export interface TemplateRadarChartSortConfiguration {
        /**
         * The category items limit for a radar chart.
         */
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The category sort options of a radar chart.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
        /**
         * The color items limit of a radar chart.
         */
        colorItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The color sort configuration of a radar chart.
         */
        colorSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateRadarChartVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateRadarChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateRangeEndsLabelType {
        /**
         * The visibility of the range ends label.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateReferenceLine {
        /**
         * The data configuration of the reference line.
         */
        dataConfiguration: outputs.quicksight.TemplateReferenceLineDataConfiguration;
        /**
         * The label configuration of the reference line.
         */
        labelConfiguration?: outputs.quicksight.TemplateReferenceLineLabelConfiguration;
        /**
         * The status of the reference line. Choose one of the following options:
         *
         * - `ENABLE`
         * - `DISABLE`
         */
        status?: enums.quicksight.TemplateWidgetStatus;
        /**
         * The style configuration of the reference line.
         */
        styleConfiguration?: outputs.quicksight.TemplateReferenceLineStyleConfiguration;
    }

    export interface TemplateReferenceLineCustomLabelConfiguration {
        /**
         * The string text of the custom label.
         */
        customLabel: string;
    }

    export interface TemplateReferenceLineDataConfiguration {
        /**
         * The axis binding type of the reference line. Choose one of the following options:
         *
         * - `PrimaryY`
         * - `SecondaryY`
         */
        axisBinding?: enums.quicksight.TemplateAxisBinding;
        /**
         * The dynamic configuration of the reference line data configuration.
         */
        dynamicConfiguration?: outputs.quicksight.TemplateReferenceLineDynamicDataConfiguration;
        /**
         * The series type of the reference line data configuration. Choose one of the following options:
         *
         * - `BAR`
         * - `LINE`
         */
        seriesType?: enums.quicksight.TemplateReferenceLineSeriesType;
        /**
         * The static data configuration of the reference line data configuration.
         */
        staticConfiguration?: outputs.quicksight.TemplateReferenceLineStaticDataConfiguration;
    }

    export interface TemplateReferenceLineDynamicDataConfiguration {
        /**
         * The calculation that is used in the dynamic data.
         */
        calculation: outputs.quicksight.TemplateNumericalAggregationFunction;
        /**
         * The column that the dynamic data targets.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The aggregation function that is used in the dynamic data.
         */
        measureAggregationFunction?: outputs.quicksight.TemplateAggregationFunction;
    }

    export interface TemplateReferenceLineLabelConfiguration {
        /**
         * The custom label configuration of the label in a reference line.
         */
        customLabelConfiguration?: outputs.quicksight.TemplateReferenceLineCustomLabelConfiguration;
        /**
         * The font color configuration of the label in a reference line.
         */
        fontColor?: string;
        /**
         * The font configuration of the label in a reference line.
         */
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        /**
         * The horizontal position configuration of the label in a reference line. Choose one of the following options:
         *
         * - `LEFT`
         * - `CENTER`
         * - `RIGHT`
         */
        horizontalPosition?: enums.quicksight.TemplateReferenceLineLabelHorizontalPosition;
        /**
         * The value label configuration of the label in a reference line.
         */
        valueLabelConfiguration?: outputs.quicksight.TemplateReferenceLineValueLabelConfiguration;
        /**
         * The vertical position configuration of the label in a reference line. Choose one of the following options:
         *
         * - `ABOVE`
         * - `BELOW`
         */
        verticalPosition?: enums.quicksight.TemplateReferenceLineLabelVerticalPosition;
    }

    export interface TemplateReferenceLineStaticDataConfiguration {
        /**
         * The double input of the static data.
         */
        value: number;
    }

    export interface TemplateReferenceLineStyleConfiguration {
        /**
         * The hex color of the reference line.
         */
        color?: string;
        /**
         * The pattern type of the line style. Choose one of the following options:
         *
         * - `SOLID`
         * - `DASHED`
         * - `DOTTED`
         */
        pattern?: enums.quicksight.TemplateReferenceLinePatternType;
    }

    export interface TemplateReferenceLineValueLabelConfiguration {
        /**
         * The format configuration of the value label.
         */
        formatConfiguration?: outputs.quicksight.TemplateNumericFormatConfiguration;
        /**
         * The relative position of the value label. Choose one of the following options:
         *
         * - `BEFORE_CUSTOM_LABEL`
         * - `AFTER_CUSTOM_LABEL`
         */
        relativePosition?: enums.quicksight.TemplateReferenceLineValueLabelRelativePosition;
    }

    export interface TemplateRelativeDateTimeControlDisplayOptions {
        /**
         * Customize how dates are formatted in controls.
         */
        dateTimeFormat?: string;
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateRelativeDatesFilter {
        /**
         * The date configuration of the filter.
         */
        anchorDateConfiguration: outputs.quicksight.TemplateAnchorDateConfiguration;
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.TemplateDefaultFilterControlConfiguration;
        /**
         * The configuration for the exclude period of the filter.
         */
        excludePeriodConfiguration?: outputs.quicksight.TemplateExcludePeriodConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The minimum granularity (period granularity) of the relative dates filter.
         */
        minimumGranularity?: enums.quicksight.TemplateTimeGranularity;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.TemplateFilterNullOption;
        /**
         * The parameter whose value should be used for the filter value.
         */
        parameterName?: string;
        /**
         * The range date type of the filter. Choose one of the options below:
         *
         * - `PREVIOUS`
         * - `THIS`
         * - `LAST`
         * - `NOW`
         * - `NEXT`
         */
        relativeDateType: enums.quicksight.TemplateRelativeDateType;
        /**
         * The date value of the filter.
         */
        relativeDateValue?: number;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity: enums.quicksight.TemplateTimeGranularity;
    }

    /**
     * <p>Permission for the resource.</p>
     */
    export interface TemplateResourcePermission {
        /**
         * <p>The IAM action to grant or revoke permissions on.</p>
         */
        actions: string[];
        /**
         * <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
         *             following:</p>
         *          <ul>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
         *                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
         *                     (This is less common.) </p>
         *             </li>
         *          </ul>
         */
        principal: string;
    }

    export interface TemplateRollingDateConfiguration {
        /**
         * The data set that is used in the rolling date configuration.
         */
        dataSetIdentifier?: string;
        /**
         * The expression of the rolling date configuration.
         */
        expression: string;
    }

    export interface TemplateRowAlternateColorOptions {
        /**
         * Determines the list of row alternate colors.
         */
        rowAlternateColors?: string[];
        /**
         * Determines the widget status.
         */
        status?: enums.quicksight.TemplateWidgetStatus;
        /**
         * The primary background color options for alternate rows.
         */
        usePrimaryBackgroundColor?: enums.quicksight.TemplateWidgetStatus;
    }

    export interface TemplateSameSheetTargetVisualConfiguration {
        /**
         * The options that choose the target visual in the same sheet.
         *
         * Valid values are defined as follows:
         *
         * - `ALL_VISUALS` : Applies the filter operation to all visuals in the same sheet.
         */
        targetVisualOptions?: enums.quicksight.TemplateTargetVisualOptions;
        /**
         * A list of the target visual IDs that are located in the same sheet of the analysis.
         */
        targetVisuals?: string[];
    }

    export interface TemplateSankeyDiagramAggregatedFieldWells {
        /**
         * The destination field wells of a sankey diagram.
         */
        destination?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The source field wells of a sankey diagram.
         */
        source?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The weight field wells of a sankey diagram.
         */
        weight?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateSankeyDiagramChartConfiguration {
        /**
         * The data label configuration of a sankey diagram.
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The field well configuration of a sankey diagram.
         */
        fieldWells?: outputs.quicksight.TemplateSankeyDiagramFieldWells;
        /**
         * The sort configuration of a sankey diagram.
         */
        sortConfiguration?: outputs.quicksight.TemplateSankeyDiagramSortConfiguration;
    }

    export interface TemplateSankeyDiagramFieldWells {
        /**
         * The field well configuration of a sankey diagram.
         */
        sankeyDiagramAggregatedFieldWells?: outputs.quicksight.TemplateSankeyDiagramAggregatedFieldWells;
    }

    export interface TemplateSankeyDiagramSortConfiguration {
        /**
         * The limit on the number of destination nodes that are displayed in a sankey diagram.
         */
        destinationItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The limit on the number of source nodes that are displayed in a sankey diagram.
         */
        sourceItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the weight fields.
         */
        weightSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateSankeyDiagramVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration of a sankey diagram.
         */
        chartConfiguration?: outputs.quicksight.TemplateSankeyDiagramChartConfiguration;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateScatterPlotCategoricallyAggregatedFieldWells {
        /**
         * The category field well of a scatter plot.
         */
        category?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The label field well of a scatter plot.
         */
        label?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The size field well of a scatter plot.
         */
        size?: outputs.quicksight.TemplateMeasureField[];
        /**
         * The x-axis field well of a scatter plot.
         *
         * The x-axis is aggregated by category.
         */
        xAxis?: outputs.quicksight.TemplateMeasureField[];
        /**
         * The y-axis field well of a scatter plot.
         *
         * The y-axis is aggregated by category.
         */
        yAxis?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateScatterPlotConfiguration {
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateScatterPlotFieldWells;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The legend display setup of the visual.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
        /**
         * The palette (chart color) display setup of the visual.
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        /**
         * The label display options (grid line, range, scale, and axis step) of the scatter plot's x-axis.
         */
        xAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of the scatter plot's x-axis.
         */
        xAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The label display options (grid line, range, scale, and axis step) of the scatter plot's y-axis.
         */
        yAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The label options (label text, label visibility, and sort icon visibility) of the scatter plot's y-axis.
         */
        yAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
    }

    export interface TemplateScatterPlotFieldWells {
        /**
         * The aggregated field wells of a scatter plot. The x and y-axes of scatter plots with aggregated field wells are aggregated by category, label, or both.
         */
        scatterPlotCategoricallyAggregatedFieldWells?: outputs.quicksight.TemplateScatterPlotCategoricallyAggregatedFieldWells;
        /**
         * The unaggregated field wells of a scatter plot. The x and y-axes of these scatter plots are unaggregated.
         */
        scatterPlotUnaggregatedFieldWells?: outputs.quicksight.TemplateScatterPlotUnaggregatedFieldWells;
    }

    export interface TemplateScatterPlotUnaggregatedFieldWells {
        /**
         * The category field well of a scatter plot.
         */
        category?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The label field well of a scatter plot.
         */
        label?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The size field well of a scatter plot.
         */
        size?: outputs.quicksight.TemplateMeasureField[];
        /**
         * The x-axis field well of a scatter plot.
         *
         * The x-axis is a dimension field and cannot be aggregated.
         */
        xAxis?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The y-axis field well of a scatter plot.
         *
         * The y-axis is a dimension field and cannot be aggregated.
         */
        yAxis?: outputs.quicksight.TemplateDimensionField[];
    }

    export interface TemplateScatterPlotVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateScatterPlotConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateScrollBarOptions {
        /**
         * The visibility of the data zoom scroll bar.
         */
        visibility?: enums.quicksight.TemplateVisibility;
        /**
         * The visibility range for the data zoom scroll bar.
         */
        visibleRange?: outputs.quicksight.TemplateVisibleRangeOptions;
    }

    export interface TemplateSecondaryValueOptions {
        /**
         * Determines the visibility of the secondary value.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateSectionAfterPageBreak {
        /**
         * The option that enables or disables a page break at the end of a section.
         */
        status?: enums.quicksight.TemplateSectionPageBreakStatus;
    }

    export interface TemplateSectionBasedLayoutCanvasSizeOptions {
        /**
         * The options for a paper canvas of a section-based layout.
         */
        paperCanvasSizeOptions?: outputs.quicksight.TemplateSectionBasedLayoutPaperCanvasSizeOptions;
    }

    export interface TemplateSectionBasedLayoutConfiguration {
        /**
         * A list of body section configurations.
         */
        bodySections: outputs.quicksight.TemplateBodySectionConfiguration[];
        /**
         * The options for the canvas of a section-based layout.
         */
        canvasSizeOptions: outputs.quicksight.TemplateSectionBasedLayoutCanvasSizeOptions;
        /**
         * A list of footer section configurations.
         */
        footerSections: outputs.quicksight.TemplateHeaderFooterSectionConfiguration[];
        /**
         * A list of header section configurations.
         */
        headerSections: outputs.quicksight.TemplateHeaderFooterSectionConfiguration[];
    }

    export interface TemplateSectionBasedLayoutPaperCanvasSizeOptions {
        /**
         * Defines the spacing between the canvas content and the top, bottom, left, and right edges.
         */
        paperMargin?: outputs.quicksight.TemplateSpacing;
        /**
         * The paper orientation that is used to define canvas dimensions. Choose one of the following options:
         *
         * - PORTRAIT
         * - LANDSCAPE
         */
        paperOrientation?: enums.quicksight.TemplatePaperOrientation;
        /**
         * The paper size that is used to define canvas dimensions.
         */
        paperSize?: enums.quicksight.TemplatePaperSize;
    }

    export interface TemplateSectionLayoutConfiguration {
        /**
         * The free-form layout configuration of a section.
         */
        freeFormLayout: outputs.quicksight.TemplateFreeFormSectionLayoutConfiguration;
    }

    export interface TemplateSectionPageBreakConfiguration {
        /**
         * The configuration of a page break after a section.
         */
        after?: outputs.quicksight.TemplateSectionAfterPageBreak;
    }

    export interface TemplateSectionStyle {
        /**
         * String based length that is composed of value and unit in px
         */
        height?: string;
        /**
         * The spacing between section content and its top, bottom, left, and right edges.
         *
         * There is no padding by default.
         */
        padding?: outputs.quicksight.TemplateSpacing;
    }

    export interface TemplateSelectedSheetsFilterScopeConfiguration {
        /**
         * The sheet ID and visual IDs of the sheet and visuals that the filter is applied to.
         */
        sheetVisualScopingConfigurations?: outputs.quicksight.TemplateSheetVisualScopingConfiguration[];
    }

    export interface TemplateSeriesItem {
        /**
         * The data field series item configuration of a line chart.
         */
        dataFieldSeriesItem?: outputs.quicksight.TemplateDataFieldSeriesItem;
        /**
         * The field series item configuration of a line chart.
         */
        fieldSeriesItem?: outputs.quicksight.TemplateFieldSeriesItem;
    }

    export interface TemplateSetParameterValueConfiguration {
        /**
         * The destination parameter name of the `SetParameterValueConfiguration` .
         */
        destinationParameterName: string;
        value: outputs.quicksight.TemplateDestinationParameterValueConfiguration;
    }

    export interface TemplateShapeConditionalFormat {
        /**
         * The conditional formatting for the shape background color of a filled map visual.
         */
        backgroundColor: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    /**
     * <p>A <i>sheet</i>, which is an object that contains a set of visuals that
     *             are viewed together on one page in Amazon QuickSight. Every analysis and dashboard
     *             contains at least one sheet. Each sheet contains at least one visualization widget, for
     *             example a chart, pivot table, or narrative insight. Sheets can be associated with other
     *             components, such as controls, filters, and so on.</p>
     */
    export interface TemplateSheet {
        /**
         * <p>The name of a sheet. This name is displayed on the sheet's tab in the Amazon QuickSight
         *             console.</p>
         */
        name?: string;
        /**
         * <p>The unique identifier associated with a sheet.</p>
         */
        sheetId?: string;
    }

    export interface TemplateSheetControlInfoIconLabelOptions {
        /**
         * The text content of info icon.
         */
        infoIconText?: string;
        /**
         * The visibility configuration of info icon label options.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateSheetControlLayout {
        /**
         * The configuration that determines the elements and canvas size options of sheet control.
         */
        configuration: outputs.quicksight.TemplateSheetControlLayoutConfiguration;
    }

    export interface TemplateSheetControlLayoutConfiguration {
        /**
         * The configuration that determines the elements and canvas size options of sheet control.
         */
        gridLayout?: outputs.quicksight.TemplateGridLayoutConfiguration;
    }

    export interface TemplateSheetDefinition {
        /**
         * The layout content type of the sheet. Choose one of the following options:
         *
         * - `PAGINATED` : Creates a sheet for a paginated report.
         * - `INTERACTIVE` : Creates a sheet for an interactive dashboard.
         */
        contentType?: enums.quicksight.TemplateSheetContentType;
        /**
         * A description of the sheet.
         */
        description?: string;
        /**
         * The list of filter controls that are on a sheet.
         *
         * For more information, see [Adding filter controls to analysis sheets](https://docs.aws.amazon.com/quicksight/latest/user/filter-controls.html) in the *Amazon QuickSight User Guide* .
         */
        filterControls?: outputs.quicksight.TemplateFilterControl[];
        /**
         * Layouts define how the components of a sheet are arranged.
         *
         * For more information, see [Types of layout](https://docs.aws.amazon.com/quicksight/latest/user/types-of-layout.html) in the *Amazon QuickSight User Guide* .
         */
        layouts?: outputs.quicksight.TemplateLayout[];
        /**
         * The name of the sheet. This name is displayed on the sheet's tab in the Amazon QuickSight console.
         */
        name?: string;
        /**
         * The list of parameter controls that are on a sheet.
         *
         * For more information, see [Using a Control with a Parameter in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-controls.html) in the *Amazon QuickSight User Guide* .
         */
        parameterControls?: outputs.quicksight.TemplateParameterControl[];
        /**
         * The control layouts of the sheet.
         */
        sheetControlLayouts?: outputs.quicksight.TemplateSheetControlLayout[];
        /**
         * The unique identifier of a sheet.
         */
        sheetId: string;
        /**
         * The text boxes that are on a sheet.
         */
        textBoxes?: outputs.quicksight.TemplateSheetTextBox[];
        /**
         * The title of the sheet.
         */
        title?: string;
        /**
         * A list of the visuals that are on a sheet. Visual placement is determined by the layout of the sheet.
         */
        visuals?: outputs.quicksight.TemplateVisual[];
    }

    export interface TemplateSheetElementConfigurationOverrides {
        /**
         * Determines whether or not the overrides are visible. Choose one of the following options:
         *
         * - `VISIBLE`
         * - `HIDDEN`
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateSheetElementRenderingRule {
        /**
         * The override configuration of the rendering rules of a sheet.
         */
        configurationOverrides: outputs.quicksight.TemplateSheetElementConfigurationOverrides;
        /**
         * The expression of the rendering rules of a sheet.
         */
        expression: string;
    }

    export interface TemplateSheetTextBox {
        /**
         * The content that is displayed in the text box.
         */
        content?: string;
        /**
         * The unique identifier for a text box. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have text boxes that share identifiers.
         */
        sheetTextBoxId: string;
    }

    export interface TemplateSheetVisualScopingConfiguration {
        /**
         * The scope of the applied entities. Choose one of the following options:
         *
         * - `ALL_VISUALS`
         * - `SELECTED_VISUALS`
         */
        scope: enums.quicksight.TemplateFilterVisualScope;
        /**
         * The selected sheet that the filter is applied to.
         */
        sheetId: string;
        /**
         * The selected visuals that the filter is applied to.
         */
        visualIds?: string[];
    }

    export interface TemplateShortFormatText {
        /**
         * Plain text format.
         */
        plainText?: string;
        /**
         * Rich text. Examples of rich text include bold, underline, and italics.
         */
        richText?: string;
    }

    export interface TemplateSimpleClusterMarker {
        /**
         * The color of the simple cluster marker.
         */
        color?: string;
    }

    export interface TemplateSliderControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateSmallMultiplesAxisProperties {
        /**
         * Defines the placement of the axis. By default, axes are rendered `OUTSIDE` of the panels. Axes with `INDEPENDENT` scale are rendered `INSIDE` the panels.
         */
        placement?: enums.quicksight.TemplateSmallMultiplesAxisPlacement;
        /**
         * Determines whether scale of the axes are shared or independent. The default value is `SHARED` .
         */
        scale?: enums.quicksight.TemplateSmallMultiplesAxisScale;
    }

    export interface TemplateSmallMultiplesOptions {
        /**
         * Sets the maximum number of visible columns to display in the grid of small multiples panels.
         *
         * The default is `Auto` , which automatically adjusts the columns in the grid to fit the overall layout and size of the given chart.
         */
        maxVisibleColumns?: number;
        /**
         * Sets the maximum number of visible rows to display in the grid of small multiples panels.
         *
         * The default value is `Auto` , which automatically adjusts the rows in the grid to fit the overall layout and size of the given chart.
         */
        maxVisibleRows?: number;
        /**
         * Configures the display options for each small multiples panel.
         */
        panelConfiguration?: outputs.quicksight.TemplatePanelConfiguration;
        /**
         * The properties of a small multiples X axis.
         */
        xAxis?: outputs.quicksight.TemplateSmallMultiplesAxisProperties;
        /**
         * The properties of a small multiples Y axis.
         */
        yAxis?: outputs.quicksight.TemplateSmallMultiplesAxisProperties;
    }

    /**
     * <p>The source analysis of the template.</p>
     */
    export interface TemplateSourceAnalysis {
        /**
         * <p>The Amazon Resource Name (ARN) of the resource.</p>
         */
        arn: string;
        /**
         * <p>A structure containing information about the dataset references used as placeholders
         *             in the template.</p>
         */
        dataSetReferences: outputs.quicksight.TemplateDataSetReference[];
    }

    /**
     * <p>The source entity of the template.</p>
     */
    export interface TemplateSourceEntity {
        /**
         * The source analysis, if it is based on an analysis.
         */
        sourceAnalysis?: outputs.quicksight.TemplateSourceAnalysis;
        /**
         * The source template, if it is based on an template.
         */
        sourceTemplate?: outputs.quicksight.TemplateSourceTemplate;
    }

    /**
     * <p>The source template of the template.</p>
     */
    export interface TemplateSourceTemplate {
        /**
         * <p>The Amazon Resource Name (ARN) of the resource.</p>
         */
        arn: string;
    }

    export interface TemplateSpacing {
        /**
         * String based length that is composed of value and unit
         */
        bottom?: string;
        /**
         * String based length that is composed of value and unit
         */
        left?: string;
        /**
         * String based length that is composed of value and unit
         */
        right?: string;
        /**
         * String based length that is composed of value and unit
         */
        top?: string;
    }

    export interface TemplateStringDefaultValues {
        /**
         * The dynamic value of the `StringDefaultValues` . Different defaults displayed according to users, groups, and values mapping.
         */
        dynamicValue?: outputs.quicksight.TemplateDynamicDefaultValue;
        /**
         * The static values of the `DecimalDefaultValues` .
         */
        staticValues?: string[];
    }

    export interface TemplateStringFormatConfiguration {
        /**
         * The options that determine the null value format configuration.
         */
        nullValueFormatConfiguration?: outputs.quicksight.TemplateNullValueFormatConfiguration;
        /**
         * The formatting configuration for numeric strings.
         */
        numericFormatConfiguration?: outputs.quicksight.TemplateNumericFormatConfiguration;
    }

    export interface TemplateStringParameterDeclaration {
        /**
         * The default values of a parameter. If the parameter is a single-value parameter, a maximum of one default value can be provided.
         */
        defaultValues?: outputs.quicksight.TemplateStringDefaultValues;
        mappedDataSetParameters?: outputs.quicksight.TemplateMappedDataSetParameter[];
        /**
         * The name of the parameter that is being declared.
         */
        name: string;
        /**
         * The value type determines whether the parameter is a single-value or multi-value parameter.
         */
        parameterValueType: enums.quicksight.TemplateParameterValueType;
        /**
         * The configuration that defines the default value of a `String` parameter when a value has not been set.
         */
        valueWhenUnset?: outputs.quicksight.TemplateStringValueWhenUnsetConfiguration;
    }

    export interface TemplateStringValueWhenUnsetConfiguration {
        /**
         * A custom value that's used when the value of a parameter isn't set.
         */
        customValue?: string;
        /**
         * The built-in options for default values. The value can be one of the following:
         *
         * - `RECOMMENDED` : The recommended value.
         * - `NULL` : The `NULL` value.
         */
        valueWhenUnsetOption?: enums.quicksight.TemplateValueWhenUnsetOption;
    }

    export interface TemplateSubtotalOptions {
        /**
         * The custom label string for the subtotal cells.
         */
        customLabel?: string;
        /**
         * The field level (all, custom, last) for the subtotal cells.
         */
        fieldLevel?: enums.quicksight.TemplatePivotTableSubtotalLevel;
        /**
         * The optional configuration of subtotal cells.
         */
        fieldLevelOptions?: outputs.quicksight.TemplatePivotTableFieldSubtotalOptions[];
        /**
         * The cell styling options for the subtotals of header cells.
         */
        metricHeaderCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The style targets options for subtotals.
         */
        styleTargets?: outputs.quicksight.TemplateTableStyleTarget[];
        /**
         * The cell styling options for the subtotal cells.
         */
        totalCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The visibility configuration for the subtotal cells.
         */
        totalsVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The cell styling options for the subtotals of value cells.
         */
        valueCellStyle?: outputs.quicksight.TemplateTableCellStyle;
    }

    export interface TemplateTableAggregatedFieldWells {
        /**
         * The group by field well for a pivot table. Values are grouped by group by fields.
         */
        groupBy?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The values field well for a pivot table. Values are aggregated based on group by fields.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateTableBorderOptions {
        /**
         * The color of a table border.
         */
        color?: string;
        /**
         * The style (none, solid) of a table border.
         */
        style?: enums.quicksight.TemplateTableBorderStyle;
        /**
         * The thickness of a table border.
         */
        thickness?: number;
    }

    export interface TemplateTableCellConditionalFormatting {
        /**
         * The field ID of the cell for conditional formatting.
         */
        fieldId: string;
        /**
         * The text format of the cell for conditional formatting.
         */
        textFormat?: outputs.quicksight.TemplateTextConditionalFormat;
    }

    export interface TemplateTableCellImageSizingConfiguration {
        /**
         * The cell scaling configuration of the sizing options for the table image configuration.
         */
        tableCellImageScalingConfiguration?: enums.quicksight.TemplateTableCellImageScalingConfiguration;
    }

    export interface TemplateTableCellStyle {
        /**
         * The background color for the table cells.
         */
        backgroundColor?: string;
        /**
         * The borders for the table cells.
         */
        border?: outputs.quicksight.TemplateGlobalTableBorderOptions;
        /**
         * The font configuration of the table cells.
         */
        fontConfiguration?: outputs.quicksight.TemplateFontConfiguration;
        /**
         * The height color for the table cells.
         */
        height?: number;
        /**
         * The horizontal text alignment (left, center, right, auto) for the table cells.
         */
        horizontalTextAlignment?: enums.quicksight.TemplateHorizontalTextAlignment;
        /**
         * The text wrap (none, wrap) for the table cells.
         */
        textWrap?: enums.quicksight.TemplateTextWrap;
        /**
         * The vertical text alignment (top, middle, bottom) for the table cells.
         */
        verticalTextAlignment?: enums.quicksight.TemplateVerticalTextAlignment;
        /**
         * The visibility of the table cells.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTableConditionalFormatting {
        /**
         * Conditional formatting options for a `PivotTableVisual` .
         */
        conditionalFormattingOptions?: outputs.quicksight.TemplateTableConditionalFormattingOption[];
    }

    export interface TemplateTableConditionalFormattingOption {
        /**
         * The cell conditional formatting option for a table.
         */
        cell?: outputs.quicksight.TemplateTableCellConditionalFormatting;
        /**
         * The row conditional formatting option for a table.
         */
        row?: outputs.quicksight.TemplateTableRowConditionalFormatting;
    }

    export interface TemplateTableConfiguration {
        /**
         * The field options for a table visual.
         */
        fieldOptions?: outputs.quicksight.TemplateTableFieldOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateTableFieldWells;
        /**
         * The paginated report options for a table visual.
         */
        paginatedReportOptions?: outputs.quicksight.TemplateTablePaginatedReportOptions;
        /**
         * The sort configuration for a `TableVisual` .
         */
        sortConfiguration?: outputs.quicksight.TemplateTableSortConfiguration;
        /**
         * A collection of inline visualizations to display within a chart.
         */
        tableInlineVisualizations?: outputs.quicksight.TemplateTableInlineVisualization[];
        /**
         * The table options for a table visual.
         */
        tableOptions?: outputs.quicksight.TemplateTableOptions;
        /**
         * The total options for a table visual.
         */
        totalOptions?: outputs.quicksight.TemplateTotalOptions;
    }

    export interface TemplateTableFieldCustomIconContent {
        /**
         * The icon set type (link) of the custom icon content for table URL link content.
         */
        icon?: enums.quicksight.TemplateTableFieldIconSetType;
    }

    export interface TemplateTableFieldCustomTextContent {
        /**
         * The font configuration of the custom text content for the table URL link content.
         */
        fontConfiguration: outputs.quicksight.TemplateFontConfiguration;
        /**
         * The string value of the custom text content for the table URL link content.
         */
        value?: string;
    }

    export interface TemplateTableFieldImageConfiguration {
        /**
         * The sizing options for the table image configuration.
         */
        sizingOptions?: outputs.quicksight.TemplateTableCellImageSizingConfiguration;
    }

    export interface TemplateTableFieldLinkConfiguration {
        /**
         * The URL content (text, icon) for the table link configuration.
         */
        content: outputs.quicksight.TemplateTableFieldLinkContentConfiguration;
        /**
         * The URL target (new tab, new window, same tab) for the table link configuration.
         */
        target: enums.quicksight.TemplateUrlTargetConfiguration;
    }

    export interface TemplateTableFieldLinkContentConfiguration {
        /**
         * The custom icon content for the table link content configuration.
         */
        customIconContent?: outputs.quicksight.TemplateTableFieldCustomIconContent;
        /**
         * The custom text content (value, font configuration) for the table link content configuration.
         */
        customTextContent?: outputs.quicksight.TemplateTableFieldCustomTextContent;
    }

    export interface TemplateTableFieldOption {
        /**
         * The custom label for a table field.
         */
        customLabel?: string;
        /**
         * The field ID for a table field.
         */
        fieldId: string;
        /**
         * The URL configuration for a table field.
         */
        urlStyling?: outputs.quicksight.TemplateTableFieldUrlConfiguration;
        /**
         * The visibility of a table field.
         */
        visibility?: enums.quicksight.TemplateVisibility;
        /**
         * String based length that is composed of value and unit in px
         */
        width?: string;
    }

    export interface TemplateTableFieldOptions {
        /**
         * The order of the field IDs that are configured as field options for a table visual.
         */
        order?: string[];
        /**
         * The settings for the pinned columns of a table visual.
         */
        pinnedFieldOptions?: outputs.quicksight.TemplateTablePinnedFieldOptions;
        /**
         * The field options to be configured to a table.
         */
        selectedFieldOptions?: outputs.quicksight.TemplateTableFieldOption[];
    }

    export interface TemplateTableFieldUrlConfiguration {
        /**
         * The image configuration of a table field URL.
         */
        imageConfiguration?: outputs.quicksight.TemplateTableFieldImageConfiguration;
        /**
         * The link configuration of a table field URL.
         */
        linkConfiguration?: outputs.quicksight.TemplateTableFieldLinkConfiguration;
    }

    export interface TemplateTableFieldWells {
        /**
         * The aggregated field well for the table.
         */
        tableAggregatedFieldWells?: outputs.quicksight.TemplateTableAggregatedFieldWells;
        /**
         * The unaggregated field well for the table.
         */
        tableUnaggregatedFieldWells?: outputs.quicksight.TemplateTableUnaggregatedFieldWells;
    }

    export interface TemplateTableInlineVisualization {
        /**
         * The configuration of the inline visualization of the data bars within a chart.
         */
        dataBars?: outputs.quicksight.TemplateDataBarsOptions;
    }

    export interface TemplateTableOptions {
        /**
         * The table cell style of table cells.
         */
        cellStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The table cell style of a table header.
         */
        headerStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The orientation (vertical, horizontal) for a table.
         */
        orientation?: enums.quicksight.TemplateTableOrientation;
        /**
         * The row alternate color options (widget status, row alternate colors) for a table.
         */
        rowAlternateColorOptions?: outputs.quicksight.TemplateRowAlternateColorOptions;
    }

    export interface TemplateTablePaginatedReportOptions {
        /**
         * The visibility of repeating header rows on each page.
         */
        overflowColumnHeaderVisibility?: enums.quicksight.TemplateVisibility;
        /**
         * The visibility of printing table overflow across pages.
         */
        verticalOverflowVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTablePinnedFieldOptions {
        /**
         * A list of columns to be pinned to the left of a table visual.
         */
        pinnedLeftFields?: string[];
    }

    export interface TemplateTableRowConditionalFormatting {
        /**
         * The conditional formatting color (solid, gradient) of the background for a table row.
         */
        backgroundColor?: outputs.quicksight.TemplateConditionalFormattingColor;
        /**
         * The conditional formatting color (solid, gradient) of the text for a table row.
         */
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateTableSideBorderOptions {
        /**
         * The table border options of the bottom border.
         */
        bottom?: outputs.quicksight.TemplateTableBorderOptions;
        /**
         * The table border options of the inner horizontal border.
         */
        innerHorizontal?: outputs.quicksight.TemplateTableBorderOptions;
        /**
         * The table border options of the inner vertical border.
         */
        innerVertical?: outputs.quicksight.TemplateTableBorderOptions;
        /**
         * The table border options of the left border.
         */
        left?: outputs.quicksight.TemplateTableBorderOptions;
        /**
         * The table border options of the right border.
         */
        right?: outputs.quicksight.TemplateTableBorderOptions;
        /**
         * The table border options of the top border.
         */
        top?: outputs.quicksight.TemplateTableBorderOptions;
    }

    export interface TemplateTableSortConfiguration {
        /**
         * The pagination configuration (page size, page number) for the table.
         */
        paginationConfiguration?: outputs.quicksight.TemplatePaginationConfiguration;
        /**
         * The field sort options for rows in the table.
         */
        rowSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateTableStyleTarget {
        /**
         * The cell type of the table style target.
         */
        cellType: enums.quicksight.TemplateStyledCellType;
    }

    export interface TemplateTableUnaggregatedFieldWells {
        /**
         * The values field well for a pivot table. Values are unaggregated for an unaggregated table.
         */
        values?: outputs.quicksight.TemplateUnaggregatedField[];
    }

    export interface TemplateTableVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateTableConfiguration;
        /**
         * The conditional formatting for a `PivotTableVisual` .
         */
        conditionalFormatting?: outputs.quicksight.TemplateTableConditionalFormatting;
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface TemplateTextAreaControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the placeholder options in a text area control.
         */
        placeholderOptions?: outputs.quicksight.TemplateTextControlPlaceholderOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateTextConditionalFormat {
        /**
         * The conditional formatting for the text background color.
         */
        backgroundColor?: outputs.quicksight.TemplateConditionalFormattingColor;
        /**
         * The conditional formatting for the icon.
         */
        icon?: outputs.quicksight.TemplateConditionalFormattingIcon;
        /**
         * The conditional formatting for the text color.
         */
        textColor?: outputs.quicksight.TemplateConditionalFormattingColor;
    }

    export interface TemplateTextControlPlaceholderOptions {
        /**
         * The visibility configuration of the placeholder options in a text control.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTextFieldControlDisplayOptions {
        /**
         * The configuration of info icon label options.
         */
        infoIconLabelOptions?: outputs.quicksight.TemplateSheetControlInfoIconLabelOptions;
        /**
         * The configuration of the placeholder options in a text field control.
         */
        placeholderOptions?: outputs.quicksight.TemplateTextControlPlaceholderOptions;
        /**
         * The options to configure the title visibility, name, and font size.
         */
        titleOptions?: outputs.quicksight.TemplateLabelOptions;
    }

    export interface TemplateThousandSeparatorOptions {
        /**
         * Determines the thousands separator symbol.
         */
        symbol?: enums.quicksight.TemplateNumericSeparatorSymbol;
        /**
         * Determines the visibility of the thousands separator.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTimeBasedForecastProperties {
        /**
         * The lower boundary setup of a forecast computation.
         */
        lowerBoundary?: number;
        /**
         * The periods backward setup of a forecast computation.
         */
        periodsBackward?: number;
        /**
         * The periods forward setup of a forecast computation.
         */
        periodsForward?: number;
        /**
         * The prediction interval setup of a forecast computation.
         */
        predictionInterval?: number;
        /**
         * The seasonality setup of a forecast computation. Choose one of the following options:
         *
         * - `NULL` : The input is set to `NULL` .
         * - `NON_NULL` : The input is set to a custom value.
         */
        seasonality?: number;
        /**
         * The upper boundary setup of a forecast computation.
         */
        upperBoundary?: number;
    }

    export interface TemplateTimeEqualityFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.TemplateDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The parameter whose value should be used for the filter value.
         *
         * This field is mutually exclusive to `Value` and `RollingDate` .
         */
        parameterName?: string;
        /**
         * The rolling date input for the `TimeEquality` filter.
         *
         * This field is mutually exclusive to `Value` and `ParameterName` .
         */
        rollingDate?: outputs.quicksight.TemplateRollingDateConfiguration;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
        /**
         * The value of a `TimeEquality` filter.
         *
         * This field is mutually exclusive to `RollingDate` and `ParameterName` .
         */
        value?: string;
    }

    export interface TemplateTimeRangeDrillDownFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The maximum value for the filter value range.
         */
        rangeMaximum: string;
        /**
         * The minimum value for the filter value range.
         */
        rangeMinimum: string;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity: enums.quicksight.TemplateTimeGranularity;
    }

    export interface TemplateTimeRangeFilter {
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.TemplateDefaultFilterControlConfiguration;
        /**
         * The exclude period of the time range filter.
         */
        excludePeriodConfiguration?: outputs.quicksight.TemplateExcludePeriodConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * Determines whether the maximum value in the filter value range should be included in the filtered results.
         */
        includeMaximum?: boolean;
        /**
         * Determines whether the minimum value in the filter value range should be included in the filtered results.
         */
        includeMinimum?: boolean;
        /**
         * This option determines how null values should be treated when filtering data.
         *
         * - `ALL_VALUES` : Include null values in filtered results.
         * - `NULLS_ONLY` : Only include null values in filtered results.
         * - `NON_NULLS_ONLY` : Exclude null values from filtered results.
         */
        nullOption: enums.quicksight.TemplateFilterNullOption;
        /**
         * The maximum value for the filter value range.
         */
        rangeMaximumValue?: outputs.quicksight.TemplateTimeRangeFilterValue;
        /**
         * The minimum value for the filter value range.
         */
        rangeMinimumValue?: outputs.quicksight.TemplateTimeRangeFilterValue;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
    }

    export interface TemplateTimeRangeFilterValue {
        /**
         * The parameter type input value.
         */
        parameter?: string;
        /**
         * The rolling date input value.
         */
        rollingDate?: outputs.quicksight.TemplateRollingDateConfiguration;
        /**
         * The static input value.
         */
        staticValue?: string;
    }

    export interface TemplateTooltipItem {
        /**
         * The tooltip item for the columns that are not part of a field well.
         */
        columnTooltipItem?: outputs.quicksight.TemplateColumnTooltipItem;
        /**
         * The tooltip item for the fields.
         */
        fieldTooltipItem?: outputs.quicksight.TemplateFieldTooltipItem;
    }

    export interface TemplateTooltipOptions {
        /**
         * The setup for the detailed tooltip. The tooltip setup is always saved. The display type is decided based on the tooltip type.
         */
        fieldBasedTooltip?: outputs.quicksight.TemplateFieldBasedTooltip;
        /**
         * The selected type for the tooltip. Choose one of the following options:
         *
         * - `BASIC` : A basic tooltip.
         * - `DETAILED` : A detailed tooltip.
         */
        selectedTooltipType?: enums.quicksight.TemplateSelectedTooltipType;
        /**
         * Determines whether or not the tooltip is visible.
         */
        tooltipVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTopBottomFilter {
        /**
         * The aggregation and sort configuration of the top bottom filter.
         */
        aggregationSortConfigurations: outputs.quicksight.TemplateAggregationSortConfiguration[];
        /**
         * The column that the filter is applied to.
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The default configurations for the associated controls. This applies only for filters that are scoped to multiple sheets.
         */
        defaultFilterControlConfiguration?: outputs.quicksight.TemplateDefaultFilterControlConfiguration;
        /**
         * An identifier that uniquely identifies a filter within a dashboard, analysis, or template.
         */
        filterId: string;
        /**
         * The number of items to include in the top bottom filter results.
         */
        limit?: number;
        /**
         * The parameter whose value should be used for the filter value.
         */
        parameterName?: string;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.TemplateTimeGranularity;
    }

    export interface TemplateTopBottomMoversComputation {
        /**
         * The category field that is used in a computation.
         */
        category?: outputs.quicksight.TemplateDimensionField;
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The mover size setup of the top and bottom movers computation.
         */
        moverSize?: number;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The sort order setup of the top and bottom movers computation.
         */
        sortOrder?: enums.quicksight.TemplateTopBottomSortOrder;
        /**
         * The time field that is used in a computation.
         */
        time?: outputs.quicksight.TemplateDimensionField;
        /**
         * The computation type. Choose from the following options:
         *
         * - TOP: Top movers computation.
         * - BOTTOM: Bottom movers computation.
         */
        type: enums.quicksight.TemplateTopBottomComputationType;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateTopBottomRankedComputation {
        /**
         * The category field that is used in a computation.
         */
        category?: outputs.quicksight.TemplateDimensionField;
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The result size of a top and bottom ranked computation.
         */
        resultSize?: number;
        /**
         * The computation type. Choose one of the following options:
         *
         * - TOP: A top ranked computation.
         * - BOTTOM: A bottom ranked computation.
         */
        type: enums.quicksight.TemplateTopBottomComputationType;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateTotalAggregationComputation {
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
        /**
         * The value field that is used in a computation.
         */
        value?: outputs.quicksight.TemplateMeasureField;
    }

    export interface TemplateTotalAggregationFunction {
        /**
         * A built in aggregation function for total values.
         */
        simpleTotalAggregationFunction?: enums.quicksight.TemplateSimpleTotalAggregationFunction;
    }

    export interface TemplateTotalAggregationOption {
        /**
         * The field id that's associated with the total aggregation option.
         */
        fieldId: string;
        /**
         * The total aggregation function that you want to set for a specified field id.
         */
        totalAggregationFunction: outputs.quicksight.TemplateTotalAggregationFunction;
    }

    export interface TemplateTotalOptions {
        /**
         * The custom label string for the total cells.
         */
        customLabel?: string;
        /**
         * The placement (start, end) for the total cells.
         */
        placement?: enums.quicksight.TemplateTableTotalsPlacement;
        /**
         * The scroll status (pinned, scrolled) for the total cells.
         */
        scrollStatus?: enums.quicksight.TemplateTableTotalsScrollStatus;
        /**
         * The total aggregation settings for each value field.
         */
        totalAggregationOptions?: outputs.quicksight.TemplateTotalAggregationOption[];
        /**
         * Cell styling options for the total cells.
         */
        totalCellStyle?: outputs.quicksight.TemplateTableCellStyle;
        /**
         * The visibility configuration for the total cells.
         */
        totalsVisibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateTreeMapAggregatedFieldWells {
        /**
         * The color field well of a tree map. Values are grouped by aggregations based on group by fields.
         */
        colors?: outputs.quicksight.TemplateMeasureField[];
        /**
         * The group by field well of a tree map. Values are grouped based on group by fields.
         */
        groups?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The size field well of a tree map. Values are aggregated based on group by fields.
         */
        sizes?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateTreeMapConfiguration {
        /**
         * The label options (label text, label visibility) for the colors displayed in a tree map.
         */
        colorLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The color options (gradient color, point of divergence) of a tree map.
         */
        colorScale?: outputs.quicksight.TemplateColorScale;
        /**
         * The options that determine if visual data labels are displayed.
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateTreeMapFieldWells;
        /**
         * The label options (label text, label visibility) of the groups that are displayed in a tree map.
         */
        groupLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The legend display setup of the visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The label options (label text, label visibility) of the sizes that are displayed in a tree map.
         */
        sizeLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The sort configuration of a tree map.
         */
        sortConfiguration?: outputs.quicksight.TemplateTreeMapSortConfiguration;
        /**
         * The tooltip display setup of the visual.
         */
        tooltip?: outputs.quicksight.TemplateTooltipOptions;
    }

    export interface TemplateTreeMapFieldWells {
        /**
         * The aggregated field wells of a tree map.
         */
        treeMapAggregatedFieldWells?: outputs.quicksight.TemplateTreeMapAggregatedFieldWells;
    }

    export interface TemplateTreeMapSortConfiguration {
        /**
         * The limit on the number of groups that are displayed.
         */
        treeMapGroupItemsLimitConfiguration?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of group by fields.
         */
        treeMapSort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateTreeMapVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateTreeMapConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    export interface TemplateTrendArrowOptions {
        /**
         * The visibility of the trend arrows.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateUnaggregatedField {
        /**
         * The column that is used in the `UnaggregatedField` .
         */
        column: outputs.quicksight.TemplateColumnIdentifier;
        /**
         * The custom field ID.
         */
        fieldId: string;
        /**
         * The format configuration of the field.
         */
        formatConfiguration?: outputs.quicksight.TemplateFormatConfiguration;
    }

    export interface TemplateUniqueValuesComputation {
        /**
         * The category field that is used in a computation.
         */
        category?: outputs.quicksight.TemplateDimensionField;
        /**
         * The ID for a computation.
         */
        computationId: string;
        /**
         * The name of a computation.
         */
        name?: string;
    }

    /**
     * <p>The option to relax the validation that is required to create and update analyses, dashboards, and templates with definition objects. When you set this value to <code>LENIENT</code>, validation is skipped for specific errors.</p>
     */
    export interface TemplateValidationStrategy {
        /**
         * The mode of validation for the asset to be created or updated. When you set this value to `STRICT` , strict validation for every error is enforced. When you set this value to `LENIENT` , validation is skipped for specific UI errors.
         */
        mode: enums.quicksight.TemplateValidationStrategyMode;
    }

    /**
     * <p>A version of a template.</p>
     */
    export interface TemplateVersion {
        /**
         * <p>The time that this template version was created.</p>
         */
        createdTime?: string;
        /**
         * <p>Schema of the dataset identified by the placeholder. Any dashboard created from this
         *             template should be bound to new datasets matching the same schema described through this
         *             API operation.</p>
         */
        dataSetConfigurations?: outputs.quicksight.TemplateDataSetConfiguration[];
        /**
         * <p>The description of the template.</p>
         */
        description?: string;
        /**
         * <p>Errors associated with this template version.</p>
         */
        errors?: outputs.quicksight.TemplateError[];
        /**
         * <p>A list of the associated sheets with the unique identifier and name of each sheet.</p>
         */
        sheets?: outputs.quicksight.TemplateSheet[];
        /**
         * <p>The Amazon Resource Name (ARN) of an analysis or template that was used to create this
         *             template.</p>
         */
        sourceEntityArn?: string;
        /**
         * The status that is associated with the template.
         *
         * - `CREATION_IN_PROGRESS`
         * - `CREATION_SUCCESSFUL`
         * - `CREATION_FAILED`
         * - `UPDATE_IN_PROGRESS`
         * - `UPDATE_SUCCESSFUL`
         * - `UPDATE_FAILED`
         * - `DELETED`
         */
        status?: enums.quicksight.TemplateResourceStatus;
        /**
         * <p>The ARN of the theme associated with this version of the template.</p>
         */
        themeArn?: string;
        /**
         * <p>The version number of the template version.</p>
         */
        versionNumber?: number;
    }

    export interface TemplateVersionDefinition {
        analysisDefaults?: outputs.quicksight.TemplateAnalysisDefaults;
        /**
         * An array of calculated field definitions for the template.
         */
        calculatedFields?: outputs.quicksight.TemplateCalculatedField[];
        /**
         * An array of template-level column configurations. Column configurations are used to set default formatting for a column that's used throughout a template.
         */
        columnConfigurations?: outputs.quicksight.TemplateColumnConfiguration[];
        /**
         * An array of dataset configurations. These configurations define the required columns for each dataset used within a template.
         */
        dataSetConfigurations: outputs.quicksight.TemplateDataSetConfiguration[];
        /**
         * Filter definitions for a template.
         *
         * For more information, see [Filtering Data](https://docs.aws.amazon.com/quicksight/latest/user/filtering-visual-data.html) in the *Amazon QuickSight User Guide* .
         */
        filterGroups?: outputs.quicksight.TemplateFilterGroup[];
        /**
         * An array of option definitions for a template.
         */
        options?: outputs.quicksight.TemplateAssetOptions;
        /**
         * An array of parameter declarations for a template.
         *
         * *Parameters* are named variables that can transfer a value for use by an action or an object.
         *
         * For more information, see [Parameters in Amazon QuickSight](https://docs.aws.amazon.com/quicksight/latest/user/parameters-in-quicksight.html) in the *Amazon QuickSight User Guide* .
         */
        parameterDeclarations?: outputs.quicksight.TemplateParameterDeclaration[];
        /**
         * An array of sheet definitions for a template.
         */
        sheets?: outputs.quicksight.TemplateSheetDefinition[];
    }

    export interface TemplateVisibleRangeOptions {
        /**
         * The percent range in the visible range.
         */
        percentRange?: outputs.quicksight.TemplatePercentVisibleRange;
    }

    export interface TemplateVisual {
        /**
         * A bar chart.
         *
         * For more information, see [Using bar charts](https://docs.aws.amazon.com/quicksight/latest/user/bar-charts.html) in the *Amazon QuickSight User Guide* .
         */
        barChartVisual?: outputs.quicksight.TemplateBarChartVisual;
        /**
         * A box plot.
         *
         * For more information, see [Using box plots](https://docs.aws.amazon.com/quicksight/latest/user/box-plots.html) in the *Amazon QuickSight User Guide* .
         */
        boxPlotVisual?: outputs.quicksight.TemplateBoxPlotVisual;
        /**
         * A combo chart.
         *
         * For more information, see [Using combo charts](https://docs.aws.amazon.com/quicksight/latest/user/combo-charts.html) in the *Amazon QuickSight User Guide* .
         */
        comboChartVisual?: outputs.quicksight.TemplateComboChartVisual;
        /**
         * A visual that contains custom content.
         *
         * For more information, see [Using custom visual content](https://docs.aws.amazon.com/quicksight/latest/user/custom-visual-content.html) in the *Amazon QuickSight User Guide* .
         */
        customContentVisual?: outputs.quicksight.TemplateCustomContentVisual;
        /**
         * An empty visual.
         */
        emptyVisual?: outputs.quicksight.TemplateEmptyVisual;
        /**
         * A filled map.
         *
         * For more information, see [Creating filled maps](https://docs.aws.amazon.com/quicksight/latest/user/filled-maps.html) in the *Amazon QuickSight User Guide* .
         */
        filledMapVisual?: outputs.quicksight.TemplateFilledMapVisual;
        /**
         * A funnel chart.
         *
         * For more information, see [Using funnel charts](https://docs.aws.amazon.com/quicksight/latest/user/funnel-visual-content.html) in the *Amazon QuickSight User Guide* .
         */
        funnelChartVisual?: outputs.quicksight.TemplateFunnelChartVisual;
        /**
         * A gauge chart.
         *
         * For more information, see [Using gauge charts](https://docs.aws.amazon.com/quicksight/latest/user/gauge-chart.html) in the *Amazon QuickSight User Guide* .
         */
        gaugeChartVisual?: outputs.quicksight.TemplateGaugeChartVisual;
        /**
         * A geospatial map or a points on map visual.
         *
         * For more information, see [Creating point maps](https://docs.aws.amazon.com/quicksight/latest/user/point-maps.html) in the *Amazon QuickSight User Guide* .
         */
        geospatialMapVisual?: outputs.quicksight.TemplateGeospatialMapVisual;
        /**
         * A heat map.
         *
         * For more information, see [Using heat maps](https://docs.aws.amazon.com/quicksight/latest/user/heat-map.html) in the *Amazon QuickSight User Guide* .
         */
        heatMapVisual?: outputs.quicksight.TemplateHeatMapVisual;
        /**
         * A histogram.
         *
         * For more information, see [Using histograms](https://docs.aws.amazon.com/quicksight/latest/user/histogram-charts.html) in the *Amazon QuickSight User Guide* .
         */
        histogramVisual?: outputs.quicksight.TemplateHistogramVisual;
        /**
         * An insight visual.
         *
         * For more information, see [Working with insights](https://docs.aws.amazon.com/quicksight/latest/user/computational-insights.html) in the *Amazon QuickSight User Guide* .
         */
        insightVisual?: outputs.quicksight.TemplateInsightVisual;
        /**
         * A key performance indicator (KPI).
         *
         * For more information, see [Using KPIs](https://docs.aws.amazon.com/quicksight/latest/user/kpi.html) in the *Amazon QuickSight User Guide* .
         */
        kpiVisual?: outputs.quicksight.TemplateKpiVisual;
        /**
         * A line chart.
         *
         * For more information, see [Using line charts](https://docs.aws.amazon.com/quicksight/latest/user/line-charts.html) in the *Amazon QuickSight User Guide* .
         */
        lineChartVisual?: outputs.quicksight.TemplateLineChartVisual;
        /**
         * A pie or donut chart.
         *
         * For more information, see [Using pie charts](https://docs.aws.amazon.com/quicksight/latest/user/pie-chart.html) in the *Amazon QuickSight User Guide* .
         */
        pieChartVisual?: outputs.quicksight.TemplatePieChartVisual;
        /**
         * A pivot table.
         *
         * For more information, see [Using pivot tables](https://docs.aws.amazon.com/quicksight/latest/user/pivot-table.html) in the *Amazon QuickSight User Guide* .
         */
        pivotTableVisual?: outputs.quicksight.TemplatePivotTableVisual;
        /**
         * A radar chart visual.
         *
         * For more information, see [Using radar charts](https://docs.aws.amazon.com/quicksight/latest/user/radar-chart.html) in the *Amazon QuickSight User Guide* .
         */
        radarChartVisual?: outputs.quicksight.TemplateRadarChartVisual;
        /**
         * A sankey diagram.
         *
         * For more information, see [Using Sankey diagrams](https://docs.aws.amazon.com/quicksight/latest/user/sankey-diagram.html) in the *Amazon QuickSight User Guide* .
         */
        sankeyDiagramVisual?: outputs.quicksight.TemplateSankeyDiagramVisual;
        /**
         * A scatter plot.
         *
         * For more information, see [Using scatter plots](https://docs.aws.amazon.com/quicksight/latest/user/scatter-plot.html) in the *Amazon QuickSight User Guide* .
         */
        scatterPlotVisual?: outputs.quicksight.TemplateScatterPlotVisual;
        /**
         * A table visual.
         *
         * For more information, see [Using tables as visuals](https://docs.aws.amazon.com/quicksight/latest/user/tabular.html) in the *Amazon QuickSight User Guide* .
         */
        tableVisual?: outputs.quicksight.TemplateTableVisual;
        /**
         * A tree map.
         *
         * For more information, see [Using tree maps](https://docs.aws.amazon.com/quicksight/latest/user/tree-map.html) in the *Amazon QuickSight User Guide* .
         */
        treeMapVisual?: outputs.quicksight.TemplateTreeMapVisual;
        /**
         * A waterfall chart.
         *
         * For more information, see [Using waterfall charts](https://docs.aws.amazon.com/quicksight/latest/user/waterfall-chart.html) in the *Amazon QuickSight User Guide* .
         */
        waterfallVisual?: outputs.quicksight.TemplateWaterfallVisual;
        /**
         * A word cloud.
         *
         * For more information, see [Using word clouds](https://docs.aws.amazon.com/quicksight/latest/user/word-cloud.html) in the *Amazon QuickSight User Guide* .
         */
        wordCloudVisual?: outputs.quicksight.TemplateWordCloudVisual;
    }

    export interface TemplateVisualCustomAction {
        /**
         * A list of `VisualCustomActionOperations` .
         *
         * This is a union type structure. For this structure to be valid, only one of the attributes can be defined.
         */
        actionOperations: outputs.quicksight.TemplateVisualCustomActionOperation[];
        /**
         * The ID of the `VisualCustomAction` .
         */
        customActionId: string;
        /**
         * The name of the `VisualCustomAction` .
         */
        name: string;
        /**
         * The status of the `VisualCustomAction` .
         */
        status?: enums.quicksight.TemplateWidgetStatus;
        /**
         * The trigger of the `VisualCustomAction` .
         *
         * Valid values are defined as follows:
         *
         * - `DATA_POINT_CLICK` : Initiates a custom action by a left pointer click on a data point.
         * - `DATA_POINT_MENU` : Initiates a custom action by right pointer click from the menu.
         */
        trigger: enums.quicksight.TemplateVisualCustomActionTrigger;
    }

    export interface TemplateVisualCustomActionOperation {
        /**
         * The filter operation that filters data included in a visual or in an entire sheet.
         */
        filterOperation?: outputs.quicksight.TemplateCustomActionFilterOperation;
        /**
         * The navigation operation that navigates between different sheets in the same analysis.
         */
        navigationOperation?: outputs.quicksight.TemplateCustomActionNavigationOperation;
        /**
         * The set parameter operation that sets parameters in custom action.
         */
        setParametersOperation?: outputs.quicksight.TemplateCustomActionSetParametersOperation;
        /**
         * The URL operation that opens a link to another webpage.
         */
        urlOperation?: outputs.quicksight.TemplateCustomActionUrlOperation;
    }

    export interface TemplateVisualPalette {
        /**
         * The chart color options for the visual palette.
         */
        chartColor?: string;
        /**
         * The color map options for the visual palette.
         */
        colorMap?: outputs.quicksight.TemplateDataPathColor[];
    }

    export interface TemplateVisualSubtitleLabelOptions {
        /**
         * The long text format of the subtitle label, such as plain text or rich text.
         */
        formatText?: outputs.quicksight.TemplateLongFormatText;
        /**
         * The visibility of the subtitle label.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateVisualTitleLabelOptions {
        /**
         * The short text format of the title label, such as plain text or rich text.
         */
        formatText?: outputs.quicksight.TemplateShortFormatText;
        /**
         * The visibility of the title label.
         */
        visibility?: enums.quicksight.TemplateVisibility;
    }

    export interface TemplateWaterfallChartAggregatedFieldWells {
        /**
         * The breakdown field wells of a waterfall visual.
         */
        breakdowns?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The category field wells of a waterfall visual.
         */
        categories?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The value field wells of a waterfall visual.
         */
        values?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateWaterfallChartColorConfiguration {
        /**
         * The color configuration for individual groups within a waterfall visual.
         */
        groupColorConfiguration?: outputs.quicksight.TemplateWaterfallChartGroupColorConfiguration;
    }

    export interface TemplateWaterfallChartConfiguration {
        /**
         * The options that determine the presentation of the category axis.
         */
        categoryAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The options that determine the presentation of the category axis label.
         */
        categoryAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The color configuration of a waterfall visual.
         */
        colorConfiguration?: outputs.quicksight.TemplateWaterfallChartColorConfiguration;
        /**
         * The data label configuration of a waterfall visual.
         */
        dataLabels?: outputs.quicksight.TemplateDataLabelOptions;
        /**
         * The field well configuration of a waterfall visual.
         */
        fieldWells?: outputs.quicksight.TemplateWaterfallChartFieldWells;
        /**
         * The legend configuration of a waterfall visual.
         */
        legend?: outputs.quicksight.TemplateLegendOptions;
        /**
         * The options that determine the presentation of the y-axis.
         */
        primaryYAxisDisplayOptions?: outputs.quicksight.TemplateAxisDisplayOptions;
        /**
         * The options that determine the presentation of the y-axis label.
         */
        primaryYAxisLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The sort configuration of a waterfall visual.
         */
        sortConfiguration?: outputs.quicksight.TemplateWaterfallChartSortConfiguration;
        /**
         * The visual palette configuration of a waterfall visual.
         */
        visualPalette?: outputs.quicksight.TemplateVisualPalette;
        /**
         * The options that determine the presentation of a waterfall visual.
         */
        waterfallChartOptions?: outputs.quicksight.TemplateWaterfallChartOptions;
    }

    export interface TemplateWaterfallChartFieldWells {
        /**
         * The field well configuration of a waterfall visual.
         */
        waterfallChartAggregatedFieldWells?: outputs.quicksight.TemplateWaterfallChartAggregatedFieldWells;
    }

    export interface TemplateWaterfallChartGroupColorConfiguration {
        /**
         * Defines the color for the negative bars of a waterfall chart.
         */
        negativeBarColor?: string;
        /**
         * Defines the color for the positive bars of a waterfall chart.
         */
        positiveBarColor?: string;
        /**
         * Defines the color for the total bars of a waterfall chart.
         */
        totalBarColor?: string;
    }

    export interface TemplateWaterfallChartOptions {
        /**
         * This option determines the total bar label of a waterfall visual.
         */
        totalBarLabel?: string;
    }

    export interface TemplateWaterfallChartSortConfiguration {
        /**
         * The limit on the number of bar groups that are displayed.
         */
        breakdownItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of the category fields.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateWaterfallVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration for a waterfall visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateWaterfallChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers.
         */
        visualId: string;
    }

    export interface TemplateWhatIfPointScenario {
        /**
         * The date that you need the forecast results for.
         */
        date: string;
        /**
         * The target value that you want to meet for the provided date.
         */
        value: number;
    }

    export interface TemplateWhatIfRangeScenario {
        /**
         * The end date in the date range that you need the forecast results for.
         */
        endDate: string;
        /**
         * The start date in the date range that you need the forecast results for.
         */
        startDate: string;
        /**
         * The target value that you want to meet for the provided date range.
         */
        value: number;
    }

    export interface TemplateWordCloudAggregatedFieldWells {
        /**
         * The group by field well of a word cloud. Values are grouped by group by fields.
         */
        groupBy?: outputs.quicksight.TemplateDimensionField[];
        /**
         * The size field well of a word cloud. Values are aggregated based on group by fields.
         */
        size?: outputs.quicksight.TemplateMeasureField[];
    }

    export interface TemplateWordCloudChartConfiguration {
        /**
         * The label options (label text, label visibility, and sort icon visibility) for the word cloud category.
         */
        categoryLabelOptions?: outputs.quicksight.TemplateChartAxisLabelOptions;
        /**
         * The field wells of the visual.
         */
        fieldWells?: outputs.quicksight.TemplateWordCloudFieldWells;
        /**
         * The sort configuration of a word cloud visual.
         */
        sortConfiguration?: outputs.quicksight.TemplateWordCloudSortConfiguration;
        /**
         * The options for a word cloud visual.
         */
        wordCloudOptions?: outputs.quicksight.TemplateWordCloudOptions;
    }

    export interface TemplateWordCloudFieldWells {
        /**
         * The aggregated field wells of a word cloud.
         */
        wordCloudAggregatedFieldWells?: outputs.quicksight.TemplateWordCloudAggregatedFieldWells;
    }

    export interface TemplateWordCloudOptions {
        /**
         * The cloud layout options (fluid, normal) of a word cloud.
         */
        cloudLayout?: enums.quicksight.TemplateWordCloudCloudLayout;
        /**
         * The length limit of each word from 1-100.
         */
        maximumStringLength?: number;
        /**
         * The word casing options (lower_case, existing_case) for the words in a word cloud.
         */
        wordCasing?: enums.quicksight.TemplateWordCloudWordCasing;
        /**
         * The word orientation options (horizontal, horizontal_and_vertical) for the words in a word cloud.
         */
        wordOrientation?: enums.quicksight.TemplateWordCloudWordOrientation;
        /**
         * The word padding options (none, small, medium, large) for the words in a word cloud.
         */
        wordPadding?: enums.quicksight.TemplateWordCloudWordPadding;
        /**
         * The word scaling options (emphasize, normal) for the words in a word cloud.
         */
        wordScaling?: enums.quicksight.TemplateWordCloudWordScaling;
    }

    export interface TemplateWordCloudSortConfiguration {
        /**
         * The limit on the number of groups that are displayed in a word cloud.
         */
        categoryItemsLimit?: outputs.quicksight.TemplateItemsLimitConfiguration;
        /**
         * The sort configuration of group by fields.
         */
        categorySort?: outputs.quicksight.TemplateFieldSortOptions[];
    }

    export interface TemplateWordCloudVisual {
        /**
         * The list of custom actions that are configured for a visual.
         */
        actions?: outputs.quicksight.TemplateVisualCustomAction[];
        /**
         * The configuration settings of the visual.
         */
        chartConfiguration?: outputs.quicksight.TemplateWordCloudChartConfiguration;
        /**
         * The column hierarchy that is used during drill-downs and drill-ups.
         */
        columnHierarchies?: outputs.quicksight.TemplateColumnHierarchy[];
        /**
         * The subtitle that is displayed on the visual.
         */
        subtitle?: outputs.quicksight.TemplateVisualSubtitleLabelOptions;
        /**
         * The title that is displayed on the visual.
         */
        title?: outputs.quicksight.TemplateVisualTitleLabelOptions;
        /**
         * The unique identifier of a visual. This identifier must be unique within the context of a dashboard, template, or analysis. Two dashboards, analyses, or templates can have visuals with the same identifiers..
         */
        visualId: string;
    }

    /**
     * <p>The display options for tile borders for visuals.</p>
     */
    export interface ThemeBorderStyle {
        /**
         * <p>The option to enable display of borders for visuals.</p>
         */
        show?: boolean;
    }

    /**
     * <p>The theme configuration. This configuration contains all of the display properties for
     *             a theme.</p>
     */
    export interface ThemeConfiguration {
        /**
         * Color properties that apply to chart data colors.
         */
        dataColorPalette?: outputs.quicksight.ThemeDataColorPalette;
        /**
         * Display options related to sheets.
         */
        sheet?: outputs.quicksight.ThemeSheetStyle;
        typography?: outputs.quicksight.ThemeTypography;
        /**
         * Color properties that apply to the UI and to charts, excluding the colors that apply to data.
         */
        uiColorPalette?: outputs.quicksight.ThemeUiColorPalette;
    }

    /**
     * <p>The theme colors that are used for data colors in charts. The colors description is a
     *             hexadecimal color code that consists of six alphanumerical characters, prefixed with
     *                 <code>#</code>, for example #37BFF5. </p>
     */
    export interface ThemeDataColorPalette {
        /**
         * <p>The hexadecimal codes for the colors.</p>
         */
        colors?: string[];
        /**
         * <p>The hexadecimal code of a color that applies to charts where a lack of data is
         *             highlighted.</p>
         */
        emptyFillColor?: string;
        /**
         * <p>The minimum and maximum hexadecimal codes that describe a color gradient. </p>
         */
        minMaxGradient?: string[];
    }

    /**
     * <p>Theme error.</p>
     */
    export interface ThemeError {
        /**
         * <p>The error message.</p>
         */
        message?: string;
        /**
         * The type of error.
         */
        type?: enums.quicksight.ThemeErrorType;
    }

    export interface ThemeFont {
        /**
         * Determines the font family settings.
         */
        fontFamily?: string;
    }

    /**
     * <p>The display options for gutter spacing between tiles on a sheet.</p>
     */
    export interface ThemeGutterStyle {
        /**
         * <p>This Boolean value controls whether to display a gutter space between sheet tiles.
         *         </p>
         */
        show?: boolean;
    }

    /**
     * <p>The display options for margins around the outside edge of sheets.</p>
     */
    export interface ThemeMarginStyle {
        /**
         * <p>This Boolean value controls whether to display sheet margins.</p>
         */
        show?: boolean;
    }

    /**
     * <p>Permission for the resource.</p>
     */
    export interface ThemeResourcePermission {
        /**
         * <p>The IAM action to grant or revoke permissions on.</p>
         */
        actions: string[];
        /**
         * <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
         *             following:</p>
         *          <ul>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
         *             </li>
         *             <li>
         *                <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight
         *                     ARN. Use this option only to share resources (templates) across Amazon Web Services accounts.
         *                     (This is less common.) </p>
         *             </li>
         *          </ul>
         */
        principal: string;
    }

    /**
     * <p>The theme display options for sheets. </p>
     */
    export interface ThemeSheetStyle {
        /**
         * The display options for tiles.
         */
        tile?: outputs.quicksight.ThemeTileStyle;
        /**
         * The layout options for tiles.
         */
        tileLayout?: outputs.quicksight.ThemeTileLayoutStyle;
    }

    /**
     * <p>The display options for the layout of tiles on a sheet.</p>
     */
    export interface ThemeTileLayoutStyle {
        /**
         * The gutter settings that apply between tiles.
         */
        gutter?: outputs.quicksight.ThemeGutterStyle;
        /**
         * The margin settings that apply around the outside edge of sheets.
         */
        margin?: outputs.quicksight.ThemeMarginStyle;
    }

    /**
     * <p>Display options related to tiles on a sheet.</p>
     */
    export interface ThemeTileStyle {
        /**
         * The border around a tile.
         */
        border?: outputs.quicksight.ThemeBorderStyle;
    }

    export interface ThemeTypography {
        /**
         * Determines the list of font families.
         */
        fontFamilies?: outputs.quicksight.ThemeFont[];
    }

    /**
     * <p>The theme colors that apply to UI and to charts, excluding data colors. The colors
     *             description is a hexadecimal color code that consists of six alphanumerical characters,
     *             prefixed with <code>#</code>, for example #37BFF5. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User
     *                 Guide.</i>
     *          </p>
     */
    export interface ThemeUiColorPalette {
        /**
         * <p>This color is that applies to selected states and buttons.</p>
         */
        accent?: string;
        /**
         * <p>The foreground color that applies to any text or other elements that appear over the
         *             accent color.</p>
         */
        accentForeground?: string;
        /**
         * <p>The color that applies to error messages.</p>
         */
        danger?: string;
        /**
         * <p>The foreground color that applies to any text or other elements that appear over the
         *             error color.</p>
         */
        dangerForeground?: string;
        /**
         * <p>The color that applies to the names of fields that are identified as
         *             dimensions.</p>
         */
        dimension?: string;
        /**
         * <p>The foreground color that applies to any text or other elements that appear over the
         *             dimension color.</p>
         */
        dimensionForeground?: string;
        /**
         * <p>The color that applies to the names of fields that are identified as measures.</p>
         */
        measure?: string;
        /**
         * <p>The foreground color that applies to any text or other elements that appear over the
         *             measure color.</p>
         */
        measureForeground?: string;
        /**
         * <p>The background color that applies to visuals and other high emphasis UI.</p>
         */
        primaryBackground?: string;
        /**
         * <p>The color of text and other foreground elements that appear over the primary
         *             background regions, such as grid lines, borders, table banding, icons, and so on.</p>
         */
        primaryForeground?: string;
        /**
         * <p>The background color that applies to the sheet background and sheet controls.</p>
         */
        secondaryBackground?: string;
        /**
         * <p>The foreground color that applies to any sheet title, sheet control text, or UI that
         *             appears over the secondary background.</p>
         */
        secondaryForeground?: string;
        /**
         * <p>The color that applies to success messages, for example the check mark for a
         *             successful download.</p>
         */
        success?: string;
        /**
         * <p>The foreground color that applies to any text or other elements that appear over the
         *             success color.</p>
         */
        successForeground?: string;
        /**
         * <p>This color that applies to warning and informational messages.</p>
         */
        warning?: string;
        /**
         * <p>The foreground color that applies to any text or other elements that appear over the
         *             warning color.</p>
         */
        warningForeground?: string;
    }

    /**
     * <p>A version of a theme.</p>
     */
    export interface ThemeVersion {
        /**
         * <p>The Amazon Resource Name (ARN) of the resource.</p>
         */
        arn?: string;
        /**
         * <p>The Amazon QuickSight-defined ID of the theme that a custom theme inherits from. All
         *             themes initially inherit from a default Amazon QuickSight theme.</p>
         */
        baseThemeId?: string;
        /**
         * The theme configuration, which contains all the theme display properties.
         */
        configuration?: outputs.quicksight.ThemeConfiguration;
        /**
         * <p>The date and time that this theme version was created.</p>
         */
        createdTime?: string;
        /**
         * <p>The description of the theme.</p>
         */
        description?: string;
        /**
         * <p>Errors associated with the theme.</p>
         */
        errors?: outputs.quicksight.ThemeError[];
        /**
         * The status of the theme version.
         */
        status?: enums.quicksight.ThemeResourceStatus;
        /**
         * <p>The version number of the theme.</p>
         */
        versionNumber?: number;
    }

    export interface TopicCalculatedField {
        /**
         * The default aggregation. Valid values for this structure are `SUM` , `MAX` , `MIN` , `COUNT` , `DISTINCT_COUNT` , and `AVERAGE` .
         */
        aggregation?: enums.quicksight.TopicDefaultAggregation;
        /**
         * The list of aggregation types that are allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
         */
        allowedAggregations?: enums.quicksight.TopicAuthorSpecifiedAggregation[];
        /**
         * The calculated field description.
         */
        calculatedFieldDescription?: string;
        /**
         * The calculated field name.
         */
        calculatedFieldName: string;
        /**
         * The other names or aliases for the calculated field.
         */
        calculatedFieldSynonyms?: string[];
        /**
         * The other names or aliases for the calculated field cell value.
         */
        cellValueSynonyms?: outputs.quicksight.TopicCellValueSynonym[];
        /**
         * The column data role for a calculated field. Valid values for this structure are `DIMENSION` and `MEASURE` .
         */
        columnDataRole?: enums.quicksight.TopicColumnDataRole;
        /**
         * The order in which data is displayed for the calculated field when it's used in a comparative context.
         */
        comparativeOrder?: outputs.quicksight.TopicComparativeOrder;
        /**
         * The default formatting definition.
         */
        defaultFormatting?: outputs.quicksight.TopicDefaultFormatting;
        /**
         * A Boolean value that indicates if a calculated field is visible in the autocomplete.
         */
        disableIndexing?: boolean;
        /**
         * The calculated field expression.
         */
        expression: string;
        /**
         * A boolean value that indicates if a calculated field is included in the topic.
         */
        isIncludedInTopic?: boolean;
        /**
         * A Boolean value that indicates whether to never aggregate calculated field in filters.
         */
        neverAggregateInFilter?: boolean;
        /**
         * The non additive for the table style target.
         */
        nonAdditive?: boolean;
        /**
         * The list of aggregation types that are not allowed for the calculated field. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
         */
        notAllowedAggregations?: enums.quicksight.TopicAuthorSpecifiedAggregation[];
        /**
         * The semantic type.
         */
        semanticType?: outputs.quicksight.TopicSemanticType;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.TopicTimeGranularity;
    }

    export interface TopicCategoryFilter {
        /**
         * The category filter function. Valid values for this structure are `EXACT` and `CONTAINS` .
         */
        categoryFilterFunction?: enums.quicksight.TopicCategoryFilterFunction;
        /**
         * The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.
         */
        categoryFilterType?: enums.quicksight.TopicCategoryFilterType;
        /**
         * The constant used in a category filter.
         */
        constant?: outputs.quicksight.TopicCategoryFilterConstant;
        /**
         * A Boolean value that indicates if the filter is inverse.
         */
        inverse?: boolean;
    }

    export interface TopicCategoryFilterConstant {
        /**
         * A collective constant used in a category filter. This element is used to specify a list of values for the constant.
         */
        collectiveConstant?: outputs.quicksight.TopicCollectiveConstant;
        /**
         * The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are `SINGULAR` and `COLLECTIVE` .
         */
        constantType?: enums.quicksight.TopicConstantType;
        /**
         * A singular constant used in a category filter. This element is used to specify a single value for the constant.
         */
        singularConstant?: string;
    }

    export interface TopicCellValueSynonym {
        /**
         * The cell value.
         */
        cellValue?: string;
        /**
         * Other names or aliases for the cell value.
         */
        synonyms?: string[];
    }

    export interface TopicCollectiveConstant {
        /**
         * A list of values for the collective constant.
         */
        valueList?: string[];
    }

    export interface TopicColumn {
        /**
         * The type of aggregation that is performed on the column data when it's queried.
         */
        aggregation?: enums.quicksight.TopicDefaultAggregation;
        /**
         * The list of aggregation types that are allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
         */
        allowedAggregations?: enums.quicksight.TopicAuthorSpecifiedAggregation[];
        /**
         * The other names or aliases for the column cell value.
         */
        cellValueSynonyms?: outputs.quicksight.TopicCellValueSynonym[];
        /**
         * The role of the column in the data. Valid values are `DIMENSION` and `MEASURE` .
         */
        columnDataRole?: enums.quicksight.TopicColumnDataRole;
        /**
         * A description of the column and its contents.
         */
        columnDescription?: string;
        /**
         * A user-friendly name for the column.
         */
        columnFriendlyName?: string;
        /**
         * The name of the column.
         */
        columnName: string;
        /**
         * The other names or aliases for the column.
         */
        columnSynonyms?: string[];
        /**
         * The order in which data is displayed for the column when it's used in a comparative context.
         */
        comparativeOrder?: outputs.quicksight.TopicComparativeOrder;
        /**
         * The default formatting used for values in the column.
         */
        defaultFormatting?: outputs.quicksight.TopicDefaultFormatting;
        /**
         * A Boolean value that indicates whether the column shows in the autocomplete functionality.
         */
        disableIndexing?: boolean;
        /**
         * A Boolean value that indicates whether the column is included in the query results.
         */
        isIncludedInTopic?: boolean;
        /**
         * A Boolean value that indicates whether to aggregate the column data when it's used in a filter context.
         */
        neverAggregateInFilter?: boolean;
        /**
         * The non additive value for the column.
         */
        nonAdditive?: boolean;
        /**
         * The list of aggregation types that are not allowed for the column. Valid values for this structure are `COUNT` , `DISTINCT_COUNT` , `MIN` , `MAX` , `MEDIAN` , `SUM` , `AVERAGE` , `STDEV` , `STDEVP` , `VAR` , `VARP` , and `PERCENTILE` .
         */
        notAllowedAggregations?: enums.quicksight.TopicAuthorSpecifiedAggregation[];
        /**
         * The semantic type of data contained in the column.
         */
        semanticType?: outputs.quicksight.TopicSemanticType;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.TopicTimeGranularity;
    }

    export interface TopicComparativeOrder {
        /**
         * The list of columns to be used in the ordering.
         */
        specifedOrder?: string[];
        /**
         * The treat of undefined specified values. Valid values for this structure are `LEAST` and `MOST` .
         */
        treatUndefinedSpecifiedValues?: enums.quicksight.TopicUndefinedSpecifiedValueType;
        /**
         * The ordering type for a column. Valid values for this structure are `GREATER_IS_BETTER` , `LESSER_IS_BETTER` and `SPECIFIED` .
         */
        useOrdering?: enums.quicksight.TopicColumnOrderingType;
    }

    export interface TopicDataAggregation {
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        datasetRowDateGranularity?: enums.quicksight.TopicTimeGranularity;
        /**
         * The column name for the default date.
         */
        defaultDateColumnName?: string;
    }

    export interface TopicDatasetMetadata {
        /**
         * The list of calculated field definitions.
         */
        calculatedFields?: outputs.quicksight.TopicCalculatedField[];
        /**
         * The list of column definitions.
         */
        columns?: outputs.quicksight.TopicColumn[];
        /**
         * The definition of a data aggregation.
         */
        dataAggregation?: outputs.quicksight.TopicDataAggregation;
        /**
         * The Amazon Resource Name (ARN) of the dataset.
         */
        datasetArn: string;
        /**
         * The description of the dataset.
         */
        datasetDescription?: string;
        /**
         * The name of the dataset.
         */
        datasetName?: string;
        /**
         * The list of filter definitions.
         */
        filters?: outputs.quicksight.TopicFilter[];
        /**
         * The list of named entities definitions.
         */
        namedEntities?: outputs.quicksight.TopicNamedEntity[];
    }

    export interface TopicDateRangeFilter {
        /**
         * The constant used in a date range filter.
         */
        constant?: outputs.quicksight.TopicRangeFilterConstant;
        /**
         * A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them.
         */
        inclusive?: boolean;
    }

    export interface TopicDefaultFormatting {
        /**
         * The display format. Valid values for this structure are `AUTO` , `PERCENT` , `CURRENCY` , `NUMBER` , `DATE` , and `STRING` .
         */
        displayFormat?: enums.quicksight.TopicDisplayFormat;
        /**
         * The additional options for display formatting.
         */
        displayFormatOptions?: outputs.quicksight.TopicDisplayFormatOptions;
    }

    export interface TopicDisplayFormatOptions {
        /**
         * Determines the blank cell format.
         */
        blankCellFormat?: string;
        /**
         * The currency symbol, such as `USD` .
         */
        currencySymbol?: string;
        /**
         * Determines the `DateTime` format.
         */
        dateFormat?: string;
        /**
         * Determines the decimal separator.
         */
        decimalSeparator?: enums.quicksight.TopicNumericSeparatorSymbol;
        /**
         * Determines the number of fraction digits.
         */
        fractionDigits?: number;
        /**
         * Determines the grouping separator.
         */
        groupingSeparator?: string;
        /**
         * The negative format.
         */
        negativeFormat?: outputs.quicksight.TopicNegativeFormat;
        /**
         * The prefix value for a display format.
         */
        prefix?: string;
        /**
         * The suffix value for a display format.
         */
        suffix?: string;
        /**
         * The unit scaler. Valid values for this structure are: `NONE` , `AUTO` , `THOUSANDS` , `MILLIONS` , `BILLIONS` , and `TRILLIONS` .
         */
        unitScaler?: enums.quicksight.TopicNumberScale;
        /**
         * A Boolean value that indicates whether to use blank cell format.
         */
        useBlankCellFormat?: boolean;
        /**
         * A Boolean value that indicates whether to use grouping.
         */
        useGrouping?: boolean;
    }

    export interface TopicFilter {
        /**
         * The category filter that is associated with this filter.
         */
        categoryFilter?: outputs.quicksight.TopicCategoryFilter;
        /**
         * The date range filter.
         */
        dateRangeFilter?: outputs.quicksight.TopicDateRangeFilter;
        /**
         * The class of the filter. Valid values for this structure are `ENFORCED_VALUE_FILTER` , `CONDITIONAL_VALUE_FILTER` , and `NAMED_VALUE_FILTER` .
         */
        filterClass?: enums.quicksight.TopicFilterClass;
        /**
         * A description of the filter used to select items for a topic.
         */
        filterDescription?: string;
        /**
         * The name of the filter.
         */
        filterName: string;
        /**
         * The other names or aliases for the filter.
         */
        filterSynonyms?: string[];
        /**
         * The type of the filter. Valid values for this structure are `CATEGORY_FILTER` , `NUMERIC_EQUALITY_FILTER` , `NUMERIC_RANGE_FILTER` , `DATE_RANGE_FILTER` , and `RELATIVE_DATE_FILTER` .
         */
        filterType?: enums.quicksight.TopicNamedFilterType;
        /**
         * The numeric equality filter.
         */
        numericEqualityFilter?: outputs.quicksight.TopicNumericEqualityFilter;
        /**
         * The numeric range filter.
         */
        numericRangeFilter?: outputs.quicksight.TopicNumericRangeFilter;
        /**
         * The name of the field that the filter operates on.
         */
        operandFieldName: string;
        /**
         * The relative date filter.
         */
        relativeDateFilter?: outputs.quicksight.TopicRelativeDateFilter;
    }

    export interface TopicNamedEntity {
        /**
         * The definition of a named entity.
         */
        definition?: outputs.quicksight.TopicNamedEntityDefinition[];
        /**
         * The description of the named entity.
         */
        entityDescription?: string;
        /**
         * The name of the named entity.
         */
        entityName: string;
        /**
         * The other names or aliases for the named entity.
         */
        entitySynonyms?: string[];
        /**
         * The type of named entity that a topic represents.
         */
        semanticEntityType?: outputs.quicksight.TopicSemanticEntityType;
    }

    export interface TopicNamedEntityDefinition {
        /**
         * The name of the entity.
         */
        fieldName?: string;
        /**
         * The definition of a metric.
         */
        metric?: outputs.quicksight.TopicNamedEntityDefinitionMetric;
        /**
         * The property name to be used for the named entity.
         */
        propertyName?: string;
        /**
         * The property role. Valid values for this structure are `PRIMARY` and `ID` .
         */
        propertyRole?: enums.quicksight.TopicPropertyRole;
        /**
         * The property usage. Valid values for this structure are `INHERIT` , `DIMENSION` , and `MEASURE` .
         */
        propertyUsage?: enums.quicksight.TopicPropertyUsage;
    }

    export interface TopicNamedEntityDefinitionMetric {
        /**
         * The aggregation of a named entity. Valid values for this structure are `SUM` , `MIN` , `MAX` , `COUNT` , `AVERAGE` , `DISTINCT_COUNT` , `STDEV` , `STDEVP` , `VAR` , `VARP` , `PERCENTILE` , `MEDIAN` , and `CUSTOM` .
         */
        aggregation?: enums.quicksight.TopicNamedEntityAggType;
        /**
         * The additional parameters for an aggregation function.
         */
        aggregationFunctionParameters?: {[key: string]: string};
    }

    export interface TopicNegativeFormat {
        /**
         * The prefix for a negative format.
         */
        prefix?: string;
        /**
         * The suffix for a negative format.
         */
        suffix?: string;
    }

    export interface TopicNumericEqualityFilter {
        /**
         * An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
         */
        aggregation?: enums.quicksight.TopicNamedFilterAggType;
        /**
         * The constant used in a numeric equality filter.
         */
        constant?: outputs.quicksight.TopicSingularFilterConstant;
    }

    export interface TopicNumericRangeFilter {
        /**
         * An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are `NO_AGGREGATION` , `SUM` , `AVERAGE` , `COUNT` , `DISTINCT_COUNT` , `MAX` , `MEDIAN` , `MIN` , `STDEV` , `STDEVP` , `VAR` , and `VARP` .
         */
        aggregation?: enums.quicksight.TopicNamedFilterAggType;
        /**
         * The constant used in a numeric range filter.
         */
        constant?: outputs.quicksight.TopicRangeFilterConstant;
        /**
         * A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter.
         */
        inclusive?: boolean;
    }

    export interface TopicRangeConstant {
        /**
         * The maximum value for a range constant.
         */
        maximum?: string;
        /**
         * The minimum value for a range constant.
         */
        minimum?: string;
    }

    export interface TopicRangeFilterConstant {
        /**
         * The data type of the constant value that is used in a range filter. Valid values for this structure are `RANGE` .
         */
        constantType?: enums.quicksight.TopicConstantType;
        /**
         * The value of the constant that is used to specify the endpoints of a range filter.
         */
        rangeConstant?: outputs.quicksight.TopicRangeConstant;
    }

    export interface TopicRelativeDateFilter {
        /**
         * The constant used in a relative date filter.
         */
        constant?: outputs.quicksight.TopicSingularFilterConstant;
        /**
         * The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are `BEFORE` , `AFTER` , and `BETWEEN` .
         */
        relativeDateFilterFunction?: enums.quicksight.TopicRelativeDateFilterFunction;
        /**
         * The level of time precision that is used to aggregate `DateTime` values.
         */
        timeGranularity?: enums.quicksight.TopicTimeGranularity;
    }

    export interface TopicSemanticEntityType {
        /**
         * The semantic entity sub type name.
         */
        subTypeName?: string;
        /**
         * The semantic entity type name.
         */
        typeName?: string;
        /**
         * The semantic entity type parameters.
         */
        typeParameters?: {[key: string]: string};
    }

    export interface TopicSemanticType {
        /**
         * The semantic type falsey cell value.
         */
        falseyCellValue?: string;
        /**
         * The other names or aliases for the false cell value.
         */
        falseyCellValueSynonyms?: string[];
        /**
         * The semantic type sub type name.
         */
        subTypeName?: string;
        /**
         * The semantic type truthy cell value.
         */
        truthyCellValue?: string;
        /**
         * The other names or aliases for the true cell value.
         */
        truthyCellValueSynonyms?: string[];
        /**
         * The semantic type name.
         */
        typeName?: string;
        /**
         * The semantic type parameters.
         */
        typeParameters?: {[key: string]: string};
    }

    export interface TopicSingularFilterConstant {
        /**
         * The type of the singular filter constant. Valid values for this structure are `SINGULAR` .
         */
        constantType?: enums.quicksight.TopicConstantType;
        /**
         * The value of the singular filter constant.
         */
        singularConstant?: string;
    }

    /**
     * <p>The structure that contains information about a network interface.</p>
     */
    export interface VpcConnectionNetworkInterface {
        /**
         * <p>The availability zone that the network interface resides in.</p>
         */
        availabilityZone?: string;
        /**
         * <p>An error message.</p>
         */
        errorMessage?: string;
        /**
         * <p>The network interface ID.</p>
         */
        networkInterfaceId?: string;
        /**
         * The status of the network interface.
         */
        status?: enums.quicksight.VpcConnectionNetworkInterfaceStatus;
        /**
         * <p>The subnet ID associated with the network interface.</p>
         */
        subnetId?: string;
    }

}

export namespace ram {
}

export namespace rds {
    /**
     * Describes an AWS Identity and Access Management (IAM) role that is associated with a DB cluster.
     */
    export interface DbClusterDbClusterRole {
        /**
         * The name of the feature associated with the AWS Identity and Access Management (IAM) role. For the list of supported feature names, see DBEngineVersion in the Amazon RDS API Reference.
         */
        featureName?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
         */
        roleArn: string;
    }

    export interface DbClusterEndpoint {
        /**
         * The connection endpoint for the DB cluster.
         */
        address?: string;
        /**
         * The port number that will accept connections on this DB cluster.
         */
        port?: string;
    }

    export interface DbClusterMasterUserSecret {
        /**
         * The AWS KMS key identifier that is used to encrypt the secret.
         */
        kmsKeyId?: string;
        /**
         * The Amazon Resource Name (ARN) of the secret.
         */
        secretArn?: string;
    }

    export interface DbClusterReadEndpoint {
        /**
         * The reader endpoint for the DB cluster.
         */
        address?: string;
    }

    /**
     * The ScalingConfiguration property type specifies the scaling configuration of an Aurora Serverless DB cluster.
     */
    export interface DbClusterScalingConfiguration {
        /**
         * A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).
         */
        autoPause?: boolean;
        /**
         * The maximum capacity for an Aurora DB cluster in serverless DB engine mode.
         * For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
         * For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
         * The maximum capacity must be greater than or equal to the minimum capacity.
         */
        maxCapacity?: number;
        /**
         * The minimum capacity for an Aurora DB cluster in serverless DB engine mode.
         * For Aurora MySQL, valid capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.
         * For Aurora PostgreSQL, valid capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
         * The minimum capacity must be less than or equal to the maximum capacity.
         */
        minCapacity?: number;
        /**
         * The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point to perform seamless scaling before enforcing the timeout action.
         * The default is 300.
         */
        secondsBeforeTimeout?: number;
        /**
         * The time, in seconds, before an Aurora DB cluster in serverless mode is paused.
         */
        secondsUntilAutoPause?: number;
        /**
         * The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.
         * ForceApplyCapacityChange sets the capacity to the specified value as soon as possible.
         * RollbackCapacityChange, the default, ignores the capacity change if a scaling point isn't found in the timeout period.
         *
         * For more information, see Autoscaling for Aurora Serverless v1 in the Amazon Aurora User Guide.
         */
        timeoutAction?: string;
    }

    /**
     * Contains the scaling configuration of an Aurora Serverless v2 DB cluster.
     */
    export interface DbClusterServerlessV2ScalingConfiguration {
        /**
         * The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The largest value that you can use is 128.
         */
        maxCapacity?: number;
        /**
         * The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster. You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value that you can use is 0.5.
         */
        minCapacity?: number;
    }

    /**
     * Returns the details of the DB instance’s server certificate.
     *  For more information, see [Using SSL/TLS to encrypt a connection to a DB instance](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html) in the *Amazon RDS User Guide* and [Using SSL/TLS to encrypt a connection to a DB cluster](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html) in the *Amazon Aurora User Guide*.
     */
    export interface DbInstanceCertificateDetails {
        /**
         * The CA identifier of the CA certificate used for the DB instance's server certificate.
         */
        caIdentifier?: string;
        /**
         * The expiration date of the DB instance’s server certificate.
         */
        validTill?: string;
    }

    /**
     * Information about an AWS Identity and Access Management (IAM) role that is associated with a DB instance.
     */
    export interface DbInstanceDbInstanceRole {
        /**
         * The name of the feature associated with the AWS Identity and Access Management (IAM) role. IAM roles that are associated with a DB instance grant permission for the DB instance to access other AWS services on your behalf. For the list of supported feature names, see the ``SupportedFeatureNames`` description in [DBEngineVersion](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DBEngineVersion.html) in the *Amazon RDS API Reference*.
         */
        featureName: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role that is associated with the DB instance.
         */
        roleArn: string;
    }

    /**
     * This data type represents the information you need to connect to an Amazon RDS DB instance. This data type is used as a response element in the following actions:
     *   +   ``CreateDBInstance`` 
     *   +   ``DescribeDBInstances`` 
     *   +   ``DeleteDBInstance`` 
     *   
     *  For the data structure that represents Amazon Aurora DB cluster endpoints, see ``DBClusterEndpoint``.
     */
    export interface DbInstanceEndpoint {
        /**
         * Specifies the DNS address of the DB instance.
         */
        address?: string;
        /**
         * Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
         */
        hostedZoneId?: string;
        /**
         * Specifies the port that the database engine is listening on.
         */
        port?: string;
    }

    /**
     * The ``MasterUserSecret`` return value specifies the secret managed by RDS in AWS Secrets Manager for the master user password.
     *  For more information, see [Password management with Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html) in the *Amazon RDS User Guide* and [Password management with Secrets Manager](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html) in the *Amazon Aurora User Guide.*
     */
    export interface DbInstanceMasterUserSecret {
        /**
         * The AWS KMS key identifier that is used to encrypt the secret.
         */
        kmsKeyId?: string;
        /**
         * The Amazon Resource Name (ARN) of the secret.
         */
        secretArn?: string;
    }

    /**
     * The ``ProcessorFeature`` property type specifies the processor features of a DB instance class status.
     */
    export interface DbInstanceProcessorFeature {
        /**
         * The name of the processor feature. Valid names are ``coreCount`` and ``threadsPerCore``.
         */
        name?: enums.rds.DbInstanceProcessorFeatureName;
        /**
         * The value of a processor feature name.
         */
        value?: string;
    }

    export interface DbProxyAuthFormat {
        /**
         * The type of authentication that the proxy uses for connections from the proxy to the underlying database. 
         */
        authScheme?: enums.rds.DbProxyAuthFormatAuthScheme;
        /**
         * The type of authentication the proxy uses for connections from clients.
         */
        clientPasswordAuthType?: enums.rds.DbProxyAuthFormatClientPasswordAuthType;
        /**
         * A user-specified description about the authentication used by a proxy to log in as a specific database user. 
         */
        description?: string;
        /**
         * Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The ENABLED value is valid only for proxies with RDS for Microsoft SQL Server.
         */
        iamAuth?: enums.rds.DbProxyAuthFormatIamAuth;
        /**
         * The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager. 
         */
        secretArn?: string;
    }

    export interface DbProxyTargetGroupConnectionPoolConfigurationInfoFormat {
        /**
         * The number of seconds for a proxy to wait for a connection to become available in the connection pool.
         */
        connectionBorrowTimeout?: number;
        /**
         * One or more SQL statements for the proxy to run when opening each new database connection.
         */
        initQuery?: string;
        /**
         * The maximum size of the connection pool for each target in a target group.
         */
        maxConnectionsPercent?: number;
        /**
         * Controls how actively the proxy closes idle database connections in the connection pool.
         */
        maxIdleConnectionsPercent?: number;
        /**
         * Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection.
         */
        sessionPinningFilters?: string[];
    }

    /**
     * The OptionConfiguration property type specifies an individual option, and its settings, within an AWS::RDS::OptionGroup resource.
     */
    export interface OptionGroupOptionConfiguration {
        /**
         * A list of DBSecurityGroupMembership name strings used for this option.
         */
        dbSecurityGroupMemberships?: string[];
        /**
         * The configuration of options to include in a group.
         */
        optionName: string;
        /**
         * The option settings to include in an option group.
         */
        optionSettings?: outputs.rds.OptionGroupOptionSetting[];
        /**
         * The version for the option.
         */
        optionVersion?: string;
        /**
         * The optional port for the option.
         */
        port?: number;
        /**
         * A list of VpcSecurityGroupMembership name strings used for this option.
         */
        vpcSecurityGroupMemberships?: string[];
    }

    /**
     * The OptionSetting property type specifies the value for an option within an OptionSetting property.
     */
    export interface OptionGroupOptionSetting {
        /**
         * The name of the option that has settings that you can set.
         */
        name?: string;
        /**
         * The current value of the option setting.
         */
        value?: string;
    }

}

export namespace redshift {
    export interface ClusterEndpoint {
        /**
         * The DNS address of the cluster. This property is read only.
         */
        address?: string;
        /**
         * The port that the database engine is listening on. This property is read only.
         */
        port?: string;
    }

    export interface ClusterLoggingProperties {
        /**
         * The name of an existing S3 bucket where the log files are to be stored.
         *
         * Constraints:
         *
         * - Must be in the same region as the cluster
         * - The cluster must have read bucket and put object permissions
         */
        bucketName?: string;
        /**
         * The prefix applied to the log file names.
         *
         * Constraints:
         *
         * - Cannot exceed 512 characters
         * - Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:
         *
         * - x00 to x20
         * - x22
         * - x27
         * - x5c
         * - x7f or larger
         */
        s3KeyPrefix?: string;
    }

    export interface ClusterParameterGroupParameter {
        /**
         * The name of the parameter.
         */
        parameterName: string;
        /**
         * The value of the parameter. If `ParameterName` is `wlm_json_configuration`, then the maximum size of `ParameterValue` is 8000 characters.
         */
        parameterValue: string;
    }

    /**
     * Describes a network interface.
     */
    export interface EndpointAccessNetworkInterface {
        /**
         * The Availability Zone.
         */
        availabilityZone?: string;
        /**
         * The network interface identifier.
         */
        networkInterfaceId?: string;
        /**
         * The IPv4 address of the network interface within the subnet.
         */
        privateIpAddress?: string;
        /**
         * The subnet identifier.
         */
        subnetId?: string;
    }

    /**
     * Describes the members of a VPC security group.
     */
    export interface EndpointAccessVpcSecurityGroup {
        /**
         * The status of the VPC security group.
         */
        status?: string;
        /**
         * The identifier of the VPC security group.
         */
        vpcSecurityGroupId?: string;
    }

    export interface ScheduledActionType {
    }

    /**
     * The connection endpoint for connecting to an Amazon Redshift cluster through the proxy.
     */
    export interface VpcEndpointProperties {
        /**
         * One or more network interfaces of the endpoint. Also known as an interface endpoint.
         */
        networkInterfaces?: outputs.redshift.EndpointAccessNetworkInterface[];
        /**
         * The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
         */
        vpcEndpointId?: string;
        /**
         * The VPC identifier that the endpoint is associated.
         */
        vpcId?: string;
    }

}

export namespace redshiftserverless {
    export interface Namespace {
        /**
         * The Amazon Resource Name (ARN) for the namespace's admin user credentials secret.
         */
        adminPasswordSecretArn?: string;
        /**
         * The ID of the AWS Key Management Service (KMS) key used to encrypt and store the namespace's admin credentials secret.
         */
        adminPasswordSecretKmsKeyId?: string;
        /**
         * The username of the administrator for the first database created in the namespace.
         */
        adminUsername?: string;
        /**
         * The date of when the namespace was created.
         */
        creationDate?: string;
        /**
         * The name of the first database created in the namespace.
         */
        dbName?: string;
        /**
         * The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.
         */
        defaultIamRoleArn?: string;
        /**
         * A list of IAM roles to associate with the namespace.
         */
        iamRoles?: string[];
        /**
         * The ID of the AWS Key Management Service key used to encrypt your data.
         */
        kmsKeyId?: string;
        /**
         * The types of logs the namespace can export. Available export types are User log, Connection log, and User activity log.
         */
        logExports?: enums.redshiftserverless.NamespaceLogExport[];
        /**
         * The Amazon Resource Name (ARN) associated with a namespace.
         */
        namespaceArn?: string;
        /**
         * The unique identifier of a namespace.
         */
        namespaceId?: string;
        /**
         * The name of the namespace. Must be between 3-64 alphanumeric characters in lowercase, and it cannot be a reserved word. A list of reserved words can be found in [Reserved Words](https://docs.aws.amazon.com//redshift/latest/dg/r_pg_keywords.html) in the Amazon Redshift Database Developer Guide.
         */
        namespaceName?: string;
        /**
         * The status of the namespace.
         */
        status?: enums.redshiftserverless.NamespaceStatus;
    }

    export interface NamespaceSnapshotCopyConfiguration {
        /**
         * The ID of the KMS key to use to encrypt your snapshots in the destination AWS Region .
         */
        destinationKmsKeyId?: string;
        /**
         * The destination AWS Region to copy snapshots to.
         */
        destinationRegion: string;
        /**
         * The retention period of snapshots that are copied to the destination AWS Region .
         */
        snapshotRetentionPeriod?: number;
    }

    export interface Workgroup {
        /**
         * The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
         */
        baseCapacity?: number;
        /**
         * An array of parameters to set for advanced control over a database. The options are `auto_mv` , `datestyle` , `enable_case_sensitive_identifier` , `enable_user_activity_logging` , `query_group` , `search_path` , `require_ssl` , `use_fips_ssl` , and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see [Query monitoring metrics for Amazon Redshift Serverless](https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless) .
         */
        configParameters?: outputs.redshiftserverless.WorkgroupConfigParameter[];
        /**
         * The creation date of the workgroup.
         */
        creationDate?: string;
        /**
         * The endpoint that is created from the workgroup.
         */
        endpoint?: outputs.redshiftserverless.WorkgroupEndpoint;
        /**
         * The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.
         */
        enhancedVpcRouting?: boolean;
        /**
         * The maximum data-warehouse capacity Amazon Redshift Serverless uses to serve queries. The max capacity is specified in RPUs.
         */
        maxCapacity?: number;
        /**
         * The namespace the workgroup is associated with.
         */
        namespaceName?: string;
        /**
         * A value that specifies whether the workgroup can be accessible from a public network.
         */
        publiclyAccessible?: boolean;
        /**
         * An array of security group IDs to associate with the workgroup.
         */
        securityGroupIds?: string[];
        /**
         * The status of the workgroup.
         */
        status?: enums.redshiftserverless.WorkgroupStatus;
        /**
         * An array of subnet IDs the workgroup is associated with.
         */
        subnetIds?: string[];
        /**
         * The Amazon Resource Name (ARN) that links to the workgroup.
         */
        workgroupArn?: string;
        /**
         * The unique identifier of the workgroup.
         */
        workgroupId?: string;
        /**
         * The name of the workgroup.
         */
        workgroupName?: string;
    }

    export interface WorkgroupConfigParameter {
        /**
         * The key of the parameter. The options are `datestyle` , `enable_user_activity_logging` , `query_group` , `search_path` , `max_query_execution_time` , and `require_ssl` .
         */
        parameterKey?: string;
        /**
         * The value of the parameter to set.
         */
        parameterValue?: string;
    }

    export interface WorkgroupEndpoint {
        /**
         * The DNS address of the VPC endpoint.
         */
        address?: string;
        /**
         * The port that Amazon Redshift Serverless listens on.
         */
        port?: number;
        /**
         * An array of `VpcEndpoint` objects.
         */
        vpcEndpoints?: outputs.redshiftserverless.WorkgroupVpcEndpoint[];
    }

    export interface WorkgroupNetworkInterface {
        /**
         * The availability Zone.
         */
        availabilityZone?: string;
        /**
         * The unique identifier of the network interface.
         */
        networkInterfaceId?: string;
        /**
         * The IPv4 address of the network interface within the subnet.
         */
        privateIpAddress?: string;
        /**
         * The unique identifier of the subnet.
         */
        subnetId?: string;
    }

    export interface WorkgroupVpcEndpoint {
        /**
         * One or more network interfaces of the endpoint. Also known as an interface endpoint.
         */
        networkInterfaces?: outputs.redshiftserverless.WorkgroupNetworkInterface[];
        /**
         * The connection endpoint ID for connecting to Amazon Redshift Serverless.
         */
        vpcEndpointId?: string;
        /**
         * The VPC identifier that the endpoint is associated with.
         */
        vpcId?: string;
    }

}

export namespace refactorspaces {
    export interface ApplicationApiGatewayProxyInput {
        /**
         * The type of endpoint to use for the API Gateway proxy. If no value is specified in the request, the value is set to `REGIONAL` by default.
         *
         * If the value is set to `PRIVATE` in the request, this creates a private API endpoint that is isolated from the public internet. The private endpoint can only be accessed by using Amazon Virtual Private Cloud ( Amazon VPC ) interface endpoints for the Amazon API Gateway that has been granted access. For more information about creating a private connection with Refactor Spaces and interface endpoint ( AWS PrivateLink ) availability, see [Access Refactor Spaces using an interface endpoint ( AWS PrivateLink )](https://docs.aws.amazon.com/migrationhub-refactor-spaces/latest/userguide/vpc-interface-endpoints.html) .
         */
        endpointType?: enums.refactorspaces.ApplicationApiGatewayEndpointType;
        /**
         * The name of the API Gateway stage. The name defaults to `prod` .
         */
        stageName?: string;
    }

    export interface RouteDefaultRouteInput {
        /**
         * If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
         */
        activationState: enums.refactorspaces.RouteActivationState;
    }

    export interface RouteUriPathRouteInput {
        /**
         * If set to `ACTIVE` , traffic is forwarded to this route’s service after the route is created.
         */
        activationState: enums.refactorspaces.RouteActivationState;
        /**
         * If set to `true` , this option appends the source path to the service URL endpoint.
         */
        appendSourcePath?: boolean;
        /**
         * Indicates whether to match all subpaths of the given source path. If this value is `false` , requests must match the source path exactly before they are forwarded to this route's service.
         */
        includeChildPaths?: boolean;
        /**
         * A list of HTTP methods to match. An empty list matches all values. If a method is present, only HTTP requests using that method are forwarded to this route’s service.
         */
        methods?: enums.refactorspaces.RouteMethod[];
        /**
         * This is the path that Refactor Spaces uses to match traffic. Paths must start with `/` and are relative to the base of the application. To use path parameters in the source path, add a variable in curly braces. For example, the resource path {user} represents a path parameter called 'user'.
         */
        sourcePath?: string;
    }

    export interface ServiceLambdaEndpointInput {
        /**
         * The Amazon Resource Name (ARN) of the Lambda function or alias.
         */
        arn: string;
    }

    export interface ServiceUrlEndpointInput {
        /**
         * The health check URL of the URL endpoint type. If the URL is a public endpoint, the `HealthUrl` must also be a public endpoint. If the URL is a private endpoint inside a virtual private cloud (VPC), the health URL must also be a private endpoint, and the host must be the same as the URL.
         */
        healthUrl?: string;
        /**
         * The URL to route traffic to. The URL must be an [rfc3986-formatted URL](https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc3986) . If the host is a domain name, the name must be resolvable over the public internet. If the scheme is `https` , the top level domain of the host must be listed in the [IANA root zone database](https://docs.aws.amazon.com/https://www.iana.org/domains/root/db) .
         */
        url: string;
    }

}

export namespace rekognition {
    /**
     * A bounding box denoting a region of interest in the frame to be analyzed.
     */
    export interface StreamProcessorBoundingBox {
        /**
         * Height of the bounding box as a ratio of the overall image height.
         */
        height: number;
        /**
         * Left coordinate of the bounding box as a ratio of overall image width.
         */
        left: number;
        /**
         * Top coordinate of the bounding box as a ratio of overall image height.
         */
        top: number;
        /**
         * Width of the bounding box as a ratio of the overall image width.
         */
        width: number;
    }

    /**
     * Connected home settings to use on a streaming video. Note that either ConnectedHomeSettings or FaceSearchSettings should be set. Not both
     */
    export interface StreamProcessorConnectedHomeSettings {
        /**
         * Specifies what you want to detect in the video, such as people, packages, or pets. The current valid labels you can include in this list are: "PERSON", "PET", "PACKAGE", and "ALL".
         */
        labels: string[];
        /**
         * Minimum object class match confidence score that must be met to return a result for a recognized object.
         */
        minConfidence?: number;
    }

    /**
     * Indicates whether Rekognition is allowed to store the video stream data for model-training.
     */
    export interface StreamProcessorDataSharingPreference {
        /**
         * Flag to enable data-sharing
         */
        optIn: boolean;
    }

    /**
     * Face search settings to use on a streaming video. Note that either FaceSearchSettings or ConnectedHomeSettings should be set. Not both
     */
    export interface StreamProcessorFaceSearchSettings {
        /**
         * The ID of a collection that contains faces that you want to search for.
         */
        collectionId: string;
        /**
         * Minimum face match confidence score percentage that must be met to return a result for a recognized face. The default is 80. 0 is the lowest confidence. 100 is the highest confidence. Values between 0 and 100 are accepted.
         */
        faceMatchThreshold?: number;
    }

    /**
     * The Amazon Kinesis Data Stream stream to which the Amazon Rekognition stream processor streams the analysis results, as part of face search feature.
     */
    export interface StreamProcessorKinesisDataStream {
        /**
         * ARN of the Kinesis Data Stream stream.
         */
        arn: string;
    }

    /**
     * The Kinesis Video Stream that streams the source video.
     */
    export interface StreamProcessorKinesisVideoStream {
        /**
         * ARN of the Kinesis Video Stream that streams the source video.
         */
        arn: string;
    }

    /**
     * The ARN of the SNS notification channel where events of interests are published, as part of connected home feature.
     */
    export interface StreamProcessorNotificationChannel {
        /**
         * ARN of the SNS topic.
         */
        arn: string;
    }

    /**
     * An (X, Y) cartesian coordinate denoting a point on the frame
     */
    export interface StreamProcessorPoint {
        /**
         * The X coordinate of the point.
         */
        x: number;
        /**
         * The Y coordinate of the point.
         */
        y: number;
    }

    /**
     * The S3 location in customer's account where inference output & artifacts are stored, as part of connected home feature.
     */
    export interface StreamProcessorS3Destination {
        /**
         * Name of the S3 bucket.
         */
        bucketName: string;
        /**
         * The object key prefix path where the results will be stored. Default is no prefix path
         */
        objectKeyPrefix?: string;
    }

}

export namespace resiliencehub {
    /**
     * Indicates an event you would like to subscribe and get notification for.
     */
    export interface AppEventSubscription {
        /**
         * The type of event you would like to subscribe and get notification for.
         */
        eventType: enums.resiliencehub.AppEventSubscriptionEventType;
        /**
         * Unique name to identify an event subscription.
         */
        name: string;
        /**
         * Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic.
         */
        snsTopicArn?: string;
    }

    /**
     * Defines the roles and credentials that AWS Resilience Hub would use while creating the application, importing its resources, and running an assessment.
     */
    export interface AppPermissionModel {
        /**
         * Defines a list of role Amazon Resource Names (ARNs) to be used in other accounts. These ARNs are used for querying purposes while importing resources and assessing your application.
         */
        crossAccountRoleArns?: string[];
        /**
         * Existing AWS IAM role name in the primary AWS account that will be assumed by AWS Resilience Hub Service Principle to obtain a read-only access to your application resources while running an assessment.
         */
        invokerRoleName?: string;
        /**
         * Defines how AWS Resilience Hub scans your resources. It can scan for the resources by using a pre-existing role in your AWS account, or by using the credentials of the current IAM user.
         */
        type: enums.resiliencehub.AppPermissionModelType;
    }

    export interface AppPhysicalResourceId {
        /**
         * The AWS account that owns the physical resource.
         */
        awsAccountId?: string;
        /**
         * The AWS Region that the physical resource is located in.
         */
        awsRegion?: string;
        /**
         * Identifier of the physical resource.
         */
        identifier: string;
        /**
         * Specifies the type of physical resource identifier.
         *
         * - **Arn** - The resource identifier is an Amazon Resource Name (ARN) and it can identify the following list of resources:
         *
         * - `AWS::ECS::Service`
         * - `AWS::EFS::FileSystem`
         * - `AWS::ElasticLoadBalancingV2::LoadBalancer`
         * - `AWS::Lambda::Function`
         * - `AWS::SNS::Topic`
         * - **Native** - The resource identifier is an AWS Resilience Hub -native identifier and it can identify the following list of resources:
         *
         * - `AWS::ApiGateway::RestApi`
         * - `AWS::ApiGatewayV2::Api`
         * - `AWS::AutoScaling::AutoScalingGroup`
         * - `AWS::DocDB::DBCluster`
         * - `AWS::DocDB::DBGlobalCluster`
         * - `AWS::DocDB::DBInstance`
         * - `AWS::DynamoDB::GlobalTable`
         * - `AWS::DynamoDB::Table`
         * - `AWS::EC2::EC2Fleet`
         * - `AWS::EC2::Instance`
         * - `AWS::EC2::NatGateway`
         * - `AWS::EC2::Volume`
         * - `AWS::ElasticLoadBalancing::LoadBalancer`
         * - `AWS::RDS::DBCluster`
         * - `AWS::RDS::DBInstance`
         * - `AWS::RDS::GlobalCluster`
         * - `AWS::Route53::RecordSet`
         * - `AWS::S3::Bucket`
         * - `AWS::SQS::Queue`
         */
        type: string;
    }

    /**
     * Resource mapping is used to map logical resources from template to physical resource
     */
    export interface AppResourceMapping {
        /**
         * Name of the Amazon Elastic Kubernetes Service cluster and namespace that this resource is mapped to when the `mappingType` is `EKS` .
         *
         * > This parameter accepts values in "eks-cluster/namespace" format.
         */
        eksSourceName?: string;
        /**
         * Name of the AWS CloudFormation stack this resource is mapped to when the `mappingType` is `CfnStack` .
         */
        logicalStackName?: string;
        /**
         * Specifies the type of resource mapping.
         */
        mappingType: string;
        /**
         * Identifier of the physical resource.
         */
        physicalResourceId: outputs.resiliencehub.AppPhysicalResourceId;
        /**
         * Name of the resource that this resource is mapped to when the `mappingType` is `Resource` .
         */
        resourceName?: string;
        /**
         * Name of the Terraform source that this resource is mapped to when the `mappingType` is `Terraform` .
         */
        terraformSourceName?: string;
    }

    /**
     * Failure Policy.
     */
    export interface ResiliencyPolicyFailurePolicy {
        /**
         * RPO in seconds.
         */
        rpoInSecs: number;
        /**
         * RTO in seconds.
         */
        rtoInSecs: number;
    }

    export interface ResiliencyPolicyPolicyMap {
        /**
         * Defines the RTO and RPO targets for Availability Zone disruption.
         */
        az: outputs.resiliencehub.ResiliencyPolicyFailurePolicy;
        /**
         * Defines the RTO and RPO targets for hardware disruption.
         */
        hardware: outputs.resiliencehub.ResiliencyPolicyFailurePolicy;
        /**
         * Defines the RTO and RPO targets for Regional disruption.
         */
        region?: outputs.resiliencehub.ResiliencyPolicyFailurePolicy;
        /**
         * Defines the RTO and RPO targets for software disruption.
         */
        software: outputs.resiliencehub.ResiliencyPolicyFailurePolicy;
    }

}

export namespace resourceexplorer2 {
    export interface ViewIncludedProperty {
        /**
         * The name of the property that is included in this view.
         */
        name: string;
    }

    export interface ViewSearchFilter {
        /**
         * The string that contains the search keywords, prefixes, and operators to control the results that can be returned by a Search operation.
         *
         * For information about the supported syntax, see [Search query reference](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html) in the *AWS Resource Explorer User Guide* .
         *
         * > This query string in the context of this operation supports only [filter prefixes](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-filters) with optional [operators](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html#query-syntax-operators) . It doesn't support free-form text. For example, the string `region:us* service:ec2 -tag:stage=prod` includes all Amazon EC2 resources in any AWS Region that begin with the letters `us` and are *not* tagged with a key `Stage` that has the value `prod` .
         */
        filterString: string;
    }

}

export namespace resourcegroups {
    export interface GroupConfigurationItem {
        parameters?: outputs.resourcegroups.GroupConfigurationParameter[];
        type?: string;
    }

    export interface GroupConfigurationParameter {
        name?: string;
        values?: string[];
    }

    export interface GroupQuery {
        /**
         * Specifies limits to the types of resources that can be included in the resource group. For example, if `ResourceTypeFilters` is `["AWS::EC2::Instance", "AWS::DynamoDB::Table"]` , only EC2 instances or DynamoDB tables can be members of this resource group. The default value is `["AWS::AllSupported"]` .
         */
        resourceTypeFilters?: string[];
        /**
         * Specifies the ARN of a CloudFormation stack. All supported resources of the CloudFormation stack are members of the resource group. If you don't specify an ARN, this parameter defaults to the current stack that you are defining, which means that all the resources of the current stack are grouped.
         *
         * You can specify a value for `StackIdentifier` only when the `ResourceQuery.Type` property is `CLOUDFORMATION_STACK_1_0.`
         */
        stackIdentifier?: string;
        /**
         * A list of key-value pair objects that limit which resources can be members of the resource group. This property is required when the `ResourceQuery.Type` property is `TAG_FILTERS_1_0` .
         *
         * A resource must have a tag that matches every filter that is provided in the `TagFilters` list.
         */
        tagFilters?: outputs.resourcegroups.GroupTagFilter[];
    }

    export interface GroupResourceQuery {
        /**
         * The query that defines the membership of the group. This is a structure with properties that depend on the `Type` .
         *
         * The `Query` structure must be included in the following scenarios:
         *
         * - When the `Type` is `TAG_FILTERS_1_0` , you must specify a `Query` structure that contains a `TagFilters` list of tags. Resources with tags that match those in the `TagFilter` list become members of the resource group.
         * - When the `Type` is `CLOUDFORMATION_STACK_1_0` then this field is required only when you must specify a CloudFormation stack other than the one you are defining. To do this, the `Query` structure must contain the `StackIdentifier` property. If you don't specify either a `Query` structure or a `StackIdentifier` within that `Query` , then it defaults to the CloudFormation stack that you're currently constructing.
         */
        query?: outputs.resourcegroups.GroupQuery;
        /**
         * Specifies the type of resource query that determines this group's membership. There are two valid query types:
         *
         * - `TAG_FILTERS_1_0` indicates that the group is a tag-based group. To complete the group membership, you must include the `TagFilters` property to specify the tag filters to use in the query.
         * - `CLOUDFORMATION_STACK_1_0` , the default, indicates that the group is a CloudFormation stack-based group. Group membership is based on the CloudFormation stack. You must specify the `StackIdentifier` property in the query to define which stack to associate the group with, or leave it empty to default to the stack where the group is defined.
         */
        type?: enums.resourcegroups.GroupResourceQueryType;
    }

    export interface GroupTagFilter {
        /**
         * A string that defines a tag key. Only resources in the account that are tagged with a specified tag key are members of the tag-based resource group.
         *
         * This field is required when the `ResourceQuery` structure's `Type` property is `TAG_FILTERS_1_0` . You must specify at least one tag key.
         */
        key?: string;
        /**
         * A list of tag values that can be included in the tag-based resource group. This is optional. If you don't specify a value or values for a key, then an AWS resource with any value for that key is a member.
         */
        values?: string[];
    }

}

export namespace robomaker {
    /**
     * The robot software suite used by the robot application.
     */
    export interface RobotApplicationRobotSoftwareSuite {
        /**
         * The name of robot software suite.
         */
        name: enums.robomaker.RobotApplicationRobotSoftwareSuiteName;
        /**
         * The version of robot software suite.
         */
        version?: enums.robomaker.RobotApplicationRobotSoftwareSuiteVersion;
    }

    export interface RobotApplicationSourceConfig {
        /**
         * The architecture of robot application.
         */
        architecture: enums.robomaker.RobotApplicationSourceConfigArchitecture;
        /**
         * The Arn of the S3Bucket that stores the robot application source.
         */
        s3Bucket: string;
        /**
         * The s3 key of robot application source.
         */
        s3Key: string;
    }

    /**
     * Information about a rendering engine.
     */
    export interface SimulationApplicationRenderingEngine {
        /**
         * The name of the rendering engine.
         */
        name: enums.robomaker.SimulationApplicationRenderingEngineName;
        /**
         * The version of the rendering engine.
         */
        version: string;
    }

    /**
     * Information about a robot software suite.
     */
    export interface SimulationApplicationRobotSoftwareSuite {
        /**
         * The name of the robot software suite.
         */
        name: enums.robomaker.SimulationApplicationRobotSoftwareSuiteName;
        /**
         * The version of the robot software suite.
         */
        version?: enums.robomaker.SimulationApplicationRobotSoftwareSuiteVersion;
    }

    /**
     * Information about a simulation software suite.
     */
    export interface SimulationApplicationSimulationSoftwareSuite {
        /**
         * The name of the simulation software suite.
         */
        name: enums.robomaker.SimulationApplicationSimulationSoftwareSuiteName;
        /**
         * The version of the simulation software suite.
         */
        version?: enums.robomaker.SimulationApplicationSimulationSoftwareSuiteVersion;
    }

    /**
     * Information about a source configuration.
     */
    export interface SimulationApplicationSourceConfig {
        /**
         * The target processor architecture for the application.
         */
        architecture: enums.robomaker.SimulationApplicationSourceConfigArchitecture;
        /**
         * The Amazon S3 bucket name.
         */
        s3Bucket: string;
        /**
         * The s3 object key.
         */
        s3Key: string;
    }

}

export namespace rolesanywhere {
    export interface TrustAnchorNotificationSetting {
        /**
         * The specified channel of notification. IAM Roles Anywhere uses CloudWatch metrics, EventBridge , and AWS Health Dashboard to notify for an event.
         *
         * > In the absence of a specific channel, IAM Roles Anywhere applies this setting to 'ALL' channels.
         */
        channel?: enums.rolesanywhere.TrustAnchorNotificationChannel;
        /**
         * Indicates whether the notification setting is enabled.
         */
        enabled: boolean;
        /**
         * The event to which this notification setting is applied.
         */
        event: enums.rolesanywhere.TrustAnchorNotificationEvent;
        /**
         * The number of days before a notification event. This value is required for a notification setting that is enabled.
         */
        threshold?: number;
    }

    export interface TrustAnchorSource {
        /**
         * A union object representing the data field of the TrustAnchor depending on its type
         */
        sourceData?: outputs.rolesanywhere.TrustAnchorSourceData0Properties | outputs.rolesanywhere.TrustAnchorSourceData1Properties;
        /**
         * The type of the TrustAnchor.
         */
        sourceType?: enums.rolesanywhere.TrustAnchorType;
    }

    export interface TrustAnchorSourceData0Properties {
        x509CertificateData: string;
    }

    export interface TrustAnchorSourceData1Properties {
        acmPcaArn: string;
    }

}

export namespace route53 {
    export interface CidrCollectionLocation {
        /**
         * A list of CIDR blocks.
         */
        cidrList: string[];
        /**
         * The name of the location that is associated with the CIDR collection.
         */
        locationName: string;
    }

    /**
     * A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether the specified health check is healthy.
     */
    export interface HealthCheckAlarmIdentifier {
        /**
         * The name of the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.
         */
        name: string;
        /**
         * For the CloudWatch alarm that you want Route 53 health checkers to use to determine whether this health check is healthy, the region that the alarm was created in.
         */
        region: string;
    }

    /**
     * A complex type that contains information about the health check.
     */
    export interface HealthCheckConfigProperties {
        /**
         * A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether the specified health check is healthy.
         */
        alarmIdentifier?: outputs.route53.HealthCheckAlarmIdentifier;
        /**
         * (CALCULATED Health Checks Only) A complex type that contains one `ChildHealthCheck` element for each health check that you want to associate with a `CALCULATED` health check.
         */
        childHealthChecks?: string[];
        /**
         * Specify whether you want Amazon Route 53 to send the value of `FullyQualifiedDomainName` to the endpoint in the `client_hello` message during TLS negotiation. This allows the endpoint to respond to `HTTPS` health check requests with the applicable SSL/TLS certificate.
         *
         * Some endpoints require that `HTTPS` requests include the host name in the `client_hello` message. If you don't enable SNI, the status of the health check will be `SSL alert handshake_failure` . A health check can also have that status for other reasons. If SNI is enabled and you're still getting the error, check the SSL/TLS configuration on your endpoint and confirm that your certificate is valid.
         *
         * The SSL/TLS certificate on your endpoint includes a domain name in the `Common Name` field and possibly several more in the `Subject Alternative Names` field. One of the domain names in the certificate should match the value that you specify for `FullyQualifiedDomainName` . If the endpoint responds to the `client_hello` message with a certificate that does not include the domain name that you specified in `FullyQualifiedDomainName` , a health checker will retry the handshake. In the second attempt, the health checker will omit `FullyQualifiedDomainName` from the `client_hello` message.
         */
        enableSni?: boolean;
        /**
         * The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa. For more information, see [How Amazon Route 53 Determines Whether an Endpoint Is Healthy](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html) in the *Amazon Route 53 Developer Guide* .
         *
         * If you don't specify a value for `FailureThreshold` , the default value is three health checks.
         */
        failureThreshold?: number;
        /**
         * Amazon Route 53 behavior depends on whether you specify a value for `IPAddress` .
         *
         * *If you specify a value for* `IPAddress` :
         *
         * Amazon Route 53 sends health check requests to the specified IPv4 or IPv6 address and passes the value of `FullyQualifiedDomainName` in the `Host` header for all health checks except TCP health checks. This is typically the fully qualified DNS name of the endpoint on which you want Route 53 to perform health checks.
         *
         * When Route 53 checks the health of an endpoint, here is how it constructs the `Host` header:
         *
         * - If you specify a value of `80` for `Port` and `HTTP` or `HTTP_STR_MATCH` for `Type` , Route 53 passes the value of `FullyQualifiedDomainName` to the endpoint in the Host header.
         * - If you specify a value of `443` for `Port` and `HTTPS` or `HTTPS_STR_MATCH` for `Type` , Route 53 passes the value of `FullyQualifiedDomainName` to the endpoint in the `Host` header.
         * - If you specify another value for `Port` and any value except `TCP` for `Type` , Route 53 passes `FullyQualifiedDomainName:Port` to the endpoint in the `Host` header.
         *
         * If you don't specify a value for `FullyQualifiedDomainName` , Route 53 substitutes the value of `IPAddress` in the `Host` header in each of the preceding cases.
         *
         * *If you don't specify a value for `IPAddress`* :
         *
         * Route 53 sends a DNS request to the domain that you specify for `FullyQualifiedDomainName` at the interval that you specify for `RequestInterval` . Using an IPv4 address that DNS returns, Route 53 then checks the health of the endpoint.
         *
         * > If you don't specify a value for `IPAddress` , Route 53 uses only IPv4 to send health checks to the endpoint. If there's no record with a type of A for the name that you specify for `FullyQualifiedDomainName` , the health check fails with a "DNS resolution failed" error. 
         *
         * If you want to check the health of multiple records that have the same name and type, such as multiple weighted records, and if you choose to specify the endpoint only by `FullyQualifiedDomainName` , we recommend that you create a separate health check for each endpoint. For example, create a health check for each HTTP server that is serving content for www.example.com. For the value of `FullyQualifiedDomainName` , specify the domain name of the server (such as us-east-2-www.example.com), not the name of the records (www.example.com).
         *
         * > In this configuration, if you create a health check for which the value of `FullyQualifiedDomainName` matches the name of the records and you then associate the health check with those records, health check results will be unpredictable. 
         *
         * In addition, if the value that you specify for `Type` is `HTTP` , `HTTPS` , `HTTP_STR_MATCH` , or `HTTPS_STR_MATCH` , Route 53 passes the value of `FullyQualifiedDomainName` in the `Host` header, as it does when you specify a value for `IPAddress` . If the value of `Type` is `TCP` , Route 53 doesn't pass a `Host` header.
         */
        fullyQualifiedDomainName?: string;
        /**
         * The number of child health checks that are associated with a `CALCULATED` health check that Amazon Route 53 must consider healthy for the `CALCULATED` health check to be considered healthy. To specify the child health checks that you want to associate with a `CALCULATED` health check, use the [ChildHealthChecks](https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-ChildHealthChecks) element.
         *
         * Note the following:
         *
         * - If you specify a number greater than the number of child health checks, Route 53 always considers this health check to be unhealthy.
         * - If you specify `0` , Route 53 always considers this health check to be healthy.
         */
        healthThreshold?: number;
        /**
         * When CloudWatch has insufficient data about the metric to determine the alarm state, the status that you want Amazon Route 53 to assign to the health check:
         *
         * - `Healthy` : Route 53 considers the health check to be healthy.
         * - `Unhealthy` : Route 53 considers the health check to be unhealthy.
         * - `LastKnownStatus` : Route 53 uses the status of the health check from the last time that CloudWatch had sufficient data to determine the alarm state. For new health checks that have no last known status, the default status for the health check is healthy.
         */
        insufficientDataHealthStatus?: enums.route53.HealthCheckConfigPropertiesInsufficientDataHealthStatus;
        /**
         * Specify whether you want Amazon Route 53 to invert the status of a health check, for example, to consider a health check unhealthy when it otherwise would be considered healthy.
         */
        inverted?: boolean;
        /**
         * The IPv4 or IPv6 IP address of the endpoint that you want Amazon Route 53 to perform health checks on. If you don't specify a value for `IPAddress` , Route 53 sends a DNS request to resolve the domain name that you specify in `FullyQualifiedDomainName` at the interval that you specify in `RequestInterval` . Using an IP address returned by DNS, Route 53 then checks the health of the endpoint.
         *
         * Use one of the following formats for the value of `IPAddress` :
         *
         * - *IPv4 address* : four values between 0 and 255, separated by periods (.), for example, `192.0.2.44` .
         * - *IPv6 address* : eight groups of four hexadecimal values, separated by colons (:), for example, `2001:0db8:85a3:0000:0000:abcd:0001:2345` . You can also shorten IPv6 addresses as described in RFC 5952, for example, `2001:db8:85a3::abcd:1:2345` .
         *
         * If the endpoint is an EC2 instance, we recommend that you create an Elastic IP address, associate it with your EC2 instance, and specify the Elastic IP address for `IPAddress` . This ensures that the IP address of your instance will never change.
         *
         * For more information, see [FullyQualifiedDomainName](https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-FullyQualifiedDomainName) .
         *
         * Constraints: Route 53 can't check the health of endpoints for which the IP address is in local, private, non-routable, or multicast ranges. For more information about IP addresses for which you can't create health checks, see the following documents:
         *
         * - [RFC 5735, Special Use IPv4 Addresses](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc5735)
         * - [RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6598)
         * - [RFC 5156, Special-Use IPv6 Addresses](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc5156)
         *
         * When the value of `Type` is `CALCULATED` or `CLOUDWATCH_METRIC` , omit `IPAddress` .
         */
        ipAddress?: string;
        /**
         * Specify whether you want Amazon Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint, and to display CloudWatch latency graphs on the *Health Checks* page in the Route 53 console.
         *
         * > You can't change the value of `MeasureLatency` after you create a health check.
         */
        measureLatency?: boolean;
        /**
         * The port on the endpoint that you want Amazon Route 53 to perform health checks on.
         *
         * > Don't specify a value for `Port` when you specify a value for [Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-healthcheck-healthcheckconfig.html#cfn-route53-healthcheck-healthcheckconfig-type) of `CLOUDWATCH_METRIC` or `CALCULATED` .
         */
        port?: number;
        /**
         * A complex type that contains one `Region` element for each region from which you want Amazon Route 53 health checkers to check the specified endpoint.
         *
         * If you don't specify any regions, Route 53 health checkers automatically performs checks from all of the regions that are listed under *Valid Values* .
         *
         * If you update a health check to remove a region that has been performing health checks, Route 53 will briefly continue to perform checks from that region to ensure that some health checkers are always checking the endpoint (for example, if you replace three regions with four different regions).
         */
        regions?: string[];
        /**
         * The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health check request. Each Route 53 health checker makes requests at this interval.
         *
         * > You can't change the value of `RequestInterval` after you create a health check. 
         *
         * If you don't specify a value for `RequestInterval` , the default value is `30` seconds.
         */
        requestInterval?: number;
        /**
         * The path, if any, that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example, the file /docs/route53-health-check.html. You can also include query string parameters, for example, `/welcome.html?language=jp&login=y` .
         */
        resourcePath?: string;
        /**
         * The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control.
         *
         * For more information about Route 53 Application Recovery Controller, see [Route 53 Application Recovery Controller Developer Guide.](https://docs.aws.amazon.com/r53recovery/latest/dg/what-is-route-53-recovery.html) .
         */
        routingControlArn?: string;
        /**
         * If the value of Type is `HTTP_STR_MATCH` or `HTTPS_STR_MATCH` , the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the response body, Route 53 considers the resource healthy.
         *
         * Route 53 considers case when searching for `SearchString` in the response body.
         */
        searchString?: string;
        /**
         * The type of health check that you want to create, which indicates how Amazon Route 53 determines whether an endpoint is healthy.
         *
         * > You can't change the value of `Type` after you create a health check. 
         *
         * You can create the following types of health checks:
         *
         * - *HTTP* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400.
         * - *HTTPS* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400.
         *
         * > If you specify `HTTPS` for the value of `Type` , the endpoint must support TLS v1.0 or later.
         * - *HTTP_STR_MATCH* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and searches the first 5,120 bytes of the response body for the string that you specify in `SearchString` .
         * - *HTTPS_STR_MATCH* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an `HTTPS` request and searches the first 5,120 bytes of the response body for the string that you specify in `SearchString` .
         * - *TCP* : Route 53 tries to establish a TCP connection.
         * - *CLOUDWATCH_METRIC* : The health check is associated with a CloudWatch alarm. If the state of the alarm is `OK` , the health check is considered healthy. If the state is `ALARM` , the health check is considered unhealthy. If CloudWatch doesn't have sufficient data to determine whether the state is `OK` or `ALARM` , the health check status depends on the setting for `InsufficientDataHealthStatus` : `Healthy` , `Unhealthy` , or `LastKnownStatus` .
         *
         * > Route 53 supports CloudWatch alarms with the following features:
         * > 
         * > - Standard-resolution metrics. High-resolution metrics aren't supported. For more information, see [High-Resolution Metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/publishingMetrics.html#high-resolution-metrics) in the *Amazon CloudWatch User Guide* .
         * > - Statistics: Average, Minimum, Maximum, Sum, and SampleCount. Extended statistics aren't supported.
         * - *CALCULATED* : For health checks that monitor the status of other health checks, Route 53 adds up the number of health checks that Route 53 health checkers consider to be healthy and compares that number with the value of `HealthThreshold` .
         * - *RECOVERY_CONTROL* : The health check is assocated with a Route53 Application Recovery Controller routing control. If the routing control state is `ON` , the health check is considered healthy. If the state is `OFF` , the health check is considered unhealthy.
         *
         * For more information, see [How Route 53 Determines Whether an Endpoint Is Healthy](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html) in the *Amazon Route 53 Developer Guide* .
         */
        type: enums.route53.HealthCheckConfigPropertiesType;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface HealthCheckTag {
        /**
         * The key name of the tag.
         */
        key: string;
        /**
         * The value for the tag.
         */
        value: string;
    }

    /**
     * A complex type that contains an optional comment about your hosted zone. If you don't want to specify a comment, omit both the ``HostedZoneConfig`` and ``Comment`` elements.
     */
    export interface HostedZoneConfig {
        /**
         * Any comments that you want to include about the hosted zone.
         */
        comment?: string;
    }

    /**
     * A complex type that contains information about a configuration for DNS query logging.
     */
    export interface HostedZoneQueryLoggingConfig {
        /**
         * The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.
         */
        cloudWatchLogsLogGroupArn: string;
    }

    /**
     * A complex type that contains information about a tag that you want to add or edit for the specified health check or hosted zone.
     */
    export interface HostedZoneTag {
        /**
         * The value of ``Key`` depends on the operation that you want to perform:
         *   +   *Add a tag to a health check or hosted zone*: ``Key`` is the name that you want to give the new tag.
         *   +   *Edit a tag*: ``Key`` is the name of the tag that you want to change the ``Value`` for.
         *   +   *Delete a key*: ``Key`` is the name of the tag you want to remove.
         *   +   *Give a name to a health check*: Edit the default ``Name`` tag. In the Amazon Route 53 console, the list of your health checks includes a *Name* column that lets you see the name that you've given to each health check.
         */
        key: string;
        /**
         * The value of ``Value`` depends on the operation that you want to perform:
         *   +   *Add a tag to a health check or hosted zone*: ``Value`` is the value that you want to give the new tag.
         *   +   *Edit a tag*: ``Value`` is the new value that you want to assign the tag.
         */
        value: string;
    }

    /**
     * *Private hosted zones only:* A complex type that contains information about an Amazon VPC. Route 53 Resolver uses the records in the private hosted zone to route traffic in that VPC. 
     *   For public hosted zones, omit ``VPCs``, ``VPCId``, and ``VPCRegion``.
     */
    export interface HostedZoneVpc {
        /**
         * *Private hosted zones only:* The ID of an Amazon VPC.
         *   For public hosted zones, omit ``VPCs``, ``VPCId``, and ``VPCRegion``.
         */
        vpcId: string;
        /**
         * *Private hosted zones only:* The region that an Amazon VPC was created in.
         *   For public hosted zones, omit ``VPCs``, ``VPCId``, and ``VPCRegion``.
         */
        vpcRegion: string;
    }

}

export namespace route53profiles {
}

export namespace route53recoverycontrol {
    export interface ClusterEndpoint {
        /**
         * A cluster endpoint URL for one of the five redundant clusters that you specify to set or retrieve a routing control state.
         */
        endpoint?: string;
        /**
         * The AWS Region for a cluster endpoint.
         */
        region?: string;
    }

    /**
     * An assertion rule enforces that, when a routing control state is changed, that the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
     */
    export interface SafetyRuleAssertionRule {
        /**
         * The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three AWS Regions.
         */
        assertedControls: string[];
        /**
         * An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
         */
        waitPeriodMs: number;
    }

    /**
     * A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
     */
    export interface SafetyRuleGatingRule {
        /**
         * The gating controls for the gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
         */
        gatingControls: string[];
        /**
         * Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three AWS Regions. Now you specify AtLeast 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true. 
         * In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.
         */
        targetControls: string[];
        /**
         * An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
         */
        waitPeriodMs: number;
    }

    /**
     * The rule configuration for an assertion rule or gating rule. This is the criteria that you set for specific assertion controls (routing controls) or gating controls. This configuration specifies how many controls must be enabled after a transaction completes.
     */
    export interface SafetyRuleRuleConfig {
        /**
         * Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.
         */
        inverted: boolean;
        /**
         * The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
         */
        threshold: number;
        /**
         * A rule can be one of the following: `ATLEAST` , `AND` , or `OR` .
         */
        type: enums.route53recoverycontrol.SafetyRuleRuleType;
    }

}

export namespace route53recoveryreadiness {
    /**
     * A component for DNS/routing control readiness checks.
     */
    export interface ResourceSetDnsTargetResource {
        /**
         * The domain name that acts as an ingress point to a portion of the customer application.
         */
        domainName?: string;
        /**
         * The hosted zone Amazon Resource Name (ARN) that contains the DNS record with the provided name of the target resource.
         */
        hostedZoneArn?: string;
        /**
         * The Route 53 record set ID that will uniquely identify a DNS record, given a name and a type.
         */
        recordSetId?: string;
        /**
         * The type of DNS record of the target resource.
         */
        recordType?: string;
        /**
         * The target resource that the Route 53 record points to.
         */
        targetResource?: outputs.route53recoveryreadiness.ResourceSetTargetResource;
    }

    /**
     * The Network Load Balancer resource that a DNS target resource points to.
     */
    export interface ResourceSetNlbResource {
        /**
         * A Network Load Balancer resource Amazon Resource Name (ARN).
         */
        arn?: string;
    }

    /**
     * The Route 53 resource that a DNS target resource record points to.
     */
    export interface ResourceSetR53ResourceRecord {
        /**
         * The DNS target domain name.
         */
        domainName?: string;
        /**
         * The Resource Record set id.
         */
        recordSetId?: string;
    }

    /**
     * The resource element of a ResourceSet
     */
    export interface ResourceSetResource {
        /**
         * The component identifier of the resource, generated when DNS target resource is used.
         */
        componentId?: string;
        /**
         * A component for DNS/routing control readiness checks. This is a required setting when `ResourceSet` `ResourceSetType` is set to `AWS::Route53RecoveryReadiness::DNSTargetResource` . Do not set it for any other `ResourceSetType` setting.
         */
        dnsTargetResource?: outputs.route53recoveryreadiness.ResourceSetDnsTargetResource;
        /**
         * A list of recovery group Amazon Resource Names (ARNs) and cell ARNs that this resource is contained within.
         */
        readinessScopes?: string[];
        /**
         * The Amazon Resource Name (ARN) of the AWS resource.
         */
        resourceArn?: string;
    }

    /**
     * The target resource that the Route 53 record points to.
     */
    export interface ResourceSetTargetResource {
        /**
         * The Network Load Balancer resource that a DNS target resource points to.
         */
        nlbResource?: outputs.route53recoveryreadiness.ResourceSetNlbResource;
        /**
         * The Route 53 resource that a DNS target resource record points to.
         */
        r53Resource?: outputs.route53recoveryreadiness.ResourceSetR53ResourceRecord;
    }

}

export namespace route53resolver {
    /**
     * Firewall Rule associating the Rule Group to a Domain List
     */
    export interface FirewallRuleGroupFirewallRule {
        /**
         * Rule Action
         */
        action: enums.route53resolver.FirewallRuleGroupFirewallRuleAction;
        /**
         * BlockOverrideDnsType
         */
        blockOverrideDnsType?: enums.route53resolver.FirewallRuleGroupFirewallRuleBlockOverrideDnsType;
        /**
         * BlockOverrideDomain
         */
        blockOverrideDomain?: string;
        /**
         * BlockOverrideTtl
         */
        blockOverrideTtl?: number;
        /**
         * BlockResponse
         */
        blockResponse?: enums.route53resolver.FirewallRuleGroupFirewallRuleBlockResponse;
        /**
         * ResourceId
         */
        firewallDomainListId: string;
        /**
         * FirewallDomainRedirectionAction
         */
        firewallDomainRedirectionAction?: enums.route53resolver.FirewallRuleGroupFirewallRuleFirewallDomainRedirectionAction;
        /**
         * Rule Priority
         */
        priority: number;
        /**
         * Qtype
         */
        qtype?: string;
    }

    export interface ResolverRuleTargetAddress {
        /**
         * One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses. 
         */
        ip?: string;
        /**
         * One IPv6 address that you want to forward DNS queries to. You can specify only IPv6 addresses. 
         */
        ipv6?: string;
        /**
         * The port at Ip that you want to forward DNS queries to. 
         */
        port?: string;
        /**
         * The protocol that you want to use to forward DNS queries. 
         */
        protocol?: enums.route53resolver.ResolverRuleTargetAddressProtocol;
    }

}

export namespace rum {
    /**
     * AppMonitor configuration
     */
    export interface AppMonitorConfiguration {
        /**
         * If you set this to true, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
         */
        allowCookies?: boolean;
        /**
         * If you set this to true, RUM enables xray tracing for the user sessions that RUM samples. RUM adds an xray trace header to allowed HTTP requests. It also records an xray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the xray console and the CW ServiceLens console.
         */
        enableXRay?: boolean;
        /**
         * A list of URLs in your website or application to exclude from RUM data collection. You can't include both ExcludedPages and IncludedPages in the same operation.
         */
        excludedPages?: string[];
        /**
         * A list of pages in the RUM console that are to be displayed with a favorite icon.
         */
        favoritePages?: string[];
        /**
         * The ARN of the guest IAM role that is attached to the identity pool that is used to authorize the sending of data to RUM.
         */
        guestRoleArn?: string;
        /**
         * The ID of the identity pool that is used to authorize the sending of data to RUM.
         */
        identityPoolId?: string;
        /**
         * If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. You can't include both ExcludedPages and IncludedPages in the same operation.
         */
        includedPages?: string[];
        /**
         * An array of structures which define the destinations and the metrics that you want to send.
         */
        metricDestinations?: outputs.rum.AppMonitorMetricDestination[];
        /**
         * Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. If you omit this parameter, the default of 10 is used.
         */
        sessionSampleRate?: number;
        /**
         * An array that lists the types of telemetry data that this app monitor is to collect.
         */
        telemetries?: enums.rum.AppMonitorTelemetry[];
    }

    /**
     * AppMonitor custom events configuration
     */
    export interface AppMonitorCustomEvents {
        /**
         * Indicates whether AppMonitor accepts custom events.
         */
        status?: enums.rum.AppMonitorCustomEventsStatus;
    }

    /**
     * A single metric definition
     */
    export interface AppMonitorMetricDefinition {
        /**
         * Use this field only if you are sending the metric to CloudWatch.
         *
         * This field is a map of field paths to dimension names. It defines the dimensions to associate with this metric in CloudWatch. For extended metrics, valid values for the entries in this field are the following:
         *
         * "metadata.pageId": "PageId"
         *
         * "metadata.browserName": "BrowserName"
         *
         * "metadata.deviceType": "DeviceType"
         *
         * "metadata.osName": "OSName"
         *
         * "metadata.countryCode": "CountryCode"
         *
         * "event_details.fileType": "FileType"
         *
         * All dimensions listed in this field must also be included in EventPattern.
         */
        dimensionKeys?: {[key: string]: string};
        /**
         * The pattern that defines the metric, specified as a JSON object. RUM checks events that happen in a user's session against the pattern, and events that match the pattern are sent to the metric destination.
         *
         * When you define extended metrics, the metric definition is not valid if EventPattern is omitted.
         *
         * Example event patterns:
         *
         * '{ "event_type": ["com.amazon.rum.js_error_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], } }'
         *
         * '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Firefox" ] }, "event_details": { "duration": [{ "numeric": [ "<", 2000 ] }] } }'
         *
         * '{ "event_type": ["com.amazon.rum.performance_navigation_event"], "metadata": { "browserName": [ "Chrome", "Safari" ], "countryCode": [ "US" ] }, "event_details": { "duration": [{ "numeric": [ ">=", 2000, "<", 8000 ] }] } }'
         *
         * If the metrics destination' is CloudWatch and the event also matches a value in DimensionKeys, then the metric is published with the specified dimensions.
         */
        eventPattern?: string;
        /**
         * The name for the metric that is defined in this structure. For extended metrics, valid values are the following:
         *
         * PerformanceNavigationDuration
         *
         * PerformanceResourceDuration
         *
         * NavigationSatisfiedTransaction
         *
         * NavigationToleratedTransaction
         *
         * NavigationFrustratedTransaction
         *
         * WebVitalsCumulativeLayoutShift
         *
         * WebVitalsFirstInputDelay
         *
         * WebVitalsLargestContentfulPaint
         *
         * JsErrorCount
         *
         * HttpErrorCount
         *
         * SessionCount
         */
        name: string;
        /**
         * The namespace used by CloudWatch Metrics for the metric that is defined in this structure
         */
        namespace?: string;
        /**
         * The CloudWatch metric unit to use for this metric. If you omit this field, the metric is recorded with no unit.
         */
        unitLabel?: string;
        /**
         * The field within the event object that the metric value is sourced from.
         *
         * If you omit this field, a hardcoded value of 1 is pushed as the metric value. This is useful if you just want to count the number of events that the filter catches.
         *
         * If this metric is sent to Evidently, this field will be passed to Evidently raw and Evidently will handle data extraction from the event.
         */
        valueKey?: string;
    }

    /**
     * An structure which defines the destination and the metrics that you want to send.
     */
    export interface AppMonitorMetricDestination {
        /**
         * Defines the destination to send the metrics to. Valid values are CloudWatch and Evidently. If you specify Evidently, you must also specify the ARN of the Evidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.
         */
        destination: enums.rum.AppMonitorMetricDestinationDestination;
        /**
         * Use this parameter only if Destination is Evidently. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.
         */
        destinationArn?: string;
        /**
         * This parameter is required if Destination is Evidently. If Destination is CloudWatch, do not use this parameter.
         *
         * This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.
         */
        iamRoleArn?: string;
        /**
         * An array of structures which define the metrics that you want to send.
         */
        metricDefinitions?: outputs.rum.AppMonitorMetricDefinition[];
    }

}

export namespace s3 {
    export interface AccessGrantGrantee {
        /**
         * The unique identifier of the Grantee
         */
        granteeIdentifier: string;
        /**
         * Configures the transfer acceleration state for an Amazon S3 bucket.
         */
        granteeType: enums.s3.AccessGrantGranteeGranteeType;
    }

    export interface AccessGrantsLocationConfiguration {
        /**
         * The S3 sub prefix of a registered location in your S3 Access Grants instance
         */
        s3SubPrefix: string;
    }

    export interface AccessPointPublicAccessBlockConfiguration {
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
         * - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         *  - PUT Object calls fail if the request includes a public ACL.
         * . - PUT Bucket calls fail if the request includes a public ACL.
         * Enabling this setting doesn't affect existing policies or ACLs.
         */
        blockPublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
         */
        blockPublicPolicy?: boolean;
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
         */
        ignorePublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
         * Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
         */
        restrictPublicBuckets?: boolean;
    }

    /**
     * The Virtual Private Cloud (VPC) configuration for a bucket access point.
     */
    export interface AccessPointVpcConfiguration {
        /**
         * If this field is specified, this access point will only allow connections from the specified VPC ID.
         */
        vpcId?: string;
    }

    /**
     * Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see [Stopping Incomplete Multipart Uploads Using a Bucket Lifecycle Policy](https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config) in the *Amazon S3 User Guide*.
     */
    export interface BucketAbortIncompleteMultipartUpload {
        /**
         * Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.
         */
        daysAfterInitiation: number;
    }

    /**
     * Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User Guide*.
     */
    export interface BucketAccelerateConfiguration {
        /**
         * Specifies the transfer acceleration status of the bucket.
         */
        accelerationStatus: enums.s3.BucketAccelerateConfigurationAccelerationStatus;
    }

    /**
     * Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS-account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS-account that owns the source object.
     */
    export interface BucketAccessControlTranslation {
        /**
         * Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the *Amazon S3 API Reference*.
         */
        owner: string;
    }

    /**
     * Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
     */
    export interface BucketAnalyticsConfiguration {
        /**
         * The ID that identifies the analytics configuration.
         */
        id: string;
        /**
         * The prefix that an object must have to be included in the analytics results.
         */
        prefix?: string;
        /**
         * Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes.
         */
        storageClassAnalysis: outputs.s3.BucketStorageClassAnalysis;
        /**
         * The tags to use when evaluating an analytics filter.
         *  The analytics only includes objects that meet the filter's criteria. If no filter is specified, all of the contents of the bucket are included in the analysis.
         */
        tagFilters?: outputs.s3.BucketTagFilter[];
    }

    /**
     * Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*.
     */
    export interface BucketCorsConfiguration {
        /**
         * A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.
         */
        corsRules: outputs.s3.BucketCorsRule[];
    }

    /**
     * Specifies a cross-origin access rule for an Amazon S3 bucket.
     */
    export interface BucketCorsRule {
        /**
         * Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.
         */
        allowedHeaders?: string[];
        /**
         * An HTTP method that you allow the origin to run.
         *   *Allowed values*: ``GET`` | ``PUT`` | ``HEAD`` | ``POST`` | ``DELETE``
         */
        allowedMethods: enums.s3.BucketCorsRuleAllowedMethodsItem[];
        /**
         * One or more origins you want customers to be able to access the bucket from.
         */
        allowedOrigins: string[];
        /**
         * One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).
         */
        exposedHeaders?: string[];
        /**
         * A unique identifier for this rule. The value must be no more than 255 characters.
         */
        id?: string;
        /**
         * The time in seconds that your browser is to cache the preflight response for the specified resource.
         */
        maxAge?: number;
    }

    /**
     * Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.
     */
    export interface BucketDataExport {
        /**
         * The place to store the data for an analysis.
         */
        destination: outputs.s3.BucketDestination;
        /**
         * The version of the output schema to use when exporting data. Must be ``V_1``.
         */
        outputSchemaVersion: string;
    }

    /**
     * The container element for specifying the default Object Lock retention settings for new objects placed in the specified bucket.
     *    +  The ``DefaultRetention`` settings require both a mode and a period.
     *   +  The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify ``Days`` and ``Years`` at the same time.
     */
    export interface BucketDefaultRetention {
        /**
         * The number of days that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
         */
        days?: number;
        /**
         * The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
         */
        mode?: enums.s3.BucketDefaultRetentionMode;
        /**
         * The number of years that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.
         */
        years?: number;
    }

    /**
     * Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). 
     *  For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). 
     *   If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
     */
    export interface BucketDeleteMarkerReplication {
        /**
         * Indicates whether to replicate delete markers. Disabled by default.
         */
        status?: enums.s3.BucketDeleteMarkerReplicationStatus;
    }

    /**
     * Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket.
     */
    export interface BucketDestination {
        /**
         * The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data.
         *    Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.
         */
        bucketAccountId?: string;
        /**
         * The Amazon Resource Name (ARN) of the bucket to which data is exported.
         */
        bucketArn: string;
        /**
         * Specifies the file format used when exporting data to Amazon S3.
         *   *Allowed values*: ``CSV`` | ``ORC`` | ``Parquet``
         */
        format: enums.s3.BucketDestinationFormat;
        /**
         * The prefix to use when exporting data. The prefix is prepended to all results.
         */
        prefix?: string;
    }

    /**
     * Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3 Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon S3 User Guide*.
     */
    export interface BucketEncryption {
        /**
         * Specifies the default server-side-encryption configuration.
         */
        serverSideEncryptionConfiguration: outputs.s3.BucketServerSideEncryptionRule[];
    }

    /**
     * Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects.
     */
    export interface BucketEncryptionConfiguration {
        /**
         * Specifies the ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket. Amazon S3 uses this key to encrypt replica objects. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.
         */
        replicaKmsKeyId: string;
    }

    /**
     * Amazon S3 can send events to Amazon EventBridge whenever certain events happen in your bucket, see [Using EventBridge](https://docs.aws.amazon.com/AmazonS3/latest/userguide/EventBridge.html) in the *Amazon S3 User Guide*.
     *  Unlike other destinations, delivery of events to EventBridge can be either enabled or disabled for a bucket. If enabled, all events will be sent to EventBridge and you can use EventBridge rules to route events to additional targets. For more information, see [What Is Amazon EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html) in the *Amazon EventBridge User Guide*
     */
    export interface BucketEventBridgeConfiguration {
        /**
         * Enables delivery of events to Amazon EventBridge.
         */
        eventBridgeEnabled: boolean;
    }

    /**
     * Specifies the Amazon S3 object key name to filter on. An object key name is the name assigned to an object in your Amazon S3 bucket. You specify whether to filter on the suffix or prefix of the object key name. A prefix is a specific string of characters at the beginning of an object key name, which you can use to organize objects. For example, you can start the key names of related objects with a prefix, such as ``2023-`` or ``engineering/``. Then, you can use ``FilterRule`` to find objects in a bucket with key names that have the same prefix. A suffix is similar to a prefix, but it is at the end of the object key name instead of at the beginning.
     */
    export interface BucketFilterRule {
        /**
         * The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
         */
        name: string;
        /**
         * The value that the filter searches for in object key names.
         */
        value: string;
    }

    /**
     * Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.
     *  For information about the S3 Intelligent-Tiering storage class, see [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access).
     */
    export interface BucketIntelligentTieringConfiguration {
        /**
         * The ID used to identify the S3 Intelligent-Tiering configuration.
         */
        id: string;
        /**
         * An object key name prefix that identifies the subset of objects to which the rule applies.
         */
        prefix?: string;
        /**
         * Specifies the status of the configuration.
         */
        status: enums.s3.BucketIntelligentTieringConfigurationStatus;
        /**
         * A container for a key-value pair.
         */
        tagFilters?: outputs.s3.BucketTagFilter[];
        /**
         * Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``.
         *   You only need Intelligent Tiering Configuration enabled on a bucket if you want to automatically move objects stored in the Intelligent-Tiering storage class to Archive Access or Deep Archive Access tiers.
         */
        tierings: outputs.s3.BucketTiering[];
    }

    /**
     * Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3 API Reference*.
     */
    export interface BucketInventoryConfiguration {
        /**
         * Contains information about where to publish the inventory results.
         */
        destination: outputs.s3.BucketDestination;
        /**
         * Specifies whether the inventory is enabled or disabled. If set to ``True``, an inventory list is generated. If set to ``False``, no inventory list is generated.
         */
        enabled: boolean;
        /**
         * The ID used to identify the inventory configuration.
         */
        id: string;
        /**
         * Object versions to include in the inventory list. If set to ``All``, the list includes all the object versions, which adds the version-related fields ``VersionId``, ``IsLatest``, and ``DeleteMarker`` to the list. If set to ``Current``, the list does not contain these version-related fields.
         */
        includedObjectVersions: enums.s3.BucketInventoryConfigurationIncludedObjectVersions;
        /**
         * Contains the optional fields that are included in the inventory results.
         */
        optionalFields?: enums.s3.BucketInventoryConfigurationOptionalFieldsItem[];
        /**
         * Specifies the inventory filter prefix.
         */
        prefix?: string;
        /**
         * Specifies the schedule for generating inventory results.
         */
        scheduleFrequency: enums.s3.BucketInventoryConfigurationScheduleFrequency;
    }

    /**
     * Describes the LAMlong functions to invoke and the events for which to invoke them.
     */
    export interface BucketLambdaConfiguration {
        /**
         * The Amazon S3 bucket event for which to invoke the LAMlong function. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
         */
        event: string;
        /**
         * The filtering rules that determine which objects invoke the AWS Lambda function. For example, you can create a filter so that only image files with a ``.jpg`` extension invoke the function when they are added to the Amazon S3 bucket.
         */
        filter?: outputs.s3.BucketNotificationFilter;
        /**
         * The Amazon Resource Name (ARN) of the LAMlong function that Amazon S3 invokes when the specified event type occurs.
         */
        function: string;
    }

    /**
     * Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon S3 User Guide*.
     */
    export interface BucketLifecycleConfiguration {
        /**
         * A lifecycle rule for individual objects in an Amazon S3 bucket.
         */
        rules: outputs.s3.BucketRule[];
    }

    /**
     * Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For examples and more information, see [PUT Bucket logging](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html) in the *Amazon S3 API Reference*.
     *   To successfully complete the ``AWS::S3::Bucket LoggingConfiguration`` request, you must have ``s3:PutObject`` and ``s3:PutObjectAcl`` in your IAM permissions.
     */
    export interface BucketLoggingConfiguration {
        /**
         * The name of the bucket where Amazon S3 should store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the ``LoggingConfiguration`` property is defined.
         */
        destinationBucketName?: string;
        /**
         * A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.
         */
        logFilePrefix?: string;
        /**
         * Amazon S3 key format for log objects. Only one format, either PartitionedPrefix or SimplePrefix, is allowed.
         */
        targetObjectKeyFormat?: outputs.s3.BucketTargetObjectKeyFormat;
    }

    /**
     * A container specifying replication metrics-related settings enabling replication metrics and events.
     */
    export interface BucketMetrics {
        /**
         * A container specifying the time threshold for emitting the ``s3:Replication:OperationMissedThreshold`` event.
         */
        eventThreshold?: outputs.s3.BucketReplicationTimeValue;
        /**
         * Specifies whether the replication metrics are enabled.
         */
        status: enums.s3.BucketMetricsStatus;
    }

    /**
     * Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For examples, see [AWS::S3::Bucket](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html#aws-properties-s3-bucket--examples). For more information, see [PUT Bucket metrics](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html) in the *Amazon S3 API Reference*.
     */
    export interface BucketMetricsConfiguration {
        /**
         * The access point that was used while performing operations on the object. The metrics configuration only includes objects that meet the filter's criteria.
         */
        accessPointArn?: string;
        /**
         * The ID used to identify the metrics configuration. This can be any value you choose that helps you identify your metrics configuration.
         */
        id: string;
        /**
         * The prefix that an object must have to be included in the metrics results.
         */
        prefix?: string;
        /**
         * Specifies a list of tag filters to use as a metrics configuration filter. The metrics configuration includes only objects that meet the filter's criteria.
         */
        tagFilters?: outputs.s3.BucketTagFilter[];
    }

    /**
     * Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period in the object's lifetime. For more information about setting a lifecycle rule configuration, see [AWS::S3::Bucket Rule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule.html).
     */
    export interface BucketNoncurrentVersionExpiration {
        /**
         * Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.
         */
        newerNoncurrentVersions?: number;
        /**
         * Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.
         */
        noncurrentDays: number;
    }

    /**
     * Container for the transition rule that describes when noncurrent objects transition to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class at a specific period in the object's lifetime. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
     */
    export interface BucketNoncurrentVersionTransition {
        /**
         * Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.
         */
        newerNoncurrentVersions?: number;
        /**
         * The class of storage used to store the object.
         */
        storageClass: enums.s3.BucketNoncurrentVersionTransitionStorageClass;
        /**
         * Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.
         */
        transitionInDays: number;
    }

    /**
     * Describes the notification configuration for an Amazon S3 bucket.
     *   If you create the target resource and related permissions in the same template, you might have a circular dependency.
     *  For example, you might use the ``AWS::Lambda::Permission`` resource to grant the bucket permission to invoke an AWS Lambda function. However, AWS CloudFormation can't create the bucket until the bucket has permission to invoke the function (AWS CloudFormation checks whether the bucket can invoke the function). If you're using Refs to pass the bucket name, this leads to a circular dependency.
     *  To avoid this dependency, you can create all resources without specifying the notification configuration. Then, update the stack with a notification configuration.
     *  For more information on permissions, see [AWS::Lambda::Permission](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html) and [Granting Permissions to Publish Event Notification Messages to a Destination](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#grant-destinations-permissions-to-s3).
     */
    export interface BucketNotificationConfiguration {
        /**
         * Enables delivery of events to Amazon EventBridge.
         */
        eventBridgeConfiguration?: outputs.s3.BucketEventBridgeConfiguration;
        /**
         * Describes the LAMlong functions to invoke and the events for which to invoke them.
         */
        lambdaConfigurations?: outputs.s3.BucketLambdaConfiguration[];
        /**
         * The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.
         */
        queueConfigurations?: outputs.s3.BucketQueueConfiguration[];
        /**
         * The topic to which notifications are sent and the events for which notifications are generated.
         */
        topicConfigurations?: outputs.s3.BucketTopicConfiguration[];
    }

    /**
     * Specifies object key name filtering rules. For information about key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
     */
    export interface BucketNotificationFilter {
        /**
         * A container for object key name prefix and suffix filtering rules.
         */
        s3Key: outputs.s3.BucketS3KeyFilter;
    }

    /**
     * Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket. For more information, see [Locking Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html).
     */
    export interface BucketObjectLockConfiguration {
        /**
         * Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.
         */
        objectLockEnabled?: string;
        /**
         * Specifies the Object Lock rule for the specified object. Enable this rule when you apply ``ObjectLockConfiguration`` to a bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information, see [ObjectLockRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-objectlockrule.html) and [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
         */
        rule?: outputs.s3.BucketObjectLockRule;
    }

    /**
     * Specifies the Object Lock rule for the specified object. Enable the this rule when you apply ``ObjectLockConfiguration`` to a bucket.
     */
    export interface BucketObjectLockRule {
        /**
         * The default Object Lock retention mode and period that you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information about allowable values for mode and period, see [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).
         */
        defaultRetention?: outputs.s3.BucketDefaultRetention;
    }

    /**
     * Specifies the container element for Object Ownership rules.
     *  S3 Object Ownership is an Amazon S3 bucket-level setting that you can use to disable access control lists (ACLs) and take ownership of every object in your bucket, simplifying access management for data stored in Amazon S3. For more information, see [Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.
     */
    export interface BucketOwnershipControls {
        /**
         * Specifies the container element for Object Ownership rules.
         */
        rules: outputs.s3.BucketOwnershipControlsRule[];
    }

    /**
     * Specifies an Object Ownership rule.
     *  S3 Object Ownership is an Amazon S3 bucket-level setting that you can use to disable access control lists (ACLs) and take ownership of every object in your bucket, simplifying access management for data stored in Amazon S3. For more information, see [Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.
     */
    export interface BucketOwnershipControlsRule {
        /**
         * Specifies an object ownership rule.
         */
        objectOwnership?: enums.s3.BucketOwnershipControlsRuleObjectOwnership;
    }

    /**
     * The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see [The Meaning of "Public"](https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status) in the *Amazon S3 User Guide*.
     */
    export interface BucketPublicAccessBlockConfiguration {
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes the following behavior:
         *   +  PUT Bucket ACL and PUT Object ACL calls fail if the specified ACL is public.
         *   +  PUT Object calls fail if the request includes a public ACL.
         *   +  PUT Bucket calls fail if the request includes a public ACL.
         *   
         *  Enabling this setting doesn't affect existing policies or ACLs.
         */
        blockPublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to ``TRUE`` causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. 
         *  Enabling this setting doesn't affect existing bucket policies.
         */
        blockPublicPolicy?: boolean;
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket.
         *  Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
         */
        ignorePublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to ``TRUE`` restricts access to this bucket to only AWS-service principals and authorized users within this account if the bucket has a public policy.
         *  Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
         */
        restrictPublicBuckets?: boolean;
    }

    /**
     * Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
     */
    export interface BucketQueueConfiguration {
        /**
         * The Amazon S3 bucket event about which you want to publish messages to Amazon SQS. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
         */
        event: string;
        /**
         * The filtering rules that determine which objects trigger notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket. For more information, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
         */
        filter?: outputs.s3.BucketNotificationFilter;
        /**
         * The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type. FIFO queues are not allowed when enabling an SQS queue as the event notification destination.
         */
        queue: string;
    }

    /**
     * Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
     */
    export interface BucketRedirectAllRequestsTo {
        /**
         * Name of the host where requests are redirected.
         */
        hostName: string;
        /**
         * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
         */
        protocol?: enums.s3.BucketRedirectAllRequestsToProtocol;
    }

    /**
     * Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
     */
    export interface BucketRedirectRule {
        /**
         * The host name to use in the redirect request.
         */
        hostName?: string;
        /**
         * The HTTP redirect code to use on the response. Not required if one of the siblings is present.
         */
        httpRedirectCode?: string;
        /**
         * Protocol to use when redirecting requests. The default is the protocol that is used in the original request.
         */
        protocol?: enums.s3.BucketRedirectRuleProtocol;
        /**
         * The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/``, you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.
         *   Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
         */
        replaceKeyPrefixWith?: string;
        /**
         * The specific object key to use in the redirect request. For example, redirect request to ``error.html``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.
         *   Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
         */
        replaceKeyWith?: string;
    }

    /**
     * A filter that you can specify for selection for modifications on replicas.
     */
    export interface BucketReplicaModifications {
        /**
         * Specifies whether Amazon S3 replicates modifications on replicas.
         *   *Allowed values*: ``Enabled`` | ``Disabled``
         */
        status: enums.s3.BucketReplicaModificationsStatus;
    }

    /**
     * A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB. The latest version of the replication configuration XML is V2. For more information about XML V2 replication configurations, see [Replication configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-add-config.html) in the *Amazon S3 User Guide*.
     */
    export interface BucketReplicationConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the IAMlong (IAM) role that Amazon S3 assumes when replicating objects. For more information, see [How to Set Up Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the *Amazon S3 User Guide*.
         */
        role: string;
        /**
         * A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules.
         */
        rules: outputs.s3.BucketReplicationRule[];
    }

    /**
     * A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
     */
    export interface BucketReplicationDestination {
        /**
         * Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS-account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS-account that owns the source object.
         */
        accessControlTranslation?: outputs.s3.BucketAccessControlTranslation;
        /**
         * Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to change replica ownership to the AWS-account that owns the destination bucket by specifying the ``AccessControlTranslation`` property, this is the account ID of the destination bucket owner. For more information, see [Cross-Region Replication Additional Configuration: Change Replica Owner](https://docs.aws.amazon.com/AmazonS3/latest/dev/crr-change-owner.html) in the *Amazon S3 User Guide*.
         *  If you specify the ``AccessControlTranslation`` property, the ``Account`` property is required.
         */
        account?: string;
        /**
         * The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.
         */
        bucket: string;
        /**
         * Specifies encryption-related information.
         */
        encryptionConfiguration?: outputs.s3.BucketEncryptionConfiguration;
        /**
         * A container specifying replication metrics-related settings enabling replication metrics and events.
         */
        metrics?: outputs.s3.BucketMetrics;
        /**
         * A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a ``Metrics`` block.
         */
        replicationTime?: outputs.s3.BucketReplicationTime;
        /**
         * The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. 
         *  For valid values, see the ``StorageClass`` element of the [PUT Bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the *Amazon S3 API Reference*.
         */
        storageClass?: enums.s3.BucketReplicationDestinationStorageClass;
    }

    /**
     * Specifies which Amazon S3 objects to replicate and where to store the replicas.
     */
    export interface BucketReplicationRule {
        /**
         * Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). 
         *  For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). 
         *   If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).
         */
        deleteMarkerReplication?: outputs.s3.BucketDeleteMarkerReplication;
        /**
         * A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).
         */
        destination: outputs.s3.BucketReplicationDestination;
        /**
         * A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element. The use of the filter field indicates that this is a V2 replication configuration. This field isn't supported in a V1 replication configuration.
         *   V1 replication configuration only supports filtering by key prefix. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.
         */
        filter?: outputs.s3.BucketReplicationRuleFilter;
        /**
         * A unique identifier for the rule. The maximum value is 255 characters. If you don't specify a value, AWS CloudFormation generates a random ID. When using a V2 replication configuration this property is capitalized as "ID".
         */
        id?: string;
        /**
         * An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.
         *   Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
         */
        prefix?: string;
        /**
         * The priority indicates which rule has precedence whenever two or more replication rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there are two or more rules with the same destination bucket, then objects will be replicated according to the rule with the highest priority. The higher the number, the higher the priority. 
         *  For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the *Amazon S3 User Guide*.
         */
        priority?: number;
        /**
         * A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects.
         */
        sourceSelectionCriteria?: outputs.s3.BucketSourceSelectionCriteria;
        /**
         * Specifies whether the rule is enabled.
         */
        status: enums.s3.BucketReplicationRuleStatus;
    }

    /**
     * A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. 
     *  For example:
     *   +  If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag. 
     *   +  If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag
     */
    export interface BucketReplicationRuleAndOperator {
        /**
         * An object key name prefix that identifies the subset of objects to which the rule applies.
         */
        prefix?: string;
        /**
         * An array of tags containing key and value pairs.
         */
        tagFilters?: outputs.s3.BucketTagFilter[];
    }

    /**
     * A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element.
     */
    export interface BucketReplicationRuleFilter {
        /**
         * A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example: 
         *   +  If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag.
         *   +  If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag.
         */
        and?: outputs.s3.BucketReplicationRuleAndOperator;
        /**
         * An object key name prefix that identifies the subset of objects to which the rule applies.
         *   Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
         */
        prefix?: string;
        /**
         * A container for specifying a tag key and value. 
         *  The rule applies only to objects that have the tag in their tag set.
         */
        tagFilter?: outputs.s3.BucketTagFilter;
    }

    /**
     * A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a ``Metrics`` block.
     */
    export interface BucketReplicationTime {
        /**
         * Specifies whether the replication time is enabled.
         */
        status: enums.s3.BucketReplicationTimeStatus;
        /**
         * A container specifying the time by which replication should be complete for all objects and operations on objects.
         */
        time: outputs.s3.BucketReplicationTimeValue;
    }

    /**
     * A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics ``EventThreshold``.
     */
    export interface BucketReplicationTimeValue {
        /**
         * Contains an integer specifying time in minutes. 
         *   Valid value: 15
         */
        minutes: number;
    }

    /**
     * Specifies the redirect behavior and when a redirect is applied. For more information about routing rules, see [Configuring advanced conditional redirects](https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects) in the *Amazon S3 User Guide*.
     */
    export interface BucketRoutingRule {
        /**
         * Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.
         */
        redirectRule: outputs.s3.BucketRedirectRule;
        /**
         * A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
         */
        routingRuleCondition?: outputs.s3.BucketRoutingRuleCondition;
    }

    /**
     * A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
     */
    export interface BucketRoutingRuleCondition {
        /**
         * The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.
         *  Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.
         */
        httpErrorCodeReturnedEquals?: string;
        /**
         * The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html``, the key prefix will be ``ExamplePage.html``. To redirect request for all pages with the prefix ``docs/``, the key prefix will be ``/docs``, which identifies all objects in the docs/ folder.
         *  Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.
         */
        keyPrefixEquals?: string;
    }

    /**
     * Specifies lifecycle rules for an Amazon S3 bucket. For more information, see [Put Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html) in the *Amazon S3 API Reference*.
     *  You must specify at least one of the following properties: ``AbortIncompleteMultipartUpload``, ``ExpirationDate``, ``ExpirationInDays``, ``NoncurrentVersionExpirationInDays``, ``NoncurrentVersionTransition``, ``NoncurrentVersionTransitions``, ``Transition``, or ``Transitions``.
     */
    export interface BucketRule {
        /**
         * Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3 bucket.
         */
        abortIncompleteMultipartUpload?: outputs.s3.BucketAbortIncompleteMultipartUpload;
        /**
         * Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.
         */
        expirationDate?: string;
        /**
         * Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.
         */
        expirationInDays?: number;
        /**
         * Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.
         */
        expiredObjectDeleteMarker?: boolean;
        /**
         * Unique identifier for the rule. The value can't be longer than 255 characters.
         */
        id?: string;
        /**
         * Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period in the object's lifetime.
         */
        noncurrentVersionExpiration?: outputs.s3.BucketNoncurrentVersionExpiration;
        /**
         * (Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the transition time.
         */
        noncurrentVersionExpirationInDays?: number;
        /**
         * (Deprecated.) For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.
         */
        noncurrentVersionTransition?: outputs.s3.BucketNoncurrentVersionTransition;
        /**
         * For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.
         */
        noncurrentVersionTransitions?: outputs.s3.BucketNoncurrentVersionTransition[];
        /**
         * Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes. For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.
         */
        objectSizeGreaterThan?: string;
        /**
         * Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes. For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.
         */
        objectSizeLessThan?: string;
        /**
         * Object key prefix that identifies one or more objects to which this rule applies.
         *   Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).
         */
        prefix?: string;
        /**
         * If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.
         */
        status: enums.s3.BucketRuleStatus;
        /**
         * Tags to use to identify a subset of objects to which the lifecycle rule applies.
         */
        tagFilters?: outputs.s3.BucketTagFilter[];
        /**
         * (Deprecated.) Specifies when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transitions`` property.
         */
        transition?: outputs.s3.BucketTransition;
        /**
         * One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.
         */
        transitions?: outputs.s3.BucketTransition[];
    }

    /**
     * A container for object key name prefix and suffix filtering rules. For more information about object key name filtering, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/userguide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.
     *   The same type of filter rule cannot be used more than once. For example, you cannot specify two prefix rules.
     */
    export interface BucketS3KeyFilter {
        /**
         * A list of containers for the key-value pair that defines the criteria for the filter rule.
         */
        rules: outputs.s3.BucketFilterRule[];
    }

    /**
     * Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. If you don't specify a customer managed key at configuration, Amazon S3 automatically creates an AWS KMS key in your AWS account the first time that you add an object encrypted with SSE-KMS to a bucket. By default, Amazon S3 uses this KMS key for SSE-KMS. For more information, see [PUT Bucket encryption](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html) in the *Amazon S3 API Reference*.
     */
    export interface BucketServerSideEncryptionByDefault {
        /**
         * AWS Key Management Service (KMS) customer AWS KMS key ID to use for the default encryption. This parameter is allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms`` or ``aws:kms:dsse``.
         *  You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key.
         *   +  Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` 
         *   +  Key ARN: ``arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` 
         *   +  Key Alias: ``alias/alias-name`` 
         *   
         *  If you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log. 
         *  If you are using encryption with cross-account or AWS service operations you must use a fully qualified KMS key ARN. For more information, see [Using encryption for cross-account operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy).
         *   Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.
         */
        kmsMasterKeyId?: string;
        /**
         * Server-side encryption algorithm to use for the default encryption.
         */
        sseAlgorithm: enums.s3.BucketServerSideEncryptionByDefaultSseAlgorithm;
    }

    /**
     * Specifies the default server-side encryption configuration.
     */
    export interface BucketServerSideEncryptionRule {
        /**
         * Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the ``BucketKeyEnabled`` element to ``true`` causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled.
         *  For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the *Amazon S3 User Guide*.
         */
        bucketKeyEnabled?: boolean;
        /**
         * Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.
         */
        serverSideEncryptionByDefault?: outputs.s3.BucketServerSideEncryptionByDefault;
    }

    /**
     * A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects.
     */
    export interface BucketSourceSelectionCriteria {
        /**
         * A filter that you can specify for selection for modifications on replicas.
         */
        replicaModifications?: outputs.s3.BucketReplicaModifications;
        /**
         * A container for filter information for the selection of Amazon S3 objects encrypted with AWS KMS.
         */
        sseKmsEncryptedObjects?: outputs.s3.BucketSseKmsEncryptedObjects;
    }

    /**
     * A container for filter information for the selection of S3 objects encrypted with AWS KMS.
     */
    export interface BucketSseKmsEncryptedObjects {
        /**
         * Specifies whether Amazon S3 replicates objects created with server-side encryption using an AWS KMS key stored in AWS Key Management Service.
         */
        status: enums.s3.BucketSseKmsEncryptedObjectsStatus;
    }

    /**
     * Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
     */
    export interface BucketStorageClassAnalysis {
        /**
         * Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.
         */
        dataExport?: outputs.s3.BucketDataExport;
    }

    /**
     * Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.
     */
    export interface BucketTagFilter {
        /**
         * The tag key.
         */
        key: string;
        /**
         * The tag value.
         */
        value: string;
    }

    /**
     * Describes the key format for server access log file in the target bucket. You can choose between SimplePrefix and PartitionedPrefix.
     */
    export interface BucketTargetObjectKeyFormat {
    }

    /**
     * The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without additional operational overhead.
     */
    export interface BucketTiering {
        /**
         * S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a list of access tiers in the S3 Intelligent-Tiering storage class.
         */
        accessTier: enums.s3.BucketTieringAccessTier;
        /**
         * The number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).
         */
        days: number;
    }

    /**
     * A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.
     */
    export interface BucketTopicConfiguration {
        /**
         * The Amazon S3 bucket event about which to send notifications. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.
         */
        event: string;
        /**
         * The filtering rules that determine for which objects to send notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket.
         */
        filter?: outputs.s3.BucketNotificationFilter;
        /**
         * The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.
         */
        topic: string;
    }

    /**
     * Specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see [Transitioning Objects Using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in the *Amazon S3 User Guide*.
     */
    export interface BucketTransition {
        /**
         * The storage class to which you want the object to transition.
         */
        storageClass: enums.s3.BucketTransitionStorageClass;
        /**
         * Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.
         */
        transitionDate?: string;
        /**
         * Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.
         */
        transitionInDays?: number;
    }

    /**
     * Describes the versioning state of an Amazon S3 bucket. For more information, see [PUT Bucket versioning](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html) in the *Amazon S3 API Reference*.
     */
    export interface BucketVersioningConfiguration {
        /**
         * The versioning state of the bucket.
         */
        status: enums.s3.BucketVersioningConfigurationStatus;
    }

    /**
     * Specifies website configuration parameters for an Amazon S3 bucket.
     */
    export interface BucketWebsiteConfiguration {
        /**
         * The name of the error document for the website.
         */
        errorDocument?: string;
        /**
         * The name of the index document for the website.
         */
        indexDocument?: string;
        /**
         * The redirect behavior for every request to this bucket's website endpoint.
         *   If you specify this property, you can't specify any other property.
         */
        redirectAllRequestsTo?: outputs.s3.BucketRedirectAllRequestsTo;
        /**
         * Rules that define when a redirect is applied and the redirect behavior.
         */
        routingRules?: outputs.s3.BucketRoutingRule[];
    }

    export interface MultiRegionAccessPointPublicAccessBlockConfiguration {
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) for buckets in this account. Setting this element to TRUE causes the following behavior:
         * - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         *  - PUT Object calls fail if the request includes a public ACL.
         * . - PUT Bucket calls fail if the request includes a public ACL.
         * Enabling this setting doesn't affect existing policies or ACLs.
         */
        blockPublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
         */
        blockPublicPolicy?: boolean;
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
         */
        ignorePublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
         * Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
         */
        restrictPublicBuckets?: boolean;
    }

    export interface MultiRegionAccessPointRegion {
        /**
         * The name of the associated bucket for the Region.
         */
        bucket: string;
        /**
         * The AWS account ID that owns the Amazon S3 bucket that's associated with this Multi-Region Access Point.
         */
        bucketAccountId?: string;
    }

    /**
     * The Policy Status associated with this Multi Region Access Point
     */
    export interface PolicyStatusProperties {
        /**
         * Specifies whether the policy is public or not.
         */
        isPublic: enums.s3.MultiRegionAccessPointPolicyPolicyStatusPropertiesIsPublic;
    }

    /**
     * Account-level metrics configurations.
     */
    export interface StorageLensAccountLevel {
        /**
         * This property contains the details of account-level activity metrics for S3 Storage Lens.
         */
        activityMetrics?: outputs.s3.StorageLensActivityMetrics;
        /**
         * This property contains the details of account-level advanced cost optimization metrics for S3 Storage Lens.
         */
        advancedCostOptimizationMetrics?: outputs.s3.StorageLensAdvancedCostOptimizationMetrics;
        /**
         * This property contains the details of account-level advanced data protection metrics for S3 Storage Lens.
         */
        advancedDataProtectionMetrics?: outputs.s3.StorageLensAdvancedDataProtectionMetrics;
        /**
         * This property contains the details of the account-level bucket-level configurations for Amazon S3 Storage Lens.
         */
        bucketLevel: outputs.s3.StorageLensBucketLevel;
        /**
         * This property contains the details of account-level detailed status code metrics for S3 Storage Lens.
         */
        detailedStatusCodesMetrics?: outputs.s3.StorageLensDetailedStatusCodesMetrics;
        /**
         * This property determines the scope of Storage Lens group data that is displayed in the Storage Lens dashboard.
         */
        storageLensGroupLevel?: outputs.s3.StorageLensGroupLevel;
    }

    /**
     * Enables activity metrics.
     */
    export interface StorageLensActivityMetrics {
        /**
         * Specifies whether activity metrics are enabled or disabled.
         */
        isEnabled?: boolean;
    }

    /**
     * Enables advanced cost optimization metrics.
     */
    export interface StorageLensAdvancedCostOptimizationMetrics {
        /**
         * Specifies whether advanced cost optimization metrics are enabled or disabled.
         */
        isEnabled?: boolean;
    }

    /**
     * Enables advanced data protection metrics.
     */
    export interface StorageLensAdvancedDataProtectionMetrics {
        /**
         * Specifies whether advanced data protection metrics are enabled or disabled.
         */
        isEnabled?: boolean;
    }

    /**
     * The AWS Organizations ARN to use in the Amazon S3 Storage Lens configuration.
     */
    export interface StorageLensAwsOrg {
        /**
         * This resource contains the ARN of the AWS Organization.
         */
        arn: string;
    }

    /**
     * Bucket-level metrics configurations.
     */
    export interface StorageLensBucketLevel {
        /**
         * A property for bucket-level activity metrics for S3 Storage Lens.
         */
        activityMetrics?: outputs.s3.StorageLensActivityMetrics;
        /**
         * A property for bucket-level advanced cost optimization metrics for S3 Storage Lens.
         */
        advancedCostOptimizationMetrics?: outputs.s3.StorageLensAdvancedCostOptimizationMetrics;
        /**
         * A property for bucket-level advanced data protection metrics for S3 Storage Lens.
         */
        advancedDataProtectionMetrics?: outputs.s3.StorageLensAdvancedDataProtectionMetrics;
        /**
         * A property for bucket-level detailed status code metrics for S3 Storage Lens.
         */
        detailedStatusCodesMetrics?: outputs.s3.StorageLensDetailedStatusCodesMetrics;
        /**
         * A property for bucket-level prefix-level storage metrics for S3 Storage Lens.
         */
        prefixLevel?: outputs.s3.StorageLensPrefixLevel;
    }

    /**
     * S3 buckets and Regions to include/exclude in the Amazon S3 Storage Lens configuration.
     */
    export interface StorageLensBucketsAndRegions {
        /**
         * This property contains the details of the buckets for the Amazon S3 Storage Lens configuration. This should be the bucket Amazon Resource Name(ARN). For valid values, see [Buckets ARN format here](https://docs.aws.amazon.com/AmazonS3/latest/API/API_control_Include.html#API_control_Include_Contents) in the *Amazon S3 API Reference* .
         */
        buckets?: string[];
        /**
         * This property contains the details of the Regions for the S3 Storage Lens configuration.
         */
        regions?: string[];
    }

    /**
     * CloudWatch metrics settings for the Amazon S3 Storage Lens metrics export.
     */
    export interface StorageLensCloudWatchMetrics {
        /**
         * Specifies whether CloudWatch metrics are enabled or disabled.
         */
        isEnabled: boolean;
    }

    /**
     * Specifies the details of Amazon S3 Storage Lens configuration.
     */
    export interface StorageLensConfiguration {
        /**
         * This property contains the details of the account-level metrics for Amazon S3 Storage Lens configuration.
         */
        accountLevel: outputs.s3.StorageLensAccountLevel;
        /**
         * This property contains the details of the AWS Organization for the S3 Storage Lens configuration.
         */
        awsOrg?: outputs.s3.StorageLensAwsOrg;
        /**
         * This property contains the details of this S3 Storage Lens configuration's metrics export.
         */
        dataExport?: outputs.s3.StorageLensDataExport;
        /**
         * This property contains the details of the bucket and or Regions excluded for Amazon S3 Storage Lens configuration.
         */
        exclude?: outputs.s3.StorageLensBucketsAndRegions;
        /**
         * This property contains the details of the ID of the S3 Storage Lens configuration.
         */
        id: string;
        /**
         * This property contains the details of the bucket and or Regions included for Amazon S3 Storage Lens configuration.
         */
        include?: outputs.s3.StorageLensBucketsAndRegions;
        /**
         * Specifies whether the Amazon S3 Storage Lens configuration is enabled or disabled.
         */
        isEnabled: boolean;
        /**
         * The ARN for the Amazon S3 Storage Lens configuration.
         */
        storageLensArn?: string;
    }

    /**
     * Specifies how Amazon S3 Storage Lens metrics should be exported.
     */
    export interface StorageLensDataExport {
        /**
         * This property enables the Amazon CloudWatch publishing option for S3 Storage Lens metrics.
         */
        cloudWatchMetrics?: outputs.s3.StorageLensCloudWatchMetrics;
        /**
         * This property contains the details of the bucket where the S3 Storage Lens metrics export will be placed.
         */
        s3BucketDestination?: outputs.s3.StorageLensS3BucketDestination;
    }

    /**
     * Enables detailed status codes metrics.
     */
    export interface StorageLensDetailedStatusCodesMetrics {
        /**
         * Specifies whether detailed status codes metrics are enabled or disabled.
         */
        isEnabled?: boolean;
    }

    /**
     * Configures the server-side encryption for Amazon S3 Storage Lens report files with either S3-managed keys (SSE-S3) or KMS-managed keys (SSE-KMS).
     */
    export interface StorageLensEncryption {
    }

    /**
     * The Storage Lens group will include objects that match all of the specified filter values.
     */
    export interface StorageLensGroupAnd {
        /**
         * This property contains a list of prefixes. At least one prefix must be specified. Up to 10 prefixes are allowed.
         */
        matchAnyPrefix?: string[];
        /**
         * This property contains a list of suffixes. At least one suffix must be specified. Up to 10 suffixes are allowed.
         */
        matchAnySuffix?: string[];
        /**
         * This property contains the list of object tags. At least one object tag must be specified. Up to 10 object tags are allowed.
         */
        matchAnyTag?: outputs.s3.StorageLensGroupTag[];
        /**
         * This property contains `DaysGreaterThan` and `DaysLessThan` properties to define the object age range (minimum and maximum number of days).
         */
        matchObjectAge?: outputs.s3.StorageLensGroupMatchObjectAge;
        /**
         * This property contains `BytesGreaterThan` and `BytesLessThan` to define the object size range (minimum and maximum number of Bytes).
         */
        matchObjectSize?: outputs.s3.StorageLensGroupMatchObjectSize;
    }

    /**
     * Sets the Storage Lens Group filter.
     */
    export interface StorageLensGroupFilter {
        /**
         * This property contains the `And` logical operator, which allows multiple filter conditions to be joined for more complex comparisons of Storage Lens group data. Objects must match all of the listed filter conditions that are joined by the `And` logical operator. Only one of each filter condition is allowed.
         */
        and?: outputs.s3.StorageLensGroupAnd;
        /**
         * This property contains a list of prefixes. At least one prefix must be specified. Up to 10 prefixes are allowed.
         */
        matchAnyPrefix?: string[];
        /**
         * This property contains a list of suffixes. At least one suffix must be specified. Up to 10 suffixes are allowed.
         */
        matchAnySuffix?: string[];
        /**
         * This property contains the list of S3 object tags. At least one object tag must be specified. Up to 10 object tags are allowed.
         */
        matchAnyTag?: outputs.s3.StorageLensGroupTag[];
        /**
         * This property contains `DaysGreaterThan` and `DaysLessThan` to define the object age range (minimum and maximum number of days).
         */
        matchObjectAge?: outputs.s3.StorageLensGroupMatchObjectAge;
        /**
         * This property contains `BytesGreaterThan` and `BytesLessThan` to define the object size range (minimum and maximum number of Bytes).
         */
        matchObjectSize?: outputs.s3.StorageLensGroupMatchObjectSize;
        /**
         * This property contains the `Or` logical operator, which allows multiple filter conditions to be joined. Objects can match any of the listed filter conditions, which are joined by the `Or` logical operator. Only one of each filter condition is allowed.
         */
        or?: outputs.s3.StorageLensGroupOr;
    }

    /**
     * Specifies the details of Amazon S3 Storage Lens Group configuration.
     */
    export interface StorageLensGroupLevel {
        /**
         * This property indicates which Storage Lens group ARNs to include or exclude in the Storage Lens group aggregation. If this value is left null, then all Storage Lens groups are selected.
         */
        storageLensGroupSelectionCriteria?: outputs.s3.StorageLensGroupSelectionCriteria;
    }

    /**
     * Filter to match all of the specified values for the minimum and maximum object age.
     */
    export interface StorageLensGroupMatchObjectAge {
        /**
         * Minimum object age to which the rule applies.
         */
        daysGreaterThan?: number;
        /**
         * Maximum object age to which the rule applies.
         */
        daysLessThan?: number;
    }

    /**
     * Filter to match all of the specified values for the minimum and maximum object size.
     */
    export interface StorageLensGroupMatchObjectSize {
        /**
         * Minimum object size to which the rule applies.
         */
        bytesGreaterThan?: number;
        /**
         * Maximum object size to which the rule applies.
         */
        bytesLessThan?: number;
    }

    /**
     * The Storage Lens group will include objects that match any of the specified filter values.
     */
    export interface StorageLensGroupOr {
        /**
         * This property contains a list of prefixes. At least one prefix must be specified. Up to 10 prefixes are allowed.
         */
        matchAnyPrefix?: string[];
        /**
         * This property contains the list of suffixes. At least one suffix must be specified. Up to 10 suffixes are allowed.
         */
        matchAnySuffix?: string[];
        /**
         * This property contains the list of S3 object tags. At least one object tag must be specified. Up to 10 object tags are allowed.
         */
        matchAnyTag?: outputs.s3.StorageLensGroupTag[];
        /**
         * This property filters objects that match the specified object age range.
         */
        matchObjectAge?: outputs.s3.StorageLensGroupMatchObjectAge;
        /**
         * This property contains the `BytesGreaterThan` and `BytesLessThan` values to define the object size range (minimum and maximum number of Bytes).
         */
        matchObjectSize?: outputs.s3.StorageLensGroupMatchObjectSize;
    }

    /**
     * Selection criteria for Storage Lens Group level metrics
     */
    export interface StorageLensGroupSelectionCriteria {
        /**
         * This property indicates which Storage Lens group ARNs to exclude from the Storage Lens group aggregation.
         */
        exclude?: string[];
        /**
         * This property indicates which Storage Lens group ARNs to include in the Storage Lens group aggregation.
         */
        include?: string[];
    }

    export interface StorageLensGroupTag {
        key: string;
        value: string;
    }

    /**
     * Prefix-level metrics configurations.
     */
    export interface StorageLensPrefixLevel {
        /**
         * A property for the prefix-level storage metrics for Amazon S3 Storage Lens.
         */
        storageMetrics: outputs.s3.StorageLensPrefixLevelStorageMetrics;
    }

    export interface StorageLensPrefixLevelStorageMetrics {
        /**
         * Specifies whether prefix-level storage metrics are enabled or disabled.
         */
        isEnabled?: boolean;
        /**
         * This property identifies whether the details of the prefix-level storage metrics for S3 Storage Lens are enabled.
         */
        selectionCriteria?: outputs.s3.StorageLensSelectionCriteria;
    }

    /**
     * S3 bucket destination settings for the Amazon S3 Storage Lens metrics export.
     */
    export interface StorageLensS3BucketDestination {
        /**
         * The AWS account ID that owns the destination S3 bucket.
         */
        accountId: string;
        /**
         * The ARN of the bucket to which Amazon S3 Storage Lens exports will be placed.
         */
        arn: string;
        /**
         * This property contains the details of the encryption of the bucket destination of the Amazon S3 Storage Lens metrics export.
         */
        encryption?: outputs.s3.StorageLensEncryption;
        /**
         * Specifies the file format to use when exporting Amazon S3 Storage Lens metrics export.
         */
        format: enums.s3.StorageLensS3BucketDestinationFormat;
        /**
         * The version of the output schema to use when exporting Amazon S3 Storage Lens metrics.
         */
        outputSchemaVersion: enums.s3.StorageLensS3BucketDestinationOutputSchemaVersion;
        /**
         * The prefix to use for Amazon S3 Storage Lens export.
         */
        prefix?: string;
    }

    /**
     * Selection criteria for prefix-level metrics.
     */
    export interface StorageLensSelectionCriteria {
        /**
         * Delimiter to divide S3 key into hierarchy of prefixes.
         */
        delimiter?: string;
        /**
         * Max depth of prefixes of S3 key that Amazon S3 Storage Lens will analyze.
         */
        maxDepth?: number;
        /**
         * The minimum storage bytes threshold for the prefixes to be included in the analysis.
         */
        minStorageBytesPercentage?: number;
    }

}

export namespace s3objectlambda {
    export interface AccessPointAlias {
        /**
         * The status of the Object Lambda alias.
         */
        status?: string;
        /**
         * The value of the Object Lambda alias.
         */
        value: string;
    }

    export interface AccessPointAwsLambda {
        functionArn: string;
        functionPayload?: string;
    }

    /**
     * Configuration to be applied to this Object lambda Access Point. It specifies Supporting Access Point, Transformation Configurations. Customers can also set if they like to enable Cloudwatch metrics for accesses to this Object lambda Access Point. Default setting for Cloudwatch metrics is disable.
     */
    export interface AccessPointObjectLambdaConfiguration {
        /**
         * A container for allowed features. Valid inputs are `GetObject-Range` , `GetObject-PartNumber` , `HeadObject-Range` , and `HeadObject-PartNumber` .
         */
        allowedFeatures?: string[];
        /**
         * A container for whether the CloudWatch metrics configuration is enabled.
         */
        cloudWatchMetricsEnabled?: boolean;
        /**
         * Standard access point associated with the Object Lambda Access Point.
         */
        supportingAccessPoint: string;
        /**
         * A container for transformation configurations for an Object Lambda Access Point.
         */
        transformationConfigurations: outputs.s3objectlambda.AccessPointTransformationConfiguration[];
    }

    export interface AccessPointPolicyStatus {
        /**
         * Specifies whether the Object lambda Access Point Policy is Public or not. Object lambda Access Points are private by default.
         */
        isPublic?: boolean;
    }

    /**
     * The Public Access Block Configuration is used to block policies that would allow public access to this Object lambda Access Point. All public access to Object lambda Access Points are blocked by default, and any policy that would give public access to them will be also blocked. This behavior cannot be changed for Object lambda Access Points.
     */
    export interface AccessPointPublicAccessBlockConfiguration {
        /**
         * Specifies whether Amazon S3 should block public access control lists (ACLs) to this object lambda access point. Setting this element to TRUE causes the following behavior:
         * - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         *  - PUT Object calls fail if the request includes a public ACL.
         * . - PUT Bucket calls fail if the request includes a public ACL.
         * Enabling this setting doesn't affect existing policies or ACLs.
         */
        blockPublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should block public bucket policies for buckets in this account. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. Enabling this setting doesn't affect existing bucket policies.
         */
        blockPublicPolicy?: boolean;
        /**
         * Specifies whether Amazon S3 should ignore public ACLs for buckets in this account. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on buckets in this account and any objects that they contain. Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.
         */
        ignorePublicAcls?: boolean;
        /**
         * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS services and authorized users within this account if the bucket has a public policy.
         * Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.
         */
        restrictPublicBuckets?: boolean;
    }

    /**
     * Configuration to define what content transformation will be applied on which S3 Action.
     */
    export interface AccessPointTransformationConfiguration {
        /**
         * A container for the action of an Object Lambda Access Point configuration. Valid inputs are `GetObject` , `HeadObject` , `ListObjects` , and `ListObjectsV2` .
         */
        actions: string[];
        /**
         * A container for the content transformation of an Object Lambda Access Point configuration. Can include the FunctionArn and FunctionPayload. For more information, see [AwsLambdaTransformation](https://docs.aws.amazon.com/AmazonS3/latest/API/API_control_AwsLambdaTransformation.html) in the *Amazon S3 API Reference* .
         */
        contentTransformation: outputs.s3objectlambda.AccessPointTransformationConfigurationContentTransformationProperties;
    }

    /**
     * A container for the content transformation of an Object Lambda Access Point configuration. Can include the FunctionArn and FunctionPayload. For more information, see [AwsLambdaTransformation](https://docs.aws.amazon.com/AmazonS3/latest/API/API_control_AwsLambdaTransformation.html) in the *Amazon S3 API Reference* .
     */
    export interface AccessPointTransformationConfigurationContentTransformationProperties {
        awsLambda: outputs.s3objectlambda.AccessPointAwsLambda;
    }

}

export namespace s3outposts {
    export interface AccessPointVpcConfiguration {
        /**
         * Virtual Private Cloud (VPC) Id from which AccessPoint will allow requests.
         */
        vpcId?: string;
    }

    /**
     * Specifies the days since the initiation of an incomplete multipart upload that Amazon S3Outposts will wait before permanently removing all parts of the upload.
     */
    export interface BucketAbortIncompleteMultipartUpload {
        /**
         * Specifies the number of days after which Amazon S3Outposts aborts an incomplete multipart upload.
         */
        daysAfterInitiation: number;
    }

    export interface BucketFilterAndOperatorProperties {
        /**
         * Prefix identifies one or more objects to which the rule applies.
         */
        prefix?: string;
        /**
         * All of these tags must exist in the object's tag set in order for the rule to apply.
         */
        tags: outputs.s3outposts.BucketFilterTag[];
    }

    /**
     * Tag used to identify a subset of objects for an Amazon S3Outposts bucket.
     */
    export interface BucketFilterTag {
        key: string;
        value: string;
    }

    export interface BucketLifecycleConfiguration {
        /**
         * A list of lifecycle rules for individual objects in an Amazon S3Outposts bucket.
         */
        rules: outputs.s3outposts.BucketRule[];
    }

    /**
     * Specifies lifecycle rules for an Amazon S3Outposts bucket. You must specify at least one of the following: AbortIncompleteMultipartUpload, ExpirationDate, ExpirationInDays.
     */
    export interface BucketRule {
        /**
         * Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3Outposts bucket.
         */
        abortIncompleteMultipartUpload?: outputs.s3outposts.BucketAbortIncompleteMultipartUpload;
        /**
         * Indicates when objects are deleted from Amazon S3Outposts. The date value must be in ISO 8601 format. The time is always midnight UTC.
         */
        expirationDate?: string;
        /**
         * Indicates the number of days after creation when objects are deleted from Amazon S3Outposts.
         */
        expirationInDays?: number;
        /**
         * The container for the filter of the lifecycle rule.
         */
        filter?: outputs.s3outposts.BucketRuleFilterProperties;
        /**
         * Unique identifier for the lifecycle rule. The value can't be longer than 255 characters.
         */
        id?: string;
        /**
         * If `Enabled` , the rule is currently being applied. If `Disabled` , the rule is not currently being applied.
         */
        status?: enums.s3outposts.BucketRuleStatus;
    }

    /**
     * The container for the filter of the lifecycle rule.
     */
    export interface BucketRuleFilterProperties {
        /**
         * The container for the AND condition for the lifecycle rule. A combination of Prefix and 1 or more Tags OR a minimum of 2 or more tags.
         */
        andOperator?: outputs.s3outposts.BucketFilterAndOperatorProperties;
        /**
         * Object key prefix that identifies one or more objects to which this rule applies.
         */
        prefix?: string;
        /**
         * Specifies a tag used to identify a subset of objects for an Amazon S3Outposts bucket.
         */
        tag?: outputs.s3outposts.BucketFilterTag;
    }

    export interface EndpointFailedReason {
        /**
         * The failure code, if any, for a create or delete endpoint operation.
         */
        errorCode?: string;
        /**
         * Additional error details describing the endpoint failure and recommended action.
         */
        message?: string;
    }

    /**
     * The container for the network interface.
     */
    export interface EndpointNetworkInterface {
        /**
         * The ID for the network interface.
         */
        networkInterfaceId: string;
    }

}

export namespace sagemaker {
    /**
     * The configuration for the kernels in a SageMaker image running as a CodeEditor app.
     */
    export interface AppImageConfigCodeEditorAppImageConfig {
        /**
         * The container configuration for a SageMaker image.
         */
        containerConfig?: outputs.sagemaker.AppImageConfigContainerConfig;
    }

    /**
     * The container configuration for a SageMaker image.
     */
    export interface AppImageConfigContainerConfig {
        /**
         * A list of arguments to apply to the container.
         */
        containerArguments?: string[];
        /**
         * The custom entry point to use on container.
         */
        containerEntrypoint?: string[];
        /**
         * A list of variables to apply to the custom container.
         */
        containerEnvironmentVariables?: outputs.sagemaker.AppImageConfigCustomImageContainerEnvironmentVariable[];
    }

    export interface AppImageConfigCustomImageContainerEnvironmentVariable {
        /**
         * The key that identifies a container environment variable.
         */
        key: string;
        /**
         * The value of the container environment variable.
         */
        value: string;
    }

    /**
     * The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
     */
    export interface AppImageConfigFileSystemConfig {
        /**
         * The default POSIX group ID (GID). If not specified, defaults to 100.
         */
        defaultGid?: number;
        /**
         * The default POSIX user ID (UID). If not specified, defaults to 1000.
         */
        defaultUid?: number;
        /**
         * The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
         */
        mountPath?: string;
    }

    /**
     * The configuration for the kernels in a SageMaker image running as a JupyterLab app.
     */
    export interface AppImageConfigJupyterLabAppImageConfig {
        /**
         * The container configuration for a SageMaker image.
         */
        containerConfig?: outputs.sagemaker.AppImageConfigContainerConfig;
    }

    /**
     * The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
     */
    export interface AppImageConfigKernelGatewayImageConfig {
        /**
         * The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
         */
        fileSystemConfig?: outputs.sagemaker.AppImageConfigFileSystemConfig;
        /**
         * The specification of the Jupyter kernels in the image.
         */
        kernelSpecs: outputs.sagemaker.AppImageConfigKernelSpec[];
    }

    export interface AppImageConfigKernelSpec {
        /**
         * The display name of the kernel.
         */
        displayName?: string;
        /**
         * The name of the kernel.
         */
        name: string;
    }

    export interface AppResourceSpec {
        /**
         * The instance type that the image version runs on.
         */
        instanceType?: enums.sagemaker.AppResourceSpecInstanceType;
        /**
         * The ARN of the SageMaker image that the image version belongs to.
         */
        sageMakerImageArn?: string;
        /**
         * The ARN of the image version created on the instance.
         */
        sageMakerImageVersionArn?: string;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface DataQualityJobDefinitionBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        /**
         * The dataset format for your batch transform job.
         */
        datasetFormat: outputs.sagemaker.DataQualityJobDefinitionDatasetFormat;
        /**
         * Indexes or names of the features to be excluded from analysis
         */
        excludeFeaturesAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.DataQualityJobDefinitionBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.DataQualityJobDefinitionBatchTransformInputS3InputMode;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface DataQualityJobDefinitionClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface DataQualityJobDefinitionConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface DataQualityJobDefinitionCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface DataQualityJobDefinitionDataQualityAppSpecification {
        /**
         * An array of arguments for the container used to run the monitoring job.
         */
        containerArguments?: string[];
        /**
         * Specifies the entrypoint for a container used to run the monitoring job.
         */
        containerEntrypoint?: string[];
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
        /**
         * An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
         */
        postAnalyticsProcessorSourceUri?: string;
        /**
         * An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
         */
        recordPreprocessorSourceUri?: string;
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface DataQualityJobDefinitionDataQualityBaselineConfig {
        /**
         * The name of the job that performs baselining for the data quality monitoring job.
         */
        baseliningJobName?: string;
        /**
         * The constraints resource for a monitoring job.
         */
        constraintsResource?: outputs.sagemaker.DataQualityJobDefinitionConstraintsResource;
        /**
         * Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
         */
        statisticsResource?: outputs.sagemaker.DataQualityJobDefinitionStatisticsResource;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface DataQualityJobDefinitionDataQualityJobInput {
        /**
         * Input object for the batch transform job.
         */
        batchTransformInput?: outputs.sagemaker.DataQualityJobDefinitionBatchTransformInput;
        /**
         * Input object for the endpoint
         */
        endpointInput?: outputs.sagemaker.DataQualityJobDefinitionEndpointInput;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface DataQualityJobDefinitionDatasetFormat {
        csv?: outputs.sagemaker.DataQualityJobDefinitionCsv;
        json?: outputs.sagemaker.DataQualityJobDefinitionJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface DataQualityJobDefinitionEndpointInput {
        /**
         * An endpoint in customer's account which has enabled `DataCaptureConfig` enabled.
         */
        endpointName: string;
        /**
         * Indexes or names of the features to be excluded from analysis
         */
        excludeFeaturesAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.DataQualityJobDefinitionEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.DataQualityJobDefinitionEndpointInputS3InputMode;
    }

    /**
     * The Json format
     */
    export interface DataQualityJobDefinitionJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface DataQualityJobDefinitionMonitoringOutput {
        /**
         * The Amazon S3 storage location where the results of a monitoring job are saved.
         */
        s3Output: outputs.sagemaker.DataQualityJobDefinitionS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface DataQualityJobDefinitionMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.DataQualityJobDefinitionMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface DataQualityJobDefinitionMonitoringResources {
        /**
         * The configuration for the cluster resources used to run the processing job.
         */
        clusterConfig: outputs.sagemaker.DataQualityJobDefinitionClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface DataQualityJobDefinitionNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        /**
         * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
         */
        vpcConfig?: outputs.sagemaker.DataQualityJobDefinitionVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface DataQualityJobDefinitionS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.DataQualityJobDefinitionS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * The baseline statistics resource for a monitoring job.
     */
    export interface DataQualityJobDefinitionStatisticsResource {
        /**
         * The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
         */
        s3Uri?: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface DataQualityJobDefinitionStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface DataQualityJobDefinitionVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    /**
     * Edge device you want to create
     */
    export interface Device {
        /**
         * Description of the device
         */
        description?: string;
        /**
         * The name of the device
         */
        deviceName: string;
        /**
         * AWS Internet of Things (IoT) object name.
         */
        iotThingName?: string;
    }

    export interface DeviceFleetEdgeOutputConfig {
        /**
         * The KMS key id used for encryption on the S3 bucket
         */
        kmsKeyId?: string;
        /**
         * The Amazon Simple Storage (S3) bucket URI
         */
        s3OutputLocation: string;
    }

    /**
     * The CodeEditor app settings.
     */
    export interface DomainCodeEditorAppSettings {
        /**
         * A list of custom images for use for CodeEditor apps.
         */
        customImages?: outputs.sagemaker.DomainCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the CodeEditor app.
         */
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
        /**
         * A list of LifecycleConfigArns available for use with CodeEditor apps.
         */
        lifecycleConfigArns?: string[];
    }

    export interface DomainCodeRepository {
        /**
         * A CodeRepository (valid URL) to be used within Jupyter's Git extension.
         */
        repositoryUrl: string;
    }

    export interface DomainCustomFileSystemConfig {
        /**
         * The settings for a custom Amazon EFS file system.
         */
        efsFileSystemConfig?: outputs.sagemaker.DomainEfsFileSystemConfig;
    }

    /**
     * A custom SageMaker image.
     */
    export interface DomainCustomImage {
        /**
         * The Name of the AppImageConfig.
         */
        appImageConfigName: string;
        /**
         * The name of the CustomImage. Must be unique to your account.
         */
        imageName: string;
        /**
         * The version number of the CustomImage.
         */
        imageVersionNumber?: number;
    }

    export interface DomainCustomPosixUserConfig {
        /**
         * The POSIX group ID.
         */
        gid: number;
        /**
         * The POSIX user ID.
         */
        uid: number;
    }

    /**
     * Properties related to the Amazon Elastic Block Store volume. Must be provided if storage type is Amazon EBS and must not be provided if storage type is not Amazon EBS
     */
    export interface DomainDefaultEbsStorageSettings {
        /**
         * Default size of the Amazon EBS volume in Gb
         */
        defaultEbsVolumeSizeInGb: number;
        /**
         * Maximum size of the Amazon EBS volume in Gb. Must be greater than or equal to the DefaultEbsVolumeSizeInGb.
         */
        maximumEbsVolumeSizeInGb: number;
    }

    /**
     * A collection of settings that apply to spaces of Amazon SageMaker Studio. These settings are specified when the Create/Update Domain API is called.
     */
    export interface DomainDefaultSpaceSettings {
        customFileSystemConfigs?: outputs.sagemaker.DomainCustomFileSystemConfig[];
        /**
         * The Jupyter lab's custom posix user configurations.
         */
        customPosixUserConfig?: outputs.sagemaker.DomainCustomPosixUserConfig;
        /**
         * The execution role for the space.
         */
        executionRole: string;
        /**
         * The Jupyter lab's app settings.
         */
        jupyterLabAppSettings?: outputs.sagemaker.DomainJupyterLabAppSettings;
        /**
         * The Jupyter server's app settings.
         */
        jupyterServerAppSettings?: outputs.sagemaker.DomainJupyterServerAppSettings;
        /**
         * The kernel gateway app settings.
         */
        kernelGatewayAppSettings?: outputs.sagemaker.DomainKernelGatewayAppSettings;
        /**
         * The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
         */
        securityGroups?: string[];
        /**
         * The Jupyter lab's space storage settings.
         */
        spaceStorageSettings?: outputs.sagemaker.DomainDefaultSpaceStorageSettings;
    }

    /**
     * Default storage settings for a space.
     */
    export interface DomainDefaultSpaceStorageSettings {
        /**
         * The default EBS storage settings for a space.
         */
        defaultEbsStorageSettings?: outputs.sagemaker.DomainDefaultEbsStorageSettings;
    }

    /**
     * A collection of settings that are required to start docker-proxy server.
     */
    export interface DomainDockerSettings {
        /**
         * The flag to enable/disable docker-proxy server
         */
        enableDockerAccess?: enums.sagemaker.DomainDockerSettingsEnableDockerAccess;
        /**
         * A list of account id's that would be used to pull images from in VpcOnly mode
         */
        vpcOnlyTrustedAccounts?: string[];
    }

    export interface DomainEfsFileSystemConfig {
        /**
         * The ID of your Amazon EFS file system.
         */
        fileSystemId: string;
        /**
         * The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
         */
        fileSystemPath?: string;
    }

    /**
     * The JupyterLab app settings.
     */
    export interface DomainJupyterLabAppSettings {
        /**
         * A list of CodeRepositories available for use with JupyterLab apps.
         */
        codeRepositories?: outputs.sagemaker.DomainCodeRepository[];
        /**
         * A list of custom images for use for JupyterLab apps.
         */
        customImages?: outputs.sagemaker.DomainCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterLab app.
         */
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
        /**
         * A list of LifecycleConfigArns available for use with JupyterLab apps.
         */
        lifecycleConfigArns?: string[];
    }

    /**
     * The JupyterServer app settings.
     */
    export interface DomainJupyterServerAppSettings {
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app.
         */
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
    }

    /**
     * The kernel gateway app settings.
     */
    export interface DomainKernelGatewayAppSettings {
        /**
         * A list of custom SageMaker images that are configured to run as a KernelGateway app.
         */
        customImages?: outputs.sagemaker.DomainCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
         */
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
    }

    /**
     * A collection of settings that apply to an RSessionGateway app.
     */
    export interface DomainRSessionAppSettings {
        /**
         * A list of custom SageMaker images that are configured to run as a KernelGateway app.
         */
        customImages?: outputs.sagemaker.DomainCustomImage[];
        /**
         * Specifies the ARNs of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
         */
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
    }

    /**
     * A collection of settings that configure user interaction with the RStudioServerPro app.
     */
    export interface DomainRStudioServerProAppSettings {
        /**
         * Indicates whether the current user has access to the RStudioServerPro app.
         */
        accessStatus?: enums.sagemaker.DomainRStudioServerProAppSettingsAccessStatus;
        /**
         * The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
         */
        userGroup?: enums.sagemaker.DomainRStudioServerProAppSettingsUserGroup;
    }

    /**
     * A collection of settings that update the current configuration for the RStudioServerPro Domain-level app.
     */
    export interface DomainRStudioServerProDomainSettings {
        /**
         * A collection that defines the default `InstanceType` , `SageMakerImageArn` , and `SageMakerImageVersionArn` for the Domain.
         */
        defaultResourceSpec?: outputs.sagemaker.DomainResourceSpec;
        /**
         * The ARN of the execution role for the RStudioServerPro Domain-level app.
         */
        domainExecutionRoleArn: string;
        /**
         * A URL pointing to an RStudio Connect server.
         */
        rStudioConnectUrl?: string;
        /**
         * A URL pointing to an RStudio Package Manager server.
         */
        rStudioPackageManagerUrl?: string;
    }

    export interface DomainResourceSpec {
        /**
         * The instance type that the image version runs on.
         */
        instanceType?: enums.sagemaker.DomainResourceSpecInstanceType;
        /**
         * The Amazon Resource Name (ARN) of the Lifecycle Configuration to attach to the Resource.
         */
        lifecycleConfigArn?: string;
        /**
         * The Amazon Resource Name (ARN) of the SageMaker image that the image version belongs to.
         */
        sageMakerImageArn?: string;
        /**
         * The Amazon Resource Name (ARN) of the image version created on the instance.
         */
        sageMakerImageVersionArn?: string;
    }

    /**
     * A collection of Domain settings.
     */
    export interface DomainSettings {
        /**
         * A collection of settings that configure the domain's Docker interaction.
         */
        dockerSettings?: outputs.sagemaker.DomainDockerSettings;
        /**
         * A collection of settings that configure the `RStudioServerPro` Domain-level app.
         */
        rStudioServerProDomainSettings?: outputs.sagemaker.DomainRStudioServerProDomainSettings;
        /**
         * The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
         */
        securityGroupIds?: string[];
    }

    /**
     * Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
     */
    export interface DomainSharingSettings {
        /**
         * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
         */
        notebookOutputOption?: enums.sagemaker.DomainSharingSettingsNotebookOutputOption;
        /**
         * When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
         */
        s3KmsKeyId?: string;
        /**
         * When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
         */
        s3OutputPath?: string;
    }

    /**
     * A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
     */
    export interface DomainUserSettings {
        /**
         * The Code Editor application settings.
         */
        codeEditorAppSettings?: outputs.sagemaker.DomainCodeEditorAppSettings;
        /**
         * The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio.
         */
        customFileSystemConfigs?: outputs.sagemaker.DomainCustomFileSystemConfig[];
        /**
         * Details about the POSIX identity that is used for file system operations.
         */
        customPosixUserConfig?: outputs.sagemaker.DomainCustomPosixUserConfig;
        /**
         * Defines which Amazon SageMaker application users are directed to by default.
         */
        defaultLandingUri?: string;
        /**
         * The execution role for the user.
         */
        executionRole: string;
        /**
         * The settings for the JupyterLab application.
         */
        jupyterLabAppSettings?: outputs.sagemaker.DomainJupyterLabAppSettings;
        /**
         * The Jupyter server's app settings.
         */
        jupyterServerAppSettings?: outputs.sagemaker.DomainJupyterServerAppSettings;
        /**
         * The kernel gateway app settings.
         */
        kernelGatewayAppSettings?: outputs.sagemaker.DomainKernelGatewayAppSettings;
        /**
         * A collection of settings that configure the `RSessionGateway` app.
         */
        rSessionAppSettings?: outputs.sagemaker.DomainRSessionAppSettings;
        /**
         * A collection of settings that configure user interaction with the `RStudioServerPro` app.
         */
        rStudioServerProAppSettings?: outputs.sagemaker.DomainRStudioServerProAppSettings;
        /**
         * The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
         */
        securityGroups?: string[];
        /**
         * The sharing settings.
         */
        sharingSettings?: outputs.sagemaker.DomainSharingSettings;
        /**
         * The storage settings for a space.
         */
        spaceStorageSettings?: outputs.sagemaker.DomainDefaultSpaceStorageSettings;
        /**
         * Indicates whether the Studio experience is available to users. If not, users cannot access Studio.
         */
        studioWebPortal?: enums.sagemaker.DomainUserSettingsStudioWebPortal;
    }

    export interface FeatureGroupDataCatalogConfig {
        /**
         * The name of the Glue table catalog.
         */
        catalog: string;
        /**
         * The name of the Glue table database.
         */
        database: string;
        /**
         * The name of the Glue table.
         */
        tableName: string;
    }

    export interface FeatureGroupFeatureDefinition {
        /**
         * The name of a feature. The type must be a string. `FeatureName` cannot be any of the following: `is_deleted` , `write_time` , `api_invocation_time` .
         *
         * The name:
         *
         * - Must start with an alphanumeric character.
         * - Can only include alphanumeric characters, underscores, and hyphens. Spaces are not allowed.
         */
        featureName: string;
        /**
         * The value type of a feature. Valid values are Integral, Fractional, or String.
         */
        featureType: enums.sagemaker.FeatureGroupFeatureDefinitionFeatureType;
    }

    export interface FeatureGroupOnlineStoreSecurityConfig {
        /**
         * The AWS Key Management Service (KMS) key ARN that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption.
         *
         * The caller (either user or IAM role) of `CreateFeatureGroup` must have below permissions to the `OnlineStore` `KmsKeyId` :
         *
         * - `"kms:Encrypt"`
         * - `"kms:Decrypt"`
         * - `"kms:DescribeKey"`
         * - `"kms:CreateGrant"`
         * - `"kms:RetireGrant"`
         * - `"kms:ReEncryptFrom"`
         * - `"kms:ReEncryptTo"`
         * - `"kms:GenerateDataKey"`
         * - `"kms:ListAliases"`
         * - `"kms:ListGrants"`
         * - `"kms:RevokeGrant"`
         *
         * The caller (either user or IAM role) to all DataPlane operations ( `PutRecord` , `GetRecord` , `DeleteRecord` ) must have the following permissions to the `KmsKeyId` :
         *
         * - `"kms:Decrypt"`
         */
        kmsKeyId?: string;
    }

    export interface FeatureGroupS3StorageConfig {
        /**
         * The AWS Key Management Service (KMS) key ARN of the key used to encrypt any objects written into the `OfflineStore` S3 location.
         *
         * The IAM `roleARN` that is passed as a parameter to `CreateFeatureGroup` must have below permissions to the `KmsKeyId` :
         *
         * - `"kms:GenerateDataKey"`
         */
        kmsKeyId?: string;
        /**
         * The S3 URI, or location in Amazon S3, of `OfflineStore` .
         *
         * S3 URIs have a format similar to the following: `s3://example-bucket/prefix/` .
         */
        s3Uri: string;
    }

    export interface FeatureGroupThroughputConfig {
        /**
         * For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling.
         */
        provisionedReadCapacityUnits?: number;
        /**
         * For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling.
         */
        provisionedWriteCapacityUnits?: number;
        /**
         * The mode used for your feature group throughput: `ON_DEMAND` or `PROVISIONED` .
         */
        throughputMode: enums.sagemaker.FeatureGroupThroughputMode;
    }

    /**
     * TTL configuration of the feature group
     */
    export interface FeatureGroupTtlDuration {
        /**
         * `TtlDuration` time unit.
         */
        unit?: enums.sagemaker.FeatureGroupUnit;
        /**
         * `TtlDuration` time value.
         */
        value?: number;
    }

    export interface InferenceComponentComputeResourceRequirements {
        /**
         * The maximum MB of memory to allocate to run a model that you assign to an inference component.
         */
        maxMemoryRequiredInMb?: number;
        /**
         * The minimum MB of memory to allocate to run a model that you assign to an inference component.
         */
        minMemoryRequiredInMb?: number;
        /**
         * The number of accelerators to allocate to run a model that you assign to an inference component. Accelerators include GPUs and AWS Inferentia.
         */
        numberOfAcceleratorDevicesRequired?: number;
        /**
         * The number of CPU cores to allocate to run a model that you assign to an inference component.
         */
        numberOfCpuCoresRequired?: number;
    }

    export interface InferenceComponentContainerSpecification {
        /**
         * The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
         */
        artifactUrl?: string;
        deployedImage?: outputs.sagemaker.InferenceComponentDeployedImage;
        /**
         * The environment variables to set in the Docker container. Each key and value in the Environment string-to-string map can have length of up to 1024. We support up to 16 entries in the map.
         */
        environment?: {[key: string]: string};
        /**
         * The Amazon Elastic Container Registry (Amazon ECR) path where the Docker image for the model is stored.
         */
        image?: string;
    }

    export interface InferenceComponentDeployedImage {
        /**
         * The date and time when the image path for the model resolved to the `ResolvedImage`
         */
        resolutionTime?: string;
        /**
         * The specific digest path of the image hosted in this `ProductionVariant` .
         */
        resolvedImage?: string;
        /**
         * The image path you specified when you created the model.
         */
        specifiedImage?: string;
    }

    /**
     * The runtime config for the inference component
     */
    export interface InferenceComponentRuntimeConfig {
        /**
         * The number of runtime copies of the model container to deploy with the inference component. Each copy can serve inference requests.
         */
        copyCount?: number;
        currentCopyCount?: number;
        desiredCopyCount?: number;
    }

    /**
     * The specification for the inference component
     */
    export interface InferenceComponentSpecification {
        /**
         * The compute resources allocated to run the model assigned to the inference component.
         */
        computeResourceRequirements: outputs.sagemaker.InferenceComponentComputeResourceRequirements;
        /**
         * Defines a container that provides the runtime environment for a model that you deploy with an inference component.
         */
        container?: outputs.sagemaker.InferenceComponentContainerSpecification;
        /**
         * The name of an existing SageMaker model object in your account that you want to deploy with the inference component.
         */
        modelName?: string;
        /**
         * Settings that take effect while the model container starts up.
         */
        startupParameters?: outputs.sagemaker.InferenceComponentStartupParameters;
    }

    export interface InferenceComponentStartupParameters {
        /**
         * The timeout value, in seconds, for your inference container to pass health check by Amazon S3 Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests) .
         */
        containerStartupHealthCheckTimeoutInSeconds?: number;
        /**
         * The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this inference component.
         */
        modelDataDownloadTimeoutInSeconds?: number;
    }

    /**
     * Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.
     */
    export interface InferenceExperimentCaptureContentTypeHeader {
        /**
         * The list of all content type headers that SageMaker will treat as CSV and capture accordingly.
         */
        csvContentTypes?: string[];
        /**
         * The list of all content type headers that SageMaker will treat as JSON and capture accordingly.
         */
        jsonContentTypes?: string[];
    }

    /**
     * The Amazon S3 location and configuration for storing inference request and response data.
     */
    export interface InferenceExperimentDataStorageConfig {
        /**
         * Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.
         */
        contentType?: outputs.sagemaker.InferenceExperimentCaptureContentTypeHeader;
        /**
         * The Amazon S3 bucket where the inference request and response data is stored.
         */
        destination: string;
        /**
         * The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.
         */
        kmsKey?: string;
    }

    /**
     * The metadata of the endpoint on which the inference experiment ran.
     */
    export interface InferenceExperimentEndpointMetadata {
        /**
         * The name of the endpoint configuration.
         */
        endpointConfigName?: string;
        /**
         * The name of the endpoint.
         */
        endpointName: string;
        /**
         * The status of the endpoint. For possible values of the status of an endpoint.
         */
        endpointStatus?: enums.sagemaker.InferenceExperimentEndpointMetadataEndpointStatus;
    }

    /**
     * The configuration for the infrastructure that the model will be deployed to.
     */
    export interface InferenceExperimentModelInfrastructureConfig {
        /**
         * The type of the inference experiment that you want to run.
         */
        infrastructureType: enums.sagemaker.InferenceExperimentModelInfrastructureConfigInfrastructureType;
        /**
         * The infrastructure configuration for deploying the model to real-time inference.
         */
        realTimeInferenceConfig: outputs.sagemaker.InferenceExperimentRealTimeInferenceConfig;
    }

    /**
     * Contains information about the deployment options of a model.
     */
    export interface InferenceExperimentModelVariantConfig {
        /**
         * The configuration for the infrastructure that the model will be deployed to.
         */
        infrastructureConfig: outputs.sagemaker.InferenceExperimentModelInfrastructureConfig;
        /**
         * The name of the Amazon SageMaker Model entity.
         */
        modelName: string;
        /**
         * The name of the variant.
         */
        variantName: string;
    }

    /**
     * The infrastructure configuration for deploying the model to a real-time inference endpoint.
     */
    export interface InferenceExperimentRealTimeInferenceConfig {
        /**
         * The number of instances of the type specified by InstanceType.
         */
        instanceCount: number;
        /**
         * The instance type the model is deployed to.
         */
        instanceType: string;
    }

    /**
     * The duration for which you want the inference experiment to run.
     */
    export interface InferenceExperimentSchedule {
        /**
         * The timestamp at which the inference experiment ended or will end.
         */
        endTime?: string;
        /**
         * The timestamp at which the inference experiment started or will start.
         */
        startTime?: string;
    }

    /**
     * The configuration of ShadowMode inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates.
     */
    export interface InferenceExperimentShadowModeConfig {
        /**
         * List of shadow variant configurations.
         */
        shadowModelVariants: outputs.sagemaker.InferenceExperimentShadowModelVariantConfig[];
        /**
         * The name of the production variant, which takes all the inference requests.
         */
        sourceModelVariantName: string;
    }

    /**
     * The name and sampling percentage of a shadow variant.
     */
    export interface InferenceExperimentShadowModelVariantConfig {
        /**
         * The percentage of inference requests that Amazon SageMaker replicates from the production variant to the shadow variant.
         */
        samplingPercentage: number;
        /**
         * The name of the shadow variant.
         */
        shadowModelVariantName: string;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface ModelBiasJobDefinitionBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        /**
         * The dataset format for your batch transform job.
         */
        datasetFormat: outputs.sagemaker.ModelBiasJobDefinitionDatasetFormat;
        /**
         * Monitoring end time offset, e.g. PT0H
         */
        endTimeOffset?: string;
        /**
         * JSONpath to locate features in JSONlines dataset
         */
        featuresAttribute?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        /**
         * The threshold for the class probability to be evaluated as a positive result.
         */
        probabilityThresholdAttribute?: number;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelBiasJobDefinitionBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelBiasJobDefinitionBatchTransformInputS3InputMode;
        /**
         * Monitoring start time offset, e.g. -PT1H
         */
        startTimeOffset?: string;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface ModelBiasJobDefinitionClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface ModelBiasJobDefinitionConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface ModelBiasJobDefinitionCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface ModelBiasJobDefinitionDatasetFormat {
        csv?: outputs.sagemaker.ModelBiasJobDefinitionCsv;
        json?: outputs.sagemaker.ModelBiasJobDefinitionJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface ModelBiasJobDefinitionEndpointInput {
        /**
         * Monitoring end time offset, e.g. PT0H
         */
        endTimeOffset?: string;
        /**
         * An endpoint in customer's account which has enabled `DataCaptureConfig` enabled.
         */
        endpointName: string;
        /**
         * JSONpath to locate features in JSONlines dataset
         */
        featuresAttribute?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        /**
         * The threshold for the class probability to be evaluated as a positive result.
         */
        probabilityThresholdAttribute?: number;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelBiasJobDefinitionEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelBiasJobDefinitionEndpointInputS3InputMode;
        /**
         * Monitoring start time offset, e.g. -PT1H
         */
        startTimeOffset?: string;
    }

    /**
     * The Json format
     */
    export interface ModelBiasJobDefinitionJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface ModelBiasJobDefinitionModelBiasAppSpecification {
        /**
         * The S3 URI to an analysis configuration file
         */
        configUri: string;
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface ModelBiasJobDefinitionModelBiasBaselineConfig {
        /**
         * The name of the baseline model bias job.
         */
        baseliningJobName?: string;
        /**
         * The constraints resource for a monitoring job.
         */
        constraintsResource?: outputs.sagemaker.ModelBiasJobDefinitionConstraintsResource;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface ModelBiasJobDefinitionModelBiasJobInput {
        /**
         * Input object for the batch transform job.
         */
        batchTransformInput?: outputs.sagemaker.ModelBiasJobDefinitionBatchTransformInput;
        /**
         * Input object for the endpoint
         */
        endpointInput?: outputs.sagemaker.ModelBiasJobDefinitionEndpointInput;
        /**
         * Location of ground truth labels to use in model bias job.
         */
        groundTruthS3Input: outputs.sagemaker.ModelBiasJobDefinitionMonitoringGroundTruthS3Input;
    }

    /**
     * Ground truth input provided in S3 
     */
    export interface ModelBiasJobDefinitionMonitoringGroundTruthS3Input {
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface ModelBiasJobDefinitionMonitoringOutput {
        /**
         * The Amazon S3 storage location where the results of a monitoring job are saved.
         */
        s3Output: outputs.sagemaker.ModelBiasJobDefinitionS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface ModelBiasJobDefinitionMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.ModelBiasJobDefinitionMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface ModelBiasJobDefinitionMonitoringResources {
        /**
         * The configuration for the cluster resources used to run the processing job.
         */
        clusterConfig: outputs.sagemaker.ModelBiasJobDefinitionClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface ModelBiasJobDefinitionNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        /**
         * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
         */
        vpcConfig?: outputs.sagemaker.ModelBiasJobDefinitionVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface ModelBiasJobDefinitionS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.ModelBiasJobDefinitionS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface ModelBiasJobDefinitionStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface ModelBiasJobDefinitionVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    export interface ModelCardAdditionalInformation {
        /**
         * Caveats and recommendations for people who might use this model in their applications.
         */
        caveatsAndRecommendations?: string;
        /**
         * customer details.
         */
        customDetails?: {[key: string]: string};
        /**
         * Any ethical considerations that the author wants to provide.
         */
        ethicalConsiderations?: string;
    }

    export interface ModelCardBarChartMetric {
        name: string;
        notes?: string;
        type: enums.sagemaker.ModelCardBarChartMetricType;
        value: number[];
        xAxisName?: string[];
        yAxisName?: string;
    }

    /**
     * Business details.
     */
    export interface ModelCardBusinessDetails {
        /**
         * What business problem does the model solve?
         */
        businessProblem?: string;
        /**
         * Business stakeholders.
         */
        businessStakeholders?: string;
        /**
         * Line of business.
         */
        lineOfBusiness?: string;
    }

    export interface ModelCardContainer {
        /**
         * Inference environment path. The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
         */
        image: string;
        /**
         * The Amazon S3 path where the model artifacts, which result from model training, are stored.
         */
        modelDataUrl?: string;
        /**
         * The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
         */
        nearestModelName?: string;
    }

    /**
     * The content of the model card.
     */
    export interface ModelCardContent {
        /**
         * Additional information about the model.
         */
        additionalInformation?: outputs.sagemaker.ModelCardAdditionalInformation;
        /**
         * Information about how the model supports business goals.
         */
        businessDetails?: outputs.sagemaker.ModelCardBusinessDetails;
        /**
         * An overview about the model's evaluation.
         */
        evaluationDetails?: outputs.sagemaker.ModelCardEvaluationDetail[];
        /**
         * The intended usage of the model.
         */
        intendedUses?: outputs.sagemaker.ModelCardIntendedUses;
        /**
         * An overview about the model
         */
        modelOverview?: outputs.sagemaker.ModelCardModelOverview;
        modelPackageDetails?: outputs.sagemaker.ModelCardModelPackageDetails;
        /**
         * An overview about model training.
         */
        trainingDetails?: outputs.sagemaker.ModelCardTrainingDetails;
    }

    /**
     * item of evaluation details
     */
    export interface ModelCardEvaluationDetail {
        datasets?: string[];
        evaluationJobArn?: string;
        evaluationObservation?: string;
        /**
         * additional attributes associated with the evaluation results.
         */
        metadata?: {[key: string]: string};
        metricGroups?: outputs.sagemaker.ModelCardMetricGroup[];
        name: string;
    }

    export interface ModelCardInferenceSpecification {
        /**
         * Contains inference related information which were used to create model package.
         */
        containers: outputs.sagemaker.ModelCardContainer[];
    }

    /**
     * Intended usage of model.
     */
    export interface ModelCardIntendedUses {
        /**
         * An explanation of why your organization categorizes the model with its risk rating.
         */
        explanationsForRiskRating?: string;
        /**
         * Factors affecting model efficacy.
         */
        factorsAffectingModelEfficiency?: string;
        /**
         * intended use cases.
         */
        intendedUses?: string;
        /**
         * Why the model was developed?
         */
        purposeOfModel?: string;
        /**
         * Your organization's risk rating. You can specify one the following values as the risk rating:
         *
         * - High
         * - Medium
         * - Low
         * - Unknown
         */
        riskRating?: enums.sagemaker.ModelCardRiskRating;
    }

    /**
     * Linear graph metric.
     */
    export interface ModelCardLinearGraphMetric {
        name: string;
        notes?: string;
        type: enums.sagemaker.ModelCardLinearGraphMetricType;
        value: number[][];
        xAxisName?: string;
        yAxisName?: string;
    }

    export interface ModelCardMatrixMetric {
        name: string;
        notes?: string;
        type: enums.sagemaker.ModelCardMatrixMetricType;
        value: number[][];
        xAxisName?: string[];
        yAxisName?: string[];
    }

    /**
     * item in metric groups
     */
    export interface ModelCardMetricGroup {
        metricData: (outputs.sagemaker.ModelCardSimpleMetric | outputs.sagemaker.ModelCardLinearGraphMetric | outputs.sagemaker.ModelCardBarChartMetric | outputs.sagemaker.ModelCardMatrixMetric)[];
        name: string;
    }

    /**
     * Overview about the model.
     */
    export interface ModelCardModelOverview {
        /**
         * Algorithm used to solve the problem.
         */
        algorithmType?: string;
        /**
         * Overview about the inference.
         */
        inferenceEnvironment?: outputs.sagemaker.ModelCardModelOverviewInferenceEnvironmentProperties;
        /**
         * Location of the model artifact.
         */
        modelArtifact?: string[];
        /**
         * Creator of model.
         */
        modelCreator?: string;
        /**
         * description of model.
         */
        modelDescription?: string;
        /**
         * SageMaker Model Arn or Non SageMaker Model id.
         */
        modelId?: string;
        /**
         * Name of the model.
         */
        modelName?: string;
        /**
         * Owner of model.
         */
        modelOwner?: string;
        /**
         * Version of the model.
         */
        modelVersion?: number;
        /**
         * Problem being solved with the model.
         */
        problemType?: string;
    }

    /**
     * Overview about the inference.
     */
    export interface ModelCardModelOverviewInferenceEnvironmentProperties {
        /**
         * SageMaker inference image uri.
         */
        containerImage?: string[];
    }

    export interface ModelCardModelPackageCreator {
        /**
         * The name of the user's profile in Studio
         */
        userProfileName?: string;
    }

    /**
     * Metadata information related to model package version
     */
    export interface ModelCardModelPackageDetails {
        /**
         * A description provided for the model approval
         */
        approvalDescription?: string;
        /**
         * Information about the user who created model package.
         */
        createdBy?: outputs.sagemaker.ModelCardModelPackageCreator;
        /**
         * The machine learning domain of the model package you specified. Common machine learning domains include computer vision and natural language processing.
         */
        domain?: string;
        /**
         * Details about inference jobs that can be run with models based on this model package.
         */
        inferenceSpecification?: outputs.sagemaker.ModelCardInferenceSpecification;
        /**
         * Current approval status of model package
         */
        modelApprovalStatus?: enums.sagemaker.ModelCardModelPackageDetailsModelApprovalStatus;
        /**
         * The Amazon Resource Name (ARN) of the model package
         */
        modelPackageArn?: string;
        /**
         * A brief summary of the model package
         */
        modelPackageDescription?: string;
        /**
         * If the model is a versioned model, the name of the model group that the versioned model belongs to.
         */
        modelPackageGroupName?: string;
        /**
         * Name of the model package
         */
        modelPackageName?: string;
        /**
         * Current status of model package
         */
        modelPackageStatus?: enums.sagemaker.ModelCardModelPackageDetailsModelPackageStatus;
        /**
         * Version of the model package
         */
        modelPackageVersion?: number;
        /**
         * A list of algorithms that were used to create a model package.
         */
        sourceAlgorithms?: outputs.sagemaker.ModelCardSourceAlgorithm[];
        /**
         * The machine learning task you specified that your model package accomplishes. Common machine learning tasks include object detection and image classification.
         */
        task?: string;
    }

    /**
     * the objective function the model will optimize for.
     */
    export interface ModelCardObjectiveFunction {
        /**
         * objective function that training job is optimized for.
         */
        function?: outputs.sagemaker.ModelCardObjectiveFunctionFunctionProperties;
        /**
         * Notes about the object function, including other considerations for possible objective functions.
         */
        notes?: string;
    }

    /**
     * objective function that training job is optimized for.
     */
    export interface ModelCardObjectiveFunctionFunctionProperties {
        condition?: string;
        facet?: string;
        function?: enums.sagemaker.ModelCardObjectiveFunctionFunctionPropertiesFunction;
    }

    /**
     * An optional Key Management Service key to encrypt, decrypt, and re-encrypt model card content for regulated workloads with highly sensitive data.
     */
    export interface ModelCardSecurityConfig {
        /**
         * A Key Management Service key ID to use for encrypting a model card.
         */
        kmsKeyId?: string;
    }

    /**
     * metric data
     */
    export interface ModelCardSimpleMetric {
        name: string;
        notes?: string;
        type: enums.sagemaker.ModelCardSimpleMetricType;
        value: number | string | boolean;
        xAxisName?: string;
        yAxisName?: string;
    }

    export interface ModelCardSourceAlgorithm {
        /**
         * The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
         */
        algorithmName: string;
        /**
         * The Amazon S3 path where the model artifacts, which result from model training, are stored.
         */
        modelDataUrl?: string;
    }

    /**
     * Overview about the training.
     */
    export interface ModelCardTrainingDetails {
        /**
         * The function that is optimized during model training.
         */
        objectiveFunction?: outputs.sagemaker.ModelCardObjectiveFunction;
        /**
         * Details about any associated training jobs.
         */
        trainingJobDetails?: outputs.sagemaker.ModelCardTrainingDetailsTrainingJobDetailsProperties;
        /**
         * Any observations about training.
         */
        trainingObservations?: string;
    }

    /**
     * Details about any associated training jobs.
     */
    export interface ModelCardTrainingDetailsTrainingJobDetailsProperties {
        hyperParameters?: outputs.sagemaker.ModelCardTrainingHyperParameter[];
        /**
         * SageMaker Training job arn.
         */
        trainingArn?: string;
        /**
         * Location of the model datasets.
         */
        trainingDatasets?: string[];
        trainingEnvironment?: outputs.sagemaker.ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties;
        trainingMetrics?: outputs.sagemaker.ModelCardTrainingMetric[];
        userProvidedHyperParameters?: outputs.sagemaker.ModelCardTrainingHyperParameter[];
        userProvidedTrainingMetrics?: outputs.sagemaker.ModelCardTrainingMetric[];
    }

    export interface ModelCardTrainingDetailsTrainingJobDetailsPropertiesTrainingEnvironmentProperties {
        /**
         * SageMaker training image uri.
         */
        containerImage?: string[];
    }

    /**
     * training hyper parameter
     */
    export interface ModelCardTrainingHyperParameter {
        /**
         * The name of the hyper parameter.
         */
        name: string;
        /**
         * The value specified for the hyper parameter.
         */
        value: string;
    }

    /**
     * training metric data.
     */
    export interface ModelCardTrainingMetric {
        /**
         * The name of the result from the SageMaker training job.
         */
        name: string;
        /**
         * Any additional notes describing the result of the training job.
         */
        notes?: string;
        /**
         * The value of a result from the SageMaker training job.
         */
        value: number;
    }

    /**
     * Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
     */
    export interface ModelCardUserContext {
        /**
         * The domain associated with the user.
         */
        domainId?: string;
        /**
         * The Amazon Resource Name (ARN) of the user's profile.
         */
        userProfileArn?: string;
        /**
         * The name of the user's profile.
         */
        userProfileName?: string;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        /**
         * The dataset format for your batch transform job.
         */
        datasetFormat: outputs.sagemaker.ModelExplainabilityJobDefinitionDatasetFormat;
        /**
         * JSONpath to locate features in JSONlines dataset
         */
        featuresAttribute?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelExplainabilityJobDefinitionBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelExplainabilityJobDefinitionBatchTransformInputS3InputMode;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface ModelExplainabilityJobDefinitionClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface ModelExplainabilityJobDefinitionCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface ModelExplainabilityJobDefinitionDatasetFormat {
        csv?: outputs.sagemaker.ModelExplainabilityJobDefinitionCsv;
        json?: outputs.sagemaker.ModelExplainabilityJobDefinitionJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionEndpointInput {
        /**
         * An endpoint in customer's account which has enabled `DataCaptureConfig` enabled.
         */
        endpointName: string;
        /**
         * JSONpath to locate features in JSONlines dataset
         */
        featuresAttribute?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelExplainabilityJobDefinitionEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelExplainabilityJobDefinitionEndpointInputS3InputMode;
    }

    /**
     * The Json format
     */
    export interface ModelExplainabilityJobDefinitionJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionModelExplainabilityAppSpecification {
        /**
         * The S3 URI to an analysis configuration file
         */
        configUri: string;
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface ModelExplainabilityJobDefinitionModelExplainabilityBaselineConfig {
        /**
         * The name of the baseline model explainability job.
         */
        baseliningJobName?: string;
        /**
         * The constraints resource for a model explainability job.
         */
        constraintsResource?: outputs.sagemaker.ModelExplainabilityJobDefinitionConstraintsResource;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionModelExplainabilityJobInput {
        /**
         * Input object for the batch transform job.
         */
        batchTransformInput?: outputs.sagemaker.ModelExplainabilityJobDefinitionBatchTransformInput;
        /**
         * Input object for the endpoint
         */
        endpointInput?: outputs.sagemaker.ModelExplainabilityJobDefinitionEndpointInput;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionMonitoringOutput {
        /**
         * The Amazon S3 storage location where the results of a monitoring job are saved.
         */
        s3Output: outputs.sagemaker.ModelExplainabilityJobDefinitionS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface ModelExplainabilityJobDefinitionMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.ModelExplainabilityJobDefinitionMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionMonitoringResources {
        /**
         * The configuration for the cluster resources used to run the processing job.
         */
        clusterConfig: outputs.sagemaker.ModelExplainabilityJobDefinitionClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface ModelExplainabilityJobDefinitionNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        /**
         * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
         */
        vpcConfig?: outputs.sagemaker.ModelExplainabilityJobDefinitionVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface ModelExplainabilityJobDefinitionS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.ModelExplainabilityJobDefinitionS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface ModelExplainabilityJobDefinitionStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface ModelExplainabilityJobDefinitionVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    /**
     * Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package.AdditionalInferenceSpecifications can be added to existing model packages using AdditionalInferenceSpecificationsToAdd.
     */
    export interface ModelPackageAdditionalInferenceSpecificationDefinition {
        /**
         * The Amazon ECR registry path of the Docker image that contains the inference code.
         */
        containers: outputs.sagemaker.ModelPackageContainerDefinition[];
        /**
         * A description of the additional Inference specification.
         */
        description?: string;
        /**
         * A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package.
         */
        name: string;
        /**
         * The supported MIME types for the input data.
         */
        supportedContentTypes?: string[];
        /**
         * A list of the instance types that are used to generate inferences in real-time
         */
        supportedRealtimeInferenceInstanceTypes?: string[];
        /**
         * The supported MIME types for the output data.
         */
        supportedResponseMimeTypes?: string[];
        /**
         * A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
         */
        supportedTransformInstanceTypes?: string[];
    }

    /**
     * Contains bias metrics for a model.
     */
    export interface ModelPackageBias {
        /**
         * The post-training bias report for a model.
         */
        postTrainingReport?: outputs.sagemaker.ModelPackageMetricsSource;
        /**
         * The pre-training bias report for a model.
         */
        preTrainingReport?: outputs.sagemaker.ModelPackageMetricsSource;
        /**
         * The bias report for a model
         */
        report?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Describes the Docker container for the model package.
     */
    export interface ModelPackageContainerDefinition {
        /**
         * The DNS host name for the Docker container.
         */
        containerHostname?: string;
        environment?: outputs.sagemaker.ModelPackageEnvironment;
        /**
         * The machine learning framework of the model package container image.
         */
        framework?: string;
        /**
         * The framework version of the Model Package Container Image.
         */
        frameworkVersion?: string;
        /**
         * The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
         */
        image: string;
        /**
         * An MD5 hash of the training algorithm that identifies the Docker image used for training.
         */
        imageDigest?: string;
        /**
         * A structure with Model Input details.
         */
        modelDataUrl?: string;
        modelInput?: outputs.sagemaker.ModelPackageContainerDefinitionModelInputProperties;
        /**
         * The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
         */
        nearestModelName?: string;
    }

    export interface ModelPackageContainerDefinitionModelInputProperties {
        /**
         * The input configuration object for the model.
         */
        dataInputConfig: string;
    }

    /**
     * The metadata properties associated with the model package versions.
     */
    export interface ModelPackageCustomerMetadataProperties {
    }

    /**
     * Describes the input source of a transform job and the way the transform job consumes it.
     */
    export interface ModelPackageDataSource {
        /**
         * The S3 location of the data source that is associated with a channel.
         */
        s3DataSource: outputs.sagemaker.ModelPackageS3DataSource;
    }

    /**
     * Represents the drift check baselines that can be used when the model monitor is set using the model package.
     */
    export interface ModelPackageDriftCheckBaselines {
        /**
         * Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
         */
        bias?: outputs.sagemaker.ModelPackageDriftCheckBias;
        /**
         * Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.
         */
        explainability?: outputs.sagemaker.ModelPackageDriftCheckExplainability;
        /**
         * Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package.
         */
        modelDataQuality?: outputs.sagemaker.ModelPackageDriftCheckModelDataQuality;
        /**
         * Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
         */
        modelQuality?: outputs.sagemaker.ModelPackageDriftCheckModelQuality;
    }

    /**
     * Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
     */
    export interface ModelPackageDriftCheckBias {
        /**
         * The bias config file for a model.
         */
        configFile?: outputs.sagemaker.ModelPackageFileSource;
        /**
         * The post-training constraints.
         */
        postTrainingConstraints?: outputs.sagemaker.ModelPackageMetricsSource;
        /**
         * The pre-training constraints.
         */
        preTrainingConstraints?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Contains explainability metrics for a model.
     */
    export interface ModelPackageDriftCheckExplainability {
        /**
         * The explainability config file for the model.
         */
        configFile?: outputs.sagemaker.ModelPackageFileSource;
        /**
         * The drift check explainability constraints.
         */
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
     */
    export interface ModelPackageDriftCheckModelDataQuality {
        /**
         * The drift check model data quality constraints.
         */
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
        /**
         * The drift check model data quality statistics.
         */
        statistics?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
     */
    export interface ModelPackageDriftCheckModelQuality {
        /**
         * The drift check model quality constraints.
         */
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
        /**
         * The drift check model quality statistics.
         */
        statistics?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Sets the environment variables in the Docker container
     */
    export interface ModelPackageEnvironment {
    }

    /**
     * Contains explainability metrics for a model.
     */
    export interface ModelPackageExplainability {
        /**
         * The explainability report for a model.
         */
        report?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Represents a File Source Object.
     */
    export interface ModelPackageFileSource {
        /**
         * The digest of the file source.
         */
        contentDigest?: string;
        /**
         * The type of content stored in the file source.
         */
        contentType?: string;
        /**
         * The Amazon S3 URI for the file source.
         */
        s3Uri: string;
    }

    /**
     * Details about inference jobs that can be run with models based on this model package.
     */
    export interface ModelPackageInferenceSpecification {
        /**
         * The Amazon ECR registry path of the Docker image that contains the inference code.
         */
        containers: outputs.sagemaker.ModelPackageContainerDefinition[];
        /**
         * The supported MIME types for the input data.
         */
        supportedContentTypes: string[];
        /**
         * A list of the instance types that are used to generate inferences in real-time
         */
        supportedRealtimeInferenceInstanceTypes?: string[];
        /**
         * The supported MIME types for the output data.
         */
        supportedResponseMimeTypes: string[];
        /**
         * A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
         */
        supportedTransformInstanceTypes?: string[];
    }

    /**
     * Metadata properties of the tracking entity, trial, or trial component.
     */
    export interface ModelPackageMetadataProperties {
        /**
         * The commit ID.
         */
        commitId?: string;
        /**
         * The entity this entity was generated by.
         */
        generatedBy?: string;
        /**
         * The project ID metadata.
         */
        projectId?: string;
        /**
         * The repository metadata.
         */
        repository?: string;
    }

    /**
     * Represents a Metric Source Object.
     */
    export interface ModelPackageMetricsSource {
        /**
         * The digest of the metric source.
         */
        contentDigest?: string;
        /**
         * The type of content stored in the metric source.
         */
        contentType: string;
        /**
         * The Amazon S3 URI for the metric source.
         */
        s3Uri: string;
    }

    /**
     * Metrics that measure the quality of the input data for a model.
     */
    export interface ModelPackageModelDataQuality {
        /**
         * Data quality constraints for a model.
         */
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
        /**
         * Data quality statistics for a model.
         */
        statistics?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * A structure that contains model metrics reports.
     */
    export interface ModelPackageModelMetrics {
        /**
         * Metrics that measure bias in a model.
         */
        bias?: outputs.sagemaker.ModelPackageBias;
        /**
         * Metrics that help explain a model.
         */
        explainability?: outputs.sagemaker.ModelPackageExplainability;
        /**
         * Metrics that measure the quality of the input data for a model.
         */
        modelDataQuality?: outputs.sagemaker.ModelPackageModelDataQuality;
        /**
         * Metrics that measure the quality of a model.
         */
        modelQuality?: outputs.sagemaker.ModelPackageModelQuality;
    }

    /**
     * Metrics that measure the quality of a model.
     */
    export interface ModelPackageModelQuality {
        /**
         * Model quality constraints.
         */
        constraints?: outputs.sagemaker.ModelPackageMetricsSource;
        /**
         * Model quality statistics.
         */
        statistics?: outputs.sagemaker.ModelPackageMetricsSource;
    }

    /**
     * Describes the S3 data source.
     */
    export interface ModelPackageS3DataSource {
        /**
         * The S3 Data Source Type
         */
        s3DataType: enums.sagemaker.ModelPackageS3DataSourceS3DataType;
        /**
         * Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest.
         */
        s3Uri: string;
    }

    /**
     * Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
     */
    export interface ModelPackageSourceAlgorithm {
        /**
         * The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your Amazon SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
         */
        algorithmName: string;
        /**
         * The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
         */
        modelDataUrl?: string;
    }

    /**
     * Details about the algorithm that was used to create the model package.
     */
    export interface ModelPackageSourceAlgorithmSpecification {
        /**
         * A list of algorithms that were used to create a model package.
         */
        sourceAlgorithms: outputs.sagemaker.ModelPackageSourceAlgorithm[];
    }

    /**
     * Details about the current status of the model package.
     */
    export interface ModelPackageStatusDetails {
        /**
         * The validation status of the model package.
         */
        validationStatuses?: outputs.sagemaker.ModelPackageStatusItem[];
    }

    /**
     * Represents the overall status of a model package.
     */
    export interface ModelPackageStatusItem {
        /**
         * If the overall status is Failed, the reason for the failure.
         */
        failureReason?: string;
        /**
         * The name of the model package for which the overall status is being reported.
         */
        name: string;
        /**
         * The current status.
         */
        status: enums.sagemaker.ModelPackageStatusItemStatus;
    }

    /**
     * Describes the input source of a transform job and the way the transform job consumes it.
     */
    export interface ModelPackageTransformInput {
        /**
         * If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
         */
        compressionType?: enums.sagemaker.ModelPackageTransformInputCompressionType;
        /**
         * The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
         */
        contentType?: string;
        /**
         * Describes the location of the channel data, which is, the S3 location of the input data that the model can consume.
         */
        dataSource: outputs.sagemaker.ModelPackageDataSource;
        /**
         * The method to use to split the transform job's data files into smaller batches. 
         */
        splitType?: enums.sagemaker.ModelPackageTransformInputSplitType;
    }

    /**
     * Defines the input needed to run a transform job using the inference specification specified in the algorithm.
     */
    export interface ModelPackageTransformJobDefinition {
        /**
         * A string that determines the number of records included in a single mini-batch.
         */
        batchStrategy?: enums.sagemaker.ModelPackageTransformJobDefinitionBatchStrategy;
        /**
         * The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
         */
        environment?: outputs.sagemaker.ModelPackageEnvironment;
        /**
         * The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
         */
        maxConcurrentTransforms?: number;
        /**
         * The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
         */
        maxPayloadInMb?: number;
        /**
         * A description of the input source and the way the transform job consumes it.
         */
        transformInput: outputs.sagemaker.ModelPackageTransformInput;
        /**
         * Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
         */
        transformOutput: outputs.sagemaker.ModelPackageTransformOutput;
        /**
         * Identifies the ML compute instances for the transform job.
         */
        transformResources: outputs.sagemaker.ModelPackageTransformResources;
    }

    /**
     * Describes the results of a transform job.
     */
    export interface ModelPackageTransformOutput {
        /**
         * The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
         */
        accept?: string;
        /**
         * Defines how to assemble the results of the transform job as a single S3 object.
         */
        assembleWith?: enums.sagemaker.ModelPackageTransformOutputAssembleWith;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job.
         */
        s3OutputPath: string;
    }

    /**
     * Describes the resources, including ML instance types and ML instance count, to use for transform job.
     */
    export interface ModelPackageTransformResources {
        /**
         * The number of ML compute instances to use in the transform job. For distributed transform jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the transform job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job.
         */
        volumeKmsKeyId?: string;
    }

    /**
     * Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.
     */
    export interface ModelPackageValidationProfile {
        /**
         * The name of the profile for the model package.
         */
        profileName: string;
        /**
         * The `TransformJobDefinition` object that describes the transform job used for the validation of the model package.
         */
        transformJobDefinition: outputs.sagemaker.ModelPackageTransformJobDefinition;
    }

    /**
     * Specifies configurations for one or more transform jobs that Amazon SageMaker runs to test the model package.
     */
    export interface ModelPackageValidationSpecification {
        /**
         * An array of `ModelPackageValidationProfile` objects, each of which specifies a batch transform job that SageMaker runs to validate your model package.
         */
        validationProfiles: outputs.sagemaker.ModelPackageValidationProfile[];
        /**
         * The IAM roles to be used for the validation of the model package.
         */
        validationRole: string;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface ModelQualityJobDefinitionBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        /**
         * The dataset format for your batch transform job.
         */
        datasetFormat: outputs.sagemaker.ModelQualityJobDefinitionDatasetFormat;
        /**
         * Monitoring end time offset, e.g. PT0H
         */
        endTimeOffset?: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        /**
         * The threshold for the class probability to be evaluated as a positive result.
         */
        probabilityThresholdAttribute?: number;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelQualityJobDefinitionBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelQualityJobDefinitionBatchTransformInputS3InputMode;
        /**
         * Monitoring start time offset, e.g. -PT1H
         */
        startTimeOffset?: string;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface ModelQualityJobDefinitionClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface ModelQualityJobDefinitionConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface ModelQualityJobDefinitionCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface ModelQualityJobDefinitionDatasetFormat {
        csv?: outputs.sagemaker.ModelQualityJobDefinitionCsv;
        json?: outputs.sagemaker.ModelQualityJobDefinitionJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface ModelQualityJobDefinitionEndpointInput {
        /**
         * Monitoring end time offset, e.g. PT0H
         */
        endTimeOffset?: string;
        /**
         * An endpoint in customer's account which has enabled `DataCaptureConfig` enabled.
         */
        endpointName: string;
        /**
         * Index or JSONpath to locate predicted label(s)
         */
        inferenceAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Index or JSONpath to locate probabilities
         */
        probabilityAttribute?: string;
        /**
         * The threshold for the class probability to be evaluated as a positive result.
         */
        probabilityThresholdAttribute?: number;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.ModelQualityJobDefinitionEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.ModelQualityJobDefinitionEndpointInputS3InputMode;
        /**
         * Monitoring start time offset, e.g. -PT1H
         */
        startTimeOffset?: string;
    }

    /**
     * The Json format
     */
    export interface ModelQualityJobDefinitionJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface ModelQualityJobDefinitionModelQualityAppSpecification {
        /**
         * An array of arguments for the container used to run the monitoring job.
         */
        containerArguments?: string[];
        /**
         * Specifies the entrypoint for a container used to run the monitoring job.
         */
        containerEntrypoint?: string[];
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
        /**
         * An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
         */
        postAnalyticsProcessorSourceUri?: string;
        /**
         * The machine learning problem type of the model that the monitoring job monitors.
         */
        problemType: enums.sagemaker.ModelQualityJobDefinitionProblemType;
        /**
         * An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
         */
        recordPreprocessorSourceUri?: string;
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface ModelQualityJobDefinitionModelQualityBaselineConfig {
        /**
         * The name of the job that performs baselining for the monitoring job.
         */
        baseliningJobName?: string;
        /**
         * The constraints resource for a monitoring job.
         */
        constraintsResource?: outputs.sagemaker.ModelQualityJobDefinitionConstraintsResource;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface ModelQualityJobDefinitionModelQualityJobInput {
        /**
         * Input object for the batch transform job.
         */
        batchTransformInput?: outputs.sagemaker.ModelQualityJobDefinitionBatchTransformInput;
        /**
         * Input object for the endpoint
         */
        endpointInput?: outputs.sagemaker.ModelQualityJobDefinitionEndpointInput;
        /**
         * The ground truth label provided for the model.
         */
        groundTruthS3Input: outputs.sagemaker.ModelQualityJobDefinitionMonitoringGroundTruthS3Input;
    }

    /**
     * Ground truth input provided in S3 
     */
    export interface ModelQualityJobDefinitionMonitoringGroundTruthS3Input {
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface ModelQualityJobDefinitionMonitoringOutput {
        /**
         * The Amazon S3 storage location where the results of a monitoring job are saved.
         */
        s3Output: outputs.sagemaker.ModelQualityJobDefinitionS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface ModelQualityJobDefinitionMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.ModelQualityJobDefinitionMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface ModelQualityJobDefinitionMonitoringResources {
        /**
         * The configuration for the cluster resources used to run the processing job.
         */
        clusterConfig: outputs.sagemaker.ModelQualityJobDefinitionClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface ModelQualityJobDefinitionNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        /**
         * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
         */
        vpcConfig?: outputs.sagemaker.ModelQualityJobDefinitionVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface ModelQualityJobDefinitionS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.ModelQualityJobDefinitionS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface ModelQualityJobDefinitionStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface ModelQualityJobDefinitionVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     */
    export interface MonitoringScheduleBaselineConfig {
        /**
         * The Amazon S3 URI for the constraints resource.
         */
        constraintsResource?: outputs.sagemaker.MonitoringScheduleConstraintsResource;
        /**
         * The baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
         */
        statisticsResource?: outputs.sagemaker.MonitoringScheduleStatisticsResource;
    }

    /**
     * The batch transform input for a monitoring job.
     */
    export interface MonitoringScheduleBatchTransformInput {
        /**
         * A URI that identifies the Amazon S3 storage location where Batch Transform Job captures data.
         */
        dataCapturedDestinationS3Uri: string;
        datasetFormat: outputs.sagemaker.MonitoringScheduleDatasetFormat;
        /**
         * Indexes or names of the features to be excluded from analysis
         */
        excludeFeaturesAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.MonitoringScheduleBatchTransformInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.MonitoringScheduleBatchTransformInputS3InputMode;
    }

    /**
     * Configuration for the cluster used to run model monitoring jobs.
     */
    export interface MonitoringScheduleClusterConfig {
        /**
         * The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
         */
        instanceCount: number;
        /**
         * The ML compute instance type for the processing job.
         */
        instanceType: string;
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
         */
        volumeKmsKeyId?: string;
        /**
         * The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
         */
        volumeSizeInGb: number;
    }

    /**
     * The configuration object that specifies the monitoring schedule and defines the monitoring job.
     */
    export interface MonitoringScheduleConfig {
        /**
         * Defines the monitoring job.
         */
        monitoringJobDefinition?: outputs.sagemaker.MonitoringScheduleMonitoringJobDefinition;
        /**
         * Name of the job definition
         */
        monitoringJobDefinitionName?: string;
        /**
         * The type of the monitoring job definition to schedule.
         */
        monitoringType?: enums.sagemaker.MonitoringScheduleMonitoringType;
        /**
         * Configures the monitoring schedule.
         */
        scheduleConfig?: outputs.sagemaker.MonitoringScheduleScheduleConfig;
    }

    /**
     * The baseline constraints resource for a monitoring job.
     */
    export interface MonitoringScheduleConstraintsResource {
        /**
         * The Amazon S3 URI for baseline constraint file in Amazon S3 that the current monitoring job should validated against.
         */
        s3Uri?: string;
    }

    /**
     * The CSV format
     */
    export interface MonitoringScheduleCsv {
        /**
         * A boolean flag indicating if given CSV has header
         */
        header?: boolean;
    }

    /**
     * The dataset format of the data to monitor
     */
    export interface MonitoringScheduleDatasetFormat {
        csv?: outputs.sagemaker.MonitoringScheduleCsv;
        json?: outputs.sagemaker.MonitoringScheduleJson;
        parquet?: boolean;
    }

    /**
     * The endpoint for a monitoring job.
     */
    export interface MonitoringScheduleEndpointInput {
        endpointName: string;
        /**
         * Indexes or names of the features to be excluded from analysis
         */
        excludeFeaturesAttribute?: string;
        /**
         * Path to the filesystem where the endpoint data is available to the container.
         */
        localPath: string;
        /**
         * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defauts to FullyReplicated
         */
        s3DataDistributionType?: enums.sagemaker.MonitoringScheduleEndpointInputS3DataDistributionType;
        /**
         * Whether the Pipe or File is used as the input mode for transfering data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
         */
        s3InputMode?: enums.sagemaker.MonitoringScheduleEndpointInputS3InputMode;
    }

    /**
     * The Json format
     */
    export interface MonitoringScheduleJson {
        /**
         * A boolean flag indicating if it is JSON line format
         */
        line?: boolean;
    }

    /**
     * Container image configuration object for the monitoring job.
     */
    export interface MonitoringScheduleMonitoringAppSpecification {
        /**
         * An array of arguments for the container used to run the monitoring job.
         */
        containerArguments?: string[];
        /**
         * Specifies the entrypoint for a container used to run the monitoring job.
         */
        containerEntrypoint?: string[];
        /**
         * The container image to be run by the monitoring job.
         */
        imageUri: string;
        /**
         * An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
         */
        postAnalyticsProcessorSourceUri?: string;
        /**
         * An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers
         */
        recordPreprocessorSourceUri?: string;
    }

    /**
     * Summary of information about monitoring job
     */
    export interface MonitoringScheduleMonitoringExecutionSummary {
        /**
         * The time at which the monitoring job was created.
         */
        creationTime: string;
        /**
         * The name of the endpoint used to run the monitoring job.
         */
        endpointName?: string;
        /**
         * Contains the reason a monitoring job failed, if it failed.
         */
        failureReason?: string;
        /**
         * A timestamp that indicates the last time the monitoring job was modified.
         */
        lastModifiedTime: string;
        /**
         * The status of the monitoring job.
         */
        monitoringExecutionStatus: enums.sagemaker.MonitoringScheduleMonitoringExecutionSummaryMonitoringExecutionStatus;
        /**
         * The name of the monitoring schedule.
         */
        monitoringScheduleName: string;
        /**
         * The Amazon Resource Name (ARN) of the monitoring job.
         */
        processingJobArn?: string;
        /**
         * The time the monitoring job was scheduled.
         */
        scheduledTime: string;
    }

    /**
     * The inputs for a monitoring job.
     */
    export interface MonitoringScheduleMonitoringInput {
        batchTransformInput?: outputs.sagemaker.MonitoringScheduleBatchTransformInput;
        endpointInput?: outputs.sagemaker.MonitoringScheduleEndpointInput;
    }

    /**
     * Defines the monitoring job.
     */
    export interface MonitoringScheduleMonitoringJobDefinition {
        /**
         * Baseline configuration used to validate that the data conforms to the specified constraints and statistics
         */
        baselineConfig?: outputs.sagemaker.MonitoringScheduleBaselineConfig;
        /**
         * Sets the environment variables in the Docker container
         */
        environment?: any;
        /**
         * Configures the monitoring job to run a specified Docker container image.
         */
        monitoringAppSpecification: outputs.sagemaker.MonitoringScheduleMonitoringAppSpecification;
        /**
         * The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker Endpoint.
         */
        monitoringInputs: outputs.sagemaker.MonitoringScheduleMonitoringInput[];
        /**
         * The array of outputs from the monitoring job to be uploaded to Amazon S3.
         */
        monitoringOutputConfig: outputs.sagemaker.MonitoringScheduleMonitoringOutputConfig;
        /**
         * Identifies the resources, ML compute instances, and ML storage volumes to deploy for a monitoring job. In distributed processing, you specify more than one instance.
         */
        monitoringResources: outputs.sagemaker.MonitoringScheduleMonitoringResources;
        /**
         * Specifies networking options for an monitoring job.
         */
        networkConfig?: outputs.sagemaker.MonitoringScheduleNetworkConfig;
        /**
         * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
         */
        roleArn: string;
        /**
         * Specifies a time limit for how long the monitoring job is allowed to run.
         */
        stoppingCondition?: outputs.sagemaker.MonitoringScheduleStoppingCondition;
    }

    /**
     * The output object for a monitoring job.
     */
    export interface MonitoringScheduleMonitoringOutput {
        /**
         * The Amazon S3 storage location where the results of a monitoring job are saved.
         */
        s3Output: outputs.sagemaker.MonitoringScheduleS3Output;
    }

    /**
     * The output configuration for monitoring jobs.
     */
    export interface MonitoringScheduleMonitoringOutputConfig {
        /**
         * The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
         */
        kmsKeyId?: string;
        /**
         * Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
         */
        monitoringOutputs: outputs.sagemaker.MonitoringScheduleMonitoringOutput[];
    }

    /**
     * Identifies the resources to deploy for a monitoring job.
     */
    export interface MonitoringScheduleMonitoringResources {
        /**
         * The configuration for the cluster resources used to run the processing job.
         */
        clusterConfig: outputs.sagemaker.MonitoringScheduleClusterConfig;
    }

    /**
     * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
     */
    export interface MonitoringScheduleNetworkConfig {
        /**
         * Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
         */
        enableInterContainerTrafficEncryption?: boolean;
        /**
         * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
         */
        enableNetworkIsolation?: boolean;
        /**
         * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html) .
         */
        vpcConfig?: outputs.sagemaker.MonitoringScheduleVpcConfig;
    }

    /**
     * Information about where and how to store the results of a monitoring job.
     */
    export interface MonitoringScheduleS3Output {
        /**
         * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
         */
        localPath: string;
        /**
         * Whether to upload the results of the monitoring job continuously or after the job completes.
         */
        s3UploadMode?: enums.sagemaker.MonitoringScheduleS3OutputS3UploadMode;
        /**
         * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
         */
        s3Uri: string;
    }

    /**
     * Configuration details about the monitoring schedule.
     */
    export interface MonitoringScheduleScheduleConfig {
        /**
         * Data Analysis end time, e.g. PT0H
         */
        dataAnalysisEndTime?: string;
        /**
         * Data Analysis start time, e.g. -PT1H
         */
        dataAnalysisStartTime?: string;
        /**
         * A cron expression or 'NOW' that describes details about the monitoring schedule.
         */
        scheduleExpression: string;
    }

    /**
     * The baseline statistics resource for a monitoring job.
     */
    export interface MonitoringScheduleStatisticsResource {
        /**
         * The Amazon S3 URI for the baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
         */
        s3Uri?: string;
    }

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     */
    export interface MonitoringScheduleStoppingCondition {
        /**
         * The maximum runtime allowed in seconds.
         */
        maxRuntimeInSeconds: number;
    }

    /**
     * Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.
     */
    export interface MonitoringScheduleVpcConfig {
        /**
         * The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
         */
        securityGroupIds: string[];
        /**
         * The ID of the subnets in the VPC to which you want to connect to your monitoring jobs.
         */
        subnets: string[];
    }

    /**
     * The configuration of an `OfflineStore` .
     */
    export interface OfflineStoreConfigProperties {
        /**
         * The meta data of the Glue table that is autogenerated when an `OfflineStore` is created.
         */
        dataCatalogConfig?: outputs.sagemaker.FeatureGroupDataCatalogConfig;
        /**
         * Set to `True` to disable the automatic creation of an AWS Glue table when configuring an `OfflineStore` . If set to `False` , Feature Store will name the `OfflineStore` Glue table following [Athena's naming recommendations](https://docs.aws.amazon.com/athena/latest/ug/tables-databases-columns-names.html) .
         *
         * The default value is `False` .
         */
        disableGlueTableCreation?: boolean;
        /**
         * The Amazon Simple Storage (Amazon S3) location of `OfflineStore` .
         */
        s3StorageConfig: outputs.sagemaker.FeatureGroupS3StorageConfig;
        /**
         * Format for the offline store table. Supported formats are Glue (Default) and [Apache Iceberg](https://docs.aws.amazon.com/https://iceberg.apache.org/) .
         */
        tableFormat?: enums.sagemaker.FeatureGroupTableFormat;
    }

    /**
     * The configuration of an `OnlineStore` .
     */
    export interface OnlineStoreConfigProperties {
        /**
         * Turn `OnlineStore` off by specifying `False` for the `EnableOnlineStore` flag. Turn `OnlineStore` on by specifying `True` for the `EnableOnlineStore` flag.
         *
         * The default value is `False` .
         */
        enableOnlineStore?: boolean;
        /**
         * Use to specify KMS Key ID ( `KMSKeyId` ) for at-rest encryption of your `OnlineStore` .
         */
        securityConfig?: outputs.sagemaker.FeatureGroupOnlineStoreSecurityConfig;
        /**
         * Option for different tiers of low latency storage for real-time data retrieval.
         *
         * - `Standard` : A managed low latency data store for feature groups.
         * - `InMemory` : A managed data store for feature groups that supports very low latency retrieval.
         */
        storageType?: enums.sagemaker.FeatureGroupStorageType;
        /**
         * Time to live duration, where the record is hard deleted after the expiration time is reached; `ExpiresAt` = `EventTime` + `TtlDuration` . For information on HardDelete, see the [DeleteRecord](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html) API in the Amazon SageMaker API Reference guide.
         */
        ttlDuration?: outputs.sagemaker.FeatureGroupTtlDuration;
    }

    /**
     * The parallelism configuration applied to the pipeline.
     */
    export interface ParallelismConfigurationProperties {
        /**
         * Maximum parallel execution steps
         */
        maxParallelExecutionSteps: number;
    }

    /**
     * The definition of the pipeline. This can be either a JSON string or an Amazon S3 location.
     */
    export interface PipelineDefinition0Properties {
        /**
         * A specification that defines the pipeline in JSON format.
         */
        pipelineDefinitionBody: string;
    }

    /**
     * The definition of the pipeline. This can be either a JSON string or an Amazon S3 location.
     */
    export interface PipelineDefinition1Properties {
        pipelineDefinitionS3Location: outputs.sagemaker.PipelineS3Location;
    }

    export interface PipelineS3Location {
        /**
         * The name of the S3 bucket where the PipelineDefinition file is stored.
         */
        bucket: string;
        /**
         * The Amazon S3 ETag (a file checksum) of the PipelineDefinition file. If you don't specify a value, SageMaker skips ETag validation of your PipelineDefinition file.
         */
        eTag?: string;
        /**
         * The file name of the PipelineDefinition file (Amazon S3 object name).
         */
        key: string;
        /**
         * For versioning-enabled buckets, a specific version of the PipelineDefinition file.
         */
        version?: string;
    }

    /**
     * Information about a parameter used to provision a product.
     */
    export interface ProjectProvisioningParameter {
        /**
         * The parameter key.
         */
        key: string;
        /**
         * The parameter value.
         */
        value: string;
    }

    /**
     * Provisioned ServiceCatalog  Details
     */
    export interface ServiceCatalogProvisionedProductDetailsProperties {
        /**
         * The ID of the provisioned product.
         */
        provisionedProductId?: string;
        /**
         * The current status of the product.
         *
         * - `AVAILABLE` - Stable state, ready to perform any operation. The most recent operation succeeded and completed.
         * - `UNDER_CHANGE` - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.
         * - `TAINTED` - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.
         * - `ERROR` - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.
         * - `PLAN_IN_PROGRESS` - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.
         */
        provisionedProductStatusMessage?: string;
    }

    /**
     * Input ServiceCatalog Provisioning Details
     */
    export interface ServiceCatalogProvisioningDetailsProperties {
        /**
         * The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path.
         */
        pathId?: string;
        /**
         * The ID of the product to provision.
         */
        productId: string;
        /**
         * The ID of the provisioning artifact.
         */
        provisioningArtifactId?: string;
        /**
         * Parameters specified by the administrator that are required for provisioning the product.
         */
        provisioningParameters?: outputs.sagemaker.ProjectProvisioningParameter[];
    }

    /**
     * The CodeEditor app settings.
     */
    export interface SpaceCodeEditorAppSettings {
        /**
         * Specifies the ARNs of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
         */
        defaultResourceSpec?: outputs.sagemaker.SpaceResourceSpec;
    }

    export interface SpaceCodeRepository {
        /**
         * A CodeRepository (valid URL) to be used within Jupyter's Git extension.
         */
        repositoryUrl: string;
    }

    export interface SpaceCustomFileSystem {
        efsFileSystem?: outputs.sagemaker.SpaceEfsFileSystem;
    }

    /**
     * A custom SageMaker image.
     */
    export interface SpaceCustomImage {
        /**
         * The Name of the AppImageConfig.
         */
        appImageConfigName: string;
        /**
         * The name of the CustomImage. Must be unique to your account.
         */
        imageName: string;
        /**
         * The version number of the CustomImage.
         */
        imageVersionNumber?: number;
    }

    /**
     * Properties related to the space's Amazon Elastic Block Store volume.
     */
    export interface SpaceEbsStorageSettings {
        /**
         * Size of the Amazon EBS volume in Gb
         */
        ebsVolumeSizeInGb: number;
    }

    export interface SpaceEfsFileSystem {
        fileSystemId: string;
    }

    /**
     * The JupyterServer app settings.
     */
    export interface SpaceJupyterLabAppSettings {
        /**
         * A list of CodeRepositories available for use with JupyterLab apps.
         */
        codeRepositories?: outputs.sagemaker.SpaceCodeRepository[];
        /**
         * Specifies the ARNs of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
         */
        defaultResourceSpec?: outputs.sagemaker.SpaceResourceSpec;
    }

    /**
     * The JupyterServer app settings.
     */
    export interface SpaceJupyterServerAppSettings {
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app. If you use the `LifecycleConfigArns` parameter, then this parameter is also required.
         */
        defaultResourceSpec?: outputs.sagemaker.SpaceResourceSpec;
    }

    /**
     * The kernel gateway app settings.
     */
    export interface SpaceKernelGatewayAppSettings {
        /**
         * A list of custom SageMaker images that are configured to run as a KernelGateway app.
         */
        customImages?: outputs.sagemaker.SpaceCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
         */
        defaultResourceSpec?: outputs.sagemaker.SpaceResourceSpec;
    }

    export interface SpaceOwnershipSettings {
        /**
         * The user profile who is the owner of the space.
         */
        ownerUserProfileName: string;
    }

    export interface SpaceResourceSpec {
        /**
         * The instance type that the image version runs on.
         */
        instanceType?: enums.sagemaker.SpaceResourceSpecInstanceType;
        /**
         * The ARN of the SageMaker image that the image version belongs to.
         */
        sageMakerImageArn?: string;
        /**
         * The ARN of the image version created on the instance.
         */
        sageMakerImageVersionArn?: string;
    }

    /**
     * A collection of settings that apply to spaces of Amazon SageMaker Studio. These settings are specified when the CreateSpace API is called.
     */
    export interface SpaceSettings {
        /**
         * The type of app created within the space.
         */
        appType?: enums.sagemaker.SpaceAppType;
        /**
         * The CodeEditor app settings.
         */
        codeEditorAppSettings?: outputs.sagemaker.SpaceCodeEditorAppSettings;
        /**
         * A file system, created by you, that you assign to a space for an Amazon SageMaker Domain. Permitted users can access this file system in Amazon SageMaker Studio.
         */
        customFileSystems?: outputs.sagemaker.SpaceCustomFileSystem[];
        /**
         * The JupyterLab app settings.
         */
        jupyterLabAppSettings?: outputs.sagemaker.SpaceJupyterLabAppSettings;
        /**
         * The Jupyter server's app settings.
         */
        jupyterServerAppSettings?: outputs.sagemaker.SpaceJupyterServerAppSettings;
        /**
         * The kernel gateway app settings.
         */
        kernelGatewayAppSettings?: outputs.sagemaker.SpaceKernelGatewayAppSettings;
        /**
         * Default storage settings for a space.
         */
        spaceStorageSettings?: outputs.sagemaker.SpaceStorageSettings;
    }

    export interface SpaceSharingSettings {
        /**
         * Specifies the sharing type of the space.
         */
        sharingType: enums.sagemaker.SpaceSharingSettingsSharingType;
    }

    export interface SpaceStorageSettings {
        /**
         * A collection of EBS storage settings for a space.
         */
        ebsStorageSettings?: outputs.sagemaker.SpaceEbsStorageSettings;
    }

    /**
     * The CodeEditor app settings.
     */
    export interface UserProfileCodeEditorAppSettings {
        /**
         * A list of custom images for use for CodeEditor apps.
         */
        customImages?: outputs.sagemaker.UserProfileCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the CodeEditor app.
         */
        defaultResourceSpec?: outputs.sagemaker.UserProfileResourceSpec;
        /**
         * A list of LifecycleConfigArns available for use with CodeEditor apps.
         */
        lifecycleConfigArns?: string[];
    }

    export interface UserProfileCodeRepository {
        /**
         * A CodeRepository (valid URL) to be used within Jupyter's Git extension.
         */
        repositoryUrl: string;
    }

    export interface UserProfileCustomFileSystemConfig {
        /**
         * The settings for a custom Amazon EFS file system.
         */
        efsFileSystemConfig?: outputs.sagemaker.UserProfileEfsFileSystemConfig;
    }

    /**
     * A custom SageMaker image.
     */
    export interface UserProfileCustomImage {
        /**
         * The Name of the AppImageConfig.
         */
        appImageConfigName: string;
        /**
         * The name of the CustomImage. Must be unique to your account.
         */
        imageName: string;
        /**
         * The version number of the CustomImage.
         */
        imageVersionNumber?: number;
    }

    export interface UserProfileCustomPosixUserConfig {
        /**
         * The POSIX group ID.
         */
        gid: number;
        /**
         * The POSIX user ID.
         */
        uid: number;
    }

    /**
     * Properties related to the Amazon Elastic Block Store volume.
     */
    export interface UserProfileDefaultEbsStorageSettings {
        /**
         * Default size of the Amazon EBS volume in Gb
         */
        defaultEbsVolumeSizeInGb: number;
        /**
         * Maximum size of the Amazon EBS volume in Gb. Must be greater than or equal to the DefaultEbsVolumeSizeInGb.
         */
        maximumEbsVolumeSizeInGb: number;
    }

    /**
     * Default storage settings for a space.
     */
    export interface UserProfileDefaultSpaceStorageSettings {
        /**
         * The default EBS storage settings for a space.
         */
        defaultEbsStorageSettings?: outputs.sagemaker.UserProfileDefaultEbsStorageSettings;
    }

    export interface UserProfileEfsFileSystemConfig {
        /**
         * The ID of your Amazon EFS file system.
         */
        fileSystemId: string;
        /**
         * The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
         */
        fileSystemPath?: string;
    }

    /**
     * The JupyterLab app settings.
     */
    export interface UserProfileJupyterLabAppSettings {
        /**
         * A list of CodeRepositories available for use with JupyterLab apps.
         */
        codeRepositories?: outputs.sagemaker.UserProfileCodeRepository[];
        /**
         * A list of custom images available for use for JupyterLab apps
         */
        customImages?: outputs.sagemaker.UserProfileCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterLab app.
         */
        defaultResourceSpec?: outputs.sagemaker.UserProfileResourceSpec;
        /**
         * A list of LifecycleConfigArns available for use with JupyterLab apps.
         */
        lifecycleConfigArns?: string[];
    }

    /**
     * The JupyterServer app settings.
     */
    export interface UserProfileJupyterServerAppSettings {
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app.
         */
        defaultResourceSpec?: outputs.sagemaker.UserProfileResourceSpec;
    }

    /**
     * The kernel gateway app settings.
     */
    export interface UserProfileKernelGatewayAppSettings {
        /**
         * A list of custom SageMaker images that are configured to run as a KernelGateway app.
         */
        customImages?: outputs.sagemaker.UserProfileCustomImage[];
        /**
         * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
         */
        defaultResourceSpec?: outputs.sagemaker.UserProfileResourceSpec;
    }

    /**
     * A collection of settings that configure user interaction with the RStudioServerPro app.
     */
    export interface UserProfileRStudioServerProAppSettings {
        /**
         * Indicates whether the current user has access to the RStudioServerPro app.
         */
        accessStatus?: enums.sagemaker.UserProfileRStudioServerProAppSettingsAccessStatus;
        /**
         * The level of permissions that the user has within the RStudioServerPro app. This value defaults to User. The Admin value allows the user access to the RStudio Administrative Dashboard.
         */
        userGroup?: enums.sagemaker.UserProfileRStudioServerProAppSettingsUserGroup;
    }

    export interface UserProfileResourceSpec {
        /**
         * The instance type that the image version runs on.
         */
        instanceType?: enums.sagemaker.UserProfileResourceSpecInstanceType;
        /**
         * The ARN of the SageMaker image that the image version belongs to.
         */
        sageMakerImageArn?: string;
        /**
         * The ARN of the image version created on the instance.
         */
        sageMakerImageVersionArn?: string;
    }

    /**
     * Specifies options when sharing an Amazon SageMaker Studio notebook. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called.
     */
    export interface UserProfileSharingSettings {
        /**
         * Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
         */
        notebookOutputOption?: enums.sagemaker.UserProfileSharingSettingsNotebookOutputOption;
        /**
         * When NotebookOutputOption is Allowed, the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
         */
        s3KmsKeyId?: string;
        /**
         * When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
         */
        s3OutputPath?: string;
    }

    /**
     * A collection of settings that apply to users of Amazon SageMaker Studio. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called.
     */
    export interface UserProfileUserSettings {
        /**
         * The Code Editor application settings.
         */
        codeEditorAppSettings?: outputs.sagemaker.UserProfileCodeEditorAppSettings;
        /**
         * The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio.
         */
        customFileSystemConfigs?: outputs.sagemaker.UserProfileCustomFileSystemConfig[];
        /**
         * Details about the POSIX identity that is used for file system operations.
         */
        customPosixUserConfig?: outputs.sagemaker.UserProfileCustomPosixUserConfig;
        /**
         * Defines which Amazon SageMaker application users are directed to by default.
         */
        defaultLandingUri?: string;
        /**
         * The user profile Amazon Resource Name (ARN).
         */
        executionRole?: string;
        /**
         * The settings for the JupyterLab application.
         */
        jupyterLabAppSettings?: outputs.sagemaker.UserProfileJupyterLabAppSettings;
        /**
         * The Jupyter server's app settings.
         */
        jupyterServerAppSettings?: outputs.sagemaker.UserProfileJupyterServerAppSettings;
        /**
         * The kernel gateway app settings.
         */
        kernelGatewayAppSettings?: outputs.sagemaker.UserProfileKernelGatewayAppSettings;
        /**
         * A collection of settings that configure user interaction with the `RStudioServerPro` app.
         */
        rStudioServerProAppSettings?: outputs.sagemaker.UserProfileRStudioServerProAppSettings;
        /**
         * The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication.
         */
        securityGroups?: string[];
        /**
         * The sharing settings.
         */
        sharingSettings?: outputs.sagemaker.UserProfileSharingSettings;
        /**
         * The storage settings for a space.
         */
        spaceStorageSettings?: outputs.sagemaker.UserProfileDefaultSpaceStorageSettings;
        /**
         * Indicates whether the Studio experience is available to users. If not, users cannot access Studio.
         */
        studioWebPortal?: enums.sagemaker.UserProfileUserSettingsStudioWebPortal;
    }

}

export namespace scheduler {
    /**
     * This structure specifies the VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
     */
    export interface ScheduleAwsVpcConfiguration {
        /**
         * Specifies whether the task's elastic network interface receives a public IP address. You can specify `ENABLED` only when `LaunchType` in `EcsParameters` is set to `FARGATE` .
         */
        assignPublicIp?: enums.scheduler.ScheduleAssignPublicIp;
        /**
         * Specifies the security groups associated with the task. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.
         */
        securityGroups?: string[];
        /**
         * Specifies the subnets associated with the task. These subnets must all be in the same VPC. You can specify as many as 16 subnets.
         */
        subnets: string[];
    }

    /**
     * The details of a capacity provider strategy.
     */
    export interface ScheduleCapacityProviderStrategyItem {
        /**
         * The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
         */
        base?: number;
        /**
         * The short name of the capacity provider.
         */
        capacityProvider: string;
        /**
         * The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
         */
        weight?: number;
    }

    /**
     * A DeadLetterConfig object that contains information about a dead-letter queue configuration.
     */
    export interface ScheduleDeadLetterConfig {
        /**
         * The ARN of the SQS queue specified as the target for the dead-letter queue.
         */
        arn?: string;
    }

    /**
     * The custom parameters to be used when the target is an Amazon ECS task.
     */
    export interface ScheduleEcsParameters {
        /**
         * The capacity provider strategy to use for the task.
         */
        capacityProviderStrategy?: outputs.scheduler.ScheduleCapacityProviderStrategyItem[];
        /**
         * Specifies whether to enable Amazon ECS managed tags for the task. For more information, see Tagging Your Amazon ECS Resources in the Amazon Elastic Container Service Developer Guide.
         */
        enableEcsManagedTags?: boolean;
        /**
         * Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
         */
        enableExecuteCommand?: boolean;
        /**
         * Specifies an ECS task group for the task. The maximum length is 255 characters.
         */
        group?: string;
        /**
         * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. The `FARGATE` value is supported only in the Regions where Fargate with Amazon ECS is supported. For more information, see [AWS Fargate on Amazon ECS](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html) in the *Amazon ECS Developer Guide* .
         */
        launchType?: enums.scheduler.ScheduleLaunchType;
        /**
         * This structure specifies the network configuration for an ECS task.
         */
        networkConfiguration?: outputs.scheduler.ScheduleNetworkConfiguration;
        /**
         * An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime).
         */
        placementConstraints?: outputs.scheduler.SchedulePlacementConstraint[];
        /**
         * The placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
         */
        placementStrategy?: outputs.scheduler.SchedulePlacementStrategy[];
        /**
         * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0.
         */
        platformVersion?: string;
        /**
         * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the Amazon ECS [`TagResource`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
         */
        propagateTags?: enums.scheduler.SchedulePropagateTags;
        /**
         * The reference ID to use for the task.
         */
        referenceId?: string;
        /**
         * The metadata that you apply to the task to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. To learn more, see RunTask in the Amazon ECS API Reference.
         */
        tags?: {[key: string]: string}[];
        /**
         * The number of tasks to create based on TaskDefinition. The default is 1.
         */
        taskCount?: number;
        /**
         * The ARN of the task definition to use if the event target is an Amazon ECS task.
         */
        taskDefinitionArn: string;
    }

    /**
     * EventBridge PutEvent predefined target type.
     */
    export interface ScheduleEventBridgeParameters {
        /**
         * Free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.
         */
        detailType: string;
        /**
         * The source of the event.
         */
        source: string;
    }

    /**
     * Flexible time window allows configuration of a window within which a schedule can be invoked
     */
    export interface ScheduleFlexibleTimeWindow {
        /**
         * The maximum time window during which a schedule can be invoked.
         */
        maximumWindowInMinutes?: number;
        /**
         * Determines whether the schedule is invoked within a flexible time window. You must use quotation marks when you specify this value in your JSON or YAML template.
         *
         * *Allowed Values* : `"OFF"` | `"FLEXIBLE"`
         */
        mode: enums.scheduler.ScheduleFlexibleTimeWindowMode;
    }

    /**
     * The custom parameter you can use to control the shard to which EventBridge Scheduler sends the event.
     */
    export interface ScheduleKinesisParameters {
        /**
         * The custom parameter used as the Kinesis partition key. For more information, see Amazon Kinesis Streams Key Concepts in the Amazon Kinesis Streams Developer Guide.
         */
        partitionKey: string;
    }

    /**
     * This structure specifies the network configuration for an ECS task.
     */
    export interface ScheduleNetworkConfiguration {
        /**
         * Specifies the Amazon VPC subnets and security groups for the task, and whether a public IP address is to be used. This structure is relevant only for ECS tasks that use the awsvpc network mode.
         */
        awsvpcConfiguration?: outputs.scheduler.ScheduleAwsVpcConfiguration;
    }

    /**
     * An object representing a constraint on task placement.
     */
    export interface SchedulePlacementConstraint {
        /**
         * A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is distinctInstance. To learn more, see Cluster Query Language in the Amazon Elastic Container Service Developer Guide.
         */
        expression?: string;
        /**
         * The type of constraint. Use `distinctInstance` to ensure that each task in a particular group is running on a different container instance. Use `memberOf` to restrict the selection to a group of valid candidates.
         */
        type?: enums.scheduler.SchedulePlacementConstraintType;
    }

    /**
     * The task placement strategy for a task or service.
     */
    export interface SchedulePlacementStrategy {
        /**
         * The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.
         */
        field?: string;
        /**
         * The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task).
         */
        type?: enums.scheduler.SchedulePlacementStrategyType;
    }

    /**
     * A RetryPolicy object that includes information about the retry policy settings.
     */
    export interface ScheduleRetryPolicy {
        /**
         * The maximum amount of time, in seconds, to continue to make retry attempts.
         */
        maximumEventAgeInSeconds?: number;
        /**
         * The maximum number of retry attempts to make before the request fails. Retry attempts with exponential backoff continue until either the maximum number of attempts is made or until the duration of the MaximumEventAgeInSeconds is reached.
         */
        maximumRetryAttempts?: number;
    }

    /**
     * Name/Value pair of a parameter to start execution of a SageMaker Model Building Pipeline.
     */
    export interface ScheduleSageMakerPipelineParameter {
        /**
         * Name of parameter to start execution of a SageMaker Model Building Pipeline.
         */
        name: string;
        /**
         * Value of parameter to start execution of a SageMaker Model Building Pipeline.
         */
        value: string;
    }

    /**
     * These are custom parameters to use when the target is a SageMaker Model Building Pipeline that starts based on AWS EventBridge Scheduler schedules.
     */
    export interface ScheduleSageMakerPipelineParameters {
        /**
         * List of Parameter names and values for SageMaker Model Building Pipeline execution.
         */
        pipelineParameterList?: outputs.scheduler.ScheduleSageMakerPipelineParameter[];
    }

    /**
     * Contains the message group ID to use when the target is a FIFO queue. If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication enabled.
     */
    export interface ScheduleSqsParameters {
        /**
         * The FIFO message group ID to use as the target.
         */
        messageGroupId?: string;
    }

    /**
     * The schedule target.
     */
    export interface ScheduleTarget {
        /**
         * The Amazon Resource Name (ARN) of the target.
         */
        arn: string;
        /**
         * An object that contains information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue.
         */
        deadLetterConfig?: outputs.scheduler.ScheduleDeadLetterConfig;
        /**
         * The templated target type for the Amazon ECS [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) API operation.
         */
        ecsParameters?: outputs.scheduler.ScheduleEcsParameters;
        /**
         * The templated target type for the EventBridge [`PutEvents`](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) API operation.
         */
        eventBridgeParameters?: outputs.scheduler.ScheduleEventBridgeParameters;
        /**
         * The text, or well-formed JSON, passed to the target. If you are configuring a templated Lambda, AWS Step Functions, or Amazon EventBridge target, the input must be a well-formed JSON. For all other target types, a JSON is not required. If you do not specify anything for this field, EventBridge Scheduler delivers a default notification to the target.
         */
        input?: string;
        /**
         * The templated target type for the Amazon Kinesis [`PutRecord`](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html) API operation.
         */
        kinesisParameters?: outputs.scheduler.ScheduleKinesisParameters;
        /**
         * A `RetryPolicy` object that includes information about the retry policy settings, including the maximum age of an event, and the maximum number of times EventBridge Scheduler will try to deliver the event to a target.
         */
        retryPolicy?: outputs.scheduler.ScheduleRetryPolicy;
        /**
         * The Amazon Resource Name (ARN) of the IAM role to be used for this target when the schedule is triggered.
         */
        roleArn: string;
        /**
         * The templated target type for the Amazon SageMaker [`StartPipelineExecution`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StartPipelineExecution.html) API operation.
         */
        sageMakerPipelineParameters?: outputs.scheduler.ScheduleSageMakerPipelineParameters;
        /**
         * The templated target type for the Amazon SQS [`SendMessage`](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html) API operation. Contains the message group ID to use when the target is a FIFO queue. If you specify an Amazon SQS FIFO queue as a target, the queue must have content-based deduplication enabled. For more information, see [Using the Amazon SQS message deduplication ID](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html) in the *Amazon SQS Developer Guide* .
         */
        sqsParameters?: outputs.scheduler.ScheduleSqsParameters;
    }

}

export namespace secretsmanager {
    /**
     * Generates a random password. We recommend that you specify the maximum length and include every character type that the system you are generating a password for can support.
     *   *Required permissions:* ``secretsmanager:GetRandomPassword``. For more information, see [IAM policy actions for Secrets Manager](https://docs.aws.amazon.com/service-authorization/latest/reference/list_awssecretsmanager.html#awssecretsmanager-actions-as-permissions) and [Authentication and access control in Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html).
     */
    export interface SecretGenerateSecretString {
        /**
         * A string of the characters that you don't want in the password.
         */
        excludeCharacters?: string;
        /**
         * Specifies whether to exclude lowercase letters from the password. If you don't include this switch, the password can contain lowercase letters.
         */
        excludeLowercase?: boolean;
        /**
         * Specifies whether to exclude numbers from the password. If you don't include this switch, the password can contain numbers.
         */
        excludeNumbers?: boolean;
        /**
         * Specifies whether to exclude the following punctuation characters from the password: ``! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~``. If you don't include this switch, the password can contain punctuation.
         */
        excludePunctuation?: boolean;
        /**
         * Specifies whether to exclude uppercase letters from the password. If you don't include this switch, the password can contain uppercase letters.
         */
        excludeUppercase?: boolean;
        /**
         * The JSON key name for the key/value pair, where the value is the generated password. This pair is added to the JSON structure specified by the ``SecretStringTemplate`` parameter. If you specify this parameter, then you must also specify ``SecretStringTemplate``.
         */
        generateStringKey?: string;
        /**
         * Specifies whether to include the space character. If you include this switch, the password can contain space characters.
         */
        includeSpace?: boolean;
        /**
         * The length of the password. If you don't include this parameter, the default length is 32 characters.
         */
        passwordLength?: number;
        /**
         * Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation. If you don't include this switch, the password contains at least one of every character type.
         */
        requireEachIncludedType?: boolean;
        /**
         * A template that the generated string must match. When you make a change to this property, a new secret version is created.
         */
        secretStringTemplate?: string;
    }

    /**
     * Specifies a ``Region`` and the ``KmsKeyId`` for a replica secret.
     */
    export interface SecretReplicaRegion {
        /**
         * The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include this field, Secrets Manager uses ``aws/secretsmanager``.
         */
        kmsKeyId?: string;
        /**
         * A string that represents a ``Region``, for example "us-east-1".
         */
        region: string;
    }

}

export namespace securityhub {
    export interface AutomationRuleDateFilter {
        /**
         * A date range for the date filter.
         */
        dateRange?: outputs.securityhub.AutomationRuleDateRange;
        /**
         * A timestamp that provides the end date for the date filter.
         *
         * This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
         *
         * - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
         * - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
         * - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
         */
        end?: string;
        /**
         * A timestamp that provides the start date for the date filter.
         *
         * This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
         *
         * - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
         * - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
         * - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
         */
        start?: string;
    }

    export interface AutomationRuleDateRange {
        /**
         * A date range unit for the date filter.
         */
        unit: enums.securityhub.AutomationRuleDateRangeUnit;
        /**
         * A date range value for the date filter.
         */
        value: number;
    }

    export interface AutomationRuleMapFilter {
        /**
         * The condition to apply to the key value when filtering Security Hub findings with a map filter.
         *
         * To search for values that have the filter value, use one of the following comparison operators:
         *
         * - To search for values that include the filter value, use `CONTAINS` . For example, for the `ResourceTags` field, the filter `Department CONTAINS Security` matches findings that include the value `Security` for the `Department` tag. In the same example, a finding with a value of `Security team` for the `Department` tag is a match.
         * - To search for values that exactly match the filter value, use `EQUALS` . For example, for the `ResourceTags` field, the filter `Department EQUALS Security` matches findings that have the value `Security` for the `Department` tag.
         *
         * `CONTAINS` and `EQUALS` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Department CONTAINS Security OR Department CONTAINS Finance` match a finding that includes either `Security` , `Finance` , or both values.
         *
         * To search for values that don't have the filter value, use one of the following comparison operators:
         *
         * - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, for the `ResourceTags` field, the filter `Department NOT_CONTAINS Finance` matches findings that exclude the value `Finance` for the `Department` tag.
         * - To search for values other than the filter value, use `NOT_EQUALS` . For example, for the `ResourceTags` field, the filter `Department NOT_EQUALS Finance` matches findings that don’t have the value `Finance` for the `Department` tag.
         *
         * `NOT_CONTAINS` and `NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Department NOT_CONTAINS Security AND Department NOT_CONTAINS Finance` match a finding that excludes both the `Security` and `Finance` values.
         *
         * `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.
         *
         * You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can’t have both an `EQUALS` filter and a `NOT_EQUALS` filter on the same field. Combining filters in this way returns an error.
         *
         * `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
         */
        comparison: enums.securityhub.AutomationRuleMapFilterComparison;
        /**
         * The key of the map filter. For example, for `ResourceTags` , `Key` identifies the name of the tag. For `UserDefinedFields` , `Key` is the name of the field.
         */
        key: string;
        /**
         * The value for the key in the map filter. Filter values are case sensitive. For example, one of the values for a tag called `Department` might be `Security` . If you provide `security` as the filter value, then there's no match.
         */
        value: string;
    }

    export interface AutomationRuleNoteUpdate {
        /**
         * The updated note text.
         */
        text: string;
        /**
         * The principal that updated the note.
         */
        updatedBy: string;
    }

    export interface AutomationRuleNumberFilter {
        /**
         * The equal-to condition to be applied to a single field when querying for findings.
         */
        eq?: number;
        /**
         * The greater-than-equal condition to be applied to a single field when querying for findings.
         */
        gte?: number;
        /**
         * The less-than-equal condition to be applied to a single field when querying for findings.
         */
        lte?: number;
    }

    /**
     * Provides details about a list of findings that the current finding relates to.
     */
    export interface AutomationRuleRelatedFinding {
        /**
         * The product-generated identifier for a related finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        id: string;
        /**
         * The Amazon Resource Name (ARN) for the product that generated a related finding.
         */
        productArn: string;
    }

    export interface AutomationRuleSeverityUpdate {
        /**
         * The severity value of the finding. The allowed values are the following.
         *
         * - `INFORMATIONAL` - No issue was found.
         * - `LOW` - The issue does not require action on its own.
         * - `MEDIUM` - The issue must be addressed but not urgently.
         * - `HIGH` - The issue must be addressed as a priority.
         * - `CRITICAL` - The issue must be remediated immediately to avoid it escalating.
         */
        label?: enums.securityhub.AutomationRuleSeverityUpdateLabel;
        /**
         * The normalized severity for the finding. This attribute is to be deprecated in favor of `Label` .
         *
         * If you provide `Normalized` and do not provide `Label` , `Label` is set automatically as follows.
         *
         * - 0 - `INFORMATIONAL`
         * - 1–39 - `LOW`
         * - 40–69 - `MEDIUM`
         * - 70–89 - `HIGH`
         * - 90–100 - `CRITICAL`
         */
        normalized?: number;
        /**
         * The native severity as defined by the AWS service or integrated partner product that generated the finding.
         */
        product?: number;
    }

    export interface AutomationRuleStringFilter {
        /**
         * The condition to apply to a string value when filtering Security Hub findings.
         *
         * To search for values that have the filter value, use one of the following comparison operators:
         *
         * - To search for values that include the filter value, use `CONTAINS` . For example, the filter `Title CONTAINS CloudFront` matches findings that have a `Title` that includes the string CloudFront.
         * - To search for values that exactly match the filter value, use `EQUALS` . For example, the filter `AwsAccountId EQUALS 123456789012` only matches findings that have an account ID of `123456789012` .
         * - To search for values that start with the filter value, use `PREFIX` . For example, the filter `ResourceRegion PREFIX us` matches findings that have a `ResourceRegion` that starts with `us` . A `ResourceRegion` that starts with a different value, such as `af` , `ap` , or `ca` , doesn't match.
         *
         * `CONTAINS` , `EQUALS` , and `PREFIX` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Title CONTAINS CloudFront OR Title CONTAINS CloudWatch` match a finding that includes either `CloudFront` , `CloudWatch` , or both strings in the title.
         *
         * To search for values that don’t have the filter value, use one of the following comparison operators:
         *
         * - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, the filter `Title NOT_CONTAINS CloudFront` matches findings that have a `Title` that excludes the string CloudFront.
         * - To search for values other than the filter value, use `NOT_EQUALS` . For example, the filter `AwsAccountId NOT_EQUALS 123456789012` only matches findings that have an account ID other than `123456789012` .
         * - To search for values that don't start with the filter value, use `PREFIX_NOT_EQUALS` . For example, the filter `ResourceRegion PREFIX_NOT_EQUALS us` matches findings with a `ResourceRegion` that starts with a value other than `us` .
         *
         * `NOT_CONTAINS` , `NOT_EQUALS` , and `PREFIX_NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Title NOT_CONTAINS CloudFront AND Title NOT_CONTAINS CloudWatch` match a finding that excludes both `CloudFront` and `CloudWatch` in the title.
         *
         * You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can't provide both an `EQUALS` filter and a `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filter on the same field. Combining filters in this way returns an error. `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.
         *
         * You can combine `PREFIX` filters with `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters for the same field. Security Hub first processes the `PREFIX` filters, and then the `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters.
         *
         * For example, for the following filters, Security Hub first identifies findings that have resource types that start with either `AwsIam` or `AwsEc2` . It then excludes findings that have a resource type of `AwsIamPolicy` and findings that have a resource type of `AwsEc2NetworkInterface` .
         *
         * - `ResourceType PREFIX AwsIam`
         * - `ResourceType PREFIX AwsEc2`
         * - `ResourceType NOT_EQUALS AwsIamPolicy`
         * - `ResourceType NOT_EQUALS AwsEc2NetworkInterface`
         *
         * `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
         */
        comparison: enums.securityhub.AutomationRuleStringFilterComparison;
        /**
         * The string filter value. Filter values are case sensitive. For example, the product name for control-based findings is `Security Hub` . If you provide `security hub` as the filter value, there's no match.
         */
        value: string;
    }

    export interface AutomationRuleWorkflowUpdate {
        /**
         * The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to `SUPPRESSED` or `RESOLVED` does not prevent a new finding for the same issue.
         *
         * The allowed values are the following.
         *
         * - `NEW` - The initial state of a finding, before it is reviewed.
         *
         * Security Hub also resets `WorkFlowStatus` from `NOTIFIED` or `RESOLVED` to `NEW` in the following cases:
         *
         * - The record state changes from `ARCHIVED` to `ACTIVE` .
         * - The compliance status changes from `PASSED` to either `WARNING` , `FAILED` , or `NOT_AVAILABLE` .
         * - `NOTIFIED` - Indicates that you notified the resource owner about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.
         * - `RESOLVED` - The finding was reviewed and remediated and is now considered resolved.
         * - `SUPPRESSED` - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.
         */
        status: enums.securityhub.AutomationRuleWorkflowUpdateStatus;
    }

    export interface AutomationRulesAction {
        /**
         * Specifies that the automation rule action is an update to a finding field.
         */
        findingFieldsUpdate: outputs.securityhub.AutomationRulesFindingFieldsUpdate;
        /**
         * Specifies that the rule action should update the `Types` finding field. The `Types` finding field classifies findings in the format of namespace/category/classifier. For more information, see [Types taxonomy for ASFF](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html) in the *AWS Security Hub User Guide* .
         */
        type: enums.securityhub.AutomationRulesActionType;
    }

    /**
     * The rule action will update the ``Note`` field of a finding.
     */
    export interface AutomationRulesFindingFieldsUpdate {
        /**
         * The rule action updates the `Confidence` field of a finding.
         */
        confidence?: number;
        /**
         * The rule action updates the `Criticality` field of a finding.
         */
        criticality?: number;
        /**
         * The rule action will update the ``Note`` field of a finding.
         */
        note?: outputs.securityhub.AutomationRuleNoteUpdate;
        /**
         * The rule action will update the ``RelatedFindings`` field of a finding.
         */
        relatedFindings?: outputs.securityhub.AutomationRuleRelatedFinding[];
        /**
         * The rule action will update the ``Severity`` field of a finding.
         */
        severity?: outputs.securityhub.AutomationRuleSeverityUpdate;
        /**
         * The rule action updates the `Types` field of a finding.
         */
        types?: string[];
        /**
         * The rule action updates the `UserDefinedFields` field of a finding.
         */
        userDefinedFields?: {[key: string]: string};
        /**
         * The rule action updates the `VerificationState` field of a finding.
         */
        verificationState?: enums.securityhub.AutomationRulesFindingFieldsUpdateVerificationState;
        /**
         * The rule action will update the ``Workflow`` field of a finding.
         */
        workflow?: outputs.securityhub.AutomationRuleWorkflowUpdate;
    }

    export interface AutomationRulesFindingFilters {
        /**
         * The AWS account ID in which a finding was generated.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 100 items.
         */
        awsAccountId?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The name of the company for the product that generated the finding. For control-based findings, the company is AWS .
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        companyName?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the [DescribeStandards](https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html) API response.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        complianceAssociatedStandardsId?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The security control ID for which a finding was generated. Security control IDs are the same across standards.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        complianceSecurityControlId?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The result of a security check. This field is only used for findings generated from controls.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        complianceStatus?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. `Confidence` is scored on a 0–100 basis using a ratio scale. A value of `0` means 0 percent confidence, and a value of `100` means 100 percent confidence. For example, a data exfiltration detection based on a statistical deviation of network traffic has low confidence because an actual exfiltration hasn't been verified. For more information, see [Confidence](https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-confidence) in the *AWS Security Hub User Guide* .
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        confidence?: outputs.securityhub.AutomationRuleNumberFilter[];
        /**
         * A timestamp that indicates when this finding record was created.
         *
         * This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
         *
         * - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
         * - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
         * - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        createdAt?: outputs.securityhub.AutomationRuleDateFilter[];
        /**
         * The level of importance that is assigned to the resources that are associated with a finding. `Criticality` is scored on a 0–100 basis, using a ratio scale that supports only full integers. A score of `0` means that the underlying resources have no criticality, and a score of `100` is reserved for the most critical resources. For more information, see [Criticality](https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-criticality) in the *AWS Security Hub User Guide* .
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        criticality?: outputs.securityhub.AutomationRuleNumberFilter[];
        /**
         * A finding's description.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        description?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * A timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings product.
         *
         * This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
         *
         * - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
         * - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
         * - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        firstObservedAt?: outputs.securityhub.AutomationRuleDateFilter[];
        /**
         * The identifier for the solution-specific component that generated a finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 100 items.
         */
        generatorId?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The product-specific identifier for a finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        id?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * A timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings product.
         *
         * This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
         *
         * - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
         * - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
         * - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        lastObservedAt?: outputs.securityhub.AutomationRuleDateFilter[];
        /**
         * The text of a user-defined note that's added to a finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        noteText?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The timestamp of when the note was updated.
         *
         * This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
         *
         * - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
         * - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
         * - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        noteUpdatedAt?: outputs.securityhub.AutomationRuleDateFilter[];
        /**
         * The principal that created a note.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        noteUpdatedBy?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The Amazon Resource Name (ARN) for a third-party product that generated a finding in Security Hub.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        productArn?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * Provides the name of the product that generated the finding. For control-based findings, the product name is Security Hub.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        productName?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * Provides the current state of a finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        recordState?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The product-generated identifier for a related finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        relatedFindingsId?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The ARN for the product that generated a related finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        relatedFindingsProductArn?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * Custom fields and values about the resource that a finding pertains to.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        resourceDetailsOther?: outputs.securityhub.AutomationRuleMapFilter[];
        /**
         * The identifier for the given resource type. For AWS resources that are identified by Amazon Resource Names (ARNs), this is the ARN. For AWS resources that lack ARNs, this is the identifier as defined by the AWS service that created the resource. For non- AWS resources, this is a unique identifier that is associated with the resource.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 100 items.
         */
        resourceId?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The partition in which the resource that the finding pertains to is located. A partition is a group of AWS Regions . Each AWS account is scoped to one partition.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        resourcePartition?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The AWS Region where the resource that a finding pertains to is located.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        resourceRegion?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * A list of AWS tags associated with a resource at the time the finding was processed.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        resourceTags?: outputs.securityhub.AutomationRuleMapFilter[];
        /**
         * A finding's title.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 100 items.
         */
        resourceType?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * The severity value of the finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        severityLabel?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * Provides a URL that links to a page about the current finding in the finding product.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        sourceUrl?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * A finding's title.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 100 items.
         */
        title?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * One or more finding types in the format of namespace/category/classifier that classify a finding. For a list of namespaces, classifiers, and categories, see [Types taxonomy for ASFF](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html) in the *AWS Security Hub User Guide* .
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        type?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * A timestamp that indicates when the finding record was most recently updated.
         *
         * This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
         *
         * - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
         * - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
         * - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        updatedAt?: outputs.securityhub.AutomationRuleDateFilter[];
        /**
         * A list of user-defined name and value string pairs added to a finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        userDefinedFields?: outputs.securityhub.AutomationRuleMapFilter[];
        /**
         * Provides the veracity of a finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        verificationState?: outputs.securityhub.AutomationRuleStringFilter[];
        /**
         * Provides information about the status of the investigation into a finding.
         *
         * Array Members: Minimum number of 1 item. Maximum number of 20 items.
         */
        workflowStatus?: outputs.securityhub.AutomationRuleStringFilter[];
    }

    /**
     * An object that provides the current value of a security control parameter and identifies whether it has been customized.
     */
    export interface ConfigurationPolicyParameterConfiguration {
        value?: outputs.securityhub.ConfigurationPolicyParameterValue;
        /**
         * Identifies whether a control parameter uses a custom user-defined value or subscribes to the default AWS Security Hub behavior.
         */
        valueType: enums.securityhub.ConfigurationPolicyParameterConfigurationValueType;
    }

    /**
     * An object that includes the data type of a security control parameter and its current value.
     */
    export interface ConfigurationPolicyParameterValue {
        /**
         * A control parameter that is a boolean.
         */
        boolean?: boolean;
        /**
         * A control parameter that is a double.
         */
        double?: number;
        /**
         * A control parameter that is an enum.
         */
        enum?: string;
        /**
         * A control parameter that is a list of enums.
         */
        enumList?: string[];
        /**
         * A control parameter that is an integer.
         */
        integer?: number;
        /**
         * A control parameter that is a list of integers.
         */
        integerList?: number[];
        /**
         * A control parameter that is a string.
         */
        string?: string;
        /**
         * A control parameter that is a list of strings.
         */
        stringList?: string[];
    }

    /**
     * An object that defines how Security Hub is configured.
     */
    export interface ConfigurationPolicyPolicy {
        securityHub?: outputs.securityhub.ConfigurationPolicySecurityHubPolicy;
    }

    /**
     * An object of security control and control parameter value that are included in a configuration policy.
     */
    export interface ConfigurationPolicySecurityControlCustomParameter {
        /**
         * An object that specifies parameter values for a control in a configuration policy.
         */
        parameters?: {[key: string]: outputs.securityhub.ConfigurationPolicyParameterConfiguration};
        /**
         * The ID of the security control.
         */
        securityControlId?: string;
    }

    /**
     * An object that defines which security controls are enabled in an AWS Security Hub configuration policy.
     */
    export interface ConfigurationPolicySecurityControlsConfiguration {
        /**
         * A list of security controls that are disabled in the configuration policy
         */
        disabledSecurityControlIdentifiers?: string[];
        /**
         * A list of security controls that are enabled in the configuration policy.
         */
        enabledSecurityControlIdentifiers?: string[];
        /**
         * A list of security controls and control parameter values that are included in a configuration policy.
         */
        securityControlCustomParameters?: outputs.securityhub.ConfigurationPolicySecurityControlCustomParameter[];
    }

    /**
     * An object that defines how AWS Security Hub is configured.
     */
    export interface ConfigurationPolicySecurityHubPolicy {
        /**
         * A list that defines which security standards are enabled in the configuration policy.
         */
        enabledStandardIdentifiers?: string[];
        securityControlsConfiguration?: outputs.securityhub.ConfigurationPolicySecurityControlsConfiguration;
        /**
         * Indicates whether Security Hub is enabled in the policy.
         */
        serviceEnabled?: boolean;
    }

    /**
     * A collection of filters that are applied to all active findings aggregated by AWS Security Hub.
     */
    export interface InsightAwsSecurityFindingFilters {
        /**
         * The AWS account ID in which a finding is generated.
         */
        awsAccountId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The name of the AWS account in which a finding is generated.
         */
        awsAccountName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The name of the findings provider (company) that owns the solution (product) that generates findings.
         */
        companyName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The unique identifier of a standard in which a control is enabled.
         */
        complianceAssociatedStandardsId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The unique identifier of a control across standards.
         */
        complianceSecurityControlId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The name of a security control parameter.
         */
        complianceSecurityControlParametersName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The current value of a security control parameter.
         */
        complianceSecurityControlParametersValue?: outputs.securityhub.InsightStringFilter[];
        /**
         * Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard.
         */
        complianceStatus?: outputs.securityhub.InsightStringFilter[];
        /**
         * A finding's confidence.
         */
        confidence?: outputs.securityhub.InsightNumberFilter[];
        /**
         * An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.
         */
        createdAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The level of importance assigned to the resources associated with the finding.
         */
        criticality?: outputs.securityhub.InsightNumberFilter[];
        /**
         * A finding's description.
         */
        description?: outputs.securityhub.InsightStringFilter[];
        /**
         * The finding provider value for the finding confidence.
         */
        findingProviderFieldsConfidence?: outputs.securityhub.InsightNumberFilter[];
        /**
         * The finding provider value for the level of importance assigned to the resources associated with the findings.
         */
        findingProviderFieldsCriticality?: outputs.securityhub.InsightNumberFilter[];
        /**
         * The finding identifier of a related finding that is identified by the finding provider.
         */
        findingProviderFieldsRelatedFindingsId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The ARN of the solution that generated a related finding that is identified by the finding provider.
         */
        findingProviderFieldsRelatedFindingsProductArn?: outputs.securityhub.InsightStringFilter[];
        /**
         * The finding provider value for the severity label.
         */
        findingProviderFieldsSeverityLabel?: outputs.securityhub.InsightStringFilter[];
        /**
         * The finding provider's original value for the severity.
         */
        findingProviderFieldsSeverityOriginal?: outputs.securityhub.InsightStringFilter[];
        /**
         * One or more finding types that the finding provider assigned to the finding.
         */
        findingProviderFieldsTypes?: outputs.securityhub.InsightStringFilter[];
        /**
         * An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.
         */
        firstObservedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The identifier for the solution-specific component (a discrete unit of logic) that generated a finding.
         */
        generatorId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The security findings provider-specific identifier for a finding.
         */
        id?: outputs.securityhub.InsightStringFilter[];
        /**
         * A keyword for a finding.
         */
        keyword?: outputs.securityhub.InsightKeywordFilter[];
        /**
         * An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.
         */
        lastObservedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The name of the malware that was observed.
         */
        malwareName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The filesystem path of the malware that was observed.
         */
        malwarePath?: outputs.securityhub.InsightStringFilter[];
        /**
         * The state of the malware that was observed.
         */
        malwareState?: outputs.securityhub.InsightStringFilter[];
        /**
         * The type of the malware that was observed.
         */
        malwareType?: outputs.securityhub.InsightStringFilter[];
        /**
         * The destination domain of network-related information about a finding.
         */
        networkDestinationDomain?: outputs.securityhub.InsightStringFilter[];
        /**
         * The destination IPv4 address of network-related information about a finding.
         */
        networkDestinationIpV4?: outputs.securityhub.InsightIpFilter[];
        /**
         * The destination IPv6 address of network-related information about a finding.
         */
        networkDestinationIpV6?: outputs.securityhub.InsightIpFilter[];
        /**
         * The destination port of network-related information about a finding.
         */
        networkDestinationPort?: outputs.securityhub.InsightNumberFilter[];
        /**
         * Indicates the direction of network traffic associated with a finding.
         */
        networkDirection?: outputs.securityhub.InsightStringFilter[];
        /**
         * The protocol of network-related information about a finding.
         */
        networkProtocol?: outputs.securityhub.InsightStringFilter[];
        /**
         * The source domain of network-related information about a finding.
         */
        networkSourceDomain?: outputs.securityhub.InsightStringFilter[];
        /**
         * The source IPv4 address of network-related information about a finding.
         */
        networkSourceIpV4?: outputs.securityhub.InsightIpFilter[];
        /**
         * The source IPv6 address of network-related information about a finding.
         */
        networkSourceIpV6?: outputs.securityhub.InsightIpFilter[];
        /**
         * The source media access control (MAC) address of network-related information about a finding.
         */
        networkSourceMac?: outputs.securityhub.InsightStringFilter[];
        /**
         * The source port of network-related information about a finding.
         */
        networkSourcePort?: outputs.securityhub.InsightNumberFilter[];
        /**
         * The text of a note.
         */
        noteText?: outputs.securityhub.InsightStringFilter[];
        /**
         * The timestamp of when the note was updated.
         */
        noteUpdatedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The principal that created a note.
         */
        noteUpdatedBy?: outputs.securityhub.InsightStringFilter[];
        /**
         * A timestamp that identifies when the process was launched.
         */
        processLaunchedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The name of the process.
         */
        processName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The parent process ID.
         */
        processParentPid?: outputs.securityhub.InsightNumberFilter[];
        /**
         * The path to the process executable.
         */
        processPath?: outputs.securityhub.InsightStringFilter[];
        /**
         * The process ID.
         */
        processPid?: outputs.securityhub.InsightNumberFilter[];
        /**
         * A timestamp that identifies when the process was terminated.
         */
        processTerminatedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.
         */
        productArn?: outputs.securityhub.InsightStringFilter[];
        /**
         * A data type where security findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format.
         */
        productFields?: outputs.securityhub.InsightMapFilter[];
        /**
         * The name of the solution (product) that generates findings.
         */
        productName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The recommendation of what to do about the issue described in a finding.
         */
        recommendationText?: outputs.securityhub.InsightStringFilter[];
        /**
         * The updated record state for the finding.
         */
        recordState?: outputs.securityhub.InsightStringFilter[];
        /**
         * The Region from which the finding was generated.
         */
        region?: outputs.securityhub.InsightStringFilter[];
        /**
         * The solution-generated identifier for a related finding.
         */
        relatedFindingsId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The ARN of the solution that generated a related finding.
         */
        relatedFindingsProductArn?: outputs.securityhub.InsightStringFilter[];
        /**
         * The ARN of the application that is related to a finding.
         */
        resourceApplicationArn?: outputs.securityhub.InsightStringFilter[];
        /**
         * The name of the application that is related to a finding.
         */
        resourceApplicationName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The IAM profile ARN of the instance.
         */
        resourceAwsEc2InstanceIamInstanceProfileArn?: outputs.securityhub.InsightStringFilter[];
        /**
         * The Amazon Machine Image (AMI) ID of the instance.
         */
        resourceAwsEc2InstanceImageId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The IPv4 addresses associated with the instance.
         */
        resourceAwsEc2InstanceIpV4Addresses?: outputs.securityhub.InsightIpFilter[];
        /**
         * The IPv6 addresses associated with the instance.
         */
        resourceAwsEc2InstanceIpV6Addresses?: outputs.securityhub.InsightIpFilter[];
        /**
         * The key name associated with the instance.
         */
        resourceAwsEc2InstanceKeyName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The date and time the instance was launched.
         */
        resourceAwsEc2InstanceLaunchedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The identifier of the subnet that the instance was launched in.
         */
        resourceAwsEc2InstanceSubnetId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The instance type of the instance.
         */
        resourceAwsEc2InstanceType?: outputs.securityhub.InsightStringFilter[];
        /**
         * The identifier of the VPC that the instance was launched in.
         */
        resourceAwsEc2InstanceVpcId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The creation date/time of the IAM access key related to a finding.
         */
        resourceAwsIamAccessKeyCreatedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The name of the principal that is associated with an IAM access key.
         */
        resourceAwsIamAccessKeyPrincipalName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The status of the IAM access key related to a finding.
         */
        resourceAwsIamAccessKeyStatus?: outputs.securityhub.InsightStringFilter[];
        /**
         * The user associated with the IAM access key related to a finding.
         */
        resourceAwsIamAccessKeyUserName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The name of an IAM user.
         */
        resourceAwsIamUserUserName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The canonical user ID of the owner of the S3 bucket.
         */
        resourceAwsS3BucketOwnerId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The display name of the owner of the S3 bucket.
         */
        resourceAwsS3BucketOwnerName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The identifier of the image related to a finding.
         */
        resourceContainerImageId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The name of the image related to a finding.
         */
        resourceContainerImageName?: outputs.securityhub.InsightStringFilter[];
        /**
         * A timestamp that identifies when the container was started.
         */
        resourceContainerLaunchedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The name of the container related to a finding.
         */
        resourceContainerName?: outputs.securityhub.InsightStringFilter[];
        /**
         * The details of a resource that doesn't have a specific subfield for the resource type defined.
         */
        resourceDetailsOther?: outputs.securityhub.InsightMapFilter[];
        /**
         * The canonical identifier for the given resource type.
         */
        resourceId?: outputs.securityhub.InsightStringFilter[];
        /**
         * The canonical AWS partition name that the Region is assigned to.
         */
        resourcePartition?: outputs.securityhub.InsightStringFilter[];
        /**
         * The canonical AWS external Region name where this resource is located.
         */
        resourceRegion?: outputs.securityhub.InsightStringFilter[];
        /**
         * A list of AWS tags associated with a resource at the time the finding was processed.
         */
        resourceTags?: outputs.securityhub.InsightMapFilter[];
        /**
         * Specifies the type of the resource that details are provided for.
         */
        resourceType?: outputs.securityhub.InsightStringFilter[];
        /**
         * Indicates whether or not sample findings are included in the filter results.
         */
        sample?: outputs.securityhub.InsightBooleanFilter[];
        /**
         * The label of a finding's severity.
         */
        severityLabel?: outputs.securityhub.InsightStringFilter[];
        /**
         * The normalized severity of a finding.
         */
        severityNormalized?: outputs.securityhub.InsightNumberFilter[];
        /**
         * The native severity as defined by the security findings provider's solution that generated the finding.
         */
        severityProduct?: outputs.securityhub.InsightNumberFilter[];
        /**
         * A URL that links to a page about the current finding in the security findings provider's solution.
         */
        sourceUrl?: outputs.securityhub.InsightStringFilter[];
        /**
         * The category of a threat intelligence indicator.
         */
        threatIntelIndicatorCategory?: outputs.securityhub.InsightStringFilter[];
        /**
         * A timestamp that identifies the last observation of a threat intelligence indicator.
         */
        threatIntelIndicatorLastObservedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * The source of the threat intelligence.
         */
        threatIntelIndicatorSource?: outputs.securityhub.InsightStringFilter[];
        /**
         * The URL for more details from the source of the threat intelligence.
         */
        threatIntelIndicatorSourceUrl?: outputs.securityhub.InsightStringFilter[];
        /**
         * The type of a threat intelligence indicator.
         */
        threatIntelIndicatorType?: outputs.securityhub.InsightStringFilter[];
        /**
         * The value of a threat intelligence indicator.
         */
        threatIntelIndicatorValue?: outputs.securityhub.InsightStringFilter[];
        /**
         * A finding's title.
         */
        title?: outputs.securityhub.InsightStringFilter[];
        /**
         * A finding type in the format of namespace/category/classifier that classifies a finding.
         */
        type?: outputs.securityhub.InsightStringFilter[];
        /**
         * An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record.
         */
        updatedAt?: outputs.securityhub.InsightDateFilter[];
        /**
         * A list of name/value string pairs associated with the finding.
         */
        userDefinedFields?: outputs.securityhub.InsightMapFilter[];
        /**
         * The veracity of a finding.
         */
        verificationState?: outputs.securityhub.InsightStringFilter[];
        /**
         * Indicates whether a software vulnerability in your environment has a known exploit.
         */
        vulnerabilitiesExploitAvailable?: outputs.securityhub.InsightStringFilter[];
        /**
         * Indicates whether a vulnerability is fixed in a newer version of the affected software packages.
         */
        vulnerabilitiesFixAvailable?: outputs.securityhub.InsightStringFilter[];
        /**
         * The workflow state of a finding.
         */
        workflowState?: outputs.securityhub.InsightStringFilter[];
        /**
         * The status of the investigation into a finding.
         */
        workflowStatus?: outputs.securityhub.InsightStringFilter[];
    }

    /**
     * Boolean filter for querying findings.
     */
    export interface InsightBooleanFilter {
        /**
         * The value of the boolean.
         */
        value: boolean;
    }

    /**
     * A date filter for querying findings.
     */
    export interface InsightDateFilter {
        /**
         * A date range for the date filter.
         */
        dateRange?: outputs.securityhub.InsightDateRange;
        /**
         * A timestamp that provides the end date for the date filter.
         *
         * This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
         *
         * - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
         * - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
         * - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
         */
        end?: string;
        /**
         * A timestamp that provides the start date for the date filter.
         *
         * This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
         *
         * - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
         * - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
         * - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
         * - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
         */
        start?: string;
    }

    /**
     * A date range for the date filter.
     */
    export interface InsightDateRange {
        /**
         * A date range unit for the date filter.
         */
        unit: enums.securityhub.InsightDateRangeUnit;
        /**
         * A date range value for the date filter.
         */
        value: number;
    }

    /**
     * The IP filter for querying findings.
     */
    export interface InsightIpFilter {
        /**
         * A finding's CIDR value.
         */
        cidr: string;
    }

    /**
     * A keyword filter for querying findings.
     */
    export interface InsightKeywordFilter {
        /**
         * A value for the keyword.
         */
        value: string;
    }

    /**
     * A map filter for filtering AWS Security Hub findings.
     */
    export interface InsightMapFilter {
        /**
         * The condition to apply to the key value when filtering Security Hub findings with a map filter.
         */
        comparison: enums.securityhub.InsightMapFilterComparison;
        /**
         * The key of the map filter. For example, for `ResourceTags` , `Key` identifies the name of the tag. For `UserDefinedFields` , `Key` is the name of the field.
         */
        key: string;
        /**
         * The value for the key in the map filter. Filter values are case sensitive. For example, one of the values for a tag called `Department` might be `Security` . If you provide `security` as the filter value, then there's no match.
         */
        value: string;
    }

    /**
     * A number filter for querying findings.
     */
    export interface InsightNumberFilter {
        /**
         * The equal-to condition to be applied to a single field when querying for findings.
         */
        eq?: number;
        /**
         * The greater-than-equal condition to be applied to a single field when querying for findings.
         */
        gte?: number;
        /**
         * The less-than-equal condition to be applied to a single field when querying for findings.
         */
        lte?: number;
    }

    /**
     * A string filter for filtering AWS Security Hub findings.
     */
    export interface InsightStringFilter {
        /**
         * The condition to apply to a string value when filtering Security Hub findings.
         *
         * To search for values that have the filter value, use one of the following comparison operators:
         *
         * - To search for values that include the filter value, use `CONTAINS` . For example, the filter `Title CONTAINS CloudFront` matches findings that have a `Title` that includes the string CloudFront.
         * - To search for values that exactly match the filter value, use `EQUALS` . For example, the filter `AwsAccountId EQUALS 123456789012` only matches findings that have an account ID of `123456789012` .
         * - To search for values that start with the filter value, use `PREFIX` . For example, the filter `ResourceRegion PREFIX us` matches findings that have a `ResourceRegion` that starts with `us` . A `ResourceRegion` that starts with a different value, such as `af` , `ap` , or `ca` , doesn't match.
         *
         * `CONTAINS` , `EQUALS` , and `PREFIX` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Title CONTAINS CloudFront OR Title CONTAINS CloudWatch` match a finding that includes either `CloudFront` , `CloudWatch` , or both strings in the title.
         *
         * To search for values that don’t have the filter value, use one of the following comparison operators:
         *
         * - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, the filter `Title NOT_CONTAINS CloudFront` matches findings that have a `Title` that excludes the string CloudFront.
         * - To search for values other than the filter value, use `NOT_EQUALS` . For example, the filter `AwsAccountId NOT_EQUALS 123456789012` only matches findings that have an account ID other than `123456789012` .
         * - To search for values that don't start with the filter value, use `PREFIX_NOT_EQUALS` . For example, the filter `ResourceRegion PREFIX_NOT_EQUALS us` matches findings with a `ResourceRegion` that starts with a value other than `us` .
         *
         * `NOT_CONTAINS` , `NOT_EQUALS` , and `PREFIX_NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Title NOT_CONTAINS CloudFront AND Title NOT_CONTAINS CloudWatch` match a finding that excludes both `CloudFront` and `CloudWatch` in the title.
         *
         * You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can't provide both an `EQUALS` filter and a `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filter on the same field. Combining filters in this way returns an error. `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.
         *
         * You can combine `PREFIX` filters with `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters for the same field. Security Hub first processes the `PREFIX` filters, and then the `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters.
         *
         * For example, for the following filters, Security Hub first identifies findings that have resource types that start with either `AwsIam` or `AwsEc2` . It then excludes findings that have a resource type of `AwsIamPolicy` and findings that have a resource type of `AwsEc2NetworkInterface` .
         *
         * - `ResourceType PREFIX AwsIam`
         * - `ResourceType PREFIX AwsEc2`
         * - `ResourceType NOT_EQUALS AwsIamPolicy`
         * - `ResourceType NOT_EQUALS AwsEc2NetworkInterface`
         *
         * `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
         */
        comparison: enums.securityhub.InsightStringFilterComparison;
        /**
         * The string filter value. Filter values are case sensitive. For example, the product name for control-based findings is `Security Hub` . If you provide `security hub` as the filter value, there's no match.
         */
        value: string;
    }

    export interface SecurityControlParameterConfiguration {
        value?: outputs.securityhub.SecurityControlParameterValue;
        valueType: enums.securityhub.SecurityControlParameterConfigurationValueType;
    }

    export interface SecurityControlParameterValue {
        /**
         * A control parameter that is a boolean.
         */
        boolean?: boolean;
        /**
         * A control parameter that is a double.
         */
        double?: number;
        /**
         * A control parameter that is a enum.
         */
        enum?: string;
        /**
         * A control parameter that is a list of enums.
         */
        enumList?: string[];
        /**
         * A control parameter that is a integer.
         */
        integer?: number;
        /**
         * A control parameter that is a list of integers.
         */
        integerList?: number[];
        /**
         * A control parameter that is a string.
         */
        string?: string;
        /**
         * A control parameter that is a list of strings.
         */
        stringList?: string[];
    }

    /**
     * Provides details about an individual security control. For a list of ASH controls, see [controls reference](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-controls-reference.html) in the *User Guide*.
     */
    export interface StandardsControl {
        /**
         * A user-defined reason for changing a control's enablement status in a specified standard. If you are disabling a control, then this property is required.
         */
        reason?: string;
        /**
         * The Amazon Resource Name (ARN) of the control.
         */
        standardsControlArn: string;
    }

}

export namespace securitylake {
    /**
     * Provides encryption details of Amazon Security Lake object.
     */
    export interface DataLakeEncryptionConfiguration {
        /**
         * The id of KMS encryption key used by Amazon Security Lake to encrypt the Security Lake object.
         */
        kmsKeyId?: string;
    }

    /**
     * Provides data expiration details of Amazon Security Lake object.
     */
    export interface DataLakeExpiration {
        /**
         * The number of days before data expires in the Amazon Security Lake object.
         */
        days?: number;
    }

    /**
     * Provides lifecycle details of Amazon Security Lake object.
     */
    export interface DataLakeLifecycleConfiguration {
        /**
         * Provides data expiration details of the Amazon Security Lake object.
         */
        expiration?: outputs.securitylake.DataLakeExpiration;
        /**
         * Provides data storage transition details of Amazon Security Lake object.
         */
        transitions?: outputs.securitylake.DataLakeTransitions[];
    }

    /**
     * Provides replication details of Amazon Security Lake object.
     */
    export interface DataLakeReplicationConfiguration {
        /**
         * Specifies one or more centralized rollup Regions. The AWS Region specified in the region parameter of the `CreateDataLake` or `UpdateDataLake` operations contributes data to the rollup Region or Regions specified in this parameter.
         *
         * Replication enables automatic, asynchronous copying of objects across Amazon S3 buckets. S3 buckets that are configured for object replication can be owned by the same AWS account or by different accounts. You can replicate objects to a single destination bucket or to multiple destination buckets. The destination buckets can be in different Regions or within the same Region as the source bucket.
         */
        regions?: string[];
        /**
         * Replication settings for the Amazon S3 buckets. This parameter uses the AWS Identity and Access Management (IAM) role you created that is managed by Security Lake, to ensure the replication setting is correct.
         */
        roleArn?: string;
    }

    export interface DataLakeTransitions {
        /**
         * Number of days before data transitions to a different S3 Storage Class in the Amazon Security Lake object.
         */
        days?: number;
        /**
         * The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.
         */
        storageClass?: string;
    }

    /**
     * Amazon Security Lake supports log and event collection for natively supported AWS services.
     */
    export interface SubscriberAwsLogSource {
        /**
         * The name for a AWS source. This must be a Regionally unique value.
         */
        sourceName?: string;
        /**
         * The version for a AWS source. This must be a Regionally unique value.
         */
        sourceVersion?: string;
    }

    export interface SubscriberCustomLogSource {
        /**
         * The name for a third-party custom source. This must be a Regionally unique value.
         */
        sourceName?: string;
        /**
         * The version for a third-party custom source. This must be a Regionally unique value.
         */
        sourceVersion?: string;
    }

    /**
     * The AWS identity used to access your data.
     */
    export interface SubscriberIdentityProperties {
        /**
         * The external ID used to establish trust relationship with the AWS identity.
         */
        externalId: string;
        /**
         * The AWS identity principal.
         */
        principal: string;
    }

    /**
     * The configuration for HTTPS subscriber notification.
     */
    export interface SubscriberNotificationHttpsNotificationConfiguration {
        /**
         * The key name for the notification subscription.
         */
        authorizationApiKeyName?: string;
        /**
         * The key value for the notification subscription.
         */
        authorizationApiKeyValue?: string;
        /**
         * The subscription endpoint in Security Lake.
         */
        endpoint: string;
        /**
         * The HTTPS method used for the notification subscription.
         */
        httpMethod?: enums.securitylake.SubscriberNotificationHttpsNotificationConfigurationHttpMethod;
        /**
         * The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created.
         */
        targetRoleArn: string;
    }

    export interface SubscriberNotificationNotificationConfiguration {
        httpsNotificationConfiguration?: outputs.securitylake.SubscriberNotificationHttpsNotificationConfiguration;
        sqsNotificationConfiguration?: outputs.securitylake.SubscriberNotificationSqsNotificationConfiguration;
    }

    /**
     * The configurations for SQS subscriber notification. The members of this structure are context-dependent.
     */
    export interface SubscriberNotificationSqsNotificationConfiguration {
    }

    export interface SubscriberSource {
        awsLogSource?: outputs.securitylake.SubscriberAwsLogSource;
        customLogSource?: outputs.securitylake.SubscriberCustomLogSource;
    }

}

export namespace servicecatalog {
    export interface CloudFormationProvisionedProductProvisioningParameter {
        /**
         * The parameter key.
         */
        key: string;
        /**
         * The parameter value.
         */
        value: string;
    }

    export interface CloudFormationProvisionedProductProvisioningPreferences {
        /**
         * One or more AWS accounts where the provisioned product will be available.
         *
         * Applicable only to a `CFN_STACKSET` provisioned product type.
         *
         * The specified accounts should be within the list of accounts from the `STACKSET` constraint. To get the list of accounts in the `STACKSET` constraint, use the `DescribeProvisioningParameters` operation.
         *
         * If no values are specified, the default value is all acounts from the `STACKSET` constraint.
         */
        stackSetAccounts?: string[];
        /**
         * The number of accounts, per Region, for which this operation can fail before AWS Service Catalog stops the operation in that Region. If the operation is stopped in a Region, AWS Service Catalog doesn't attempt the operation in any subsequent Regions.
         *
         * Applicable only to a `CFN_STACKSET` provisioned product type.
         *
         * Conditional: You must specify either `StackSetFailureToleranceCount` or `StackSetFailureTolerancePercentage` , but not both.
         *
         * The default value is `0` if no value is specified.
         */
        stackSetFailureToleranceCount?: number;
        /**
         * The percentage of accounts, per Region, for which this stack operation can fail before AWS Service Catalog stops the operation in that Region. If the operation is stopped in a Region, AWS Service Catalog doesn't attempt the operation in any subsequent Regions.
         *
         * When calculating the number of accounts based on the specified percentage, AWS Service Catalog rounds down to the next whole number.
         *
         * Applicable only to a `CFN_STACKSET` provisioned product type.
         *
         * Conditional: You must specify either `StackSetFailureToleranceCount` or `StackSetFailureTolerancePercentage` , but not both.
         */
        stackSetFailureTolerancePercentage?: number;
        /**
         * The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of `StackSetFailureToleranceCount` . `StackSetMaxConcurrentCount` is at most one more than the `StackSetFailureToleranceCount` .
         *
         * Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
         *
         * Applicable only to a `CFN_STACKSET` provisioned product type.
         *
         * Conditional: You must specify either `StackSetMaxConcurrentCount` or `StackSetMaxConcurrentPercentage` , but not both.
         */
        stackSetMaxConcurrencyCount?: number;
        /**
         * The maximum percentage of accounts in which to perform this operation at one time.
         *
         * When calculating the number of accounts based on the specified percentage, AWS Service Catalog rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, AWS Service Catalog sets the number as `1` instead.
         *
         * Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.
         *
         * Applicable only to a `CFN_STACKSET` provisioned product type.
         *
         * Conditional: You must specify either `StackSetMaxConcurrentCount` or `StackSetMaxConcurrentPercentage` , but not both.
         */
        stackSetMaxConcurrencyPercentage?: number;
        /**
         * Determines what action AWS Service Catalog performs to a stack set or a stack instance represented by the provisioned product. The default value is `UPDATE` if nothing is specified.
         *
         * Applicable only to a `CFN_STACKSET` provisioned product type.
         *
         * - **CREATE** - Creates a new stack instance in the stack set represented by the provisioned product. In this case, only new stack instances are created based on accounts and Regions; if new ProductId or ProvisioningArtifactID are passed, they will be ignored.
         * - **UPDATE** - Updates the stack set represented by the provisioned product and also its stack instances.
         * - **DELETE** - Deletes a stack instance in the stack set represented by the provisioned product.
         */
        stackSetOperationType?: enums.servicecatalog.CloudFormationProvisionedProductProvisioningPreferencesStackSetOperationType;
        /**
         * One or more AWS Regions where the provisioned product will be available.
         *
         * Applicable only to a `CFN_STACKSET` provisioned product type.
         *
         * The specified Regions should be within the list of Regions from the `STACKSET` constraint. To get the list of Regions in the `STACKSET` constraint, use the `DescribeProvisioningParameters` operation.
         *
         * If no values are specified, the default value is all Regions from the `STACKSET` constraint.
         */
        stackSetRegions?: string[];
    }

    export interface ServiceActionDefinitionParameter {
        /**
         * The parameter key.
         */
        key: string;
        /**
         * The value of the parameter.
         */
        value: string;
    }

}

export namespace ses {
    /**
     * Preferences regarding the Dashboard feature.
     */
    export interface ConfigurationSetDashboardOptions {
        /**
         * Whether emails sent with this configuration set have engagement tracking enabled.
         */
        engagementMetrics: string;
    }

    /**
     * An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
     */
    export interface ConfigurationSetDeliveryOptions {
        /**
         * The name of the dedicated IP pool to associate with the configuration set.
         */
        sendingPoolName?: string;
        /**
         * Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require , messages are only delivered if a TLS connection can be established. If the value is Optional , messages can be delivered in plain text if a TLS connection can't be established.
         */
        tlsPolicy?: string;
    }

    /**
     * An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
     */
    export interface ConfigurationSetEventDestinationCloudWatchDestination {
        /**
         * A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
         */
        dimensionConfigurations?: outputs.ses.ConfigurationSetEventDestinationDimensionConfiguration[];
    }

    /**
     * A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
     */
    export interface ConfigurationSetEventDestinationDimensionConfiguration {
        /**
         * The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email.
         */
        defaultDimensionValue: string;
        /**
         * The name of an Amazon CloudWatch dimension associated with an email sending metric.
         */
        dimensionName: string;
        /**
         * The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, specify messageTag. To use your own email headers, specify emailHeader. To put a custom tag on any link included in your email, specify linkTag.
         */
        dimensionValueSource: string;
    }

    export interface ConfigurationSetEventDestinationEventDestination {
        /**
         * An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
         */
        cloudWatchDestination?: outputs.ses.ConfigurationSetEventDestinationCloudWatchDestination;
        /**
         * Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to true to enable publishing to this destination; set to false to prevent publishing to this destination. The default value is false.   
         */
        enabled?: boolean;
        /**
         * An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
         */
        kinesisFirehoseDestination?: outputs.ses.ConfigurationSetEventDestinationKinesisFirehoseDestination;
        /**
         * The type of email sending events, send, reject, bounce, complaint, delivery, open, click, renderingFailure, deliveryDelay, and subscription.
         */
        matchingEventTypes: string[];
        /**
         * The name of the event destination set.
         */
        name?: string;
        /**
         * An object that contains SNS topic ARN associated event destination.
         */
        snsDestination?: outputs.ses.ConfigurationSetEventDestinationSnsDestination;
    }

    /**
     * An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
     */
    export interface ConfigurationSetEventDestinationKinesisFirehoseDestination {
        /**
         * The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.
         */
        deliveryStreamArn: string;
        /**
         * The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose stream.
         */
        iamRoleArn: string;
    }

    /**
     * An object that contains SNS topic ARN associated event destination.
     */
    export interface ConfigurationSetEventDestinationSnsDestination {
        /**
         * The ARN of the Amazon SNS topic for email sending events. You can find the ARN of a topic by using the [ListTopics](https://docs.aws.amazon.com/sns/latest/api/API_ListTopics.html) Amazon SNS operation.
         *
         * For more information about Amazon SNS topics, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html) .
         */
        topicArn: string;
    }

    /**
     * Preferences regarding the Guardian feature.
     */
    export interface ConfigurationSetGuardianOptions {
        /**
         * Whether emails sent with this configuration set have optimized delivery algorithm enabled.
         */
        optimizedSharedDelivery: string;
    }

    /**
     * An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
     */
    export interface ConfigurationSetReputationOptions {
        /**
         * If true , tracking of reputation metrics is enabled for the configuration set. If false , tracking of reputation metrics is disabled for the configuration set.
         */
        reputationMetricsEnabled?: boolean;
    }

    /**
     * An object that defines whether or not Amazon SES can send email that you send using the configuration set.
     */
    export interface ConfigurationSetSendingOptions {
        /**
         * If `true` , email sending is enabled for the configuration set. If `false` , email sending is disabled for the configuration set.
         */
        sendingEnabled?: boolean;
    }

    /**
     * An object that contains information about the suppression list preferences for your account.
     */
    export interface ConfigurationSetSuppressionOptions {
        /**
         * A list that contains the reasons that email addresses are automatically added to the suppression list for your account.
         */
        suppressedReasons?: string[];
    }

    /**
     * An object that defines the open and click tracking options for emails that you send using the configuration set.
     */
    export interface ConfigurationSetTrackingOptions {
        /**
         * The domain to use for tracking open and click events.
         */
        customRedirectDomain?: string;
    }

    /**
     * An object that contains Virtual Deliverability Manager (VDM) settings for this configuration set.
     */
    export interface ConfigurationSetVdmOptions {
        /**
         * Settings for your VDM configuration as applicable to the Dashboard.
         */
        dashboardOptions?: outputs.ses.ConfigurationSetDashboardOptions;
        /**
         * Settings for your VDM configuration as applicable to the Guardian.
         */
        guardianOptions?: outputs.ses.ConfigurationSetGuardianOptions;
    }

    export interface ContactListTopic {
        /**
         * The default subscription status to be applied to a contact if the contact has not noted their preference for subscribing to a topic.
         */
        defaultSubscriptionStatus: string;
        /**
         * The description of the topic.
         */
        description?: string;
        /**
         * The display name of the topic.
         */
        displayName: string;
        /**
         * The name of the topic.
         */
        topicName: string;
    }

    /**
     * Used to associate a configuration set with an email identity.
     */
    export interface EmailIdentityConfigurationSetAttributes {
        /**
         * The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
         */
        configurationSetName?: string;
    }

    /**
     * Used to enable or disable DKIM authentication for an email identity.
     */
    export interface EmailIdentityDkimAttributes {
        /**
         * Sets the DKIM signing configuration for the identity. When you set this value true, then the messages that are sent from the identity are signed using DKIM. If you set this value to false, your messages are sent without DKIM signing.
         */
        signingEnabled?: boolean;
    }

    /**
     * If your request includes this object, Amazon SES configures the identity to use Bring Your Own DKIM (BYODKIM) for DKIM authentication purposes, or, configures the key length to be used for Easy DKIM.
     */
    export interface EmailIdentityDkimSigningAttributes {
        /**
         * [Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding.
         */
        domainSigningPrivateKey?: string;
        /**
         * [Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.
         */
        domainSigningSelector?: string;
        /**
         * [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
         */
        nextSigningKeyLength?: string;
    }

    /**
     * Used to enable or disable feedback forwarding for an identity.
     */
    export interface EmailIdentityFeedbackAttributes {
        /**
         * If the value is true, you receive email notifications when bounce or complaint events occur
         */
        emailForwardingEnabled?: boolean;
    }

    /**
     * Used to enable or disable the custom Mail-From domain configuration for an email identity.
     */
    export interface EmailIdentityMailFromAttributes {
        /**
         * The action to take if the required MX record isn't found when you send an email. When you set this value to UseDefaultValue , the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage , the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email.
         */
        behaviorOnMxFailure?: string;
        /**
         * The custom MAIL FROM domain that you want the verified identity to use
         */
        mailFromDomain?: string;
    }

    /**
     * The content of the email, composed of a subject line, an HTML part, and a text-only part
     */
    export interface Template {
        /**
         * The HTML body of the email.
         */
        htmlPart?: string;
        /**
         * The subject line of the email.
         */
        subjectPart: string;
        /**
         * The name of the template.
         */
        templateName?: string;
        /**
         * The email body that is visible to recipients whose email clients do not display HTML content.
         */
        textPart?: string;
    }

    /**
     * Preferences regarding the Dashboard feature.
     */
    export interface VdmAttributesDashboardAttributes {
        /**
         * Whether emails sent from this account have engagement tracking enabled.
         */
        engagementMetrics?: string;
    }

    /**
     * Preferences regarding the Guardian feature.
     */
    export interface VdmAttributesGuardianAttributes {
        /**
         * Whether emails sent from this account have optimized delivery algorithm enabled.
         */
        optimizedSharedDelivery?: string;
    }

}

export namespace shield {
    /**
     * An emergency contact is used by Shield Response Team (SRT) to contact you for escalations to the SRT and to initiate proactive customer support. An emergency contact requires an email address.
     */
    export interface ProactiveEngagementEmergencyContact {
        /**
         * Additional notes regarding the contact.
         */
        contactNotes?: string;
        /**
         * The email address for the contact.
         */
        emailAddress: string;
        /**
         * The phone number for the contact
         */
        phoneNumber?: string;
    }

    /**
     * The automatic application layer DDoS mitigation settings for a Protection. This configuration determines whether Shield Advanced automatically manages rules in the web ACL in order to respond to application layer events that Shield Advanced determines to be DDoS attacks.
     */
    export interface ProtectionApplicationLayerAutomaticResponseConfiguration {
        /**
         * Specifies the action setting that Shield Advanced should use in the AWS WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the AWS WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource.
         */
        action: outputs.shield.ProtectionApplicationLayerAutomaticResponseConfigurationAction0Properties | outputs.shield.ProtectionApplicationLayerAutomaticResponseConfigurationAction1Properties;
        /**
         * Indicates whether automatic application layer DDoS mitigation is enabled for the protection.
         */
        status: enums.shield.ProtectionApplicationLayerAutomaticResponseConfigurationStatus;
    }

    /**
     * Specifies the action setting that Shield Advanced should use in the AWS WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the AWS WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource.
     */
    export interface ProtectionApplicationLayerAutomaticResponseConfigurationAction0Properties {
        /**
         * Specifies that Shield Advanced should configure its AWS WAF rules with the AWS WAF `Count` action.
         * You must specify exactly one action, either `Block` or `Count`.
         */
        count?: any;
    }

    /**
     * Specifies the action setting that Shield Advanced should use in the AWS WAF rules that it creates on behalf of the protected resource in response to DDoS attacks. You specify this as part of the configuration for the automatic application layer DDoS mitigation feature, when you enable or update automatic mitigation. Shield Advanced creates the AWS WAF rules in a Shield Advanced-managed rule group, inside the web ACL that you have associated with the resource.
     */
    export interface ProtectionApplicationLayerAutomaticResponseConfigurationAction1Properties {
        /**
         * Specifies that Shield Advanced should configure its AWS WAF rules with the AWS WAF `Block` action.
         * You must specify exactly one action, either `Block` or `Count`.
         */
        block?: any;
    }

}

export namespace signer {
    export interface SigningProfileSignatureValidityPeriod {
        /**
         * The time unit for signature validity: DAYS | MONTHS | YEARS.
         */
        type?: enums.signer.SigningProfileSignatureValidityPeriodType;
        /**
         * The numerical value of the time unit for signature validity.
         */
        value?: number;
    }

}

export namespace simspaceweaver {
    export interface SimulationS3Location {
        /**
         * The Schema S3 bucket name.
         */
        bucketName: string;
        /**
         * This is the schema S3 object key, which includes the full path of "folders" from the bucket root to the schema.
         */
        objectKey: string;
    }

}

export namespace sns {
    export interface TopicLoggingConfig {
        /**
         * The IAM role ARN to be used when logging failed message deliveries in Amazon CloudWatch.
         */
        failureFeedbackRoleArn?: string;
        /**
         * Indicates one of the supported protocols for the Amazon SNS topic.
         *
         * > At least one of the other three `LoggingConfig` properties is recommend along with `Protocol` .
         */
        protocol: enums.sns.TopicLoggingConfigProtocol;
        /**
         * The IAM role ARN to be used when logging successful message deliveries in Amazon CloudWatch.
         */
        successFeedbackRoleArn?: string;
        /**
         * The percentage of successful message deliveries to be logged in Amazon CloudWatch. Valid percentage values range from 0 to 100.
         */
        successFeedbackSampleRate?: string;
    }

    /**
     * ``Subscription`` is an embedded property that describes the subscription endpoints of an SNS topic.
     *   For full control over subscription behavior (for example, delivery policy, filtering, raw message delivery, and cross-region subscriptions), use the [AWS::SNS::Subscription](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html) resource.
     */
    export interface TopicSubscription {
        /**
         * The endpoint that receives notifications from the SNS topic. The endpoint value depends on the protocol that you specify. For more information, see the ``Endpoint`` parameter of the ``Subscribe`` action in the *API Reference*.
         */
        endpoint: string;
        /**
         * The subscription's protocol. For more information, see the ``Protocol`` parameter of the ``Subscribe`` action in the *API Reference*.
         */
        protocol: string;
    }

}

export namespace sqs {
}

export namespace ssm {
    export interface AssociationInstanceAssociationOutputLocation {
        /**
         * `S3OutputLocation` is a property of the [InstanceAssociationOutputLocation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ssm-association-instanceassociationoutputlocation.html) property that specifies an Amazon S3 bucket where you want to store the results of this request.
         */
        s3Location?: outputs.ssm.AssociationS3OutputLocation;
    }

    export interface AssociationS3OutputLocation {
        /**
         * The name of the S3 bucket.
         */
        outputS3BucketName?: string;
        /**
         * The S3 bucket subfolder.
         */
        outputS3KeyPrefix?: string;
        /**
         * The AWS Region of the S3 bucket.
         */
        outputS3Region?: string;
    }

    export interface AssociationTarget {
        /**
         * User-defined criteria for sending commands that target managed nodes that meet the criteria.
         */
        key: string;
        /**
         * User-defined criteria that maps to `Key` . For example, if you specified `tag:ServerRole` , you could specify `value:WebServer` to run a command on instances that include EC2 tags of `ServerRole,WebServer` .
         *
         * Depending on the type of target, the maximum number of values for a key might be lower than the global maximum of 50.
         */
        values: string[];
    }

    export interface DocumentAttachmentsSource {
        /**
         * The key of a key-value pair that identifies the location of an attachment to a document.
         */
        key?: enums.ssm.DocumentAttachmentsSourceKey;
        /**
         * The name of the document attachment file.
         */
        name?: string;
        /**
         * The value of a key-value pair that identifies the location of an attachment to a document. The format for Value depends on the type of key you specify.
         */
        values?: string[];
    }

    export interface DocumentRequires {
        /**
         * The name of the required SSM document. The name can be an Amazon Resource Name (ARN).
         */
        name?: string;
        /**
         * The document version required by the current document.
         */
        version?: string;
    }

    /**
     * Defines which patches should be included in a patch baseline.
     */
    export interface PatchBaselinePatchFilter {
        /**
         * The key for the filter.
         *
         * For information about valid keys, see [PatchFilter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html) in the *AWS Systems Manager API Reference* .
         */
        key?: enums.ssm.PatchBaselinePatchFilterKey;
        /**
         * The value for the filter key.
         *
         * For information about valid values for each key based on operating system type, see [PatchFilter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html) in the *AWS Systems Manager API Reference* .
         */
        values?: string[];
    }

    /**
     * The patch filter group that defines the criteria for the rule.
     */
    export interface PatchBaselinePatchFilterGroup {
        /**
         * The set of patch filters that make up the group.
         */
        patchFilters?: outputs.ssm.PatchBaselinePatchFilter[];
    }

    /**
     * Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.
     */
    export interface PatchBaselinePatchSource {
        /**
         * The value of the yum repo configuration. For example:
         *
         * `[main]`
         *
         * `name=MyCustomRepository`
         *
         * `baseurl=https://my-custom-repository`
         *
         * `enabled=1`
         *
         * > For information about other options available for your yum repository configuration, see [dnf.conf(5)](https://docs.aws.amazon.com/https://man7.org/linux/man-pages/man5/dnf.conf.5.html) .
         */
        configuration?: string;
        /**
         * The name specified to identify the patch source.
         */
        name?: string;
        /**
         * The specific operating system versions a patch repository applies to, such as "Ubuntu16.04", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists of supported product values, see [PatchFilter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html) in the *AWS Systems Manager API Reference* .
         */
        products?: string[];
    }

    /**
     * Defines an approval rule for a patch baseline.
     */
    export interface PatchBaselineRule {
        /**
         * The number of days after the release date of each patch matched by the rule that the patch is marked as approved in the patch baseline. For example, a value of `7` means that patches are approved seven days after they are released.
         *
         * You must specify a value for `ApproveAfterDays` .
         *
         * Exception: Not supported on Debian Server or Ubuntu Server.
         */
        approveAfterDays?: number;
        /**
         * The cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Not supported on Debian Server or Ubuntu Server.
         *
         * Enter dates in the format `YYYY-MM-DD` . For example, `2021-12-31` .
         */
        approveUntilDate?: string;
        /**
         * A compliance severity level for all approved patches in a patch baseline. Valid compliance severity levels include the following: `UNSPECIFIED` , `CRITICAL` , `HIGH` , `MEDIUM` , `LOW` , and `INFORMATIONAL` .
         */
        complianceLevel?: enums.ssm.PatchBaselineRuleComplianceLevel;
        /**
         * For managed nodes identified by the approval rule filters, enables a patch baseline to apply non-security updates available in the specified repository. The default value is `false` . Applies to Linux managed nodes only.
         */
        enableNonSecurity?: boolean;
        /**
         * The patch filter group that defines the criteria for the rule.
         */
        patchFilterGroup?: outputs.ssm.PatchBaselinePatchFilterGroup;
    }

    /**
     * A set of rules defining the approval rules for a patch baseline.
     */
    export interface PatchBaselineRuleGroup {
        /**
         * The rules that make up the rule group.
         */
        patchRules?: outputs.ssm.PatchBaselineRule[];
    }

    export interface ResourceDataSyncAwsOrganizationsSource {
        /**
         * If an AWS organization is present, this is either `OrganizationalUnits` or `EntireOrganization` . For `OrganizationalUnits` , the data is aggregated from a set of organization units. For `EntireOrganization` , the data is aggregated from the entire AWS organization.
         */
        organizationSourceType: string;
        /**
         * The AWS Organizations organization units included in the sync.
         */
        organizationalUnits?: string[];
    }

    export interface ResourceDataSyncS3Destination {
        /**
         * The name of the S3 bucket where the aggregated data is stored.
         */
        bucketName: string;
        /**
         * An Amazon S3 prefix for the bucket.
         */
        bucketPrefix?: string;
        /**
         * The AWS Region with the S3 bucket targeted by the resource data sync.
         */
        bucketRegion: string;
        /**
         * The ARN of an encryption key for a destination in Amazon S3. Must belong to the same Region as the destination S3 bucket.
         */
        kmsKeyArn?: string;
        /**
         * A supported sync format. The following format is currently supported: JsonSerDe
         */
        syncFormat: string;
    }

    export interface ResourceDataSyncSyncSource {
        /**
         * Information about the AwsOrganizationsSource resource data sync source. A sync source of this type can synchronize data from AWS Organizations .
         */
        awsOrganizationsSource?: outputs.ssm.ResourceDataSyncAwsOrganizationsSource;
        /**
         * Whether to automatically synchronize and aggregate data from new AWS Regions when those Regions come online.
         */
        includeFutureRegions?: boolean;
        /**
         * The `SyncSource` AWS Regions included in the resource data sync.
         */
        sourceRegions: string[];
        /**
         * The type of data source for the resource data sync. `SourceType` is either `AwsOrganizations` (if an organization is present in AWS Organizations ) or `SingleAccountMultiRegions` .
         */
        sourceType: string;
    }

}

export namespace ssmcontacts {
    /**
     * Information about the contact channel that SSM Incident Manager uses to engage the contact.
     */
    export interface ContactChannelTargetInfo {
        /**
         * The Amazon Resource Name (ARN) of the contact channel.
         */
        channelId: string;
        /**
         * The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
         */
        retryIntervalInMinutes: number;
    }

    /**
     * A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
     */
    export interface ContactStage {
        /**
         * The time to wait until beginning the next stage.
         */
        durationInMinutes?: number;
        /**
         * List of Rotation Ids to associate with Contact
         */
        rotationIds?: string[];
        /**
         * The contacts or contact methods that the escalation plan or engagement plan is engaging.
         */
        targets?: outputs.ssmcontacts.ContactTargets[];
    }

    /**
     * The contact that SSM Incident Manager is engaging during an incident.
     */
    export interface ContactTargetInfo {
        /**
         * The Amazon Resource Name (ARN) of the contact.
         */
        contactId: string;
        /**
         * A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
         */
        isEssential: boolean;
    }

    /**
     * The contacts or contact methods that the escalation plan or engagement plan is engaging.
     */
    export interface ContactTargets {
        /**
         * Information about the contact channel that Incident Manager engages.
         */
        channelTargetInfo?: outputs.ssmcontacts.ContactChannelTargetInfo;
        /**
         * The contact that Incident Manager is engaging during an incident.
         */
        contactTargetInfo?: outputs.ssmcontacts.ContactTargetInfo;
    }

    /**
     * Information about the contact channel that SSM Incident Manager uses to engage the contact.
     */
    export interface PlanChannelTargetInfo {
        /**
         * The Amazon Resource Name (ARN) of the contact channel.
         */
        channelId: string;
        /**
         * The number of minutes to wait to retry sending engagement in the case the engagement initially fails.
         */
        retryIntervalInMinutes: number;
    }

    /**
     * The contact that SSM Incident Manager is engaging during an incident.
     */
    export interface PlanContactTargetInfo {
        /**
         * The Amazon Resource Name (ARN) of the contact.
         */
        contactId: string;
        /**
         * A Boolean value determining if the contact's acknowledgement stops the progress of stages in the plan.
         */
        isEssential: boolean;
    }

    /**
     * A set amount of time that an escalation plan or engagement plan engages the specified contacts or contact methods.
     */
    export interface PlanStage {
        /**
         * The time to wait until beginning the next stage.
         */
        durationInMinutes: number;
        /**
         * The contacts or contact methods that the escalation plan or engagement plan is engaging.
         */
        targets?: outputs.ssmcontacts.PlanTargets[];
    }

    /**
     * The contacts or contact methods that the escalation plan or engagement plan is engaging.
     */
    export interface PlanTargets {
        /**
         * Information about the contact channel that Incident Manager engages.
         */
        channelTargetInfo?: outputs.ssmcontacts.PlanChannelTargetInfo;
        /**
         * Information about the contact that Incident Manager engages.
         */
        contactTargetInfo?: outputs.ssmcontacts.PlanContactTargetInfo;
    }

    /**
     * StartTime and EndTime for the Shift
     */
    export interface RotationCoverageTime {
        /**
         * Information about when an on-call rotation shift ends.
         */
        endTime: string;
        /**
         * Information about when an on-call rotation shift begins.
         */
        startTime: string;
    }

    /**
     * DayOfWeek for Month and HandOff Time for Monthly Recurring Rotation.
     */
    export interface RotationMonthlySetting {
        /**
         * The day of the month when monthly recurring on-call rotations begin.
         */
        dayOfMonth: number;
        /**
         * The time of day when a monthly recurring on-call shift rotation begins.
         */
        handOffTime: string;
    }

    /**
     * Information about when an on-call rotation is in effect and how long the rotation period lasts.
     */
    export interface RotationRecurrenceSettings {
        /**
         * Information about on-call rotations that recur daily.
         */
        dailySettings?: string[];
        /**
         * Information about on-call rotations that recur monthly.
         */
        monthlySettings?: outputs.ssmcontacts.RotationMonthlySetting[];
        /**
         * Number of Oncalls per shift.
         */
        numberOfOnCalls?: number;
        /**
         * The number of days, weeks, or months a single rotation lasts.
         */
        recurrenceMultiplier?: number;
        /**
         * Information about the days of the week included in on-call rotation coverage.
         */
        shiftCoverages?: outputs.ssmcontacts.RotationShiftCoverage[];
        /**
         * Information about on-call rotations that recur weekly.
         */
        weeklySettings?: outputs.ssmcontacts.RotationWeeklySetting[];
    }

    /**
     * Information about the days of the week included in on-call rotation coverage.
     */
    export interface RotationShiftCoverage {
        /**
         * Information about when an on-call shift begins and ends.
         */
        coverageTimes: outputs.ssmcontacts.RotationCoverageTime[];
        /**
         * A list of days on which the schedule is active.
         */
        dayOfWeek: enums.ssmcontacts.RotationDayOfWeek;
    }

    /**
     * DayOfWeek for Rotation and HandOff Time for Weekly Recurring Rotation.
     */
    export interface RotationWeeklySetting {
        /**
         * The day of the week when weekly recurring on-call shift rotations begins.
         */
        dayOfWeek: enums.ssmcontacts.RotationDayOfWeek;
        /**
         * The time of day when a weekly recurring on-call shift rotation begins.
         */
        handOffTime: string;
    }

}

export namespace ssmincidents {
    /**
     * The ReplicationSet regional configuration.
     */
    export interface ReplicationSetRegionConfiguration {
        sseKmsKeyId: string;
    }

    /**
     * The ReplicationSet regional configuration.
     */
    export interface ReplicationSetReplicationRegion {
        regionConfiguration?: outputs.ssmincidents.ReplicationSetRegionConfiguration;
        regionName?: string;
    }

    /**
     * The automation configuration to launch.
     */
    export interface ResponsePlanAction {
        /**
         * Details about the Systems Manager automation document that will be used as a runbook during an incident.
         */
        ssmAutomation?: outputs.ssmincidents.ResponsePlanSsmAutomation;
    }

    /**
     * The chat channel configuration.
     */
    export interface ResponsePlanChatChannel {
        /**
         * The Amazon SNS targets that AWS Chatbot uses to notify the chat channel of updates to an incident. You can also make updates to the incident through the chat channel by using the Amazon SNS topics
         */
        chatbotSns?: string[];
    }

    /**
     * A parameter with a dynamic value to set when starting the SSM automation document.
     */
    export interface ResponsePlanDynamicSsmParameter {
        /**
         * The key parameter to use when running the Systems Manager Automation runbook.
         */
        key: string;
        /**
         * The dynamic parameter value.
         */
        value: outputs.ssmincidents.ResponsePlanDynamicSsmParameterValue;
    }

    /**
     * Value of the dynamic parameter to set when starting the SSM automation document.
     */
    export interface ResponsePlanDynamicSsmParameterValue {
        /**
         * Variable dynamic parameters. A parameter value is determined when an incident is created.
         */
        variable?: enums.ssmincidents.ResponsePlanVariableType;
    }

    /**
     * The incident template configuration.
     */
    export interface ResponsePlanIncidentTemplate {
        /**
         * The deduplication string.
         */
        dedupeString?: string;
        /**
         * The impact value.
         */
        impact: number;
        /**
         * Tags that get applied to incidents created by the StartIncident API action.
         */
        incidentTags?: outputs.ssmincidents.ResponsePlanTag[];
        /**
         * The list of notification targets.
         */
        notificationTargets?: outputs.ssmincidents.ResponsePlanNotificationTargetItem[];
        /**
         * The summary string.
         */
        summary?: string;
        /**
         * The title string.
         */
        title: string;
    }

    export interface ResponsePlanIntegration {
        /**
         * Information about the PagerDuty service where the response plan creates an incident.
         */
        pagerDutyConfiguration?: outputs.ssmincidents.ResponsePlanPagerDutyConfiguration;
    }

    /**
     * A notification target.
     */
    export interface ResponsePlanNotificationTargetItem {
        /**
         * The Amazon Resource Name (ARN) of the Amazon SNS topic.
         */
        snsTopicArn?: string;
    }

    /**
     * The pagerDuty configuration to use when starting the incident.
     */
    export interface ResponsePlanPagerDutyConfiguration {
        /**
         * The name of the pagerDuty configuration.
         */
        name: string;
        /**
         * Details about the PagerDuty service associated with the configuration.
         */
        pagerDutyIncidentConfiguration: outputs.ssmincidents.ResponsePlanPagerDutyIncidentConfiguration;
        /**
         * The AWS secrets manager secretId storing the pagerDuty token.
         */
        secretId: string;
    }

    /**
     * The pagerDuty incident configuration.
     */
    export interface ResponsePlanPagerDutyIncidentConfiguration {
        /**
         * The pagerDuty serviceId.
         */
        serviceId: string;
    }

    /**
     * The configuration to use when starting the SSM automation document.
     */
    export interface ResponsePlanSsmAutomation {
        /**
         * The document name to use when starting the SSM automation document.
         */
        documentName: string;
        /**
         * The version of the document to use when starting the SSM automation document.
         */
        documentVersion?: string;
        /**
         * The parameters with dynamic values to set when starting the SSM automation document.
         */
        dynamicParameters?: outputs.ssmincidents.ResponsePlanDynamicSsmParameter[];
        /**
         * The parameters to set when starting the SSM automation document.
         */
        parameters?: outputs.ssmincidents.ResponsePlanSsmParameter[];
        /**
         * The role ARN to use when starting the SSM automation document.
         */
        roleArn: string;
        /**
         * The account type to use when starting the SSM automation document.
         */
        targetAccount?: enums.ssmincidents.ResponsePlanSsmAutomationTargetAccount;
    }

    /**
     * A parameter to set when starting the SSM automation document.
     */
    export interface ResponsePlanSsmParameter {
        /**
         * The key parameter to use when running the Automation runbook.
         */
        key: string;
        /**
         * The value parameter to use when running the Automation runbook.
         */
        values: string[];
    }

    /**
     * A key-value pair to tag a resource.
     */
    export interface ResponsePlanTag {
        /**
         * The tag key.
         */
        key: string;
        /**
         * The tag value.
         */
        value: string;
    }

}

export namespace sso {
    /**
     * A structure that describes the options for the access portal associated with an application
     */
    export interface ApplicationPortalOptionsConfiguration {
        /**
         * A structure that describes the sign-in options for the access portal
         */
        signInOptions?: outputs.sso.ApplicationSignInOptions;
        /**
         * Indicates whether this application is visible in the access portal
         */
        visibility?: enums.sso.ApplicationPortalOptionsConfigurationVisibility;
    }

    /**
     * A structure that describes the sign-in options for an application portal
     */
    export interface ApplicationSignInOptions {
        /**
         * The URL that accepts authentication requests for an application, this is a required parameter if the Origin parameter is APPLICATION
         */
        applicationUrl?: string;
        /**
         * This determines how IAM Identity Center navigates the user to the target application
         */
        origin: enums.sso.ApplicationSignInOptionsOrigin;
    }

    export interface InstanceAccessControlAttributeConfigurationAccessControlAttribute {
        key: string;
        value: outputs.sso.InstanceAccessControlAttributeConfigurationAccessControlAttributeValue;
    }

    export interface InstanceAccessControlAttributeConfigurationAccessControlAttributeValue {
        source: string[];
    }

    /**
     * The InstanceAccessControlAttributeConfiguration property has been deprecated but is still supported for backwards compatibility purposes. We recomend that you use  AccessControlAttributes property instead.
     */
    export interface InstanceAccessControlAttributeConfigurationProperties {
        accessControlAttributes: outputs.sso.InstanceAccessControlAttributeConfigurationAccessControlAttribute[];
    }

    export interface PermissionSetCustomerManagedPolicyReference {
        /**
         * The name of the IAM policy that you have configured in each account where you want to deploy your permission set.
         */
        name: string;
        /**
         * The path to the IAM policy that you have configured in each account where you want to deploy your permission set. The default is `/` . For more information, see [Friendly names and paths](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) in the *IAM User Guide* .
         */
        path?: string;
    }

    export interface PermissionSetPermissionsBoundary {
        /**
         * Specifies the name and path of a customer managed policy. You must have an IAM policy that matches the name and path in each AWS account where you want to deploy your permission set.
         */
        customerManagedPolicyReference?: outputs.sso.PermissionSetCustomerManagedPolicyReference;
        /**
         * The AWS managed policy ARN that you want to attach to a permission set as a permissions boundary.
         */
        managedPolicyArn?: string;
    }

}

export namespace stepfunctions {
    /**
     * The settings to enable gradual state machine deployments.
     */
    export interface StateMachineAliasDeploymentPreference {
        /**
         * A list of CloudWatch alarm names that will be monitored during the deployment. The deployment will fail and rollback if any alarms go into ALARM state.
         */
        alarms?: string[];
        /**
         * The time in minutes between each traffic shifting increment.
         */
        interval?: number;
        /**
         * The percentage of traffic to shift to the new version in each increment.
         */
        percentage?: number;
        /**
         * The Amazon Resource Name (ARN) of the [`AWS::StepFunctions::StateMachineVersion`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachineversion.html) resource that will be the final version to which the alias points to when the traffic shifting is complete.
         *
         * While performing gradual deployments, you can only provide a single state machine version ARN. To explicitly set version weights in a CloudFormation template, use `RoutingConfiguration` instead.
         */
        stateMachineVersionArn: string;
        /**
         * The type of deployment to perform.
         */
        type: enums.stepfunctions.StateMachineAliasDeploymentPreferenceType;
    }

    export interface StateMachineAliasRoutingConfigurationVersion {
        /**
         * The Amazon Resource Name (ARN) that identifies one or two state machine versions defined in the routing configuration.
         */
        stateMachineVersionArn: string;
        /**
         * The percentage of traffic you want to route to the state machine version. The sum of the weights in the routing configuration must be equal to 100.
         */
        weight: number;
    }

    export interface StateMachineCloudWatchLogsLogGroup {
        /**
         * The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with `:*`
         */
        logGroupArn?: string;
    }

    export interface StateMachineDefinition {
    }

    export interface StateMachineLogDestination {
        /**
         * An object describing a CloudWatch log group. For more information, see [AWS::Logs::LogGroup](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html) in the AWS CloudFormation User Guide.
         */
        cloudWatchLogsLogGroup?: outputs.stepfunctions.StateMachineCloudWatchLogsLogGroup;
    }

    export interface StateMachineLoggingConfiguration {
        /**
         * An array of objects that describes where your execution history events will be logged. Limited to size 1. Required, if your log level is not set to `OFF` .
         */
        destinations?: outputs.stepfunctions.StateMachineLogDestination[];
        /**
         * Determines whether execution data is included in your log. When set to `false` , data is excluded.
         */
        includeExecutionData?: boolean;
        /**
         * Defines which category of execution history events are logged.
         */
        level?: enums.stepfunctions.StateMachineLoggingConfigurationLevel;
    }

    export interface StateMachineS3Location {
        /**
         * The name of the S3 bucket where the state machine definition JSON or YAML file is stored.
         */
        bucket: string;
        /**
         * The name of the state machine definition file (Amazon S3 object name).
         */
        key: string;
        /**
         * For versioning-enabled buckets, a specific version of the state machine definition.
         */
        version?: string;
    }

    export interface StateMachineTracingConfiguration {
        /**
         * When set to `true` , X-Ray tracing is enabled.
         */
        enabled?: boolean;
    }

}

export namespace synthetics {
    export interface CanaryArtifactConfig {
        /**
         * Encryption configuration for uploading artifacts to S3
         */
        s3Encryption?: outputs.synthetics.CanaryS3Encryption;
    }

    export interface CanaryBaseScreenshot {
        /**
         * List of coordinates of rectangles to be ignored during visual testing
         */
        ignoreCoordinates?: string[];
        /**
         * Name of the screenshot to be used as base reference for visual testing
         */
        screenshotName: string;
    }

    export interface CanaryCode {
        /**
         * The entry point to use for the source code when running the canary. For canaries that use the `syn-python-selenium-1.0` runtime or a `syn-nodejs.puppeteer` runtime earlier than `syn-nodejs.puppeteer-3.4` , the handler must be specified as `*fileName* .handler` . For `syn-python-selenium-1.1` , `syn-nodejs.puppeteer-3.4` , and later runtimes, the handler can be specified as `*fileName* . *functionName*` , or you can specify a folder where canary scripts reside as `*folder* / *fileName* . *functionName*` .
         */
        handler: string;
        /**
         * If your canary script is located in S3, specify the bucket name here. The bucket must already exist.
         */
        s3Bucket?: string;
        /**
         * The S3 key of your script. For more information, see [Working with Amazon S3 Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingObjects.html) .
         */
        s3Key?: string;
        /**
         * The S3 version ID of your script.
         */
        s3ObjectVersion?: string;
        /**
         * If you input your canary script directly into the canary instead of referring to an S3 location, the value of this parameter is the script in plain text. It can be up to 5 MB.
         */
        script?: string;
        /**
         * The ARN of the Lambda layer where Synthetics stores the canary script code.
         */
        sourceLocationArn?: string;
    }

    export interface CanaryRunConfig {
        /**
         * Enable active tracing if set to true
         */
        activeTracing?: boolean;
        /**
         * Environment variable key-value pairs.
         */
        environmentVariables?: {[key: string]: string};
        /**
         * Provide maximum memory available for canary in MB
         */
        memoryInMb?: number;
        /**
         * Provide maximum canary timeout per run in seconds
         */
        timeoutInSeconds?: number;
    }

    export interface CanaryS3Encryption {
        /**
         * Encryption mode for encrypting artifacts when uploading to S3. Valid values: SSE_S3 and SSE_KMS.
         */
        encryptionMode?: string;
        /**
         * KMS key Arn for encrypting artifacts when uploading to S3. You must specify KMS key Arn for SSE_KMS encryption mode only.
         */
        kmsKeyArn?: string;
    }

    export interface CanarySchedule {
        /**
         * How long, in seconds, for the canary to continue making regular runs according to the schedule in the `Expression` value. If you specify 0, the canary continues making runs until you stop it. If you omit this field, the default of 0 is used.
         */
        durationInSeconds?: string;
        /**
         * A `rate` expression or a `cron` expression that defines how often the canary is to run.
         *
         * For a rate expression, The syntax is `rate( *number unit* )` . *unit* can be `minute` , `minutes` , or `hour` .
         *
         * For example, `rate(1 minute)` runs the canary once a minute, `rate(10 minutes)` runs it once every 10 minutes, and `rate(1 hour)` runs it once every hour. You can specify a frequency between `rate(1 minute)` and `rate(1 hour)` .
         *
         * Specifying `rate(0 minute)` or `rate(0 hour)` is a special value that causes the canary to run only once when it is started.
         *
         * Use `cron( *expression* )` to specify a cron expression. You can't schedule a canary to wait for more than a year before running. For information about the syntax for cron expressions, see [Scheduling canary runs using cron](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_cron.html) .
         */
        expression: string;
    }

    export interface CanaryVisualReference {
        /**
         * Canary run id to be used as base reference for visual testing
         */
        baseCanaryRunId: string;
        /**
         * List of screenshots used as base reference for visual testing
         */
        baseScreenshots?: outputs.synthetics.CanaryBaseScreenshot[];
    }

    export interface CanaryVpcConfig {
        /**
         * The IDs of the security groups for this canary.
         */
        securityGroupIds: string[];
        /**
         * The IDs of the subnets where this canary is to run.
         */
        subnetIds: string[];
        /**
         * The ID of the VPC where this canary is to run.
         */
        vpcId?: string;
    }

}

export namespace systemsmanagersap {
    export interface ApplicationCredential {
        /**
         * The type of the application credentials.
         */
        credentialType?: enums.systemsmanagersap.ApplicationCredentialCredentialType;
        /**
         * The name of the SAP HANA database.
         */
        databaseName?: string;
        /**
         * The secret ID created in AWS Secrets Manager to store the credentials of the SAP application.
         */
        secretId?: string;
    }

}

export namespace timestream {
    /**
     * Configuration for sending logs to customer account from the InfluxDB instance.
     */
    export interface LogDeliveryConfigurationProperties {
        /**
         * S3 configuration for sending logs to customer account from the InfluxDB instance.
         */
        s3Configuration: outputs.timestream.LogDeliveryConfigurationPropertiesS3ConfigurationProperties;
    }

    /**
     * S3 configuration for sending logs to customer account from the InfluxDB instance.
     */
    export interface LogDeliveryConfigurationPropertiesS3ConfigurationProperties {
        /**
         * The bucket name for logs to be sent from the InfluxDB instance
         */
        bucketName: string;
        /**
         * Specifies whether logging to customer specified bucket is enabled.
         */
        enabled: boolean;
    }

    /**
     * The properties that determine whether magnetic store writes are enabled.
     */
    export interface MagneticStoreWritePropertiesProperties {
        /**
         * Boolean flag indicating whether magnetic store writes are enabled.
         */
        enableMagneticStoreWrites: boolean;
        /**
         * Location to store information about records that were asynchronously rejected during magnetic store writes.
         */
        magneticStoreRejectedDataLocation?: outputs.timestream.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties;
    }

    /**
     * Location to store information about records that were asynchronously rejected during magnetic store writes.
     */
    export interface MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationProperties {
        /**
         * S3 configuration for location to store rejections from magnetic store writes
         */
        s3Configuration?: outputs.timestream.MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties;
    }

    /**
     * S3 configuration for location to store rejections from magnetic store writes
     */
    export interface MagneticStoreWritePropertiesPropertiesMagneticStoreRejectedDataLocationPropertiesS3ConfigurationProperties {
        /**
         * The bucket name used to store the data.
         */
        bucketName: string;
        /**
         * Either SSE_KMS or SSE_S3.
         */
        encryptionOption: string;
        /**
         * Must be provided if SSE_KMS is specified as the encryption option
         */
        kmsKeyId?: string;
        /**
         * String used to prefix all data in the bucket.
         */
        objectKeyPrefix?: string;
    }

    /**
     * The retention duration of the memory store and the magnetic store.
     */
    export interface RetentionPropertiesProperties {
        /**
         * The duration for which data must be stored in the magnetic store.
         */
        magneticStoreRetentionPeriodInDays?: string;
        /**
         * The duration for which data must be stored in the memory store.
         */
        memoryStoreRetentionPeriodInHours?: string;
    }

    /**
     * This type is used to map column(s) from the query result to a dimension in the destination table.
     */
    export interface ScheduledQueryDimensionMapping {
        dimensionValueType: enums.timestream.ScheduledQueryDimensionValueType;
        name: string;
    }

    /**
     * Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
     */
    export interface ScheduledQueryErrorReportConfiguration {
        /**
         * The S3 configuration for the error reports.
         */
        s3Configuration: outputs.timestream.ScheduledQueryS3Configuration;
    }

    /**
     * MixedMeasureMappings are mappings that can be used to ingest data into a mixture of narrow and multi measures in the derived table.
     */
    export interface ScheduledQueryMixedMeasureMapping {
        measureName?: string;
        measureValueType: enums.timestream.ScheduledQueryMixedMeasureMappingMeasureValueType;
        multiMeasureAttributeMappings?: outputs.timestream.ScheduledQueryMultiMeasureAttributeMapping[];
        sourceColumn?: string;
        targetMeasureName?: string;
    }

    /**
     * An attribute mapping to be used for mapping query results to ingest data for multi-measure attributes.
     */
    export interface ScheduledQueryMultiMeasureAttributeMapping {
        measureValueType: enums.timestream.ScheduledQueryMultiMeasureAttributeMappingMeasureValueType;
        sourceColumn: string;
        targetMultiMeasureAttributeName?: string;
    }

    /**
     * Only one of MixedMeasureMappings or MultiMeasureMappings is to be provided. MultiMeasureMappings can be used to ingest data as multi measures in the derived table.
     */
    export interface ScheduledQueryMultiMeasureMappings {
        /**
         * Required. Attribute mappings to be used for mapping query results to ingest data for multi-measure attributes.
         */
        multiMeasureAttributeMappings: outputs.timestream.ScheduledQueryMultiMeasureAttributeMapping[];
        /**
         * The name of the target multi-measure name in the derived table. This input is required when measureNameColumn is not provided. If MeasureNameColumn is provided, then value from that column will be used as multi-measure name.
         */
        targetMultiMeasureName?: string;
    }

    /**
     * Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
     */
    export interface ScheduledQueryNotificationConfiguration {
        /**
         * Details on SNS configuration.
         */
        snsConfiguration: outputs.timestream.ScheduledQuerySnsConfiguration;
    }

    /**
     * Details on S3 location for error reports that result from running a query.
     */
    export interface ScheduledQueryS3Configuration {
        /**
         * Name of the S3 bucket under which error reports will be created.
         */
        bucketName: string;
        /**
         * Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default.
         */
        encryptionOption?: enums.timestream.ScheduledQueryEncryptionOption;
        /**
         * Prefix for the error report key. Timestream by default adds the following prefix to the error report path.
         */
        objectKeyPrefix?: string;
    }

    /**
     * Configuration for when the scheduled query is executed.
     */
    export interface ScheduledQueryScheduleConfiguration {
        /**
         * An expression that denotes when to trigger the scheduled query run. This can be a cron expression or a rate expression.
         */
        scheduleExpression: string;
    }

    /**
     * SNS configuration for notification upon scheduled query execution.
     */
    export interface ScheduledQuerySnsConfiguration {
        /**
         * SNS topic ARN that the scheduled query status notifications will be sent to.
         */
        topicArn: string;
    }

    /**
     * Configuration of target store where scheduled query results are written to.
     */
    export interface ScheduledQueryTargetConfiguration {
        /**
         * Configuration needed to write data into the Timestream database and table.
         */
        timestreamConfiguration: outputs.timestream.ScheduledQueryTimestreamConfiguration;
    }

    /**
     * Configuration needed to write data into the Timestream database and table.
     */
    export interface ScheduledQueryTimestreamConfiguration {
        /**
         * Name of Timestream database to which the query result will be written.
         */
        databaseName: string;
        /**
         * This is to allow mapping column(s) from the query result to the dimension in the destination table.
         */
        dimensionMappings: outputs.timestream.ScheduledQueryDimensionMapping[];
        /**
         * Name of the measure column. Also see `MultiMeasureMappings` and `MixedMeasureMappings` for how measure name properties on those relate to `MeasureNameColumn` .
         */
        measureNameColumn?: string;
        /**
         * Specifies how to map measures to multi-measure records.
         */
        mixedMeasureMappings?: outputs.timestream.ScheduledQueryMixedMeasureMapping[];
        /**
         * Multi-measure mappings.
         */
        multiMeasureMappings?: outputs.timestream.ScheduledQueryMultiMeasureMappings;
        /**
         * Name of Timestream table that the query result will be written to. The table should be within the same database that is provided in Timestream configuration.
         */
        tableName: string;
        /**
         * Column from query result that should be used as the time column in destination table. Column type for this should be TIMESTAMP.
         */
        timeColumn: string;
    }

    /**
     * A Schema specifies the expected data model of the table.
     */
    export interface SchemaProperties {
        /**
         * A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed.
         */
        compositePartitionKey?: outputs.timestream.TablePartitionKey[];
    }

    /**
     * An attribute used in partitioning data in a table. There are two types of partition keys: dimension keys and measure keys. A dimension key partitions data on a dimension name, while a measure key partitions data on the measure name.
     */
    export interface TablePartitionKey {
        enforcementInRecord?: enums.timestream.TablePartitionKeyEnforcementLevel;
        name?: string;
        type: enums.timestream.TablePartitionKeyType;
    }

}

export namespace transfer {
    /**
     * Configuration for an AS2 connector.
     */
    export interface As2ConfigProperties {
        /**
         * ARN or name of the secret in AWS Secrets Manager which contains the credentials for Basic authentication. If empty, Basic authentication is disabled for the AS2 connector
         */
        basicAuthSecretId?: string;
        /**
         * Compression setting for this AS2 connector configuration.
         */
        compression?: enums.transfer.ConnectorAs2ConfigPropertiesCompression;
        /**
         * Encryption algorithm for this AS2 connector configuration.
         */
        encryptionAlgorithm?: enums.transfer.ConnectorAs2ConfigPropertiesEncryptionAlgorithm;
        /**
         * A unique identifier for the local profile.
         */
        localProfileId?: string;
        /**
         * MDN Response setting for this AS2 connector configuration.
         */
        mdnResponse?: enums.transfer.ConnectorAs2ConfigPropertiesMdnResponse;
        /**
         * MDN Signing algorithm for this AS2 connector configuration.
         */
        mdnSigningAlgorithm?: enums.transfer.ConnectorAs2ConfigPropertiesMdnSigningAlgorithm;
        /**
         * The message subject for this AS2 connector configuration.
         */
        messageSubject?: string;
        /**
         * A unique identifier for the partner profile.
         */
        partnerProfileId?: string;
        /**
         * Signing algorithm for this AS2 connector configuration.
         */
        signingAlgorithm?: enums.transfer.ConnectorAs2ConfigPropertiesSigningAlgorithm;
    }

    /**
     * Configuration for an SFTP connector.
     */
    export interface SftpConfigProperties {
        /**
         * List of public host keys, for the external server to which you are connecting.
         */
        trustedHostKeys?: string[];
        /**
         * ARN or name of the secret in AWS Secrets Manager which contains the SFTP user's private keys or passwords.
         */
        userSecretId?: string;
    }

    /**
     * Specifies the details for an EFS file.
     */
    export interface WorkflowEfsInputFileLocation {
        /**
         * Specifies the EFS filesystem that contains the file.
         */
        fileSystemId?: string;
        /**
         * The name assigned to the file when it was created in EFS. You use the object path to retrieve the object.
         */
        path?: string;
    }

    /**
     * Specifies the location for the file being decrypted. Only applicable for the Decrypt type of workflow steps.
     */
    export interface WorkflowInputFileLocation {
        efsFileLocation?: outputs.transfer.WorkflowEfsInputFileLocation;
        s3FileLocation?: outputs.transfer.WorkflowS3InputFileLocation;
    }

    /**
     * Specifies the location for the file being copied. Only applicable for the Copy type of workflow steps.
     */
    export interface WorkflowS3FileLocation {
        /**
         * Specifies the details for the file location for the file that's being used in the workflow. Only applicable if you are using Amazon S3 storage.
         */
        s3FileLocation?: outputs.transfer.WorkflowS3InputFileLocation;
    }

    /**
     * Specifies the details for a S3 file.
     */
    export interface WorkflowS3InputFileLocation {
        /**
         * Specifies the S3 bucket that contains the file.
         */
        bucket?: string;
        /**
         * The name assigned to the file when it was created in S3. You use the object key to retrieve the object.
         */
        key?: string;
    }

    /**
     * Specifies the key-value pair that are assigned to a file during the execution of a Tagging step.
     */
    export interface WorkflowS3Tag {
        /**
         * The name assigned to the tag that you create.
         */
        key: string;
        /**
         * The value that corresponds to the key.
         */
        value: string;
    }

    /**
     * The basic building block of a workflow.
     */
    export interface WorkflowStep {
        /**
         * Details for a step that performs a file copy.
         */
        copyStepDetails?: outputs.transfer.WorkflowStepCopyStepDetailsProperties;
        /**
         * Details for a step that invokes a lambda function.
         */
        customStepDetails?: outputs.transfer.WorkflowStepCustomStepDetailsProperties;
        /**
         * Details for a step that performs a file decryption.
         */
        decryptStepDetails?: outputs.transfer.WorkflowStepDecryptStepDetailsProperties;
        /**
         * Details for a step that deletes the file.
         */
        deleteStepDetails?: outputs.transfer.WorkflowStepDeleteStepDetailsProperties;
        /**
         * Details for a step that creates one or more tags.
         */
        tagStepDetails?: outputs.transfer.WorkflowStepTagStepDetailsProperties;
        type?: enums.transfer.WorkflowStepType;
    }

    /**
     * Details for a step that performs a file copy.
     */
    export interface WorkflowStepCopyStepDetailsProperties {
        destinationFileLocation?: outputs.transfer.WorkflowS3FileLocation;
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
         */
        overwriteExisting?: enums.transfer.WorkflowStepCopyStepDetailsPropertiesOverwriteExisting;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
    }

    /**
     * Details for a step that invokes a lambda function.
     */
    export interface WorkflowStepCustomStepDetailsProperties {
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
        /**
         * The ARN for the lambda function that is being called.
         */
        target?: string;
        /**
         * Timeout, in seconds, for the step.
         */
        timeoutSeconds?: number;
    }

    /**
     * Details for a step that performs a file decryption.
     */
    export interface WorkflowStepDecryptStepDetailsProperties {
        destinationFileLocation: outputs.transfer.WorkflowInputFileLocation;
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
         */
        overwriteExisting?: enums.transfer.WorkflowStepDecryptStepDetailsPropertiesOverwriteExisting;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
        /**
         * Specifies which encryption method to use.
         */
        type: enums.transfer.WorkflowStepDecryptStepDetailsPropertiesType;
    }

    /**
     * Details for a step that deletes the file.
     */
    export interface WorkflowStepDeleteStepDetailsProperties {
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
    }

    /**
     * Details for a step that creates one or more tags.
     */
    export interface WorkflowStepTagStepDetailsProperties {
        /**
         * The name of the step, used as an identifier.
         */
        name?: string;
        /**
         * Specifies which file to use as input to the workflow step.
         */
        sourceFileLocation?: string;
        /**
         * Array that contains from 1 to 10 key/value pairs.
         */
        tags?: outputs.transfer.WorkflowS3Tag[];
    }

}

export namespace verifiedpermissions {
    export interface IdentitySourceCognitoGroupConfiguration {
        groupEntityType: string;
    }

    export interface IdentitySourceCognitoUserPoolConfiguration {
        clientIds?: string[];
        groupConfiguration?: outputs.verifiedpermissions.IdentitySourceCognitoGroupConfiguration;
        userPoolArn: string;
    }

    export interface IdentitySourceConfigurationProperties {
        cognitoUserPoolConfiguration: outputs.verifiedpermissions.IdentitySourceCognitoUserPoolConfiguration;
    }

    export interface IdentitySourceDetails {
        clientIds?: string[];
        discoveryUrl?: string;
        openIdIssuer?: enums.verifiedpermissions.IdentitySourceOpenIdIssuer;
        userPoolArn?: string;
    }

    export interface PolicyDefinition0Properties {
        static: outputs.verifiedpermissions.PolicyStaticPolicyDefinition;
    }

    export interface PolicyDefinition1Properties {
        templateLinked: outputs.verifiedpermissions.PolicyTemplateLinkedPolicyDefinition;
    }

    export interface PolicyEntityIdentifier {
        entityId: string;
        entityType: string;
    }

    export interface PolicyStaticPolicyDefinition {
        description?: string;
        statement: string;
    }

    export interface PolicyStoreSchemaDefinition {
        /**
         * A JSON string representation of the schema supported by applications that use this policy store. For more information, see [Policy store schema](https://docs.aws.amazon.com/verifiedpermissions/latest/userguide/schema.html) in the *Amazon Verified Permissions User Guide* .
         */
        cedarJson?: string;
    }

    export interface PolicyStoreValidationSettings {
        /**
         * The validation mode currently configured for this policy store. The valid values are:
         *
         * - *OFF* – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.
         * - *STRICT* – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.
         *
         * > If `Mode=STRICT` and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against.
         * > 
         * > To submit a static policy or policy template without a schema, you must turn off validation.
         */
        mode: enums.verifiedpermissions.PolicyStoreValidationMode;
    }

    export interface PolicyTemplateLinkedPolicyDefinition {
        policyTemplateId: string;
        principal?: outputs.verifiedpermissions.PolicyEntityIdentifier;
        resource?: outputs.verifiedpermissions.PolicyEntityIdentifier;
    }

}

export namespace voiceid {
    export interface DomainServerSideEncryptionConfiguration {
        /**
         * The identifier of the KMS key to use to encrypt data stored by Voice ID. Voice ID doesn't support asymmetric customer managed keys.
         */
        kmsKeyId: string;
    }

}

export namespace vpclattice {
    export interface ListenerDefaultAction {
        /**
         * Describes an action that returns a custom HTTP response.
         */
        fixedResponse?: outputs.vpclattice.ListenerFixedResponse;
        /**
         * Describes a forward action. You can use forward actions to route requests to one or more target groups.
         */
        forward?: outputs.vpclattice.ListenerForward;
    }

    export interface ListenerFixedResponse {
        /**
         * The HTTP response code.
         */
        statusCode: number;
    }

    export interface ListenerForward {
        /**
         * The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.
         *
         * The default value is 1. This means that if only one target group is provided, there is no need to set the weight; 100% of the traffic goes to that target group.
         */
        targetGroups: outputs.vpclattice.ListenerWeightedTargetGroup[];
    }

    export interface ListenerWeightedTargetGroup {
        /**
         * The ID of the target group.
         */
        targetGroupIdentifier: string;
        /**
         * Only required if you specify multiple target groups for a forward action. The weight determines how requests are distributed to the target group. For example, if you specify two target groups, each with a weight of 10, each target group receives half the requests. If you specify two target groups, one with a weight of 10 and the other with a weight of 20, the target group with a weight of 20 receives twice as many requests as the other target group. If there's only one target group specified, then the default value is 100.
         */
        weight?: number;
    }

    export interface RuleAction {
        /**
         * The fixed response action. The rule returns a custom HTTP response.
         */
        fixedResponse?: outputs.vpclattice.RuleFixedResponse;
        /**
         * The forward action. Traffic that matches the rule is forwarded to the specified target groups.
         */
        forward?: outputs.vpclattice.RuleForward;
    }

    export interface RuleFixedResponse {
        /**
         * The HTTP response code.
         */
        statusCode: number;
    }

    export interface RuleForward {
        /**
         * The target groups. Traffic matching the rule is forwarded to the specified target groups. With forward actions, you can assign a weight that controls the prioritization and selection of each target group. This means that requests are distributed to individual target groups based on their weights. For example, if two target groups have the same weight, each target group receives half of the traffic.
         *
         * The default value is 1. This means that if only one target group is provided, there is no need to set the weight; 100% of the traffic goes to that target group.
         */
        targetGroups: outputs.vpclattice.RuleWeightedTargetGroup[];
    }

    export interface RuleHeaderMatch {
        /**
         * Indicates whether the match is case sensitive.
         */
        caseSensitive?: boolean;
        /**
         * The header match type.
         */
        match: outputs.vpclattice.RuleHeaderMatchType;
        /**
         * The name of the header.
         */
        name: string;
    }

    export interface RuleHeaderMatchType {
        /**
         * A contains type match.
         */
        contains?: string;
        /**
         * An exact type match.
         */
        exact?: string;
        /**
         * A prefix type match. Matches the value with the prefix.
         */
        prefix?: string;
    }

    export interface RuleHttpMatch {
        /**
         * The header matches. Matches incoming requests with rule based on request header value before applying rule action.
         */
        headerMatches?: outputs.vpclattice.RuleHeaderMatch[];
        /**
         * The HTTP method type.
         */
        method?: enums.vpclattice.RuleHttpMatchMethod;
        /**
         * The path match.
         */
        pathMatch?: outputs.vpclattice.RulePathMatch;
    }

    export interface RuleMatch {
        /**
         * The HTTP criteria that a rule must match.
         */
        httpMatch: outputs.vpclattice.RuleHttpMatch;
    }

    export interface RulePathMatch {
        /**
         * Indicates whether the match is case sensitive.
         */
        caseSensitive?: boolean;
        /**
         * The type of path match.
         */
        match: outputs.vpclattice.RulePathMatchType;
    }

    export interface RulePathMatchType {
        /**
         * An exact match of the path.
         */
        exact?: string;
        /**
         * A prefix match of the path.
         */
        prefix?: string;
    }

    export interface RuleWeightedTargetGroup {
        /**
         * The ID of the target group.
         */
        targetGroupIdentifier: string;
        /**
         * Only required if you specify multiple target groups for a forward action. The weight determines how requests are distributed to the target group. For example, if you specify two target groups, each with a weight of 10, each target group receives half the requests. If you specify two target groups, one with a weight of 10 and the other with a weight of 20, the target group with a weight of 20 receives twice as many requests as the other target group. If there's only one target group specified, then the default value is 100.
         */
        weight?: number;
    }

    export interface ServiceDnsEntry {
        /**
         * The domain name of the service.
         */
        domainName?: string;
        /**
         * The ID of the hosted zone.
         */
        hostedZoneId?: string;
    }

    export interface ServiceNetworkServiceAssociationDnsEntry {
        /**
         * The domain name of the service.
         */
        domainName?: string;
        /**
         * The ID of the hosted zone.
         */
        hostedZoneId?: string;
    }

    export interface TargetGroupConfig {
        /**
         * The health check configuration. Not supported if the target group type is `LAMBDA` or `ALB` .
         */
        healthCheck?: outputs.vpclattice.TargetGroupHealthCheckConfig;
        /**
         * The type of IP address used for the target group. Supported only if the target group type is `IP` . The default is `IPV4` .
         */
        ipAddressType?: enums.vpclattice.TargetGroupConfigIpAddressType;
        /**
         * The version of the event structure that your Lambda function receives. Supported only if the target group type is `LAMBDA` . The default is `V1` .
         */
        lambdaEventStructureVersion?: enums.vpclattice.TargetGroupConfigLambdaEventStructureVersion;
        /**
         * The port on which the targets are listening. For HTTP, the default is 80. For HTTPS, the default is 443. Not supported if the target group type is `LAMBDA` .
         */
        port?: number;
        /**
         * The protocol to use for routing traffic to the targets. The default is the protocol of the target group. Not supported if the target group type is `LAMBDA` .
         */
        protocol?: enums.vpclattice.TargetGroupConfigProtocol;
        /**
         * The protocol version. The default is `HTTP1` . Not supported if the target group type is `LAMBDA` .
         */
        protocolVersion?: enums.vpclattice.TargetGroupConfigProtocolVersion;
        /**
         * The ID of the VPC. Not supported if the target group type is `LAMBDA` .
         */
        vpcIdentifier?: string;
    }

    export interface TargetGroupHealthCheckConfig {
        /**
         * Indicates whether health checking is enabled.
         */
        enabled?: boolean;
        /**
         * The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
         */
        healthCheckIntervalSeconds?: number;
        /**
         * The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
         */
        healthCheckTimeoutSeconds?: number;
        /**
         * The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
         */
        healthyThresholdCount?: number;
        /**
         * The codes to use when checking for a successful response from a target.
         */
        matcher?: outputs.vpclattice.TargetGroupMatcher;
        /**
         * The destination for health checks on the targets. If the protocol version is `HTTP/1.1` or `HTTP/2` , specify a valid URI (for example, `/path?query` ). The default path is `/` . Health checks are not supported if the protocol version is `gRPC` , however, you can choose `HTTP/1.1` or `HTTP/2` and specify a valid URI.
         */
        path?: string;
        /**
         * The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
         */
        port?: number;
        /**
         * The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS` . The default is `HTTP` .
         */
        protocol?: enums.vpclattice.TargetGroupHealthCheckConfigProtocol;
        /**
         * The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2` .
         */
        protocolVersion?: enums.vpclattice.TargetGroupHealthCheckConfigProtocolVersion;
        /**
         * The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
         */
        unhealthyThresholdCount?: number;
    }

    export interface TargetGroupMatcher {
        /**
         * The HTTP code to use when checking for a successful response from a target.
         */
        httpCode: string;
    }

    export interface TargetGroupTarget {
        /**
         * The ID of the target. If the target group type is `INSTANCE` , this is an instance ID. If the target group type is `IP` , this is an IP address. If the target group type is `LAMBDA` , this is the ARN of a Lambda function. If the target group type is `ALB` , this is the ARN of an Application Load Balancer.
         */
        id: string;
        /**
         * The port on which the target is listening. For HTTP, the default is 80. For HTTPS, the default is 443.
         */
        port?: number;
    }

}

export namespace wafv2 {
    export interface LoggingConfigurationCondition {
        /**
         * A single action condition.
         */
        actionCondition?: outputs.wafv2.LoggingConfigurationConditionActionConditionProperties;
        /**
         * A single label name condition.
         */
        labelNameCondition?: outputs.wafv2.LoggingConfigurationConditionLabelNameConditionProperties;
    }

    /**
     * A single action condition.
     */
    export interface LoggingConfigurationConditionActionConditionProperties {
        /**
         * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
         */
        action: enums.wafv2.LoggingConfigurationConditionActionConditionPropertiesAction;
    }

    /**
     * A single label name condition.
     */
    export interface LoggingConfigurationConditionLabelNameConditionProperties {
        /**
         * The label name that a log record must contain in order to meet the condition. This must be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. 
         */
        labelName: string;
    }

    /**
     * A key-value pair to associate with a resource.
     */
    export interface LoggingConfigurationFieldToMatch {
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. 
         */
        method?: any;
        /**
         * Inspect the query string. This is the part of a URL that appears after a ? character, if any. 
         */
        queryString?: any;
        /**
         * Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
         */
        singleHeader?: outputs.wafv2.LoggingConfigurationFieldToMatchSingleHeaderProperties;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg. 
         */
        uriPath?: any;
    }

    /**
     * Inspect a single header. Provide the name of the header to inspect, for example, User-Agent or Referer. This setting isn't case sensitive.
     */
    export interface LoggingConfigurationFieldToMatchSingleHeaderProperties {
        /**
         * The name of the query header to inspect.
         */
        name: string;
    }

    export interface LoggingConfigurationFilter {
        /**
         * How to handle logs that satisfy the filter's conditions and requirement. 
         */
        behavior: enums.wafv2.LoggingConfigurationFilterBehavior;
        /**
         * Match conditions for the filter.
         */
        conditions: outputs.wafv2.LoggingConfigurationCondition[];
        /**
         * Logic to apply to the filtering conditions. You can specify that, in order to satisfy the filter, a log must match all conditions or must match at least one condition.
         */
        requirement: enums.wafv2.LoggingConfigurationFilterRequirement;
    }

    /**
     * Filtering that specifies which web requests are kept in the logs and which are dropped. You can filter on the rule action and on the web request labels that were applied by matching rules during web ACL evaluation.
     */
    export interface LoggingFilterProperties {
        /**
         * Default handling for logs that don't match any of the specified filtering conditions.
         */
        defaultBehavior: enums.wafv2.LoggingConfigurationLoggingFilterPropertiesDefaultBehavior;
        /**
         * The filters that you want to apply to the logs.
         */
        filters: outputs.wafv2.LoggingConfigurationFilter[];
    }

    /**
     * Allow traffic towards application.
     */
    export interface RuleGroupAllowAction {
        /**
         * Defines custom handling for the web request.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
         */
        customRequestHandling?: outputs.wafv2.RuleGroupCustomRequestHandling;
    }

    export interface RuleGroupAndStatement {
        /**
         * The statements to combine with AND logic. You can use any statements that can be nested.
         */
        statements: outputs.wafv2.RuleGroupStatement[];
    }

    /**
     * Block traffic towards application.
     */
    export interface RuleGroupBlockAction {
        /**
         * Defines a custom response for the web request.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
         */
        customResponse?: outputs.wafv2.RuleGroupCustomResponse;
    }

    /**
     * The body of a web request. This immediately follows the request headers.
     */
    export interface RuleGroupBody {
        /**
         * What AWS WAF should do if the body is larger than AWS WAF can inspect.
         *
         * AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
         *
         * - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
         * - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
         *
         * The options for oversize handling are the following:
         *
         * - `CONTINUE` - Inspect the available body contents normally, according to the rule inspection criteria.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         *
         * You can combine the `MATCH` or `NO_MATCH` settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit.
         *
         * Default: `CONTINUE`
         */
        oversizeHandling?: enums.wafv2.RuleGroupOversizeHandling;
    }

    /**
     * Byte Match statement.
     */
    export interface RuleGroupByteMatchStatement {
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        /**
         * The area within the portion of the web request that you want AWS WAF to search for `SearchString` . Valid values include the following:
         *
         * *CONTAINS*
         *
         * The specified part of the web request must include the value of `SearchString` , but the location doesn't matter.
         *
         * *CONTAINS_WORD*
         *
         * The specified part of the web request must include the value of `SearchString` , and `SearchString` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, `SearchString` must be a word, which means that both of the following are true:
         *
         * - `SearchString` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and `;BadBot` .
         * - `SearchString` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, `BadBot;` and `-BadBot;` .
         *
         * *EXACTLY*
         *
         * The value of the specified part of the web request must exactly match the value of `SearchString` .
         *
         * *STARTS_WITH*
         *
         * The value of `SearchString` must appear at the beginning of the specified part of the web request.
         *
         * *ENDS_WITH*
         *
         * The value of `SearchString` must appear at the end of the specified part of the web request.
         */
        positionalConstraint: enums.wafv2.RuleGroupPositionalConstraint;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `FieldToMatch` . The maximum length of the value is 200 bytes. For alphabetic characters A-Z and a-z, the value is case sensitive.
         *
         * Don't encode this string. Provide the value that you want AWS WAF to search for. AWS CloudFormation automatically base64 encodes the value for you.
         *
         * For example, suppose the value of `Type` is `HEADER` and the value of `Data` is `User-Agent` . If you want to search the `User-Agent` header for the value `BadBot` , you provide the string `BadBot` in the value of `SearchString` .
         *
         * You must specify either `SearchString` or `SearchStringBase64` in a `ByteMatchStatement` .
         */
        searchString?: string;
        /**
         * String to search for in a web request component, base64-encoded. If you don't want to encode the string, specify the unencoded value in `SearchString` instead.
         *
         * You must specify either `SearchString` or `SearchStringBase64` in a `ByteMatchStatement` .
         */
        searchStringBase64?: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Checks valid token exists with request.
     */
    export interface RuleGroupCaptchaAction {
        /**
         * Defines custom handling for the web request, used when the `CAPTCHA` inspection determines that the request's token is valid and unexpired.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
         */
        customRequestHandling?: outputs.wafv2.RuleGroupCustomRequestHandling;
    }

    export interface RuleGroupCaptchaConfig {
        /**
         * Determines how long a `CAPTCHA` timestamp in the token remains valid after the client successfully solves a `CAPTCHA` puzzle.
         */
        immunityTimeProperty?: outputs.wafv2.RuleGroupImmunityTimeProperty;
    }

    /**
     * Checks that the request has a valid token with an unexpired challenge timestamp and, if not, returns a browser challenge to the client.
     */
    export interface RuleGroupChallengeAction {
        /**
         * Defines custom handling for the web request, used when the challenge inspection determines that the request's token is valid and unexpired.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
         */
        customRequestHandling?: outputs.wafv2.RuleGroupCustomRequestHandling;
    }

    export interface RuleGroupChallengeConfig {
        /**
         * Determines how long a challenge timestamp in the token remains valid after the client successfully responds to a challenge.
         */
        immunityTimeProperty?: outputs.wafv2.RuleGroupImmunityTimeProperty;
    }

    /**
     * The pattern to look for in the request cookies.
     */
    export interface RuleGroupCookieMatchPattern {
        /**
         * Inspect all parts of the web request cookies.
         */
        all?: any;
        /**
         * Inspect only the cookies whose keys don't match any of the strings specified here.
         */
        excludedCookies?: string[];
        /**
         * Inspect only the cookies that have a key that matches one of the strings specified here.
         */
        includedCookies?: string[];
    }

    /**
     * Includes cookies of a web request.
     */
    export interface RuleGroupCookies {
        /**
         * The filter to use to identify the subset of cookies to inspect in a web request.
         *
         * You must specify exactly one setting: either `All` , `IncludedCookies` , or `ExcludedCookies` .
         *
         * Example JSON: `"MatchPattern": { "IncludedCookies": [ "session-id-time", "session-id" ] }`
         */
        matchPattern: outputs.wafv2.RuleGroupCookieMatchPattern;
        /**
         * The parts of the cookies to inspect with the rule inspection criteria. If you specify `ALL` , AWS WAF inspects both keys and values.
         *
         * `All` does not require a match to be found in the keys and a match to be found in the values. It requires a match to be found in the keys or the values or both. To require a match in the keys and in the values, use a logical `AND` statement to combine two match rules, one that inspects the keys and another that inspects the values.
         */
        matchScope: enums.wafv2.RuleGroupMapMatchScope;
        /**
         * What AWS WAF should do if the cookies of the request are more numerous or larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF .
         *
         * The options for oversize handling are the following:
         *
         * - `CONTINUE` - Inspect the available cookies normally, according to the rule inspection criteria.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        oversizeHandling: enums.wafv2.RuleGroupOversizeHandling;
    }

    /**
     * Count traffic towards application.
     */
    export interface RuleGroupCountAction {
        /**
         * Defines custom handling for the web request.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
         */
        customRequestHandling?: outputs.wafv2.RuleGroupCustomRequestHandling;
    }

    /**
     * HTTP header.
     */
    export interface RuleGroupCustomHttpHeader {
        /**
         * The name of the custom header.
         *
         * For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-` , to avoid confusion with the headers that are already in the request. For example, for the header name `sample` , AWS WAF inserts the header `x-amzn-waf-sample` .
         */
        name: string;
        /**
         * The value of the custom header.
         */
        value: string;
    }

    /**
     * Custom request handling.
     */
    export interface RuleGroupCustomRequestHandling {
        /**
         * Collection of HTTP headers.
         */
        insertHeaders: outputs.wafv2.RuleGroupCustomHttpHeader[];
    }

    /**
     * Custom response.
     */
    export interface RuleGroupCustomResponse {
        /**
         * Custom response body key.
         */
        customResponseBodyKey?: string;
        /**
         * The HTTP status code to return to the client.
         *
         * For a list of status codes that you can use in your custom responses, see [Supported status codes for custom response](https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html) in the *AWS WAF Developer Guide* .
         */
        responseCode: number;
        /**
         * Collection of HTTP headers.
         */
        responseHeaders?: outputs.wafv2.RuleGroupCustomHttpHeader[];
    }

    /**
     * Custom response body.
     */
    export interface RuleGroupCustomResponseBody {
        /**
         * The payload of the custom response.
         *
         * You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the `ContentType` setting.
         *
         * For information about the limits on count and size for custom request and response settings, see [AWS WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the *AWS WAF Developer Guide* .
         */
        content: string;
        /**
         * The type of content in the payload that you are defining in the `Content` string.
         */
        contentType: enums.wafv2.RuleGroupResponseContentType;
    }

    /**
     * Field of the request to match.
     */
    export interface RuleGroupFieldToMatch {
        /**
         * All query arguments of a web request.
         */
        allQueryArguments?: any;
        /**
         * Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form.
         *
         * AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
         *
         * - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
         * - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
         *
         * For information about how to handle oversized request bodies, see the `Body` object configuration.
         */
        body?: outputs.wafv2.RuleGroupBody;
        /**
         * Inspect the request cookies. You must configure scope and pattern matching filters in the `Cookies` object, to define the set of cookies and the parts of the cookies that AWS WAF inspects.
         *
         * Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize cookie content in the `Cookies` object. AWS WAF applies the pattern matching filters to the cookies that it receives from the underlying host service.
         */
        cookies?: outputs.wafv2.RuleGroupCookies;
        /**
         * Inspect the request headers. You must configure scope and pattern matching filters in the `Headers` object, to define the set of headers to and the parts of the headers that AWS WAF inspects.
         *
         * Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize header content in the `Headers` object. AWS WAF applies the pattern matching filters to the headers that it receives from the underlying host service.
         */
        headers?: outputs.wafv2.RuleGroupHeaders;
        /**
         * Match against the request's JA3 fingerprint. The JA3 fingerprint is a 32-character hash derived from the TLS Client Hello of an incoming request. This fingerprint serves as a unique identifier for the client's TLS configuration. AWS WAF calculates and logs this fingerprint for each request that has enough TLS Client Hello information for the calculation. Almost all web requests include this information.
         *
         * > You can use this choice only with a string match `ByteMatchStatement` with the `PositionalConstraint` set to `EXACTLY` . 
         *
         * You can obtain the JA3 fingerprint for client requests from the web ACL logs. If AWS WAF is able to calculate the fingerprint, it includes it in the logs. For information about the logging fields, see [Log fields](https://docs.aws.amazon.com/waf/latest/developerguide/logging-fields.html) in the *AWS WAF Developer Guide* .
         *
         * Provide the JA3 fingerprint string from the logs in your string match statement specification, to match with any future requests that have the same TLS configuration.
         */
        ja3Fingerprint?: outputs.wafv2.RuleGroupJa3Fingerprint;
        /**
         * Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form.
         *
         * AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
         *
         * - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
         * - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
         *
         * For information about how to handle oversized request bodies, see the `JsonBody` object configuration.
         */
        jsonBody?: outputs.wafv2.RuleGroupJsonBody;
        /**
         * The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: any;
        /**
         * The query string of a web request. This is the part of a URL that appears after a ? character, if any.
         */
        queryString?: any;
        /**
         * Inspect a single header. Provide the name of the header to inspect, for example, `User-Agent` or `Referer` . This setting isn't case sensitive.
         *
         * Example JSON: `"SingleHeader": { "Name": "haystack" }`
         *
         * Alternately, you can filter and inspect all headers with the `Headers` `FieldToMatch` setting.
         */
        singleHeader?: outputs.wafv2.RuleGroupFieldToMatchSingleHeaderProperties;
        /**
         * One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupFieldToMatchSingleQueryArgumentProperties;
        /**
         * The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
         */
        uriPath?: any;
    }

    /**
     * Inspect a single header. Provide the name of the header to inspect, for example, `User-Agent` or `Referer` . This setting isn't case sensitive.
     *
     * Example JSON: `"SingleHeader": { "Name": "haystack" }`
     *
     * Alternately, you can filter and inspect all headers with the `Headers` `FieldToMatch` setting.
     */
    export interface RuleGroupFieldToMatchSingleHeaderProperties {
        name: string;
    }

    /**
     * One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
     */
    export interface RuleGroupFieldToMatchSingleQueryArgumentProperties {
        name: string;
    }

    export interface RuleGroupForwardedIpConfiguration {
        /**
         * The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. 
         *
         * You can specify the following fallback behaviors:
         *
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        fallbackBehavior: enums.wafv2.RuleGroupForwardedIpConfigurationFallbackBehavior;
        /**
         * The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to `X-Forwarded-For` .
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
         */
        headerName: string;
    }

    export interface RuleGroupGeoMatchStatement {
        /**
         * An array of two-character country codes that you want to match against, for example, `[ "US", "CN" ]` , from the alpha-2 country ISO codes of the ISO 3166 international standard.
         *
         * When you use a geo match statement just for the region and country labels that it adds to requests, you still have to supply a country code for the rule to evaluate. In this case, you configure the rule to only count matching requests, but it will still generate logging and count metrics for any matches. You can reduce the logging and metrics that the rule produces by specifying a country that's unlikely to be a source of traffic to your site.
         */
        countryCodes?: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupForwardedIpConfiguration;
    }

    /**
     * The pattern to look for in the request headers.
     */
    export interface RuleGroupHeaderMatchPattern {
        /**
         * Inspect all parts of the web request headers.
         */
        all?: any;
        /**
         * Inspect only the headers whose keys don't match any of the strings specified here.
         */
        excludedHeaders?: string[];
        /**
         * Inspect only the headers that have a key that matches one of the strings specified here.
         */
        includedHeaders?: string[];
    }

    /**
     * Includes headers of a web request.
     */
    export interface RuleGroupHeaders {
        /**
         * The filter to use to identify the subset of headers to inspect in a web request.
         *
         * You must specify exactly one setting: either `All` , `IncludedHeaders` , or `ExcludedHeaders` .
         *
         * Example JSON: `"MatchPattern": { "ExcludedHeaders": [ "KeyToExclude1", "KeyToExclude2" ] }`
         */
        matchPattern: outputs.wafv2.RuleGroupHeaderMatchPattern;
        /**
         * The parts of the headers to match with the rule inspection criteria. If you specify `ALL` , AWS WAF inspects both keys and values.
         *
         * `All` does not require a match to be found in the keys and a match to be found in the values. It requires a match to be found in the keys or the values or both. To require a match in the keys and in the values, use a logical `AND` statement to combine two match rules, one that inspects the keys and another that inspects the values.
         */
        matchScope: enums.wafv2.RuleGroupMapMatchScope;
        /**
         * What AWS WAF should do if the headers of the request are more numerous or larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request headers when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers and at most 8 KB of header contents to AWS WAF .
         *
         * The options for oversize handling are the following:
         *
         * - `CONTINUE` - Inspect the available headers normally, according to the rule inspection criteria.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        oversizeHandling: enums.wafv2.RuleGroupOversizeHandling;
    }

    export interface RuleGroupImmunityTimeProperty {
        /**
         * The amount of time, in seconds, that a `CAPTCHA` or challenge timestamp is considered valid by AWS WAF . The default setting is 300.
         *
         * For the Challenge action, the minimum setting is 300.
         */
        immunityTime: number;
    }

    export interface RuleGroupIpSetForwardedIpConfiguration {
        /**
         * The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. 
         *
         * You can specify the following fallback behaviors:
         *
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        fallbackBehavior: enums.wafv2.RuleGroupIpSetForwardedIpConfigurationFallbackBehavior;
        /**
         * The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to `X-Forwarded-For` .
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
         */
        headerName: string;
        /**
         * The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be `10.1.1.1, 127.0.0.0, 10.10.10.10` where the first IP address identifies the original client and the rest identify proxies that the request went through.
         *
         * The options for this setting are the following:
         *
         * - FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP.
         * - LAST - Inspect the last IP address in the list of IP addresses in the header.
         * - ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, AWS WAF inspects the last 10.
         */
        position: enums.wafv2.RuleGroupIpSetForwardedIpConfigurationPosition;
    }

    export interface RuleGroupIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the `IPSet` that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupIpSetForwardedIpConfiguration;
    }

    /**
     * Includes the JA3 fingerprint of a web request.
     */
    export interface RuleGroupJa3Fingerprint {
        /**
         * The match status to assign to the web request if the request doesn't have a JA3 fingerprint.
         *
         * You can specify the following fallback behaviors:
         *
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        fallbackBehavior: enums.wafv2.RuleGroupJa3FingerprintFallbackBehavior;
    }

    /**
     * Inspect the request body as JSON. The request body immediately follows the request headers.
     */
    export interface RuleGroupJsonBody {
        /**
         * What AWS WAF should do if it fails to completely parse the JSON body. The options are the following:
         *
         * - `EVALUATE_AS_STRING` - Inspect the body as plain text. AWS WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         *
         * If you don't provide this setting, AWS WAF parses and evaluates the content only up to the first parsing failure that it encounters.
         *
         * AWS WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as invalid characters, duplicate keys, truncation, and any content whose root node isn't an object or an array.
         *
         * AWS WAF parses the JSON in the following examples as two valid key, value pairs:
         *
         * - Missing comma: `{"key1":"value1""key2":"value2"}`
         * - Missing colon: `{"key1":"value1","key2""value2"}`
         * - Extra colons: `{"key1"::"value1","key2""value2"}`
         */
        invalidFallbackBehavior?: enums.wafv2.RuleGroupBodyParsingFallbackBehavior;
        /**
         * The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria.
         */
        matchPattern: outputs.wafv2.RuleGroupJsonMatchPattern;
        /**
         * The parts of the JSON to match against using the `MatchPattern` . If you specify `ALL` , AWS WAF matches against keys and values.
         *
         * `All` does not require a match to be found in the keys and a match to be found in the values. It requires a match to be found in the keys or the values or both. To require a match in the keys and in the values, use a logical `AND` statement to combine two match rules, one that inspects the keys and another that inspects the values.
         */
        matchScope: enums.wafv2.RuleGroupJsonMatchScope;
        /**
         * What AWS WAF should do if the body is larger than AWS WAF can inspect.
         *
         * AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
         *
         * - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
         * - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
         *
         * The options for oversize handling are the following:
         *
         * - `CONTINUE` - Inspect the available body contents normally, according to the rule inspection criteria.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         *
         * You can combine the `MATCH` or `NO_MATCH` settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit.
         *
         * Default: `CONTINUE`
         */
        oversizeHandling?: enums.wafv2.RuleGroupOversizeHandling;
    }

    /**
     * The pattern to look for in the JSON body.
     */
    export interface RuleGroupJsonMatchPattern {
        /**
         * Inspect all parts of the web request's JSON body.
         */
        all?: any;
        /**
         * Match only the specified include paths. See also `MatchScope` in the `JsonBody` `FieldToMatch` specification.
         *
         * Provide the include paths using JSON Pointer syntax. For example, `"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * You must specify either this setting or the `All` setting, but not both.
         *
         * > Don't use this option to include all paths. Instead, use the `All` setting.
         */
        includedPaths?: string[];
    }

    export interface RuleGroupLabel {
        /**
         * The label string.
         */
        name: string;
    }

    export interface RuleGroupLabelMatchStatement {
        /**
         * The string to match against. The setting you provide for this depends on the match statement's `Scope` setting:
         *
         * - If the `Scope` indicates `LABEL` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.
         * - If the `Scope` indicates `NAMESPACE` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates.
         *
         * Labels are case sensitive and components of a label must be separated by colon, for example `NS1:NS2:name` .
         */
        key: string;
        /**
         * Specify whether you want to match using the label name or just the namespace.
         */
        scope: enums.wafv2.RuleGroupLabelMatchScope;
    }

    export interface RuleGroupLabelSummary {
        /**
         * An individual label specification.
         */
        name?: string;
    }

    export interface RuleGroupNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested.
         */
        statement: outputs.wafv2.RuleGroupStatement;
    }

    export interface RuleGroupOrStatement {
        /**
         * The statements to combine with OR logic. You can use any statements that can be nested.
         */
        statements: outputs.wafv2.RuleGroupStatement[];
    }

    export interface RuleGroupRateBasedStatement {
        /**
         * Setting that indicates how to aggregate the request counts.
         *
         * > Web requests that are missing any of the components specified in the aggregation keys are omitted from the rate-based rule evaluation and handling. 
         *
         * - `CONSTANT` - Count and limit the requests that match the rate-based rule's scope-down statement. With this option, the counted requests aren't further aggregated. The scope-down statement is the only specification used. When the count of all requests that satisfy the scope-down statement goes over the limit, AWS WAF applies the rule action to all requests that satisfy the scope-down statement.
         *
         * With this option, you must configure the `ScopeDownStatement` property.
         * - `CUSTOM_KEYS` - Aggregate the request counts using one or more web request components as the aggregate keys.
         *
         * With this option, you must specify the aggregate keys in the `CustomKeys` property.
         *
         * To aggregate on only the IP address or only the forwarded IP address, don't use custom keys. Instead, set the aggregate key type to `IP` or `FORWARDED_IP` .
         * - `FORWARDED_IP` - Aggregate the request counts on the first IP address in an HTTP header.
         *
         * With this option, you must specify the header to use in the `ForwardedIPConfig` property.
         *
         * To aggregate on a combination of the forwarded IP address with other aggregate keys, use `CUSTOM_KEYS` .
         * - `IP` - Aggregate the request counts on the IP address from the web request origin.
         *
         * To aggregate on a combination of the IP address with other aggregate keys, use `CUSTOM_KEYS` .
         */
        aggregateKeyType: enums.wafv2.RuleGroupRateBasedStatementAggregateKeyType;
        /**
         * Specifies the aggregate keys to use in a rate-base rule.
         */
        customKeys?: outputs.wafv2.RuleGroupRateBasedStatementCustomKey[];
        /**
         * The amount of time, in seconds, that AWS WAF should include in its request counts, looking back from the current time. For example, for a setting of 120, when AWS WAF checks the rate, it counts the requests for the 2 minutes immediately preceding the current time. Valid settings are 60, 120, 300, and 600.
         *
         * This setting doesn't determine how often AWS WAF checks the rate, but how far back it looks each time it checks. AWS WAF checks the rate about every 10 seconds.
         *
         * Default: `300` (5 minutes)
         */
        evaluationWindowSec?: number;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. 
         *
         * This is required if you specify a forwarded IP in the rule's aggregate key settings.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupForwardedIpConfiguration;
        /**
         * The limit on requests per 5-minute period for a single aggregation instance for the rate-based rule. If the rate-based statement includes a `ScopeDownStatement` , this limit is applied only to the requests that match the statement.
         *
         * Examples:
         *
         * - If you aggregate on just the IP address, this is the limit on requests from any single IP address.
         * - If you aggregate on the HTTP method and the query argument name "city", then this is the limit on requests for any single method, city pair.
         */
        limit: number;
        /**
         * An optional nested statement that narrows the scope of the web requests that are evaluated and managed by the rate-based statement. When you use a scope-down statement, the rate-based rule only tracks and rate limits requests that match the scope-down statement. You can use any nestable `Statement` in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.
         */
        scopeDownStatement?: outputs.wafv2.RuleGroupStatement;
    }

    /**
     * Specifies a single custom aggregate key for a rate-base rule.
     */
    export interface RuleGroupRateBasedStatementCustomKey {
        /**
         * Use the value of a cookie in the request as an aggregate key. Each distinct value in the cookie contributes to the aggregation instance. If you use a single cookie as your custom key, then each value fully defines an aggregation instance.
         */
        cookie?: outputs.wafv2.RuleGroupRateLimitCookie;
        /**
         * Use the first IP address in an HTTP header as an aggregate key. Each distinct forwarded IP address contributes to the aggregation instance.
         *
         * When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the forwarded IP address by specifying `FORWARDED_IP` in your rate-based statement's `AggregateKeyType` .
         *
         * With this option, you must specify the header to use in the rate-based rule's `ForwardedIPConfig` property.
         */
        forwardedIp?: outputs.wafv2.RuleGroupRateLimitForwardedIp;
        /**
         * Use the value of a header in the request as an aggregate key. Each distinct value in the header contributes to the aggregation instance. If you use a single header as your custom key, then each value fully defines an aggregation instance.
         */
        header?: outputs.wafv2.RuleGroupRateLimitHeader;
        /**
         * Use the request's HTTP method as an aggregate key. Each distinct HTTP method contributes to the aggregation instance. If you use just the HTTP method as your custom key, then each method fully defines an aggregation instance.
         */
        httpMethod?: outputs.wafv2.RuleGroupRateLimitHttpMethod;
        /**
         * Use the request's originating IP address as an aggregate key. Each distinct IP address contributes to the aggregation instance.
         *
         * When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the IP address by specifying `IP` in your rate-based statement's `AggregateKeyType` .
         */
        ip?: outputs.wafv2.RuleGroupRateLimitIp;
        /**
         * Use the specified label namespace as an aggregate key. Each distinct fully qualified label name that has the specified label namespace contributes to the aggregation instance. If you use just one label namespace as your custom key, then each label name fully defines an aggregation instance.
         *
         * This uses only labels that have been added to the request by rules that are evaluated before this rate-based rule in the web ACL.
         *
         * For information about label namespaces and names, see [Label syntax and naming requirements](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-label-requirements.html) in the *AWS WAF Developer Guide* .
         */
        labelNamespace?: outputs.wafv2.RuleGroupRateLimitLabelNamespace;
        /**
         * Use the specified query argument as an aggregate key. Each distinct value for the named query argument contributes to the aggregation instance. If you use a single query argument as your custom key, then each value fully defines an aggregation instance.
         */
        queryArgument?: outputs.wafv2.RuleGroupRateLimitQueryArgument;
        /**
         * Use the request's query string as an aggregate key. Each distinct string contributes to the aggregation instance. If you use just the query string as your custom key, then each string fully defines an aggregation instance.
         */
        queryString?: outputs.wafv2.RuleGroupRateLimitQueryString;
        /**
         * Use the request's URI path as an aggregate key. Each distinct URI path contributes to the aggregation instance. If you use just the URI path as your custom key, then each URI path fully defines an aggregation instance.
         */
        uriPath?: outputs.wafv2.RuleGroupRateLimitUriPath;
    }

    /**
     * Specifies a cookie as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitCookie {
        /**
         * The name of the cookie to use.
         */
        name: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Specifies the first IP address in an HTTP header as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitForwardedIp {
    }

    /**
     * Specifies a header as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitHeader {
        /**
         * The name of the header to use.
         */
        name: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Specifies the request's HTTP method as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitHttpMethod {
    }

    /**
     * Specifies the IP address in the web request as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitIp {
    }

    /**
     * Specifies a label namespace to use as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitLabelNamespace {
        /**
         * The namespace to use for aggregation.
         */
        namespace: string;
    }

    /**
     * Specifies a query argument in the request as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitQueryArgument {
        /**
         * The name of the query argument to use.
         */
        name: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Specifies the request's query string as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitQueryString {
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Specifies the request's URI Path as an aggregate key for a rate-based rule.
     */
    export interface RuleGroupRateLimitUriPath {
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    export interface RuleGroupRegexMatchStatement {
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        /**
         * The string representing the regular expression.
         */
        regexString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    export interface RuleGroupRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the `RegexPatternSet` that this statement references.
         */
        arn: string;
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Rule of RuleGroup that contains condition and action.
     */
    export interface RuleGroupRule {
        /**
         * The action that AWS WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting.
         */
        action?: outputs.wafv2.RuleGroupRuleAction;
        /**
         * Specifies how AWS WAF should handle `CAPTCHA` evaluations. If you don't specify this, AWS WAF uses the `CAPTCHA` configuration that's defined for the web ACL.
         */
        captchaConfig?: outputs.wafv2.RuleGroupCaptchaConfig;
        /**
         * Specifies how AWS WAF should handle `Challenge` evaluations. If you don't specify this, AWS WAF uses the challenge configuration that's defined for the web ACL.
         */
        challengeConfig?: outputs.wafv2.RuleGroupChallengeConfig;
        /**
         * The name of the rule.
         *
         * If you change the name of a `Rule` after you create it and you want the rule's metric name to reflect the change, update the metric name in the rule's `VisibilityConfig` settings. AWS WAF doesn't automatically update the metric name when you update the rule name.
         */
        name: string;
        /**
         * If you define more than one `Rule` in a `WebACL` , AWS WAF evaluates each request against the `Rules` in order based on the value of `Priority` . AWS WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.
         */
        priority: number;
        /**
         * Collection of Rule Labels.
         */
        ruleLabels?: outputs.wafv2.RuleGroupLabel[];
        /**
         * The AWS WAF processing statement for the rule, for example `ByteMatchStatement` or `SizeConstraintStatement` .
         */
        statement: outputs.wafv2.RuleGroupStatement;
        /**
         * Defines and enables Amazon CloudWatch metrics and web request sample collection.
         *
         * If you change the name of a `Rule` after you create it and you want the rule's metric name to reflect the change, update the metric name as well. AWS WAF doesn't automatically update the metric name.
         */
        visibilityConfig: outputs.wafv2.RuleGroupVisibilityConfig;
    }

    /**
     * Action taken when Rule matches its condition.
     */
    export interface RuleGroupRuleAction {
        /**
         * Instructs AWS WAF to allow the web request.
         */
        allow?: outputs.wafv2.RuleGroupAllowAction;
        /**
         * Instructs AWS WAF to block the web request.
         */
        block?: outputs.wafv2.RuleGroupBlockAction;
        /**
         * Specifies that AWS WAF should run a `CAPTCHA` check against the request:
         *
         * - If the request includes a valid, unexpired `CAPTCHA` token, AWS WAF allows the web request inspection to proceed to the next rule, similar to a `CountAction` .
         * - If the request doesn't include a valid, unexpired `CAPTCHA` token, AWS WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.
         *
         * AWS WAF generates a response that it sends back to the client, which includes the following:
         *
         * - The header `x-amzn-waf-action` with a value of `captcha` .
         * - The HTTP status code `405 Method Not Allowed` .
         * - If the request contains an `Accept` header with a value of `text/html` , the response includes a `CAPTCHA` challenge.
         *
         * You can configure the expiration time in the `CaptchaConfig` `ImmunityTimeProperty` setting at the rule and web ACL level. The rule setting overrides the web ACL setting.
         *
         * This action option is available for rules. It isn't available for web ACL default actions.
         */
        captcha?: outputs.wafv2.RuleGroupCaptchaAction;
        /**
         * Instructs AWS WAF to run a `Challenge` check against the web request.
         */
        challenge?: outputs.wafv2.RuleGroupChallengeAction;
        /**
         * Instructs AWS WAF to count the web request and then continue evaluating the request using the remaining rules in the web ACL.
         */
        count?: outputs.wafv2.RuleGroupCountAction;
    }

    /**
     * Size Constraint statement.
     */
    export interface RuleGroupSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting.
         */
        comparisonOperator: enums.wafv2.RuleGroupSizeConstraintStatementComparisonOperator;
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        /**
         * The size, in byte, to compare to the request part, after any transformations.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Sqli Match Statement.
     */
    export interface RuleGroupSqliMatchStatement {
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        /**
         * The sensitivity that you want AWS WAF to use to inspect for SQL injection attacks.
         *
         * `HIGH` detects more attacks, but might generate more false positives, especially if your web requests frequently contain unusual strings. For information about identifying and mitigating false positives, see [Testing and tuning](https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html) in the *AWS WAF Developer Guide* .
         *
         * `LOW` is generally a better choice for resources that already have other protections against SQL injection attacks or that have a low tolerance for false positives.
         *
         * Default: `LOW`
         */
        sensitivityLevel?: enums.wafv2.RuleGroupSensitivityLevel;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * First level statement that contains conditions, such as ByteMatch, SizeConstraint, etc
     */
    export interface RuleGroupStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. You provide more than one `Statement` within the `AndStatement` .
         */
        andStatement?: outputs.wafv2.RuleGroupAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want AWS WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the AWS WAF console and the developer guide, this is called a string match statement.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupByteMatchStatement;
        /**
         * A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match.
         *
         * - To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the `CountryCodes` array.
         * - Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed.
         *
         * AWS WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. AWS WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match `ForwardedIPConfig` .
         *
         * If you use the web request origin, the label formats are `awswaf:clientip:geo:region:<ISO country code>-<ISO region code>` and `awswaf:clientip:geo:country:<ISO country code>` .
         *
         * If you use a forwarded IP address, the label formats are `awswaf:forwardedip:geo:region:<ISO country code>-<ISO region code>` and `awswaf:forwardedip:geo:country:<ISO country code>` .
         *
         * For additional details, see [Geographic match rule statement](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html) in the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) .
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an `IPSet` that specifies the addresses you want to detect, then use the ARN of that set in this statement.
         *
         * Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupIpSetReferenceStatement;
        /**
         * A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL.
         *
         * The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, AWS WAF performs the search for labels that were added in the same context as the label match statement.
         */
        labelMatchStatement?: outputs.wafv2.RuleGroupLabelMatchStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. You provide one `Statement` within the `NotStatement` .
         */
        notStatement?: outputs.wafv2.RuleGroupNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. You provide more than one `Statement` within the `OrStatement` .
         */
        orStatement?: outputs.wafv2.RuleGroupOrStatement;
        /**
         * A rate-based rule counts incoming requests and rate limits requests when they are coming at too fast a rate. The rule categorizes requests according to your aggregation criteria, collects them into aggregation instances, and counts and rate limits the requests for each instance.
         *
         * > If you change any of these settings in a rule that's currently in use, the change resets the rule's rate limiting counts. This can pause the rule's rate limiting activities for up to a minute. 
         *
         * You can specify individual aggregation keys, like IP address or HTTP method. You can also specify aggregation key combinations, like IP address and HTTP method, or HTTP method, query argument, and cookie.
         *
         * Each unique set of values for the aggregation keys that you specify is a separate aggregation instance, with the value from each key contributing to the aggregation instance definition.
         *
         * For example, assume the rule evaluates web requests with the following IP address and HTTP method values:
         *
         * - IP address 10.1.1.1, HTTP method POST
         * - IP address 10.1.1.1, HTTP method GET
         * - IP address 127.0.0.0, HTTP method POST
         * - IP address 10.1.1.1, HTTP method GET
         *
         * The rule would create different aggregation instances according to your aggregation criteria, for example:
         *
         * - If the aggregation criteria is just the IP address, then each individual address is an aggregation instance, and AWS WAF counts requests separately for each. The aggregation instances and request counts for our example would be the following:
         *
         * - IP address 10.1.1.1: count 3
         * - IP address 127.0.0.0: count 1
         * - If the aggregation criteria is HTTP method, then each individual HTTP method is an aggregation instance. The aggregation instances and request counts for our example would be the following:
         *
         * - HTTP method POST: count 2
         * - HTTP method GET: count 2
         * - If the aggregation criteria is IP address and HTTP method, then each IP address and each HTTP method would contribute to the combined aggregation instance. The aggregation instances and request counts for our example would be the following:
         *
         * - IP address 10.1.1.1, HTTP method POST: count 1
         * - IP address 10.1.1.1, HTTP method GET: count 2
         * - IP address 127.0.0.0, HTTP method POST: count 1
         *
         * For any n-tuple of aggregation keys, each unique combination of values for the keys defines a separate aggregation instance, which AWS WAF counts and rate-limits individually.
         *
         * You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts and rate limits requests that match the nested statement. You can use this nested scope-down statement in conjunction with your aggregation key specifications or you can just count and rate limit all requests that match the scope-down statement, without additional aggregation. When you choose to just manage all requests that match a scope-down statement, the aggregation instance is singular for the rule.
         *
         * You cannot nest a `RateBasedStatement` inside another statement, for example inside a `NotStatement` or `OrStatement` . You can define a `RateBasedStatement` inside a web ACL and inside a rule group.
         *
         * For additional information about the options, see [Rate limiting web requests using rate-based rules](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rate-based-rules.html) in the *AWS WAF Developer Guide* .
         *
         * If you only aggregate on the individual IP address or forwarded IP address, you can retrieve the list of IP addresses that AWS WAF is currently rate limiting for a rule through the API call `GetRateBasedStatementManagedKeys` . This option is not available for other aggregation configurations.
         *
         * AWS WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by AWS WAF . If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by AWS WAF .
         */
        rateBasedStatement?: outputs.wafv2.RuleGroupRateBasedStatement;
        /**
         * A rule statement used to search web request components for a match against a single regular expression.
         */
        regexMatchStatement?: outputs.wafv2.RuleGroupRegexMatchStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. To use this, create a `RegexPatternSet` that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set.
         *
         * Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes.
         *
         * If you configure AWS WAF to inspect the request body, AWS WAF inspects only the number of bytes in the body up to the limit for the web ACL and protected resource type. If you know that the request body for your web requests should never exceed the inspection limit, you can use a size constraint statement to block requests that have a larger request body size. For more information about the inspection limits, see `Body` and `JsonBody` settings for the `FieldToMatch` data type.
         *
         * If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI `/logo.jpg` is nine characters long.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupSizeConstraintStatement;
        /**
         * A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupSqliMatchStatement;
        /**
         * A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupXssMatchStatement;
    }

    /**
     * Text Transformation on the Search String before match.
     */
    export interface RuleGroupTextTransformation {
        /**
         * Sets the relative processing order for multiple transformations. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different.
         */
        priority: number;
        /**
         * For detailed descriptions of each of the transformation types, see [Text transformations](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-transformation.html) in the *AWS WAF Developer Guide* .
         */
        type: enums.wafv2.RuleGroupTextTransformationType;
    }

    /**
     * Visibility Metric of the RuleGroup.
     */
    export interface RuleGroupVisibilityConfig {
        /**
         * Indicates whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics) in the *AWS WAF Developer Guide* .
         *
         * For web ACLs, the metrics are for web requests that have the web ACL default action applied. AWS WAF applies the default action to web requests that pass the inspection of all rules in the web ACL without being either allowed or blocked. For more information,
         * see [The web ACL default action](https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-default-action.html) in the *AWS WAF Developer Guide* .
         */
        cloudWatchMetricsEnabled: boolean;
        /**
         * A name of the Amazon CloudWatch metric dimension. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names that are reserved for AWS WAF , for example `All` and `Default_Action` .
         */
        metricName: string;
        /**
         * Indicates whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
         *
         * > Request sampling doesn't provide a field redaction option, and any field redaction that you specify in your logging configuration doesn't affect sampling. The only way to exclude fields from request sampling is by disabling sampling in the web ACL visibility configuration.
         */
        sampledRequestsEnabled: boolean;
    }

    /**
     * Xss Match Statement.
     */
    export interface RuleGroupXssMatchStatement {
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.RuleGroupFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.RuleGroupTextTransformation[];
    }

    /**
     * Allow traffic towards application.
     */
    export interface WebAclAllowAction {
        /**
         * Defines custom handling for the web request.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
         */
        customRequestHandling?: outputs.wafv2.WebAclCustomRequestHandling;
    }

    export interface WebAclAndStatement {
        /**
         * The statements to combine with AND logic. You can use any statements that can be nested.
         */
        statements: outputs.wafv2.WebAclStatement[];
    }

    /**
     * AssociationConfig for body inspection
     */
    export interface WebAclAssociationConfig {
        /**
         * Customizes the maximum size of the request body that your protected CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access resources forward to AWS WAF for inspection. The default size is 16 KB (16,384 bytes). You can change the setting for any of the available resource types.
         *
         * > You are charged additional fees when your protected resources forward body sizes that are larger than the default. For more information, see [AWS WAF Pricing](https://docs.aws.amazon.com/waf/pricing/) . 
         *
         * Example JSON: `{ "API_GATEWAY": "KB_48", "APP_RUNNER_SERVICE": "KB_32" }`
         *
         * For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
         */
        requestBody?: {[key: string]: outputs.wafv2.WebAclRequestBodyAssociatedResourceTypeConfig};
    }

    /**
     * Configures how to use the Account creation fraud prevention managed rule group in the web ACL
     */
    export interface WebAclAwsManagedRulesAcfpRuleSet {
        /**
         * The path of the account creation endpoint for your application. This is the page on your website that accepts the completed registration form for a new user. This page must accept `POST` requests.
         *
         * For example, for the URL `https://example.com/web/newaccount` , you would provide the path `/web/newaccount` . Account creation page paths that start with the path that you provide are considered a match. For example `/web/newaccount` matches the account creation paths `/web/newaccount` , `/web/newaccount/` , `/web/newaccountPage` , and `/web/newaccount/thisPage` , but doesn't match the path `/home/web/newaccount` or `/website/newaccount` .
         */
        creationPath: string;
        /**
         * Allow the use of regular expressions in the registration page path and the account creation path.
         */
        enableRegexInPath?: boolean;
        /**
         * The path of the account registration endpoint for your application. This is the page on your website that presents the registration form to new users.
         *
         * > This page must accept `GET` text/html requests. 
         *
         * For example, for the URL `https://example.com/web/registration` , you would provide the path `/web/registration` . Registration page paths that start with the path that you provide are considered a match. For example `/web/registration` matches the registration paths `/web/registration` , `/web/registration/` , `/web/registrationPage` , and `/web/registration/thisPage` , but doesn't match the path `/home/web/registration` or `/website/registration` .
         */
        registrationPagePath: string;
        /**
         * The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts.
         */
        requestInspection: outputs.wafv2.WebAclRequestInspectionAcfp;
        /**
         * The criteria for inspecting responses to account creation requests, used by the ACFP rule group to track account creation success rates.
         *
         * > Response inspection is available only in web ACLs that protect Amazon CloudFront distributions. 
         *
         * The ACFP rule group evaluates the responses that your protected resources send back to client account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many successful account creation attempts in a short amount of time.
         */
        responseInspection?: outputs.wafv2.WebAclResponseInspection;
    }

    /**
     * Configures how to use the Account Takeover Prevention managed rule group in the web ACL
     */
    export interface WebAclAwsManagedRulesAtpRuleSet {
        /**
         * Allow the use of regular expressions in the login page path.
         */
        enableRegexInPath?: boolean;
        /**
         * The path of the login endpoint for your application. For example, for the URL `https://example.com/web/login` , you would provide the path `/web/login` . Login paths that start with the path that you provide are considered a match. For example `/web/login` matches the login paths `/web/login` , `/web/login/` , `/web/loginPage` , and `/web/login/thisPage` , but doesn't match the login path `/home/web/login` or `/website/login` .
         *
         * The rule group inspects only HTTP `POST` requests to your specified login endpoint.
         */
        loginPath: string;
        /**
         * The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage.
         */
        requestInspection?: outputs.wafv2.WebAclRequestInspection;
        /**
         * The criteria for inspecting responses to login requests, used by the ATP rule group to track login failure rates.
         *
         * > Response inspection is available only in web ACLs that protect Amazon CloudFront distributions. 
         *
         * The ATP rule group evaluates the responses that your protected resources send back to client login attempts, keeping count of successful and failed attempts for each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many failed login attempts in a short amount of time.
         */
        responseInspection?: outputs.wafv2.WebAclResponseInspection;
    }

    /**
     * Configures how to use the Bot Control managed rule group in the web ACL
     */
    export interface WebAclAwsManagedRulesBotControlRuleSet {
        /**
         * Applies only to the targeted inspection level.
         *
         * Determines whether to use machine learning (ML) to analyze your web traffic for bot-related activity. Machine learning is required for the Bot Control rules `TGT_ML_CoordinatedActivityLow` and `TGT_ML_CoordinatedActivityMedium` , which
         * inspect for anomalous behavior that might indicate distributed, coordinated bot activity.
         *
         * For more information about this choice, see the listing for these rules in the table at [Bot Control rules listing](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html#aws-managed-rule-groups-bot-rules) in the *AWS WAF Developer Guide* .
         *
         * Default: `TRUE`
         */
        enableMachineLearning?: boolean;
        /**
         * The inspection level to use for the Bot Control rule group. The common level is the least expensive. The targeted level includes all common level rules and adds rules with more advanced inspection criteria. For details, see [AWS WAF Bot Control rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html) in the *AWS WAF Developer Guide* .
         */
        inspectionLevel: enums.wafv2.WebAclAwsManagedRulesBotControlRuleSetInspectionLevel;
    }

    /**
     * Block traffic towards application.
     */
    export interface WebAclBlockAction {
        /**
         * Defines a custom response for the web request.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
         */
        customResponse?: outputs.wafv2.WebAclCustomResponse;
    }

    /**
     * The body of a web request. This immediately follows the request headers.
     */
    export interface WebAclBody {
        /**
         * What AWS WAF should do if the body is larger than AWS WAF can inspect.
         *
         * AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
         *
         * - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
         * - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
         *
         * The options for oversize handling are the following:
         *
         * - `CONTINUE` - Inspect the available body contents normally, according to the rule inspection criteria.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         *
         * You can combine the `MATCH` or `NO_MATCH` settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit.
         *
         * Default: `CONTINUE`
         */
        oversizeHandling?: enums.wafv2.WebAclOversizeHandling;
    }

    /**
     * Byte Match statement.
     */
    export interface WebAclByteMatchStatement {
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        /**
         * The area within the portion of the web request that you want AWS WAF to search for `SearchString` . Valid values include the following:
         *
         * *CONTAINS*
         *
         * The specified part of the web request must include the value of `SearchString` , but the location doesn't matter.
         *
         * *CONTAINS_WORD*
         *
         * The specified part of the web request must include the value of `SearchString` , and `SearchString` must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, `SearchString` must be a word, which means that both of the following are true:
         *
         * - `SearchString` is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and `;BadBot` .
         * - `SearchString` is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, `BadBot;` and `-BadBot;` .
         *
         * *EXACTLY*
         *
         * The value of the specified part of the web request must exactly match the value of `SearchString` .
         *
         * *STARTS_WITH*
         *
         * The value of `SearchString` must appear at the beginning of the specified part of the web request.
         *
         * *ENDS_WITH*
         *
         * The value of `SearchString` must appear at the end of the specified part of the web request.
         */
        positionalConstraint: enums.wafv2.WebAclPositionalConstraint;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `FieldToMatch` . The maximum length of the value is 200 bytes. For alphabetic characters A-Z and a-z, the value is case sensitive.
         *
         * Don't encode this string. Provide the value that you want AWS WAF to search for. AWS CloudFormation automatically base64 encodes the value for you.
         *
         * For example, suppose the value of `Type` is `HEADER` and the value of `Data` is `User-Agent` . If you want to search the `User-Agent` header for the value `BadBot` , you provide the string `BadBot` in the value of `SearchString` .
         *
         * You must specify either `SearchString` or `SearchStringBase64` in a `ByteMatchStatement` .
         */
        searchString?: string;
        /**
         * String to search for in a web request component, base64-encoded. If you don't want to encode the string, specify the unencoded value in `SearchString` instead.
         *
         * You must specify either `SearchString` or `SearchStringBase64` in a `ByteMatchStatement` .
         */
        searchStringBase64?: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Checks valid token exists with request.
     */
    export interface WebAclCaptchaAction {
        /**
         * Defines custom handling for the web request, used when the `CAPTCHA` inspection determines that the request's token is valid and unexpired.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
         */
        customRequestHandling?: outputs.wafv2.WebAclCustomRequestHandling;
    }

    export interface WebAclCaptchaConfig {
        /**
         * Determines how long a `CAPTCHA` timestamp in the token remains valid after the client successfully solves a `CAPTCHA` puzzle.
         */
        immunityTimeProperty?: outputs.wafv2.WebAclImmunityTimeProperty;
    }

    /**
     * Checks that the request has a valid token with an unexpired challenge timestamp and, if not, returns a browser challenge to the client.
     */
    export interface WebAclChallengeAction {
        /**
         * Defines custom handling for the web request, used when the challenge inspection determines that the request's token is valid and unexpired.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the [AWS WAF developer guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) .
         */
        customRequestHandling?: outputs.wafv2.WebAclCustomRequestHandling;
    }

    export interface WebAclChallengeConfig {
        /**
         * Determines how long a challenge timestamp in the token remains valid after the client successfully responds to a challenge.
         */
        immunityTimeProperty?: outputs.wafv2.WebAclImmunityTimeProperty;
    }

    /**
     * The pattern to look for in the request cookies.
     */
    export interface WebAclCookieMatchPattern {
        /**
         * Inspect all parts of the web request cookies.
         */
        all?: any;
        /**
         * Inspect only the cookies whose keys don't match any of the strings specified here.
         */
        excludedCookies?: string[];
        /**
         * Inspect only the cookies that have a key that matches one of the strings specified here.
         */
        includedCookies?: string[];
    }

    /**
     * Includes cookies of a web request.
     */
    export interface WebAclCookies {
        /**
         * The filter to use to identify the subset of cookies to inspect in a web request.
         *
         * You must specify exactly one setting: either `All` , `IncludedCookies` , or `ExcludedCookies` .
         *
         * Example JSON: `"MatchPattern": { "IncludedCookies": [ "session-id-time", "session-id" ] }`
         */
        matchPattern: outputs.wafv2.WebAclCookieMatchPattern;
        /**
         * The parts of the cookies to inspect with the rule inspection criteria. If you specify `ALL` , AWS WAF inspects both keys and values.
         *
         * `All` does not require a match to be found in the keys and a match to be found in the values. It requires a match to be found in the keys or the values or both. To require a match in the keys and in the values, use a logical `AND` statement to combine two match rules, one that inspects the keys and another that inspects the values.
         */
        matchScope: enums.wafv2.WebAclMapMatchScope;
        /**
         * What AWS WAF should do if the cookies of the request are more numerous or larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to AWS WAF .
         *
         * The options for oversize handling are the following:
         *
         * - `CONTINUE` - Inspect the available cookies normally, according to the rule inspection criteria.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        oversizeHandling: enums.wafv2.WebAclOversizeHandling;
    }

    /**
     * Allow traffic towards application.
     */
    export interface WebAclCountAction {
        /**
         * Defines custom handling for the web request.
         *
         * For information about customizing web requests and responses, see [Customizing web requests and responses in AWS WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html) in the *AWS WAF Developer Guide* .
         */
        customRequestHandling?: outputs.wafv2.WebAclCustomRequestHandling;
    }

    /**
     * HTTP header.
     */
    export interface WebAclCustomHttpHeader {
        /**
         * The name of the custom header.
         *
         * For custom request header insertion, when AWS WAF inserts the header into the request, it prefixes this name `x-amzn-waf-` , to avoid confusion with the headers that are already in the request. For example, for the header name `sample` , AWS WAF inserts the header `x-amzn-waf-sample` .
         */
        name: string;
        /**
         * The value of the custom header.
         */
        value: string;
    }

    /**
     * Custom request handling.
     */
    export interface WebAclCustomRequestHandling {
        /**
         * Collection of HTTP headers.
         */
        insertHeaders: outputs.wafv2.WebAclCustomHttpHeader[];
    }

    /**
     * Custom response.
     */
    export interface WebAclCustomResponse {
        /**
         * Custom response body key.
         */
        customResponseBodyKey?: string;
        /**
         * The HTTP status code to return to the client.
         *
         * For a list of status codes that you can use in your custom responses, see [Supported status codes for custom response](https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html) in the *AWS WAF Developer Guide* .
         */
        responseCode: number;
        /**
         * Collection of HTTP headers.
         */
        responseHeaders?: outputs.wafv2.WebAclCustomHttpHeader[];
    }

    /**
     * Custom response body.
     */
    export interface WebAclCustomResponseBody {
        /**
         * The payload of the custom response.
         *
         * You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the `ContentType` setting.
         *
         * For information about the limits on count and size for custom request and response settings, see [AWS WAF quotas](https://docs.aws.amazon.com/waf/latest/developerguide/limits.html) in the *AWS WAF Developer Guide* .
         */
        content: string;
        /**
         * The type of content in the payload that you are defining in the `Content` string.
         */
        contentType: enums.wafv2.WebAclResponseContentType;
    }

    /**
     * Default Action WebACL will take against ingress traffic when there is no matching Rule.
     */
    export interface WebAclDefaultAction {
        /**
         * Specifies that AWS WAF should allow requests by default.
         */
        allow?: outputs.wafv2.WebAclAllowAction;
        /**
         * Specifies that AWS WAF should block requests by default.
         */
        block?: outputs.wafv2.WebAclBlockAction;
    }

    /**
     * Excluded Rule in the RuleGroup or ManagedRuleGroup will not be evaluated.
     */
    export interface WebAclExcludedRule {
        /**
         * The name of the rule whose action you want to override to `Count` .
         */
        name: string;
    }

    export interface WebAclFieldIdentifier {
        /**
         * The name of the field.
         *
         * When the `PayloadType` in the request inspection is `JSON` , this identifier must be in JSON pointer syntax. For example `/form/username` . For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * When the `PayloadType` is `FORM_ENCODED` , use the HTML form names. For example, `username` .
         *
         * For more information, see the descriptions for each field type in the request inspection properties.
         */
        identifier: string;
    }

    /**
     * Field of the request to match.
     */
    export interface WebAclFieldToMatch {
        /**
         * All query arguments of a web request.
         */
        allQueryArguments?: any;
        /**
         * Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form.
         *
         * AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
         *
         * - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
         * - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
         *
         * For information about how to handle oversized request bodies, see the `Body` object configuration.
         */
        body?: outputs.wafv2.WebAclBody;
        /**
         * Inspect the request cookies. You must configure scope and pattern matching filters in the `Cookies` object, to define the set of cookies and the parts of the cookies that AWS WAF inspects.
         *
         * Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize cookie content in the `Cookies` object. AWS WAF applies the pattern matching filters to the cookies that it receives from the underlying host service.
         */
        cookies?: outputs.wafv2.WebAclCookies;
        /**
         * Inspect the request headers. You must configure scope and pattern matching filters in the `Headers` object, to define the set of headers to and the parts of the headers that AWS WAF inspects.
         *
         * Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers are forwarded to AWS WAF for inspection by the underlying host service. You must configure how to handle any oversize header content in the `Headers` object. AWS WAF applies the pattern matching filters to the headers that it receives from the underlying host service.
         */
        headers?: outputs.wafv2.WebAclHeaders;
        /**
         * Match against the request's JA3 fingerprint. The JA3 fingerprint is a 32-character hash derived from the TLS Client Hello of an incoming request. This fingerprint serves as a unique identifier for the client's TLS configuration. AWS WAF calculates and logs this fingerprint for each request that has enough TLS Client Hello information for the calculation. Almost all web requests include this information.
         *
         * > You can use this choice only with a string match `ByteMatchStatement` with the `PositionalConstraint` set to `EXACTLY` . 
         *
         * You can obtain the JA3 fingerprint for client requests from the web ACL logs. If AWS WAF is able to calculate the fingerprint, it includes it in the logs. For information about the logging fields, see [Log fields](https://docs.aws.amazon.com/waf/latest/developerguide/logging-fields.html) in the *AWS WAF Developer Guide* .
         *
         * Provide the JA3 fingerprint string from the logs in your string match statement specification, to match with any future requests that have the same TLS configuration.
         */
        ja3Fingerprint?: outputs.wafv2.WebAclJa3Fingerprint;
        /**
         * Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form.
         *
         * AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
         *
         * - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
         * - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
         *
         * For information about how to handle oversized request bodies, see the `JsonBody` object configuration.
         */
        jsonBody?: outputs.wafv2.WebAclJsonBody;
        /**
         * The HTTP method of a web request. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: any;
        /**
         * The query string of a web request. This is the part of a URL that appears after a ? character, if any.
         */
        queryString?: any;
        /**
         * Inspect a single header. Provide the name of the header to inspect, for example, `User-Agent` or `Referer` . This setting isn't case sensitive.
         *
         * Example JSON: `"SingleHeader": { "Name": "haystack" }`
         *
         * Alternately, you can filter and inspect all headers with the `Headers` `FieldToMatch` setting.
         */
        singleHeader?: outputs.wafv2.WebAclFieldToMatchSingleHeaderProperties;
        /**
         * One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
         */
        singleQueryArgument?: outputs.wafv2.WebAclFieldToMatchSingleQueryArgumentProperties;
        /**
         * The path component of the URI of a web request. This is the part of a web request that identifies a resource, for example, /images/daily-ad.jpg.
         */
        uriPath?: any;
    }

    /**
     * Inspect a single header. Provide the name of the header to inspect, for example, `User-Agent` or `Referer` . This setting isn't case sensitive.
     *
     * Example JSON: `"SingleHeader": { "Name": "haystack" }`
     *
     * Alternately, you can filter and inspect all headers with the `Headers` `FieldToMatch` setting.
     */
    export interface WebAclFieldToMatchSingleHeaderProperties {
        name: string;
    }

    /**
     * One query argument in a web request, identified by name, for example UserName or SalesRegion. The name can be up to 30 characters long and isn't case sensitive.
     */
    export interface WebAclFieldToMatchSingleQueryArgumentProperties {
        name: string;
    }

    export interface WebAclForwardedIpConfiguration {
        /**
         * The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. 
         *
         * You can specify the following fallback behaviors:
         *
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        fallbackBehavior: enums.wafv2.WebAclForwardedIpConfigurationFallbackBehavior;
        /**
         * The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to `X-Forwarded-For` .
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
         */
        headerName: string;
    }

    export interface WebAclGeoMatchStatement {
        /**
         * An array of two-character country codes that you want to match against, for example, `[ "US", "CN" ]` , from the alpha-2 country ISO codes of the ISO 3166 international standard.
         *
         * When you use a geo match statement just for the region and country labels that it adds to requests, you still have to supply a country code for the rule to evaluate. In this case, you configure the rule to only count matching requests, but it will still generate logging and count metrics for any matches. You can reduce the logging and metrics that the rule produces by specifying a country that's unlikely to be a source of traffic to your site.
         */
        countryCodes?: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclForwardedIpConfiguration;
    }

    /**
     * The pattern to look for in the request headers.
     */
    export interface WebAclHeaderMatchPattern {
        /**
         * Inspect all parts of the web request headers.
         */
        all?: any;
        /**
         * Inspect only the headers whose keys don't match any of the strings specified here.
         */
        excludedHeaders?: string[];
        /**
         * Inspect only the headers that have a key that matches one of the strings specified here.
         */
        includedHeaders?: string[];
    }

    /**
     * Includes headers of a web request.
     */
    export interface WebAclHeaders {
        /**
         * The filter to use to identify the subset of headers to inspect in a web request.
         *
         * You must specify exactly one setting: either `All` , `IncludedHeaders` , or `ExcludedHeaders` .
         *
         * Example JSON: `"MatchPattern": { "ExcludedHeaders": [ "KeyToExclude1", "KeyToExclude2" ] }`
         */
        matchPattern: outputs.wafv2.WebAclHeaderMatchPattern;
        /**
         * The parts of the headers to match with the rule inspection criteria. If you specify `ALL` , AWS WAF inspects both keys and values.
         *
         * `All` does not require a match to be found in the keys and a match to be found in the values. It requires a match to be found in the keys or the values or both. To require a match in the keys and in the values, use a logical `AND` statement to combine two match rules, one that inspects the keys and another that inspects the values.
         */
        matchScope: enums.wafv2.WebAclMapMatchScope;
        /**
         * What AWS WAF should do if the headers of the request are more numerous or larger than AWS WAF can inspect. AWS WAF does not support inspecting the entire contents of request headers when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers and at most 8 KB of header contents to AWS WAF .
         *
         * The options for oversize handling are the following:
         *
         * - `CONTINUE` - Inspect the available headers normally, according to the rule inspection criteria.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        oversizeHandling: enums.wafv2.WebAclOversizeHandling;
    }

    export interface WebAclImmunityTimeProperty {
        /**
         * The amount of time, in seconds, that a `CAPTCHA` or challenge timestamp is considered valid by AWS WAF . The default setting is 300.
         *
         * For the Challenge action, the minimum setting is 300.
         */
        immunityTime: number;
    }

    export interface WebAclIpSetForwardedIpConfiguration {
        /**
         * The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. 
         *
         * You can specify the following fallback behaviors:
         *
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        fallbackBehavior: enums.wafv2.WebAclIpSetForwardedIpConfigurationFallbackBehavior;
        /**
         * The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to `X-Forwarded-For` .
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
         */
        headerName: string;
        /**
         * The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be `10.1.1.1, 127.0.0.0, 10.10.10.10` where the first IP address identifies the original client and the rest identify proxies that the request went through.
         *
         * The options for this setting are the following:
         *
         * - FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP.
         * - LAST - Inspect the last IP address in the list of IP addresses in the header.
         * - ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, AWS WAF inspects the last 10.
         */
        position: enums.wafv2.WebAclIpSetForwardedIpConfigurationPosition;
    }

    export interface WebAclIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the `IPSet` that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclIpSetForwardedIpConfiguration;
    }

    /**
     * Includes the JA3 fingerprint of a web request.
     */
    export interface WebAclJa3Fingerprint {
        /**
         * The match status to assign to the web request if the request doesn't have a JA3 fingerprint.
         *
         * You can specify the following fallback behaviors:
         *
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         */
        fallbackBehavior: enums.wafv2.WebAclJa3FingerprintFallbackBehavior;
    }

    /**
     * Inspect the request body as JSON. The request body immediately follows the request headers.
     */
    export interface WebAclJsonBody {
        /**
         * What AWS WAF should do if it fails to completely parse the JSON body. The options are the following:
         *
         * - `EVALUATE_AS_STRING` - Inspect the body as plain text. AWS WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         *
         * If you don't provide this setting, AWS WAF parses and evaluates the content only up to the first parsing failure that it encounters.
         *
         * AWS WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as invalid characters, duplicate keys, truncation, and any content whose root node isn't an object or an array.
         *
         * AWS WAF parses the JSON in the following examples as two valid key, value pairs:
         *
         * - Missing comma: `{"key1":"value1""key2":"value2"}`
         * - Missing colon: `{"key1":"value1","key2""value2"}`
         * - Extra colons: `{"key1"::"value1","key2""value2"}`
         */
        invalidFallbackBehavior?: enums.wafv2.WebAclBodyParsingFallbackBehavior;
        /**
         * The patterns to look for in the JSON body. AWS WAF inspects the results of these pattern matches against the rule inspection criteria.
         */
        matchPattern: outputs.wafv2.WebAclJsonMatchPattern;
        /**
         * The parts of the JSON to match against using the `MatchPattern` . If you specify `ALL` , AWS WAF matches against keys and values.
         *
         * `All` does not require a match to be found in the keys and a match to be found in the values. It requires a match to be found in the keys or the values or both. To require a match in the keys and in the values, use a logical `AND` statement to combine two match rules, one that inspects the keys and another that inspects the values.
         */
        matchScope: enums.wafv2.WebAclJsonMatchScope;
        /**
         * What AWS WAF should do if the body is larger than AWS WAF can inspect.
         *
         * AWS WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. When a web request body is larger than the limit, the underlying host service only forwards the contents that are within the limit to AWS WAF for inspection.
         *
         * - For Application Load Balancer and AWS AppSync , the limit is fixed at 8 KB (8,192 bytes).
         * - For CloudFront, API Gateway, Amazon Cognito, App Runner, and Verified Access, the default limit is 16 KB (16,384 bytes), and you can increase the limit for each resource type in the web ACL `AssociationConfig` , for additional processing fees.
         *
         * The options for oversize handling are the following:
         *
         * - `CONTINUE` - Inspect the available body contents normally, according to the rule inspection criteria.
         * - `MATCH` - Treat the web request as matching the rule statement. AWS WAF applies the rule action to the request.
         * - `NO_MATCH` - Treat the web request as not matching the rule statement.
         *
         * You can combine the `MATCH` or `NO_MATCH` settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit.
         *
         * Default: `CONTINUE`
         */
        oversizeHandling?: enums.wafv2.WebAclOversizeHandling;
    }

    /**
     * The pattern to look for in the JSON body.
     */
    export interface WebAclJsonMatchPattern {
        /**
         * Inspect all parts of the web request's JSON body.
         */
        all?: any;
        /**
         * Match only the specified include paths. See also `MatchScope` in the `JsonBody` `FieldToMatch` specification.
         *
         * Provide the include paths using JSON Pointer syntax. For example, `"IncludedPaths": ["/dogs/0/name", "/dogs/1/name"]` . For information about this syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * You must specify either this setting or the `All` setting, but not both.
         *
         * > Don't use this option to include all paths. Instead, use the `All` setting.
         */
        includedPaths?: string[];
    }

    export interface WebAclLabel {
        /**
         * The label string.
         */
        name: string;
    }

    export interface WebAclLabelMatchStatement {
        /**
         * The string to match against. The setting you provide for this depends on the match statement's `Scope` setting:
         *
         * - If the `Scope` indicates `LABEL` , then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name.
         * - If the `Scope` indicates `NAMESPACE` , then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates.
         *
         * Labels are case sensitive and components of a label must be separated by colon, for example `NS1:NS2:name` .
         */
        key: string;
        /**
         * Specify whether you want to match using the label name or just the namespace.
         */
        scope: enums.wafv2.WebAclLabelMatchScope;
    }

    /**
     * ManagedRuleGroupConfig.
     */
    export interface WebAclManagedRuleGroupConfig {
        /**
         * Additional configuration for using the account creation fraud prevention (ACFP) managed rule group, `AWSManagedRulesACFPRuleSet` . Use this to provide account creation request information to the rule group. For web ACLs that protect CloudFront distributions, use this to also provide the information about how your distribution responds to account creation requests.
         *
         * For information about using the ACFP managed rule group, see [AWS WAF Fraud Control account creation fraud prevention (ACFP) rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-acfp.html) and [AWS WAF Fraud Control account creation fraud prevention (ACFP)](https://docs.aws.amazon.com/waf/latest/developerguide/waf-acfp.html) in the *AWS WAF Developer Guide* .
         */
        awsManagedRulesAcfpRuleSet?: outputs.wafv2.WebAclAwsManagedRulesAcfpRuleSet;
        /**
         * Additional configuration for using the account takeover prevention (ATP) managed rule group, `AWSManagedRulesATPRuleSet` . Use this to provide login request information to the rule group. For web ACLs that protect CloudFront distributions, use this to also provide the information about how your distribution responds to login requests.
         *
         * This configuration replaces the individual configuration fields in `ManagedRuleGroupConfig` and provides additional feature configuration.
         *
         * For information about using the ATP managed rule group, see [AWS WAF Fraud Control account takeover prevention (ATP) rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-atp.html) and [AWS WAF Fraud Control account takeover prevention (ATP)](https://docs.aws.amazon.com/waf/latest/developerguide/waf-atp.html) in the *AWS WAF Developer Guide* .
         */
        awsManagedRulesAtpRuleSet?: outputs.wafv2.WebAclAwsManagedRulesAtpRuleSet;
        /**
         * Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. For information about using the Bot Control managed rule group, see [AWS WAF Bot Control rule group](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html) and [AWS WAF Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/waf-bot-control.html) in the *AWS WAF Developer Guide* .
         */
        awsManagedRulesBotControlRuleSet?: outputs.wafv2.WebAclAwsManagedRulesBotControlRuleSet;
        /**
         * > Instead of this setting, provide your configuration under `AWSManagedRulesATPRuleSet` .
         */
        loginPath?: string;
        /**
         * > Instead of this setting, provide your configuration under the request inspection configuration for `AWSManagedRulesATPRuleSet` or `AWSManagedRulesACFPRuleSet` .
         */
        passwordField?: outputs.wafv2.WebAclFieldIdentifier;
        /**
         * > Instead of this setting, provide your configuration under the request inspection configuration for `AWSManagedRulesATPRuleSet` or `AWSManagedRulesACFPRuleSet` .
         */
        payloadType?: enums.wafv2.WebAclManagedRuleGroupConfigPayloadType;
        /**
         * > Instead of this setting, provide your configuration under the request inspection configuration for `AWSManagedRulesATPRuleSet` or `AWSManagedRulesACFPRuleSet` .
         */
        usernameField?: outputs.wafv2.WebAclFieldIdentifier;
    }

    export interface WebAclManagedRuleGroupStatement {
        /**
         * Rules in the referenced rule group whose actions are set to `Count` .
         *
         * > Instead of this option, use `RuleActionOverrides` . It accepts any valid action setting, including `Count` .
         */
        excludedRules?: outputs.wafv2.WebAclExcludedRule[];
        /**
         * Collection of ManagedRuleGroupConfig.
         */
        managedRuleGroupConfigs?: outputs.wafv2.WebAclManagedRuleGroupConfig[];
        /**
         * The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.
         */
        name: string;
        /**
         * Action overrides for rules in the rule group.
         */
        ruleActionOverrides?: outputs.wafv2.WebAclRuleActionOverride[];
        /**
         * An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable `Statement` in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.
         */
        scopeDownStatement?: outputs.wafv2.WebAclStatement;
        /**
         * The name of the managed rule group vendor. You use this, along with the rule group name, to identify a rule group.
         */
        vendorName: string;
        /**
         * The version of the managed rule group to use. If you specify this, the version setting is fixed until you change it. If you don't specify this, AWS WAF uses the vendor's default version, and then keeps the version at the vendor's default when the vendor updates the managed rule group settings.
         */
        version?: string;
    }

    export interface WebAclNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested.
         */
        statement: outputs.wafv2.WebAclStatement;
    }

    export interface WebAclOrStatement {
        /**
         * The statements to combine with OR logic. You can use any statements that can be nested.
         */
        statements: outputs.wafv2.WebAclStatement[];
    }

    /**
     * Override a RuleGroup or ManagedRuleGroup behavior. This can only be applied to Rule that has RuleGroupReferenceStatement or ManagedRuleGroupReferenceStatement.
     */
    export interface WebAclOverrideAction {
        /**
         * Count traffic towards application.
         */
        count?: any;
        /**
         * Keep the RuleGroup or ManagedRuleGroup behavior as is.
         */
        none?: any;
    }

    export interface WebAclRateBasedStatement {
        /**
         * Setting that indicates how to aggregate the request counts.
         *
         * > Web requests that are missing any of the components specified in the aggregation keys are omitted from the rate-based rule evaluation and handling. 
         *
         * - `CONSTANT` - Count and limit the requests that match the rate-based rule's scope-down statement. With this option, the counted requests aren't further aggregated. The scope-down statement is the only specification used. When the count of all requests that satisfy the scope-down statement goes over the limit, AWS WAF applies the rule action to all requests that satisfy the scope-down statement.
         *
         * With this option, you must configure the `ScopeDownStatement` property.
         * - `CUSTOM_KEYS` - Aggregate the request counts using one or more web request components as the aggregate keys.
         *
         * With this option, you must specify the aggregate keys in the `CustomKeys` property.
         *
         * To aggregate on only the IP address or only the forwarded IP address, don't use custom keys. Instead, set the aggregate key type to `IP` or `FORWARDED_IP` .
         * - `FORWARDED_IP` - Aggregate the request counts on the first IP address in an HTTP header.
         *
         * With this option, you must specify the header to use in the `ForwardedIPConfig` property.
         *
         * To aggregate on a combination of the forwarded IP address with other aggregate keys, use `CUSTOM_KEYS` .
         * - `IP` - Aggregate the request counts on the IP address from the web request origin.
         *
         * To aggregate on a combination of the IP address with other aggregate keys, use `CUSTOM_KEYS` .
         */
        aggregateKeyType: enums.wafv2.WebAclRateBasedStatementAggregateKeyType;
        /**
         * Specifies the aggregate keys to use in a rate-base rule.
         */
        customKeys?: outputs.wafv2.WebAclRateBasedStatementCustomKey[];
        /**
         * The amount of time, in seconds, that AWS WAF should include in its request counts, looking back from the current time. For example, for a setting of 120, when AWS WAF checks the rate, it counts the requests for the 2 minutes immediately preceding the current time. Valid settings are 60, 120, 300, and 600.
         *
         * This setting doesn't determine how often AWS WAF checks the rate, but how far back it looks each time it checks. AWS WAF checks the rate about every 10 seconds.
         *
         * Default: `300` (5 minutes)
         */
        evaluationWindowSec?: number;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name.
         *
         * > If the specified header isn't present in the request, AWS WAF doesn't apply the rule to the web request at all. 
         *
         * This is required if you specify a forwarded IP in the rule's aggregate key settings.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclForwardedIpConfiguration;
        /**
         * The limit on requests per 5-minute period for a single aggregation instance for the rate-based rule. If the rate-based statement includes a `ScopeDownStatement` , this limit is applied only to the requests that match the statement.
         *
         * Examples:
         *
         * - If you aggregate on just the IP address, this is the limit on requests from any single IP address.
         * - If you aggregate on the HTTP method and the query argument name "city", then this is the limit on requests for any single method, city pair.
         */
        limit: number;
        /**
         * An optional nested statement that narrows the scope of the web requests that are evaluated and managed by the rate-based statement. When you use a scope-down statement, the rate-based rule only tracks and rate limits requests that match the scope-down statement. You can use any nestable `Statement` in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement.
         */
        scopeDownStatement?: outputs.wafv2.WebAclStatement;
    }

    /**
     * Specifies a single custom aggregate key for a rate-base rule.
     */
    export interface WebAclRateBasedStatementCustomKey {
        /**
         * Use the value of a cookie in the request as an aggregate key. Each distinct value in the cookie contributes to the aggregation instance. If you use a single cookie as your custom key, then each value fully defines an aggregation instance.
         */
        cookie?: outputs.wafv2.WebAclRateLimitCookie;
        /**
         * Use the first IP address in an HTTP header as an aggregate key. Each distinct forwarded IP address contributes to the aggregation instance.
         *
         * When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the forwarded IP address by specifying `FORWARDED_IP` in your rate-based statement's `AggregateKeyType` .
         *
         * With this option, you must specify the header to use in the rate-based rule's `ForwardedIPConfig` property.
         */
        forwardedIp?: outputs.wafv2.WebAclRateLimitForwardedIp;
        /**
         * Use the value of a header in the request as an aggregate key. Each distinct value in the header contributes to the aggregation instance. If you use a single header as your custom key, then each value fully defines an aggregation instance.
         */
        header?: outputs.wafv2.WebAclRateLimitHeader;
        /**
         * Use the request's HTTP method as an aggregate key. Each distinct HTTP method contributes to the aggregation instance. If you use just the HTTP method as your custom key, then each method fully defines an aggregation instance.
         */
        httpMethod?: outputs.wafv2.WebAclRateLimitHttpMethod;
        /**
         * Use the request's originating IP address as an aggregate key. Each distinct IP address contributes to the aggregation instance.
         *
         * When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the IP address by specifying `IP` in your rate-based statement's `AggregateKeyType` .
         */
        ip?: outputs.wafv2.WebAclRateLimitIp;
        /**
         * Use the specified label namespace as an aggregate key. Each distinct fully qualified label name that has the specified label namespace contributes to the aggregation instance. If you use just one label namespace as your custom key, then each label name fully defines an aggregation instance.
         *
         * This uses only labels that have been added to the request by rules that are evaluated before this rate-based rule in the web ACL.
         *
         * For information about label namespaces and names, see [Label syntax and naming requirements](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-label-requirements.html) in the *AWS WAF Developer Guide* .
         */
        labelNamespace?: outputs.wafv2.WebAclRateLimitLabelNamespace;
        /**
         * Use the specified query argument as an aggregate key. Each distinct value for the named query argument contributes to the aggregation instance. If you use a single query argument as your custom key, then each value fully defines an aggregation instance.
         */
        queryArgument?: outputs.wafv2.WebAclRateLimitQueryArgument;
        /**
         * Use the request's query string as an aggregate key. Each distinct string contributes to the aggregation instance. If you use just the query string as your custom key, then each string fully defines an aggregation instance.
         */
        queryString?: outputs.wafv2.WebAclRateLimitQueryString;
        /**
         * Use the request's URI path as an aggregate key. Each distinct URI path contributes to the aggregation instance. If you use just the URI path as your custom key, then each URI path fully defines an aggregation instance.
         */
        uriPath?: outputs.wafv2.WebAclRateLimitUriPath;
    }

    /**
     * Specifies a cookie as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitCookie {
        /**
         * The name of the cookie to use.
         */
        name: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Specifies the first IP address in an HTTP header as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitForwardedIp {
    }

    /**
     * Specifies a header as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitHeader {
        /**
         * The name of the header to use.
         */
        name: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Specifies the request's HTTP method as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitHttpMethod {
    }

    /**
     * Specifies the IP address in the web request as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitIp {
    }

    /**
     * Specifies a label namespace to use as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitLabelNamespace {
        /**
         * The namespace to use for aggregation.
         */
        namespace: string;
    }

    /**
     * Specifies a query argument in the request as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitQueryArgument {
        /**
         * The name of the query argument to use.
         */
        name: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Specifies the request's query string as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitQueryString {
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Specifies the request's URI Path as an aggregate key for a rate-based rule.
     */
    export interface WebAclRateLimitUriPath {
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the `FieldToMatch` request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, AWS WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the transformed component contents.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    export interface WebAclRegexMatchStatement {
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        /**
         * The string representing the regular expression.
         */
        regexString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    export interface WebAclRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the `RegexPatternSet` that this statement references.
         */
        arn: string;
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Configures the inspection size in the request body.
     */
    export interface WebAclRequestBodyAssociatedResourceTypeConfig {
        /**
         * Specifies the maximum size of the web request body component that an associated CloudFront, API Gateway, Amazon Cognito, App Runner, or Verified Access resource should send to AWS WAF for inspection. This applies to statements in the web ACL that inspect the body or JSON body.
         *
         * Default: `16 KB (16,384 bytes)`
         */
        defaultSizeInspectionLimit: enums.wafv2.WebAclSizeInspectionLimit;
    }

    /**
     * Configures the inspection of login requests
     */
    export interface WebAclRequestInspection {
        /**
         * The name of the field in the request payload that contains your customer's password.
         *
         * How you specify this depends on the request inspection payload type.
         *
         * - For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * For example, for the JSON payload `{ "form": { "password": "THE_PASSWORD" } }` , the password field specification is `/form/password` .
         * - For form encoded payload types, use the HTML form names.
         *
         * For example, for an HTML form with the input element named `password1` , the password field specification is `password1` .
         */
        passwordField: outputs.wafv2.WebAclFieldIdentifier;
        /**
         * The payload type for your login endpoint, either JSON or form encoded.
         */
        payloadType: enums.wafv2.WebAclRequestInspectionPayloadType;
        /**
         * The name of the field in the request payload that contains your customer's username.
         *
         * How you specify this depends on the request inspection payload type.
         *
         * - For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * For example, for the JSON payload `{ "form": { "username": "THE_USERNAME" } }` , the username field specification is `/form/username` .
         * - For form encoded payload types, use the HTML form names.
         *
         * For example, for an HTML form with the input element named `username1` , the username field specification is `username1`
         */
        usernameField: outputs.wafv2.WebAclFieldIdentifier;
    }

    /**
     * Configures the inspection of sign-up requests
     */
    export interface WebAclRequestInspectionAcfp {
        /**
         * The names of the fields in the request payload that contain your customer's primary physical address.
         *
         * Order the address fields in the array exactly as they are ordered in the request payload.
         *
         * How you specify the address fields depends on the request inspection payload type.
         *
         * - For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * For example, for the JSON payload `{ "form": { "primaryaddressline1": "THE_ADDRESS1", "primaryaddressline2": "THE_ADDRESS2", "primaryaddressline3": "THE_ADDRESS3" } }` , the address field idenfiers are `/form/primaryaddressline1` , `/form/primaryaddressline2` , and `/form/primaryaddressline3` .
         * - For form encoded payload types, use the HTML form names.
         *
         * For example, for an HTML form with input elements named `primaryaddressline1` , `primaryaddressline2` , and `primaryaddressline3` , the address fields identifiers are `primaryaddressline1` , `primaryaddressline2` , and `primaryaddressline3` .
         */
        addressFields?: outputs.wafv2.WebAclFieldIdentifier[];
        /**
         * The name of the field in the request payload that contains your customer's email.
         *
         * How you specify this depends on the request inspection payload type.
         *
         * - For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * For example, for the JSON payload `{ "form": { "email": "THE_EMAIL" } }` , the email field specification is `/form/email` .
         * - For form encoded payload types, use the HTML form names.
         *
         * For example, for an HTML form with the input element named `email1` , the email field specification is `email1` .
         */
        emailField?: outputs.wafv2.WebAclFieldIdentifier;
        /**
         * The name of the field in the request payload that contains your customer's password.
         *
         * How you specify this depends on the request inspection payload type.
         *
         * - For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * For example, for the JSON payload `{ "form": { "password": "THE_PASSWORD" } }` , the password field specification is `/form/password` .
         * - For form encoded payload types, use the HTML form names.
         *
         * For example, for an HTML form with the input element named `password1` , the password field specification is `password1` .
         */
        passwordField?: outputs.wafv2.WebAclFieldIdentifier;
        /**
         * The payload type for your account creation endpoint, either JSON or form encoded.
         */
        payloadType: enums.wafv2.WebAclRequestInspectionAcfpPayloadType;
        /**
         * The names of the fields in the request payload that contain your customer's primary phone number.
         *
         * Order the phone number fields in the array exactly as they are ordered in the request payload.
         *
         * How you specify the phone number fields depends on the request inspection payload type.
         *
         * - For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * For example, for the JSON payload `{ "form": { "primaryphoneline1": "THE_PHONE1", "primaryphoneline2": "THE_PHONE2", "primaryphoneline3": "THE_PHONE3" } }` , the phone number field identifiers are `/form/primaryphoneline1` , `/form/primaryphoneline2` , and `/form/primaryphoneline3` .
         * - For form encoded payload types, use the HTML form names.
         *
         * For example, for an HTML form with input elements named `primaryphoneline1` , `primaryphoneline2` , and `primaryphoneline3` , the phone number field identifiers are `primaryphoneline1` , `primaryphoneline2` , and `primaryphoneline3` .
         */
        phoneNumberFields?: outputs.wafv2.WebAclFieldIdentifier[];
        /**
         * The name of the field in the request payload that contains your customer's username.
         *
         * How you specify this depends on the request inspection payload type.
         *
         * - For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation [JavaScript Object Notation (JSON) Pointer](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc6901) .
         *
         * For example, for the JSON payload `{ "form": { "username": "THE_USERNAME" } }` , the username field specification is `/form/username` .
         * - For form encoded payload types, use the HTML form names.
         *
         * For example, for an HTML form with the input element named `username1` , the username field specification is `username1`
         */
        usernameField?: outputs.wafv2.WebAclFieldIdentifier;
    }

    /**
     * Configures the inspection of login responses
     */
    export interface WebAclResponseInspection {
        /**
         * Configures inspection of the response body for success and failure indicators. AWS WAF can inspect the first 65,536 bytes (64 KB) of the response body.
         */
        bodyContains?: outputs.wafv2.WebAclResponseInspectionBodyContains;
        /**
         * Configures inspection of the response header for success and failure indicators.
         */
        header?: outputs.wafv2.WebAclResponseInspectionHeader;
        /**
         * Configures inspection of the response JSON for success and failure indicators. AWS WAF can inspect the first 65,536 bytes (64 KB) of the response JSON.
         */
        json?: outputs.wafv2.WebAclResponseInspectionJson;
        /**
         * Configures inspection of the response status code for success and failure indicators.
         */
        statusCode?: outputs.wafv2.WebAclResponseInspectionStatusCode;
    }

    /**
     * Response body contents that indicate success or failure of a login request
     */
    export interface WebAclResponseInspectionBodyContains {
        /**
         * Strings in the body of the response that indicate a failed login or account creation attempt. To be counted as a failure, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings.
         *
         * JSON example: `"FailureStrings": [ "Request failed" ]`
         */
        failureStrings: string[];
        /**
         * Strings in the body of the response that indicate a successful login or account creation attempt. To be counted as a success, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings.
         *
         * JSON examples: `"SuccessStrings": [ "Login successful" ]` and `"SuccessStrings": [ "Account creation successful", "Welcome to our site!" ]`
         */
        successStrings: string[];
    }

    /**
     * Response headers that indicate success or failure of a login request
     */
    export interface WebAclResponseInspectionHeader {
        /**
         * Values in the response header with the specified name that indicate a failed login or account creation attempt. To be counted as a failure, the value must be an exact match, including case. Each value must be unique among the success and failure values.
         *
         * JSON examples: `"FailureValues": [ "LoginFailed", "Failed login" ]` and `"FailureValues": [ "AccountCreationFailed" ]`
         */
        failureValues: string[];
        /**
         * The name of the header to match against. The name must be an exact match, including case.
         *
         * JSON example: `"Name": [ "RequestResult" ]`
         */
        name: string;
        /**
         * Values in the response header with the specified name that indicate a successful login or account creation attempt. To be counted as a success, the value must be an exact match, including case. Each value must be unique among the success and failure values.
         *
         * JSON examples: `"SuccessValues": [ "LoginPassed", "Successful login" ]` and `"SuccessValues": [ "AccountCreated", "Successful account creation" ]`
         */
        successValues: string[];
    }

    /**
     * Response JSON that indicate success or failure of a login request
     */
    export interface WebAclResponseInspectionJson {
        /**
         * Values for the specified identifier in the response JSON that indicate a failed login or account creation attempt. To be counted as a failure, the value must be an exact match, including case. Each value must be unique among the success and failure values.
         *
         * JSON example: `"FailureValues": [ "False", "Failed" ]`
         */
        failureValues: string[];
        /**
         * The identifier for the value to match against in the JSON. The identifier must be an exact match, including case.
         *
         * JSON examples: `"Identifier": [ "/login/success" ]` and `"Identifier": [ "/sign-up/success" ]`
         */
        identifier: string;
        /**
         * Values for the specified identifier in the response JSON that indicate a successful login or account creation attempt. To be counted as a success, the value must be an exact match, including case. Each value must be unique among the success and failure values.
         *
         * JSON example: `"SuccessValues": [ "True", "Succeeded" ]`
         */
        successValues: string[];
    }

    /**
     * Response status codes that indicate success or failure of a login request
     */
    export interface WebAclResponseInspectionStatusCode {
        /**
         * Status codes in the response that indicate a failed login or account creation attempt. To be counted as a failure, the response status code must match one of these. Each code must be unique among the success and failure status codes.
         *
         * JSON example: `"FailureCodes": [ 400, 404 ]`
         */
        failureCodes: number[];
        /**
         * Status codes in the response that indicate a successful login or account creation attempt. To be counted as a success, the response status code must match one of these. Each code must be unique among the success and failure status codes.
         *
         * JSON example: `"SuccessCodes": [ 200, 201 ]`
         */
        successCodes: number[];
    }

    /**
     * Rule of WebACL that contains condition and action.
     */
    export interface WebAclRule {
        /**
         * The action that AWS WAF should take on a web request when it matches the rule's statement. Settings at the web ACL level can override the rule action setting.
         *
         * This is used only for rules whose statements don't reference a rule group. Rule statements that reference a rule group are `RuleGroupReferenceStatement` and `ManagedRuleGroupStatement` .
         *
         * You must set either this `Action` setting or the rule's `OverrideAction` , but not both:
         *
         * - If the rule statement doesn't reference a rule group, you must set this rule action setting and you must not set the rule's override action setting.
         * - If the rule statement references a rule group, you must not set this action setting, because the actions are already set on the rules inside the rule group. You must set the rule's override action setting to indicate specifically whether to override the actions that are set on the rules in the rule group.
         */
        action?: outputs.wafv2.WebAclRuleAction;
        /**
         * Specifies how AWS WAF should handle `CAPTCHA` evaluations. If you don't specify this, AWS WAF uses the `CAPTCHA` configuration that's defined for the web ACL.
         */
        captchaConfig?: outputs.wafv2.WebAclCaptchaConfig;
        /**
         * Specifies how AWS WAF should handle `Challenge` evaluations. If you don't specify this, AWS WAF uses the challenge configuration that's defined for the web ACL.
         */
        challengeConfig?: outputs.wafv2.WebAclChallengeConfig;
        /**
         * The name of the rule.
         *
         * If you change the name of a `Rule` after you create it and you want the rule's metric name to reflect the change, update the metric name in the rule's `VisibilityConfig` settings. AWS WAF doesn't automatically update the metric name when you update the rule name.
         */
        name: string;
        /**
         * The override action to apply to the rules in a rule group, instead of the individual rule action settings. This is used only for rules whose statements reference a rule group. Rule statements that reference a rule group are `RuleGroupReferenceStatement` and `ManagedRuleGroupStatement` .
         *
         * Set the override action to none to leave the rule group rule actions in effect. Set it to count to only count matches, regardless of the rule action settings.
         *
         * You must set either this `OverrideAction` setting or the `Action` setting, but not both:
         *
         * - If the rule statement references a rule group, you must set this override action setting and you must not set the rule's action setting.
         * - If the rule statement doesn't reference a rule group, you must set the rule action setting and you must not set the rule's override action setting.
         */
        overrideAction?: outputs.wafv2.WebAclOverrideAction;
        /**
         * If you define more than one `Rule` in a `WebACL` , AWS WAF evaluates each request against the `Rules` in order based on the value of `Priority` . AWS WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different.
         */
        priority: number;
        /**
         * Collection of Rule Labels.
         */
        ruleLabels?: outputs.wafv2.WebAclLabel[];
        /**
         * The AWS WAF processing statement for the rule, for example `ByteMatchStatement` or `SizeConstraintStatement` .
         */
        statement: outputs.wafv2.WebAclStatement;
        /**
         * Defines and enables Amazon CloudWatch metrics and web request sample collection.
         *
         * If you change the name of a `Rule` after you create it and you want the rule's metric name to reflect the change, update the metric name as well. AWS WAF doesn't automatically update the metric name.
         */
        visibilityConfig: outputs.wafv2.WebAclVisibilityConfig;
    }

    /**
     * Action taken when Rule matches its condition.
     */
    export interface WebAclRuleAction {
        /**
         * Instructs AWS WAF to allow the web request.
         */
        allow?: outputs.wafv2.WebAclAllowAction;
        /**
         * Instructs AWS WAF to block the web request.
         */
        block?: outputs.wafv2.WebAclBlockAction;
        /**
         * Specifies that AWS WAF should run a `CAPTCHA` check against the request:
         *
         * - If the request includes a valid, unexpired `CAPTCHA` token, AWS WAF allows the web request inspection to proceed to the next rule, similar to a `CountAction` .
         * - If the request doesn't include a valid, unexpired `CAPTCHA` token, AWS WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.
         *
         * AWS WAF generates a response that it sends back to the client, which includes the following:
         *
         * - The header `x-amzn-waf-action` with a value of `captcha` .
         * - The HTTP status code `405 Method Not Allowed` .
         * - If the request contains an `Accept` header with a value of `text/html` , the response includes a `CAPTCHA` challenge.
         *
         * You can configure the expiration time in the `CaptchaConfig` `ImmunityTimeProperty` setting at the rule and web ACL level. The rule setting overrides the web ACL setting.
         *
         * This action option is available for rules. It isn't available for web ACL default actions.
         */
        captcha?: outputs.wafv2.WebAclCaptchaAction;
        /**
         * Instructs AWS WAF to run a `Challenge` check against the web request.
         */
        challenge?: outputs.wafv2.WebAclChallengeAction;
        /**
         * Instructs AWS WAF to count the web request and then continue evaluating the request using the remaining rules in the web ACL.
         */
        count?: outputs.wafv2.WebAclCountAction;
    }

    /**
     * Action override for rules in the rule group.
     */
    export interface WebAclRuleActionOverride {
        /**
         * The override action to use, in place of the configured action of the rule in the rule group.
         */
        actionToUse: outputs.wafv2.WebAclRuleAction;
        /**
         * The name of the rule to override.
         */
        name: string;
    }

    export interface WebAclRuleGroupReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the entity.
         */
        arn: string;
        /**
         * Rules in the referenced rule group whose actions are set to `Count` .
         *
         * > Instead of this option, use `RuleActionOverrides` . It accepts any valid action setting, including `Count` .
         */
        excludedRules?: outputs.wafv2.WebAclExcludedRule[];
        /**
         * Action overrides for rules in the rule group.
         */
        ruleActionOverrides?: outputs.wafv2.WebAclRuleActionOverride[];
    }

    /**
     * Size Constraint statement.
     */
    export interface WebAclSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting.
         */
        comparisonOperator: enums.wafv2.WebAclSizeConstraintStatementComparisonOperator;
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        /**
         * The size, in byte, to compare to the request part, after any transformations.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * Sqli Match Statement.
     */
    export interface WebAclSqliMatchStatement {
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        /**
         * The sensitivity that you want AWS WAF to use to inspect for SQL injection attacks.
         *
         * `HIGH` detects more attacks, but might generate more false positives, especially if your web requests frequently contain unusual strings. For information about identifying and mitigating false positives, see [Testing and tuning](https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html) in the *AWS WAF Developer Guide* .
         *
         * `LOW` is generally a better choice for resources that already have other protections against SQL injection attacks or that have a low tolerance for false positives.
         *
         * Default: `LOW`
         */
        sensitivityLevel?: enums.wafv2.WebAclSensitivityLevel;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

    /**
     * First level statement that contains conditions, such as ByteMatch, SizeConstraint, etc
     */
    export interface WebAclStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. You provide more than one `Statement` within the `AndStatement` .
         */
        andStatement?: outputs.wafv2.WebAclAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want AWS WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the AWS WAF console and the developer guide, this is called a string match statement.
         */
        byteMatchStatement?: outputs.wafv2.WebAclByteMatchStatement;
        /**
         * A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match.
         *
         * - To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the `CountryCodes` array.
         * - Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed.
         *
         * AWS WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. AWS WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match `ForwardedIPConfig` .
         *
         * If you use the web request origin, the label formats are `awswaf:clientip:geo:region:<ISO country code>-<ISO region code>` and `awswaf:clientip:geo:country:<ISO country code>` .
         *
         * If you use a forwarded IP address, the label formats are `awswaf:forwardedip:geo:region:<ISO country code>-<ISO region code>` and `awswaf:forwardedip:geo:country:<ISO country code>` .
         *
         * For additional details, see [Geographic match rule statement](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html) in the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) .
         */
        geoMatchStatement?: outputs.wafv2.WebAclGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an `IPSet` that specifies the addresses you want to detect, then use the ARN of that set in this statement.
         *
         * Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclIpSetReferenceStatement;
        /**
         * A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL.
         *
         * The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, AWS WAF performs the search for labels that were added in the same context as the label match statement.
         */
        labelMatchStatement?: outputs.wafv2.WebAclLabelMatchStatement;
        /**
         * A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names through the API call `ListAvailableManagedRuleGroups` .
         *
         * You cannot nest a `ManagedRuleGroupStatement` , for example for use inside a `NotStatement` or `OrStatement` . It can only be referenced as a top-level statement within a rule.
         *
         * > You are charged additional fees when you use the AWS WAF Bot Control managed rule group `AWSManagedRulesBotControlRuleSet` , the AWS WAF Fraud Control account takeover prevention (ATP) managed rule group `AWSManagedRulesATPRuleSet` , or the AWS WAF Fraud Control account creation fraud prevention (ACFP) managed rule group `AWSManagedRulesACFPRuleSet` . For more information, see [AWS WAF Pricing](https://docs.aws.amazon.com/waf/pricing/) .
         */
        managedRuleGroupStatement?: outputs.wafv2.WebAclManagedRuleGroupStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. You provide one `Statement` within the `NotStatement` .
         */
        notStatement?: outputs.wafv2.WebAclNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. You provide more than one `Statement` within the `OrStatement` .
         */
        orStatement?: outputs.wafv2.WebAclOrStatement;
        /**
         * A rate-based rule counts incoming requests and rate limits requests when they are coming at too fast a rate. The rule categorizes requests according to your aggregation criteria, collects them into aggregation instances, and counts and rate limits the requests for each instance.
         *
         * > If you change any of these settings in a rule that's currently in use, the change resets the rule's rate limiting counts. This can pause the rule's rate limiting activities for up to a minute. 
         *
         * You can specify individual aggregation keys, like IP address or HTTP method. You can also specify aggregation key combinations, like IP address and HTTP method, or HTTP method, query argument, and cookie.
         *
         * Each unique set of values for the aggregation keys that you specify is a separate aggregation instance, with the value from each key contributing to the aggregation instance definition.
         *
         * For example, assume the rule evaluates web requests with the following IP address and HTTP method values:
         *
         * - IP address 10.1.1.1, HTTP method POST
         * - IP address 10.1.1.1, HTTP method GET
         * - IP address 127.0.0.0, HTTP method POST
         * - IP address 10.1.1.1, HTTP method GET
         *
         * The rule would create different aggregation instances according to your aggregation criteria, for example:
         *
         * - If the aggregation criteria is just the IP address, then each individual address is an aggregation instance, and AWS WAF counts requests separately for each. The aggregation instances and request counts for our example would be the following:
         *
         * - IP address 10.1.1.1: count 3
         * - IP address 127.0.0.0: count 1
         * - If the aggregation criteria is HTTP method, then each individual HTTP method is an aggregation instance. The aggregation instances and request counts for our example would be the following:
         *
         * - HTTP method POST: count 2
         * - HTTP method GET: count 2
         * - If the aggregation criteria is IP address and HTTP method, then each IP address and each HTTP method would contribute to the combined aggregation instance. The aggregation instances and request counts for our example would be the following:
         *
         * - IP address 10.1.1.1, HTTP method POST: count 1
         * - IP address 10.1.1.1, HTTP method GET: count 2
         * - IP address 127.0.0.0, HTTP method POST: count 1
         *
         * For any n-tuple of aggregation keys, each unique combination of values for the keys defines a separate aggregation instance, which AWS WAF counts and rate-limits individually.
         *
         * You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts and rate limits requests that match the nested statement. You can use this nested scope-down statement in conjunction with your aggregation key specifications or you can just count and rate limit all requests that match the scope-down statement, without additional aggregation. When you choose to just manage all requests that match a scope-down statement, the aggregation instance is singular for the rule.
         *
         * You cannot nest a `RateBasedStatement` inside another statement, for example inside a `NotStatement` or `OrStatement` . You can define a `RateBasedStatement` inside a web ACL and inside a rule group.
         *
         * For additional information about the options, see [Rate limiting web requests using rate-based rules](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rate-based-rules.html) in the *AWS WAF Developer Guide* .
         *
         * If you only aggregate on the individual IP address or forwarded IP address, you can retrieve the list of IP addresses that AWS WAF is currently rate limiting for a rule through the API call `GetRateBasedStatementManagedKeys` . This option is not available for other aggregation configurations.
         *
         * AWS WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by AWS WAF . If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by AWS WAF .
         */
        rateBasedStatement?: outputs.wafv2.WebAclRateBasedStatement;
        /**
         * A rule statement used to search web request components for a match against a single regular expression.
         */
        regexMatchStatement?: outputs.wafv2.WebAclRegexMatchStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. To use this, create a `RegexPatternSet` that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set.
         *
         * Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, AWS WAF automatically updates all rules that reference it.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRegexPatternSetReferenceStatement;
        /**
         * A rule statement used to run the rules that are defined in a `RuleGroup` . To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.
         *
         * You cannot nest a `RuleGroupReferenceStatement` , for example for use inside a `NotStatement` or `OrStatement` . You cannot use a rule group reference statement inside another rule group. You can only reference a rule group as a top-level statement within a rule that you define in a web ACL.
         */
        ruleGroupReferenceStatement?: outputs.wafv2.WebAclRuleGroupReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes.
         *
         * If you configure AWS WAF to inspect the request body, AWS WAF inspects only the number of bytes in the body up to the limit for the web ACL and protected resource type. If you know that the request body for your web requests should never exceed the inspection limit, you can use a size constraint statement to block requests that have a larger request body size. For more information about the inspection limits, see `Body` and `JsonBody` settings for the `FieldToMatch` data type.
         *
         * If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI `/logo.jpg` is nine characters long.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclSizeConstraintStatement;
        /**
         * A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclSqliMatchStatement;
        /**
         * A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers.
         */
        xssMatchStatement?: outputs.wafv2.WebAclXssMatchStatement;
    }

    /**
     * Text Transformation on the Search String before match.
     */
    export interface WebAclTextTransformation {
        /**
         * Sets the relative processing order for multiple transformations. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different.
         */
        priority: number;
        /**
         * For detailed descriptions of each of the transformation types, see [Text transformations](https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-transformation.html) in the *AWS WAF Developer Guide* .
         */
        type: enums.wafv2.WebAclTextTransformationType;
    }

    /**
     * Visibility Metric of the WebACL.
     */
    export interface WebAclVisibilityConfig {
        /**
         * Indicates whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics) in the *AWS WAF Developer Guide* .
         *
         * For web ACLs, the metrics are for web requests that have the web ACL default action applied. AWS WAF applies the default action to web requests that pass the inspection of all rules in the web ACL without being either allowed or blocked. For more information,
         * see [The web ACL default action](https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-default-action.html) in the *AWS WAF Developer Guide* .
         */
        cloudWatchMetricsEnabled: boolean;
        /**
         * A name of the Amazon CloudWatch metric dimension. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names that are reserved for AWS WAF , for example `All` and `Default_Action` .
         */
        metricName: string;
        /**
         * Indicates whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
         *
         * > Request sampling doesn't provide a field redaction option, and any field redaction that you specify in your logging configuration doesn't affect sampling. The only way to exclude fields from request sampling is by disabling sampling in the web ACL visibility configuration.
         */
        sampledRequestsEnabled: boolean;
    }

    /**
     * Xss Match Statement.
     */
    export interface WebAclXssMatchStatement {
        /**
         * The part of the web request that you want AWS WAF to inspect.
         */
        fieldToMatch: outputs.wafv2.WebAclFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. If you specify one or more transformations in a rule statement, AWS WAF performs all transformations on the content of the request component identified by `FieldToMatch` , starting from the lowest priority setting, before inspecting the content for a match.
         */
        textTransformations: outputs.wafv2.WebAclTextTransformation[];
    }

}

export namespace wisdom {
    export interface AssistantAssociationAssociationData {
        /**
         * The identifier of the knowledge base.
         */
        knowledgeBaseId: string;
    }

    export interface AssistantServerSideEncryptionConfiguration {
        /**
         * The customer managed key used for encryption. The customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. To use Wisdom with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
         */
        kmsKeyId?: string;
    }

    export interface KnowledgeBaseAppIntegrationsConfiguration {
        /**
         * The Amazon Resource Name (ARN) of the AppIntegrations DataIntegration to use for ingesting content.
         *
         * - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` as source fields.
         * - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` as source fields.
         * - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , your AppIntegrations DataIntegration must have an ObjectConfiguration if `objectFields` is not provided, including at least `id` , `title` , `updated_at` , and `draft` as source fields.
         * - For [SharePoint](https://docs.aws.amazon.com/https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/sharepoint-net-server-csom-jsom-and-rest-api-index) , your AppIntegrations DataIntegration must have a FileConfiguration, including only file extensions that are among `docx` , `pdf` , `html` , `htm` , and `txt` .
         * - For [Amazon S3](https://docs.aws.amazon.com/https://aws.amazon.com/s3/) , the ObjectConfiguration and FileConfiguration of your AppIntegrations DataIntegration must be null. The `SourceURI` of your DataIntegration must use the following format: `s3://your_s3_bucket_name` .
         *
         * > The bucket policy of the corresponding S3 bucket must allow the AWS principal `app-integrations.amazonaws.com` to perform `s3:ListBucket` , `s3:GetObject` , and `s3:GetBucketLocation` against the bucket.
         */
        appIntegrationArn: string;
        /**
         * The fields from the source that are made available to your agents in Amazon Q in Connect. Optional if ObjectConfiguration is included in the provided DataIntegration.
         *
         * - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , you must include at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` .
         * - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , you must include at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` .
         * - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , you must include at least `id` , `title` , `updated_at` , and `draft` .
         *
         * Make sure to include additional fields. These fields are indexed and used to source recommendations.
         */
        objectFields?: string[];
    }

    export interface KnowledgeBaseRenderingConfiguration {
        /**
         * A URI template containing exactly one variable in `${variableName}` format. This can only be set for `EXTERNAL` knowledge bases. For Salesforce, ServiceNow, and Zendesk, the variable must be one of the following:
         *
         * - Salesforce: `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , or `IsDeleted`
         * - ServiceNow: `number` , `short_description` , `sys_mod_count` , `workflow_state` , or `active`
         * - Zendesk: `id` , `title` , `updated_at` , or `draft`
         *
         * The variable is replaced with the actual value for a piece of content when calling [GetContent](https://docs.aws.amazon.com/amazon-q-connect/latest/APIReference/API_GetContent.html) .
         */
        templateUri?: string;
    }

    export interface KnowledgeBaseServerSideEncryptionConfiguration {
        /**
         * The customer managed key used for encryption.
         *
         * This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom.
         *
         * For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) .
         */
        kmsKeyId?: string;
    }

    export interface KnowledgeBaseSourceConfiguration {
        /**
         * Configuration information for Amazon AppIntegrations to automatically ingest content.
         */
        appIntegrations?: outputs.wisdom.KnowledgeBaseAppIntegrationsConfiguration;
    }

}

export namespace workspaces {
    export interface ConnectionAliasAssociation {
        /**
         * The identifier of the AWS account that associated the connection alias with a directory.
         */
        associatedAccountId?: string;
        /**
         * The association status of the connection alias.
         */
        associationStatus?: enums.workspaces.ConnectionAliasAssociationAssociationStatus;
        /**
         * The identifier of the connection alias association. You use the connection identifier in the DNS TXT record when you're configuring your DNS routing policies.
         */
        connectionIdentifier?: string;
        /**
         * The identifier of the directory associated with a connection alias.
         */
        resourceId?: string;
    }

}

export namespace workspacesthinclient {
    export interface EnvironmentMaintenanceWindow {
        /**
         * The desired time zone maintenance window.
         */
        applyTimeOf?: enums.workspacesthinclient.EnvironmentMaintenanceWindowApplyTimeOf;
        /**
         * The date of maintenance window.
         */
        daysOfTheWeek?: enums.workspacesthinclient.EnvironmentDayOfWeek[];
        /**
         * The hour end time of maintenance window.
         */
        endTimeHour?: number;
        /**
         * The minute end time of maintenance window.
         */
        endTimeMinute?: number;
        /**
         * The hour start time of maintenance window.
         */
        startTimeHour?: number;
        /**
         * The minute start time of maintenance window.
         */
        startTimeMinute?: number;
        /**
         * The type of maintenance window.
         */
        type: enums.workspacesthinclient.EnvironmentMaintenanceWindowType;
    }

}

export namespace workspacesweb {
    export interface IpAccessSettingsIpRule {
        /**
         * The description of the IP rule.
         */
        description?: string;
        /**
         * A single IP address or an IP address range in CIDR notation
         */
        ipRange: string;
    }

    export interface UserSettingsCookieSpecification {
        /**
         * The domain of the cookie.
         */
        domain: string;
        /**
         * The name of the cookie.
         */
        name?: string;
        /**
         * The path of the cookie.
         */
        path?: string;
    }

    export interface UserSettingsCookieSynchronizationConfiguration {
        /**
         * The list of cookie specifications that are allowed to be synchronized to the remote browser.
         */
        allowlist: outputs.workspacesweb.UserSettingsCookieSpecification[];
        /**
         * The list of cookie specifications that are blocked from being synchronized to the remote browser.
         */
        blocklist?: outputs.workspacesweb.UserSettingsCookieSpecification[];
    }

}

export namespace xray {
    export interface GroupInsightsConfiguration {
        /**
         * Set the InsightsEnabled value to true to enable insights or false to disable insights.
         */
        insightsEnabled?: boolean;
        /**
         * Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.
         */
        notificationsEnabled?: boolean;
    }

    export interface SamplingRule {
        /**
         * Matches attributes derived from the request.
         */
        attributes?: {[key: string]: string};
        /**
         * The percentage of matching requests to instrument, after the reservoir is exhausted.
         */
        fixedRate: number;
        /**
         * Matches the hostname from a request URL.
         */
        host: string;
        /**
         * Matches the HTTP method from a request URL.
         */
        httpMethod: string;
        /**
         * The priority of the sampling rule.
         */
        priority: number;
        /**
         * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
         */
        reservoirSize: number;
        /**
         * Matches the ARN of the AWS resource on which the service runs.
         */
        resourceArn: string;
        /**
         * The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.
         *
         * > Specifying a sampling rule by name is recommended, as specifying by ARN will be deprecated in future.
         */
        ruleArn?: string;
        /**
         * The name of the sampling rule. Specify a rule by either name or ARN, but not both.
         */
        ruleName?: string;
        /**
         * Matches the name that the service uses to identify itself in segments.
         */
        serviceName: string;
        /**
         * Matches the origin that the service uses to identify its type in segments.
         */
        serviceType: string;
        /**
         * Matches the path from a request URL.
         */
        urlPath: string;
        /**
         * The version of the sampling rule format (1)
         */
        version?: number;
    }

    export interface SamplingRuleRecord {
        /**
         * When the rule was created, in Unix time seconds.
         */
        createdAt?: string;
        /**
         * When the rule was modified, in Unix time seconds.
         */
        modifiedAt?: string;
        samplingRule?: outputs.xray.SamplingRule;
    }

    export interface SamplingRuleUpdate {
        /**
         * Matches attributes derived from the request.
         */
        attributes?: {[key: string]: string};
        /**
         * The percentage of matching requests to instrument, after the reservoir is exhausted.
         */
        fixedRate?: number;
        /**
         * Matches the hostname from a request URL.
         */
        host?: string;
        /**
         * Matches the HTTP method from a request URL.
         */
        httpMethod?: string;
        /**
         * The priority of the sampling rule.
         */
        priority?: number;
        /**
         * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
         */
        reservoirSize?: number;
        /**
         * Matches the ARN of the AWS resource on which the service runs.
         */
        resourceArn?: string;
        ruleArn?: string;
        ruleName?: string;
        /**
         * Matches the name that the service uses to identify itself in segments.
         */
        serviceName?: string;
        /**
         * Matches the origin that the service uses to identify its type in segments.
         */
        serviceType?: string;
        /**
         * Matches the path from a request URL.
         */
        urlPath?: string;
    }

}
